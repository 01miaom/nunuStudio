{
    "project": {},
    "files": {
        "..\\source\\core\\input\\Key.js": {
            "name": "..\\source\\core\\input\\Key.js",
            "modules": {
                "Input": 1
            },
            "classes": {
                "Key": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\source\\core\\input\\Keyboard.js": {
            "name": "..\\source\\core\\input\\Keyboard.js",
            "modules": {},
            "classes": {
                "Keyboard": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\source\\core\\input\\Mouse.js": {
            "name": "..\\source\\core\\input\\Mouse.js",
            "modules": {},
            "classes": {
                "Mouse": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\source\\core\\objects\\audio\\AudioEmitter.js": {
            "name": "..\\source\\core\\objects\\audio\\AudioEmitter.js",
            "modules": {
                "Audio": 1
            },
            "classes": {
                "AudioEmitter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\source\\core\\objects\\audio\\PositionalAudio.js": {
            "name": "..\\source\\core\\objects\\audio\\PositionalAudio.js",
            "modules": {},
            "classes": {
                "PositionalAudio": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\source\\core\\objects\\cameras\\OrthographicCamera.js": {
            "name": "..\\source\\core\\objects\\cameras\\OrthographicCamera.js",
            "modules": {
                "Cameras": 1
            },
            "classes": {
                "OrthographicCamera": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\source\\core\\objects\\cameras\\PerspectiveCamera.js": {
            "name": "..\\source\\core\\objects\\cameras\\PerspectiveCamera.js",
            "modules": {},
            "classes": {
                "PerspectiveCamera": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\source\\core\\objects\\device\\KinectDevice.js": {
            "name": "..\\source\\core\\objects\\device\\KinectDevice.js",
            "modules": {
                "Devices": 1
            },
            "classes": {
                "KinectDevice": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\source\\core\\objects\\device\\LeapMotion.js": {
            "name": "..\\source\\core\\objects\\device\\LeapMotion.js",
            "modules": {},
            "classes": {
                "LeapMotion": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\source\\core\\objects\\lights\\AmbientLight.js": {
            "name": "..\\source\\core\\objects\\lights\\AmbientLight.js",
            "modules": {
                "Lights": 1
            },
            "classes": {
                "AmbientLight": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\source\\core\\objects\\lights\\DirectionalLight.js": {
            "name": "..\\source\\core\\objects\\lights\\DirectionalLight.js",
            "modules": {},
            "classes": {
                "DirectionalLight": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\source\\core\\objects\\lights\\HemisphereLight.js": {
            "name": "..\\source\\core\\objects\\lights\\HemisphereLight.js",
            "modules": {},
            "classes": {
                "HemisphereLight": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\source\\core\\objects\\lights\\PointLight.js": {
            "name": "..\\source\\core\\objects\\lights\\PointLight.js",
            "modules": {},
            "classes": {
                "PointLight": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\source\\core\\objects\\lights\\RectAreaLight.js": {
            "name": "..\\source\\core\\objects\\lights\\RectAreaLight.js",
            "modules": {},
            "classes": {
                "RectAreaLight": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\source\\core\\objects\\lights\\Sky.js": {
            "name": "..\\source\\core\\objects\\lights\\Sky.js",
            "modules": {},
            "classes": {
                "Sky": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\source\\core\\objects\\lights\\SpotLight.js": {
            "name": "..\\source\\core\\objects\\lights\\SpotLight.js",
            "modules": {},
            "classes": {
                "SpotLight": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\source\\core\\objects\\mesh\\Mesh.js": {
            "name": "..\\source\\core\\objects\\mesh\\Mesh.js",
            "modules": {
                "Meshes": 1
            },
            "classes": {
                "Mesh": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\source\\core\\objects\\mesh\\SkinnedMesh.js": {
            "name": "..\\source\\core\\objects\\mesh\\SkinnedMesh.js",
            "modules": {},
            "classes": {
                "SkinnedMesh": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\source\\core\\objects\\mesh\\Text3D.js": {
            "name": "..\\source\\core\\objects\\mesh\\Text3D.js",
            "modules": {},
            "classes": {
                "Text3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\source\\core\\objects\\misc\\Container.js": {
            "name": "..\\source\\core\\objects\\misc\\Container.js",
            "modules": {
                "Misc": 1
            },
            "classes": {
                "Container": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\source\\core\\objects\\particle\\ParticleEmitter.js": {
            "name": "..\\source\\core\\objects\\particle\\ParticleEmitter.js",
            "modules": {
                "Particles": 1
            },
            "classes": {
                "ParticleEmitter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\source\\core\\objects\\physics\\PhysicsObject.js": {
            "name": "..\\source\\core\\objects\\physics\\PhysicsObject.js",
            "modules": {},
            "classes": {
                "PhysicsObject": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\source\\core\\objects\\script\\Script.js": {
            "name": "..\\source\\core\\objects\\script\\Script.js",
            "modules": {
                "Script": 1
            },
            "classes": {
                "Script": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\source\\core\\objects\\spine\\SpineAnimation.js": {
            "name": "..\\source\\core\\objects\\spine\\SpineAnimation.js",
            "modules": {
                "Animations": 1
            },
            "classes": {
                "SpineAnimation": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\source\\core\\objects\\spine\\SpineTexture.js": {
            "name": "..\\source\\core\\objects\\spine\\SpineTexture.js",
            "modules": {},
            "classes": {
                "SpineTexture": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\source\\core\\objects\\sprite\\Sprite.js": {
            "name": "..\\source\\core\\objects\\sprite\\Sprite.js",
            "modules": {
                "Sprite": 1
            },
            "classes": {
                "Sprite": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\source\\core\\objects\\Program.js": {
            "name": "..\\source\\core\\objects\\Program.js",
            "modules": {
                "Core": 1
            },
            "classes": {
                "Program": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\source\\core\\objects\\Scene.js": {
            "name": "..\\source\\core\\objects\\Scene.js",
            "modules": {},
            "classes": {
                "Scene": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\source\\core\\resources\\Audio.js": {
            "name": "..\\source\\core\\resources\\Audio.js",
            "modules": {
                "Resources": 1
            },
            "classes": {
                "Audio": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\source\\core\\resources\\Font.js": {
            "name": "..\\source\\core\\resources\\Font.js",
            "modules": {},
            "classes": {
                "Font": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\source\\core\\resources\\Image.js": {
            "name": "..\\source\\core\\resources\\Image.js",
            "modules": {},
            "classes": {
                "Image": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\source\\core\\resources\\Resource.js": {
            "name": "..\\source\\core\\resources\\Resource.js",
            "modules": {},
            "classes": {
                "Resource": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\source\\core\\resources\\ResourceManager.js": {
            "name": "..\\source\\core\\resources\\ResourceManager.js",
            "modules": {},
            "classes": {
                "ResourceManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\source\\core\\resources\\Video.js": {
            "name": "..\\source\\core\\resources\\Video.js",
            "modules": {},
            "classes": {
                "Video": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\source\\core\\texture\\CanvasTexture.js": {
            "name": "..\\source\\core\\texture\\CanvasTexture.js",
            "modules": {
                "Textures": 1
            },
            "classes": {
                "CanvasTexture": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\source\\core\\texture\\CubeTexture.js": {
            "name": "..\\source\\core\\texture\\CubeTexture.js",
            "modules": {},
            "classes": {
                "CubeTexture": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\source\\core\\texture\\Texture.js": {
            "name": "..\\source\\core\\texture\\Texture.js",
            "modules": {},
            "classes": {
                "Texture": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\source\\core\\texture\\VideoTexture.js": {
            "name": "..\\source\\core\\texture\\VideoTexture.js",
            "modules": {},
            "classes": {
                "VideoTexture": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\source\\core\\texture\\WebcamTexture.js": {
            "name": "..\\source\\core\\texture\\WebcamTexture.js",
            "modules": {},
            "classes": {
                "WebcamTexture": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\source\\core\\three\\Fog.js": {
            "name": "..\\source\\core\\three\\Fog.js",
            "modules": {
                "THREE": 1
            },
            "classes": {
                "Fog": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\source\\core\\three\\Material.js": {
            "name": "..\\source\\core\\three\\Material.js",
            "modules": {},
            "classes": {
                "Material": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\source\\core\\three\\MultiMaterial.js": {
            "name": "..\\source\\core\\three\\MultiMaterial.js",
            "modules": {},
            "classes": {
                "MultiMaterial": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\source\\core\\three\\Object3D.js": {
            "name": "..\\source\\core\\three\\Object3D.js",
            "modules": {},
            "classes": {
                "Object3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\source\\core\\utils\\ArraybufferUtils.js": {
            "name": "..\\source\\core\\utils\\ArraybufferUtils.js",
            "modules": {
                "BinaryData": 1
            },
            "classes": {
                "ArraybufferUtils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\source\\core\\utils\\Base64Utils.js": {
            "name": "..\\source\\core\\utils\\Base64Utils.js",
            "modules": {},
            "classes": {
                "Base64Utils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\source\\core\\utils\\BufferUtils.js": {
            "name": "..\\source\\core\\utils\\BufferUtils.js",
            "modules": {},
            "classes": {
                "BufferUtils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\source\\core\\utils\\Mesh2shape.js": {
            "name": "..\\source\\core\\utils\\Mesh2shape.js",
            "modules": {
                "Physics": 1
            },
            "classes": {
                "Mesh2shape": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\source\\core\\utils\\ObjectUtils.js": {
            "name": "..\\source\\core\\utils\\ObjectUtils.js",
            "modules": {},
            "classes": {
                "ObjectUtils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\source\\core\\FileSystem.js": {
            "name": "..\\source\\core\\FileSystem.js",
            "modules": {
                "Files": 1
            },
            "classes": {
                "FileSystem": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "Input": {
            "name": "Input",
            "submodules": {},
            "elements": {},
            "classes": {
                "Key": 1,
                "Keyboard": 1,
                "Mouse": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "..\\source\\core\\input\\Mouse.js",
            "line": 3,
            "description": "Key is used by Keyboard, Mouse, etc, to represent a key state"
        },
        "Audio": {
            "name": "Audio",
            "submodules": {},
            "elements": {},
            "classes": {
                "AudioEmitter": 1,
                "PositionalAudio": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "..\\source\\core\\objects\\audio\\PositionalAudio.js",
            "line": 3,
            "description": "AudioEmitter is a Object3D used to play audio inside the scene"
        },
        "Cameras": {
            "name": "Cameras",
            "submodules": {},
            "elements": {},
            "classes": {
                "OrthographicCamera": 1,
                "PerspectiveCamera": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "..\\source\\core\\objects\\cameras\\PerspectiveCamera.js",
            "line": 3,
            "description": "Orthographic Camera is used for 2D like image projection\nBased on THREE.OrthographicCamera, original documentation available at https://threejs.org/docs/index.html#Reference/Cameras/OrthographicCamera"
        },
        "Devices": {
            "name": "Devices",
            "submodules": {},
            "elements": {},
            "classes": {
                "KinectDevice": 1,
                "LeapMotion": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 3,
            "description": "Kinect device object\nThis object is used to connect nunuStudio to a Microsoft Kinect v1, it only works in Microsoft Windows.\nThe operation of the kinect object depends on a server program used to connect to kinect that sends the data to nunuStudio via WebSocket.\nThe server software is available inside the tools folder in the nunuStudio repository."
        },
        "Lights": {
            "name": "Lights",
            "submodules": {},
            "elements": {},
            "classes": {
                "AmbientLight": 1,
                "DirectionalLight": 1,
                "HemisphereLight": 1,
                "PointLight": 1,
                "RectAreaLight": 1,
                "Sky": 1,
                "SpotLight": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "..\\source\\core\\objects\\lights\\SpotLight.js",
            "line": 3,
            "description": "Same as THREE.AmbientLight documentation for the object can be found at https://threejs.org/docs/index.html#Reference/Lights/AmbientLight"
        },
        "Meshes": {
            "name": "Meshes",
            "submodules": {},
            "elements": {},
            "classes": {
                "Mesh": 1,
                "SkinnedMesh": 1,
                "Text3D": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "..\\source\\core\\objects\\mesh\\Text3D.js",
            "line": 3,
            "description": "Meshs are used to combine a geometry and a material forming a complete rederizable object\nBased on THREE.Mesh documentation for the object can be found at https://threejs.org/docs/index.html#Reference/Objects/Mesh"
        },
        "Misc": {
            "name": "Misc",
            "submodules": {},
            "elements": {},
            "classes": {
                "Container": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "..\\source\\core\\objects\\misc\\Container.js",
            "line": 3,
            "description": "Containers are used to group objects together"
        },
        "Particles": {
            "name": "Particles",
            "submodules": {},
            "elements": {},
            "classes": {
                "ParticleEmitter": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "..\\source\\core\\objects\\particle\\ParticleEmitter.js",
            "line": 3,
            "description": "Particle emitter is a wrapper for SPE particle systems\nDocumentation for SPE particle engine can be found here https://squarefeet.github.io/ShaderParticleEngine/docs/api/index.html"
        },
        "Physics": {
            "name": "Physics",
            "submodules": {
                "undefined": 1
            },
            "elements": {},
            "classes": {
                "Mesh2shape": 1,
                "PhysicsObject": 1,
                "ObjectUtils": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "..\\source\\core\\utils\\ObjectUtils.js",
            "line": 3,
            "description": "Mesh2shape is used to convert ThreeJS objects to CannonJS shapes\nIt is based on the original Mesh2Shape converted by @donmccurdy"
        },
        "Script": {
            "name": "Script",
            "submodules": {},
            "elements": {},
            "classes": {
                "Script": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "..\\source\\core\\objects\\script\\Script.js",
            "line": 1,
            "description": "Script objects are used to control other objects present in the scene\nIt can access and change every object in the program and supports some events\n - initialize\n   - Called on app initialization\n - update\n   - Called on every frame (after the frame is rendered)\n - onMouseOver\n   - Called on every frame if mouse is on top of one of the script children\n - onResize\n   - Called every time the window is resized\n - onAppData\n   - Called when receiving data sent by the host website\n\nCode written inside scripts have access to the following attributes\n - scene\n - program\n - self\n   - Same as this reference but global in the script scope\n - Keyboard\n - Mouse"
        },
        "Animations": {
            "name": "Animations",
            "submodules": {},
            "elements": {},
            "classes": {
                "SpineAnimation": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "..\\source\\core\\objects\\spine\\SpineAnimation.js",
            "line": 3,
            "description": "Spine animation object, to used with animation produced inside Esoteric spine\nBased on the official threejs runtime\nMore information abou spine available here www.esotericsoftware.com"
        },
        "Textures": {
            "name": "Textures",
            "submodules": {},
            "elements": {},
            "classes": {
                "CanvasTexture": 1,
                "SpineTexture": 1,
                "CubeTexture": 1,
                "Texture": 1,
                "VideoTexture": 1,
                "WebcamTexture": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "..\\source\\core\\texture\\WebcamTexture.js",
            "line": 3,
            "description": "Canvas textures can be used to draw content to the texture during runtime\nCanvas textures always start with black background and a red text \"Canvas Texture\""
        },
        "Sprite": {
            "name": "Sprite",
            "submodules": {},
            "elements": {},
            "classes": {
                "Sprite": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "..\\source\\core\\objects\\sprite\\Sprite.js",
            "line": 3,
            "description": "Sprites allways face the screen are used for 2D elements\nBased on THREE.Sprite documentation for the object can be found at https://threejs.org/docs/index.html#Reference/Objects/Sprite"
        },
        "Core": {
            "name": "Core",
            "submodules": {},
            "elements": {},
            "classes": {
                "Program": 1,
                "Scene": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "..\\source\\core\\objects\\Scene.js",
            "line": 3,
            "description": "Program class contains all the data of a nunuStudio program\nProgram is also used to store and manage all available resources"
        },
        "Resources": {
            "name": "Resources",
            "submodules": {},
            "elements": {},
            "classes": {
                "Audio": 1,
                "Font": 1,
                "Image": 1,
                "Resource": 1,
                "ResourceManager": 1,
                "Video": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "..\\source\\core\\resources\\Video.js",
            "line": 3,
            "description": "Audio class is used to store audio data as a arraybuffer to be later used by objects with the WebAudio API"
        },
        "THREE": {
            "name": "THREE",
            "submodules": {},
            "elements": {},
            "classes": {
                "Fog": 1,
                "Material": 1,
                "MultiMaterial": 1,
                "Object3D": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "..\\source\\core\\three\\Object3D.js",
            "line": 3,
            "description": "Fog class is used to store fog attributes attached to a Scene\nOriginal documentation for linear fog available here https://threejs.org/docs/index.html#Reference/Scenes/Fog and for exponential fog here https://threejs.org/docs/index.html#Reference/Scenes/FogExp2"
        },
        "BinaryData": {
            "name": "BinaryData",
            "submodules": {},
            "elements": {},
            "classes": {
                "ArraybufferUtils": 1,
                "Base64Utils": 1,
                "BufferUtils": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "..\\source\\core\\utils\\BufferUtils.js",
            "line": 3,
            "description": "ArraybufferUtils contains methods to convert from and to ArrayBuffer binary format"
        },
        "Files": {
            "name": "Files",
            "submodules": {},
            "elements": {},
            "classes": {
                "FileSystem": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "..\\source\\core\\FileSystem.js",
            "line": 3,
            "description": "FileSystem is used to read and write files using nunuStudio\nSome operations are platform specific and might not work everywhere",
            "static": 1
        }
    },
    "classes": {
        "Key": {
            "name": "Key",
            "shortname": "Key",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Input",
            "file": "..\\source\\core\\input\\Key.js",
            "line": 3,
            "description": "Key is used by Keyboard, Mouse, etc, to represent a key state",
            "is_constructor": 1
        },
        "Keyboard": {
            "name": "Keyboard",
            "shortname": "Keyboard",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Input",
            "namespace": "",
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 3,
            "description": "Keyboard instance for input in sync with the running 3D application, is updated automatically by the runtime handler",
            "is_constructor": 1
        },
        "Mouse": {
            "name": "Mouse",
            "shortname": "Mouse",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Input",
            "namespace": "",
            "file": "..\\source\\core\\input\\Mouse.js",
            "line": 3,
            "description": "Mouse instance for input in sync with the running 3D application, is updated automatically by the runtime handler",
            "is_constructor": 1
        },
        "AudioEmitter": {
            "name": "AudioEmitter",
            "shortname": "AudioEmitter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Audio",
            "namespace": "",
            "file": "..\\source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 3,
            "description": "AudioEmitter is a Object3D used to play audio inside the scene",
            "params": [
                {
                    "name": "audio",
                    "description": "Audio used by this emitter",
                    "type": "Audio"
                }
            ],
            "extends": "{Audio}",
            "is_constructor": 1
        },
        "PositionalAudio": {
            "name": "PositionalAudio",
            "shortname": "PositionalAudio",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Audio",
            "namespace": "",
            "file": "..\\source\\core\\objects\\audio\\PositionalAudio.js",
            "line": 3,
            "description": "PositionalAudio is used to play audio with positional audio effect",
            "params": [
                {
                    "name": "audio",
                    "description": "Audio used by this emitter",
                    "type": "Audio"
                }
            ],
            "extends": "{PositionalAudio}",
            "is_constructor": 1
        },
        "OrthographicCamera": {
            "name": "OrthographicCamera",
            "shortname": "OrthographicCamera",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Cameras",
            "namespace": "",
            "file": "..\\source\\core\\objects\\cameras\\OrthographicCamera.js",
            "line": 3,
            "description": "Orthographic Camera is used for 2D like image projection\nBased on THREE.OrthographicCamera, original documentation available at https://threejs.org/docs/index.html#Reference/Cameras/OrthographicCamera",
            "is_constructor": 1,
            "extends": "{OrthographicCamera}",
            "params": [
                {
                    "name": "size",
                    "description": "Camera size relative to resize mode",
                    "type": "Number"
                },
                {
                    "name": "aspect",
                    "description": "Aspect ratio X/Y",
                    "type": "Number"
                },
                {
                    "name": "mode",
                    "description": "Camera resize mode (RESIZE_HORIZONTAL or RESIZE_VERTICAL)",
                    "type": "Number"
                },
                {
                    "name": "near",
                    "description": "Near projection plane",
                    "type": "Number"
                },
                {
                    "name": "far",
                    "description": "Far projection plane",
                    "type": "Number"
                }
            ]
        },
        "PerspectiveCamera": {
            "name": "PerspectiveCamera",
            "shortname": "PerspectiveCamera",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Cameras",
            "namespace": "",
            "file": "..\\source\\core\\objects\\cameras\\PerspectiveCamera.js",
            "line": 3,
            "description": "Perspective camera\nBased on THREE.PerspectiveCamera, original documentation available at https://threejs.org/docs/index.html#Reference/Cameras/PerspectiveCamera",
            "extends": "{PerspectiveCamera}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "fov",
                    "description": "Field of view",
                    "type": "Number"
                },
                {
                    "name": "aspect",
                    "description": "Aspect ratio",
                    "type": "Number"
                },
                {
                    "name": "near",
                    "description": "Near projection plane (how closer can be objects visible by this camera)",
                    "type": "Number"
                },
                {
                    "name": "far",
                    "description": "Far projection plane (how far can be objects visible by this camera)",
                    "type": "Number"
                }
            ]
        },
        "KinectDevice": {
            "name": "KinectDevice",
            "shortname": "KinectDevice",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Devices",
            "namespace": "",
            "file": "..\\source\\core\\objects\\device\\KinectDevice.js",
            "line": 3,
            "description": "Kinect device object\nThis object is used to connect nunuStudio to a Microsoft Kinect v1, it only works in Microsoft Windows.\nThe operation of the kinect object depends on a server program used to connect to kinect that sends the data to nunuStudio via WebSocket.\nThe server software is available inside the tools folder in the nunuStudio repository.",
            "extends": "{Object3D}",
            "is_constructor": 1
        },
        "LeapMotion": {
            "name": "LeapMotion",
            "shortname": "LeapMotion",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Devices",
            "namespace": "",
            "file": "..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 3,
            "description": "Leap device object based on the official LeapJS runtime\nUsed to connect nunuStudio to a leap motion hand tracker, works on Windows and OSX",
            "is_constructor": 1,
            "extends": "{Object3D}"
        },
        "AmbientLight": {
            "name": "AmbientLight",
            "shortname": "AmbientLight",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights",
            "namespace": "",
            "file": "..\\source\\core\\objects\\lights\\AmbientLight.js",
            "line": 3,
            "description": "Same as THREE.AmbientLight documentation for the object can be found at https://threejs.org/docs/index.html#Reference/Lights/AmbientLight",
            "params": [
                {
                    "name": "hex",
                    "description": "Light color in hex RGB",
                    "type": "Number"
                }
            ],
            "extends": "{AmbientLight}",
            "is_constructor": 1
        },
        "DirectionalLight": {
            "name": "DirectionalLight",
            "shortname": "DirectionalLight",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights",
            "namespace": "",
            "file": "..\\source\\core\\objects\\lights\\DirectionalLight.js",
            "line": 3,
            "description": "Same as THREE.DirectionalLight documentation for the object can be found at https://threejs.org/docs/index.html#Reference/Lights/DirectionalLight",
            "params": [
                {
                    "name": "hex",
                    "description": "Light color in hex RGB",
                    "type": "Number"
                },
                {
                    "name": "intensity",
                    "description": "Light intensity",
                    "type": "Number"
                }
            ],
            "extends": "{DirectionalLight}",
            "is_constructor": 1
        },
        "HemisphereLight": {
            "name": "HemisphereLight",
            "shortname": "HemisphereLight",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights",
            "namespace": "",
            "file": "..\\source\\core\\objects\\lights\\HemisphereLight.js",
            "line": 3,
            "description": "Same as THREE.HemisphereLight documentation for the object can be found at https://threejs.org/docs/index.html#Reference/Lights/HemisphereLight",
            "params": [
                {
                    "name": "skyColor",
                    "description": "Sky light color in hex RGB",
                    "type": "Number"
                },
                {
                    "name": "groundColor",
                    "description": "Ground light color in hex RGB",
                    "type": "Number"
                },
                {
                    "name": "intensity",
                    "description": "Light intensity",
                    "type": "Number"
                }
            ],
            "extends": "{HemisphereLight}",
            "is_constructor": 1
        },
        "PointLight": {
            "name": "PointLight",
            "shortname": "PointLight",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights",
            "namespace": "",
            "file": "..\\source\\core\\objects\\lights\\PointLight.js",
            "line": 3,
            "description": "Same as THREE.PointLight documentation for the object can be found at https://threejs.org/docs/index.html#Reference/Lights/PointLight",
            "params": [
                {
                    "name": "hex",
                    "description": "Light color in hex RGB",
                    "type": "Number"
                },
                {
                    "name": "intensity",
                    "description": "Light intensity",
                    "type": "Number"
                },
                {
                    "name": "distance",
                    "description": "Maximum PointLight range",
                    "type": "Number"
                },
                {
                    "name": "decay",
                    "description": "",
                    "type": "Number"
                }
            ],
            "extends": "{PointLight}",
            "is_constructor": 1
        },
        "RectAreaLight": {
            "name": "RectAreaLight",
            "shortname": "RectAreaLight",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights",
            "namespace": "",
            "file": "..\\source\\core\\objects\\lights\\RectAreaLight.js",
            "line": 3,
            "description": "Same as THREE.RectAreaLight documentation for the object can be found at https://threejs.org/docs/index.html#Reference/Lights/RectAreaLight",
            "params": [
                {
                    "name": "color",
                    "description": "Light color in hex RGB",
                    "type": "Number"
                },
                {
                    "name": "intensity",
                    "description": "Light intensity",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                }
            ],
            "extends": "{RectAreaLight}",
            "is_constructor": 1
        },
        "Sky": {
            "name": "Sky",
            "shortname": "Sky",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights",
            "namespace": "",
            "file": "..\\source\\core\\objects\\lights\\Sky.js",
            "line": 3,
            "description": "Sky class if composed of a HemisphereLight, DirectionalLight and a dynamic generated Sky sphere geometry.\nThis object was by default 3 internal hidden children\n\t- Hemisphere light\n\t- Directional Light\n\t- Mesh",
            "params": [
                {
                    "name": "autoUpdate",
                    "description": "If true sky auto updated its state",
                    "type": "Boolean"
                },
                {
                    "name": "dayTime",
                    "description": "Day duration in seconds",
                    "type": "Number"
                },
                {
                    "name": "sunDistance",
                    "description": "Distance of the sun",
                    "type": "Number"
                },
                {
                    "name": "time",
                    "description": "Starting time",
                    "type": "Number"
                }
            ],
            "extends": "{Object3D}",
            "is_constructor": 1
        },
        "SpotLight": {
            "name": "SpotLight",
            "shortname": "SpotLight",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights",
            "namespace": "",
            "file": "..\\source\\core\\objects\\lights\\SpotLight.js",
            "line": 3,
            "description": "Same as THREE.SpotLight documentation for the object can be found at https://threejs.org/docs/index.html#Reference/Lights/SpotLight",
            "params": [
                {
                    "name": "color",
                    "description": "Light color in hex RGB",
                    "type": "Number"
                },
                {
                    "name": "intensity",
                    "description": "Light intensity",
                    "type": "Number"
                },
                {
                    "name": "distance",
                    "description": "SpotLight maximum range",
                    "type": "Number"
                },
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "exponent",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "decay",
                    "description": "",
                    "type": "Number"
                }
            ],
            "extends": "{SpotLight}",
            "is_constructor": 1
        },
        "Mesh": {
            "name": "Mesh",
            "shortname": "Mesh",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Meshes",
            "namespace": "",
            "file": "..\\source\\core\\objects\\mesh\\Mesh.js",
            "line": 3,
            "description": "Meshs are used to combine a geometry and a material forming a complete rederizable object\nBased on THREE.Mesh documentation for the object can be found at https://threejs.org/docs/index.html#Reference/Objects/Mesh",
            "params": [
                {
                    "name": "geometry",
                    "description": "Geometry used by this mesh",
                    "type": "Geometry"
                },
                {
                    "name": "material",
                    "description": "Material used to shade the superficie of the geometry",
                    "type": "Material"
                }
            ],
            "is_constructor": 1,
            "extends": "{Mesh}"
        },
        "SkinnedMesh": {
            "name": "SkinnedMesh",
            "shortname": "SkinnedMesh",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Meshes",
            "namespace": "",
            "file": "..\\source\\core\\objects\\mesh\\SkinnedMesh.js",
            "line": 3,
            "description": "A mesh that has a Skeleton with bones that can then be used to animate the vertices of the geometry.\nBased on THREE.SkinnedMesh documentation for the object can be found at https://threejs.org/docs/index.html#Reference/Objects/SkinnedMesh",
            "params": [
                {
                    "name": "geometry",
                    "description": "Geometry used by this mesh",
                    "type": "Geometry"
                },
                {
                    "name": "material",
                    "description": "Material used to shade the superficie of the geometry",
                    "type": "Material"
                }
            ],
            "is_constructor": 1,
            "extends": "{SkinnedMesh}"
        },
        "Text3D": {
            "name": "Text3D",
            "shortname": "Text3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Meshes",
            "namespace": "",
            "file": "..\\source\\core\\objects\\mesh\\Text3D.js",
            "line": 3,
            "description": "Special mesh type used to draw 3D text\nIt receives a Font resource that is used to triangulate and extrude font data into a 3D mesh",
            "params": [
                {
                    "name": "text",
                    "description": "Text to be draw",
                    "type": "String"
                },
                {
                    "name": "material",
                    "description": "Material used to shade the superficie of the geometry",
                    "type": "Material"
                },
                {
                    "name": "font",
                    "description": "Font",
                    "type": "Font"
                },
                {
                    "name": "height",
                    "description": "Text height",
                    "type": "Number"
                },
                {
                    "name": "bevel",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "bevelThickness",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "size",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "curveSegments",
                    "description": "",
                    "type": "Number"
                }
            ],
            "is_constructor": 1,
            "extends": "{Mesh}"
        },
        "Container": {
            "name": "Container",
            "shortname": "Container",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Misc",
            "namespace": "",
            "file": "..\\source\\core\\objects\\misc\\Container.js",
            "line": 3,
            "description": "Containers are used to group objects together",
            "is_constructor": 1,
            "extends": "{Object3D}"
        },
        "ParticleEmitter": {
            "name": "ParticleEmitter",
            "shortname": "ParticleEmitter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Particles",
            "namespace": "",
            "file": "..\\source\\core\\objects\\particle\\ParticleEmitter.js",
            "line": 3,
            "description": "Particle emitter is a wrapper for SPE particle systems\nDocumentation for SPE particle engine can be found here https://squarefeet.github.io/ShaderParticleEngine/docs/api/index.html",
            "is_constructor": 1,
            "extends": "{Points}"
        },
        "PhysicsObject": {
            "name": "PhysicsObject",
            "shortname": "PhysicsObject",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Physics",
            "namespace": "",
            "file": "..\\source\\core\\objects\\physics\\PhysicsObject.js",
            "line": 3,
            "description": "Wrapper for cannon.js Body physics objects\nPhysics coordinates are always calculated in local space, they should always be placed directly inside the scene or inside containers without any offset\nnunuStudio includes tools to create cannon shapes from three geometry objects\nDocumentation for cannon.js physics available here http://schteppe.github.io/cannon.js/docs/",
            "is_constructor": 1,
            "extends": "{Object3D}"
        },
        "Script": {
            "name": "Script",
            "shortname": "Script",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Script",
            "namespace": "",
            "file": "..\\source\\core\\objects\\script\\Script.js",
            "line": 1,
            "description": "Script objects are used to control other objects present in the scene\nIt can access and change every object in the program and supports some events\n - initialize\n   - Called on app initialization\n - update\n   - Called on every frame (after the frame is rendered)\n - onMouseOver\n   - Called on every frame if mouse is on top of one of the script children\n - onResize\n   - Called every time the window is resized\n - onAppData\n   - Called when receiving data sent by the host website\n\nCode written inside scripts have access to the following attributes\n - scene\n - program\n - self\n   - Same as this reference but global in the script scope\n - Keyboard\n - Mouse",
            "extends": "{Object}",
            "params": [
                {
                    "name": "code",
                    "description": "Javascript code to be used by this script",
                    "type": "String"
                }
            ]
        },
        "SpineAnimation": {
            "name": "SpineAnimation",
            "shortname": "SpineAnimation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Animations",
            "namespace": "",
            "file": "..\\source\\core\\objects\\spine\\SpineAnimation.js",
            "line": 3,
            "description": "Spine animation object, to used with animation produced inside Esoteric spine\nBased on the official threejs runtime\nMore information abou spine available here www.esotericsoftware.com",
            "is_constructor": 1,
            "extends": "{Mesh}",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "atlas",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "textures",
                    "description": "",
                    "type": "Array"
                }
            ]
        },
        "SpineTexture": {
            "name": "SpineTexture",
            "shortname": "SpineTexture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Textures",
            "namespace": "",
            "file": "..\\source\\core\\objects\\spine\\SpineTexture.js",
            "line": 3,
            "description": "Spine animation textures\nBased on SpineTexture from original spine runtime for three.js",
            "is_constructor": 1,
            "params": [
                {
                    "name": "texture",
                    "description": "",
                    "type": "Texture"
                }
            ]
        },
        "Sprite": {
            "name": "Sprite",
            "shortname": "Sprite",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Sprite",
            "namespace": "",
            "file": "..\\source\\core\\objects\\sprite\\Sprite.js",
            "line": 3,
            "description": "Sprites allways face the screen are used for 2D elements\nBased on THREE.Sprite documentation for the object can be found at https://threejs.org/docs/index.html#Reference/Objects/Sprite",
            "params": [
                {
                    "name": "material",
                    "description": "Material used to draw sprites",
                    "type": "Material"
                }
            ],
            "is_constructor": 1,
            "extends": "{Script}"
        },
        "Program": {
            "name": "Program",
            "shortname": "Program",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "",
            "file": "..\\source\\core\\objects\\Program.js",
            "line": 3,
            "description": "Program class contains all the data of a nunuStudio program\nProgram is also used to store and manage all available resources",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "Program name",
                    "type": "String"
                }
            ],
            "extends": "{ResourceManager}"
        },
        "Scene": {
            "name": "Scene",
            "shortname": "Scene",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "",
            "file": "..\\source\\core\\objects\\Scene.js",
            "line": 3,
            "description": "Scenes allow you to set up what and where is to be rendered by three.js. This is where you place objects, lights and cameras.\nScene original documentation available here https://threejs.org/docs/index.html#Reference/Scenes/Scene",
            "is_constructor": 1,
            "extends": "{Scene}"
        },
        "Audio": {
            "name": "Audio",
            "shortname": "Audio",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Resources",
            "namespace": "",
            "file": "..\\source\\core\\resources\\Audio.js",
            "line": 3,
            "description": "Audio class is used to store audio data as a arraybuffer to be later used by objects with the WebAudio API",
            "extends": "{Resource}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "url",
                    "description": "URL to Audio file",
                    "type": "String"
                }
            ]
        },
        "Font": {
            "name": "Font",
            "shortname": "Font",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Resources",
            "namespace": "",
            "file": "..\\source\\core\\resources\\Font.js",
            "line": 3,
            "description": "Font class stores font data, font data can be stored as an opentype json or as a TTF file (stored in Base64)\nFont objects are used for booth 2D and 3D text",
            "is_constructor": 1,
            "extends": "{Resource}",
            "params": [
                {
                    "name": "url",
                    "description": "URL to font file",
                    "type": "String"
                }
            ]
        },
        "Image": {
            "name": "Image",
            "shortname": "Image",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Resources",
            "namespace": "",
            "file": "..\\source\\core\\resources\\Image.js",
            "line": 3,
            "description": "Image class is used to store image data that is used to create Textures\nImages can be stored in mutiple formats but on serialization images are converted to JPEG if they are opaque or to PNG if they are transparent\nGIF images are never converted to prevert animation capabilities",
            "is_constructor": 1,
            "extends": "{Resource}",
            "params": [
                {
                    "name": "url",
                    "description": "URL to image",
                    "type": "String"
                }
            ]
        },
        "Resource": {
            "name": "Resource",
            "shortname": "Resource",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Resources",
            "namespace": "",
            "file": "..\\source\\core\\resources\\Resource.js",
            "line": 3,
            "description": "Resource class is used to represent resources\nResources store data that is used by objects",
            "is_constructor": 1
        },
        "ResourceManager": {
            "name": "ResourceManager",
            "shortname": "ResourceManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Resources",
            "namespace": "",
            "file": "..\\source\\core\\resources\\ResourceManager.js",
            "line": 3,
            "description": "Resource manager is used to manage available resources used by objects\nThe resource manager is used to extend the Program object and is not designed to be used as a standalone\nThe manager is used to manage the following types of resources\n - Images\n - Videos\n - Audio\n - Fonts\n - Textures\n - Materials\n - Geometries",
            "is_constructor": 1
        },
        "Video": {
            "name": "Video",
            "shortname": "Video",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Resources",
            "namespace": "",
            "file": "..\\source\\core\\resources\\Video.js",
            "line": 3,
            "description": "Video resources are used to store video data in base64",
            "is_constructor": 1,
            "extends": "{Resource}",
            "params": [
                {
                    "name": "url",
                    "description": "URL to video file",
                    "type": "String"
                }
            ]
        },
        "CanvasTexture": {
            "name": "CanvasTexture",
            "shortname": "CanvasTexture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Textures",
            "namespace": "",
            "file": "..\\source\\core\\texture\\CanvasTexture.js",
            "line": 3,
            "description": "Canvas textures can be used to draw content to the texture during runtime\nCanvas textures always start with black background and a red text \"Canvas Texture\"",
            "is_constructor": 1,
            "extends": "{Texture}",
            "params": [
                {
                    "name": "width",
                    "description": "Canvas width",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "Canvas height",
                    "type": "Number"
                },
                {
                    "name": "mapping",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "wrapS",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "wrapT",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "magFilter",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "minFilter",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "format",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "anisotropy",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "encoding",
                    "description": "",
                    "type": "Number"
                }
            ]
        },
        "CubeTexture": {
            "name": "CubeTexture",
            "shortname": "CubeTexture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Textures",
            "namespace": "",
            "file": "..\\source\\core\\texture\\CubeTexture.js",
            "line": 3,
            "description": "CubeTextures represent 360 view using six images, these images correspond to the faces of a cube\nCubeTextures can be used to simulate reflections and transparency refraction in materials\nIs also possible to create dynamic cubetextures using the CubeCamera object",
            "is_constructor": 1,
            "extends": "{Texture}",
            "params": [
                {
                    "name": "images",
                    "description": "Image array with 6 images",
                    "type": "Array"
                },
                {
                    "name": "mapping",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "wrapS",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "wrapT",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "magFilter",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "minFilter",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "format",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "anisotropy",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "encoding",
                    "description": "",
                    "type": "Number"
                }
            ]
        },
        "Texture": {
            "name": "Texture",
            "shortname": "Texture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Textures",
            "namespace": "",
            "file": "..\\source\\core\\texture\\Texture.js",
            "line": 3,
            "description": "Image texture constructor, supports GIF animations.\nIt is based on THREE.Texture, original documentation can be found here https://threejs.org/docs/index.html#Reference/Textures/Texture",
            "is_constructor": 1,
            "extends": "{Texture}",
            "params": [
                {
                    "name": "image",
                    "description": "",
                    "type": "Image"
                },
                {
                    "name": "mapping",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "wrapS",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "wrapT",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "magFilter",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "minFilter",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "format",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "anisotropy",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "encoding",
                    "description": "",
                    "type": "Number"
                }
            ]
        },
        "VideoTexture": {
            "name": "VideoTexture",
            "shortname": "VideoTexture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Textures",
            "namespace": "",
            "file": "..\\source\\core\\texture\\VideoTexture.js",
            "line": 3,
            "description": "Video texture, uses a video DOM element instead of a img element, it is smilar to THREE.VideoTexture\nVideoTexture also provides methods for playback control",
            "is_constructor": 1,
            "extends": "{Texture}",
            "params": [
                {
                    "name": "video",
                    "description": "",
                    "type": "Video"
                },
                {
                    "name": "mapping",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "wrapS",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "wrapT",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "anisotropy",
                    "description": "",
                    "type": "Number"
                }
            ]
        },
        "WebcamTexture": {
            "name": "WebcamTexture",
            "shortname": "WebcamTexture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Textures",
            "namespace": "",
            "file": "..\\source\\core\\texture\\WebcamTexture.js",
            "line": 3,
            "description": "Webcam texture is used to capture and display video from a webcam in real-time\nIt uses WebRTC, the host must support it, otherwise WebcamTexture will display a black image",
            "is_constructor": 1,
            "extends": "{Texture}",
            "params": [
                {
                    "name": "mapping",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "wrapS",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "wrapT",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "anisotropy",
                    "description": "",
                    "type": "Number"
                }
            ]
        },
        "Fog": {
            "name": "Fog",
            "shortname": "Fog",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "THREE",
            "namespace": "",
            "file": "..\\source\\core\\three\\Fog.js",
            "line": 3,
            "description": "Fog class is used to store fog attributes attached to a Scene\nOriginal documentation for linear fog available here https://threejs.org/docs/index.html#Reference/Scenes/Fog and for exponential fog here https://threejs.org/docs/index.html#Reference/Scenes/FogExp2"
        },
        "Material": {
            "name": "Material",
            "shortname": "Material",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "THREE",
            "namespace": "",
            "file": "..\\source\\core\\three\\Material.js",
            "line": 3,
            "description": "Materials describe the appearance of objects. They are defined in a (mostly) renderer-independent way, so you don't have to rewrite materials if you decide to use a different renderer.\nOriginal documentation available here https://threejs.org/docs/index.html#Reference/Materials/Material"
        },
        "MultiMaterial": {
            "name": "MultiMaterial",
            "shortname": "MultiMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "THREE",
            "namespace": "",
            "file": "..\\source\\core\\three\\MultiMaterial.js",
            "line": 3,
            "description": "A Material to define multiple materials for the same geometry. The geometry decides which material is used for which faces by the faces materialindex. The material index corresponds with the index of the material in the .materials array.\nOriginal documentation available here https://threejs.org/docs/index.html#Reference/Materials/MultiMaterial"
        },
        "Object3D": {
            "name": "Object3D",
            "shortname": "Object3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "THREE",
            "namespace": "",
            "file": "..\\source\\core\\three\\Object3D.js",
            "line": 3,
            "description": "This is the base class for most objects in three.js and provides a set of properties and methods for manipulating objects in 3D space.\nThis page provides documentation for some of the main features of this class, the original documentation of this class can be found at https://threejs.org/docs/index.html#Reference/Core/Object3D.\nAll nunuStudio objects extend the Object3D class of some other higher level class from three.js.\nCode examples provided for three.js should also work inside nunuStudio.",
            "is_constructor": 1
        },
        "ArraybufferUtils": {
            "name": "ArraybufferUtils",
            "shortname": "ArraybufferUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "BinaryData",
            "namespace": "",
            "file": "..\\source\\core\\utils\\ArraybufferUtils.js",
            "line": 3,
            "description": "ArraybufferUtils contains methods to convert from and to ArrayBuffer binary format",
            "static": 1
        },
        "Base64Utils": {
            "name": "Base64Utils",
            "shortname": "Base64Utils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "BinaryData",
            "namespace": "",
            "file": "..\\source\\core\\utils\\Base64Utils.js",
            "line": 3,
            "description": "Base64Utils contains methods to convert from and to Base64 binary format",
            "static": 1
        },
        "BufferUtils": {
            "name": "BufferUtils",
            "shortname": "BufferUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "BinaryData",
            "namespace": "",
            "file": "..\\source\\core\\utils\\BufferUtils.js",
            "line": 3,
            "description": "BufferUtils contains methods to convert from and to Node.js Buffer binary format",
            "static": 1
        },
        "Mesh2shape": {
            "name": "Mesh2shape",
            "shortname": "Mesh2shape",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Physics",
            "namespace": "",
            "file": "..\\source\\core\\utils\\Mesh2shape.js",
            "line": 3,
            "description": "Mesh2shape is used to convert ThreeJS objects to CannonJS shapes\nIt is based on the original Mesh2Shape converted by @donmccurdy",
            "author": "Don McCurdy (https://github.com/donmccurdy)",
            "static": 1
        },
        "ObjectUtils": {
            "name": "ObjectUtils",
            "shortname": "ObjectUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Physics",
            "namespace": "",
            "file": "..\\source\\core\\utils\\ObjectUtils.js",
            "line": 3,
            "description": "ObjectUtils is a collection of methods to apply operations to Object3D objects",
            "static": 1
        },
        "FileSystem": {
            "name": "FileSystem",
            "shortname": "FileSystem",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Files",
            "namespace": "",
            "file": "..\\source\\core\\FileSystem.js",
            "line": 3,
            "description": "FileSystem is used to read and write files using nunuStudio\nSome operations are platform specific and might not work everywhere"
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "..\\source\\core\\input\\Key.js",
            "line": 9,
            "description": "Indicates if this key is currently pressed",
            "itemtype": "property",
            "name": "pressed",
            "default": "false",
            "type": "{boolean}",
            "class": "Key",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Key.js",
            "line": 15,
            "description": "Indicates if this key was just pressed",
            "itemtype": "property",
            "name": "justPressed",
            "default": "false",
            "type": "{boolean}",
            "class": "Key",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Key.js",
            "line": 21,
            "description": "Indicates if this key was just released",
            "itemtype": "property",
            "name": "justReleased",
            "default": "false",
            "type": "{boolean}",
            "class": "Key",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Key.js",
            "line": 35,
            "description": "Down",
            "itemtype": "attribute",
            "name": "DOWN",
            "type": "{Number}",
            "class": "Key",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Key.js",
            "line": 41,
            "description": "Up",
            "itemtype": "attribute",
            "name": "UP",
            "type": "{Number}",
            "class": "Key",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Key.js",
            "line": 47,
            "description": "Reset",
            "itemtype": "attribute",
            "name": "RESET",
            "type": "{Number}",
            "class": "Key",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Key.js",
            "line": 54,
            "description": "Update Key status based on new key state",
            "itemtype": "method",
            "name": "update",
            "class": "Key",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Key.js",
            "line": 86,
            "description": "Set this key attributes manually",
            "itemtype": "method",
            "name": "set",
            "class": "Key",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Key.js",
            "line": 97,
            "description": "Reset key to default values",
            "itemtype": "method",
            "name": "reset",
            "class": "Key",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 10,
            "description": "Array with keyboard keys status",
            "type": "{array}",
            "itemtype": "property",
            "name": "keys",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 58,
            "description": "Update key flags synchronously (called automatically by the app runtime)",
            "itemtype": "method",
            "name": "update",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 82,
            "description": "Reset keyboard status to default",
            "itemtype": "method",
            "name": "reset",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 98,
            "description": "Check if a key is pressed",
            "itemtype": "method",
            "name": "keyPressed",
            "return": {
                "description": "True is the key is currently pressed",
                "type": "Boolean"
            },
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 108,
            "description": "Check is a key as just pressed",
            "itemtype": "method",
            "name": "keyJustPressed",
            "return": {
                "description": "True is the key was just pressed",
                "type": "Boolean"
            },
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 118,
            "description": "Check if a key was just released",
            "itemtype": "method",
            "name": "keyJustReleased",
            "return": {
                "description": "True is the key was just pressed",
                "type": "Boolean"
            },
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 128,
            "description": "Dispose keyboard events (called automatically by the app runtime)",
            "itemtype": "method",
            "name": "dispose",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 141,
            "description": "TAB key",
            "itemtype": "attribute",
            "name": "TAB",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 147,
            "description": "ENTER key",
            "itemtype": "attribute",
            "name": "ENTER",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 153,
            "description": "SHIFT key",
            "itemtype": "attribute",
            "name": "SHIFT",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 159,
            "description": "CTRL key",
            "itemtype": "attribute",
            "name": "CTRL",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 165,
            "description": "ALT key",
            "itemtype": "attribute",
            "name": "ALT",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 171,
            "description": "CAPS_LOCK key",
            "itemtype": "attribute",
            "name": "CAPS_LOCK",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 177,
            "description": "ESC key",
            "itemtype": "attribute",
            "name": "ESC",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 183,
            "description": "SPACEBAR key",
            "itemtype": "attribute",
            "name": "SPACEBAR",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 189,
            "description": "PAGE_UP key",
            "itemtype": "attribute",
            "name": "PAGE_UP",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 195,
            "description": "PAGE_DOWN key",
            "itemtype": "attribute",
            "name": "PAGE_DOWN",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 201,
            "description": "END key",
            "itemtype": "attribute",
            "name": "END",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 207,
            "description": "HOME key",
            "itemtype": "attribute",
            "name": "HOME",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 213,
            "description": "INSERT key",
            "itemtype": "attribute",
            "name": "INSERT",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 219,
            "description": "DEL key",
            "itemtype": "attribute",
            "name": "DEL",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 226,
            "description": "LEFT key",
            "itemtype": "attribute",
            "name": "LEFT",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 232,
            "description": "RIGHT key",
            "itemtype": "attribute",
            "name": "RIGHT",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 238,
            "description": "UP key",
            "itemtype": "attribute",
            "name": "UP",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 244,
            "description": "DOWN key",
            "itemtype": "attribute",
            "name": "DOWN",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 251,
            "description": "NUM0 key",
            "itemtype": "attribute",
            "name": "NUM0",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 257,
            "description": "NUM1 key",
            "itemtype": "attribute",
            "name": "NUM1",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 263,
            "description": "NUM2 key",
            "itemtype": "attribute",
            "name": "NUM2",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 269,
            "description": "NUM3 key",
            "itemtype": "attribute",
            "name": "NUM3",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 275,
            "description": "NUM4 key",
            "itemtype": "attribute",
            "name": "NUM4",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 281,
            "description": "NUM5 key",
            "itemtype": "attribute",
            "name": "NUM5",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 287,
            "description": "NUM6 key",
            "itemtype": "attribute",
            "name": "NUM6",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 293,
            "description": "NUM7 key",
            "itemtype": "attribute",
            "name": "NUM7",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 299,
            "description": "NUM8 key",
            "itemtype": "attribute",
            "name": "NUM8",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 305,
            "description": "NUM9 key",
            "itemtype": "attribute",
            "name": "NUM9",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 312,
            "description": "A key",
            "itemtype": "attribute",
            "name": "A",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 318,
            "description": "B key",
            "itemtype": "attribute",
            "name": "B",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 324,
            "description": "C key",
            "itemtype": "attribute",
            "name": "C",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 330,
            "description": "D key",
            "itemtype": "attribute",
            "name": "D",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 336,
            "description": "E key",
            "itemtype": "attribute",
            "name": "E",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 342,
            "description": "F key",
            "itemtype": "attribute",
            "name": "F",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 348,
            "description": "G key",
            "itemtype": "attribute",
            "name": "G",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 354,
            "description": "H key",
            "itemtype": "attribute",
            "name": "H",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 360,
            "description": "I key",
            "itemtype": "attribute",
            "name": "I",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 366,
            "description": "J key",
            "itemtype": "attribute",
            "name": "J",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 372,
            "description": "K key",
            "itemtype": "attribute",
            "name": "K",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 378,
            "description": "L key",
            "itemtype": "attribute",
            "name": "L",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 384,
            "description": "M key",
            "itemtype": "attribute",
            "name": "M",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 390,
            "description": "N key",
            "itemtype": "attribute",
            "name": "N",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 396,
            "description": "O key",
            "itemtype": "attribute",
            "name": "O",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 402,
            "description": "P key",
            "itemtype": "attribute",
            "name": "P",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 408,
            "description": "Q key",
            "itemtype": "attribute",
            "name": "Q",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 414,
            "description": "R key",
            "itemtype": "attribute",
            "name": "R",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 420,
            "description": "S key",
            "itemtype": "attribute",
            "name": "S",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 426,
            "description": "T key",
            "itemtype": "attribute",
            "name": "T",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 432,
            "description": "U key",
            "itemtype": "attribute",
            "name": "U",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 438,
            "description": "V key",
            "itemtype": "attribute",
            "name": "V",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 444,
            "description": "W key",
            "itemtype": "attribute",
            "name": "W",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 450,
            "description": "X key",
            "itemtype": "attribute",
            "name": "X",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 456,
            "description": "Y key",
            "itemtype": "attribute",
            "name": "Y",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 462,
            "description": "Z key",
            "itemtype": "attribute",
            "name": "Z",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 469,
            "description": "F1 key",
            "itemtype": "attribute",
            "name": "F1",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 475,
            "description": "F2 key",
            "itemtype": "attribute",
            "name": "F2",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 481,
            "description": "F3 key",
            "itemtype": "attribute",
            "name": "F3",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 487,
            "description": "F4 key",
            "itemtype": "attribute",
            "name": "F4",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 493,
            "description": "F5 key",
            "itemtype": "attribute",
            "name": "F5",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 499,
            "description": "F6 key",
            "itemtype": "attribute",
            "name": "F6",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 505,
            "description": "F7 key",
            "itemtype": "attribute",
            "name": "F7",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 511,
            "description": "F8 key",
            "itemtype": "attribute",
            "name": "F8",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 517,
            "description": "F9 key",
            "itemtype": "attribute",
            "name": "F9",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 523,
            "description": "F10 key",
            "itemtype": "attribute",
            "name": "F10",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 529,
            "description": "F11 key",
            "itemtype": "attribute",
            "name": "F11",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Keyboard.js",
            "line": 535,
            "description": "F12 key",
            "itemtype": "attribute",
            "name": "F12",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Mouse.js",
            "line": 10,
            "description": "Array with mouse buttons status",
            "type": "{array}",
            "itemtype": "property",
            "name": "keys",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Mouse.js",
            "line": 16,
            "description": "Mouse position inside of the window (coordinates in window space)",
            "type": "{Vector2}",
            "itemtype": "property",
            "name": "position",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Mouse.js",
            "line": 22,
            "description": "Mouse movement (coordinates in window space)",
            "type": "{Vector2}",
            "itemtype": "property",
            "name": "delta",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Mouse.js",
            "line": 28,
            "description": "Mouse scroll wheel movement",
            "type": "{Number}",
            "itemtype": "property",
            "name": "wheel",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Mouse.js",
            "line": 34,
            "description": "Canvas attached to this mouse instance used to calculate position and delta in canvas space coordinates",
            "type": "{DOM}",
            "itemtype": "property",
            "name": "canvas",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Mouse.js",
            "line": 188,
            "description": "LEFT mouse button",
            "itemtype": "attribute",
            "name": "LEFT",
            "type": "{Number}",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Mouse.js",
            "line": 194,
            "description": "MIDDLE mouse button",
            "itemtype": "attribute",
            "name": "MIDDLE",
            "type": "{Number}",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Mouse.js",
            "line": 200,
            "description": "RIGHT mouse button",
            "itemtype": "attribute",
            "name": "RIGHT",
            "type": "{Number}",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Mouse.js",
            "line": 207,
            "description": "Canvas to be used for coordinates calculation relative to that canvas",
            "itemtype": "method",
            "name": "setCanvas",
            "params": [
                {
                    "name": "canvas",
                    "description": "Canvas to be attached to the Mouse instance",
                    "type": "DOM"
                }
            ],
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Mouse.js",
            "line": 229,
            "description": "Check if mouse is inside attached canvas (updated async)",
            "itemtype": "method",
            "name": "insideCanvas",
            "return": {
                "description": "True if mouse is currently inside the canvas",
                "type": "Boolean"
            },
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Mouse.js",
            "line": 244,
            "description": "Set mouse lock state",
            "itemtype": "method",
            "name": "setLock",
            "params": [
                {
                    "name": "value",
                    "description": "If true pointer lock will be requested for the canvas attached to the Mouse instance",
                    "type": "Boolean"
                }
            ],
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Mouse.js",
            "line": 286,
            "description": "Check if mouse button is currently pressed",
            "itemtype": "method",
            "name": "buttonPressed",
            "params": [
                {
                    "name": "button",
                    "description": "Button to check status of",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True if button is currently pressed",
                "type": "Boolean"
            },
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Mouse.js",
            "line": 297,
            "description": "Check if Mouse button was double clicked",
            "itemtype": "method",
            "name": "buttonDoubleClicked",
            "return": {
                "description": "True if some mouse button was just double clicked",
                "type": "Boolean"
            },
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Mouse.js",
            "line": 307,
            "description": "Check if a mouse button was just pressed",
            "itemtype": "method",
            "name": "buttonJustPressed",
            "params": [
                {
                    "name": "button",
                    "description": "Button to check status of",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True if button was just pressed",
                "type": "Boolean"
            },
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Mouse.js",
            "line": 318,
            "description": "Check if a mouse button was just released",
            "itemtype": "method",
            "name": "buttonJustReleased",
            "params": [
                {
                    "name": "button",
                    "description": "Button to check status of",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True if button was just released",
                "type": "Boolean"
            },
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Mouse.js",
            "line": 329,
            "description": "Update mouse Position (automatically called by the runtime)",
            "itemtype": "method",
            "name": "updatePosition",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "xDiff",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "yDiff",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Mouse.js",
            "line": 345,
            "description": "Update a mouse button (automatically called by the runtime)",
            "params": [
                {
                    "name": "button",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "action",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Mouse.js",
            "line": 358,
            "description": "Update mouse buttons state, position, wheel and delta synchronously (called automatically by the app runtime)",
            "itemtype": "method",
            "name": "update",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\input\\Mouse.js",
            "line": 419,
            "description": "Dispose mouse events (called automatically by the app runtime)",
            "itemtype": "method",
            "name": "dispose",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "..\\source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 12,
            "description": "Audio volume",
            "itemtype": "property",
            "name": "volume",
            "default": "1.0",
            "type": "{Number}",
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "..\\source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 18,
            "description": "If true the playback starts automatically",
            "itemtype": "property",
            "name": "autoplay",
            "default": "true",
            "type": "{boolean}",
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "..\\source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 24,
            "description": "Start time in seconds",
            "itemtype": "property",
            "name": "playbackRate",
            "default": "1.0",
            "type": "{Number}",
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "..\\source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 30,
            "description": "Start time in seconds",
            "itemtype": "property",
            "name": "startTime",
            "default": "0.0",
            "type": "{Number}",
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "..\\source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 36,
            "description": "If true the audio plays in loop",
            "itemtype": "property",
            "name": "loop",
            "default": "true",
            "type": "{boolean}",
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "..\\source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 70,
            "description": "Initialize audio object, loads audio data decodes it and starts playback if autoplay is set to True\nCalled by the runtime",
            "itemtype": "method",
            "name": "initialize",
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "..\\source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 97,
            "description": "Dispose audio object",
            "itemtype": "method",
            "name": "dispose",
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "..\\source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 115,
            "description": "Change audio emitter volume",
            "itemtype": "method",
            "name": "setVolume",
            "params": [
                {
                    "name": "value",
                    "description": "Audio volume",
                    "type": "Number"
                }
            ],
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "..\\source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 128,
            "description": "Create JSON description",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "JSON descrition",
                "type": "Object"
            },
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "..\\source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 152,
            "description": "Starts playback",
            "itemtype": "method",
            "name": "play",
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "..\\source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 157,
            "description": "Pauses playback",
            "itemtype": "method",
            "name": "pause",
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "..\\source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 162,
            "description": "Stops playback and resets time to 0",
            "itemtype": "method",
            "name": "pause",
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "..\\source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 167,
            "description": "Set loop mode",
            "params": [
                {
                    "name": "loop",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "setLoop",
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "..\\source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 173,
            "description": "Set playback speed",
            "params": [
                {
                    "name": "speed",
                    "description": "",
                    "type": "Number"
                }
            ],
            "itemtype": "method",
            "name": "setPlaybackRate",
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "..\\source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 179,
            "description": "Add the filter to the filters array.",
            "itemtype": "method",
            "name": "setFilter",
            "params": [
                {
                    "name": "filter",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "..\\source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 185,
            "description": "Set the filters array to value.",
            "itemtype": "method",
            "name": "setFilters",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "..\\source\\core\\objects\\audio\\PositionalAudio.js",
            "line": 12,
            "description": "Audio volume",
            "itemtype": "property",
            "name": "volume",
            "default": "1.0",
            "type": "{Number}",
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "..\\source\\core\\objects\\audio\\PositionalAudio.js",
            "line": 18,
            "description": "If true the playback starts automatically",
            "itemtype": "property",
            "name": "autoplay",
            "default": "true",
            "type": "{boolean}",
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "..\\source\\core\\objects\\audio\\PositionalAudio.js",
            "line": 24,
            "description": "Start time in seconds",
            "itemtype": "property",
            "name": "playbackRate",
            "default": "1.0",
            "type": "{Number}",
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "..\\source\\core\\objects\\audio\\PositionalAudio.js",
            "line": 30,
            "description": "Start time in seconds",
            "itemtype": "property",
            "name": "startTime",
            "default": "0.0",
            "type": "{Number}",
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "..\\source\\core\\objects\\audio\\PositionalAudio.js",
            "line": 36,
            "description": "If true the audio plays in loop",
            "itemtype": "property",
            "name": "loop",
            "default": "true",
            "type": "{boolean}",
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "..\\source\\core\\objects\\audio\\PositionalAudio.js",
            "line": 69,
            "description": "Initialize audio object, loads audio data decodes it and starts playback if autoplay is set to True\nCalled by the runtime",
            "itemtype": "method",
            "name": "initialize",
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "..\\source\\core\\objects\\audio\\PositionalAudio.js",
            "line": 107,
            "description": "Update positional audio state",
            "itemtype": "method",
            "name": "update",
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "..\\source\\core\\objects\\audio\\PositionalAudio.js",
            "line": 130,
            "description": "Dispose audio object",
            "itemtype": "method",
            "name": "dispose",
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "..\\source\\core\\objects\\audio\\PositionalAudio.js",
            "line": 148,
            "description": "Change audio emitter volume",
            "itemtype": "method",
            "name": "setVolume",
            "params": [
                {
                    "name": "value",
                    "description": "Audio volume",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Self pointer for chaining",
                "type": "PositionalAudio"
            },
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "..\\source\\core\\objects\\audio\\PositionalAudio.js",
            "line": 168,
            "description": "Create JSON description",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "JSON descrition",
                "type": "Object"
            },
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "..\\source\\core\\objects\\audio\\PositionalAudio.js",
            "line": 192,
            "description": "Starts playback",
            "itemtype": "method",
            "name": "play",
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "..\\source\\core\\objects\\audio\\PositionalAudio.js",
            "line": 197,
            "description": "Pauses playback",
            "itemtype": "method",
            "name": "pause",
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "..\\source\\core\\objects\\audio\\PositionalAudio.js",
            "line": 202,
            "description": "Stops playback and resets time to 0",
            "itemtype": "method",
            "name": "pause",
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "..\\source\\core\\objects\\audio\\PositionalAudio.js",
            "line": 207,
            "description": "Set loop mode",
            "params": [
                {
                    "name": "loop",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "setLoop",
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "..\\source\\core\\objects\\audio\\PositionalAudio.js",
            "line": 213,
            "description": "Set playback speed",
            "params": [
                {
                    "name": "speed",
                    "description": "",
                    "type": "Number"
                }
            ],
            "itemtype": "method",
            "name": "setPlaybackRate",
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "..\\source\\core\\objects\\audio\\PositionalAudio.js",
            "line": 219,
            "description": "Add the filter to the filters array.",
            "itemtype": "method",
            "name": "setFilter",
            "params": [
                {
                    "name": "filter",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "..\\source\\core\\objects\\audio\\PositionalAudio.js",
            "line": 225,
            "description": "Set the filters array to value.",
            "itemtype": "method",
            "name": "setFilters",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "..\\source\\core\\objects\\cameras\\OrthographicCamera.js",
            "line": 17,
            "description": "Camera size relative to resize mode",
            "itemtype": "property",
            "name": "size",
            "default": "10.0",
            "type": "{Number}",
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\source\\core\\objects\\cameras\\OrthographicCamera.js",
            "line": 23,
            "description": "Aspect ratio X/Y",
            "itemtype": "property",
            "name": "aspect",
            "default": "1.0",
            "type": "{Number}",
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\source\\core\\objects\\cameras\\OrthographicCamera.js",
            "line": 29,
            "description": "Camera resize mode",
            "itemtype": "property",
            "name": "mode",
            "default": "RESIZE_HORIZONTAL",
            "type": "{Number}",
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\source\\core\\objects\\cameras\\OrthographicCamera.js",
            "line": 35,
            "description": "Camera viewport offset\nValues range from 0.0 to 1.0 in screen space",
            "itemtype": "property",
            "name": "offset",
            "type": "{Vector2}",
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\source\\core\\objects\\cameras\\OrthographicCamera.js",
            "line": 41,
            "description": "Camera viewport size\nValues range from 0.0 to 1.0 in screen space",
            "itemtype": "property",
            "name": "viewport",
            "type": "{Vector2}",
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\source\\core\\objects\\cameras\\OrthographicCamera.js",
            "line": 47,
            "description": "Clear screen color flag",
            "itemtype": "property",
            "name": "clearColor",
            "default": "false",
            "type": "{boolean}",
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\source\\core\\objects\\cameras\\OrthographicCamera.js",
            "line": 53,
            "description": "Clear depth flag",
            "itemtype": "property",
            "name": "clearDepth",
            "default": "false",
            "type": "{boolean}",
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\source\\core\\objects\\cameras\\OrthographicCamera.js",
            "line": 59,
            "description": "Camera draw order preference\nIf more than one camera has the same order value the draw order is undefined for those cameras",
            "itemtype": "property",
            "name": "order",
            "default": "0",
            "type": "{Number}",
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\source\\core\\objects\\cameras\\OrthographicCamera.js",
            "line": 87,
            "description": "Used to set camera to resize horizontally",
            "itemtype": "attribute",
            "name": "RESIZE_HORIZONTAL",
            "type": "{Number}",
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\source\\core\\objects\\cameras\\OrthographicCamera.js",
            "line": 94,
            "description": "Used to set camera to resize vertically",
            "itemtype": "attribute",
            "name": "RESIZE_VERTICAL",
            "type": "{Number}",
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\source\\core\\objects\\cameras\\OrthographicCamera.js",
            "line": 101,
            "description": "Destroy camera object and remove it from the scene",
            "itemtype": "method",
            "name": "destroy",
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\source\\core\\objects\\cameras\\OrthographicCamera.js",
            "line": 116,
            "description": "Update camera projection matrix\nShould be called after chaging projection parameters",
            "itemtype": "method",
            "name": "updateProjectionMatrix",
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\source\\core\\objects\\cameras\\OrthographicCamera.js",
            "line": 142,
            "description": "Create JSON description",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "JSON descrition",
                "type": "Object"
            },
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\source\\core\\objects\\cameras\\PerspectiveCamera.js",
            "line": 16,
            "description": "Camera field of view in degrees",
            "itemtype": "property",
            "name": "fov",
            "default": "50",
            "type": "{Number}",
            "class": "PerspectiveCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\source\\core\\objects\\cameras\\PerspectiveCamera.js",
            "line": 22,
            "description": "Camera aspect ratio X/Y",
            "itemtype": "property",
            "name": "aspect",
            "default": "1.0",
            "type": "{Number}",
            "class": "PerspectiveCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\source\\core\\objects\\cameras\\PerspectiveCamera.js",
            "line": 28,
            "description": "Camera zoom",
            "itemtype": "property",
            "name": "zoom",
            "default": "1.0",
            "type": "{Number}",
            "class": "PerspectiveCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\source\\core\\objects\\cameras\\PerspectiveCamera.js",
            "line": 34,
            "description": "Camera viewport offset\nValues range from 0.0 to 1.0 in screen space",
            "itemtype": "property",
            "name": "offset",
            "type": "{Vector2}",
            "class": "PerspectiveCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\source\\core\\objects\\cameras\\PerspectiveCamera.js",
            "line": 40,
            "description": "Camera viewport size\nValues range from 0.0 to 1.0 in screen space",
            "itemtype": "property",
            "name": "viewport",
            "type": "{Vector2}",
            "class": "PerspectiveCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\source\\core\\objects\\cameras\\PerspectiveCamera.js",
            "line": 46,
            "description": "Clear screen color flag",
            "itemtype": "property",
            "name": "clearColor",
            "default": "false",
            "type": "{boolean}",
            "class": "PerspectiveCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\source\\core\\objects\\cameras\\PerspectiveCamera.js",
            "line": 52,
            "description": "Clear depth flag",
            "itemtype": "property",
            "name": "clearDepth",
            "default": "false",
            "type": "{boolean}",
            "class": "PerspectiveCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\source\\core\\objects\\cameras\\PerspectiveCamera.js",
            "line": 58,
            "description": "Camera draw order preference\nIf more than one camera has the same order value the draw order is undefined for those cameras",
            "itemtype": "property",
            "name": "order",
            "default": "0",
            "type": "{Number}",
            "class": "PerspectiveCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\source\\core\\objects\\cameras\\PerspectiveCamera.js",
            "line": 80,
            "description": "Destroy camera object and remove it from the scene",
            "itemtype": "method",
            "name": "destroy",
            "class": "PerspectiveCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\source\\core\\objects\\cameras\\PerspectiveCamera.js",
            "line": 95,
            "description": "Update world transformation matrix ignoring parent scaling properties",
            "itemtype": "method",
            "name": "updateMatrixWorld",
            "params": [
                {
                    "name": "force",
                    "description": "Force matrix update even if the attribute matrixWorldNeedsUpdate is not true",
                    "type": "Boolean"
                }
            ],
            "class": "PerspectiveCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\source\\core\\objects\\cameras\\PerspectiveCamera.js",
            "line": 130,
            "description": "Update camera projection matrix\nShould be called after chaging projection parameters",
            "itemtype": "method",
            "name": "updateProjectionMatrix",
            "class": "PerspectiveCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\source\\core\\objects\\cameras\\PerspectiveCamera.js",
            "line": 150,
            "description": "Create JSON description",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "JSON descrition",
                "type": "Object"
            },
            "class": "PerspectiveCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\source\\core\\objects\\device\\KinectDevice.js",
            "line": 14,
            "description": "Websocket object used to connect to the data server",
            "itemtype": "property",
            "name": "socket",
            "default": "127.0.0.1:8181",
            "type": "{Object}",
            "class": "KinectDevice",
            "module": "Devices"
        },
        {
            "file": "..\\source\\core\\objects\\device\\KinectDevice.js",
            "line": 20,
            "description": "Connected flag",
            "itemtype": "property",
            "name": "connected",
            "type": "{boolean}",
            "class": "KinectDevice",
            "module": "Devices"
        },
        {
            "file": "..\\source\\core\\objects\\device\\KinectDevice.js",
            "line": 25,
            "description": "Debug model flag",
            "itemtype": "property",
            "name": "debugModel",
            "default": "true",
            "type": "{boolean}",
            "class": "KinectDevice",
            "module": "Devices"
        },
        {
            "file": "..\\source\\core\\objects\\device\\KinectDevice.js",
            "line": 31,
            "description": "Time until data is considered too obsolete to be usable",
            "itemtype": "property",
            "name": "dataTimeout",
            "type": "{Number}",
            "class": "KinectDevice",
            "module": "Devices"
        },
        {
            "file": "..\\source\\core\\objects\\device\\KinectDevice.js",
            "line": 36,
            "description": "Image data sent by the kinnect camera",
            "itemtype": "property",
            "name": "camera",
            "type": "{Blob}",
            "class": "KinectDevice",
            "module": "Devices"
        },
        {
            "file": "..\\source\\core\\objects\\device\\KinectDevice.js",
            "line": 41,
            "description": "Skeleton data sent by the kinnect",
            "itemtype": "property",
            "name": "data",
            "type": "{Object}",
            "class": "KinectDevice",
            "module": "Devices"
        },
        {
            "file": "..\\source\\core\\objects\\device\\KinectDevice.js",
            "line": 99,
            "description": "Kinect default data timeout in seconds",
            "itemtype": "attribute",
            "name": "DATA_TIMEOUT",
            "type": "{Number}",
            "class": "KinectDevice",
            "module": "Devices"
        },
        {
            "file": "..\\source\\core\\objects\\device\\KinectDevice.js",
            "line": 107,
            "description": "Kinect camera depth mode",
            "itemtype": "attribute",
            "name": "DEPTH",
            "type": "{Number}",
            "class": "KinectDevice",
            "module": "Devices"
        },
        {
            "file": "..\\source\\core\\objects\\device\\KinectDevice.js",
            "line": 114,
            "description": "Kinect camera color mode",
            "itemtype": "attribute",
            "name": "COLOR",
            "type": "{Number}",
            "class": "KinectDevice",
            "module": "Devices"
        },
        {
            "file": "..\\source\\core\\objects\\device\\KinectDevice.js",
            "line": 121,
            "description": "Kinect skeleton joint names in pairs",
            "itemtype": "attribute",
            "name": "JOINTS_NAME",
            "type": "{Array}",
            "class": "KinectDevice",
            "module": "Devices"
        },
        {
            "file": "..\\source\\core\\objects\\device\\KinectDevice.js",
            "line": 133,
            "description": "Update kinect device state",
            "itemtype": "method",
            "name": "update",
            "class": "KinectDevice",
            "module": "Devices"
        },
        {
            "file": "..\\source\\core\\objects\\device\\KinectDevice.js",
            "line": 195,
            "description": "Check if there is kinect connected",
            "itemtype": "method",
            "name": "isConnected",
            "return": {
                "description": "True if there is a kinect connected",
                "type": "Boolean"
            },
            "class": "KinectDevice",
            "module": "Devices"
        },
        {
            "file": "..\\source\\core\\objects\\device\\KinectDevice.js",
            "line": 205,
            "description": "Set kinect camera mode",
            "itemtype": "method",
            "name": "setCameraMode",
            "params": [
                {
                    "name": "mode",
                    "description": "Camera mode",
                    "type": "Boolean"
                }
            ],
            "class": "KinectDevice",
            "module": "Devices"
        },
        {
            "file": "..\\source\\core\\objects\\device\\KinectDevice.js",
            "line": 222,
            "description": "Create JSON for object",
            "itemtype": "method",
            "name": "toJSON",
            "class": "KinectDevice",
            "module": "Devices"
        },
        {
            "file": "..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 12,
            "description": "Debug model flag",
            "itemtype": "property",
            "name": "debugModel",
            "default": "true",
            "type": "{boolean}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 18,
            "description": "Flag to enable gesture detection",
            "itemtype": "property",
            "name": "gesturesEnabled",
            "default": "true",
            "type": "{boolean}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 24,
            "description": "Flag to enable hand pose detection",
            "itemtype": "property",
            "name": "posesEnabled",
            "default": "true",
            "type": "{boolean}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 30,
            "description": "Hand tracking mode",
            "itemtype": "property",
            "name": "mode",
            "default": "DESK",
            "type": "{Number}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 36,
            "description": "Flag to set arm tracking",
            "itemtype": "property",
            "name": "useArm",
            "default": "false",
            "type": "{boolean}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 88,
            "description": "Leap tracking desktop mode",
            "itemtype": "attribute",
            "name": "DESK",
            "type": "{Number}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 95,
            "description": "Leap tracking HDM mode",
            "itemtype": "attribute",
            "name": "DESK",
            "type": "{Number}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 102,
            "description": "Leap SWIPE gesture",
            "itemtype": "attribute",
            "name": "SWIPE",
            "type": "{Number}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 108,
            "description": "Leap SWIPE_LEFT gesture",
            "itemtype": "attribute",
            "name": "SWIPE_LEFT",
            "type": "{Number}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 114,
            "description": "Leap SWIPE_RIGHT gesture",
            "itemtype": "attribute",
            "name": "SWIPE_RIGHT",
            "type": "{Number}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 120,
            "description": "Leap SWIPE_FRONT gesture",
            "itemtype": "attribute",
            "name": "SWIPE_FRONT",
            "type": "{Number}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 126,
            "description": "Leap SWIPE_BACK gesture",
            "itemtype": "attribute",
            "name": "SWIPE_BACK",
            "type": "{Number}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 132,
            "description": "Leap SWIPE_UP gesture",
            "itemtype": "attribute",
            "name": "SWIPE_UP",
            "type": "{Number}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 138,
            "description": "Leap SWIPE_DOWN gesture",
            "itemtype": "attribute",
            "name": "SWIPE_DOWN",
            "type": "{Number}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 144,
            "description": "Leap CIRCLE gesture",
            "itemtype": "attribute",
            "name": "CIRCLE",
            "type": "{Number}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 150,
            "description": "Leap SCREEN_TAP gesture",
            "itemtype": "attribute",
            "name": "SCREEN_TAP",
            "type": "{Number}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 156,
            "description": "Leap KEY_TAP gesture",
            "itemtype": "attribute",
            "name": "KEY_TAP",
            "type": "{Number}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 163,
            "description": "Hand CLOSED pose",
            "itemtype": "attribute",
            "name": "CLOSED",
            "type": "{Number}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 169,
            "description": "Hand OPEN pose",
            "itemtype": "attribute",
            "name": "OPEN",
            "type": "{Number}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 175,
            "description": "Hand POINTING pose",
            "itemtype": "attribute",
            "name": "POINTING",
            "type": "{Number}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 182,
            "description": "Initialize LeapMotion object\nCalled automatically by the runtime\nConnects to the websocket provided by the leap driver",
            "itemtype": "method",
            "name": "initialize",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 206,
            "description": "Update leap status\nCalled automatically by the runtime",
            "itemtype": "method",
            "name": "update",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 236,
            "description": "Check if a gesture is occuring, is true while the gesture is occuring",
            "itemtype": "method",
            "name": "checkGesture",
            "params": [
                {
                    "name": "gesture",
                    "description": "Gesture to check",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True if the gesture is occuring",
                "type": "Boolean"
            },
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 251,
            "description": "Check if hand is in pose",
            "params": [
                {
                    "name": "pose",
                    "description": "Pose to be checked",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True is hand is in this pose",
                "type": "Boolean"
            },
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 265,
            "description": "Set hand tracking mode\nCan be set to HDM or Desktop mode",
            "params": [
                {
                    "name": "mode",
                    "description": "Mode",
                    "type": "Number"
                }
            ],
            "itemtype": "method",
            "name": "setMode",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 276,
            "description": "Update leap object pose flags from collected data\nCalled automatically by the update methos",
            "itemtype": "method",
            "name": "updatePoses",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 350,
            "description": "Update leap object gesture flags from collected data\nCalled automatically by the update method",
            "itemtype": "method",
            "name": "updateGestures",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 421,
            "description": "Update internal hand debug model\nAutomatically called by the update method if debugModel is set to true",
            "itemtype": "method",
            "name": "updateDebugModel",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 483,
            "description": "Update physics object to enable hand physics collision\nCalled by updateDebugModel automatically",
            "itemtype": "method",
            "name": "updatePhysics",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 547,
            "description": "Get hand speed (temporaly normalized)",
            "itemtype": "method",
            "name": "getMovement",
            "return": {
                "description": "Hand speed",
                "type": "Number"
            },
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 563,
            "description": "Create JSON for object",
            "itemtype": "method",
            "name": "toJSON",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\source\\core\\objects\\lights\\DirectionalLight.js",
            "line": 26,
            "description": "Update light shadow map atributtes at runtime",
            "itemtype": "method",
            "name": "updateShadowMap",
            "class": "DirectionalLight",
            "module": "Lights"
        },
        {
            "file": "..\\source\\core\\objects\\lights\\PointLight.js",
            "line": 29,
            "description": "Update light shadow map atributtes at runtime",
            "itemtype": "method",
            "name": "updateShadowMap",
            "class": "PointLight",
            "module": "Lights"
        },
        {
            "file": "..\\source\\core\\objects\\lights\\RectAreaLight.js",
            "line": 24,
            "description": "Create JSON description",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "JSON descrition",
                "type": "Object"
            },
            "class": "RectAreaLight",
            "module": "Lights"
        },
        {
            "file": "..\\source\\core\\objects\\lights\\Sky.js",
            "line": 20,
            "description": "Clock used to control day time",
            "itemtype": "property",
            "name": "clock",
            "type": "{Clock}",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "..\\source\\core\\objects\\lights\\Sky.js",
            "line": 25,
            "description": "Array with top sky colors",
            "itemtype": "property",
            "name": "colorTop",
            "type": "{Array}",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "..\\source\\core\\objects\\lights\\Sky.js",
            "line": 30,
            "description": "Array with bottom sky colors",
            "itemtype": "property",
            "name": "colorBottom",
            "type": "{Array}",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "..\\source\\core\\objects\\lights\\Sky.js",
            "line": 35,
            "description": "Sun color in hex RGB",
            "itemtype": "property",
            "name": "sunColor",
            "type": "{Number}",
            "default": "0xFFFFAA",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "..\\source\\core\\objects\\lights\\Sky.js",
            "line": 41,
            "description": "Moon color in hex RGB",
            "itemtype": "property",
            "name": "moonColor",
            "type": "{Number}",
            "default": "0x5555BB",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "..\\source\\core\\objects\\lights\\Sky.js",
            "line": 47,
            "description": "Hemisphere light used to match ambient ligth with sky color",
            "itemtype": "property",
            "name": "hemisphere",
            "type": "{HemisphereLight}",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "..\\source\\core\\objects\\lights\\Sky.js",
            "line": 52,
            "description": "Directional light to simulate sun light and cast shadows",
            "itemtype": "property",
            "name": "sun",
            "type": "{DirectionalLight}",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "..\\source\\core\\objects\\lights\\Sky.js",
            "line": 57,
            "description": "Sky mesh with material shader to calculate dinamically sky color",
            "itemtype": "property",
            "name": "sky",
            "type": "{Mesh}",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "..\\source\\core\\objects\\lights\\Sky.js",
            "line": 62,
            "description": "If set to true the sky auto updates its time",
            "itemtype": "property",
            "name": "autoUpdate",
            "default": "true",
            "type": "{boolean}",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "..\\source\\core\\objects\\lights\\Sky.js",
            "line": 68,
            "description": "Sun distance",
            "itemtype": "property",
            "name": "sunDistance",
            "type": "{Number}",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "..\\source\\core\\objects\\lights\\Sky.js",
            "line": 73,
            "description": "Day time in seconds",
            "itemtype": "property",
            "name": "dayTime",
            "type": "{Number}",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "..\\source\\core\\objects\\lights\\Sky.js",
            "line": 78,
            "description": "Current day time in seconds",
            "itemtype": "property",
            "name": "time",
            "type": "{Number}",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "..\\source\\core\\objects\\lights\\Sky.js",
            "line": 170,
            "description": "Initialize sky object\nCalled automatically by the runtime",
            "itemtype": "method",
            "name": "initialize",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "..\\source\\core\\objects\\lights\\Sky.js",
            "line": 185,
            "description": "Update sky state\nCalled automatically by the runtime",
            "itemtype": "method",
            "name": "update",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "..\\source\\core\\objects\\lights\\Sky.js",
            "line": 213,
            "description": "Update sky color and sun position\nIf autoUpdate set to true is automatically called by the update method",
            "itemtype": "method",
            "name": "updateSky",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "..\\source\\core\\objects\\lights\\Sky.js",
            "line": 347,
            "description": "Create JSON for object",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "toJSON",
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "..\\source\\core\\objects\\lights\\SpotLight.js",
            "line": 33,
            "description": "Update light shadow map atributtes at runtime",
            "itemtype": "method",
            "name": "updateShadowMap",
            "class": "SpotLight",
            "module": "Lights"
        },
        {
            "file": "..\\source\\core\\objects\\mesh\\Mesh.js",
            "line": 14,
            "description": "Geometry defined the object structure",
            "itemtype": "property",
            "name": "geometry",
            "type": "{Geometry}",
            "class": "Mesh",
            "module": "Meshes"
        },
        {
            "file": "..\\source\\core\\objects\\mesh\\Mesh.js",
            "line": 19,
            "description": "Material is used to define how the geometry surface is shaded",
            "itemtype": "property",
            "name": "material",
            "type": "{Material}",
            "class": "Mesh",
            "module": "Meshes"
        },
        {
            "file": "..\\source\\core\\objects\\mesh\\Mesh.js",
            "line": 24,
            "description": "Determines how the mesh triangles are constructed from the vertices.\nOnly works when the geometry is a BufferGeometry",
            "itemtype": "property",
            "name": "drawMode",
            "default": "TrianglesDrawMode",
            "class": "Mesh",
            "module": "Meshes"
        },
        {
            "file": "..\\source\\core\\objects\\mesh\\Mesh.js",
            "line": 42,
            "description": "Dispose mesh along with its material and geometry",
            "itemtype": "method",
            "name": "dispose",
            "class": "Mesh",
            "module": "Meshes"
        },
        {
            "file": "..\\source\\core\\objects\\mesh\\SkinnedMesh.js",
            "line": 14,
            "description": "Geometry defined the object structure",
            "itemtype": "property",
            "name": "geometry",
            "type": "{Geometry}",
            "class": "SkinnedMesh",
            "module": "Meshes"
        },
        {
            "file": "..\\source\\core\\objects\\mesh\\SkinnedMesh.js",
            "line": 19,
            "description": "Material is used to define how the geometry surface is shaded",
            "itemtype": "property",
            "name": "material",
            "type": "{Material}",
            "class": "SkinnedMesh",
            "module": "Meshes"
        },
        {
            "file": "..\\source\\core\\objects\\mesh\\SkinnedMesh.js",
            "line": 24,
            "description": "Determines how the mesh triangles are constructed from the vertices.\nOnly works when the geometry is a BufferGeometry",
            "itemtype": "property",
            "name": "drawMode",
            "default": "TrianglesDrawMode",
            "class": "SkinnedMesh",
            "module": "Meshes"
        },
        {
            "file": "..\\source\\core\\objects\\mesh\\SkinnedMesh.js",
            "line": 30,
            "description": "Array with the bones attached to this mesh",
            "itemtype": "property",
            "name": "bones",
            "type": "{Array}",
            "class": "SkinnedMesh",
            "module": "Meshes"
        },
        {
            "file": "..\\source\\core\\objects\\mesh\\SkinnedMesh.js",
            "line": 47,
            "description": "Dispose mesh along with its material and geometry",
            "itemtype": "method",
            "name": "dispose",
            "class": "SkinnedMesh",
            "module": "Meshes"
        },
        {
            "file": "..\\source\\core\\objects\\mesh\\SkinnedMesh.js",
            "line": 67,
            "description": "Bind a skeleton to the skinned mesh. The bindMatrix gets saved to .bindMatrix property and the .bindMatrixInverse gets calculated.\nThis is called automatically in the constructor, and the skeleton is created from the bones of the Geometry passed in the constructor.",
            "itemtype": "method",
            "name": "bind",
            "params": [
                {
                    "name": "skeleton",
                    "description": "",
                    "type": "Skeleton"
                },
                {
                    "name": "bindMatrix",
                    "description": "",
                    "type": "Matrix4"
                }
            ],
            "class": "SkinnedMesh",
            "module": "Meshes"
        },
        {
            "file": "..\\source\\core\\objects\\mesh\\Text3D.js",
            "line": 20,
            "description": "Material is used to define how the geometry surface is shaded",
            "itemtype": "property",
            "name": "material",
            "type": "{Material}",
            "class": "Text3D",
            "module": "Meshes"
        },
        {
            "file": "..\\source\\core\\objects\\mesh\\Text3D.js",
            "line": 25,
            "description": "Font used to draw text",
            "itemtype": "property",
            "name": "font",
            "type": "{Font}",
            "class": "Text3D",
            "module": "Meshes"
        },
        {
            "file": "..\\source\\core\\objects\\mesh\\Text3D.js",
            "line": 30,
            "description": "Text",
            "itemtype": "property",
            "name": "text",
            "type": "{String}",
            "class": "Text3D",
            "module": "Meshes"
        },
        {
            "file": "..\\source\\core\\objects\\mesh\\Text3D.js",
            "line": 35,
            "description": "Size of the text (depth)",
            "itemtype": "property",
            "name": "size",
            "type": "{Number}",
            "class": "Text3D",
            "module": "Meshes"
        },
        {
            "file": "..\\source\\core\\objects\\mesh\\Text3D.js",
            "line": 40,
            "description": "Height of the text",
            "itemtype": "property",
            "name": "height",
            "type": "{Number}",
            "class": "Text3D",
            "module": "Meshes"
        },
        {
            "file": "..\\source\\core\\objects\\mesh\\Text3D.js",
            "line": 45,
            "description": "Bevel",
            "itemtype": "property",
            "name": "bevel",
            "type": "{boolean}",
            "class": "Text3D",
            "module": "Meshes"
        },
        {
            "file": "..\\source\\core\\objects\\mesh\\Text3D.js",
            "line": 50,
            "description": "Bevel thickness",
            "itemtype": "property",
            "name": "bevelThickness",
            "type": "{Number}",
            "class": "Text3D",
            "module": "Meshes"
        },
        {
            "file": "..\\source\\core\\objects\\mesh\\Text3D.js",
            "line": 55,
            "description": "Bevel size",
            "itemtype": "property",
            "name": "bevelSize",
            "type": "{Number}",
            "class": "Text3D",
            "module": "Meshes"
        },
        {
            "file": "..\\source\\core\\objects\\mesh\\Text3D.js",
            "line": 86,
            "description": "Set font used by this text 3D instance",
            "params": [
                {
                    "name": "font",
                    "description": "Font",
                    "type": "Font"
                }
            ],
            "itemtype": "method",
            "name": "setFont",
            "class": "Text3D",
            "module": "Meshes"
        },
        {
            "file": "..\\source\\core\\objects\\mesh\\Text3D.js",
            "line": 98,
            "description": "Set Text",
            "params": [
                {
                    "name": "text",
                    "description": "",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setText",
            "class": "Text3D",
            "module": "Meshes"
        },
        {
            "file": "..\\source\\core\\objects\\mesh\\Text3D.js",
            "line": 118,
            "description": "Update text geometry\nShould be called after chaging any attribute",
            "itemtype": "method",
            "name": "updateText",
            "class": "Text3D",
            "module": "Meshes"
        },
        {
            "file": "..\\source\\core\\objects\\mesh\\Text3D.js",
            "line": 140,
            "description": "Clone this Text3D instance",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "Clone of this object",
                "type": "Text3D"
            },
            "class": "Text3D",
            "module": "Meshes"
        },
        {
            "file": "..\\source\\core\\objects\\mesh\\Text3D.js",
            "line": 150,
            "description": "Dispose mesh along with its material and geometry",
            "itemtype": "method",
            "name": "dispose",
            "class": "Text3D",
            "module": "Meshes"
        },
        {
            "file": "..\\source\\core\\objects\\mesh\\Text3D.js",
            "line": 172,
            "description": "Create JSON for object\nNeed to backup geometry and set to undefined to avoid it being stored",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "Text3D",
            "module": "Meshes"
        },
        {
            "file": "..\\source\\core\\objects\\particle\\ParticleEmitter.js",
            "line": 13,
            "description": "SPE Group\nhttps://squarefeet.github.io/ShaderParticleEngine/docs/api/SPE.Group.html",
            "itemtype": "property",
            "name": "group",
            "type": "{SPE.Group}",
            "class": "ParticleEmitter",
            "module": "Particles"
        },
        {
            "file": "..\\source\\core\\objects\\particle\\ParticleEmitter.js",
            "line": 19,
            "description": "SPE EmitterW\nEmitter has attributes that can be used to controll the particle system\nhttps://squarefeet.github.io/ShaderParticleEngine/docs/api/SPE.Emitter.html",
            "itemtype": "property",
            "name": "emitter",
            "type": "{SPE.Emitter}",
            "class": "ParticleEmitter",
            "module": "Particles"
        },
        {
            "file": "..\\source\\core\\objects\\particle\\ParticleEmitter.js",
            "line": 117,
            "description": "Initialize particle system\nCalled automatically by the runtime",
            "itemtype": "method",
            "name": "initialize",
            "class": "ParticleEmitter",
            "module": "Particles"
        },
        {
            "file": "..\\source\\core\\objects\\particle\\ParticleEmitter.js",
            "line": 132,
            "description": "Update particle emitter state\nCalled automatically by the runtime",
            "itemtype": "method",
            "name": "update",
            "class": "ParticleEmitter",
            "module": "Particles"
        },
        {
            "file": "..\\source\\core\\objects\\particle\\ParticleEmitter.js",
            "line": 147,
            "description": "Dispose particle emitter",
            "itemtype": "method",
            "name": "dispose",
            "class": "ParticleEmitter",
            "module": "Particles"
        },
        {
            "file": "..\\source\\core\\objects\\particle\\ParticleEmitter.js",
            "line": 171,
            "description": "Create JSON for object\nNeed to backup material and geometry and set to undefined to avoid it being stored",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "ParticleEmitter",
            "module": "Particles"
        },
        {
            "file": "..\\source\\core\\objects\\physics\\PhysicsObject.js",
            "line": 15,
            "description": "cannon.js Body object",
            "itemtype": "attribute",
            "name": "body",
            "type": "{CANNON.Body}",
            "class": "PhysicsObject",
            "module": "Physics"
        },
        {
            "file": "..\\source\\core\\objects\\physics\\PhysicsObject.js",
            "line": 20,
            "description": "cannon.js world",
            "itemtype": "attribute",
            "name": "world",
            "type": "{CANNON.World}",
            "class": "PhysicsObject",
            "module": "Physics"
        },
        {
            "file": "..\\source\\core\\objects\\physics\\PhysicsObject.js",
            "line": 41,
            "description": "Intialize physics object and add it to the scene physics world\nAutomatically called by the runtime",
            "itemtype": "method",
            "name": "initialize",
            "class": "PhysicsObject",
            "module": "Physics"
        },
        {
            "file": "..\\source\\core\\objects\\physics\\PhysicsObject.js",
            "line": 71,
            "description": "Update object position and rotation based on cannon.js body\nAutomatically called by the runtime",
            "itemtype": "method",
            "name": "update",
            "class": "PhysicsObject",
            "module": "Physics"
        },
        {
            "file": "..\\source\\core\\objects\\physics\\PhysicsObject.js",
            "line": 92,
            "description": "Add shape to physics object body",
            "params": [
                {
                    "name": "shape",
                    "description": "",
                    "type": "CANNON.Shape"
                }
            ],
            "itemtype": "method",
            "name": "addShape",
            "class": "PhysicsObject",
            "module": "Physics"
        },
        {
            "file": "..\\source\\core\\objects\\physics\\PhysicsObject.js",
            "line": 106,
            "description": "Create JSON for object\nNeed to backup material and geometry and set to undefined to avoid it being stored",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "PhysicsObject",
            "module": "Physics"
        },
        {
            "file": "..\\source\\core\\objects\\script\\Script.js",
            "line": 29,
            "description": "Javascript code attached to the script",
            "itemtype": "property",
            "name": "code",
            "type": "{String}",
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "..\\source\\core\\objects\\script\\Script.js",
            "line": 34,
            "description": "Compiled function used during runtime",
            "itemtype": "attribute",
            "name": "script",
            "type": "{Function}",
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "..\\source\\core\\objects\\script\\Script.js",
            "line": 39,
            "description": "Pointer to the parent program\nUsed access program resources easier",
            "itemtype": "property",
            "name": "program",
            "type": "{Program}",
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "..\\source\\core\\objects\\script\\Script.js",
            "line": 45,
            "description": "Pointer to the parent scene",
            "itemtype": "property",
            "name": "scene",
            "type": "{Scene}",
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "..\\source\\core\\objects\\script\\Script.js",
            "line": 66,
            "description": "Default script code used when creating a new Script",
            "itemtype": "attribute",
            "name": "default",
            "type": "{String}",
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "..\\source\\core\\objects\\script\\Script.js",
            "line": 73,
            "description": "Initialize script\nAutomatically called by the runtime\nCalls the script initialize method if it exists",
            "itemtype": "method",
            "name": "initialize",
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "..\\source\\core\\objects\\script\\Script.js",
            "line": 112,
            "description": "Update script state\nCalls the script update method if it exists",
            "itemtype": "method",
            "name": "update",
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "..\\source\\core\\objects\\script\\Script.js",
            "line": 139,
            "description": "Call resize method if available",
            "itemtype": "method",
            "name": "resize",
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "..\\source\\core\\objects\\script\\Script.js",
            "line": 151,
            "description": "Call onAppData if available",
            "itemtype": "method",
            "name": "appData",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "..\\source\\core\\objects\\script\\Script.js",
            "line": 164,
            "description": "Set script code",
            "itemtype": "method",
            "name": "setCode",
            "params": [
                {
                    "name": "code",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "..\\source\\core\\objects\\script\\Script.js",
            "line": 193,
            "description": "Create JSON for script",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "..\\source\\core\\objects\\spine\\SpineAnimation.js",
            "line": 18,
            "description": "Array of SpineTextures used by the animation",
            "itemtype": "property",
            "name": "textures",
            "type": "{Array}",
            "class": "SpineAnimation",
            "module": "Animations"
        },
        {
            "file": "..\\source\\core\\objects\\spine\\SpineAnimation.js",
            "line": 24,
            "description": "Animation data",
            "itemtype": "property",
            "name": "json",
            "type": "{Object}",
            "class": "SpineAnimation",
            "module": "Animations"
        },
        {
            "file": "..\\source\\core\\objects\\spine\\SpineAnimation.js",
            "line": 30,
            "description": "Texture atlas information",
            "itemtype": "property",
            "name": "atlas",
            "type": "{Object}",
            "class": "SpineAnimation",
            "module": "Animations"
        },
        {
            "file": "..\\source\\core\\objects\\spine\\SpineAnimation.js",
            "line": 112,
            "description": "Update animation state\nAutomatically called by the rutime",
            "itemtype": "method",
            "name": "update",
            "class": "SpineAnimation",
            "module": "Animations"
        },
        {
            "file": "..\\source\\core\\objects\\spine\\SpineAnimation.js",
            "line": 132,
            "description": "Get all available animations",
            "itemtype": "method",
            "name": "getAnimations",
            "return": {
                "description": "Animations",
                "type": "Array"
            },
            "class": "SpineAnimation",
            "module": "Animations"
        },
        {
            "file": "..\\source\\core\\objects\\spine\\SpineAnimation.js",
            "line": 142,
            "description": "Set animation from track number and name",
            "itemtype": "method",
            "name": "setAnimation",
            "params": [
                {
                    "name": "track",
                    "description": "Track number",
                    "type": "Number"
                },
                {
                    "name": "name",
                    "description": "Animation name",
                    "type": "String"
                }
            ],
            "class": "SpineAnimation",
            "module": "Animations"
        },
        {
            "file": "..\\source\\core\\objects\\spine\\SpineAnimation.js",
            "line": 157,
            "description": "Get skins in this animation",
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "SpineAnimation",
            "module": "Animations"
        },
        {
            "file": "..\\source\\core\\objects\\spine\\SpineAnimation.js",
            "line": 166,
            "description": "Update mesh geometry from animation state",
            "itemtype": "method",
            "name": "updateGeometry",
            "class": "SpineAnimation",
            "module": "Animations"
        },
        {
            "file": "..\\source\\core\\objects\\spine\\SpineAnimation.js",
            "line": 225,
            "description": "Create JSON for script",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "SpineAnimation",
            "module": "Animations"
        },
        {
            "file": "..\\source\\core\\objects\\sprite\\Sprite.js",
            "line": 14,
            "description": "Material used to render the sprite",
            "itemtype": "property",
            "name": "material",
            "type": "{Material}",
            "class": "Sprite",
            "module": "Sprite"
        },
        {
            "file": "..\\source\\core\\objects\\sprite\\Sprite.js",
            "line": 29,
            "description": "Dispose the sprite material",
            "itemtype": "method",
            "name": "dispose",
            "class": "Sprite",
            "module": "Sprite"
        },
        {
            "file": "..\\source\\core\\objects\\Program.js",
            "line": 15,
            "description": "NunuRuntime instance used to communication between nunu app and the host webpage",
            "itemtype": "property",
            "name": "app",
            "default": "null",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\source\\core\\objects\\Program.js",
            "line": 20,
            "description": "Enable virtual reality flag",
            "itemtype": "property",
            "name": "vr",
            "default": "false",
            "type": "{boolean}",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\source\\core\\objects\\Program.js",
            "line": 26,
            "description": "Virtual reality movement scale",
            "itemtype": "property",
            "name": "vrScale",
            "type": "{Number}",
            "default": "1.0",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\source\\core\\objects\\Program.js",
            "line": 32,
            "description": "Program description",
            "itemtype": "property",
            "name": "description",
            "type": "{String}",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\source\\core\\objects\\Program.js",
            "line": 37,
            "description": "Program author",
            "itemtype": "property",
            "name": "author",
            "type": "{String}",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\source\\core\\objects\\Program.js",
            "line": 42,
            "description": "Program version",
            "itemtype": "property",
            "name": "version",
            "type": "{String}",
            "default": "\"0\"",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\source\\core\\objects\\Program.js",
            "line": 48,
            "description": "Antialiasing flag",
            "itemtype": "property",
            "name": "antialiasing",
            "type": "{boolean}",
            "default": "false",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\source\\core\\objects\\Program.js",
            "line": 54,
            "description": "If true the program is rendered with shadows",
            "itemtype": "property",
            "name": "shadows",
            "type": "{boolean}",
            "default": "true",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\source\\core\\objects\\Program.js",
            "line": 60,
            "description": "Shadow type",
            "itemtype": "property",
            "name": "shadowsType",
            "type": "{Number}",
            "default": "PCFSoftShadowMap",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\source\\core\\objects\\Program.js",
            "line": 66,
            "description": "Flag to control pointer locking",
            "itemtype": "property",
            "name": "lockPointer",
            "type": "{boolean}",
            "default": "false",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\source\\core\\objects\\Program.js",
            "line": 135,
            "description": "Select initial scene and initialize that scene\nAutomatically called by the runtime",
            "itemtype": "method",
            "name": "initialize",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\source\\core\\objects\\Program.js",
            "line": 170,
            "description": "Set program mouse and keyboard",
            "itemtype": "method",
            "name": "setMouseKeyboard",
            "params": [
                {
                    "name": "mouse",
                    "description": "",
                    "type": "Mouse"
                },
                {
                    "name": "keyboard",
                    "description": "",
                    "type": "Keyboard"
                }
            ],
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\source\\core\\objects\\Program.js",
            "line": 182,
            "description": "Set program renderer",
            "itemtype": "method",
            "name": "setRenderer",
            "params": [
                {
                    "name": "renderer",
                    "description": "Three.js renderer to be used by this program",
                    "type": "WebGLRenderer"
                }
            ],
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\source\\core\\objects\\Program.js",
            "line": 193,
            "description": "Enter VR mode",
            "itemtype": "method",
            "name": "displayVR",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\source\\core\\objects\\Program.js",
            "line": 218,
            "description": "Exit VR mode",
            "itemtype": "method",
            "name": "exitVR",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\source\\core\\objects\\Program.js",
            "line": 237,
            "description": "Update program state\nAutomatically called by the runtime",
            "itemtype": "method",
            "name": "update",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\source\\core\\objects\\Program.js",
            "line": 247,
            "description": "Render program to canvas\nRenderer passed as argument",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "renderer",
                    "description": "",
                    "type": "Renderer"
                }
            ],
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\source\\core\\objects\\Program.js",
            "line": 295,
            "description": "Resize program elements\nCalled by the runtime every time the window is resized",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "x",
                    "description": "Width",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Height",
                    "type": "Number"
                }
            ],
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\source\\core\\objects\\Program.js",
            "line": 321,
            "description": "Change scene during runtime, this method can receive booth a scene name or a scene object\nThis method should be used inside of script objects during runtime",
            "itemtype": "method",
            "name": "setScene",
            "params": [
                {
                    "name": "scene",
                    "description": "",
                    "type": "Scene|String"
                }
            ],
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\source\\core\\objects\\Program.js",
            "line": 349,
            "description": "Remove Scene from program",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "scene",
                    "description": "",
                    "type": "Scene"
                }
            ],
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\source\\core\\objects\\Program.js",
            "line": 370,
            "description": "Add new scene to this program\nOn the program class only scenes can be added as children",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "scene",
                    "description": "",
                    "type": "Scene"
                }
            ],
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\source\\core\\objects\\Program.js",
            "line": 391,
            "description": "Clone program, keeping uuids and every identification attribute\nClone method uses the ObjectLoad to serialize and create a new program instance with the same data",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "Cloned program",
                "type": "Program"
            },
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\source\\core\\objects\\Program.js",
            "line": 402,
            "description": "Set a scene as initial scene using its uuid\nThis method is used by the editor",
            "itemtype": "method",
            "name": "setInitialScene",
            "params": [
                {
                    "name": "uuid",
                    "description": "Scene uuid",
                    "type": "String"
                }
            ],
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\source\\core\\objects\\Program.js",
            "line": 413,
            "description": "Create a scene using a default template\nThis is the scene used when creating a new program or scene inside the editor",
            "itemtype": "method",
            "name": "addDefaultScene",
            "params": [
                {
                    "name": "material",
                    "description": "Default material used by objects, if empty a new material is created",
                    "type": "Material"
                }
            ],
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\source\\core\\objects\\Program.js",
            "line": 456,
            "description": "Dispose program data to avoid memory leaks\nCalled when exiting the program",
            "itemtype": "method",
            "name": "dispose",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\source\\core\\objects\\Program.js",
            "line": 488,
            "description": "Receive external data and pass it to all script instances",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "receiveDataApp",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\source\\core\\objects\\Program.js",
            "line": 524,
            "description": "Send data to external app instance",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "sendDataApp",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\source\\core\\objects\\Program.js",
            "line": 555,
            "description": "Serialize object as JSON.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "exportResources",
                    "description": "If true all resouces in the program are exported, else only resources attached to objects are exported",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\source\\core\\objects\\Scene.js",
            "line": 13,
            "description": "Cannon.js world used for physics simulation",
            "itemtype": "property",
            "name": "world",
            "type": "World",
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "..\\source\\core\\objects\\Scene.js",
            "line": 17,
            "description": "Raycaster used for mouse interaction with 3D objects",
            "itemtype": "property",
            "name": "raycaster",
            "type": "Raycaster",
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "..\\source\\core\\objects\\Scene.js",
            "line": 21,
            "description": "Normalized mouse coordinates used by the raycaster",
            "itemtype": "property",
            "name": "mouse",
            "type": "Vector2",
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "..\\source\\core\\objects\\Scene.js",
            "line": 25,
            "description": "Program that contains this scene",
            "itemtype": "property",
            "name": "program",
            "type": "Program",
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "..\\source\\core\\objects\\Scene.js",
            "line": 29,
            "description": "Canvas used to draw this scene",
            "itemtype": "property",
            "name": "canvas",
            "type": "DOM",
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "..\\source\\core\\objects\\Scene.js",
            "line": 69,
            "description": "Initialize scene objects\nCalled automatically by the runtime",
            "itemtype": "method",
            "name": "initialize",
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "..\\source\\core\\objects\\Scene.js",
            "line": 90,
            "description": "Update scene\nCalled automatically by the runtime",
            "itemtype": "method",
            "name": "update",
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "..\\source\\core\\objects\\Scene.js",
            "line": 113,
            "description": "Get camera from scene using cameras uuid",
            "itemtype": "method",
            "name": "getCamera",
            "params": [
                {
                    "name": "uuid",
                    "description": "UUID of the camera",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Camera if found, else null",
                "type": "Camera"
            },
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "..\\source\\core\\objects\\Scene.js",
            "line": 144,
            "description": "Add camera to active cameras list",
            "itemtype": "method",
            "name": "addCamera",
            "params": [
                {
                    "name": "camera",
                    "description": "",
                    "type": "Camera"
                }
            ],
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "..\\source\\core\\objects\\Scene.js",
            "line": 155,
            "description": "Update active cameras order",
            "itemtype": "method",
            "name": "updateCameraOrder",
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "..\\source\\core\\objects\\Scene.js",
            "line": 167,
            "description": "Remove camera from active camera list",
            "params": [
                {
                    "name": "camera",
                    "description": "Camera to be removed",
                    "type": "Camera"
                }
            ],
            "itemtype": "method",
            "name": "removeCamera",
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "..\\source\\core\\objects\\Scene.js",
            "line": 181,
            "description": "Set scene fog mode",
            "params": [
                {
                    "name": "mode",
                    "description": "",
                    "type": "Number"
                }
            ],
            "itemtype": "method",
            "name": "setFogMode",
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "..\\source\\core\\objects\\Scene.js",
            "line": 204,
            "description": "Serialize object as JSON\nAlso serializes physics world information",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "..\\source\\core\\resources\\Audio.js",
            "line": 29,
            "description": "Serialize audio data as JSON, audio data is serialized in Base64",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Meta"
                }
            ],
            "return": {
                "description": "data",
                "type": "Object"
            },
            "class": "Audio",
            "module": "Resources"
        },
        {
            "file": "..\\source\\core\\resources\\Font.js",
            "line": 58,
            "description": "Generate font shapes used to create 3D geometries",
            "params": [
                {
                    "name": "text",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "size",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "divisions",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "paths",
                "type": "Array"
            },
            "class": "Font",
            "module": "Resources"
        },
        {
            "file": "..\\source\\core\\resources\\Font.js",
            "line": 214,
            "description": "Serialize resource to json",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "Font",
            "module": "Resources"
        },
        {
            "file": "..\\source\\core\\resources\\Resource.js",
            "line": 11,
            "description": "Resource name. Not required to be unique.",
            "itemtype": "property",
            "name": "name",
            "type": "{String}",
            "class": "Resource",
            "module": "Resources"
        },
        {
            "file": "..\\source\\core\\resources\\Resource.js",
            "line": 16,
            "description": "UUID unique identifier.",
            "itemtype": "property",
            "name": "uuid",
            "type": "{String}",
            "class": "Resource",
            "module": "Resources"
        },
        {
            "file": "..\\source\\core\\resources\\Resource.js",
            "line": 21,
            "description": "Resrouce type. Used to identify the type of the resource, usefull for serialization.",
            "itemtype": "property",
            "name": "type",
            "type": "{String}",
            "class": "Resource",
            "module": "Resources"
        },
        {
            "file": "..\\source\\core\\resources\\Resource.js",
            "line": 26,
            "description": "Data format (Base64, ArrayBuffer, ...)\nIndicates in witch format the data is being stored",
            "itemtype": "property",
            "name": "format",
            "type": "{Object}",
            "class": "Resource",
            "module": "Resources"
        },
        {
            "file": "..\\source\\core\\resources\\Resource.js",
            "line": 32,
            "description": "Data encoding (MP3, JPEG, MP4, ...)\nIndicated how the data is encoded",
            "itemtype": "property",
            "name": "encoding",
            "type": "{String, ArrayBuffer, ...}",
            "class": "Resource",
            "module": "Resources"
        },
        {
            "file": "..\\source\\core\\resources\\Resource.js",
            "line": 38,
            "description": "Data",
            "itemtype": "property",
            "name": "data",
            "type": "{Object}",
            "class": "Resource",
            "module": "Resources"
        },
        {
            "file": "..\\source\\core\\resources\\Resource.js",
            "line": 54,
            "description": "Serialize resource to json",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "Resource",
            "module": "Resources"
        },
        {
            "file": "..\\source\\core\\resources\\ResourceManager.js",
            "line": 20,
            "description": "Images",
            "itemtype": "property",
            "name": "images",
            "type": "{Array}",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "..\\source\\core\\resources\\ResourceManager.js",
            "line": 25,
            "description": "Videos",
            "itemtype": "property",
            "name": "videos",
            "type": "{Array}",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "..\\source\\core\\resources\\ResourceManager.js",
            "line": 30,
            "description": "Audio",
            "itemtype": "property",
            "name": "audio",
            "type": "{Array}",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "..\\source\\core\\resources\\ResourceManager.js",
            "line": 35,
            "description": "Fonts",
            "itemtype": "property",
            "name": "fonts",
            "type": "{Array}",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "..\\source\\core\\resources\\ResourceManager.js",
            "line": 40,
            "description": "Materials",
            "itemtype": "property",
            "name": "materials",
            "type": "{Array}",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "..\\source\\core\\resources\\ResourceManager.js",
            "line": 45,
            "description": "Textures",
            "itemtype": "property",
            "name": "textures",
            "type": "{Array}",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "..\\source\\core\\resources\\ResourceManager.js",
            "line": 50,
            "description": "Geomtries",
            "itemtype": "property",
            "name": "geometries",
            "type": "{Array}",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "..\\source\\core\\resources\\ResourceManager.js",
            "line": 67,
            "description": "Get material by its name",
            "itemtype": "method",
            "name": "getMaterialByName",
            "params": [
                {
                    "name": "name",
                    "description": "Material name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Material if found else null",
                "type": "Material"
            },
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "..\\source\\core\\resources\\ResourceManager.js",
            "line": 86,
            "description": "Add material to materials list",
            "itemtype": "method",
            "name": "addMaterial",
            "params": [
                {
                    "name": "material",
                    "description": "Material to be added",
                    "type": "Material"
                }
            ],
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "..\\source\\core\\resources\\ResourceManager.js",
            "line": 99,
            "description": "Remove material from materials list, also receives default material used to replace",
            "itemtype": "method",
            "name": "removeMaterial",
            "params": [
                {
                    "name": "material",
                    "description": "Material to be removed from manager",
                    "type": "Material"
                },
                {
                    "name": "defaultMaterial",
                    "description": "Default mesh material to replace objects mesh materials",
                    "type": "Material"
                },
                {
                    "name": "defaultMaterialSprite",
                    "description": "Defaul sprite material",
                    "type": "Material"
                }
            ],
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "..\\source\\core\\resources\\ResourceManager.js",
            "line": 139,
            "description": "Get texture by name",
            "itemtype": "method",
            "name": "getTextureByName",
            "params": [
                {
                    "name": "name",
                    "description": "Texture name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Texture is found else null",
                "type": "Texture"
            },
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "..\\source\\core\\resources\\ResourceManager.js",
            "line": 158,
            "description": "Add texture to texture list",
            "itemtype": "method",
            "name": "addTexture",
            "params": [
                {
                    "name": "texture",
                    "description": "",
                    "type": "Texture"
                }
            ],
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "..\\source\\core\\resources\\ResourceManager.js",
            "line": 168,
            "description": "Remove texture from textures list (also receives default used to replace)",
            "itemtype": "method",
            "name": "removeTexture",
            "params": [
                {
                    "name": "texture",
                    "description": "",
                    "type": "Texture"
                },
                {
                    "name": "defaultTexture",
                    "description": "",
                    "type": "Texture"
                }
            ],
            "return": {
                "description": "Texture if found, else null",
                "type": "Texture"
            },
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "..\\source\\core\\resources\\ResourceManager.js",
            "line": 249,
            "description": "Get font by name",
            "itemtype": "method",
            "name": "getFontByName",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Font if found, else null",
                "type": "Font"
            },
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "..\\source\\core\\resources\\ResourceManager.js",
            "line": 268,
            "description": "Add font to fonts list",
            "itemtype": "method",
            "name": "addFont",
            "params": [
                {
                    "name": "font",
                    "description": "",
                    "type": "Font"
                }
            ],
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "..\\source\\core\\resources\\ResourceManager.js",
            "line": 281,
            "description": "Remove font from font list",
            "itemtype": "method",
            "name": "removeFont",
            "params": [
                {
                    "name": "font",
                    "description": "",
                    "type": "Font"
                },
                {
                    "name": "defaultFont",
                    "description": "",
                    "type": "Font"
                }
            ],
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "..\\source\\core\\resources\\ResourceManager.js",
            "line": 308,
            "description": "Get audio by name",
            "itemtype": "method",
            "name": "getAudioByName",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Audio if found, else null",
                "type": "Audio"
            },
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "..\\source\\core\\resources\\ResourceManager.js",
            "line": 327,
            "description": "Add audio to audio list",
            "params": [
                {
                    "name": "audio",
                    "description": "",
                    "type": "Audio"
                }
            ],
            "itemtype": "method",
            "name": "addAudio",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "..\\source\\core\\resources\\ResourceManager.js",
            "line": 340,
            "description": "Remove audio",
            "params": [
                {
                    "name": "audio",
                    "description": "",
                    "type": "Audio"
                },
                {
                    "name": "defaultAudio",
                    "description": "",
                    "type": "Audio"
                }
            ],
            "itemtype": "method",
            "name": "removeAudio",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "..\\source\\core\\resources\\Video.js",
            "line": 29,
            "description": "Serialize resource to json\nVideo is stores in Base64",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "Video",
            "module": "Resources"
        },
        {
            "file": "..\\source\\core\\texture\\CanvasTexture.js",
            "line": 24,
            "description": "Image is used to store a DOM canvas element",
            "itemtype": "property",
            "name": "image",
            "type": "{DOM}",
            "class": "CanvasTexture",
            "module": "Textures"
        },
        {
            "file": "..\\source\\core\\texture\\CanvasTexture.js",
            "line": 29,
            "description": "Canvas context 2D, can be used to draw content do the canvas texture",
            "itemtype": "property",
            "name": "context",
            "type": "{Context2D}",
            "class": "CanvasTexture",
            "module": "Textures"
        },
        {
            "file": "..\\source\\core\\texture\\CanvasTexture.js",
            "line": 34,
            "description": "Canvas height",
            "itemtype": "property",
            "name": "height",
            "type": "{Number}",
            "class": "CanvasTexture",
            "module": "Textures"
        },
        {
            "file": "..\\source\\core\\texture\\CanvasTexture.js",
            "line": 39,
            "description": "Canvas width",
            "itemtype": "property",
            "name": "width",
            "type": "{Number}",
            "class": "CanvasTexture",
            "module": "Textures"
        },
        {
            "file": "..\\source\\core\\texture\\CanvasTexture.js",
            "line": 70,
            "description": "Create JSON description for canvas texture, canvas image is not serialized",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "toJSON",
            "class": "CanvasTexture",
            "module": "Textures"
        },
        {
            "file": "..\\source\\core\\texture\\CubeTexture.js",
            "line": 39,
            "description": "Serialize cubetexture to JSON",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "CubeTexture",
            "module": "Textures"
        },
        {
            "file": "..\\source\\core\\texture\\Texture.js",
            "line": 74,
            "description": "Dispose texture",
            "itemtype": "method",
            "name": "dispose",
            "class": "Texture",
            "module": "Textures"
        },
        {
            "file": "..\\source\\core\\texture\\Texture.js",
            "line": 85,
            "description": "Create JSON description for texture, serializes image used in the texture\nTHREE.Texture serialization is different inside nunuStudio, the THREE.Texture class does not serialize any image data.",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "toJSON",
            "class": "Texture",
            "module": "Textures"
        },
        {
            "file": "..\\source\\core\\texture\\VideoTexture.js",
            "line": 19,
            "description": "Video audio volume",
            "itemtype": "property",
            "name": "volume",
            "default": "1.0",
            "type": "{Number}",
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "..\\source\\core\\texture\\VideoTexture.js",
            "line": 25,
            "description": "If true the playback starts automatically",
            "itemtype": "property",
            "name": "autoplay",
            "default": "true",
            "type": "{boolean}",
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "..\\source\\core\\texture\\VideoTexture.js",
            "line": 31,
            "description": "Start time in seconds",
            "itemtype": "property",
            "name": "playbackRate",
            "default": "1.0",
            "type": "{Number}",
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "..\\source\\core\\texture\\VideoTexture.js",
            "line": 37,
            "description": "If true the video plays in loop",
            "itemtype": "property",
            "name": "loop",
            "default": "true",
            "type": "{boolean}",
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "..\\source\\core\\texture\\VideoTexture.js",
            "line": 99,
            "description": "Set video time in seconds",
            "params": [
                {
                    "name": "time",
                    "description": "",
                    "type": "Number"
                }
            ],
            "itemtype": "method",
            "name": "setTime",
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "..\\source\\core\\texture\\VideoTexture.js",
            "line": 109,
            "description": "Set loop mode",
            "params": [
                {
                    "name": "loop",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "setLoop",
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "..\\source\\core\\texture\\VideoTexture.js",
            "line": 120,
            "description": "Set video volume",
            "params": [
                {
                    "name": "volume",
                    "description": "",
                    "type": "Number"
                }
            ],
            "itemtype": "method",
            "name": "setVolume",
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "..\\source\\core\\texture\\VideoTexture.js",
            "line": 131,
            "description": "Set video playback speed",
            "itemtype": "method",
            "name": "setPlaybackRate",
            "params": [
                {
                    "name": "playbackRate",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "..\\source\\core\\texture\\VideoTexture.js",
            "line": 142,
            "description": "Pause video playback",
            "itemtype": "method",
            "name": "pause",
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "..\\source\\core\\texture\\VideoTexture.js",
            "line": 154,
            "description": "Start playing video",
            "itemtype": "method",
            "name": "play",
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "..\\source\\core\\texture\\VideoTexture.js",
            "line": 166,
            "description": "Dispose video texture",
            "itemtype": "method",
            "name": "dispose",
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "..\\source\\core\\texture\\VideoTexture.js",
            "line": 182,
            "description": "Create Video texture json description",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "..\\source\\core\\texture\\WebcamTexture.js",
            "line": 76,
            "description": "Dispose webcam texture",
            "itemtype": "method",
            "name": "dispose",
            "class": "WebcamTexture",
            "module": "Textures"
        },
        {
            "file": "..\\source\\core\\three\\Fog.js",
            "line": 11,
            "description": "No fog",
            "itemtype": "attribute",
            "name": "NONE",
            "type": "{Number}",
            "class": "Fog",
            "module": "THREE"
        },
        {
            "file": "..\\source\\core\\three\\Fog.js",
            "line": 18,
            "description": "Linear fog",
            "itemtype": "attribute",
            "name": "LINEAR",
            "type": "{Number}",
            "class": "Fog",
            "module": "THREE"
        },
        {
            "file": "..\\source\\core\\three\\Fog.js",
            "line": 25,
            "description": "Exponential fog",
            "itemtype": "attribute",
            "name": "EXPONENTIAL",
            "type": "{Number}",
            "class": "Fog",
            "module": "THREE"
        },
        {
            "file": "..\\source\\core\\three\\Material.js",
            "line": 11,
            "description": "Dispose material",
            "itemtype": "method",
            "name": "dispose",
            "class": "Material",
            "module": "THREE"
        },
        {
            "file": "..\\source\\core\\three\\MultiMaterial.js",
            "line": 11,
            "description": "UUID unique identifier.",
            "itemtype": "property",
            "name": "uuid",
            "type": "{String}",
            "class": "MultiMaterial",
            "module": "THREE"
        },
        {
            "file": "..\\source\\core\\three\\MultiMaterial.js",
            "line": 17,
            "description": "Resource name. Not required to be unique.",
            "itemtype": "property",
            "name": "name",
            "type": "{String}",
            "class": "MultiMaterial",
            "module": "THREE"
        },
        {
            "file": "..\\source\\core\\three\\MultiMaterial.js",
            "line": 24,
            "description": "Dispose materials inside the container",
            "itemtype": "method",
            "name": "dispose",
            "class": "MultiMaterial",
            "module": "THREE"
        },
        {
            "file": "..\\source\\core\\three\\Object3D.js",
            "line": 13,
            "description": "Array with object's children.",
            "itemtype": "property",
            "name": "children",
            "type": "{Array}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\source\\core\\three\\Object3D.js",
            "line": 18,
            "description": "When this is set, it checks every frame if the object is in the frustum of the camera before rendering the object. Otherwise the object gets renderered every frame even if it isn't visible.",
            "itemtype": "property",
            "name": "frustumCulled",
            "default": "true",
            "type": "{boolean}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\source\\core\\three\\Object3D.js",
            "line": 24,
            "description": "The layer membership of the object. The object is only visible if it has at least one layer in common with the Camera in use.",
            "itemtype": "property",
            "name": "layers",
            "type": "{Layers}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\source\\core\\three\\Object3D.js",
            "line": 29,
            "description": "The local transform matrix",
            "itemtype": "property",
            "name": "matrix",
            "type": "{Matrix4}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\source\\core\\three\\Object3D.js",
            "line": 34,
            "description": "When this is set, it calculates the matrix of position, (rotation or quaternion) and scale every frame and also recalculates the matrixWorld property.",
            "itemtype": "property",
            "name": "matrixAutoUpdate",
            "default": "true",
            "type": "{boolean}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\source\\core\\three\\Object3D.js",
            "line": 40,
            "description": "The global transform of the object. If the Object3d has no parent, then it's identical to the local transform.",
            "itemtype": "property",
            "name": "matrixWorld",
            "type": "{Matrix4}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\source\\core\\three\\Object3D.js",
            "line": 45,
            "description": "Name of the object (doesn't need to be unique).",
            "itemtype": "property",
            "name": "name",
            "type": "{String}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\source\\core\\three\\Object3D.js",
            "line": 50,
            "description": "The object's local position.",
            "itemtype": "property",
            "name": "position",
            "type": "{Vector3}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\source\\core\\three\\Object3D.js",
            "line": 55,
            "description": "Object's local rotation as a Quaternion.",
            "itemtype": "property",
            "name": "quaternion",
            "type": "{Quaternion}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\source\\core\\three\\Object3D.js",
            "line": 60,
            "description": "Object's local rotation (see Euler angles), in radians.",
            "itemtype": "property",
            "name": "rotation",
            "type": "{Euler}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\source\\core\\three\\Object3D.js",
            "line": 65,
            "description": "The object's local scale.",
            "itemtype": "property",
            "name": "scale",
            "type": "{Vector3}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\source\\core\\three\\Object3D.js",
            "line": 70,
            "description": "This is used by the lookAt method, for example, to determine the orientation of the result.",
            "itemtype": "property",
            "name": "up",
            "type": "{Vector3}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\source\\core\\three\\Object3D.js",
            "line": 75,
            "description": "UUID of this object instance. This gets automatically assigned, so this shouldn't be edited.",
            "itemtype": "property",
            "name": "uuid",
            "type": "{String}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\source\\core\\three\\Object3D.js",
            "line": 80,
            "description": "Object gets rendered if true.",
            "itemtype": "property",
            "name": "visible",
            "type": "{boolean}",
            "default": "true",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\source\\core\\three\\Object3D.js",
            "line": 86,
            "description": "This value allows the default rendering order of scene graph objects to be overridden although opaque and transparent objects remain sorted independently.",
            "itemtype": "property",
            "name": "renderOrder",
            "default": "0",
            "type": "{Number}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\source\\core\\three\\Object3D.js",
            "line": 92,
            "description": "Whether the object gets rendered into shadow map.",
            "itemtype": "property",
            "name": "castShadow",
            "default": "false",
            "type": "{boolean}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\source\\core\\three\\Object3D.js",
            "line": 98,
            "description": "Whether the material receives shadows.",
            "itemtype": "property",
            "name": "receiveShadow",
            "default": "false",
            "type": "{boolean}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\source\\core\\three\\Object3D.js",
            "line": 104,
            "description": "Space reserved for user data, can be used for variables in runtime or can be used by scripts to store values on an object.",
            "itemtype": "property",
            "name": "userData",
            "type": "{Object}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\source\\core\\three\\Object3D.js",
            "line": 116,
            "description": "Initialize the object.",
            "itemtype": "method",
            "name": "initialize",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\source\\core\\three\\Object3D.js",
            "line": 128,
            "description": "Update the object state.",
            "itemtype": "method",
            "name": "update",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\source\\core\\three\\Object3D.js",
            "line": 140,
            "description": "Dispose the object (to avoid memory leaks).",
            "itemtype": "method",
            "name": "dispose",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\source\\core\\three\\Object3D.js",
            "line": 152,
            "description": "Remove all children from object.",
            "itemtype": "method",
            "name": "removeAll",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\source\\core\\three\\Object3D.js",
            "line": 164,
            "description": "Destroy object, dispose and remove from its parent.",
            "itemtype": "method",
            "name": "destroy",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\source\\core\\three\\Object3D.js",
            "line": 185,
            "description": "Serialize object as JSON.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "resourceAccess",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "recursive",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\source\\core\\three\\Object3D.js",
            "line": 313,
            "description": "Remove children from this object",
            "params": [
                {
                    "name": "objects",
                    "description": "Removes object as child of this object. An arbitrary number of objects may be removed.",
                    "type": "Object3D"
                }
            ],
            "itemtype": "method",
            "name": "remove",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\source\\core\\three\\Object3D.js",
            "line": 319,
            "description": "Rotates the object to face a point in world space.",
            "params": [
                {
                    "name": "vector",
                    "description": "A vector representing a position in world space.",
                    "type": "Vector3"
                }
            ],
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\source\\core\\three\\Object3D.js",
            "line": 324,
            "description": "Converts the vector from local space to world space.",
            "params": [
                {
                    "name": "vector",
                    "description": "vector representing a position in local (object) space.",
                    "type": "Vector3"
                }
            ],
            "itemtype": "method",
            "name": "localToWorld",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\source\\core\\three\\Object3D.js",
            "line": 330,
            "description": "Updates the vector from world space to local space.",
            "params": [
                {
                    "name": "vector",
                    "description": "A world vector",
                    "type": "Vector3"
                }
            ],
            "itemtype": "method",
            "name": "worldToLocal",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\source\\core\\three\\Object3D.js",
            "line": 336,
            "description": "Adds object as child of this object. An arbitrary number of objects may be added.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "objects",
                    "description": "",
                    "type": "Object3D"
                }
            ],
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\source\\core\\three\\Object3D.js",
            "line": 342,
            "description": "This updates the position, rotation and scale with the matrix.",
            "itemtype": "method",
            "name": "applyMatrix",
            "params": [
                {
                    "name": "matrix",
                    "description": "",
                    "type": "Matrix4"
                }
            ],
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\source\\core\\three\\Object3D.js",
            "line": 348,
            "description": "Returns a clone of this object and optionaly all descendants.",
            "itemtype": "method",
            "name": "clone",
            "params": [
                {
                    "name": "recursive",
                    "description": "If true, descendants of the object are also cloned. Default is true.",
                    "type": "Boolean"
                }
            ],
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\source\\core\\three\\Object3D.js",
            "line": 354,
            "description": "Copy the given object into this object.",
            "itemtype": "method",
            "name": "copy",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object3D"
                },
                {
                    "name": "recursive",
                    "description": "If true, descendants of the object are also copied. Default is true.",
                    "type": "Boolean"
                }
            ],
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\source\\core\\three\\Object3D.js",
            "line": 361,
            "description": "Searches through the object's children and returns the first with a matching name.",
            "params": [
                {
                    "name": "name",
                    "description": "String to match to the children's Object3d.name property.",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "getObjectByName",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\source\\core\\three\\Object3D.js",
            "line": 367,
            "description": "Searches through the object's children and returns the first with a property that matches the aclue given.",
            "params": [
                {
                    "name": "name",
                    "description": "The property name to search for.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "Value of the given property.",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "getObjectByProperty",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\source\\core\\three\\Object3D.js",
            "line": 374,
            "params": [
                {
                    "name": "optionalTarget",
                    "description": "Target to set the result. Otherwise, a new Vector3 is instantiated.",
                    "type": "Vector3"
                }
            ],
            "return": {
                "description": "Returns a vector representing the position of the object in world space.",
                "type": "Vector3"
            },
            "itemtype": "method",
            "name": "getWorldPosition",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\source\\core\\three\\Object3D.js",
            "line": 380,
            "description": "Returns a quaternion representing the rotation of the object in world space.",
            "itemtype": "method",
            "name": "getWorldQuaternion",
            "params": [
                {
                    "name": "optionalTarget",
                    "description": "If specified, the result will be copied into this Quaternion, otherwise a new Quaternion will be created.",
                    "type": "Quaternion"
                }
            ],
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\source\\core\\three\\Object3D.js",
            "line": 386,
            "description": "Returns the euler angles representing the rotation of the object in world space.",
            "itemtype": "method",
            "name": "getWorldRotation",
            "params": [
                {
                    "name": "optionalTarget",
                    "description": "If specified, the result will be copied into this Euler, otherwise a new Euler will be created.",
                    "type": "Euler"
                }
            ],
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\source\\core\\three\\Object3D.js",
            "line": 392,
            "description": "Returns a vector of the scaling factors applied to the object for each axis in world space.",
            "itemtype": "method",
            "name": "getWorldScale",
            "params": [
                {
                    "name": "optionalTarget",
                    "description": "If specified, the result will be copied into this Vector3, otherwise a new Vector3 will be created.",
                    "type": "Vector3"
                }
            ],
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\source\\core\\three\\Object3D.js",
            "line": 398,
            "description": "Returns a vector representing the direction of object's positive z-axis in world space.",
            "itemtype": "method",
            "name": "getWorldDirection",
            "params": [
                {
                    "name": "optionalTarget",
                    "description": "If specified, the result will be copied into this Vector3, otherwise a new Vector3 will be created.",
                    "type": "Vector3"
                }
            ],
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\source\\core\\three\\Object3D.js",
            "line": 404,
            "description": "Rotate an object along an axis in object space. The axis is assumed to be normalized..",
            "itemtype": "method",
            "name": "rotateOnAxis",
            "params": [
                {
                    "name": "axis",
                    "description": "A normalized vector in object space.",
                    "type": "Vector3"
                },
                {
                    "name": "angle",
                    "description": "The angle in radians.",
                    "type": "Number"
                }
            ],
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\source\\core\\three\\Object3D.js",
            "line": 411,
            "description": "Rotates the object around x axis in local space.",
            "itemtype": "method",
            "name": "rotateX",
            "params": [
                {
                    "name": "rad",
                    "description": "The angle to rotate in radians.",
                    "type": "Number"
                }
            ],
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\source\\core\\three\\Object3D.js",
            "line": 417,
            "description": "Rotates the object around y axis in local space.",
            "itemtype": "method",
            "name": "rotateY",
            "params": [
                {
                    "name": "rad",
                    "description": "The angle to rotate in radians.",
                    "type": "Number"
                }
            ],
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\source\\core\\three\\Object3D.js",
            "line": 423,
            "description": "Rotates the object around z axis in local space.",
            "itemtype": "method",
            "name": "rotateZ",
            "params": [
                {
                    "name": "rad",
                    "description": "The angle to rotate in radians.",
                    "type": "Number"
                }
            ],
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\source\\core\\utils\\ArraybufferUtils.js",
            "line": 12,
            "description": "Create arraybuffer from binary string",
            "itemtype": "method",
            "name": "fromBinaryString",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "data",
                "type": "Arraybuffer"
            },
            "class": "ArraybufferUtils",
            "module": "BinaryData"
        },
        {
            "file": "..\\source\\core\\utils\\ArraybufferUtils.js",
            "line": 33,
            "description": "Create arraybuffer from base64 string",
            "itemtype": "method",
            "name": "fromBase64",
            "params": [
                {
                    "name": "base64",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "data",
                "type": "Arraybuffer"
            },
            "class": "ArraybufferUtils",
            "module": "BinaryData"
        },
        {
            "file": "..\\source\\core\\utils\\ArraybufferUtils.js",
            "line": 70,
            "description": "Create arraybuffer from Nodejs buffer",
            "itemtype": "method",
            "name": "fromBuffer",
            "params": [
                {
                    "name": "buffer",
                    "description": "",
                    "type": "Buffer"
                }
            ],
            "return": {
                "description": "data",
                "type": "Arraybuffer"
            },
            "class": "ArraybufferUtils",
            "module": "BinaryData"
        },
        {
            "file": "..\\source\\core\\utils\\Base64Utils.js",
            "line": 12,
            "description": "Remove base64 header from data\nUsefull for removing the heander from image, audio, video, etc",
            "itemtype": "method",
            "name": "removeHeader",
            "params": [
                {
                    "name": "base64",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "base64",
                "type": "String"
            },
            "class": "Base64Utils",
            "module": "BinaryData"
        },
        {
            "file": "..\\source\\core\\utils\\Base64Utils.js",
            "line": 25,
            "description": "Create base64 string from arraybuffer",
            "itemtype": "method",
            "name": "fromArraybuffer",
            "params": [
                {
                    "name": "arraybuffer",
                    "description": "",
                    "type": "Arraybuffer"
                }
            ],
            "return": {
                "description": "base64",
                "type": "String"
            },
            "class": "Base64Utils",
            "module": "BinaryData"
        },
        {
            "file": "..\\source\\core\\utils\\Base64Utils.js",
            "line": 81,
            "description": "Create base64 string from binary string",
            "itemtype": "method",
            "name": "fromBinaryString",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "base64",
                "type": "String"
            },
            "class": "Base64Utils",
            "module": "BinaryData"
        },
        {
            "file": "..\\source\\core\\utils\\BufferUtils.js",
            "line": 12,
            "description": "Create nodejs buffer from arraybuffer",
            "itemtype": "method",
            "name": "fromArrayBuffer",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Arraybuffer"
                }
            ],
            "return": {
                "description": "buffer",
                "type": "Buffer"
            },
            "class": "BufferUtils",
            "module": "BinaryData"
        },
        {
            "file": "..\\source\\core\\utils\\Mesh2shape.js",
            "line": 16,
            "description": "Type is used to indentify the type of cannonjs\n - BOX\n - CYLINDER\n - SPHERE\n - HULL",
            "itemtype": "attribute",
            "name": "Type",
            "type": "{Object}",
            "class": "Mesh2shape",
            "module": "Physics"
        },
        {
            "file": "..\\source\\core\\utils\\Mesh2shape.js",
            "line": 34,
            "description": "Given a Object3D instance, creates a corresponding CANNON shape",
            "itemtype": "method",
            "name": "createShape",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object3D"
                },
                {
                    "name": "type",
                    "description": "Mesh2shape.Type",
                    "type": "String"
                }
            ],
            "return": {
                "description": "shape",
                "type": "CANNON.Shape"
            },
            "class": "Mesh2shape",
            "module": "Physics"
        },
        {
            "file": "..\\source\\core\\utils\\Mesh2shape.js",
            "line": 103,
            "description": "Create box shape from geometry",
            "itemtype": "method",
            "name": "createBoxShape",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "Geometry"
                }
            ],
            "return": {
                "description": "shape",
                "type": "CANNON.Box"
            },
            "class": "Mesh2shape",
            "module": "Physics"
        },
        {
            "file": "..\\source\\core\\utils\\Mesh2shape.js",
            "line": 126,
            "description": "Bounding box needs to be computed with the entire mesh, not just geometry",
            "itemtype": "method",
            "name": "createBoundingBoxShape",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "Geometry"
                }
            ],
            "return": {
                "description": "shape",
                "type": "CANNON.Box"
            },
            "class": "Mesh2shape",
            "module": "Physics"
        },
        {
            "file": "..\\source\\core\\utils\\Mesh2shape.js",
            "line": 161,
            "description": "Computes 3D convex hull as a CANNON.ConvexPolyhedron",
            "itemtype": "method",
            "name": "createConvexPolyhedron",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "ConvexPolyhedron"
                }
            ],
            "return": {
                "description": "shape",
                "type": "CANNON.Shape"
            },
            "class": "Mesh2shape",
            "module": "Physics"
        },
        {
            "file": "..\\source\\core\\utils\\Mesh2shape.js",
            "line": 211,
            "description": "Create cylinder shape from geometry",
            "itemtype": "method",
            "name": "createCylinderShape",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "Geometry"
                }
            ],
            "return": {
                "description": "shape",
                "type": "CANNON.Cylinder"
            },
            "class": "Mesh2shape",
            "module": "Physics"
        },
        {
            "file": "..\\source\\core\\utils\\Mesh2shape.js",
            "line": 229,
            "description": "Create cylinder shape from bounding cylinder calculated from bounding box and bouding sphere",
            "itemtype": "method",
            "name": "createBoundingCylinderShape",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object3D"
                }
            ],
            "return": {
                "description": "shape",
                "type": "CANNON.Cylinder"
            },
            "class": "Mesh2shape",
            "module": "Physics"
        },
        {
            "file": "..\\source\\core\\utils\\Mesh2shape.js",
            "line": 256,
            "description": "Plane shape from geometry",
            "itemtype": "method",
            "name": "createPlaneShape",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "Geometry"
                }
            ],
            "return": {
                "description": "shape",
                "type": "CANNON.Box"
            },
            "class": "Mesh2shape",
            "module": "Physics"
        },
        {
            "file": "..\\source\\core\\utils\\Mesh2shape.js",
            "line": 271,
            "description": "Sphere shape from geometry",
            "itemtype": "method",
            "name": "createSphereShape",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "Geometry"
                }
            ],
            "return": {
                "description": "shape",
                "type": "CANNON.Sphere"
            },
            "class": "Mesh2shape",
            "module": "Physics"
        },
        {
            "file": "..\\source\\core\\utils\\Mesh2shape.js",
            "line": 283,
            "description": "Sphere shape from bouding sphere",
            "itemtype": "method",
            "name": "createBoundingSphereShape",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "Geometry"
                }
            ],
            "return": {
                "description": "shape",
                "type": "CANNON.Sphere"
            },
            "class": "Mesh2shape",
            "module": "Physics"
        },
        {
            "file": "..\\source\\core\\utils\\Mesh2shape.js",
            "line": 298,
            "description": "Sphere shape from bouding sphere",
            "itemtype": "method",
            "name": "createTubeShape",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "Geometry"
                }
            ],
            "return": {
                "description": "shape",
                "type": "CANNON.Trimesh"
            },
            "class": "Mesh2shape",
            "module": "Physics"
        },
        {
            "file": "..\\source\\core\\utils\\Mesh2shape.js",
            "line": 312,
            "description": "Trimesh shape from geometry",
            "itemtype": "method",
            "name": "createTrimeshShape",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "Geometry"
                }
            ],
            "return": {
                "description": "shape",
                "type": "CANNON.Trimesh"
            },
            "class": "Mesh2shape",
            "module": "Physics"
        },
        {
            "file": "..\\source\\core\\utils\\Mesh2shape.js",
            "line": 332,
            "description": "Returns a single geometry for the given object\nIf the object is compound, its geometries are automatically merged",
            "itemtype": "method",
            "name": "getGeometry",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object3D"
                }
            ],
            "return": {
                "description": "Geometry that contains all merger geometry",
                "type": "Geometry"
            },
            "class": "Mesh2shape",
            "module": "Physics"
        },
        {
            "file": "..\\source\\core\\utils\\Mesh2shape.js",
            "line": 393,
            "description": "Get geometry vertices",
            "itemtype": "method",
            "name": "getVertices",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "Geometry"
                }
            ],
            "return": {
                "description": "array",
                "type": "Array"
            },
            "class": "Mesh2shape",
            "module": "Physics"
        },
        {
            "file": "..\\source\\core\\utils\\Mesh2shape.js",
            "line": 409,
            "description": "Returns a array of THREE.Mesh instances from the given object.\nIf nested transformations are found, they are applied to child meshes as mesh.userData.matrix, so that each mesh has its position/rotation/scale independently of all of its parents except the top-level object.",
            "itemtype": "method",
            "name": "getMeshes",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object3D"
                }
            ],
            "return": {
                "description": "meshes found inside the Object3D",
                "type": "Array"
            },
            "class": "Mesh2shape",
            "module": "Physics"
        },
        {
            "file": "..\\source\\core\\utils\\ObjectUtils.js",
            "line": 12,
            "description": "Get all fonts in a object and childs",
            "itemtype": "method",
            "name": "getFonts",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object3D"
                },
                {
                    "name": "fonts",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "font array",
                "type": "Array"
            },
            "class": "ObjectUtils",
            "module": "Physics"
        },
        {
            "file": "..\\source\\core\\utils\\ObjectUtils.js",
            "line": 41,
            "description": "Get all audio files in object and childs",
            "itemtype": "method",
            "name": "getAudio",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object3D"
                },
                {
                    "name": "audio",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "audio",
                "type": "Array"
            },
            "class": "ObjectUtils",
            "module": "Physics"
        },
        {
            "file": "..\\source\\core\\utils\\ObjectUtils.js",
            "line": 70,
            "description": "Get all materials in object and childs",
            "itemtype": "method",
            "name": "getMaterials",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object3D"
                },
                {
                    "name": "materials",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "materials",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "ObjectUtils",
            "module": "Physics"
        },
        {
            "file": "..\\source\\core\\utils\\ObjectUtils.js",
            "line": 127,
            "description": "Get all textures in object and childs",
            "itemtype": "method",
            "name": "getTextures",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object3D"
                },
                {
                    "name": "textures",
                    "description": "Textures array",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "textures",
                "type": "Array"
            },
            "class": "ObjectUtils",
            "module": "Physics"
        },
        {
            "file": "..\\source\\core\\utils\\ObjectUtils.js",
            "line": 196,
            "description": "Get object scene",
            "itemtype": "method",
            "name": "getScene",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object3D"
                }
            ],
            "return": {
                "description": "scene",
                "type": "Object3D"
            },
            "class": "ObjectUtils",
            "module": "Physics"
        },
        {
            "file": "..\\source\\core\\utils\\ObjectUtils.js",
            "line": 219,
            "description": "Get object tree root",
            "itemtype": "method",
            "name": "getRoot",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object3D"
                }
            ],
            "return": {
                "description": "root",
                "type": "Object3D"
            },
            "class": "ObjectUtils",
            "module": "Physics"
        },
        {
            "file": "..\\source\\core\\utils\\ObjectUtils.js",
            "line": 238,
            "description": "Set object and all its children matrixAutoUpdate value",
            "itemtype": "method",
            "name": "setMatrixAutoUpdate",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object3D"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ObjectUtils",
            "module": "Physics"
        },
        {
            "file": "..\\source\\core\\utils\\ObjectUtils.js",
            "line": 255,
            "description": "Set object and all children to receive shadows",
            "itemtype": "method",
            "name": "setShadowReceiving",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object3D"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ObjectUtils",
            "module": "Physics"
        },
        {
            "file": "..\\source\\core\\utils\\ObjectUtils.js",
            "line": 272,
            "description": "Set object and all children to cast shadows",
            "itemtype": "method",
            "name": "setShadowCasting",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object3D"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ObjectUtils",
            "module": "Physics"
        },
        {
            "file": "..\\source\\core\\utils\\ObjectUtils.js",
            "line": 289,
            "description": "Check if object is child of another object",
            "itemtype": "method",
            "name": "isChildOf",
            "params": [
                {
                    "name": "parent",
                    "description": "",
                    "type": "Object3D"
                },
                {
                    "name": "child",
                    "description": "",
                    "type": "Object3D"
                }
            ],
            "return": {
                "description": "True if parent is parent of child",
                "type": "Boolean"
            },
            "class": "ObjectUtils",
            "module": "Physics"
        },
        {
            "file": "..\\source\\core\\FileSystem.js",
            "line": 19,
            "description": "Read file content as text",
            "itemtype": "method",
            "name": "readFile",
            "params": [
                {
                    "name": "fname",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "sync",
                    "description": "If true the file will be read in sync",
                    "type": "Boolean"
                },
                {
                    "name": "onLoad",
                    "description": "onLoad callback",
                    "type": "Function"
                },
                {
                    "name": "onProgress",
                    "description": "onProgress callback",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "File content as a string",
                "type": "String"
            },
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "..\\source\\core\\FileSystem.js",
            "line": 91,
            "description": "Read file as arraybuffer data",
            "itemtype": "method",
            "name": "readFileArrayBuffer",
            "params": [
                {
                    "name": "fname",
                    "description": "Name of the file",
                    "type": "String"
                }
            ],
            "return": {
                "description": "File data as array buffer, null on error",
                "type": "ArrayBuffer"
            },
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "..\\source\\core\\FileSystem.js",
            "line": 125,
            "description": "Read file as base64 data",
            "itemtype": "method",
            "name": "readFileBase64",
            "params": [
                {
                    "name": "fname",
                    "description": "Name of the file",
                    "type": "String"
                }
            ],
            "return": {
                "description": "File data in base64, null on error",
                "type": "String"
            },
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "..\\source\\core\\FileSystem.js",
            "line": 150,
            "description": "Write text file, when running without NWJS it writes file as a blob and autodownloads it",
            "itemtype": "method",
            "name": "writeFile",
            "params": [
                {
                    "name": "fname",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "..\\source\\core\\FileSystem.js",
            "line": 183,
            "description": "Write binary file using base64 data\nOnly works when running inside NWJS",
            "itemtype": "method",
            "name": "writeFileBase64",
            "params": [
                {
                    "name": "fname",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "..\\source\\core\\FileSystem.js",
            "line": 203,
            "description": "Copy file (cannot be used to copy folders)\nOnly works when running inside NWJS",
            "itemtype": "method",
            "name": "copyFile",
            "params": [
                {
                    "name": "src",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "dst",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "..\\source\\core\\FileSystem.js",
            "line": 219,
            "description": "Make a directory (dont trow exeption if directory already exists)\nOnly works when running inside NWJS",
            "itemtype": "method",
            "name": "makeDirectory",
            "params": [
                {
                    "name": "dir",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "..\\source\\core\\FileSystem.js",
            "line": 238,
            "description": "Returns files in directory (returns empty array in case of error)\nOnly works when running inside NWJS",
            "itemtype": "method",
            "name": "getFilesDirectory",
            "return": {
                "description": "Files in the directory",
                "type": "Array"
            },
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "..\\source\\core\\FileSystem.js",
            "line": 261,
            "description": "Copy folder and all its files (includes symbolic links)\nOnly works when running inside NWJS",
            "itemtype": "method",
            "name": "copyFolder",
            "params": [
                {
                    "name": "src",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "dest",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "..\\source\\core\\FileSystem.js",
            "line": 302,
            "description": "Open file chooser dialog receives onLoad callback, file filter, saveas",
            "itemtype": "method",
            "name": "chooseFile",
            "params": [
                {
                    "name": "onLoad",
                    "description": "onLoad callback",
                    "type": "Function"
                },
                {
                    "name": "filer",
                    "description": "File type filter",
                    "type": "String"
                },
                {
                    "name": "saveas",
                    "description": "Save as format",
                    "type": "String"
                }
            ],
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "..\\source\\core\\FileSystem.js",
            "line": 336,
            "description": "Check if a file exists\nOnly works inside of NWJS",
            "itemtype": "method",
            "name": "fileExists",
            "params": [
                {
                    "name": "file",
                    "description": "File path",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True is file exists",
                "type": "Boolean"
            },
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "..\\source\\core\\FileSystem.js",
            "line": 354,
            "description": "Get file name without extension from file path string\nIf input is a/b/c/abc.d output is abc",
            "itemtype": "method",
            "name": "getFileName",
            "params": [
                {
                    "name": "file",
                    "description": "File path",
                    "type": "String"
                }
            ],
            "return": {
                "description": "File name without path and extension",
                "type": "String"
            },
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "..\\source\\core\\FileSystem.js",
            "line": 367,
            "description": "Get file name without extension\nIf input is a/b/c/abc.d output is a/b/c/abc",
            "itemtype": "method",
            "name": "getNameWithoutExtension",
            "params": [
                {
                    "name": "file",
                    "description": "File path",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "..\\source\\core\\FileSystem.js",
            "line": 380,
            "description": "Get file directoty\nIf input is a/b/c/abc.d output is a/b/c/",
            "itemtype": "method",
            "name": "getFilePath",
            "params": [
                {
                    "name": "file",
                    "description": "File path",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "..\\source\\core\\FileSystem.js",
            "line": 393,
            "description": "Get file extension from file path string (always in lowercase)\nIf input is a/b/c/abc.d output is d",
            "itemtype": "method",
            "name": "getFileExtension",
            "params": [
                {
                    "name": "file",
                    "description": "File path",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "FileSystem",
            "module": "Files"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\source\\core\\FileSystem.js:354"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\source\\core\\FileSystem.js:367"
        },
        {
            "message": "Missing item type\nUpdate a mouse button (automatically called by the runtime)",
            "line": " ..\\source\\core\\input\\Mouse.js:345"
        },
        {
            "message": "Missing item type\nCheck if hand is in pose",
            "line": " ..\\source\\core\\objects\\device\\LeapMotion.js:251"
        },
        {
            "message": "Missing item type\nCreate JSON for object\nNeed to backup geometry and set to undefined to avoid it being stored",
            "line": " ..\\source\\core\\objects\\mesh\\Text3D.js:172"
        },
        {
            "message": "Missing item type\nCreate JSON for object\nNeed to backup material and geometry and set to undefined to avoid it being stored",
            "line": " ..\\source\\core\\objects\\particle\\ParticleEmitter.js:171"
        },
        {
            "message": "Missing item type\nCreate JSON for object\nNeed to backup material and geometry and set to undefined to avoid it being stored",
            "line": " ..\\source\\core\\objects\\physics\\PhysicsObject.js:106"
        },
        {
            "message": "Missing item type\nCreate JSON for script",
            "line": " ..\\source\\core\\objects\\script\\Script.js:193"
        },
        {
            "message": "Missing item type\nGet skins in this animation",
            "line": " ..\\source\\core\\objects\\spine\\SpineAnimation.js:157"
        },
        {
            "message": "Missing item type\nCreate JSON for script",
            "line": " ..\\source\\core\\objects\\spine\\SpineAnimation.js:225"
        },
        {
            "message": "Missing item type\nSerialize audio data as JSON, audio data is serialized in Base64",
            "line": " ..\\source\\core\\resources\\Audio.js:29"
        },
        {
            "message": "Missing item type\nGenerate font shapes used to create 3D geometries",
            "line": " ..\\source\\core\\resources\\Font.js:58"
        },
        {
            "message": "Missing item type\nSerialize resource to json",
            "line": " ..\\source\\core\\resources\\Font.js:214"
        },
        {
            "message": "Missing item type\nSerialize resource to json",
            "line": " ..\\source\\core\\resources\\Resource.js:54"
        },
        {
            "message": "Missing item type\nSerialize resource to json\nVideo is stores in Base64",
            "line": " ..\\source\\core\\resources\\Video.js:29"
        },
        {
            "message": "Missing item type\nCreate Video texture json description",
            "line": " ..\\source\\core\\texture\\VideoTexture.js:182"
        },
        {
            "message": "Missing item type\nRotates the object to face a point in world space.",
            "line": " ..\\source\\core\\three\\Object3D.js:319"
        }
    ]
}