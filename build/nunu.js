/*


 opentype.js:
   license: MIT (http://opensource.org/licenses/MIT)
   author: Frederik De Bleser <frederik@debleser.be>
   version: 0.6.5

 tiny-inflate:
   license: MIT (http://opensource.org/licenses/MIT)
   author: Devon Govett <devongovett@gmail.com>
   maintainers: devongovett <devongovett@gmail.com>
   homepage: https://github.com/devongovett/tiny-inflate
   version: 1.0.2

 This header is generated by licensify (https://github.com/twada/licensify)
 Determine if an object is a Buffer

 @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 @license  MIT
 LeapJS v0.6.4                                                  
 http://github.com/leapmotion/leapjs/                                        

 Copyright 2013 LeapMotion, Inc. and other contributors                      
 Released under the Apache-2.0 license                                     
 http://github.com/leapmotion/leapjs/blob/master/LICENSE.txt                 
 chevrotain - v4.6.0 */
var $jscomp = $jscomp || {};
$jscomp.scope = {};
$jscomp.arrayIteratorImpl = function(a) {
  var d = 0;
  return function() {
    return d < a.length ? {done:!1, value:a[d++]} : {done:!0};
  };
};
$jscomp.arrayIterator = function(a) {
  return {next:$jscomp.arrayIteratorImpl(a)};
};
$jscomp.ASSUME_ES5 = !1;
$jscomp.ASSUME_NO_NATIVE_MAP = !1;
$jscomp.ASSUME_NO_NATIVE_SET = !1;
$jscomp.SIMPLE_FROUND_POLYFILL = !1;
$jscomp.defineProperty = $jscomp.ASSUME_ES5 || "function" == typeof Object.defineProperties ? Object.defineProperty : function(a, d, k) {
  a != Array.prototype && a != Object.prototype && (a[d] = k.value);
};
$jscomp.getGlobal = function(a) {
  return "undefined" != typeof window && window === a ? a : "undefined" != typeof global && null != global ? global : a;
};
$jscomp.global = $jscomp.getGlobal(this);
$jscomp.SYMBOL_PREFIX = "jscomp_symbol_";
$jscomp.initSymbol = function() {
  $jscomp.initSymbol = function() {
  };
  $jscomp.global.Symbol || ($jscomp.global.Symbol = $jscomp.Symbol);
};
$jscomp.SymbolClass = function(a, d) {
  this.$jscomp$symbol$id_ = a;
  $jscomp.defineProperty(this, "description", {configurable:!0, writable:!0, value:d});
};
$jscomp.SymbolClass.prototype.toString = function() {
  return this.$jscomp$symbol$id_;
};
$jscomp.Symbol = function() {
  function a(k) {
    if (this instanceof a) {
      throw new TypeError("Symbol is not a constructor");
    }
    return new $jscomp.SymbolClass($jscomp.SYMBOL_PREFIX + (k || "") + "_" + d++, k);
  }
  var d = 0;
  return a;
}();
$jscomp.initSymbolIterator = function() {
  $jscomp.initSymbol();
  var a = $jscomp.global.Symbol.iterator;
  a || (a = $jscomp.global.Symbol.iterator = $jscomp.global.Symbol("Symbol.iterator"));
  "function" != typeof Array.prototype[a] && $jscomp.defineProperty(Array.prototype, a, {configurable:!0, writable:!0, value:function() {
    return $jscomp.iteratorPrototype($jscomp.arrayIteratorImpl(this));
  }});
  $jscomp.initSymbolIterator = function() {
  };
};
$jscomp.initSymbolAsyncIterator = function() {
  $jscomp.initSymbol();
  var a = $jscomp.global.Symbol.asyncIterator;
  a || (a = $jscomp.global.Symbol.asyncIterator = $jscomp.global.Symbol("Symbol.asyncIterator"));
  $jscomp.initSymbolAsyncIterator = function() {
  };
};
$jscomp.iteratorPrototype = function(a) {
  $jscomp.initSymbolIterator();
  a = {next:a};
  a[$jscomp.global.Symbol.iterator] = function() {
    return this;
  };
  return a;
};
$jscomp.checkStringArgs = function(a, d, k) {
  if (null == a) {
    throw new TypeError("The 'this' value for String.prototype." + k + " must not be null or undefined");
  }
  if (d instanceof RegExp) {
    throw new TypeError("First argument to String.prototype." + k + " must not be a regular expression");
  }
  return a + "";
};
$jscomp.polyfill = function(a, d, k, b) {
  if (d) {
    k = $jscomp.global;
    a = a.split(".");
    for (b = 0; b < a.length - 1; b++) {
      var g = a[b];
      g in k || (k[g] = {});
      k = k[g];
    }
    a = a[a.length - 1];
    b = k[a];
    d = d(b);
    d != b && null != d && $jscomp.defineProperty(k, a, {configurable:!0, writable:!0, value:d});
  }
};
$jscomp.polyfill("String.prototype.endsWith", function(a) {
  return a ? a : function(a, k) {
    var b = $jscomp.checkStringArgs(this, a, "endsWith");
    a += "";
    void 0 === k && (k = b.length);
    k = Math.max(0, Math.min(k | 0, b.length));
    for (var d = a.length; 0 < d && 0 < k;) {
      if (b[--k] != a[--d]) {
        return !1;
      }
    }
    return 0 >= d;
  };
}, "es6", "es3");
$jscomp.owns = function(a, d) {
  return Object.prototype.hasOwnProperty.call(a, d);
};
$jscomp.assign = "function" == typeof Object.assign ? Object.assign : function(a, d) {
  for (var k = 1; k < arguments.length; k++) {
    var b = arguments[k];
    if (b) {
      for (var g in b) {
        $jscomp.owns(b, g) && (a[g] = b[g]);
      }
    }
  }
  return a;
};
$jscomp.polyfill("Object.assign", function(a) {
  return a || $jscomp.assign;
}, "es6", "es3");
$jscomp.polyfill("String.prototype.repeat", function(a) {
  return a ? a : function(a) {
    var d = $jscomp.checkStringArgs(this, null, "repeat");
    if (0 > a || 1342177279 < a) {
      throw new RangeError("Invalid count value");
    }
    a |= 0;
    for (var b = ""; a;) {
      if (a & 1 && (b += d), a >>>= 1) {
        d += d;
      }
    }
    return b;
  };
}, "es6", "es3");
$jscomp.polyfill("Number.EPSILON", function(a) {
  return Math.pow(2, -52);
}, "es6", "es3");
$jscomp.iteratorFromArray = function(a, d) {
  $jscomp.initSymbolIterator();
  a instanceof String && (a += "");
  var k = 0, b = {next:function() {
    if (k < a.length) {
      var g = k++;
      return {value:d(g, a[g]), done:!1};
    }
    b.next = function() {
      return {done:!0, value:void 0};
    };
    return b.next();
  }};
  b[Symbol.iterator] = function() {
    return b;
  };
  return b;
};
$jscomp.polyfill("Array.prototype.keys", function(a) {
  return a ? a : function() {
    return $jscomp.iteratorFromArray(this, function(a) {
      return a;
    });
  };
}, "es6", "es3");
$jscomp.polyfill("Number.isFinite", function(a) {
  return a ? a : function(a) {
    return "number" !== typeof a ? !1 : !isNaN(a) && Infinity !== a && -Infinity !== a;
  };
}, "es6", "es3");
$jscomp.polyfill("Number.isInteger", function(a) {
  return a ? a : function(a) {
    return Number.isFinite(a) ? a === Math.floor(a) : !1;
  };
}, "es6", "es3");
$jscomp.checkEs6ConformanceViaProxy = function() {
  try {
    var a = {}, d = Object.create(new $jscomp.global.Proxy(a, {get:function(k, b, g) {
      return k == a && "q" == b && g == d;
    }}));
    return !0 === d.q;
  } catch (k) {
    return !1;
  }
};
$jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS = !1;
$jscomp.ES6_CONFORMANCE = $jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS && $jscomp.checkEs6ConformanceViaProxy();
$jscomp.makeIterator = function(a) {
  var d = "undefined" != typeof Symbol && Symbol.iterator && a[Symbol.iterator];
  return d ? d.call(a) : $jscomp.arrayIterator(a);
};
$jscomp.polyfill("WeakMap", function(a) {
  function d() {
    if (!a || !Object.seal) {
      return !1;
    }
    try {
      var b = Object.seal({}), e = Object.seal({}), d = new a([[b, 2], [e, 3]]);
      if (2 != d.get(b) || 3 != d.get(e)) {
        return !1;
      }
      d.delete(b);
      d.set(e, 4);
      return !d.has(b) && 4 == d.get(e);
    } catch (c) {
      return !1;
    }
  }
  function k() {
  }
  function b(a) {
    if (!$jscomp.owns(a, f)) {
      var b = new k;
      $jscomp.defineProperty(a, f, {value:b});
    }
  }
  function g(a) {
    var e = Object[a];
    e && (Object[a] = function(a) {
      if (a instanceof k) {
        return a;
      }
      b(a);
      return e(a);
    });
  }
  if ($jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS) {
    if (a && $jscomp.ES6_CONFORMANCE) {
      return a;
    }
  } else {
    if (d()) {
      return a;
    }
  }
  var f = "$jscomp_hidden_" + Math.random();
  g("freeze");
  g("preventExtensions");
  g("seal");
  var e = 0, r = function(a) {
    this.id_ = (e += Math.random() + 1).toString();
    if (a) {
      a = $jscomp.makeIterator(a);
      for (var b; !(b = a.next()).done;) {
        b = b.value, this.set(b[0], b[1]);
      }
    }
  };
  r.prototype.set = function(a, e) {
    b(a);
    if (!$jscomp.owns(a, f)) {
      throw Error("WeakMap key fail: " + a);
    }
    a[f][this.id_] = e;
    return this;
  };
  r.prototype.get = function(a) {
    return $jscomp.owns(a, f) ? a[f][this.id_] : void 0;
  };
  r.prototype.has = function(a) {
    return $jscomp.owns(a, f) && $jscomp.owns(a[f], this.id_);
  };
  r.prototype.delete = function(a) {
    return $jscomp.owns(a, f) && $jscomp.owns(a[f], this.id_) ? delete a[f][this.id_] : !1;
  };
  return r;
}, "es6", "es3");
$jscomp.MapEntry = function() {
};
$jscomp.polyfill("Map", function(a) {
  function d() {
    if ($jscomp.ASSUME_NO_NATIVE_MAP || !a || "function" != typeof a || !a.prototype.entries || "function" != typeof Object.seal) {
      return !1;
    }
    try {
      var b = Object.seal({x:4}), e = new a($jscomp.makeIterator([[b, "s"]]));
      if ("s" != e.get(b) || 1 != e.size || e.get({x:4}) || e.set({x:4}, "t") != e || 2 != e.size) {
        return !1;
      }
      var d = e.entries(), c = d.next();
      if (c.done || c.value[0] != b || "s" != c.value[1]) {
        return !1;
      }
      c = d.next();
      return c.done || 4 != c.value[0].x || "t" != c.value[1] || !d.next().done ? !1 : !0;
    } catch (h) {
      return !1;
    }
  }
  if ($jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS) {
    if (a && $jscomp.ES6_CONFORMANCE) {
      return a;
    }
  } else {
    if (d()) {
      return a;
    }
  }
  $jscomp.initSymbolIterator();
  var k = new WeakMap, b = function(a) {
    this.data_ = {};
    this.head_ = e();
    this.size = 0;
    if (a) {
      a = $jscomp.makeIterator(a);
      for (var b; !(b = a.next()).done;) {
        b = b.value, this.set(b[0], b[1]);
      }
    }
  };
  b.prototype.set = function(a, b) {
    a = 0 === a ? 0 : a;
    var e = g(this, a);
    e.list || (e.list = this.data_[e.id] = []);
    e.entry ? e.entry.value = b : (e.entry = {next:this.head_, previous:this.head_.previous, head:this.head_, key:a, value:b}, e.list.push(e.entry), this.head_.previous.next = e.entry, this.head_.previous = e.entry, this.size++);
    return this;
  };
  b.prototype.delete = function(a) {
    a = g(this, a);
    return a.entry && a.list ? (a.list.splice(a.index, 1), a.list.length || delete this.data_[a.id], a.entry.previous.next = a.entry.next, a.entry.next.previous = a.entry.previous, a.entry.head = null, this.size--, !0) : !1;
  };
  b.prototype.clear = function() {
    this.data_ = {};
    this.head_ = this.head_.previous = e();
    this.size = 0;
  };
  b.prototype.has = function(a) {
    return !!g(this, a).entry;
  };
  b.prototype.get = function(a) {
    return (a = g(this, a).entry) && a.value;
  };
  b.prototype.entries = function() {
    return f(this, function(a) {
      return [a.key, a.value];
    });
  };
  b.prototype.keys = function() {
    return f(this, function(a) {
      return a.key;
    });
  };
  b.prototype.values = function() {
    return f(this, function(a) {
      return a.value;
    });
  };
  b.prototype.forEach = function(a, b) {
    for (var e = this.entries(), c; !(c = e.next()).done;) {
      c = c.value, a.call(b, c[1], c[0], this);
    }
  };
  b.prototype[Symbol.iterator] = b.prototype.entries;
  var g = function(a, b) {
    var e = b && typeof b;
    "object" == e || "function" == e ? k.has(b) ? e = k.get(b) : (e = "" + ++r, k.set(b, e)) : e = "p_" + b;
    var c = a.data_[e];
    if (c && $jscomp.owns(a.data_, e)) {
      for (a = 0; a < c.length; a++) {
        var d = c[a];
        if (b !== b && d.key !== d.key || b === d.key) {
          return {id:e, list:c, index:a, entry:d};
        }
      }
    }
    return {id:e, list:c, index:-1, entry:void 0};
  }, f = function(a, b) {
    var e = a.head_;
    return $jscomp.iteratorPrototype(function() {
      if (e) {
        for (; e.head != a.head_;) {
          e = e.previous;
        }
        for (; e.next != e.head;) {
          return e = e.next, {done:!1, value:b(e)};
        }
        e = null;
      }
      return {done:!0, value:void 0};
    });
  }, e = function() {
    var a = {};
    return a.previous = a.next = a.head = a;
  }, r = 0;
  return b;
}, "es6", "es3");
$jscomp.polyfill("Math.sign", function(a) {
  return a ? a : function(a) {
    a = Number(a);
    return 0 === a || isNaN(a) ? a : 0 < a ? 1 : -1;
  };
}, "es6", "es3");
$jscomp.polyfill("Array.prototype.values", function(a) {
  return a ? a : function() {
    return $jscomp.iteratorFromArray(this, function(a, k) {
      return k;
    });
  };
}, "es8", "es3");
$jscomp.findInternal = function(a, d, k) {
  a instanceof String && (a = String(a));
  for (var b = a.length, g = 0; g < b; g++) {
    var f = a[g];
    if (d.call(k, f, g, a)) {
      return {i:g, v:f};
    }
  }
  return {i:-1, v:void 0};
};
$jscomp.polyfill("Array.prototype.find", function(a) {
  return a ? a : function(a, k) {
    return $jscomp.findInternal(this, a, k).v;
  };
}, "es6", "es3");
$jscomp.FORCE_POLYFILL_PROMISE = !1;
$jscomp.polyfill("Promise", function(a) {
  function d() {
    this.batch_ = null;
  }
  function k(a) {
    return a instanceof g ? a : new g(function(b, e) {
      b(a);
    });
  }
  if (a && !$jscomp.FORCE_POLYFILL_PROMISE) {
    return a;
  }
  d.prototype.asyncExecute = function(a) {
    if (null == this.batch_) {
      this.batch_ = [];
      var b = this;
      this.asyncExecuteFunction(function() {
        b.executeBatch_();
      });
    }
    this.batch_.push(a);
  };
  var b = $jscomp.global.setTimeout;
  d.prototype.asyncExecuteFunction = function(a) {
    b(a, 0);
  };
  d.prototype.executeBatch_ = function() {
    for (; this.batch_ && this.batch_.length;) {
      var a = this.batch_;
      this.batch_ = [];
      for (var b = 0; b < a.length; ++b) {
        var d = a[b];
        a[b] = null;
        try {
          d();
        } catch (m) {
          this.asyncThrow_(m);
        }
      }
    }
    this.batch_ = null;
  };
  d.prototype.asyncThrow_ = function(a) {
    this.asyncExecuteFunction(function() {
      throw a;
    });
  };
  var g = function(a) {
    this.state_ = 0;
    this.result_ = void 0;
    this.onSettledCallbacks_ = [];
    var b = this.createResolveAndReject_();
    try {
      a(b.resolve, b.reject);
    } catch (q) {
      b.reject(q);
    }
  };
  g.prototype.createResolveAndReject_ = function() {
    function a(a) {
      return function(e) {
        d || (d = !0, a.call(b, e));
      };
    }
    var b = this, d = !1;
    return {resolve:a(this.resolveTo_), reject:a(this.reject_)};
  };
  g.prototype.resolveTo_ = function(a) {
    if (a === this) {
      this.reject_(new TypeError("A Promise cannot resolve to itself"));
    } else {
      if (a instanceof g) {
        this.settleSameAsPromise_(a);
      } else {
        a: {
          switch(typeof a) {
            case "object":
              var b = null != a;
              break a;
            case "function":
              b = !0;
              break a;
            default:
              b = !1;
          }
        }
        b ? this.resolveToNonPromiseObj_(a) : this.fulfill_(a);
      }
    }
  };
  g.prototype.resolveToNonPromiseObj_ = function(a) {
    var b = void 0;
    try {
      b = a.then;
    } catch (q) {
      this.reject_(q);
      return;
    }
    "function" == typeof b ? this.settleSameAsThenable_(b, a) : this.fulfill_(a);
  };
  g.prototype.reject_ = function(a) {
    this.settle_(2, a);
  };
  g.prototype.fulfill_ = function(a) {
    this.settle_(1, a);
  };
  g.prototype.settle_ = function(a, b) {
    if (0 != this.state_) {
      throw Error("Cannot settle(" + a + ", " + b + "): Promise already settled in state" + this.state_);
    }
    this.state_ = a;
    this.result_ = b;
    this.executeOnSettledCallbacks_();
  };
  g.prototype.executeOnSettledCallbacks_ = function() {
    if (null != this.onSettledCallbacks_) {
      for (var a = 0; a < this.onSettledCallbacks_.length; ++a) {
        f.asyncExecute(this.onSettledCallbacks_[a]);
      }
      this.onSettledCallbacks_ = null;
    }
  };
  var f = new d;
  g.prototype.settleSameAsPromise_ = function(a) {
    var b = this.createResolveAndReject_();
    a.callWhenSettled_(b.resolve, b.reject);
  };
  g.prototype.settleSameAsThenable_ = function(a, b) {
    var e = this.createResolveAndReject_();
    try {
      a.call(b, e.resolve, e.reject);
    } catch (m) {
      e.reject(m);
    }
  };
  g.prototype.then = function(a, b) {
    function e(a, c) {
      return "function" == typeof a ? function(c) {
        try {
          d(a(c));
        } catch (y) {
          f(y);
        }
      } : c;
    }
    var d, f, c = new g(function(a, c) {
      d = a;
      f = c;
    });
    this.callWhenSettled_(e(a, d), e(b, f));
    return c;
  };
  g.prototype.catch = function(a) {
    return this.then(void 0, a);
  };
  g.prototype.callWhenSettled_ = function(a, b) {
    function e() {
      switch(d.state_) {
        case 1:
          a(d.result_);
          break;
        case 2:
          b(d.result_);
          break;
        default:
          throw Error("Unexpected state: " + d.state_);
      }
    }
    var d = this;
    null == this.onSettledCallbacks_ ? f.asyncExecute(e) : this.onSettledCallbacks_.push(e);
  };
  g.resolve = k;
  g.reject = function(a) {
    return new g(function(b, e) {
      e(a);
    });
  };
  g.race = function(a) {
    return new g(function(b, e) {
      for (var d = $jscomp.makeIterator(a), f = d.next(); !f.done; f = d.next()) {
        k(f.value).callWhenSettled_(b, e);
      }
    });
  };
  g.all = function(a) {
    var b = $jscomp.makeIterator(a), e = b.next();
    return e.done ? k([]) : new g(function(a, d) {
      function c(c) {
        return function(b) {
          h[c] = b;
          f--;
          0 == f && a(h);
        };
      }
      var h = [], f = 0;
      do {
        h.push(void 0), f++, k(e.value).callWhenSettled_(c(h.length - 1), d), e = b.next();
      } while (!e.done);
    });
  };
  return g;
}, "es6", "es3");
$jscomp.polyfill("Array.prototype.fill", function(a) {
  return a ? a : function(a, k, b) {
    var d = this.length || 0;
    0 > k && (k = Math.max(0, d + k));
    if (null == b || b > d) {
      b = d;
    }
    b = Number(b);
    0 > b && (b = Math.max(0, d + b));
    for (k = Number(k || 0); k < b; k++) {
      this[k] = a;
    }
    return this;
  };
}, "es6", "es3");
$jscomp.polyfill("Array.prototype.copyWithin", function(a) {
  function d(a) {
    a = Number(a);
    return Infinity === a || -Infinity === a ? a : a | 0;
  }
  return a ? a : function(a, b, g) {
    var f = this.length;
    a = d(a);
    b = d(b);
    g = void 0 === g ? f : d(g);
    a = 0 > a ? Math.max(f + a, 0) : Math.min(a, f);
    b = 0 > b ? Math.max(f + b, 0) : Math.min(b, f);
    g = 0 > g ? Math.max(f + g, 0) : Math.min(g, f);
    if (a < b) {
      for (; b < g;) {
        b in this ? this[a++] = this[b++] : (delete this[a++], b++);
      }
    } else {
      for (g = Math.min(g, f + b - a), a += g - b; g > b;) {
        --g in this ? this[--a] = this[g] : delete this[--a];
      }
    }
    return this;
  };
}, "es6", "es3");
$jscomp.polyfill("Math.log2", function(a) {
  return a ? a : function(a) {
    return Math.log(a) / Math.LN2;
  };
}, "es6", "es3");
$jscomp.polyfill("String.fromCodePoint", function(a) {
  return a ? a : function(a) {
    for (var d = "", b = 0; b < arguments.length; b++) {
      var g = Number(arguments[b]);
      if (0 > g || 1114111 < g || g !== Math.floor(g)) {
        throw new RangeError("invalid_code_point " + g);
      }
      65535 >= g ? d += String.fromCharCode(g) : (g -= 65536, d += String.fromCharCode(g >>> 10 & 1023 | 55296), d += String.fromCharCode(g & 1023 | 56320));
    }
    return d;
  };
}, "es6", "es3");
$jscomp.underscoreProtoCanBeSet = function() {
  var a = {a:!0}, d = {};
  try {
    return d.__proto__ = a, d.a;
  } catch (k) {
  }
  return !1;
};
$jscomp.setPrototypeOf = "function" == typeof Object.setPrototypeOf ? Object.setPrototypeOf : $jscomp.underscoreProtoCanBeSet() ? function(a, d) {
  a.__proto__ = d;
  if (a.__proto__ !== d) {
    throw new TypeError(a + " is not extensible");
  }
  return a;
} : null;
$jscomp.polyfill("Object.setPrototypeOf", function(a) {
  return a || $jscomp.setPrototypeOf;
}, "es6", "es5");
$jscomp.polyfill("Array.from", function(a) {
  return a ? a : function(a, k, b) {
    k = null != k ? k : function(a) {
      return a;
    };
    var d = [], f = "undefined" != typeof Symbol && Symbol.iterator && a[Symbol.iterator];
    if ("function" == typeof f) {
      a = f.call(a);
      for (var e = 0; !(f = a.next()).done;) {
        d.push(k.call(b, f.value, e++));
      }
    } else {
      for (f = a.length, e = 0; e < f; e++) {
        d.push(k.call(b, a[e], e));
      }
    }
    return d;
  };
}, "es6", "es3");
$jscomp.polyfill("Math.fround", function(a) {
  if (a) {
    return a;
  }
  if ($jscomp.SIMPLE_FROUND_POLYFILL || "function" !== typeof Float32Array) {
    return function(a) {
      return a;
    };
  }
  var d = new Float32Array(1);
  return function(a) {
    d[0] = a;
    return d[0];
  };
}, "es6", "es3");
$jscomp.polyfill("String.prototype.startsWith", function(a) {
  return a ? a : function(a, k) {
    var b = $jscomp.checkStringArgs(this, a, "startsWith");
    a += "";
    var d = b.length, f = a.length;
    k = Math.max(0, Math.min(k | 0, b.length));
    for (var e = 0; e < f && k < d;) {
      if (b[k++] != a[e++]) {
        return !1;
      }
    }
    return e >= f;
  };
}, "es6", "es3");
$jscomp.polyfill("Object.is", function(a) {
  return a ? a : function(a, k) {
    return a === k ? 0 !== a || 1 / a === 1 / k : a !== a && k !== k;
  };
}, "es6", "es3");
$jscomp.polyfill("Array.prototype.includes", function(a) {
  return a ? a : function(a, k) {
    var b = this;
    b instanceof String && (b = String(b));
    var d = b.length;
    k = k || 0;
    for (0 > k && (k = Math.max(k + d, 0)); k < d; k++) {
      var f = b[k];
      if (f === a || Object.is(f, a)) {
        return !0;
      }
    }
    return !1;
  };
}, "es7", "es3");
$jscomp.polyfill("String.prototype.includes", function(a) {
  return a ? a : function(a, k) {
    return -1 !== $jscomp.checkStringArgs(this, a, "includes").indexOf(a, k || 0);
  };
}, "es6", "es3");
function NunuApp(a) {
  this.renderer = this.program = null;
  this.canvasFitWindow = this.running = !1;
  this.canvas = a;
  this.events = new EventManager;
  void 0 === a && (this.canvas = document.createElement("canvas"), this.canvas.style.position = "absolute", this.canvas.style.left = "0px", this.canvas.style.top = "0px", this.canvasFitWindow = !0, document.body.appendChild(this.canvas));
}
NunuApp.loadApp = function(a, d) {
  "string" === typeof d && (d = document.getElementById(d));
  var k = new NunuApp(d);
  k.loadRunProgram(a);
  window.addEventListener("resize", function() {
    Nunu.isFullscreen() ? (k.canvas.width = window.innerWidth, k.canvas.height = window.innerHeight) : (k.canvas.width = nunuApps[i].canvas.parentElement.offsetWidth, k.canvas.height = nunuApps[i].canvas.parentElement.offsetWidth);
    k.resize();
  });
};
NunuApp.prototype.run = function() {
  if (null === this.program) {
    console.warn("nunuStudio: no program is loaded [app.loadPogram(fname)]");
  } else {
    this.renderer = this.program.rendererConfig.createRenderer(this.canvas);
    this.keyboard = new Keyboard;
    this.mouse = new Mouse;
    this.mouse.setCanvas(this.canvas);
    this.program.app = this;
    this.program.defaultCamera = new PerspectiveCamera(60, 1, .1, 1E5);
    this.program.defaultCamera.position.set(0, 5, -5);
    this.program.setRenderer(this.renderer);
    this.program.setMouseKeyboard(this.mouse, this.keyboard);
    this.program.initialize();
    if (this.program.lockPointer) {
      var a = this.canvas;
      a.requestPointerLock = a.requestPointerLock || a.mozRequestPointerLock || a.webkitRequestPointerLock;
      this.events.add(a, "click", function() {
        a.requestPointerLock && a.requestPointerLock();
      });
    }
    var d = this;
    this.events.add(window, "beforeunload", function() {
      d.exit();
    });
    this.events.create();
    this.resize();
    this.resume();
  }
};
NunuApp.prototype.loadRunProgram = function(a, d, k) {
  this.loadProgramAsync(a, function(a) {
    a.run();
    void 0 !== d && d(a);
  }, k);
};
NunuApp.prototype.loadProgram = function(a) {
  if (a.endsWith(".isp")) {
    var d = new ObjectLoader;
    a = FileSystem.readFile(a);
    this.program = d.parse(JSON.parse(a));
  } else {
    if (a.endsWith(".nsp")) {
      d = new ObjectLoader;
      a = FileSystem.readFileArrayBuffer(a);
      var k = new dcodeIO.PSON.StaticPair;
      this.program = d.parse(k.decode(a));
    }
  }
};
NunuApp.prototype.loadProgramAsync = function(a, d, k) {
  var b = this;
  a.endsWith(".isp") ? FileSystem.readFile(a, !1, function(a) {
    var f = new ObjectLoader;
    b.program = f.parse(JSON.parse(a));
    void 0 !== d && d(b);
  }, k) : a.endsWith(".nsp") && FileSystem.readFileArrayBuffer(a, !1, function(a) {
    var f = new ObjectLoader, e = new dcodeIO.PSON.StaticPair;
    b.program = f.parse(e.decode(a));
    void 0 !== d && d(b);
  }, k);
};
NunuApp.prototype.update = function() {
  this.mouse.update();
  this.keyboard.update();
  this.program.update();
  this.program.render(this.renderer);
};
NunuApp.prototype.exit = function() {
  this.events.destroy();
  null !== this.program && (this.program.dispose(), this.program = null);
  null !== this.renderer && (this.renderer.dispose(), this.renderer = null);
  null !== this.mouse && (this.mouse.dispose(), this.mouse = null);
  null !== this.keyboard && (this.keyboard.dispose(), this.keyboard = null);
  if (void 0 !== this.onExit) {
    this.onExit();
  }
};
NunuApp.prototype.resume = function() {
  if (null !== this.program && !this.running) {
    var a = this, d = function() {
      a.running && (a.update(), requestAnimationFrame(d));
    };
    this.running = !0;
    d();
  }
};
NunuApp.prototype.pause = function() {
  this.running = !1;
};
NunuApp.prototype.setCanvas = function(a) {
  this.canvas = a;
  this.canvasFitWindow = !1;
};
NunuApp.prototype.resize = function() {
  if (null !== this.canvas && null !== this.program && null !== this.renderer) {
    if (this.canvasFitWindow) {
      this.canvas.style.width = window.innerWidth + "px";
      this.canvas.style.height = window.innerHeight + "px";
      var a = window.innerWidth;
      var d = window.innerHeight;
    } else {
      a = this.canvas.offsetWidth, d = this.canvas.offsetHeight;
    }
    this.program.handlePixelRatio && (a *= window.devicePixelRatio, d *= window.devicePixelRatio);
    this.renderer.setSize(a, d, !1);
    this.program.resize(a, d);
  }
};
NunuApp.prototype.sendData = function(a) {
  null !== this.program && this.program.receiveDataApp(a);
};
NunuApp.prototype.setOnDataReceived = function(a) {
  this.onDataReceived = a;
};
NunuApp.prototype.setOnExit = function(a) {
  this.onExit = a;
};
NunuApp.prototype.vrAvailable = function() {
  return null !== this.program && this.program.vrAvailable();
};
NunuApp.prototype.toggleVR = function() {
  this.vrAvailable() ? this.program.vrRunning ? this.program.exitVR() : this.program.enterVR() : console.warn("nunuStudio: Loaded program is not VR enabled.");
};
NunuApp.prototype.toggleFullscreen = function(a) {
  var d = Nunu.isFullscreen();
  void 0 === a && (a = this.canvas);
  Nunu.setFullscreen(!d, a);
};
(function(a, d) {
  "object" === typeof exports && "undefined" !== typeof module ? d(exports) : "function" === typeof define && define.amd ? define(["exports"], d) : (a = a || self, d(a.THREE = {}));
})(this, function(a) {
  function d() {
  }
  function k(l, a) {
    this.x = l || 0;
    this.y = a || 0;
  }
  function b() {
    this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1];
    0 < arguments.length && console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.");
  }
  function g(l, a, c, e, d, h, f, m, p, n) {
    Object.defineProperty(this, "id", {value:jj++});
    this.uuid = oa.generateUUID();
    this.name = "";
    this.image = void 0 !== l ? l : g.DEFAULT_IMAGE;
    this.mipmaps = [];
    this.mapping = void 0 !== a ? a : g.DEFAULT_MAPPING;
    this.wrapS = void 0 !== c ? c : 1001;
    this.wrapT = void 0 !== e ? e : 1001;
    this.magFilter = void 0 !== d ? d : 1006;
    this.minFilter = void 0 !== h ? h : 1008;
    this.anisotropy = void 0 !== p ? p : 1;
    this.format = void 0 !== f ? f : 1023;
    this.internalFormat = null;
    this.type = void 0 !== m ? m : 1009;
    this.offset = new k(0, 0);
    this.repeat = new k(1, 1);
    this.center = new k(0, 0);
    this.rotation = 0;
    this.matrixAutoUpdate = !0;
    this.matrix = new b;
    this.generateMipmaps = !0;
    this.premultiplyAlpha = !1;
    this.flipY = !0;
    this.unpackAlignment = 4;
    this.encoding = void 0 !== n ? n : 3E3;
    this.version = 0;
    this.onUpdate = null;
  }
  function f(l, a, c, b) {
    this.x = l || 0;
    this.y = a || 0;
    this.z = c || 0;
    this.w = void 0 !== b ? b : 1;
  }
  function e(l, a, c) {
    this.width = l;
    this.height = a;
    this.scissor = new f(0, 0, l, a);
    this.scissorTest = !1;
    this.viewport = new f(0, 0, l, a);
    c = c || {};
    this.texture = new g(void 0, c.mapping, c.wrapS, c.wrapT, c.magFilter, c.minFilter, c.format, c.type, c.anisotropy, c.encoding);
    this.texture.image = {};
    this.texture.image.width = l;
    this.texture.image.height = a;
    this.texture.generateMipmaps = void 0 !== c.generateMipmaps ? c.generateMipmaps : !1;
    this.texture.minFilter = void 0 !== c.minFilter ? c.minFilter : 1006;
    this.depthBuffer = void 0 !== c.depthBuffer ? c.depthBuffer : !0;
    this.stencilBuffer = void 0 !== c.stencilBuffer ? c.stencilBuffer : !0;
    this.depthTexture = void 0 !== c.depthTexture ? c.depthTexture : null;
  }
  function r(l, a, c) {
    e.call(this, l, a, c);
    this.samples = 4;
  }
  function q(l, a, c, b) {
    this._x = l || 0;
    this._y = a || 0;
    this._z = c || 0;
    this._w = void 0 !== b ? b : 1;
  }
  function m(l, a, c) {
    this.x = l || 0;
    this.y = a || 0;
    this.z = c || 0;
  }
  function n() {
    this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
    0 < arguments.length && console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.");
  }
  function c(l, a, b, e) {
    this._x = l || 0;
    this._y = a || 0;
    this._z = b || 0;
    this._order = e || c.DefaultOrder;
  }
  function h() {
    this.mask = 1;
  }
  function t() {
    Object.defineProperty(this, "id", {value:kj++});
    this.uuid = oa.generateUUID();
    this.name = "";
    this.type = "Object3D";
    this.parent = null;
    this.children = [];
    this.up = t.DefaultUp.clone();
    var l = new m, a = new c, e = new q, d = new m(1, 1, 1);
    a._onChange(function() {
      e.setFromEuler(a, !1);
    });
    e._onChange(function() {
      a.setFromQuaternion(e, void 0, !1);
    });
    Object.defineProperties(this, {position:{configurable:!0, enumerable:!0, value:l}, rotation:{configurable:!0, enumerable:!0, value:a}, quaternion:{configurable:!0, enumerable:!0, value:e}, scale:{configurable:!0, enumerable:!0, value:d}, modelViewMatrix:{value:new n}, normalMatrix:{value:new b}});
    this.matrix = new n;
    this.matrixWorld = new n;
    this.matrixAutoUpdate = t.DefaultMatrixAutoUpdate;
    this.matrixWorldNeedsUpdate = !1;
    this.layers = new h;
    this.visible = !0;
    this.receiveShadow = this.castShadow = !1;
    this.frustumCulled = !0;
    this.renderOrder = 0;
    this.userData = {};
  }
  function z() {
    t.call(this);
    this.type = "Scene";
    this.overrideMaterial = this.fog = this.environment = this.background = null;
    this.autoUpdate = !0;
    "undefined" !== typeof __THREE_DEVTOOLS__ && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", {detail:this}));
  }
  function y(l, a) {
    this.min = void 0 !== l ? l : new m(Infinity, Infinity, Infinity);
    this.max = void 0 !== a ? a : new m(-Infinity, -Infinity, -Infinity);
  }
  function x(l, a, c, b, e) {
    var u;
    var d = 0;
    for (u = l.length - 3; d <= u; d += 3) {
      xc.fromArray(l, d);
      var h = e.x * Math.abs(xc.x) + e.y * Math.abs(xc.y) + e.z * Math.abs(xc.z), f = a.dot(xc), G = c.dot(xc), g = b.dot(xc);
      if (Math.max(-Math.max(f, G, g), Math.min(f, G, g)) > h) {
        return !1;
      }
    }
    return !0;
  }
  function p(l, a) {
    this.center = void 0 !== l ? l : new m;
    this.radius = void 0 !== a ? a : -1;
  }
  function v(l, a) {
    this.origin = void 0 !== l ? l : new m;
    this.direction = void 0 !== a ? a : new m(0, 0, -1);
  }
  function w(l, a) {
    this.normal = void 0 !== l ? l : new m(1, 0, 0);
    this.constant = void 0 !== a ? a : 0;
  }
  function C(l, a, c) {
    this.a = void 0 !== l ? l : new m;
    this.b = void 0 !== a ? a : new m;
    this.c = void 0 !== c ? c : new m;
  }
  function A(l, a, c) {
    return void 0 === a && void 0 === c ? this.set(l) : this.setRGB(l, a, c);
  }
  function D(l, a, c) {
    0 > c && (c += 1);
    1 < c && --c;
    return c < 1 / 6 ? l + 6 * (a - l) * c : .5 > c ? a : c < 2 / 3 ? l + 6 * (a - l) * (2 / 3 - c) : l;
  }
  function F(l) {
    return .04045 > l ? .0773993808 * l : Math.pow(.9478672986 * l + .0521327014, 2.4);
  }
  function B(l) {
    return .0031308 > l ? 12.92 * l : 1.055 * Math.pow(l, .41666) - .055;
  }
  function E(l, a, c, b, e, d) {
    this.a = l;
    this.b = a;
    this.c = c;
    this.normal = b && b.isVector3 ? b : new m;
    this.vertexNormals = Array.isArray(b) ? b : [];
    this.color = e && e.isColor ? e : new A;
    this.vertexColors = Array.isArray(e) ? e : [];
    this.materialIndex = void 0 !== d ? d : 0;
  }
  function I() {
    Object.defineProperty(this, "id", {value:lj++});
    this.uuid = oa.generateUUID();
    this.name = "";
    this.type = "Material";
    this.fog = !0;
    this.blending = 1;
    this.side = 0;
    this.vertexColors = this.flatShading = !1;
    this.opacity = 1;
    this.transparent = !1;
    this.blendSrc = 204;
    this.blendDst = 205;
    this.blendEquation = 100;
    this.blendEquationAlpha = this.blendDstAlpha = this.blendSrcAlpha = null;
    this.depthFunc = 3;
    this.depthWrite = this.depthTest = !0;
    this.stencilWriteMask = 255;
    this.stencilFunc = 519;
    this.stencilRef = 0;
    this.stencilFuncMask = 255;
    this.stencilZPass = this.stencilZFail = this.stencilFail = 7680;
    this.stencilWrite = !1;
    this.clippingPlanes = null;
    this.clipShadows = this.clipIntersection = !1;
    this.shadowSide = null;
    this.colorWrite = !0;
    this.precision = null;
    this.polygonOffset = !1;
    this.polygonOffsetUnits = this.polygonOffsetFactor = 0;
    this.dithering = !1;
    this.alphaTest = 0;
    this.premultipliedAlpha = !1;
    this.toneMapped = this.visible = !0;
    this.userData = {};
    this.version = 0;
  }
  function K(l) {
    I.call(this);
    this.type = "MeshBasicMaterial";
    this.color = new A(16777215);
    this.lightMap = this.map = null;
    this.lightMapIntensity = 1;
    this.aoMap = null;
    this.aoMapIntensity = 1;
    this.envMap = this.alphaMap = this.specularMap = null;
    this.combine = 0;
    this.reflectivity = 1;
    this.refractionRatio = .98;
    this.wireframe = !1;
    this.wireframeLinewidth = 1;
    this.wireframeLinejoin = this.wireframeLinecap = "round";
    this.morphTargets = this.skinning = !1;
    this.setValues(l);
  }
  function J(l, a, c) {
    if (Array.isArray(l)) {
      throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
    }
    this.name = "";
    this.array = l;
    this.itemSize = a;
    this.count = void 0 !== l ? l.length / a : 0;
    this.normalized = !0 === c;
    this.usage = 35044;
    this.updateRange = {offset:0, count:-1};
    this.version = 0;
  }
  function R(l, a, c) {
    J.call(this, new Int8Array(l), a, c);
  }
  function L(l, a, c) {
    J.call(this, new Uint8Array(l), a, c);
  }
  function H(l, a, c) {
    J.call(this, new Uint8ClampedArray(l), a, c);
  }
  function M(l, a, c) {
    J.call(this, new Int16Array(l), a, c);
  }
  function S(l, a, c) {
    J.call(this, new Uint16Array(l), a, c);
  }
  function O(l, a, c) {
    J.call(this, new Int32Array(l), a, c);
  }
  function Z(l, a, c) {
    J.call(this, new Uint32Array(l), a, c);
  }
  function Q(l, a, c) {
    J.call(this, new Float32Array(l), a, c);
  }
  function U(l, a, c) {
    J.call(this, new Float64Array(l), a, c);
  }
  function P() {
    this.vertices = [];
    this.normals = [];
    this.colors = [];
    this.uvs = [];
    this.uvs2 = [];
    this.groups = [];
    this.morphTargets = {};
    this.skinWeights = [];
    this.skinIndices = [];
    this.boundingSphere = this.boundingBox = null;
    this.groupsNeedUpdate = this.uvsNeedUpdate = this.colorsNeedUpdate = this.normalsNeedUpdate = this.verticesNeedUpdate = !1;
  }
  function da(l) {
    if (0 === l.length) {
      return -Infinity;
    }
    for (var a = l[0], c = 1, b = l.length; c < b; ++c) {
      l[c] > a && (a = l[c]);
    }
    return a;
  }
  function N() {
    Object.defineProperty(this, "id", {value:mj += 2});
    this.uuid = oa.generateUUID();
    this.name = "";
    this.type = "BufferGeometry";
    this.index = null;
    this.attributes = {};
    this.morphAttributes = {};
    this.morphTargetsRelative = !1;
    this.groups = [];
    this.boundingSphere = this.boundingBox = null;
    this.drawRange = {start:0, count:Infinity};
    this.userData = {};
  }
  function V(l, a) {
    t.call(this);
    this.type = "Mesh";
    this.geometry = void 0 !== l ? l : new N;
    this.material = void 0 !== a ? a : new K;
    this.updateMorphTargets();
  }
  function ea(l, a, c, b, e, d, h, f) {
    if (null === (1 === a.side ? b.intersectTriangle(h, d, e, !0, f) : b.intersectTriangle(e, d, h, 2 !== a.side, f))) {
      return null;
    }
    Ve.copy(f);
    Ve.applyMatrix4(l.matrixWorld);
    a = c.ray.origin.distanceTo(Ve);
    return a < c.near || a > c.far ? null : {distance:a, point:Ve.clone(), object:l};
  }
  function ha(l, a, c, b, e, d, h, f, g, m, p, n) {
    dc.fromBufferAttribute(e, m);
    ec.fromBufferAttribute(e, p);
    fc.fromBufferAttribute(e, n);
    e = l.morphTargetInfluences;
    if (a.morphTargets && d && e) {
      We.set(0, 0, 0);
      Xe.set(0, 0, 0);
      Ye.set(0, 0, 0);
      for (var u = 0, G = d.length; u < G; u++) {
        var q = e[u], r = d[u];
        0 !== q && (ng.fromBufferAttribute(r, m), og.fromBufferAttribute(r, p), pg.fromBufferAttribute(r, n), h ? (We.addScaledVector(ng, q), Xe.addScaledVector(og, q), Ye.addScaledVector(pg, q)) : (We.addScaledVector(ng.sub(dc), q), Xe.addScaledVector(og.sub(ec), q), Ye.addScaledVector(pg.sub(fc), q)));
      }
      dc.add(We);
      ec.add(Xe);
      fc.add(Ye);
    }
    l.isSkinnedMesh && (l.boneTransform(m, dc), l.boneTransform(p, ec), l.boneTransform(n, fc));
    if (l = ea(l, a, c, b, dc, ec, fc, Ud)) {
      f && (ad.fromBufferAttribute(f, m), bd.fromBufferAttribute(f, p), cd.fromBufferAttribute(f, n), l.uv = C.getUV(Ud, dc, ec, fc, ad, bd, cd, new k)), g && (ad.fromBufferAttribute(g, m), bd.fromBufferAttribute(g, p), cd.fromBufferAttribute(g, n), l.uv2 = C.getUV(Ud, dc, ec, fc, ad, bd, cd, new k)), f = new E(m, p, n), C.getNormal(dc, ec, fc, f.normal), l.face = f;
    }
    return l;
  }
  function W() {
    Object.defineProperty(this, "id", {value:oj += 2});
    this.uuid = oa.generateUUID();
    this.name = "";
    this.type = "Geometry";
    this.vertices = [];
    this.colors = [];
    this.faces = [];
    this.faceVertexUvs = [[]];
    this.morphTargets = [];
    this.morphNormals = [];
    this.skinWeights = [];
    this.skinIndices = [];
    this.lineDistances = [];
    this.boundingSphere = this.boundingBox = null;
    this.groupsNeedUpdate = this.lineDistancesNeedUpdate = this.colorsNeedUpdate = this.normalsNeedUpdate = this.uvsNeedUpdate = this.verticesNeedUpdate = this.elementsNeedUpdate = !1;
  }
  function la(l) {
    var a = {}, c;
    for (c in l) {
      a[c] = {};
      for (var b in l[c]) {
        var e = l[c][b];
        e && (e.isColor || e.isMatrix3 || e.isMatrix4 || e.isVector2 || e.isVector3 || e.isVector4 || e.isTexture) ? a[c][b] = e.clone() : Array.isArray(e) ? a[c][b] = e.slice() : a[c][b] = e;
      }
    }
    return a;
  }
  function X(l) {
    for (var a = {}, c = 0; c < l.length; c++) {
      var b = la(l[c]), e;
      for (e in b) {
        a[e] = b[e];
      }
    }
    return a;
  }
  function ka(l) {
    I.call(this);
    this.type = "ShaderMaterial";
    this.defines = {};
    this.uniforms = {};
    this.vertexShader = "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";
    this.fragmentShader = "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";
    this.linewidth = 1;
    this.wireframe = !1;
    this.wireframeLinewidth = 1;
    this.morphNormals = this.morphTargets = this.skinning = this.clipping = this.lights = this.fog = !1;
    this.extensions = {derivatives:!1, fragDepth:!1, drawBuffers:!1, shaderTextureLOD:!1};
    this.defaultAttributeValues = {color:[1, 1, 1], uv:[0, 0], uv2:[0, 0]};
    this.index0AttributeName = void 0;
    this.uniformsNeedUpdate = !1;
    void 0 !== l && (void 0 !== l.attributes && console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."), this.setValues(l));
  }
  function T() {
    t.call(this);
    this.type = "Camera";
    this.matrixWorldInverse = new n;
    this.projectionMatrix = new n;
    this.projectionMatrixInverse = new n;
  }
  function ia(l, a, c, b) {
    T.call(this);
    this.type = "PerspectiveCamera";
    this.fov = void 0 !== l ? l : 50;
    this.zoom = 1;
    this.near = void 0 !== c ? c : .1;
    this.far = void 0 !== b ? b : 2E3;
    this.focus = 10;
    this.aspect = void 0 !== a ? a : 1;
    this.view = null;
    this.filmGauge = 35;
    this.filmOffset = 0;
    this.updateProjectionMatrix();
  }
  function sa(l, a, c, b) {
    t.call(this);
    this.type = "CubeCamera";
    var u = new ia(90, 1, l, a);
    u.up.set(0, -1, 0);
    u.lookAt(new m(1, 0, 0));
    this.add(u);
    var e = new ia(90, 1, l, a);
    e.up.set(0, -1, 0);
    e.lookAt(new m(-1, 0, 0));
    this.add(e);
    var d = new ia(90, 1, l, a);
    d.up.set(0, 0, 1);
    d.lookAt(new m(0, 1, 0));
    this.add(d);
    var h = new ia(90, 1, l, a);
    h.up.set(0, 0, -1);
    h.lookAt(new m(0, -1, 0));
    this.add(h);
    var f = new ia(90, 1, l, a);
    f.up.set(0, -1, 0);
    f.lookAt(new m(0, 0, 1));
    this.add(f);
    var G = new ia(90, 1, l, a);
    G.up.set(0, -1, 0);
    G.lookAt(new m(0, 0, -1));
    this.add(G);
    b = b || {format:1022, magFilter:1006, minFilter:1006};
    this.renderTarget = new va(c, b);
    this.renderTarget.texture.name = "CubeCamera";
    this.update = function(l, a) {
      null === this.parent && this.updateMatrixWorld();
      var c = l.getRenderTarget(), b = this.renderTarget, g = b.texture.generateMipmaps;
      b.texture.generateMipmaps = !1;
      l.setRenderTarget(b, 0);
      l.render(a, u);
      l.setRenderTarget(b, 1);
      l.render(a, e);
      l.setRenderTarget(b, 2);
      l.render(a, d);
      l.setRenderTarget(b, 3);
      l.render(a, h);
      l.setRenderTarget(b, 4);
      l.render(a, f);
      b.texture.generateMipmaps = g;
      l.setRenderTarget(b, 5);
      l.render(a, G);
      l.setRenderTarget(c);
    };
    this.clear = function(l, a, u, c) {
      for (var b = l.getRenderTarget(), e = this.renderTarget, d = 0; 6 > d; d++) {
        l.setRenderTarget(e, d), l.clear(a, u, c);
      }
      l.setRenderTarget(b);
    };
  }
  function va(l, a, c) {
    Number.isInteger(a) && (console.warn("THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )"), a = c);
    e.call(this, l, l, a);
  }
  function Ja(l, a, c, b, e, d, h, f, m, p, n, k) {
    g.call(this, null, d, h, f, m, p, b, e, n, k);
    this.image = {data:l || null, width:a || 1, height:c || 1};
    this.magFilter = void 0 !== m ? m : 1003;
    this.minFilter = void 0 !== p ? p : 1003;
    this.flipY = this.generateMipmaps = !1;
    this.unpackAlignment = 1;
    this.needsUpdate = !0;
  }
  function Ga(l, a, c, b, e, d) {
    this.planes = [void 0 !== l ? l : new w, void 0 !== a ? a : new w, void 0 !== c ? c : new w, void 0 !== b ? b : new w, void 0 !== e ? e : new w, void 0 !== d ? d : new w];
  }
  function ta() {
    function l(u, e) {
      !1 !== c && (b(u, e), a.requestAnimationFrame(l));
    }
    var a = null, c = !1, b = null;
    return {start:function() {
      !0 !== c && null !== b && (a.requestAnimationFrame(l), c = !0);
    }, stop:function() {
      c = !1;
    }, setAnimationLoop:function(l) {
      b = l;
    }, setContext:function(l) {
      a = l;
    }};
  }
  function Pb(l, a) {
    function u(a, u) {
      var c = a.array, b = a.usage, e = l.createBuffer();
      l.bindBuffer(u, e);
      l.bufferData(u, c, b);
      a.onUploadCallback();
      u = 5126;
      c instanceof Float32Array ? u = 5126 : c instanceof Float64Array ? console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.") : c instanceof Uint16Array ? u = 5123 : c instanceof Int16Array ? u = 5122 : c instanceof Uint32Array ? u = 5125 : c instanceof Int32Array ? u = 5124 : c instanceof Int8Array ? u = 5120 : c instanceof Uint8Array && (u = 5121);
      return {buffer:e, type:u, bytesPerElement:c.BYTES_PER_ELEMENT, version:a.version};
    }
    var c = a.isWebGL2, b = new WeakMap;
    return {get:function(l) {
      l.isInterleavedBufferAttribute && (l = l.data);
      return b.get(l);
    }, remove:function(a) {
      a.isInterleavedBufferAttribute && (a = a.data);
      var u = b.get(a);
      u && (l.deleteBuffer(u.buffer), b.delete(a));
    }, update:function(a, e) {
      a.isInterleavedBufferAttribute && (a = a.data);
      var d = b.get(a);
      if (void 0 === d) {
        b.set(a, u(a, e));
      } else {
        if (d.version < a.version) {
          var h = a.array, f = a.updateRange;
          l.bindBuffer(e, d.buffer);
          -1 === f.count ? l.bufferSubData(e, 0, h) : (c ? l.bufferSubData(e, f.offset * h.BYTES_PER_ELEMENT, h, f.offset, f.count) : l.bufferSubData(e, f.offset * h.BYTES_PER_ELEMENT, h.subarray(f.offset, f.offset + f.count)), f.count = -1);
          d.version = a.version;
        }
      }
    }};
  }
  function wa(l, a, c, b) {
    W.call(this);
    this.type = "PlaneGeometry";
    this.parameters = {width:l, height:a, widthSegments:c, heightSegments:b};
    this.fromBufferGeometry(new ya(l, a, c, b));
    this.mergeVertices();
  }
  function ya(l, a, c, b) {
    N.call(this);
    this.type = "PlaneBufferGeometry";
    this.parameters = {width:l, height:a, widthSegments:c, heightSegments:b};
    l = l || 1;
    a = a || 1;
    var u = l / 2, e = a / 2;
    c = Math.floor(c) || 1;
    b = Math.floor(b) || 1;
    var d = c + 1, h = b + 1, f = l / c, G = a / b, g = [], m = [], p = [], n = [];
    for (l = 0; l < h; l++) {
      var k = l * G - e;
      for (a = 0; a < d; a++) {
        m.push(a * f - u, -k, 0), p.push(0, 0, 1), n.push(a / c), n.push(1 - l / b);
      }
    }
    for (l = 0; l < b; l++) {
      for (a = 0; a < c; a++) {
        u = a + d * (l + 1), e = a + 1 + d * (l + 1), h = a + 1 + d * l, g.push(a + d * l, u, h), g.push(u, e, h);
      }
    }
    this.setIndex(g);
    this.setAttribute("position", new Q(m, 3));
    this.setAttribute("normal", new Q(p, 3));
    this.setAttribute("uv", new Q(n, 2));
  }
  function gc(l, a, c, b) {
    function u(l, u) {
      a.buffers.color.setClear(l.r, l.g, l.b, u, b);
    }
    var e = new A(0), d = 0, h, f, G = null, g = 0, m = null;
    return {getClearColor:function() {
      return e;
    }, setClearColor:function(l, a) {
      e.set(l);
      d = void 0 !== a ? a : 1;
      u(e, d);
    }, getClearAlpha:function() {
      return d;
    }, setClearAlpha:function(l) {
      d = l;
      u(e, d);
    }, render:function(a, b, p, n) {
      b = b.background;
      p = l.xr;
      (p = p.getSession && p.getSession()) && "additive" === p.environmentBlendMode && (b = null);
      null === b ? u(e, d) : b && b.isColor && (u(b, 1), n = !0);
      (l.autoClear || n) && l.clear(l.autoClearColor, l.autoClearDepth, l.autoClearStencil);
      if (b && (b.isCubeTexture || b.isWebGLCubeRenderTarget || 306 === b.mapping)) {
        void 0 === f && (f = new V(new Vd(1, 1, 1), new ka({type:"BackgroundCubeMaterial", uniforms:la(Bb.cube.uniforms), vertexShader:Bb.cube.vertexShader, fragmentShader:Bb.cube.fragmentShader, side:1, depthTest:!1, depthWrite:!1, fog:!1})), f.geometry.deleteAttribute("normal"), f.geometry.deleteAttribute("uv"), f.onBeforeRender = function(l, a, u) {
          this.matrixWorld.copyPosition(u.matrixWorld);
        }, Object.defineProperty(f.material, "envMap", {get:function() {
          return this.uniforms.envMap.value;
        }}), c.update(f));
        n = b.isWebGLCubeRenderTarget ? b.texture : b;
        f.material.uniforms.envMap.value = n;
        f.material.uniforms.flipEnvMap.value = n.isCubeTexture ? -1 : 1;
        if (G !== b || g !== n.version || m !== l.toneMapping) {
          f.material.needsUpdate = !0, G = b, g = n.version, m = l.toneMapping;
        }
        a.unshift(f, f.geometry, f.material, 0, 0, null);
      } else {
        if (b && b.isTexture) {
          void 0 === h && (h = new V(new ya(2, 2), new ka({type:"BackgroundMaterial", uniforms:la(Bb.background.uniforms), vertexShader:Bb.background.vertexShader, fragmentShader:Bb.background.fragmentShader, side:0, depthTest:!1, depthWrite:!1, fog:!1})), h.geometry.deleteAttribute("normal"), Object.defineProperty(h.material, "map", {get:function() {
            return this.uniforms.t2D.value;
          }}), c.update(h));
          h.material.uniforms.t2D.value = b;
          !0 === b.matrixAutoUpdate && b.updateMatrix();
          h.material.uniforms.uvTransform.value.copy(b.matrix);
          if (G !== b || g !== b.version || m !== l.toneMapping) {
            h.material.needsUpdate = !0, G = b, g = b.version, m = l.toneMapping;
          }
          a.unshift(h, h.geometry, h.material, 0, 0, null);
        }
      }
    }};
  }
  function Wd(l, a, c, b) {
    var u = b.isWebGL2, e;
    this.setMode = function(l) {
      e = l;
    };
    this.render = function(a, u) {
      l.drawArrays(e, a, u);
      c.update(u, e);
    };
    this.renderInstances = function(b, d, h, f) {
      if (0 !== f) {
        if (u) {
          b = l;
          var G = "drawArraysInstanced";
        } else {
          if (b = a.get("ANGLE_instanced_arrays"), G = "drawArraysInstancedANGLE", null === b) {
            console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
            return;
          }
        }
        b[G](e, d, h, f);
        c.update(h, e, f);
      }
    };
  }
  function yc(l, a, c) {
    function u(a) {
      if ("highp" === a) {
        if (0 < l.getShaderPrecisionFormat(35633, 36338).precision && 0 < l.getShaderPrecisionFormat(35632, 36338).precision) {
          return "highp";
        }
        a = "mediump";
      }
      return "mediump" === a && 0 < l.getShaderPrecisionFormat(35633, 36337).precision && 0 < l.getShaderPrecisionFormat(35632, 36337).precision ? "mediump" : "lowp";
    }
    var b, e = "undefined" !== typeof WebGL2RenderingContext && l instanceof WebGL2RenderingContext || "undefined" !== typeof WebGL2ComputeRenderingContext && l instanceof WebGL2ComputeRenderingContext, d = void 0 !== c.precision ? c.precision : "highp", h = u(d);
    h !== d && (console.warn("THREE.WebGLRenderer:", d, "not supported, using", h, "instead."), d = h);
    c = !0 === c.logarithmicDepthBuffer;
    h = l.getParameter(34930);
    var f = l.getParameter(35660), G = l.getParameter(3379), g = l.getParameter(34076), m = l.getParameter(34921), p = l.getParameter(36347), n = l.getParameter(36348), k = l.getParameter(36349), q = 0 < f, r = e || !!a.get("OES_texture_float"), t = q && r, v = e ? l.getParameter(36183) : 0;
    return {isWebGL2:e, getMaxAnisotropy:function() {
      if (void 0 !== b) {
        return b;
      }
      var u = a.get("EXT_texture_filter_anisotropic");
      return b = null !== u ? l.getParameter(u.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 0;
    }, getMaxPrecision:u, precision:d, logarithmicDepthBuffer:c, maxTextures:h, maxVertexTextures:f, maxTextureSize:G, maxCubemapSize:g, maxAttributes:m, maxVertexUniforms:p, maxVaryings:n, maxFragmentUniforms:k, vertexTextures:q, floatFragmentTextures:r, floatVertexTextures:t, maxSamples:v};
  }
  function Ya() {
    function l() {
      p.value !== e && (p.value = e, p.needsUpdate = 0 < d);
      c.numPlanes = d;
      c.numIntersection = 0;
    }
    function a(l, a, u, b) {
      var e = null !== l ? l.length : 0, d = null;
      if (0 !== e) {
        d = p.value;
        if (!0 !== b || null === d) {
          b = u + 4 * e;
          a = a.matrixWorldInverse;
          m.getNormalMatrix(a);
          if (null === d || d.length < b) {
            d = new Float32Array(b);
          }
          for (b = 0; b !== e; ++b, u += 4) {
            g.copy(l[b]).applyMatrix4(a, m), g.normal.toArray(d, u), d[u + 3] = g.constant;
          }
        }
        p.value = d;
        p.needsUpdate = !0;
      }
      c.numPlanes = e;
      c.numIntersection = 0;
      return d;
    }
    var c = this, e = null, d = 0, h = !1, f = !1, g = new w, m = new b, p = {value:null, needsUpdate:!1};
    this.uniform = p;
    this.numIntersection = this.numPlanes = 0;
    this.init = function(l, u, c) {
      var b = 0 !== l.length || u || 0 !== d || h;
      h = u;
      e = a(l, c, 0);
      d = l.length;
      return b;
    };
    this.beginShadows = function() {
      f = !0;
      a(null);
    };
    this.endShadows = function() {
      f = !1;
      l();
    };
    this.setState = function(u, c, b, G, g, m) {
      if (!h || null === u || 0 === u.length || f && !b) {
        f ? a(null) : l();
      } else {
        b = f ? 0 : d;
        var n = 4 * b, k = g.clippingState || null;
        p.value = k;
        k = a(u, G, n, m);
        for (u = 0; u !== n; ++u) {
          k[u] = e[u];
        }
        g.clippingState = k;
        this.numIntersection = c ? this.numPlanes : 0;
        this.numPlanes += b;
      }
    };
  }
  function pb(l) {
    var a = {};
    return {get:function(u) {
      if (void 0 !== a[u]) {
        return a[u];
      }
      switch(u) {
        case "WEBGL_depth_texture":
          var c = l.getExtension("WEBGL_depth_texture") || l.getExtension("MOZ_WEBGL_depth_texture") || l.getExtension("WEBKIT_WEBGL_depth_texture");
          break;
        case "EXT_texture_filter_anisotropic":
          c = l.getExtension("EXT_texture_filter_anisotropic") || l.getExtension("MOZ_EXT_texture_filter_anisotropic") || l.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
          break;
        case "WEBGL_compressed_texture_s3tc":
          c = l.getExtension("WEBGL_compressed_texture_s3tc") || l.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || l.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
          break;
        case "WEBGL_compressed_texture_pvrtc":
          c = l.getExtension("WEBGL_compressed_texture_pvrtc") || l.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
          break;
        default:
          c = l.getExtension(u);
      }
      null === c && console.warn("THREE.WebGLRenderer: " + u + " extension not supported.");
      return a[u] = c;
    }};
  }
  function zc(l, a, c) {
    function u(l) {
      var b = l.target;
      l = e.get(b);
      null !== l.index && a.remove(l.index);
      for (var h in l.attributes) {
        a.remove(l.attributes[h]);
      }
      b.removeEventListener("dispose", u);
      e.delete(b);
      if (h = d.get(l)) {
        a.remove(h), d.delete(l);
      }
      c.memory.geometries--;
    }
    function b(l) {
      var u = [], c = l.index, b = l.attributes.position;
      if (null !== c) {
        var e = c.array;
        c = c.version;
        b = 0;
        for (var h = e.length; b < h; b += 3) {
          var f = e[b + 0], G = e[b + 1], g = e[b + 2];
          u.push(f, G, G, g, g, f);
        }
      } else {
        for (e = b.array, c = b.version, b = 0, h = e.length / 3 - 1; b < h; b += 3) {
          f = b + 0, G = b + 1, g = b + 2, u.push(f, G, G, g, g, f);
        }
      }
      u = new (65535 < da(u) ? Z : S)(u, 1);
      u.version = c;
      a.update(u, 34963);
      (e = d.get(l)) && a.remove(e);
      d.set(l, u);
    }
    var e = new WeakMap, d = new WeakMap;
    return {get:function(l, a) {
      var b = e.get(a);
      if (b) {
        return b;
      }
      a.addEventListener("dispose", u);
      a.isBufferGeometry ? b = a : a.isGeometry && (void 0 === a._bufferGeometry && (a._bufferGeometry = (new N).setFromObject(l)), b = a._bufferGeometry);
      e.set(a, b);
      c.memory.geometries++;
      return b;
    }, update:function(l) {
      var u = l.index, c = l.attributes;
      null !== u && a.update(u, 34963);
      for (var b in c) {
        a.update(c[b], 34962);
      }
      l = l.morphAttributes;
      for (b in l) {
        u = l[b];
        c = 0;
        for (var e = u.length; c < e; c++) {
          a.update(u[c], 34962);
        }
      }
    }, getWireframeAttribute:function(l) {
      var a = d.get(l);
      if (a) {
        var u = l.index;
        null !== u && a.version < u.version && b(l);
      } else {
        b(l);
      }
      return d.get(l);
    }};
  }
  function Cb(l, a, c, b) {
    var u = b.isWebGL2, e, d, h;
    this.setMode = function(l) {
      e = l;
    };
    this.setIndex = function(l) {
      d = l.type;
      h = l.bytesPerElement;
    };
    this.render = function(a, u) {
      l.drawElements(e, u, d, a * h);
      c.update(u, e);
    };
    this.renderInstances = function(b, f, G, g) {
      if (0 !== g) {
        if (u) {
          b = l;
          var m = "drawElementsInstanced";
        } else {
          if (b = a.get("ANGLE_instanced_arrays"), m = "drawElementsInstancedANGLE", null === b) {
            console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
            return;
          }
        }
        b[m](e, G, d, f * h, g);
        c.update(G, e, g);
      }
    };
  }
  function Qb(l) {
    var a = {frame:0, calls:0, triangles:0, points:0, lines:0};
    return {memory:{geometries:0, textures:0}, render:a, programs:null, autoReset:!0, reset:function() {
      a.frame++;
      a.calls = 0;
      a.triangles = 0;
      a.points = 0;
      a.lines = 0;
    }, update:function(l, u, c) {
      c = c || 1;
      a.calls++;
      switch(u) {
        case 4:
          a.triangles += l / 3 * c;
          break;
        case 1:
          a.lines += l / 2 * c;
          break;
        case 3:
          a.lines += c * (l - 1);
          break;
        case 2:
          a.lines += c * l;
          break;
        case 0:
          a.points += c * l;
          break;
        default:
          console.error("THREE.WebGLInfo: Unknown draw mode:", u);
      }
    }};
  }
  function Db(l, a) {
    return Math.abs(a[1]) - Math.abs(l[1]);
  }
  function ib(l) {
    var a = {}, c = new Float32Array(8);
    return {update:function(u, b, e, d) {
      var h = u.morphTargetInfluences, f = void 0 === h ? 0 : h.length;
      u = a[b.id];
      if (void 0 === u) {
        u = [];
        for (var G = 0; G < f; G++) {
          u[G] = [G, 0];
        }
        a[b.id] = u;
      }
      var g = e.morphTargets && b.morphAttributes.position;
      e = e.morphNormals && b.morphAttributes.normal;
      for (G = 0; G < f; G++) {
        var m = u[G];
        0 !== m[1] && (g && b.deleteAttribute("morphTarget" + G), e && b.deleteAttribute("morphNormal" + G));
      }
      for (G = 0; G < f; G++) {
        m = u[G], m[0] = G, m[1] = h[G];
      }
      u.sort(Db);
      for (G = h = 0; 8 > G; G++) {
        if (m = u[G]) {
          if (f = m[0], m = m[1]) {
            g && b.setAttribute("morphTarget" + G, g[f]);
            e && b.setAttribute("morphNormal" + G, e[f]);
            c[G] = m;
            h += m;
            continue;
          }
        }
        c[G] = 0;
      }
      b = b.morphTargetsRelative ? 1 : 1 - h;
      d.getUniforms().setValue(l, "morphTargetBaseInfluence", b);
      d.getUniforms().setValue(l, "morphTargetInfluences", c);
    }};
  }
  function Ac(l, a, c, b) {
    var u = new WeakMap;
    return {update:function(l) {
      var e = b.render.frame, d = l.geometry, h = a.get(l, d);
      u.get(h) !== e && (d.isGeometry && h.updateFromObject(l), a.update(h), u.set(h, e));
      l.isInstancedMesh && c.update(l.instanceMatrix, 34962);
      return h;
    }, dispose:function() {
      u = new WeakMap;
    }};
  }
  function Va(l, a, c, b, e, d, h, f, m, p) {
    l = void 0 !== l ? l : [];
    g.call(this, l, void 0 !== a ? a : 301, c, b, e, d, void 0 !== h ? h : 1022, f, m, p);
    this.flipY = !1;
  }
  function Aa(l, a, c, b) {
    g.call(this, null);
    this.image = {data:l || null, width:a || 1, height:c || 1, depth:b || 1};
    this.minFilter = this.magFilter = 1003;
    this.wrapR = 1001;
    this.flipY = this.generateMipmaps = !1;
    this.needsUpdate = !0;
  }
  function jb(l, a, c, b) {
    g.call(this, null);
    this.image = {data:l || null, width:a || 1, height:c || 1, depth:b || 1};
    this.minFilter = this.magFilter = 1003;
    this.wrapR = 1001;
    this.flipY = this.generateMipmaps = !1;
    this.needsUpdate = !0;
  }
  function Ra(l, a, c) {
    var u = l[0];
    if (0 >= u || 0 < u) {
      return l;
    }
    var b = a * c, e = Ch[b];
    void 0 === e && (e = new Float32Array(b), Ch[b] = e);
    if (0 !== a) {
      for (u.toArray(e, 0), u = 1, b = 0; u !== a; ++u) {
        b += c, l[u].toArray(e, b);
      }
    }
    return e;
  }
  function Na(l, a) {
    if (l.length !== a.length) {
      return !1;
    }
    for (var u = 0, c = l.length; u < c; u++) {
      if (l[u] !== a[u]) {
        return !1;
      }
    }
    return !0;
  }
  function Oa(l, a) {
    for (var u = 0, c = a.length; u < c; u++) {
      l[u] = a[u];
    }
  }
  function kb(l, a) {
    var u = Dh[a];
    void 0 === u && (u = new Int32Array(a), Dh[a] = u);
    for (var c = 0; c !== a; ++c) {
      u[c] = l.allocateTextureUnit();
    }
    return u;
  }
  function qb(l, a) {
    var u = this.cache;
    u[0] !== a && (l.uniform1f(this.addr, a), u[0] = a);
  }
  function db(l, a) {
    var u = this.cache;
    if (void 0 !== a.x) {
      if (u[0] !== a.x || u[1] !== a.y) {
        l.uniform2f(this.addr, a.x, a.y), u[0] = a.x, u[1] = a.y;
      }
    } else {
      Na(u, a) || (l.uniform2fv(this.addr, a), Oa(u, a));
    }
  }
  function Bc(l, a) {
    var u = this.cache;
    if (void 0 !== a.x) {
      if (u[0] !== a.x || u[1] !== a.y || u[2] !== a.z) {
        l.uniform3f(this.addr, a.x, a.y, a.z), u[0] = a.x, u[1] = a.y, u[2] = a.z;
      }
    } else {
      if (void 0 !== a.r) {
        if (u[0] !== a.r || u[1] !== a.g || u[2] !== a.b) {
          l.uniform3f(this.addr, a.r, a.g, a.b), u[0] = a.r, u[1] = a.g, u[2] = a.b;
        }
      } else {
        Na(u, a) || (l.uniform3fv(this.addr, a), Oa(u, a));
      }
    }
  }
  function rb(l, a) {
    var u = this.cache;
    if (void 0 !== a.x) {
      if (u[0] !== a.x || u[1] !== a.y || u[2] !== a.z || u[3] !== a.w) {
        l.uniform4f(this.addr, a.x, a.y, a.z, a.w), u[0] = a.x, u[1] = a.y, u[2] = a.z, u[3] = a.w;
      }
    } else {
      Na(u, a) || (l.uniform4fv(this.addr, a), Oa(u, a));
    }
  }
  function Eb(l, a) {
    var u = this.cache, c = a.elements;
    void 0 === c ? Na(u, a) || (l.uniformMatrix2fv(this.addr, !1, a), Oa(u, a)) : Na(u, c) || (Eh.set(c), l.uniformMatrix2fv(this.addr, !1, Eh), Oa(u, c));
  }
  function Rb(l, a) {
    var u = this.cache, c = a.elements;
    void 0 === c ? Na(u, a) || (l.uniformMatrix3fv(this.addr, !1, a), Oa(u, a)) : Na(u, c) || (Fh.set(c), l.uniformMatrix3fv(this.addr, !1, Fh), Oa(u, c));
  }
  function ba(l, a) {
    var u = this.cache, c = a.elements;
    void 0 === c ? Na(u, a) || (l.uniformMatrix4fv(this.addr, !1, a), Oa(u, a)) : Na(u, c) || (Gh.set(c), l.uniformMatrix4fv(this.addr, !1, Gh), Oa(u, c));
  }
  function na(l, a, c) {
    var u = this.cache, b = c.allocateTextureUnit();
    u[0] !== b && (l.uniform1i(this.addr, b), u[0] = b);
    c.safeSetTexture2D(a || Hh, b);
  }
  function Ha(l, a, c) {
    var u = this.cache, b = c.allocateTextureUnit();
    u[0] !== b && (l.uniform1i(this.addr, b), u[0] = b);
    c.setTexture2DArray(a || pj, b);
  }
  function qa(l, a, c) {
    var u = this.cache, b = c.allocateTextureUnit();
    u[0] !== b && (l.uniform1i(this.addr, b), u[0] = b);
    c.setTexture3D(a || qj, b);
  }
  function dd(l, a, c) {
    var u = this.cache, b = c.allocateTextureUnit();
    u[0] !== b && (l.uniform1i(this.addr, b), u[0] = b);
    c.safeSetTextureCube(a || Ih, b);
  }
  function Xd(l, a) {
    var u = this.cache;
    u[0] !== a && (l.uniform1i(this.addr, a), u[0] = a);
  }
  function Qa(l, a) {
    var u = this.cache;
    Na(u, a) || (l.uniform2iv(this.addr, a), Oa(u, a));
  }
  function hc(l, a) {
    var u = this.cache;
    Na(u, a) || (l.uniform3iv(this.addr, a), Oa(u, a));
  }
  function ic(l, a) {
    var u = this.cache;
    Na(u, a) || (l.uniform4iv(this.addr, a), Oa(u, a));
  }
  function Ze(l, a) {
    var u = this.cache;
    u[0] !== a && (l.uniform1ui(this.addr, a), u[0] = a);
  }
  function Yd(l) {
    switch(l) {
      case 5126:
        return qb;
      case 35664:
        return db;
      case 35665:
        return Bc;
      case 35666:
        return rb;
      case 35674:
        return Eb;
      case 35675:
        return Rb;
      case 35676:
        return ba;
      case 5124:
      case 35670:
        return Xd;
      case 35667:
      case 35671:
        return Qa;
      case 35668:
      case 35672:
        return hc;
      case 35669:
      case 35673:
        return ic;
      case 5125:
        return Ze;
      case 35678:
      case 36198:
      case 36298:
      case 36306:
      case 35682:
        return na;
      case 35679:
      case 36299:
      case 36307:
        return qa;
      case 35680:
      case 36300:
      case 36308:
      case 36293:
        return dd;
      case 36289:
      case 36303:
      case 36311:
      case 36292:
        return Ha;
    }
  }
  function Cc(l, a) {
    l.uniform1fv(this.addr, a);
  }
  function Ba(l, a) {
    l.uniform1iv(this.addr, a);
  }
  function ma(l, a) {
    l.uniform2iv(this.addr, a);
  }
  function jc(l, a) {
    l.uniform3iv(this.addr, a);
  }
  function ed(l, a) {
    l.uniform4iv(this.addr, a);
  }
  function Zd(l, a) {
    a = Ra(a, this.size, 2);
    l.uniform2fv(this.addr, a);
  }
  function Sa(l, a) {
    a = Ra(a, this.size, 3);
    l.uniform3fv(this.addr, a);
  }
  function Fb(l, a) {
    a = Ra(a, this.size, 4);
    l.uniform4fv(this.addr, a);
  }
  function $e(l, a) {
    a = Ra(a, this.size, 4);
    l.uniformMatrix2fv(this.addr, !1, a);
  }
  function sb(l, a) {
    a = Ra(a, this.size, 9);
    l.uniformMatrix3fv(this.addr, !1, a);
  }
  function rj(l, a) {
    a = Ra(a, this.size, 16);
    l.uniformMatrix4fv(this.addr, !1, a);
  }
  function sj(l, a, c) {
    var u = a.length, b = kb(c, u);
    l.uniform1iv(this.addr, b);
    for (l = 0; l !== u; ++l) {
      c.safeSetTexture2D(a[l] || Hh, b[l]);
    }
  }
  function tj(l, a, c) {
    var u = a.length, b = kb(c, u);
    l.uniform1iv(this.addr, b);
    for (l = 0; l !== u; ++l) {
      c.safeSetTextureCube(a[l] || Ih, b[l]);
    }
  }
  function uj(l) {
    switch(l) {
      case 5126:
        return Cc;
      case 35664:
        return Zd;
      case 35665:
        return Sa;
      case 35666:
        return Fb;
      case 35674:
        return $e;
      case 35675:
        return sb;
      case 35676:
        return rj;
      case 5124:
      case 35670:
        return Ba;
      case 35667:
      case 35671:
        return ma;
      case 35668:
      case 35672:
        return jc;
      case 35669:
      case 35673:
        return ed;
      case 35678:
      case 36198:
      case 36298:
      case 36306:
      case 35682:
        return sj;
      case 35680:
      case 36300:
      case 36308:
      case 36293:
        return tj;
    }
  }
  function vj(l, a, c) {
    this.id = l;
    this.addr = c;
    this.cache = [];
    this.setValue = Yd(a.type);
  }
  function Jh(l, a, c) {
    this.id = l;
    this.addr = c;
    this.cache = [];
    this.size = a.size;
    this.setValue = uj(a.type);
  }
  function Kh(l) {
    this.id = l;
    this.seq = [];
    this.map = {};
  }
  function kc(l, a) {
    this.seq = [];
    this.map = {};
    for (var u = l.getProgramParameter(a, 35718), c = 0; c < u; ++c) {
      var b = l.getActiveUniform(a, c), e = l.getUniformLocation(a, b.name), d = this, h = b.name, f = h.length;
      for (qg.lastIndex = 0;;) {
        var g = qg.exec(h), m = qg.lastIndex, p = g[1], n = g[3];
        "]" === g[2] && (p |= 0);
        if (void 0 === n || "[" === n && m + 2 === f) {
          h = d;
          b = void 0 === n ? new vj(p, b, e) : new Jh(p, b, e);
          h.seq.push(b);
          h.map[b.id] = b;
          break;
        } else {
          n = d.map[p], void 0 === n && (n = new Kh(p), p = d, d = n, p.seq.push(d), p.map[d.id] = d), d = n;
        }
      }
    }
  }
  function Lh(l, a, c) {
    a = l.createShader(a);
    l.shaderSource(a, c);
    l.compileShader(a);
    return a;
  }
  function Mh(l) {
    switch(l) {
      case 3E3:
        return ["Linear", "( value )"];
      case 3001:
        return ["sRGB", "( value )"];
      case 3002:
        return ["RGBE", "( value )"];
      case 3004:
        return ["RGBM", "( value, 7.0 )"];
      case 3005:
        return ["RGBM", "( value, 16.0 )"];
      case 3006:
        return ["RGBD", "( value, 256.0 )"];
      case 3007:
        return ["Gamma", "( value, float( GAMMA_FACTOR ) )"];
      case 3003:
        return ["LogLuv", "( value )"];
      default:
        throw Error("unsupported encoding: " + l);
    }
  }
  function Nh(l, a, c) {
    var u = l.getShaderParameter(a, 35713), b = l.getShaderInfoLog(a).trim();
    if (u && "" === b) {
      return "";
    }
    l = l.getShaderSource(a).split("\n");
    for (a = 0; a < l.length; a++) {
      l[a] = a + 1 + ": " + l[a];
    }
    l = l.join("\n");
    return "THREE.WebGLShader: gl.getShaderInfoLog() " + c + "\n" + b + l;
  }
  function $d(l, a) {
    a = Mh(a);
    return "vec4 " + l + "( vec4 value ) { return " + a[0] + "ToLinear" + a[1] + "; }";
  }
  function wj(l, a) {
    a = Mh(a);
    return "vec4 " + l + "( vec4 value ) { return LinearTo" + a[0] + a[1] + "; }";
  }
  function xj(l, a) {
    switch(a) {
      case 1:
        a = "Linear";
        break;
      case 2:
        a = "Reinhard";
        break;
      case 3:
        a = "Uncharted2";
        break;
      case 4:
        a = "OptimizedCineon";
        break;
      case 5:
        a = "ACESFilmic";
        break;
      default:
        throw Error("unsupported toneMapping: " + a);
    }
    return "vec3 " + l + "( vec3 color ) { return " + a + "ToneMapping( color ); }";
  }
  function yj(l) {
    var a = [], c;
    for (c in l) {
      var b = l[c];
      !1 !== b && a.push("#define " + c + " " + b);
    }
    return a.join("\n");
  }
  function ae(l) {
    return "" !== l;
  }
  function Oh(l, a) {
    return l.replace(/NUM_DIR_LIGHTS/g, a.numDirLights).replace(/NUM_SPOT_LIGHTS/g, a.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g, a.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, a.numPointLights).replace(/NUM_HEMI_LIGHTS/g, a.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, a.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g, a.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, a.numPointLightShadows);
  }
  function Ph(l, a) {
    return l.replace(/NUM_CLIPPING_PLANES/g, a.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, a.numClippingPlanes - a.numClipIntersection);
  }
  function rg(l, a) {
    l = pa[a];
    if (void 0 === l) {
      throw Error("Can not resolve #include <" + a + ">");
    }
    return l.replace(sg, rg);
  }
  function Qh(l, a, c, b) {
    console.warn("WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.");
    return tg(l, a, c, b);
  }
  function tg(l, a, c, b) {
    l = "";
    for (a = parseInt(a); a < parseInt(c); a++) {
      l += b.replace(/\[ i \]/g, "[ " + a + " ]").replace(/UNROLLED_LOOP_INDEX/g, a);
    }
    return l;
  }
  function Rh(l) {
    var a = "precision " + l.precision + " float;\nprecision " + l.precision + " int;";
    "highp" === l.precision ? a += "\n#define HIGH_PRECISION" : "mediump" === l.precision ? a += "\n#define MEDIUM_PRECISION" : "lowp" === l.precision && (a += "\n#define LOW_PRECISION");
    return a;
  }
  function zj(l) {
    var a = "SHADOWMAP_TYPE_BASIC";
    1 === l.shadowMapType ? a = "SHADOWMAP_TYPE_PCF" : 2 === l.shadowMapType ? a = "SHADOWMAP_TYPE_PCF_SOFT" : 3 === l.shadowMapType && (a = "SHADOWMAP_TYPE_VSM");
    return a;
  }
  function Aj(l) {
    var a = "ENVMAP_TYPE_CUBE";
    if (l.envMap) {
      switch(l.envMapMode) {
        case 301:
        case 302:
          a = "ENVMAP_TYPE_CUBE";
          break;
        case 306:
        case 307:
          a = "ENVMAP_TYPE_CUBE_UV";
          break;
        case 303:
        case 304:
          a = "ENVMAP_TYPE_EQUIREC";
          break;
        case 305:
          a = "ENVMAP_TYPE_SPHERE";
      }
    }
    return a;
  }
  function Bj(l) {
    var a = "ENVMAP_MODE_REFLECTION";
    if (l.envMap) {
      switch(l.envMapMode) {
        case 302:
        case 304:
          a = "ENVMAP_MODE_REFRACTION";
      }
    }
    return a;
  }
  function Cj(l) {
    var a = "ENVMAP_BLENDING_NONE";
    if (l.envMap) {
      switch(l.combine) {
        case 0:
          a = "ENVMAP_BLENDING_MULTIPLY";
          break;
        case 1:
          a = "ENVMAP_BLENDING_MIX";
          break;
        case 2:
          a = "ENVMAP_BLENDING_ADD";
      }
    }
    return a;
  }
  function Dj(l, a, c) {
    var u = l.getContext(), b = c.defines, e = c.vertexShader, d = c.fragmentShader, h = zj(c), f = Aj(c), g = Bj(c), m = Cj(c), p = 0 < l.gammaFactor ? l.gammaFactor : 1, G = c.isWebGL2 ? "" : [c.extensionDerivatives || c.envMapCubeUV || c.bumpMap || c.tangentSpaceNormalMap || c.clearcoatNormalMap || c.flatShading || "physical" === c.shaderID ? "#extension GL_OES_standard_derivatives : enable" : "", (c.extensionFragDepth || c.logarithmicDepthBuffer) && c.rendererExtensionFragDepth ? "#extension GL_EXT_frag_depth : enable" : 
    "", c.extensionDrawBuffers && c.rendererExtensionDrawBuffers ? "#extension GL_EXT_draw_buffers : require" : "", (c.extensionShaderTextureLOD || c.envMap) && c.rendererExtensionShaderTextureLod ? "#extension GL_EXT_shader_texture_lod : enable" : ""].filter(ae).join("\n"), n = yj(b), k = u.createProgram();
    c.isRawShaderMaterial ? (b = [n].filter(ae).join("\n"), 0 < b.length && (b += "\n"), h = [G, n].filter(ae).join("\n"), 0 < h.length && (h += "\n")) : (b = [Rh(c), "#define SHADER_NAME " + c.shaderName, n, c.instancing ? "#define USE_INSTANCING" : "", c.supportsVertexTextures ? "#define VERTEX_TEXTURES" : "", "#define GAMMA_FACTOR " + p, "#define MAX_BONES " + c.maxBones, c.useFog && c.fog ? "#define USE_FOG" : "", c.useFog && c.fogExp2 ? "#define FOG_EXP2" : "", c.map ? "#define USE_MAP" : "", 
    c.envMap ? "#define USE_ENVMAP" : "", c.envMap ? "#define " + g : "", c.lightMap ? "#define USE_LIGHTMAP" : "", c.aoMap ? "#define USE_AOMAP" : "", c.emissiveMap ? "#define USE_EMISSIVEMAP" : "", c.bumpMap ? "#define USE_BUMPMAP" : "", c.normalMap ? "#define USE_NORMALMAP" : "", c.normalMap && c.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "", c.normalMap && c.tangentSpaceNormalMap ? "#define TANGENTSPACE_NORMALMAP" : "", c.clearcoatMap ? "#define USE_CLEARCOATMAP" : "", c.clearcoatRoughnessMap ? 
    "#define USE_CLEARCOAT_ROUGHNESSMAP" : "", c.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "", c.displacementMap && c.supportsVertexTextures ? "#define USE_DISPLACEMENTMAP" : "", c.specularMap ? "#define USE_SPECULARMAP" : "", c.roughnessMap ? "#define USE_ROUGHNESSMAP" : "", c.metalnessMap ? "#define USE_METALNESSMAP" : "", c.alphaMap ? "#define USE_ALPHAMAP" : "", c.vertexTangents ? "#define USE_TANGENT" : "", c.vertexColors ? "#define USE_COLOR" : "", c.vertexUvs ? "#define USE_UV" : 
    "", c.uvsVertexOnly ? "#define UVS_VERTEX_ONLY" : "", c.flatShading ? "#define FLAT_SHADED" : "", c.skinning ? "#define USE_SKINNING" : "", c.useVertexTexture ? "#define BONE_TEXTURE" : "", c.morphTargets ? "#define USE_MORPHTARGETS" : "", c.morphNormals && !1 === c.flatShading ? "#define USE_MORPHNORMALS" : "", c.doubleSided ? "#define DOUBLE_SIDED" : "", c.flipSided ? "#define FLIP_SIDED" : "", c.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", c.shadowMapEnabled ? "#define " + h : "", c.sizeAttenuation ? 
    "#define USE_SIZEATTENUATION" : "", c.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", c.logarithmicDepthBuffer && c.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "", "uniform mat4 modelMatrix;", "uniform mat4 modelViewMatrix;", "uniform mat4 projectionMatrix;", "uniform mat4 viewMatrix;", "uniform mat3 normalMatrix;", "uniform vec3 cameraPosition;", "uniform bool isOrthographic;", "#ifdef USE_INSTANCING", " attribute mat4 instanceMatrix;", "#endif", "attribute vec3 position;", 
    "attribute vec3 normal;", "attribute vec2 uv;", "#ifdef USE_TANGENT", "\tattribute vec4 tangent;", "#endif", "#ifdef USE_COLOR", "\tattribute vec3 color;", "#endif", "#ifdef USE_MORPHTARGETS", "\tattribute vec3 morphTarget0;", "\tattribute vec3 morphTarget1;", "\tattribute vec3 morphTarget2;", "\tattribute vec3 morphTarget3;", "\t#ifdef USE_MORPHNORMALS", "\t\tattribute vec3 morphNormal0;", "\t\tattribute vec3 morphNormal1;", "\t\tattribute vec3 morphNormal2;", "\t\tattribute vec3 morphNormal3;", 
    "\t#else", "\t\tattribute vec3 morphTarget4;", "\t\tattribute vec3 morphTarget5;", "\t\tattribute vec3 morphTarget6;", "\t\tattribute vec3 morphTarget7;", "\t#endif", "#endif", "#ifdef USE_SKINNING", "\tattribute vec4 skinIndex;", "\tattribute vec4 skinWeight;", "#endif", "\n"].filter(ae).join("\n"), h = [G, Rh(c), "#define SHADER_NAME " + c.shaderName, n, c.alphaTest ? "#define ALPHATEST " + c.alphaTest + (c.alphaTest % 1 ? "" : ".0") : "", "#define GAMMA_FACTOR " + p, c.useFog && c.fog ? "#define USE_FOG" : 
    "", c.useFog && c.fogExp2 ? "#define FOG_EXP2" : "", c.map ? "#define USE_MAP" : "", c.matcap ? "#define USE_MATCAP" : "", c.envMap ? "#define USE_ENVMAP" : "", c.envMap ? "#define " + f : "", c.envMap ? "#define " + g : "", c.envMap ? "#define " + m : "", c.lightMap ? "#define USE_LIGHTMAP" : "", c.aoMap ? "#define USE_AOMAP" : "", c.emissiveMap ? "#define USE_EMISSIVEMAP" : "", c.bumpMap ? "#define USE_BUMPMAP" : "", c.normalMap ? "#define USE_NORMALMAP" : "", c.normalMap && c.objectSpaceNormalMap ? 
    "#define OBJECTSPACE_NORMALMAP" : "", c.normalMap && c.tangentSpaceNormalMap ? "#define TANGENTSPACE_NORMALMAP" : "", c.clearcoatMap ? "#define USE_CLEARCOATMAP" : "", c.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "", c.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "", c.specularMap ? "#define USE_SPECULARMAP" : "", c.roughnessMap ? "#define USE_ROUGHNESSMAP" : "", c.metalnessMap ? "#define USE_METALNESSMAP" : "", c.alphaMap ? "#define USE_ALPHAMAP" : "", c.sheen ? 
    "#define USE_SHEEN" : "", c.vertexTangents ? "#define USE_TANGENT" : "", c.vertexColors ? "#define USE_COLOR" : "", c.vertexUvs ? "#define USE_UV" : "", c.uvsVertexOnly ? "#define UVS_VERTEX_ONLY" : "", c.gradientMap ? "#define USE_GRADIENTMAP" : "", c.flatShading ? "#define FLAT_SHADED" : "", c.doubleSided ? "#define DOUBLE_SIDED" : "", c.flipSided ? "#define FLIP_SIDED" : "", c.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", c.shadowMapEnabled ? "#define " + h : "", c.premultipliedAlpha ? 
    "#define PREMULTIPLIED_ALPHA" : "", c.physicallyCorrectLights ? "#define PHYSICALLY_CORRECT_LIGHTS" : "", c.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", c.logarithmicDepthBuffer && c.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "", (c.extensionShaderTextureLOD || c.envMap) && c.rendererExtensionShaderTextureLod ? "#define TEXTURE_LOD_EXT" : "", "uniform mat4 viewMatrix;", "uniform vec3 cameraPosition;", "uniform bool isOrthographic;", 0 !== c.toneMapping ? "#define TONE_MAPPING" : 
    "", 0 !== c.toneMapping ? pa.tonemapping_pars_fragment : "", 0 !== c.toneMapping ? xj("toneMapping", c.toneMapping) : "", c.dithering ? "#define DITHERING" : "", c.outputEncoding || c.mapEncoding || c.matcapEncoding || c.envMapEncoding || c.emissiveMapEncoding || c.lightMapEncoding ? pa.encodings_pars_fragment : "", c.mapEncoding ? $d("mapTexelToLinear", c.mapEncoding) : "", c.matcapEncoding ? $d("matcapTexelToLinear", c.matcapEncoding) : "", c.envMapEncoding ? $d("envMapTexelToLinear", c.envMapEncoding) : 
    "", c.emissiveMapEncoding ? $d("emissiveMapTexelToLinear", c.emissiveMapEncoding) : "", c.lightMapEncoding ? $d("lightMapTexelToLinear", c.lightMapEncoding) : "", c.outputEncoding ? wj("linearToOutputTexel", c.outputEncoding) : "", c.depthPacking ? "#define DEPTH_PACKING " + c.depthPacking : "", "\n"].filter(ae).join("\n"));
    e = e.replace(sg, rg);
    e = Oh(e, c);
    e = Ph(e, c);
    d = d.replace(sg, rg);
    d = Oh(d, c);
    d = Ph(d, c);
    e = e.replace(Sh, tg).replace(Th, Qh);
    d = d.replace(Sh, tg).replace(Th, Qh);
    c.isWebGL2 && !c.isRawShaderMaterial && (f = !1, g = /^\s*#version\s+300\s+es\s*\n/, c.isShaderMaterial && null !== e.match(g) && null !== d.match(g) && (f = !0, e = e.replace(g, ""), d = d.replace(g, "")), b = "#version 300 es\n\n#define attribute in\n#define varying out\n#define texture2D texture\n" + b, h = ["#version 300 es\n\n#define varying in", f ? "" : "out highp vec4 pc_fragColor;", f ? "" : "#define gl_FragColor pc_fragColor", "#define gl_FragDepthEXT gl_FragDepth\n#define texture2D texture\n#define textureCube texture\n#define texture2DProj textureProj\n#define texture2DLodEXT textureLod\n#define texture2DProjLodEXT textureProjLod\n#define textureCubeLodEXT textureLod\n#define texture2DGradEXT textureGrad\n#define texture2DProjGradEXT textureProjGrad\n#define textureCubeGradEXT textureGrad"].join("\n") + 
    "\n" + h);
    d = h + d;
    e = Lh(u, 35633, b + e);
    d = Lh(u, 35632, d);
    u.attachShader(k, e);
    u.attachShader(k, d);
    void 0 !== c.index0AttributeName ? u.bindAttribLocation(k, 0, c.index0AttributeName) : !0 === c.morphTargets && u.bindAttribLocation(k, 0, "position");
    u.linkProgram(k);
    if (l.debug.checkShaderErrors) {
      l = u.getProgramInfoLog(k).trim();
      f = u.getShaderInfoLog(e).trim();
      g = u.getShaderInfoLog(d).trim();
      p = m = !0;
      if (!1 === u.getProgramParameter(k, 35714)) {
        m = !1, G = Nh(u, e, "vertex"), n = Nh(u, d, "fragment"), console.error("THREE.WebGLProgram: shader error: ", u.getError(), "35715", u.getProgramParameter(k, 35715), "gl.getProgramInfoLog", l, G, n);
      } else {
        if ("" !== l) {
          console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()", l);
        } else {
          if ("" === f || "" === g) {
            p = !1;
          }
        }
      }
      p && (this.diagnostics = {runnable:m, programLog:l, vertexShader:{log:f, prefix:b}, fragmentShader:{log:g, prefix:h}});
    }
    u.detachShader(k, e);
    u.detachShader(k, d);
    u.deleteShader(e);
    u.deleteShader(d);
    var q;
    this.getUniforms = function() {
      void 0 === q && (q = new kc(u, k));
      return q;
    };
    var r;
    this.getAttributes = function() {
      if (void 0 === r) {
        for (var l = {}, a = u.getProgramParameter(k, 35721), c = 0; c < a; c++) {
          var b = u.getActiveAttrib(k, c).name;
          l[b] = u.getAttribLocation(k, b);
        }
        r = l;
      }
      return r;
    };
    this.destroy = function() {
      u.deleteProgram(k);
      this.program = void 0;
    };
    this.name = c.shaderName;
    this.id = Ej++;
    this.cacheKey = a;
    this.usedTimes = 1;
    this.program = k;
    this.vertexShader = e;
    this.fragmentShader = d;
    return this;
  }
  function Fj(l, a, c) {
    function u(l) {
      if (l) {
        l.isTexture ? a = l.encoding : l.isWebGLRenderTarget && (console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."), a = l.texture.encoding);
      } else {
        var a = 3E3;
      }
      return a;
    }
    var b = [], e = c.isWebGL2, d = c.logarithmicDepthBuffer, h = c.floatVertexTextures, f = c.precision, g = c.maxVertexUniforms, m = c.vertexTextures, p = {MeshDepthMaterial:"depth", MeshDistanceMaterial:"distanceRGBA", MeshNormalMaterial:"normal", MeshBasicMaterial:"basic", MeshLambertMaterial:"lambert", MeshPhongMaterial:"phong", MeshToonMaterial:"toon", MeshStandardMaterial:"physical", MeshPhysicalMaterial:"physical", MeshMatcapMaterial:"matcap", LineBasicMaterial:"basic", LineDashedMaterial:"dashed", 
    PointsMaterial:"points", ShadowMaterial:"shadow", SpriteMaterial:"sprite"}, G = "precision isWebGL2 supportsVertexTextures outputEncoding instancing map mapEncoding matcap matcapEncoding envMap envMapMode envMapEncoding envMapCubeUV lightMap lightMapEncoding aoMap emissiveMap emissiveMapEncoding bumpMap normalMap objectSpaceNormalMap tangentSpaceNormalMap clearcoatMap clearcoatRoughnessMap clearcoatNormalMap displacementMap specularMap roughnessMap metalnessMap gradientMap alphaMap combine vertexColors vertexTangents vertexUvs uvsVertexOnly fog useFog fogExp2 flatShading sizeAttenuation logarithmicDepthBuffer skinning maxBones useVertexTexture morphTargets morphNormals maxMorphTargets maxMorphNormals premultipliedAlpha numDirLights numPointLights numSpotLights numHemiLights numRectAreaLights numDirLightShadows numPointLightShadows numSpotLightShadows shadowMapEnabled shadowMapType toneMapping physicallyCorrectLights alphaTest doubleSided flipSided numClippingPlanes numClipIntersection depthPacking dithering sheen".split(" ");
    this.getParameters = function(b, G, n, k, q, r, t) {
      var v = k.fog;
      k = b.isMeshStandardMaterial ? k.environment : null;
      k = b.envMap || k;
      var Y = p[b.type];
      if (t.isSkinnedMesh) {
        var z = t.skeleton.bones;
        if (h) {
          z = 1024;
        } else {
          var w = Math.min(Math.floor((g - 20) / 4), z.length);
          w < z.length ? (console.warn("THREE.WebGLRenderer: Skeleton has " + z.length + " bones. This GPU supports " + w + "."), z = 0) : z = w;
        }
      } else {
        z = 0;
      }
      null !== b.precision && (f = c.getMaxPrecision(b.precision), f !== b.precision && console.warn("THREE.WebGLProgram.getParameters:", b.precision, "not supported, using", f, "instead."));
      Y ? (w = Bb[Y], w = {name:b.type, uniforms:Uh.clone(w.uniforms), vertexShader:w.vertexShader, fragmentShader:w.fragmentShader}) : w = {name:b.type, uniforms:b.uniforms, vertexShader:b.vertexShader, fragmentShader:b.fragmentShader};
      b.onBeforeCompile(w, l);
      var y = l.getRenderTarget();
      return {isWebGL2:e, shaderID:Y, shaderName:w.name, uniforms:w.uniforms, vertexShader:w.vertexShader, fragmentShader:w.fragmentShader, defines:b.defines, isRawShaderMaterial:b.isRawShaderMaterial, isShaderMaterial:b.isShaderMaterial, precision:f, instancing:!0 === t.isInstancedMesh, supportsVertexTextures:m, outputEncoding:null !== y ? u(y.texture) : l.outputEncoding, map:!!b.map, mapEncoding:u(b.map), matcap:!!b.matcap, matcapEncoding:u(b.matcap), envMap:!!k, envMapMode:k && k.mapping, envMapEncoding:u(k), 
      envMapCubeUV:!!k && (306 === k.mapping || 307 === k.mapping), lightMap:!!b.lightMap, lightMapEncoding:u(b.lightMap), aoMap:!!b.aoMap, emissiveMap:!!b.emissiveMap, emissiveMapEncoding:u(b.emissiveMap), bumpMap:!!b.bumpMap, normalMap:!!b.normalMap, objectSpaceNormalMap:1 === b.normalMapType, tangentSpaceNormalMap:0 === b.normalMapType, clearcoatMap:!!b.clearcoatMap, clearcoatRoughnessMap:!!b.clearcoatRoughnessMap, clearcoatNormalMap:!!b.clearcoatNormalMap, displacementMap:!!b.displacementMap, 
      roughnessMap:!!b.roughnessMap, metalnessMap:!!b.metalnessMap, specularMap:!!b.specularMap, alphaMap:!!b.alphaMap, gradientMap:!!b.gradientMap, sheen:!!b.sheen, combine:b.combine, vertexTangents:b.normalMap && b.vertexTangents, vertexColors:b.vertexColors, vertexUvs:!!b.map || !!b.bumpMap || !!b.normalMap || !!b.specularMap || !!b.alphaMap || !!b.emissiveMap || !!b.roughnessMap || !!b.metalnessMap || !!b.clearcoatMap || !!b.clearcoatRoughnessMap || !!b.clearcoatNormalMap || !!b.displacementMap, 
      uvsVertexOnly:!(b.map || b.bumpMap || b.normalMap || b.specularMap || b.alphaMap || b.emissiveMap || b.roughnessMap || b.metalnessMap || b.clearcoatNormalMap) && !!b.displacementMap, fog:!!v, useFog:b.fog, fogExp2:v && v.isFogExp2, flatShading:b.flatShading, sizeAttenuation:b.sizeAttenuation, logarithmicDepthBuffer:d, skinning:b.skinning && 0 < z, maxBones:z, useVertexTexture:h, morphTargets:b.morphTargets, morphNormals:b.morphNormals, maxMorphTargets:l.maxMorphTargets, maxMorphNormals:l.maxMorphNormals, 
      numDirLights:G.directional.length, numPointLights:G.point.length, numSpotLights:G.spot.length, numRectAreaLights:G.rectArea.length, numHemiLights:G.hemi.length, numDirLightShadows:G.directionalShadowMap.length, numPointLightShadows:G.pointShadowMap.length, numSpotLightShadows:G.spotShadowMap.length, numClippingPlanes:q, numClipIntersection:r, dithering:b.dithering, shadowMapEnabled:l.shadowMap.enabled && 0 < n.length, shadowMapType:l.shadowMap.type, toneMapping:b.toneMapped ? l.toneMapping : 
      0, physicallyCorrectLights:l.physicallyCorrectLights, premultipliedAlpha:b.premultipliedAlpha, alphaTest:b.alphaTest, doubleSided:2 === b.side, flipSided:1 === b.side, depthPacking:void 0 !== b.depthPacking ? b.depthPacking : !1, index0AttributeName:b.index0AttributeName, extensionDerivatives:b.extensions && b.extensions.derivatives, extensionFragDepth:b.extensions && b.extensions.fragDepth, extensionDrawBuffers:b.extensions && b.extensions.drawBuffers, extensionShaderTextureLOD:b.extensions && 
      b.extensions.shaderTextureLOD, rendererExtensionFragDepth:e || null !== a.get("EXT_frag_depth"), rendererExtensionDrawBuffers:e || null !== a.get("WEBGL_draw_buffers"), rendererExtensionShaderTextureLod:e || null !== a.get("EXT_shader_texture_lod"), onBeforeCompile:b.onBeforeCompile};
    };
    this.getProgramCacheKey = function(a) {
      var c = [];
      a.shaderID ? c.push(a.shaderID) : (c.push(a.fragmentShader), c.push(a.vertexShader));
      if (void 0 !== a.defines) {
        for (var u in a.defines) {
          c.push(u), c.push(a.defines[u]);
        }
      }
      if (void 0 === a.isRawShaderMaterial) {
        for (u = 0; u < G.length; u++) {
          c.push(a[G[u]]);
        }
        c.push(l.outputEncoding);
        c.push(l.gammaFactor);
      }
      c.push(a.onBeforeCompile.toString());
      return c.join();
    };
    this.acquireProgram = function(a, c) {
      for (var u, e = 0, d = b.length; e < d; e++) {
        var h = b[e];
        if (h.cacheKey === c) {
          u = h;
          ++u.usedTimes;
          break;
        }
      }
      void 0 === u && (u = new Dj(l, c, a), b.push(u));
      return u;
    };
    this.releaseProgram = function(l) {
      if (0 === --l.usedTimes) {
        var a = b.indexOf(l);
        b[a] = b[b.length - 1];
        b.pop();
        l.destroy();
      }
    };
    this.programs = b;
  }
  function Gj() {
    var l = new WeakMap;
    return {get:function(a) {
      var c = l.get(a);
      void 0 === c && (c = {}, l.set(a, c));
      return c;
    }, remove:function(a) {
      l.delete(a);
    }, update:function(a, c, b) {
      l.get(a)[c] = b;
    }, dispose:function() {
      l = new WeakMap;
    }};
  }
  function Hj(l, a) {
    return l.groupOrder !== a.groupOrder ? l.groupOrder - a.groupOrder : l.renderOrder !== a.renderOrder ? l.renderOrder - a.renderOrder : l.program !== a.program ? l.program.id - a.program.id : l.material.id !== a.material.id ? l.material.id - a.material.id : l.z !== a.z ? l.z - a.z : l.id - a.id;
  }
  function Ij(l, a) {
    return l.groupOrder !== a.groupOrder ? l.groupOrder - a.groupOrder : l.renderOrder !== a.renderOrder ? l.renderOrder - a.renderOrder : l.z !== a.z ? a.z - l.z : l.id - a.id;
  }
  function Vh() {
    function l(l, u, b, e, h, f) {
      var g = a[c];
      void 0 === g ? (g = {id:l.id, object:l, geometry:u, material:b, program:b.program || d, groupOrder:e, renderOrder:l.renderOrder, z:h, group:f}, a[c] = g) : (g.id = l.id, g.object = l, g.geometry = u, g.material = b, g.program = b.program || d, g.groupOrder = e, g.renderOrder = l.renderOrder, g.z = h, g.group = f);
      c++;
      return g;
    }
    var a = [], c = 0, b = [], e = [], d = {id:-1};
    return {opaque:b, transparent:e, init:function() {
      c = 0;
      b.length = 0;
      e.length = 0;
    }, push:function(a, c, u, d, h, f) {
      a = l(a, c, u, d, h, f);
      (!0 === u.transparent ? e : b).push(a);
    }, unshift:function(a, c, u, d, h, f) {
      a = l(a, c, u, d, h, f);
      (!0 === u.transparent ? e : b).unshift(a);
    }, finish:function() {
      for (var l = c, u = a.length; l < u; l++) {
        var b = a[l];
        if (null === b.id) {
          break;
        }
        b.id = null;
        b.object = null;
        b.geometry = null;
        b.material = null;
        b.program = null;
        b.group = null;
      }
    }, sort:function(l, a) {
      1 < b.length && b.sort(l || Hj);
      1 < e.length && e.sort(a || Ij);
    }};
  }
  function Jj() {
    function l(c) {
      c = c.target;
      c.removeEventListener("dispose", l);
      a.delete(c);
    }
    var a = new WeakMap;
    return {get:function(c, u) {
      var b = a.get(c);
      if (void 0 === b) {
        var e = new Vh;
        a.set(c, new WeakMap);
        a.get(c).set(u, e);
        c.addEventListener("dispose", l);
      } else {
        e = b.get(u), void 0 === e && (e = new Vh, b.set(u, e));
      }
      return e;
    }, dispose:function() {
      a = new WeakMap;
    }};
  }
  function Kj() {
    var l = {};
    return {get:function(a) {
      if (void 0 !== l[a.id]) {
        return l[a.id];
      }
      switch(a.type) {
        case "DirectionalLight":
          var c = {direction:new m, color:new A};
          break;
        case "SpotLight":
          c = {position:new m, direction:new m, color:new A, distance:0, coneCos:0, penumbraCos:0, decay:0};
          break;
        case "PointLight":
          c = {position:new m, color:new A, distance:0, decay:0};
          break;
        case "HemisphereLight":
          c = {direction:new m, skyColor:new A, groundColor:new A};
          break;
        case "RectAreaLight":
          c = {color:new A, position:new m, halfWidth:new m, halfHeight:new m};
      }
      return l[a.id] = c;
    }};
  }
  function Lj() {
    var l = {};
    return {get:function(a) {
      if (void 0 !== l[a.id]) {
        return l[a.id];
      }
      switch(a.type) {
        case "DirectionalLight":
          var c = {shadowBias:0, shadowRadius:1, shadowMapSize:new k};
          break;
        case "SpotLight":
          c = {shadowBias:0, shadowRadius:1, shadowMapSize:new k};
          break;
        case "PointLight":
          c = {shadowBias:0, shadowRadius:1, shadowMapSize:new k, shadowCameraNear:1, shadowCameraFar:1E3};
      }
      return l[a.id] = c;
    }};
  }
  function Mj(l, a) {
    return (a.castShadow ? 1 : 0) - (l.castShadow ? 1 : 0);
  }
  function Nj() {
    for (var l = new Kj, a = Lj(), c = {version:0, hash:{directionalLength:-1, pointLength:-1, spotLength:-1, rectAreaLength:-1, hemiLength:-1, numDirectionalShadows:-1, numPointShadows:-1, numSpotShadows:-1}, ambient:[0, 0, 0], probe:[], directional:[], directionalShadow:[], directionalShadowMap:[], directionalShadowMatrix:[], spot:[], spotShadow:[], spotShadowMap:[], spotShadowMatrix:[], rectArea:[], point:[], pointShadow:[], pointShadowMap:[], pointShadowMatrix:[], hemi:[]}, b = 0; 9 > b; b++) {
      c.probe.push(new m);
    }
    var e = new m, d = new n, h = new n;
    return {setup:function(u, b, f) {
      for (var g = 0, m = 0, p = 0, G = 0; 9 > G; G++) {
        c.probe[G].set(0, 0, 0);
      }
      var n = b = 0, k = 0, q = 0, r = 0, t = 0, v = 0, Y = 0;
      f = f.matrixWorldInverse;
      u.sort(Mj);
      G = 0;
      for (var z = u.length; G < z; G++) {
        var w = u[G], y = w.color, ca = w.intensity, ba = w.distance, x = w.shadow && w.shadow.map ? w.shadow.map.texture : null;
        if (w.isAmbientLight) {
          g += y.r * ca, m += y.g * ca, p += y.b * ca;
        } else {
          if (w.isLightProbe) {
            for (x = 0; 9 > x; x++) {
              c.probe[x].addScaledVector(w.sh.coefficients[x], ca);
            }
          } else {
            if (w.isDirectionalLight) {
              var ja = l.get(w);
              ja.color.copy(w.color).multiplyScalar(w.intensity);
              ja.direction.setFromMatrixPosition(w.matrixWorld);
              e.setFromMatrixPosition(w.target.matrixWorld);
              ja.direction.sub(e);
              ja.direction.transformDirection(f);
              w.castShadow && (ca = w.shadow, y = a.get(w), y.shadowBias = ca.bias, y.shadowRadius = ca.radius, y.shadowMapSize = ca.mapSize, c.directionalShadow[b] = y, c.directionalShadowMap[b] = x, c.directionalShadowMatrix[b] = w.shadow.matrix, t++);
              c.directional[b] = ja;
              b++;
            } else {
              w.isSpotLight ? (ja = l.get(w), ja.position.setFromMatrixPosition(w.matrixWorld), ja.position.applyMatrix4(f), ja.color.copy(y).multiplyScalar(ca), ja.distance = ba, ja.direction.setFromMatrixPosition(w.matrixWorld), e.setFromMatrixPosition(w.target.matrixWorld), ja.direction.sub(e), ja.direction.transformDirection(f), ja.coneCos = Math.cos(w.angle), ja.penumbraCos = Math.cos(w.angle * (1 - w.penumbra)), ja.decay = w.decay, w.castShadow && (ca = w.shadow, y = a.get(w), y.shadowBias = 
              ca.bias, y.shadowRadius = ca.radius, y.shadowMapSize = ca.mapSize, c.spotShadow[k] = y, c.spotShadowMap[k] = x, c.spotShadowMatrix[k] = w.shadow.matrix, Y++), c.spot[k] = ja, k++) : w.isRectAreaLight ? (ja = l.get(w), ja.color.copy(y).multiplyScalar(ca), ja.position.setFromMatrixPosition(w.matrixWorld), ja.position.applyMatrix4(f), h.identity(), d.copy(w.matrixWorld), d.premultiply(f), h.extractRotation(d), ja.halfWidth.set(.5 * w.width, 0, 0), ja.halfHeight.set(0, .5 * w.height, 0), 
              ja.halfWidth.applyMatrix4(h), ja.halfHeight.applyMatrix4(h), c.rectArea[q] = ja, q++) : w.isPointLight ? (ja = l.get(w), ja.position.setFromMatrixPosition(w.matrixWorld), ja.position.applyMatrix4(f), ja.color.copy(w.color).multiplyScalar(w.intensity), ja.distance = w.distance, ja.decay = w.decay, w.castShadow && (ca = w.shadow, y = a.get(w), y.shadowBias = ca.bias, y.shadowRadius = ca.radius, y.shadowMapSize = ca.mapSize, y.shadowCameraNear = ca.camera.near, y.shadowCameraFar = ca.camera.far, 
              c.pointShadow[n] = y, c.pointShadowMap[n] = x, c.pointShadowMatrix[n] = w.shadow.matrix, v++), c.point[n] = ja, n++) : w.isHemisphereLight && (ja = l.get(w), ja.direction.setFromMatrixPosition(w.matrixWorld), ja.direction.transformDirection(f), ja.direction.normalize(), ja.skyColor.copy(w.color).multiplyScalar(ca), ja.groundColor.copy(w.groundColor).multiplyScalar(ca), c.hemi[r] = ja, r++);
            }
          }
        }
      }
      c.ambient[0] = g;
      c.ambient[1] = m;
      c.ambient[2] = p;
      u = c.hash;
      if (u.directionalLength !== b || u.pointLength !== n || u.spotLength !== k || u.rectAreaLength !== q || u.hemiLength !== r || u.numDirectionalShadows !== t || u.numPointShadows !== v || u.numSpotShadows !== Y) {
        c.directional.length = b, c.spot.length = k, c.rectArea.length = q, c.point.length = n, c.hemi.length = r, c.directionalShadow.length = t, c.directionalShadowMap.length = t, c.pointShadow.length = v, c.pointShadowMap.length = v, c.spotShadow.length = Y, c.spotShadowMap.length = Y, c.directionalShadowMatrix.length = t, c.pointShadowMatrix.length = v, c.spotShadowMatrix.length = Y, u.directionalLength = b, u.pointLength = n, u.spotLength = k, u.rectAreaLength = q, u.hemiLength = r, u.numDirectionalShadows = 
        t, u.numPointShadows = v, u.numSpotShadows = Y, c.version = Oj++;
      }
    }, state:c};
  }
  function Wh() {
    var l = new Nj, a = [], c = [];
    return {init:function() {
      a.length = 0;
      c.length = 0;
    }, state:{lightsArray:a, shadowsArray:c, lights:l}, setupLights:function(u) {
      l.setup(a, c, u);
    }, pushLight:function(l) {
      a.push(l);
    }, pushShadow:function(l) {
      c.push(l);
    }};
  }
  function Pj() {
    function l(c) {
      c = c.target;
      c.removeEventListener("dispose", l);
      a.delete(c);
    }
    var a = new WeakMap;
    return {get:function(c, u) {
      if (!1 === a.has(c)) {
        var b = new Wh;
        a.set(c, new WeakMap);
        a.get(c).set(u, b);
        c.addEventListener("dispose", l);
      } else {
        !1 === a.get(c).has(u) ? (b = new Wh, a.get(c).set(u, b)) : b = a.get(c).get(u);
      }
      return b;
    }, dispose:function() {
      a = new WeakMap;
    }};
  }
  function lc(l) {
    I.call(this);
    this.type = "MeshDepthMaterial";
    this.depthPacking = 3200;
    this.morphTargets = this.skinning = !1;
    this.displacementMap = this.alphaMap = this.map = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.wireframe = !1;
    this.wireframeLinewidth = 1;
    this.fog = !1;
    this.setValues(l);
  }
  function mc(l) {
    I.call(this);
    this.type = "MeshDistanceMaterial";
    this.referencePosition = new m;
    this.nearDistance = 1;
    this.farDistance = 1E3;
    this.morphTargets = this.skinning = !1;
    this.displacementMap = this.alphaMap = this.map = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.fog = !1;
    this.setValues(l);
  }
  function Xh(l, a, c) {
    function u(l, a, c) {
      c = l << 0 | a << 1 | c << 2;
      var u = G[c];
      void 0 === u && (u = new lc({depthPacking:3201, morphTargets:l, skinning:a}), G[c] = u);
      return u;
    }
    function b(l, a, c) {
      c = l << 0 | a << 1 | c << 2;
      var u = q[c];
      void 0 === u && (u = new mc({morphTargets:l, skinning:a}), q[c] = u);
      return u;
    }
    function d(a, c, e, d, h, f, g) {
      var m = u, p = a.customDepthMaterial;
      !0 === d.isPointLight && (m = b, p = a.customDistanceMaterial);
      void 0 === p ? (p = !1, !0 === e.morphTargets && (p = c.morphAttributes && c.morphAttributes.position && 0 < c.morphAttributes.position.length), c = !1, !0 === a.isSkinnedMesh && (!0 === e.skinning ? c = !0 : console.warn("THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:", a)), a = m(p, c, !0 === a.isInstancedMesh)) : a = p;
      l.localClippingEnabled && !0 === e.clipShadows && 0 !== e.clippingPlanes.length && (p = a.uuid, m = e.uuid, c = r[p], void 0 === c && (c = {}, r[p] = c), p = c[m], void 0 === p && (p = a.clone(), c[m] = p), a = p);
      a.visible = e.visible;
      a.wireframe = e.wireframe;
      a.side = 3 === g ? null !== e.shadowSide ? e.shadowSide : e.side : null !== e.shadowSide ? e.shadowSide : t[e.side];
      a.clipShadows = e.clipShadows;
      a.clippingPlanes = e.clippingPlanes;
      a.clipIntersection = e.clipIntersection;
      a.wireframeLinewidth = e.wireframeLinewidth;
      a.linewidth = e.linewidth;
      !0 === d.isPointLight && !0 === a.isMeshDistanceMaterial && (a.referencePosition.setFromMatrixPosition(d.matrixWorld), a.nearDistance = h, a.farDistance = f);
      return a;
    }
    function h(c, u, b, e, f) {
      if (!1 !== c.visible) {
        if (c.layers.test(u.layers) && (c.isMesh || c.isLine || c.isPoints) && (c.castShadow || c.receiveShadow && 3 === f) && (!c.frustumCulled || g.intersectsObject(c))) {
          c.modelViewMatrix.multiplyMatrices(b.matrixWorldInverse, c.matrixWorld);
          var m = a.update(c), p = c.material;
          if (Array.isArray(p)) {
            for (var n = m.groups, G = 0, k = n.length; G < k; G++) {
              var q = n[G], r = p[q.materialIndex];
              r && r.visible && (r = d(c, m, r, e, b.near, b.far, f), l.renderBufferDirect(b, null, m, r, c, q));
            }
          } else {
            p.visible && (r = d(c, m, p, e, b.near, b.far, f), l.renderBufferDirect(b, null, m, r, c, null));
          }
        }
        c = c.children;
        m = 0;
        for (p = c.length; m < p; m++) {
          h(c[m], u, b, e, f);
        }
      }
    }
    var g = new Ga, m = new k, p = new k, n = new f, G = [], q = [], r = {}, t = {0:1, 1:0, 2:2}, v = new ka({defines:{SAMPLE_RATE:.25, HALF_SAMPLE_RATE:.125}, uniforms:{shadow_pass:{value:null}, resolution:{value:new k}, radius:{value:4}}, vertexShader:"void main() {\n\tgl_Position = vec4( position, 1.0 );\n}", fragmentShader:"uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n  float mean = 0.0;\n  float squared_mean = 0.0;\n\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy  ) / resolution ) );\n  for ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\n    #ifdef HORIZONAL_PASS\n      vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\n      mean += distribution.x;\n      squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n    #else\n      float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0,  i )  * radius ) / resolution ) );\n      mean += depth;\n      squared_mean += depth * depth;\n    #endif\n  }\n  mean = mean * HALF_SAMPLE_RATE;\n  squared_mean = squared_mean * HALF_SAMPLE_RATE;\n  float std_dev = sqrt( squared_mean - mean * mean );\n  gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}"}), 
    z = v.clone();
    z.defines.HORIZONAL_PASS = 1;
    var w = new N;
    w.setAttribute("position", new J(new Float32Array([-1, -1, .5, 3, -1, .5, -1, 3, .5]), 3));
    var y = new V(w, v), ba = this;
    this.enabled = !1;
    this.autoUpdate = !0;
    this.needsUpdate = !1;
    this.type = 1;
    this.render = function(u, b, d) {
      if (!1 !== ba.enabled && (!1 !== ba.autoUpdate || !1 !== ba.needsUpdate) && 0 !== u.length) {
        var f = l.getRenderTarget(), G = l.getActiveCubeFace(), k = l.getActiveMipmapLevel(), q = l.state;
        q.setBlending(0);
        q.buffers.color.setClear(1, 1, 1, 1);
        q.buffers.depth.setTest(!0);
        q.setScissorTest(!1);
        for (var r = 0, t = u.length; r < t; r++) {
          var Y = u[r], w = Y.shadow;
          if (void 0 === w) {
            console.warn("THREE.WebGLShadowMap:", Y, "has no shadow.");
          } else {
            m.copy(w.mapSize);
            var ca = w.getFrameExtents();
            m.multiply(ca);
            p.copy(w.mapSize);
            if (m.x > c || m.y > c) {
              console.warn("THREE.WebGLShadowMap:", Y, "has shadow exceeding max texture size, reducing"), m.x > c && (p.x = Math.floor(c / ca.x), m.x = p.x * ca.x, w.mapSize.x = p.x), m.y > c && (p.y = Math.floor(c / ca.y), m.y = p.y * ca.y, w.mapSize.y = p.y);
            }
            null !== w.map || w.isPointLightShadow || 3 !== this.type || (ca = {minFilter:1006, magFilter:1006, format:1023}, w.map = new e(m.x, m.y, ca), w.map.texture.name = Y.name + ".shadowMap", w.mapPass = new e(m.x, m.y, ca), w.camera.updateProjectionMatrix());
            null === w.map && (ca = {minFilter:1003, magFilter:1003, format:1023}, w.map = new e(m.x, m.y, ca), w.map.texture.name = Y.name + ".shadowMap", w.camera.updateProjectionMatrix());
            l.setRenderTarget(w.map);
            l.clear();
            ca = w.getViewportCount();
            for (var x = 0; x < ca; x++) {
              var ja = w.getViewport(x);
              n.set(p.x * ja.x, p.y * ja.y, p.x * ja.z, p.y * ja.w);
              q.viewport(n);
              w.updateMatrices(Y, x);
              g = w.getFrustum();
              h(b, d, w.camera, Y, this.type);
            }
            w.isPointLightShadow || 3 !== this.type || (Y = w, w = d, ca = a.update(y), v.uniforms.shadow_pass.value = Y.map.texture, v.uniforms.resolution.value = Y.mapSize, v.uniforms.radius.value = Y.radius, l.setRenderTarget(Y.mapPass), l.clear(), l.renderBufferDirect(w, null, ca, v, y, null), z.uniforms.shadow_pass.value = Y.mapPass.texture, z.uniforms.resolution.value = Y.mapSize, z.uniforms.radius.value = Y.radius, l.setRenderTarget(Y.map), l.clear(), l.renderBufferDirect(w, null, ca, z, y, 
            null));
          }
        }
        ba.needsUpdate = !1;
        l.setRenderTarget(f, G, k);
      }
    };
  }
  function Qj(l, a, c) {
    function u(a, c, u) {
      var b = new Uint8Array(4), e = l.createTexture();
      l.bindTexture(a, e);
      l.texParameteri(a, 10241, 9728);
      l.texParameteri(a, 10240, 9728);
      for (a = 0; a < u; a++) {
        l.texImage2D(c + a, 0, 6408, 1, 1, 0, 6408, 5121, b);
      }
      return e;
    }
    function b(c, u) {
      t[c] = 1;
      0 === v[c] && (l.enableVertexAttribArray(c), v[c] = 1);
      z[c] !== u && ((G ? l : a.get("ANGLE_instanced_arrays"))[G ? "vertexAttribDivisor" : "vertexAttribDivisorANGLE"](c, u), z[c] = u);
    }
    function e(a) {
      !0 !== w[a] && (l.enable(a), w[a] = !0);
    }
    function d(a) {
      !1 !== w[a] && (l.disable(a), w[a] = !1);
    }
    function h(a, c, u, b, h, f, g, m) {
      if (0 === a) {
        ba && (d(3042), ba = !1);
      } else {
        if (ba || (e(3042), ba = !0), 5 !== a) {
          if (a !== x || m !== E) {
            if (100 !== C || 100 !== na) {
              l.blendEquation(32774), na = C = 100;
            }
            if (m) {
              switch(a) {
                case 1:
                  l.blendFuncSeparate(1, 771, 1, 771);
                  break;
                case 2:
                  l.blendFunc(1, 1);
                  break;
                case 3:
                  l.blendFuncSeparate(0, 0, 769, 771);
                  break;
                case 4:
                  l.blendFuncSeparate(0, 768, 0, 770);
                  break;
                default:
                  console.error("THREE.WebGLState: Invalid blending: ", a);
              }
            } else {
              switch(a) {
                case 1:
                  l.blendFuncSeparate(770, 771, 1, 771);
                  break;
                case 2:
                  l.blendFunc(770, 1);
                  break;
                case 3:
                  l.blendFunc(0, 769);
                  break;
                case 4:
                  l.blendFunc(0, 768);
                  break;
                default:
                  console.error("THREE.WebGLState: Invalid blending: ", a);
              }
            }
            F = B = D = A = null;
            x = a;
            E = m;
          }
        } else {
          h = h || c;
          f = f || u;
          g = g || b;
          if (c !== C || h !== na) {
            l.blendEquationSeparate(K[c], K[h]), C = c, na = h;
          }
          if (u !== A || b !== D || f !== B || g !== F) {
            l.blendFuncSeparate(Q[u], Q[b], Q[f], Q[g]), A = u, D = b, B = f, F = g;
          }
          x = a;
          E = null;
        }
      }
    }
    function g(a) {
      Ha !== a && (a ? l.frontFace(2304) : l.frontFace(2305), Ha = a);
    }
    function m(a) {
      0 !== a ? (e(2884), a !== qa && (1 === a ? l.cullFace(1029) : 2 === a ? l.cullFace(1028) : l.cullFace(1032))) : d(2884);
      qa = a;
    }
    function p(a, c, u) {
      if (a) {
        if (e(32823), I !== c || M !== u) {
          l.polygonOffset(c, u), I = c, M = u;
        }
      } else {
        d(32823);
      }
    }
    function n(a) {
      void 0 === a && (a = 33984 + P - 1);
      L !== a && (l.activeTexture(a), L = a);
    }
    var G = c.isWebGL2, k = new function() {
      var a = !1, c = new f, u = null, b = new f(0, 0, 0, 0);
      return {setMask:function(c) {
        u === c || a || (l.colorMask(c, c, c, c), u = c);
      }, setLocked:function(l) {
        a = l;
      }, setClear:function(a, u, e, d, h) {
        !0 === h && (a *= d, u *= d, e *= d);
        c.set(a, u, e, d);
        !1 === b.equals(c) && (l.clearColor(a, u, e, d), b.copy(c));
      }, reset:function() {
        a = !1;
        u = null;
        b.set(-1, 0, 0, 0);
      }};
    }, q = new function() {
      var a = !1, c = null, u = null, b = null;
      return {setTest:function(l) {
        l ? e(2929) : d(2929);
      }, setMask:function(u) {
        c === u || a || (l.depthMask(u), c = u);
      }, setFunc:function(a) {
        if (u !== a) {
          if (a) {
            switch(a) {
              case 0:
                l.depthFunc(512);
                break;
              case 1:
                l.depthFunc(519);
                break;
              case 2:
                l.depthFunc(513);
                break;
              case 3:
                l.depthFunc(515);
                break;
              case 4:
                l.depthFunc(514);
                break;
              case 5:
                l.depthFunc(518);
                break;
              case 6:
                l.depthFunc(516);
                break;
              case 7:
                l.depthFunc(517);
                break;
              default:
                l.depthFunc(515);
            }
          } else {
            l.depthFunc(515);
          }
          u = a;
        }
      }, setLocked:function(l) {
        a = l;
      }, setClear:function(a) {
        b !== a && (l.clearDepth(a), b = a);
      }, reset:function() {
        a = !1;
        b = u = c = null;
      }};
    }, r = new function() {
      var a = !1, c = null, u = null, b = null, h = null, f = null, g = null, m = null, p = null;
      return {setTest:function(l) {
        a || (l ? e(2960) : d(2960));
      }, setMask:function(u) {
        c === u || a || (l.stencilMask(u), c = u);
      }, setFunc:function(a, c, e) {
        if (u !== a || b !== c || h !== e) {
          l.stencilFunc(a, c, e), u = a, b = c, h = e;
        }
      }, setOp:function(a, c, u) {
        if (f !== a || g !== c || m !== u) {
          l.stencilOp(a, c, u), f = a, g = c, m = u;
        }
      }, setLocked:function(l) {
        a = l;
      }, setClear:function(a) {
        p !== a && (l.clearStencil(a), p = a);
      }, reset:function() {
        a = !1;
        p = m = g = f = h = b = u = c = null;
      }};
    };
    c = l.getParameter(34921);
    var t = new Uint8Array(c), v = new Uint8Array(c), z = new Uint8Array(c), w = {}, y = null, ba = null, x = null, C = null, A = null, D = null, na = null, B = null, F = null, E = !1, Ha = null, qa = null, H = null, I = null, M = null, P = l.getParameter(35661), O = !1;
    c = 0;
    c = l.getParameter(7938);
    -1 !== c.indexOf("WebGL") ? (c = parseFloat(/^WebGL ([0-9])/.exec(c)[1]), O = 1 <= c) : -1 !== c.indexOf("OpenGL ES") && (c = parseFloat(/^OpenGL ES ([0-9])/.exec(c)[1]), O = 2 <= c);
    var L = null, J = {}, N = new f, da = new f, S = {};
    S[3553] = u(3553, 3553, 1);
    S[34067] = u(34067, 34069, 6);
    k.setClear(0, 0, 0, 1);
    q.setClear(1);
    r.setClear(0);
    e(2929);
    q.setFunc(3);
    g(!1);
    m(1);
    e(2884);
    h(0);
    var K = {100:32774, 101:32778, 102:32779};
    G ? (K[103] = 32775, K[104] = 32776) : (c = a.get("EXT_blend_minmax"), null !== c && (K[103] = c.MIN_EXT, K[104] = c.MAX_EXT));
    var Q = {200:0, 201:1, 202:768, 204:770, 210:776, 208:774, 206:772, 203:769, 205:771, 209:775, 207:773};
    return {buffers:{color:k, depth:q, stencil:r}, initAttributes:function() {
      for (var l = 0, a = t.length; l < a; l++) {
        t[l] = 0;
      }
    }, enableAttribute:function(l) {
      b(l, 0);
    }, enableAttributeAndDivisor:b, disableUnusedAttributes:function() {
      for (var a = 0, c = v.length; a !== c; ++a) {
        v[a] !== t[a] && (l.disableVertexAttribArray(a), v[a] = 0);
      }
    }, vertexAttribPointer:function(a, c, u, b, e, d) {
      !0 !== G || 5124 !== u && 5125 !== u ? l.vertexAttribPointer(a, c, u, b, e, d) : l.vertexAttribIPointer(a, c, u, b, e, d);
    }, enable:e, disable:d, useProgram:function(a) {
      return y !== a ? (l.useProgram(a), y = a, !0) : !1;
    }, setBlending:h, setMaterial:function(l, a) {
      2 === l.side ? d(2884) : e(2884);
      var c = 1 === l.side;
      a && (c = !c);
      g(c);
      1 === l.blending && !1 === l.transparent ? h(0) : h(l.blending, l.blendEquation, l.blendSrc, l.blendDst, l.blendEquationAlpha, l.blendSrcAlpha, l.blendDstAlpha, l.premultipliedAlpha);
      q.setFunc(l.depthFunc);
      q.setTest(l.depthTest);
      q.setMask(l.depthWrite);
      k.setMask(l.colorWrite);
      a = l.stencilWrite;
      r.setTest(a);
      a && (r.setMask(l.stencilWriteMask), r.setFunc(l.stencilFunc, l.stencilRef, l.stencilFuncMask), r.setOp(l.stencilFail, l.stencilZFail, l.stencilZPass));
      p(l.polygonOffset, l.polygonOffsetFactor, l.polygonOffsetUnits);
    }, setFlipSided:g, setCullFace:m, setLineWidth:function(a) {
      a !== H && (O && l.lineWidth(a), H = a);
    }, setPolygonOffset:p, setScissorTest:function(l) {
      l ? e(3089) : d(3089);
    }, activeTexture:n, bindTexture:function(a, c) {
      null === L && n();
      var u = J[L];
      void 0 === u && (u = {type:void 0, texture:void 0}, J[L] = u);
      if (u.type !== a || u.texture !== c) {
        l.bindTexture(a, c || S[a]), u.type = a, u.texture = c;
      }
    }, unbindTexture:function() {
      var a = J[L];
      void 0 !== a && void 0 !== a.type && (l.bindTexture(a.type, null), a.type = void 0, a.texture = void 0);
    }, compressedTexImage2D:function() {
      try {
        l.compressedTexImage2D.apply(l, arguments);
      } catch (be) {
        console.error("THREE.WebGLState:", be);
      }
    }, texImage2D:function() {
      try {
        l.texImage2D.apply(l, arguments);
      } catch (be) {
        console.error("THREE.WebGLState:", be);
      }
    }, texImage3D:function() {
      try {
        l.texImage3D.apply(l, arguments);
      } catch (be) {
        console.error("THREE.WebGLState:", be);
      }
    }, scissor:function(a) {
      !1 === N.equals(a) && (l.scissor(a.x, a.y, a.z, a.w), N.copy(a));
    }, viewport:function(a) {
      !1 === da.equals(a) && (l.viewport(a.x, a.y, a.z, a.w), da.copy(a));
    }, reset:function() {
      for (var a = 0; a < v.length; a++) {
        1 === v[a] && (l.disableVertexAttribArray(a), v[a] = 0);
      }
      w = {};
      L = null;
      J = {};
      qa = Ha = x = y = null;
      k.reset();
      q.reset();
      r.reset();
    }};
  }
  function Rj(l, a, c, b, e, d, h) {
    function u(l, a) {
      return B ? new OffscreenCanvas(l, a) : document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
    }
    function f(l, a, c, b) {
      var e = 1;
      if (l.width > b || l.height > b) {
        e = b / Math.max(l.width, l.height);
      }
      if (1 > e || !0 === a) {
        if ("undefined" !== typeof HTMLImageElement && l instanceof HTMLImageElement || "undefined" !== typeof HTMLCanvasElement && l instanceof HTMLCanvasElement || "undefined" !== typeof ImageBitmap && l instanceof ImageBitmap) {
          return b = a ? oa.floorPowerOfTwo : Math.floor, a = b(e * l.width), e = b(e * l.height), void 0 === Pa && (Pa = u(a, e)), c = c ? u(a, e) : Pa, c.width = a, c.height = e, c.getContext("2d").drawImage(l, 0, 0, a, e), console.warn("THREE.WebGLRenderer: Texture has been resized from (" + l.width + "x" + l.height + ") to (" + a + "x" + e + ")."), c;
        }
        "data" in l && console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + l.width + "x" + l.height + ").");
      }
      return l;
    }
    function g(l) {
      return oa.isPowerOfTwo(l.width) && oa.isPowerOfTwo(l.height);
    }
    function m(l, a) {
      return l.generateMipmaps && a && 1003 !== l.minFilter && 1006 !== l.minFilter;
    }
    function p(a, c, u, e) {
      l.generateMipmap(a);
      b.get(c).__maxMipLevel = Math.log(Math.max(u, e)) * Math.LOG2E;
    }
    function n(c, u, b) {
      if (!1 === x) {
        return u;
      }
      if (null !== c) {
        if (void 0 !== l[c]) {
          return l[c];
        }
        console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + c + "'");
      }
      c = u;
      6403 === u && (5126 === b && (c = 33326), 5131 === b && (c = 33325), 5121 === b && (c = 33321));
      6407 === u && (5126 === b && (c = 34837), 5131 === b && (c = 34843), 5121 === b && (c = 32849));
      6408 === u && (5126 === b && (c = 34836), 5131 === b && (c = 34842), 5121 === b && (c = 32856));
      33325 !== c && 33326 !== c && 34842 !== c && 34836 !== c || a.get("EXT_color_buffer_float");
      return c;
    }
    function k(l) {
      return 1003 === l || 1004 === l || 1005 === l ? 9728 : 9729;
    }
    function G(a) {
      a = a.target;
      a.removeEventListener("dispose", G);
      var c = b.get(a);
      void 0 !== c.__webglInit && (l.deleteTexture(c.__webglTexture), b.remove(a));
      a.isVideoTexture && na.delete(a);
      h.memory.textures--;
    }
    function q(a) {
      a = a.target;
      a.removeEventListener("dispose", q);
      var c = b.get(a), u = b.get(a.texture);
      if (a) {
        void 0 !== u.__webglTexture && l.deleteTexture(u.__webglTexture);
        a.depthTexture && a.depthTexture.dispose();
        if (a.isWebGLCubeRenderTarget) {
          for (u = 0; 6 > u; u++) {
            l.deleteFramebuffer(c.__webglFramebuffer[u]), c.__webglDepthbuffer && l.deleteRenderbuffer(c.__webglDepthbuffer[u]);
          }
        } else {
          l.deleteFramebuffer(c.__webglFramebuffer), c.__webglDepthbuffer && l.deleteRenderbuffer(c.__webglDepthbuffer), c.__webglMultisampledFramebuffer && l.deleteFramebuffer(c.__webglMultisampledFramebuffer), c.__webglColorRenderbuffer && l.deleteRenderbuffer(c.__webglColorRenderbuffer), c.__webglDepthRenderbuffer && l.deleteRenderbuffer(c.__webglDepthRenderbuffer);
        }
        b.remove(a.texture);
        b.remove(a);
      }
      h.memory.textures--;
    }
    function r(l, a) {
      var u = b.get(l);
      if (l.isVideoTexture) {
        var e = h.render.frame;
        na.get(l) !== e && (na.set(l, e), l.update());
      }
      if (0 < l.version && u.__version !== l.version) {
        if (e = l.image, void 0 === e) {
          console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");
        } else {
          if (!1 === e.complete) {
            console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");
          } else {
            w(u, l, a);
            return;
          }
        }
      }
      c.activeTexture(33984 + a);
      c.bindTexture(3553, u.__webglTexture);
    }
    function t(a, u) {
      if (6 === a.image.length) {
        var e = b.get(a);
        if (0 < a.version && e.__version !== a.version) {
          z(e, a);
          c.activeTexture(33984 + u);
          c.bindTexture(34067, e.__webglTexture);
          l.pixelStorei(37440, a.flipY);
          var h = a && (a.isCompressedTexture || a.image[0].isCompressedTexture);
          u = a.image[0] && a.image[0].isDataTexture;
          for (var k = [], G = 0; 6 > G; G++) {
            k[G] = h || u ? u ? a.image[G].image : a.image[G] : f(a.image[G], !1, !0, C);
          }
          var q = k[0], r = g(q) || x, t = d.convert(a.format), v = d.convert(a.type), w = n(a.internalFormat, t, v);
          Y(34067, a, r);
          if (h) {
            for (G = 0; 6 > G; G++) {
              var y = k[G].mipmaps;
              for (h = 0; h < y.length; h++) {
                var ca = y[h];
                1023 !== a.format && 1022 !== a.format ? null !== t ? c.compressedTexImage2D(34069 + G, h, w, ca.width, ca.height, 0, ca.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()") : c.texImage2D(34069 + G, h, w, ca.width, ca.height, 0, t, v, ca.data);
              }
            }
            e.__maxMipLevel = y.length - 1;
          } else {
            y = a.mipmaps;
            for (G = 0; 6 > G; G++) {
              if (u) {
                for (c.texImage2D(34069 + G, 0, w, k[G].width, k[G].height, 0, t, v, k[G].data), h = 0; h < y.length; h++) {
                  ca = y[h], ca = ca.image[G].image, c.texImage2D(34069 + G, h + 1, w, ca.width, ca.height, 0, t, v, ca.data);
                }
              } else {
                for (c.texImage2D(34069 + G, 0, w, t, v, k[G]), h = 0; h < y.length; h++) {
                  ca = y[h], c.texImage2D(34069 + G, h + 1, w, t, v, ca.image[G]);
                }
              }
            }
            e.__maxMipLevel = y.length;
          }
          m(a, r) && p(34067, a, q.width, q.height);
          e.__version = a.version;
          if (a.onUpdate) {
            a.onUpdate(a);
          }
        } else {
          c.activeTexture(33984 + u), c.bindTexture(34067, e.__webglTexture);
        }
      }
    }
    function v(l, a) {
      c.activeTexture(33984 + a);
      c.bindTexture(34067, b.get(l).__webglTexture);
    }
    function Y(c, u, d) {
      d ? (l.texParameteri(c, 10242, E[u.wrapS]), l.texParameteri(c, 10243, E[u.wrapT]), 32879 !== c && 35866 !== c || l.texParameteri(c, 32882, E[u.wrapR]), l.texParameteri(c, 10240, Ha[u.magFilter]), l.texParameteri(c, 10241, Ha[u.minFilter])) : (l.texParameteri(c, 10242, 33071), l.texParameteri(c, 10243, 33071), 32879 !== c && 35866 !== c || l.texParameteri(c, 32882, 33071), 1001 === u.wrapS && 1001 === u.wrapT || console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."), 
      l.texParameteri(c, 10240, k(u.magFilter)), l.texParameteri(c, 10241, k(u.minFilter)), 1003 !== u.minFilter && 1006 !== u.minFilter && console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter."));
      !(d = a.get("EXT_texture_filter_anisotropic")) || 1015 === u.type && null === a.get("OES_texture_float_linear") || 1016 === u.type && null === (x || a.get("OES_texture_half_float_linear")) || !(1 < u.anisotropy || b.get(u).__currentAnisotropy) || (l.texParameterf(c, d.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(u.anisotropy, e.getMaxAnisotropy())), b.get(u).__currentAnisotropy = u.anisotropy);
    }
    function z(a, c) {
      void 0 === a.__webglInit && (a.__webglInit = !0, c.addEventListener("dispose", G), a.__webglTexture = l.createTexture(), h.memory.textures++);
    }
    function w(a, u, b) {
      var e = 3553;
      u.isDataTexture2DArray && (e = 35866);
      u.isDataTexture3D && (e = 32879);
      z(a, u);
      c.activeTexture(33984 + b);
      c.bindTexture(e, a.__webglTexture);
      l.pixelStorei(37440, u.flipY);
      l.pixelStorei(37441, u.premultiplyAlpha);
      l.pixelStorei(3317, u.unpackAlignment);
      b = x ? !1 : 1001 !== u.wrapS || 1001 !== u.wrapT || 1003 !== u.minFilter && 1006 !== u.minFilter;
      b = b && !1 === g(u.image);
      b = f(u.image, b, !1, A);
      var h = g(b) || x, G = d.convert(u.format), k = d.convert(u.type), q = n(u.internalFormat, G, k);
      Y(e, u, h);
      var r = u.mipmaps;
      if (u.isDepthTexture) {
        q = 6402, x ? q = 1015 === u.type ? 36012 : 1014 === u.type ? 33190 : 1020 === u.type ? 35056 : 33189 : 1015 === u.type && console.error("WebGLRenderer: Floating point depth texture requires WebGL2."), 1026 === u.format && 6402 === q && 1012 !== u.type && 1014 !== u.type && (console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."), u.type = 1012, k = d.convert(u.type)), 1027 === u.format && 6402 === q && (q = 34041, 1020 !== u.type && (console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."), 
        u.type = 1020, k = d.convert(u.type))), c.texImage2D(3553, 0, q, b.width, b.height, 0, G, k, null);
      } else {
        if (u.isDataTexture) {
          if (0 < r.length && h) {
            for (var t = 0, v = r.length; t < v; t++) {
              var w = r[t];
              c.texImage2D(3553, t, q, w.width, w.height, 0, G, k, w.data);
            }
            u.generateMipmaps = !1;
            a.__maxMipLevel = r.length - 1;
          } else {
            c.texImage2D(3553, 0, q, b.width, b.height, 0, G, k, b.data), a.__maxMipLevel = 0;
          }
        } else {
          if (u.isCompressedTexture) {
            t = 0;
            for (v = r.length; t < v; t++) {
              w = r[t], 1023 !== u.format && 1022 !== u.format ? null !== G ? c.compressedTexImage2D(3553, t, q, w.width, w.height, 0, w.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : c.texImage2D(3553, t, q, w.width, w.height, 0, G, k, w.data);
            }
            a.__maxMipLevel = r.length - 1;
          } else {
            if (u.isDataTexture2DArray) {
              c.texImage3D(35866, 0, q, b.width, b.height, b.depth, 0, G, k, b.data), a.__maxMipLevel = 0;
            } else {
              if (u.isDataTexture3D) {
                c.texImage3D(32879, 0, q, b.width, b.height, b.depth, 0, G, k, b.data), a.__maxMipLevel = 0;
              } else {
                if (0 < r.length && h) {
                  t = 0;
                  for (v = r.length; t < v; t++) {
                    w = r[t], c.texImage2D(3553, t, q, G, k, w);
                  }
                  u.generateMipmaps = !1;
                  a.__maxMipLevel = r.length - 1;
                } else {
                  c.texImage2D(3553, 0, q, G, k, b), a.__maxMipLevel = 0;
                }
              }
            }
          }
        }
      }
      m(u, h) && p(e, u, b.width, b.height);
      a.__version = u.version;
      if (u.onUpdate) {
        u.onUpdate(u);
      }
    }
    function y(a, u, e, h) {
      var f = d.convert(u.texture.format), g = d.convert(u.texture.type), m = n(u.texture.internalFormat, f, g);
      c.texImage2D(h, 0, m, u.width, u.height, 0, f, g, null);
      l.bindFramebuffer(36160, a);
      l.framebufferTexture2D(36160, e, h, b.get(u.texture).__webglTexture, 0);
      l.bindFramebuffer(36160, null);
    }
    function ca(a, c, u) {
      l.bindRenderbuffer(36161, a);
      if (c.depthBuffer && !c.stencilBuffer) {
        var b = 33189;
        u ? ((u = c.depthTexture) && u.isDepthTexture && (1015 === u.type ? b = 36012 : 1014 === u.type && (b = 33190)), u = ba(c), l.renderbufferStorageMultisample(36161, u, b, c.width, c.height)) : l.renderbufferStorage(36161, b, c.width, c.height);
        l.framebufferRenderbuffer(36160, 36096, 36161, a);
      } else {
        c.depthBuffer && c.stencilBuffer ? (u ? (u = ba(c), l.renderbufferStorageMultisample(36161, u, 35056, c.width, c.height)) : l.renderbufferStorage(36161, 34041, c.width, c.height), l.framebufferRenderbuffer(36160, 33306, 36161, a)) : (a = d.convert(c.texture.format), b = d.convert(c.texture.type), b = n(c.texture.internalFormat, a, b), u ? (u = ba(c), l.renderbufferStorageMultisample(36161, u, b, c.width, c.height)) : l.renderbufferStorage(36161, b, c.width, c.height));
      }
      l.bindRenderbuffer(36161, null);
    }
    function ba(l) {
      return x && l.isWebGLMultisampleRenderTarget ? Math.min(D, l.samples) : 0;
    }
    var x = e.isWebGL2, ja = e.maxTextures, C = e.maxCubemapSize, A = e.maxTextureSize, D = e.maxSamples, na = new WeakMap, Pa, B = !1;
    try {
      B = "undefined" !== typeof OffscreenCanvas && null !== (new OffscreenCanvas(1, 1)).getContext("2d");
    } catch (xk) {
    }
    var F = 0, E = {1E3:10497, 1001:33071, 1002:33648}, Ha = {1003:9728, 1004:9984, 1005:9986, 1006:9729, 1007:9985, 1008:9987}, qa = !1, H = !1;
    this.allocateTextureUnit = function() {
      var l = F;
      l >= ja && console.warn("THREE.WebGLTextures: Trying to use " + l + " texture units while this GPU supports only " + ja);
      F += 1;
      return l;
    };
    this.resetTextureUnits = function() {
      F = 0;
    };
    this.setTexture2D = r;
    this.setTexture2DArray = function(l, a) {
      var u = b.get(l);
      0 < l.version && u.__version !== l.version ? w(u, l, a) : (c.activeTexture(33984 + a), c.bindTexture(35866, u.__webglTexture));
    };
    this.setTexture3D = function(l, a) {
      var u = b.get(l);
      0 < l.version && u.__version !== l.version ? w(u, l, a) : (c.activeTexture(33984 + a), c.bindTexture(32879, u.__webglTexture));
    };
    this.setTextureCube = t;
    this.setTextureCubeDynamic = v;
    this.setupRenderTarget = function(a) {
      var u = b.get(a), e = b.get(a.texture);
      a.addEventListener("dispose", q);
      e.__webglTexture = l.createTexture();
      h.memory.textures++;
      var f = !0 === a.isWebGLCubeRenderTarget, G = !0 === a.isWebGLMultisampleRenderTarget, k = g(a) || x;
      !x || 1022 !== a.texture.format || 1015 !== a.texture.type && 1016 !== a.texture.type || (a.texture.format = 1023, console.warn("THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead."));
      if (f) {
        for (u.__webglFramebuffer = [], G = 0; 6 > G; G++) {
          u.__webglFramebuffer[G] = l.createFramebuffer();
        }
      } else {
        if (u.__webglFramebuffer = l.createFramebuffer(), G) {
          if (x) {
            u.__webglMultisampledFramebuffer = l.createFramebuffer();
            u.__webglColorRenderbuffer = l.createRenderbuffer();
            l.bindRenderbuffer(36161, u.__webglColorRenderbuffer);
            G = d.convert(a.texture.format);
            var t = d.convert(a.texture.type);
            G = n(a.texture.internalFormat, G, t);
            t = ba(a);
            l.renderbufferStorageMultisample(36161, t, G, a.width, a.height);
            l.bindFramebuffer(36160, u.__webglMultisampledFramebuffer);
            l.framebufferRenderbuffer(36160, 36064, 36161, u.__webglColorRenderbuffer);
            l.bindRenderbuffer(36161, null);
            a.depthBuffer && (u.__webglDepthRenderbuffer = l.createRenderbuffer(), ca(u.__webglDepthRenderbuffer, a, !0));
            l.bindFramebuffer(36160, null);
          } else {
            console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");
          }
        }
      }
      if (f) {
        c.bindTexture(34067, e.__webglTexture);
        Y(34067, a.texture, k);
        for (G = 0; 6 > G; G++) {
          y(u.__webglFramebuffer[G], a, 36064, 34069 + G);
        }
        m(a.texture, k) && p(34067, a.texture, a.width, a.height);
        c.bindTexture(34067, null);
      } else {
        c.bindTexture(3553, e.__webglTexture), Y(3553, a.texture, k), y(u.__webglFramebuffer, a, 36064, 3553), m(a.texture, k) && p(3553, a.texture, a.width, a.height), c.bindTexture(3553, null);
      }
      if (a.depthBuffer) {
        u = b.get(a);
        e = !0 === a.isWebGLCubeRenderTarget;
        if (a.depthTexture) {
          if (e) {
            throw Error("target.depthTexture not supported in Cube render targets");
          }
          if (a && a.isWebGLCubeRenderTarget) {
            throw Error("Depth Texture with cube render targets is not supported");
          }
          l.bindFramebuffer(36160, u.__webglFramebuffer);
          if (!a.depthTexture || !a.depthTexture.isDepthTexture) {
            throw Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
          }
          b.get(a.depthTexture).__webglTexture && a.depthTexture.image.width === a.width && a.depthTexture.image.height === a.height || (a.depthTexture.image.width = a.width, a.depthTexture.image.height = a.height, a.depthTexture.needsUpdate = !0);
          r(a.depthTexture, 0);
          u = b.get(a.depthTexture).__webglTexture;
          if (1026 === a.depthTexture.format) {
            l.framebufferTexture2D(36160, 36096, 3553, u, 0);
          } else {
            if (1027 === a.depthTexture.format) {
              l.framebufferTexture2D(36160, 33306, 3553, u, 0);
            } else {
              throw Error("Unknown depthTexture format");
            }
          }
        } else {
          if (e) {
            for (u.__webglDepthbuffer = [], e = 0; 6 > e; e++) {
              l.bindFramebuffer(36160, u.__webglFramebuffer[e]), u.__webglDepthbuffer[e] = l.createRenderbuffer(), ca(u.__webglDepthbuffer[e], a, !1);
            }
          } else {
            l.bindFramebuffer(36160, u.__webglFramebuffer), u.__webglDepthbuffer = l.createRenderbuffer(), ca(u.__webglDepthbuffer, a, !1);
          }
        }
        l.bindFramebuffer(36160, null);
      }
    };
    this.updateRenderTargetMipmap = function(l) {
      var a = l.texture, u = g(l) || x;
      if (m(a, u)) {
        u = l.isWebGLCubeRenderTarget ? 34067 : 3553;
        var e = b.get(a).__webglTexture;
        c.bindTexture(u, e);
        p(u, a, l.width, l.height);
        c.bindTexture(u, null);
      }
    };
    this.updateMultisampleRenderTarget = function(a) {
      if (a.isWebGLMultisampleRenderTarget) {
        if (x) {
          var c = b.get(a);
          l.bindFramebuffer(36008, c.__webglMultisampledFramebuffer);
          l.bindFramebuffer(36009, c.__webglFramebuffer);
          var u = a.width, e = a.height, d = 16384;
          a.depthBuffer && (d |= 256);
          a.stencilBuffer && (d |= 1024);
          l.blitFramebuffer(0, 0, u, e, 0, 0, u, e, d, 9728);
          l.bindFramebuffer(36160, c.__webglMultisampledFramebuffer);
        } else {
          console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");
        }
      }
    };
    this.safeSetTexture2D = function(l, a) {
      l && l.isWebGLRenderTarget && (!1 === qa && (console.warn("THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead."), qa = !0), l = l.texture);
      r(l, a);
    };
    this.safeSetTextureCube = function(l, a) {
      l && l.isWebGLCubeRenderTarget && (!1 === H && (console.warn("THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead."), H = !0), l = l.texture);
      l && l.isCubeTexture || Array.isArray(l.image) && 6 === l.image.length ? t(l, a) : v(l, a);
    };
  }
  function Yh(l, a, c) {
    var u = c.isWebGL2;
    return {convert:function(l) {
      if (1009 === l) {
        return 5121;
      }
      if (1017 === l) {
        return 32819;
      }
      if (1018 === l) {
        return 32820;
      }
      if (1019 === l) {
        return 33635;
      }
      if (1010 === l) {
        return 5120;
      }
      if (1011 === l) {
        return 5122;
      }
      if (1012 === l) {
        return 5123;
      }
      if (1013 === l) {
        return 5124;
      }
      if (1014 === l) {
        return 5125;
      }
      if (1015 === l) {
        return 5126;
      }
      if (1016 === l) {
        if (u) {
          return 5131;
        }
        var c = a.get("OES_texture_half_float");
        return null !== c ? c.HALF_FLOAT_OES : null;
      }
      if (1021 === l) {
        return 6406;
      }
      if (1022 === l) {
        return 6407;
      }
      if (1023 === l) {
        return 6408;
      }
      if (1024 === l) {
        return 6409;
      }
      if (1025 === l) {
        return 6410;
      }
      if (1026 === l) {
        return 6402;
      }
      if (1027 === l) {
        return 34041;
      }
      if (1028 === l) {
        return 6403;
      }
      if (1029 === l) {
        return 36244;
      }
      if (1030 === l) {
        return 33319;
      }
      if (1031 === l) {
        return 33320;
      }
      if (1032 === l) {
        return 36248;
      }
      if (1033 === l) {
        return 36249;
      }
      if (33776 === l || 33777 === l || 33778 === l || 33779 === l) {
        if (c = a.get("WEBGL_compressed_texture_s3tc"), null !== c) {
          if (33776 === l) {
            return c.COMPRESSED_RGB_S3TC_DXT1_EXT;
          }
          if (33777 === l) {
            return c.COMPRESSED_RGBA_S3TC_DXT1_EXT;
          }
          if (33778 === l) {
            return c.COMPRESSED_RGBA_S3TC_DXT3_EXT;
          }
          if (33779 === l) {
            return c.COMPRESSED_RGBA_S3TC_DXT5_EXT;
          }
        } else {
          return null;
        }
      }
      if (35840 === l || 35841 === l || 35842 === l || 35843 === l) {
        if (c = a.get("WEBGL_compressed_texture_pvrtc"), null !== c) {
          if (35840 === l) {
            return c.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
          }
          if (35841 === l) {
            return c.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
          }
          if (35842 === l) {
            return c.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
          }
          if (35843 === l) {
            return c.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
          }
        } else {
          return null;
        }
      }
      if (36196 === l) {
        return c = a.get("WEBGL_compressed_texture_etc1"), null !== c ? c.COMPRESSED_RGB_ETC1_WEBGL : null;
      }
      if (37492 === l || 37496 === l) {
        if (c = a.get("WEBGL_compressed_texture_etc"), null !== c) {
          if (37492 === l) {
            return c.COMPRESSED_RGB8_ETC2;
          }
          if (37496 === l) {
            return c.COMPRESSED_RGBA8_ETC2_EAC;
          }
        }
      }
      if (37808 === l || 37809 === l || 37810 === l || 37811 === l || 37812 === l || 37813 === l || 37814 === l || 37815 === l || 37816 === l || 37817 === l || 37818 === l || 37819 === l || 37820 === l || 37821 === l || 37840 === l || 37841 === l || 37842 === l || 37843 === l || 37844 === l || 37845 === l || 37846 === l || 37847 === l || 37848 === l || 37849 === l || 37850 === l || 37851 === l || 37852 === l || 37853 === l) {
        return c = a.get("WEBGL_compressed_texture_astc"), null !== c ? l : null;
      }
      if (36492 === l) {
        return c = a.get("EXT_texture_compression_bptc"), null !== c ? l : null;
      }
      if (1020 === l) {
        if (u) {
          return 34042;
        }
        c = a.get("WEBGL_depth_texture");
        return null !== c ? c.UNSIGNED_INT_24_8_WEBGL : null;
      }
    }};
  }
  function af(l) {
    ia.call(this);
    this.cameras = l || [];
  }
  function fd() {
    t.call(this);
    this.type = "Group";
  }
  function bf() {
    this._grip = this._targetRay = null;
  }
  function Zh(l, a) {
    function c(l) {
      var a = t.get(l.inputSource);
      a && a.dispatchEvent({type:l.type});
    }
    function u() {
      t.forEach(function(l, a) {
        l.disconnect(a);
      });
      t.clear();
      l.setFramebuffer(null);
      l.setRenderTarget(l.getRenderTarget());
      na.stop();
      h.isPresenting = !1;
      h.dispatchEvent({type:"sessionend"});
    }
    function b(l) {
      n = l;
      na.setContext(g);
      na.start();
      h.isPresenting = !0;
      h.dispatchEvent({type:"sessionstart"});
    }
    function e(l) {
      for (var a = g.inputSources, c = 0; c < r.length; c++) {
        t.set(a[c], r[c]);
      }
      for (c = 0; c < l.removed.length; c++) {
        a = l.removed[c];
        var u = t.get(a);
        u && (u.dispatchEvent({type:"disconnected", data:a}), t.delete(a));
      }
      for (c = 0; c < l.added.length; c++) {
        a = l.added[c], (u = t.get(a)) && u.dispatchEvent({type:"connected", data:a});
      }
    }
    function d(l, a) {
      null === a ? l.matrixWorld.copy(l.matrix) : l.matrixWorld.multiplyMatrices(a.matrixWorld, l.matrix);
      l.matrixWorldInverse.getInverse(l.matrixWorld);
    }
    var h = this, g = null, p = 1, n = null, k = "local-floor", q = null, r = [], t = new Map, v = new ia;
    v.layers.enable(1);
    v.viewport = new f;
    var z = new ia;
    z.layers.enable(2);
    z.viewport = new f;
    var w = [v, z], y = new af;
    y.layers.enable(1);
    y.layers.enable(2);
    var x = null, ba = null;
    this.isPresenting = this.enabled = !1;
    this.getController = function(l) {
      var a = r[l];
      void 0 === a && (a = new bf, r[l] = a);
      return a.getTargetRaySpace();
    };
    this.getControllerGrip = function(l) {
      var a = r[l];
      void 0 === a && (a = new bf, r[l] = a);
      return a.getGripSpace();
    };
    this.setFramebufferScaleFactor = function(l) {
      p = l;
      !0 === h.isPresenting && console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.");
    };
    this.setReferenceSpaceType = function(l) {
      k = l;
      !0 === h.isPresenting && console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.");
    };
    this.getReferenceSpace = function() {
      return n;
    };
    this.getSession = function() {
      return g;
    };
    this.setSession = function(l) {
      g = l;
      null !== g && (g.addEventListener("select", c), g.addEventListener("selectstart", c), g.addEventListener("selectend", c), g.addEventListener("squeeze", c), g.addEventListener("squeezestart", c), g.addEventListener("squeezeend", c), g.addEventListener("end", u), l = a.getContextAttributes(), l = new XRWebGLLayer(g, a, {antialias:l.antialias, alpha:l.alpha, depth:l.depth, stencil:l.stencil, framebufferScaleFactor:p}), g.updateRenderState({baseLayer:l}), g.requestReferenceSpace(k).then(b), g.addEventListener("inputsourceschange", 
      e));
    };
    var C = new m, A = new m;
    this.getCamera = function(l) {
      y.near = z.near = v.near = l.near;
      y.far = z.far = v.far = l.far;
      if (x !== y.near || ba !== y.far) {
        g.updateRenderState({depthNear:y.near, depthFar:y.far}), x = y.near, ba = y.far;
      }
      var a = l.parent, c = y.cameras;
      d(y, a);
      for (var u = 0; u < c.length; u++) {
        d(c[u], a);
      }
      l.matrixWorld.copy(y.matrixWorld);
      l = l.children;
      u = 0;
      for (a = l.length; u < a; u++) {
        l[u].updateMatrixWorld(!0);
      }
      C.setFromMatrixPosition(v.matrixWorld);
      A.setFromMatrixPosition(z.matrixWorld);
      u = C.distanceTo(A);
      var b = v.projectionMatrix.elements, e = z.projectionMatrix.elements, h = b[14] / (b[10] - 1);
      l = b[14] / (b[10] + 1);
      a = (b[9] + 1) / b[5];
      c = (b[9] - 1) / b[5];
      var f = (b[8] - 1) / b[0], m = (e[8] + 1) / e[0];
      e = h * f;
      b = h * m;
      m = u / (-f + m);
      f = m * -f;
      v.matrixWorld.decompose(y.position, y.quaternion, y.scale);
      y.translateX(f);
      y.translateZ(m);
      y.matrixWorld.compose(y.position, y.quaternion, y.scale);
      y.matrixWorldInverse.getInverse(y.matrixWorld);
      h += m;
      m = l + m;
      y.projectionMatrix.makePerspective(e - f, b + (u - f), a * l / m * h, c * l / m * h, h, m);
      return y;
    };
    var D = null, na = new ta;
    na.setAnimationLoop(function(a, c) {
      q = c.getViewerPose(n);
      if (null !== q) {
        var u = q.views, b = g.renderState.baseLayer;
        l.setFramebuffer(b.framebuffer);
        var e = !1;
        u.length !== y.cameras.length && (y.cameras.length = 0, e = !0);
        for (var d = 0; d < u.length; d++) {
          var h = u[d], f = b.getViewport(h), m = w[d];
          m.matrix.fromArray(h.transform.matrix);
          m.projectionMatrix.fromArray(h.projectionMatrix);
          m.viewport.set(f.x, f.y, f.width, f.height);
          0 === d && y.matrix.copy(m.matrix);
          !0 === e && y.cameras.push(m);
        }
      }
      u = g.inputSources;
      for (d = 0; d < r.length; d++) {
        r[d].update(u[d], c, n);
      }
      D && D(a, c);
    });
    this.setAnimationLoop = function(l) {
      D = l;
    };
    this.dispose = function() {
    };
  }
  function ug(l) {
    var a;
    function c() {
      Ba = new pb(T);
      ia = new yc(T, Ba, l);
      !1 === ia.isWebGL2 && (Ba.get("WEBGL_depth_texture"), Ba.get("OES_texture_float"), Ba.get("OES_texture_half_float"), Ba.get("OES_texture_half_float_linear"), Ba.get("OES_standard_derivatives"), Ba.get("OES_element_index_uint"), Ba.get("ANGLE_instanced_arrays"));
      Ba.get("OES_texture_float_linear");
      sb = new Yh(T, Ba, ia);
      ma = new Qj(T, Ba, ia);
      ma.scissor(R.copy(ic).multiplyScalar(Qa).floor());
      ma.viewport(Z.copy(hc).multiplyScalar(Qa).floor());
      ka = new Qb(T);
      Sa = new Gj;
      sa = new Rj(T, Ba, ma, Sa, ia, sb, ka);
      jc = new Pb(T, ia);
      Zd = new zc(T, jc, ka);
      va = new Ac(T, Zd, jc, ka);
      fa = new ib(T);
      wa = new Fj(I, Ba, ia);
      ed = new Jj;
      ya = new Pj;
      Fb = new gc(I, ma, va, B);
      pa = new Wd(T, Ba, ka, ia);
      $e = new Cb(T, Ba, ka, ia);
      ka.programs = wa.programs;
      I.capabilities = ia;
      I.extensions = Ba;
      I.properties = Sa;
      I.renderLists = ed;
      I.state = ma;
      I.info = ka;
    }
    function b(l) {
      l.preventDefault();
      console.log("THREE.WebGLRenderer: Context Lost.");
      M = !0;
    }
    function e() {
      console.log("THREE.WebGLRenderer: Context Restored.");
      M = !1;
      c();
    }
    function d(l) {
      l = l.target;
      l.removeEventListener("dispose", d);
      h(l);
      Sa.remove(l);
    }
    function h(l) {
      var a = Sa.get(l).program;
      l.program = void 0;
      void 0 !== a && wa.releaseProgram(a);
    }
    function g(l, a) {
      l.render(function(l) {
        I.renderBufferImmediate(l, a);
      });
    }
    function p(l, a, c, u) {
      if (!1 !== l.visible) {
        if (l.layers.test(a.layers)) {
          if (l.isGroup) {
            c = l.renderOrder;
          } else {
            if (l.isLOD) {
              !0 === l.autoUpdate && l.update(a);
            } else {
              if (l.isLight) {
                H.pushLight(l), l.castShadow && H.pushShadow(l);
              } else {
                if (l.isSprite) {
                  if (!l.frustumCulled || W.intersectsSprite(l)) {
                    u && X.setFromMatrixPosition(l.matrixWorld).applyMatrix4(Cc);
                    var b = va.update(l), e = l.material;
                    e.visible && qa.push(l, b, e, c, X.z, null);
                  }
                } else {
                  if (l.isImmediateRenderObject) {
                    u && X.setFromMatrixPosition(l.matrixWorld).applyMatrix4(Cc), qa.push(l, null, l.material, c, X.z, null);
                  } else {
                    if (l.isMesh || l.isLine || l.isPoints) {
                      if (l.isSkinnedMesh && l.skeleton.frame !== ka.render.frame && (l.skeleton.update(), l.skeleton.frame = ka.render.frame), !l.frustumCulled || W.intersectsObject(l)) {
                        if (u && X.setFromMatrixPosition(l.matrixWorld).applyMatrix4(Cc), b = va.update(l), e = l.material, Array.isArray(e)) {
                          for (var d = b.groups, h = 0, f = d.length; h < f; h++) {
                            var g = d[h], m = e[g.materialIndex];
                            m && m.visible && qa.push(l, b, m, c, X.z, g);
                          }
                        } else {
                          e.visible && qa.push(l, b, e, c, X.z, null);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        l = l.children;
        h = 0;
        for (f = l.length; h < f; h++) {
          p(l[h], a, c, u);
        }
      }
    }
    function q(l, a, c, u) {
      for (var b = 0, e = l.length; b < e; b++) {
        var d = l[b], h = d.object, f = d.geometry, g = void 0 === u ? d.material : u;
        d = d.group;
        if (c.isArrayCamera) {
          dd = c;
          for (var m = c.cameras, p = 0, n = m.length; p < n; p++) {
            var k = m[p];
            h.layers.test(k.layers) && (ma.viewport(Z.copy(k.viewport)), H.setupLights(k), r(h, a, k, f, g, d));
          }
        } else {
          dd = null, r(h, a, c, f, g, d);
        }
      }
    }
    function r(l, c, u, b, e, d) {
      l.onBeforeRender(I, c, u, b, e, d);
      H = ya.get(c, dd || u);
      l.modelViewMatrix.multiplyMatrices(u.matrixWorldInverse, l.matrixWorld);
      l.normalMatrix.getNormalMatrix(l.modelViewMatrix);
      if (l.isImmediateRenderObject) {
        var h = v(u, c, e, l);
        ma.setMaterial(e);
        da = a = null;
        K = !1;
        g(l, h);
      } else {
        I.renderBufferDirect(u, c, b, e, l, d);
      }
      l.onAfterRender(I, c, u, b, e, d);
      H = ya.get(c, dd || u);
    }
    function t(l, a, c) {
      var u = Sa.get(l), b = H.state.lights, e = b.state.version;
      c = wa.getParameters(l, b.state, H.state.shadowsArray, a, ha.numPlanes, ha.numIntersection, c);
      var f = wa.getProgramCacheKey(c), g = u.program, m = !0;
      if (void 0 === g) {
        l.addEventListener("dispose", d);
      } else {
        if (g.cacheKey !== f) {
          h(l);
        } else {
          if (u.lightsStateVersion !== e) {
            u.lightsStateVersion = e;
          } else {
            if (void 0 !== c.shaderID) {
              return;
            }
          }
          m = !1;
        }
      }
      m && (g = wa.acquireProgram(c, f), u.program = g, u.uniforms = c.uniforms, u.outputEncoding = c.outputEncoding, l.program = g);
      c = g.getAttributes();
      if (l.morphTargets) {
        for (f = l.numSupportedMorphTargets = 0; f < I.maxMorphTargets; f++) {
          0 <= c["morphTarget" + f] && l.numSupportedMorphTargets++;
        }
      }
      if (l.morphNormals) {
        for (f = l.numSupportedMorphNormals = 0; f < I.maxMorphNormals; f++) {
          0 <= c["morphNormal" + f] && l.numSupportedMorphNormals++;
        }
      }
      c = u.uniforms;
      if (!l.isShaderMaterial && !l.isRawShaderMaterial || !0 === l.clipping) {
        u.numClippingPlanes = ha.numPlanes, u.numIntersection = ha.numIntersection, c.clippingPlanes = ha.uniform;
      }
      u.environment = l.isMeshStandardMaterial ? a.environment : null;
      u.fog = a.fog;
      u.needsLights = l.isMeshLambertMaterial || l.isMeshToonMaterial || l.isMeshPhongMaterial || l.isMeshStandardMaterial || l.isShadowMaterial || l.isShaderMaterial && !0 === l.lights;
      u.lightsStateVersion = e;
      u.needsLights && (c.ambientLightColor.value = b.state.ambient, c.lightProbe.value = b.state.probe, c.directionalLights.value = b.state.directional, c.directionalLightShadows.value = b.state.directionalShadow, c.spotLights.value = b.state.spot, c.spotLightShadows.value = b.state.spotShadow, c.rectAreaLights.value = b.state.rectArea, c.pointLights.value = b.state.point, c.pointLightShadows.value = b.state.pointShadow, c.hemisphereLights.value = b.state.hemi, c.directionalShadowMap.value = b.state.directionalShadowMap, 
      c.directionalShadowMatrix.value = b.state.directionalShadowMatrix, c.spotShadowMap.value = b.state.spotShadowMap, c.spotShadowMatrix.value = b.state.spotShadowMatrix, c.pointShadowMap.value = b.state.pointShadowMap, c.pointShadowMatrix.value = b.state.pointShadowMatrix);
      l = u.program.getUniforms();
      l = kc.seqWithValue(l.seq, c);
      u.uniformsList = l;
    }
    function v(l, a, c, u) {
      sa.resetTextureUnits();
      var b = a.fog, e = c.isMeshStandardMaterial ? a.environment : null, d = null === J ? I.outputEncoding : J.texture.encoding, h = Sa.get(c), f = H.state.lights;
      la && (Yd || l !== Q) && ha.setState(c.clippingPlanes, c.clipIntersection, c.clipShadows, l, h, l === Q && c.id === S);
      c.version === h.__version ? void 0 === h.program ? t(c, a, u) : c.fog && h.fog !== b ? t(c, a, u) : h.environment !== e ? t(c, a, u) : h.needsLights && h.lightsStateVersion !== f.state.version ? t(c, a, u) : void 0 === h.numClippingPlanes || h.numClippingPlanes === ha.numPlanes && h.numIntersection === ha.numIntersection ? h.outputEncoding !== d && t(c, a, u) : t(c, a, u) : (t(c, a, u), h.__version = c.version);
      var g = !1, m = !1, p = !1;
      a = h.program;
      d = a.getUniforms();
      f = h.uniforms;
      ma.useProgram(a.program) && (p = m = g = !0);
      c.id !== S && (S = c.id, m = !0);
      if (g || Q !== l) {
        d.setValue(T, "projectionMatrix", l.projectionMatrix);
        ia.logarithmicDepthBuffer && d.setValue(T, "logDepthBufFC", 2 / (Math.log(l.far + 1) / Math.LN2));
        Q !== l && (Q = l, p = m = !0);
        if (c.isShaderMaterial || c.isMeshPhongMaterial || c.isMeshToonMaterial || c.isMeshStandardMaterial || c.envMap) {
          g = d.map.cameraPosition, void 0 !== g && g.setValue(T, X.setFromMatrixPosition(l.matrixWorld));
        }
        (c.isMeshPhongMaterial || c.isMeshToonMaterial || c.isMeshLambertMaterial || c.isMeshBasicMaterial || c.isMeshStandardMaterial || c.isShaderMaterial) && d.setValue(T, "isOrthographic", !0 === l.isOrthographicCamera);
        (c.isMeshPhongMaterial || c.isMeshToonMaterial || c.isMeshLambertMaterial || c.isMeshBasicMaterial || c.isMeshStandardMaterial || c.isShaderMaterial || c.skinning) && d.setValue(T, "viewMatrix", l.matrixWorldInverse);
      }
      if (c.skinning && (d.setOptional(T, u, "bindMatrix"), d.setOptional(T, u, "bindMatrixInverse"), l = u.skeleton)) {
        if (g = l.bones, ia.floatVertexTextures) {
          if (void 0 === l.boneTexture) {
            g = Math.sqrt(4 * g.length);
            g = oa.ceilPowerOfTwo(g);
            g = Math.max(g, 4);
            var n = new Float32Array(g * g * 4);
            n.set(l.boneMatrices);
            var k = new Ja(n, g, g, 1023, 1015);
            l.boneMatrices = n;
            l.boneTexture = k;
            l.boneTextureSize = g;
          }
          d.setValue(T, "boneTexture", l.boneTexture, sa);
          d.setValue(T, "boneTextureSize", l.boneTextureSize);
        } else {
          d.setOptional(T, l, "boneMatrices");
        }
      }
      if (m || h.receiveShadow !== u.receiveShadow) {
        h.receiveShadow = u.receiveShadow, d.setValue(T, "receiveShadow", u.receiveShadow);
      }
      if (m) {
        d.setValue(T, "toneMappingExposure", I.toneMappingExposure);
        d.setValue(T, "toneMappingWhitePoint", I.toneMappingWhitePoint);
        h.needsLights && (m = p, f.ambientLightColor.needsUpdate = m, f.lightProbe.needsUpdate = m, f.directionalLights.needsUpdate = m, f.directionalLightShadows.needsUpdate = m, f.pointLights.needsUpdate = m, f.pointLightShadows.needsUpdate = m, f.spotLights.needsUpdate = m, f.spotLightShadows.needsUpdate = m, f.rectAreaLights.needsUpdate = m, f.hemisphereLights.needsUpdate = m);
        b && c.fog && (f.fogColor.value.copy(b.color), b.isFog ? (f.fogNear.value = b.near, f.fogFar.value = b.far) : b.isFogExp2 && (f.fogDensity.value = b.density));
        if (c.isMeshBasicMaterial) {
          w(f, c);
        } else {
          if (c.isMeshLambertMaterial) {
            w(f, c), c.emissiveMap && (f.emissiveMap.value = c.emissiveMap);
          } else {
            if (c.isMeshToonMaterial) {
              w(f, c), f.specular.value.copy(c.specular), f.shininess.value = Math.max(c.shininess, 1E-4), c.gradientMap && (f.gradientMap.value = c.gradientMap), c.emissiveMap && (f.emissiveMap.value = c.emissiveMap), c.bumpMap && (f.bumpMap.value = c.bumpMap, f.bumpScale.value = c.bumpScale, 1 === c.side && (f.bumpScale.value *= -1)), c.normalMap && (f.normalMap.value = c.normalMap, f.normalScale.value.copy(c.normalScale), 1 === c.side && f.normalScale.value.negate()), c.displacementMap && (f.displacementMap.value = 
              c.displacementMap, f.displacementScale.value = c.displacementScale, f.displacementBias.value = c.displacementBias);
            } else {
              if (c.isMeshPhongMaterial) {
                w(f, c), f.specular.value.copy(c.specular), f.shininess.value = Math.max(c.shininess, 1E-4), c.emissiveMap && (f.emissiveMap.value = c.emissiveMap), c.bumpMap && (f.bumpMap.value = c.bumpMap, f.bumpScale.value = c.bumpScale, 1 === c.side && (f.bumpScale.value *= -1)), c.normalMap && (f.normalMap.value = c.normalMap, f.normalScale.value.copy(c.normalScale), 1 === c.side && f.normalScale.value.negate()), c.displacementMap && (f.displacementMap.value = c.displacementMap, f.displacementScale.value = 
                c.displacementScale, f.displacementBias.value = c.displacementBias);
              } else {
                if (c.isMeshStandardMaterial) {
                  w(f, c, e), c.isMeshPhysicalMaterial ? (y(f, c, e), f.reflectivity.value = c.reflectivity, f.clearcoat.value = c.clearcoat, f.clearcoatRoughness.value = c.clearcoatRoughness, c.sheen && f.sheen.value.copy(c.sheen), c.clearcoatMap && (f.clearcoatMap.value = c.clearcoatMap), c.clearcoatRoughnessMap && (f.clearcoatRoughnessMap.value = c.clearcoatRoughnessMap), c.clearcoatNormalMap && (f.clearcoatNormalScale.value.copy(c.clearcoatNormalScale), f.clearcoatNormalMap.value = c.clearcoatNormalMap, 
                  1 === c.side && f.clearcoatNormalScale.value.negate()), f.transparency.value = c.transparency) : y(f, c, e);
                } else {
                  if (c.isMeshMatcapMaterial) {
                    w(f, c), c.matcap && (f.matcap.value = c.matcap), c.bumpMap && (f.bumpMap.value = c.bumpMap, f.bumpScale.value = c.bumpScale, 1 === c.side && (f.bumpScale.value *= -1)), c.normalMap && (f.normalMap.value = c.normalMap, f.normalScale.value.copy(c.normalScale), 1 === c.side && f.normalScale.value.negate()), c.displacementMap && (f.displacementMap.value = c.displacementMap, f.displacementScale.value = c.displacementScale, f.displacementBias.value = c.displacementBias);
                  } else {
                    if (c.isMeshDepthMaterial) {
                      w(f, c), c.displacementMap && (f.displacementMap.value = c.displacementMap, f.displacementScale.value = c.displacementScale, f.displacementBias.value = c.displacementBias);
                    } else {
                      if (c.isMeshDistanceMaterial) {
                        w(f, c), c.displacementMap && (f.displacementMap.value = c.displacementMap, f.displacementScale.value = c.displacementScale, f.displacementBias.value = c.displacementBias), f.referencePosition.value.copy(c.referencePosition), f.nearDistance.value = c.nearDistance, f.farDistance.value = c.farDistance;
                      } else {
                        if (c.isMeshNormalMaterial) {
                          w(f, c), c.bumpMap && (f.bumpMap.value = c.bumpMap, f.bumpScale.value = c.bumpScale, 1 === c.side && (f.bumpScale.value *= -1)), c.normalMap && (f.normalMap.value = c.normalMap, f.normalScale.value.copy(c.normalScale), 1 === c.side && f.normalScale.value.negate()), c.displacementMap && (f.displacementMap.value = c.displacementMap, f.displacementScale.value = c.displacementScale, f.displacementBias.value = c.displacementBias);
                        } else {
                          if (c.isLineBasicMaterial) {
                            f.diffuse.value.copy(c.color), f.opacity.value = c.opacity, c.isLineDashedMaterial && (f.dashSize.value = c.dashSize, f.totalSize.value = c.dashSize + c.gapSize, f.scale.value = c.scale);
                          } else {
                            if (c.isPointsMaterial) {
                              f.diffuse.value.copy(c.color);
                              f.opacity.value = c.opacity;
                              f.size.value = c.size * Qa;
                              f.scale.value = .5 * U;
                              c.map && (f.map.value = c.map);
                              c.alphaMap && (f.alphaMap.value = c.alphaMap);
                              if (c.map) {
                                var G = c.map;
                              } else {
                                c.alphaMap && (G = c.alphaMap);
                              }
                              void 0 !== G && (!0 === G.matrixAutoUpdate && G.updateMatrix(), f.uvTransform.value.copy(G.matrix));
                            } else {
                              if (c.isSpriteMaterial) {
                                f.diffuse.value.copy(c.color);
                                f.opacity.value = c.opacity;
                                f.rotation.value = c.rotation;
                                c.map && (f.map.value = c.map);
                                c.alphaMap && (f.alphaMap.value = c.alphaMap);
                                if (c.map) {
                                  var q = c.map;
                                } else {
                                  c.alphaMap && (q = c.alphaMap);
                                }
                                void 0 !== q && (!0 === q.matrixAutoUpdate && q.updateMatrix(), f.uvTransform.value.copy(q.matrix));
                              } else {
                                c.isShadowMaterial && (f.color.value.copy(c.color), f.opacity.value = c.opacity);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        void 0 !== f.ltc_1 && (f.ltc_1.value = aa.LTC_1);
        void 0 !== f.ltc_2 && (f.ltc_2.value = aa.LTC_2);
        kc.upload(T, h.uniformsList, f, sa);
        c.isShaderMaterial && (c.uniformsNeedUpdate = !1);
      }
      c.isShaderMaterial && !0 === c.uniformsNeedUpdate && (kc.upload(T, h.uniformsList, f, sa), c.uniformsNeedUpdate = !1);
      c.isSpriteMaterial && d.setValue(T, "center", u.center);
      d.setValue(T, "modelViewMatrix", u.modelViewMatrix);
      d.setValue(T, "normalMatrix", u.normalMatrix);
      d.setValue(T, "modelMatrix", u.matrixWorld);
      return a;
    }
    function w(l, a, c) {
      l.opacity.value = a.opacity;
      a.color && l.diffuse.value.copy(a.color);
      a.emissive && l.emissive.value.copy(a.emissive).multiplyScalar(a.emissiveIntensity);
      a.map && (l.map.value = a.map);
      a.alphaMap && (l.alphaMap.value = a.alphaMap);
      a.specularMap && (l.specularMap.value = a.specularMap);
      if (c = a.envMap || c) {
        l.envMap.value = c, l.flipEnvMap.value = c.isCubeTexture ? -1 : 1, l.reflectivity.value = a.reflectivity, l.refractionRatio.value = a.refractionRatio, l.maxMipLevel.value = Sa.get(c).__maxMipLevel;
      }
      a.lightMap && (l.lightMap.value = a.lightMap, l.lightMapIntensity.value = a.lightMapIntensity);
      a.aoMap && (l.aoMap.value = a.aoMap, l.aoMapIntensity.value = a.aoMapIntensity);
      if (a.map) {
        var u = a.map;
      } else {
        a.specularMap ? u = a.specularMap : a.displacementMap ? u = a.displacementMap : a.normalMap ? u = a.normalMap : a.bumpMap ? u = a.bumpMap : a.roughnessMap ? u = a.roughnessMap : a.metalnessMap ? u = a.metalnessMap : a.alphaMap ? u = a.alphaMap : a.emissiveMap && (u = a.emissiveMap);
      }
      void 0 !== u && (u.isWebGLRenderTarget && (u = u.texture), !0 === u.matrixAutoUpdate && u.updateMatrix(), l.uvTransform.value.copy(u.matrix));
      if (a.aoMap) {
        var b = a.aoMap;
      } else {
        a.lightMap && (b = a.lightMap);
      }
      void 0 !== b && (b.isWebGLRenderTarget && (b = b.texture), !0 === b.matrixAutoUpdate && b.updateMatrix(), l.uv2Transform.value.copy(b.matrix));
    }
    function y(l, a, c) {
      l.roughness.value = a.roughness;
      l.metalness.value = a.metalness;
      a.roughnessMap && (l.roughnessMap.value = a.roughnessMap);
      a.metalnessMap && (l.metalnessMap.value = a.metalnessMap);
      a.emissiveMap && (l.emissiveMap.value = a.emissiveMap);
      a.bumpMap && (l.bumpMap.value = a.bumpMap, l.bumpScale.value = a.bumpScale, 1 === a.side && (l.bumpScale.value *= -1));
      a.normalMap && (l.normalMap.value = a.normalMap, l.normalScale.value.copy(a.normalScale), 1 === a.side && l.normalScale.value.negate());
      a.displacementMap && (l.displacementMap.value = a.displacementMap, l.displacementScale.value = a.displacementScale, l.displacementBias.value = a.displacementBias);
      if (a.envMap || c) {
        l.envMapIntensity.value = a.envMapIntensity;
      }
    }
    l = l || {};
    var x = void 0 !== l.canvas ? l.canvas : document.createElementNS("http://www.w3.org/1999/xhtml", "canvas"), ba = void 0 !== l.context ? l.context : null, C = void 0 !== l.alpha ? l.alpha : !1, A = void 0 !== l.depth ? l.depth : !0, D = void 0 !== l.stencil ? l.stencil : !0, na = void 0 !== l.antialias ? l.antialias : !1, B = void 0 !== l.premultipliedAlpha ? l.premultipliedAlpha : !0, F = void 0 !== l.preserveDrawingBuffer ? l.preserveDrawingBuffer : !1, E = void 0 !== l.powerPreference ? l.powerPreference : 
    "default", Ha = void 0 !== l.failIfMajorPerformanceCaveat ? l.failIfMajorPerformanceCaveat : !1, qa = null, H = null;
    this.domElement = x;
    this.debug = {checkShaderErrors:!0};
    this.sortObjects = this.autoClearStencil = this.autoClearDepth = this.autoClearColor = this.autoClear = !0;
    this.clippingPlanes = [];
    this.localClippingEnabled = !1;
    this.gammaFactor = 2;
    this.outputEncoding = 3E3;
    this.physicallyCorrectLights = !1;
    this.toneMapping = 0;
    this.toneMappingWhitePoint = this.toneMappingExposure = 1;
    this.maxMorphTargets = 8;
    this.maxMorphNormals = 4;
    var I = this, M = !1, P = null, O = 0, L = 0, J = null, N = null, S = -1;
    var da = a = null;
    var K = !1;
    var Q = null, dd = null, Z = new f, R = new f, Xd = null, Rb = x.width, U = x.height, Qa = 1, V = null, Ze = null, hc = new f(0, 0, Rb, U), ic = new f(0, 0, Rb, U), ea = !1, W = new Ga, ha = new Ya, la = !1, Yd = !1, Cc = new n, X = new m;
    try {
      C = {alpha:C, depth:A, stencil:D, antialias:na, premultipliedAlpha:B, preserveDrawingBuffer:F, powerPreference:E, failIfMajorPerformanceCaveat:Ha, xrCompatible:!0};
      x.addEventListener("webglcontextlost", b, !1);
      x.addEventListener("webglcontextrestored", e, !1);
      var T = ba || x.getContext("webgl", C) || x.getContext("experimental-webgl", C);
      if (null === T) {
        if (null !== x.getContext("webgl")) {
          throw Error("Error creating WebGL context with your selected attributes.");
        }
        throw Error("Error creating WebGL context.");
      }
      void 0 === T.getShaderPrecisionFormat && (T.getShaderPrecisionFormat = function() {
        return {rangeMin:1, rangeMax:1, precision:1};
      });
    } catch ($h) {
      throw console.error("THREE.WebGLRenderer: " + $h.message), $h;
    }
    var Ba, ia, ma, ka, Sa, sa, jc, Zd, va, wa, ed, ya, Fb, fa, pa, $e, sb;
    c();
    var ra = new Zh(I, T);
    this.xr = ra;
    var ua = new Xh(I, va, ia.maxTextureSize);
    this.shadowMap = ua;
    this.getContext = function() {
      return T;
    };
    this.getContextAttributes = function() {
      return T.getContextAttributes();
    };
    this.forceContextLoss = function() {
      var l = Ba.get("WEBGL_lose_context");
      l && l.loseContext();
    };
    this.forceContextRestore = function() {
      var l = Ba.get("WEBGL_lose_context");
      l && l.restoreContext();
    };
    this.getPixelRatio = function() {
      return Qa;
    };
    this.setPixelRatio = function(l) {
      void 0 !== l && (Qa = l, this.setSize(Rb, U, !1));
    };
    this.getSize = function(l) {
      void 0 === l && (console.warn("WebGLRenderer: .getsize() now requires a Vector2 as an argument"), l = new k);
      return l.set(Rb, U);
    };
    this.setSize = function(l, a, c) {
      ra.isPresenting ? console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.") : (Rb = l, U = a, x.width = Math.floor(l * Qa), x.height = Math.floor(a * Qa), !1 !== c && (x.style.width = l + "px", x.style.height = a + "px"), this.setViewport(0, 0, l, a));
    };
    this.getDrawingBufferSize = function(l) {
      void 0 === l && (console.warn("WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument"), l = new k);
      return l.set(Rb * Qa, U * Qa).floor();
    };
    this.setDrawingBufferSize = function(l, a, c) {
      Rb = l;
      U = a;
      Qa = c;
      x.width = Math.floor(l * c);
      x.height = Math.floor(a * c);
      this.setViewport(0, 0, l, a);
    };
    this.getCurrentViewport = function(l) {
      void 0 === l && (console.warn("WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument"), l = new f);
      return l.copy(Z);
    };
    this.getViewport = function(l) {
      return l.copy(hc);
    };
    this.setViewport = function(l, a, c, u) {
      l.isVector4 ? hc.set(l.x, l.y, l.z, l.w) : hc.set(l, a, c, u);
      ma.viewport(Z.copy(hc).multiplyScalar(Qa).floor());
    };
    this.getScissor = function(l) {
      return l.copy(ic);
    };
    this.setScissor = function(l, a, c, u) {
      l.isVector4 ? ic.set(l.x, l.y, l.z, l.w) : ic.set(l, a, c, u);
      ma.scissor(R.copy(ic).multiplyScalar(Qa).floor());
    };
    this.getScissorTest = function() {
      return ea;
    };
    this.setScissorTest = function(l) {
      ma.setScissorTest(ea = l);
    };
    this.setOpaqueSort = function(l) {
      V = l;
    };
    this.setTransparentSort = function(l) {
      Ze = l;
    };
    this.getClearColor = function() {
      return Fb.getClearColor();
    };
    this.setClearColor = function() {
      Fb.setClearColor.apply(Fb, arguments);
    };
    this.getClearAlpha = function() {
      return Fb.getClearAlpha();
    };
    this.setClearAlpha = function() {
      Fb.setClearAlpha.apply(Fb, arguments);
    };
    this.clear = function(l, a, c) {
      var u = 0;
      if (void 0 === l || l) {
        u |= 16384;
      }
      if (void 0 === a || a) {
        u |= 256;
      }
      if (void 0 === c || c) {
        u |= 1024;
      }
      T.clear(u);
    };
    this.clearColor = function() {
      this.clear(!0, !1, !1);
    };
    this.clearDepth = function() {
      this.clear(!1, !0, !1);
    };
    this.clearStencil = function() {
      this.clear(!1, !1, !0);
    };
    this.dispose = function() {
      x.removeEventListener("webglcontextlost", b, !1);
      x.removeEventListener("webglcontextrestored", e, !1);
      ed.dispose();
      ya.dispose();
      Sa.dispose();
      va.dispose();
      ra.dispose();
      za.stop();
    };
    this.renderBufferImmediate = function(l, a) {
      ma.initAttributes();
      var c = Sa.get(l);
      l.hasPositions && !c.position && (c.position = T.createBuffer());
      l.hasNormals && !c.normal && (c.normal = T.createBuffer());
      l.hasUvs && !c.uv && (c.uv = T.createBuffer());
      l.hasColors && !c.color && (c.color = T.createBuffer());
      a = a.getAttributes();
      l.hasPositions && (T.bindBuffer(34962, c.position), T.bufferData(34962, l.positionArray, 35048), ma.enableAttribute(a.position), T.vertexAttribPointer(a.position, 3, 5126, !1, 0, 0));
      l.hasNormals && (T.bindBuffer(34962, c.normal), T.bufferData(34962, l.normalArray, 35048), ma.enableAttribute(a.normal), T.vertexAttribPointer(a.normal, 3, 5126, !1, 0, 0));
      l.hasUvs && (T.bindBuffer(34962, c.uv), T.bufferData(34962, l.uvArray, 35048), ma.enableAttribute(a.uv), T.vertexAttribPointer(a.uv, 2, 5126, !1, 0, 0));
      l.hasColors && (T.bindBuffer(34962, c.color), T.bufferData(34962, l.colorArray, 35048), ma.enableAttribute(a.color), T.vertexAttribPointer(a.color, 3, 5126, !1, 0, 0));
      ma.disableUnusedAttributes();
      T.drawArrays(4, 0, l.count);
      l.count = 0;
    };
    var Aa = new z;
    this.renderBufferDirect = function(l, c, u, b, e, d) {
      null === c && (c = Aa);
      var f = e.isMesh && 0 > e.matrixWorld.determinant(), h = v(l, c, b, e);
      ma.setMaterial(b, f);
      var g = !1;
      if (a !== u.id || da !== h.id || K !== (!0 === b.wireframe)) {
        a = u.id, da = h.id, K = !0 === b.wireframe, g = !0;
      }
      if (b.morphTargets || b.morphNormals) {
        fa.update(e, u, b, h), g = !0;
      }
      !0 === e.isInstancedMesh && (g = !0);
      l = u.index;
      c = u.attributes.position;
      if (null === l) {
        if (void 0 === c || 0 === c.count) {
          return;
        }
      } else {
        if (0 === l.count) {
          return;
        }
      }
      var m = 1;
      !0 === b.wireframe && (l = Zd.getWireframeAttribute(u), m = 2);
      f = pa;
      if (null !== l) {
        var p = jc.get(l);
        f = $e;
        f.setIndex(p);
      }
      if (g) {
        if (!1 !== ia.isWebGL2 || !e.isInstancedMesh && !u.isInstancedBufferGeometry || null !== Ba.get("ANGLE_instanced_arrays")) {
          ma.initAttributes();
          g = u.attributes;
          h = h.getAttributes();
          var n = b.defaultAttributeValues;
          for (x in h) {
            var k = h[x];
            if (0 <= k) {
              var G = g[x];
              if (void 0 !== G) {
                var q = G.normalized, r = G.itemSize, t = jc.get(G);
                if (void 0 !== t) {
                  var Y = t.buffer, z = t.type;
                  t = t.bytesPerElement;
                  if (G.isInterleavedBufferAttribute) {
                    var w = G.data, y = w.stride;
                    G = G.offset;
                    w && w.isInstancedInterleavedBuffer ? (ma.enableAttributeAndDivisor(k, w.meshPerAttribute), void 0 === u.maxInstancedCount && (u.maxInstancedCount = w.meshPerAttribute * w.count)) : ma.enableAttribute(k);
                    T.bindBuffer(34962, Y);
                    ma.vertexAttribPointer(k, r, z, q, y * t, G * t);
                  } else {
                    G.isInstancedBufferAttribute ? (ma.enableAttributeAndDivisor(k, G.meshPerAttribute), void 0 === u.maxInstancedCount && (u.maxInstancedCount = G.meshPerAttribute * G.count)) : ma.enableAttribute(k), T.bindBuffer(34962, Y), ma.vertexAttribPointer(k, r, z, q, 0, 0);
                  }
                }
              } else {
                if ("instanceMatrix" === x) {
                  t = jc.get(e.instanceMatrix), void 0 !== t && (Y = t.buffer, z = t.type, ma.enableAttributeAndDivisor(k + 0, 1), ma.enableAttributeAndDivisor(k + 1, 1), ma.enableAttributeAndDivisor(k + 2, 1), ma.enableAttributeAndDivisor(k + 3, 1), T.bindBuffer(34962, Y), T.vertexAttribPointer(k + 0, 4, z, !1, 64, 0), T.vertexAttribPointer(k + 1, 4, z, !1, 64, 16), T.vertexAttribPointer(k + 2, 4, z, !1, 64, 32), T.vertexAttribPointer(k + 3, 4, z, !1, 64, 48));
                } else {
                  if (void 0 !== n && (q = n[x], void 0 !== q)) {
                    switch(q.length) {
                      case 2:
                        T.vertexAttrib2fv(k, q);
                        break;
                      case 3:
                        T.vertexAttrib3fv(k, q);
                        break;
                      case 4:
                        T.vertexAttrib4fv(k, q);
                        break;
                      default:
                        T.vertexAttrib1fv(k, q);
                    }
                  }
                }
              }
            }
          }
          ma.disableUnusedAttributes();
        }
        null !== l && T.bindBuffer(34963, p.buffer);
      }
      var x = u.drawRange.start * m;
      g = null !== d ? d.start * m : 0;
      p = Math.max(x, g);
      d = Math.max(0, Math.min(null !== l ? l.count : c.count, x + u.drawRange.count * m, g + (null !== d ? d.count * m : Infinity)) - 1 - p + 1);
      0 !== d && (e.isMesh ? !0 === b.wireframe ? (ma.setLineWidth(b.wireframeLinewidth * (null === J ? Qa : 1)), f.setMode(1)) : f.setMode(4) : e.isLine ? (b = b.linewidth, void 0 === b && (b = 1), ma.setLineWidth(b * (null === J ? Qa : 1)), e.isLineSegments ? f.setMode(1) : e.isLineLoop ? f.setMode(2) : f.setMode(3)) : e.isPoints ? f.setMode(0) : e.isSprite && f.setMode(4), e.isInstancedMesh ? f.renderInstances(u, p, d, e.count) : u.isInstancedBufferGeometry ? f.renderInstances(u, p, d, u.maxInstancedCount) : 
      f.render(p, d));
    };
    this.compile = function(l, a) {
      H = ya.get(l, a);
      H.init();
      l.traverse(function(l) {
        l.isLight && (H.pushLight(l), l.castShadow && H.pushShadow(l));
      });
      H.setupLights(a);
      var c = {};
      l.traverse(function(a) {
        if (a.material) {
          if (Array.isArray(a.material)) {
            for (var u = 0; u < a.material.length; u++) {
              !1 === a.material[u].uuid in c && (t(a.material[u], l, a), c[a.material[u].uuid] = !0);
            }
          } else {
            !1 === a.material.uuid in c && (t(a.material, l, a), c[a.material.uuid] = !0);
          }
        }
      });
    };
    var xa = null, za = new ta;
    za.setAnimationLoop(function(l) {
      ra.isPresenting || xa && xa(l);
    });
    "undefined" !== typeof window && za.setContext(window);
    this.setAnimationLoop = function(l) {
      xa = l;
      ra.setAnimationLoop(l);
      za.start();
    };
    this.render = function(l, c, u, b) {
      if (void 0 !== u) {
        console.warn("THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.");
        var e = u;
      }
      if (void 0 !== b) {
        console.warn("THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.");
        var d = b;
      }
      c && c.isCamera ? M || (da = a = null, K = !1, S = -1, Q = null, !0 === l.autoUpdate && l.updateMatrixWorld(), null === c.parent && c.updateMatrixWorld(), ra.enabled && ra.isPresenting && (c = ra.getCamera(c)), l.onBeforeRender(I, l, c, e || J), H = ya.get(l, c), H.init(), Cc.multiplyMatrices(c.projectionMatrix, c.matrixWorldInverse), W.setFromProjectionMatrix(Cc), Yd = this.localClippingEnabled, la = ha.init(this.clippingPlanes, Yd, c), qa = ed.get(l, c), qa.init(), p(l, c, 0, I.sortObjects), 
      qa.finish(), !0 === I.sortObjects && qa.sort(V, Ze), la && ha.beginShadows(), ua.render(H.state.shadowsArray, l, c), H.setupLights(c), la && ha.endShadows(), this.info.autoReset && this.info.reset(), void 0 !== e && this.setRenderTarget(e), Fb.render(qa, l, c, d), u = qa.opaque, b = qa.transparent, l.overrideMaterial ? (e = l.overrideMaterial, u.length && q(u, l, c, e), b.length && q(b, l, c, e)) : (u.length && q(u, l, c), b.length && q(b, l, c)), l.onAfterRender(I, l, c), null !== J && (sa.updateRenderTargetMipmap(J), 
      sa.updateMultisampleRenderTarget(J)), ma.buffers.depth.setTest(!0), ma.buffers.depth.setMask(!0), ma.buffers.color.setMask(!0), ma.setPolygonOffset(!1), H = qa = null) : console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
    };
    this.setFramebuffer = function(l) {
      P !== l && null === J && T.bindFramebuffer(36160, l);
      P = l;
    };
    this.getActiveCubeFace = function() {
      return O;
    };
    this.getActiveMipmapLevel = function() {
      return L;
    };
    this.getRenderTarget = function() {
      return J;
    };
    this.setRenderTarget = function(l, a, c) {
      J = l;
      O = a;
      L = c;
      l && void 0 === Sa.get(l).__webglFramebuffer && sa.setupRenderTarget(l);
      var u = P, b = !1;
      l ? (u = Sa.get(l).__webglFramebuffer, l.isWebGLCubeRenderTarget ? (u = u[a || 0], b = !0) : u = l.isWebGLMultisampleRenderTarget ? Sa.get(l).__webglMultisampledFramebuffer : u, Z.copy(l.viewport), R.copy(l.scissor), Xd = l.scissorTest) : (Z.copy(hc).multiplyScalar(Qa).floor(), R.copy(ic).multiplyScalar(Qa).floor(), Xd = ea);
      N !== u && (T.bindFramebuffer(36160, u), N = u);
      ma.viewport(Z);
      ma.scissor(R);
      ma.setScissorTest(Xd);
      b && (l = Sa.get(l.texture), T.framebufferTexture2D(36160, 36064, 34069 + (a || 0), l.__webglTexture, c || 0));
    };
    this.readRenderTargetPixels = function(l, a, c, u, b, e, d) {
      if (l && l.isWebGLRenderTarget) {
        var f = Sa.get(l).__webglFramebuffer;
        l.isWebGLCubeRenderTarget && void 0 !== d && (f = f[d]);
        if (f) {
          d = !1;
          f !== N && (T.bindFramebuffer(36160, f), d = !0);
          try {
            var h = l.texture, g = h.format, m = h.type;
            1023 !== g && sb.convert(g) !== T.getParameter(35739) ? console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.") : 1009 === m || sb.convert(m) === T.getParameter(35738) || 1015 === m && (ia.isWebGL2 || Ba.get("OES_texture_float") || Ba.get("WEBGL_color_buffer_float")) || 1016 === m && (ia.isWebGL2 ? Ba.get("EXT_color_buffer_float") : Ba.get("EXT_color_buffer_half_float")) ? 36053 === T.checkFramebufferStatus(36160) ? 0 <= 
            a && a <= l.width - u && 0 <= c && c <= l.height - b && T.readPixels(a, c, u, b, sb.convert(g), sb.convert(m), e) : console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.") : console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
          } finally {
            d && T.bindFramebuffer(36160, N);
          }
        }
      } else {
        console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
      }
    };
    this.copyFramebufferToTexture = function(l, a, c) {
      void 0 === c && (c = 0);
      var u = Math.pow(2, -c), b = Math.floor(a.image.width * u);
      u = Math.floor(a.image.height * u);
      var e = sb.convert(a.format);
      sa.setTexture2D(a, 0);
      T.copyTexImage2D(3553, c, e, l.x, l.y, b, u, 0);
      ma.unbindTexture();
    };
    this.copyTextureToTexture = function(l, a, c, u) {
      void 0 === u && (u = 0);
      var b = a.image.width, e = a.image.height, d = sb.convert(c.format), f = sb.convert(c.type);
      sa.setTexture2D(c, 0);
      a.isDataTexture ? T.texSubImage2D(3553, u, l.x, l.y, b, e, d, f, a.image.data) : a.isCompressedTexture ? T.compressedTexSubImage2D(3553, u, l.x, l.y, a.mipmaps[0].width, a.mipmaps[0].height, d, a.mipmaps[0].data) : T.texSubImage2D(3553, u, l.x, l.y, d, f, a.image);
      0 === u && c.generateMipmaps && T.generateMipmap(3553);
      ma.unbindTexture();
    };
    this.initTexture = function(l) {
      sa.setTexture2D(l, 0);
      ma.unbindTexture();
    };
    "undefined" !== typeof __THREE_DEVTOOLS__ && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", {detail:this}));
  }
  function cf(l, a) {
    this.name = "";
    this.color = new A(l);
    this.density = void 0 !== a ? a : 2.5E-4;
  }
  function df(l, a, c) {
    this.name = "";
    this.color = new A(l);
    this.near = void 0 !== a ? a : 1;
    this.far = void 0 !== c ? c : 1E3;
  }
  function Sb(l, a) {
    this.array = l;
    this.stride = a;
    this.count = void 0 !== l ? l.length / a : 0;
    this.usage = 35044;
    this.updateRange = {offset:0, count:-1};
    this.version = 0;
  }
  function ce(l, a, c, b) {
    this.data = l;
    this.itemSize = a;
    this.offset = c;
    this.normalized = !0 === b;
  }
  function nc(l) {
    I.call(this);
    this.type = "SpriteMaterial";
    this.color = new A(16777215);
    this.alphaMap = this.map = null;
    this.rotation = 0;
    this.transparent = this.sizeAttenuation = !0;
    this.setValues(l);
  }
  function de(l) {
    t.call(this);
    this.type = "Sprite";
    if (void 0 === gd) {
      gd = new N;
      var a = new Float32Array([-.5, -.5, 0, 0, 0, .5, -.5, 0, 1, 0, .5, .5, 0, 1, 1, -.5, .5, 0, 0, 1]);
      a = new Sb(a, 5);
      gd.setIndex([0, 1, 2, 0, 2, 3]);
      gd.setAttribute("position", new ce(a, 3, 0, !1));
      gd.setAttribute("uv", new ce(a, 2, 3, !1));
    }
    this.geometry = gd;
    this.material = void 0 !== l ? l : new nc;
    this.center = new k(.5, .5);
  }
  function ef(l, a, c, b, e, d) {
    hd.subVectors(l, c).addScalar(.5).multiply(b);
    void 0 !== e ? (ee.x = d * hd.x - e * hd.y, ee.y = e * hd.x + d * hd.y) : ee.copy(hd);
    l.copy(a);
    l.x += ee.x;
    l.y += ee.y;
    l.applyMatrix4(ai);
  }
  function fe() {
    t.call(this);
    this._currentLevel = 0;
    this.type = "LOD";
    Object.defineProperties(this, {levels:{enumerable:!0, value:[]}});
    this.autoUpdate = !0;
  }
  function ff(l, a) {
    l && l.isGeometry && console.error("THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
    V.call(this, l, a);
    this.type = "SkinnedMesh";
    this.bindMode = "attached";
    this.bindMatrix = new n;
    this.bindMatrixInverse = new n;
  }
  function gf(l, a) {
    l = l || [];
    this.bones = l.slice(0);
    this.boneMatrices = new Float32Array(16 * this.bones.length);
    this.frame = -1;
    if (void 0 === a) {
      this.calculateInverses();
    } else {
      if (this.bones.length === a.length) {
        this.boneInverses = a.slice(0);
      } else {
        for (console.warn("THREE.Skeleton boneInverses is the wrong length."), this.boneInverses = [], l = 0, a = this.bones.length; l < a; l++) {
          this.boneInverses.push(new n);
        }
      }
    }
  }
  function vg() {
    t.call(this);
    this.type = "Bone";
  }
  function hf(l, a, c) {
    V.call(this, l, a);
    this.instanceMatrix = new J(new Float32Array(16 * c), 16);
    this.count = c;
    this.frustumCulled = !1;
  }
  function za(l) {
    I.call(this);
    this.type = "LineBasicMaterial";
    this.color = new A(16777215);
    this.linewidth = 1;
    this.linejoin = this.linecap = "round";
    this.setValues(l);
  }
  function eb(l, a, c) {
    1 === c && console.error("THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead.");
    t.call(this);
    this.type = "Line";
    this.geometry = void 0 !== l ? l : new N;
    this.material = void 0 !== a ? a : new za;
  }
  function Da(l, a) {
    eb.call(this, l, a);
    this.type = "LineSegments";
  }
  function jf(l, a) {
    eb.call(this, l, a);
    this.type = "LineLoop";
  }
  function tb(l) {
    I.call(this);
    this.type = "PointsMaterial";
    this.color = new A(16777215);
    this.alphaMap = this.map = null;
    this.size = 1;
    this.sizeAttenuation = !0;
    this.morphTargets = !1;
    this.setValues(l);
  }
  function id(l, a) {
    t.call(this);
    this.type = "Points";
    this.geometry = void 0 !== l ? l : new N;
    this.material = void 0 !== a ? a : new tb;
    this.updateMorphTargets();
  }
  function wg(l, a, c, b, e, d, f) {
    var u = xg.distanceSqToPoint(l);
    u < c && (c = new m, xg.closestPointToPoint(l, c), c.applyMatrix4(b), l = e.ray.origin.distanceTo(c), l < e.near || l > e.far || d.push({distance:l, distanceToRay:Math.sqrt(u), point:c, index:a, face:null, object:f}));
  }
  function yg(l, a, c, b, e, d, f, h, m) {
    g.call(this, l, a, c, b, e, d, f, h, m);
    this.format = void 0 !== f ? f : 1022;
    this.minFilter = void 0 !== d ? d : 1006;
    this.magFilter = void 0 !== e ? e : 1006;
    this.generateMipmaps = !1;
  }
  function jd(l, a, c, b, e, d, f, h, m, p, k, n) {
    g.call(this, null, d, f, h, m, p, b, e, k, n);
    this.image = {width:a, height:c};
    this.mipmaps = l;
    this.generateMipmaps = this.flipY = !1;
  }
  function ge(l, a, c, b, e, d, f, h, m) {
    g.call(this, l, a, c, b, e, d, f, h, m);
    this.needsUpdate = !0;
  }
  function he(l, a, c, b, e, d, f, h, m, p) {
    p = void 0 !== p ? p : 1026;
    if (1026 !== p && 1027 !== p) {
      throw Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
    }
    void 0 === c && 1026 === p && (c = 1012);
    void 0 === c && 1027 === p && (c = 1020);
    g.call(this, null, b, e, d, f, h, p, c, m);
    this.image = {width:l, height:a};
    this.magFilter = void 0 !== f ? f : 1003;
    this.minFilter = void 0 !== h ? h : 1003;
    this.generateMipmaps = this.flipY = !1;
  }
  function kd(l) {
    N.call(this);
    this.type = "WireframeGeometry";
    var a = [], c, b, e, d = [0, 0], f = {}, h = ["a", "b", "c"];
    if (l && l.isGeometry) {
      var g = l.faces;
      var p = 0;
      for (b = g.length; p < b; p++) {
        var k = g[p];
        for (c = 0; 3 > c; c++) {
          var n = k[h[c]];
          var q = k[h[(c + 1) % 3]];
          d[0] = Math.min(n, q);
          d[1] = Math.max(n, q);
          n = d[0] + "," + d[1];
          void 0 === f[n] && (f[n] = {index1:d[0], index2:d[1]});
        }
      }
      for (n in f) {
        p = f[n], h = l.vertices[p.index1], a.push(h.x, h.y, h.z), h = l.vertices[p.index2], a.push(h.x, h.y, h.z);
      }
    } else {
      if (l && l.isBufferGeometry) {
        if (h = new m, null !== l.index) {
          g = l.attributes.position;
          k = l.index;
          var r = l.groups;
          0 === r.length && (r = [{start:0, count:k.count, materialIndex:0}]);
          l = 0;
          for (e = r.length; l < e; ++l) {
            for (p = r[l], c = p.start, b = p.count, p = c, b = c + b; p < b; p += 3) {
              for (c = 0; 3 > c; c++) {
                n = k.getX(p + c), q = k.getX(p + (c + 1) % 3), d[0] = Math.min(n, q), d[1] = Math.max(n, q), n = d[0] + "," + d[1], void 0 === f[n] && (f[n] = {index1:d[0], index2:d[1]});
              }
            }
          }
          for (n in f) {
            p = f[n], h.fromBufferAttribute(g, p.index1), a.push(h.x, h.y, h.z), h.fromBufferAttribute(g, p.index2), a.push(h.x, h.y, h.z);
          }
        } else {
          for (g = l.attributes.position, p = 0, b = g.count / 3; p < b; p++) {
            for (c = 0; 3 > c; c++) {
              f = 3 * p + c, h.fromBufferAttribute(g, f), a.push(h.x, h.y, h.z), f = 3 * p + (c + 1) % 3, h.fromBufferAttribute(g, f), a.push(h.x, h.y, h.z);
            }
          }
        }
      }
    }
    this.setAttribute("position", new Q(a, 3));
  }
  function ie(l, a, c) {
    W.call(this);
    this.type = "ParametricGeometry";
    this.parameters = {func:l, slices:a, stacks:c};
    this.fromBufferGeometry(new ld(l, a, c));
    this.mergeVertices();
  }
  function ld(l, a, c) {
    N.call(this);
    this.type = "ParametricBufferGeometry";
    this.parameters = {func:l, slices:a, stacks:c};
    var u = [], b = [], e = [], d = [], f = new m, h = new m, g = new m, p = new m, n = new m, k, G;
    3 > l.length && console.error("THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.");
    var q = a + 1;
    for (k = 0; k <= c; k++) {
      var r = k / c;
      for (G = 0; G <= a; G++) {
        var t = G / a;
        l(t, r, h);
        b.push(h.x, h.y, h.z);
        0 <= t - 1E-5 ? (l(t - 1E-5, r, g), p.subVectors(h, g)) : (l(t + 1E-5, r, g), p.subVectors(g, h));
        0 <= r - 1E-5 ? (l(t, r - 1E-5, g), n.subVectors(h, g)) : (l(t, r + 1E-5, g), n.subVectors(g, h));
        f.crossVectors(p, n).normalize();
        e.push(f.x, f.y, f.z);
        d.push(t, r);
      }
    }
    for (k = 0; k < c; k++) {
      for (G = 0; G < a; G++) {
        l = k * q + G + 1, f = (k + 1) * q + G + 1, h = (k + 1) * q + G, u.push(k * q + G, l, h), u.push(l, f, h);
      }
    }
    this.setIndex(u);
    this.setAttribute("position", new Q(b, 3));
    this.setAttribute("normal", new Q(e, 3));
    this.setAttribute("uv", new Q(d, 2));
  }
  function je(l, a, c, b) {
    W.call(this);
    this.type = "PolyhedronGeometry";
    this.parameters = {vertices:l, indices:a, radius:c, detail:b};
    this.fromBufferGeometry(new ab(l, a, c, b));
    this.mergeVertices();
  }
  function ab(l, a, c, b) {
    function u(l) {
      f.push(l.x, l.y, l.z);
    }
    function e(a, c) {
      a *= 3;
      c.x = l[a + 0];
      c.y = l[a + 1];
      c.z = l[a + 2];
    }
    function d(l, a, c, u) {
      0 > u && 1 === l.x && (h[a] = l.x - 1);
      0 === c.x && 0 === c.z && (h[a] = u / 2 / Math.PI + .5);
    }
    N.call(this);
    this.type = "PolyhedronBufferGeometry";
    this.parameters = {vertices:l, indices:a, radius:c, detail:b};
    c = c || 1;
    b = b || 0;
    var f = [], h = [];
    (function(l) {
      for (var c = new m, b = new m, d = new m, f = 0; f < a.length; f += 3) {
        e(a[f + 0], c);
        e(a[f + 1], b);
        e(a[f + 2], d);
        var h, g, p = c, k = b, n = d, G = Math.pow(2, l), q = [];
        for (g = 0; g <= G; g++) {
          q[g] = [];
          var r = p.clone().lerp(n, g / G), t = k.clone().lerp(n, g / G), v = G - g;
          for (h = 0; h <= v; h++) {
            q[g][h] = 0 === h && g === G ? r : r.clone().lerp(t, h / v);
          }
        }
        for (g = 0; g < G; g++) {
          for (h = 0; h < 2 * (G - g) - 1; h++) {
            p = Math.floor(h / 2), 0 === h % 2 ? (u(q[g][p + 1]), u(q[g + 1][p]), u(q[g][p])) : (u(q[g][p + 1]), u(q[g + 1][p + 1]), u(q[g + 1][p]));
          }
        }
      }
    })(b);
    (function(l) {
      for (var a = new m, c = 0; c < f.length; c += 3) {
        a.x = f[c + 0], a.y = f[c + 1], a.z = f[c + 2], a.normalize().multiplyScalar(l), f[c + 0] = a.x, f[c + 1] = a.y, f[c + 2] = a.z;
      }
    })(c);
    (function() {
      for (var l = new m, a = 0; a < f.length; a += 3) {
        l.x = f[a + 0], l.y = f[a + 1], l.z = f[a + 2], h.push(Math.atan2(l.z, -l.x) / 2 / Math.PI + .5, 1 - (Math.atan2(-l.y, Math.sqrt(l.x * l.x + l.z * l.z)) / Math.PI + .5));
      }
      l = new m;
      a = new m;
      for (var c = new m, u = new m, b = new k, e = new k, g = new k, p = 0, n = 0; p < f.length; p += 9, n += 6) {
        l.set(f[p + 0], f[p + 1], f[p + 2]);
        a.set(f[p + 3], f[p + 4], f[p + 5]);
        c.set(f[p + 6], f[p + 7], f[p + 8]);
        b.set(h[n + 0], h[n + 1]);
        e.set(h[n + 2], h[n + 3]);
        g.set(h[n + 4], h[n + 5]);
        u.copy(l).add(a).add(c).divideScalar(3);
        var G = Math.atan2(u.z, -u.x);
        d(b, n + 0, l, G);
        d(e, n + 2, a, G);
        d(g, n + 4, c, G);
      }
      for (l = 0; l < h.length; l += 6) {
        a = h[l + 0], c = h[l + 2], u = h[l + 4], b = Math.min(a, c, u), .9 < Math.max(a, c, u) && .1 > b && (.2 > a && (h[l + 0] += 1), .2 > c && (h[l + 2] += 1), .2 > u && (h[l + 4] += 1));
      }
    })();
    this.setAttribute("position", new Q(f, 3));
    this.setAttribute("normal", new Q(f.slice(), 3));
    this.setAttribute("uv", new Q(h, 2));
    0 === b ? this.computeVertexNormals() : this.normalizeNormals();
  }
  function ke(l, a) {
    W.call(this);
    this.type = "TetrahedronGeometry";
    this.parameters = {radius:l, detail:a};
    this.fromBufferGeometry(new md(l, a));
    this.mergeVertices();
  }
  function md(l, a) {
    ab.call(this, [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1], [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1], l, a);
    this.type = "TetrahedronBufferGeometry";
    this.parameters = {radius:l, detail:a};
  }
  function le(l, a) {
    W.call(this);
    this.type = "OctahedronGeometry";
    this.parameters = {radius:l, detail:a};
    this.fromBufferGeometry(new Dc(l, a));
    this.mergeVertices();
  }
  function Dc(l, a) {
    ab.call(this, [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1], [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2], l, a);
    this.type = "OctahedronBufferGeometry";
    this.parameters = {radius:l, detail:a};
  }
  function me(l, a) {
    W.call(this);
    this.type = "IcosahedronGeometry";
    this.parameters = {radius:l, detail:a};
    this.fromBufferGeometry(new nd(l, a));
    this.mergeVertices();
  }
  function nd(l, a) {
    var c = (1 + Math.sqrt(5)) / 2;
    ab.call(this, [-1, c, 0, 1, c, 0, -1, -c, 0, 1, -c, 0, 0, -1, c, 0, 1, c, 0, -1, -c, 0, 1, -c, c, 0, -1, c, 0, 1, -c, 0, -1, -c, 0, 1], [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1], l, a);
    this.type = "IcosahedronBufferGeometry";
    this.parameters = {radius:l, detail:a};
  }
  function ne(l, a) {
    W.call(this);
    this.type = "DodecahedronGeometry";
    this.parameters = {radius:l, detail:a};
    this.fromBufferGeometry(new od(l, a));
    this.mergeVertices();
  }
  function od(l, a) {
    var c = (1 + Math.sqrt(5)) / 2, u = 1 / c;
    ab.call(this, [-1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, 0, -u, -c, 0, -u, c, 0, u, -c, 0, u, c, -u, -c, 0, -u, c, 0, u, -c, 0, u, c, 0, -c, 0, -u, c, 0, -u, -c, 0, u, c, 0, u], [3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8, 17, 8, 10, 17, 10, 6, 8, 0, 16, 8, 16, 2, 8, 2, 10, 0, 12, 1, 0, 1, 18, 0, 18, 16, 6, 10, 2, 6, 2, 13, 6, 13, 15, 2, 16, 18, 2, 18, 3, 2, 3, 13, 18, 1, 9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4, 0, 
    8, 11, 9, 5, 11, 5, 19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19, 4, 17, 1, 12, 14, 1, 14, 5, 1, 5, 9], l, a);
    this.type = "DodecahedronBufferGeometry";
    this.parameters = {radius:l, detail:a};
  }
  function oe(l, a, c, b, e, d) {
    W.call(this);
    this.type = "TubeGeometry";
    this.parameters = {path:l, tubularSegments:a, radius:c, radialSegments:b, closed:e};
    void 0 !== d && console.warn("THREE.TubeGeometry: taper has been removed.");
    l = new Ec(l, a, c, b, e);
    this.tangents = l.tangents;
    this.normals = l.normals;
    this.binormals = l.binormals;
    this.fromBufferGeometry(l);
    this.mergeVertices();
  }
  function Ec(l, a, c, b, e) {
    function u(u) {
      p = l.getPointAt(u / a, p);
      var e = d.normals[u];
      u = d.binormals[u];
      for (G = 0; G <= b; G++) {
        var g = G / b * Math.PI * 2, m = Math.sin(g);
        g = -Math.cos(g);
        h.x = g * e.x + m * u.x;
        h.y = g * e.y + m * u.y;
        h.z = g * e.z + m * u.z;
        h.normalize();
        r.push(h.x, h.y, h.z);
        f.x = p.x + c * h.x;
        f.y = p.y + c * h.y;
        f.z = p.z + c * h.z;
        q.push(f.x, f.y, f.z);
      }
    }
    N.call(this);
    this.type = "TubeBufferGeometry";
    this.parameters = {path:l, tubularSegments:a, radius:c, radialSegments:b, closed:e};
    a = a || 64;
    c = c || 1;
    b = b || 8;
    e = e || !1;
    var d = l.computeFrenetFrames(a, e);
    this.tangents = d.tangents;
    this.normals = d.normals;
    this.binormals = d.binormals;
    var f = new m, h = new m, g = new k, p = new m, n, G, q = [], r = [], t = [], v = [];
    for (n = 0; n < a; n++) {
      u(n);
    }
    u(!1 === e ? a : 0);
    for (n = 0; n <= a; n++) {
      for (G = 0; G <= b; G++) {
        g.x = n / a, g.y = G / b, t.push(g.x, g.y);
      }
    }
    (function() {
      for (G = 1; G <= a; G++) {
        for (n = 1; n <= b; n++) {
          var l = (b + 1) * G + (n - 1), c = (b + 1) * G + n, u = (b + 1) * (G - 1) + n;
          v.push((b + 1) * (G - 1) + (n - 1), l, u);
          v.push(l, c, u);
        }
      }
    })();
    this.setIndex(v);
    this.setAttribute("position", new Q(q, 3));
    this.setAttribute("normal", new Q(r, 3));
    this.setAttribute("uv", new Q(t, 2));
  }
  function pe(l, a, c, b, e, d, f) {
    W.call(this);
    this.type = "TorusKnotGeometry";
    this.parameters = {radius:l, tube:a, tubularSegments:c, radialSegments:b, p:e, q:d};
    void 0 !== f && console.warn("THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.");
    this.fromBufferGeometry(new pd(l, a, c, b, e, d));
    this.mergeVertices();
  }
  function pd(l, a, c, b, e, d) {
    function u(l, a, c, u, b) {
      var e = Math.sin(l);
      a = c / a * l;
      c = Math.cos(a);
      b.x = u * (2 + c) * .5 * Math.cos(l);
      b.y = u * (2 + c) * e * .5;
      b.z = u * Math.sin(a) * .5;
    }
    N.call(this);
    this.type = "TorusKnotBufferGeometry";
    this.parameters = {radius:l, tube:a, tubularSegments:c, radialSegments:b, p:e, q:d};
    l = l || 1;
    a = a || .4;
    c = Math.floor(c) || 64;
    b = Math.floor(b) || 8;
    e = e || 2;
    d = d || 3;
    var f = [], h = [], g = [], p = [], n, k = new m, G = new m, q = new m, r = new m, t = new m, v = new m, z = new m;
    for (n = 0; n <= c; ++n) {
      var Y = n / c * e * Math.PI * 2;
      u(Y, e, d, l, q);
      u(Y + .01, e, d, l, r);
      v.subVectors(r, q);
      z.addVectors(r, q);
      t.crossVectors(v, z);
      z.crossVectors(t, v);
      t.normalize();
      z.normalize();
      for (Y = 0; Y <= b; ++Y) {
        var w = Y / b * Math.PI * 2, y = -a * Math.cos(w);
        w = a * Math.sin(w);
        k.x = q.x + (y * z.x + w * t.x);
        k.y = q.y + (y * z.y + w * t.y);
        k.z = q.z + (y * z.z + w * t.z);
        h.push(k.x, k.y, k.z);
        G.subVectors(k, q).normalize();
        g.push(G.x, G.y, G.z);
        p.push(n / c);
        p.push(Y / b);
      }
    }
    for (Y = 1; Y <= c; Y++) {
      for (n = 1; n <= b; n++) {
        l = (b + 1) * Y + (n - 1), a = (b + 1) * Y + n, e = (b + 1) * (Y - 1) + n, f.push((b + 1) * (Y - 1) + (n - 1), l, e), f.push(l, a, e);
      }
    }
    this.setIndex(f);
    this.setAttribute("position", new Q(h, 3));
    this.setAttribute("normal", new Q(g, 3));
    this.setAttribute("uv", new Q(p, 2));
  }
  function qe(l, a, c, b, e) {
    W.call(this);
    this.type = "TorusGeometry";
    this.parameters = {radius:l, tube:a, radialSegments:c, tubularSegments:b, arc:e};
    this.fromBufferGeometry(new qd(l, a, c, b, e));
    this.mergeVertices();
  }
  function qd(l, a, c, b, e) {
    N.call(this);
    this.type = "TorusBufferGeometry";
    this.parameters = {radius:l, tube:a, radialSegments:c, tubularSegments:b, arc:e};
    l = l || 1;
    a = a || .4;
    c = Math.floor(c) || 8;
    b = Math.floor(b) || 6;
    e = e || 2 * Math.PI;
    var u = [], d = [], f = [], h = [], g = new m, p = new m, n = new m, k, G;
    for (k = 0; k <= c; k++) {
      for (G = 0; G <= b; G++) {
        var q = G / b * e, r = k / c * Math.PI * 2;
        p.x = (l + a * Math.cos(r)) * Math.cos(q);
        p.y = (l + a * Math.cos(r)) * Math.sin(q);
        p.z = a * Math.sin(r);
        d.push(p.x, p.y, p.z);
        g.x = l * Math.cos(q);
        g.y = l * Math.sin(q);
        n.subVectors(p, g).normalize();
        f.push(n.x, n.y, n.z);
        h.push(G / b);
        h.push(k / c);
      }
    }
    for (k = 1; k <= c; k++) {
      for (G = 1; G <= b; G++) {
        l = (b + 1) * (k - 1) + G - 1, a = (b + 1) * (k - 1) + G, e = (b + 1) * k + G, u.push((b + 1) * k + G - 1, l, e), u.push(l, a, e);
      }
    }
    this.setIndex(u);
    this.setAttribute("position", new Q(d, 3));
    this.setAttribute("normal", new Q(f, 3));
    this.setAttribute("uv", new Q(h, 2));
  }
  function bi(l, a, c, b, e) {
    for (var u, d = 0, f = a, h = c - b; f < c; f += b) {
      d += (l[h] - l[f]) * (l[f + 1] + l[h + 1]), h = f;
    }
    if (e === 0 < d) {
      for (e = a; e < c; e += b) {
        u = ci(e, l[e], l[e + 1], u);
      }
    } else {
      for (e = c - b; e >= a; e -= b) {
        u = ci(e, l[e], l[e + 1], u);
      }
    }
    u && kf(u, u.next) && (re(u), u = u.next);
    return u;
  }
  function oc(l, a) {
    if (!l) {
      return l;
    }
    a || (a = l);
    do {
      var c = !1;
      if (l.steiner || !kf(l, l.next) && 0 !== Ea(l.prev, l, l.next)) {
        l = l.next;
      } else {
        re(l);
        l = a = l.prev;
        if (l === l.next) {
          break;
        }
        c = !0;
      }
    } while (c || l !== a);
    return a;
  }
  function se(l, a, c, b, e, d, f) {
    if (l) {
      if (!f && d) {
        var u = l, h = u;
        do {
          null === h.z && (h.z = zg(h.x, h.y, b, e, d)), h.prevZ = h.prev, h = h.nextZ = h.next;
        } while (h !== u);
        h.prevZ.nextZ = null;
        h.prevZ = null;
        u = h;
        var g, m, p, n, k = 1;
        do {
          h = u;
          var G = u = null;
          for (m = 0; h;) {
            m++;
            var q = h;
            for (g = p = 0; g < k && (p++, q = q.nextZ, q); g++) {
            }
            for (n = k; 0 < p || 0 < n && q;) {
              0 !== p && (0 === n || !q || h.z <= q.z) ? (g = h, h = h.nextZ, p--) : (g = q, q = q.nextZ, n--), G ? G.nextZ = g : u = g, g.prevZ = G, G = g;
            }
            h = q;
          }
          G.nextZ = null;
          k *= 2;
        } while (1 < m);
      }
      for (u = l; l.prev !== l.next;) {
        h = l.prev;
        q = l.next;
        if (d) {
          G = Sj(l, b, e, d);
        } else {
          a: {
            if (G = l, m = G.prev, p = G, k = G.next, 0 <= Ea(m, p, k)) {
              G = !1;
            } else {
              for (g = G.next.next; g !== G.prev;) {
                if (rd(m.x, m.y, p.x, p.y, k.x, k.y, g.x, g.y) && 0 <= Ea(g.prev, g, g.next)) {
                  G = !1;
                  break a;
                }
                g = g.next;
              }
              G = !0;
            }
          }
        }
        if (G) {
          a.push(h.i / c), a.push(l.i / c), a.push(q.i / c), re(l), u = l = q.next;
        } else {
          if (l = q, l === u) {
            if (!f) {
              se(oc(l), a, c, b, e, d, 1);
            } else {
              if (1 === f) {
                l = oc(l);
                f = a;
                u = c;
                h = l;
                do {
                  q = h.prev, G = h.next.next, !kf(q, G) && di(q, h, h.next, G) && te(q, G) && te(G, q) && (f.push(q.i / u), f.push(h.i / u), f.push(G.i / u), re(h), re(h.next), h = l = G), h = h.next;
                } while (h !== l);
                l = oc(h);
                se(l, a, c, b, e, d, 2);
              } else {
                if (2 === f) {
                  a: {
                    f = l;
                    do {
                      for (u = f.next.next; u !== f.prev;) {
                        if (h = f.i !== u.i) {
                          h = f;
                          q = u;
                          if (G = h.next.i !== q.i && h.prev.i !== q.i) {
                            b: {
                              G = h;
                              do {
                                if (G.i !== h.i && G.next.i !== h.i && G.i !== q.i && G.next.i !== q.i && di(G, G.next, h, q)) {
                                  G = !0;
                                  break b;
                                }
                                G = G.next;
                              } while (G !== h);
                              G = !1;
                            }
                            G = !G;
                          }
                          if (G) {
                            if (G = te(h, q) && te(q, h)) {
                              G = h;
                              m = !1;
                              p = (h.x + q.x) / 2;
                              k = (h.y + q.y) / 2;
                              do {
                                G.y > k !== G.next.y > k && G.next.y !== G.y && p < (G.next.x - G.x) * (k - G.y) / (G.next.y - G.y) + G.x && (m = !m), G = G.next;
                              } while (G !== h);
                              G = m;
                            }
                            G = G && (Ea(h.prev, h, q.prev) || Ea(h, q.prev, q)) || kf(h, q) && 0 < Ea(h.prev, h, h.next) && 0 < Ea(q.prev, q, q.next);
                          }
                          h = G;
                        }
                        if (h) {
                          l = ei(f, u);
                          f = oc(f, f.next);
                          l = oc(l, l.next);
                          se(f, a, c, b, e, d);
                          se(l, a, c, b, e, d);
                          break a;
                        }
                        u = u.next;
                      }
                      f = f.next;
                    } while (f !== l);
                  }
                }
              }
            }
            break;
          }
        }
      }
    }
  }
  function Sj(l, a, c, b) {
    var u = l.prev, e = l.next;
    if (0 <= Ea(u, l, e)) {
      return !1;
    }
    var f = u.x > l.x ? u.x > e.x ? u.x : e.x : l.x > e.x ? l.x : e.x, h = u.y > l.y ? u.y > e.y ? u.y : e.y : l.y > e.y ? l.y : e.y, d = zg(u.x < l.x ? u.x < e.x ? u.x : e.x : l.x < e.x ? l.x : e.x, u.y < l.y ? u.y < e.y ? u.y : e.y : l.y < e.y ? l.y : e.y, a, c, b);
    a = zg(f, h, a, c, b);
    c = l.prevZ;
    for (b = l.nextZ; c && c.z >= d && b && b.z <= a;) {
      if (c !== l.prev && c !== l.next && rd(u.x, u.y, l.x, l.y, e.x, e.y, c.x, c.y) && 0 <= Ea(c.prev, c, c.next)) {
        return !1;
      }
      c = c.prevZ;
      if (b !== l.prev && b !== l.next && rd(u.x, u.y, l.x, l.y, e.x, e.y, b.x, b.y) && 0 <= Ea(b.prev, b, b.next)) {
        return !1;
      }
      b = b.nextZ;
    }
    for (; c && c.z >= d;) {
      if (c !== l.prev && c !== l.next && rd(u.x, u.y, l.x, l.y, e.x, e.y, c.x, c.y) && 0 <= Ea(c.prev, c, c.next)) {
        return !1;
      }
      c = c.prevZ;
    }
    for (; b && b.z <= a;) {
      if (b !== l.prev && b !== l.next && rd(u.x, u.y, l.x, l.y, e.x, e.y, b.x, b.y) && 0 <= Ea(b.prev, b, b.next)) {
        return !1;
      }
      b = b.nextZ;
    }
    return !0;
  }
  function Tj(l, a) {
    return l.x - a.x;
  }
  function Uj(l, a) {
    var c = a, b = l.x, u = l.y, e = -Infinity;
    do {
      if (u <= c.y && u >= c.next.y && c.next.y !== c.y) {
        var f = c.x + (u - c.y) * (c.next.x - c.x) / (c.next.y - c.y);
        if (f <= b && f > e) {
          e = f;
          if (f === b) {
            if (u === c.y) {
              return c;
            }
            if (u === c.next.y) {
              return c.next;
            }
          }
          var h = c.x < c.next.x ? c : c.next;
        }
      }
      c = c.next;
    } while (c !== a);
    if (!h) {
      return null;
    }
    if (b === e) {
      return h;
    }
    a = h;
    f = h.x;
    var d = h.y, g = Infinity;
    c = h;
    do {
      if (b >= c.x && c.x >= f && b !== c.x && rd(u < d ? b : e, u, f, d, u < d ? e : b, u, c.x, c.y)) {
        var m = Math.abs(u - c.y) / (b - c.x);
        var p;
        if ((p = te(c, l)) && !(p = m < g) && (p = m === g) && !(p = c.x > h.x) && (p = c.x === h.x)) {
          p = h;
          var n = c;
          p = 0 > Ea(p.prev, p, n.prev) && 0 > Ea(n.next, p, p.next);
        }
        p && (h = c, g = m);
      }
      c = c.next;
    } while (c !== a);
    return h;
  }
  function zg(l, a, c, b, e) {
    l = 32767 * (l - c) * e;
    a = 32767 * (a - b) * e;
    l = (l | l << 8) & 16711935;
    l = (l | l << 4) & 252645135;
    l = (l | l << 2) & 858993459;
    a = (a | a << 8) & 16711935;
    a = (a | a << 4) & 252645135;
    a = (a | a << 2) & 858993459;
    return (l | l << 1) & 1431655765 | ((a | a << 1) & 1431655765) << 1;
  }
  function Vj(l) {
    var a = l, c = l;
    do {
      if (a.x < c.x || a.x === c.x && a.y < c.y) {
        c = a;
      }
      a = a.next;
    } while (a !== l);
    return c;
  }
  function rd(l, a, c, b, e, f, h, d) {
    return 0 <= (e - h) * (a - d) - (l - h) * (f - d) && 0 <= (l - h) * (b - d) - (c - h) * (a - d) && 0 <= (c - h) * (f - d) - (e - h) * (b - d);
  }
  function Ea(l, a, c) {
    return (a.y - l.y) * (c.x - a.x) - (a.x - l.x) * (c.y - a.y);
  }
  function kf(l, a) {
    return l.x === a.x && l.y === a.y;
  }
  function di(l, a, c, b) {
    var u = lf(Ea(l, a, c)), e = lf(Ea(l, a, b)), h = lf(Ea(c, b, l)), f = lf(Ea(c, b, a));
    return u !== e && h !== f || 0 === u && mf(l, c, a) || 0 === e && mf(l, b, a) || 0 === h && mf(c, l, b) || 0 === f && mf(c, a, b) ? !0 : !1;
  }
  function mf(l, a, c) {
    return a.x <= Math.max(l.x, c.x) && a.x >= Math.min(l.x, c.x) && a.y <= Math.max(l.y, c.y) && a.y >= Math.min(l.y, c.y);
  }
  function lf(l) {
    return 0 < l ? 1 : 0 > l ? -1 : 0;
  }
  function te(l, a) {
    return 0 > Ea(l.prev, l, l.next) ? 0 <= Ea(l, a, l.next) && 0 <= Ea(l, l.prev, a) : 0 > Ea(l, a, l.prev) || 0 > Ea(l, l.next, a);
  }
  function ei(l, a) {
    var c = new Ag(l.i, l.x, l.y), b = new Ag(a.i, a.x, a.y), u = l.next, e = a.prev;
    l.next = a;
    a.prev = l;
    c.next = u;
    u.prev = c;
    b.next = c;
    c.prev = b;
    e.next = b;
    b.prev = e;
    return b;
  }
  function ci(l, a, c, b) {
    l = new Ag(l, a, c);
    b ? (l.next = b.next, l.prev = b, b.next.prev = l, b.next = l) : (l.prev = l, l.next = l);
    return l;
  }
  function re(l) {
    l.next.prev = l.prev;
    l.prev.next = l.next;
    l.prevZ && (l.prevZ.nextZ = l.nextZ);
    l.nextZ && (l.nextZ.prevZ = l.prevZ);
  }
  function Ag(l, a, c) {
    this.i = l;
    this.x = a;
    this.y = c;
    this.nextZ = this.prevZ = this.z = this.next = this.prev = null;
    this.steiner = !1;
  }
  function fi(l) {
    var a = l.length;
    2 < a && l[a - 1].equals(l[0]) && l.pop();
  }
  function gi(l, a) {
    for (var c = 0; c < a.length; c++) {
      l.push(a[c].x), l.push(a[c].y);
    }
  }
  function Fc(l, a) {
    W.call(this);
    this.type = "ExtrudeGeometry";
    this.parameters = {shapes:l, options:a};
    this.fromBufferGeometry(new Gb(l, a));
    this.mergeVertices();
  }
  function Gb(l, a) {
    function c(l) {
      function c(l, a, c) {
        a || console.error("THREE.ExtrudeGeometry: vec does not exist");
        return a.clone().multiplyScalar(c).add(l);
      }
      function h(l, a, c) {
        var b = l.x - a.x;
        var u = l.y - a.y;
        var e = c.x - l.x;
        var h = c.y - l.y, f = b * b + u * u;
        if (Math.abs(b * h - u * e) > Number.EPSILON) {
          var d = Math.sqrt(f), g = Math.sqrt(e * e + h * h);
          f = a.x - u / d;
          a = a.y + b / d;
          h = ((c.x - h / g - f) * h - (c.y + e / g - a) * e) / (b * h - u * e);
          e = f + b * h - l.x;
          b = a + u * h - l.y;
          u = e * e + b * b;
          if (2 >= u) {
            return new k(e, b);
          }
          u = Math.sqrt(u / 2);
        } else {
          l = !1, b > Number.EPSILON ? e > Number.EPSILON && (l = !0) : b < -Number.EPSILON ? e < -Number.EPSILON && (l = !0) : Math.sign(u) === Math.sign(h) && (l = !0), l ? (e = -u, u = Math.sqrt(f)) : (e = b, b = u, u = Math.sqrt(f / 2));
        }
        return new k(e / u, b / u);
      }
      function f(l, a) {
        for (P = l.length; 0 <= --P;) {
          var c = P;
          var e = P - 1;
          0 > e && (e = l.length - 1);
          var h, f = r + 2 * y;
          for (h = 0; h < f; h++) {
            var d = H * h, g = H * (h + 1), m = a + e + d, k = a + e + g;
            g = a + c + g;
            p(a + c + d);
            p(m);
            p(g);
            p(m);
            p(k);
            p(g);
            d = u.length / 3;
            d = ba.generateSideWallUV(b, u, d - 6, d - 3, d - 2, d - 1);
            n(d[0]);
            n(d[1]);
            n(d[3]);
            n(d[1]);
            n(d[2]);
            n(d[3]);
          }
        }
      }
      function d(l, a, c) {
        q.push(l);
        q.push(a);
        q.push(c);
      }
      function g(l, a, c) {
        p(l);
        p(a);
        p(c);
        l = u.length / 3;
        l = ba.generateTopUV(b, u, l - 3, l - 2, l - 1);
        n(l[0]);
        n(l[1]);
        n(l[2]);
      }
      function p(l) {
        u.push(q[3 * l]);
        u.push(q[3 * l + 1]);
        u.push(q[3 * l + 2]);
      }
      function n(l) {
        e.push(l.x);
        e.push(l.y);
      }
      var q = [], G = void 0 !== a.curveSegments ? a.curveSegments : 12, r = void 0 !== a.steps ? a.steps : 1, t = void 0 !== a.depth ? a.depth : 100, v = void 0 !== a.bevelEnabled ? a.bevelEnabled : !0, z = void 0 !== a.bevelThickness ? a.bevelThickness : 6, w = void 0 !== a.bevelSize ? a.bevelSize : z - 2, Y = void 0 !== a.bevelOffset ? a.bevelOffset : 0, y = void 0 !== a.bevelSegments ? a.bevelSegments : 3, x = a.extrudePath, ba = void 0 !== a.UVGenerator ? a.UVGenerator : Wj;
      void 0 !== a.amount && (console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth."), t = a.amount);
      var ca = !1;
      if (x) {
        var C = x.getSpacedPoints(r);
        ca = !0;
        v = !1;
        var ja = x.computeFrenetFrames(r, !1);
        var A = new m;
        var D = new m;
        var na = new m;
      }
      v || (Y = w = z = y = 0);
      var B;
      G = l.extractPoints(G);
      l = G.shape;
      var Pa = G.holes;
      if (!Tb.isClockWise(l)) {
        l = l.reverse();
        var F = 0;
        for (B = Pa.length; F < B; F++) {
          var E = Pa[F];
          Tb.isClockWise(E) && (Pa[F] = E.reverse());
        }
      }
      var Ha = Tb.triangulateShape(l, Pa), qa = l;
      F = 0;
      for (B = Pa.length; F < B; F++) {
        E = Pa[F], l = l.concat(E);
      }
      var Ma, H = l.length, I, M = Ha.length;
      G = [];
      var P = 0;
      var O = qa.length;
      var L = O - 1;
      for (Ma = P + 1; P < O; P++, L++, Ma++) {
        L === O && (L = 0), Ma === O && (Ma = 0), G[P] = h(qa[P], qa[L], qa[Ma]);
      }
      x = [];
      var J = G.concat();
      F = 0;
      for (B = Pa.length; F < B; F++) {
        E = Pa[F];
        var ob = [];
        P = 0;
        O = E.length;
        L = O - 1;
        for (Ma = P + 1; P < O; P++, L++, Ma++) {
          L === O && (L = 0), Ma === O && (Ma = 0), ob[P] = h(E[P], E[L], E[Ma]);
        }
        x.push(ob);
        J = J.concat(ob);
      }
      for (L = 0; L < y; L++) {
        O = L / y;
        var N = z * Math.cos(O * Math.PI / 2);
        Ma = w * Math.sin(O * Math.PI / 2) + Y;
        P = 0;
        for (O = qa.length; P < O; P++) {
          var S = c(qa[P], G[P], Ma);
          d(S.x, S.y, -N);
        }
        F = 0;
        for (B = Pa.length; F < B; F++) {
          for (E = Pa[F], ob = x[F], P = 0, O = E.length; P < O; P++) {
            S = c(E[P], ob[P], Ma), d(S.x, S.y, -N);
          }
        }
      }
      Ma = w + Y;
      for (P = 0; P < H; P++) {
        S = v ? c(l[P], J[P], Ma) : l[P], ca ? (D.copy(ja.normals[0]).multiplyScalar(S.x), A.copy(ja.binormals[0]).multiplyScalar(S.y), na.copy(C[0]).add(D).add(A), d(na.x, na.y, na.z)) : d(S.x, S.y, 0);
      }
      for (O = 1; O <= r; O++) {
        for (P = 0; P < H; P++) {
          S = v ? c(l[P], J[P], Ma) : l[P], ca ? (D.copy(ja.normals[O]).multiplyScalar(S.x), A.copy(ja.binormals[O]).multiplyScalar(S.y), na.copy(C[O]).add(D).add(A), d(na.x, na.y, na.z)) : d(S.x, S.y, t / r * O);
        }
      }
      for (L = y - 1; 0 <= L; L--) {
        O = L / y;
        N = z * Math.cos(O * Math.PI / 2);
        Ma = w * Math.sin(O * Math.PI / 2) + Y;
        P = 0;
        for (O = qa.length; P < O; P++) {
          S = c(qa[P], G[P], Ma), d(S.x, S.y, t + N);
        }
        F = 0;
        for (B = Pa.length; F < B; F++) {
          for (E = Pa[F], ob = x[F], P = 0, O = E.length; P < O; P++) {
            S = c(E[P], ob[P], Ma), ca ? d(S.x, S.y + C[r - 1].y, C[r - 1].x + N) : d(S.x, S.y, t + N);
          }
        }
      }
      (function() {
        var l = u.length / 3;
        if (v) {
          var a = 0 * H;
          for (P = 0; P < M; P++) {
            I = Ha[P], g(I[2] + a, I[1] + a, I[0] + a);
          }
          a = H * (r + 2 * y);
          for (P = 0; P < M; P++) {
            I = Ha[P], g(I[0] + a, I[1] + a, I[2] + a);
          }
        } else {
          for (P = 0; P < M; P++) {
            I = Ha[P], g(I[2], I[1], I[0]);
          }
          for (P = 0; P < M; P++) {
            I = Ha[P], g(I[0] + H * r, I[1] + H * r, I[2] + H * r);
          }
        }
        b.addGroup(l, u.length / 3 - l, 0);
      })();
      (function() {
        var l = u.length / 3, a = 0;
        f(qa, a);
        a += qa.length;
        F = 0;
        for (B = Pa.length; F < B; F++) {
          E = Pa[F], f(E, a), a += E.length;
        }
        b.addGroup(l, u.length / 3 - l, 1);
      })();
    }
    N.call(this);
    this.type = "ExtrudeBufferGeometry";
    this.parameters = {shapes:l, options:a};
    l = Array.isArray(l) ? l : [l];
    for (var b = this, u = [], e = [], h = 0, f = l.length; h < f; h++) {
      c(l[h]);
    }
    this.setAttribute("position", new Q(u, 3));
    this.setAttribute("uv", new Q(e, 2));
    this.computeVertexNormals();
  }
  function hi(l, a, c) {
    c.shapes = [];
    if (Array.isArray(l)) {
      for (var b = 0, u = l.length; b < u; b++) {
        c.shapes.push(l[b].uuid);
      }
    } else {
      c.shapes.push(l.uuid);
    }
    void 0 !== a.extrudePath && (c.options.extrudePath = a.extrudePath.toJSON());
    return c;
  }
  function ue(l, a) {
    W.call(this);
    this.type = "TextGeometry";
    this.parameters = {text:l, parameters:a};
    this.fromBufferGeometry(new sd(l, a));
    this.mergeVertices();
  }
  function sd(l, a) {
    a = a || {};
    var c = a.font;
    if (!c || !c.isFont) {
      return console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font."), new W;
    }
    l = c.generateShapes(l, a.size);
    a.depth = void 0 !== a.height ? a.height : 50;
    void 0 === a.bevelThickness && (a.bevelThickness = 10);
    void 0 === a.bevelSize && (a.bevelSize = 8);
    void 0 === a.bevelEnabled && (a.bevelEnabled = !1);
    Gb.call(this, l, a);
    this.type = "TextBufferGeometry";
  }
  function ve(l, a, c, b, e, h, d) {
    W.call(this);
    this.type = "SphereGeometry";
    this.parameters = {radius:l, widthSegments:a, heightSegments:c, phiStart:b, phiLength:e, thetaStart:h, thetaLength:d};
    this.fromBufferGeometry(new Gc(l, a, c, b, e, h, d));
    this.mergeVertices();
  }
  function Gc(l, a, c, b, e, h, d) {
    N.call(this);
    this.type = "SphereBufferGeometry";
    this.parameters = {radius:l, widthSegments:a, heightSegments:c, phiStart:b, phiLength:e, thetaStart:h, thetaLength:d};
    l = l || 1;
    a = Math.max(3, Math.floor(a) || 8);
    c = Math.max(2, Math.floor(c) || 6);
    b = void 0 !== b ? b : 0;
    e = void 0 !== e ? e : 2 * Math.PI;
    h = void 0 !== h ? h : 0;
    d = void 0 !== d ? d : Math.PI;
    var u = Math.min(h + d, Math.PI), f, g, p = 0, n = [], k = new m, q = new m, r = [], G = [], t = [], v = [];
    for (g = 0; g <= c; g++) {
      var z = [], w = g / c, Y = 0;
      0 == g && 0 == h ? Y = .5 / a : g == c && u == Math.PI && (Y = -.5 / a);
      for (f = 0; f <= a; f++) {
        var y = f / a;
        k.x = -l * Math.cos(b + y * e) * Math.sin(h + w * d);
        k.y = l * Math.cos(h + w * d);
        k.z = l * Math.sin(b + y * e) * Math.sin(h + w * d);
        G.push(k.x, k.y, k.z);
        q.copy(k).normalize();
        t.push(q.x, q.y, q.z);
        v.push(y + Y, 1 - w);
        z.push(p++);
      }
      n.push(z);
    }
    for (g = 0; g < c; g++) {
      for (f = 0; f < a; f++) {
        l = n[g][f + 1], b = n[g][f], e = n[g + 1][f], d = n[g + 1][f + 1], (0 !== g || 0 < h) && r.push(l, b, d), (g !== c - 1 || u < Math.PI) && r.push(b, e, d);
      }
    }
    this.setIndex(r);
    this.setAttribute("position", new Q(G, 3));
    this.setAttribute("normal", new Q(t, 3));
    this.setAttribute("uv", new Q(v, 2));
  }
  function we(l, a, c, b, e, h) {
    W.call(this);
    this.type = "RingGeometry";
    this.parameters = {innerRadius:l, outerRadius:a, thetaSegments:c, phiSegments:b, thetaStart:e, thetaLength:h};
    this.fromBufferGeometry(new td(l, a, c, b, e, h));
    this.mergeVertices();
  }
  function td(l, a, c, b, e, h) {
    N.call(this);
    this.type = "RingBufferGeometry";
    this.parameters = {innerRadius:l, outerRadius:a, thetaSegments:c, phiSegments:b, thetaStart:e, thetaLength:h};
    l = l || .5;
    a = a || 1;
    e = void 0 !== e ? e : 0;
    h = void 0 !== h ? h : 2 * Math.PI;
    c = void 0 !== c ? Math.max(3, c) : 8;
    b = void 0 !== b ? Math.max(1, b) : 1;
    var u = [], d = [], f = [], g = [], p = l, n = (a - l) / b, q = new m, r = new k, G, t;
    for (G = 0; G <= b; G++) {
      for (t = 0; t <= c; t++) {
        l = e + t / c * h, q.x = p * Math.cos(l), q.y = p * Math.sin(l), d.push(q.x, q.y, q.z), f.push(0, 0, 1), r.x = (q.x / a + 1) / 2, r.y = (q.y / a + 1) / 2, g.push(r.x, r.y);
      }
      p += n;
    }
    for (G = 0; G < b; G++) {
      for (a = G * (c + 1), t = 0; t < c; t++) {
        l = t + a, e = l + c + 1, h = l + c + 2, p = l + 1, u.push(l, e, p), u.push(e, h, p);
      }
    }
    this.setIndex(u);
    this.setAttribute("position", new Q(d, 3));
    this.setAttribute("normal", new Q(f, 3));
    this.setAttribute("uv", new Q(g, 2));
  }
  function xe(l, a, c, b) {
    W.call(this);
    this.type = "LatheGeometry";
    this.parameters = {points:l, segments:a, phiStart:c, phiLength:b};
    this.fromBufferGeometry(new ud(l, a, c, b));
    this.mergeVertices();
  }
  function ud(l, a, c, b) {
    N.call(this);
    this.type = "LatheBufferGeometry";
    this.parameters = {points:l, segments:a, phiStart:c, phiLength:b};
    a = Math.floor(a) || 12;
    c = c || 0;
    b = b || 2 * Math.PI;
    b = oa.clamp(b, 0, 2 * Math.PI);
    var u = [], e = [], h = [], d = 1 / a, f = new m, g = new k, p;
    for (p = 0; p <= a; p++) {
      var n = c + p * d * b;
      var q = Math.sin(n), r = Math.cos(n);
      for (n = 0; n <= l.length - 1; n++) {
        f.x = l[n].x * q, f.y = l[n].y, f.z = l[n].x * r, e.push(f.x, f.y, f.z), g.x = p / a, g.y = n / (l.length - 1), h.push(g.x, g.y);
      }
    }
    for (p = 0; p < a; p++) {
      for (n = 0; n < l.length - 1; n++) {
        c = n + p * l.length, d = c + l.length, f = c + l.length + 1, g = c + 1, u.push(c, d, g), u.push(d, f, g);
      }
    }
    this.setIndex(u);
    this.setAttribute("position", new Q(e, 3));
    this.setAttribute("uv", new Q(h, 2));
    this.computeVertexNormals();
    if (b === 2 * Math.PI) {
      for (b = this.attributes.normal.array, u = new m, e = new m, h = new m, c = a * l.length * 3, n = p = 0; p < l.length; p++, n += 3) {
        u.x = b[n + 0], u.y = b[n + 1], u.z = b[n + 2], e.x = b[c + n + 0], e.y = b[c + n + 1], e.z = b[c + n + 2], h.addVectors(u, e).normalize(), b[n + 0] = b[c + n + 0] = h.x, b[n + 1] = b[c + n + 1] = h.y, b[n + 2] = b[c + n + 2] = h.z;
      }
    }
  }
  function Hc(l, a) {
    W.call(this);
    this.type = "ShapeGeometry";
    "object" === typeof a && (console.warn("THREE.ShapeGeometry: Options parameter has been removed."), a = a.curveSegments);
    this.parameters = {shapes:l, curveSegments:a};
    this.fromBufferGeometry(new Ic(l, a));
    this.mergeVertices();
  }
  function Ic(l, a) {
    function c(l) {
      var c, d = u.length / 3;
      l = l.extractPoints(a);
      var g = l.shape, m = l.holes;
      !1 === Tb.isClockWise(g) && (g = g.reverse());
      l = 0;
      for (c = m.length; l < c; l++) {
        var p = m[l];
        !0 === Tb.isClockWise(p) && (m[l] = p.reverse());
      }
      var n = Tb.triangulateShape(g, m);
      l = 0;
      for (c = m.length; l < c; l++) {
        p = m[l], g = g.concat(p);
      }
      l = 0;
      for (c = g.length; l < c; l++) {
        p = g[l], u.push(p.x, p.y, 0), e.push(0, 0, 1), h.push(p.x, p.y);
      }
      l = 0;
      for (c = n.length; l < c; l++) {
        g = n[l], b.push(g[0] + d, g[1] + d, g[2] + d), f += 3;
      }
    }
    N.call(this);
    this.type = "ShapeBufferGeometry";
    this.parameters = {shapes:l, curveSegments:a};
    a = a || 12;
    var b = [], u = [], e = [], h = [], d = 0, f = 0;
    if (!1 === Array.isArray(l)) {
      c(l);
    } else {
      for (var g = 0; g < l.length; g++) {
        c(l[g]), this.addGroup(d, f, g), d += f, f = 0;
      }
    }
    this.setIndex(b);
    this.setAttribute("position", new Q(u, 3));
    this.setAttribute("normal", new Q(e, 3));
    this.setAttribute("uv", new Q(h, 2));
  }
  function ii(l, a) {
    a.shapes = [];
    if (Array.isArray(l)) {
      for (var c = 0, b = l.length; c < b; c++) {
        a.shapes.push(l[c].uuid);
      }
    } else {
      a.shapes.push(l.uuid);
    }
    return a;
  }
  function vd(l, a) {
    N.call(this);
    this.type = "EdgesGeometry";
    this.parameters = {thresholdAngle:a};
    var c = [];
    a = Math.cos(oa.DEG2RAD * (void 0 !== a ? a : 1));
    var b = [0, 0], u = {}, e = ["a", "b", "c"];
    if (l.isBufferGeometry) {
      var h = new W;
      h.fromBufferGeometry(l);
    } else {
      h = l.clone();
    }
    h.mergeVertices();
    h.computeFaceNormals();
    l = h.vertices;
    h = h.faces;
    for (var d = 0, f = h.length; d < f; d++) {
      for (var g = h[d], m = 0; 3 > m; m++) {
        var p = g[e[m]];
        var n = g[e[(m + 1) % 3]];
        b[0] = Math.min(p, n);
        b[1] = Math.max(p, n);
        p = b[0] + "," + b[1];
        void 0 === u[p] ? u[p] = {index1:b[0], index2:b[1], face1:d, face2:void 0} : u[p].face2 = d;
      }
    }
    for (p in u) {
      if (b = u[p], void 0 === b.face2 || h[b.face1].normal.dot(h[b.face2].normal) <= a) {
        e = l[b.index1], c.push(e.x, e.y, e.z), e = l[b.index2], c.push(e.x, e.y, e.z);
      }
    }
    this.setAttribute("position", new Q(c, 3));
  }
  function Jc(l, a, c, b, e, h, d, f) {
    W.call(this);
    this.type = "CylinderGeometry";
    this.parameters = {radiusTop:l, radiusBottom:a, height:c, radialSegments:b, heightSegments:e, openEnded:h, thetaStart:d, thetaLength:f};
    this.fromBufferGeometry(new Ub(l, a, c, b, e, h, d, f));
    this.mergeVertices();
  }
  function Ub(l, a, c, b, e, h, d, f) {
    function u(c) {
      var u, e = new k, h = new m, t = 0, w = !0 === c ? l : a, Y = !0 === c ? 1 : -1;
      var y = G;
      for (u = 1; u <= b; u++) {
        n.push(0, v * Y, 0), q.push(0, Y, 0), r.push(.5, .5), G++;
      }
      var x = G;
      for (u = 0; u <= b; u++) {
        var ba = u / b * f + d, ca = Math.cos(ba);
        ba = Math.sin(ba);
        h.x = w * ba;
        h.y = v * Y;
        h.z = w * ca;
        n.push(h.x, h.y, h.z);
        q.push(0, Y, 0);
        e.x = .5 * ca + .5;
        e.y = .5 * ba * Y + .5;
        r.push(e.x, e.y);
        G++;
      }
      for (u = 0; u < b; u++) {
        e = y + u, h = x + u, !0 === c ? p.push(h, h + 1, e) : p.push(h + 1, h, e), t += 3;
      }
      g.addGroup(z, t, !0 === c ? 1 : 2);
      z += t;
    }
    N.call(this);
    this.type = "CylinderBufferGeometry";
    this.parameters = {radiusTop:l, radiusBottom:a, height:c, radialSegments:b, heightSegments:e, openEnded:h, thetaStart:d, thetaLength:f};
    var g = this;
    l = void 0 !== l ? l : 1;
    a = void 0 !== a ? a : 1;
    c = c || 1;
    b = Math.floor(b) || 8;
    e = Math.floor(e) || 1;
    h = void 0 !== h ? h : !1;
    d = void 0 !== d ? d : 0;
    f = void 0 !== f ? f : 2 * Math.PI;
    var p = [], n = [], q = [], r = [], G = 0, t = [], v = c / 2, z = 0;
    (function() {
      var u, h, k = new m, w = new m, Y = 0, y = (a - l) / c;
      for (h = 0; h <= e; h++) {
        var x = [], ba = h / e, ca = ba * (a - l) + l;
        for (u = 0; u <= b; u++) {
          var C = u / b, A = C * f + d, D = Math.sin(A);
          A = Math.cos(A);
          w.x = ca * D;
          w.y = -ba * c + v;
          w.z = ca * A;
          n.push(w.x, w.y, w.z);
          k.set(D, y, A).normalize();
          q.push(k.x, k.y, k.z);
          r.push(C, 1 - ba);
          x.push(G++);
        }
        t.push(x);
      }
      for (u = 0; u < b; u++) {
        for (h = 0; h < e; h++) {
          k = t[h + 1][u], w = t[h + 1][u + 1], y = t[h][u + 1], p.push(t[h][u], k, y), p.push(k, w, y), Y += 6;
        }
      }
      g.addGroup(z, Y, 0);
      z += Y;
    })();
    !1 === h && (0 < l && u(!0), 0 < a && u(!1));
    this.setIndex(p);
    this.setAttribute("position", new Q(n, 3));
    this.setAttribute("normal", new Q(q, 3));
    this.setAttribute("uv", new Q(r, 2));
  }
  function ye(l, a, c, b, e, h, d) {
    Jc.call(this, 0, l, a, c, b, e, h, d);
    this.type = "ConeGeometry";
    this.parameters = {radius:l, height:a, radialSegments:c, heightSegments:b, openEnded:e, thetaStart:h, thetaLength:d};
  }
  function ze(l, a, c, b, e, h, d) {
    Ub.call(this, 0, l, a, c, b, e, h, d);
    this.type = "ConeBufferGeometry";
    this.parameters = {radius:l, height:a, radialSegments:c, heightSegments:b, openEnded:e, thetaStart:h, thetaLength:d};
  }
  function Ae(l, a, c, b) {
    W.call(this);
    this.type = "CircleGeometry";
    this.parameters = {radius:l, segments:a, thetaStart:c, thetaLength:b};
    this.fromBufferGeometry(new wd(l, a, c, b));
    this.mergeVertices();
  }
  function wd(l, a, c, b) {
    N.call(this);
    this.type = "CircleBufferGeometry";
    this.parameters = {radius:l, segments:a, thetaStart:c, thetaLength:b};
    l = l || 1;
    a = void 0 !== a ? Math.max(3, a) : 8;
    c = void 0 !== c ? c : 0;
    b = void 0 !== b ? b : 2 * Math.PI;
    var u = [], e = [], h = [], d = [], f, g = new m, p = new k;
    e.push(0, 0, 0);
    h.push(0, 0, 1);
    d.push(.5, .5);
    var n = 0;
    for (f = 3; n <= a; n++, f += 3) {
      var q = c + n / a * b;
      g.x = l * Math.cos(q);
      g.y = l * Math.sin(q);
      e.push(g.x, g.y, g.z);
      h.push(0, 0, 1);
      p.x = (e[f] / l + 1) / 2;
      p.y = (e[f + 1] / l + 1) / 2;
      d.push(p.x, p.y);
    }
    for (f = 1; f <= a; f++) {
      u.push(f, f + 1, 0);
    }
    this.setIndex(u);
    this.setAttribute("position", new Q(e, 3));
    this.setAttribute("normal", new Q(h, 3));
    this.setAttribute("uv", new Q(d, 2));
  }
  function Kc(l) {
    I.call(this);
    this.type = "ShadowMaterial";
    this.color = new A(0);
    this.transparent = !0;
    this.setValues(l);
  }
  function Vb(l) {
    ka.call(this, l);
    this.type = "RawShaderMaterial";
  }
  function Hb(l) {
    I.call(this);
    this.defines = {STANDARD:""};
    this.type = "MeshStandardMaterial";
    this.color = new A(16777215);
    this.roughness = 1;
    this.metalness = 0;
    this.lightMap = this.map = null;
    this.lightMapIntensity = 1;
    this.aoMap = null;
    this.aoMapIntensity = 1;
    this.emissive = new A(0);
    this.emissiveIntensity = 1;
    this.bumpMap = this.emissiveMap = null;
    this.bumpScale = 1;
    this.normalMap = null;
    this.normalMapType = 0;
    this.normalScale = new k(1, 1);
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.envMap = this.alphaMap = this.metalnessMap = this.roughnessMap = null;
    this.envMapIntensity = 1;
    this.refractionRatio = .98;
    this.wireframe = !1;
    this.wireframeLinewidth = 1;
    this.wireframeLinejoin = this.wireframeLinecap = "round";
    this.vertexTangents = this.morphNormals = this.morphTargets = this.skinning = !1;
    this.setValues(l);
  }
  function Lc(l) {
    Hb.call(this);
    this.defines = {STANDARD:"", PHYSICAL:""};
    this.type = "MeshPhysicalMaterial";
    this.clearcoat = 0;
    this.clearcoatMap = null;
    this.clearcoatRoughness = 0;
    this.clearcoatRoughnessMap = null;
    this.clearcoatNormalScale = new k(1, 1);
    this.clearcoatNormalMap = null;
    this.reflectivity = .5;
    this.sheen = null;
    this.transparency = 0;
    this.setValues(l);
  }
  function pc(l) {
    I.call(this);
    this.type = "MeshPhongMaterial";
    this.color = new A(16777215);
    this.specular = new A(1118481);
    this.shininess = 30;
    this.lightMap = this.map = null;
    this.lightMapIntensity = 1;
    this.aoMap = null;
    this.aoMapIntensity = 1;
    this.emissive = new A(0);
    this.emissiveIntensity = 1;
    this.bumpMap = this.emissiveMap = null;
    this.bumpScale = 1;
    this.normalMap = null;
    this.normalMapType = 0;
    this.normalScale = new k(1, 1);
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.envMap = this.alphaMap = this.specularMap = null;
    this.combine = 0;
    this.reflectivity = 1;
    this.refractionRatio = .98;
    this.wireframe = !1;
    this.wireframeLinewidth = 1;
    this.wireframeLinejoin = this.wireframeLinecap = "round";
    this.morphNormals = this.morphTargets = this.skinning = !1;
    this.setValues(l);
  }
  function Mc(l) {
    I.call(this);
    this.defines = {TOON:""};
    this.type = "MeshToonMaterial";
    this.color = new A(16777215);
    this.specular = new A(1118481);
    this.shininess = 30;
    this.lightMap = this.gradientMap = this.map = null;
    this.lightMapIntensity = 1;
    this.aoMap = null;
    this.aoMapIntensity = 1;
    this.emissive = new A(0);
    this.emissiveIntensity = 1;
    this.bumpMap = this.emissiveMap = null;
    this.bumpScale = 1;
    this.normalMap = null;
    this.normalMapType = 0;
    this.normalScale = new k(1, 1);
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.alphaMap = this.specularMap = null;
    this.wireframe = !1;
    this.wireframeLinewidth = 1;
    this.wireframeLinejoin = this.wireframeLinecap = "round";
    this.morphNormals = this.morphTargets = this.skinning = !1;
    this.setValues(l);
  }
  function Nc(l) {
    I.call(this);
    this.type = "MeshNormalMaterial";
    this.bumpMap = null;
    this.bumpScale = 1;
    this.normalMap = null;
    this.normalMapType = 0;
    this.normalScale = new k(1, 1);
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.wireframe = !1;
    this.wireframeLinewidth = 1;
    this.morphNormals = this.morphTargets = this.skinning = this.fog = !1;
    this.setValues(l);
  }
  function Oc(l) {
    I.call(this);
    this.type = "MeshLambertMaterial";
    this.color = new A(16777215);
    this.lightMap = this.map = null;
    this.lightMapIntensity = 1;
    this.aoMap = null;
    this.aoMapIntensity = 1;
    this.emissive = new A(0);
    this.emissiveIntensity = 1;
    this.envMap = this.alphaMap = this.specularMap = this.emissiveMap = null;
    this.combine = 0;
    this.reflectivity = 1;
    this.refractionRatio = .98;
    this.wireframe = !1;
    this.wireframeLinewidth = 1;
    this.wireframeLinejoin = this.wireframeLinecap = "round";
    this.morphNormals = this.morphTargets = this.skinning = !1;
    this.setValues(l);
  }
  function Pc(l) {
    I.call(this);
    this.defines = {MATCAP:""};
    this.type = "MeshMatcapMaterial";
    this.color = new A(16777215);
    this.bumpMap = this.map = this.matcap = null;
    this.bumpScale = 1;
    this.normalMap = null;
    this.normalMapType = 0;
    this.normalScale = new k(1, 1);
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.alphaMap = null;
    this.morphNormals = this.morphTargets = this.skinning = !1;
    this.setValues(l);
  }
  function Qc(l) {
    za.call(this);
    this.type = "LineDashedMaterial";
    this.scale = 1;
    this.dashSize = 3;
    this.gapSize = 1;
    this.setValues(l);
  }
  function fb(l, a, c, b) {
    this.parameterPositions = l;
    this._cachedIndex = 0;
    this.resultBuffer = void 0 !== b ? b : new a.constructor(c);
    this.sampleValues = a;
    this.valueSize = c;
  }
  function nf(l, a, c, b) {
    fb.call(this, l, a, c, b);
    this._offsetNext = this._weightNext = this._offsetPrev = this._weightPrev = -0;
  }
  function Be(l, a, c, b) {
    fb.call(this, l, a, c, b);
  }
  function of(l, a, c, b) {
    fb.call(this, l, a, c, b);
  }
  function Ta(l, a, c, b) {
    if (void 0 === l) {
      throw Error("THREE.KeyframeTrack: track name is undefined");
    }
    if (void 0 === a || 0 === a.length) {
      throw Error("THREE.KeyframeTrack: no keyframes in track named " + l);
    }
    this.name = l;
    this.times = Ca.convertArray(a, this.TimeBufferType);
    this.values = Ca.convertArray(c, this.ValueBufferType);
    this.setInterpolation(b || this.DefaultInterpolation);
  }
  function pf(l, a, c) {
    Ta.call(this, l, a, c);
  }
  function qf(l, a, c, b) {
    Ta.call(this, l, a, c, b);
  }
  function xd(l, a, c, b) {
    Ta.call(this, l, a, c, b);
  }
  function rf(l, a, c, b) {
    fb.call(this, l, a, c, b);
  }
  function Ce(l, a, c, b) {
    Ta.call(this, l, a, c, b);
  }
  function sf(l, a, c, b) {
    Ta.call(this, l, a, c, b);
  }
  function yd(l, a, c, b) {
    Ta.call(this, l, a, c, b);
  }
  function lb(l, a, c, b) {
    this.name = l;
    this.tracks = c;
    this.duration = void 0 !== a ? a : -1;
    this.blendMode = void 0 !== b ? b : 2500;
    this.uuid = oa.generateUUID();
    0 > this.duration && this.resetDuration();
  }
  function Xj(l) {
    switch(l.toLowerCase()) {
      case "scalar":
      case "double":
      case "float":
      case "number":
      case "integer":
        return xd;
      case "vector":
      case "vector2":
      case "vector3":
      case "vector4":
        return yd;
      case "color":
        return qf;
      case "quaternion":
        return Ce;
      case "bool":
      case "boolean":
        return pf;
      case "string":
        return sf;
    }
    throw Error("THREE.KeyframeTrack: Unsupported typeName: " + l);
  }
  function Yj(l) {
    if (void 0 === l.type) {
      throw Error("THREE.KeyframeTrack: track type undefined, can not parse");
    }
    var a = Xj(l.type);
    if (void 0 === l.times) {
      var c = [], b = [];
      Ca.flattenJSON(l.keys, c, b, "value");
      l.times = c;
      l.values = b;
    }
    return void 0 !== a.parse ? a.parse(l) : new a(l.name, l.times, l.values, l.interpolation);
  }
  function Bg(l, a, c) {
    var b = this, u = !1, e = 0, h = 0, d = void 0, f = [];
    this.onStart = void 0;
    this.onLoad = l;
    this.onProgress = a;
    this.onError = c;
    this.itemStart = function(l) {
      h++;
      if (!1 === u && void 0 !== b.onStart) {
        b.onStart(l, e, h);
      }
      u = !0;
    };
    this.itemEnd = function(l) {
      e++;
      if (void 0 !== b.onProgress) {
        b.onProgress(l, e, h);
      }
      if (e === h && (u = !1, void 0 !== b.onLoad)) {
        b.onLoad();
      }
    };
    this.itemError = function(l) {
      if (void 0 !== b.onError) {
        b.onError(l);
      }
    };
    this.resolveURL = function(l) {
      return d ? d(l) : l;
    };
    this.setURLModifier = function(l) {
      d = l;
      return this;
    };
    this.addHandler = function(l, a) {
      f.push(l, a);
      return this;
    };
    this.removeHandler = function(l) {
      l = f.indexOf(l);
      -1 !== l && f.splice(l, 2);
      return this;
    };
    this.getHandler = function(l) {
      for (var a = 0, c = f.length; a < c; a += 2) {
        var b = f[a], u = f[a + 1];
        b.global && (b.lastIndex = 0);
        if (b.test(l)) {
          return u;
        }
      }
      return null;
    };
  }
  function ra(l) {
    this.manager = void 0 !== l ? l : ji;
    this.crossOrigin = "anonymous";
    this.resourcePath = this.path = "";
  }
  function mb(l) {
    ra.call(this, l);
  }
  function Cg(l) {
    ra.call(this, l);
  }
  function Dg(l) {
    ra.call(this, l);
  }
  function tf(l) {
    ra.call(this, l);
  }
  function zd(l) {
    ra.call(this, l);
  }
  function uf(l) {
    ra.call(this, l);
  }
  function vf(l) {
    ra.call(this, l);
  }
  function fa() {
    this.type = "Curve";
    this.arcLengthDivisions = 200;
  }
  function gb(l, a, c, b, e, h, d, f) {
    fa.call(this);
    this.type = "EllipseCurve";
    this.aX = l || 0;
    this.aY = a || 0;
    this.xRadius = c || 1;
    this.yRadius = b || 1;
    this.aStartAngle = e || 0;
    this.aEndAngle = h || 2 * Math.PI;
    this.aClockwise = d || !1;
    this.aRotation = f || 0;
  }
  function Ad(l, a, c, b, e, h) {
    gb.call(this, l, a, c, c, b, e, h);
    this.type = "ArcCurve";
  }
  function Eg() {
    var l = 0, a = 0, c = 0, b = 0;
    return {initCatmullRom:function(u, e, h, d, f) {
      u = f * (h - u);
      d = f * (d - e);
      l = e;
      a = u;
      c = -3 * e + 3 * h - 2 * u - d;
      b = 2 * e - 2 * h + u + d;
    }, initNonuniformCatmullRom:function(u, e, h, d, f, g, m) {
      u = ((e - u) / f - (h - u) / (f + g) + (h - e) / g) * g;
      d = ((h - e) / g - (d - e) / (g + m) + (d - h) / m) * g;
      l = e;
      a = u;
      c = -3 * e + 3 * h - 2 * u - d;
      b = 2 * e - 2 * h + u + d;
    }, calc:function(u) {
      var e = u * u;
      return l + a * u + c * e + b * e * u;
    }};
  }
  function Wa(l, a, c, b) {
    fa.call(this);
    this.type = "CatmullRomCurve3";
    this.points = l || [];
    this.closed = a || !1;
    this.curveType = c || "centripetal";
    this.tension = b || .5;
  }
  function ki(l, a, c, b, e) {
    a = .5 * (b - a);
    e = .5 * (e - c);
    var u = l * l;
    return (2 * c - 2 * b + a + e) * l * u + (-3 * c + 3 * b - 2 * a - e) * u + a * l + c;
  }
  function De(l, a, c, b) {
    var u = 1 - l;
    return u * u * a + 2 * (1 - l) * l * c + l * l * b;
  }
  function Ee(l, a, c, b, e) {
    var u = 1 - l, h = 1 - l;
    return u * u * u * a + 3 * h * h * l * c + 3 * (1 - l) * l * l * b + l * l * l * e;
  }
  function ub(l, a, c, b) {
    fa.call(this);
    this.type = "CubicBezierCurve";
    this.v0 = l || new k;
    this.v1 = a || new k;
    this.v2 = c || new k;
    this.v3 = b || new k;
  }
  function Ib(l, a, c, b) {
    fa.call(this);
    this.type = "CubicBezierCurve3";
    this.v0 = l || new m;
    this.v1 = a || new m;
    this.v2 = c || new m;
    this.v3 = b || new m;
  }
  function bb(l, a) {
    fa.call(this);
    this.type = "LineCurve";
    this.v1 = l || new k;
    this.v2 = a || new k;
  }
  function vb(l, a) {
    fa.call(this);
    this.type = "LineCurve3";
    this.v1 = l || new m;
    this.v2 = a || new m;
  }
  function wb(l, a, c) {
    fa.call(this);
    this.type = "QuadraticBezierCurve";
    this.v0 = l || new k;
    this.v1 = a || new k;
    this.v2 = c || new k;
  }
  function Jb(l, a, c) {
    fa.call(this);
    this.type = "QuadraticBezierCurve3";
    this.v0 = l || new m;
    this.v1 = a || new m;
    this.v2 = c || new m;
  }
  function xb(l) {
    fa.call(this);
    this.type = "SplineCurve";
    this.points = l || [];
  }
  function Wb() {
    fa.call(this);
    this.type = "CurvePath";
    this.curves = [];
    this.autoClose = !1;
  }
  function yb(l) {
    Wb.call(this);
    this.type = "Path";
    this.currentPoint = new k;
    l && this.setFromPoints(l);
  }
  function qc(l) {
    yb.call(this, l);
    this.uuid = oa.generateUUID();
    this.type = "Shape";
    this.holes = [];
  }
  function xa(l, a) {
    t.call(this);
    this.type = "Light";
    this.color = new A(l);
    this.intensity = void 0 !== a ? a : 1;
    this.receiveShadow = void 0;
  }
  function wf(l, a, c) {
    xa.call(this, l, c);
    this.type = "HemisphereLight";
    this.castShadow = void 0;
    this.position.copy(t.DefaultUp);
    this.updateMatrix();
    this.groundColor = new A(a);
  }
  function Kb(l) {
    this.camera = l;
    this.bias = 0;
    this.radius = 1;
    this.mapSize = new k(512, 512);
    this.mapPass = this.map = null;
    this.matrix = new n;
    this._frustum = new Ga;
    this._frameExtents = new k(1, 1);
    this._viewportCount = 1;
    this._viewports = [new f(0, 0, 1, 1)];
  }
  function xf() {
    Kb.call(this, new ia(50, 1, .5, 500));
  }
  function yf(l, a, c, b, e, h) {
    xa.call(this, l, a);
    this.type = "SpotLight";
    this.position.copy(t.DefaultUp);
    this.updateMatrix();
    this.target = new t;
    Object.defineProperty(this, "power", {get:function() {
      return this.intensity * Math.PI;
    }, set:function(l) {
      this.intensity = l / Math.PI;
    }});
    this.distance = void 0 !== c ? c : 0;
    this.angle = void 0 !== b ? b : Math.PI / 3;
    this.penumbra = void 0 !== e ? e : 0;
    this.decay = void 0 !== h ? h : 1;
    this.shadow = new xf;
  }
  function Fg() {
    Kb.call(this, new ia(90, 1, .5, 500));
    this._frameExtents = new k(4, 2);
    this._viewportCount = 6;
    this._viewports = [new f(2, 1, 1, 1), new f(0, 1, 1, 1), new f(3, 1, 1, 1), new f(1, 1, 1, 1), new f(3, 0, 1, 1), new f(1, 0, 1, 1)];
    this._cubeDirections = [new m(1, 0, 0), new m(-1, 0, 0), new m(0, 0, 1), new m(0, 0, -1), new m(0, 1, 0), new m(0, -1, 0)];
    this._cubeUps = [new m(0, 1, 0), new m(0, 1, 0), new m(0, 1, 0), new m(0, 1, 0), new m(0, 0, 1), new m(0, 0, -1)];
  }
  function zf(l, a, c, b) {
    xa.call(this, l, a);
    this.type = "PointLight";
    Object.defineProperty(this, "power", {get:function() {
      return 4 * this.intensity * Math.PI;
    }, set:function(l) {
      this.intensity = l / (4 * Math.PI);
    }});
    this.distance = void 0 !== c ? c : 0;
    this.decay = void 0 !== b ? b : 1;
    this.shadow = new Fg;
  }
  function Bd(l, a, c, b, e, h) {
    T.call(this);
    this.type = "OrthographicCamera";
    this.zoom = 1;
    this.view = null;
    this.left = void 0 !== l ? l : -1;
    this.right = void 0 !== a ? a : 1;
    this.top = void 0 !== c ? c : 1;
    this.bottom = void 0 !== b ? b : -1;
    this.near = void 0 !== e ? e : .1;
    this.far = void 0 !== h ? h : 2E3;
    this.updateProjectionMatrix();
  }
  function Af() {
    Kb.call(this, new Bd(-5, 5, 5, -5, .5, 500));
  }
  function Bf(l, a) {
    xa.call(this, l, a);
    this.type = "DirectionalLight";
    this.position.copy(t.DefaultUp);
    this.updateMatrix();
    this.target = new t;
    this.shadow = new Af;
  }
  function Cf(l, a) {
    xa.call(this, l, a);
    this.type = "AmbientLight";
    this.castShadow = void 0;
  }
  function Df(l, a, c, b) {
    xa.call(this, l, a);
    this.type = "RectAreaLight";
    this.width = void 0 !== c ? c : 10;
    this.height = void 0 !== b ? b : 10;
  }
  function Ef() {
    this.coefficients = [];
    for (var l = 0; 9 > l; l++) {
      this.coefficients.push(new m);
    }
  }
  function nb(l, a) {
    xa.call(this, void 0, a);
    this.type = "LightProbe";
    this.sh = void 0 !== l ? l : new Ef;
  }
  function Ff(l) {
    ra.call(this, l);
    this.textures = {};
  }
  function Gf() {
    N.call(this);
    this.type = "InstancedBufferGeometry";
    this.maxInstancedCount = void 0;
  }
  function Hf(l, a, c, b) {
    "number" === typeof c && (b = c, c = !1, console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument."));
    J.call(this, l, a, c);
    this.meshPerAttribute = b || 1;
  }
  function If(l) {
    ra.call(this, l);
  }
  function Jf(l) {
    ra.call(this, l);
  }
  function Gg(l) {
    "undefined" === typeof createImageBitmap && console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported.");
    "undefined" === typeof fetch && console.warn("THREE.ImageBitmapLoader: fetch() not supported.");
    ra.call(this, l);
    this.options = void 0;
  }
  function Hg() {
    this.type = "ShapePath";
    this.color = new A;
    this.subPaths = [];
    this.currentPath = null;
  }
  function Ig(l) {
    this.type = "Font";
    this.data = l;
  }
  function Jg(l) {
    ra.call(this, l);
  }
  function Kf(l) {
    ra.call(this, l);
  }
  function Kg(l, a, c) {
    nb.call(this, void 0, c);
    l = (new A).set(l);
    c = (new A).set(a);
    a = new m(l.r, l.g, l.b);
    l = new m(c.r, c.g, c.b);
    c = Math.sqrt(Math.PI);
    var b = c * Math.sqrt(.75);
    this.sh.coefficients[0].copy(a).add(l).multiplyScalar(c);
    this.sh.coefficients[1].copy(a).sub(l).multiplyScalar(b);
  }
  function Lg(l, a) {
    nb.call(this, void 0, a);
    l = (new A).set(l);
    this.sh.coefficients[0].set(l.r, l.g, l.b).multiplyScalar(2 * Math.sqrt(Math.PI));
  }
  function li() {
    this.type = "StereoCamera";
    this.aspect = 1;
    this.eyeSep = .064;
    this.cameraL = new ia;
    this.cameraL.layers.enable(1);
    this.cameraL.matrixAutoUpdate = !1;
    this.cameraR = new ia;
    this.cameraR.layers.enable(2);
    this.cameraR.matrixAutoUpdate = !1;
    this._cache = {focus:null, fov:null, aspect:null, near:null, far:null, zoom:null, eyeSep:null};
  }
  function Mg(l) {
    this.autoStart = void 0 !== l ? l : !0;
    this.elapsedTime = this.oldTime = this.startTime = 0;
    this.running = !1;
  }
  function Ng() {
    t.call(this);
    this.type = "AudioListener";
    this.context = Og.getContext();
    this.gain = this.context.createGain();
    this.gain.connect(this.context.destination);
    this.filter = null;
    this.timeDelta = 0;
    this._clock = new Mg;
  }
  function Cd(l) {
    t.call(this);
    this.type = "Audio";
    this.listener = l;
    this.context = l.context;
    this.gain = this.context.createGain();
    this.gain.connect(l.getInput());
    this.autoplay = !1;
    this.buffer = null;
    this.detune = 0;
    this.loop = !1;
    this.offset = this.loopEnd = this.loopStart = 0;
    this.duration = void 0;
    this.playbackRate = 1;
    this.isPlaying = !1;
    this.hasPlaybackControl = !0;
    this.sourceType = "empty";
    this._progress = this._startedAt = 0;
    this.filters = [];
  }
  function Pg(l) {
    Cd.call(this, l);
    this.panner = this.context.createPanner();
    this.panner.panningModel = "HRTF";
    this.panner.connect(this.gain);
  }
  function Qg(l, a) {
    this.analyser = l.context.createAnalyser();
    this.analyser.fftSize = void 0 !== a ? a : 2048;
    this.data = new Uint8Array(this.analyser.frequencyBinCount);
    l.getOutput().connect(this.analyser);
  }
  function Rg(l, a, c) {
    this.binding = l;
    this.valueSize = c;
    switch(a) {
      case "quaternion":
        l = this._slerp;
        a = this._slerpAdditive;
        var b = this._setAdditiveIdentityQuaternion;
        this.buffer = new Float64Array(24);
        this._workIndex = 5;
        break;
      case "string":
      case "bool":
        a = l = this._select;
        b = this._setAdditiveIdentityOther;
        this.buffer = Array(5 * c);
        break;
      default:
        l = this._lerp, a = this._lerpAdditive, b = this._setAdditiveIdentityNumeric, this.buffer = new Float64Array(5 * c);
    }
    this._mixBufferRegion = l;
    this._mixBufferRegionAdditive = a;
    this._setIdentity = b;
    this._origIndex = 3;
    this._addIndex = 4;
    this.referenceCount = this.useCount = this.cumulativeWeightAdditive = this.cumulativeWeight = 0;
  }
  function mi(l, a, c) {
    c = c || Xa.parseTrackName(a);
    this._targetGroup = l;
    this._bindings = l.subscribe_(a, c);
  }
  function Xa(l, a, c) {
    this.path = a;
    this.parsedPath = c || Xa.parseTrackName(a);
    this.node = Xa.findNode(l, this.parsedPath.nodeName) || l;
    this.rootNode = l;
  }
  function ni() {
    this.uuid = oa.generateUUID();
    this._objects = Array.prototype.slice.call(arguments);
    this.nCachedObjects_ = 0;
    var l = {};
    this._indicesByUUID = l;
    for (var a = 0, c = arguments.length; a !== c; ++a) {
      l[arguments[a].uuid] = a;
    }
    this._paths = [];
    this._parsedPaths = [];
    this._bindings = [];
    this._bindingsIndicesByPath = {};
    var b = this;
    this.stats = {objects:{get total() {
      return b._objects.length;
    }, get inUse() {
      return this.total - b.nCachedObjects_;
    }}, get bindingsPerObject() {
      return b._bindings.length;
    }};
  }
  function oi(l, a, c, b) {
    this._mixer = l;
    this._clip = a;
    this._localRoot = c || null;
    this.blendMode = b || a.blendMode;
    l = a.tracks;
    a = l.length;
    c = Array(a);
    b = {endingStart:2400, endingEnd:2400};
    for (var e = 0; e !== a; ++e) {
      var u = l[e].createInterpolant(null);
      c[e] = u;
      u.settings = b;
    }
    this._interpolantSettings = b;
    this._interpolants = c;
    this._propertyBindings = Array(a);
    this._weightInterpolant = this._timeScaleInterpolant = this._byClipCacheIndex = this._cacheIndex = null;
    this.loop = 2201;
    this._loopCount = -1;
    this._startTime = null;
    this.time = 0;
    this._effectiveWeight = this.weight = this._effectiveTimeScale = this.timeScale = 1;
    this.repetitions = Infinity;
    this.paused = !1;
    this.enabled = !0;
    this.clampWhenFinished = !1;
    this.zeroSlopeAtEnd = this.zeroSlopeAtStart = !0;
  }
  function Sg(l) {
    this._root = l;
    this._initMemoryManager();
    this.time = this._accuIndex = 0;
    this.timeScale = 1;
  }
  function Lf(l, a) {
    "string" === typeof l && (console.warn("THREE.Uniform: Type parameter is no longer needed."), l = a);
    this.value = l;
  }
  function Tg(l, a, c) {
    Sb.call(this, l, a);
    this.meshPerAttribute = c || 1;
  }
  function Ug(l, a, c, b) {
    this.ray = new v(l, a);
    this.near = c || 0;
    this.far = b || Infinity;
    this.camera = null;
    this.layers = new h;
    this.params = {Mesh:{}, Line:{threshold:1}, LOD:{}, Points:{threshold:1}, Sprite:{}};
    Object.defineProperties(this.params, {PointCloud:{get:function() {
      console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points.");
      return this.Points;
    }}});
  }
  function pi(l, a) {
    return l.distance - a.distance;
  }
  function Vg(l, a, c, b) {
    l.layers.test(a.layers) && l.raycast(a, c);
    if (!0 === b) {
      l = l.children;
      b = 0;
      for (var e = l.length; b < e; b++) {
        Vg(l[b], a, c, !0);
      }
    }
  }
  function qi(l, a, c) {
    this.radius = void 0 !== l ? l : 1;
    this.phi = void 0 !== a ? a : 0;
    this.theta = void 0 !== c ? c : 0;
    return this;
  }
  function ri(l, a, c) {
    this.radius = void 0 !== l ? l : 1;
    this.theta = void 0 !== a ? a : 0;
    this.y = void 0 !== c ? c : 0;
    return this;
  }
  function Wg(l, a) {
    this.min = void 0 !== l ? l : new k(Infinity, Infinity);
    this.max = void 0 !== a ? a : new k(-Infinity, -Infinity);
  }
  function Xg(l, a) {
    this.start = void 0 !== l ? l : new m;
    this.end = void 0 !== a ? a : new m;
  }
  function Fe(l) {
    t.call(this);
    this.material = l;
    this.render = function() {
    };
  }
  function Dd(l, a) {
    t.call(this);
    this.light = l;
    this.light.updateMatrixWorld();
    this.matrix = l.matrixWorld;
    this.matrixAutoUpdate = !1;
    this.color = a;
    l = new N;
    a = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1];
    for (var c = 0, b = 1; 32 > c; c++, b++) {
      var e = c / 32 * Math.PI * 2, u = b / 32 * Math.PI * 2;
      a.push(Math.cos(e), Math.sin(e), 1, Math.cos(u), Math.sin(u), 1);
    }
    l.setAttribute("position", new Q(a, 3));
    a = new za({fog:!1, toneMapped:!1});
    this.cone = new Da(l, a);
    this.add(this.cone);
    this.update();
  }
  function si(l) {
    var a = [];
    l && l.isBone && a.push(l);
    for (var c = 0; c < l.children.length; c++) {
      a.push.apply(a, si(l.children[c]));
    }
    return a;
  }
  function Rc(l) {
    for (var a = si(l), c = new N, b = [], e = [], h = new A(0, 0, 1), d = new A(0, 1, 0), f = 0; f < a.length; f++) {
      var g = a[f];
      g.parent && g.parent.isBone && (b.push(0, 0, 0), b.push(0, 0, 0), e.push(h.r, h.g, h.b), e.push(d.r, d.g, d.b));
    }
    c.setAttribute("position", new Q(b, 3));
    c.setAttribute("color", new Q(e, 3));
    b = new za({vertexColors:!0, depthTest:!1, depthWrite:!1, toneMapped:!1, transparent:!0});
    Da.call(this, c, b);
    this.type = "SkeletonHelper";
    this.root = l;
    this.bones = a;
    this.matrix = l.matrixWorld;
    this.matrixAutoUpdate = !1;
  }
  function Ed(l, a, c) {
    this.light = l;
    this.light.updateMatrixWorld();
    this.color = c;
    l = new Gc(a, 4, 2);
    a = new K({wireframe:!0, fog:!1, toneMapped:!1});
    V.call(this, l, a);
    this.type = "PointLightHelper";
    this.matrix = this.light.matrixWorld;
    this.matrixAutoUpdate = !1;
    this.update();
  }
  function Fd(l, a, c) {
    t.call(this);
    this.light = l;
    this.light.updateMatrixWorld();
    this.matrix = l.matrixWorld;
    this.matrixAutoUpdate = !1;
    this.color = c;
    l = new Dc(a);
    l.rotateY(.5 * Math.PI);
    this.material = new K({wireframe:!0, fog:!1, toneMapped:!1});
    void 0 === this.color && (this.material.vertexColors = !0);
    a = l.getAttribute("position");
    a = new Float32Array(3 * a.count);
    l.setAttribute("color", new J(a, 3));
    this.add(new V(l, this.material));
    this.update();
  }
  function Mf(l, a, c, b) {
    l = l || 10;
    a = a || 10;
    c = new A(void 0 !== c ? c : 4473924);
    b = new A(void 0 !== b ? b : 8947848);
    var e = a / 2, u = l / a, h = l / 2;
    l = [];
    for (var d = [], f = 0, g = 0, m = -h; f <= a; f++, m += u) {
      l.push(-h, 0, m, h, 0, m);
      l.push(m, 0, -h, m, 0, h);
      var p = f === e ? c : b;
      p.toArray(d, g);
      g += 3;
      p.toArray(d, g);
      g += 3;
      p.toArray(d, g);
      g += 3;
      p.toArray(d, g);
      g += 3;
    }
    a = new N;
    a.setAttribute("position", new Q(l, 3));
    a.setAttribute("color", new Q(d, 3));
    c = new za({vertexColors:!0, toneMapped:!1});
    Da.call(this, a, c);
    this.type = "GridHelper";
  }
  function Nf(l, a, c, b, e, h) {
    l = l || 10;
    a = a || 16;
    c = c || 8;
    b = b || 64;
    e = new A(void 0 !== e ? e : 4473924);
    h = new A(void 0 !== h ? h : 8947848);
    var u = [], d = [], f;
    for (f = 0; f <= a; f++) {
      var g = f / a * 2 * Math.PI;
      var m = Math.sin(g) * l;
      g = Math.cos(g) * l;
      u.push(0, 0, 0);
      u.push(m, 0, g);
      var p = f & 1 ? e : h;
      d.push(p.r, p.g, p.b);
      d.push(p.r, p.g, p.b);
    }
    for (f = 0; f <= c; f++) {
      p = f & 1 ? e : h;
      var n = l - l / c * f;
      for (a = 0; a < b; a++) {
        g = a / b * 2 * Math.PI, m = Math.sin(g) * n, g = Math.cos(g) * n, u.push(m, 0, g), d.push(p.r, p.g, p.b), g = (a + 1) / b * 2 * Math.PI, m = Math.sin(g) * n, g = Math.cos(g) * n, u.push(m, 0, g), d.push(p.r, p.g, p.b);
      }
    }
    l = new N;
    l.setAttribute("position", new Q(u, 3));
    l.setAttribute("color", new Q(d, 3));
    u = new za({vertexColors:!0, toneMapped:!1});
    Da.call(this, l, u);
    this.type = "PolarGridHelper";
  }
  function Gd(l, a, c) {
    t.call(this);
    this.light = l;
    this.light.updateMatrixWorld();
    this.matrix = l.matrixWorld;
    this.matrixAutoUpdate = !1;
    this.color = c;
    void 0 === a && (a = 1);
    l = new N;
    l.setAttribute("position", new Q([-a, a, 0, a, a, 0, a, -a, 0, -a, -a, 0, -a, a, 0], 3));
    a = new za({fog:!1, toneMapped:!1});
    this.lightPlane = new eb(l, a);
    this.add(this.lightPlane);
    l = new N;
    l.setAttribute("position", new Q([0, 0, 0, 0, 0, 1], 3));
    this.targetLine = new eb(l, a);
    this.add(this.targetLine);
    this.update();
  }
  function Ge(l) {
    function a(l, a, b) {
      c(l, b);
      c(a, b);
    }
    function c(l, a) {
      h.push(0, 0, 0);
      d.push(a.r, a.g, a.b);
      void 0 === f[l] && (f[l] = []);
      f[l].push(h.length / 3 - 1);
    }
    var b = new N, e = new za({color:16777215, vertexColors:!0, toneMapped:!1}), h = [], d = [], f = {}, g = new A(16755200), m = new A(16711680), p = new A(43775), n = new A(16777215), k = new A(3355443);
    a("n1", "n2", g);
    a("n2", "n4", g);
    a("n4", "n3", g);
    a("n3", "n1", g);
    a("f1", "f2", g);
    a("f2", "f4", g);
    a("f4", "f3", g);
    a("f3", "f1", g);
    a("n1", "f1", g);
    a("n2", "f2", g);
    a("n3", "f3", g);
    a("n4", "f4", g);
    a("p", "n1", m);
    a("p", "n2", m);
    a("p", "n3", m);
    a("p", "n4", m);
    a("u1", "u2", p);
    a("u2", "u3", p);
    a("u3", "u1", p);
    a("c", "t", n);
    a("p", "c", k);
    a("cn1", "cn2", k);
    a("cn3", "cn4", k);
    a("cf1", "cf2", k);
    a("cf3", "cf4", k);
    b.setAttribute("position", new Q(h, 3));
    b.setAttribute("color", new Q(d, 3));
    Da.call(this, b, e);
    this.type = "CameraHelper";
    this.camera = l;
    this.camera.updateProjectionMatrix && this.camera.updateProjectionMatrix();
    this.matrix = l.matrixWorld;
    this.matrixAutoUpdate = !1;
    this.pointMap = f;
    this.update();
  }
  function Ia(l, a, c, b, e, h, d) {
    Of.set(e, h, d).unproject(b);
    l = a[l];
    if (void 0 !== l) {
      for (c = c.getAttribute("position"), a = 0, b = l.length; a < b; a++) {
        c.setXYZ(l[a], Of.x, Of.y, Of.z);
      }
    }
  }
  function Xb(l, a) {
    this.object = l;
    void 0 === a && (a = 16776960);
    l = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);
    var c = new Float32Array(24), b = new N;
    b.setIndex(new J(l, 1));
    b.setAttribute("position", new J(c, 3));
    Da.call(this, b, new za({color:a, toneMapped:!1}));
    this.type = "BoxHelper";
    this.matrixAutoUpdate = !1;
    this.update();
  }
  function He(l, a) {
    this.type = "Box3Helper";
    this.box = l;
    a = a || 16776960;
    l = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);
    var c = new N;
    c.setIndex(new J(l, 1));
    c.setAttribute("position", new Q([1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1], 3));
    Da.call(this, c, new za({color:a, toneMapped:!1}));
    this.type = "Box3Helper";
    this.geometry.computeBoundingSphere();
  }
  function Ie(l, a, c) {
    this.plane = l;
    this.size = void 0 === a ? 1 : a;
    l = void 0 !== c ? c : 16776960;
    a = new N;
    a.setAttribute("position", new Q([1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0], 3));
    a.computeBoundingSphere();
    eb.call(this, a, new za({color:l, toneMapped:!1}));
    this.type = "PlaneHelper";
    a = new N;
    a.setAttribute("position", new Q([1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1], 3));
    a.computeBoundingSphere();
    this.add(new V(a, new K({color:l, opacity:.2, transparent:!0, depthWrite:!1, toneMapped:!1})));
  }
  function Yb(l, a, c, b, e, h) {
    t.call(this);
    this.type = "ArrowHelper";
    void 0 === l && (l = new m(0, 0, 1));
    void 0 === a && (a = new m(0, 0, 0));
    void 0 === c && (c = 1);
    void 0 === b && (b = 16776960);
    void 0 === e && (e = .2 * c);
    void 0 === h && (h = .2 * e);
    void 0 === Pf && (Pf = new N, Pf.setAttribute("position", new Q([0, 0, 0, 0, 1, 0], 3)), Yg = new Ub(0, .5, 1, 5, 1), Yg.translate(0, -.5, 0));
    this.position.copy(a);
    this.line = new eb(Pf, new za({color:b, toneMapped:!1}));
    this.line.matrixAutoUpdate = !1;
    this.add(this.line);
    this.cone = new V(Yg, new K({color:b, toneMapped:!1}));
    this.cone.matrixAutoUpdate = !1;
    this.add(this.cone);
    this.setDirection(l);
    this.setLength(c, e, h);
  }
  function Je(l) {
    l = l || 1;
    var a = [0, 0, 0, l, 0, 0, 0, 0, 0, 0, l, 0, 0, 0, 0, 0, 0, l];
    l = new N;
    l.setAttribute("position", new Q(a, 3));
    l.setAttribute("color", new Q([1, 0, 0, 1, .6, 0, 0, 1, 0, .6, 1, 0, 0, 0, 1, 0, .6, 1], 3));
    a = new za({vertexColors:!0, toneMapped:!1});
    Da.call(this, l, a);
    this.type = "AxesHelper";
  }
  function Zg(l) {
    this._renderer = l;
    this._pingPongRenderTarget = null;
    l = new Float32Array(20);
    var a = new m(0, 1, 0);
    l = new Vb({defines:{n:20}, uniforms:{envMap:{value:null}, samples:{value:1}, weights:{value:l}, latitudinal:{value:!1}, dTheta:{value:0}, mipInt:{value:0}, poleAxis:{value:a}, inputEncoding:{value:Lb[3E3]}, outputEncoding:{value:Lb[3E3]}}, vertexShader:$g(), fragmentShader:"\nprecision mediump float;\nprecision mediump int;\nvarying vec3 vOutputDirection;\nuniform sampler2D envMap;\nuniform int samples;\nuniform float weights[n];\nuniform bool latitudinal;\nuniform float dTheta;\nuniform float mipInt;\nuniform vec3 poleAxis;\n\n" + 
    ah() + "\n\n#define ENVMAP_TYPE_CUBE_UV\n#include <cube_uv_reflection_fragment>\n\nvec3 getSample(float theta, vec3 axis) {\n\tfloat cosTheta = cos(theta);\n\t// Rodrigues' axis-angle rotation\n\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t+ cross(axis, vOutputDirection) * sin(theta)\n\t\t+ axis * dot(axis, vOutputDirection) * (1.0 - cosTheta);\n\treturn bilinearCubeUV(envMap, sampleDirection, mipInt);\n}\n\nvoid main() {\n\tvec3 axis = latitudinal ? poleAxis : cross(poleAxis, vOutputDirection);\n\tif (all(equal(axis, vec3(0.0))))\n\t\taxis = vec3(vOutputDirection.z, 0.0, - vOutputDirection.x);\n\taxis = normalize(axis);\n\tgl_FragColor = vec4(0.0);\n\tgl_FragColor.rgb += weights[0] * getSample(0.0, axis);\n\tfor (int i = 1; i < n; i++) {\n\t\tif (i >= samples)\n\t\t\tbreak;\n\t\tfloat theta = dTheta * float(i);\n\t\tgl_FragColor.rgb += weights[i] * getSample(-1.0 * theta, axis);\n\t\tgl_FragColor.rgb += weights[i] * getSample(theta, axis);\n\t}\n\tgl_FragColor = linearToOutputTexel(gl_FragColor);\n}\n\t\t", 
    blending:0, depthTest:!1, depthWrite:!1});
    l.type = "SphericalGaussianBlur";
    this._blurMaterial = l;
    this._cubemapShader = this._equirectShader = null;
    this._compileMaterial(this._blurMaterial);
  }
  function ti(l) {
    l = new e(3 * Mb, 3 * Mb, l);
    l.texture.mapping = 306;
    l.texture.name = "PMREM.cubeUv";
    l.scissorTest = !0;
    return l;
  }
  function bh(l, a, c, b, e) {
    l.viewport.set(a, c, b, e);
    l.scissor.set(a, c, b, e);
  }
  function ui() {
    var l = new k(1, 1);
    l = new Vb({uniforms:{envMap:{value:null}, texelSize:{value:l}, inputEncoding:{value:Lb[3E3]}, outputEncoding:{value:Lb[3E3]}}, vertexShader:$g(), fragmentShader:"\nprecision mediump float;\nprecision mediump int;\nvarying vec3 vOutputDirection;\nuniform sampler2D envMap;\nuniform vec2 texelSize;\n\n" + ah() + "\n\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n\nvoid main() {\n\tgl_FragColor = vec4(0.0);\n\tvec3 outputDirection = normalize(vOutputDirection);\n\tvec2 uv;\n\tuv.y = asin(clamp(outputDirection.y, -1.0, 1.0)) * RECIPROCAL_PI + 0.5;\n\tuv.x = atan(outputDirection.z, outputDirection.x) * RECIPROCAL_PI2 + 0.5;\n\tvec2 f = fract(uv / texelSize - 0.5);\n\tuv -= f * texelSize;\n\tvec3 tl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n\tuv.x += texelSize.x;\n\tvec3 tr = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n\tuv.y += texelSize.y;\n\tvec3 br = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n\tuv.x -= texelSize.x;\n\tvec3 bl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n\tvec3 tm = mix(tl, tr, f.x);\n\tvec3 bm = mix(bl, br, f.x);\n\tgl_FragColor.rgb = mix(tm, bm, f.y);\n\tgl_FragColor = linearToOutputTexel(gl_FragColor);\n}\n\t\t", 
    blending:0, depthTest:!1, depthWrite:!1});
    l.type = "EquirectangularToCubeUV";
    return l;
  }
  function vi() {
    var l = new Vb({uniforms:{envMap:{value:null}, inputEncoding:{value:Lb[3E3]}, outputEncoding:{value:Lb[3E3]}}, vertexShader:$g(), fragmentShader:"\nprecision mediump float;\nprecision mediump int;\nvarying vec3 vOutputDirection;\nuniform samplerCube envMap;\n\n" + ah() + "\n\nvoid main() {\n\tgl_FragColor = vec4(0.0);\n\tgl_FragColor.rgb = envMapTexelToLinear(textureCube(envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ))).rgb;\n\tgl_FragColor = linearToOutputTexel(gl_FragColor);\n}\n\t\t", 
    blending:0, depthTest:!1, depthWrite:!1});
    l.type = "CubemapToCubeUV";
    return l;
  }
  function $g() {
    return "\nprecision mediump float;\nprecision mediump int;\nattribute vec3 position;\nattribute vec2 uv;\nattribute float faceIndex;\nvarying vec3 vOutputDirection;\nvec3 getDirection(vec2 uv, float face) {\n\tuv = 2.0 * uv - 1.0;\n\tvec3 direction = vec3(uv, 1.0);\n\tif (face == 0.0) {\n\t\tdirection = direction.zyx;\n\t\tdirection.z *= -1.0;\n\t} else if (face == 1.0) {\n\t\tdirection = direction.xzy;\n\t\tdirection.z *= -1.0;\n\t} else if (face == 3.0) {\n\t\tdirection = direction.zyx;\n\t\tdirection.x *= -1.0;\n\t} else if (face == 4.0) {\n\t\tdirection = direction.xzy;\n\t\tdirection.y *= -1.0;\n\t} else if (face == 5.0) {\n\t\tdirection.xz *= -1.0;\n\t}\n\treturn direction;\n}\nvoid main() {\n\tvOutputDirection = getDirection(uv, faceIndex);\n\tgl_Position = vec4( position, 1.0 );\n}\n\t";
  }
  function ah() {
    return "\nuniform int inputEncoding;\nuniform int outputEncoding;\n\n#include <encodings_pars_fragment>\n\nvec4 inputTexelToLinear(vec4 value){\n\tif(inputEncoding == 0){\n\t\treturn value;\n\t}else if(inputEncoding == 1){\n\t\treturn sRGBToLinear(value);\n\t}else if(inputEncoding == 2){\n\t\treturn RGBEToLinear(value);\n\t}else if(inputEncoding == 3){\n\t\treturn RGBMToLinear(value, 7.0);\n\t}else if(inputEncoding == 4){\n\t\treturn RGBMToLinear(value, 16.0);\n\t}else if(inputEncoding == 5){\n\t\treturn RGBDToLinear(value, 256.0);\n\t}else{\n\t\treturn GammaToLinear(value, 2.2);\n\t}\n}\n\nvec4 linearToOutputTexel(vec4 value){\n\tif(outputEncoding == 0){\n\t\treturn value;\n\t}else if(outputEncoding == 1){\n\t\treturn LinearTosRGB(value);\n\t}else if(outputEncoding == 2){\n\t\treturn LinearToRGBE(value);\n\t}else if(outputEncoding == 3){\n\t\treturn LinearToRGBM(value, 7.0);\n\t}else if(outputEncoding == 4){\n\t\treturn LinearToRGBM(value, 16.0);\n\t}else if(outputEncoding == 5){\n\t\treturn LinearToRGBD(value, 256.0);\n\t}else{\n\t\treturn LinearToGamma(value, 2.2);\n\t}\n}\n\nvec4 envMapTexelToLinear(vec4 color) {\n\treturn inputTexelToLinear(color);\n}\n\t";
  }
  function wi(l) {
    console.warn("THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.");
    Wa.call(this, l);
    this.type = "catmullrom";
    this.closed = !0;
  }
  function xi(l) {
    console.warn("THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.");
    Wa.call(this, l);
    this.type = "catmullrom";
  }
  function ch(l) {
    console.warn("THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.");
    Wa.call(this, l);
    this.type = "catmullrom";
  }
  void 0 === Number.EPSILON && (Number.EPSILON = Math.pow(2, -52));
  void 0 === Number.isInteger && (Number.isInteger = function(l) {
    return "number" === typeof l && isFinite(l) && Math.floor(l) === l;
  });
  void 0 === Math.sign && (Math.sign = function(l) {
    return 0 > l ? -1 : 0 < l ? 1 : +l;
  });
  !1 === "name" in Function.prototype && Object.defineProperty(Function.prototype, "name", {get:function() {
    return this.toString().match(/^\s*function\s*([^\(\s]*)/)[1];
  }});
  void 0 === Object.assign && (Object.assign = function(l) {
    if (void 0 === l || null === l) {
      throw new TypeError("Cannot convert undefined or null to object");
    }
    for (var a = Object(l), c = 1; c < arguments.length; c++) {
      var b = arguments[c];
      if (void 0 !== b && null !== b) {
        for (var e in b) {
          Object.prototype.hasOwnProperty.call(b, e) && (a[e] = b[e]);
        }
      }
    }
    return a;
  });
  Object.assign(d.prototype, {addEventListener:function(l, a) {
    void 0 === this._listeners && (this._listeners = {});
    var c = this._listeners;
    void 0 === c[l] && (c[l] = []);
    -1 === c[l].indexOf(a) && c[l].push(a);
  }, hasEventListener:function(l, a) {
    if (void 0 === this._listeners) {
      return !1;
    }
    var c = this._listeners;
    return void 0 !== c[l] && -1 !== c[l].indexOf(a);
  }, removeEventListener:function(l, a) {
    void 0 !== this._listeners && (l = this._listeners[l], void 0 !== l && (a = l.indexOf(a), -1 !== a && l.splice(a, 1)));
  }, dispatchEvent:function(a) {
    if (void 0 !== this._listeners) {
      var l = this._listeners[a.type];
      if (void 0 !== l) {
        a.target = this;
        l = l.slice(0);
        for (var c = 0, b = l.length; c < b; c++) {
          l[c].call(this, a);
        }
      }
    }
  }});
  for (var Ua = [], Ke = 0; 256 > Ke; Ke++) {
    Ua[Ke] = (16 > Ke ? "0" : "") + Ke.toString(16);
  }
  var oa = {DEG2RAD:Math.PI / 180, RAD2DEG:180 / Math.PI, generateUUID:function() {
    var a = 4294967295 * Math.random() | 0, c = 4294967295 * Math.random() | 0, b = 4294967295 * Math.random() | 0, e = 4294967295 * Math.random() | 0;
    return (Ua[a & 255] + Ua[a >> 8 & 255] + Ua[a >> 16 & 255] + Ua[a >> 24 & 255] + "-" + Ua[c & 255] + Ua[c >> 8 & 255] + "-" + Ua[c >> 16 & 15 | 64] + Ua[c >> 24 & 255] + "-" + Ua[b & 63 | 128] + Ua[b >> 8 & 255] + "-" + Ua[b >> 16 & 255] + Ua[b >> 24 & 255] + Ua[e & 255] + Ua[e >> 8 & 255] + Ua[e >> 16 & 255] + Ua[e >> 24 & 255]).toUpperCase();
  }, clamp:function(a, c, b) {
    return Math.max(c, Math.min(b, a));
  }, euclideanModulo:function(a, c) {
    return (a % c + c) % c;
  }, mapLinear:function(a, c, b, e, h) {
    return e + (a - c) * (h - e) / (b - c);
  }, lerp:function(a, c, b) {
    return (1 - b) * a + b * c;
  }, smoothstep:function(a, c, b) {
    if (a <= c) {
      return 0;
    }
    if (a >= b) {
      return 1;
    }
    a = (a - c) / (b - c);
    return a * a * (3 - 2 * a);
  }, smootherstep:function(a, c, b) {
    if (a <= c) {
      return 0;
    }
    if (a >= b) {
      return 1;
    }
    a = (a - c) / (b - c);
    return a * a * a * (a * (6 * a - 15) + 10);
  }, randInt:function(a, c) {
    return a + Math.floor(Math.random() * (c - a + 1));
  }, randFloat:function(a, c) {
    return a + Math.random() * (c - a);
  }, randFloatSpread:function(a) {
    return a * (.5 - Math.random());
  }, degToRad:function(a) {
    return a * oa.DEG2RAD;
  }, radToDeg:function(a) {
    return a * oa.RAD2DEG;
  }, isPowerOfTwo:function(a) {
    return 0 === (a & a - 1) && 0 !== a;
  }, ceilPowerOfTwo:function(a) {
    return Math.pow(2, Math.ceil(Math.log(a) / Math.LN2));
  }, floorPowerOfTwo:function(a) {
    return Math.pow(2, Math.floor(Math.log(a) / Math.LN2));
  }, setQuaternionFromProperEuler:function(a, c, b, e, h) {
    var l = Math.cos, u = Math.sin, d = l(b / 2);
    b = u(b / 2);
    var f = l((c + e) / 2), g = u((c + e) / 2), m = l((c - e) / 2), p = u((c - e) / 2);
    l = l((e - c) / 2);
    c = u((e - c) / 2);
    switch(h) {
      case "XYX":
        a.set(d * g, b * m, b * p, d * f);
        break;
      case "YZY":
        a.set(b * p, d * g, b * m, d * f);
        break;
      case "ZXZ":
        a.set(b * m, b * p, d * g, d * f);
        break;
      case "XZX":
        a.set(d * g, b * c, b * l, d * f);
        break;
      case "YXY":
        a.set(b * l, d * g, b * c, d * f);
        break;
      case "ZYZ":
        a.set(b * c, b * l, d * g, d * f);
        break;
      default:
        console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: " + h);
    }
  }};
  Object.defineProperties(k.prototype, {width:{get:function() {
    return this.x;
  }, set:function(a) {
    this.x = a;
  }}, height:{get:function() {
    return this.y;
  }, set:function(a) {
    this.y = a;
  }}});
  Object.assign(k.prototype, {isVector2:!0, set:function(a, c) {
    this.x = a;
    this.y = c;
    return this;
  }, setScalar:function(a) {
    this.y = this.x = a;
    return this;
  }, setX:function(a) {
    this.x = a;
    return this;
  }, setY:function(a) {
    this.y = a;
    return this;
  }, setComponent:function(a, c) {
    switch(a) {
      case 0:
        this.x = c;
        break;
      case 1:
        this.y = c;
        break;
      default:
        throw Error("index is out of range: " + a);
    }
    return this;
  }, getComponent:function(a) {
    switch(a) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      default:
        throw Error("index is out of range: " + a);
    }
  }, clone:function() {
    return new this.constructor(this.x, this.y);
  }, copy:function(a) {
    this.x = a.x;
    this.y = a.y;
    return this;
  }, add:function(a, c) {
    if (void 0 !== c) {
      return console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(a, c);
    }
    this.x += a.x;
    this.y += a.y;
    return this;
  }, addScalar:function(a) {
    this.x += a;
    this.y += a;
    return this;
  }, addVectors:function(a, c) {
    this.x = a.x + c.x;
    this.y = a.y + c.y;
    return this;
  }, addScaledVector:function(a, c) {
    this.x += a.x * c;
    this.y += a.y * c;
    return this;
  }, sub:function(a, c) {
    if (void 0 !== c) {
      return console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(a, c);
    }
    this.x -= a.x;
    this.y -= a.y;
    return this;
  }, subScalar:function(a) {
    this.x -= a;
    this.y -= a;
    return this;
  }, subVectors:function(a, c) {
    this.x = a.x - c.x;
    this.y = a.y - c.y;
    return this;
  }, multiply:function(a) {
    this.x *= a.x;
    this.y *= a.y;
    return this;
  }, multiplyScalar:function(a) {
    this.x *= a;
    this.y *= a;
    return this;
  }, divide:function(a) {
    this.x /= a.x;
    this.y /= a.y;
    return this;
  }, divideScalar:function(a) {
    return this.multiplyScalar(1 / a);
  }, applyMatrix3:function(a) {
    var l = this.x, c = this.y;
    a = a.elements;
    this.x = a[0] * l + a[3] * c + a[6];
    this.y = a[1] * l + a[4] * c + a[7];
    return this;
  }, min:function(a) {
    this.x = Math.min(this.x, a.x);
    this.y = Math.min(this.y, a.y);
    return this;
  }, max:function(a) {
    this.x = Math.max(this.x, a.x);
    this.y = Math.max(this.y, a.y);
    return this;
  }, clamp:function(a, c) {
    this.x = Math.max(a.x, Math.min(c.x, this.x));
    this.y = Math.max(a.y, Math.min(c.y, this.y));
    return this;
  }, clampScalar:function(a, c) {
    this.x = Math.max(a, Math.min(c, this.x));
    this.y = Math.max(a, Math.min(c, this.y));
    return this;
  }, clampLength:function(a, c) {
    var l = this.length();
    return this.divideScalar(l || 1).multiplyScalar(Math.max(a, Math.min(c, l)));
  }, floor:function() {
    this.x = Math.floor(this.x);
    this.y = Math.floor(this.y);
    return this;
  }, ceil:function() {
    this.x = Math.ceil(this.x);
    this.y = Math.ceil(this.y);
    return this;
  }, round:function() {
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    return this;
  }, roundToZero:function() {
    this.x = 0 > this.x ? Math.ceil(this.x) : Math.floor(this.x);
    this.y = 0 > this.y ? Math.ceil(this.y) : Math.floor(this.y);
    return this;
  }, negate:function() {
    this.x = -this.x;
    this.y = -this.y;
    return this;
  }, dot:function(a) {
    return this.x * a.x + this.y * a.y;
  }, cross:function(a) {
    return this.x * a.y - this.y * a.x;
  }, lengthSq:function() {
    return this.x * this.x + this.y * this.y;
  }, length:function() {
    return Math.sqrt(this.x * this.x + this.y * this.y);
  }, manhattanLength:function() {
    return Math.abs(this.x) + Math.abs(this.y);
  }, normalize:function() {
    return this.divideScalar(this.length() || 1);
  }, angle:function() {
    return Math.atan2(-this.y, -this.x) + Math.PI;
  }, distanceTo:function(a) {
    return Math.sqrt(this.distanceToSquared(a));
  }, distanceToSquared:function(a) {
    var l = this.x - a.x;
    a = this.y - a.y;
    return l * l + a * a;
  }, manhattanDistanceTo:function(a) {
    return Math.abs(this.x - a.x) + Math.abs(this.y - a.y);
  }, setLength:function(a) {
    return this.normalize().multiplyScalar(a);
  }, lerp:function(a, c) {
    this.x += (a.x - this.x) * c;
    this.y += (a.y - this.y) * c;
    return this;
  }, lerpVectors:function(a, c, b) {
    return this.subVectors(c, a).multiplyScalar(b).add(a);
  }, equals:function(a) {
    return a.x === this.x && a.y === this.y;
  }, fromArray:function(a, c) {
    void 0 === c && (c = 0);
    this.x = a[c];
    this.y = a[c + 1];
    return this;
  }, toArray:function(a, c) {
    void 0 === a && (a = []);
    void 0 === c && (c = 0);
    a[c] = this.x;
    a[c + 1] = this.y;
    return a;
  }, fromBufferAttribute:function(a, c, b) {
    void 0 !== b && console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute().");
    this.x = a.getX(c);
    this.y = a.getY(c);
    return this;
  }, rotateAround:function(a, c) {
    var l = Math.cos(c);
    c = Math.sin(c);
    var b = this.x - a.x, e = this.y - a.y;
    this.x = b * l - e * c + a.x;
    this.y = b * c + e * l + a.y;
    return this;
  }, random:function() {
    this.x = Math.random();
    this.y = Math.random();
    return this;
  }});
  Object.assign(b.prototype, {isMatrix3:!0, set:function(a, c, b, e, h, d, f, g, m) {
    var l = this.elements;
    l[0] = a;
    l[1] = e;
    l[2] = f;
    l[3] = c;
    l[4] = h;
    l[5] = g;
    l[6] = b;
    l[7] = d;
    l[8] = m;
    return this;
  }, identity:function() {
    this.set(1, 0, 0, 0, 1, 0, 0, 0, 1);
    return this;
  }, clone:function() {
    return (new this.constructor).fromArray(this.elements);
  }, copy:function(a) {
    var l = this.elements;
    a = a.elements;
    l[0] = a[0];
    l[1] = a[1];
    l[2] = a[2];
    l[3] = a[3];
    l[4] = a[4];
    l[5] = a[5];
    l[6] = a[6];
    l[7] = a[7];
    l[8] = a[8];
    return this;
  }, extractBasis:function(a, c, b) {
    a.setFromMatrix3Column(this, 0);
    c.setFromMatrix3Column(this, 1);
    b.setFromMatrix3Column(this, 2);
    return this;
  }, setFromMatrix4:function(a) {
    a = a.elements;
    this.set(a[0], a[4], a[8], a[1], a[5], a[9], a[2], a[6], a[10]);
    return this;
  }, multiply:function(a) {
    return this.multiplyMatrices(this, a);
  }, premultiply:function(a) {
    return this.multiplyMatrices(a, this);
  }, multiplyMatrices:function(a, c) {
    var l = a.elements, b = c.elements;
    c = this.elements;
    a = l[0];
    var e = l[3], h = l[6], d = l[1], u = l[4], f = l[7], g = l[2], m = l[5];
    l = l[8];
    var p = b[0], n = b[3], k = b[6], q = b[1], r = b[4], t = b[7], v = b[2], z = b[5];
    b = b[8];
    c[0] = a * p + e * q + h * v;
    c[3] = a * n + e * r + h * z;
    c[6] = a * k + e * t + h * b;
    c[1] = d * p + u * q + f * v;
    c[4] = d * n + u * r + f * z;
    c[7] = d * k + u * t + f * b;
    c[2] = g * p + m * q + l * v;
    c[5] = g * n + m * r + l * z;
    c[8] = g * k + m * t + l * b;
    return this;
  }, multiplyScalar:function(a) {
    var l = this.elements;
    l[0] *= a;
    l[3] *= a;
    l[6] *= a;
    l[1] *= a;
    l[4] *= a;
    l[7] *= a;
    l[2] *= a;
    l[5] *= a;
    l[8] *= a;
    return this;
  }, determinant:function() {
    var a = this.elements, c = a[0], b = a[1], e = a[2], h = a[3], d = a[4], f = a[5], g = a[6], m = a[7];
    a = a[8];
    return c * d * a - c * f * m - b * h * a + b * f * g + e * h * m - e * d * g;
  }, getInverse:function(a, c) {
    void 0 !== c && console.warn("THREE.Matrix3: .getInverse() can no longer be configured to throw on degenerate.");
    var l = a.elements;
    a = this.elements;
    c = l[0];
    var b = l[1], e = l[2], h = l[3], d = l[4], f = l[5], u = l[6], g = l[7];
    l = l[8];
    var m = l * d - f * g, p = f * u - l * h, n = g * h - d * u, k = c * m + b * p + e * n;
    if (0 === k) {
      return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
    k = 1 / k;
    a[0] = m * k;
    a[1] = (e * g - l * b) * k;
    a[2] = (f * b - e * d) * k;
    a[3] = p * k;
    a[4] = (l * c - e * u) * k;
    a[5] = (e * h - f * c) * k;
    a[6] = n * k;
    a[7] = (b * u - g * c) * k;
    a[8] = (d * c - b * h) * k;
    return this;
  }, transpose:function() {
    var a = this.elements;
    var c = a[1];
    a[1] = a[3];
    a[3] = c;
    c = a[2];
    a[2] = a[6];
    a[6] = c;
    c = a[5];
    a[5] = a[7];
    a[7] = c;
    return this;
  }, getNormalMatrix:function(a) {
    return this.setFromMatrix4(a).getInverse(this).transpose();
  }, transposeIntoArray:function(a) {
    var l = this.elements;
    a[0] = l[0];
    a[1] = l[3];
    a[2] = l[6];
    a[3] = l[1];
    a[4] = l[4];
    a[5] = l[7];
    a[6] = l[2];
    a[7] = l[5];
    a[8] = l[8];
    return this;
  }, setUvTransform:function(a, c, b, e, h, d, f) {
    var l = Math.cos(h);
    h = Math.sin(h);
    this.set(b * l, b * h, -b * (l * d + h * f) + d + a, -e * h, e * l, -e * (-h * d + l * f) + f + c, 0, 0, 1);
  }, scale:function(a, c) {
    var l = this.elements;
    l[0] *= a;
    l[3] *= a;
    l[6] *= a;
    l[1] *= c;
    l[4] *= c;
    l[7] *= c;
    return this;
  }, rotate:function(a) {
    var l = Math.cos(a);
    a = Math.sin(a);
    var c = this.elements, b = c[0], e = c[3], h = c[6], d = c[1], f = c[4], g = c[7];
    c[0] = l * b + a * d;
    c[3] = l * e + a * f;
    c[6] = l * h + a * g;
    c[1] = -a * b + l * d;
    c[4] = -a * e + l * f;
    c[7] = -a * h + l * g;
    return this;
  }, translate:function(a, c) {
    var l = this.elements;
    l[0] += a * l[2];
    l[3] += a * l[5];
    l[6] += a * l[8];
    l[1] += c * l[2];
    l[4] += c * l[5];
    l[7] += c * l[8];
    return this;
  }, equals:function(a) {
    var l = this.elements;
    a = a.elements;
    for (var c = 0; 9 > c; c++) {
      if (l[c] !== a[c]) {
        return !1;
      }
    }
    return !0;
  }, fromArray:function(a, c) {
    void 0 === c && (c = 0);
    for (var l = 0; 9 > l; l++) {
      this.elements[l] = a[l + c];
    }
    return this;
  }, toArray:function(a, c) {
    void 0 === a && (a = []);
    void 0 === c && (c = 0);
    var l = this.elements;
    a[c] = l[0];
    a[c + 1] = l[1];
    a[c + 2] = l[2];
    a[c + 3] = l[3];
    a[c + 4] = l[4];
    a[c + 5] = l[5];
    a[c + 6] = l[6];
    a[c + 7] = l[7];
    a[c + 8] = l[8];
    return a;
  }});
  var Hd, rc = {getDataURL:function(a) {
    if ("undefined" == typeof HTMLCanvasElement) {
      return a.src;
    }
    if (!(a instanceof HTMLCanvasElement)) {
      void 0 === Hd && (Hd = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas"));
      Hd.width = a.width;
      Hd.height = a.height;
      var l = Hd.getContext("2d");
      a instanceof ImageData ? l.putImageData(a, 0, 0) : l.drawImage(a, 0, 0, a.width, a.height);
      a = Hd;
    }
    return 2048 < a.width || 2048 < a.height ? a.toDataURL("image/jpeg", .6) : a.toDataURL("image/png");
  }}, jj = 0;
  g.DEFAULT_IMAGE = void 0;
  g.DEFAULT_MAPPING = 300;
  g.prototype = Object.assign(Object.create(d.prototype), {constructor:g, isTexture:!0, updateMatrix:function() {
    this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(a) {
    this.name = a.name;
    this.image = a.image;
    this.mipmaps = a.mipmaps.slice(0);
    this.mapping = a.mapping;
    this.wrapS = a.wrapS;
    this.wrapT = a.wrapT;
    this.magFilter = a.magFilter;
    this.minFilter = a.minFilter;
    this.anisotropy = a.anisotropy;
    this.format = a.format;
    this.internalFormat = a.internalFormat;
    this.type = a.type;
    this.offset.copy(a.offset);
    this.repeat.copy(a.repeat);
    this.center.copy(a.center);
    this.rotation = a.rotation;
    this.matrixAutoUpdate = a.matrixAutoUpdate;
    this.matrix.copy(a.matrix);
    this.generateMipmaps = a.generateMipmaps;
    this.premultiplyAlpha = a.premultiplyAlpha;
    this.flipY = a.flipY;
    this.unpackAlignment = a.unpackAlignment;
    this.encoding = a.encoding;
    return this;
  }, toJSON:function(a) {
    var l = void 0 === a || "string" === typeof a;
    if (!l && void 0 !== a.textures[this.uuid]) {
      return a.textures[this.uuid];
    }
    var c = {metadata:{version:4.5, type:"Texture", generator:"Texture.toJSON"}, uuid:this.uuid, name:this.name, mapping:this.mapping, repeat:[this.repeat.x, this.repeat.y], offset:[this.offset.x, this.offset.y], center:[this.center.x, this.center.y], rotation:this.rotation, wrap:[this.wrapS, this.wrapT], format:this.format, type:this.type, encoding:this.encoding, minFilter:this.minFilter, magFilter:this.magFilter, anisotropy:this.anisotropy, flipY:this.flipY, premultiplyAlpha:this.premultiplyAlpha, 
    unpackAlignment:this.unpackAlignment};
    if (void 0 !== this.image) {
      var b = this.image;
      void 0 === b.uuid && (b.uuid = oa.generateUUID());
      if (!l && void 0 === a.images[b.uuid]) {
        if (Array.isArray(b)) {
          var e = [];
          for (var h = 0, d = b.length; h < d; h++) {
            e.push(rc.getDataURL(b[h]));
          }
        } else {
          e = rc.getDataURL(b);
        }
        a.images[b.uuid] = {uuid:b.uuid, url:e};
      }
      c.image = b.uuid;
    }
    l || (a.textures[this.uuid] = c);
    return c;
  }, dispose:function() {
    this.dispatchEvent({type:"dispose"});
  }, transformUv:function(a) {
    if (300 !== this.mapping) {
      return a;
    }
    a.applyMatrix3(this.matrix);
    if (0 > a.x || 1 < a.x) {
      switch(this.wrapS) {
        case 1E3:
          a.x -= Math.floor(a.x);
          break;
        case 1001:
          a.x = 0 > a.x ? 0 : 1;
          break;
        case 1002:
          a.x = 1 === Math.abs(Math.floor(a.x) % 2) ? Math.ceil(a.x) - a.x : a.x - Math.floor(a.x);
      }
    }
    if (0 > a.y || 1 < a.y) {
      switch(this.wrapT) {
        case 1E3:
          a.y -= Math.floor(a.y);
          break;
        case 1001:
          a.y = 0 > a.y ? 0 : 1;
          break;
        case 1002:
          a.y = 1 === Math.abs(Math.floor(a.y) % 2) ? Math.ceil(a.y) - a.y : a.y - Math.floor(a.y);
      }
    }
    this.flipY && (a.y = 1 - a.y);
    return a;
  }});
  Object.defineProperty(g.prototype, "needsUpdate", {set:function(a) {
    !0 === a && this.version++;
  }});
  Object.defineProperties(f.prototype, {width:{get:function() {
    return this.z;
  }, set:function(a) {
    this.z = a;
  }}, height:{get:function() {
    return this.w;
  }, set:function(a) {
    this.w = a;
  }}});
  Object.assign(f.prototype, {isVector4:!0, set:function(a, c, b, e) {
    this.x = a;
    this.y = c;
    this.z = b;
    this.w = e;
    return this;
  }, setScalar:function(a) {
    this.w = this.z = this.y = this.x = a;
    return this;
  }, setX:function(a) {
    this.x = a;
    return this;
  }, setY:function(a) {
    this.y = a;
    return this;
  }, setZ:function(a) {
    this.z = a;
    return this;
  }, setW:function(a) {
    this.w = a;
    return this;
  }, setComponent:function(a, c) {
    switch(a) {
      case 0:
        this.x = c;
        break;
      case 1:
        this.y = c;
        break;
      case 2:
        this.z = c;
        break;
      case 3:
        this.w = c;
        break;
      default:
        throw Error("index is out of range: " + a);
    }
    return this;
  }, getComponent:function(a) {
    switch(a) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      case 3:
        return this.w;
      default:
        throw Error("index is out of range: " + a);
    }
  }, clone:function() {
    return new this.constructor(this.x, this.y, this.z, this.w);
  }, copy:function(a) {
    this.x = a.x;
    this.y = a.y;
    this.z = a.z;
    this.w = void 0 !== a.w ? a.w : 1;
    return this;
  }, add:function(a, c) {
    if (void 0 !== c) {
      return console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(a, c);
    }
    this.x += a.x;
    this.y += a.y;
    this.z += a.z;
    this.w += a.w;
    return this;
  }, addScalar:function(a) {
    this.x += a;
    this.y += a;
    this.z += a;
    this.w += a;
    return this;
  }, addVectors:function(a, c) {
    this.x = a.x + c.x;
    this.y = a.y + c.y;
    this.z = a.z + c.z;
    this.w = a.w + c.w;
    return this;
  }, addScaledVector:function(a, c) {
    this.x += a.x * c;
    this.y += a.y * c;
    this.z += a.z * c;
    this.w += a.w * c;
    return this;
  }, sub:function(a, c) {
    if (void 0 !== c) {
      return console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(a, c);
    }
    this.x -= a.x;
    this.y -= a.y;
    this.z -= a.z;
    this.w -= a.w;
    return this;
  }, subScalar:function(a) {
    this.x -= a;
    this.y -= a;
    this.z -= a;
    this.w -= a;
    return this;
  }, subVectors:function(a, c) {
    this.x = a.x - c.x;
    this.y = a.y - c.y;
    this.z = a.z - c.z;
    this.w = a.w - c.w;
    return this;
  }, multiplyScalar:function(a) {
    this.x *= a;
    this.y *= a;
    this.z *= a;
    this.w *= a;
    return this;
  }, applyMatrix4:function(a) {
    var l = this.x, c = this.y, b = this.z, e = this.w;
    a = a.elements;
    this.x = a[0] * l + a[4] * c + a[8] * b + a[12] * e;
    this.y = a[1] * l + a[5] * c + a[9] * b + a[13] * e;
    this.z = a[2] * l + a[6] * c + a[10] * b + a[14] * e;
    this.w = a[3] * l + a[7] * c + a[11] * b + a[15] * e;
    return this;
  }, divideScalar:function(a) {
    return this.multiplyScalar(1 / a);
  }, setAxisAngleFromQuaternion:function(a) {
    this.w = 2 * Math.acos(a.w);
    var l = Math.sqrt(1 - a.w * a.w);
    1E-4 > l ? (this.x = 1, this.z = this.y = 0) : (this.x = a.x / l, this.y = a.y / l, this.z = a.z / l);
    return this;
  }, setAxisAngleFromRotationMatrix:function(a) {
    a = a.elements;
    var l = a[0];
    var c = a[4];
    var b = a[8], e = a[1], h = a[5], d = a[9];
    var f = a[2];
    var g = a[6];
    var m = a[10];
    if (.01 > Math.abs(c - e) && .01 > Math.abs(b - f) && .01 > Math.abs(d - g)) {
      if (.1 > Math.abs(c + e) && .1 > Math.abs(b + f) && .1 > Math.abs(d + g) && .1 > Math.abs(l + h + m - 3)) {
        return this.set(1, 0, 0, 0), this;
      }
      a = Math.PI;
      l = (l + 1) / 2;
      h = (h + 1) / 2;
      m = (m + 1) / 2;
      c = (c + e) / 4;
      b = (b + f) / 4;
      d = (d + g) / 4;
      l > h && l > m ? .01 > l ? (g = 0, c = f = .707106781) : (g = Math.sqrt(l), f = c / g, c = b / g) : h > m ? .01 > h ? (g = .707106781, f = 0, c = .707106781) : (f = Math.sqrt(h), g = c / f, c = d / f) : .01 > m ? (f = g = .707106781, c = 0) : (c = Math.sqrt(m), g = b / c, f = d / c);
      this.set(g, f, c, a);
      return this;
    }
    a = Math.sqrt((g - d) * (g - d) + (b - f) * (b - f) + (e - c) * (e - c));
    .001 > Math.abs(a) && (a = 1);
    this.x = (g - d) / a;
    this.y = (b - f) / a;
    this.z = (e - c) / a;
    this.w = Math.acos((l + h + m - 1) / 2);
    return this;
  }, min:function(a) {
    this.x = Math.min(this.x, a.x);
    this.y = Math.min(this.y, a.y);
    this.z = Math.min(this.z, a.z);
    this.w = Math.min(this.w, a.w);
    return this;
  }, max:function(a) {
    this.x = Math.max(this.x, a.x);
    this.y = Math.max(this.y, a.y);
    this.z = Math.max(this.z, a.z);
    this.w = Math.max(this.w, a.w);
    return this;
  }, clamp:function(a, c) {
    this.x = Math.max(a.x, Math.min(c.x, this.x));
    this.y = Math.max(a.y, Math.min(c.y, this.y));
    this.z = Math.max(a.z, Math.min(c.z, this.z));
    this.w = Math.max(a.w, Math.min(c.w, this.w));
    return this;
  }, clampScalar:function(a, c) {
    this.x = Math.max(a, Math.min(c, this.x));
    this.y = Math.max(a, Math.min(c, this.y));
    this.z = Math.max(a, Math.min(c, this.z));
    this.w = Math.max(a, Math.min(c, this.w));
    return this;
  }, clampLength:function(a, c) {
    var l = this.length();
    return this.divideScalar(l || 1).multiplyScalar(Math.max(a, Math.min(c, l)));
  }, floor:function() {
    this.x = Math.floor(this.x);
    this.y = Math.floor(this.y);
    this.z = Math.floor(this.z);
    this.w = Math.floor(this.w);
    return this;
  }, ceil:function() {
    this.x = Math.ceil(this.x);
    this.y = Math.ceil(this.y);
    this.z = Math.ceil(this.z);
    this.w = Math.ceil(this.w);
    return this;
  }, round:function() {
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    this.z = Math.round(this.z);
    this.w = Math.round(this.w);
    return this;
  }, roundToZero:function() {
    this.x = 0 > this.x ? Math.ceil(this.x) : Math.floor(this.x);
    this.y = 0 > this.y ? Math.ceil(this.y) : Math.floor(this.y);
    this.z = 0 > this.z ? Math.ceil(this.z) : Math.floor(this.z);
    this.w = 0 > this.w ? Math.ceil(this.w) : Math.floor(this.w);
    return this;
  }, negate:function() {
    this.x = -this.x;
    this.y = -this.y;
    this.z = -this.z;
    this.w = -this.w;
    return this;
  }, dot:function(a) {
    return this.x * a.x + this.y * a.y + this.z * a.z + this.w * a.w;
  }, lengthSq:function() {
    return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
  }, length:function() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
  }, manhattanLength:function() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
  }, normalize:function() {
    return this.divideScalar(this.length() || 1);
  }, setLength:function(a) {
    return this.normalize().multiplyScalar(a);
  }, lerp:function(a, c) {
    this.x += (a.x - this.x) * c;
    this.y += (a.y - this.y) * c;
    this.z += (a.z - this.z) * c;
    this.w += (a.w - this.w) * c;
    return this;
  }, lerpVectors:function(a, c, b) {
    return this.subVectors(c, a).multiplyScalar(b).add(a);
  }, equals:function(a) {
    return a.x === this.x && a.y === this.y && a.z === this.z && a.w === this.w;
  }, fromArray:function(a, c) {
    void 0 === c && (c = 0);
    this.x = a[c];
    this.y = a[c + 1];
    this.z = a[c + 2];
    this.w = a[c + 3];
    return this;
  }, toArray:function(a, c) {
    void 0 === a && (a = []);
    void 0 === c && (c = 0);
    a[c] = this.x;
    a[c + 1] = this.y;
    a[c + 2] = this.z;
    a[c + 3] = this.w;
    return a;
  }, fromBufferAttribute:function(a, c, b) {
    void 0 !== b && console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute().");
    this.x = a.getX(c);
    this.y = a.getY(c);
    this.z = a.getZ(c);
    this.w = a.getW(c);
    return this;
  }, random:function() {
    this.x = Math.random();
    this.y = Math.random();
    this.z = Math.random();
    this.w = Math.random();
    return this;
  }});
  e.prototype = Object.assign(Object.create(d.prototype), {constructor:e, isWebGLRenderTarget:!0, setSize:function(a, c) {
    if (this.width !== a || this.height !== c) {
      this.width = a, this.height = c, this.texture.image.width = a, this.texture.image.height = c, this.dispose();
    }
    this.viewport.set(0, 0, a, c);
    this.scissor.set(0, 0, a, c);
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(a) {
    this.width = a.width;
    this.height = a.height;
    this.viewport.copy(a.viewport);
    this.texture = a.texture.clone();
    this.depthBuffer = a.depthBuffer;
    this.stencilBuffer = a.stencilBuffer;
    this.depthTexture = a.depthTexture;
    return this;
  }, dispose:function() {
    this.dispatchEvent({type:"dispose"});
  }});
  r.prototype = Object.assign(Object.create(e.prototype), {constructor:r, isWebGLMultisampleRenderTarget:!0, copy:function(a) {
    e.prototype.copy.call(this, a);
    this.samples = a.samples;
    return this;
  }});
  Object.assign(q, {slerp:function(a, c, b, e) {
    return b.copy(a).slerp(c, e);
  }, slerpFlat:function(a, c, b, e, h, d, f) {
    var l = b[e + 0], u = b[e + 1], g = b[e + 2];
    b = b[e + 3];
    e = h[d + 0];
    var m = h[d + 1], p = h[d + 2];
    h = h[d + 3];
    if (b !== h || l !== e || u !== m || g !== p) {
      d = 1 - f;
      var n = l * e + u * m + g * p + b * h, k = 0 <= n ? 1 : -1, q = 1 - n * n;
      q > Number.EPSILON && (q = Math.sqrt(q), n = Math.atan2(q, n * k), d = Math.sin(d * n) / q, f = Math.sin(f * n) / q);
      k *= f;
      l = l * d + e * k;
      u = u * d + m * k;
      g = g * d + p * k;
      b = b * d + h * k;
      d === 1 - f && (f = 1 / Math.sqrt(l * l + u * u + g * g + b * b), l *= f, u *= f, g *= f, b *= f);
    }
    a[c] = l;
    a[c + 1] = u;
    a[c + 2] = g;
    a[c + 3] = b;
  }, multiplyQuaternionsFlat:function(a, c, b, e, h, d) {
    var l = b[e], f = b[e + 1], u = b[e + 2];
    b = b[e + 3];
    e = h[d];
    var g = h[d + 1], m = h[d + 2];
    h = h[d + 3];
    a[c] = l * h + b * e + f * m - u * g;
    a[c + 1] = f * h + b * g + u * e - l * m;
    a[c + 2] = u * h + b * m + l * g - f * e;
    a[c + 3] = b * h - l * e - f * g - u * m;
    return a;
  }});
  Object.defineProperties(q.prototype, {x:{get:function() {
    return this._x;
  }, set:function(a) {
    this._x = a;
    this._onChangeCallback();
  }}, y:{get:function() {
    return this._y;
  }, set:function(a) {
    this._y = a;
    this._onChangeCallback();
  }}, z:{get:function() {
    return this._z;
  }, set:function(a) {
    this._z = a;
    this._onChangeCallback();
  }}, w:{get:function() {
    return this._w;
  }, set:function(a) {
    this._w = a;
    this._onChangeCallback();
  }}});
  Object.assign(q.prototype, {isQuaternion:!0, set:function(a, c, b, e) {
    this._x = a;
    this._y = c;
    this._z = b;
    this._w = e;
    this._onChangeCallback();
    return this;
  }, clone:function() {
    return new this.constructor(this._x, this._y, this._z, this._w);
  }, copy:function(a) {
    this._x = a.x;
    this._y = a.y;
    this._z = a.z;
    this._w = a.w;
    this._onChangeCallback();
    return this;
  }, setFromEuler:function(a, c) {
    if (!a || !a.isEuler) {
      throw Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");
    }
    var l = a._x, b = a._y, e = a._z;
    a = a.order;
    var h = Math.cos, d = Math.sin, f = h(l / 2), u = h(b / 2);
    h = h(e / 2);
    l = d(l / 2);
    b = d(b / 2);
    e = d(e / 2);
    switch(a) {
      case "XYZ":
        this._x = l * u * h + f * b * e;
        this._y = f * b * h - l * u * e;
        this._z = f * u * e + l * b * h;
        this._w = f * u * h - l * b * e;
        break;
      case "YXZ":
        this._x = l * u * h + f * b * e;
        this._y = f * b * h - l * u * e;
        this._z = f * u * e - l * b * h;
        this._w = f * u * h + l * b * e;
        break;
      case "ZXY":
        this._x = l * u * h - f * b * e;
        this._y = f * b * h + l * u * e;
        this._z = f * u * e + l * b * h;
        this._w = f * u * h - l * b * e;
        break;
      case "ZYX":
        this._x = l * u * h - f * b * e;
        this._y = f * b * h + l * u * e;
        this._z = f * u * e - l * b * h;
        this._w = f * u * h + l * b * e;
        break;
      case "YZX":
        this._x = l * u * h + f * b * e;
        this._y = f * b * h + l * u * e;
        this._z = f * u * e - l * b * h;
        this._w = f * u * h - l * b * e;
        break;
      case "XZY":
        this._x = l * u * h - f * b * e;
        this._y = f * b * h - l * u * e;
        this._z = f * u * e + l * b * h;
        this._w = f * u * h + l * b * e;
        break;
      default:
        console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + a);
    }
    !1 !== c && this._onChangeCallback();
    return this;
  }, setFromAxisAngle:function(a, c) {
    c /= 2;
    var l = Math.sin(c);
    this._x = a.x * l;
    this._y = a.y * l;
    this._z = a.z * l;
    this._w = Math.cos(c);
    this._onChangeCallback();
    return this;
  }, setFromRotationMatrix:function(a) {
    var l = a.elements, c = l[0];
    a = l[4];
    var b = l[8], e = l[1], h = l[5], f = l[9], d = l[2], g = l[6];
    l = l[10];
    var m = c + h + l;
    0 < m ? (c = .5 / Math.sqrt(m + 1), this._w = .25 / c, this._x = (g - f) * c, this._y = (b - d) * c, this._z = (e - a) * c) : c > h && c > l ? (c = 2 * Math.sqrt(1 + c - h - l), this._w = (g - f) / c, this._x = .25 * c, this._y = (a + e) / c, this._z = (b + d) / c) : h > l ? (c = 2 * Math.sqrt(1 + h - c - l), this._w = (b - d) / c, this._x = (a + e) / c, this._y = .25 * c, this._z = (f + g) / c) : (c = 2 * Math.sqrt(1 + l - c - h), this._w = (e - a) / c, this._x = (b + d) / c, this._y = (f + 
    g) / c, this._z = .25 * c);
    this._onChangeCallback();
    return this;
  }, setFromUnitVectors:function(a, c) {
    var l = a.dot(c) + 1;
    1E-6 > l ? (l = 0, Math.abs(a.x) > Math.abs(a.z) ? (this._x = -a.y, this._y = a.x, this._z = 0) : (this._x = 0, this._y = -a.z, this._z = a.y)) : (this._x = a.y * c.z - a.z * c.y, this._y = a.z * c.x - a.x * c.z, this._z = a.x * c.y - a.y * c.x);
    this._w = l;
    return this.normalize();
  }, angleTo:function(a) {
    return 2 * Math.acos(Math.abs(oa.clamp(this.dot(a), -1, 1)));
  }, rotateTowards:function(a, c) {
    var l = this.angleTo(a);
    if (0 === l) {
      return this;
    }
    this.slerp(a, Math.min(1, c / l));
    return this;
  }, inverse:function() {
    return this.conjugate();
  }, conjugate:function() {
    this._x *= -1;
    this._y *= -1;
    this._z *= -1;
    this._onChangeCallback();
    return this;
  }, dot:function(a) {
    return this._x * a._x + this._y * a._y + this._z * a._z + this._w * a._w;
  }, lengthSq:function() {
    return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
  }, length:function() {
    return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
  }, normalize:function() {
    var a = this.length();
    0 === a ? (this._z = this._y = this._x = 0, this._w = 1) : (a = 1 / a, this._x *= a, this._y *= a, this._z *= a, this._w *= a);
    this._onChangeCallback();
    return this;
  }, multiply:function(a, c) {
    return void 0 !== c ? (console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."), this.multiplyQuaternions(a, c)) : this.multiplyQuaternions(this, a);
  }, premultiply:function(a) {
    return this.multiplyQuaternions(a, this);
  }, multiplyQuaternions:function(a, c) {
    var l = a._x, b = a._y, e = a._z;
    a = a._w;
    var h = c._x, f = c._y, d = c._z;
    c = c._w;
    this._x = l * c + a * h + b * d - e * f;
    this._y = b * c + a * f + e * h - l * d;
    this._z = e * c + a * d + l * f - b * h;
    this._w = a * c - l * h - b * f - e * d;
    this._onChangeCallback();
    return this;
  }, slerp:function(a, c) {
    if (0 === c) {
      return this;
    }
    if (1 === c) {
      return this.copy(a);
    }
    var l = this._x, b = this._y, e = this._z, h = this._w, f = h * a._w + l * a._x + b * a._y + e * a._z;
    0 > f ? (this._w = -a._w, this._x = -a._x, this._y = -a._y, this._z = -a._z, f = -f) : this.copy(a);
    if (1 <= f) {
      return this._w = h, this._x = l, this._y = b, this._z = e, this;
    }
    a = 1 - f * f;
    if (a <= Number.EPSILON) {
      return f = 1 - c, this._w = f * h + c * this._w, this._x = f * l + c * this._x, this._y = f * b + c * this._y, this._z = f * e + c * this._z, this.normalize(), this._onChangeCallback(), this;
    }
    a = Math.sqrt(a);
    var d = Math.atan2(a, f);
    f = Math.sin((1 - c) * d) / a;
    c = Math.sin(c * d) / a;
    this._w = h * f + this._w * c;
    this._x = l * f + this._x * c;
    this._y = b * f + this._y * c;
    this._z = e * f + this._z * c;
    this._onChangeCallback();
    return this;
  }, equals:function(a) {
    return a._x === this._x && a._y === this._y && a._z === this._z && a._w === this._w;
  }, fromArray:function(a, c) {
    void 0 === c && (c = 0);
    this._x = a[c];
    this._y = a[c + 1];
    this._z = a[c + 2];
    this._w = a[c + 3];
    this._onChangeCallback();
    return this;
  }, toArray:function(a, c) {
    void 0 === a && (a = []);
    void 0 === c && (c = 0);
    a[c] = this._x;
    a[c + 1] = this._y;
    a[c + 2] = this._z;
    a[c + 3] = this._w;
    return a;
  }, fromBufferAttribute:function(a, c) {
    this._x = a.getX(c);
    this._y = a.getY(c);
    this._z = a.getZ(c);
    this._w = a.getW(c);
    return this;
  }, _onChange:function(a) {
    this._onChangeCallback = a;
    return this;
  }, _onChangeCallback:function() {
  }});
  var dh = new m, yi = new q;
  Object.assign(m.prototype, {isVector3:!0, set:function(a, c, b) {
    this.x = a;
    this.y = c;
    this.z = b;
    return this;
  }, setScalar:function(a) {
    this.z = this.y = this.x = a;
    return this;
  }, setX:function(a) {
    this.x = a;
    return this;
  }, setY:function(a) {
    this.y = a;
    return this;
  }, setZ:function(a) {
    this.z = a;
    return this;
  }, setComponent:function(a, c) {
    switch(a) {
      case 0:
        this.x = c;
        break;
      case 1:
        this.y = c;
        break;
      case 2:
        this.z = c;
        break;
      default:
        throw Error("index is out of range: " + a);
    }
    return this;
  }, getComponent:function(a) {
    switch(a) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      default:
        throw Error("index is out of range: " + a);
    }
  }, clone:function() {
    return new this.constructor(this.x, this.y, this.z);
  }, copy:function(a) {
    this.x = a.x;
    this.y = a.y;
    this.z = a.z;
    return this;
  }, add:function(a, c) {
    if (void 0 !== c) {
      return console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(a, c);
    }
    this.x += a.x;
    this.y += a.y;
    this.z += a.z;
    return this;
  }, addScalar:function(a) {
    this.x += a;
    this.y += a;
    this.z += a;
    return this;
  }, addVectors:function(a, c) {
    this.x = a.x + c.x;
    this.y = a.y + c.y;
    this.z = a.z + c.z;
    return this;
  }, addScaledVector:function(a, c) {
    this.x += a.x * c;
    this.y += a.y * c;
    this.z += a.z * c;
    return this;
  }, sub:function(a, c) {
    if (void 0 !== c) {
      return console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(a, c);
    }
    this.x -= a.x;
    this.y -= a.y;
    this.z -= a.z;
    return this;
  }, subScalar:function(a) {
    this.x -= a;
    this.y -= a;
    this.z -= a;
    return this;
  }, subVectors:function(a, c) {
    this.x = a.x - c.x;
    this.y = a.y - c.y;
    this.z = a.z - c.z;
    return this;
  }, multiply:function(a, c) {
    if (void 0 !== c) {
      return console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."), this.multiplyVectors(a, c);
    }
    this.x *= a.x;
    this.y *= a.y;
    this.z *= a.z;
    return this;
  }, multiplyScalar:function(a) {
    this.x *= a;
    this.y *= a;
    this.z *= a;
    return this;
  }, multiplyVectors:function(a, c) {
    this.x = a.x * c.x;
    this.y = a.y * c.y;
    this.z = a.z * c.z;
    return this;
  }, applyEuler:function(a) {
    a && a.isEuler || console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.");
    return this.applyQuaternion(yi.setFromEuler(a));
  }, applyAxisAngle:function(a, c) {
    return this.applyQuaternion(yi.setFromAxisAngle(a, c));
  }, applyMatrix3:function(a) {
    var l = this.x, c = this.y, b = this.z;
    a = a.elements;
    this.x = a[0] * l + a[3] * c + a[6] * b;
    this.y = a[1] * l + a[4] * c + a[7] * b;
    this.z = a[2] * l + a[5] * c + a[8] * b;
    return this;
  }, applyNormalMatrix:function(a) {
    return this.applyMatrix3(a).normalize();
  }, applyMatrix4:function(a) {
    var l = this.x, c = this.y, b = this.z;
    a = a.elements;
    var e = 1 / (a[3] * l + a[7] * c + a[11] * b + a[15]);
    this.x = (a[0] * l + a[4] * c + a[8] * b + a[12]) * e;
    this.y = (a[1] * l + a[5] * c + a[9] * b + a[13]) * e;
    this.z = (a[2] * l + a[6] * c + a[10] * b + a[14]) * e;
    return this;
  }, applyQuaternion:function(a) {
    var l = this.x, c = this.y, b = this.z, e = a.x, h = a.y, f = a.z;
    a = a.w;
    var d = a * l + h * b - f * c, g = a * c + f * l - e * b, m = a * b + e * c - h * l;
    l = -e * l - h * c - f * b;
    this.x = d * a + l * -e + g * -f - m * -h;
    this.y = g * a + l * -h + m * -e - d * -f;
    this.z = m * a + l * -f + d * -h - g * -e;
    return this;
  }, project:function(a) {
    return this.applyMatrix4(a.matrixWorldInverse).applyMatrix4(a.projectionMatrix);
  }, unproject:function(a) {
    return this.applyMatrix4(a.projectionMatrixInverse).applyMatrix4(a.matrixWorld);
  }, transformDirection:function(a) {
    var l = this.x, c = this.y, b = this.z;
    a = a.elements;
    this.x = a[0] * l + a[4] * c + a[8] * b;
    this.y = a[1] * l + a[5] * c + a[9] * b;
    this.z = a[2] * l + a[6] * c + a[10] * b;
    return this.normalize();
  }, divide:function(a) {
    this.x /= a.x;
    this.y /= a.y;
    this.z /= a.z;
    return this;
  }, divideScalar:function(a) {
    return this.multiplyScalar(1 / a);
  }, min:function(a) {
    this.x = Math.min(this.x, a.x);
    this.y = Math.min(this.y, a.y);
    this.z = Math.min(this.z, a.z);
    return this;
  }, max:function(a) {
    this.x = Math.max(this.x, a.x);
    this.y = Math.max(this.y, a.y);
    this.z = Math.max(this.z, a.z);
    return this;
  }, clamp:function(a, c) {
    this.x = Math.max(a.x, Math.min(c.x, this.x));
    this.y = Math.max(a.y, Math.min(c.y, this.y));
    this.z = Math.max(a.z, Math.min(c.z, this.z));
    return this;
  }, clampScalar:function(a, c) {
    this.x = Math.max(a, Math.min(c, this.x));
    this.y = Math.max(a, Math.min(c, this.y));
    this.z = Math.max(a, Math.min(c, this.z));
    return this;
  }, clampLength:function(a, c) {
    var l = this.length();
    return this.divideScalar(l || 1).multiplyScalar(Math.max(a, Math.min(c, l)));
  }, floor:function() {
    this.x = Math.floor(this.x);
    this.y = Math.floor(this.y);
    this.z = Math.floor(this.z);
    return this;
  }, ceil:function() {
    this.x = Math.ceil(this.x);
    this.y = Math.ceil(this.y);
    this.z = Math.ceil(this.z);
    return this;
  }, round:function() {
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    this.z = Math.round(this.z);
    return this;
  }, roundToZero:function() {
    this.x = 0 > this.x ? Math.ceil(this.x) : Math.floor(this.x);
    this.y = 0 > this.y ? Math.ceil(this.y) : Math.floor(this.y);
    this.z = 0 > this.z ? Math.ceil(this.z) : Math.floor(this.z);
    return this;
  }, negate:function() {
    this.x = -this.x;
    this.y = -this.y;
    this.z = -this.z;
    return this;
  }, dot:function(a) {
    return this.x * a.x + this.y * a.y + this.z * a.z;
  }, lengthSq:function() {
    return this.x * this.x + this.y * this.y + this.z * this.z;
  }, length:function() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
  }, manhattanLength:function() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
  }, normalize:function() {
    return this.divideScalar(this.length() || 1);
  }, setLength:function(a) {
    return this.normalize().multiplyScalar(a);
  }, lerp:function(a, c) {
    this.x += (a.x - this.x) * c;
    this.y += (a.y - this.y) * c;
    this.z += (a.z - this.z) * c;
    return this;
  }, lerpVectors:function(a, c, b) {
    return this.subVectors(c, a).multiplyScalar(b).add(a);
  }, cross:function(a, c) {
    return void 0 !== c ? (console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."), this.crossVectors(a, c)) : this.crossVectors(this, a);
  }, crossVectors:function(a, c) {
    var l = a.x, b = a.y;
    a = a.z;
    var e = c.x, h = c.y;
    c = c.z;
    this.x = b * c - a * h;
    this.y = a * e - l * c;
    this.z = l * h - b * e;
    return this;
  }, projectOnVector:function(a) {
    var l = a.lengthSq();
    if (0 === l) {
      return this.set(0, 0, 0);
    }
    l = a.dot(this) / l;
    return this.copy(a).multiplyScalar(l);
  }, projectOnPlane:function(a) {
    dh.copy(this).projectOnVector(a);
    return this.sub(dh);
  }, reflect:function(a) {
    return this.sub(dh.copy(a).multiplyScalar(2 * this.dot(a)));
  }, angleTo:function(a) {
    var l = Math.sqrt(this.lengthSq() * a.lengthSq());
    if (0 === l) {
      return Math.PI / 2;
    }
    a = this.dot(a) / l;
    return Math.acos(oa.clamp(a, -1, 1));
  }, distanceTo:function(a) {
    return Math.sqrt(this.distanceToSquared(a));
  }, distanceToSquared:function(a) {
    var l = this.x - a.x, c = this.y - a.y;
    a = this.z - a.z;
    return l * l + c * c + a * a;
  }, manhattanDistanceTo:function(a) {
    return Math.abs(this.x - a.x) + Math.abs(this.y - a.y) + Math.abs(this.z - a.z);
  }, setFromSpherical:function(a) {
    return this.setFromSphericalCoords(a.radius, a.phi, a.theta);
  }, setFromSphericalCoords:function(a, c, b) {
    var l = Math.sin(c) * a;
    this.x = l * Math.sin(b);
    this.y = Math.cos(c) * a;
    this.z = l * Math.cos(b);
    return this;
  }, setFromCylindrical:function(a) {
    return this.setFromCylindricalCoords(a.radius, a.theta, a.y);
  }, setFromCylindricalCoords:function(a, c, b) {
    this.x = a * Math.sin(c);
    this.y = b;
    this.z = a * Math.cos(c);
    return this;
  }, setFromMatrixPosition:function(a) {
    a = a.elements;
    this.x = a[12];
    this.y = a[13];
    this.z = a[14];
    return this;
  }, setFromMatrixScale:function(a) {
    var l = this.setFromMatrixColumn(a, 0).length(), c = this.setFromMatrixColumn(a, 1).length();
    a = this.setFromMatrixColumn(a, 2).length();
    this.x = l;
    this.y = c;
    this.z = a;
    return this;
  }, setFromMatrixColumn:function(a, c) {
    return this.fromArray(a.elements, 4 * c);
  }, setFromMatrix3Column:function(a, c) {
    return this.fromArray(a.elements, 3 * c);
  }, equals:function(a) {
    return a.x === this.x && a.y === this.y && a.z === this.z;
  }, fromArray:function(a, c) {
    void 0 === c && (c = 0);
    this.x = a[c];
    this.y = a[c + 1];
    this.z = a[c + 2];
    return this;
  }, toArray:function(a, c) {
    void 0 === a && (a = []);
    void 0 === c && (c = 0);
    a[c] = this.x;
    a[c + 1] = this.y;
    a[c + 2] = this.z;
    return a;
  }, fromBufferAttribute:function(a, c, b) {
    void 0 !== b && console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute().");
    this.x = a.getX(c);
    this.y = a.getY(c);
    this.z = a.getZ(c);
    return this;
  }, random:function() {
    this.x = Math.random();
    this.y = Math.random();
    this.z = Math.random();
    return this;
  }});
  var Id = new m, Ka = new n, Zj = new m(0, 0, 0), ak = new m(1, 1, 1), sc = new m, Qf = new m, Za = new m;
  Object.assign(n.prototype, {isMatrix4:!0, set:function(a, c, b, e, h, f, d, g, m, p, n, k, q, r, t, v) {
    var l = this.elements;
    l[0] = a;
    l[4] = c;
    l[8] = b;
    l[12] = e;
    l[1] = h;
    l[5] = f;
    l[9] = d;
    l[13] = g;
    l[2] = m;
    l[6] = p;
    l[10] = n;
    l[14] = k;
    l[3] = q;
    l[7] = r;
    l[11] = t;
    l[15] = v;
    return this;
  }, identity:function() {
    this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    return this;
  }, clone:function() {
    return (new n).fromArray(this.elements);
  }, copy:function(a) {
    var l = this.elements;
    a = a.elements;
    l[0] = a[0];
    l[1] = a[1];
    l[2] = a[2];
    l[3] = a[3];
    l[4] = a[4];
    l[5] = a[5];
    l[6] = a[6];
    l[7] = a[7];
    l[8] = a[8];
    l[9] = a[9];
    l[10] = a[10];
    l[11] = a[11];
    l[12] = a[12];
    l[13] = a[13];
    l[14] = a[14];
    l[15] = a[15];
    return this;
  }, copyPosition:function(a) {
    var l = this.elements;
    a = a.elements;
    l[12] = a[12];
    l[13] = a[13];
    l[14] = a[14];
    return this;
  }, extractBasis:function(a, c, b) {
    a.setFromMatrixColumn(this, 0);
    c.setFromMatrixColumn(this, 1);
    b.setFromMatrixColumn(this, 2);
    return this;
  }, makeBasis:function(a, c, b) {
    this.set(a.x, c.x, b.x, 0, a.y, c.y, b.y, 0, a.z, c.z, b.z, 0, 0, 0, 0, 1);
    return this;
  }, extractRotation:function(a) {
    var l = this.elements, c = a.elements, b = 1 / Id.setFromMatrixColumn(a, 0).length(), e = 1 / Id.setFromMatrixColumn(a, 1).length();
    a = 1 / Id.setFromMatrixColumn(a, 2).length();
    l[0] = c[0] * b;
    l[1] = c[1] * b;
    l[2] = c[2] * b;
    l[3] = 0;
    l[4] = c[4] * e;
    l[5] = c[5] * e;
    l[6] = c[6] * e;
    l[7] = 0;
    l[8] = c[8] * a;
    l[9] = c[9] * a;
    l[10] = c[10] * a;
    l[11] = 0;
    l[12] = 0;
    l[13] = 0;
    l[14] = 0;
    l[15] = 1;
    return this;
  }, makeRotationFromEuler:function(a) {
    a && a.isEuler || console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");
    var l = this.elements, c = a.x, b = a.y, e = a.z, h = Math.cos(c);
    c = Math.sin(c);
    var f = Math.cos(b);
    b = Math.sin(b);
    var d = Math.cos(e);
    e = Math.sin(e);
    if ("XYZ" === a.order) {
      a = h * d;
      var g = h * e, m = c * d, p = c * e;
      l[0] = f * d;
      l[4] = -f * e;
      l[8] = b;
      l[1] = g + m * b;
      l[5] = a - p * b;
      l[9] = -c * f;
      l[2] = p - a * b;
      l[6] = m + g * b;
      l[10] = h * f;
    } else {
      "YXZ" === a.order ? (a = f * d, g = f * e, m = b * d, p = b * e, l[0] = a + p * c, l[4] = m * c - g, l[8] = h * b, l[1] = h * e, l[5] = h * d, l[9] = -c, l[2] = g * c - m, l[6] = p + a * c, l[10] = h * f) : "ZXY" === a.order ? (a = f * d, g = f * e, m = b * d, p = b * e, l[0] = a - p * c, l[4] = -h * e, l[8] = m + g * c, l[1] = g + m * c, l[5] = h * d, l[9] = p - a * c, l[2] = -h * b, l[6] = c, l[10] = h * f) : "ZYX" === a.order ? (a = h * d, g = h * e, m = c * d, p = c * e, l[0] = f * d, l[4] = 
      m * b - g, l[8] = a * b + p, l[1] = f * e, l[5] = p * b + a, l[9] = g * b - m, l[2] = -b, l[6] = c * f, l[10] = h * f) : "YZX" === a.order ? (a = h * f, g = h * b, m = c * f, p = c * b, l[0] = f * d, l[4] = p - a * e, l[8] = m * e + g, l[1] = e, l[5] = h * d, l[9] = -c * d, l[2] = -b * d, l[6] = g * e + m, l[10] = a - p * e) : "XZY" === a.order && (a = h * f, g = h * b, m = c * f, p = c * b, l[0] = f * d, l[4] = -e, l[8] = b * d, l[1] = a * e + p, l[5] = h * d, l[9] = g * e - m, l[2] = m * 
      e - g, l[6] = c * d, l[10] = p * e + a);
    }
    l[3] = 0;
    l[7] = 0;
    l[11] = 0;
    l[12] = 0;
    l[13] = 0;
    l[14] = 0;
    l[15] = 1;
    return this;
  }, makeRotationFromQuaternion:function(a) {
    return this.compose(Zj, a, ak);
  }, lookAt:function(a, c, b) {
    var l = this.elements;
    Za.subVectors(a, c);
    0 === Za.lengthSq() && (Za.z = 1);
    Za.normalize();
    sc.crossVectors(b, Za);
    0 === sc.lengthSq() && (1 === Math.abs(b.z) ? Za.x += 1E-4 : Za.z += 1E-4, Za.normalize(), sc.crossVectors(b, Za));
    sc.normalize();
    Qf.crossVectors(Za, sc);
    l[0] = sc.x;
    l[4] = Qf.x;
    l[8] = Za.x;
    l[1] = sc.y;
    l[5] = Qf.y;
    l[9] = Za.y;
    l[2] = sc.z;
    l[6] = Qf.z;
    l[10] = Za.z;
    return this;
  }, multiply:function(a, c) {
    return void 0 !== c ? (console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."), this.multiplyMatrices(a, c)) : this.multiplyMatrices(this, a);
  }, premultiply:function(a) {
    return this.multiplyMatrices(a, this);
  }, multiplyMatrices:function(a, c) {
    var l = a.elements, b = c.elements;
    c = this.elements;
    a = l[0];
    var e = l[4], h = l[8], f = l[12], d = l[1], g = l[5], u = l[9], m = l[13], p = l[2], n = l[6], k = l[10], q = l[14], r = l[3], t = l[7], v = l[11];
    l = l[15];
    var z = b[0], w = b[4], y = b[8], x = b[12], ba = b[1], C = b[5], A = b[9], D = b[13], na = b[2], B = b[6], F = b[10], E = b[14], Ha = b[3], qa = b[7], H = b[11];
    b = b[15];
    c[0] = a * z + e * ba + h * na + f * Ha;
    c[4] = a * w + e * C + h * B + f * qa;
    c[8] = a * y + e * A + h * F + f * H;
    c[12] = a * x + e * D + h * E + f * b;
    c[1] = d * z + g * ba + u * na + m * Ha;
    c[5] = d * w + g * C + u * B + m * qa;
    c[9] = d * y + g * A + u * F + m * H;
    c[13] = d * x + g * D + u * E + m * b;
    c[2] = p * z + n * ba + k * na + q * Ha;
    c[6] = p * w + n * C + k * B + q * qa;
    c[10] = p * y + n * A + k * F + q * H;
    c[14] = p * x + n * D + k * E + q * b;
    c[3] = r * z + t * ba + v * na + l * Ha;
    c[7] = r * w + t * C + v * B + l * qa;
    c[11] = r * y + t * A + v * F + l * H;
    c[15] = r * x + t * D + v * E + l * b;
    return this;
  }, multiplyScalar:function(a) {
    var l = this.elements;
    l[0] *= a;
    l[4] *= a;
    l[8] *= a;
    l[12] *= a;
    l[1] *= a;
    l[5] *= a;
    l[9] *= a;
    l[13] *= a;
    l[2] *= a;
    l[6] *= a;
    l[10] *= a;
    l[14] *= a;
    l[3] *= a;
    l[7] *= a;
    l[11] *= a;
    l[15] *= a;
    return this;
  }, determinant:function() {
    var a = this.elements, c = a[0], b = a[4], e = a[8], h = a[12], f = a[1], d = a[5], g = a[9], m = a[13], p = a[2], n = a[6], k = a[10], q = a[14];
    return a[3] * (+h * g * n - e * m * n - h * d * k + b * m * k + e * d * q - b * g * q) + a[7] * (+c * g * q - c * m * k + h * f * k - e * f * q + e * m * p - h * g * p) + a[11] * (+c * m * n - c * d * q - h * f * n + b * f * q + h * d * p - b * m * p) + a[15] * (-e * d * p - c * g * n + c * d * k + e * f * n - b * f * k + b * g * p);
  }, transpose:function() {
    var a = this.elements;
    var c = a[1];
    a[1] = a[4];
    a[4] = c;
    c = a[2];
    a[2] = a[8];
    a[8] = c;
    c = a[6];
    a[6] = a[9];
    a[9] = c;
    c = a[3];
    a[3] = a[12];
    a[12] = c;
    c = a[7];
    a[7] = a[13];
    a[13] = c;
    c = a[11];
    a[11] = a[14];
    a[14] = c;
    return this;
  }, setPosition:function(a, c, b) {
    var l = this.elements;
    a.isVector3 ? (l[12] = a.x, l[13] = a.y, l[14] = a.z) : (l[12] = a, l[13] = c, l[14] = b);
    return this;
  }, getInverse:function(a, c) {
    void 0 !== c && console.warn("THREE.Matrix4: .getInverse() can no longer be configured to throw on degenerate.");
    c = this.elements;
    var l = a.elements;
    a = l[0];
    var b = l[1], e = l[2], h = l[3], f = l[4], d = l[5], g = l[6], m = l[7], u = l[8], p = l[9], n = l[10], k = l[11], q = l[12], r = l[13], t = l[14];
    l = l[15];
    var v = p * t * m - r * n * m + r * g * k - d * t * k - p * g * l + d * n * l, z = q * n * m - u * t * m - q * g * k + f * t * k + u * g * l - f * n * l, w = u * r * m - q * p * m + q * d * k - f * r * k - u * d * l + f * p * l, y = q * p * g - u * r * g - q * d * n + f * r * n + u * d * t - f * p * t, x = a * v + b * z + e * w + h * y;
    if (0 === x) {
      return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
    x = 1 / x;
    c[0] = v * x;
    c[1] = (r * n * h - p * t * h - r * e * k + b * t * k + p * e * l - b * n * l) * x;
    c[2] = (d * t * h - r * g * h + r * e * m - b * t * m - d * e * l + b * g * l) * x;
    c[3] = (p * g * h - d * n * h - p * e * m + b * n * m + d * e * k - b * g * k) * x;
    c[4] = z * x;
    c[5] = (u * t * h - q * n * h + q * e * k - a * t * k - u * e * l + a * n * l) * x;
    c[6] = (q * g * h - f * t * h - q * e * m + a * t * m + f * e * l - a * g * l) * x;
    c[7] = (f * n * h - u * g * h + u * e * m - a * n * m - f * e * k + a * g * k) * x;
    c[8] = w * x;
    c[9] = (q * p * h - u * r * h - q * b * k + a * r * k + u * b * l - a * p * l) * x;
    c[10] = (f * r * h - q * d * h + q * b * m - a * r * m - f * b * l + a * d * l) * x;
    c[11] = (u * d * h - f * p * h - u * b * m + a * p * m + f * b * k - a * d * k) * x;
    c[12] = y * x;
    c[13] = (u * r * e - q * p * e + q * b * n - a * r * n - u * b * t + a * p * t) * x;
    c[14] = (q * d * e - f * r * e - q * b * g + a * r * g + f * b * t - a * d * t) * x;
    c[15] = (f * p * e - u * d * e + u * b * g - a * p * g - f * b * n + a * d * n) * x;
    return this;
  }, scale:function(a) {
    var l = this.elements, c = a.x, b = a.y;
    a = a.z;
    l[0] *= c;
    l[4] *= b;
    l[8] *= a;
    l[1] *= c;
    l[5] *= b;
    l[9] *= a;
    l[2] *= c;
    l[6] *= b;
    l[10] *= a;
    l[3] *= c;
    l[7] *= b;
    l[11] *= a;
    return this;
  }, getMaxScaleOnAxis:function() {
    var a = this.elements;
    return Math.sqrt(Math.max(a[0] * a[0] + a[1] * a[1] + a[2] * a[2], a[4] * a[4] + a[5] * a[5] + a[6] * a[6], a[8] * a[8] + a[9] * a[9] + a[10] * a[10]));
  }, makeTranslation:function(a, c, b) {
    this.set(1, 0, 0, a, 0, 1, 0, c, 0, 0, 1, b, 0, 0, 0, 1);
    return this;
  }, makeRotationX:function(a) {
    var l = Math.cos(a);
    a = Math.sin(a);
    this.set(1, 0, 0, 0, 0, l, -a, 0, 0, a, l, 0, 0, 0, 0, 1);
    return this;
  }, makeRotationY:function(a) {
    var l = Math.cos(a);
    a = Math.sin(a);
    this.set(l, 0, a, 0, 0, 1, 0, 0, -a, 0, l, 0, 0, 0, 0, 1);
    return this;
  }, makeRotationZ:function(a) {
    var l = Math.cos(a);
    a = Math.sin(a);
    this.set(l, -a, 0, 0, a, l, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    return this;
  }, makeRotationAxis:function(a, c) {
    var l = Math.cos(c);
    c = Math.sin(c);
    var b = 1 - l, e = a.x, h = a.y;
    a = a.z;
    var f = b * e, d = b * h;
    this.set(f * e + l, f * h - c * a, f * a + c * h, 0, f * h + c * a, d * h + l, d * a - c * e, 0, f * a - c * h, d * a + c * e, b * a * a + l, 0, 0, 0, 0, 1);
    return this;
  }, makeScale:function(a, c, b) {
    this.set(a, 0, 0, 0, 0, c, 0, 0, 0, 0, b, 0, 0, 0, 0, 1);
    return this;
  }, makeShear:function(a, c, b) {
    this.set(1, c, b, 0, a, 1, b, 0, a, c, 1, 0, 0, 0, 0, 1);
    return this;
  }, compose:function(a, c, b) {
    var l = this.elements, e = c._x, h = c._y, f = c._z, d = c._w, g = e + e, m = h + h, u = f + f;
    c = e * g;
    var p = e * m;
    e *= u;
    var n = h * m;
    h *= u;
    f *= u;
    g *= d;
    m *= d;
    d *= u;
    u = b.x;
    var k = b.y;
    b = b.z;
    l[0] = (1 - (n + f)) * u;
    l[1] = (p + d) * u;
    l[2] = (e - m) * u;
    l[3] = 0;
    l[4] = (p - d) * k;
    l[5] = (1 - (c + f)) * k;
    l[6] = (h + g) * k;
    l[7] = 0;
    l[8] = (e + m) * b;
    l[9] = (h - g) * b;
    l[10] = (1 - (c + n)) * b;
    l[11] = 0;
    l[12] = a.x;
    l[13] = a.y;
    l[14] = a.z;
    l[15] = 1;
    return this;
  }, decompose:function(a, c, b) {
    var l = this.elements, e = Id.set(l[0], l[1], l[2]).length(), h = Id.set(l[4], l[5], l[6]).length(), f = Id.set(l[8], l[9], l[10]).length();
    0 > this.determinant() && (e = -e);
    a.x = l[12];
    a.y = l[13];
    a.z = l[14];
    Ka.copy(this);
    a = 1 / e;
    l = 1 / h;
    var d = 1 / f;
    Ka.elements[0] *= a;
    Ka.elements[1] *= a;
    Ka.elements[2] *= a;
    Ka.elements[4] *= l;
    Ka.elements[5] *= l;
    Ka.elements[6] *= l;
    Ka.elements[8] *= d;
    Ka.elements[9] *= d;
    Ka.elements[10] *= d;
    c.setFromRotationMatrix(Ka);
    b.x = e;
    b.y = h;
    b.z = f;
    return this;
  }, makePerspective:function(a, c, b, e, h, f) {
    void 0 === f && console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");
    var l = this.elements;
    l[0] = 2 * h / (c - a);
    l[4] = 0;
    l[8] = (c + a) / (c - a);
    l[12] = 0;
    l[1] = 0;
    l[5] = 2 * h / (b - e);
    l[9] = (b + e) / (b - e);
    l[13] = 0;
    l[2] = 0;
    l[6] = 0;
    l[10] = -(f + h) / (f - h);
    l[14] = -2 * f * h / (f - h);
    l[3] = 0;
    l[7] = 0;
    l[11] = -1;
    l[15] = 0;
    return this;
  }, makeOrthographic:function(a, c, b, e, h, f) {
    var l = this.elements, d = 1 / (c - a), g = 1 / (b - e), m = 1 / (f - h);
    l[0] = 2 * d;
    l[4] = 0;
    l[8] = 0;
    l[12] = -((c + a) * d);
    l[1] = 0;
    l[5] = 2 * g;
    l[9] = 0;
    l[13] = -((b + e) * g);
    l[2] = 0;
    l[6] = 0;
    l[10] = -2 * m;
    l[14] = -((f + h) * m);
    l[3] = 0;
    l[7] = 0;
    l[11] = 0;
    l[15] = 1;
    return this;
  }, equals:function(a) {
    var l = this.elements;
    a = a.elements;
    for (var c = 0; 16 > c; c++) {
      if (l[c] !== a[c]) {
        return !1;
      }
    }
    return !0;
  }, fromArray:function(a, c) {
    void 0 === c && (c = 0);
    for (var l = 0; 16 > l; l++) {
      this.elements[l] = a[l + c];
    }
    return this;
  }, toArray:function(a, c) {
    void 0 === a && (a = []);
    void 0 === c && (c = 0);
    var l = this.elements;
    a[c] = l[0];
    a[c + 1] = l[1];
    a[c + 2] = l[2];
    a[c + 3] = l[3];
    a[c + 4] = l[4];
    a[c + 5] = l[5];
    a[c + 6] = l[6];
    a[c + 7] = l[7];
    a[c + 8] = l[8];
    a[c + 9] = l[9];
    a[c + 10] = l[10];
    a[c + 11] = l[11];
    a[c + 12] = l[12];
    a[c + 13] = l[13];
    a[c + 14] = l[14];
    a[c + 15] = l[15];
    return a;
  }});
  var zi = new n, Ai = new q;
  c.RotationOrders = "XYZ YZX ZXY XZY YXZ ZYX".split(" ");
  c.DefaultOrder = "XYZ";
  Object.defineProperties(c.prototype, {x:{get:function() {
    return this._x;
  }, set:function(a) {
    this._x = a;
    this._onChangeCallback();
  }}, y:{get:function() {
    return this._y;
  }, set:function(a) {
    this._y = a;
    this._onChangeCallback();
  }}, z:{get:function() {
    return this._z;
  }, set:function(a) {
    this._z = a;
    this._onChangeCallback();
  }}, order:{get:function() {
    return this._order;
  }, set:function(a) {
    this._order = a;
    this._onChangeCallback();
  }}});
  Object.assign(c.prototype, {isEuler:!0, set:function(a, c, b, e) {
    this._x = a;
    this._y = c;
    this._z = b;
    this._order = e || this._order;
    this._onChangeCallback();
    return this;
  }, clone:function() {
    return new this.constructor(this._x, this._y, this._z, this._order);
  }, copy:function(a) {
    this._x = a._x;
    this._y = a._y;
    this._z = a._z;
    this._order = a._order;
    this._onChangeCallback();
    return this;
  }, setFromRotationMatrix:function(a, c, b) {
    var l = oa.clamp, e = a.elements;
    a = e[0];
    var h = e[4], f = e[8], d = e[1], g = e[5], m = e[9], p = e[2], u = e[6];
    e = e[10];
    c = c || this._order;
    switch(c) {
      case "XYZ":
        this._y = Math.asin(l(f, -1, 1));
        .9999999 > Math.abs(f) ? (this._x = Math.atan2(-m, e), this._z = Math.atan2(-h, a)) : (this._x = Math.atan2(u, g), this._z = 0);
        break;
      case "YXZ":
        this._x = Math.asin(-l(m, -1, 1));
        .9999999 > Math.abs(m) ? (this._y = Math.atan2(f, e), this._z = Math.atan2(d, g)) : (this._y = Math.atan2(-p, a), this._z = 0);
        break;
      case "ZXY":
        this._x = Math.asin(l(u, -1, 1));
        .9999999 > Math.abs(u) ? (this._y = Math.atan2(-p, e), this._z = Math.atan2(-h, g)) : (this._y = 0, this._z = Math.atan2(d, a));
        break;
      case "ZYX":
        this._y = Math.asin(-l(p, -1, 1));
        .9999999 > Math.abs(p) ? (this._x = Math.atan2(u, e), this._z = Math.atan2(d, a)) : (this._x = 0, this._z = Math.atan2(-h, g));
        break;
      case "YZX":
        this._z = Math.asin(l(d, -1, 1));
        .9999999 > Math.abs(d) ? (this._x = Math.atan2(-m, g), this._y = Math.atan2(-p, a)) : (this._x = 0, this._y = Math.atan2(f, e));
        break;
      case "XZY":
        this._z = Math.asin(-l(h, -1, 1));
        .9999999 > Math.abs(h) ? (this._x = Math.atan2(u, g), this._y = Math.atan2(f, a)) : (this._x = Math.atan2(-m, e), this._y = 0);
        break;
      default:
        console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + c);
    }
    this._order = c;
    !1 !== b && this._onChangeCallback();
    return this;
  }, setFromQuaternion:function(a, c, b) {
    zi.makeRotationFromQuaternion(a);
    return this.setFromRotationMatrix(zi, c, b);
  }, setFromVector3:function(a, c) {
    return this.set(a.x, a.y, a.z, c || this._order);
  }, reorder:function(a) {
    Ai.setFromEuler(this);
    return this.setFromQuaternion(Ai, a);
  }, equals:function(a) {
    return a._x === this._x && a._y === this._y && a._z === this._z && a._order === this._order;
  }, fromArray:function(a) {
    this._x = a[0];
    this._y = a[1];
    this._z = a[2];
    void 0 !== a[3] && (this._order = a[3]);
    this._onChangeCallback();
    return this;
  }, toArray:function(a, c) {
    void 0 === a && (a = []);
    void 0 === c && (c = 0);
    a[c] = this._x;
    a[c + 1] = this._y;
    a[c + 2] = this._z;
    a[c + 3] = this._order;
    return a;
  }, toVector3:function(a) {
    return a ? a.set(this._x, this._y, this._z) : new m(this._x, this._y, this._z);
  }, _onChange:function(a) {
    this._onChangeCallback = a;
    return this;
  }, _onChangeCallback:function() {
  }});
  Object.assign(h.prototype, {set:function(a) {
    this.mask = 1 << a | 0;
  }, enable:function(a) {
    this.mask = this.mask | 1 << a | 0;
  }, enableAll:function() {
    this.mask = -1;
  }, toggle:function(a) {
    this.mask ^= 1 << a | 0;
  }, disable:function(a) {
    this.mask &= ~(1 << a | 0);
  }, disableAll:function() {
    this.mask = 0;
  }, test:function(a) {
    return 0 !== (this.mask & a.mask);
  }});
  var kj = 0, Bi = new m, Jd = new q, Zb = new n, Rf = new m, Le = new m, bk = new m, ck = new q, Ci = new m(1, 0, 0), Di = new m(0, 1, 0), Ei = new m(0, 0, 1), dk = {type:"added"}, ek = {type:"removed"};
  t.DefaultUp = new m(0, 1, 0);
  t.DefaultMatrixAutoUpdate = !0;
  t.prototype = Object.assign(Object.create(d.prototype), {constructor:t, isObject3D:!0, onBeforeRender:function() {
  }, onAfterRender:function() {
  }, applyMatrix4:function(a) {
    this.matrixAutoUpdate && this.updateMatrix();
    this.matrix.premultiply(a);
    this.matrix.decompose(this.position, this.quaternion, this.scale);
  }, applyQuaternion:function(a) {
    this.quaternion.premultiply(a);
    return this;
  }, setRotationFromAxisAngle:function(a, c) {
    this.quaternion.setFromAxisAngle(a, c);
  }, setRotationFromEuler:function(a) {
    this.quaternion.setFromEuler(a, !0);
  }, setRotationFromMatrix:function(a) {
    this.quaternion.setFromRotationMatrix(a);
  }, setRotationFromQuaternion:function(a) {
    this.quaternion.copy(a);
  }, rotateOnAxis:function(a, c) {
    Jd.setFromAxisAngle(a, c);
    this.quaternion.multiply(Jd);
    return this;
  }, rotateOnWorldAxis:function(a, c) {
    Jd.setFromAxisAngle(a, c);
    this.quaternion.premultiply(Jd);
    return this;
  }, rotateX:function(a) {
    return this.rotateOnAxis(Ci, a);
  }, rotateY:function(a) {
    return this.rotateOnAxis(Di, a);
  }, rotateZ:function(a) {
    return this.rotateOnAxis(Ei, a);
  }, translateOnAxis:function(a, c) {
    Bi.copy(a).applyQuaternion(this.quaternion);
    this.position.add(Bi.multiplyScalar(c));
    return this;
  }, translateX:function(a) {
    return this.translateOnAxis(Ci, a);
  }, translateY:function(a) {
    return this.translateOnAxis(Di, a);
  }, translateZ:function(a) {
    return this.translateOnAxis(Ei, a);
  }, localToWorld:function(a) {
    return a.applyMatrix4(this.matrixWorld);
  }, worldToLocal:function(a) {
    return a.applyMatrix4(Zb.getInverse(this.matrixWorld));
  }, lookAt:function(a, c, b) {
    a.isVector3 ? Rf.copy(a) : Rf.set(a, c, b);
    a = this.parent;
    this.updateWorldMatrix(!0, !1);
    Le.setFromMatrixPosition(this.matrixWorld);
    this.isCamera || this.isLight ? Zb.lookAt(Le, Rf, this.up) : Zb.lookAt(Rf, Le, this.up);
    this.quaternion.setFromRotationMatrix(Zb);
    a && (Zb.extractRotation(a.matrixWorld), Jd.setFromRotationMatrix(Zb), this.quaternion.premultiply(Jd.inverse()));
  }, add:function(a) {
    if (1 < arguments.length) {
      for (var l = 0; l < arguments.length; l++) {
        this.add(arguments[l]);
      }
      return this;
    }
    if (a === this) {
      return console.error("THREE.Object3D.add: object can't be added as a child of itself.", a), this;
    }
    a && a.isObject3D ? (null !== a.parent && a.parent.remove(a), a.parent = this, this.children.push(a), a.dispatchEvent(dk)) : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", a);
    return this;
  }, remove:function(a) {
    if (1 < arguments.length) {
      for (var l = 0; l < arguments.length; l++) {
        this.remove(arguments[l]);
      }
      return this;
    }
    l = this.children.indexOf(a);
    -1 !== l && (a.parent = null, this.children.splice(l, 1), a.dispatchEvent(ek));
    return this;
  }, attach:function(a) {
    this.updateWorldMatrix(!0, !1);
    Zb.getInverse(this.matrixWorld);
    null !== a.parent && (a.parent.updateWorldMatrix(!0, !1), Zb.multiply(a.parent.matrixWorld));
    a.applyMatrix4(Zb);
    a.updateWorldMatrix(!1, !1);
    this.add(a);
    return this;
  }, getObjectById:function(a) {
    return this.getObjectByProperty("id", a);
  }, getObjectByName:function(a) {
    return this.getObjectByProperty("name", a);
  }, getObjectByProperty:function(a, c) {
    if (this[a] === c) {
      return this;
    }
    for (var l = 0, b = this.children.length; l < b; l++) {
      var e = this.children[l].getObjectByProperty(a, c);
      if (void 0 !== e) {
        return e;
      }
    }
  }, getWorldPosition:function(a) {
    void 0 === a && (console.warn("THREE.Object3D: .getWorldPosition() target is now required"), a = new m);
    this.updateMatrixWorld(!0);
    return a.setFromMatrixPosition(this.matrixWorld);
  }, getWorldQuaternion:function(a) {
    void 0 === a && (console.warn("THREE.Object3D: .getWorldQuaternion() target is now required"), a = new q);
    this.updateMatrixWorld(!0);
    this.matrixWorld.decompose(Le, a, bk);
    return a;
  }, getWorldScale:function(a) {
    void 0 === a && (console.warn("THREE.Object3D: .getWorldScale() target is now required"), a = new m);
    this.updateMatrixWorld(!0);
    this.matrixWorld.decompose(Le, ck, a);
    return a;
  }, getWorldDirection:function(a) {
    void 0 === a && (console.warn("THREE.Object3D: .getWorldDirection() target is now required"), a = new m);
    this.updateMatrixWorld(!0);
    var l = this.matrixWorld.elements;
    return a.set(l[8], l[9], l[10]).normalize();
  }, raycast:function() {
  }, traverse:function(a) {
    a(this);
    for (var l = this.children, c = 0, b = l.length; c < b; c++) {
      l[c].traverse(a);
    }
  }, traverseVisible:function(a) {
    if (!1 !== this.visible) {
      a(this);
      for (var l = this.children, c = 0, b = l.length; c < b; c++) {
        l[c].traverseVisible(a);
      }
    }
  }, traverseAncestors:function(a) {
    var l = this.parent;
    null !== l && (a(l), l.traverseAncestors(a));
  }, updateMatrix:function() {
    this.matrix.compose(this.position, this.quaternion, this.scale);
    this.matrixWorldNeedsUpdate = !0;
  }, updateMatrixWorld:function(a) {
    this.matrixAutoUpdate && this.updateMatrix();
    if (this.matrixWorldNeedsUpdate || a) {
      null === this.parent ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), this.matrixWorldNeedsUpdate = !1, a = !0;
    }
    for (var l = this.children, c = 0, b = l.length; c < b; c++) {
      l[c].updateMatrixWorld(a);
    }
  }, updateWorldMatrix:function(a, c) {
    var l = this.parent;
    !0 === a && null !== l && l.updateWorldMatrix(!0, !1);
    this.matrixAutoUpdate && this.updateMatrix();
    null === this.parent ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
    if (!0 === c) {
      for (a = this.children, c = 0, l = a.length; c < l; c++) {
        a[c].updateWorldMatrix(!1, !0);
      }
    }
  }, toJSON:function(a) {
    function l(l, c) {
      void 0 === l[c.uuid] && (l[c.uuid] = c.toJSON(a));
      return c.uuid;
    }
    function c(a) {
      var l = [], c;
      for (c in a) {
        var b = a[c];
        delete b.metadata;
        l.push(b);
      }
      return l;
    }
    var b = void 0 === a || "string" === typeof a, e = {};
    b && (a = {geometries:{}, materials:{}, textures:{}, images:{}, shapes:{}}, e.metadata = {version:4.5, type:"Object", generator:"Object3D.toJSON"});
    var h = {};
    h.uuid = this.uuid;
    h.type = this.type;
    "" !== this.name && (h.name = this.name);
    !0 === this.castShadow && (h.castShadow = !0);
    !0 === this.receiveShadow && (h.receiveShadow = !0);
    !1 === this.visible && (h.visible = !1);
    !1 === this.frustumCulled && (h.frustumCulled = !1);
    0 !== this.renderOrder && (h.renderOrder = this.renderOrder);
    "{}" !== JSON.stringify(this.userData) && (h.userData = this.userData);
    h.layers = this.layers.mask;
    h.matrix = this.matrix.toArray();
    !1 === this.matrixAutoUpdate && (h.matrixAutoUpdate = !1);
    this.isInstancedMesh && (h.type = "InstancedMesh", h.count = this.count, h.instanceMatrix = this.instanceMatrix.toJSON());
    if (this.isMesh || this.isLine || this.isPoints) {
      h.geometry = l(a.geometries, this.geometry);
      var f = this.geometry.parameters;
      if (void 0 !== f && void 0 !== f.shapes) {
        if (f = f.shapes, Array.isArray(f)) {
          for (var d = 0, g = f.length; d < g; d++) {
            l(a.shapes, f[d]);
          }
        } else {
          l(a.shapes, f);
        }
      }
    }
    if (void 0 !== this.material) {
      if (Array.isArray(this.material)) {
        f = [];
        d = 0;
        for (g = this.material.length; d < g; d++) {
          f.push(l(a.materials, this.material[d]));
        }
        h.material = f;
      } else {
        h.material = l(a.materials, this.material);
      }
    }
    if (0 < this.children.length) {
      for (h.children = [], d = 0; d < this.children.length; d++) {
        h.children.push(this.children[d].toJSON(a).object);
      }
    }
    if (b) {
      b = c(a.geometries);
      d = c(a.materials);
      g = c(a.textures);
      var m = c(a.images);
      f = c(a.shapes);
      0 < b.length && (e.geometries = b);
      0 < d.length && (e.materials = d);
      0 < g.length && (e.textures = g);
      0 < m.length && (e.images = m);
      0 < f.length && (e.shapes = f);
    }
    e.object = h;
    return e;
  }, clone:function(a) {
    return (new this.constructor).copy(this, a);
  }, copy:function(a, c) {
    void 0 === c && (c = !0);
    this.name = a.name;
    this.up.copy(a.up);
    this.position.copy(a.position);
    this.quaternion.copy(a.quaternion);
    this.scale.copy(a.scale);
    this.matrix.copy(a.matrix);
    this.matrixWorld.copy(a.matrixWorld);
    this.matrixAutoUpdate = a.matrixAutoUpdate;
    this.matrixWorldNeedsUpdate = a.matrixWorldNeedsUpdate;
    this.layers.mask = a.layers.mask;
    this.visible = a.visible;
    this.castShadow = a.castShadow;
    this.receiveShadow = a.receiveShadow;
    this.frustumCulled = a.frustumCulled;
    this.renderOrder = a.renderOrder;
    this.userData = JSON.parse(JSON.stringify(a.userData));
    if (!0 === c) {
      for (c = 0; c < a.children.length; c++) {
        this.add(a.children[c].clone());
      }
    }
    return this;
  }});
  z.prototype = Object.assign(Object.create(t.prototype), {constructor:z, isScene:!0, copy:function(a, c) {
    t.prototype.copy.call(this, a, c);
    null !== a.background && (this.background = a.background.clone());
    null !== a.environment && (this.environment = a.environment.clone());
    null !== a.fog && (this.fog = a.fog.clone());
    null !== a.overrideMaterial && (this.overrideMaterial = a.overrideMaterial.clone());
    this.autoUpdate = a.autoUpdate;
    this.matrixAutoUpdate = a.matrixAutoUpdate;
    return this;
  }, toJSON:function(a) {
    var l = t.prototype.toJSON.call(this, a);
    null !== this.background && (l.object.background = this.background.toJSON(a));
    null !== this.environment && (l.object.environment = this.environment.toJSON(a));
    null !== this.fog && (l.object.fog = this.fog.toJSON());
    return l;
  }, dispose:function() {
    this.dispatchEvent({type:"dispose"});
  }});
  var $b = [new m, new m, new m, new m, new m, new m, new m, new m], Me = new m, eh = new y, Kd = new m, Ld = new m, Md = new m, tc = new m, uc = new m, Sc = new m, Ne = new m, Sf = new m, Tf = new m, xc = new m;
  Object.assign(y.prototype, {isBox3:!0, set:function(a, c) {
    this.min.copy(a);
    this.max.copy(c);
    return this;
  }, setFromArray:function(a) {
    for (var l = Infinity, c = Infinity, b = Infinity, e = -Infinity, h = -Infinity, f = -Infinity, d = 0, g = a.length; d < g; d += 3) {
      var m = a[d], p = a[d + 1], n = a[d + 2];
      m < l && (l = m);
      p < c && (c = p);
      n < b && (b = n);
      m > e && (e = m);
      p > h && (h = p);
      n > f && (f = n);
    }
    this.min.set(l, c, b);
    this.max.set(e, h, f);
    return this;
  }, setFromBufferAttribute:function(a) {
    for (var l = Infinity, c = Infinity, b = Infinity, e = -Infinity, h = -Infinity, f = -Infinity, d = 0, g = a.count; d < g; d++) {
      var m = a.getX(d), p = a.getY(d), n = a.getZ(d);
      m < l && (l = m);
      p < c && (c = p);
      n < b && (b = n);
      m > e && (e = m);
      p > h && (h = p);
      n > f && (f = n);
    }
    this.min.set(l, c, b);
    this.max.set(e, h, f);
    return this;
  }, setFromPoints:function(a) {
    this.makeEmpty();
    for (var l = 0, c = a.length; l < c; l++) {
      this.expandByPoint(a[l]);
    }
    return this;
  }, setFromCenterAndSize:function(a, c) {
    c = Me.copy(c).multiplyScalar(.5);
    this.min.copy(a).sub(c);
    this.max.copy(a).add(c);
    return this;
  }, setFromObject:function(a) {
    this.makeEmpty();
    return this.expandByObject(a);
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(a) {
    this.min.copy(a.min);
    this.max.copy(a.max);
    return this;
  }, makeEmpty:function() {
    this.min.x = this.min.y = this.min.z = Infinity;
    this.max.x = this.max.y = this.max.z = -Infinity;
    return this;
  }, isEmpty:function() {
    return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
  }, getCenter:function(a) {
    void 0 === a && (console.warn("THREE.Box3: .getCenter() target is now required"), a = new m);
    return this.isEmpty() ? a.set(0, 0, 0) : a.addVectors(this.min, this.max).multiplyScalar(.5);
  }, getSize:function(a) {
    void 0 === a && (console.warn("THREE.Box3: .getSize() target is now required"), a = new m);
    return this.isEmpty() ? a.set(0, 0, 0) : a.subVectors(this.max, this.min);
  }, expandByPoint:function(a) {
    this.min.min(a);
    this.max.max(a);
    return this;
  }, expandByVector:function(a) {
    this.min.sub(a);
    this.max.add(a);
    return this;
  }, expandByScalar:function(a) {
    this.min.addScalar(-a);
    this.max.addScalar(a);
    return this;
  }, expandByObject:function(a) {
    a.updateWorldMatrix(!1, !1);
    var l = a.geometry;
    void 0 !== l && (null === l.boundingBox && l.computeBoundingBox(), eh.copy(l.boundingBox), eh.applyMatrix4(a.matrixWorld), this.union(eh));
    a = a.children;
    l = 0;
    for (var c = a.length; l < c; l++) {
      this.expandByObject(a[l]);
    }
    return this;
  }, containsPoint:function(a) {
    return a.x < this.min.x || a.x > this.max.x || a.y < this.min.y || a.y > this.max.y || a.z < this.min.z || a.z > this.max.z ? !1 : !0;
  }, containsBox:function(a) {
    return this.min.x <= a.min.x && a.max.x <= this.max.x && this.min.y <= a.min.y && a.max.y <= this.max.y && this.min.z <= a.min.z && a.max.z <= this.max.z;
  }, getParameter:function(a, c) {
    void 0 === c && (console.warn("THREE.Box3: .getParameter() target is now required"), c = new m);
    return c.set((a.x - this.min.x) / (this.max.x - this.min.x), (a.y - this.min.y) / (this.max.y - this.min.y), (a.z - this.min.z) / (this.max.z - this.min.z));
  }, intersectsBox:function(a) {
    return a.max.x < this.min.x || a.min.x > this.max.x || a.max.y < this.min.y || a.min.y > this.max.y || a.max.z < this.min.z || a.min.z > this.max.z ? !1 : !0;
  }, intersectsSphere:function(a) {
    this.clampPoint(a.center, Me);
    return Me.distanceToSquared(a.center) <= a.radius * a.radius;
  }, intersectsPlane:function(a) {
    if (0 < a.normal.x) {
      var l = a.normal.x * this.min.x;
      var c = a.normal.x * this.max.x;
    } else {
      l = a.normal.x * this.max.x, c = a.normal.x * this.min.x;
    }
    0 < a.normal.y ? (l += a.normal.y * this.min.y, c += a.normal.y * this.max.y) : (l += a.normal.y * this.max.y, c += a.normal.y * this.min.y);
    0 < a.normal.z ? (l += a.normal.z * this.min.z, c += a.normal.z * this.max.z) : (l += a.normal.z * this.max.z, c += a.normal.z * this.min.z);
    return l <= -a.constant && c >= -a.constant;
  }, intersectsTriangle:function(a) {
    if (this.isEmpty()) {
      return !1;
    }
    this.getCenter(Ne);
    Sf.subVectors(this.max, Ne);
    Kd.subVectors(a.a, Ne);
    Ld.subVectors(a.b, Ne);
    Md.subVectors(a.c, Ne);
    tc.subVectors(Ld, Kd);
    uc.subVectors(Md, Ld);
    Sc.subVectors(Kd, Md);
    a = [0, -tc.z, tc.y, 0, -uc.z, uc.y, 0, -Sc.z, Sc.y, tc.z, 0, -tc.x, uc.z, 0, -uc.x, Sc.z, 0, -Sc.x, -tc.y, tc.x, 0, -uc.y, uc.x, 0, -Sc.y, Sc.x, 0];
    if (!x(a, Kd, Ld, Md, Sf)) {
      return !1;
    }
    a = [1, 0, 0, 0, 1, 0, 0, 0, 1];
    if (!x(a, Kd, Ld, Md, Sf)) {
      return !1;
    }
    Tf.crossVectors(tc, uc);
    a = [Tf.x, Tf.y, Tf.z];
    return x(a, Kd, Ld, Md, Sf);
  }, clampPoint:function(a, c) {
    void 0 === c && (console.warn("THREE.Box3: .clampPoint() target is now required"), c = new m);
    return c.copy(a).clamp(this.min, this.max);
  }, distanceToPoint:function(a) {
    return Me.copy(a).clamp(this.min, this.max).sub(a).length();
  }, getBoundingSphere:function(a) {
    void 0 === a && console.error("THREE.Box3: .getBoundingSphere() target is now required");
    this.getCenter(a.center);
    a.radius = .5 * this.getSize(Me).length();
    return a;
  }, intersect:function(a) {
    this.min.max(a.min);
    this.max.min(a.max);
    this.isEmpty() && this.makeEmpty();
    return this;
  }, union:function(a) {
    this.min.min(a.min);
    this.max.max(a.max);
    return this;
  }, applyMatrix4:function(a) {
    if (this.isEmpty()) {
      return this;
    }
    $b[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(a);
    $b[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(a);
    $b[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(a);
    $b[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(a);
    $b[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(a);
    $b[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(a);
    $b[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(a);
    $b[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(a);
    this.setFromPoints($b);
    return this;
  }, translate:function(a) {
    this.min.add(a);
    this.max.add(a);
    return this;
  }, equals:function(a) {
    return a.min.equals(this.min) && a.max.equals(this.max);
  }});
  var fk = new y;
  Object.assign(p.prototype, {set:function(a, c) {
    this.center.copy(a);
    this.radius = c;
    return this;
  }, setFromPoints:function(a, c) {
    var l = this.center;
    void 0 !== c ? l.copy(c) : fk.setFromPoints(a).getCenter(l);
    for (var b = c = 0, e = a.length; b < e; b++) {
      c = Math.max(c, l.distanceToSquared(a[b]));
    }
    this.radius = Math.sqrt(c);
    return this;
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(a) {
    this.center.copy(a.center);
    this.radius = a.radius;
    return this;
  }, isEmpty:function() {
    return 0 > this.radius;
  }, makeEmpty:function() {
    this.center.set(0, 0, 0);
    this.radius = -1;
    return this;
  }, containsPoint:function(a) {
    return a.distanceToSquared(this.center) <= this.radius * this.radius;
  }, distanceToPoint:function(a) {
    return a.distanceTo(this.center) - this.radius;
  }, intersectsSphere:function(a) {
    var l = this.radius + a.radius;
    return a.center.distanceToSquared(this.center) <= l * l;
  }, intersectsBox:function(a) {
    return a.intersectsSphere(this);
  }, intersectsPlane:function(a) {
    return Math.abs(a.distanceToPoint(this.center)) <= this.radius;
  }, clampPoint:function(a, c) {
    var l = this.center.distanceToSquared(a);
    void 0 === c && (console.warn("THREE.Sphere: .clampPoint() target is now required"), c = new m);
    c.copy(a);
    l > this.radius * this.radius && (c.sub(this.center).normalize(), c.multiplyScalar(this.radius).add(this.center));
    return c;
  }, getBoundingBox:function(a) {
    void 0 === a && (console.warn("THREE.Sphere: .getBoundingBox() target is now required"), a = new y);
    if (this.isEmpty()) {
      return a.makeEmpty(), a;
    }
    a.set(this.center, this.center);
    a.expandByScalar(this.radius);
    return a;
  }, applyMatrix4:function(a) {
    this.center.applyMatrix4(a);
    this.radius *= a.getMaxScaleOnAxis();
    return this;
  }, translate:function(a) {
    this.center.add(a);
    return this;
  }, equals:function(a) {
    return a.center.equals(this.center) && a.radius === this.radius;
  }});
  var ac = new m, fh = new m, Uf = new m, vc = new m, gh = new m, Vf = new m, hh = new m;
  Object.assign(v.prototype, {set:function(a, c) {
    this.origin.copy(a);
    this.direction.copy(c);
    return this;
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(a) {
    this.origin.copy(a.origin);
    this.direction.copy(a.direction);
    return this;
  }, at:function(a, c) {
    void 0 === c && (console.warn("THREE.Ray: .at() target is now required"), c = new m);
    return c.copy(this.direction).multiplyScalar(a).add(this.origin);
  }, lookAt:function(a) {
    this.direction.copy(a).sub(this.origin).normalize();
    return this;
  }, recast:function(a) {
    this.origin.copy(this.at(a, ac));
    return this;
  }, closestPointToPoint:function(a, c) {
    void 0 === c && (console.warn("THREE.Ray: .closestPointToPoint() target is now required"), c = new m);
    c.subVectors(a, this.origin);
    a = c.dot(this.direction);
    return 0 > a ? c.copy(this.origin) : c.copy(this.direction).multiplyScalar(a).add(this.origin);
  }, distanceToPoint:function(a) {
    return Math.sqrt(this.distanceSqToPoint(a));
  }, distanceSqToPoint:function(a) {
    var l = ac.subVectors(a, this.origin).dot(this.direction);
    if (0 > l) {
      return this.origin.distanceToSquared(a);
    }
    ac.copy(this.direction).multiplyScalar(l).add(this.origin);
    return ac.distanceToSquared(a);
  }, distanceSqToSegment:function(a, c, b, e) {
    fh.copy(a).add(c).multiplyScalar(.5);
    Uf.copy(c).sub(a).normalize();
    vc.copy(this.origin).sub(fh);
    var l = .5 * a.distanceTo(c), h = -this.direction.dot(Uf), f = vc.dot(this.direction), d = -vc.dot(Uf), g = vc.lengthSq(), m = Math.abs(1 - h * h);
    if (0 < m) {
      a = h * d - f;
      c = h * f - d;
      var p = l * m;
      0 <= a ? c >= -p ? c <= p ? (l = 1 / m, a *= l, c *= l, h = a * (a + h * c + 2 * f) + c * (h * a + c + 2 * d) + g) : (c = l, a = Math.max(0, -(h * c + f)), h = -a * a + c * (c + 2 * d) + g) : (c = -l, a = Math.max(0, -(h * c + f)), h = -a * a + c * (c + 2 * d) + g) : c <= -p ? (a = Math.max(0, -(-h * l + f)), c = 0 < a ? -l : Math.min(Math.max(-l, -d), l), h = -a * a + c * (c + 2 * d) + g) : c <= p ? (a = 0, c = Math.min(Math.max(-l, -d), l), h = c * (c + 2 * d) + g) : (a = Math.max(0, -(h * 
      l + f)), c = 0 < a ? l : Math.min(Math.max(-l, -d), l), h = -a * a + c * (c + 2 * d) + g);
    } else {
      c = 0 < h ? -l : l, a = Math.max(0, -(h * c + f)), h = -a * a + c * (c + 2 * d) + g;
    }
    b && b.copy(this.direction).multiplyScalar(a).add(this.origin);
    e && e.copy(Uf).multiplyScalar(c).add(fh);
    return h;
  }, intersectSphere:function(a, c) {
    ac.subVectors(a.center, this.origin);
    var l = ac.dot(this.direction), b = ac.dot(ac) - l * l;
    a = a.radius * a.radius;
    if (b > a) {
      return null;
    }
    a = Math.sqrt(a - b);
    b = l - a;
    l += a;
    return 0 > b && 0 > l ? null : 0 > b ? this.at(l, c) : this.at(b, c);
  }, intersectsSphere:function(a) {
    return this.distanceSqToPoint(a.center) <= a.radius * a.radius;
  }, distanceToPlane:function(a) {
    var l = a.normal.dot(this.direction);
    if (0 === l) {
      return 0 === a.distanceToPoint(this.origin) ? 0 : null;
    }
    a = -(this.origin.dot(a.normal) + a.constant) / l;
    return 0 <= a ? a : null;
  }, intersectPlane:function(a, c) {
    a = this.distanceToPlane(a);
    return null === a ? null : this.at(a, c);
  }, intersectsPlane:function(a) {
    var l = a.distanceToPoint(this.origin);
    return 0 === l || 0 > a.normal.dot(this.direction) * l ? !0 : !1;
  }, intersectBox:function(a, c) {
    var l = 1 / this.direction.x;
    var b = 1 / this.direction.y;
    var e = 1 / this.direction.z, h = this.origin;
    if (0 <= l) {
      var f = (a.min.x - h.x) * l;
      l *= a.max.x - h.x;
    } else {
      f = (a.max.x - h.x) * l, l *= a.min.x - h.x;
    }
    if (0 <= b) {
      var d = (a.min.y - h.y) * b;
      b *= a.max.y - h.y;
    } else {
      d = (a.max.y - h.y) * b, b *= a.min.y - h.y;
    }
    if (f > b || d > l) {
      return null;
    }
    if (d > f || f !== f) {
      f = d;
    }
    if (b < l || l !== l) {
      l = b;
    }
    0 <= e ? (d = (a.min.z - h.z) * e, a = (a.max.z - h.z) * e) : (d = (a.max.z - h.z) * e, a = (a.min.z - h.z) * e);
    if (f > a || d > l) {
      return null;
    }
    if (d > f || f !== f) {
      f = d;
    }
    if (a < l || l !== l) {
      l = a;
    }
    return 0 > l ? null : this.at(0 <= f ? f : l, c);
  }, intersectsBox:function(a) {
    return null !== this.intersectBox(a, ac);
  }, intersectTriangle:function(a, c, b, e, h) {
    gh.subVectors(c, a);
    Vf.subVectors(b, a);
    hh.crossVectors(gh, Vf);
    c = this.direction.dot(hh);
    if (0 < c) {
      if (e) {
        return null;
      }
      e = 1;
    } else {
      if (0 > c) {
        e = -1, c = -c;
      } else {
        return null;
      }
    }
    vc.subVectors(this.origin, a);
    a = e * this.direction.dot(Vf.crossVectors(vc, Vf));
    if (0 > a) {
      return null;
    }
    b = e * this.direction.dot(gh.cross(vc));
    if (0 > b || a + b > c) {
      return null;
    }
    a = -e * vc.dot(hh);
    return 0 > a ? null : this.at(a / c, h);
  }, applyMatrix4:function(a) {
    this.origin.applyMatrix4(a);
    this.direction.transformDirection(a);
    return this;
  }, equals:function(a) {
    return a.origin.equals(this.origin) && a.direction.equals(this.direction);
  }});
  var ih = new m, gk = new m, hk = new b;
  Object.assign(w.prototype, {isPlane:!0, set:function(a, c) {
    this.normal.copy(a);
    this.constant = c;
    return this;
  }, setComponents:function(a, c, b, e) {
    this.normal.set(a, c, b);
    this.constant = e;
    return this;
  }, setFromNormalAndCoplanarPoint:function(a, c) {
    this.normal.copy(a);
    this.constant = -c.dot(this.normal);
    return this;
  }, setFromCoplanarPoints:function(a, c, b) {
    c = ih.subVectors(b, c).cross(gk.subVectors(a, c)).normalize();
    this.setFromNormalAndCoplanarPoint(c, a);
    return this;
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(a) {
    this.normal.copy(a.normal);
    this.constant = a.constant;
    return this;
  }, normalize:function() {
    var a = 1 / this.normal.length();
    this.normal.multiplyScalar(a);
    this.constant *= a;
    return this;
  }, negate:function() {
    this.constant *= -1;
    this.normal.negate();
    return this;
  }, distanceToPoint:function(a) {
    return this.normal.dot(a) + this.constant;
  }, distanceToSphere:function(a) {
    return this.distanceToPoint(a.center) - a.radius;
  }, projectPoint:function(a, c) {
    void 0 === c && (console.warn("THREE.Plane: .projectPoint() target is now required"), c = new m);
    return c.copy(this.normal).multiplyScalar(-this.distanceToPoint(a)).add(a);
  }, intersectLine:function(a, c) {
    void 0 === c && (console.warn("THREE.Plane: .intersectLine() target is now required"), c = new m);
    var l = a.delta(ih), b = this.normal.dot(l);
    if (0 === b) {
      if (0 === this.distanceToPoint(a.start)) {
        return c.copy(a.start);
      }
    } else {
      if (b = -(a.start.dot(this.normal) + this.constant) / b, !(0 > b || 1 < b)) {
        return c.copy(l).multiplyScalar(b).add(a.start);
      }
    }
  }, intersectsLine:function(a) {
    var l = this.distanceToPoint(a.start);
    a = this.distanceToPoint(a.end);
    return 0 > l && 0 < a || 0 > a && 0 < l;
  }, intersectsBox:function(a) {
    return a.intersectsPlane(this);
  }, intersectsSphere:function(a) {
    return a.intersectsPlane(this);
  }, coplanarPoint:function(a) {
    void 0 === a && (console.warn("THREE.Plane: .coplanarPoint() target is now required"), a = new m);
    return a.copy(this.normal).multiplyScalar(-this.constant);
  }, applyMatrix4:function(a, c) {
    c = c || hk.getNormalMatrix(a);
    a = this.coplanarPoint(ih).applyMatrix4(a);
    c = this.normal.applyMatrix3(c).normalize();
    this.constant = -a.dot(c);
    return this;
  }, translate:function(a) {
    this.constant -= a.dot(this.normal);
    return this;
  }, equals:function(a) {
    return a.normal.equals(this.normal) && a.constant === this.constant;
  }});
  var zb = new m, bc = new m, jh = new m, cc = new m, Nd = new m, Od = new m, Fi = new m, kh = new m, lh = new m, mh = new m;
  Object.assign(C, {getNormal:function(a, c, b, e) {
    void 0 === e && (console.warn("THREE.Triangle: .getNormal() target is now required"), e = new m);
    e.subVectors(b, c);
    zb.subVectors(a, c);
    e.cross(zb);
    a = e.lengthSq();
    return 0 < a ? e.multiplyScalar(1 / Math.sqrt(a)) : e.set(0, 0, 0);
  }, getBarycoord:function(a, c, b, e, h) {
    zb.subVectors(e, c);
    bc.subVectors(b, c);
    jh.subVectors(a, c);
    a = zb.dot(zb);
    c = zb.dot(bc);
    b = zb.dot(jh);
    var l = bc.dot(bc);
    e = bc.dot(jh);
    var f = a * l - c * c;
    void 0 === h && (console.warn("THREE.Triangle: .getBarycoord() target is now required"), h = new m);
    if (0 === f) {
      return h.set(-2, -1, -1);
    }
    f = 1 / f;
    l = (l * b - c * e) * f;
    a = (a * e - c * b) * f;
    return h.set(1 - l - a, a, l);
  }, containsPoint:function(a, c, b, e) {
    C.getBarycoord(a, c, b, e, cc);
    return 0 <= cc.x && 0 <= cc.y && 1 >= cc.x + cc.y;
  }, getUV:function(a, c, b, e, h, f, d, g) {
    this.getBarycoord(a, c, b, e, cc);
    g.set(0, 0);
    g.addScaledVector(h, cc.x);
    g.addScaledVector(f, cc.y);
    g.addScaledVector(d, cc.z);
    return g;
  }, isFrontFacing:function(a, c, b, e) {
    zb.subVectors(b, c);
    bc.subVectors(a, c);
    return 0 > zb.cross(bc).dot(e) ? !0 : !1;
  }});
  Object.assign(C.prototype, {set:function(a, c, b) {
    this.a.copy(a);
    this.b.copy(c);
    this.c.copy(b);
    return this;
  }, setFromPointsAndIndices:function(a, c, b, e) {
    this.a.copy(a[c]);
    this.b.copy(a[b]);
    this.c.copy(a[e]);
    return this;
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(a) {
    this.a.copy(a.a);
    this.b.copy(a.b);
    this.c.copy(a.c);
    return this;
  }, getArea:function() {
    zb.subVectors(this.c, this.b);
    bc.subVectors(this.a, this.b);
    return .5 * zb.cross(bc).length();
  }, getMidpoint:function(a) {
    void 0 === a && (console.warn("THREE.Triangle: .getMidpoint() target is now required"), a = new m);
    return a.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
  }, getNormal:function(a) {
    return C.getNormal(this.a, this.b, this.c, a);
  }, getPlane:function(a) {
    void 0 === a && (console.warn("THREE.Triangle: .getPlane() target is now required"), a = new w);
    return a.setFromCoplanarPoints(this.a, this.b, this.c);
  }, getBarycoord:function(a, c) {
    return C.getBarycoord(a, this.a, this.b, this.c, c);
  }, getUV:function(a, c, b, e, h) {
    return C.getUV(a, this.a, this.b, this.c, c, b, e, h);
  }, containsPoint:function(a) {
    return C.containsPoint(a, this.a, this.b, this.c);
  }, isFrontFacing:function(a) {
    return C.isFrontFacing(this.a, this.b, this.c, a);
  }, intersectsBox:function(a) {
    return a.intersectsTriangle(this);
  }, closestPointToPoint:function(a, c) {
    void 0 === c && (console.warn("THREE.Triangle: .closestPointToPoint() target is now required"), c = new m);
    var l = this.a, b = this.b, e = this.c;
    Nd.subVectors(b, l);
    Od.subVectors(e, l);
    kh.subVectors(a, l);
    var h = Nd.dot(kh), f = Od.dot(kh);
    if (0 >= h && 0 >= f) {
      return c.copy(l);
    }
    lh.subVectors(a, b);
    var d = Nd.dot(lh), g = Od.dot(lh);
    if (0 <= d && g <= d) {
      return c.copy(b);
    }
    var p = h * g - d * f;
    if (0 >= p && 0 <= h && 0 >= d) {
      return b = h / (h - d), c.copy(l).addScaledVector(Nd, b);
    }
    mh.subVectors(a, e);
    a = Nd.dot(mh);
    var n = Od.dot(mh);
    if (0 <= n && a <= n) {
      return c.copy(e);
    }
    h = a * f - h * n;
    if (0 >= h && 0 <= f && 0 >= n) {
      return p = f / (f - n), c.copy(l).addScaledVector(Od, p);
    }
    f = d * n - a * g;
    if (0 >= f && 0 <= g - d && 0 <= a - n) {
      return Fi.subVectors(e, b), p = (g - d) / (g - d + (a - n)), c.copy(b).addScaledVector(Fi, p);
    }
    e = 1 / (f + h + p);
    b = h * e;
    p *= e;
    return c.copy(l).addScaledVector(Nd, b).addScaledVector(Od, p);
  }, equals:function(a) {
    return a.a.equals(this.a) && a.b.equals(this.b) && a.c.equals(this.c);
  }});
  var Gi = {aliceblue:15792383, antiquewhite:16444375, aqua:65535, aquamarine:8388564, azure:15794175, beige:16119260, bisque:16770244, black:0, blanchedalmond:16772045, blue:255, blueviolet:9055202, brown:10824234, burlywood:14596231, cadetblue:6266528, chartreuse:8388352, chocolate:13789470, coral:16744272, cornflowerblue:6591981, cornsilk:16775388, crimson:14423100, cyan:65535, darkblue:139, darkcyan:35723, darkgoldenrod:12092939, darkgray:11119017, darkgreen:25600, darkgrey:11119017, darkkhaki:12433259, 
  darkmagenta:9109643, darkolivegreen:5597999, darkorange:16747520, darkorchid:10040012, darkred:9109504, darksalmon:15308410, darkseagreen:9419919, darkslateblue:4734347, darkslategray:3100495, darkslategrey:3100495, darkturquoise:52945, darkviolet:9699539, deeppink:16716947, deepskyblue:49151, dimgray:6908265, dimgrey:6908265, dodgerblue:2003199, firebrick:11674146, floralwhite:16775920, forestgreen:2263842, fuchsia:16711935, gainsboro:14474460, ghostwhite:16316671, gold:16766720, goldenrod:14329120, 
  gray:8421504, green:32768, greenyellow:11403055, grey:8421504, honeydew:15794160, hotpink:16738740, indianred:13458524, indigo:4915330, ivory:16777200, khaki:15787660, lavender:15132410, lavenderblush:16773365, lawngreen:8190976, lemonchiffon:16775885, lightblue:11393254, lightcoral:15761536, lightcyan:14745599, lightgoldenrodyellow:16448210, lightgray:13882323, lightgreen:9498256, lightgrey:13882323, lightpink:16758465, lightsalmon:16752762, lightseagreen:2142890, lightskyblue:8900346, lightslategray:7833753, 
  lightslategrey:7833753, lightsteelblue:11584734, lightyellow:16777184, lime:65280, limegreen:3329330, linen:16445670, magenta:16711935, maroon:8388608, mediumaquamarine:6737322, mediumblue:205, mediumorchid:12211667, mediumpurple:9662683, mediumseagreen:3978097, mediumslateblue:8087790, mediumspringgreen:64154, mediumturquoise:4772300, mediumvioletred:13047173, midnightblue:1644912, mintcream:16121850, mistyrose:16770273, moccasin:16770229, navajowhite:16768685, navy:128, oldlace:16643558, olive:8421376, 
  olivedrab:7048739, orange:16753920, orangered:16729344, orchid:14315734, palegoldenrod:15657130, palegreen:10025880, paleturquoise:11529966, palevioletred:14381203, papayawhip:16773077, peachpuff:16767673, peru:13468991, pink:16761035, plum:14524637, powderblue:11591910, purple:8388736, rebeccapurple:6697881, red:16711680, rosybrown:12357519, royalblue:4286945, saddlebrown:9127187, salmon:16416882, sandybrown:16032864, seagreen:3050327, seashell:16774638, sienna:10506797, silver:12632256, skyblue:8900331, 
  slateblue:6970061, slategray:7372944, slategrey:7372944, snow:16775930, springgreen:65407, steelblue:4620980, tan:13808780, teal:32896, thistle:14204888, tomato:16737095, turquoise:4251856, violet:15631086, wheat:16113331, white:16777215, whitesmoke:16119285, yellow:16776960, yellowgreen:10145074}, cb = {h:0, s:0, l:0}, Wf = {h:0, s:0, l:0};
  Object.assign(A.prototype, {isColor:!0, r:1, g:1, b:1, set:function(a) {
    a && a.isColor ? this.copy(a) : "number" === typeof a ? this.setHex(a) : "string" === typeof a && this.setStyle(a);
    return this;
  }, setScalar:function(a) {
    this.b = this.g = this.r = a;
    return this;
  }, setHex:function(a) {
    a = Math.floor(a);
    this.r = (a >> 16 & 255) / 255;
    this.g = (a >> 8 & 255) / 255;
    this.b = (a & 255) / 255;
    return this;
  }, setRGB:function(a, c, b) {
    this.r = a;
    this.g = c;
    this.b = b;
    return this;
  }, setHSL:function(a, c, b) {
    a = oa.euclideanModulo(a, 1);
    c = oa.clamp(c, 0, 1);
    b = oa.clamp(b, 0, 1);
    0 === c ? this.r = this.g = this.b = b : (c = .5 >= b ? b * (1 + c) : b + c - b * c, b = 2 * b - c, this.r = D(b, c, a + 1 / 3), this.g = D(b, c, a), this.b = D(b, c, a - 1 / 3));
    return this;
  }, setStyle:function(a) {
    function l(l) {
      void 0 !== l && 1 > parseFloat(l) && console.warn("THREE.Color: Alpha component of " + a + " will be ignored.");
    }
    var c;
    if (c = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(a)) {
      var b = c[2];
      switch(c[1]) {
        case "rgb":
        case "rgba":
          if (c = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(b)) {
            return this.r = Math.min(255, parseInt(c[1], 10)) / 255, this.g = Math.min(255, parseInt(c[2], 10)) / 255, this.b = Math.min(255, parseInt(c[3], 10)) / 255, l(c[5]), this;
          }
          if (c = /^(\d+)%\s*,\s*(\d+)%\s*,\s*(\d+)%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(b)) {
            return this.r = Math.min(100, parseInt(c[1], 10)) / 100, this.g = Math.min(100, parseInt(c[2], 10)) / 100, this.b = Math.min(100, parseInt(c[3], 10)) / 100, l(c[5]), this;
          }
          break;
        case "hsl":
        case "hsla":
          if (c = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)%\s*,\s*(\d+)%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(b)) {
            b = parseFloat(c[1]) / 360;
            var e = parseInt(c[2], 10) / 100, h = parseInt(c[3], 10) / 100;
            l(c[5]);
            return this.setHSL(b, e, h);
          }
      }
    } else {
      if (c = /^#([A-Fa-f0-9]+)$/.exec(a)) {
        c = c[1];
        b = c.length;
        if (3 === b) {
          return this.r = parseInt(c.charAt(0) + c.charAt(0), 16) / 255, this.g = parseInt(c.charAt(1) + c.charAt(1), 16) / 255, this.b = parseInt(c.charAt(2) + c.charAt(2), 16) / 255, this;
        }
        if (6 === b) {
          return this.r = parseInt(c.charAt(0) + c.charAt(1), 16) / 255, this.g = parseInt(c.charAt(2) + c.charAt(3), 16) / 255, this.b = parseInt(c.charAt(4) + c.charAt(5), 16) / 255, this;
        }
      }
    }
    return a && 0 < a.length ? this.setColorName(a) : this;
  }, setColorName:function(a) {
    var l = Gi[a];
    void 0 !== l ? this.setHex(l) : console.warn("THREE.Color: Unknown color " + a);
    return this;
  }, clone:function() {
    return new this.constructor(this.r, this.g, this.b);
  }, copy:function(a) {
    this.r = a.r;
    this.g = a.g;
    this.b = a.b;
    return this;
  }, copyGammaToLinear:function(a, c) {
    void 0 === c && (c = 2);
    this.r = Math.pow(a.r, c);
    this.g = Math.pow(a.g, c);
    this.b = Math.pow(a.b, c);
    return this;
  }, copyLinearToGamma:function(a, c) {
    void 0 === c && (c = 2);
    c = 0 < c ? 1 / c : 1;
    this.r = Math.pow(a.r, c);
    this.g = Math.pow(a.g, c);
    this.b = Math.pow(a.b, c);
    return this;
  }, convertGammaToLinear:function(a) {
    this.copyGammaToLinear(this, a);
    return this;
  }, convertLinearToGamma:function(a) {
    this.copyLinearToGamma(this, a);
    return this;
  }, copySRGBToLinear:function(a) {
    this.r = F(a.r);
    this.g = F(a.g);
    this.b = F(a.b);
    return this;
  }, copyLinearToSRGB:function(a) {
    this.r = B(a.r);
    this.g = B(a.g);
    this.b = B(a.b);
    return this;
  }, convertSRGBToLinear:function() {
    this.copySRGBToLinear(this);
    return this;
  }, convertLinearToSRGB:function() {
    this.copyLinearToSRGB(this);
    return this;
  }, getHex:function() {
    return 255 * this.r << 16 ^ 255 * this.g << 8 ^ 255 * this.b << 0;
  }, getHexString:function() {
    return ("000000" + this.getHex().toString(16)).slice(-6);
  }, getHSL:function(a) {
    void 0 === a && (console.warn("THREE.Color: .getHSL() target is now required"), a = {h:0, s:0, l:0});
    var l = this.r, c = this.g, b = this.b, e = Math.max(l, c, b), h = Math.min(l, c, b), f, d = (h + e) / 2;
    if (h === e) {
      h = f = 0;
    } else {
      var g = e - h;
      h = .5 >= d ? g / (e + h) : g / (2 - e - h);
      switch(e) {
        case l:
          f = (c - b) / g + (c < b ? 6 : 0);
          break;
        case c:
          f = (b - l) / g + 2;
          break;
        case b:
          f = (l - c) / g + 4;
      }
      f /= 6;
    }
    a.h = f;
    a.s = h;
    a.l = d;
    return a;
  }, getStyle:function() {
    return "rgb(" + (255 * this.r | 0) + "," + (255 * this.g | 0) + "," + (255 * this.b | 0) + ")";
  }, offsetHSL:function(a, c, b) {
    this.getHSL(cb);
    cb.h += a;
    cb.s += c;
    cb.l += b;
    this.setHSL(cb.h, cb.s, cb.l);
    return this;
  }, add:function(a) {
    this.r += a.r;
    this.g += a.g;
    this.b += a.b;
    return this;
  }, addColors:function(a, c) {
    this.r = a.r + c.r;
    this.g = a.g + c.g;
    this.b = a.b + c.b;
    return this;
  }, addScalar:function(a) {
    this.r += a;
    this.g += a;
    this.b += a;
    return this;
  }, sub:function(a) {
    this.r = Math.max(0, this.r - a.r);
    this.g = Math.max(0, this.g - a.g);
    this.b = Math.max(0, this.b - a.b);
    return this;
  }, multiply:function(a) {
    this.r *= a.r;
    this.g *= a.g;
    this.b *= a.b;
    return this;
  }, multiplyScalar:function(a) {
    this.r *= a;
    this.g *= a;
    this.b *= a;
    return this;
  }, lerp:function(a, c) {
    this.r += (a.r - this.r) * c;
    this.g += (a.g - this.g) * c;
    this.b += (a.b - this.b) * c;
    return this;
  }, lerpHSL:function(a, c) {
    this.getHSL(cb);
    a.getHSL(Wf);
    a = oa.lerp(cb.h, Wf.h, c);
    var l = oa.lerp(cb.s, Wf.s, c);
    c = oa.lerp(cb.l, Wf.l, c);
    this.setHSL(a, l, c);
    return this;
  }, equals:function(a) {
    return a.r === this.r && a.g === this.g && a.b === this.b;
  }, fromArray:function(a, c) {
    void 0 === c && (c = 0);
    this.r = a[c];
    this.g = a[c + 1];
    this.b = a[c + 2];
    return this;
  }, toArray:function(a, c) {
    void 0 === a && (a = []);
    void 0 === c && (c = 0);
    a[c] = this.r;
    a[c + 1] = this.g;
    a[c + 2] = this.b;
    return a;
  }, toJSON:function() {
    return this.getHex();
  }});
  A.NAMES = Gi;
  Object.assign(E.prototype, {clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(a) {
    this.a = a.a;
    this.b = a.b;
    this.c = a.c;
    this.normal.copy(a.normal);
    this.color.copy(a.color);
    this.materialIndex = a.materialIndex;
    for (var l = 0, c = a.vertexNormals.length; l < c; l++) {
      this.vertexNormals[l] = a.vertexNormals[l].clone();
    }
    l = 0;
    for (c = a.vertexColors.length; l < c; l++) {
      this.vertexColors[l] = a.vertexColors[l].clone();
    }
    return this;
  }});
  var lj = 0;
  I.prototype = Object.assign(Object.create(d.prototype), {constructor:I, isMaterial:!0, onBeforeCompile:function() {
  }, setValues:function(a) {
    if (void 0 !== a) {
      for (var l in a) {
        var c = a[l];
        if (void 0 === c) {
          console.warn("THREE.Material: '" + l + "' parameter is undefined.");
        } else {
          if ("shading" === l) {
            console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead."), this.flatShading = 1 === c ? !0 : !1;
          } else {
            var b = this[l];
            void 0 === b ? console.warn("THREE." + this.type + ": '" + l + "' is not a property of this material.") : b && b.isColor ? b.set(c) : b && b.isVector3 && c && c.isVector3 ? b.copy(c) : this[l] = c;
          }
        }
      }
    }
  }, toJSON:function(a) {
    function l(a) {
      var l = [], c;
      for (c in a) {
        var b = a[c];
        delete b.metadata;
        l.push(b);
      }
      return l;
    }
    var c = void 0 === a || "string" === typeof a;
    c && (a = {textures:{}, images:{}});
    var b = {metadata:{version:4.5, type:"Material", generator:"Material.toJSON"}};
    b.uuid = this.uuid;
    b.type = this.type;
    "" !== this.name && (b.name = this.name);
    this.color && this.color.isColor && (b.color = this.color.getHex());
    void 0 !== this.roughness && (b.roughness = this.roughness);
    void 0 !== this.metalness && (b.metalness = this.metalness);
    this.sheen && this.sheen.isColor && (b.sheen = this.sheen.getHex());
    this.emissive && this.emissive.isColor && (b.emissive = this.emissive.getHex());
    this.emissiveIntensity && 1 !== this.emissiveIntensity && (b.emissiveIntensity = this.emissiveIntensity);
    this.specular && this.specular.isColor && (b.specular = this.specular.getHex());
    void 0 !== this.shininess && (b.shininess = this.shininess);
    void 0 !== this.clearcoat && (b.clearcoat = this.clearcoat);
    void 0 !== this.clearcoatRoughness && (b.clearcoatRoughness = this.clearcoatRoughness);
    this.clearcoatMap && this.clearcoatMap.isTexture && (b.clearcoatMap = this.clearcoatMap.toJSON(a).uuid);
    this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture && (b.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(a).uuid);
    this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture && (b.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(a).uuid, b.clearcoatNormalScale = this.clearcoatNormalScale.toArray());
    this.map && this.map.isTexture && (b.map = this.map.toJSON(a).uuid);
    this.matcap && this.matcap.isTexture && (b.matcap = this.matcap.toJSON(a).uuid);
    this.alphaMap && this.alphaMap.isTexture && (b.alphaMap = this.alphaMap.toJSON(a).uuid);
    this.lightMap && this.lightMap.isTexture && (b.lightMap = this.lightMap.toJSON(a).uuid);
    this.aoMap && this.aoMap.isTexture && (b.aoMap = this.aoMap.toJSON(a).uuid, b.aoMapIntensity = this.aoMapIntensity);
    this.bumpMap && this.bumpMap.isTexture && (b.bumpMap = this.bumpMap.toJSON(a).uuid, b.bumpScale = this.bumpScale);
    this.normalMap && this.normalMap.isTexture && (b.normalMap = this.normalMap.toJSON(a).uuid, b.normalMapType = this.normalMapType, b.normalScale = this.normalScale.toArray());
    this.displacementMap && this.displacementMap.isTexture && (b.displacementMap = this.displacementMap.toJSON(a).uuid, b.displacementScale = this.displacementScale, b.displacementBias = this.displacementBias);
    this.roughnessMap && this.roughnessMap.isTexture && (b.roughnessMap = this.roughnessMap.toJSON(a).uuid);
    this.metalnessMap && this.metalnessMap.isTexture && (b.metalnessMap = this.metalnessMap.toJSON(a).uuid);
    this.emissiveMap && this.emissiveMap.isTexture && (b.emissiveMap = this.emissiveMap.toJSON(a).uuid);
    this.specularMap && this.specularMap.isTexture && (b.specularMap = this.specularMap.toJSON(a).uuid);
    this.envMap && this.envMap.isTexture && (b.envMap = this.envMap.toJSON(a).uuid, b.reflectivity = this.reflectivity, b.refractionRatio = this.refractionRatio, void 0 !== this.combine && (b.combine = this.combine), void 0 !== this.envMapIntensity && (b.envMapIntensity = this.envMapIntensity));
    this.gradientMap && this.gradientMap.isTexture && (b.gradientMap = this.gradientMap.toJSON(a).uuid);
    void 0 !== this.size && (b.size = this.size);
    void 0 !== this.sizeAttenuation && (b.sizeAttenuation = this.sizeAttenuation);
    1 !== this.blending && (b.blending = this.blending);
    !0 === this.flatShading && (b.flatShading = this.flatShading);
    0 !== this.side && (b.side = this.side);
    this.vertexColors && (b.vertexColors = !0);
    1 > this.opacity && (b.opacity = this.opacity);
    !0 === this.transparent && (b.transparent = this.transparent);
    b.depthFunc = this.depthFunc;
    b.depthTest = this.depthTest;
    b.depthWrite = this.depthWrite;
    b.stencilWrite = this.stencilWrite;
    b.stencilWriteMask = this.stencilWriteMask;
    b.stencilFunc = this.stencilFunc;
    b.stencilRef = this.stencilRef;
    b.stencilFuncMask = this.stencilFuncMask;
    b.stencilFail = this.stencilFail;
    b.stencilZFail = this.stencilZFail;
    b.stencilZPass = this.stencilZPass;
    this.rotation && 0 !== this.rotation && (b.rotation = this.rotation);
    !0 === this.polygonOffset && (b.polygonOffset = !0);
    0 !== this.polygonOffsetFactor && (b.polygonOffsetFactor = this.polygonOffsetFactor);
    0 !== this.polygonOffsetUnits && (b.polygonOffsetUnits = this.polygonOffsetUnits);
    this.linewidth && 1 !== this.linewidth && (b.linewidth = this.linewidth);
    void 0 !== this.dashSize && (b.dashSize = this.dashSize);
    void 0 !== this.gapSize && (b.gapSize = this.gapSize);
    void 0 !== this.scale && (b.scale = this.scale);
    !0 === this.dithering && (b.dithering = !0);
    0 < this.alphaTest && (b.alphaTest = this.alphaTest);
    !0 === this.premultipliedAlpha && (b.premultipliedAlpha = this.premultipliedAlpha);
    !0 === this.wireframe && (b.wireframe = this.wireframe);
    1 < this.wireframeLinewidth && (b.wireframeLinewidth = this.wireframeLinewidth);
    "round" !== this.wireframeLinecap && (b.wireframeLinecap = this.wireframeLinecap);
    "round" !== this.wireframeLinejoin && (b.wireframeLinejoin = this.wireframeLinejoin);
    !0 === this.morphTargets && (b.morphTargets = !0);
    !0 === this.morphNormals && (b.morphNormals = !0);
    !0 === this.skinning && (b.skinning = !0);
    !1 === this.visible && (b.visible = !1);
    !1 === this.toneMapped && (b.toneMapped = !1);
    "{}" !== JSON.stringify(this.userData) && (b.userData = this.userData);
    c && (c = l(a.textures), a = l(a.images), 0 < c.length && (b.textures = c), 0 < a.length && (b.images = a));
    return b;
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(a) {
    this.name = a.name;
    this.fog = a.fog;
    this.blending = a.blending;
    this.side = a.side;
    this.flatShading = a.flatShading;
    this.vertexColors = a.vertexColors;
    this.opacity = a.opacity;
    this.transparent = a.transparent;
    this.blendSrc = a.blendSrc;
    this.blendDst = a.blendDst;
    this.blendEquation = a.blendEquation;
    this.blendSrcAlpha = a.blendSrcAlpha;
    this.blendDstAlpha = a.blendDstAlpha;
    this.blendEquationAlpha = a.blendEquationAlpha;
    this.depthFunc = a.depthFunc;
    this.depthTest = a.depthTest;
    this.depthWrite = a.depthWrite;
    this.stencilWriteMask = a.stencilWriteMask;
    this.stencilFunc = a.stencilFunc;
    this.stencilRef = a.stencilRef;
    this.stencilFuncMask = a.stencilFuncMask;
    this.stencilFail = a.stencilFail;
    this.stencilZFail = a.stencilZFail;
    this.stencilZPass = a.stencilZPass;
    this.stencilWrite = a.stencilWrite;
    var l = a.clippingPlanes, c = null;
    if (null !== l) {
      var b = l.length;
      c = Array(b);
      for (var e = 0; e !== b; ++e) {
        c[e] = l[e].clone();
      }
    }
    this.clippingPlanes = c;
    this.clipIntersection = a.clipIntersection;
    this.clipShadows = a.clipShadows;
    this.shadowSide = a.shadowSide;
    this.colorWrite = a.colorWrite;
    this.precision = a.precision;
    this.polygonOffset = a.polygonOffset;
    this.polygonOffsetFactor = a.polygonOffsetFactor;
    this.polygonOffsetUnits = a.polygonOffsetUnits;
    this.dithering = a.dithering;
    this.alphaTest = a.alphaTest;
    this.premultipliedAlpha = a.premultipliedAlpha;
    this.visible = a.visible;
    this.toneMapped = a.toneMapped;
    this.userData = JSON.parse(JSON.stringify(a.userData));
    return this;
  }, dispose:function() {
    this.dispatchEvent({type:"dispose"});
  }});
  Object.defineProperty(I.prototype, "needsUpdate", {set:function(a) {
    !0 === a && this.version++;
  }});
  K.prototype = Object.create(I.prototype);
  K.prototype.constructor = K;
  K.prototype.isMeshBasicMaterial = !0;
  K.prototype.copy = function(a) {
    I.prototype.copy.call(this, a);
    this.color.copy(a.color);
    this.map = a.map;
    this.lightMap = a.lightMap;
    this.lightMapIntensity = a.lightMapIntensity;
    this.aoMap = a.aoMap;
    this.aoMapIntensity = a.aoMapIntensity;
    this.specularMap = a.specularMap;
    this.alphaMap = a.alphaMap;
    this.envMap = a.envMap;
    this.combine = a.combine;
    this.reflectivity = a.reflectivity;
    this.refractionRatio = a.refractionRatio;
    this.wireframe = a.wireframe;
    this.wireframeLinewidth = a.wireframeLinewidth;
    this.wireframeLinecap = a.wireframeLinecap;
    this.wireframeLinejoin = a.wireframeLinejoin;
    this.skinning = a.skinning;
    this.morphTargets = a.morphTargets;
    return this;
  };
  var ua = new m;
  Object.defineProperty(J.prototype, "needsUpdate", {set:function(a) {
    !0 === a && this.version++;
  }});
  Object.assign(J.prototype, {isBufferAttribute:!0, onUploadCallback:function() {
  }, setUsage:function(a) {
    this.usage = a;
    return this;
  }, copy:function(a) {
    this.name = a.name;
    this.array = new a.array.constructor(a.array);
    this.itemSize = a.itemSize;
    this.count = a.count;
    this.normalized = a.normalized;
    this.usage = a.usage;
    return this;
  }, copyAt:function(a, c, b) {
    a *= this.itemSize;
    b *= c.itemSize;
    for (var l = 0, e = this.itemSize; l < e; l++) {
      this.array[a + l] = c.array[b + l];
    }
    return this;
  }, copyArray:function(a) {
    this.array.set(a);
    return this;
  }, copyColorsArray:function(a) {
    for (var l = this.array, c = 0, b = 0, e = a.length; b < e; b++) {
      var h = a[b];
      void 0 === h && (console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined", b), h = new A);
      l[c++] = h.r;
      l[c++] = h.g;
      l[c++] = h.b;
    }
    return this;
  }, copyVector2sArray:function(a) {
    for (var c = this.array, l = 0, b = 0, e = a.length; b < e; b++) {
      var h = a[b];
      void 0 === h && (console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined", b), h = new k);
      c[l++] = h.x;
      c[l++] = h.y;
    }
    return this;
  }, copyVector3sArray:function(a) {
    for (var c = this.array, l = 0, b = 0, e = a.length; b < e; b++) {
      var h = a[b];
      void 0 === h && (console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined", b), h = new m);
      c[l++] = h.x;
      c[l++] = h.y;
      c[l++] = h.z;
    }
    return this;
  }, copyVector4sArray:function(a) {
    for (var c = this.array, l = 0, b = 0, e = a.length; b < e; b++) {
      var h = a[b];
      void 0 === h && (console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined", b), h = new f);
      c[l++] = h.x;
      c[l++] = h.y;
      c[l++] = h.z;
      c[l++] = h.w;
    }
    return this;
  }, applyMatrix3:function(a) {
    for (var c = 0, l = this.count; c < l; c++) {
      ua.x = this.getX(c), ua.y = this.getY(c), ua.z = this.getZ(c), ua.applyMatrix3(a), this.setXYZ(c, ua.x, ua.y, ua.z);
    }
    return this;
  }, applyMatrix4:function(a) {
    for (var c = 0, l = this.count; c < l; c++) {
      ua.x = this.getX(c), ua.y = this.getY(c), ua.z = this.getZ(c), ua.applyMatrix4(a), this.setXYZ(c, ua.x, ua.y, ua.z);
    }
    return this;
  }, applyNormalMatrix:function(a) {
    for (var c = 0, l = this.count; c < l; c++) {
      ua.x = this.getX(c), ua.y = this.getY(c), ua.z = this.getZ(c), ua.applyNormalMatrix(a), this.setXYZ(c, ua.x, ua.y, ua.z);
    }
    return this;
  }, transformDirection:function(a) {
    for (var c = 0, l = this.count; c < l; c++) {
      ua.x = this.getX(c), ua.y = this.getY(c), ua.z = this.getZ(c), ua.transformDirection(a), this.setXYZ(c, ua.x, ua.y, ua.z);
    }
    return this;
  }, set:function(a, c) {
    void 0 === c && (c = 0);
    this.array.set(a, c);
    return this;
  }, getX:function(a) {
    return this.array[a * this.itemSize];
  }, setX:function(a, c) {
    this.array[a * this.itemSize] = c;
    return this;
  }, getY:function(a) {
    return this.array[a * this.itemSize + 1];
  }, setY:function(a, c) {
    this.array[a * this.itemSize + 1] = c;
    return this;
  }, getZ:function(a) {
    return this.array[a * this.itemSize + 2];
  }, setZ:function(a, c) {
    this.array[a * this.itemSize + 2] = c;
    return this;
  }, getW:function(a) {
    return this.array[a * this.itemSize + 3];
  }, setW:function(a, c) {
    this.array[a * this.itemSize + 3] = c;
    return this;
  }, setXY:function(a, c, b) {
    a *= this.itemSize;
    this.array[a + 0] = c;
    this.array[a + 1] = b;
    return this;
  }, setXYZ:function(a, c, b, e) {
    a *= this.itemSize;
    this.array[a + 0] = c;
    this.array[a + 1] = b;
    this.array[a + 2] = e;
    return this;
  }, setXYZW:function(a, c, b, e, h) {
    a *= this.itemSize;
    this.array[a + 0] = c;
    this.array[a + 1] = b;
    this.array[a + 2] = e;
    this.array[a + 3] = h;
    return this;
  }, onUpload:function(a) {
    this.onUploadCallback = a;
    return this;
  }, clone:function() {
    return (new this.constructor(this.array, this.itemSize)).copy(this);
  }, toJSON:function() {
    return {itemSize:this.itemSize, type:this.array.constructor.name, array:Array.prototype.slice.call(this.array), normalized:this.normalized};
  }});
  R.prototype = Object.create(J.prototype);
  R.prototype.constructor = R;
  L.prototype = Object.create(J.prototype);
  L.prototype.constructor = L;
  H.prototype = Object.create(J.prototype);
  H.prototype.constructor = H;
  M.prototype = Object.create(J.prototype);
  M.prototype.constructor = M;
  S.prototype = Object.create(J.prototype);
  S.prototype.constructor = S;
  O.prototype = Object.create(J.prototype);
  O.prototype.constructor = O;
  Z.prototype = Object.create(J.prototype);
  Z.prototype.constructor = Z;
  Q.prototype = Object.create(J.prototype);
  Q.prototype.constructor = Q;
  U.prototype = Object.create(J.prototype);
  U.prototype.constructor = U;
  Object.assign(P.prototype, {computeGroups:function(a) {
    var c = [], l = void 0;
    a = a.faces;
    for (var b = 0; b < a.length; b++) {
      var e = a[b];
      if (e.materialIndex !== l) {
        l = e.materialIndex;
        void 0 !== h && (h.count = 3 * b - h.start, c.push(h));
        var h = {start:3 * b, materialIndex:l};
      }
    }
    void 0 !== h && (h.count = 3 * b - h.start, c.push(h));
    this.groups = c;
  }, fromGeometry:function(a) {
    var c = a.faces, l = a.vertices, b = a.faceVertexUvs, e = b[0] && 0 < b[0].length, h = b[1] && 0 < b[1].length, f = a.morphTargets, d = f.length;
    if (0 < d) {
      var g = [];
      for (var m = 0; m < d; m++) {
        g[m] = {name:f[m].name, data:[]};
      }
      this.morphTargets.position = g;
    }
    var p = a.morphNormals, n = p.length;
    if (0 < n) {
      var q = [];
      for (m = 0; m < n; m++) {
        q[m] = {name:p[m].name, data:[]};
      }
      this.morphTargets.normal = q;
    }
    var r = a.skinIndices, t = a.skinWeights, v = r.length === l.length, z = t.length === l.length;
    0 < l.length && 0 === c.length && console.error("THREE.DirectGeometry: Faceless geometries are not supported.");
    for (m = 0; m < c.length; m++) {
      var w = c[m];
      this.vertices.push(l[w.a], l[w.b], l[w.c]);
      var y = w.vertexNormals;
      3 === y.length ? this.normals.push(y[0], y[1], y[2]) : (y = w.normal, this.normals.push(y, y, y));
      y = w.vertexColors;
      3 === y.length ? this.colors.push(y[0], y[1], y[2]) : (y = w.color, this.colors.push(y, y, y));
      !0 === e && (y = b[0][m], void 0 !== y ? this.uvs.push(y[0], y[1], y[2]) : (console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ", m), this.uvs.push(new k, new k, new k)));
      !0 === h && (y = b[1][m], void 0 !== y ? this.uvs2.push(y[0], y[1], y[2]) : (console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ", m), this.uvs2.push(new k, new k, new k)));
      for (y = 0; y < d; y++) {
        var x = f[y].vertices;
        g[y].data.push(x[w.a], x[w.b], x[w.c]);
      }
      for (y = 0; y < n; y++) {
        x = p[y].vertexNormals[m], q[y].data.push(x.a, x.b, x.c);
      }
      v && this.skinIndices.push(r[w.a], r[w.b], r[w.c]);
      z && this.skinWeights.push(t[w.a], t[w.b], t[w.c]);
    }
    this.computeGroups(a);
    this.verticesNeedUpdate = a.verticesNeedUpdate;
    this.normalsNeedUpdate = a.normalsNeedUpdate;
    this.colorsNeedUpdate = a.colorsNeedUpdate;
    this.uvsNeedUpdate = a.uvsNeedUpdate;
    this.groupsNeedUpdate = a.groupsNeedUpdate;
    null !== a.boundingSphere && (this.boundingSphere = a.boundingSphere.clone());
    null !== a.boundingBox && (this.boundingBox = a.boundingBox.clone());
    return this;
  }});
  var mj = 1, Nb = new n, nh = new t, Pd = new m, hb = new y, Oe = new y, La = new m;
  N.prototype = Object.assign(Object.create(d.prototype), {constructor:N, isBufferGeometry:!0, getIndex:function() {
    return this.index;
  }, setIndex:function(a) {
    Array.isArray(a) ? this.index = new (65535 < da(a) ? Z : S)(a, 1) : this.index = a;
  }, getAttribute:function(a) {
    return this.attributes[a];
  }, setAttribute:function(a, c) {
    this.attributes[a] = c;
    return this;
  }, deleteAttribute:function(a) {
    delete this.attributes[a];
    return this;
  }, addGroup:function(a, c, b) {
    this.groups.push({start:a, count:c, materialIndex:void 0 !== b ? b : 0});
  }, clearGroups:function() {
    this.groups = [];
  }, setDrawRange:function(a, c) {
    this.drawRange.start = a;
    this.drawRange.count = c;
  }, applyMatrix4:function(a) {
    var c = this.attributes.position;
    void 0 !== c && (c.applyMatrix4(a), c.needsUpdate = !0);
    c = this.attributes.normal;
    if (void 0 !== c) {
      var l = (new b).getNormalMatrix(a);
      c.applyNormalMatrix(l);
      c.needsUpdate = !0;
    }
    c = this.attributes.tangent;
    void 0 !== c && (c.transformDirection(a), c.needsUpdate = !0);
    null !== this.boundingBox && this.computeBoundingBox();
    null !== this.boundingSphere && this.computeBoundingSphere();
    return this;
  }, rotateX:function(a) {
    Nb.makeRotationX(a);
    this.applyMatrix4(Nb);
    return this;
  }, rotateY:function(a) {
    Nb.makeRotationY(a);
    this.applyMatrix4(Nb);
    return this;
  }, rotateZ:function(a) {
    Nb.makeRotationZ(a);
    this.applyMatrix4(Nb);
    return this;
  }, translate:function(a, c, b) {
    Nb.makeTranslation(a, c, b);
    this.applyMatrix4(Nb);
    return this;
  }, scale:function(a, c, b) {
    Nb.makeScale(a, c, b);
    this.applyMatrix4(Nb);
    return this;
  }, lookAt:function(a) {
    nh.lookAt(a);
    nh.updateMatrix();
    this.applyMatrix4(nh.matrix);
    return this;
  }, center:function() {
    this.computeBoundingBox();
    this.boundingBox.getCenter(Pd).negate();
    this.translate(Pd.x, Pd.y, Pd.z);
    return this;
  }, setFromObject:function(a) {
    var c = a.geometry;
    if (a.isPoints || a.isLine) {
      a = new Q(3 * c.vertices.length, 3);
      var l = new Q(3 * c.colors.length, 3);
      this.setAttribute("position", a.copyVector3sArray(c.vertices));
      this.setAttribute("color", l.copyColorsArray(c.colors));
      c.lineDistances && c.lineDistances.length === c.vertices.length && (a = new Q(c.lineDistances.length, 1), this.setAttribute("lineDistance", a.copyArray(c.lineDistances)));
      null !== c.boundingSphere && (this.boundingSphere = c.boundingSphere.clone());
      null !== c.boundingBox && (this.boundingBox = c.boundingBox.clone());
    } else {
      a.isMesh && c && c.isGeometry && this.fromGeometry(c);
    }
    return this;
  }, setFromPoints:function(a) {
    for (var c = [], l = 0, b = a.length; l < b; l++) {
      var e = a[l];
      c.push(e.x, e.y, e.z || 0);
    }
    this.setAttribute("position", new Q(c, 3));
    return this;
  }, updateFromObject:function(a) {
    var c = a.geometry;
    if (a.isMesh) {
      var l = c.__directGeometry;
      !0 === c.elementsNeedUpdate && (l = void 0, c.elementsNeedUpdate = !1);
      if (void 0 === l) {
        return this.fromGeometry(c);
      }
      l.verticesNeedUpdate = c.verticesNeedUpdate;
      l.normalsNeedUpdate = c.normalsNeedUpdate;
      l.colorsNeedUpdate = c.colorsNeedUpdate;
      l.uvsNeedUpdate = c.uvsNeedUpdate;
      l.groupsNeedUpdate = c.groupsNeedUpdate;
      c.verticesNeedUpdate = !1;
      c.normalsNeedUpdate = !1;
      c.colorsNeedUpdate = !1;
      c.uvsNeedUpdate = !1;
      c.groupsNeedUpdate = !1;
      c = l;
    }
    !0 === c.verticesNeedUpdate && (l = this.attributes.position, void 0 !== l && (l.copyVector3sArray(c.vertices), l.needsUpdate = !0), c.verticesNeedUpdate = !1);
    !0 === c.normalsNeedUpdate && (l = this.attributes.normal, void 0 !== l && (l.copyVector3sArray(c.normals), l.needsUpdate = !0), c.normalsNeedUpdate = !1);
    !0 === c.colorsNeedUpdate && (l = this.attributes.color, void 0 !== l && (l.copyColorsArray(c.colors), l.needsUpdate = !0), c.colorsNeedUpdate = !1);
    c.uvsNeedUpdate && (l = this.attributes.uv, void 0 !== l && (l.copyVector2sArray(c.uvs), l.needsUpdate = !0), c.uvsNeedUpdate = !1);
    c.lineDistancesNeedUpdate && (l = this.attributes.lineDistance, void 0 !== l && (l.copyArray(c.lineDistances), l.needsUpdate = !0), c.lineDistancesNeedUpdate = !1);
    c.groupsNeedUpdate && (c.computeGroups(a.geometry), this.groups = c.groups, c.groupsNeedUpdate = !1);
    return this;
  }, fromGeometry:function(a) {
    a.__directGeometry = (new P).fromGeometry(a);
    return this.fromDirectGeometry(a.__directGeometry);
  }, fromDirectGeometry:function(a) {
    var c = new Float32Array(3 * a.vertices.length);
    this.setAttribute("position", (new J(c, 3)).copyVector3sArray(a.vertices));
    0 < a.normals.length && (c = new Float32Array(3 * a.normals.length), this.setAttribute("normal", (new J(c, 3)).copyVector3sArray(a.normals)));
    0 < a.colors.length && (c = new Float32Array(3 * a.colors.length), this.setAttribute("color", (new J(c, 3)).copyColorsArray(a.colors)));
    0 < a.uvs.length && (c = new Float32Array(2 * a.uvs.length), this.setAttribute("uv", (new J(c, 2)).copyVector2sArray(a.uvs)));
    0 < a.uvs2.length && (c = new Float32Array(2 * a.uvs2.length), this.setAttribute("uv2", (new J(c, 2)).copyVector2sArray(a.uvs2)));
    this.groups = a.groups;
    for (var l in a.morphTargets) {
      c = [];
      for (var b = a.morphTargets[l], e = 0, h = b.length; e < h; e++) {
        var f = b[e], d = new Q(3 * f.data.length, 3);
        d.name = f.name;
        c.push(d.copyVector3sArray(f.data));
      }
      this.morphAttributes[l] = c;
    }
    0 < a.skinIndices.length && (l = new Q(4 * a.skinIndices.length, 4), this.setAttribute("skinIndex", l.copyVector4sArray(a.skinIndices)));
    0 < a.skinWeights.length && (l = new Q(4 * a.skinWeights.length, 4), this.setAttribute("skinWeight", l.copyVector4sArray(a.skinWeights)));
    null !== a.boundingSphere && (this.boundingSphere = a.boundingSphere.clone());
    null !== a.boundingBox && (this.boundingBox = a.boundingBox.clone());
    return this;
  }, computeBoundingBox:function() {
    null === this.boundingBox && (this.boundingBox = new y);
    var a = this.attributes.position, c = this.morphAttributes.position;
    if (void 0 !== a) {
      if (this.boundingBox.setFromBufferAttribute(a), c) {
        a = 0;
        for (var b = c.length; a < b; a++) {
          hb.setFromBufferAttribute(c[a]), this.morphTargetsRelative ? (La.addVectors(this.boundingBox.min, hb.min), this.boundingBox.expandByPoint(La), La.addVectors(this.boundingBox.max, hb.max), this.boundingBox.expandByPoint(La)) : (this.boundingBox.expandByPoint(hb.min), this.boundingBox.expandByPoint(hb.max));
        }
      }
    } else {
      this.boundingBox.makeEmpty();
    }
    (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) && console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
  }, computeBoundingSphere:function() {
    null === this.boundingSphere && (this.boundingSphere = new p);
    var a = this.attributes.position, c = this.morphAttributes.position;
    if (a) {
      var b = this.boundingSphere.center;
      hb.setFromBufferAttribute(a);
      if (c) {
        for (var e = 0, h = c.length; e < h; e++) {
          var f = c[e];
          Oe.setFromBufferAttribute(f);
          this.morphTargetsRelative ? (La.addVectors(hb.min, Oe.min), hb.expandByPoint(La), La.addVectors(hb.max, Oe.max), hb.expandByPoint(La)) : (hb.expandByPoint(Oe.min), hb.expandByPoint(Oe.max));
        }
      }
      hb.getCenter(b);
      var d = 0;
      e = 0;
      for (h = a.count; e < h; e++) {
        La.fromBufferAttribute(a, e), d = Math.max(d, b.distanceToSquared(La));
      }
      if (c) {
        for (e = 0, h = c.length; e < h; e++) {
          f = c[e];
          for (var g = this.morphTargetsRelative, m = 0, n = f.count; m < n; m++) {
            La.fromBufferAttribute(f, m), g && (Pd.fromBufferAttribute(a, m), La.add(Pd)), d = Math.max(d, b.distanceToSquared(La));
          }
        }
      }
      this.boundingSphere.radius = Math.sqrt(d);
      isNaN(this.boundingSphere.radius) && console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
    }
  }, computeFaceNormals:function() {
  }, computeVertexNormals:function() {
    var a = this.index, c = this.attributes;
    if (c.position) {
      var b = c.position.array;
      if (void 0 === c.normal) {
        this.setAttribute("normal", new J(new Float32Array(b.length), 3));
      } else {
        for (var e = c.normal.array, h = 0, f = e.length; h < f; h++) {
          e[h] = 0;
        }
      }
      e = c.normal.array;
      var d = new m, g = new m, p = new m, n = new m, k = new m;
      if (a) {
        var q = a.array;
        h = 0;
        for (f = a.count; h < f; h += 3) {
          a = 3 * q[h + 0];
          var r = 3 * q[h + 1];
          var t = 3 * q[h + 2];
          d.fromArray(b, a);
          g.fromArray(b, r);
          p.fromArray(b, t);
          n.subVectors(p, g);
          k.subVectors(d, g);
          n.cross(k);
          e[a] += n.x;
          e[a + 1] += n.y;
          e[a + 2] += n.z;
          e[r] += n.x;
          e[r + 1] += n.y;
          e[r + 2] += n.z;
          e[t] += n.x;
          e[t + 1] += n.y;
          e[t + 2] += n.z;
        }
      } else {
        for (h = 0, f = b.length; h < f; h += 9) {
          d.fromArray(b, h), g.fromArray(b, h + 3), p.fromArray(b, h + 6), n.subVectors(p, g), k.subVectors(d, g), n.cross(k), e[h] = n.x, e[h + 1] = n.y, e[h + 2] = n.z, e[h + 3] = n.x, e[h + 4] = n.y, e[h + 5] = n.z, e[h + 6] = n.x, e[h + 7] = n.y, e[h + 8] = n.z;
        }
      }
      this.normalizeNormals();
      c.normal.needsUpdate = !0;
    }
  }, merge:function(a, c) {
    if (a && a.isBufferGeometry) {
      void 0 === c && (c = 0, console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));
      var l = this.attributes, b;
      for (b in l) {
        if (void 0 !== a.attributes[b]) {
          var e = l[b].array, h = a.attributes[b], f = h.array, d = h.itemSize * c;
          h = Math.min(f.length, e.length - d);
          for (var g = 0; g < h; g++, d++) {
            e[d] = f[g];
          }
        }
      }
      return this;
    }
    console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.", a);
  }, normalizeNormals:function() {
    for (var a = this.attributes.normal, c = 0, b = a.count; c < b; c++) {
      La.x = a.getX(c), La.y = a.getY(c), La.z = a.getZ(c), La.normalize(), a.setXYZ(c, La.x, La.y, La.z);
    }
  }, toNonIndexed:function() {
    function a(a, c) {
      var l = a.array;
      a = a.itemSize;
      for (var b = new l.constructor(c.length * a), e, h = 0, f = 0, d = c.length; f < d; f++) {
        e = c[f] * a;
        for (var g = 0; g < a; g++) {
          b[h++] = l[e++];
        }
      }
      return new J(b, a);
    }
    if (null === this.index) {
      return console.warn("THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed."), this;
    }
    var c = new N, b = this.index.array, e = this.attributes, h;
    for (h in e) {
      var f = e[h];
      f = a(f, b);
      c.setAttribute(h, f);
    }
    var d = this.morphAttributes;
    for (h in d) {
      var g = [], m = d[h];
      e = 0;
      for (var p = m.length; e < p; e++) {
        f = m[e], f = a(f, b), g.push(f);
      }
      c.morphAttributes[h] = g;
    }
    c.morphTargetsRelative = this.morphTargetsRelative;
    b = this.groups;
    e = 0;
    for (h = b.length; e < h; e++) {
      f = b[e], c.addGroup(f.start, f.count, f.materialIndex);
    }
    return c;
  }, toJSON:function() {
    var a = {metadata:{version:4.5, type:"BufferGeometry", generator:"BufferGeometry.toJSON"}};
    a.uuid = this.uuid;
    a.type = this.type;
    "" !== this.name && (a.name = this.name);
    0 < Object.keys(this.userData).length && (a.userData = this.userData);
    if (void 0 !== this.parameters) {
      var c = this.parameters;
      for (p in c) {
        void 0 !== c[p] && (a[p] = c[p]);
      }
      return a;
    }
    a.data = {attributes:{}};
    c = this.index;
    null !== c && (a.data.index = {type:c.array.constructor.name, array:Array.prototype.slice.call(c.array)});
    var b = this.attributes;
    for (p in b) {
      c = b[p];
      var e = c.toJSON();
      "" !== c.name && (e.name = c.name);
      a.data.attributes[p] = e;
    }
    b = {};
    var h = !1;
    for (p in this.morphAttributes) {
      for (var f = this.morphAttributes[p], d = [], g = 0, m = f.length; g < m; g++) {
        c = f[g], e = c.toJSON(), "" !== c.name && (e.name = c.name), d.push(e);
      }
      0 < d.length && (b[p] = d, h = !0);
    }
    h && (a.data.morphAttributes = b, a.data.morphTargetsRelative = this.morphTargetsRelative);
    var p = this.groups;
    0 < p.length && (a.data.groups = JSON.parse(JSON.stringify(p)));
    p = this.boundingSphere;
    null !== p && (a.data.boundingSphere = {center:p.center.toArray(), radius:p.radius});
    return a;
  }, clone:function() {
    return (new N).copy(this);
  }, copy:function(a) {
    var c;
    this.index = null;
    this.attributes = {};
    this.morphAttributes = {};
    this.groups = [];
    this.boundingSphere = this.boundingBox = null;
    this.name = a.name;
    var l = a.index;
    null !== l && this.setIndex(l.clone());
    l = a.attributes;
    for (f in l) {
      this.setAttribute(f, l[f].clone());
    }
    var b = a.morphAttributes;
    for (f in b) {
      var e = [], h = b[f];
      l = 0;
      for (c = h.length; l < c; l++) {
        e.push(h[l].clone());
      }
      this.morphAttributes[f] = e;
    }
    this.morphTargetsRelative = a.morphTargetsRelative;
    var f = a.groups;
    l = 0;
    for (c = f.length; l < c; l++) {
      b = f[l], this.addGroup(b.start, b.count, b.materialIndex);
    }
    f = a.boundingBox;
    null !== f && (this.boundingBox = f.clone());
    f = a.boundingSphere;
    null !== f && (this.boundingSphere = f.clone());
    this.drawRange.start = a.drawRange.start;
    this.drawRange.count = a.drawRange.count;
    this.userData = a.userData;
    return this;
  }, dispose:function() {
    this.dispatchEvent({type:"dispose"});
  }});
  var Hi = new n, Tc = new v, oh = new p, dc = new m, ec = new m, fc = new m, ng = new m, og = new m, pg = new m, We = new m, Xe = new m, Ye = new m, ad = new k, bd = new k, cd = new k, Ud = new m, Ve = new m;
  V.prototype = Object.assign(Object.create(t.prototype), {constructor:V, isMesh:!0, copy:function(a) {
    t.prototype.copy.call(this, a);
    void 0 !== a.morphTargetInfluences && (this.morphTargetInfluences = a.morphTargetInfluences.slice());
    void 0 !== a.morphTargetDictionary && (this.morphTargetDictionary = Object.assign({}, a.morphTargetDictionary));
    return this;
  }, updateMorphTargets:function() {
    var a = this.geometry;
    if (a.isBufferGeometry) {
      a = a.morphAttributes;
      var c = Object.keys(a);
      if (0 < c.length) {
        var b = a[c[0]];
        if (void 0 !== b) {
          for (this.morphTargetInfluences = [], this.morphTargetDictionary = {}, a = 0, c = b.length; a < c; a++) {
            var e = b[a].name || String(a);
            this.morphTargetInfluences.push(0);
            this.morphTargetDictionary[e] = a;
          }
        }
      }
    } else {
      a = a.morphTargets, void 0 !== a && 0 < a.length && console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
    }
  }, raycast:function(a, c) {
    var l = this.geometry, b = this.material, e = this.matrixWorld;
    if (void 0 !== b && (null === l.boundingSphere && l.computeBoundingSphere(), oh.copy(l.boundingSphere), oh.applyMatrix4(e), !1 !== a.ray.intersectsSphere(oh) && (Hi.getInverse(e), Tc.copy(a.ray).applyMatrix4(Hi), null === l.boundingBox || !1 !== Tc.intersectsBox(l.boundingBox)))) {
      if (l.isBufferGeometry) {
        var h = l.index;
        e = l.attributes.position;
        var f = l.morphAttributes.position, d = l.morphTargetsRelative, g = l.attributes.uv, m = l.attributes.uv2, p = l.groups, n = l.drawRange, q, r;
        if (null !== h) {
          if (Array.isArray(b)) {
            var u = 0;
            for (q = p.length; u < q; u++) {
              var t = p[u];
              var v = b[t.materialIndex];
              var z = Math.max(t.start, n.start);
              for (r = l = Math.min(t.start + t.count, n.start + n.count); z < r; z += 3) {
                l = h.getX(z);
                var w = h.getX(z + 1);
                var y = h.getX(z + 2);
                if (l = ha(this, v, a, Tc, e, f, d, g, m, l, w, y)) {
                  l.faceIndex = Math.floor(z / 3), l.face.materialIndex = t.materialIndex, c.push(l);
                }
              }
            }
          } else {
            for (z = Math.max(0, n.start), l = Math.min(h.count, n.start + n.count), u = z, q = l; u < q; u += 3) {
              if (l = h.getX(u), w = h.getX(u + 1), y = h.getX(u + 2), l = ha(this, b, a, Tc, e, f, d, g, m, l, w, y)) {
                l.faceIndex = Math.floor(u / 3), c.push(l);
              }
            }
          }
        } else {
          if (void 0 !== e) {
            if (Array.isArray(b)) {
              for (u = 0, q = p.length; u < q; u++) {
                for (t = p[u], v = b[t.materialIndex], z = Math.max(t.start, n.start), r = l = Math.min(t.start + t.count, n.start + n.count); z < r; z += 3) {
                  if (l = z, w = z + 1, y = z + 2, l = ha(this, v, a, Tc, e, f, d, g, m, l, w, y)) {
                    l.faceIndex = Math.floor(z / 3), l.face.materialIndex = t.materialIndex, c.push(l);
                  }
                }
              }
            } else {
              for (z = Math.max(0, n.start), l = Math.min(e.count, n.start + n.count), u = z, q = l; u < q; u += 3) {
                if (l = u, w = u + 1, y = u + 2, l = ha(this, b, a, Tc, e, f, d, g, m, l, w, y)) {
                  l.faceIndex = Math.floor(u / 3), c.push(l);
                }
              }
            }
          }
        }
      } else {
        if (l.isGeometry) {
          for (e = Array.isArray(b), f = l.vertices, d = l.faces, l = l.faceVertexUvs[0], 0 < l.length && (h = l), n = 0, u = d.length; n < u; n++) {
            if (q = d[n], l = e ? b[q.materialIndex] : b, void 0 !== l && (g = f[q.a], m = f[q.b], p = f[q.c], l = ea(this, l, a, Tc, g, m, p, Ud))) {
              h && h[n] && (t = h[n], ad.copy(t[0]), bd.copy(t[1]), cd.copy(t[2]), l.uv = C.getUV(Ud, g, m, p, ad, bd, cd, new k)), l.face = q, l.faceIndex = n, c.push(l);
            }
          }
        }
      }
    }
  }, clone:function() {
    return (new this.constructor(this.geometry, this.material)).copy(this);
  }});
  var oj = 0, Ob = new n, ph = new t, Xf = new m;
  W.prototype = Object.assign(Object.create(d.prototype), {constructor:W, isGeometry:!0, applyMatrix4:function(a) {
    for (var c = (new b).getNormalMatrix(a), l = 0, e = this.vertices.length; l < e; l++) {
      this.vertices[l].applyMatrix4(a);
    }
    l = 0;
    for (e = this.faces.length; l < e; l++) {
      a = this.faces[l];
      a.normal.applyMatrix3(c).normalize();
      for (var h = 0, f = a.vertexNormals.length; h < f; h++) {
        a.vertexNormals[h].applyMatrix3(c).normalize();
      }
    }
    null !== this.boundingBox && this.computeBoundingBox();
    null !== this.boundingSphere && this.computeBoundingSphere();
    this.normalsNeedUpdate = this.verticesNeedUpdate = !0;
    return this;
  }, rotateX:function(a) {
    Ob.makeRotationX(a);
    this.applyMatrix4(Ob);
    return this;
  }, rotateY:function(a) {
    Ob.makeRotationY(a);
    this.applyMatrix4(Ob);
    return this;
  }, rotateZ:function(a) {
    Ob.makeRotationZ(a);
    this.applyMatrix4(Ob);
    return this;
  }, translate:function(a, c, b) {
    Ob.makeTranslation(a, c, b);
    this.applyMatrix4(Ob);
    return this;
  }, scale:function(a, c, b) {
    Ob.makeScale(a, c, b);
    this.applyMatrix4(Ob);
    return this;
  }, lookAt:function(a) {
    ph.lookAt(a);
    ph.updateMatrix();
    this.applyMatrix4(ph.matrix);
    return this;
  }, fromBufferGeometry:function(a) {
    function c(a, c, b, e) {
      var h = void 0 === d ? [] : [l.colors[a].clone(), l.colors[c].clone(), l.colors[b].clone()], n = void 0 === f ? [] : [(new m).fromArray(f, 3 * a), (new m).fromArray(f, 3 * c), (new m).fromArray(f, 3 * b)];
      e = new E(a, c, b, n, h, e);
      l.faces.push(e);
      void 0 !== g && l.faceVertexUvs[0].push([(new k).fromArray(g, 2 * a), (new k).fromArray(g, 2 * c), (new k).fromArray(g, 2 * b)]);
      void 0 !== p && l.faceVertexUvs[1].push([(new k).fromArray(p, 2 * a), (new k).fromArray(p, 2 * c), (new k).fromArray(p, 2 * b)]);
    }
    var l = this, b = null !== a.index ? a.index.array : void 0, e = a.attributes;
    if (void 0 === e.position) {
      return console.error("THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion."), this;
    }
    var h = e.position.array, f = void 0 !== e.normal ? e.normal.array : void 0, d = void 0 !== e.color ? e.color.array : void 0, g = void 0 !== e.uv ? e.uv.array : void 0, p = void 0 !== e.uv2 ? e.uv2.array : void 0;
    void 0 !== p && (this.faceVertexUvs[1] = []);
    for (e = 0; e < h.length; e += 3) {
      l.vertices.push((new m).fromArray(h, e)), void 0 !== d && l.colors.push((new A).fromArray(d, e));
    }
    var n = a.groups;
    if (0 < n.length) {
      for (e = 0; e < n.length; e++) {
        h = n[e];
        var q = h.start, r = q;
        for (q += h.count; r < q; r += 3) {
          void 0 !== b ? c(b[r], b[r + 1], b[r + 2], h.materialIndex) : c(r, r + 1, r + 2, h.materialIndex);
        }
      }
    } else {
      if (void 0 !== b) {
        for (e = 0; e < b.length; e += 3) {
          c(b[e], b[e + 1], b[e + 2]);
        }
      } else {
        for (e = 0; e < h.length / 3; e += 3) {
          c(e, e + 1, e + 2);
        }
      }
    }
    this.computeFaceNormals();
    null !== a.boundingBox && (this.boundingBox = a.boundingBox.clone());
    null !== a.boundingSphere && (this.boundingSphere = a.boundingSphere.clone());
    return this;
  }, center:function() {
    this.computeBoundingBox();
    this.boundingBox.getCenter(Xf).negate();
    this.translate(Xf.x, Xf.y, Xf.z);
    return this;
  }, normalize:function() {
    this.computeBoundingSphere();
    var a = this.boundingSphere.center, c = this.boundingSphere.radius;
    c = 0 === c ? 1 : 1 / c;
    var b = new n;
    b.set(c, 0, 0, -c * a.x, 0, c, 0, -c * a.y, 0, 0, c, -c * a.z, 0, 0, 0, 1);
    this.applyMatrix4(b);
    return this;
  }, computeFaceNormals:function() {
    for (var a = new m, c = new m, b = 0, e = this.faces.length; b < e; b++) {
      var h = this.faces[b], f = this.vertices[h.a], d = this.vertices[h.b];
      a.subVectors(this.vertices[h.c], d);
      c.subVectors(f, d);
      a.cross(c);
      a.normalize();
      h.normal.copy(a);
    }
  }, computeVertexNormals:function(a) {
    void 0 === a && (a = !0);
    var c;
    var l = Array(this.vertices.length);
    var b = 0;
    for (c = this.vertices.length; b < c; b++) {
      l[b] = new m;
    }
    if (a) {
      var e = new m, h = new m;
      a = 0;
      for (b = this.faces.length; a < b; a++) {
        c = this.faces[a];
        var f = this.vertices[c.a];
        var d = this.vertices[c.b];
        var g = this.vertices[c.c];
        e.subVectors(g, d);
        h.subVectors(f, d);
        e.cross(h);
        l[c.a].add(e);
        l[c.b].add(e);
        l[c.c].add(e);
      }
    } else {
      for (this.computeFaceNormals(), a = 0, b = this.faces.length; a < b; a++) {
        c = this.faces[a], l[c.a].add(c.normal), l[c.b].add(c.normal), l[c.c].add(c.normal);
      }
    }
    b = 0;
    for (c = this.vertices.length; b < c; b++) {
      l[b].normalize();
    }
    a = 0;
    for (b = this.faces.length; a < b; a++) {
      c = this.faces[a], f = c.vertexNormals, 3 === f.length ? (f[0].copy(l[c.a]), f[1].copy(l[c.b]), f[2].copy(l[c.c])) : (f[0] = l[c.a].clone(), f[1] = l[c.b].clone(), f[2] = l[c.c].clone());
    }
    0 < this.faces.length && (this.normalsNeedUpdate = !0);
  }, computeFlatVertexNormals:function() {
    var a;
    this.computeFaceNormals();
    var c = 0;
    for (a = this.faces.length; c < a; c++) {
      var b = this.faces[c];
      var e = b.vertexNormals;
      3 === e.length ? (e[0].copy(b.normal), e[1].copy(b.normal), e[2].copy(b.normal)) : (e[0] = b.normal.clone(), e[1] = b.normal.clone(), e[2] = b.normal.clone());
    }
    0 < this.faces.length && (this.normalsNeedUpdate = !0);
  }, computeMorphNormals:function() {
    var a, c;
    var b = 0;
    for (c = this.faces.length; b < c; b++) {
      var e = this.faces[b];
      e.__originalFaceNormal ? e.__originalFaceNormal.copy(e.normal) : e.__originalFaceNormal = e.normal.clone();
      e.__originalVertexNormals || (e.__originalVertexNormals = []);
      var h = 0;
      for (a = e.vertexNormals.length; h < a; h++) {
        e.__originalVertexNormals[h] ? e.__originalVertexNormals[h].copy(e.vertexNormals[h]) : e.__originalVertexNormals[h] = e.vertexNormals[h].clone();
      }
    }
    var f = new W;
    f.faces = this.faces;
    h = 0;
    for (a = this.morphTargets.length; h < a; h++) {
      if (!this.morphNormals[h]) {
        this.morphNormals[h] = {};
        this.morphNormals[h].faceNormals = [];
        this.morphNormals[h].vertexNormals = [];
        e = this.morphNormals[h].faceNormals;
        var d = this.morphNormals[h].vertexNormals;
        b = 0;
        for (c = this.faces.length; b < c; b++) {
          var g = new m;
          var p = {a:new m, b:new m, c:new m};
          e.push(g);
          d.push(p);
        }
      }
      d = this.morphNormals[h];
      f.vertices = this.morphTargets[h].vertices;
      f.computeFaceNormals();
      f.computeVertexNormals();
      b = 0;
      for (c = this.faces.length; b < c; b++) {
        e = this.faces[b], g = d.faceNormals[b], p = d.vertexNormals[b], g.copy(e.normal), p.a.copy(e.vertexNormals[0]), p.b.copy(e.vertexNormals[1]), p.c.copy(e.vertexNormals[2]);
      }
    }
    b = 0;
    for (c = this.faces.length; b < c; b++) {
      e = this.faces[b], e.normal = e.__originalFaceNormal, e.vertexNormals = e.__originalVertexNormals;
    }
  }, computeBoundingBox:function() {
    null === this.boundingBox && (this.boundingBox = new y);
    this.boundingBox.setFromPoints(this.vertices);
  }, computeBoundingSphere:function() {
    null === this.boundingSphere && (this.boundingSphere = new p);
    this.boundingSphere.setFromPoints(this.vertices);
  }, merge:function(a, c, e) {
    if (a && a.isGeometry) {
      var l, h = this.vertices.length, f = this.vertices, d = a.vertices, g = this.faces, m = a.faces, p = this.colors, n = a.colors;
      void 0 === e && (e = 0);
      void 0 !== c && (l = (new b).getNormalMatrix(c));
      for (var k = 0, q = d.length; k < q; k++) {
        var r = d[k].clone();
        void 0 !== c && r.applyMatrix4(c);
        f.push(r);
      }
      k = 0;
      for (q = n.length; k < q; k++) {
        p.push(n[k].clone());
      }
      k = 0;
      for (q = m.length; k < q; k++) {
        d = m[k];
        var t = d.vertexNormals;
        n = d.vertexColors;
        p = new E(d.a + h, d.b + h, d.c + h);
        p.normal.copy(d.normal);
        void 0 !== l && p.normal.applyMatrix3(l).normalize();
        c = 0;
        for (f = t.length; c < f; c++) {
          r = t[c].clone(), void 0 !== l && r.applyMatrix3(l).normalize(), p.vertexNormals.push(r);
        }
        p.color.copy(d.color);
        c = 0;
        for (f = n.length; c < f; c++) {
          r = n[c], p.vertexColors.push(r.clone());
        }
        p.materialIndex = d.materialIndex + e;
        g.push(p);
      }
      k = 0;
      for (q = a.faceVertexUvs.length; k < q; k++) {
        for (e = a.faceVertexUvs[k], void 0 === this.faceVertexUvs[k] && (this.faceVertexUvs[k] = []), c = 0, f = e.length; c < f; c++) {
          l = e[c];
          h = [];
          g = 0;
          for (m = l.length; g < m; g++) {
            h.push(l[g].clone());
          }
          this.faceVertexUvs[k].push(h);
        }
      }
    } else {
      console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.", a);
    }
  }, mergeMesh:function(a) {
    a && a.isMesh ? (a.matrixAutoUpdate && a.updateMatrix(), this.merge(a.geometry, a.matrix)) : console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.", a);
  }, mergeVertices:function() {
    var a = {}, c = [], b = [], e = Math.pow(10, 4), h;
    var f = 0;
    for (h = this.vertices.length; f < h; f++) {
      var d = this.vertices[f];
      d = Math.round(d.x * e) + "_" + Math.round(d.y * e) + "_" + Math.round(d.z * e);
      void 0 === a[d] ? (a[d] = f, c.push(this.vertices[f]), b[f] = c.length - 1) : b[f] = b[a[d]];
    }
    a = [];
    f = 0;
    for (h = this.faces.length; f < h; f++) {
      for (e = this.faces[f], e.a = b[e.a], e.b = b[e.b], e.c = b[e.c], e = [e.a, e.b, e.c], d = 0; 3 > d; d++) {
        if (e[d] === e[(d + 1) % 3]) {
          a.push(f);
          break;
        }
      }
    }
    for (f = a.length - 1; 0 <= f; f--) {
      for (e = a[f], this.faces.splice(e, 1), b = 0, h = this.faceVertexUvs.length; b < h; b++) {
        this.faceVertexUvs[b].splice(e, 1);
      }
    }
    f = this.vertices.length - c.length;
    this.vertices = c;
    return f;
  }, setFromPoints:function(a) {
    this.vertices = [];
    for (var c = 0, l = a.length; c < l; c++) {
      var b = a[c];
      this.vertices.push(new m(b.x, b.y, b.z || 0));
    }
    return this;
  }, sortFacesByMaterialIndex:function() {
    for (var a = this.faces, c = a.length, b = 0; b < c; b++) {
      a[b]._id = b;
    }
    a.sort(function(a, c) {
      return a.materialIndex - c.materialIndex;
    });
    var e = this.faceVertexUvs[0], h = this.faceVertexUvs[1], f, d;
    e && e.length === c && (f = []);
    h && h.length === c && (d = []);
    for (b = 0; b < c; b++) {
      var g = a[b]._id;
      f && f.push(e[g]);
      d && d.push(h[g]);
    }
    f && (this.faceVertexUvs[0] = f);
    d && (this.faceVertexUvs[1] = d);
  }, toJSON:function() {
    function a(a, c, l) {
      return l ? a | 1 << c : a & ~(1 << c);
    }
    function c(a) {
      var c = a.x.toString() + a.y.toString() + a.z.toString();
      if (void 0 !== p[c]) {
        return p[c];
      }
      p[c] = m.length / 3;
      m.push(a.x, a.y, a.z);
      return p[c];
    }
    function b(a) {
      var c = a.r.toString() + a.g.toString() + a.b.toString();
      if (void 0 !== k[c]) {
        return k[c];
      }
      k[c] = n.length;
      n.push(a.getHex());
      return k[c];
    }
    function e(a) {
      var c = a.x.toString() + a.y.toString();
      if (void 0 !== r[c]) {
        return r[c];
      }
      r[c] = q.length / 2;
      q.push(a.x, a.y);
      return r[c];
    }
    var h = {metadata:{version:4.5, type:"Geometry", generator:"Geometry.toJSON"}};
    h.uuid = this.uuid;
    h.type = this.type;
    "" !== this.name && (h.name = this.name);
    if (void 0 !== this.parameters) {
      var f = this.parameters, d;
      for (d in f) {
        void 0 !== f[d] && (h[d] = f[d]);
      }
      return h;
    }
    f = [];
    for (d = 0; d < this.vertices.length; d++) {
      var g = this.vertices[d];
      f.push(g.x, g.y, g.z);
    }
    g = [];
    var m = [], p = {}, n = [], k = {}, q = [], r = {};
    for (d = 0; d < this.faces.length; d++) {
      var t = this.faces[d], v = void 0 !== this.faceVertexUvs[0][d], z = 0 < t.normal.length(), w = 0 < t.vertexNormals.length, y = 1 !== t.color.r || 1 !== t.color.g || 1 !== t.color.b, x = 0 < t.vertexColors.length, ba = 0;
      ba = a(ba, 0, 0);
      ba = a(ba, 1, !0);
      ba = a(ba, 2, !1);
      ba = a(ba, 3, v);
      ba = a(ba, 4, z);
      ba = a(ba, 5, w);
      ba = a(ba, 6, y);
      ba = a(ba, 7, x);
      g.push(ba);
      g.push(t.a, t.b, t.c);
      g.push(t.materialIndex);
      v && (v = this.faceVertexUvs[0][d], g.push(e(v[0]), e(v[1]), e(v[2])));
      z && g.push(c(t.normal));
      w && (z = t.vertexNormals, g.push(c(z[0]), c(z[1]), c(z[2])));
      y && g.push(b(t.color));
      x && (t = t.vertexColors, g.push(b(t[0]), b(t[1]), b(t[2])));
    }
    h.data = {};
    h.data.vertices = f;
    h.data.normals = m;
    0 < n.length && (h.data.colors = n);
    0 < q.length && (h.data.uvs = [q]);
    h.data.faces = g;
    return h;
  }, clone:function() {
    return (new W).copy(this);
  }, copy:function(a) {
    var c, l, b;
    this.vertices = [];
    this.colors = [];
    this.faces = [];
    this.faceVertexUvs = [[]];
    this.morphTargets = [];
    this.morphNormals = [];
    this.skinWeights = [];
    this.skinIndices = [];
    this.lineDistances = [];
    this.boundingSphere = this.boundingBox = null;
    this.name = a.name;
    var e = a.vertices;
    var h = 0;
    for (c = e.length; h < c; h++) {
      this.vertices.push(e[h].clone());
    }
    e = a.colors;
    h = 0;
    for (c = e.length; h < c; h++) {
      this.colors.push(e[h].clone());
    }
    e = a.faces;
    h = 0;
    for (c = e.length; h < c; h++) {
      this.faces.push(e[h].clone());
    }
    h = 0;
    for (c = a.faceVertexUvs.length; h < c; h++) {
      var f = a.faceVertexUvs[h];
      void 0 === this.faceVertexUvs[h] && (this.faceVertexUvs[h] = []);
      e = 0;
      for (l = f.length; e < l; e++) {
        var d = f[e], g = [];
        var m = 0;
        for (b = d.length; m < b; m++) {
          g.push(d[m].clone());
        }
        this.faceVertexUvs[h].push(g);
      }
    }
    m = a.morphTargets;
    h = 0;
    for (c = m.length; h < c; h++) {
      b = {};
      b.name = m[h].name;
      if (void 0 !== m[h].vertices) {
        for (b.vertices = [], e = 0, l = m[h].vertices.length; e < l; e++) {
          b.vertices.push(m[h].vertices[e].clone());
        }
      }
      if (void 0 !== m[h].normals) {
        for (b.normals = [], e = 0, l = m[h].normals.length; e < l; e++) {
          b.normals.push(m[h].normals[e].clone());
        }
      }
      this.morphTargets.push(b);
    }
    m = a.morphNormals;
    h = 0;
    for (c = m.length; h < c; h++) {
      b = {};
      if (void 0 !== m[h].vertexNormals) {
        for (b.vertexNormals = [], e = 0, l = m[h].vertexNormals.length; e < l; e++) {
          f = m[h].vertexNormals[e], d = {}, d.a = f.a.clone(), d.b = f.b.clone(), d.c = f.c.clone(), b.vertexNormals.push(d);
        }
      }
      if (void 0 !== m[h].faceNormals) {
        for (b.faceNormals = [], e = 0, l = m[h].faceNormals.length; e < l; e++) {
          b.faceNormals.push(m[h].faceNormals[e].clone());
        }
      }
      this.morphNormals.push(b);
    }
    e = a.skinWeights;
    h = 0;
    for (c = e.length; h < c; h++) {
      this.skinWeights.push(e[h].clone());
    }
    e = a.skinIndices;
    h = 0;
    for (c = e.length; h < c; h++) {
      this.skinIndices.push(e[h].clone());
    }
    e = a.lineDistances;
    h = 0;
    for (c = e.length; h < c; h++) {
      this.lineDistances.push(e[h]);
    }
    h = a.boundingBox;
    null !== h && (this.boundingBox = h.clone());
    h = a.boundingSphere;
    null !== h && (this.boundingSphere = h.clone());
    this.elementsNeedUpdate = a.elementsNeedUpdate;
    this.verticesNeedUpdate = a.verticesNeedUpdate;
    this.uvsNeedUpdate = a.uvsNeedUpdate;
    this.normalsNeedUpdate = a.normalsNeedUpdate;
    this.colorsNeedUpdate = a.colorsNeedUpdate;
    this.lineDistancesNeedUpdate = a.lineDistancesNeedUpdate;
    this.groupsNeedUpdate = a.groupsNeedUpdate;
    return this;
  }, dispose:function() {
    this.dispatchEvent({type:"dispose"});
  }});
  var qh = function(a) {
    function c(c, l, b, e, h, f) {
      a.call(this);
      this.type = "BoxGeometry";
      this.parameters = {width:c, height:l, depth:b, widthSegments:e, heightSegments:h, depthSegments:f};
      this.fromBufferGeometry(new Vd(c, l, b, e, h, f));
      this.mergeVertices();
    }
    a && (c.__proto__ = a);
    c.prototype = Object.create(a && a.prototype);
    return c.prototype.constructor = c;
  }(W), Vd = function(a) {
    function c(c, l, b, e, h, f) {
      function d(a, c, l, b, e, h, f, d, v, u, z) {
        var w = h / v, y = f / u, x = h / 2, ba = f / 2, G = d / 2;
        f = v + 1;
        var C = u + 1, A = h = 0, D, na, B = new m;
        for (na = 0; na < C; na++) {
          var Y = na * y - ba;
          for (D = 0; D < f; D++) {
            B[a] = (D * w - x) * b, B[c] = Y * e, B[l] = G, n.push(B.x, B.y, B.z), B[a] = 0, B[c] = 0, B[l] = 0 < d ? 1 : -1, k.push(B.x, B.y, B.z), q.push(D / v), q.push(1 - na / u), h += 1;
          }
        }
        for (na = 0; na < u; na++) {
          for (D = 0; D < v; D++) {
            a = r + D + f * (na + 1), c = r + (D + 1) + f * (na + 1), l = r + (D + 1) + f * na, p.push(r + D + f * na, a, l), p.push(a, c, l), A += 6;
          }
        }
        g.addGroup(t, A, z);
        t += A;
        r += h;
      }
      a.call(this);
      this.type = "BoxBufferGeometry";
      this.parameters = {width:c, height:l, depth:b, widthSegments:e, heightSegments:h, depthSegments:f};
      var g = this;
      c = c || 1;
      l = l || 1;
      b = b || 1;
      e = Math.floor(e) || 1;
      h = Math.floor(h) || 1;
      f = Math.floor(f) || 1;
      var p = [], n = [], k = [], q = [], r = 0, t = 0;
      d("z", "y", "x", -1, -1, b, l, c, f, h, 0);
      d("z", "y", "x", 1, -1, b, l, -c, f, h, 1);
      d("x", "z", "y", 1, 1, c, b, l, e, f, 2);
      d("x", "z", "y", 1, -1, c, b, -l, e, f, 3);
      d("x", "y", "z", 1, -1, c, l, b, e, h, 4);
      d("x", "y", "z", -1, -1, c, l, -b, e, h, 5);
      this.setIndex(p);
      this.setAttribute("position", new Q(n, 3));
      this.setAttribute("normal", new Q(k, 3));
      this.setAttribute("uv", new Q(q, 2));
    }
    a && (c.__proto__ = a);
    c.prototype = Object.create(a && a.prototype);
    return c.prototype.constructor = c;
  }(N), Uh = {clone:la, merge:X};
  ka.prototype = Object.create(I.prototype);
  ka.prototype.constructor = ka;
  ka.prototype.isShaderMaterial = !0;
  ka.prototype.copy = function(a) {
    I.prototype.copy.call(this, a);
    this.fragmentShader = a.fragmentShader;
    this.vertexShader = a.vertexShader;
    this.uniforms = la(a.uniforms);
    this.defines = Object.assign({}, a.defines);
    this.wireframe = a.wireframe;
    this.wireframeLinewidth = a.wireframeLinewidth;
    this.lights = a.lights;
    this.clipping = a.clipping;
    this.skinning = a.skinning;
    this.morphTargets = a.morphTargets;
    this.morphNormals = a.morphNormals;
    this.extensions = a.extensions;
    return this;
  };
  ka.prototype.toJSON = function(a) {
    var c = I.prototype.toJSON.call(this, a);
    c.uniforms = {};
    for (var l in this.uniforms) {
      var b = this.uniforms[l].value;
      c.uniforms[l] = b && b.isTexture ? {type:"t", value:b.toJSON(a).uuid} : b && b.isColor ? {type:"c", value:b.getHex()} : b && b.isVector2 ? {type:"v2", value:b.toArray()} : b && b.isVector3 ? {type:"v3", value:b.toArray()} : b && b.isVector4 ? {type:"v4", value:b.toArray()} : b && b.isMatrix3 ? {type:"m3", value:b.toArray()} : b && b.isMatrix4 ? {type:"m4", value:b.toArray()} : {value:b};
    }
    0 < Object.keys(this.defines).length && (c.defines = this.defines);
    c.vertexShader = this.vertexShader;
    c.fragmentShader = this.fragmentShader;
    a = {};
    for (var e in this.extensions) {
      !0 === this.extensions[e] && (a[e] = !0);
    }
    0 < Object.keys(a).length && (c.extensions = a);
    return c;
  };
  T.prototype = Object.assign(Object.create(t.prototype), {constructor:T, isCamera:!0, copy:function(a, c) {
    t.prototype.copy.call(this, a, c);
    this.matrixWorldInverse.copy(a.matrixWorldInverse);
    this.projectionMatrix.copy(a.projectionMatrix);
    this.projectionMatrixInverse.copy(a.projectionMatrixInverse);
    return this;
  }, getWorldDirection:function(a) {
    void 0 === a && (console.warn("THREE.Camera: .getWorldDirection() target is now required"), a = new m);
    this.updateMatrixWorld(!0);
    var c = this.matrixWorld.elements;
    return a.set(-c[8], -c[9], -c[10]).normalize();
  }, updateMatrixWorld:function(a) {
    t.prototype.updateMatrixWorld.call(this, a);
    this.matrixWorldInverse.getInverse(this.matrixWorld);
  }, updateWorldMatrix:function(a, c) {
    t.prototype.updateWorldMatrix.call(this, a, c);
    this.matrixWorldInverse.getInverse(this.matrixWorld);
  }, clone:function() {
    return (new this.constructor).copy(this);
  }});
  ia.prototype = Object.assign(Object.create(T.prototype), {constructor:ia, isPerspectiveCamera:!0, copy:function(a, c) {
    T.prototype.copy.call(this, a, c);
    this.fov = a.fov;
    this.zoom = a.zoom;
    this.near = a.near;
    this.far = a.far;
    this.focus = a.focus;
    this.aspect = a.aspect;
    this.view = null === a.view ? null : Object.assign({}, a.view);
    this.filmGauge = a.filmGauge;
    this.filmOffset = a.filmOffset;
    return this;
  }, setFocalLength:function(a) {
    a = .5 * this.getFilmHeight() / a;
    this.fov = 2 * oa.RAD2DEG * Math.atan(a);
    this.updateProjectionMatrix();
  }, getFocalLength:function() {
    var a = Math.tan(.5 * oa.DEG2RAD * this.fov);
    return .5 * this.getFilmHeight() / a;
  }, getEffectiveFOV:function() {
    return 2 * oa.RAD2DEG * Math.atan(Math.tan(.5 * oa.DEG2RAD * this.fov) / this.zoom);
  }, getFilmWidth:function() {
    return this.filmGauge * Math.min(this.aspect, 1);
  }, getFilmHeight:function() {
    return this.filmGauge / Math.max(this.aspect, 1);
  }, setViewOffset:function(a, c, b, e, h, f) {
    this.aspect = a / c;
    null === this.view && (this.view = {enabled:!0, fullWidth:1, fullHeight:1, offsetX:0, offsetY:0, width:1, height:1});
    this.view.enabled = !0;
    this.view.fullWidth = a;
    this.view.fullHeight = c;
    this.view.offsetX = b;
    this.view.offsetY = e;
    this.view.width = h;
    this.view.height = f;
    this.updateProjectionMatrix();
  }, clearViewOffset:function() {
    null !== this.view && (this.view.enabled = !1);
    this.updateProjectionMatrix();
  }, updateProjectionMatrix:function() {
    var a = this.near, c = a * Math.tan(.5 * oa.DEG2RAD * this.fov) / this.zoom, b = 2 * c, e = this.aspect * b, h = -.5 * e, f = this.view;
    if (null !== this.view && this.view.enabled) {
      var d = f.fullWidth, g = f.fullHeight;
      h += f.offsetX * e / d;
      c -= f.offsetY * b / g;
      e *= f.width / d;
      b *= f.height / g;
    }
    f = this.filmOffset;
    0 !== f && (h += a * f / this.getFilmWidth());
    this.projectionMatrix.makePerspective(h, h + e, c, c - b, a, this.far);
    this.projectionMatrixInverse.getInverse(this.projectionMatrix);
  }, toJSON:function(a) {
    a = t.prototype.toJSON.call(this, a);
    a.object.fov = this.fov;
    a.object.zoom = this.zoom;
    a.object.near = this.near;
    a.object.far = this.far;
    a.object.focus = this.focus;
    a.object.aspect = this.aspect;
    null !== this.view && (a.object.view = Object.assign({}, this.view));
    a.object.filmGauge = this.filmGauge;
    a.object.filmOffset = this.filmOffset;
    return a;
  }});
  sa.prototype = Object.create(t.prototype);
  sa.prototype.constructor = sa;
  va.prototype = Object.create(e.prototype);
  va.prototype.constructor = va;
  va.prototype.isWebGLCubeRenderTarget = !0;
  va.prototype.fromEquirectangularTexture = function(a, c) {
    this.texture.type = c.type;
    this.texture.format = c.format;
    this.texture.encoding = c.encoding;
    var l = new z, b = new ka({type:"CubemapFromEquirect", uniforms:la({tEquirect:{value:null}}), vertexShader:"varying vec3 vWorldDirection;\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}", fragmentShader:"uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV;\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n}", 
    side:1, blending:0});
    b.uniforms.tEquirect.value = c;
    c = new V(new Vd(5, 5, 5), b);
    l.add(c);
    b = new sa(1, 10, 1);
    b.renderTarget = this;
    b.renderTarget.texture.name = "CubeCameraTexture";
    b.update(a, l);
    c.geometry.dispose();
    c.material.dispose();
    return this;
  };
  Ja.prototype = Object.create(g.prototype);
  Ja.prototype.constructor = Ja;
  Ja.prototype.isDataTexture = !0;
  var Qd = new p, Yf = new m;
  Object.assign(Ga.prototype, {set:function(a, c, b, e, h, f) {
    var l = this.planes;
    l[0].copy(a);
    l[1].copy(c);
    l[2].copy(b);
    l[3].copy(e);
    l[4].copy(h);
    l[5].copy(f);
    return this;
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(a) {
    for (var c = this.planes, l = 0; 6 > l; l++) {
      c[l].copy(a.planes[l]);
    }
    return this;
  }, setFromProjectionMatrix:function(a) {
    var c = this.planes, l = a.elements;
    a = l[0];
    var b = l[1], e = l[2], h = l[3], f = l[4], d = l[5], g = l[6], m = l[7], p = l[8], n = l[9], k = l[10], q = l[11], r = l[12], t = l[13], v = l[14];
    l = l[15];
    c[0].setComponents(h - a, m - f, q - p, l - r).normalize();
    c[1].setComponents(h + a, m + f, q + p, l + r).normalize();
    c[2].setComponents(h + b, m + d, q + n, l + t).normalize();
    c[3].setComponents(h - b, m - d, q - n, l - t).normalize();
    c[4].setComponents(h - e, m - g, q - k, l - v).normalize();
    c[5].setComponents(h + e, m + g, q + k, l + v).normalize();
    return this;
  }, intersectsObject:function(a) {
    var c = a.geometry;
    null === c.boundingSphere && c.computeBoundingSphere();
    Qd.copy(c.boundingSphere).applyMatrix4(a.matrixWorld);
    return this.intersectsSphere(Qd);
  }, intersectsSprite:function(a) {
    Qd.center.set(0, 0, 0);
    Qd.radius = .7071067811865476;
    Qd.applyMatrix4(a.matrixWorld);
    return this.intersectsSphere(Qd);
  }, intersectsSphere:function(a) {
    var c = this.planes, l = a.center;
    a = -a.radius;
    for (var b = 0; 6 > b; b++) {
      if (c[b].distanceToPoint(l) < a) {
        return !1;
      }
    }
    return !0;
  }, intersectsBox:function(a) {
    for (var c = this.planes, l = 0; 6 > l; l++) {
      var b = c[l];
      Yf.x = 0 < b.normal.x ? a.max.x : a.min.x;
      Yf.y = 0 < b.normal.y ? a.max.y : a.min.y;
      Yf.z = 0 < b.normal.z ? a.max.z : a.min.z;
      if (0 > b.distanceToPoint(Yf)) {
        return !1;
      }
    }
    return !0;
  }, containsPoint:function(a) {
    for (var c = this.planes, l = 0; 6 > l; l++) {
      if (0 > c[l].distanceToPoint(a)) {
        return !1;
      }
    }
    return !0;
  }});
  var aa = {common:{diffuse:{value:new A(15658734)}, opacity:{value:1}, map:{value:null}, uvTransform:{value:new b}, uv2Transform:{value:new b}, alphaMap:{value:null}}, specularmap:{specularMap:{value:null}}, envmap:{envMap:{value:null}, flipEnvMap:{value:-1}, reflectivity:{value:1}, refractionRatio:{value:.98}, maxMipLevel:{value:0}}, aomap:{aoMap:{value:null}, aoMapIntensity:{value:1}}, lightmap:{lightMap:{value:null}, lightMapIntensity:{value:1}}, emissivemap:{emissiveMap:{value:null}}, bumpmap:{bumpMap:{value:null}, 
  bumpScale:{value:1}}, normalmap:{normalMap:{value:null}, normalScale:{value:new k(1, 1)}}, displacementmap:{displacementMap:{value:null}, displacementScale:{value:1}, displacementBias:{value:0}}, roughnessmap:{roughnessMap:{value:null}}, metalnessmap:{metalnessMap:{value:null}}, gradientmap:{gradientMap:{value:null}}, fog:{fogDensity:{value:2.5E-4}, fogNear:{value:1}, fogFar:{value:2E3}, fogColor:{value:new A(16777215)}}, lights:{ambientLightColor:{value:[]}, lightProbe:{value:[]}, directionalLights:{value:[], 
  properties:{direction:{}, color:{}}}, directionalLightShadows:{value:[], properties:{shadowBias:{}, shadowRadius:{}, shadowMapSize:{}}}, directionalShadowMap:{value:[]}, directionalShadowMatrix:{value:[]}, spotLights:{value:[], properties:{color:{}, position:{}, direction:{}, distance:{}, coneCos:{}, penumbraCos:{}, decay:{}}}, spotLightShadows:{value:[], properties:{shadowBias:{}, shadowRadius:{}, shadowMapSize:{}}}, spotShadowMap:{value:[]}, spotShadowMatrix:{value:[]}, pointLights:{value:[], 
  properties:{color:{}, position:{}, decay:{}, distance:{}}}, pointLightShadows:{value:[], properties:{shadowBias:{}, shadowRadius:{}, shadowMapSize:{}, shadowCameraNear:{}, shadowCameraFar:{}}}, pointShadowMap:{value:[]}, pointShadowMatrix:{value:[]}, hemisphereLights:{value:[], properties:{direction:{}, skyColor:{}, groundColor:{}}}, rectAreaLights:{value:[], properties:{color:{}, position:{}, width:{}, height:{}}}}, points:{diffuse:{value:new A(15658734)}, opacity:{value:1}, size:{value:1}, scale:{value:1}, 
  map:{value:null}, alphaMap:{value:null}, uvTransform:{value:new b}}, sprite:{diffuse:{value:new A(15658734)}, opacity:{value:1}, center:{value:new k(.5, .5)}, rotation:{value:0}, map:{value:null}, alphaMap:{value:null}, uvTransform:{value:new b}}};
  wa.prototype = Object.create(W.prototype);
  wa.prototype.constructor = wa;
  ya.prototype = Object.create(N.prototype);
  ya.prototype.constructor = ya;
  var pa = {alphamap_fragment:"#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif", alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif", alphatest_fragment:"#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif", aomap_fragment:"#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif", 
  aomap_pars_fragment:"#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif", begin_vertex:"vec3 transformed = vec3( position );", beginnormal_vertex:"vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif", bsdfs:"vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n#else\n\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t}\n\treturn 1.0;\n#endif\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\n\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\n\treturn Fr * fresnel + F0;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\n\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\treturn specularColor * brdf.x + brdf.y;\n}\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\tvec3 FssEss = F * brdf.x + brdf.y;\n\tfloat Ess = brdf.x + brdf.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie(float roughness, float NoH) {\n\tfloat invAlpha  = 1.0 / roughness;\n\tfloat cos2h = NoH * NoH;\n\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\n}\nfloat V_Neubelt(float NoV, float NoL) {\n\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\n}\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\n\tvec3 N = geometry.normal;\n\tvec3 V = geometry.viewDir;\n\tvec3 H = normalize( V + L );\n\tfloat dotNH = saturate( dot( N, H ) );\n\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\n}\n#endif", 
  bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif", 
  clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif", 
  clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif", clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif", clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif", color_fragment:"#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif", color_pars_fragment:"#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif", color_pars_vertex:"#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif", 
  color_vertex:"#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif", common:"#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n  return m[ 2 ][ 3 ] == - 1.0;\n}", 
  cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_maxMipLevel 8.0\n#define cubeUV_minMipLevel 4.0\n#define cubeUV_maxTileSize 256.0\n#define cubeUV_minTileSize 16.0\nfloat getFace(vec3 direction) {\n    vec3 absDirection = abs(direction);\n    float face = -1.0;\n    if (absDirection.x > absDirection.z) {\n      if (absDirection.x > absDirection.y)\n        face = direction.x > 0.0 ? 0.0 : 3.0;\n      else\n        face = direction.y > 0.0 ? 1.0 : 4.0;\n    } else {\n      if (absDirection.z > absDirection.y)\n        face = direction.z > 0.0 ? 2.0 : 5.0;\n      else\n        face = direction.y > 0.0 ? 1.0 : 4.0;\n    }\n    return face;\n}\nvec2 getUV(vec3 direction, float face) {\n    vec2 uv;\n    if (face == 0.0) {\n      uv = vec2(-direction.z, direction.y) / abs(direction.x);\n    } else if (face == 1.0) {\n      uv = vec2(direction.x, -direction.z) / abs(direction.y);\n    } else if (face == 2.0) {\n      uv = direction.xy / abs(direction.z);\n    } else if (face == 3.0) {\n      uv = vec2(direction.z, direction.y) / abs(direction.x);\n    } else if (face == 4.0) {\n      uv = direction.xz / abs(direction.y);\n    } else {\n      uv = vec2(-direction.x, direction.y) / abs(direction.z);\n    }\n    return 0.5 * (uv + 1.0);\n}\nvec3 bilinearCubeUV(sampler2D envMap, vec3 direction, float mipInt) {\n  float face = getFace(direction);\n  float filterInt = max(cubeUV_minMipLevel - mipInt, 0.0);\n  mipInt = max(mipInt, cubeUV_minMipLevel);\n  float faceSize = exp2(mipInt);\n  float texelSize = 1.0 / (3.0 * cubeUV_maxTileSize);\n  vec2 uv = getUV(direction, face) * (faceSize - 1.0);\n  vec2 f = fract(uv);\n  uv += 0.5 - f;\n  if (face > 2.0) {\n    uv.y += faceSize;\n    face -= 3.0;\n  }\n  uv.x += face * faceSize;\n  if(mipInt < cubeUV_maxMipLevel){\n    uv.y += 2.0 * cubeUV_maxTileSize;\n  }\n  uv.y += filterInt * 2.0 * cubeUV_minTileSize;\n  uv.x += 3.0 * max(0.0, cubeUV_maxTileSize - 2.0 * faceSize);\n  uv *= texelSize;\n  vec3 tl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n  uv.x += texelSize;\n  vec3 tr = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n  uv.y += texelSize;\n  vec3 br = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n  uv.x -= texelSize;\n  vec3 bl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n  vec3 tm = mix(tl, tr, f.x);\n  vec3 bm = mix(bl, br, f.x);\n  return mix(tm, bm, f.y);\n}\n#define r0 1.0\n#define v0 0.339\n#define m0 -2.0\n#define r1 0.8\n#define v1 0.276\n#define m1 -1.0\n#define r4 0.4\n#define v4 0.046\n#define m4 2.0\n#define r5 0.305\n#define v5 0.016\n#define m5 3.0\n#define r6 0.21\n#define v6 0.0038\n#define m6 4.0\nfloat roughnessToMip(float roughness) {\n  float mip = 0.0;\n  if (roughness >= r1) {\n    mip = (r0 - roughness) * (m1 - m0) / (r0 - r1) + m0;\n  } else if (roughness >= r4) {\n    mip = (r1 - roughness) * (m4 - m1) / (r1 - r4) + m1;\n  } else if (roughness >= r5) {\n    mip = (r4 - roughness) * (m5 - m4) / (r4 - r5) + m4;\n  } else if (roughness >= r6) {\n    mip = (r5 - roughness) * (m6 - m5) / (r5 - r6) + m5;\n  } else {\n    mip = -2.0 * log2(1.16 * roughness);  }\n  return mip;\n}\nvec4 textureCubeUV(sampler2D envMap, vec3 sampleDir, float roughness) {\n  float mip = clamp(roughnessToMip(roughness), m0, cubeUV_maxMipLevel);\n  float mipF = fract(mip);\n  float mipInt = floor(mip);\n  vec3 color0 = bilinearCubeUV(envMap, sampleDir, mipInt);\n  if (mipF == 0.0) {\n    return vec4(color0, 1.0);\n  } else {\n    vec3 color1 = bilinearCubeUV(envMap, sampleDir, mipInt + 1.0);\n    return vec4(mix(color0, color1, mipF), 1.0);\n  }\n}\n#endif", 
  defaultnormal_vertex:"vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif", 
  displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif", displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif", emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif", 
  emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif", encodings_fragment:"gl_FragColor = linearToOutputTexel( gl_FragColor );", encodings_pars_fragment:"\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat D = max( maxRange / maxRGB, 1.0 );\n\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract( Le );\n\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n\treturn vec4( max( vRGB, 0.0 ), 1.0 );\n}", 
  envmap_fragment:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\t\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t}  else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\treflectVec = normalize( reflectVec );\n\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\treflectVec = normalize( reflectVec );\n\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifndef ENVMAP_TYPE_CUBE_UV\n\t\tenvColor = envMapTexelToLinear( envColor );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif", 
  envmap_common_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif", envmap_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif", 
  envmap_pars_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif", envmap_physical_pars_fragment:"#if defined( USE_ENVMAP )\n\t#ifdef ENVMAP_MODE_REFRACTION\n\t\tuniform float refractionRatio;\n\t#endif\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t  vec3 reflectVec = reflect( -viewDir, normal );\n\t\t  reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t#else\n\t\t  vec3 reflectVec = refract( -viewDir, normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif", 
  envmap_vertex:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) { \n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif", 
  fog_vertex:"#ifdef USE_FOG\n\tfogDepth = -mvPosition.z;\n#endif", fog_pars_vertex:"#ifdef USE_FOG\n\tvarying float fogDepth;\n#endif", fog_fragment:"#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif", fog_pars_fragment:"#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif", 
  gradientmap_pars_fragment:"#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn texture2D( gradientMap, coord ).rgb;\n\t#else\n\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t#endif\n}", lightmap_fragment:"#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\treflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n#endif", 
  lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif", lights_lambert_vertex:"vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry );\n#ifdef DOUBLE_SIDED\n\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\n\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry );\n#endif\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif", 
  lights_pars_begin:"uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\n\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif", 
  lights_toon_fragment:"ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;", lights_toon_pars_fragment:"varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct ToonMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )\t(0)", 
  lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;", lights_phong_pars_fragment:"varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)", 
  lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;\nmaterial.specularRoughness = min( material.specularRoughness, 1.0 );\n#ifdef REFLECTIVITY\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#endif\n#ifdef CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheen;\n#endif", 
  lights_physical_pars_fragment:"struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n#ifdef CLEARCOAT\n\tfloat clearcoat;\n\tfloat clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tvec3 sheenColor;\n#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = ccDotNL * directLight.color;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tccIrradiance *= PI;\n\t\t#endif\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\n\t\t\tmaterial.specularRoughness,\n\t\t\tdirectLight.direction,\n\t\t\tgeometry,\n\t\t\tmaterial.sheenColor\n\t\t);\n\t#else\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\n\t#endif\n\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t\tfloat ccDotNL = ccDotNV;\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\tfloat clearcoatInv = 1.0 - clearcoatDHR;\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}", 
  lights_fragment_begin:"\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif", 
  lights_fragment_maps:"#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\n\t#ifdef CLEARCOAT\n\t\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\n\t#endif\n#endif", 
  lights_fragment_end:"#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif", logdepthbuf_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif", logdepthbuf_pars_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif", 
  logdepthbuf_pars_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif", logdepthbuf_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif", 
  map_fragment:"#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif", map_pars_fragment:"#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif", map_particle_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif", 
  map_particle_pars_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif", metalnessmap_fragment:"float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif", metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif", 
  morphnormal_vertex:"#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n#endif", morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif", 
  morphtarget_vertex:"#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t#endif\n#endif", 
  normal_fragment_begin:"#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t\tbitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;", 
  normal_fragment_maps:"#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif", 
  normalmap_pars_fragment:"#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\n\t\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n\t\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n\t\tvec3 N = normalize( surf_norm );\n\t\tmat3 tsn = mat3( S, T, N );\n\t\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\treturn normalize( tsn * mapN );\n\t}\n#endif", 
  clearcoat_normal_fragment_begin:"#ifdef CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif", clearcoat_normal_fragment_maps:"#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN );\n\t#endif\n#endif", clearcoat_pars_fragment:"#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif", 
  packing:"vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}", 
  premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif", project_vertex:"vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;", dithering_fragment:"#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif", dithering_pars_fragment:"#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif", 
  roughnessmap_fragment:"float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif", roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif", shadowmap_pars_fragment:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif", 
  shadowmap_pars_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif", 
  shadowmap_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n#endif", 
  shadowmask_pars_fragment:"float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}", 
  skinbase_vertex:"#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif", skinning_pars_vertex:"#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif", 
  skinning_vertex:"#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif", skinnormal_vertex:"#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif", 
  specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif", specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif", tonemapping_fragment:"#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif", tonemapping_pars_fragment:"#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( ( color * ( 2.51 * color + 0.03 ) ) / ( color * ( 2.43 * color + 0.59 ) + 0.14 ) );\n}", 
  uv_pars_fragment:"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif", uv_pars_vertex:"#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif", uv_vertex:"#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif", uv2_pars_fragment:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif", uv2_pars_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\tuniform mat3 uv2Transform;\n#endif", 
  uv2_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif", worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif", background_frag:"uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}", 
  background_vert:"varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}", cube_frag:"#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\tvec3 vReflect = vWorldDirection;\n\t#include <envmap_fragment>\n\tgl_FragColor = envColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}", 
  cube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}", depth_frag:"#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}", 
  depth_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}", 
  distanceRGBA_frag:"#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}", 
  distanceRGBA_vert:"#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}", 
  equirect_frag:"uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV;\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tvec4 texColor = texture2D( tEquirect, sampleUV );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}", 
  equirect_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}", linedashed_frag:"uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}", 
  linedashed_vert:"uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}", meshbasic_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}", 
  meshbasic_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}", 
  meshlambert_frag:"uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}", 
  meshlambert_vert:"#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}", 
  meshmatcap_frag:"#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t\tmatcapColor = matcapTexelToLinear( matcapColor );\n\t#else\n\t\tvec4 matcapColor = vec4( 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}", 
  meshmatcap_vert:"#define MATCAP\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#ifndef FLAT_SHADED\n\t\tvNormal = normalize( transformedNormal );\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}", 
  meshtoon_frag:"#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}", 
  meshtoon_vert:"#define TOON\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}", 
  meshphong_frag:"#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}", 
  meshphong_vert:"#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}", 
  meshphysical_frag:"#define STANDARD\n#ifdef PHYSICAL\n\t#define REFLECTIVITY\n\t#define CLEARCOAT\n\t#define TRANSPARENCY\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef TRANSPARENCY\n\tuniform float transparency;\n#endif\n#ifdef REFLECTIVITY\n\tuniform float reflectivity;\n#endif\n#ifdef CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheen;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#ifdef TRANSPARENCY\n\t\tdiffuseColor.a *= saturate( 1. - transparency + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) );\n\t#endif\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}", 
  meshphysical_vert:"#define STANDARD\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}", 
  normal_frag:"#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}", 
  normal_vert:"#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}", 
  points_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}", 
  points_vert:"uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}", 
  shadow_frag:"uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}", shadow_vert:"#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}", 
  sprite_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}", 
  sprite_vert:"uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}"}, 
  Bb = {basic:{uniforms:X([aa.common, aa.specularmap, aa.envmap, aa.aomap, aa.lightmap, aa.fog]), vertexShader:pa.meshbasic_vert, fragmentShader:pa.meshbasic_frag}, lambert:{uniforms:X([aa.common, aa.specularmap, aa.envmap, aa.aomap, aa.lightmap, aa.emissivemap, aa.fog, aa.lights, {emissive:{value:new A(0)}}]), vertexShader:pa.meshlambert_vert, fragmentShader:pa.meshlambert_frag}, phong:{uniforms:X([aa.common, aa.specularmap, aa.envmap, aa.aomap, aa.lightmap, aa.emissivemap, aa.bumpmap, aa.normalmap, 
  aa.displacementmap, aa.fog, aa.lights, {emissive:{value:new A(0)}, specular:{value:new A(1118481)}, shininess:{value:30}}]), vertexShader:pa.meshphong_vert, fragmentShader:pa.meshphong_frag}, standard:{uniforms:X([aa.common, aa.envmap, aa.aomap, aa.lightmap, aa.emissivemap, aa.bumpmap, aa.normalmap, aa.displacementmap, aa.roughnessmap, aa.metalnessmap, aa.fog, aa.lights, {emissive:{value:new A(0)}, roughness:{value:1}, metalness:{value:0}, envMapIntensity:{value:1}}]), vertexShader:pa.meshphysical_vert, 
  fragmentShader:pa.meshphysical_frag}, toon:{uniforms:X([aa.common, aa.specularmap, aa.aomap, aa.lightmap, aa.emissivemap, aa.bumpmap, aa.normalmap, aa.displacementmap, aa.gradientmap, aa.fog, aa.lights, {emissive:{value:new A(0)}, specular:{value:new A(1118481)}, shininess:{value:30}}]), vertexShader:pa.meshtoon_vert, fragmentShader:pa.meshtoon_frag}, matcap:{uniforms:X([aa.common, aa.bumpmap, aa.normalmap, aa.displacementmap, aa.fog, {matcap:{value:null}}]), vertexShader:pa.meshmatcap_vert, fragmentShader:pa.meshmatcap_frag}, 
  points:{uniforms:X([aa.points, aa.fog]), vertexShader:pa.points_vert, fragmentShader:pa.points_frag}, dashed:{uniforms:X([aa.common, aa.fog, {scale:{value:1}, dashSize:{value:1}, totalSize:{value:2}}]), vertexShader:pa.linedashed_vert, fragmentShader:pa.linedashed_frag}, depth:{uniforms:X([aa.common, aa.displacementmap]), vertexShader:pa.depth_vert, fragmentShader:pa.depth_frag}, normal:{uniforms:X([aa.common, aa.bumpmap, aa.normalmap, aa.displacementmap, {opacity:{value:1}}]), vertexShader:pa.normal_vert, 
  fragmentShader:pa.normal_frag}, sprite:{uniforms:X([aa.sprite, aa.fog]), vertexShader:pa.sprite_vert, fragmentShader:pa.sprite_frag}, background:{uniforms:{uvTransform:{value:new b}, t2D:{value:null}}, vertexShader:pa.background_vert, fragmentShader:pa.background_frag}, cube:{uniforms:X([aa.envmap, {opacity:{value:1}}]), vertexShader:pa.cube_vert, fragmentShader:pa.cube_frag}, equirect:{uniforms:{tEquirect:{value:null}}, vertexShader:pa.equirect_vert, fragmentShader:pa.equirect_frag}, distanceRGBA:{uniforms:X([aa.common, 
  aa.displacementmap, {referencePosition:{value:new m}, nearDistance:{value:1}, farDistance:{value:1E3}}]), vertexShader:pa.distanceRGBA_vert, fragmentShader:pa.distanceRGBA_frag}, shadow:{uniforms:X([aa.lights, aa.fog, {color:{value:new A(0)}, opacity:{value:1}}]), vertexShader:pa.shadow_vert, fragmentShader:pa.shadow_frag}};
  Bb.physical = {uniforms:X([Bb.standard.uniforms, {clearcoat:{value:0}, clearcoatMap:{value:null}, clearcoatRoughness:{value:0}, clearcoatRoughnessMap:{value:null}, clearcoatNormalScale:{value:new k(1, 1)}, clearcoatNormalMap:{value:null}, sheen:{value:new A(0)}, transparency:{value:0}}]), vertexShader:pa.meshphysical_vert, fragmentShader:pa.meshphysical_frag};
  Va.prototype = Object.create(g.prototype);
  Va.prototype.constructor = Va;
  Va.prototype.isCubeTexture = !0;
  Object.defineProperty(Va.prototype, "images", {get:function() {
    return this.image;
  }, set:function(a) {
    this.image = a;
  }});
  Aa.prototype = Object.create(g.prototype);
  Aa.prototype.constructor = Aa;
  Aa.prototype.isDataTexture2DArray = !0;
  jb.prototype = Object.create(g.prototype);
  jb.prototype.constructor = jb;
  jb.prototype.isDataTexture3D = !0;
  var Hh = new g, pj = new Aa, qj = new jb, Ih = new Va, Ch = [], Dh = [], Gh = new Float32Array(16), Fh = new Float32Array(9), Eh = new Float32Array(4);
  Jh.prototype.updateCache = function(a) {
    var c = this.cache;
    a instanceof Float32Array && c.length !== a.length && (this.cache = new Float32Array(a.length));
    Oa(c, a);
  };
  Kh.prototype.setValue = function(a, c, b) {
    for (var l = this.seq, e = 0, h = l.length; e !== h; ++e) {
      var f = l[e];
      f.setValue(a, c[f.id], b);
    }
  };
  var qg = /([\w\d_]+)(\])?(\[|\.)?/g;
  kc.prototype.setValue = function(a, c, b, e) {
    c = this.map[c];
    void 0 !== c && c.setValue(a, b, e);
  };
  kc.prototype.setOptional = function(a, c, b) {
    c = c[b];
    void 0 !== c && this.setValue(a, b, c);
  };
  kc.upload = function(a, c, b, e) {
    for (var l = 0, h = c.length; l !== h; ++l) {
      var f = c[l], d = b[f.id];
      !1 !== d.needsUpdate && f.setValue(a, d.value, e);
    }
  };
  kc.seqWithValue = function(a, c) {
    for (var l = [], b = 0, e = a.length; b !== e; ++b) {
      var h = a[b];
      h.id in c && l.push(h);
    }
    return l;
  };
  var Ej = 0, sg = /^[ \t]*#include +<([\w\d./]+)>/gm, Th = /#pragma unroll_loop[\s]+?for \( int i = (\d+); i < (\d+); i \+\+ \) \{([\s\S]+?)(?=\})\}/g, Sh = /#pragma unroll_loop_start[\s]+?for \( int i = (\d+); i < (\d+); i \+\+ \) \{([\s\S]+?)(?=\})\}[\s]+?#pragma unroll_loop_end/g, Oj = 0;
  lc.prototype = Object.create(I.prototype);
  lc.prototype.constructor = lc;
  lc.prototype.isMeshDepthMaterial = !0;
  lc.prototype.copy = function(a) {
    I.prototype.copy.call(this, a);
    this.depthPacking = a.depthPacking;
    this.skinning = a.skinning;
    this.morphTargets = a.morphTargets;
    this.map = a.map;
    this.alphaMap = a.alphaMap;
    this.displacementMap = a.displacementMap;
    this.displacementScale = a.displacementScale;
    this.displacementBias = a.displacementBias;
    this.wireframe = a.wireframe;
    this.wireframeLinewidth = a.wireframeLinewidth;
    return this;
  };
  mc.prototype = Object.create(I.prototype);
  mc.prototype.constructor = mc;
  mc.prototype.isMeshDistanceMaterial = !0;
  mc.prototype.copy = function(a) {
    I.prototype.copy.call(this, a);
    this.referencePosition.copy(a.referencePosition);
    this.nearDistance = a.nearDistance;
    this.farDistance = a.farDistance;
    this.skinning = a.skinning;
    this.morphTargets = a.morphTargets;
    this.map = a.map;
    this.alphaMap = a.alphaMap;
    this.displacementMap = a.displacementMap;
    this.displacementScale = a.displacementScale;
    this.displacementBias = a.displacementBias;
    return this;
  };
  af.prototype = Object.assign(Object.create(ia.prototype), {constructor:af, isArrayCamera:!0});
  fd.prototype = Object.assign(Object.create(t.prototype), {constructor:fd, isGroup:!0});
  Object.assign(bf.prototype, {constructor:bf, getTargetRaySpace:function() {
    null === this._targetRay && (this._targetRay = new fd, this._targetRay.matrixAutoUpdate = !1, this._targetRay.visible = !1);
    return this._targetRay;
  }, getGripSpace:function() {
    null === this._grip && (this._grip = new fd, this._grip.matrixAutoUpdate = !1, this._grip.visible = !1);
    return this._grip;
  }, dispatchEvent:function(a) {
    null !== this._targetRay && this._targetRay.dispatchEvent(a);
    null !== this._grip && this._grip.dispatchEvent(a);
    return this;
  }, disconnect:function(a) {
    this.dispatchEvent({type:"disconnected", data:a});
    null !== this._targetRay && (this._targetRay.visible = !1);
    null !== this._grip && (this._grip.visible = !1);
    return this;
  }, update:function(a, c, b) {
    var l = null, e = null, h = this._targetRay, f = this._grip;
    a && (null !== h && (l = c.getPose(a.targetRaySpace, b), null !== l && (h.matrix.fromArray(l.transform.matrix), h.matrix.decompose(h.position, h.rotation, h.scale))), null !== f && a.gripSpace && (e = c.getPose(a.gripSpace, b), null !== e && (f.matrix.fromArray(e.transform.matrix), f.matrix.decompose(f.position, f.rotation, f.scale))));
    null !== h && (h.visible = null !== l);
    null !== f && (f.visible = null !== e);
    return this;
  }});
  Object.assign(Zh.prototype, d.prototype);
  Object.assign(cf.prototype, {isFogExp2:!0, clone:function() {
    return new cf(this.color, this.density);
  }, toJSON:function() {
    return {type:"FogExp2", color:this.color.getHex(), density:this.density};
  }});
  Object.assign(df.prototype, {isFog:!0, clone:function() {
    return new df(this.color, this.near, this.far);
  }, toJSON:function() {
    return {type:"Fog", color:this.color.getHex(), near:this.near, far:this.far};
  }});
  Object.defineProperty(Sb.prototype, "needsUpdate", {set:function(a) {
    !0 === a && this.version++;
  }});
  Object.assign(Sb.prototype, {isInterleavedBuffer:!0, onUploadCallback:function() {
  }, setUsage:function(a) {
    this.usage = a;
    return this;
  }, copy:function(a) {
    this.array = new a.array.constructor(a.array);
    this.count = a.count;
    this.stride = a.stride;
    this.usage = a.usage;
    return this;
  }, copyAt:function(a, c, b) {
    a *= this.stride;
    b *= c.stride;
    for (var l = 0, e = this.stride; l < e; l++) {
      this.array[a + l] = c.array[b + l];
    }
    return this;
  }, set:function(a, c) {
    void 0 === c && (c = 0);
    this.array.set(a, c);
    return this;
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, onUpload:function(a) {
    this.onUploadCallback = a;
    return this;
  }});
  var Uc = new m;
  Object.defineProperties(ce.prototype, {count:{get:function() {
    return this.data.count;
  }}, array:{get:function() {
    return this.data.array;
  }}});
  Object.assign(ce.prototype, {isInterleavedBufferAttribute:!0, applyMatrix4:function(a) {
    for (var c = 0, l = this.data.count; c < l; c++) {
      Uc.x = this.getX(c), Uc.y = this.getY(c), Uc.z = this.getZ(c), Uc.applyMatrix4(a), this.setXYZ(c, Uc.x, Uc.y, Uc.z);
    }
    return this;
  }, setX:function(a, c) {
    this.data.array[a * this.data.stride + this.offset] = c;
    return this;
  }, setY:function(a, c) {
    this.data.array[a * this.data.stride + this.offset + 1] = c;
    return this;
  }, setZ:function(a, c) {
    this.data.array[a * this.data.stride + this.offset + 2] = c;
    return this;
  }, setW:function(a, c) {
    this.data.array[a * this.data.stride + this.offset + 3] = c;
    return this;
  }, getX:function(a) {
    return this.data.array[a * this.data.stride + this.offset];
  }, getY:function(a) {
    return this.data.array[a * this.data.stride + this.offset + 1];
  }, getZ:function(a) {
    return this.data.array[a * this.data.stride + this.offset + 2];
  }, getW:function(a) {
    return this.data.array[a * this.data.stride + this.offset + 3];
  }, setXY:function(a, c, b) {
    a = a * this.data.stride + this.offset;
    this.data.array[a + 0] = c;
    this.data.array[a + 1] = b;
    return this;
  }, setXYZ:function(a, c, b, e) {
    a = a * this.data.stride + this.offset;
    this.data.array[a + 0] = c;
    this.data.array[a + 1] = b;
    this.data.array[a + 2] = e;
    return this;
  }, setXYZW:function(a, c, b, e, h) {
    a = a * this.data.stride + this.offset;
    this.data.array[a + 0] = c;
    this.data.array[a + 1] = b;
    this.data.array[a + 2] = e;
    this.data.array[a + 3] = h;
    return this;
  }});
  nc.prototype = Object.create(I.prototype);
  nc.prototype.constructor = nc;
  nc.prototype.isSpriteMaterial = !0;
  nc.prototype.copy = function(a) {
    I.prototype.copy.call(this, a);
    this.color.copy(a.color);
    this.map = a.map;
    this.alphaMap = a.alphaMap;
    this.rotation = a.rotation;
    this.sizeAttenuation = a.sizeAttenuation;
    return this;
  };
  var gd, Pe = new m, Rd = new m, Sd = new m, hd = new k, ee = new k, ai = new n, Zf = new m, Qe = new m, $f = new m, Ii = new k, rh = new k, Ji = new k;
  de.prototype = Object.assign(Object.create(t.prototype), {constructor:de, isSprite:!0, raycast:function(a, c) {
    null === a.camera && console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.');
    Rd.setFromMatrixScale(this.matrixWorld);
    ai.copy(a.camera.matrixWorld);
    this.modelViewMatrix.multiplyMatrices(a.camera.matrixWorldInverse, this.matrixWorld);
    Sd.setFromMatrixPosition(this.modelViewMatrix);
    a.camera.isPerspectiveCamera && !1 === this.material.sizeAttenuation && Rd.multiplyScalar(-Sd.z);
    var l = this.material.rotation;
    if (0 !== l) {
      var b = Math.cos(l);
      var e = Math.sin(l);
    }
    l = this.center;
    ef(Zf.set(-.5, -.5, 0), Sd, l, Rd, e, b);
    ef(Qe.set(.5, -.5, 0), Sd, l, Rd, e, b);
    ef($f.set(.5, .5, 0), Sd, l, Rd, e, b);
    Ii.set(0, 0);
    rh.set(1, 0);
    Ji.set(1, 1);
    var h = a.ray.intersectTriangle(Zf, Qe, $f, !1, Pe);
    if (null === h && (ef(Qe.set(-.5, .5, 0), Sd, l, Rd, e, b), rh.set(0, 1), h = a.ray.intersectTriangle(Zf, $f, Qe, !1, Pe), null === h)) {
      return;
    }
    e = a.ray.origin.distanceTo(Pe);
    e < a.near || e > a.far || c.push({distance:e, point:Pe.clone(), uv:C.getUV(Pe, Zf, Qe, $f, Ii, rh, Ji, new k), face:null, object:this});
  }, clone:function() {
    return (new this.constructor(this.material)).copy(this);
  }, copy:function(a) {
    t.prototype.copy.call(this, a);
    void 0 !== a.center && this.center.copy(a.center);
    return this;
  }});
  var ag = new m, Ki = new m;
  fe.prototype = Object.assign(Object.create(t.prototype), {constructor:fe, isLOD:!0, copy:function(a) {
    t.prototype.copy.call(this, a, !1);
    for (var c = a.levels, l = 0, b = c.length; l < b; l++) {
      var e = c[l];
      this.addLevel(e.object.clone(), e.distance);
    }
    this.autoUpdate = a.autoUpdate;
    return this;
  }, addLevel:function(a, c) {
    void 0 === c && (c = 0);
    c = Math.abs(c);
    for (var l = this.levels, b = 0; b < l.length && !(c < l[b].distance); b++) {
    }
    l.splice(b, 0, {distance:c, object:a});
    this.add(a);
    return this;
  }, getCurrentLevel:function() {
    return this._currentLevel;
  }, getObjectForDistance:function(a) {
    var c = this.levels;
    if (0 < c.length) {
      for (var l = 1, b = c.length; l < b && !(a < c[l].distance); l++) {
      }
      return c[l - 1].object;
    }
    return null;
  }, raycast:function(a, c) {
    if (0 < this.levels.length) {
      ag.setFromMatrixPosition(this.matrixWorld);
      var l = a.ray.origin.distanceTo(ag);
      this.getObjectForDistance(l).raycast(a, c);
    }
  }, update:function(a) {
    var c = this.levels;
    if (1 < c.length) {
      ag.setFromMatrixPosition(a.matrixWorld);
      Ki.setFromMatrixPosition(this.matrixWorld);
      a = ag.distanceTo(Ki) / a.zoom;
      c[0].object.visible = !0;
      for (var l = 1, b = c.length; l < b; l++) {
        if (a >= c[l].distance) {
          c[l - 1].object.visible = !1, c[l].object.visible = !0;
        } else {
          break;
        }
      }
      for (this._currentLevel = l - 1; l < b; l++) {
        c[l].object.visible = !1;
      }
    }
  }, toJSON:function(a) {
    a = t.prototype.toJSON.call(this, a);
    !1 === this.autoUpdate && (a.object.autoUpdate = !1);
    a.object.levels = [];
    for (var c = this.levels, l = 0, b = c.length; l < b; l++) {
      var e = c[l];
      a.object.levels.push({object:e.object.uuid, distance:e.distance});
    }
    return a;
  }});
  ff.prototype = Object.assign(Object.create(V.prototype), {constructor:ff, isSkinnedMesh:!0, bind:function(a, c) {
    this.skeleton = a;
    void 0 === c && (this.updateMatrixWorld(!0), this.skeleton.calculateInverses(), c = this.matrixWorld);
    this.bindMatrix.copy(c);
    this.bindMatrixInverse.getInverse(c);
  }, pose:function() {
    this.skeleton.pose();
  }, normalizeSkinWeights:function() {
    for (var a = new f, c = this.geometry.attributes.skinWeight, b = 0, e = c.count; b < e; b++) {
      a.x = c.getX(b);
      a.y = c.getY(b);
      a.z = c.getZ(b);
      a.w = c.getW(b);
      var h = 1 / a.manhattanLength();
      Infinity !== h ? a.multiplyScalar(h) : a.set(1, 0, 0, 0);
      c.setXYZW(b, a.x, a.y, a.z, a.w);
    }
  }, updateMatrixWorld:function(a) {
    V.prototype.updateMatrixWorld.call(this, a);
    "attached" === this.bindMode ? this.bindMatrixInverse.getInverse(this.matrixWorld) : "detached" === this.bindMode ? this.bindMatrixInverse.getInverse(this.bindMatrix) : console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode);
  }, clone:function() {
    return (new this.constructor(this.geometry, this.material)).copy(this);
  }, boneTransform:function() {
    var a = new m, c = new f, b = new f, e = new m, h = new n;
    return function(l, f) {
      var d = this.skeleton, g = this.geometry;
      c.fromBufferAttribute(g.attributes.skinIndex, l);
      b.fromBufferAttribute(g.attributes.skinWeight, l);
      a.fromBufferAttribute(g.attributes.position, l).applyMatrix4(this.bindMatrix);
      f.set(0, 0, 0);
      for (l = 0; 4 > l; l++) {
        if (g = b.getComponent(l), 0 !== g) {
          var m = c.getComponent(l);
          h.multiplyMatrices(d.bones[m].matrixWorld, d.boneInverses[m]);
          f.addScaledVector(e.copy(a).applyMatrix4(h), g);
        }
      }
      return f.applyMatrix4(this.bindMatrixInverse);
    };
  }()});
  var Li = new n, ik = new n;
  Object.assign(gf.prototype, {calculateInverses:function() {
    this.boneInverses = [];
    for (var a = 0, c = this.bones.length; a < c; a++) {
      var b = new n;
      this.bones[a] && b.getInverse(this.bones[a].matrixWorld);
      this.boneInverses.push(b);
    }
  }, pose:function() {
    var a, c;
    var b = 0;
    for (c = this.bones.length; b < c; b++) {
      (a = this.bones[b]) && a.matrixWorld.getInverse(this.boneInverses[b]);
    }
    b = 0;
    for (c = this.bones.length; b < c; b++) {
      if (a = this.bones[b]) {
        a.parent && a.parent.isBone ? (a.matrix.getInverse(a.parent.matrixWorld), a.matrix.multiply(a.matrixWorld)) : a.matrix.copy(a.matrixWorld), a.matrix.decompose(a.position, a.quaternion, a.scale);
      }
    }
  }, update:function() {
    for (var a = this.bones, c = this.boneInverses, b = this.boneMatrices, e = this.boneTexture, h = 0, f = a.length; h < f; h++) {
      Li.multiplyMatrices(a[h] ? a[h].matrixWorld : ik, c[h]), Li.toArray(b, 16 * h);
    }
    void 0 !== e && (e.needsUpdate = !0);
  }, clone:function() {
    return new gf(this.bones, this.boneInverses);
  }, getBoneByName:function(a) {
    for (var c = 0, l = this.bones.length; c < l; c++) {
      var b = this.bones[c];
      if (b.name === a) {
        return b;
      }
    }
  }, dispose:function() {
    this.boneTexture && (this.boneTexture.dispose(), this.boneTexture = void 0);
  }});
  vg.prototype = Object.assign(Object.create(t.prototype), {constructor:vg, isBone:!0});
  var Mi = new n, Ni = new n, bg = [], Re = new V;
  hf.prototype = Object.assign(Object.create(V.prototype), {constructor:hf, isInstancedMesh:!0, getMatrixAt:function(a, c) {
    c.fromArray(this.instanceMatrix.array, 16 * a);
  }, raycast:function(a, c) {
    var l = this.matrixWorld, b = this.count;
    Re.geometry = this.geometry;
    Re.material = this.material;
    if (void 0 !== Re.material) {
      for (var e = 0; e < b; e++) {
        this.getMatrixAt(e, Mi);
        Ni.multiplyMatrices(l, Mi);
        Re.matrixWorld = Ni;
        Re.raycast(a, bg);
        for (var h = 0, f = bg.length; h < f; h++) {
          var d = bg[h];
          d.instanceId = e;
          d.object = this;
          c.push(d);
        }
        bg.length = 0;
      }
    }
  }, setMatrixAt:function(a, c) {
    c.toArray(this.instanceMatrix.array, 16 * a);
  }, updateMorphTargets:function() {
  }});
  za.prototype = Object.create(I.prototype);
  za.prototype.constructor = za;
  za.prototype.isLineBasicMaterial = !0;
  za.prototype.copy = function(a) {
    I.prototype.copy.call(this, a);
    this.color.copy(a.color);
    this.linewidth = a.linewidth;
    this.linecap = a.linecap;
    this.linejoin = a.linejoin;
    return this;
  };
  var Oi = new m, Pi = new m, Qi = new n, cg = new v, Se = new p;
  eb.prototype = Object.assign(Object.create(t.prototype), {constructor:eb, isLine:!0, computeLineDistances:function() {
    var a = this.geometry;
    if (a.isBufferGeometry) {
      if (null === a.index) {
        for (var c = a.attributes.position, b = [0], e = 1, h = c.count; e < h; e++) {
          Oi.fromBufferAttribute(c, e - 1), Pi.fromBufferAttribute(c, e), b[e] = b[e - 1], b[e] += Oi.distanceTo(Pi);
        }
        a.setAttribute("lineDistance", new Q(b, 1));
      } else {
        console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
      }
    } else {
      if (a.isGeometry) {
        for (c = a.vertices, b = a.lineDistances, b[0] = 0, e = 1, h = c.length; e < h; e++) {
          b[e] = b[e - 1], b[e] += c[e - 1].distanceTo(c[e]);
        }
      }
    }
    return this;
  }, raycast:function(a, c) {
    var l = this.geometry, b = this.matrixWorld, e = a.params.Line.threshold;
    null === l.boundingSphere && l.computeBoundingSphere();
    Se.copy(l.boundingSphere);
    Se.applyMatrix4(b);
    Se.radius += e;
    if (!1 !== a.ray.intersectsSphere(Se)) {
      Qi.getInverse(b);
      cg.copy(a.ray).applyMatrix4(Qi);
      b = e / ((this.scale.x + this.scale.y + this.scale.z) / 3);
      b *= b;
      var h = new m, f = new m;
      e = new m;
      var d = new m, g = this && this.isLineSegments ? 2 : 1;
      if (l.isBufferGeometry) {
        var p = l.index, n = l.attributes.position.array;
        if (null !== p) {
          p = p.array;
          l = 0;
          for (var k = p.length - 1; l < k; l += g) {
            var q = p[l + 1];
            h.fromArray(n, 3 * p[l]);
            f.fromArray(n, 3 * q);
            q = cg.distanceSqToSegment(h, f, d, e);
            q > b || (d.applyMatrix4(this.matrixWorld), q = a.ray.origin.distanceTo(d), q < a.near || q > a.far || c.push({distance:q, point:e.clone().applyMatrix4(this.matrixWorld), index:l, face:null, faceIndex:null, object:this}));
          }
        } else {
          for (l = 0, k = n.length / 3 - 1; l < k; l += g) {
            h.fromArray(n, 3 * l), f.fromArray(n, 3 * l + 3), q = cg.distanceSqToSegment(h, f, d, e), q > b || (d.applyMatrix4(this.matrixWorld), q = a.ray.origin.distanceTo(d), q < a.near || q > a.far || c.push({distance:q, point:e.clone().applyMatrix4(this.matrixWorld), index:l, face:null, faceIndex:null, object:this}));
          }
        }
      } else {
        if (l.isGeometry) {
          for (h = l.vertices, f = h.length, l = 0; l < f - 1; l += g) {
            q = cg.distanceSqToSegment(h[l], h[l + 1], d, e), q > b || (d.applyMatrix4(this.matrixWorld), q = a.ray.origin.distanceTo(d), q < a.near || q > a.far || c.push({distance:q, point:e.clone().applyMatrix4(this.matrixWorld), index:l, face:null, faceIndex:null, object:this}));
          }
        }
      }
    }
  }, clone:function() {
    return (new this.constructor(this.geometry, this.material)).copy(this);
  }});
  var dg = new m, eg = new m;
  Da.prototype = Object.assign(Object.create(eb.prototype), {constructor:Da, isLineSegments:!0, computeLineDistances:function() {
    var a = this.geometry;
    if (a.isBufferGeometry) {
      if (null === a.index) {
        for (var c = a.attributes.position, b = [], e = 0, h = c.count; e < h; e += 2) {
          dg.fromBufferAttribute(c, e), eg.fromBufferAttribute(c, e + 1), b[e] = 0 === e ? 0 : b[e - 1], b[e + 1] = b[e] + dg.distanceTo(eg);
        }
        a.setAttribute("lineDistance", new Q(b, 1));
      } else {
        console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
      }
    } else {
      if (a.isGeometry) {
        for (c = a.vertices, b = a.lineDistances, e = 0, h = c.length; e < h; e += 2) {
          dg.copy(c[e]), eg.copy(c[e + 1]), b[e] = 0 === e ? 0 : b[e - 1], b[e + 1] = b[e] + dg.distanceTo(eg);
        }
      }
    }
    return this;
  }});
  jf.prototype = Object.assign(Object.create(eb.prototype), {constructor:jf, isLineLoop:!0});
  tb.prototype = Object.create(I.prototype);
  tb.prototype.constructor = tb;
  tb.prototype.isPointsMaterial = !0;
  tb.prototype.copy = function(a) {
    I.prototype.copy.call(this, a);
    this.color.copy(a.color);
    this.map = a.map;
    this.alphaMap = a.alphaMap;
    this.size = a.size;
    this.sizeAttenuation = a.sizeAttenuation;
    this.morphTargets = a.morphTargets;
    return this;
  };
  var Ri = new n, xg = new v, Te = new p, fg = new m;
  id.prototype = Object.assign(Object.create(t.prototype), {constructor:id, isPoints:!0, raycast:function(a, c) {
    var l = this.geometry, b = this.matrixWorld, e = a.params.Points.threshold;
    null === l.boundingSphere && l.computeBoundingSphere();
    Te.copy(l.boundingSphere);
    Te.applyMatrix4(b);
    Te.radius += e;
    if (!1 !== a.ray.intersectsSphere(Te)) {
      if (Ri.getInverse(b), xg.copy(a.ray).applyMatrix4(Ri), e /= (this.scale.x + this.scale.y + this.scale.z) / 3, e *= e, l.isBufferGeometry) {
        var h = l.index;
        l = l.attributes.position.array;
        if (null !== h) {
          var f = h.array;
          h = 0;
          for (var d = f.length; h < d; h++) {
            var g = f[h];
            fg.fromArray(l, 3 * g);
            wg(fg, g, e, b, a, c, this);
          }
        } else {
          for (h = 0, f = l.length / 3; h < f; h++) {
            fg.fromArray(l, 3 * h), wg(fg, h, e, b, a, c, this);
          }
        }
      } else {
        for (l = l.vertices, h = 0, f = l.length; h < f; h++) {
          wg(l[h], h, e, b, a, c, this);
        }
      }
    }
  }, updateMorphTargets:function() {
    var a = this.geometry;
    if (a.isBufferGeometry) {
      a = a.morphAttributes;
      var c = Object.keys(a);
      if (0 < c.length) {
        var b = a[c[0]];
        if (void 0 !== b) {
          for (this.morphTargetInfluences = [], this.morphTargetDictionary = {}, a = 0, c = b.length; a < c; a++) {
            var e = b[a].name || String(a);
            this.morphTargetInfluences.push(0);
            this.morphTargetDictionary[e] = a;
          }
        }
      }
    } else {
      a = a.morphTargets, void 0 !== a && 0 < a.length && console.error("THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.");
    }
  }, clone:function() {
    return (new this.constructor(this.geometry, this.material)).copy(this);
  }});
  yg.prototype = Object.assign(Object.create(g.prototype), {constructor:yg, isVideoTexture:!0, update:function() {
    var a = this.image;
    a.readyState >= a.HAVE_CURRENT_DATA && (this.needsUpdate = !0);
  }});
  jd.prototype = Object.create(g.prototype);
  jd.prototype.constructor = jd;
  jd.prototype.isCompressedTexture = !0;
  ge.prototype = Object.create(g.prototype);
  ge.prototype.constructor = ge;
  ge.prototype.isCanvasTexture = !0;
  he.prototype = Object.create(g.prototype);
  he.prototype.constructor = he;
  he.prototype.isDepthTexture = !0;
  kd.prototype = Object.create(N.prototype);
  kd.prototype.constructor = kd;
  ie.prototype = Object.create(W.prototype);
  ie.prototype.constructor = ie;
  ld.prototype = Object.create(N.prototype);
  ld.prototype.constructor = ld;
  je.prototype = Object.create(W.prototype);
  je.prototype.constructor = je;
  ab.prototype = Object.create(N.prototype);
  ab.prototype.constructor = ab;
  ke.prototype = Object.create(W.prototype);
  ke.prototype.constructor = ke;
  md.prototype = Object.create(ab.prototype);
  md.prototype.constructor = md;
  le.prototype = Object.create(W.prototype);
  le.prototype.constructor = le;
  Dc.prototype = Object.create(ab.prototype);
  Dc.prototype.constructor = Dc;
  me.prototype = Object.create(W.prototype);
  me.prototype.constructor = me;
  nd.prototype = Object.create(ab.prototype);
  nd.prototype.constructor = nd;
  ne.prototype = Object.create(W.prototype);
  ne.prototype.constructor = ne;
  od.prototype = Object.create(ab.prototype);
  od.prototype.constructor = od;
  oe.prototype = Object.create(W.prototype);
  oe.prototype.constructor = oe;
  Ec.prototype = Object.create(N.prototype);
  Ec.prototype.constructor = Ec;
  Ec.prototype.toJSON = function() {
    var a = N.prototype.toJSON.call(this);
    a.path = this.parameters.path.toJSON();
    return a;
  };
  pe.prototype = Object.create(W.prototype);
  pe.prototype.constructor = pe;
  pd.prototype = Object.create(N.prototype);
  pd.prototype.constructor = pd;
  qe.prototype = Object.create(W.prototype);
  qe.prototype.constructor = qe;
  qd.prototype = Object.create(N.prototype);
  qd.prototype.constructor = qd;
  var jk = {triangulate:function(a, c, b) {
    b = b || 2;
    var l = c && c.length, e = l ? c[0] * b : a.length, h = bi(a, 0, e, b, !0), f = [];
    if (!h || h.next === h.prev) {
      return f;
    }
    var d;
    if (l) {
      var g = b;
      l = [];
      var m;
      var p = 0;
      for (m = c.length; p < m; p++) {
        var n = c[p] * g;
        var k = p < m - 1 ? c[p + 1] * g : a.length;
        n = bi(a, n, k, g, !1);
        n === n.next && (n.steiner = !0);
        l.push(Vj(n));
      }
      l.sort(Tj);
      for (p = 0; p < l.length; p++) {
        g = l[p];
        c = h;
        if (c = Uj(g, c)) {
          g = ei(c, g), oc(c, c.next), oc(g, g.next);
        }
        h = oc(h, h.next);
      }
    }
    if (a.length > 80 * b) {
      var q = d = a[0];
      var r = l = a[1];
      for (g = b; g < e; g += b) {
        p = a[g], c = a[g + 1], p < q && (q = p), c < r && (r = c), p > d && (d = p), c > l && (l = c);
      }
      d = Math.max(d - q, l - r);
      d = 0 !== d ? 1 / d : 0;
    }
    se(h, f, b, q, r, d);
    return f;
  }}, Tb = {area:function(a) {
    for (var c = a.length, l = 0, b = c - 1, e = 0; e < c; b = e++) {
      l += a[b].x * a[e].y - a[e].x * a[b].y;
    }
    return .5 * l;
  }, isClockWise:function(a) {
    return 0 > Tb.area(a);
  }, triangulateShape:function(a, c) {
    var l = [], b = [], e = [];
    fi(a);
    gi(l, a);
    var h = a.length;
    c.forEach(fi);
    for (a = 0; a < c.length; a++) {
      b.push(h), h += c[a].length, gi(l, c[a]);
    }
    c = jk.triangulate(l, b);
    for (a = 0; a < c.length; a += 3) {
      e.push(c.slice(a, a + 3));
    }
    return e;
  }};
  Fc.prototype = Object.create(W.prototype);
  Fc.prototype.constructor = Fc;
  Fc.prototype.toJSON = function() {
    var a = W.prototype.toJSON.call(this);
    return hi(this.parameters.shapes, this.parameters.options, a);
  };
  Gb.prototype = Object.create(N.prototype);
  Gb.prototype.constructor = Gb;
  Gb.prototype.toJSON = function() {
    var a = N.prototype.toJSON.call(this);
    return hi(this.parameters.shapes, this.parameters.options, a);
  };
  var Wj = {generateTopUV:function(a, c, b, e, h) {
    a = c[3 * e];
    e = c[3 * e + 1];
    var l = c[3 * h];
    h = c[3 * h + 1];
    return [new k(c[3 * b], c[3 * b + 1]), new k(a, e), new k(l, h)];
  }, generateSideWallUV:function(a, c, b, e, h, f) {
    a = c[3 * b];
    var l = c[3 * b + 1];
    b = c[3 * b + 2];
    var d = c[3 * e], g = c[3 * e + 1];
    e = c[3 * e + 2];
    var m = c[3 * h], p = c[3 * h + 1];
    h = c[3 * h + 2];
    var n = c[3 * f], q = c[3 * f + 1];
    c = c[3 * f + 2];
    return .01 > Math.abs(l - g) ? [new k(a, 1 - b), new k(d, 1 - e), new k(m, 1 - h), new k(n, 1 - c)] : [new k(l, 1 - b), new k(g, 1 - e), new k(p, 1 - h), new k(q, 1 - c)];
  }};
  ue.prototype = Object.create(W.prototype);
  ue.prototype.constructor = ue;
  sd.prototype = Object.create(Gb.prototype);
  sd.prototype.constructor = sd;
  ve.prototype = Object.create(W.prototype);
  ve.prototype.constructor = ve;
  Gc.prototype = Object.create(N.prototype);
  Gc.prototype.constructor = Gc;
  we.prototype = Object.create(W.prototype);
  we.prototype.constructor = we;
  td.prototype = Object.create(N.prototype);
  td.prototype.constructor = td;
  xe.prototype = Object.create(W.prototype);
  xe.prototype.constructor = xe;
  ud.prototype = Object.create(N.prototype);
  ud.prototype.constructor = ud;
  Hc.prototype = Object.create(W.prototype);
  Hc.prototype.constructor = Hc;
  Hc.prototype.toJSON = function() {
    var a = W.prototype.toJSON.call(this);
    return ii(this.parameters.shapes, a);
  };
  Ic.prototype = Object.create(N.prototype);
  Ic.prototype.constructor = Ic;
  Ic.prototype.toJSON = function() {
    var a = N.prototype.toJSON.call(this);
    return ii(this.parameters.shapes, a);
  };
  vd.prototype = Object.create(N.prototype);
  vd.prototype.constructor = vd;
  Jc.prototype = Object.create(W.prototype);
  Jc.prototype.constructor = Jc;
  Ub.prototype = Object.create(N.prototype);
  Ub.prototype.constructor = Ub;
  ye.prototype = Object.create(Jc.prototype);
  ye.prototype.constructor = ye;
  ze.prototype = Object.create(Ub.prototype);
  ze.prototype.constructor = ze;
  Ae.prototype = Object.create(W.prototype);
  Ae.prototype.constructor = Ae;
  wd.prototype = Object.create(N.prototype);
  wd.prototype.constructor = wd;
  var $a = Object.freeze({__proto__:null, WireframeGeometry:kd, ParametricGeometry:ie, ParametricBufferGeometry:ld, TetrahedronGeometry:ke, TetrahedronBufferGeometry:md, OctahedronGeometry:le, OctahedronBufferGeometry:Dc, IcosahedronGeometry:me, IcosahedronBufferGeometry:nd, DodecahedronGeometry:ne, DodecahedronBufferGeometry:od, PolyhedronGeometry:je, PolyhedronBufferGeometry:ab, TubeGeometry:oe, TubeBufferGeometry:Ec, TorusKnotGeometry:pe, TorusKnotBufferGeometry:pd, TorusGeometry:qe, TorusBufferGeometry:qd, 
  TextGeometry:ue, TextBufferGeometry:sd, SphereGeometry:ve, SphereBufferGeometry:Gc, RingGeometry:we, RingBufferGeometry:td, PlaneGeometry:wa, PlaneBufferGeometry:ya, LatheGeometry:xe, LatheBufferGeometry:ud, ShapeGeometry:Hc, ShapeBufferGeometry:Ic, ExtrudeGeometry:Fc, ExtrudeBufferGeometry:Gb, EdgesGeometry:vd, ConeGeometry:ye, ConeBufferGeometry:ze, CylinderGeometry:Jc, CylinderBufferGeometry:Ub, CircleGeometry:Ae, CircleBufferGeometry:wd, BoxGeometry:qh, BoxBufferGeometry:Vd});
  Kc.prototype = Object.create(I.prototype);
  Kc.prototype.constructor = Kc;
  Kc.prototype.isShadowMaterial = !0;
  Kc.prototype.copy = function(a) {
    I.prototype.copy.call(this, a);
    this.color.copy(a.color);
    return this;
  };
  Vb.prototype = Object.create(ka.prototype);
  Vb.prototype.constructor = Vb;
  Vb.prototype.isRawShaderMaterial = !0;
  Hb.prototype = Object.create(I.prototype);
  Hb.prototype.constructor = Hb;
  Hb.prototype.isMeshStandardMaterial = !0;
  Hb.prototype.copy = function(a) {
    I.prototype.copy.call(this, a);
    this.defines = {STANDARD:""};
    this.color.copy(a.color);
    this.roughness = a.roughness;
    this.metalness = a.metalness;
    this.map = a.map;
    this.lightMap = a.lightMap;
    this.lightMapIntensity = a.lightMapIntensity;
    this.aoMap = a.aoMap;
    this.aoMapIntensity = a.aoMapIntensity;
    this.emissive.copy(a.emissive);
    this.emissiveMap = a.emissiveMap;
    this.emissiveIntensity = a.emissiveIntensity;
    this.bumpMap = a.bumpMap;
    this.bumpScale = a.bumpScale;
    this.normalMap = a.normalMap;
    this.normalMapType = a.normalMapType;
    this.normalScale.copy(a.normalScale);
    this.displacementMap = a.displacementMap;
    this.displacementScale = a.displacementScale;
    this.displacementBias = a.displacementBias;
    this.roughnessMap = a.roughnessMap;
    this.metalnessMap = a.metalnessMap;
    this.alphaMap = a.alphaMap;
    this.envMap = a.envMap;
    this.envMapIntensity = a.envMapIntensity;
    this.refractionRatio = a.refractionRatio;
    this.wireframe = a.wireframe;
    this.wireframeLinewidth = a.wireframeLinewidth;
    this.wireframeLinecap = a.wireframeLinecap;
    this.wireframeLinejoin = a.wireframeLinejoin;
    this.skinning = a.skinning;
    this.morphTargets = a.morphTargets;
    this.morphNormals = a.morphNormals;
    this.vertexTangents = a.vertexTangents;
    return this;
  };
  Lc.prototype = Object.create(Hb.prototype);
  Lc.prototype.constructor = Lc;
  Lc.prototype.isMeshPhysicalMaterial = !0;
  Lc.prototype.copy = function(a) {
    Hb.prototype.copy.call(this, a);
    this.defines = {STANDARD:"", PHYSICAL:""};
    this.clearcoat = a.clearcoat;
    this.clearcoatMap = a.clearcoatMap;
    this.clearcoatRoughness = a.clearcoatRoughness;
    this.clearcoatRoughnessMap = a.clearcoatRoughnessMap;
    this.clearcoatNormalMap = a.clearcoatNormalMap;
    this.clearcoatNormalScale.copy(a.clearcoatNormalScale);
    this.reflectivity = a.reflectivity;
    this.sheen = a.sheen ? (this.sheen || new A).copy(a.sheen) : null;
    this.transparency = a.transparency;
    return this;
  };
  pc.prototype = Object.create(I.prototype);
  pc.prototype.constructor = pc;
  pc.prototype.isMeshPhongMaterial = !0;
  pc.prototype.copy = function(a) {
    I.prototype.copy.call(this, a);
    this.color.copy(a.color);
    this.specular.copy(a.specular);
    this.shininess = a.shininess;
    this.map = a.map;
    this.lightMap = a.lightMap;
    this.lightMapIntensity = a.lightMapIntensity;
    this.aoMap = a.aoMap;
    this.aoMapIntensity = a.aoMapIntensity;
    this.emissive.copy(a.emissive);
    this.emissiveMap = a.emissiveMap;
    this.emissiveIntensity = a.emissiveIntensity;
    this.bumpMap = a.bumpMap;
    this.bumpScale = a.bumpScale;
    this.normalMap = a.normalMap;
    this.normalMapType = a.normalMapType;
    this.normalScale.copy(a.normalScale);
    this.displacementMap = a.displacementMap;
    this.displacementScale = a.displacementScale;
    this.displacementBias = a.displacementBias;
    this.specularMap = a.specularMap;
    this.alphaMap = a.alphaMap;
    this.envMap = a.envMap;
    this.combine = a.combine;
    this.reflectivity = a.reflectivity;
    this.refractionRatio = a.refractionRatio;
    this.wireframe = a.wireframe;
    this.wireframeLinewidth = a.wireframeLinewidth;
    this.wireframeLinecap = a.wireframeLinecap;
    this.wireframeLinejoin = a.wireframeLinejoin;
    this.skinning = a.skinning;
    this.morphTargets = a.morphTargets;
    this.morphNormals = a.morphNormals;
    return this;
  };
  Mc.prototype = Object.create(I.prototype);
  Mc.prototype.constructor = Mc;
  Mc.prototype.isMeshToonMaterial = !0;
  Mc.prototype.copy = function(a) {
    I.prototype.copy.call(this, a);
    this.color.copy(a.color);
    this.specular.copy(a.specular);
    this.shininess = a.shininess;
    this.map = a.map;
    this.gradientMap = a.gradientMap;
    this.lightMap = a.lightMap;
    this.lightMapIntensity = a.lightMapIntensity;
    this.aoMap = a.aoMap;
    this.aoMapIntensity = a.aoMapIntensity;
    this.emissive.copy(a.emissive);
    this.emissiveMap = a.emissiveMap;
    this.emissiveIntensity = a.emissiveIntensity;
    this.bumpMap = a.bumpMap;
    this.bumpScale = a.bumpScale;
    this.normalMap = a.normalMap;
    this.normalMapType = a.normalMapType;
    this.normalScale.copy(a.normalScale);
    this.displacementMap = a.displacementMap;
    this.displacementScale = a.displacementScale;
    this.displacementBias = a.displacementBias;
    this.specularMap = a.specularMap;
    this.alphaMap = a.alphaMap;
    this.wireframe = a.wireframe;
    this.wireframeLinewidth = a.wireframeLinewidth;
    this.wireframeLinecap = a.wireframeLinecap;
    this.wireframeLinejoin = a.wireframeLinejoin;
    this.skinning = a.skinning;
    this.morphTargets = a.morphTargets;
    this.morphNormals = a.morphNormals;
    return this;
  };
  Nc.prototype = Object.create(I.prototype);
  Nc.prototype.constructor = Nc;
  Nc.prototype.isMeshNormalMaterial = !0;
  Nc.prototype.copy = function(a) {
    I.prototype.copy.call(this, a);
    this.bumpMap = a.bumpMap;
    this.bumpScale = a.bumpScale;
    this.normalMap = a.normalMap;
    this.normalMapType = a.normalMapType;
    this.normalScale.copy(a.normalScale);
    this.displacementMap = a.displacementMap;
    this.displacementScale = a.displacementScale;
    this.displacementBias = a.displacementBias;
    this.wireframe = a.wireframe;
    this.wireframeLinewidth = a.wireframeLinewidth;
    this.skinning = a.skinning;
    this.morphTargets = a.morphTargets;
    this.morphNormals = a.morphNormals;
    return this;
  };
  Oc.prototype = Object.create(I.prototype);
  Oc.prototype.constructor = Oc;
  Oc.prototype.isMeshLambertMaterial = !0;
  Oc.prototype.copy = function(a) {
    I.prototype.copy.call(this, a);
    this.color.copy(a.color);
    this.map = a.map;
    this.lightMap = a.lightMap;
    this.lightMapIntensity = a.lightMapIntensity;
    this.aoMap = a.aoMap;
    this.aoMapIntensity = a.aoMapIntensity;
    this.emissive.copy(a.emissive);
    this.emissiveMap = a.emissiveMap;
    this.emissiveIntensity = a.emissiveIntensity;
    this.specularMap = a.specularMap;
    this.alphaMap = a.alphaMap;
    this.envMap = a.envMap;
    this.combine = a.combine;
    this.reflectivity = a.reflectivity;
    this.refractionRatio = a.refractionRatio;
    this.wireframe = a.wireframe;
    this.wireframeLinewidth = a.wireframeLinewidth;
    this.wireframeLinecap = a.wireframeLinecap;
    this.wireframeLinejoin = a.wireframeLinejoin;
    this.skinning = a.skinning;
    this.morphTargets = a.morphTargets;
    this.morphNormals = a.morphNormals;
    return this;
  };
  Pc.prototype = Object.create(I.prototype);
  Pc.prototype.constructor = Pc;
  Pc.prototype.isMeshMatcapMaterial = !0;
  Pc.prototype.copy = function(a) {
    I.prototype.copy.call(this, a);
    this.defines = {MATCAP:""};
    this.color.copy(a.color);
    this.matcap = a.matcap;
    this.map = a.map;
    this.bumpMap = a.bumpMap;
    this.bumpScale = a.bumpScale;
    this.normalMap = a.normalMap;
    this.normalMapType = a.normalMapType;
    this.normalScale.copy(a.normalScale);
    this.displacementMap = a.displacementMap;
    this.displacementScale = a.displacementScale;
    this.displacementBias = a.displacementBias;
    this.alphaMap = a.alphaMap;
    this.skinning = a.skinning;
    this.morphTargets = a.morphTargets;
    this.morphNormals = a.morphNormals;
    return this;
  };
  Qc.prototype = Object.create(za.prototype);
  Qc.prototype.constructor = Qc;
  Qc.prototype.isLineDashedMaterial = !0;
  Qc.prototype.copy = function(a) {
    za.prototype.copy.call(this, a);
    this.scale = a.scale;
    this.dashSize = a.dashSize;
    this.gapSize = a.gapSize;
    return this;
  };
  var kk = Object.freeze({__proto__:null, ShadowMaterial:Kc, SpriteMaterial:nc, RawShaderMaterial:Vb, ShaderMaterial:ka, PointsMaterial:tb, MeshPhysicalMaterial:Lc, MeshStandardMaterial:Hb, MeshPhongMaterial:pc, MeshToonMaterial:Mc, MeshNormalMaterial:Nc, MeshLambertMaterial:Oc, MeshDepthMaterial:lc, MeshDistanceMaterial:mc, MeshBasicMaterial:K, MeshMatcapMaterial:Pc, LineDashedMaterial:Qc, LineBasicMaterial:za, Material:I}), Ca = {arraySlice:function(a, c, b) {
    return Ca.isTypedArray(a) ? new a.constructor(a.subarray(c, void 0 !== b ? b : a.length)) : a.slice(c, b);
  }, convertArray:function(a, c, b) {
    return !a || !b && a.constructor === c ? a : "number" === typeof c.BYTES_PER_ELEMENT ? new c(a) : Array.prototype.slice.call(a);
  }, isTypedArray:function(a) {
    return ArrayBuffer.isView(a) && !(a instanceof DataView);
  }, getKeyframeOrder:function(a) {
    for (var c = a.length, l = Array(c), b = 0; b !== c; ++b) {
      l[b] = b;
    }
    l.sort(function(c, l) {
      return a[c] - a[l];
    });
    return l;
  }, sortedArray:function(a, c, b) {
    for (var l = a.length, e = new a.constructor(l), h = 0, f = 0; f !== l; ++h) {
      for (var d = b[h] * c, g = 0; g !== c; ++g) {
        e[f++] = a[d + g];
      }
    }
    return e;
  }, flattenJSON:function(a, c, b, e) {
    for (var l = 1, h = a[0]; void 0 !== h && void 0 === h[e];) {
      h = a[l++];
    }
    if (void 0 !== h) {
      var f = h[e];
      if (void 0 !== f) {
        if (Array.isArray(f)) {
          do {
            f = h[e], void 0 !== f && (c.push(h.time), b.push.apply(b, f)), h = a[l++];
          } while (void 0 !== h);
        } else {
          if (void 0 !== f.toArray) {
            do {
              f = h[e], void 0 !== f && (c.push(h.time), f.toArray(b, b.length)), h = a[l++];
            } while (void 0 !== h);
          } else {
            do {
              f = h[e], void 0 !== f && (c.push(h.time), b.push(f)), h = a[l++];
            } while (void 0 !== h);
          }
        }
      }
    }
  }, subclip:function(a, c, b, e, h) {
    h = h || 30;
    a = a.clone();
    a.name = c;
    var l = [];
    for (c = 0; c < a.tracks.length; ++c) {
      for (var f = a.tracks[c], d = f.getValueSize(), g = [], m = [], p = 0; p < f.times.length; ++p) {
        var n = f.times[p] * h;
        if (!(n < b || n >= e)) {
          for (g.push(f.times[p]), n = 0; n < d; ++n) {
            m.push(f.values[p * d + n]);
          }
        }
      }
      0 !== g.length && (f.times = Ca.convertArray(g, f.times.constructor), f.values = Ca.convertArray(m, f.values.constructor), l.push(f));
    }
    a.tracks = l;
    b = Infinity;
    for (c = 0; c < a.tracks.length; ++c) {
      b > a.tracks[c].times[0] && (b = a.tracks[c].times[0]);
    }
    for (c = 0; c < a.tracks.length; ++c) {
      a.tracks[c].shift(-1 * b);
    }
    a.resetDuration();
    return a;
  }, makeClipAdditive:function(a, c, b, e) {
    void 0 === c && (c = 0);
    void 0 === b && (b = a);
    if (void 0 === e || 0 >= e) {
      e = 30;
    }
    var l = a.tracks.length;
    c /= e;
    for (e = 0; e < l; ++e) {
      var h = b.tracks[e], f = h.ValueTypeName;
      if ("bool" !== f && "string" !== f) {
        var d = a.tracks.find(function(a) {
          return a.name === h.name && a.ValueTypeName === f;
        });
        if (void 0 !== d) {
          var g = h.getValueSize(), m = h.times.length - 1;
          c <= h.times[0] ? m = Ca.arraySlice(h.values, 0, h.valueSize) : c >= h.times[m] ? m = Ca.arraySlice(h.values, m * g) : (m = h.createInterpolant(), m.evaluate(c), m = m.resultBuffer);
          "quaternion" === f && (new q(m[0], m[1], m[2], m[3])).normalize().conjugate().toArray(m);
          for (var p = d.times.length, n = 0; n < p; ++n) {
            var k = n * g;
            if ("quaternion" === f) {
              q.multiplyQuaternionsFlat(d.values, k, m, 0, d.values, k);
            } else {
              for (var r = 0; r < g; ++r) {
                d.values[k + r] -= m[r];
              }
            }
          }
        }
      }
    }
    a.blendMode = 2501;
    return a;
  }};
  Object.assign(fb.prototype, {evaluate:function(a) {
    var c = this.parameterPositions, l = this._cachedIndex, b = c[l], e = c[l - 1];
    a: {
      b: {
        c: {
          d: {
            if (!(a < b)) {
              for (var h = l + 2;;) {
                if (void 0 === b) {
                  if (a < e) {
                    break d;
                  }
                  this._cachedIndex = l = c.length;
                  return this.afterEnd_(l - 1, a, e);
                }
                if (l === h) {
                  break;
                }
                e = b;
                b = c[++l];
                if (a < b) {
                  break b;
                }
              }
              b = c.length;
              break c;
            }
          }
          if (a >= e) {
            break a;
          } else {
            h = c[1];
            a < h && (l = 2, e = h);
            for (h = l - 2;;) {
              if (void 0 === e) {
                return this._cachedIndex = 0, this.beforeStart_(0, a, b);
              }
              if (l === h) {
                break;
              }
              b = e;
              e = c[--l - 1];
              if (a >= e) {
                break b;
              }
            }
            b = l;
            l = 0;
          }
        }
        for (; l < b;) {
          e = l + b >>> 1, a < c[e] ? b = e : l = e + 1;
        }
        b = c[l];
        e = c[l - 1];
        if (void 0 === e) {
          return this._cachedIndex = 0, this.beforeStart_(0, a, b);
        }
        if (void 0 === b) {
          return this._cachedIndex = l = c.length, this.afterEnd_(l - 1, e, a);
        }
      }
      this._cachedIndex = l;
      this.intervalChanged_(l, e, b);
    }
    return this.interpolate_(l, e, a, b);
  }, settings:null, DefaultSettings_:{}, getSettings_:function() {
    return this.settings || this.DefaultSettings_;
  }, copySampleValue_:function(a) {
    var c = this.resultBuffer, l = this.sampleValues, b = this.valueSize;
    a *= b;
    for (var e = 0; e !== b; ++e) {
      c[e] = l[a + e];
    }
    return c;
  }, interpolate_:function() {
    throw Error("call to abstract method");
  }, intervalChanged_:function() {
  }});
  Object.assign(fb.prototype, {beforeStart_:fb.prototype.copySampleValue_, afterEnd_:fb.prototype.copySampleValue_});
  nf.prototype = Object.assign(Object.create(fb.prototype), {constructor:nf, DefaultSettings_:{endingStart:2400, endingEnd:2400}, intervalChanged_:function(a, c, b) {
    var l = this.parameterPositions, e = a - 2, h = a + 1, f = l[e], d = l[h];
    if (void 0 === f) {
      switch(this.getSettings_().endingStart) {
        case 2401:
          e = a;
          f = 2 * c - b;
          break;
        case 2402:
          e = l.length - 2;
          f = c + l[e] - l[e + 1];
          break;
        default:
          e = a, f = b;
      }
    }
    if (void 0 === d) {
      switch(this.getSettings_().endingEnd) {
        case 2401:
          h = a;
          d = 2 * b - c;
          break;
        case 2402:
          h = 1;
          d = b + l[1] - l[0];
          break;
        default:
          h = a - 1, d = c;
      }
    }
    a = .5 * (b - c);
    l = this.valueSize;
    this._weightPrev = a / (c - f);
    this._weightNext = a / (d - b);
    this._offsetPrev = e * l;
    this._offsetNext = h * l;
  }, interpolate_:function(a, c, b, e) {
    var l = this.resultBuffer, h = this.sampleValues, f = this.valueSize;
    a *= f;
    var d = a - f, g = this._offsetPrev, m = this._offsetNext, p = this._weightPrev, n = this._weightNext, k = (b - c) / (e - c);
    b = k * k;
    e = b * k;
    c = -p * e + 2 * p * b - p * k;
    p = (1 + p) * e + (-1.5 - 2 * p) * b + (-.5 + p) * k + 1;
    k = (-1 - n) * e + (1.5 + n) * b + .5 * k;
    n = n * e - n * b;
    for (b = 0; b !== f; ++b) {
      l[b] = c * h[g + b] + p * h[d + b] + k * h[a + b] + n * h[m + b];
    }
    return l;
  }});
  Be.prototype = Object.assign(Object.create(fb.prototype), {constructor:Be, interpolate_:function(a, c, b, e) {
    var l = this.resultBuffer, h = this.sampleValues, f = this.valueSize;
    a *= f;
    var d = a - f;
    c = (b - c) / (e - c);
    b = 1 - c;
    for (e = 0; e !== f; ++e) {
      l[e] = h[d + e] * b + h[a + e] * c;
    }
    return l;
  }});
  of.prototype = Object.assign(Object.create(fb.prototype), {constructor:of, interpolate_:function(a) {
    return this.copySampleValue_(a - 1);
  }});
  Object.assign(Ta, {toJSON:function(a) {
    var c = a.constructor;
    if (void 0 !== c.toJSON) {
      c = c.toJSON(a);
    } else {
      c = {name:a.name, times:Ca.convertArray(a.times, Array), values:Ca.convertArray(a.values, Array)};
      var l = a.getInterpolation();
      l !== a.DefaultInterpolation && (c.interpolation = l);
    }
    c.type = a.ValueTypeName;
    return c;
  }});
  Object.assign(Ta.prototype, {constructor:Ta, TimeBufferType:Float32Array, ValueBufferType:Float32Array, DefaultInterpolation:2301, InterpolantFactoryMethodDiscrete:function(a) {
    return new of(this.times, this.values, this.getValueSize(), a);
  }, InterpolantFactoryMethodLinear:function(a) {
    return new Be(this.times, this.values, this.getValueSize(), a);
  }, InterpolantFactoryMethodSmooth:function(a) {
    return new nf(this.times, this.values, this.getValueSize(), a);
  }, setInterpolation:function(a) {
    switch(a) {
      case 2300:
        var c = this.InterpolantFactoryMethodDiscrete;
        break;
      case 2301:
        c = this.InterpolantFactoryMethodLinear;
        break;
      case 2302:
        c = this.InterpolantFactoryMethodSmooth;
    }
    if (void 0 === c) {
      c = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
      if (void 0 === this.createInterpolant) {
        if (a !== this.DefaultInterpolation) {
          this.setInterpolation(this.DefaultInterpolation);
        } else {
          throw Error(c);
        }
      }
      console.warn("THREE.KeyframeTrack:", c);
      return this;
    }
    this.createInterpolant = c;
    return this;
  }, getInterpolation:function() {
    switch(this.createInterpolant) {
      case this.InterpolantFactoryMethodDiscrete:
        return 2300;
      case this.InterpolantFactoryMethodLinear:
        return 2301;
      case this.InterpolantFactoryMethodSmooth:
        return 2302;
    }
  }, getValueSize:function() {
    return this.values.length / this.times.length;
  }, shift:function(a) {
    if (0 !== a) {
      for (var c = this.times, l = 0, b = c.length; l !== b; ++l) {
        c[l] += a;
      }
    }
    return this;
  }, scale:function(a) {
    if (1 !== a) {
      for (var c = this.times, l = 0, b = c.length; l !== b; ++l) {
        c[l] *= a;
      }
    }
    return this;
  }, trim:function(a, c) {
    for (var l = this.times, b = l.length, e = 0, h = b - 1; e !== b && l[e] < a;) {
      ++e;
    }
    for (; -1 !== h && l[h] > c;) {
      --h;
    }
    ++h;
    if (0 !== e || h !== b) {
      e >= h && (h = Math.max(h, 1), e = h - 1), a = this.getValueSize(), this.times = Ca.arraySlice(l, e, h), this.values = Ca.arraySlice(this.values, e * a, h * a);
    }
    return this;
  }, validate:function() {
    var a = !0, c = this.getValueSize();
    0 !== c - Math.floor(c) && (console.error("THREE.KeyframeTrack: Invalid value size in track.", this), a = !1);
    var b = this.times;
    c = this.values;
    var e = b.length;
    0 === e && (console.error("THREE.KeyframeTrack: Track is empty.", this), a = !1);
    for (var h = null, f = 0; f !== e; f++) {
      var d = b[f];
      if ("number" === typeof d && isNaN(d)) {
        console.error("THREE.KeyframeTrack: Time is not a valid number.", this, f, d);
        a = !1;
        break;
      }
      if (null !== h && h > d) {
        console.error("THREE.KeyframeTrack: Out of order keys.", this, f, d, h);
        a = !1;
        break;
      }
      h = d;
    }
    if (void 0 !== c && Ca.isTypedArray(c)) {
      for (f = 0, b = c.length; f !== b; ++f) {
        if (e = c[f], isNaN(e)) {
          console.error("THREE.KeyframeTrack: Value is not a valid number.", this, f, e);
          a = !1;
          break;
        }
      }
    }
    return a;
  }, optimize:function() {
    for (var a = Ca.arraySlice(this.times), c = Ca.arraySlice(this.values), b = this.getValueSize(), e = 2302 === this.getInterpolation(), h = 1, f = a.length - 1, d = 1; d < f; ++d) {
      var g = !1, m = a[d];
      if (m !== a[d + 1] && (1 !== d || m !== m[0])) {
        if (e) {
          g = !0;
        } else {
          var p = d * b, n = p - b, k = p + b;
          for (m = 0; m !== b; ++m) {
            var q = c[p + m];
            if (q !== c[n + m] || q !== c[k + m]) {
              g = !0;
              break;
            }
          }
        }
      }
      if (g) {
        if (d !== h) {
          for (a[h] = a[d], g = d * b, p = h * b, m = 0; m !== b; ++m) {
            c[p + m] = c[g + m];
          }
        }
        ++h;
      }
    }
    if (0 < f) {
      a[h] = a[f];
      g = f * b;
      p = h * b;
      for (m = 0; m !== b; ++m) {
        c[p + m] = c[g + m];
      }
      ++h;
    }
    h !== a.length ? (this.times = Ca.arraySlice(a, 0, h), this.values = Ca.arraySlice(c, 0, h * b)) : (this.times = a, this.values = c);
    return this;
  }, clone:function() {
    var a = Ca.arraySlice(this.times, 0), c = Ca.arraySlice(this.values, 0);
    a = new this.constructor(this.name, a, c);
    a.createInterpolant = this.createInterpolant;
    return a;
  }});
  pf.prototype = Object.assign(Object.create(Ta.prototype), {constructor:pf, ValueTypeName:"bool", ValueBufferType:Array, DefaultInterpolation:2300, InterpolantFactoryMethodLinear:void 0, InterpolantFactoryMethodSmooth:void 0});
  qf.prototype = Object.assign(Object.create(Ta.prototype), {constructor:qf, ValueTypeName:"color"});
  xd.prototype = Object.assign(Object.create(Ta.prototype), {constructor:xd, ValueTypeName:"number"});
  rf.prototype = Object.assign(Object.create(fb.prototype), {constructor:rf, interpolate_:function(a, c, b, e) {
    var l = this.resultBuffer, h = this.sampleValues, f = this.valueSize;
    a *= f;
    c = (b - c) / (e - c);
    for (b = a + f; a !== b; a += 4) {
      q.slerpFlat(l, 0, h, a - f, h, a, c);
    }
    return l;
  }});
  Ce.prototype = Object.assign(Object.create(Ta.prototype), {constructor:Ce, ValueTypeName:"quaternion", DefaultInterpolation:2301, InterpolantFactoryMethodLinear:function(a) {
    return new rf(this.times, this.values, this.getValueSize(), a);
  }, InterpolantFactoryMethodSmooth:void 0});
  sf.prototype = Object.assign(Object.create(Ta.prototype), {constructor:sf, ValueTypeName:"string", ValueBufferType:Array, DefaultInterpolation:2300, InterpolantFactoryMethodLinear:void 0, InterpolantFactoryMethodSmooth:void 0});
  yd.prototype = Object.assign(Object.create(Ta.prototype), {constructor:yd, ValueTypeName:"vector"});
  Object.assign(lb, {parse:function(a) {
    for (var c = [], l = a.tracks, b = 1 / (a.fps || 1), e = 0, h = l.length; e !== h; ++e) {
      c.push(Yj(l[e]).scale(b));
    }
    return new lb(a.name, a.duration, c, a.blendMode);
  }, toJSON:function(a) {
    var c = [], l = a.tracks;
    a = {name:a.name, duration:a.duration, tracks:c, uuid:a.uuid, blendMode:a.blendMode};
    for (var b = 0, e = l.length; b !== e; ++b) {
      c.push(Ta.toJSON(l[b]));
    }
    return a;
  }, CreateFromMorphTargetSequence:function(a, c, b, e) {
    for (var l = c.length, h = [], f = 0; f < l; f++) {
      var d = [], g = [];
      d.push((f + l - 1) % l, f, (f + 1) % l);
      g.push(0, 1, 0);
      var m = Ca.getKeyframeOrder(d);
      d = Ca.sortedArray(d, 1, m);
      g = Ca.sortedArray(g, 1, m);
      e || 0 !== d[0] || (d.push(l), g.push(g[0]));
      h.push((new xd(".morphTargetInfluences[" + c[f].name + "]", d, g)).scale(1 / b));
    }
    return new lb(a, -1, h);
  }, findByName:function(a, c) {
    var l = a;
    Array.isArray(a) || (l = a.geometry && a.geometry.animations || a.animations);
    for (a = 0; a < l.length; a++) {
      if (l[a].name === c) {
        return l[a];
      }
    }
    return null;
  }, CreateClipsFromMorphTargetSequences:function(a, c, b) {
    for (var l = {}, e = /^([\w-]*?)([\d]+)$/, h = 0, f = a.length; h < f; h++) {
      var d = a[h], g = d.name.match(e);
      if (g && 1 < g.length) {
        var m = g[1];
        (g = l[m]) || (l[m] = g = []);
        g.push(d);
      }
    }
    a = [];
    for (m in l) {
      a.push(lb.CreateFromMorphTargetSequence(m, l[m], c, b));
    }
    return a;
  }, parseAnimation:function(a, c) {
    if (!a) {
      return console.error("THREE.AnimationClip: No animation in JSONLoader data."), null;
    }
    var l = function(a, c, l, b, e) {
      if (0 !== l.length) {
        var h = [], f = [];
        Ca.flattenJSON(l, h, f, b);
        0 !== h.length && e.push(new a(c, h, f));
      }
    }, b = [], e = a.name || "default", h = a.length || -1, f = a.fps || 30, d = a.blendMode;
    a = a.hierarchy || [];
    for (var g = 0; g < a.length; g++) {
      var m = a[g].keys;
      if (m && 0 !== m.length) {
        if (m[0].morphTargets) {
          h = {};
          for (var p = 0; p < m.length; p++) {
            if (m[p].morphTargets) {
              for (var n = 0; n < m[p].morphTargets.length; n++) {
                h[m[p].morphTargets[n]] = -1;
              }
            }
          }
          for (var k in h) {
            var q = [], r = [];
            for (n = 0; n !== m[p].morphTargets.length; ++n) {
              var t = m[p];
              q.push(t.time);
              r.push(t.morphTarget === k ? 1 : 0);
            }
            b.push(new xd(".morphTargetInfluence[" + k + "]", q, r));
          }
          h = h.length * (f || 1);
        } else {
          p = ".bones[" + c[g].name + "]", l(yd, p + ".position", m, "pos", b), l(Ce, p + ".quaternion", m, "rot", b), l(yd, p + ".scale", m, "scl", b);
        }
      }
    }
    return 0 === b.length ? null : new lb(e, h, b, d);
  }});
  Object.assign(lb.prototype, {resetDuration:function() {
    for (var a = 0, c = 0, b = this.tracks.length; c !== b; ++c) {
      var e = this.tracks[c];
      a = Math.max(a, e.times[e.times.length - 1]);
    }
    this.duration = a;
    return this;
  }, trim:function() {
    for (var a = 0; a < this.tracks.length; a++) {
      this.tracks[a].trim(0, this.duration);
    }
    return this;
  }, validate:function() {
    for (var a = !0, c = 0; c < this.tracks.length; c++) {
      a = a && this.tracks[c].validate();
    }
    return a;
  }, optimize:function() {
    for (var a = 0; a < this.tracks.length; a++) {
      this.tracks[a].optimize();
    }
    return this;
  }, clone:function() {
    for (var a = [], c = 0; c < this.tracks.length; c++) {
      a.push(this.tracks[c].clone());
    }
    return new lb(this.name, this.duration, a, this.blendMode);
  }});
  var Vc = {enabled:!1, files:{}, add:function(a, c) {
    !1 !== this.enabled && (this.files[a] = c);
  }, get:function(a) {
    if (!1 !== this.enabled) {
      return this.files[a];
    }
  }, remove:function(a) {
    delete this.files[a];
  }, clear:function() {
    this.files = {};
  }}, ji = new Bg;
  Object.assign(ra.prototype, {load:function() {
  }, loadAsync:function(a, c) {
    var l = this;
    return new Promise(function(b, e) {
      l.load(a, b, c, e);
    });
  }, parse:function() {
  }, setCrossOrigin:function(a) {
    this.crossOrigin = a;
    return this;
  }, setPath:function(a) {
    this.path = a;
    return this;
  }, setResourcePath:function(a) {
    this.resourcePath = a;
    return this;
  }});
  var Ab = {};
  mb.prototype = Object.assign(Object.create(ra.prototype), {constructor:mb, load:function(a, c, b, e) {
    void 0 === a && (a = "");
    void 0 !== this.path && (a = this.path + a);
    a = this.manager.resolveURL(a);
    var l = this, h = Vc.get(a);
    if (void 0 !== h) {
      return l.manager.itemStart(a), setTimeout(function() {
        c && c(h);
        l.manager.itemEnd(a);
      }, 0), h;
    }
    if (void 0 !== Ab[a]) {
      Ab[a].push({onLoad:c, onProgress:b, onError:e});
    } else {
      var f = a.match(/^data:(.*?)(;base64)?,(.*)$/);
      if (f) {
        b = f[1];
        var d = !!f[2];
        f = f[3];
        f = decodeURIComponent(f);
        d && (f = atob(f));
        try {
          var g = (this.responseType || "").toLowerCase();
          switch(g) {
            case "arraybuffer":
            case "blob":
              var m = new Uint8Array(f.length);
              for (d = 0; d < f.length; d++) {
                m[d] = f.charCodeAt(d);
              }
              var p = "blob" === g ? new Blob([m.buffer], {type:b}) : m.buffer;
              break;
            case "document":
              p = (new DOMParser).parseFromString(f, b);
              break;
            case "json":
              p = JSON.parse(f);
              break;
            default:
              p = f;
          }
          setTimeout(function() {
            c && c(p);
            l.manager.itemEnd(a);
          }, 0);
        } catch (nj) {
          setTimeout(function() {
            e && e(nj);
            l.manager.itemError(a);
            l.manager.itemEnd(a);
          }, 0);
        }
      } else {
        Ab[a] = [];
        Ab[a].push({onLoad:c, onProgress:b, onError:e});
        var n = new XMLHttpRequest;
        n.open("GET", a, !0);
        n.addEventListener("load", function(c) {
          var b = this.response, e = Ab[a];
          delete Ab[a];
          if (200 === this.status || 0 === this.status) {
            0 === this.status && console.warn("THREE.FileLoader: HTTP Status 0 received.");
            Vc.add(a, b);
            for (var h = 0, f = e.length; h < f; h++) {
              var d = e[h];
              if (d.onLoad) {
                d.onLoad(b);
              }
            }
          } else {
            h = 0;
            for (f = e.length; h < f; h++) {
              if (d = e[h], d.onError) {
                d.onError(c);
              }
            }
            l.manager.itemError(a);
          }
          l.manager.itemEnd(a);
        }, !1);
        n.addEventListener("progress", function(c) {
          for (var l = Ab[a], b = 0, e = l.length; b < e; b++) {
            var h = l[b];
            if (h.onProgress) {
              h.onProgress(c);
            }
          }
        }, !1);
        n.addEventListener("error", function(c) {
          var b = Ab[a];
          delete Ab[a];
          for (var e = 0, h = b.length; e < h; e++) {
            var f = b[e];
            if (f.onError) {
              f.onError(c);
            }
          }
          l.manager.itemError(a);
          l.manager.itemEnd(a);
        }, !1);
        n.addEventListener("abort", function(c) {
          var b = Ab[a];
          delete Ab[a];
          for (var e = 0, h = b.length; e < h; e++) {
            var f = b[e];
            if (f.onError) {
              f.onError(c);
            }
          }
          l.manager.itemError(a);
          l.manager.itemEnd(a);
        }, !1);
        void 0 !== this.responseType && (n.responseType = this.responseType);
        void 0 !== this.withCredentials && (n.withCredentials = this.withCredentials);
        n.overrideMimeType && n.overrideMimeType(void 0 !== this.mimeType ? this.mimeType : "text/plain");
        for (d in this.requestHeader) {
          n.setRequestHeader(d, this.requestHeader[d]);
        }
        n.send(null);
      }
      l.manager.itemStart(a);
      return n;
    }
  }, setResponseType:function(a) {
    this.responseType = a;
    return this;
  }, setWithCredentials:function(a) {
    this.withCredentials = a;
    return this;
  }, setMimeType:function(a) {
    this.mimeType = a;
    return this;
  }, setRequestHeader:function(a) {
    this.requestHeader = a;
    return this;
  }});
  Cg.prototype = Object.assign(Object.create(ra.prototype), {constructor:Cg, load:function(a, c, b, e) {
    var l = this, h = new mb(l.manager);
    h.setPath(l.path);
    h.load(a, function(a) {
      c(l.parse(JSON.parse(a)));
    }, b, e);
  }, parse:function(a) {
    for (var c = [], l = 0; l < a.length; l++) {
      var b = lb.parse(a[l]);
      c.push(b);
    }
    return c;
  }});
  Dg.prototype = Object.assign(Object.create(ra.prototype), {constructor:Dg, load:function(a, c, b, e) {
    function l(l) {
      g.load(a[l], function(a) {
        a = h.parse(a, !0);
        f[l] = {width:a.width, height:a.height, format:a.format, mipmaps:a.mipmaps};
        m += 1;
        6 === m && (1 === a.mipmapCount && (d.minFilter = 1006), d.format = a.format, d.needsUpdate = !0, c && c(d));
      }, b, e);
    }
    var h = this, f = [], d = new jd;
    d.image = f;
    var g = new mb(this.manager);
    g.setPath(this.path);
    g.setResponseType("arraybuffer");
    if (Array.isArray(a)) {
      for (var m = 0, p = 0, n = a.length; p < n; ++p) {
        l(p);
      }
    } else {
      g.load(a, function(a) {
        a = h.parse(a, !0);
        if (a.isCubemap) {
          for (var l = a.mipmaps.length / a.mipmapCount, b = 0; b < l; b++) {
            f[b] = {mipmaps:[]};
            for (var e = 0; e < a.mipmapCount; e++) {
              f[b].mipmaps.push(a.mipmaps[b * a.mipmapCount + e]), f[b].format = a.format, f[b].width = a.width, f[b].height = a.height;
            }
          }
        } else {
          d.image.width = a.width, d.image.height = a.height, d.mipmaps = a.mipmaps;
        }
        1 === a.mipmapCount && (d.minFilter = 1006);
        d.format = a.format;
        d.needsUpdate = !0;
        c && c(d);
      }, b, e);
    }
    return d;
  }});
  tf.prototype = Object.assign(Object.create(ra.prototype), {constructor:tf, load:function(a, c, b, e) {
    var l = this, h = new Ja, f = new mb(this.manager);
    f.setResponseType("arraybuffer");
    f.setPath(this.path);
    f.load(a, function(a) {
      if (a = l.parse(a)) {
        void 0 !== a.image ? h.image = a.image : void 0 !== a.data && (h.image.width = a.width, h.image.height = a.height, h.image.data = a.data), h.wrapS = void 0 !== a.wrapS ? a.wrapS : 1001, h.wrapT = void 0 !== a.wrapT ? a.wrapT : 1001, h.magFilter = void 0 !== a.magFilter ? a.magFilter : 1006, h.minFilter = void 0 !== a.minFilter ? a.minFilter : 1006, h.anisotropy = void 0 !== a.anisotropy ? a.anisotropy : 1, void 0 !== a.format && (h.format = a.format), void 0 !== a.type && (h.type = a.type), 
        void 0 !== a.mipmaps && (h.mipmaps = a.mipmaps, h.minFilter = 1008), 1 === a.mipmapCount && (h.minFilter = 1006), h.needsUpdate = !0, c && c(h, a);
      }
    }, b, e);
    return h;
  }});
  zd.prototype = Object.assign(Object.create(ra.prototype), {constructor:zd, load:function(a, c, b, e) {
    function l() {
      g.removeEventListener("load", l, !1);
      g.removeEventListener("error", h, !1);
      Vc.add(a, this);
      c && c(this);
      f.manager.itemEnd(a);
    }
    function h(c) {
      g.removeEventListener("load", l, !1);
      g.removeEventListener("error", h, !1);
      e && e(c);
      f.manager.itemError(a);
      f.manager.itemEnd(a);
    }
    void 0 !== this.path && (a = this.path + a);
    a = this.manager.resolveURL(a);
    var f = this, d = Vc.get(a);
    if (void 0 !== d) {
      return f.manager.itemStart(a), setTimeout(function() {
        c && c(d);
        f.manager.itemEnd(a);
      }, 0), d;
    }
    var g = document.createElementNS("http://www.w3.org/1999/xhtml", "img");
    g.addEventListener("load", l, !1);
    g.addEventListener("error", h, !1);
    "data:" !== a.substr(0, 5) && void 0 !== this.crossOrigin && (g.crossOrigin = this.crossOrigin);
    f.manager.itemStart(a);
    g.src = a;
    return g;
  }});
  uf.prototype = Object.assign(Object.create(ra.prototype), {constructor:uf, load:function(a, c, b, e) {
    function l(l) {
      f.load(a[l], function(a) {
        h.images[l] = a;
        d++;
        6 === d && (h.needsUpdate = !0, c && c(h));
      }, void 0, e);
    }
    var h = new Va, f = new zd(this.manager);
    f.setCrossOrigin(this.crossOrigin);
    f.setPath(this.path);
    var d = 0;
    for (b = 0; b < a.length; ++b) {
      l(b);
    }
    return h;
  }});
  vf.prototype = Object.assign(Object.create(ra.prototype), {constructor:vf, load:function(a, c, b, e) {
    var l = new g, h = new zd(this.manager);
    h.setCrossOrigin(this.crossOrigin);
    h.setPath(this.path);
    h.load(a, function(b) {
      l.image = b;
      b = 0 < a.search(/\.jpe?g($|\?)/i) || 0 === a.search(/^data:image\/jpeg/);
      l.format = b ? 1022 : 1023;
      l.needsUpdate = !0;
      void 0 !== c && c(l);
    }, b, e);
    return l;
  }});
  Object.assign(fa.prototype, {getPoint:function() {
    console.warn("THREE.Curve: .getPoint() not implemented.");
    return null;
  }, getPointAt:function(a, c) {
    a = this.getUtoTmapping(a);
    return this.getPoint(a, c);
  }, getPoints:function(a) {
    void 0 === a && (a = 5);
    for (var c = [], l = 0; l <= a; l++) {
      c.push(this.getPoint(l / a));
    }
    return c;
  }, getSpacedPoints:function(a) {
    void 0 === a && (a = 5);
    for (var c = [], l = 0; l <= a; l++) {
      c.push(this.getPointAt(l / a));
    }
    return c;
  }, getLength:function() {
    var a = this.getLengths();
    return a[a.length - 1];
  }, getLengths:function(a) {
    void 0 === a && (a = this.arcLengthDivisions);
    if (this.cacheArcLengths && this.cacheArcLengths.length === a + 1 && !this.needsUpdate) {
      return this.cacheArcLengths;
    }
    this.needsUpdate = !1;
    var c = [], l = this.getPoint(0), b, e = 0;
    c.push(0);
    for (b = 1; b <= a; b++) {
      var h = this.getPoint(b / a);
      e += h.distanceTo(l);
      c.push(e);
      l = h;
    }
    return this.cacheArcLengths = c;
  }, updateArcLengths:function() {
    this.needsUpdate = !0;
    this.getLengths();
  }, getUtoTmapping:function(a, c) {
    var l = this.getLengths(), b = l.length;
    c = c ? c : a * l[b - 1];
    for (var e = 0, h = b - 1, f; e <= h;) {
      if (a = Math.floor(e + (h - e) / 2), f = l[a] - c, 0 > f) {
        e = a + 1;
      } else {
        if (0 < f) {
          h = a - 1;
        } else {
          h = a;
          break;
        }
      }
    }
    a = h;
    if (l[a] === c) {
      return a / (b - 1);
    }
    e = l[a];
    return (a + (c - e) / (l[a + 1] - e)) / (b - 1);
  }, getTangent:function(a, c) {
    var l = a - 1E-4;
    a += 1E-4;
    0 > l && (l = 0);
    1 < a && (a = 1);
    l = this.getPoint(l);
    a = this.getPoint(a);
    c = c || (l.isVector2 ? new k : new m);
    c.copy(a).sub(l).normalize();
    return c;
  }, getTangentAt:function(a, c) {
    a = this.getUtoTmapping(a);
    return this.getTangent(a, c);
  }, computeFrenetFrames:function(a, c) {
    var l = new m, b = [], e = [], h = [], f = new m, d = new n, g;
    for (g = 0; g <= a; g++) {
      var p = g / a;
      b[g] = this.getTangentAt(p, new m);
      b[g].normalize();
    }
    e[0] = new m;
    h[0] = new m;
    g = Number.MAX_VALUE;
    p = Math.abs(b[0].x);
    var k = Math.abs(b[0].y), q = Math.abs(b[0].z);
    p <= g && (g = p, l.set(1, 0, 0));
    k <= g && (g = k, l.set(0, 1, 0));
    q <= g && l.set(0, 0, 1);
    f.crossVectors(b[0], l).normalize();
    e[0].crossVectors(b[0], f);
    h[0].crossVectors(b[0], e[0]);
    for (g = 1; g <= a; g++) {
      e[g] = e[g - 1].clone(), h[g] = h[g - 1].clone(), f.crossVectors(b[g - 1], b[g]), f.length() > Number.EPSILON && (f.normalize(), l = Math.acos(oa.clamp(b[g - 1].dot(b[g]), -1, 1)), e[g].applyMatrix4(d.makeRotationAxis(f, l))), h[g].crossVectors(b[g], e[g]);
    }
    if (!0 === c) {
      for (l = Math.acos(oa.clamp(e[0].dot(e[a]), -1, 1)), l /= a, 0 < b[0].dot(f.crossVectors(e[0], e[a])) && (l = -l), g = 1; g <= a; g++) {
        e[g].applyMatrix4(d.makeRotationAxis(b[g], l * g)), h[g].crossVectors(b[g], e[g]);
      }
    }
    return {tangents:b, normals:e, binormals:h};
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(a) {
    this.arcLengthDivisions = a.arcLengthDivisions;
    return this;
  }, toJSON:function() {
    var a = {metadata:{version:4.5, type:"Curve", generator:"Curve.toJSON"}};
    a.arcLengthDivisions = this.arcLengthDivisions;
    a.type = this.type;
    return a;
  }, fromJSON:function(a) {
    this.arcLengthDivisions = a.arcLengthDivisions;
    return this;
  }});
  gb.prototype = Object.create(fa.prototype);
  gb.prototype.constructor = gb;
  gb.prototype.isEllipseCurve = !0;
  gb.prototype.getPoint = function(a, c) {
    c = c || new k;
    for (var l = 2 * Math.PI, b = this.aEndAngle - this.aStartAngle, e = Math.abs(b) < Number.EPSILON; 0 > b;) {
      b += l;
    }
    for (; b > l;) {
      b -= l;
    }
    b < Number.EPSILON && (b = e ? 0 : l);
    !0 !== this.aClockwise || e || (b = b === l ? -l : b - l);
    l = this.aStartAngle + a * b;
    a = this.aX + this.xRadius * Math.cos(l);
    var h = this.aY + this.yRadius * Math.sin(l);
    0 !== this.aRotation && (l = Math.cos(this.aRotation), b = Math.sin(this.aRotation), e = a - this.aX, h -= this.aY, a = e * l - h * b + this.aX, h = e * b + h * l + this.aY);
    return c.set(a, h);
  };
  gb.prototype.copy = function(a) {
    fa.prototype.copy.call(this, a);
    this.aX = a.aX;
    this.aY = a.aY;
    this.xRadius = a.xRadius;
    this.yRadius = a.yRadius;
    this.aStartAngle = a.aStartAngle;
    this.aEndAngle = a.aEndAngle;
    this.aClockwise = a.aClockwise;
    this.aRotation = a.aRotation;
    return this;
  };
  gb.prototype.toJSON = function() {
    var a = fa.prototype.toJSON.call(this);
    a.aX = this.aX;
    a.aY = this.aY;
    a.xRadius = this.xRadius;
    a.yRadius = this.yRadius;
    a.aStartAngle = this.aStartAngle;
    a.aEndAngle = this.aEndAngle;
    a.aClockwise = this.aClockwise;
    a.aRotation = this.aRotation;
    return a;
  };
  gb.prototype.fromJSON = function(a) {
    fa.prototype.fromJSON.call(this, a);
    this.aX = a.aX;
    this.aY = a.aY;
    this.xRadius = a.xRadius;
    this.yRadius = a.yRadius;
    this.aStartAngle = a.aStartAngle;
    this.aEndAngle = a.aEndAngle;
    this.aClockwise = a.aClockwise;
    this.aRotation = a.aRotation;
    return this;
  };
  Ad.prototype = Object.create(gb.prototype);
  Ad.prototype.constructor = Ad;
  Ad.prototype.isArcCurve = !0;
  var gg = new m, sh = new Eg, th = new Eg, uh = new Eg;
  Wa.prototype = Object.create(fa.prototype);
  Wa.prototype.constructor = Wa;
  Wa.prototype.isCatmullRomCurve3 = !0;
  Wa.prototype.getPoint = function(a, c) {
    c = c || new m;
    var b = this.points, l = b.length;
    a *= l - (this.closed ? 0 : 1);
    var e = Math.floor(a);
    a -= e;
    this.closed ? e += 0 < e ? 0 : (Math.floor(Math.abs(e) / l) + 1) * l : 0 === a && e === l - 1 && (e = l - 2, a = 1);
    if (this.closed || 0 < e) {
      var h = b[(e - 1) % l];
    } else {
      gg.subVectors(b[0], b[1]).add(b[0]), h = gg;
    }
    var f = b[e % l];
    var d = b[(e + 1) % l];
    this.closed || e + 2 < l ? b = b[(e + 2) % l] : (gg.subVectors(b[l - 1], b[l - 2]).add(b[l - 1]), b = gg);
    if ("centripetal" === this.curveType || "chordal" === this.curveType) {
      var g = "chordal" === this.curveType ? .5 : .25;
      l = Math.pow(h.distanceToSquared(f), g);
      e = Math.pow(f.distanceToSquared(d), g);
      g = Math.pow(d.distanceToSquared(b), g);
      1E-4 > e && (e = 1);
      1E-4 > l && (l = e);
      1E-4 > g && (g = e);
      sh.initNonuniformCatmullRom(h.x, f.x, d.x, b.x, l, e, g);
      th.initNonuniformCatmullRom(h.y, f.y, d.y, b.y, l, e, g);
      uh.initNonuniformCatmullRom(h.z, f.z, d.z, b.z, l, e, g);
    } else {
      "catmullrom" === this.curveType && (sh.initCatmullRom(h.x, f.x, d.x, b.x, this.tension), th.initCatmullRom(h.y, f.y, d.y, b.y, this.tension), uh.initCatmullRom(h.z, f.z, d.z, b.z, this.tension));
    }
    c.set(sh.calc(a), th.calc(a), uh.calc(a));
    return c;
  };
  Wa.prototype.copy = function(a) {
    fa.prototype.copy.call(this, a);
    this.points = [];
    for (var c = 0, b = a.points.length; c < b; c++) {
      this.points.push(a.points[c].clone());
    }
    this.closed = a.closed;
    this.curveType = a.curveType;
    this.tension = a.tension;
    return this;
  };
  Wa.prototype.toJSON = function() {
    var a = fa.prototype.toJSON.call(this);
    a.points = [];
    for (var c = 0, b = this.points.length; c < b; c++) {
      a.points.push(this.points[c].toArray());
    }
    a.closed = this.closed;
    a.curveType = this.curveType;
    a.tension = this.tension;
    return a;
  };
  Wa.prototype.fromJSON = function(a) {
    fa.prototype.fromJSON.call(this, a);
    this.points = [];
    for (var c = 0, b = a.points.length; c < b; c++) {
      var l = a.points[c];
      this.points.push((new m).fromArray(l));
    }
    this.closed = a.closed;
    this.curveType = a.curveType;
    this.tension = a.tension;
    return this;
  };
  ub.prototype = Object.create(fa.prototype);
  ub.prototype.constructor = ub;
  ub.prototype.isCubicBezierCurve = !0;
  ub.prototype.getPoint = function(a, c) {
    c = c || new k;
    var b = this.v0, l = this.v1, e = this.v2, h = this.v3;
    c.set(Ee(a, b.x, l.x, e.x, h.x), Ee(a, b.y, l.y, e.y, h.y));
    return c;
  };
  ub.prototype.copy = function(a) {
    fa.prototype.copy.call(this, a);
    this.v0.copy(a.v0);
    this.v1.copy(a.v1);
    this.v2.copy(a.v2);
    this.v3.copy(a.v3);
    return this;
  };
  ub.prototype.toJSON = function() {
    var a = fa.prototype.toJSON.call(this);
    a.v0 = this.v0.toArray();
    a.v1 = this.v1.toArray();
    a.v2 = this.v2.toArray();
    a.v3 = this.v3.toArray();
    return a;
  };
  ub.prototype.fromJSON = function(a) {
    fa.prototype.fromJSON.call(this, a);
    this.v0.fromArray(a.v0);
    this.v1.fromArray(a.v1);
    this.v2.fromArray(a.v2);
    this.v3.fromArray(a.v3);
    return this;
  };
  Ib.prototype = Object.create(fa.prototype);
  Ib.prototype.constructor = Ib;
  Ib.prototype.isCubicBezierCurve3 = !0;
  Ib.prototype.getPoint = function(a, c) {
    c = c || new m;
    var b = this.v0, l = this.v1, e = this.v2, h = this.v3;
    c.set(Ee(a, b.x, l.x, e.x, h.x), Ee(a, b.y, l.y, e.y, h.y), Ee(a, b.z, l.z, e.z, h.z));
    return c;
  };
  Ib.prototype.copy = function(a) {
    fa.prototype.copy.call(this, a);
    this.v0.copy(a.v0);
    this.v1.copy(a.v1);
    this.v2.copy(a.v2);
    this.v3.copy(a.v3);
    return this;
  };
  Ib.prototype.toJSON = function() {
    var a = fa.prototype.toJSON.call(this);
    a.v0 = this.v0.toArray();
    a.v1 = this.v1.toArray();
    a.v2 = this.v2.toArray();
    a.v3 = this.v3.toArray();
    return a;
  };
  Ib.prototype.fromJSON = function(a) {
    fa.prototype.fromJSON.call(this, a);
    this.v0.fromArray(a.v0);
    this.v1.fromArray(a.v1);
    this.v2.fromArray(a.v2);
    this.v3.fromArray(a.v3);
    return this;
  };
  bb.prototype = Object.create(fa.prototype);
  bb.prototype.constructor = bb;
  bb.prototype.isLineCurve = !0;
  bb.prototype.getPoint = function(a, c) {
    c = c || new k;
    1 === a ? c.copy(this.v2) : (c.copy(this.v2).sub(this.v1), c.multiplyScalar(a).add(this.v1));
    return c;
  };
  bb.prototype.getPointAt = function(a, c) {
    return this.getPoint(a, c);
  };
  bb.prototype.getTangent = function(a, c) {
    a = c || new k;
    return a = a.copy(this.v2).sub(this.v1).normalize();
  };
  bb.prototype.copy = function(a) {
    fa.prototype.copy.call(this, a);
    this.v1.copy(a.v1);
    this.v2.copy(a.v2);
    return this;
  };
  bb.prototype.toJSON = function() {
    var a = fa.prototype.toJSON.call(this);
    a.v1 = this.v1.toArray();
    a.v2 = this.v2.toArray();
    return a;
  };
  bb.prototype.fromJSON = function(a) {
    fa.prototype.fromJSON.call(this, a);
    this.v1.fromArray(a.v1);
    this.v2.fromArray(a.v2);
    return this;
  };
  vb.prototype = Object.create(fa.prototype);
  vb.prototype.constructor = vb;
  vb.prototype.isLineCurve3 = !0;
  vb.prototype.getPoint = function(a, c) {
    c = c || new m;
    1 === a ? c.copy(this.v2) : (c.copy(this.v2).sub(this.v1), c.multiplyScalar(a).add(this.v1));
    return c;
  };
  vb.prototype.getPointAt = function(a, c) {
    return this.getPoint(a, c);
  };
  vb.prototype.copy = function(a) {
    fa.prototype.copy.call(this, a);
    this.v1.copy(a.v1);
    this.v2.copy(a.v2);
    return this;
  };
  vb.prototype.toJSON = function() {
    var a = fa.prototype.toJSON.call(this);
    a.v1 = this.v1.toArray();
    a.v2 = this.v2.toArray();
    return a;
  };
  vb.prototype.fromJSON = function(a) {
    fa.prototype.fromJSON.call(this, a);
    this.v1.fromArray(a.v1);
    this.v2.fromArray(a.v2);
    return this;
  };
  wb.prototype = Object.create(fa.prototype);
  wb.prototype.constructor = wb;
  wb.prototype.isQuadraticBezierCurve = !0;
  wb.prototype.getPoint = function(a, c) {
    c = c || new k;
    var b = this.v0, l = this.v1, e = this.v2;
    c.set(De(a, b.x, l.x, e.x), De(a, b.y, l.y, e.y));
    return c;
  };
  wb.prototype.copy = function(a) {
    fa.prototype.copy.call(this, a);
    this.v0.copy(a.v0);
    this.v1.copy(a.v1);
    this.v2.copy(a.v2);
    return this;
  };
  wb.prototype.toJSON = function() {
    var a = fa.prototype.toJSON.call(this);
    a.v0 = this.v0.toArray();
    a.v1 = this.v1.toArray();
    a.v2 = this.v2.toArray();
    return a;
  };
  wb.prototype.fromJSON = function(a) {
    fa.prototype.fromJSON.call(this, a);
    this.v0.fromArray(a.v0);
    this.v1.fromArray(a.v1);
    this.v2.fromArray(a.v2);
    return this;
  };
  Jb.prototype = Object.create(fa.prototype);
  Jb.prototype.constructor = Jb;
  Jb.prototype.isQuadraticBezierCurve3 = !0;
  Jb.prototype.getPoint = function(a, c) {
    c = c || new m;
    var b = this.v0, l = this.v1, e = this.v2;
    c.set(De(a, b.x, l.x, e.x), De(a, b.y, l.y, e.y), De(a, b.z, l.z, e.z));
    return c;
  };
  Jb.prototype.copy = function(a) {
    fa.prototype.copy.call(this, a);
    this.v0.copy(a.v0);
    this.v1.copy(a.v1);
    this.v2.copy(a.v2);
    return this;
  };
  Jb.prototype.toJSON = function() {
    var a = fa.prototype.toJSON.call(this);
    a.v0 = this.v0.toArray();
    a.v1 = this.v1.toArray();
    a.v2 = this.v2.toArray();
    return a;
  };
  Jb.prototype.fromJSON = function(a) {
    fa.prototype.fromJSON.call(this, a);
    this.v0.fromArray(a.v0);
    this.v1.fromArray(a.v1);
    this.v2.fromArray(a.v2);
    return this;
  };
  xb.prototype = Object.create(fa.prototype);
  xb.prototype.constructor = xb;
  xb.prototype.isSplineCurve = !0;
  xb.prototype.getPoint = function(a, c) {
    c = c || new k;
    var b = this.points, l = (b.length - 1) * a;
    a = Math.floor(l);
    l -= a;
    var e = b[0 === a ? a : a - 1], h = b[a], f = b[a > b.length - 2 ? b.length - 1 : a + 1];
    b = b[a > b.length - 3 ? b.length - 1 : a + 2];
    c.set(ki(l, e.x, h.x, f.x, b.x), ki(l, e.y, h.y, f.y, b.y));
    return c;
  };
  xb.prototype.copy = function(a) {
    fa.prototype.copy.call(this, a);
    this.points = [];
    for (var c = 0, b = a.points.length; c < b; c++) {
      this.points.push(a.points[c].clone());
    }
    return this;
  };
  xb.prototype.toJSON = function() {
    var a = fa.prototype.toJSON.call(this);
    a.points = [];
    for (var c = 0, b = this.points.length; c < b; c++) {
      a.points.push(this.points[c].toArray());
    }
    return a;
  };
  xb.prototype.fromJSON = function(a) {
    fa.prototype.fromJSON.call(this, a);
    this.points = [];
    for (var c = 0, b = a.points.length; c < b; c++) {
      var l = a.points[c];
      this.points.push((new k).fromArray(l));
    }
    return this;
  };
  var vh = Object.freeze({__proto__:null, ArcCurve:Ad, CatmullRomCurve3:Wa, CubicBezierCurve:ub, CubicBezierCurve3:Ib, EllipseCurve:gb, LineCurve:bb, LineCurve3:vb, QuadraticBezierCurve:wb, QuadraticBezierCurve3:Jb, SplineCurve:xb});
  Wb.prototype = Object.assign(Object.create(fa.prototype), {constructor:Wb, add:function(a) {
    this.curves.push(a);
  }, closePath:function() {
    var a = this.curves[0].getPoint(0), c = this.curves[this.curves.length - 1].getPoint(1);
    a.equals(c) || this.curves.push(new bb(c, a));
  }, getPoint:function(a) {
    var c = a * this.getLength(), b = this.getCurveLengths();
    for (a = 0; a < b.length;) {
      if (b[a] >= c) {
        return c = b[a] - c, a = this.curves[a], b = a.getLength(), a.getPointAt(0 === b ? 0 : 1 - c / b);
      }
      a++;
    }
    return null;
  }, getLength:function() {
    var a = this.getCurveLengths();
    return a[a.length - 1];
  }, updateArcLengths:function() {
    this.needsUpdate = !0;
    this.cacheLengths = null;
    this.getCurveLengths();
  }, getCurveLengths:function() {
    if (this.cacheLengths && this.cacheLengths.length === this.curves.length) {
      return this.cacheLengths;
    }
    for (var a = [], c = 0, b = 0, e = this.curves.length; b < e; b++) {
      c += this.curves[b].getLength(), a.push(c);
    }
    return this.cacheLengths = a;
  }, getSpacedPoints:function(a) {
    void 0 === a && (a = 40);
    for (var c = [], b = 0; b <= a; b++) {
      c.push(this.getPoint(b / a));
    }
    this.autoClose && c.push(c[0]);
    return c;
  }, getPoints:function(a) {
    a = a || 12;
    for (var c = [], b, l = 0, e = this.curves; l < e.length; l++) {
      var h = e[l];
      h = h.getPoints(h && h.isEllipseCurve ? 2 * a : h && (h.isLineCurve || h.isLineCurve3) ? 1 : h && h.isSplineCurve ? a * h.points.length : a);
      for (var f = 0; f < h.length; f++) {
        var d = h[f];
        b && b.equals(d) || (c.push(d), b = d);
      }
    }
    this.autoClose && 1 < c.length && !c[c.length - 1].equals(c[0]) && c.push(c[0]);
    return c;
  }, copy:function(a) {
    fa.prototype.copy.call(this, a);
    this.curves = [];
    for (var c = 0, b = a.curves.length; c < b; c++) {
      this.curves.push(a.curves[c].clone());
    }
    this.autoClose = a.autoClose;
    return this;
  }, toJSON:function() {
    var a = fa.prototype.toJSON.call(this);
    a.autoClose = this.autoClose;
    a.curves = [];
    for (var c = 0, b = this.curves.length; c < b; c++) {
      a.curves.push(this.curves[c].toJSON());
    }
    return a;
  }, fromJSON:function(a) {
    fa.prototype.fromJSON.call(this, a);
    this.autoClose = a.autoClose;
    this.curves = [];
    for (var c = 0, b = a.curves.length; c < b; c++) {
      var l = a.curves[c];
      this.curves.push((new vh[l.type]).fromJSON(l));
    }
    return this;
  }});
  yb.prototype = Object.assign(Object.create(Wb.prototype), {constructor:yb, setFromPoints:function(a) {
    this.moveTo(a[0].x, a[0].y);
    for (var c = 1, b = a.length; c < b; c++) {
      this.lineTo(a[c].x, a[c].y);
    }
    return this;
  }, moveTo:function(a, c) {
    this.currentPoint.set(a, c);
    return this;
  }, lineTo:function(a, c) {
    var b = new bb(this.currentPoint.clone(), new k(a, c));
    this.curves.push(b);
    this.currentPoint.set(a, c);
    return this;
  }, quadraticCurveTo:function(a, c, b, e) {
    a = new wb(this.currentPoint.clone(), new k(a, c), new k(b, e));
    this.curves.push(a);
    this.currentPoint.set(b, e);
    return this;
  }, bezierCurveTo:function(a, c, b, e, h, f) {
    a = new ub(this.currentPoint.clone(), new k(a, c), new k(b, e), new k(h, f));
    this.curves.push(a);
    this.currentPoint.set(h, f);
    return this;
  }, splineThru:function(a) {
    var c = [this.currentPoint.clone()].concat(a);
    c = new xb(c);
    this.curves.push(c);
    this.currentPoint.copy(a[a.length - 1]);
    return this;
  }, arc:function(a, c, b, e, h, f) {
    this.absarc(a + this.currentPoint.x, c + this.currentPoint.y, b, e, h, f);
    return this;
  }, absarc:function(a, c, b, e, h, f) {
    this.absellipse(a, c, b, b, e, h, f);
    return this;
  }, ellipse:function(a, c, b, e, h, f, d, g) {
    this.absellipse(a + this.currentPoint.x, c + this.currentPoint.y, b, e, h, f, d, g);
    return this;
  }, absellipse:function(a, c, b, e, h, f, d, g) {
    a = new gb(a, c, b, e, h, f, d, g);
    0 < this.curves.length && (c = a.getPoint(0), c.equals(this.currentPoint) || this.lineTo(c.x, c.y));
    this.curves.push(a);
    a = a.getPoint(1);
    this.currentPoint.copy(a);
    return this;
  }, copy:function(a) {
    Wb.prototype.copy.call(this, a);
    this.currentPoint.copy(a.currentPoint);
    return this;
  }, toJSON:function() {
    var a = Wb.prototype.toJSON.call(this);
    a.currentPoint = this.currentPoint.toArray();
    return a;
  }, fromJSON:function(a) {
    Wb.prototype.fromJSON.call(this, a);
    this.currentPoint.fromArray(a.currentPoint);
    return this;
  }});
  qc.prototype = Object.assign(Object.create(yb.prototype), {constructor:qc, getPointsHoles:function(a) {
    for (var c = [], b = 0, l = this.holes.length; b < l; b++) {
      c[b] = this.holes[b].getPoints(a);
    }
    return c;
  }, extractPoints:function(a) {
    return {shape:this.getPoints(a), holes:this.getPointsHoles(a)};
  }, copy:function(a) {
    yb.prototype.copy.call(this, a);
    this.holes = [];
    for (var c = 0, b = a.holes.length; c < b; c++) {
      this.holes.push(a.holes[c].clone());
    }
    return this;
  }, toJSON:function() {
    var a = yb.prototype.toJSON.call(this);
    a.uuid = this.uuid;
    a.holes = [];
    for (var c = 0, b = this.holes.length; c < b; c++) {
      a.holes.push(this.holes[c].toJSON());
    }
    return a;
  }, fromJSON:function(a) {
    yb.prototype.fromJSON.call(this, a);
    this.uuid = a.uuid;
    this.holes = [];
    for (var c = 0, b = a.holes.length; c < b; c++) {
      var l = a.holes[c];
      this.holes.push((new yb).fromJSON(l));
    }
    return this;
  }});
  xa.prototype = Object.assign(Object.create(t.prototype), {constructor:xa, isLight:!0, copy:function(a) {
    t.prototype.copy.call(this, a);
    this.color.copy(a.color);
    this.intensity = a.intensity;
    return this;
  }, toJSON:function(a) {
    a = t.prototype.toJSON.call(this, a);
    a.object.color = this.color.getHex();
    a.object.intensity = this.intensity;
    void 0 !== this.groundColor && (a.object.groundColor = this.groundColor.getHex());
    void 0 !== this.distance && (a.object.distance = this.distance);
    void 0 !== this.angle && (a.object.angle = this.angle);
    void 0 !== this.decay && (a.object.decay = this.decay);
    void 0 !== this.penumbra && (a.object.penumbra = this.penumbra);
    void 0 !== this.shadow && (a.object.shadow = this.shadow.toJSON());
    return a;
  }});
  wf.prototype = Object.assign(Object.create(xa.prototype), {constructor:wf, isHemisphereLight:!0, copy:function(a) {
    xa.prototype.copy.call(this, a);
    this.groundColor.copy(a.groundColor);
    return this;
  }});
  Object.assign(Kb.prototype, {_projScreenMatrix:new n, _lightPositionWorld:new m, _lookTarget:new m, getViewportCount:function() {
    return this._viewportCount;
  }, getFrustum:function() {
    return this._frustum;
  }, updateMatrices:function(a) {
    var c = this.camera, b = this.matrix, l = this._projScreenMatrix, e = this._lookTarget, h = this._lightPositionWorld;
    h.setFromMatrixPosition(a.matrixWorld);
    c.position.copy(h);
    e.setFromMatrixPosition(a.target.matrixWorld);
    c.lookAt(e);
    c.updateMatrixWorld();
    l.multiplyMatrices(c.projectionMatrix, c.matrixWorldInverse);
    this._frustum.setFromProjectionMatrix(l);
    b.set(.5, 0, 0, .5, 0, .5, 0, .5, 0, 0, .5, .5, 0, 0, 0, 1);
    b.multiply(c.projectionMatrix);
    b.multiply(c.matrixWorldInverse);
  }, getViewport:function(a) {
    return this._viewports[a];
  }, getFrameExtents:function() {
    return this._frameExtents;
  }, copy:function(a) {
    this.camera = a.camera.clone();
    this.bias = a.bias;
    this.radius = a.radius;
    this.mapSize.copy(a.mapSize);
    return this;
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, toJSON:function() {
    var a = {};
    0 !== this.bias && (a.bias = this.bias);
    1 !== this.radius && (a.radius = this.radius);
    if (512 !== this.mapSize.x || 512 !== this.mapSize.y) {
      a.mapSize = this.mapSize.toArray();
    }
    a.camera = this.camera.toJSON(!1).object;
    delete a.camera.matrix;
    return a;
  }});
  xf.prototype = Object.assign(Object.create(Kb.prototype), {constructor:xf, isSpotLightShadow:!0, updateMatrices:function(a) {
    var c = this.camera, b = 2 * oa.RAD2DEG * a.angle, l = this.mapSize.width / this.mapSize.height, e = a.distance || c.far;
    if (b !== c.fov || l !== c.aspect || e !== c.far) {
      c.fov = b, c.aspect = l, c.far = e, c.updateProjectionMatrix();
    }
    Kb.prototype.updateMatrices.call(this, a);
  }});
  yf.prototype = Object.assign(Object.create(xa.prototype), {constructor:yf, isSpotLight:!0, copy:function(a) {
    xa.prototype.copy.call(this, a);
    this.distance = a.distance;
    this.angle = a.angle;
    this.penumbra = a.penumbra;
    this.decay = a.decay;
    this.target = a.target.clone();
    this.shadow = a.shadow.clone();
    return this;
  }});
  Fg.prototype = Object.assign(Object.create(Kb.prototype), {constructor:Fg, isPointLightShadow:!0, updateMatrices:function(a, c) {
    void 0 === c && (c = 0);
    var b = this.camera, l = this.matrix, e = this._lightPositionWorld, h = this._lookTarget, f = this._projScreenMatrix;
    e.setFromMatrixPosition(a.matrixWorld);
    b.position.copy(e);
    h.copy(b.position);
    h.add(this._cubeDirections[c]);
    b.up.copy(this._cubeUps[c]);
    b.lookAt(h);
    b.updateMatrixWorld();
    l.makeTranslation(-e.x, -e.y, -e.z);
    f.multiplyMatrices(b.projectionMatrix, b.matrixWorldInverse);
    this._frustum.setFromProjectionMatrix(f);
  }});
  zf.prototype = Object.assign(Object.create(xa.prototype), {constructor:zf, isPointLight:!0, copy:function(a) {
    xa.prototype.copy.call(this, a);
    this.distance = a.distance;
    this.decay = a.decay;
    this.shadow = a.shadow.clone();
    return this;
  }});
  Bd.prototype = Object.assign(Object.create(T.prototype), {constructor:Bd, isOrthographicCamera:!0, copy:function(a, c) {
    T.prototype.copy.call(this, a, c);
    this.left = a.left;
    this.right = a.right;
    this.top = a.top;
    this.bottom = a.bottom;
    this.near = a.near;
    this.far = a.far;
    this.zoom = a.zoom;
    this.view = null === a.view ? null : Object.assign({}, a.view);
    return this;
  }, setViewOffset:function(a, c, b, e, h, f) {
    null === this.view && (this.view = {enabled:!0, fullWidth:1, fullHeight:1, offsetX:0, offsetY:0, width:1, height:1});
    this.view.enabled = !0;
    this.view.fullWidth = a;
    this.view.fullHeight = c;
    this.view.offsetX = b;
    this.view.offsetY = e;
    this.view.width = h;
    this.view.height = f;
    this.updateProjectionMatrix();
  }, clearViewOffset:function() {
    null !== this.view && (this.view.enabled = !1);
    this.updateProjectionMatrix();
  }, updateProjectionMatrix:function() {
    var a = (this.right - this.left) / (2 * this.zoom), c = (this.top - this.bottom) / (2 * this.zoom), b = (this.right + this.left) / 2, e = (this.top + this.bottom) / 2, h = b - a;
    b += a;
    a = e + c;
    c = e - c;
    null !== this.view && this.view.enabled && (e = (this.right - this.left) / this.view.fullWidth / this.zoom, c = (this.top - this.bottom) / this.view.fullHeight / this.zoom, h += e * this.view.offsetX, b = h + e * this.view.width, a -= c * this.view.offsetY, c = a - c * this.view.height);
    this.projectionMatrix.makeOrthographic(h, b, a, c, this.near, this.far);
    this.projectionMatrixInverse.getInverse(this.projectionMatrix);
  }, toJSON:function(a) {
    a = t.prototype.toJSON.call(this, a);
    a.object.zoom = this.zoom;
    a.object.left = this.left;
    a.object.right = this.right;
    a.object.top = this.top;
    a.object.bottom = this.bottom;
    a.object.near = this.near;
    a.object.far = this.far;
    null !== this.view && (a.object.view = Object.assign({}, this.view));
    return a;
  }});
  Af.prototype = Object.assign(Object.create(Kb.prototype), {constructor:Af, isDirectionalLightShadow:!0, updateMatrices:function(a) {
    Kb.prototype.updateMatrices.call(this, a);
  }});
  Bf.prototype = Object.assign(Object.create(xa.prototype), {constructor:Bf, isDirectionalLight:!0, copy:function(a) {
    xa.prototype.copy.call(this, a);
    this.target = a.target.clone();
    this.shadow = a.shadow.clone();
    return this;
  }});
  Cf.prototype = Object.assign(Object.create(xa.prototype), {constructor:Cf, isAmbientLight:!0});
  Df.prototype = Object.assign(Object.create(xa.prototype), {constructor:Df, isRectAreaLight:!0, copy:function(a) {
    xa.prototype.copy.call(this, a);
    this.width = a.width;
    this.height = a.height;
    return this;
  }, toJSON:function(a) {
    a = xa.prototype.toJSON.call(this, a);
    a.object.width = this.width;
    a.object.height = this.height;
    return a;
  }});
  Object.assign(Ef.prototype, {isSphericalHarmonics3:!0, set:function(a) {
    for (var c = 0; 9 > c; c++) {
      this.coefficients[c].copy(a[c]);
    }
    return this;
  }, zero:function() {
    for (var a = 0; 9 > a; a++) {
      this.coefficients[a].set(0, 0, 0);
    }
    return this;
  }, getAt:function(a, c) {
    var b = a.x, l = a.y;
    a = a.z;
    var e = this.coefficients;
    c.copy(e[0]).multiplyScalar(.282095);
    c.addScaledVector(e[1], .488603 * l);
    c.addScaledVector(e[2], .488603 * a);
    c.addScaledVector(e[3], .488603 * b);
    c.addScaledVector(e[4], 1.092548 * b * l);
    c.addScaledVector(e[5], 1.092548 * l * a);
    c.addScaledVector(e[6], .315392 * (3 * a * a - 1));
    c.addScaledVector(e[7], 1.092548 * b * a);
    c.addScaledVector(e[8], .546274 * (b * b - l * l));
    return c;
  }, getIrradianceAt:function(a, c) {
    var b = a.x, l = a.y;
    a = a.z;
    var e = this.coefficients;
    c.copy(e[0]).multiplyScalar(.886227);
    c.addScaledVector(e[1], 1.023328 * l);
    c.addScaledVector(e[2], 1.023328 * a);
    c.addScaledVector(e[3], 1.023328 * b);
    c.addScaledVector(e[4], .858086 * b * l);
    c.addScaledVector(e[5], .858086 * l * a);
    c.addScaledVector(e[6], .743125 * a * a - .247708);
    c.addScaledVector(e[7], .858086 * b * a);
    c.addScaledVector(e[8], .429043 * (b * b - l * l));
    return c;
  }, add:function(a) {
    for (var c = 0; 9 > c; c++) {
      this.coefficients[c].add(a.coefficients[c]);
    }
    return this;
  }, addScaledSH:function(a, c) {
    for (var b = 0; 9 > b; b++) {
      this.coefficients[b].addScaledVector(a.coefficients[b], c);
    }
    return this;
  }, scale:function(a) {
    for (var c = 0; 9 > c; c++) {
      this.coefficients[c].multiplyScalar(a);
    }
    return this;
  }, lerp:function(a, c) {
    for (var b = 0; 9 > b; b++) {
      this.coefficients[b].lerp(a.coefficients[b], c);
    }
    return this;
  }, equals:function(a) {
    for (var c = 0; 9 > c; c++) {
      if (!this.coefficients[c].equals(a.coefficients[c])) {
        return !1;
      }
    }
    return !0;
  }, copy:function(a) {
    return this.set(a.coefficients);
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, fromArray:function(a, c) {
    void 0 === c && (c = 0);
    for (var b = this.coefficients, l = 0; 9 > l; l++) {
      b[l].fromArray(a, c + 3 * l);
    }
    return this;
  }, toArray:function(a, c) {
    void 0 === a && (a = []);
    void 0 === c && (c = 0);
    for (var b = this.coefficients, l = 0; 9 > l; l++) {
      b[l].toArray(a, c + 3 * l);
    }
    return a;
  }});
  Object.assign(Ef, {getBasisAt:function(a, c) {
    var b = a.x, l = a.y;
    a = a.z;
    c[0] = .282095;
    c[1] = .488603 * l;
    c[2] = .488603 * a;
    c[3] = .488603 * b;
    c[4] = 1.092548 * b * l;
    c[5] = 1.092548 * l * a;
    c[6] = .315392 * (3 * a * a - 1);
    c[7] = 1.092548 * b * a;
    c[8] = .546274 * (b * b - l * l);
  }});
  nb.prototype = Object.assign(Object.create(xa.prototype), {constructor:nb, isLightProbe:!0, copy:function(a) {
    xa.prototype.copy.call(this, a);
    this.sh.copy(a.sh);
    return this;
  }, fromJSON:function(a) {
    this.intensity = a.intensity;
    this.sh.fromArray(a.sh);
    return this;
  }, toJSON:function(a) {
    a = xa.prototype.toJSON.call(this, a);
    a.object.sh = this.sh.toArray();
    return a;
  }});
  Ff.prototype = Object.assign(Object.create(ra.prototype), {constructor:Ff, load:function(a, c, b, e) {
    var l = this, h = new mb(l.manager);
    h.setPath(l.path);
    h.load(a, function(a) {
      c(l.parse(JSON.parse(a)));
    }, b, e);
  }, parse:function(a) {
    function c(a) {
      void 0 === l[a] && console.warn("THREE.MaterialLoader: Undefined texture", a);
      return l[a];
    }
    var l = this.textures, e = new kk[a.type];
    void 0 !== a.uuid && (e.uuid = a.uuid);
    void 0 !== a.name && (e.name = a.name);
    void 0 !== a.color && e.color.setHex(a.color);
    void 0 !== a.roughness && (e.roughness = a.roughness);
    void 0 !== a.metalness && (e.metalness = a.metalness);
    void 0 !== a.sheen && (e.sheen = (new A).setHex(a.sheen));
    void 0 !== a.emissive && e.emissive.setHex(a.emissive);
    void 0 !== a.specular && e.specular.setHex(a.specular);
    void 0 !== a.shininess && (e.shininess = a.shininess);
    void 0 !== a.clearcoat && (e.clearcoat = a.clearcoat);
    void 0 !== a.clearcoatRoughness && (e.clearcoatRoughness = a.clearcoatRoughness);
    void 0 !== a.fog && (e.fog = a.fog);
    void 0 !== a.flatShading && (e.flatShading = a.flatShading);
    void 0 !== a.blending && (e.blending = a.blending);
    void 0 !== a.combine && (e.combine = a.combine);
    void 0 !== a.side && (e.side = a.side);
    void 0 !== a.opacity && (e.opacity = a.opacity);
    void 0 !== a.transparent && (e.transparent = a.transparent);
    void 0 !== a.alphaTest && (e.alphaTest = a.alphaTest);
    void 0 !== a.depthTest && (e.depthTest = a.depthTest);
    void 0 !== a.depthWrite && (e.depthWrite = a.depthWrite);
    void 0 !== a.colorWrite && (e.colorWrite = a.colorWrite);
    void 0 !== a.stencilWrite && (e.stencilWrite = a.stencilWrite);
    void 0 !== a.stencilWriteMask && (e.stencilWriteMask = a.stencilWriteMask);
    void 0 !== a.stencilFunc && (e.stencilFunc = a.stencilFunc);
    void 0 !== a.stencilRef && (e.stencilRef = a.stencilRef);
    void 0 !== a.stencilFuncMask && (e.stencilFuncMask = a.stencilFuncMask);
    void 0 !== a.stencilFail && (e.stencilFail = a.stencilFail);
    void 0 !== a.stencilZFail && (e.stencilZFail = a.stencilZFail);
    void 0 !== a.stencilZPass && (e.stencilZPass = a.stencilZPass);
    void 0 !== a.wireframe && (e.wireframe = a.wireframe);
    void 0 !== a.wireframeLinewidth && (e.wireframeLinewidth = a.wireframeLinewidth);
    void 0 !== a.wireframeLinecap && (e.wireframeLinecap = a.wireframeLinecap);
    void 0 !== a.wireframeLinejoin && (e.wireframeLinejoin = a.wireframeLinejoin);
    void 0 !== a.rotation && (e.rotation = a.rotation);
    1 !== a.linewidth && (e.linewidth = a.linewidth);
    void 0 !== a.dashSize && (e.dashSize = a.dashSize);
    void 0 !== a.gapSize && (e.gapSize = a.gapSize);
    void 0 !== a.scale && (e.scale = a.scale);
    void 0 !== a.polygonOffset && (e.polygonOffset = a.polygonOffset);
    void 0 !== a.polygonOffsetFactor && (e.polygonOffsetFactor = a.polygonOffsetFactor);
    void 0 !== a.polygonOffsetUnits && (e.polygonOffsetUnits = a.polygonOffsetUnits);
    void 0 !== a.skinning && (e.skinning = a.skinning);
    void 0 !== a.morphTargets && (e.morphTargets = a.morphTargets);
    void 0 !== a.morphNormals && (e.morphNormals = a.morphNormals);
    void 0 !== a.dithering && (e.dithering = a.dithering);
    void 0 !== a.vertexTangents && (e.vertexTangents = a.vertexTangents);
    void 0 !== a.visible && (e.visible = a.visible);
    void 0 !== a.toneMapped && (e.toneMapped = a.toneMapped);
    void 0 !== a.userData && (e.userData = a.userData);
    void 0 !== a.vertexColors && (e.vertexColors = "number" === typeof a.vertexColors ? 0 < a.vertexColors ? !0 : !1 : a.vertexColors);
    if (void 0 !== a.uniforms) {
      for (var h in a.uniforms) {
        var d = a.uniforms[h];
        e.uniforms[h] = {};
        switch(d.type) {
          case "t":
            e.uniforms[h].value = c(d.value);
            break;
          case "c":
            e.uniforms[h].value = (new A).setHex(d.value);
            break;
          case "v2":
            e.uniforms[h].value = (new k).fromArray(d.value);
            break;
          case "v3":
            e.uniforms[h].value = (new m).fromArray(d.value);
            break;
          case "v4":
            e.uniforms[h].value = (new f).fromArray(d.value);
            break;
          case "m3":
            e.uniforms[h].value = (new b).fromArray(d.value);
          case "m4":
            e.uniforms[h].value = (new n).fromArray(d.value);
            break;
          default:
            e.uniforms[h].value = d.value;
        }
      }
    }
    void 0 !== a.defines && (e.defines = a.defines);
    void 0 !== a.vertexShader && (e.vertexShader = a.vertexShader);
    void 0 !== a.fragmentShader && (e.fragmentShader = a.fragmentShader);
    if (void 0 !== a.extensions) {
      for (var g in a.extensions) {
        e.extensions[g] = a.extensions[g];
      }
    }
    void 0 !== a.shading && (e.flatShading = 1 === a.shading);
    void 0 !== a.size && (e.size = a.size);
    void 0 !== a.sizeAttenuation && (e.sizeAttenuation = a.sizeAttenuation);
    void 0 !== a.map && (e.map = c(a.map));
    void 0 !== a.matcap && (e.matcap = c(a.matcap));
    void 0 !== a.alphaMap && (e.alphaMap = c(a.alphaMap));
    void 0 !== a.bumpMap && (e.bumpMap = c(a.bumpMap));
    void 0 !== a.bumpScale && (e.bumpScale = a.bumpScale);
    void 0 !== a.normalMap && (e.normalMap = c(a.normalMap));
    void 0 !== a.normalMapType && (e.normalMapType = a.normalMapType);
    void 0 !== a.normalScale && (h = a.normalScale, !1 === Array.isArray(h) && (h = [h, h]), e.normalScale = (new k).fromArray(h));
    void 0 !== a.displacementMap && (e.displacementMap = c(a.displacementMap));
    void 0 !== a.displacementScale && (e.displacementScale = a.displacementScale);
    void 0 !== a.displacementBias && (e.displacementBias = a.displacementBias);
    void 0 !== a.roughnessMap && (e.roughnessMap = c(a.roughnessMap));
    void 0 !== a.metalnessMap && (e.metalnessMap = c(a.metalnessMap));
    void 0 !== a.emissiveMap && (e.emissiveMap = c(a.emissiveMap));
    void 0 !== a.emissiveIntensity && (e.emissiveIntensity = a.emissiveIntensity);
    void 0 !== a.specularMap && (e.specularMap = c(a.specularMap));
    void 0 !== a.envMap && (e.envMap = c(a.envMap));
    void 0 !== a.envMapIntensity && (e.envMapIntensity = a.envMapIntensity);
    void 0 !== a.reflectivity && (e.reflectivity = a.reflectivity);
    void 0 !== a.refractionRatio && (e.refractionRatio = a.refractionRatio);
    void 0 !== a.lightMap && (e.lightMap = c(a.lightMap));
    void 0 !== a.lightMapIntensity && (e.lightMapIntensity = a.lightMapIntensity);
    void 0 !== a.aoMap && (e.aoMap = c(a.aoMap));
    void 0 !== a.aoMapIntensity && (e.aoMapIntensity = a.aoMapIntensity);
    void 0 !== a.gradientMap && (e.gradientMap = c(a.gradientMap));
    void 0 !== a.clearcoatMap && (e.clearcoatMap = c(a.clearcoatMap));
    void 0 !== a.clearcoatRoughnessMap && (e.clearcoatRoughnessMap = c(a.clearcoatRoughnessMap));
    void 0 !== a.clearcoatNormalMap && (e.clearcoatNormalMap = c(a.clearcoatNormalMap));
    void 0 !== a.clearcoatNormalScale && (e.clearcoatNormalScale = (new k).fromArray(a.clearcoatNormalScale));
    return e;
  }, setTextures:function(a) {
    this.textures = a;
    return this;
  }});
  var wh = {decodeText:function(a) {
    if ("undefined" !== typeof TextDecoder) {
      return (new TextDecoder).decode(a);
    }
    for (var c = "", b = 0, l = a.length; b < l; b++) {
      c += String.fromCharCode(a[b]);
    }
    try {
      return decodeURIComponent(escape(c));
    } catch (ca) {
      return c;
    }
  }, extractUrlBase:function(a) {
    var c = a.lastIndexOf("/");
    return -1 === c ? "./" : a.substr(0, c + 1);
  }};
  Gf.prototype = Object.assign(Object.create(N.prototype), {constructor:Gf, isInstancedBufferGeometry:!0, copy:function(a) {
    N.prototype.copy.call(this, a);
    this.maxInstancedCount = a.maxInstancedCount;
    return this;
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, toJSON:function() {
    var a = N.prototype.toJSON.call(this);
    a.maxInstancedCount = this.maxInstancedCount;
    a.isInstancedBufferGeometry = !0;
    return a;
  }});
  Hf.prototype = Object.assign(Object.create(J.prototype), {constructor:Hf, isInstancedBufferAttribute:!0, copy:function(a) {
    J.prototype.copy.call(this, a);
    this.meshPerAttribute = a.meshPerAttribute;
    return this;
  }, toJSON:function() {
    var a = J.prototype.toJSON.call(this);
    a.meshPerAttribute = this.meshPerAttribute;
    a.isInstancedBufferAttribute = !0;
    return a;
  }});
  If.prototype = Object.assign(Object.create(ra.prototype), {constructor:If, load:function(a, c, b, e) {
    var l = this, h = new mb(l.manager);
    h.setPath(l.path);
    h.load(a, function(a) {
      c(l.parse(JSON.parse(a)));
    }, b, e);
  }, parse:function(a) {
    var c = a.isInstancedBufferGeometry ? new Gf : new N, b = a.data.index;
    if (void 0 !== b) {
      var e = new xh[b.type](b.array);
      c.setIndex(new J(e, 1));
    }
    b = a.data.attributes;
    for (var l in b) {
      var h = b[l];
      e = new xh[h.type](h.array);
      e = new (h.isInstancedBufferAttribute ? Hf : J)(e, h.itemSize, h.normalized);
      void 0 !== h.name && (e.name = h.name);
      c.setAttribute(l, e);
    }
    var f = a.data.morphAttributes;
    if (f) {
      for (l in f) {
        var d = f[l], g = [];
        b = 0;
        for (var n = d.length; b < n; b++) {
          h = d[b], e = new xh[h.type](h.array), e = new J(e, h.itemSize, h.normalized), void 0 !== h.name && (e.name = h.name), g.push(e);
        }
        c.morphAttributes[l] = g;
      }
    }
    a.data.morphTargetsRelative && (c.morphTargetsRelative = !0);
    l = a.data.groups || a.data.drawcalls || a.data.offsets;
    if (void 0 !== l) {
      for (b = 0, h = l.length; b !== h; ++b) {
        e = l[b], c.addGroup(e.start, e.count, e.materialIndex);
      }
    }
    b = a.data.boundingSphere;
    void 0 !== b && (l = new m, void 0 !== b.center && l.fromArray(b.center), c.boundingSphere = new p(l, b.radius));
    a.name && (c.name = a.name);
    a.userData && (c.userData = a.userData);
    return c;
  }});
  var xh = {Int8Array:Int8Array, Uint8Array:Uint8Array, Uint8ClampedArray:"undefined" !== typeof Uint8ClampedArray ? Uint8ClampedArray : Uint8Array, Int16Array:Int16Array, Uint16Array:Uint16Array, Int32Array:Int32Array, Uint32Array:Uint32Array, Float32Array:Float32Array, Float64Array:Float64Array};
  Jf.prototype = Object.assign(Object.create(ra.prototype), {constructor:Jf, load:function(a, c, b, e) {
    var l = this, h = "" === this.path ? wh.extractUrlBase(a) : this.path;
    this.resourcePath = this.resourcePath || h;
    h = new mb(l.manager);
    h.setPath(this.path);
    h.load(a, function(b) {
      var h = null;
      try {
        h = JSON.parse(b);
      } catch (ob) {
        void 0 !== e && e(ob);
        console.error("THREE:ObjectLoader: Can't parse " + a + ".", ob.message);
        return;
      }
      b = h.metadata;
      void 0 === b || void 0 === b.type || "geometry" === b.type.toLowerCase() ? console.error("THREE.ObjectLoader: Can't load " + a) : l.parse(h, c);
    }, b, e);
  }, parse:function(a, c) {
    var b = this.parseShape(a.shapes);
    b = this.parseGeometries(a.geometries, b);
    var e = this.parseImages(a.images, function() {
      void 0 !== c && c(l);
    });
    e = this.parseTextures(a.textures, e);
    e = this.parseMaterials(a.materials, e);
    var l = this.parseObject(a.object, b, e);
    a.animations && (l.animations = this.parseAnimations(a.animations));
    void 0 !== a.images && 0 !== a.images.length || void 0 === c || c(l);
    return l;
  }, parseShape:function(a) {
    var c = {};
    if (void 0 !== a) {
      for (var b = 0, e = a.length; b < e; b++) {
        var l = (new qc).fromJSON(a[b]);
        c[l.uuid] = l;
      }
    }
    return c;
  }, parseGeometries:function(a, c) {
    var b = {};
    if (void 0 !== a) {
      for (var e = new If, l = 0, h = a.length; l < h; l++) {
        var f = a[l];
        switch(f.type) {
          case "PlaneGeometry":
          case "PlaneBufferGeometry":
            var d = new $a[f.type](f.width, f.height, f.widthSegments, f.heightSegments);
            break;
          case "BoxGeometry":
          case "BoxBufferGeometry":
          case "CubeGeometry":
            d = new $a[f.type](f.width, f.height, f.depth, f.widthSegments, f.heightSegments, f.depthSegments);
            break;
          case "CircleGeometry":
          case "CircleBufferGeometry":
            d = new $a[f.type](f.radius, f.segments, f.thetaStart, f.thetaLength);
            break;
          case "CylinderGeometry":
          case "CylinderBufferGeometry":
            d = new $a[f.type](f.radiusTop, f.radiusBottom, f.height, f.radialSegments, f.heightSegments, f.openEnded, f.thetaStart, f.thetaLength);
            break;
          case "ConeGeometry":
          case "ConeBufferGeometry":
            d = new $a[f.type](f.radius, f.height, f.radialSegments, f.heightSegments, f.openEnded, f.thetaStart, f.thetaLength);
            break;
          case "SphereGeometry":
          case "SphereBufferGeometry":
            d = new $a[f.type](f.radius, f.widthSegments, f.heightSegments, f.phiStart, f.phiLength, f.thetaStart, f.thetaLength);
            break;
          case "DodecahedronGeometry":
          case "DodecahedronBufferGeometry":
          case "IcosahedronGeometry":
          case "IcosahedronBufferGeometry":
          case "OctahedronGeometry":
          case "OctahedronBufferGeometry":
          case "TetrahedronGeometry":
          case "TetrahedronBufferGeometry":
            d = new $a[f.type](f.radius, f.detail);
            break;
          case "RingGeometry":
          case "RingBufferGeometry":
            d = new $a[f.type](f.innerRadius, f.outerRadius, f.thetaSegments, f.phiSegments, f.thetaStart, f.thetaLength);
            break;
          case "TorusGeometry":
          case "TorusBufferGeometry":
            d = new $a[f.type](f.radius, f.tube, f.radialSegments, f.tubularSegments, f.arc);
            break;
          case "TorusKnotGeometry":
          case "TorusKnotBufferGeometry":
            d = new $a[f.type](f.radius, f.tube, f.tubularSegments, f.radialSegments, f.p, f.q);
            break;
          case "TubeGeometry":
          case "TubeBufferGeometry":
            d = new $a[f.type]((new vh[f.path.type]).fromJSON(f.path), f.tubularSegments, f.radius, f.radialSegments, f.closed);
            break;
          case "LatheGeometry":
          case "LatheBufferGeometry":
            d = new $a[f.type](f.points, f.segments, f.phiStart, f.phiLength);
            break;
          case "PolyhedronGeometry":
          case "PolyhedronBufferGeometry":
            d = new $a[f.type](f.vertices, f.indices, f.radius, f.details);
            break;
          case "ShapeGeometry":
          case "ShapeBufferGeometry":
            d = [];
            for (var g = 0, m = f.shapes.length; g < m; g++) {
              var p = c[f.shapes[g]];
              d.push(p);
            }
            d = new $a[f.type](d, f.curveSegments);
            break;
          case "ExtrudeGeometry":
          case "ExtrudeBufferGeometry":
            d = [];
            g = 0;
            for (m = f.shapes.length; g < m; g++) {
              p = c[f.shapes[g]], d.push(p);
            }
            g = f.options.extrudePath;
            void 0 !== g && (f.options.extrudePath = (new vh[g.type]).fromJSON(g));
            d = new $a[f.type](d, f.options);
            break;
          case "BufferGeometry":
          case "InstancedBufferGeometry":
            d = e.parse(f);
            break;
          case "Geometry":
            console.error('THREE.ObjectLoader: Loading "Geometry" is not supported anymore.');
            break;
          default:
            console.warn('THREE.ObjectLoader: Unsupported geometry type "' + f.type + '"');
            continue;
        }
        d.uuid = f.uuid;
        void 0 !== f.name && (d.name = f.name);
        !0 === d.isBufferGeometry && void 0 !== f.userData && (d.userData = f.userData);
        b[f.uuid] = d;
      }
    }
    return b;
  }, parseMaterials:function(a, c) {
    var b = {}, e = {};
    if (void 0 !== a) {
      var l = new Ff;
      l.setTextures(c);
      c = 0;
      for (var h = a.length; c < h; c++) {
        var f = a[c];
        if ("MultiMaterial" === f.type) {
          for (var d = [], g = 0; g < f.materials.length; g++) {
            var m = f.materials[g];
            void 0 === b[m.uuid] && (b[m.uuid] = l.parse(m));
            d.push(b[m.uuid]);
          }
          e[f.uuid] = d;
        } else {
          void 0 === b[f.uuid] && (b[f.uuid] = l.parse(f)), e[f.uuid] = b[f.uuid];
        }
      }
    }
    return e;
  }, parseAnimations:function(a) {
    for (var c = [], b = 0; b < a.length; b++) {
      var e = a[b], l = lb.parse(e);
      void 0 !== e.uuid && (l.uuid = e.uuid);
      c.push(l);
    }
    return c;
  }, parseImages:function(a, c) {
    function b(a) {
      e.manager.itemStart(a);
      return h.load(a, function() {
        e.manager.itemEnd(a);
      }, void 0, function() {
        e.manager.itemError(a);
        e.manager.itemEnd(a);
      });
    }
    var e = this, l = {};
    if (void 0 !== a && 0 < a.length) {
      c = new Bg(c);
      var h = new zd(c);
      h.setCrossOrigin(this.crossOrigin);
      c = 0;
      for (var f = a.length; c < f; c++) {
        var d = a[c], g = d.url;
        if (Array.isArray(g)) {
          l[d.uuid] = [];
          for (var m = 0, p = g.length; m < p; m++) {
            var n = g[m];
            n = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(n) ? n : e.resourcePath + n;
            l[d.uuid].push(b(n));
          }
        } else {
          n = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(d.url) ? d.url : e.resourcePath + d.url, l[d.uuid] = b(n);
        }
      }
    }
    return l;
  }, parseTextures:function(a, c) {
    function b(a, c) {
      if ("number" === typeof a) {
        return a;
      }
      console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.", a);
      return c[a];
    }
    var e = {};
    if (void 0 !== a) {
      for (var l = 0, h = a.length; l < h; l++) {
        var f = a[l];
        void 0 === f.image && console.warn('THREE.ObjectLoader: No "image" specified for', f.uuid);
        void 0 === c[f.image] && console.warn("THREE.ObjectLoader: Undefined image", f.image);
        var d = Array.isArray(c[f.image]) ? new Va(c[f.image]) : new g(c[f.image]);
        d.needsUpdate = !0;
        d.uuid = f.uuid;
        void 0 !== f.name && (d.name = f.name);
        void 0 !== f.mapping && (d.mapping = b(f.mapping, lk));
        void 0 !== f.offset && d.offset.fromArray(f.offset);
        void 0 !== f.repeat && d.repeat.fromArray(f.repeat);
        void 0 !== f.center && d.center.fromArray(f.center);
        void 0 !== f.rotation && (d.rotation = f.rotation);
        void 0 !== f.wrap && (d.wrapS = b(f.wrap[0], Si), d.wrapT = b(f.wrap[1], Si));
        void 0 !== f.format && (d.format = f.format);
        void 0 !== f.type && (d.type = f.type);
        void 0 !== f.encoding && (d.encoding = f.encoding);
        void 0 !== f.minFilter && (d.minFilter = b(f.minFilter, Ti));
        void 0 !== f.magFilter && (d.magFilter = b(f.magFilter, Ti));
        void 0 !== f.anisotropy && (d.anisotropy = f.anisotropy);
        void 0 !== f.flipY && (d.flipY = f.flipY);
        void 0 !== f.premultiplyAlpha && (d.premultiplyAlpha = f.premultiplyAlpha);
        void 0 !== f.unpackAlignment && (d.unpackAlignment = f.unpackAlignment);
        e[f.uuid] = d;
      }
    }
    return e;
  }, parseObject:function(a, c, b) {
    function e(a) {
      void 0 === c[a] && console.warn("THREE.ObjectLoader: Undefined geometry", a);
      return c[a];
    }
    function l(a) {
      if (void 0 !== a) {
        if (Array.isArray(a)) {
          for (var c = [], e = 0, l = a.length; e < l; e++) {
            var h = a[e];
            void 0 === b[h] && console.warn("THREE.ObjectLoader: Undefined material", h);
            c.push(b[h]);
          }
          return c;
        }
        void 0 === b[a] && console.warn("THREE.ObjectLoader: Undefined material", a);
        return b[a];
      }
    }
    switch(a.type) {
      case "Scene":
        var h = new z;
        void 0 !== a.background && Number.isInteger(a.background) && (h.background = new A(a.background));
        void 0 !== a.fog && ("Fog" === a.fog.type ? h.fog = new df(a.fog.color, a.fog.near, a.fog.far) : "FogExp2" === a.fog.type && (h.fog = new cf(a.fog.color, a.fog.density)));
        break;
      case "PerspectiveCamera":
        h = new ia(a.fov, a.aspect, a.near, a.far);
        void 0 !== a.focus && (h.focus = a.focus);
        void 0 !== a.zoom && (h.zoom = a.zoom);
        void 0 !== a.filmGauge && (h.filmGauge = a.filmGauge);
        void 0 !== a.filmOffset && (h.filmOffset = a.filmOffset);
        void 0 !== a.view && (h.view = Object.assign({}, a.view));
        break;
      case "OrthographicCamera":
        h = new Bd(a.left, a.right, a.top, a.bottom, a.near, a.far);
        void 0 !== a.zoom && (h.zoom = a.zoom);
        void 0 !== a.view && (h.view = Object.assign({}, a.view));
        break;
      case "AmbientLight":
        h = new Cf(a.color, a.intensity);
        break;
      case "DirectionalLight":
        h = new Bf(a.color, a.intensity);
        break;
      case "PointLight":
        h = new zf(a.color, a.intensity, a.distance, a.decay);
        break;
      case "RectAreaLight":
        h = new Df(a.color, a.intensity, a.width, a.height);
        break;
      case "SpotLight":
        h = new yf(a.color, a.intensity, a.distance, a.angle, a.penumbra, a.decay);
        break;
      case "HemisphereLight":
        h = new wf(a.color, a.groundColor, a.intensity);
        break;
      case "LightProbe":
        h = (new nb).fromJSON(a);
        break;
      case "SkinnedMesh":
        console.warn("THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.");
      case "Mesh":
        h = e(a.geometry);
        var f = l(a.material);
        h = new V(h, f);
        break;
      case "InstancedMesh":
        h = e(a.geometry);
        f = l(a.material);
        var d = a.instanceMatrix;
        h = new hf(h, f, a.count);
        h.instanceMatrix = new J(new Float32Array(d.array), 16);
        break;
      case "LOD":
        h = new fe;
        break;
      case "Line":
        h = new eb(e(a.geometry), l(a.material), a.mode);
        break;
      case "LineLoop":
        h = new jf(e(a.geometry), l(a.material));
        break;
      case "LineSegments":
        h = new Da(e(a.geometry), l(a.material));
        break;
      case "PointCloud":
      case "Points":
        h = new id(e(a.geometry), l(a.material));
        break;
      case "Sprite":
        h = new de(l(a.material));
        break;
      case "Group":
        h = new fd;
        break;
      default:
        h = new t;
    }
    h.uuid = a.uuid;
    void 0 !== a.name && (h.name = a.name);
    void 0 !== a.matrix ? (h.matrix.fromArray(a.matrix), void 0 !== a.matrixAutoUpdate && (h.matrixAutoUpdate = a.matrixAutoUpdate), h.matrixAutoUpdate && h.matrix.decompose(h.position, h.quaternion, h.scale)) : (void 0 !== a.position && h.position.fromArray(a.position), void 0 !== a.rotation && h.rotation.fromArray(a.rotation), void 0 !== a.quaternion && h.quaternion.fromArray(a.quaternion), void 0 !== a.scale && h.scale.fromArray(a.scale));
    void 0 !== a.castShadow && (h.castShadow = a.castShadow);
    void 0 !== a.receiveShadow && (h.receiveShadow = a.receiveShadow);
    a.shadow && (void 0 !== a.shadow.bias && (h.shadow.bias = a.shadow.bias), void 0 !== a.shadow.radius && (h.shadow.radius = a.shadow.radius), void 0 !== a.shadow.mapSize && h.shadow.mapSize.fromArray(a.shadow.mapSize), void 0 !== a.shadow.camera && (h.shadow.camera = this.parseObject(a.shadow.camera)));
    void 0 !== a.visible && (h.visible = a.visible);
    void 0 !== a.frustumCulled && (h.frustumCulled = a.frustumCulled);
    void 0 !== a.renderOrder && (h.renderOrder = a.renderOrder);
    void 0 !== a.userData && (h.userData = a.userData);
    void 0 !== a.layers && (h.layers.mask = a.layers);
    if (void 0 !== a.children) {
      for (d = a.children, f = 0; f < d.length; f++) {
        h.add(this.parseObject(d[f], c, b));
      }
    }
    if ("LOD" === a.type) {
      for (void 0 !== a.autoUpdate && (h.autoUpdate = a.autoUpdate), a = a.levels, d = 0; d < a.length; d++) {
        f = a[d];
        var g = h.getObjectByProperty("uuid", f.object);
        void 0 !== g && h.addLevel(g, f.distance);
      }
    }
    return h;
  }});
  var lk = {UVMapping:300, CubeReflectionMapping:301, CubeRefractionMapping:302, EquirectangularReflectionMapping:303, EquirectangularRefractionMapping:304, SphericalReflectionMapping:305, CubeUVReflectionMapping:306, CubeUVRefractionMapping:307}, Si = {RepeatWrapping:1E3, ClampToEdgeWrapping:1001, MirroredRepeatWrapping:1002}, Ti = {NearestFilter:1003, NearestMipmapNearestFilter:1004, NearestMipmapLinearFilter:1005, LinearFilter:1006, LinearMipmapNearestFilter:1007, LinearMipmapLinearFilter:1008};
  Gg.prototype = Object.assign(Object.create(ra.prototype), {constructor:Gg, setOptions:function(a) {
    this.options = a;
    return this;
  }, load:function(a, c, b, e) {
    void 0 === a && (a = "");
    void 0 !== this.path && (a = this.path + a);
    a = this.manager.resolveURL(a);
    var l = this, h = Vc.get(a);
    if (void 0 !== h) {
      return l.manager.itemStart(a), setTimeout(function() {
        c && c(h);
        l.manager.itemEnd(a);
      }, 0), h;
    }
    fetch(a).then(function(a) {
      return a.blob();
    }).then(function(a) {
      return void 0 === l.options ? createImageBitmap(a) : createImageBitmap(a, l.options);
    }).then(function(b) {
      Vc.add(a, b);
      c && c(b);
      l.manager.itemEnd(a);
    }).catch(function(c) {
      e && e(c);
      l.manager.itemError(a);
      l.manager.itemEnd(a);
    });
    l.manager.itemStart(a);
  }});
  Object.assign(Hg.prototype, {moveTo:function(a, c) {
    this.currentPath = new yb;
    this.subPaths.push(this.currentPath);
    this.currentPath.moveTo(a, c);
    return this;
  }, lineTo:function(a, c) {
    this.currentPath.lineTo(a, c);
    return this;
  }, quadraticCurveTo:function(a, c, b, e) {
    this.currentPath.quadraticCurveTo(a, c, b, e);
    return this;
  }, bezierCurveTo:function(a, c, b, e, h, f) {
    this.currentPath.bezierCurveTo(a, c, b, e, h, f);
    return this;
  }, splineThru:function(a) {
    this.currentPath.splineThru(a);
    return this;
  }, toShapes:function(a, c) {
    function b(a) {
      for (var c = [], b = 0, e = a.length; b < e; b++) {
        var l = a[b], h = new qc;
        h.curves = l.curves;
        c.push(h);
      }
      return c;
    }
    function e(a, c) {
      for (var b = c.length, e = !1, l = b - 1, h = 0; h < b; l = h++) {
        var f = c[l], d = c[h], g = d.x - f.x, m = d.y - f.y;
        if (Math.abs(m) > Number.EPSILON) {
          if (0 > m && (f = c[h], g = -g, d = c[l], m = -m), !(a.y < f.y || a.y > d.y)) {
            if (a.y === f.y) {
              if (a.x === f.x) {
                return !0;
              }
            } else {
              l = m * (a.x - f.x) - g * (a.y - f.y);
              if (0 === l) {
                return !0;
              }
              0 > l || (e = !e);
            }
          }
        } else {
          if (a.y === f.y && (d.x <= a.x && a.x <= f.x || f.x <= a.x && a.x <= d.x)) {
            return !0;
          }
        }
      }
      return e;
    }
    var l = Tb.isClockWise, h = this.subPaths;
    if (0 === h.length) {
      return [];
    }
    if (!0 === c) {
      return b(h);
    }
    c = [];
    if (1 === h.length) {
      var f = h[0];
      var d = new qc;
      d.curves = f.curves;
      c.push(d);
      return c;
    }
    var g = !l(h[0].getPoints());
    g = a ? !g : g;
    d = [];
    var m = [], p = [], n = 0;
    m[n] = void 0;
    p[n] = [];
    for (var k = 0, q = h.length; k < q; k++) {
      f = h[k];
      var r = f.getPoints();
      var t = l(r);
      (t = a ? !t : t) ? (!g && m[n] && n++, m[n] = {s:new qc, p:r}, m[n].s.curves = f.curves, g && n++, p[n] = []) : p[n].push({h:f, p:r[0]});
    }
    if (!m[0]) {
      return b(h);
    }
    if (1 < m.length) {
      k = !1;
      a = [];
      l = 0;
      for (h = m.length; l < h; l++) {
        d[l] = [];
      }
      l = 0;
      for (h = m.length; l < h; l++) {
        for (f = p[l], t = 0; t < f.length; t++) {
          g = f[t];
          n = !0;
          for (r = 0; r < m.length; r++) {
            e(g.p, m[r].p) && (l !== r && a.push({froms:l, tos:r, hole:t}), n ? (n = !1, d[r].push(g)) : k = !0);
          }
          n && d[l].push(g);
        }
      }
      0 < a.length && (k || (p = d));
    }
    k = 0;
    for (l = m.length; k < l; k++) {
      for (d = m[k].s, c.push(d), a = p[k], h = 0, f = a.length; h < f; h++) {
        d.holes.push(a[h].h);
      }
    }
    return c;
  }});
  Object.assign(Ig.prototype, {isFont:!0, generateShapes:function(a, c) {
    void 0 === c && (c = 100);
    var b = [], e = c;
    c = this.data;
    var l = Array.from ? Array.from(a) : String(a).split("");
    e /= c.resolution;
    var h = (c.boundingBox.yMax - c.boundingBox.yMin + c.underlineThickness) * e;
    a = [];
    for (var f = 0, d = 0, g = 0; g < l.length; g++) {
      var m = l[g];
      if ("\n" === m) {
        f = 0, d -= h;
      } else {
        var p = m;
        m = e;
        var n = f, k = d, q = c, r = q.glyphs[p] || q.glyphs["?"];
        if (r) {
          p = new Hg;
          if (r.o) {
            q = r._cachedOutline || (r._cachedOutline = r.o.split(" "));
            for (var t = 0, v = q.length; t < v;) {
              switch(q[t++]) {
                case "m":
                  var z = q[t++] * m + n;
                  var w = q[t++] * m + k;
                  p.moveTo(z, w);
                  break;
                case "l":
                  z = q[t++] * m + n;
                  w = q[t++] * m + k;
                  p.lineTo(z, w);
                  break;
                case "q":
                  var y = q[t++] * m + n;
                  var u = q[t++] * m + k;
                  var x = q[t++] * m + n;
                  var ba = q[t++] * m + k;
                  p.quadraticCurveTo(x, ba, y, u);
                  break;
                case "b":
                  y = q[t++] * m + n, u = q[t++] * m + k, x = q[t++] * m + n, ba = q[t++] * m + k, z = q[t++] * m + n, w = q[t++] * m + k, p.bezierCurveTo(x, ba, z, w, y, u);
              }
            }
          }
          m = {offsetX:r.ha * m, path:p};
        } else {
          console.error('THREE.Font: character "' + p + '" does not exists in font family ' + q.familyName + "."), m = void 0;
        }
        f += m.offsetX;
        a.push(m.path);
      }
    }
    c = 0;
    for (l = a.length; c < l; c++) {
      Array.prototype.push.apply(b, a[c].toShapes());
    }
    return b;
  }});
  Jg.prototype = Object.assign(Object.create(ra.prototype), {constructor:Jg, load:function(a, c, b, e) {
    var l = this, h = new mb(this.manager);
    h.setPath(this.path);
    h.load(a, function(a) {
      try {
        var b = JSON.parse(a);
      } catch (ob) {
        console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead."), b = JSON.parse(a.substring(65, a.length - 2));
      }
      a = l.parse(b);
      c && c(a);
    }, b, e);
  }, parse:function(a) {
    return new Ig(a);
  }});
  var hg, Og = {getContext:function() {
    void 0 === hg && (hg = new (window.AudioContext || window.webkitAudioContext));
    return hg;
  }, setContext:function(a) {
    hg = a;
  }};
  Kf.prototype = Object.assign(Object.create(ra.prototype), {constructor:Kf, load:function(a, c, b, e) {
    var l = new mb(this.manager);
    l.setResponseType("arraybuffer");
    l.setPath(this.path);
    l.load(a, function(a) {
      a = a.slice(0);
      Og.getContext().decodeAudioData(a, function(a) {
        c(a);
      });
    }, b, e);
  }});
  Kg.prototype = Object.assign(Object.create(nb.prototype), {constructor:Kg, isHemisphereLightProbe:!0, copy:function(a) {
    nb.prototype.copy.call(this, a);
    return this;
  }, toJSON:function(a) {
    return nb.prototype.toJSON.call(this, a);
  }});
  Lg.prototype = Object.assign(Object.create(nb.prototype), {constructor:Lg, isAmbientLightProbe:!0, copy:function(a) {
    nb.prototype.copy.call(this, a);
    return this;
  }, toJSON:function(a) {
    return nb.prototype.toJSON.call(this, a);
  }});
  var Ui = new n, Vi = new n;
  Object.assign(li.prototype, {update:function(a) {
    var c = this._cache;
    if (c.focus !== a.focus || c.fov !== a.fov || c.aspect !== a.aspect * this.aspect || c.near !== a.near || c.far !== a.far || c.zoom !== a.zoom || c.eyeSep !== this.eyeSep) {
      c.focus = a.focus;
      c.fov = a.fov;
      c.aspect = a.aspect * this.aspect;
      c.near = a.near;
      c.far = a.far;
      c.zoom = a.zoom;
      c.eyeSep = this.eyeSep;
      var b = a.projectionMatrix.clone(), e = c.eyeSep / 2, l = e * c.near / c.focus, h = c.near * Math.tan(oa.DEG2RAD * c.fov * .5) / c.zoom;
      Vi.elements[12] = -e;
      Ui.elements[12] = e;
      e = -h * c.aspect + l;
      var f = h * c.aspect + l;
      b.elements[0] = 2 * c.near / (f - e);
      b.elements[8] = (f + e) / (f - e);
      this.cameraL.projectionMatrix.copy(b);
      e = -h * c.aspect - l;
      f = h * c.aspect - l;
      b.elements[0] = 2 * c.near / (f - e);
      b.elements[8] = (f + e) / (f - e);
      this.cameraR.projectionMatrix.copy(b);
    }
    this.cameraL.matrixWorld.copy(a.matrixWorld).multiply(Vi);
    this.cameraR.matrixWorld.copy(a.matrixWorld).multiply(Ui);
  }});
  Object.assign(Mg.prototype, {start:function() {
    this.oldTime = this.startTime = ("undefined" === typeof performance ? Date : performance).now();
    this.elapsedTime = 0;
    this.running = !0;
  }, stop:function() {
    this.getElapsedTime();
    this.autoStart = this.running = !1;
  }, getElapsedTime:function() {
    this.getDelta();
    return this.elapsedTime;
  }, getDelta:function() {
    var a = 0;
    if (this.autoStart && !this.running) {
      return this.start(), 0;
    }
    if (this.running) {
      var c = ("undefined" === typeof performance ? Date : performance).now();
      a = (c - this.oldTime) / 1E3;
      this.oldTime = c;
      this.elapsedTime += a;
    }
    return a;
  }});
  var Wc = new m, Wi = new q, mk = new m, Xc = new m;
  Ng.prototype = Object.assign(Object.create(t.prototype), {constructor:Ng, getInput:function() {
    return this.gain;
  }, removeFilter:function() {
    null !== this.filter && (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination), this.gain.connect(this.context.destination), this.filter = null);
    return this;
  }, getFilter:function() {
    return this.filter;
  }, setFilter:function(a) {
    null !== this.filter ? (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination)) : this.gain.disconnect(this.context.destination);
    this.filter = a;
    this.gain.connect(this.filter);
    this.filter.connect(this.context.destination);
    return this;
  }, getMasterVolume:function() {
    return this.gain.gain.value;
  }, setMasterVolume:function(a) {
    this.gain.gain.setTargetAtTime(a, this.context.currentTime, .01);
    return this;
  }, updateMatrixWorld:function(a) {
    t.prototype.updateMatrixWorld.call(this, a);
    a = this.context.listener;
    var c = this.up;
    this.timeDelta = this._clock.getDelta();
    this.matrixWorld.decompose(Wc, Wi, mk);
    Xc.set(0, 0, -1).applyQuaternion(Wi);
    if (a.positionX) {
      var b = this.context.currentTime + this.timeDelta;
      a.positionX.linearRampToValueAtTime(Wc.x, b);
      a.positionY.linearRampToValueAtTime(Wc.y, b);
      a.positionZ.linearRampToValueAtTime(Wc.z, b);
      a.forwardX.linearRampToValueAtTime(Xc.x, b);
      a.forwardY.linearRampToValueAtTime(Xc.y, b);
      a.forwardZ.linearRampToValueAtTime(Xc.z, b);
      a.upX.linearRampToValueAtTime(c.x, b);
      a.upY.linearRampToValueAtTime(c.y, b);
      a.upZ.linearRampToValueAtTime(c.z, b);
    } else {
      a.setPosition(Wc.x, Wc.y, Wc.z), a.setOrientation(Xc.x, Xc.y, Xc.z, c.x, c.y, c.z);
    }
  }});
  Cd.prototype = Object.assign(Object.create(t.prototype), {constructor:Cd, getOutput:function() {
    return this.gain;
  }, setNodeSource:function(a) {
    this.hasPlaybackControl = !1;
    this.sourceType = "audioNode";
    this.source = a;
    this.connect();
    return this;
  }, setMediaElementSource:function(a) {
    this.hasPlaybackControl = !1;
    this.sourceType = "mediaNode";
    this.source = this.context.createMediaElementSource(a);
    this.connect();
    return this;
  }, setMediaStreamSource:function(a) {
    this.hasPlaybackControl = !1;
    this.sourceType = "mediaStreamNode";
    this.source = this.context.createMediaStreamSource(a);
    this.connect();
    return this;
  }, setBuffer:function(a) {
    this.buffer = a;
    this.sourceType = "buffer";
    this.autoplay && this.play();
    return this;
  }, play:function(a) {
    void 0 === a && (a = 0);
    if (!0 === this.isPlaying) {
      console.warn("THREE.Audio: Audio is already playing.");
    } else {
      if (!1 === this.hasPlaybackControl) {
        console.warn("THREE.Audio: this Audio has no playback control.");
      } else {
        return this._startedAt = this.context.currentTime + a, a = this.context.createBufferSource(), a.buffer = this.buffer, a.loop = this.loop, a.loopStart = this.loopStart, a.loopEnd = this.loopEnd, a.onended = this.onEnded.bind(this), a.start(this._startedAt, this._progress + this.offset, this.duration), this.isPlaying = !0, this.source = a, this.setDetune(this.detune), this.setPlaybackRate(this.playbackRate), this.connect();
      }
    }
  }, pause:function() {
    if (!1 === this.hasPlaybackControl) {
      console.warn("THREE.Audio: this Audio has no playback control.");
    } else {
      return !0 === this.isPlaying && (this._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate, !0 === this.loop && (this._progress %= this.duration || this.buffer.duration), this.source.stop(), this.source.onended = null, this.isPlaying = !1), this;
    }
  }, stop:function() {
    if (!1 === this.hasPlaybackControl) {
      console.warn("THREE.Audio: this Audio has no playback control.");
    } else {
      return this._progress = 0, this.source.stop(), this.source.onended = null, this.isPlaying = !1, this;
    }
  }, connect:function() {
    if (0 < this.filters.length) {
      this.source.connect(this.filters[0]);
      for (var a = 1, c = this.filters.length; a < c; a++) {
        this.filters[a - 1].connect(this.filters[a]);
      }
      this.filters[this.filters.length - 1].connect(this.getOutput());
    } else {
      this.source.connect(this.getOutput());
    }
    return this;
  }, disconnect:function() {
    if (0 < this.filters.length) {
      this.source.disconnect(this.filters[0]);
      for (var a = 1, c = this.filters.length; a < c; a++) {
        this.filters[a - 1].disconnect(this.filters[a]);
      }
      this.filters[this.filters.length - 1].disconnect(this.getOutput());
    } else {
      this.source.disconnect(this.getOutput());
    }
    return this;
  }, getFilters:function() {
    return this.filters;
  }, setFilters:function(a) {
    a || (a = []);
    !0 === this.isPlaying ? (this.disconnect(), this.filters = a, this.connect()) : this.filters = a;
    return this;
  }, setDetune:function(a) {
    this.detune = a;
    if (void 0 !== this.source.detune) {
      return !0 === this.isPlaying && this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, .01), this;
    }
  }, getDetune:function() {
    return this.detune;
  }, getFilter:function() {
    return this.getFilters()[0];
  }, setFilter:function(a) {
    return this.setFilters(a ? [a] : []);
  }, setPlaybackRate:function(a) {
    if (!1 === this.hasPlaybackControl) {
      console.warn("THREE.Audio: this Audio has no playback control.");
    } else {
      return this.playbackRate = a, !0 === this.isPlaying && this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, .01), this;
    }
  }, getPlaybackRate:function() {
    return this.playbackRate;
  }, onEnded:function() {
    this.isPlaying = !1;
  }, getLoop:function() {
    return !1 === this.hasPlaybackControl ? (console.warn("THREE.Audio: this Audio has no playback control."), !1) : this.loop;
  }, setLoop:function(a) {
    if (!1 === this.hasPlaybackControl) {
      console.warn("THREE.Audio: this Audio has no playback control.");
    } else {
      return this.loop = a, !0 === this.isPlaying && (this.source.loop = this.loop), this;
    }
  }, setLoopStart:function(a) {
    this.loopStart = a;
    return this;
  }, setLoopEnd:function(a) {
    this.loopEnd = a;
    return this;
  }, getVolume:function() {
    return this.gain.gain.value;
  }, setVolume:function(a) {
    this.gain.gain.setTargetAtTime(a, this.context.currentTime, .01);
    return this;
  }});
  var Yc = new m, Xi = new q, nk = new m, Zc = new m;
  Pg.prototype = Object.assign(Object.create(Cd.prototype), {constructor:Pg, getOutput:function() {
    return this.panner;
  }, getRefDistance:function() {
    return this.panner.refDistance;
  }, setRefDistance:function(a) {
    this.panner.refDistance = a;
    return this;
  }, getRolloffFactor:function() {
    return this.panner.rolloffFactor;
  }, setRolloffFactor:function(a) {
    this.panner.rolloffFactor = a;
    return this;
  }, getDistanceModel:function() {
    return this.panner.distanceModel;
  }, setDistanceModel:function(a) {
    this.panner.distanceModel = a;
    return this;
  }, getMaxDistance:function() {
    return this.panner.maxDistance;
  }, setMaxDistance:function(a) {
    this.panner.maxDistance = a;
    return this;
  }, setDirectionalCone:function(a, c, b) {
    this.panner.coneInnerAngle = a;
    this.panner.coneOuterAngle = c;
    this.panner.coneOuterGain = b;
    return this;
  }, updateMatrixWorld:function(a) {
    t.prototype.updateMatrixWorld.call(this, a);
    if (!0 !== this.hasPlaybackControl || !1 !== this.isPlaying) {
      if (this.matrixWorld.decompose(Yc, Xi, nk), Zc.set(0, 0, 1).applyQuaternion(Xi), a = this.panner, a.positionX) {
        var c = this.context.currentTime + this.listener.timeDelta;
        a.positionX.linearRampToValueAtTime(Yc.x, c);
        a.positionY.linearRampToValueAtTime(Yc.y, c);
        a.positionZ.linearRampToValueAtTime(Yc.z, c);
        a.orientationX.linearRampToValueAtTime(Zc.x, c);
        a.orientationY.linearRampToValueAtTime(Zc.y, c);
        a.orientationZ.linearRampToValueAtTime(Zc.z, c);
      } else {
        a.setPosition(Yc.x, Yc.y, Yc.z), a.setOrientation(Zc.x, Zc.y, Zc.z);
      }
    }
  }});
  Object.assign(Qg.prototype, {getFrequencyData:function() {
    this.analyser.getByteFrequencyData(this.data);
    return this.data;
  }, getAverageFrequency:function() {
    for (var a = 0, c = this.getFrequencyData(), b = 0; b < c.length; b++) {
      a += c[b];
    }
    return a / c.length;
  }});
  Object.assign(Rg.prototype, {accumulate:function(a, c) {
    var b = this.buffer, e = this.valueSize;
    a = a * e + e;
    var l = this.cumulativeWeight;
    if (0 === l) {
      for (l = 0; l !== e; ++l) {
        b[a + l] = b[l];
      }
      l = c;
    } else {
      l += c, this._mixBufferRegion(b, a, 0, c / l, e);
    }
    this.cumulativeWeight = l;
  }, accumulateAdditive:function(a) {
    var c = this.buffer, b = this.valueSize, e = b * this._addIndex;
    0 === this.cumulativeWeightAdditive && this._setIdentity();
    this._mixBufferRegionAdditive(c, e, 0, a, b);
    this.cumulativeWeightAdditive += a;
  }, apply:function(a) {
    var c = this.valueSize, b = this.buffer;
    a = a * c + c;
    var e = this.cumulativeWeight, l = this.cumulativeWeightAdditive, h = this.binding;
    this.cumulativeWeightAdditive = this.cumulativeWeight = 0;
    1 > e && this._mixBufferRegion(b, a, c * this._origIndex, 1 - e, c);
    0 < l && this._mixBufferRegionAdditive(b, a, this._addIndex * c, 1, c);
    e = c;
    for (l = c + c; e !== l; ++e) {
      if (b[e] !== b[e + c]) {
        h.setValue(b, a);
        break;
      }
    }
  }, saveOriginalState:function() {
    var a = this.buffer, c = this.valueSize, b = c * this._origIndex;
    this.binding.getValue(a, b);
    for (var e = c; e !== b; ++e) {
      a[e] = a[b + e % c];
    }
    this._setIdentity();
    this.cumulativeWeightAdditive = this.cumulativeWeight = 0;
  }, restoreOriginalState:function() {
    this.binding.setValue(this.buffer, 3 * this.valueSize);
  }, _setAdditiveIdentityNumeric:function() {
    var a = this._addIndex * this.valueSize;
    this.buffer.fill(0, a, a + this.valueSize);
  }, _setAdditiveIdentityQuaternion:function() {
    this._setAdditiveIdentityNumeric();
    this.buffer[4 * this._addIndex + 3] = 1;
  }, _setAdditiveIdentityOther:function() {
    this.buffer.copyWithin(this._addIndex * this.valueSize, this._origIndex * this.valueSize, this.valueSize);
  }, _select:function(a, c, b, e, h) {
    if (.5 <= e) {
      for (e = 0; e !== h; ++e) {
        a[c + e] = a[b + e];
      }
    }
  }, _slerp:function(a, c, b, e) {
    q.slerpFlat(a, c, a, c, a, b, e);
  }, _slerpAdditive:function(a, c, b, e, h) {
    h *= this._workIndex;
    q.multiplyQuaternionsFlat(a, h, a, c, a, b);
    q.slerpFlat(a, c, a, c, a, h, e);
  }, _lerp:function(a, c, b, e, h) {
    for (var l = 1 - e, f = 0; f !== h; ++f) {
      var d = c + f;
      a[d] = a[d] * l + a[b + f] * e;
    }
  }, _lerpAdditive:function(a, c, b, e, h) {
    for (var l = 0; l !== h; ++l) {
      var f = c + l;
      a[f] += a[b + l] * e;
    }
  }});
  var ok = /[\[\]\.:\/]/g, pk = "[^" + "\\[\\]\\.:\\/".replace("\\.", "") + "]", qk = /((?:WC+[\/:])*)/.source.replace("WC", "[^\\[\\]\\.:\\/]"), rk = /(WCOD+)?/.source.replace("WCOD", pk), sk = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", "[^\\[\\]\\.:\\/]"), tk = /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", "[^\\[\\]\\.:\\/]"), uk = new RegExp("^" + qk + rk + sk + tk + "$"), vk = ["material", "materials", "bones"];
  Object.assign(mi.prototype, {getValue:function(a, c) {
    this.bind();
    var b = this._bindings[this._targetGroup.nCachedObjects_];
    void 0 !== b && b.getValue(a, c);
  }, setValue:function(a, c) {
    for (var b = this._bindings, e = this._targetGroup.nCachedObjects_, l = b.length; e !== l; ++e) {
      b[e].setValue(a, c);
    }
  }, bind:function() {
    for (var a = this._bindings, c = this._targetGroup.nCachedObjects_, b = a.length; c !== b; ++c) {
      a[c].bind();
    }
  }, unbind:function() {
    for (var a = this._bindings, c = this._targetGroup.nCachedObjects_, b = a.length; c !== b; ++c) {
      a[c].unbind();
    }
  }});
  Object.assign(Xa, {Composite:mi, create:function(a, c, b) {
    return a && a.isAnimationObjectGroup ? new Xa.Composite(a, c, b) : new Xa(a, c, b);
  }, sanitizeNodeName:function(a) {
    return a.replace(/\s/g, "_").replace(ok, "");
  }, parseTrackName:function(a) {
    var c = uk.exec(a);
    if (!c) {
      throw Error("PropertyBinding: Cannot parse trackName: " + a);
    }
    c = {nodeName:c[2], objectName:c[3], objectIndex:c[4], propertyName:c[5], propertyIndex:c[6]};
    var b = c.nodeName && c.nodeName.lastIndexOf(".");
    if (void 0 !== b && -1 !== b) {
      var e = c.nodeName.substring(b + 1);
      -1 !== vk.indexOf(e) && (c.nodeName = c.nodeName.substring(0, b), c.objectName = e);
    }
    if (null === c.propertyName || 0 === c.propertyName.length) {
      throw Error("PropertyBinding: can not parse propertyName from trackName: " + a);
    }
    return c;
  }, findNode:function(a, c) {
    if (!c || "" === c || "." === c || -1 === c || c === a.name || c === a.uuid) {
      return a;
    }
    if (a.skeleton) {
      var b = a.skeleton.getBoneByName(c);
      if (void 0 !== b) {
        return b;
      }
    }
    if (a.children) {
      var e = function(a) {
        for (var b = 0; b < a.length; b++) {
          var l = a[b];
          if (l.name === c || l.uuid === c || (l = e(l.children))) {
            return l;
          }
        }
        return null;
      };
      if (a = e(a.children)) {
        return a;
      }
    }
    return null;
  }});
  Object.assign(Xa.prototype, {_getValue_unavailable:function() {
  }, _setValue_unavailable:function() {
  }, BindingType:{Direct:0, EntireArray:1, ArrayElement:2, HasFromToArray:3}, Versioning:{None:0, NeedsUpdate:1, MatrixWorldNeedsUpdate:2}, GetterByBindingType:[function(a, c) {
    a[c] = this.node[this.propertyName];
  }, function(a, c) {
    for (var b = this.resolvedProperty, e = 0, l = b.length; e !== l; ++e) {
      a[c++] = b[e];
    }
  }, function(a, c) {
    a[c] = this.resolvedProperty[this.propertyIndex];
  }, function(a, c) {
    this.resolvedProperty.toArray(a, c);
  }], SetterByBindingTypeAndVersioning:[[function(a, c) {
    this.targetObject[this.propertyName] = a[c];
  }, function(a, c) {
    this.targetObject[this.propertyName] = a[c];
    this.targetObject.needsUpdate = !0;
  }, function(a, c) {
    this.targetObject[this.propertyName] = a[c];
    this.targetObject.matrixWorldNeedsUpdate = !0;
  }], [function(a, c) {
    for (var b = this.resolvedProperty, e = 0, h = b.length; e !== h; ++e) {
      b[e] = a[c++];
    }
  }, function(a, c) {
    for (var b = this.resolvedProperty, e = 0, h = b.length; e !== h; ++e) {
      b[e] = a[c++];
    }
    this.targetObject.needsUpdate = !0;
  }, function(a, c) {
    for (var b = this.resolvedProperty, e = 0, h = b.length; e !== h; ++e) {
      b[e] = a[c++];
    }
    this.targetObject.matrixWorldNeedsUpdate = !0;
  }], [function(a, c) {
    this.resolvedProperty[this.propertyIndex] = a[c];
  }, function(a, c) {
    this.resolvedProperty[this.propertyIndex] = a[c];
    this.targetObject.needsUpdate = !0;
  }, function(a, c) {
    this.resolvedProperty[this.propertyIndex] = a[c];
    this.targetObject.matrixWorldNeedsUpdate = !0;
  }], [function(a, c) {
    this.resolvedProperty.fromArray(a, c);
  }, function(a, c) {
    this.resolvedProperty.fromArray(a, c);
    this.targetObject.needsUpdate = !0;
  }, function(a, c) {
    this.resolvedProperty.fromArray(a, c);
    this.targetObject.matrixWorldNeedsUpdate = !0;
  }]], getValue:function(a, c) {
    this.bind();
    this.getValue(a, c);
  }, setValue:function(a, c) {
    this.bind();
    this.setValue(a, c);
  }, bind:function() {
    var a = this.node, c = this.parsedPath, b = c.objectName, e = c.propertyName, h = c.propertyIndex;
    a || (this.node = a = Xa.findNode(this.rootNode, c.nodeName) || this.rootNode);
    this.getValue = this._getValue_unavailable;
    this.setValue = this._setValue_unavailable;
    if (a) {
      if (b) {
        var f = c.objectIndex;
        switch(b) {
          case "materials":
            if (!a.material) {
              console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
              return;
            }
            if (!a.material.materials) {
              console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
              return;
            }
            a = a.material.materials;
            break;
          case "bones":
            if (!a.skeleton) {
              console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
              return;
            }
            a = a.skeleton.bones;
            for (b = 0; b < a.length; b++) {
              if (a[b].name === f) {
                f = b;
                break;
              }
            }
            break;
          default:
            if (void 0 === a[b]) {
              console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
              return;
            }
            a = a[b];
        }
        if (void 0 !== f) {
          if (void 0 === a[f]) {
            console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, a);
            return;
          }
          a = a[f];
        }
      }
      f = a[e];
      if (void 0 === f) {
        console.error("THREE.PropertyBinding: Trying to update property for track: " + c.nodeName + "." + e + " but it wasn't found.", a);
      } else {
        c = this.Versioning.None;
        this.targetObject = a;
        void 0 !== a.needsUpdate ? c = this.Versioning.NeedsUpdate : void 0 !== a.matrixWorldNeedsUpdate && (c = this.Versioning.MatrixWorldNeedsUpdate);
        b = this.BindingType.Direct;
        if (void 0 !== h) {
          if ("morphTargetInfluences" === e) {
            if (!a.geometry) {
              console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
              return;
            }
            if (a.geometry.isBufferGeometry) {
              if (!a.geometry.morphAttributes) {
                console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
                return;
              }
              for (b = 0; b < this.node.geometry.morphAttributes.position.length; b++) {
                if (a.geometry.morphAttributes.position[b].name === h) {
                  h = b;
                  break;
                }
              }
            } else {
              if (!a.geometry.morphTargets) {
                console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.", this);
                return;
              }
              for (b = 0; b < this.node.geometry.morphTargets.length; b++) {
                if (a.geometry.morphTargets[b].name === h) {
                  h = b;
                  break;
                }
              }
            }
          }
          b = this.BindingType.ArrayElement;
          this.resolvedProperty = f;
          this.propertyIndex = h;
        } else {
          void 0 !== f.fromArray && void 0 !== f.toArray ? (b = this.BindingType.HasFromToArray, this.resolvedProperty = f) : Array.isArray(f) ? (b = this.BindingType.EntireArray, this.resolvedProperty = f) : this.propertyName = e;
        }
        this.getValue = this.GetterByBindingType[b];
        this.setValue = this.SetterByBindingTypeAndVersioning[b][c];
      }
    } else {
      console.error("THREE.PropertyBinding: Trying to update node for track: " + this.path + " but it wasn't found.");
    }
  }, unbind:function() {
    this.node = null;
    this.getValue = this._getValue_unbound;
    this.setValue = this._setValue_unbound;
  }});
  Object.assign(Xa.prototype, {_getValue_unbound:Xa.prototype.getValue, _setValue_unbound:Xa.prototype.setValue});
  Object.assign(ni.prototype, {isAnimationObjectGroup:!0, add:function() {
    for (var a = this._objects, c = a.length, b = this.nCachedObjects_, e = this._indicesByUUID, h = this._paths, f = this._parsedPaths, d = this._bindings, g = d.length, m = void 0, p = 0, n = arguments.length; p !== n; ++p) {
      var k = arguments[p], q = k.uuid, r = e[q];
      if (void 0 === r) {
        r = c++;
        e[q] = r;
        a.push(k);
        q = 0;
        for (var t = g; q !== t; ++q) {
          d[q].push(new Xa(k, h[q], f[q]));
        }
      } else {
        if (r < b) {
          m = a[r];
          var v = --b;
          t = a[v];
          e[t.uuid] = r;
          a[r] = t;
          e[q] = v;
          a[v] = k;
          q = 0;
          for (t = g; q !== t; ++q) {
            var z = d[q], w = z[r];
            z[r] = z[v];
            void 0 === w && (w = new Xa(k, h[q], f[q]));
            z[v] = w;
          }
        } else {
          a[r] !== m && console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.");
        }
      }
    }
    this.nCachedObjects_ = b;
  }, remove:function() {
    for (var a = this._objects, c = this.nCachedObjects_, b = this._indicesByUUID, e = this._bindings, h = e.length, f = 0, d = arguments.length; f !== d; ++f) {
      var g = arguments[f], m = g.uuid, p = b[m];
      if (void 0 !== p && p >= c) {
        var n = c++, k = a[n];
        b[k.uuid] = p;
        a[p] = k;
        b[m] = n;
        a[n] = g;
        g = 0;
        for (m = h; g !== m; ++g) {
          k = e[g];
          var q = k[p];
          k[p] = k[n];
          k[n] = q;
        }
      }
    }
    this.nCachedObjects_ = c;
  }, uncache:function() {
    for (var a = this._objects, c = a.length, b = this.nCachedObjects_, e = this._indicesByUUID, h = this._bindings, f = h.length, d = 0, g = arguments.length; d !== g; ++d) {
      var m = arguments[d].uuid, p = e[m];
      if (void 0 !== p) {
        if (delete e[m], p < b) {
          m = --b;
          var n = a[m], k = --c, q = a[k];
          e[n.uuid] = p;
          a[p] = n;
          e[q.uuid] = m;
          a[m] = q;
          a.pop();
          n = 0;
          for (q = f; n !== q; ++n) {
            var r = h[n], t = r[k];
            r[p] = r[m];
            r[m] = t;
            r.pop();
          }
        } else {
          for (k = --c, q = a[k], e[q.uuid] = p, a[p] = q, a.pop(), n = 0, q = f; n !== q; ++n) {
            r = h[n], r[p] = r[k], r.pop();
          }
        }
      }
    }
    this.nCachedObjects_ = b;
  }, subscribe_:function(a, c) {
    var b = this._bindingsIndicesByPath, e = b[a], h = this._bindings;
    if (void 0 !== e) {
      return h[e];
    }
    var l = this._paths, f = this._parsedPaths, d = this._objects, g = this.nCachedObjects_, m = Array(d.length);
    e = h.length;
    b[a] = e;
    l.push(a);
    f.push(c);
    h.push(m);
    b = g;
    for (e = d.length; b !== e; ++b) {
      m[b] = new Xa(d[b], a, c);
    }
    return m;
  }, unsubscribe_:function(a) {
    var c = this._bindingsIndicesByPath, b = c[a];
    if (void 0 !== b) {
      var e = this._paths, h = this._parsedPaths, l = this._bindings, f = l.length - 1, d = l[f];
      c[a[f]] = b;
      l[b] = d;
      l.pop();
      h[b] = h[f];
      h.pop();
      e[b] = e[f];
      e.pop();
    }
  }});
  Object.assign(oi.prototype, {play:function() {
    this._mixer._activateAction(this);
    return this;
  }, stop:function() {
    this._mixer._deactivateAction(this);
    return this.reset();
  }, reset:function() {
    this.paused = !1;
    this.enabled = !0;
    this.time = 0;
    this._loopCount = -1;
    this._startTime = null;
    return this.stopFading().stopWarping();
  }, isRunning:function() {
    return this.enabled && !this.paused && 0 !== this.timeScale && null === this._startTime && this._mixer._isActiveAction(this);
  }, isScheduled:function() {
    return this._mixer._isActiveAction(this);
  }, startAt:function(a) {
    this._startTime = a;
    return this;
  }, setLoop:function(a, c) {
    this.loop = a;
    this.repetitions = c;
    return this;
  }, setEffectiveWeight:function(a) {
    this.weight = a;
    this._effectiveWeight = this.enabled ? a : 0;
    return this.stopFading();
  }, getEffectiveWeight:function() {
    return this._effectiveWeight;
  }, fadeIn:function(a) {
    return this._scheduleFading(a, 0, 1);
  }, fadeOut:function(a) {
    return this._scheduleFading(a, 1, 0);
  }, crossFadeFrom:function(a, c, b) {
    a.fadeOut(c);
    this.fadeIn(c);
    if (b) {
      b = this._clip.duration;
      var e = a._clip.duration, h = b / e;
      a.warp(1, e / b, c);
      this.warp(h, 1, c);
    }
    return this;
  }, crossFadeTo:function(a, c, b) {
    return a.crossFadeFrom(this, c, b);
  }, stopFading:function() {
    var a = this._weightInterpolant;
    null !== a && (this._weightInterpolant = null, this._mixer._takeBackControlInterpolant(a));
    return this;
  }, setEffectiveTimeScale:function(a) {
    this.timeScale = a;
    this._effectiveTimeScale = this.paused ? 0 : a;
    return this.stopWarping();
  }, getEffectiveTimeScale:function() {
    return this._effectiveTimeScale;
  }, setDuration:function(a) {
    this.timeScale = this._clip.duration / a;
    return this.stopWarping();
  }, syncWith:function(a) {
    this.time = a.time;
    this.timeScale = a.timeScale;
    return this.stopWarping();
  }, halt:function(a) {
    return this.warp(this._effectiveTimeScale, 0, a);
  }, warp:function(a, c, b) {
    var e = this._mixer, h = e.time, l = this._timeScaleInterpolant, f = this.timeScale;
    null === l && (this._timeScaleInterpolant = l = e._lendControlInterpolant());
    e = l.parameterPositions;
    l = l.sampleValues;
    e[0] = h;
    e[1] = h + b;
    l[0] = a / f;
    l[1] = c / f;
    return this;
  }, stopWarping:function() {
    var a = this._timeScaleInterpolant;
    null !== a && (this._timeScaleInterpolant = null, this._mixer._takeBackControlInterpolant(a));
    return this;
  }, getMixer:function() {
    return this._mixer;
  }, getClip:function() {
    return this._clip;
  }, getRoot:function() {
    return this._localRoot || this._mixer._root;
  }, _update:function(a, c, b, e) {
    if (this.enabled) {
      var h = this._startTime;
      if (null !== h) {
        c = (a - h) * b;
        if (0 > c || 0 === b) {
          return;
        }
        this._startTime = null;
        c *= b;
      }
      c *= this._updateTimeScale(a);
      b = this._updateTime(c);
      a = this._updateWeight(a);
      if (0 < a) {
        switch(c = this._interpolants, h = this._propertyBindings, this.blendMode) {
          case 2501:
            for (var l = 0, f = c.length; l !== f; ++l) {
              c[l].evaluate(b), h[l].accumulateAdditive(a);
            }
            break;
          default:
            for (l = 0, f = c.length; l !== f; ++l) {
              c[l].evaluate(b), h[l].accumulate(e, a);
            }
        }
      }
    } else {
      this._updateWeight(a);
    }
  }, _updateWeight:function(a) {
    var c = 0;
    if (this.enabled) {
      c = this.weight;
      var b = this._weightInterpolant;
      if (null !== b) {
        var e = b.evaluate(a)[0];
        c *= e;
        a > b.parameterPositions[1] && (this.stopFading(), 0 === e && (this.enabled = !1));
      }
    }
    return this._effectiveWeight = c;
  }, _updateTimeScale:function(a) {
    var c = 0;
    if (!this.paused) {
      c = this.timeScale;
      var b = this._timeScaleInterpolant;
      if (null !== b) {
        var e = b.evaluate(a)[0];
        c *= e;
        a > b.parameterPositions[1] && (this.stopWarping(), 0 === c ? this.paused = !0 : this.timeScale = c);
      }
    }
    return this._effectiveTimeScale = c;
  }, _updateTime:function(a) {
    var c = this.time + a, b = this._clip.duration, e = this.loop, h = this._loopCount, l = 2202 === e;
    if (0 === a) {
      return -1 === h ? c : l && 1 === (h & 1) ? b - c : c;
    }
    if (2200 === e) {
      a: {
        if (-1 === h && (this._loopCount = 0, this._setEndings(!0, !0, !1)), c >= b) {
          c = b;
        } else {
          if (0 > c) {
            c = 0;
          } else {
            this.time = c;
            break a;
          }
        }
        this.clampWhenFinished ? this.paused = !0 : this.enabled = !1;
        this.time = c;
        this._mixer.dispatchEvent({type:"finished", action:this, direction:0 > a ? -1 : 1});
      }
    } else {
      -1 === h && (0 <= a ? (h = 0, this._setEndings(!0, 0 === this.repetitions, l)) : this._setEndings(0 === this.repetitions, !0, l));
      if (c >= b || 0 > c) {
        e = Math.floor(c / b);
        c -= b * e;
        h += Math.abs(e);
        var f = this.repetitions - h;
        0 >= f ? (this.clampWhenFinished ? this.paused = !0 : this.enabled = !1, this.time = c = 0 < a ? b : 0, this._mixer.dispatchEvent({type:"finished", action:this, direction:0 < a ? 1 : -1})) : (1 === f ? (a = 0 > a, this._setEndings(a, !a, l)) : this._setEndings(!1, !1, l), this._loopCount = h, this.time = c, this._mixer.dispatchEvent({type:"loop", action:this, loopDelta:e}));
      } else {
        this.time = c;
      }
      if (l && 1 === (h & 1)) {
        return b - c;
      }
    }
    return c;
  }, _setEndings:function(a, c, b) {
    var e = this._interpolantSettings;
    b ? (e.endingStart = 2401, e.endingEnd = 2401) : (e.endingStart = a ? this.zeroSlopeAtStart ? 2401 : 2400 : 2402, e.endingEnd = c ? this.zeroSlopeAtEnd ? 2401 : 2400 : 2402);
  }, _scheduleFading:function(a, c, b) {
    var e = this._mixer, h = e.time, l = this._weightInterpolant;
    null === l && (this._weightInterpolant = l = e._lendControlInterpolant());
    e = l.parameterPositions;
    l = l.sampleValues;
    e[0] = h;
    l[0] = c;
    e[1] = h + a;
    l[1] = b;
    return this;
  }});
  Sg.prototype = Object.assign(Object.create(d.prototype), {constructor:Sg, _bindAction:function(a, c) {
    var b = a._localRoot || this._root, e = a._clip.tracks, h = e.length, l = a._propertyBindings;
    a = a._interpolants;
    var f = b.uuid, d = this._bindingsByRootAndName, g = d[f];
    void 0 === g && (g = {}, d[f] = g);
    for (d = 0; d !== h; ++d) {
      var m = e[d], p = m.name, n = g[p];
      if (void 0 === n) {
        n = l[d];
        if (void 0 !== n) {
          null === n._cacheIndex && (++n.referenceCount, this._addInactiveBinding(n, f, p));
          continue;
        }
        n = new Rg(Xa.create(b, p, c && c._propertyBindings[d].binding.parsedPath), m.ValueTypeName, m.getValueSize());
        ++n.referenceCount;
        this._addInactiveBinding(n, f, p);
      }
      l[d] = n;
      a[d].resultBuffer = n.buffer;
    }
  }, _activateAction:function(a) {
    if (!this._isActiveAction(a)) {
      if (null === a._cacheIndex) {
        var c = (a._localRoot || this._root).uuid, b = a._clip.uuid, e = this._actionsByClip[b];
        this._bindAction(a, e && e.knownActions[0]);
        this._addInactiveAction(a, b, c);
      }
      c = a._propertyBindings;
      b = 0;
      for (e = c.length; b !== e; ++b) {
        var h = c[b];
        0 === h.useCount++ && (this._lendBinding(h), h.saveOriginalState());
      }
      this._lendAction(a);
    }
  }, _deactivateAction:function(a) {
    if (this._isActiveAction(a)) {
      for (var c = a._propertyBindings, b = 0, e = c.length; b !== e; ++b) {
        var h = c[b];
        0 === --h.useCount && (h.restoreOriginalState(), this._takeBackBinding(h));
      }
      this._takeBackAction(a);
    }
  }, _initMemoryManager:function() {
    this._actions = [];
    this._nActiveActions = 0;
    this._actionsByClip = {};
    this._bindings = [];
    this._nActiveBindings = 0;
    this._bindingsByRootAndName = {};
    this._controlInterpolants = [];
    this._nActiveControlInterpolants = 0;
    var a = this;
    this.stats = {actions:{get total() {
      return a._actions.length;
    }, get inUse() {
      return a._nActiveActions;
    }}, bindings:{get total() {
      return a._bindings.length;
    }, get inUse() {
      return a._nActiveBindings;
    }}, controlInterpolants:{get total() {
      return a._controlInterpolants.length;
    }, get inUse() {
      return a._nActiveControlInterpolants;
    }}};
  }, _isActiveAction:function(a) {
    a = a._cacheIndex;
    return null !== a && a < this._nActiveActions;
  }, _addInactiveAction:function(a, c, b) {
    var e = this._actions, h = this._actionsByClip, l = h[c];
    void 0 === l ? (l = {knownActions:[a], actionByRoot:{}}, a._byClipCacheIndex = 0, h[c] = l) : (c = l.knownActions, a._byClipCacheIndex = c.length, c.push(a));
    a._cacheIndex = e.length;
    e.push(a);
    l.actionByRoot[b] = a;
  }, _removeInactiveAction:function(a) {
    var c = this._actions, b = c[c.length - 1], e = a._cacheIndex;
    b._cacheIndex = e;
    c[e] = b;
    c.pop();
    a._cacheIndex = null;
    c = a._clip.uuid;
    b = this._actionsByClip;
    e = b[c];
    var h = e.knownActions, l = h[h.length - 1], f = a._byClipCacheIndex;
    l._byClipCacheIndex = f;
    h[f] = l;
    h.pop();
    a._byClipCacheIndex = null;
    delete e.actionByRoot[(a._localRoot || this._root).uuid];
    0 === h.length && delete b[c];
    this._removeInactiveBindingsForAction(a);
  }, _removeInactiveBindingsForAction:function(a) {
    a = a._propertyBindings;
    for (var c = 0, b = a.length; c !== b; ++c) {
      var e = a[c];
      0 === --e.referenceCount && this._removeInactiveBinding(e);
    }
  }, _lendAction:function(a) {
    var c = this._actions, b = a._cacheIndex, e = this._nActiveActions++, h = c[e];
    a._cacheIndex = e;
    c[e] = a;
    h._cacheIndex = b;
    c[b] = h;
  }, _takeBackAction:function(a) {
    var c = this._actions, b = a._cacheIndex, e = --this._nActiveActions, h = c[e];
    a._cacheIndex = e;
    c[e] = a;
    h._cacheIndex = b;
    c[b] = h;
  }, _addInactiveBinding:function(a, c, b) {
    var e = this._bindingsByRootAndName, h = e[c], l = this._bindings;
    void 0 === h && (h = {}, e[c] = h);
    h[b] = a;
    a._cacheIndex = l.length;
    l.push(a);
  }, _removeInactiveBinding:function(a) {
    var c = this._bindings, b = a.binding, e = b.rootNode.uuid;
    b = b.path;
    var h = this._bindingsByRootAndName, l = h[e], f = c[c.length - 1];
    a = a._cacheIndex;
    f._cacheIndex = a;
    c[a] = f;
    c.pop();
    delete l[b];
    0 === Object.keys(l).length && delete h[e];
  }, _lendBinding:function(a) {
    var c = this._bindings, b = a._cacheIndex, e = this._nActiveBindings++, h = c[e];
    a._cacheIndex = e;
    c[e] = a;
    h._cacheIndex = b;
    c[b] = h;
  }, _takeBackBinding:function(a) {
    var c = this._bindings, b = a._cacheIndex, e = --this._nActiveBindings, h = c[e];
    a._cacheIndex = e;
    c[e] = a;
    h._cacheIndex = b;
    c[b] = h;
  }, _lendControlInterpolant:function() {
    var a = this._controlInterpolants, c = this._nActiveControlInterpolants++, b = a[c];
    void 0 === b && (b = new Be(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer), b.__cacheIndex = c, a[c] = b);
    return b;
  }, _takeBackControlInterpolant:function(a) {
    var c = this._controlInterpolants, b = a.__cacheIndex, e = --this._nActiveControlInterpolants, h = c[e];
    a.__cacheIndex = e;
    c[e] = a;
    h.__cacheIndex = b;
    c[b] = h;
  }, _controlInterpolantsResultBuffer:new Float32Array(1), clipAction:function(a, c, b) {
    var e = c || this._root, h = e.uuid;
    e = "string" === typeof a ? lb.findByName(e, a) : a;
    a = null !== e ? e.uuid : a;
    var l = this._actionsByClip[a], f = null;
    void 0 === b && (b = null !== e ? e.blendMode : 2500);
    if (void 0 !== l) {
      f = l.actionByRoot[h];
      if (void 0 !== f && f.blendMode === b) {
        return f;
      }
      f = l.knownActions[0];
      null === e && (e = f._clip);
    }
    if (null === e) {
      return null;
    }
    c = new oi(this, e, c, b);
    this._bindAction(c, f);
    this._addInactiveAction(c, a, h);
    return c;
  }, existingAction:function(a, c) {
    var b = c || this._root;
    c = b.uuid;
    b = "string" === typeof a ? lb.findByName(b, a) : a;
    a = this._actionsByClip[b ? b.uuid : a];
    return void 0 !== a ? a.actionByRoot[c] || null : null;
  }, stopAllAction:function() {
    for (var a = this._actions, c = this._nActiveActions, b = this._bindings, e = this._nActiveBindings, h = this._nActiveBindings = this._nActiveActions = 0; h !== c; ++h) {
      a[h].reset();
    }
    for (h = 0; h !== e; ++h) {
      b[h].useCount = 0;
    }
    return this;
  }, update:function(a) {
    a *= this.timeScale;
    for (var c = this._actions, b = this._nActiveActions, e = this.time += a, h = Math.sign(a), l = this._accuIndex ^= 1, f = 0; f !== b; ++f) {
      c[f]._update(e, a, h, l);
    }
    a = this._bindings;
    c = this._nActiveBindings;
    for (f = 0; f !== c; ++f) {
      a[f].apply(l);
    }
    return this;
  }, setTime:function(a) {
    for (var c = this.time = 0; c < this._actions.length; c++) {
      this._actions[c].time = 0;
    }
    return this.update(a);
  }, getRoot:function() {
    return this._root;
  }, uncacheClip:function(a) {
    var c = this._actions;
    a = a.uuid;
    var b = this._actionsByClip, e = b[a];
    if (void 0 !== e) {
      e = e.knownActions;
      for (var h = 0, l = e.length; h !== l; ++h) {
        var f = e[h];
        this._deactivateAction(f);
        var d = f._cacheIndex, g = c[c.length - 1];
        f._cacheIndex = null;
        f._byClipCacheIndex = null;
        g._cacheIndex = d;
        c[d] = g;
        c.pop();
        this._removeInactiveBindingsForAction(f);
      }
      delete b[a];
    }
  }, uncacheRoot:function(a) {
    a = a.uuid;
    var c = this._actionsByClip;
    for (e in c) {
      var b = c[e].actionByRoot[a];
      void 0 !== b && (this._deactivateAction(b), this._removeInactiveAction(b));
    }
    var e = this._bindingsByRootAndName[a];
    if (void 0 !== e) {
      for (var h in e) {
        a = e[h], a.restoreOriginalState(), this._removeInactiveBinding(a);
      }
    }
  }, uncacheAction:function(a, c) {
    a = this.existingAction(a, c);
    null !== a && (this._deactivateAction(a), this._removeInactiveAction(a));
  }});
  Lf.prototype.clone = function() {
    return new Lf(void 0 === this.value.clone ? this.value : this.value.clone());
  };
  Tg.prototype = Object.assign(Object.create(Sb.prototype), {constructor:Tg, isInstancedInterleavedBuffer:!0, copy:function(a) {
    Sb.prototype.copy.call(this, a);
    this.meshPerAttribute = a.meshPerAttribute;
    return this;
  }});
  Object.assign(Ug.prototype, {set:function(a, c) {
    this.ray.set(a, c);
  }, setFromCamera:function(a, c) {
    c && c.isPerspectiveCamera ? (this.ray.origin.setFromMatrixPosition(c.matrixWorld), this.ray.direction.set(a.x, a.y, .5).unproject(c).sub(this.ray.origin).normalize(), this.camera = c) : c && c.isOrthographicCamera ? (this.ray.origin.set(a.x, a.y, (c.near + c.far) / (c.near - c.far)).unproject(c), this.ray.direction.set(0, 0, -1).transformDirection(c.matrixWorld), this.camera = c) : console.error("THREE.Raycaster: Unsupported camera type.");
  }, intersectObject:function(a, c, b) {
    b = b || [];
    Vg(a, this, b, c);
    b.sort(pi);
    return b;
  }, intersectObjects:function(a, c, b) {
    b = b || [];
    if (!1 === Array.isArray(a)) {
      return console.warn("THREE.Raycaster.intersectObjects: objects is not an Array."), b;
    }
    for (var e = 0, h = a.length; e < h; e++) {
      Vg(a[e], this, b, c);
    }
    b.sort(pi);
    return b;
  }});
  Object.assign(qi.prototype, {set:function(a, c, b) {
    this.radius = a;
    this.phi = c;
    this.theta = b;
    return this;
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(a) {
    this.radius = a.radius;
    this.phi = a.phi;
    this.theta = a.theta;
    return this;
  }, makeSafe:function() {
    this.phi = Math.max(1E-6, Math.min(Math.PI - 1E-6, this.phi));
    return this;
  }, setFromVector3:function(a) {
    return this.setFromCartesianCoords(a.x, a.y, a.z);
  }, setFromCartesianCoords:function(a, c, b) {
    this.radius = Math.sqrt(a * a + c * c + b * b);
    0 === this.radius ? this.phi = this.theta = 0 : (this.theta = Math.atan2(a, b), this.phi = Math.acos(oa.clamp(c / this.radius, -1, 1)));
    return this;
  }});
  Object.assign(ri.prototype, {set:function(a, c, b) {
    this.radius = a;
    this.theta = c;
    this.y = b;
    return this;
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(a) {
    this.radius = a.radius;
    this.theta = a.theta;
    this.y = a.y;
    return this;
  }, setFromVector3:function(a) {
    return this.setFromCartesianCoords(a.x, a.y, a.z);
  }, setFromCartesianCoords:function(a, c, b) {
    this.radius = Math.sqrt(a * a + b * b);
    this.theta = Math.atan2(a, b);
    this.y = c;
    return this;
  }});
  var Yi = new k;
  Object.assign(Wg.prototype, {set:function(a, c) {
    this.min.copy(a);
    this.max.copy(c);
    return this;
  }, setFromPoints:function(a) {
    this.makeEmpty();
    for (var c = 0, b = a.length; c < b; c++) {
      this.expandByPoint(a[c]);
    }
    return this;
  }, setFromCenterAndSize:function(a, c) {
    c = Yi.copy(c).multiplyScalar(.5);
    this.min.copy(a).sub(c);
    this.max.copy(a).add(c);
    return this;
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(a) {
    this.min.copy(a.min);
    this.max.copy(a.max);
    return this;
  }, makeEmpty:function() {
    this.min.x = this.min.y = Infinity;
    this.max.x = this.max.y = -Infinity;
    return this;
  }, isEmpty:function() {
    return this.max.x < this.min.x || this.max.y < this.min.y;
  }, getCenter:function(a) {
    void 0 === a && (console.warn("THREE.Box2: .getCenter() target is now required"), a = new k);
    return this.isEmpty() ? a.set(0, 0) : a.addVectors(this.min, this.max).multiplyScalar(.5);
  }, getSize:function(a) {
    void 0 === a && (console.warn("THREE.Box2: .getSize() target is now required"), a = new k);
    return this.isEmpty() ? a.set(0, 0) : a.subVectors(this.max, this.min);
  }, expandByPoint:function(a) {
    this.min.min(a);
    this.max.max(a);
    return this;
  }, expandByVector:function(a) {
    this.min.sub(a);
    this.max.add(a);
    return this;
  }, expandByScalar:function(a) {
    this.min.addScalar(-a);
    this.max.addScalar(a);
    return this;
  }, containsPoint:function(a) {
    return a.x < this.min.x || a.x > this.max.x || a.y < this.min.y || a.y > this.max.y ? !1 : !0;
  }, containsBox:function(a) {
    return this.min.x <= a.min.x && a.max.x <= this.max.x && this.min.y <= a.min.y && a.max.y <= this.max.y;
  }, getParameter:function(a, c) {
    void 0 === c && (console.warn("THREE.Box2: .getParameter() target is now required"), c = new k);
    return c.set((a.x - this.min.x) / (this.max.x - this.min.x), (a.y - this.min.y) / (this.max.y - this.min.y));
  }, intersectsBox:function(a) {
    return a.max.x < this.min.x || a.min.x > this.max.x || a.max.y < this.min.y || a.min.y > this.max.y ? !1 : !0;
  }, clampPoint:function(a, c) {
    void 0 === c && (console.warn("THREE.Box2: .clampPoint() target is now required"), c = new k);
    return c.copy(a).clamp(this.min, this.max);
  }, distanceToPoint:function(a) {
    return Yi.copy(a).clamp(this.min, this.max).sub(a).length();
  }, intersect:function(a) {
    this.min.max(a.min);
    this.max.min(a.max);
    return this;
  }, union:function(a) {
    this.min.min(a.min);
    this.max.max(a.max);
    return this;
  }, translate:function(a) {
    this.min.add(a);
    this.max.add(a);
    return this;
  }, equals:function(a) {
    return a.min.equals(this.min) && a.max.equals(this.max);
  }});
  var Zi = new m, ig = new m;
  Object.assign(Xg.prototype, {set:function(a, c) {
    this.start.copy(a);
    this.end.copy(c);
    return this;
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(a) {
    this.start.copy(a.start);
    this.end.copy(a.end);
    return this;
  }, getCenter:function(a) {
    void 0 === a && (console.warn("THREE.Line3: .getCenter() target is now required"), a = new m);
    return a.addVectors(this.start, this.end).multiplyScalar(.5);
  }, delta:function(a) {
    void 0 === a && (console.warn("THREE.Line3: .delta() target is now required"), a = new m);
    return a.subVectors(this.end, this.start);
  }, distanceSq:function() {
    return this.start.distanceToSquared(this.end);
  }, distance:function() {
    return this.start.distanceTo(this.end);
  }, at:function(a, c) {
    void 0 === c && (console.warn("THREE.Line3: .at() target is now required"), c = new m);
    return this.delta(c).multiplyScalar(a).add(this.start);
  }, closestPointToPointParameter:function(a, c) {
    Zi.subVectors(a, this.start);
    ig.subVectors(this.end, this.start);
    a = ig.dot(ig);
    a = ig.dot(Zi) / a;
    c && (a = oa.clamp(a, 0, 1));
    return a;
  }, closestPointToPoint:function(a, c, b) {
    a = this.closestPointToPointParameter(a, c);
    void 0 === b && (console.warn("THREE.Line3: .closestPointToPoint() target is now required"), b = new m);
    return this.delta(b).multiplyScalar(a).add(this.start);
  }, applyMatrix4:function(a) {
    this.start.applyMatrix4(a);
    this.end.applyMatrix4(a);
    return this;
  }, equals:function(a) {
    return a.start.equals(this.start) && a.end.equals(this.end);
  }});
  Fe.prototype = Object.create(t.prototype);
  Fe.prototype.constructor = Fe;
  Fe.prototype.isImmediateRenderObject = !0;
  var $i = new m;
  Dd.prototype = Object.create(t.prototype);
  Dd.prototype.constructor = Dd;
  Dd.prototype.dispose = function() {
    this.cone.geometry.dispose();
    this.cone.material.dispose();
  };
  Dd.prototype.update = function() {
    this.light.updateMatrixWorld();
    var a = this.light.distance ? this.light.distance : 1E3, c = a * Math.tan(this.light.angle);
    this.cone.scale.set(c, c, a);
    $i.setFromMatrixPosition(this.light.target.matrixWorld);
    this.cone.lookAt($i);
    void 0 !== this.color ? this.cone.material.color.set(this.color) : this.cone.material.color.copy(this.light.color);
  };
  var wc = new m, jg = new n, yh = new n;
  Rc.prototype = Object.create(Da.prototype);
  Rc.prototype.constructor = Rc;
  Rc.prototype.isSkeletonHelper = !0;
  Rc.prototype.updateMatrixWorld = function(a) {
    var c = this.bones, b = this.geometry, e = b.getAttribute("position");
    yh.getInverse(this.root.matrixWorld);
    for (var h = 0, f = 0; h < c.length; h++) {
      var l = c[h];
      l.parent && l.parent.isBone && (jg.multiplyMatrices(yh, l.matrixWorld), wc.setFromMatrixPosition(jg), e.setXYZ(f, wc.x, wc.y, wc.z), jg.multiplyMatrices(yh, l.parent.matrixWorld), wc.setFromMatrixPosition(jg), e.setXYZ(f + 1, wc.x, wc.y, wc.z), f += 2);
    }
    b.getAttribute("position").needsUpdate = !0;
    t.prototype.updateMatrixWorld.call(this, a);
  };
  Ed.prototype = Object.create(V.prototype);
  Ed.prototype.constructor = Ed;
  Ed.prototype.dispose = function() {
    this.geometry.dispose();
    this.material.dispose();
  };
  Ed.prototype.update = function() {
    void 0 !== this.color ? this.material.color.set(this.color) : this.material.color.copy(this.light.color);
  };
  var wk = new m, aj = new A, bj = new A;
  Fd.prototype = Object.create(t.prototype);
  Fd.prototype.constructor = Fd;
  Fd.prototype.dispose = function() {
    this.children[0].geometry.dispose();
    this.children[0].material.dispose();
  };
  Fd.prototype.update = function() {
    var a = this.children[0];
    if (void 0 !== this.color) {
      this.material.color.set(this.color);
    } else {
      var c = a.geometry.getAttribute("color");
      aj.copy(this.light.color);
      bj.copy(this.light.groundColor);
      for (var b = 0, e = c.count; b < e; b++) {
        var h = b < e / 2 ? aj : bj;
        c.setXYZ(b, h.r, h.g, h.b);
      }
      c.needsUpdate = !0;
    }
    a.lookAt(wk.setFromMatrixPosition(this.light.matrixWorld).negate());
  };
  Mf.prototype = Object.assign(Object.create(Da.prototype), {constructor:Mf, copy:function(a) {
    Da.prototype.copy.call(this, a);
    this.geometry.copy(a.geometry);
    this.material.copy(a.material);
    return this;
  }, clone:function() {
    return (new this.constructor).copy(this);
  }});
  Nf.prototype = Object.create(Da.prototype);
  Nf.prototype.constructor = Nf;
  var cj = new m, kg = new m, dj = new m;
  Gd.prototype = Object.create(t.prototype);
  Gd.prototype.constructor = Gd;
  Gd.prototype.dispose = function() {
    this.lightPlane.geometry.dispose();
    this.lightPlane.material.dispose();
    this.targetLine.geometry.dispose();
    this.targetLine.material.dispose();
  };
  Gd.prototype.update = function() {
    cj.setFromMatrixPosition(this.light.matrixWorld);
    kg.setFromMatrixPosition(this.light.target.matrixWorld);
    dj.subVectors(kg, cj);
    this.lightPlane.lookAt(kg);
    void 0 !== this.color ? (this.lightPlane.material.color.set(this.color), this.targetLine.material.color.set(this.color)) : (this.lightPlane.material.color.copy(this.light.color), this.targetLine.material.color.copy(this.light.color));
    this.targetLine.lookAt(kg);
    this.targetLine.scale.z = dj.length();
  };
  var Of = new m, Fa = new T;
  Ge.prototype = Object.create(Da.prototype);
  Ge.prototype.constructor = Ge;
  Ge.prototype.update = function() {
    var a = this.geometry, c = this.pointMap;
    Fa.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse);
    Ia("c", c, a, Fa, 0, 0, -1);
    Ia("t", c, a, Fa, 0, 0, 1);
    Ia("n1", c, a, Fa, -1, -1, -1);
    Ia("n2", c, a, Fa, 1, -1, -1);
    Ia("n3", c, a, Fa, -1, 1, -1);
    Ia("n4", c, a, Fa, 1, 1, -1);
    Ia("f1", c, a, Fa, -1, -1, 1);
    Ia("f2", c, a, Fa, 1, -1, 1);
    Ia("f3", c, a, Fa, -1, 1, 1);
    Ia("f4", c, a, Fa, 1, 1, 1);
    Ia("u1", c, a, Fa, .7, 1.1, -1);
    Ia("u2", c, a, Fa, -.7, 1.1, -1);
    Ia("u3", c, a, Fa, 0, 2, -1);
    Ia("cf1", c, a, Fa, -1, 0, 1);
    Ia("cf2", c, a, Fa, 1, 0, 1);
    Ia("cf3", c, a, Fa, 0, -1, 1);
    Ia("cf4", c, a, Fa, 0, 1, 1);
    Ia("cn1", c, a, Fa, -1, 0, -1);
    Ia("cn2", c, a, Fa, 1, 0, -1);
    Ia("cn3", c, a, Fa, 0, -1, -1);
    Ia("cn4", c, a, Fa, 0, 1, -1);
    a.getAttribute("position").needsUpdate = !0;
  };
  var lg = new y;
  Xb.prototype = Object.create(Da.prototype);
  Xb.prototype.constructor = Xb;
  Xb.prototype.update = function(a) {
    void 0 !== a && console.warn("THREE.BoxHelper: .update() has no longer arguments.");
    void 0 !== this.object && lg.setFromObject(this.object);
    if (!lg.isEmpty()) {
      a = lg.min;
      var c = lg.max, b = this.geometry.attributes.position, e = b.array;
      e[0] = c.x;
      e[1] = c.y;
      e[2] = c.z;
      e[3] = a.x;
      e[4] = c.y;
      e[5] = c.z;
      e[6] = a.x;
      e[7] = a.y;
      e[8] = c.z;
      e[9] = c.x;
      e[10] = a.y;
      e[11] = c.z;
      e[12] = c.x;
      e[13] = c.y;
      e[14] = a.z;
      e[15] = a.x;
      e[16] = c.y;
      e[17] = a.z;
      e[18] = a.x;
      e[19] = a.y;
      e[20] = a.z;
      e[21] = c.x;
      e[22] = a.y;
      e[23] = a.z;
      b.needsUpdate = !0;
      this.geometry.computeBoundingSphere();
    }
  };
  Xb.prototype.setFromObject = function(a) {
    this.object = a;
    this.update();
    return this;
  };
  Xb.prototype.copy = function(a) {
    Da.prototype.copy.call(this, a);
    this.object = a.object;
    return this;
  };
  Xb.prototype.clone = function() {
    return (new this.constructor).copy(this);
  };
  He.prototype = Object.create(Da.prototype);
  He.prototype.constructor = He;
  He.prototype.updateMatrixWorld = function(a) {
    var c = this.box;
    c.isEmpty() || (c.getCenter(this.position), c.getSize(this.scale), this.scale.multiplyScalar(.5), t.prototype.updateMatrixWorld.call(this, a));
  };
  Ie.prototype = Object.create(eb.prototype);
  Ie.prototype.constructor = Ie;
  Ie.prototype.updateMatrixWorld = function(a) {
    var c = -this.plane.constant;
    1E-8 > Math.abs(c) && (c = 1E-8);
    this.scale.set(.5 * this.size, .5 * this.size, c);
    this.children[0].material.side = 0 > c ? 1 : 0;
    this.lookAt(this.plane.normal);
    t.prototype.updateMatrixWorld.call(this, a);
  };
  var ej = new m, Pf, Yg;
  Yb.prototype = Object.create(t.prototype);
  Yb.prototype.constructor = Yb;
  Yb.prototype.setDirection = function(a) {
    .99999 < a.y ? this.quaternion.set(0, 0, 0, 1) : -.99999 > a.y ? this.quaternion.set(1, 0, 0, 0) : (ej.set(a.z, 0, -a.x).normalize(), this.quaternion.setFromAxisAngle(ej, Math.acos(a.y)));
  };
  Yb.prototype.setLength = function(a, c, b) {
    void 0 === c && (c = .2 * a);
    void 0 === b && (b = .2 * c);
    this.line.scale.set(1, Math.max(1E-4, a - c), 1);
    this.line.updateMatrix();
    this.cone.scale.set(b, c, b);
    this.cone.position.y = a;
    this.cone.updateMatrix();
  };
  Yb.prototype.setColor = function(a) {
    this.line.material.color.set(a);
    this.cone.material.color.set(a);
  };
  Yb.prototype.copy = function(a) {
    t.prototype.copy.call(this, a, !1);
    this.line.copy(a.line);
    this.cone.copy(a.cone);
    return this;
  };
  Yb.prototype.clone = function() {
    return (new this.constructor).copy(this);
  };
  Je.prototype = Object.create(Da.prototype);
  Je.prototype.constructor = Je;
  var Mb = Math.pow(2, 8), fj = [.125, .215, .35, .446, .526, .582], gj = 5 + fj.length, Lb = {3E3:0, 3001:1, 3002:2, 3004:3, 3005:4, 3006:5, 3007:6}, zh = new Bd, Ah = function() {
    for (var a = [], c = [], b = [], e = 8, h = 0; h < gj; h++) {
      var f = Math.pow(2, e);
      c.push(f);
      var d = 1 / f;
      4 < h ? d = fj[h - 8 + 4 - 1] : 0 == h && (d = 0);
      b.push(d);
      d = 1 / (f - 1);
      f = -d / 2;
      d = 1 + d / 2;
      var g = [f, f, d, f, d, d, f, f, d, d, f, d];
      f = new Float32Array(108);
      d = new Float32Array(72);
      for (var m = new Float32Array(36), p = 0; 6 > p; p++) {
        var n = p % 3 * 2 / 3 - 1, k = 2 < p ? 0 : -1;
        f.set([n, k, 0, n + 2 / 3, k, 0, n + 2 / 3, k + 1, 0, n, k, 0, n + 2 / 3, k + 1, 0, n, k + 1, 0], 18 * p);
        d.set(g, 12 * p);
        m.set([p, p, p, p, p, p], 6 * p);
      }
      g = new N;
      g.setAttribute("position", new J(f, 3));
      g.setAttribute("uv", new J(d, 2));
      g.setAttribute("faceIndex", new J(m, 1));
      a.push(g);
      4 < e && e--;
    }
    return {_lodPlanes:a, _sizeLods:c, _sigmas:b};
  }(), Ue = Ah._lodPlanes, hj = Ah._sizeLods, mg = Ah._sigmas, Bh = null, $c = (1 + Math.sqrt(5)) / 2, Td = 1 / $c, ij = [new m(1, 1, 1), new m(-1, 1, 1), new m(1, 1, -1), new m(-1, 1, -1), new m(0, $c, Td), new m(0, $c, -Td), new m(Td, 0, $c), new m(-Td, 0, $c), new m($c, Td, 0), new m(-$c, Td, 0)];
  Zg.prototype = {constructor:Zg, fromScene:function(a, c, b, e) {
    void 0 === c && (c = 0);
    void 0 === b && (b = .1);
    void 0 === e && (e = 100);
    Bh = this._renderer.getRenderTarget();
    var h = this._allocateTargets();
    this._sceneToCubeUV(a, b, e, h);
    0 < c && this._blur(h, 0, 0, c);
    this._applyPMREM(h);
    this._cleanup(h);
    return h;
  }, fromEquirectangular:function(a) {
    a.magFilter = 1003;
    a.minFilter = 1003;
    a.generateMipmaps = !1;
    return this.fromCubemap(a);
  }, fromCubemap:function(a) {
    Bh = this._renderer.getRenderTarget();
    var c = this._allocateTargets(a);
    this._textureToCubeUV(a, c);
    this._applyPMREM(c);
    this._cleanup(c);
    return c;
  }, compileCubemapShader:function() {
    null === this._cubemapShader && (this._cubemapShader = vi(), this._compileMaterial(this._cubemapShader));
  }, compileEquirectangularShader:function() {
    null === this._equirectShader && (this._equirectShader = ui(), this._compileMaterial(this._equirectShader));
  }, dispose:function() {
    this._blurMaterial.dispose();
    null !== this._cubemapShader && this._cubemapShader.dispose();
    null !== this._equirectShader && this._equirectShader.dispose();
    for (var a = 0; a < Ue.length; a++) {
      Ue[a].dispose();
    }
  }, _cleanup:function(a) {
    this._pingPongRenderTarget.dispose();
    this._renderer.setRenderTarget(Bh);
    a.scissorTest = !1;
    a.setSize(a.width, a.height);
  }, _allocateTargets:function(a) {
    var c = void 0 === a || 1009 !== a.type ? !1 : 3E3 === a.encoding || 3001 === a.encoding || 3007 === a.encoding;
    c = {magFilter:1003, minFilter:1003, generateMipmaps:!1, type:1009, format:1023, encoding:c ? a.encoding : 3002, depthBuffer:!1, stencilBuffer:!1};
    var b = ti(c);
    b.depthBuffer = a ? !1 : !0;
    this._pingPongRenderTarget = ti(c);
    return b;
  }, _compileMaterial:function(a) {
    var c = new z;
    c.add(new V(Ue[0], a));
    this._renderer.compile(c, zh);
  }, _sceneToCubeUV:function(a, c, b, e) {
    c = new ia(90, 1, c, b);
    b = [1, 1, 1, 1, -1, 1];
    var h = [1, 1, -1, -1, -1, 1], f = this._renderer, l = f.outputEncoding, d = f.toneMapping, g = f.toneMappingExposure, m = f.getClearColor(), p = f.getClearAlpha();
    f.toneMapping = 1;
    f.toneMappingExposure = 1;
    f.outputEncoding = 3E3;
    a.scale.z *= -1;
    var n = a.background;
    if (n && n.isColor) {
      n.convertSRGBToLinear();
      var k = Math.min(Math.max(Math.ceil(Math.log2(Math.max(n.r, n.g, n.b))), -128), 127);
      n = n.multiplyScalar(Math.pow(2, -k));
      f.setClearColor(n, (k + 128) / 255);
      a.background = null;
    }
    for (n = 0; 6 > n; n++) {
      k = n % 3, 0 == k ? (c.up.set(0, b[n], 0), c.lookAt(h[n], 0, 0)) : 1 == k ? (c.up.set(0, 0, b[n]), c.lookAt(0, h[n], 0)) : (c.up.set(0, b[n], 0), c.lookAt(0, 0, h[n])), bh(e, k * Mb, 2 < n ? Mb : 0, Mb, Mb), f.setRenderTarget(e), f.render(a, c);
    }
    f.toneMapping = d;
    f.toneMappingExposure = g;
    f.outputEncoding = l;
    f.setClearColor(m, p);
    a.scale.z *= -1;
  }, _textureToCubeUV:function(a, c) {
    var b = new z, e = this._renderer;
    a.isCubeTexture ? null == this._cubemapShader && (this._cubemapShader = vi()) : null == this._equirectShader && (this._equirectShader = ui());
    var h = a.isCubeTexture ? this._cubemapShader : this._equirectShader;
    b.add(new V(Ue[0], h));
    h = h.uniforms;
    h.envMap.value = a;
    a.isCubeTexture || h.texelSize.value.set(1 / a.image.width, 1 / a.image.height);
    h.inputEncoding.value = Lb[a.encoding];
    h.outputEncoding.value = Lb[c.texture.encoding];
    bh(c, 0, 0, 3 * Mb, 2 * Mb);
    e.setRenderTarget(c);
    e.render(b, zh);
  }, _applyPMREM:function(a) {
    var c = this._renderer, b = c.autoClear;
    c.autoClear = !1;
    for (var e = 1; e < gj; e++) {
      this._blur(a, e - 1, e, Math.sqrt(mg[e] * mg[e] - mg[e - 1] * mg[e - 1]), ij[(e - 1) % ij.length]);
    }
    c.autoClear = b;
  }, _blur:function(a, c, b, e, h) {
    var f = this._pingPongRenderTarget;
    this._halfBlur(a, f, c, b, e, "latitudinal", h);
    this._halfBlur(f, a, b, b, e, "longitudinal", h);
  }, _halfBlur:function(a, c, b, e, h, f, d) {
    var l = this._renderer, g = this._blurMaterial;
    "latitudinal" !== f && "longitudinal" !== f && console.error("blur direction must be either latitudinal or longitudinal!");
    var m = new z;
    m.add(new V(Ue[e], g));
    g = g.uniforms;
    var p = hj[b] - 1;
    p = isFinite(h) ? Math.PI / (2 * p) : 2 * Math.PI / 39;
    var n = h / p, k = isFinite(h) ? 1 + Math.floor(3 * n) : 20;
    20 < k && console.warn("sigmaRadians, " + h + ", is too large and will clip, as it requested " + k + " samples when the maximum is set to 20");
    h = [];
    for (var q = 0, r = 0; 20 > r; ++r) {
      var t = r / n;
      t = Math.exp(-t * t / 2);
      h.push(t);
      0 == r ? q += t : r < k && (q += 2 * t);
    }
    for (r = 0; r < h.length; r++) {
      h[r] /= q;
    }
    g.envMap.value = a.texture;
    g.samples.value = k;
    g.weights.value = h;
    g.latitudinal.value = "latitudinal" === f;
    d && (g.poleAxis.value = d);
    g.dTheta.value = p;
    g.mipInt.value = 8 - b;
    g.inputEncoding.value = Lb[a.texture.encoding];
    g.outputEncoding.value = Lb[a.texture.encoding];
    a = hj[e];
    t = 3 * Math.max(0, Mb - 2 * a);
    bh(c, t, (0 === e ? 0 : 2 * Mb) + 2 * a * (4 < e ? e - 8 + 4 : 0), 3 * a, 2 * a);
    l.setRenderTarget(c);
    l.render(m, zh);
  }};
  fa.create = function(a, c) {
    console.log("THREE.Curve.create() has been deprecated");
    a.prototype = Object.create(fa.prototype);
    a.prototype.constructor = a;
    a.prototype.getPoint = c;
    return a;
  };
  Object.assign(Wb.prototype, {createPointsGeometry:function(a) {
    console.warn("THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
    a = this.getPoints(a);
    return this.createGeometry(a);
  }, createSpacedPointsGeometry:function(a) {
    console.warn("THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
    a = this.getSpacedPoints(a);
    return this.createGeometry(a);
  }, createGeometry:function(a) {
    console.warn("THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
    for (var c = new W, b = 0, e = a.length; b < e; b++) {
      var h = a[b];
      c.vertices.push(new m(h.x, h.y, h.z || 0));
    }
    return c;
  }});
  Object.assign(yb.prototype, {fromPoints:function(a) {
    console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints().");
    return this.setFromPoints(a);
  }});
  wi.prototype = Object.create(Wa.prototype);
  xi.prototype = Object.create(Wa.prototype);
  ch.prototype = Object.create(Wa.prototype);
  Object.assign(ch.prototype, {initFromArray:function() {
    console.error("THREE.Spline: .initFromArray() has been removed.");
  }, getControlPointsArray:function() {
    console.error("THREE.Spline: .getControlPointsArray() has been removed.");
  }, reparametrizeByArcLength:function() {
    console.error("THREE.Spline: .reparametrizeByArcLength() has been removed.");
  }});
  Mf.prototype.setColors = function() {
    console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.");
  };
  Rc.prototype.update = function() {
    console.error("THREE.SkeletonHelper: update() no longer needs to be called.");
  };
  Object.assign(ra.prototype, {extractUrlBase:function(a) {
    console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.");
    return wh.extractUrlBase(a);
  }});
  ra.Handlers = {add:function() {
    console.error("THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.");
  }, get:function() {
    console.error("THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.");
  }};
  Object.assign(Jf.prototype, {setTexturePath:function(a) {
    console.warn("THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().");
    return this.setResourcePath(a);
  }});
  Object.assign(Wg.prototype, {center:function(a) {
    console.warn("THREE.Box2: .center() has been renamed to .getCenter().");
    return this.getCenter(a);
  }, empty:function() {
    console.warn("THREE.Box2: .empty() has been renamed to .isEmpty().");
    return this.isEmpty();
  }, isIntersectionBox:function(a) {
    console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().");
    return this.intersectsBox(a);
  }, size:function(a) {
    console.warn("THREE.Box2: .size() has been renamed to .getSize().");
    return this.getSize(a);
  }});
  Object.assign(y.prototype, {center:function(a) {
    console.warn("THREE.Box3: .center() has been renamed to .getCenter().");
    return this.getCenter(a);
  }, empty:function() {
    console.warn("THREE.Box3: .empty() has been renamed to .isEmpty().");
    return this.isEmpty();
  }, isIntersectionBox:function(a) {
    console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().");
    return this.intersectsBox(a);
  }, isIntersectionSphere:function(a) {
    console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().");
    return this.intersectsSphere(a);
  }, size:function(a) {
    console.warn("THREE.Box3: .size() has been renamed to .getSize().");
    return this.getSize(a);
  }});
  Object.assign(p.prototype, {empty:function() {
    console.warn("THREE.Sphere: .empty() has been renamed to .isEmpty().");
    return this.isEmpty();
  }});
  Ga.prototype.setFromMatrix = function(a) {
    console.warn("THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().");
    return this.setFromProjectionMatrix(a);
  };
  Xg.prototype.center = function(a) {
    console.warn("THREE.Line3: .center() has been renamed to .getCenter().");
    return this.getCenter(a);
  };
  Object.assign(oa, {random16:function() {
    console.warn("THREE.Math: .random16() has been deprecated. Use Math.random() instead.");
    return Math.random();
  }, nearestPowerOfTwo:function(a) {
    console.warn("THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().");
    return oa.floorPowerOfTwo(a);
  }, nextPowerOfTwo:function(a) {
    console.warn("THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().");
    return oa.ceilPowerOfTwo(a);
  }});
  Object.assign(b.prototype, {flattenToArrayOffset:function(a, c) {
    console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");
    return this.toArray(a, c);
  }, multiplyVector3:function(a) {
    console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.");
    return a.applyMatrix3(this);
  }, multiplyVector3Array:function() {
    console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.");
  }, applyToBufferAttribute:function(a) {
    console.warn("THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.");
    return a.applyMatrix3(this);
  }, applyToVector3Array:function() {
    console.error("THREE.Matrix3: .applyToVector3Array() has been removed.");
  }});
  Object.assign(n.prototype, {extractPosition:function(a) {
    console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().");
    return this.copyPosition(a);
  }, flattenToArrayOffset:function(a, c) {
    console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");
    return this.toArray(a, c);
  }, getPosition:function() {
    console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.");
    return (new m).setFromMatrixColumn(this, 3);
  }, setRotationFromQuaternion:function(a) {
    console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().");
    return this.makeRotationFromQuaternion(a);
  }, multiplyToArray:function() {
    console.warn("THREE.Matrix4: .multiplyToArray() has been removed.");
  }, multiplyVector3:function(a) {
    console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.");
    return a.applyMatrix4(this);
  }, multiplyVector4:function(a) {
    console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.");
    return a.applyMatrix4(this);
  }, multiplyVector3Array:function() {
    console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.");
  }, rotateAxis:function(a) {
    console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.");
    a.transformDirection(this);
  }, crossVector:function(a) {
    console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.");
    return a.applyMatrix4(this);
  }, translate:function() {
    console.error("THREE.Matrix4: .translate() has been removed.");
  }, rotateX:function() {
    console.error("THREE.Matrix4: .rotateX() has been removed.");
  }, rotateY:function() {
    console.error("THREE.Matrix4: .rotateY() has been removed.");
  }, rotateZ:function() {
    console.error("THREE.Matrix4: .rotateZ() has been removed.");
  }, rotateByAxis:function() {
    console.error("THREE.Matrix4: .rotateByAxis() has been removed.");
  }, applyToBufferAttribute:function(a) {
    console.warn("THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.");
    return a.applyMatrix4(this);
  }, applyToVector3Array:function() {
    console.error("THREE.Matrix4: .applyToVector3Array() has been removed.");
  }, makeFrustum:function(a, c, b, e, h, f) {
    console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.");
    return this.makePerspective(a, c, e, b, h, f);
  }});
  w.prototype.isIntersectionLine = function(a) {
    console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().");
    return this.intersectsLine(a);
  };
  q.prototype.multiplyVector3 = function(a) {
    console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.");
    return a.applyQuaternion(this);
  };
  Object.assign(v.prototype, {isIntersectionBox:function(a) {
    console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().");
    return this.intersectsBox(a);
  }, isIntersectionPlane:function(a) {
    console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().");
    return this.intersectsPlane(a);
  }, isIntersectionSphere:function(a) {
    console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().");
    return this.intersectsSphere(a);
  }});
  Object.assign(C.prototype, {area:function() {
    console.warn("THREE.Triangle: .area() has been renamed to .getArea().");
    return this.getArea();
  }, barycoordFromPoint:function(a, c) {
    console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().");
    return this.getBarycoord(a, c);
  }, midpoint:function(a) {
    console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint().");
    return this.getMidpoint(a);
  }, normal:function(a) {
    console.warn("THREE.Triangle: .normal() has been renamed to .getNormal().");
    return this.getNormal(a);
  }, plane:function(a) {
    console.warn("THREE.Triangle: .plane() has been renamed to .getPlane().");
    return this.getPlane(a);
  }});
  Object.assign(C, {barycoordFromPoint:function(a, c, b, e, h) {
    console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().");
    return C.getBarycoord(a, c, b, e, h);
  }, normal:function(a, c, b, e) {
    console.warn("THREE.Triangle: .normal() has been renamed to .getNormal().");
    return C.getNormal(a, c, b, e);
  }});
  Object.assign(qc.prototype, {extractAllPoints:function(a) {
    console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.");
    return this.extractPoints(a);
  }, extrude:function(a) {
    console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.");
    return new Fc(this, a);
  }, makeGeometry:function(a) {
    console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.");
    return new Hc(this, a);
  }});
  Object.assign(k.prototype, {fromAttribute:function(a, c, b) {
    console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().");
    return this.fromBufferAttribute(a, c, b);
  }, distanceToManhattan:function(a) {
    console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().");
    return this.manhattanDistanceTo(a);
  }, lengthManhattan:function() {
    console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().");
    return this.manhattanLength();
  }});
  Object.assign(m.prototype, {setEulerFromRotationMatrix:function() {
    console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.");
  }, setEulerFromQuaternion:function() {
    console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.");
  }, getPositionFromMatrix:function(a) {
    console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().");
    return this.setFromMatrixPosition(a);
  }, getScaleFromMatrix:function(a) {
    console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().");
    return this.setFromMatrixScale(a);
  }, getColumnFromMatrix:function(a, c) {
    console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().");
    return this.setFromMatrixColumn(c, a);
  }, applyProjection:function(a) {
    console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.");
    return this.applyMatrix4(a);
  }, fromAttribute:function(a, c, b) {
    console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().");
    return this.fromBufferAttribute(a, c, b);
  }, distanceToManhattan:function(a) {
    console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().");
    return this.manhattanDistanceTo(a);
  }, lengthManhattan:function() {
    console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().");
    return this.manhattanLength();
  }});
  Object.assign(f.prototype, {fromAttribute:function(a, c, b) {
    console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().");
    return this.fromBufferAttribute(a, c, b);
  }, lengthManhattan:function() {
    console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().");
    return this.manhattanLength();
  }});
  Object.assign(W.prototype, {computeTangents:function() {
    console.error("THREE.Geometry: .computeTangents() has been removed.");
  }, computeLineDistances:function() {
    console.error("THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.");
  }, applyMatrix:function(a) {
    console.warn("THREE.Geometry: .applyMatrix() has been renamed to .applyMatrix4().");
    return this.applyMatrix4(a);
  }});
  Object.assign(t.prototype, {getChildByName:function(a) {
    console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().");
    return this.getObjectByName(a);
  }, renderDepth:function() {
    console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.");
  }, translate:function(a, c) {
    console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.");
    return this.translateOnAxis(c, a);
  }, getWorldRotation:function() {
    console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.");
  }, applyMatrix:function(a) {
    console.warn("THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().");
    return this.applyMatrix4(a);
  }});
  Object.defineProperties(t.prototype, {eulerOrder:{get:function() {
    console.warn("THREE.Object3D: .eulerOrder is now .rotation.order.");
    return this.rotation.order;
  }, set:function(a) {
    console.warn("THREE.Object3D: .eulerOrder is now .rotation.order.");
    this.rotation.order = a;
  }}, useQuaternion:{get:function() {
    console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
  }, set:function() {
    console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
  }}});
  Object.assign(V.prototype, {setDrawMode:function() {
    console.error("THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.");
  }});
  Object.defineProperties(V.prototype, {drawMode:{get:function() {
    console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.");
    return 0;
  }, set:function() {
    console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.");
  }}});
  Object.defineProperties(fe.prototype, {objects:{get:function() {
    console.warn("THREE.LOD: .objects has been renamed to .levels.");
    return this.levels;
  }}});
  Object.defineProperty(gf.prototype, "useVertexTexture", {get:function() {
    console.warn("THREE.Skeleton: useVertexTexture has been removed.");
  }, set:function() {
    console.warn("THREE.Skeleton: useVertexTexture has been removed.");
  }});
  ff.prototype.initBones = function() {
    console.error("THREE.SkinnedMesh: initBones() has been removed.");
  };
  Object.defineProperty(fa.prototype, "__arcLengthDivisions", {get:function() {
    console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.");
    return this.arcLengthDivisions;
  }, set:function(a) {
    console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.");
    this.arcLengthDivisions = a;
  }});
  ia.prototype.setLens = function(a, c) {
    console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup.");
    void 0 !== c && (this.filmGauge = c);
    this.setFocalLength(a);
  };
  Object.defineProperties(xa.prototype, {onlyShadow:{set:function() {
    console.warn("THREE.Light: .onlyShadow has been removed.");
  }}, shadowCameraFov:{set:function(a) {
    console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov.");
    this.shadow.camera.fov = a;
  }}, shadowCameraLeft:{set:function(a) {
    console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left.");
    this.shadow.camera.left = a;
  }}, shadowCameraRight:{set:function(a) {
    console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right.");
    this.shadow.camera.right = a;
  }}, shadowCameraTop:{set:function(a) {
    console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top.");
    this.shadow.camera.top = a;
  }}, shadowCameraBottom:{set:function(a) {
    console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.");
    this.shadow.camera.bottom = a;
  }}, shadowCameraNear:{set:function(a) {
    console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near.");
    this.shadow.camera.near = a;
  }}, shadowCameraFar:{set:function(a) {
    console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far.");
    this.shadow.camera.far = a;
  }}, shadowCameraVisible:{set:function() {
    console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.");
  }}, shadowBias:{set:function(a) {
    console.warn("THREE.Light: .shadowBias is now .shadow.bias.");
    this.shadow.bias = a;
  }}, shadowDarkness:{set:function() {
    console.warn("THREE.Light: .shadowDarkness has been removed.");
  }}, shadowMapWidth:{set:function(a) {
    console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.");
    this.shadow.mapSize.width = a;
  }}, shadowMapHeight:{set:function(a) {
    console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.");
    this.shadow.mapSize.height = a;
  }}});
  Object.defineProperties(J.prototype, {length:{get:function() {
    console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead.");
    return this.array.length;
  }}, dynamic:{get:function() {
    console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.");
    return 35048 === this.usage;
  }, set:function() {
    console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.");
    this.setUsage(35048);
  }}});
  Object.assign(J.prototype, {setDynamic:function(a) {
    console.warn("THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.");
    this.setUsage(!0 === a ? 35048 : 35044);
    return this;
  }, copyIndicesArray:function() {
    console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.");
  }, setArray:function() {
    console.error("THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers");
  }});
  Object.assign(N.prototype, {addIndex:function(a) {
    console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().");
    this.setIndex(a);
  }, addAttribute:function(a, c, b) {
    console.warn("THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().");
    return c && c.isBufferAttribute || c && c.isInterleavedBufferAttribute ? "index" === a ? (console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."), this.setIndex(c), this) : this.setAttribute(a, c) : (console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."), this.setAttribute(a, new J(c, b)));
  }, addDrawCall:function(a, c, b) {
    void 0 !== b && console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.");
    console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup().");
    this.addGroup(a, c);
  }, clearDrawCalls:function() {
    console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().");
    this.clearGroups();
  }, computeTangents:function() {
    console.warn("THREE.BufferGeometry: .computeTangents() has been removed.");
  }, computeOffsets:function() {
    console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.");
  }, removeAttribute:function(a) {
    console.warn("THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().");
    return this.deleteAttribute(a);
  }, applyMatrix:function(a) {
    console.warn("THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().");
    return this.applyMatrix4(a);
  }});
  Object.defineProperties(N.prototype, {drawcalls:{get:function() {
    console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups.");
    return this.groups;
  }}, offsets:{get:function() {
    console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups.");
    return this.groups;
  }}});
  Object.defineProperties(Ug.prototype, {linePrecision:{get:function() {
    console.warn("THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.");
    return this.params.Line.threshold;
  }, set:function(a) {
    console.warn("THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.");
    this.params.Line.threshold = a;
  }}});
  Object.defineProperties(Sb.prototype, {dynamic:{get:function() {
    console.warn("THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.");
    return 35048 === this.usage;
  }, set:function(a) {
    console.warn("THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.");
    this.setUsage(a);
  }}});
  Object.assign(Sb.prototype, {setDynamic:function(a) {
    console.warn("THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.");
    this.setUsage(!0 === a ? 35048 : 35044);
    return this;
  }, setArray:function() {
    console.error("THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers");
  }});
  Object.assign(Gb.prototype, {getArrays:function() {
    console.error("THREE.ExtrudeBufferGeometry: .getArrays() has been removed.");
  }, addShapeList:function() {
    console.error("THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.");
  }, addShape:function() {
    console.error("THREE.ExtrudeBufferGeometry: .addShape() has been removed.");
  }});
  Object.defineProperties(Lf.prototype, {dynamic:{set:function() {
    console.warn("THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.");
  }}, onUpdate:{value:function() {
    console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.");
    return this;
  }}});
  Object.defineProperties(I.prototype, {wrapAround:{get:function() {
    console.warn("THREE.Material: .wrapAround has been removed.");
  }, set:function() {
    console.warn("THREE.Material: .wrapAround has been removed.");
  }}, overdraw:{get:function() {
    console.warn("THREE.Material: .overdraw has been removed.");
  }, set:function() {
    console.warn("THREE.Material: .overdraw has been removed.");
  }}, wrapRGB:{get:function() {
    console.warn("THREE.Material: .wrapRGB has been removed.");
    return new A;
  }}, shading:{get:function() {
    console.error("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead.");
  }, set:function(a) {
    console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead.");
    this.flatShading = 1 === a;
  }}, stencilMask:{get:function() {
    console.warn("THREE." + this.type + ": .stencilMask has been removed. Use .stencilFuncMask instead.");
    return this.stencilFuncMask;
  }, set:function(a) {
    console.warn("THREE." + this.type + ": .stencilMask has been removed. Use .stencilFuncMask instead.");
    this.stencilFuncMask = a;
  }}});
  Object.defineProperties(pc.prototype, {metal:{get:function() {
    console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.");
    return !1;
  }, set:function() {
    console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead");
  }}});
  Object.defineProperties(ka.prototype, {derivatives:{get:function() {
    console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.");
    return this.extensions.derivatives;
  }, set:function(a) {
    console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.");
    this.extensions.derivatives = a;
  }}});
  Object.assign(ug.prototype, {clearTarget:function(a, c, b, e) {
    console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.");
    this.setRenderTarget(a);
    this.clear(c, b, e);
  }, animate:function(a) {
    console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop().");
    this.setAnimationLoop(a);
  }, getCurrentRenderTarget:function() {
    console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().");
    return this.getRenderTarget();
  }, getMaxAnisotropy:function() {
    console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().");
    return this.capabilities.getMaxAnisotropy();
  }, getPrecision:function() {
    console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.");
    return this.capabilities.precision;
  }, resetGLState:function() {
    console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset().");
    return this.state.reset();
  }, supportsFloatTextures:function() {
    console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' ).");
    return this.extensions.get("OES_texture_float");
  }, supportsHalfFloatTextures:function() {
    console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' ).");
    return this.extensions.get("OES_texture_half_float");
  }, supportsStandardDerivatives:function() {
    console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' ).");
    return this.extensions.get("OES_standard_derivatives");
  }, supportsCompressedTextureS3TC:function() {
    console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' ).");
    return this.extensions.get("WEBGL_compressed_texture_s3tc");
  }, supportsCompressedTexturePVRTC:function() {
    console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' ).");
    return this.extensions.get("WEBGL_compressed_texture_pvrtc");
  }, supportsBlendMinMax:function() {
    console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' ).");
    return this.extensions.get("EXT_blend_minmax");
  }, supportsVertexTextures:function() {
    console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.");
    return this.capabilities.vertexTextures;
  }, supportsInstancedArrays:function() {
    console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' ).");
    return this.extensions.get("ANGLE_instanced_arrays");
  }, enableScissorTest:function(a) {
    console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().");
    this.setScissorTest(a);
  }, initMaterial:function() {
    console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.");
  }, addPrePlugin:function() {
    console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.");
  }, addPostPlugin:function() {
    console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.");
  }, updateShadowMap:function() {
    console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.");
  }, setFaceCulling:function() {
    console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.");
  }, allocTextureUnit:function() {
    console.warn("THREE.WebGLRenderer: .allocTextureUnit() has been removed.");
  }, setTexture:function() {
    console.warn("THREE.WebGLRenderer: .setTexture() has been removed.");
  }, setTexture2D:function() {
    console.warn("THREE.WebGLRenderer: .setTexture2D() has been removed.");
  }, setTextureCube:function() {
    console.warn("THREE.WebGLRenderer: .setTextureCube() has been removed.");
  }, getActiveMipMapLevel:function() {
    console.warn("THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().");
    return this.getActiveMipmapLevel();
  }});
  Object.defineProperties(ug.prototype, {shadowMapEnabled:{get:function() {
    return this.shadowMap.enabled;
  }, set:function(a) {
    console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.");
    this.shadowMap.enabled = a;
  }}, shadowMapType:{get:function() {
    return this.shadowMap.type;
  }, set:function(a) {
    console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.");
    this.shadowMap.type = a;
  }}, shadowMapCullFace:{get:function() {
    console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.");
  }, set:function() {
    console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.");
  }}, context:{get:function() {
    console.warn("THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.");
    return this.getContext();
  }}, vr:{get:function() {
    console.warn("THREE.WebGLRenderer: .vr has been renamed to .xr");
    return this.xr;
  }}, gammaInput:{get:function() {
    console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.");
    return !1;
  }, set:function() {
    console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.");
  }}, gammaOutput:{get:function() {
    console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.");
    return !1;
  }, set:function(a) {
    console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.");
    this.outputEncoding = !0 === a ? 3001 : 3E3;
  }}});
  Object.defineProperties(Xh.prototype, {cullFace:{get:function() {
    console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.");
  }, set:function() {
    console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.");
  }}, renderReverseSided:{get:function() {
    console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.");
  }, set:function() {
    console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.");
  }}, renderSingleSided:{get:function() {
    console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.");
  }, set:function() {
    console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.");
  }}});
  Object.defineProperties(e.prototype, {wrapS:{get:function() {
    console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.");
    return this.texture.wrapS;
  }, set:function(a) {
    console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.");
    this.texture.wrapS = a;
  }}, wrapT:{get:function() {
    console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.");
    return this.texture.wrapT;
  }, set:function(a) {
    console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.");
    this.texture.wrapT = a;
  }}, magFilter:{get:function() {
    console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.");
    return this.texture.magFilter;
  }, set:function(a) {
    console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.");
    this.texture.magFilter = a;
  }}, minFilter:{get:function() {
    console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.");
    return this.texture.minFilter;
  }, set:function(a) {
    console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.");
    this.texture.minFilter = a;
  }}, anisotropy:{get:function() {
    console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.");
    return this.texture.anisotropy;
  }, set:function(a) {
    console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.");
    this.texture.anisotropy = a;
  }}, offset:{get:function() {
    console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset.");
    return this.texture.offset;
  }, set:function(a) {
    console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset.");
    this.texture.offset = a;
  }}, repeat:{get:function() {
    console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat.");
    return this.texture.repeat;
  }, set:function(a) {
    console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat.");
    this.texture.repeat = a;
  }}, format:{get:function() {
    console.warn("THREE.WebGLRenderTarget: .format is now .texture.format.");
    return this.texture.format;
  }, set:function(a) {
    console.warn("THREE.WebGLRenderTarget: .format is now .texture.format.");
    this.texture.format = a;
  }}, type:{get:function() {
    console.warn("THREE.WebGLRenderTarget: .type is now .texture.type.");
    return this.texture.type;
  }, set:function(a) {
    console.warn("THREE.WebGLRenderTarget: .type is now .texture.type.");
    this.texture.type = a;
  }}, generateMipmaps:{get:function() {
    console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.");
    return this.texture.generateMipmaps;
  }, set:function(a) {
    console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.");
    this.texture.generateMipmaps = a;
  }}});
  Object.defineProperties(Cd.prototype, {load:{value:function(a) {
    console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");
    var c = this;
    (new Kf).load(a, function(a) {
      c.setBuffer(a);
    });
    return this;
  }}, startTime:{set:function() {
    console.warn("THREE.Audio: .startTime is now .play( delay ).");
  }}});
  Qg.prototype.getData = function() {
    console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData().");
    return this.getFrequencyData();
  };
  sa.prototype.updateCubeMap = function(a, c) {
    console.warn("THREE.CubeCamera: .updateCubeMap() is now .update().");
    return this.update(a, c);
  };
  rc.crossOrigin = void 0;
  rc.loadTexture = function(a, c, b, e) {
    console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");
    var h = new vf;
    h.setCrossOrigin(this.crossOrigin);
    a = h.load(a, b, void 0, e);
    c && (a.mapping = c);
    return a;
  };
  rc.loadTextureCube = function(a, c, b, e) {
    console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");
    var h = new uf;
    h.setCrossOrigin(this.crossOrigin);
    a = h.load(a, b, void 0, e);
    c && (a.mapping = c);
    return a;
  };
  rc.loadCompressedTexture = function() {
    console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.");
  };
  rc.loadCompressedTextureCube = function() {
    console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.");
  };
  "undefined" !== typeof __THREE_DEVTOOLS__ && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", {detail:{revision:"116dev"}}));
  a.ACESFilmicToneMapping = 5;
  a.AddEquation = 100;
  a.AddOperation = 2;
  a.AdditiveAnimationBlendMode = 2501;
  a.AdditiveBlending = 2;
  a.AlphaFormat = 1021;
  a.AlwaysDepth = 1;
  a.AlwaysStencilFunc = 519;
  a.AmbientLight = Cf;
  a.AmbientLightProbe = Lg;
  a.AnimationClip = lb;
  a.AnimationLoader = Cg;
  a.AnimationMixer = Sg;
  a.AnimationObjectGroup = ni;
  a.AnimationUtils = Ca;
  a.ArcCurve = Ad;
  a.ArrayCamera = af;
  a.ArrowHelper = Yb;
  a.Audio = Cd;
  a.AudioAnalyser = Qg;
  a.AudioContext = Og;
  a.AudioListener = Ng;
  a.AudioLoader = Kf;
  a.AxesHelper = Je;
  a.AxisHelper = function(a) {
    console.warn("THREE.AxisHelper has been renamed to THREE.AxesHelper.");
    return new Je(a);
  };
  a.BackSide = 1;
  a.BasicDepthPacking = 3200;
  a.BasicShadowMap = 0;
  a.BinaryTextureLoader = function(a) {
    console.warn("THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.");
    return new tf(a);
  };
  a.Bone = vg;
  a.BooleanKeyframeTrack = pf;
  a.BoundingBoxHelper = function(a, c) {
    console.warn("THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.");
    return new Xb(a, c);
  };
  a.Box2 = Wg;
  a.Box3 = y;
  a.Box3Helper = He;
  a.BoxBufferGeometry = Vd;
  a.BoxGeometry = qh;
  a.BoxHelper = Xb;
  a.BufferAttribute = J;
  a.BufferGeometry = N;
  a.BufferGeometryLoader = If;
  a.ByteType = 1010;
  a.Cache = Vc;
  a.Camera = T;
  a.CameraHelper = Ge;
  a.CanvasRenderer = function() {
    console.error("THREE.CanvasRenderer has been removed");
  };
  a.CanvasTexture = ge;
  a.CatmullRomCurve3 = Wa;
  a.CineonToneMapping = 4;
  a.CircleBufferGeometry = wd;
  a.CircleGeometry = Ae;
  a.ClampToEdgeWrapping = 1001;
  a.Clock = Mg;
  a.ClosedSplineCurve3 = wi;
  a.Color = A;
  a.ColorKeyframeTrack = qf;
  a.CompressedTexture = jd;
  a.CompressedTextureLoader = Dg;
  a.ConeBufferGeometry = ze;
  a.ConeGeometry = ye;
  a.CubeCamera = sa;
  a.CubeGeometry = qh;
  a.CubeReflectionMapping = 301;
  a.CubeRefractionMapping = 302;
  a.CubeTexture = Va;
  a.CubeTextureLoader = uf;
  a.CubeUVReflectionMapping = 306;
  a.CubeUVRefractionMapping = 307;
  a.CubicBezierCurve = ub;
  a.CubicBezierCurve3 = Ib;
  a.CubicInterpolant = nf;
  a.CullFaceBack = 1;
  a.CullFaceFront = 2;
  a.CullFaceFrontBack = 3;
  a.CullFaceNone = 0;
  a.Curve = fa;
  a.CurvePath = Wb;
  a.CustomBlending = 5;
  a.CylinderBufferGeometry = Ub;
  a.CylinderGeometry = Jc;
  a.Cylindrical = ri;
  a.DataTexture = Ja;
  a.DataTexture2DArray = Aa;
  a.DataTexture3D = jb;
  a.DataTextureLoader = tf;
  a.DecrementStencilOp = 7683;
  a.DecrementWrapStencilOp = 34056;
  a.DefaultLoadingManager = ji;
  a.DepthFormat = 1026;
  a.DepthStencilFormat = 1027;
  a.DepthTexture = he;
  a.DirectionalLight = Bf;
  a.DirectionalLightHelper = Gd;
  a.DirectionalLightShadow = Af;
  a.DiscreteInterpolant = of;
  a.DodecahedronBufferGeometry = od;
  a.DodecahedronGeometry = ne;
  a.DoubleSide = 2;
  a.DstAlphaFactor = 206;
  a.DstColorFactor = 208;
  a.DynamicBufferAttribute = function(a, c) {
    console.warn("THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead.");
    return (new J(a, c)).setUsage(35048);
  };
  a.DynamicCopyUsage = 35050;
  a.DynamicDrawUsage = 35048;
  a.DynamicReadUsage = 35049;
  a.EdgesGeometry = vd;
  a.EdgesHelper = function(a, c) {
    console.warn("THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.");
    return new Da(new vd(a.geometry), new za({color:void 0 !== c ? c : 16777215}));
  };
  a.EllipseCurve = gb;
  a.EqualDepth = 4;
  a.EqualStencilFunc = 514;
  a.EquirectangularReflectionMapping = 303;
  a.EquirectangularRefractionMapping = 304;
  a.Euler = c;
  a.EventDispatcher = d;
  a.ExtrudeBufferGeometry = Gb;
  a.ExtrudeGeometry = Fc;
  a.Face3 = E;
  a.Face4 = function(a, c, b, e, h, f, d) {
    console.warn("THREE.Face4 has been removed. A THREE.Face3 will be created instead.");
    return new E(a, c, b, h, f, d);
  };
  a.FaceColors = 1;
  a.FileLoader = mb;
  a.FlatShading = 1;
  a.Float32Attribute = function(a, c) {
    console.warn("THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.");
    return new Q(a, c);
  };
  a.Float32BufferAttribute = Q;
  a.Float64Attribute = function(a, c) {
    console.warn("THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.");
    return new U(a, c);
  };
  a.Float64BufferAttribute = U;
  a.FloatType = 1015;
  a.Fog = df;
  a.FogExp2 = cf;
  a.Font = Ig;
  a.FontLoader = Jg;
  a.FrontFaceDirectionCCW = 1;
  a.FrontFaceDirectionCW = 0;
  a.FrontSide = 0;
  a.Frustum = Ga;
  a.GammaEncoding = 3007;
  a.Geometry = W;
  a.GeometryUtils = {merge:function(a, c, b) {
    console.warn("THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.");
    if (c.isMesh) {
      c.matrixAutoUpdate && c.updateMatrix();
      var e = c.matrix;
      c = c.geometry;
    }
    a.merge(c, e, b);
  }, center:function(a) {
    console.warn("THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.");
    return a.center();
  }};
  a.GreaterDepth = 6;
  a.GreaterEqualDepth = 5;
  a.GreaterEqualStencilFunc = 518;
  a.GreaterStencilFunc = 516;
  a.GridHelper = Mf;
  a.Group = fd;
  a.HalfFloatType = 1016;
  a.HemisphereLight = wf;
  a.HemisphereLightHelper = Fd;
  a.HemisphereLightProbe = Kg;
  a.IcosahedronBufferGeometry = nd;
  a.IcosahedronGeometry = me;
  a.ImageBitmapLoader = Gg;
  a.ImageLoader = zd;
  a.ImageUtils = rc;
  a.ImmediateRenderObject = Fe;
  a.IncrementStencilOp = 7682;
  a.IncrementWrapStencilOp = 34055;
  a.InstancedBufferAttribute = Hf;
  a.InstancedBufferGeometry = Gf;
  a.InstancedInterleavedBuffer = Tg;
  a.InstancedMesh = hf;
  a.Int16Attribute = function(a, c) {
    console.warn("THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.");
    return new M(a, c);
  };
  a.Int16BufferAttribute = M;
  a.Int32Attribute = function(a, c) {
    console.warn("THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.");
    return new O(a, c);
  };
  a.Int32BufferAttribute = O;
  a.Int8Attribute = function(a, c) {
    console.warn("THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.");
    return new R(a, c);
  };
  a.Int8BufferAttribute = R;
  a.IntType = 1013;
  a.InterleavedBuffer = Sb;
  a.InterleavedBufferAttribute = ce;
  a.Interpolant = fb;
  a.InterpolateDiscrete = 2300;
  a.InterpolateLinear = 2301;
  a.InterpolateSmooth = 2302;
  a.InvertStencilOp = 5386;
  a.JSONLoader = function() {
    console.error("THREE.JSONLoader has been removed.");
  };
  a.KeepStencilOp = 7680;
  a.KeyframeTrack = Ta;
  a.LOD = fe;
  a.LatheBufferGeometry = ud;
  a.LatheGeometry = xe;
  a.Layers = h;
  a.LensFlare = function() {
    console.error("THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js");
  };
  a.LessDepth = 2;
  a.LessEqualDepth = 3;
  a.LessEqualStencilFunc = 515;
  a.LessStencilFunc = 513;
  a.Light = xa;
  a.LightProbe = nb;
  a.LightShadow = Kb;
  a.Line = eb;
  a.Line3 = Xg;
  a.LineBasicMaterial = za;
  a.LineCurve = bb;
  a.LineCurve3 = vb;
  a.LineDashedMaterial = Qc;
  a.LineLoop = jf;
  a.LinePieces = 1;
  a.LineSegments = Da;
  a.LineStrip = 0;
  a.LinearEncoding = 3E3;
  a.LinearFilter = 1006;
  a.LinearInterpolant = Be;
  a.LinearMipMapLinearFilter = 1008;
  a.LinearMipMapNearestFilter = 1007;
  a.LinearMipmapLinearFilter = 1008;
  a.LinearMipmapNearestFilter = 1007;
  a.LinearToneMapping = 1;
  a.Loader = ra;
  a.LoaderUtils = wh;
  a.LoadingManager = Bg;
  a.LogLuvEncoding = 3003;
  a.LoopOnce = 2200;
  a.LoopPingPong = 2202;
  a.LoopRepeat = 2201;
  a.LuminanceAlphaFormat = 1025;
  a.LuminanceFormat = 1024;
  a.MOUSE = {LEFT:0, MIDDLE:1, RIGHT:2, ROTATE:0, DOLLY:1, PAN:2};
  a.Material = I;
  a.MaterialLoader = Ff;
  a.Math = oa;
  a.MathUtils = oa;
  a.Matrix3 = b;
  a.Matrix4 = n;
  a.MaxEquation = 104;
  a.Mesh = V;
  a.MeshBasicMaterial = K;
  a.MeshDepthMaterial = lc;
  a.MeshDistanceMaterial = mc;
  a.MeshFaceMaterial = function(a) {
    console.warn("THREE.MeshFaceMaterial has been removed. Use an Array instead.");
    return a;
  };
  a.MeshLambertMaterial = Oc;
  a.MeshMatcapMaterial = Pc;
  a.MeshNormalMaterial = Nc;
  a.MeshPhongMaterial = pc;
  a.MeshPhysicalMaterial = Lc;
  a.MeshStandardMaterial = Hb;
  a.MeshToonMaterial = Mc;
  a.MinEquation = 103;
  a.MirroredRepeatWrapping = 1002;
  a.MixOperation = 1;
  a.MultiMaterial = function(a) {
    void 0 === a && (a = []);
    console.warn("THREE.MultiMaterial has been removed. Use an Array instead.");
    a.isMultiMaterial = !0;
    a.materials = a;
    a.clone = function() {
      return a.slice();
    };
    return a;
  };
  a.MultiplyBlending = 4;
  a.MultiplyOperation = 0;
  a.NearestFilter = 1003;
  a.NearestMipMapLinearFilter = 1005;
  a.NearestMipMapNearestFilter = 1004;
  a.NearestMipmapLinearFilter = 1005;
  a.NearestMipmapNearestFilter = 1004;
  a.NeverDepth = 0;
  a.NeverStencilFunc = 512;
  a.NoBlending = 0;
  a.NoColors = 0;
  a.NoToneMapping = 0;
  a.NormalAnimationBlendMode = 2500;
  a.NormalBlending = 1;
  a.NotEqualDepth = 7;
  a.NotEqualStencilFunc = 517;
  a.NumberKeyframeTrack = xd;
  a.Object3D = t;
  a.ObjectLoader = Jf;
  a.ObjectSpaceNormalMap = 1;
  a.OctahedronBufferGeometry = Dc;
  a.OctahedronGeometry = le;
  a.OneFactor = 201;
  a.OneMinusDstAlphaFactor = 207;
  a.OneMinusDstColorFactor = 209;
  a.OneMinusSrcAlphaFactor = 205;
  a.OneMinusSrcColorFactor = 203;
  a.OrthographicCamera = Bd;
  a.PCFShadowMap = 1;
  a.PCFSoftShadowMap = 2;
  a.PMREMGenerator = Zg;
  a.ParametricBufferGeometry = ld;
  a.ParametricGeometry = ie;
  a.Particle = function(a) {
    console.warn("THREE.Particle has been renamed to THREE.Sprite.");
    return new de(a);
  };
  a.ParticleBasicMaterial = function(a) {
    console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.");
    return new tb(a);
  };
  a.ParticleSystem = function(a, c) {
    console.warn("THREE.ParticleSystem has been renamed to THREE.Points.");
    return new id(a, c);
  };
  a.ParticleSystemMaterial = function(a) {
    console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.");
    return new tb(a);
  };
  a.Path = yb;
  a.PerspectiveCamera = ia;
  a.Plane = w;
  a.PlaneBufferGeometry = ya;
  a.PlaneGeometry = wa;
  a.PlaneHelper = Ie;
  a.PointCloud = function(a, c) {
    console.warn("THREE.PointCloud has been renamed to THREE.Points.");
    return new id(a, c);
  };
  a.PointCloudMaterial = function(a) {
    console.warn("THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.");
    return new tb(a);
  };
  a.PointLight = zf;
  a.PointLightHelper = Ed;
  a.Points = id;
  a.PointsMaterial = tb;
  a.PolarGridHelper = Nf;
  a.PolyhedronBufferGeometry = ab;
  a.PolyhedronGeometry = je;
  a.PositionalAudio = Pg;
  a.PropertyBinding = Xa;
  a.PropertyMixer = Rg;
  a.QuadraticBezierCurve = wb;
  a.QuadraticBezierCurve3 = Jb;
  a.Quaternion = q;
  a.QuaternionKeyframeTrack = Ce;
  a.QuaternionLinearInterpolant = rf;
  a.REVISION = "116dev";
  a.RGBADepthPacking = 3201;
  a.RGBAFormat = 1023;
  a.RGBAIntegerFormat = 1033;
  a.RGBA_ASTC_10x10_Format = 37819;
  a.RGBA_ASTC_10x5_Format = 37816;
  a.RGBA_ASTC_10x6_Format = 37817;
  a.RGBA_ASTC_10x8_Format = 37818;
  a.RGBA_ASTC_12x10_Format = 37820;
  a.RGBA_ASTC_12x12_Format = 37821;
  a.RGBA_ASTC_4x4_Format = 37808;
  a.RGBA_ASTC_5x4_Format = 37809;
  a.RGBA_ASTC_5x5_Format = 37810;
  a.RGBA_ASTC_6x5_Format = 37811;
  a.RGBA_ASTC_6x6_Format = 37812;
  a.RGBA_ASTC_8x5_Format = 37813;
  a.RGBA_ASTC_8x6_Format = 37814;
  a.RGBA_ASTC_8x8_Format = 37815;
  a.RGBA_BPTC_Format = 36492;
  a.RGBA_ETC2_EAC_Format = 37496;
  a.RGBA_PVRTC_2BPPV1_Format = 35843;
  a.RGBA_PVRTC_4BPPV1_Format = 35842;
  a.RGBA_S3TC_DXT1_Format = 33777;
  a.RGBA_S3TC_DXT3_Format = 33778;
  a.RGBA_S3TC_DXT5_Format = 33779;
  a.RGBDEncoding = 3006;
  a.RGBEEncoding = 3002;
  a.RGBEFormat = 1023;
  a.RGBFormat = 1022;
  a.RGBIntegerFormat = 1032;
  a.RGBM16Encoding = 3005;
  a.RGBM7Encoding = 3004;
  a.RGB_ETC1_Format = 36196;
  a.RGB_ETC2_Format = 37492;
  a.RGB_PVRTC_2BPPV1_Format = 35841;
  a.RGB_PVRTC_4BPPV1_Format = 35840;
  a.RGB_S3TC_DXT1_Format = 33776;
  a.RGFormat = 1030;
  a.RGIntegerFormat = 1031;
  a.RawShaderMaterial = Vb;
  a.Ray = v;
  a.Raycaster = Ug;
  a.RectAreaLight = Df;
  a.RedFormat = 1028;
  a.RedIntegerFormat = 1029;
  a.ReinhardToneMapping = 2;
  a.RepeatWrapping = 1E3;
  a.ReplaceStencilOp = 7681;
  a.ReverseSubtractEquation = 102;
  a.RingBufferGeometry = td;
  a.RingGeometry = we;
  a.SRGB8_ALPHA8_ASTC_10x10_Format = 37851;
  a.SRGB8_ALPHA8_ASTC_10x5_Format = 37848;
  a.SRGB8_ALPHA8_ASTC_10x6_Format = 37849;
  a.SRGB8_ALPHA8_ASTC_10x8_Format = 37850;
  a.SRGB8_ALPHA8_ASTC_12x10_Format = 37852;
  a.SRGB8_ALPHA8_ASTC_12x12_Format = 37853;
  a.SRGB8_ALPHA8_ASTC_4x4_Format = 37840;
  a.SRGB8_ALPHA8_ASTC_5x4_Format = 37841;
  a.SRGB8_ALPHA8_ASTC_5x5_Format = 37842;
  a.SRGB8_ALPHA8_ASTC_6x5_Format = 37843;
  a.SRGB8_ALPHA8_ASTC_6x6_Format = 37844;
  a.SRGB8_ALPHA8_ASTC_8x5_Format = 37845;
  a.SRGB8_ALPHA8_ASTC_8x6_Format = 37846;
  a.SRGB8_ALPHA8_ASTC_8x8_Format = 37847;
  a.Scene = z;
  a.SceneUtils = {createMultiMaterialObject:function() {
    console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js");
  }, detach:function() {
    console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js");
  }, attach:function() {
    console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js");
  }};
  a.ShaderChunk = pa;
  a.ShaderLib = Bb;
  a.ShaderMaterial = ka;
  a.ShadowMaterial = Kc;
  a.Shape = qc;
  a.ShapeBufferGeometry = Ic;
  a.ShapeGeometry = Hc;
  a.ShapePath = Hg;
  a.ShapeUtils = Tb;
  a.ShortType = 1011;
  a.Skeleton = gf;
  a.SkeletonHelper = Rc;
  a.SkinnedMesh = ff;
  a.SmoothShading = 2;
  a.Sphere = p;
  a.SphereBufferGeometry = Gc;
  a.SphereGeometry = ve;
  a.Spherical = qi;
  a.SphericalHarmonics3 = Ef;
  a.SphericalReflectionMapping = 305;
  a.Spline = ch;
  a.SplineCurve = xb;
  a.SplineCurve3 = xi;
  a.SpotLight = yf;
  a.SpotLightHelper = Dd;
  a.SpotLightShadow = xf;
  a.Sprite = de;
  a.SpriteMaterial = nc;
  a.SrcAlphaFactor = 204;
  a.SrcAlphaSaturateFactor = 210;
  a.SrcColorFactor = 202;
  a.StaticCopyUsage = 35046;
  a.StaticDrawUsage = 35044;
  a.StaticReadUsage = 35045;
  a.StereoCamera = li;
  a.StreamCopyUsage = 35042;
  a.StreamDrawUsage = 35040;
  a.StreamReadUsage = 35041;
  a.StringKeyframeTrack = sf;
  a.SubtractEquation = 101;
  a.SubtractiveBlending = 3;
  a.TOUCH = {ROTATE:0, PAN:1, DOLLY_PAN:2, DOLLY_ROTATE:3};
  a.TangentSpaceNormalMap = 0;
  a.TetrahedronBufferGeometry = md;
  a.TetrahedronGeometry = ke;
  a.TextBufferGeometry = sd;
  a.TextGeometry = ue;
  a.Texture = g;
  a.TextureLoader = vf;
  a.TorusBufferGeometry = qd;
  a.TorusGeometry = qe;
  a.TorusKnotBufferGeometry = pd;
  a.TorusKnotGeometry = pe;
  a.Triangle = C;
  a.TriangleFanDrawMode = 2;
  a.TriangleStripDrawMode = 1;
  a.TrianglesDrawMode = 0;
  a.TubeBufferGeometry = Ec;
  a.TubeGeometry = oe;
  a.UVMapping = 300;
  a.Uint16Attribute = function(a, c) {
    console.warn("THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.");
    return new S(a, c);
  };
  a.Uint16BufferAttribute = S;
  a.Uint32Attribute = function(a, c) {
    console.warn("THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.");
    return new Z(a, c);
  };
  a.Uint32BufferAttribute = Z;
  a.Uint8Attribute = function(a, c) {
    console.warn("THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.");
    return new L(a, c);
  };
  a.Uint8BufferAttribute = L;
  a.Uint8ClampedAttribute = function(a, c) {
    console.warn("THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.");
    return new H(a, c);
  };
  a.Uint8ClampedBufferAttribute = H;
  a.Uncharted2ToneMapping = 3;
  a.Uniform = Lf;
  a.UniformsLib = aa;
  a.UniformsUtils = Uh;
  a.UnsignedByteType = 1009;
  a.UnsignedInt248Type = 1020;
  a.UnsignedIntType = 1014;
  a.UnsignedShort4444Type = 1017;
  a.UnsignedShort5551Type = 1018;
  a.UnsignedShort565Type = 1019;
  a.UnsignedShortType = 1012;
  a.VSMShadowMap = 3;
  a.Vector2 = k;
  a.Vector3 = m;
  a.Vector4 = f;
  a.VectorKeyframeTrack = yd;
  a.Vertex = function(a, c, b) {
    console.warn("THREE.Vertex has been removed. Use THREE.Vector3 instead.");
    return new m(a, c, b);
  };
  a.VertexColors = 2;
  a.VideoTexture = yg;
  a.WebGLCubeRenderTarget = va;
  a.WebGLMultisampleRenderTarget = r;
  a.WebGLRenderTarget = e;
  a.WebGLRenderTargetCube = function(a, c, b) {
    console.warn("THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options ).");
    return new va(a, b);
  };
  a.WebGLRenderer = ug;
  a.WebGLUtils = Yh;
  a.WireframeGeometry = kd;
  a.WireframeHelper = function(a, c) {
    console.warn("THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.");
    return new Da(new kd(a.geometry), new za({color:void 0 !== c ? c : 16777215}));
  };
  a.WrapAroundEnding = 2402;
  a.XHRLoader = function(a) {
    console.warn("THREE.XHRLoader has been renamed to THREE.FileLoader.");
    return new mb(a);
  };
  a.ZeroCurvatureEnding = 2400;
  a.ZeroFactor = 200;
  a.ZeroSlopeEnding = 2401;
  a.ZeroStencilOp = 0;
  a.sRGBEncoding = 3001;
  Object.defineProperty(a, "__esModule", {value:!0});
});
(function() {
  function a() {
    this.tolerance = -1;
    this.faces = [];
    this.newFaces = [];
    this.assigned = new g;
    this.unassigned = new g;
    this.vertices = [];
  }
  function d() {
    this.normal = new THREE.Vector3;
    this.midpoint = new THREE.Vector3;
    this.constant = this.area = 0;
    this.outside = null;
    this.mark = 0;
    this.edge = null;
  }
  function k(a, b) {
    this.vertex = a;
    this.twin = this.next = this.prev = null;
    this.face = b;
  }
  function b(a) {
    this.point = a;
    this.face = this.next = this.prev = null;
  }
  function g() {
    this.tail = this.head = null;
  }
  Object.assign(a.prototype, {setFromPoints:function(a) {
    !0 !== Array.isArray(a) && console.error("THREE.QuickHull: Points parameter is not an array.");
    4 > a.length && console.error("THREE.QuickHull: The algorithm needs at least four points.");
    this.makeEmpty();
    for (var e = 0, f = a.length; e < f; e++) {
      this.vertices.push(new b(a[e]));
    }
    this.compute();
    return this;
  }, setFromObject:function(a) {
    var b = [];
    a.updateMatrixWorld(!0);
    a.traverse(function(a) {
      var e;
      var f = a.geometry;
      if (void 0 !== f) {
        if (f.isGeometry) {
          var d = f.vertices;
          f = 0;
          for (e = d.length; f < e; f++) {
            var c = d[f].clone();
            c.applyMatrix4(a.matrixWorld);
            b.push(c);
          }
        } else {
          if (f.isBufferGeometry && (d = f.attributes.position, void 0 !== d)) {
            for (f = 0, e = d.count; f < e; f++) {
              c = new THREE.Vector3, c.fromBufferAttribute(d, f).applyMatrix4(a.matrixWorld), b.push(c);
            }
          }
        }
      }
    });
    return this.setFromPoints(b);
  }, makeEmpty:function() {
    this.faces = [];
    this.vertices = [];
    return this;
  }, addVertexToFace:function(a, b) {
    a.face = b;
    null === b.outside ? this.assigned.append(a) : this.assigned.insertBefore(b.outside, a);
    b.outside = a;
    return this;
  }, removeVertexFromFace:function(a, b) {
    a === b.outside && (b.outside = null !== a.next && a.next.face === b ? a.next : null);
    this.assigned.remove(a);
    return this;
  }, removeAllVerticesFromFace:function(a) {
    if (null !== a.outside) {
      for (var b = a.outside, f = a.outside; null !== f.next && f.next.face === a;) {
        f = f.next;
      }
      this.assigned.removeSubList(b, f);
      b.prev = f.next = null;
      a.outside = null;
      return b;
    }
  }, deleteFaceVertices:function(a, b) {
    a = this.removeAllVerticesFromFace(a);
    if (void 0 !== a) {
      if (void 0 === b) {
        this.unassigned.appendChain(a);
      } else {
        do {
          var e = a.next;
          b.distanceToPoint(a.point) > this.tolerance ? this.addVertexToFace(a, b) : this.unassigned.append(a);
          a = e;
        } while (null !== a);
      }
    }
    return this;
  }, resolveUnassignedPoints:function(a) {
    if (!1 === this.unassigned.isEmpty()) {
      var b = this.unassigned.first();
      do {
        for (var f = b.next, d = this.tolerance, g = null, n = 0; n < a.length; n++) {
          var c = a[n];
          if (0 === c.mark) {
            var h = c.distanceToPoint(b.point);
            h > d && (d = h, g = c);
            if (d > 1E3 * this.tolerance) {
              break;
            }
          }
        }
        null !== g && this.addVertexToFace(b, g);
        b = f;
      } while (null !== b);
    }
    return this;
  }, computeExtremes:function() {
    var a = new THREE.Vector3, b = new THREE.Vector3, d = [], g = [], m, n, c;
    for (m = 0; 3 > m; m++) {
      d[m] = g[m] = this.vertices[0];
    }
    a.copy(this.vertices[0].point);
    b.copy(this.vertices[0].point);
    m = 0;
    for (n = this.vertices.length; m < n; m++) {
      var h = this.vertices[m], k = h.point;
      for (c = 0; 3 > c; c++) {
        k.getComponent(c) < a.getComponent(c) && (a.setComponent(c, k.getComponent(c)), d[c] = h);
      }
      for (c = 0; 3 > c; c++) {
        k.getComponent(c) > b.getComponent(c) && (b.setComponent(c, k.getComponent(c)), g[c] = h);
      }
    }
    this.tolerance = 3 * Number.EPSILON * (Math.max(Math.abs(a.x), Math.abs(b.x)) + Math.max(Math.abs(a.y), Math.abs(b.y)) + Math.max(Math.abs(a.z), Math.abs(b.z)));
    return {min:d, max:g};
  }, computeInitialHull:function() {
    var a, b, g;
    return function() {
      void 0 === a && (a = new THREE.Line3, b = new THREE.Plane, g = new THREE.Vector3);
      var e = this.vertices, f = this.computeExtremes(), n = f.min, c = f.max, h, k, r = 0;
      for (f = k = 0; 3 > f; f++) {
        var y = c[f].point.getComponent(f) - n[f].point.getComponent(f);
        y > r && (r = y, k = f);
      }
      n = n[k];
      c = c[k];
      r = 0;
      a.set(n.point, c.point);
      f = 0;
      for (h = this.vertices.length; f < h; f++) {
        var x = e[f];
        if (x !== n && x !== c && (a.closestPointToPoint(x.point, !0, g), y = g.distanceToSquared(x.point), y > r)) {
          r = y;
          var p = x;
        }
      }
      r = -1;
      b.setFromCoplanarPoints(n.point, c.point, p.point);
      f = 0;
      for (h = this.vertices.length; f < h; f++) {
        if (x = e[f], x !== n && x !== c && x !== p && (y = Math.abs(b.distanceToPoint(x.point)), y > r)) {
          r = y;
          var v = x;
        }
      }
      y = [];
      if (0 > b.distanceToPoint(v.point)) {
        for (y.push(d.create(n, c, p), d.create(v, c, n), d.create(v, p, c), d.create(v, n, p)), f = 0; 3 > f; f++) {
          k = (f + 1) % 3, y[f + 1].getEdge(2).setTwin(y[0].getEdge(k)), y[f + 1].getEdge(1).setTwin(y[k + 1].getEdge(0));
        }
      } else {
        for (y.push(d.create(n, p, c), d.create(v, n, c), d.create(v, c, p), d.create(v, p, n)), f = 0; 3 > f; f++) {
          k = (f + 1) % 3, y[f + 1].getEdge(2).setTwin(y[0].getEdge((3 - f) % 3)), y[f + 1].getEdge(0).setTwin(y[k + 1].getEdge(1));
        }
      }
      for (f = 0; 4 > f; f++) {
        this.faces.push(y[f]);
      }
      f = 0;
      for (h = e.length; f < h; f++) {
        if (x = e[f], x !== n && x !== c && x !== p && x !== v) {
          r = this.tolerance;
          var w = null;
          for (k = 0; 4 > k; k++) {
            y = this.faces[k].distanceToPoint(x.point), y > r && (r = y, w = this.faces[k]);
          }
          null !== w && this.addVertexToFace(x, w);
        }
      }
      return this;
    };
  }(), reindexFaces:function() {
    for (var a = [], b = 0; b < this.faces.length; b++) {
      var d = this.faces[b];
      0 === d.mark && a.push(d);
    }
    this.faces = a;
    return this;
  }, nextVertexToAdd:function() {
    if (!1 === this.assigned.isEmpty()) {
      var a = 0, b = this.assigned.first().face, d = b.outside;
      do {
        var g = b.distanceToPoint(d.point);
        if (g > a) {
          a = g;
          var m = d;
        }
        d = d.next;
      } while (null !== d && d.face === b);
      return m;
    }
  }, computeHorizon:function(a, b, d, g) {
    this.deleteFaceVertices(d);
    d.mark = 1;
    d = null === b ? b = d.getEdge(0) : b.next;
    do {
      var e = d.twin, f = e.face;
      0 === f.mark && (f.distanceToPoint(a) > this.tolerance ? this.computeHorizon(a, e, f, g) : g.push(d));
      d = d.next;
    } while (d !== b);
    return this;
  }, addAdjoiningFace:function(a, b) {
    a = d.create(a, b.tail(), b.head());
    this.faces.push(a);
    a.getEdge(-1).setTwin(b.twin);
    return a.getEdge(0);
  }, addNewFaces:function(a, b) {
    this.newFaces = [];
    for (var e = null, f = null, d = 0; d < b.length; d++) {
      var g = this.addAdjoiningFace(a, b[d]);
      null === e ? e = g : g.next.setTwin(f);
      this.newFaces.push(g.face);
      f = g;
    }
    e.next.setTwin(f);
    return this;
  }, addVertexToHull:function(a) {
    var b = [];
    this.unassigned.clear();
    this.removeVertexFromFace(a, a.face);
    this.computeHorizon(a.point, null, a.face, b);
    this.addNewFaces(a, b);
    this.resolveUnassignedPoints(this.newFaces);
    return this;
  }, cleanup:function() {
    this.assigned.clear();
    this.unassigned.clear();
    this.newFaces = [];
    return this;
  }, compute:function() {
    var a;
    for (this.computeInitialHull(); void 0 !== (a = this.nextVertexToAdd());) {
      this.addVertexToHull(a);
    }
    this.reindexFaces();
    this.cleanup();
    return this;
  }});
  Object.assign(d, {create:function(a, b, g) {
    var e = new d;
    a = new k(a, e);
    b = new k(b, e);
    g = new k(g, e);
    a.next = g.prev = b;
    b.next = a.prev = g;
    g.next = b.prev = a;
    e.edge = a;
    return e.compute();
  }});
  Object.assign(d.prototype, {getEdge:function(a) {
    for (var b = this.edge; 0 < a;) {
      b = b.next, a--;
    }
    for (; 0 > a;) {
      b = b.prev, a++;
    }
    return b;
  }, compute:function() {
    var a;
    return function() {
      void 0 === a && (a = new THREE.Triangle);
      var b = this.edge.tail(), f = this.edge.head(), d = this.edge.next.head();
      a.set(b.point, f.point, d.point);
      a.getNormal(this.normal);
      a.getMidpoint(this.midpoint);
      this.area = a.getArea();
      this.constant = this.normal.dot(this.midpoint);
      return this;
    };
  }(), distanceToPoint:function(a) {
    return this.normal.dot(a) - this.constant;
  }});
  Object.assign(k.prototype, {head:function() {
    return this.vertex;
  }, tail:function() {
    return this.prev ? this.prev.vertex : null;
  }, length:function() {
    var a = this.head(), b = this.tail();
    return null !== b ? b.point.distanceTo(a.point) : -1;
  }, lengthSquared:function() {
    var a = this.head(), b = this.tail();
    return null !== b ? b.point.distanceToSquared(a.point) : -1;
  }, setTwin:function(a) {
    this.twin = a;
    a.twin = this;
    return this;
  }});
  Object.assign(g.prototype, {first:function() {
    return this.head;
  }, last:function() {
    return this.tail;
  }, clear:function() {
    this.head = this.tail = null;
    return this;
  }, insertBefore:function(a, b) {
    b.prev = a.prev;
    b.next = a;
    null === b.prev ? this.head = b : b.prev.next = b;
    a.prev = b;
    return this;
  }, insertAfter:function(a, b) {
    b.prev = a;
    b.next = a.next;
    null === b.next ? this.tail = b : b.next.prev = b;
    a.next = b;
    return this;
  }, append:function(a) {
    null === this.head ? this.head = a : this.tail.next = a;
    a.prev = this.tail;
    a.next = null;
    this.tail = a;
    return this;
  }, appendChain:function(a) {
    null === this.head ? this.head = a : this.tail.next = a;
    for (a.prev = this.tail; null !== a.next;) {
      a = a.next;
    }
    this.tail = a;
    return this;
  }, remove:function(a) {
    null === a.prev ? this.head = a.next : a.prev.next = a.next;
    null === a.next ? this.tail = a.prev : a.next.prev = a.prev;
    return this;
  }, removeSubList:function(a, b) {
    null === a.prev ? this.head = b.next : a.prev.next = b.next;
    null === b.next ? this.tail = a.prev : b.next.prev = a.prev;
    return this;
  }, isEmpty:function() {
    return null === this.head;
  }});
  THREE.QuickHull = a;
})();
var SimplexNoise = function(a) {
  void 0 == a && (a = Math);
  this.grad3 = [[1, 1, 0], [-1, 1, 0], [1, -1, 0], [-1, -1, 0], [1, 0, 1], [-1, 0, 1], [1, 0, -1], [-1, 0, -1], [0, 1, 1], [0, -1, 1], [0, 1, -1], [0, -1, -1]];
  this.grad4 = [[0, 1, 1, 1], [0, 1, 1, -1], [0, 1, -1, 1], [0, 1, -1, -1], [0, -1, 1, 1], [0, -1, 1, -1], [0, -1, -1, 1], [0, -1, -1, -1], [1, 0, 1, 1], [1, 0, 1, -1], [1, 0, -1, 1], [1, 0, -1, -1], [-1, 0, 1, 1], [-1, 0, 1, -1], [-1, 0, -1, 1], [-1, 0, -1, -1], [1, 1, 0, 1], [1, 1, 0, -1], [1, -1, 0, 1], [1, -1, 0, -1], [-1, 1, 0, 1], [-1, 1, 0, -1], [-1, -1, 0, 1], [-1, -1, 0, -1], [1, 1, 1, 0], [1, 1, -1, 0], [1, -1, 1, 0], [1, -1, -1, 0], [-1, 1, 1, 0], [-1, 1, -1, 0], [-1, -1, 1, 0], [-1, -1, 
  -1, 0]];
  this.p = [];
  for (var d = 0; 256 > d; d++) {
    this.p[d] = Math.floor(256 * a.random());
  }
  this.perm = [];
  for (d = 0; 512 > d; d++) {
    this.perm[d] = this.p[d & 255];
  }
  this.simplex = [[0, 1, 2, 3], [0, 1, 3, 2], [0, 0, 0, 0], [0, 2, 3, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 2, 3, 0], [0, 2, 1, 3], [0, 0, 0, 0], [0, 3, 1, 2], [0, 3, 2, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 3, 2, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 2, 0, 3], [0, 0, 0, 0], [1, 3, 0, 2], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 3, 0, 1], [2, 3, 1, 0], [1, 0, 2, 3], [1, 0, 3, 2], [0, 0, 
  0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 0, 3, 1], [0, 0, 0, 0], [2, 1, 3, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 0, 1, 3], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [3, 0, 1, 2], [3, 0, 2, 1], [0, 0, 0, 0], [3, 1, 2, 0], [2, 1, 0, 3], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [3, 1, 0, 2], [0, 0, 0, 0], [3, 2, 0, 1], [3, 2, 1, 0]];
};
SimplexNoise.prototype.dot = function(a, d, k) {
  return a[0] * d + a[1] * k;
};
SimplexNoise.prototype.dot3 = function(a, d, k, b) {
  return a[0] * d + a[1] * k + a[2] * b;
};
SimplexNoise.prototype.dot4 = function(a, d, k, b, g) {
  return a[0] * d + a[1] * k + a[2] * b + a[3] * g;
};
SimplexNoise.prototype.noise = function(a, d) {
  var k = .5 * (a + d) * (Math.sqrt(3) - 1), b = Math.floor(a + k), g = Math.floor(d + k);
  k = (3 - Math.sqrt(3)) / 6;
  var f = (b + g) * k;
  a -= b - f;
  var e = d - (g - f);
  if (a > e) {
    var r = 1;
    var q = 0;
  } else {
    r = 0, q = 1;
  }
  f = a - r + k;
  var m = e - q + k;
  d = a - 1 + 2 * k;
  k = e - 1 + 2 * k;
  var n = b & 255, c = g & 255;
  b = this.perm[n + this.perm[c]] % 12;
  g = this.perm[n + r + this.perm[c + q]] % 12;
  r = this.perm[n + 1 + this.perm[c + 1]] % 12;
  q = .5 - a * a - e * e;
  0 > q ? a = 0 : (q *= q, a = q * q * this.dot(this.grad3[b], a, e));
  e = .5 - f * f - m * m;
  0 > e ? f = 0 : (e *= e, f = e * e * this.dot(this.grad3[g], f, m));
  m = .5 - d * d - k * k;
  0 > m ? d = 0 : (m *= m, d = m * m * this.dot(this.grad3[r], d, k));
  return 70 * (a + f + d);
};
SimplexNoise.prototype.noise3d = function(a, d, k) {
  var b = 1 / 3 * (a + d + k), g = Math.floor(a + b), f = Math.floor(d + b), e = Math.floor(k + b);
  b = 1 / 6;
  var r = (g + f + e) * b;
  var q = a - (g - r);
  var m = d - (f - r);
  var n = k - (e - r), c, h;
  if (q >= m) {
    if (m >= n) {
      var t = 1;
      var z = c = 0;
      var y = h = 1;
      var x = 0;
    } else {
      q >= n ? (t = 1, z = c = 0) : (c = t = 0, z = 1), h = 1, y = 0, x = 1;
    }
  } else {
    m < n ? (c = t = 0, z = 1, h = 0, x = y = 1) : q < n ? (t = 0, c = 1, h = z = 0, x = y = 1) : (t = 0, c = 1, z = 0, y = h = 1, x = 0);
  }
  var p = q - t + b, v = m - c + b, w = n - z + b;
  r = q - h + 2 * b;
  a = m - y + 2 * b;
  var C = n - x + 2 * b;
  k = q - 1 + 3 * b;
  d = m - 1 + 3 * b;
  b = n - 1 + 3 * b;
  g &= 255;
  var A = f & 255, D = e & 255;
  f = this.perm[g + this.perm[A + this.perm[D]]] % 12;
  e = this.perm[g + t + this.perm[A + c + this.perm[D + z]]] % 12;
  h = this.perm[g + h + this.perm[A + y + this.perm[D + x]]] % 12;
  g = this.perm[g + 1 + this.perm[A + 1 + this.perm[D + 1]]] % 12;
  y = .6 - q * q - m * m - n * n;
  0 > y ? q = 0 : (y *= y, q = y * y * this.dot3(this.grad3[f], q, m, n));
  m = .6 - p * p - v * v - w * w;
  0 > m ? m = 0 : (m *= m, m = m * m * this.dot3(this.grad3[e], p, v, w));
  p = .6 - r * r - a * a - C * C;
  0 > p ? r = 0 : (p *= p, r = p * p * this.dot3(this.grad3[h], r, a, C));
  a = .6 - k * k - d * d - b * b;
  0 > a ? k = 0 : (a *= a, k = a * a * this.dot3(this.grad3[g], k, d, b));
  return 32 * (q + m + r + k);
};
SimplexNoise.prototype.noise4d = function(a, d, k, b) {
  var g = this.grad4, f = this.simplex, e = this.perm, r = (5 - Math.sqrt(5)) / 20;
  var q = (Math.sqrt(5) - 1) / 4 * (a + d + k + b);
  var m = Math.floor(a + q), n = Math.floor(d + q), c = Math.floor(k + q), h = Math.floor(b + q);
  q = (m + n + c + h) * r;
  a -= m - q;
  var t = d - (n - q);
  var z = k - (c - q);
  var y = b - (h - q);
  b = (a > t ? 32 : 0) + (a > z ? 16 : 0) + (t > z ? 8 : 0) + (a > y ? 4 : 0) + (t > y ? 2 : 0) + (z > y ? 1 : 0);
  var x = 3 <= f[b][0] ? 1 : 0;
  var p = 3 <= f[b][1] ? 1 : 0;
  var v = 3 <= f[b][2] ? 1 : 0;
  var w = 3 <= f[b][3] ? 1 : 0;
  var C = 2 <= f[b][0] ? 1 : 0;
  var A = 2 <= f[b][1] ? 1 : 0;
  var D = 2 <= f[b][2] ? 1 : 0;
  var F = 2 <= f[b][3] ? 1 : 0;
  var B = 1 <= f[b][0] ? 1 : 0;
  var E = 1 <= f[b][1] ? 1 : 0;
  var I = 1 <= f[b][2] ? 1 : 0;
  var K = 1 <= f[b][3] ? 1 : 0;
  var J = a - x + r, R = t - p + r, L = z - v + r, H = y - w + r, M = a - C + 2 * r, S = t - A + 2 * r, O = z - D + 2 * r, Z = y - F + 2 * r;
  q = a - B + 3 * r;
  d = t - E + 3 * r;
  var Q = z - I + 3 * r, U = y - K + 3 * r;
  f = a - 1 + 4 * r;
  b = t - 1 + 4 * r;
  k = z - 1 + 4 * r;
  r = y - 1 + 4 * r;
  m &= 255;
  n &= 255;
  var P = c & 255;
  h &= 255;
  c = e[m + e[n + e[P + e[h]]]] % 32;
  x = e[m + x + e[n + p + e[P + v + e[h + w]]]] % 32;
  C = e[m + C + e[n + A + e[P + D + e[h + F]]]] % 32;
  B = e[m + B + e[n + E + e[P + I + e[h + K]]]] % 32;
  e = e[m + 1 + e[n + 1 + e[P + 1 + e[h + 1]]]] % 32;
  h = .6 - a * a - t * t - z * z - y * y;
  0 > h ? a = 0 : (h *= h, a = h * h * this.dot4(g[c], a, t, z, y));
  t = .6 - J * J - R * R - L * L - H * H;
  0 > t ? t = 0 : (t *= t, t = t * t * this.dot4(g[x], J, R, L, H));
  z = .6 - M * M - S * S - O * O - Z * Z;
  0 > z ? z = 0 : (z *= z, z = z * z * this.dot4(g[C], M, S, O, Z));
  M = .6 - q * q - d * d - Q * Q - U * U;
  0 > M ? q = 0 : (M *= M, q = M * M * this.dot4(g[B], q, d, Q, U));
  d = .6 - f * f - b * b - k * k - r * r;
  0 > d ? g = 0 : (d *= d, g = d * d * this.dot4(g[e], f, b, k, r));
  return 27 * (a + t + z + q + g);
};
THREE.AfterimageShader = {uniforms:{damp:{value:.96}, tOld:{value:null}, tNew:{value:null}}, vertexShader:"varying vec2 vUv;\nvoid main() {\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"uniform float damp;\nuniform sampler2D tOld;\nuniform sampler2D tNew;\nvarying vec2 vUv;\nvec4 when_gt( vec4 x, float y ) {\n\treturn max( sign( x - y ), 0.0 );\n}\nvoid main() {\n\tvec4 texelOld = texture2D( tOld, vUv );\n\tvec4 texelNew = texture2D( tNew, vUv );\n\ttexelOld *= damp * when_gt( texelOld, 0.1 );\n\tgl_FragColor = max(texelNew, texelOld);\n}"};
THREE.CopyShader = {uniforms:{tDiffuse:{value:null}, opacity:{value:1}}, vertexShader:"varying vec2 vUv;\nvoid main() {\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"uniform float opacity;\nuniform sampler2D tDiffuse;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texel = texture2D( tDiffuse, vUv );\n\tgl_FragColor = opacity * texel;\n}"};
THREE.BokehShader = {defines:{DEPTH_PACKING:1, PERSPECTIVE_CAMERA:1}, uniforms:{tColor:{value:null}, tDepth:{value:null}, focus:{value:1}, aspect:{value:1}, aperture:{value:.025}, maxblur:{value:1}, nearClip:{value:1}, farClip:{value:1E3}}, vertexShader:"varying vec2 vUv;\nvoid main() {\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"#include <common>\nvarying vec2 vUv;\nuniform sampler2D tColor;\nuniform sampler2D tDepth;\nuniform float maxblur;\nuniform float aperture;\nuniform float nearClip;\nuniform float farClip;\nuniform float focus;\nuniform float aspect;\n#include <packing>\nfloat getDepth( const in vec2 screenPosition ) {\n\t#if DEPTH_PACKING == 1\n\treturn unpackRGBAToDepth( texture2D( tDepth, screenPosition ) );\n\t#else\n\treturn texture2D( tDepth, screenPosition ).x;\n\t#endif\n}\nfloat getViewZ( const in float depth ) {\n\t#if PERSPECTIVE_CAMERA == 1\n\treturn perspectiveDepthToViewZ( depth, nearClip, farClip );\n\t#else\n\treturn orthographicDepthToViewZ( depth, nearClip, farClip );\n\t#endif\n}\nvoid main() {\n\tvec2 aspectcorrect = vec2( 1.0, aspect );\n\tfloat viewZ = getViewZ( getDepth( vUv ) );\n\tfloat factor = ( focus + viewZ );\n\tvec2 dofblur = vec2 ( clamp( factor * aperture, -maxblur, maxblur ) );\n\tvec2 dofblur9 = dofblur * 0.9;\n\tvec2 dofblur7 = dofblur * 0.7;\n\tvec2 dofblur4 = dofblur * 0.4;\n\tvec4 col = vec4( 0.0 );\n\tcol += texture2D( tColor, vUv.xy );\n\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur );\n\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15,  0.37 ) * aspectcorrect ) * dofblur );\n\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur );\n\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37,  0.15 ) * aspectcorrect ) * dofblur );\n\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.40,  0.0  ) * aspectcorrect ) * dofblur );\n\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37, -0.15 ) * aspectcorrect ) * dofblur );\n\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur );\n\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15, -0.37 ) * aspectcorrect ) * dofblur );\n\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur );\n\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15,  0.37 ) * aspectcorrect ) * dofblur );\n\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur );\n\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37,  0.15 ) * aspectcorrect ) * dofblur );\n\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur );\n\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37, -0.15 ) * aspectcorrect ) * dofblur );\n\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur );\n\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15, -0.37 ) * aspectcorrect ) * dofblur );\n\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15,  0.37 ) * aspectcorrect ) * dofblur9 );\n\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37,  0.15 ) * aspectcorrect ) * dofblur9 );\n\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37, -0.15 ) * aspectcorrect ) * dofblur9 );\n\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15, -0.37 ) * aspectcorrect ) * dofblur9 );\n\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15,  0.37 ) * aspectcorrect ) * dofblur9 );\n\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37,  0.15 ) * aspectcorrect ) * dofblur9 );\n\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37, -0.15 ) * aspectcorrect ) * dofblur9 );\n\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15, -0.37 ) * aspectcorrect ) * dofblur9 );\n\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur7 );\n\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.40,  0.0  ) * aspectcorrect ) * dofblur7 );\n\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur7 );\n\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur7 );\n\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur7 );\n\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur7 );\n\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur7 );\n\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur7 );\n\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur4 );\n\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.4,   0.0  ) * aspectcorrect ) * dofblur4 );\n\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur4 );\n\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur4 );\n\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur4 );\n\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur4 );\n\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur4 );\n\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur4 );\n\tgl_FragColor = col / 41.0;\n\tgl_FragColor.a = 1.0;\n}"};
THREE.SAOShader = {defines:{NUM_SAMPLES:7, NUM_RINGS:4, NORMAL_TEXTURE:0, DIFFUSE_TEXTURE:0, DEPTH_PACKING:1, PERSPECTIVE_CAMERA:1}, uniforms:{tDepth:{value:null}, tDiffuse:{value:null}, tNormal:{value:null}, size:{value:new THREE.Vector2(512, 512)}, cameraNear:{value:1}, cameraFar:{value:100}, cameraProjectionMatrix:{value:new THREE.Matrix4}, cameraInverseProjectionMatrix:{value:new THREE.Matrix4}, scale:{value:1}, intensity:{value:.1}, bias:{value:.5}, minResolution:{value:0}, kernelRadius:{value:100}, 
randomSeed:{value:0}}, vertexShader:"varying vec2 vUv;\nvoid main() {\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"#include <common>\nvarying vec2 vUv;\n#if DIFFUSE_TEXTURE == 1\nuniform sampler2D tDiffuse;\n#endif\nuniform sampler2D tDepth;\n#if NORMAL_TEXTURE == 1\nuniform sampler2D tNormal;\n#endif\nuniform float cameraNear;\nuniform float cameraFar;\nuniform mat4 cameraProjectionMatrix;\nuniform mat4 cameraInverseProjectionMatrix;\nuniform float scale;\nuniform float intensity;\nuniform float bias;\nuniform float kernelRadius;\nuniform float minResolution;\nuniform vec2 size;\nuniform float randomSeed;\n// RGBA depth\n#include <packing>\nvec4 getDefaultColor( const in vec2 screenPosition ) {\n\t#if DIFFUSE_TEXTURE == 1\n\treturn texture2D( tDiffuse, vUv );\n\t#else\n\treturn vec4( 1.0 );\n\t#endif\n}\nfloat getDepth( const in vec2 screenPosition ) {\n\t#if DEPTH_PACKING == 1\n\treturn unpackRGBAToDepth( texture2D( tDepth, screenPosition ) );\n\t#else\n\treturn texture2D( tDepth, screenPosition ).x;\n\t#endif\n}\nfloat getViewZ( const in float depth ) {\n\t#if PERSPECTIVE_CAMERA == 1\n\treturn perspectiveDepthToViewZ( depth, cameraNear, cameraFar );\n\t#else\n\treturn orthographicDepthToViewZ( depth, cameraNear, cameraFar );\n\t#endif\n}\nvec3 getViewPosition( const in vec2 screenPosition, const in float depth, const in float viewZ ) {\n\tfloat clipW = cameraProjectionMatrix[2][3] * viewZ + cameraProjectionMatrix[3][3];\n\tvec4 clipPosition = vec4( ( vec3( screenPosition, depth ) - 0.5 ) * 2.0, 1.0 );\n\tclipPosition *= clipW; // unprojection.\n\treturn ( cameraInverseProjectionMatrix * clipPosition ).xyz;\n}\nvec3 getViewNormal( const in vec3 viewPosition, const in vec2 screenPosition ) {\n\t#if NORMAL_TEXTURE == 1\n\treturn unpackRGBToNormal( texture2D( tNormal, screenPosition ).xyz );\n\t#else\n\treturn normalize( cross( dFdx( viewPosition ), dFdy( viewPosition ) ) );\n\t#endif\n}\nfloat scaleDividedByCameraFar;\nfloat minResolutionMultipliedByCameraFar;\nfloat getOcclusion( const in vec3 centerViewPosition, const in vec3 centerViewNormal, const in vec3 sampleViewPosition ) {\n\tvec3 viewDelta = sampleViewPosition - centerViewPosition;\n\tfloat viewDistance = length( viewDelta );\n\tfloat scaledScreenDistance = scaleDividedByCameraFar * viewDistance;\n\treturn max(0.0, (dot(centerViewNormal, viewDelta) - minResolutionMultipliedByCameraFar) / scaledScreenDistance - bias) / (1.0 + pow2( scaledScreenDistance ) );\n}\n// moving costly divides into consts\nconst float ANGLE_STEP = PI2 * float( NUM_RINGS ) / float( NUM_SAMPLES );\nconst float INV_NUM_SAMPLES = 1.0 / float( NUM_SAMPLES );\nfloat getAmbientOcclusion( const in vec3 centerViewPosition ) {\n\t// precompute some variables require in getOcclusion.\n\tscaleDividedByCameraFar = scale / cameraFar;\n\tminResolutionMultipliedByCameraFar = minResolution * cameraFar;\n\tvec3 centerViewNormal = getViewNormal( centerViewPosition, vUv );\n\t// jsfiddle that shows sample pattern: https://jsfiddle.net/a16ff1p7/\n\tfloat angle = rand( vUv + randomSeed ) * PI2;\n\tvec2 radius = vec2( kernelRadius * INV_NUM_SAMPLES ) / size;\n\tvec2 radiusStep = radius;\n\tfloat occlusionSum = 0.0;\n\tfloat weightSum = 0.0;\n\tfor( int i = 0; i < NUM_SAMPLES; i ++ ) {\n\t\tvec2 sampleUv = vUv + vec2( cos( angle ), sin( angle ) ) * radius;\n\t\tradius += radiusStep;\n\t\tangle += ANGLE_STEP;\n\t\tfloat sampleDepth = getDepth( sampleUv );\n\t\tif( sampleDepth >= ( 1.0 - EPSILON ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\tfloat sampleViewZ = getViewZ( sampleDepth );\n\t\tvec3 sampleViewPosition = getViewPosition( sampleUv, sampleDepth, sampleViewZ );\n\t\tocclusionSum += getOcclusion( centerViewPosition, centerViewNormal, sampleViewPosition );\n\t\tweightSum += 1.0;\n\t}\n\tif( weightSum == 0.0 ) discard;\n\treturn occlusionSum * ( intensity / weightSum );\n}\nvoid main() {\n\tfloat centerDepth = getDepth( vUv );\n\tif( centerDepth >= ( 1.0 - EPSILON ) ) {\n\t\tdiscard;\n\t}\n\tfloat centerViewZ = getViewZ( centerDepth );\n\tvec3 viewPosition = getViewPosition( vUv, centerDepth, centerViewZ );\n\tfloat ambientOcclusion = getAmbientOcclusion( viewPosition );\n\tgl_FragColor = getDefaultColor( vUv );\n\tgl_FragColor.xyz *=  1.0 - ambientOcclusion;\n}"};
THREE.DepthLimitedBlurShader = {defines:{KERNEL_RADIUS:4, DEPTH_PACKING:1, PERSPECTIVE_CAMERA:1}, uniforms:{tDiffuse:{value:null}, size:{value:new THREE.Vector2(512, 512)}, sampleUvOffsets:{value:[new THREE.Vector2(0, 0)]}, sampleWeights:{value:[1]}, tDepth:{value:null}, cameraNear:{value:10}, cameraFar:{value:1E3}, depthCutoff:{value:10}}, vertexShader:"#include <common>\nuniform vec2 size;\nvarying vec2 vUv;\nvarying vec2 vInvSize;\nvoid main() {\n\tvUv = uv;\n\tvInvSize = 1.0 / size;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", 
fragmentShader:"#include <common>\n#include <packing>\nuniform sampler2D tDiffuse;\nuniform sampler2D tDepth;\nuniform float cameraNear;\nuniform float cameraFar;\nuniform float depthCutoff;\nuniform vec2 sampleUvOffsets[ KERNEL_RADIUS + 1 ];\nuniform float sampleWeights[ KERNEL_RADIUS + 1 ];\nvarying vec2 vUv;\nvarying vec2 vInvSize;\nfloat getDepth( const in vec2 screenPosition ) {\n\t#if DEPTH_PACKING == 1\n\treturn unpackRGBAToDepth( texture2D( tDepth, screenPosition ) );\n\t#else\n\treturn texture2D( tDepth, screenPosition ).x;\n\t#endif\n}\nfloat getViewZ( const in float depth ) {\n\t#if PERSPECTIVE_CAMERA == 1\n\treturn perspectiveDepthToViewZ( depth, cameraNear, cameraFar );\n\t#else\n\treturn orthographicDepthToViewZ( depth, cameraNear, cameraFar );\n\t#endif\n}\nvoid main() {\n\tfloat depth = getDepth( vUv );\n\tif( depth >= ( 1.0 - EPSILON ) ) {\n\t\tdiscard;\n\t}\n\tfloat centerViewZ = -getViewZ( depth );\n\tbool rBreak = false, lBreak = false;\n\tfloat weightSum = sampleWeights[0];\n\tvec4 diffuseSum = texture2D( tDiffuse, vUv ) * weightSum;\n\tfor( int i = 1; i <= KERNEL_RADIUS; i ++ ) {\n\t\tfloat sampleWeight = sampleWeights[i];\n\t\tvec2 sampleUvOffset = sampleUvOffsets[i] * vInvSize;\n\t\tvec2 sampleUv = vUv + sampleUvOffset;\n\t\tfloat viewZ = -getViewZ( getDepth( sampleUv ) );\n\t\tif( abs( viewZ - centerViewZ ) > depthCutoff ) rBreak = true;\n\t\tif( ! rBreak ) {\n\t\t\tdiffuseSum += texture2D( tDiffuse, sampleUv ) * sampleWeight;\n\t\t\tweightSum += sampleWeight;\n\t\t}\n\t\tsampleUv = vUv - sampleUvOffset;\n\t\tviewZ = -getViewZ( getDepth( sampleUv ) );\n\t\tif( abs( viewZ - centerViewZ ) > depthCutoff ) lBreak = true;\n\t\tif( ! lBreak ) {\n\t\t\tdiffuseSum += texture2D( tDiffuse, sampleUv ) * sampleWeight;\n\t\t\tweightSum += sampleWeight;\n\t\t}\n\t}\n\tgl_FragColor = diffuseSum / weightSum;\n}"};
THREE.BlurShaderUtils = {createSampleWeights:function(a, d) {
  for (var k = [], b = 0; b <= a; b++) {
    k.push(Math.exp(-(b * b) / (2 * d * d)) / (Math.sqrt(2 * Math.PI) * d));
  }
  return k;
}, createSampleOffsets:function(a, d) {
  for (var k = [], b = 0; b <= a; b++) {
    k.push(d.clone().multiplyScalar(b));
  }
  return k;
}, configure:function(a, d, k, b) {
  a.defines.KERNEL_RADIUS = d;
  a.uniforms.sampleUvOffsets.value = THREE.BlurShaderUtils.createSampleOffsets(d, b);
  a.uniforms.sampleWeights.value = THREE.BlurShaderUtils.createSampleWeights(d, k);
  a.needsUpdate = !0;
}};
THREE.UnpackDepthRGBAShader = {uniforms:{tDiffuse:{value:null}, opacity:{value:1}}, vertexShader:"varying vec2 vUv;\nvoid main() {\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"uniform float opacity;\nuniform sampler2D tDiffuse;\nvarying vec2 vUv;\n#include <packing>\nvoid main() {\n\tfloat depth = 1.0 - unpackRGBAToDepth( texture2D( tDiffuse, vUv ) );\n\tgl_FragColor = vec4( vec3( depth ), opacity );\n}"};
THREE.ConvolutionShader = {defines:{KERNEL_SIZE_FLOAT:"25.0", KERNEL_SIZE_INT:"25"}, uniforms:{tDiffuse:{value:null}, uImageIncrement:{value:new THREE.Vector2(.001953125, 0)}, cKernel:{value:[]}}, vertexShader:"uniform vec2 uImageIncrement;\nvarying vec2 vUv;\nvoid main() {\n\tvUv = uv - ( ( KERNEL_SIZE_FLOAT - 1.0 ) / 2.0 ) * uImageIncrement;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"uniform float cKernel[ KERNEL_SIZE_INT ];\nuniform sampler2D tDiffuse;\nuniform vec2 uImageIncrement;\nvarying vec2 vUv;\nvoid main() {\n\tvec2 imageCoord = vUv;\n\tvec4 sum = vec4( 0.0, 0.0, 0.0, 0.0 );\n\tfor( int i = 0; i < KERNEL_SIZE_INT; i ++ ) {\n\t\tsum += texture2D( tDiffuse, imageCoord ) * cKernel[ i ];\n\t\timageCoord += uImageIncrement;\n\t}\n\tgl_FragColor = sum;\n}", 
buildKernel:function(a) {
  var d, k, b = 2 * Math.ceil(3 * a) + 1;
  25 < b && (b = 25);
  var g = .5 * (b - 1);
  var f = Array(b);
  for (d = k = 0; d < b; ++d) {
    var e = d - g;
    f[d] = Math.exp(-(e * e) / (2 * a * a));
    k += f[d];
  }
  for (d = 0; d < b; ++d) {
    f[d] /= k;
  }
  return f;
}};
THREE.LuminosityHighPassShader = {shaderID:"luminosityHighPass", uniforms:{tDiffuse:{value:null}, luminosityThreshold:{value:1}, smoothWidth:{value:1}, defaultColor:{value:new THREE.Color(0)}, defaultOpacity:{value:0}}, vertexShader:"varying vec2 vUv;\nvoid main() {\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"uniform sampler2D tDiffuse;\nuniform vec3 defaultColor;\nuniform float defaultOpacity;\nuniform float luminosityThreshold;\nuniform float smoothWidth;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texel = texture2D( tDiffuse, vUv );\n\tvec3 luma = vec3( 0.299, 0.587, 0.114 );\n\tfloat v = dot( texel.xyz, luma );\n\tvec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );\n\tfloat alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );\n\tgl_FragColor = mix( outputColor, texel, alpha );\n}"};
THREE.FXAAShader = {uniforms:{tDiffuse:{value:null}, resolution:{value:new THREE.Vector2(1 / 1024, 1 / 512)}}, vertexShader:"varying vec2 vUv;\nvoid main() {\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:'precision highp float;\n\nuniform sampler2D tDiffuse;\n\nuniform vec2 resolution;\n\nvarying vec2 vUv;\n\n// FXAA 3.11 implementation by NVIDIA, ported to WebGL by Agost Biro (biro@archilogic.com)\n\n//----------------------------------------------------------------------------------\n// File:        es3-keplerFXAAassetsshaders/FXAA_DefaultES.frag\n// SDK Version: v3.00\n// Email:       gameworks@nvidia.com\n// Site:        http://developer.nvidia.com/\n//\n// Copyright (c) 2014-2015, NVIDIA CORPORATION. All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions\n// are met:\n//  * Redistributions of source code must retain the above copyright\n//    notice, this list of conditions and the following disclaimer.\n//  * Redistributions in binary form must reproduce the above copyright\n//    notice, this list of conditions and the following disclaimer in the\n//    documentation and/or other materials provided with the distribution.\n//  * Neither the name of NVIDIA CORPORATION nor the names of its\n//    contributors may be used to endorse or promote products derived\n//    from this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS\'\' AND ANY\n// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n// PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n//----------------------------------------------------------------------------------\n\n#define FXAA_PC 1\n#define FXAA_GLSL_100 1\n#define FXAA_QUALITY_PRESET 12\n\n#define FXAA_GREEN_AS_LUMA 1\n\n/*--------------------------------------------------------------------------*/\n#ifndef FXAA_PC_CONSOLE\n    //\n    // The console algorithm for PC is included\n    // for developers targeting really low spec machines.\n    // Likely better to just run FXAA_PC, and use a really low preset.\n    //\n    #define FXAA_PC_CONSOLE 0\n#endif\n/*--------------------------------------------------------------------------*/\n#ifndef FXAA_GLSL_120\n    #define FXAA_GLSL_120 0\n#endif\n/*--------------------------------------------------------------------------*/\n#ifndef FXAA_GLSL_130\n    #define FXAA_GLSL_130 0\n#endif\n/*--------------------------------------------------------------------------*/\n#ifndef FXAA_HLSL_3\n    #define FXAA_HLSL_3 0\n#endif\n/*--------------------------------------------------------------------------*/\n#ifndef FXAA_HLSL_4\n    #define FXAA_HLSL_4 0\n#endif\n/*--------------------------------------------------------------------------*/\n#ifndef FXAA_HLSL_5\n    #define FXAA_HLSL_5 0\n#endif\n/*==========================================================================*/\n#ifndef FXAA_GREEN_AS_LUMA\n    //\n    // For those using non-linear color,\n    // and either not able to get luma in alpha, or not wanting to,\n    // this enables FXAA to run using green as a proxy for luma.\n    // So with this enabled, no need to pack luma in alpha.\n    //\n    // This will turn off AA on anything which lacks some amount of green.\n    // Pure red and blue or combination of only R and B, will get no AA.\n    //\n    // Might want to lower the settings for both,\n    //    fxaaConsoleEdgeThresholdMin\n    //    fxaaQualityEdgeThresholdMin\n    // In order to insure AA does not get turned off on colors\n    // which contain a minor amount of green.\n    //\n    // 1 = On.\n    // 0 = Off.\n    //\n    #define FXAA_GREEN_AS_LUMA 0\n#endif\n/*--------------------------------------------------------------------------*/\n#ifndef FXAA_EARLY_EXIT\n    //\n    // Controls algorithm\'s early exit path.\n    // On PS3 turning this ON adds 2 cycles to the shader.\n    // On 360 turning this OFF adds 10ths of a millisecond to the shader.\n    // Turning this off on console will result in a more blurry image.\n    // So this defaults to on.\n    //\n    // 1 = On.\n    // 0 = Off.\n    //\n    #define FXAA_EARLY_EXIT 1\n#endif\n/*--------------------------------------------------------------------------*/\n#ifndef FXAA_DISCARD\n    //\n    // Only valid for PC OpenGL currently.\n    // Probably will not work when FXAA_GREEN_AS_LUMA = 1.\n    //\n    // 1 = Use discard on pixels which don\'t need AA.\n    //     For APIs which enable concurrent TEX+ROP from same surface.\n    // 0 = Return unchanged color on pixels which don\'t need AA.\n    //\n    #define FXAA_DISCARD 0\n#endif\n/*--------------------------------------------------------------------------*/\n#ifndef FXAA_FAST_PIXEL_OFFSET\n    //\n    // Used for GLSL 120 only.\n    //\n    // 1 = GL API supports fast pixel offsets\n    // 0 = do not use fast pixel offsets\n    //\n    #ifdef GL_EXT_gpu_shader4\n        #define FXAA_FAST_PIXEL_OFFSET 1\n    #endif\n    #ifdef GL_NV_gpu_shader5\n        #define FXAA_FAST_PIXEL_OFFSET 1\n    #endif\n    #ifdef GL_ARB_gpu_shader5\n        #define FXAA_FAST_PIXEL_OFFSET 1\n    #endif\n    #ifndef FXAA_FAST_PIXEL_OFFSET\n        #define FXAA_FAST_PIXEL_OFFSET 0\n    #endif\n#endif\n/*--------------------------------------------------------------------------*/\n#ifndef FXAA_GATHER4_ALPHA\n    //\n    // 1 = API supports gather4 on alpha channel.\n    // 0 = API does not support gather4 on alpha channel.\n    //\n    #if (FXAA_HLSL_5 == 1)\n        #define FXAA_GATHER4_ALPHA 1\n    #endif\n    #ifdef GL_ARB_gpu_shader5\n        #define FXAA_GATHER4_ALPHA 1\n    #endif\n    #ifdef GL_NV_gpu_shader5\n        #define FXAA_GATHER4_ALPHA 1\n    #endif\n    #ifndef FXAA_GATHER4_ALPHA\n        #define FXAA_GATHER4_ALPHA 0\n    #endif\n#endif\n\n\n/*============================================================================\n                        FXAA QUALITY - TUNING KNOBS\n------------------------------------------------------------------------------\nNOTE the other tuning knobs are now in the shader function inputs!\n============================================================================*/\n#ifndef FXAA_QUALITY_PRESET\n    //\n    // Choose the quality preset.\n    // This needs to be compiled into the shader as it effects code.\n    // Best option to include multiple presets is to\n    // in each shader define the preset, then include this file.\n    //\n    // OPTIONS\n    // -----------------------------------------------------------------------\n    // 10 to 15 - default medium dither (10=fastest, 15=highest quality)\n    // 20 to 29 - less dither, more expensive (20=fastest, 29=highest quality)\n    // 39       - no dither, very expensive\n    //\n    // NOTES\n    // -----------------------------------------------------------------------\n    // 12 = slightly faster then FXAA 3.9 and higher edge quality (default)\n    // 13 = about same speed as FXAA 3.9 and better than 12\n    // 23 = closest to FXAA 3.9 visually and performance wise\n    //  _ = the lowest digit is directly related to performance\n    // _  = the highest digit is directly related to style\n    //\n    #define FXAA_QUALITY_PRESET 12\n#endif\n\n\n/*============================================================================\n\n                           FXAA QUALITY - PRESETS\n\n============================================================================*/\n\n/*============================================================================\n                     FXAA QUALITY - MEDIUM DITHER PRESETS\n============================================================================*/\n#if (FXAA_QUALITY_PRESET == 10)\n    #define FXAA_QUALITY_PS 3\n    #define FXAA_QUALITY_P0 1.5\n    #define FXAA_QUALITY_P1 3.0\n    #define FXAA_QUALITY_P2 12.0\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_QUALITY_PRESET == 11)\n    #define FXAA_QUALITY_PS 4\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 3.0\n    #define FXAA_QUALITY_P3 12.0\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_QUALITY_PRESET == 12)\n    #define FXAA_QUALITY_PS 5\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 4.0\n    #define FXAA_QUALITY_P4 12.0\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_QUALITY_PRESET == 13)\n    #define FXAA_QUALITY_PS 6\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 4.0\n    #define FXAA_QUALITY_P5 12.0\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_QUALITY_PRESET == 14)\n    #define FXAA_QUALITY_PS 7\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 2.0\n    #define FXAA_QUALITY_P5 4.0\n    #define FXAA_QUALITY_P6 12.0\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_QUALITY_PRESET == 15)\n    #define FXAA_QUALITY_PS 8\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 2.0\n    #define FXAA_QUALITY_P5 2.0\n    #define FXAA_QUALITY_P6 4.0\n    #define FXAA_QUALITY_P7 12.0\n#endif\n\n/*============================================================================\n                     FXAA QUALITY - LOW DITHER PRESETS\n============================================================================*/\n#if (FXAA_QUALITY_PRESET == 20)\n    #define FXAA_QUALITY_PS 3\n    #define FXAA_QUALITY_P0 1.5\n    #define FXAA_QUALITY_P1 2.0\n    #define FXAA_QUALITY_P2 8.0\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_QUALITY_PRESET == 21)\n    #define FXAA_QUALITY_PS 4\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 8.0\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_QUALITY_PRESET == 22)\n    #define FXAA_QUALITY_PS 5\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 8.0\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_QUALITY_PRESET == 23)\n    #define FXAA_QUALITY_PS 6\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 2.0\n    #define FXAA_QUALITY_P5 8.0\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_QUALITY_PRESET == 24)\n    #define FXAA_QUALITY_PS 7\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 2.0\n    #define FXAA_QUALITY_P5 3.0\n    #define FXAA_QUALITY_P6 8.0\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_QUALITY_PRESET == 25)\n    #define FXAA_QUALITY_PS 8\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 2.0\n    #define FXAA_QUALITY_P5 2.0\n    #define FXAA_QUALITY_P6 4.0\n    #define FXAA_QUALITY_P7 8.0\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_QUALITY_PRESET == 26)\n    #define FXAA_QUALITY_PS 9\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 2.0\n    #define FXAA_QUALITY_P5 2.0\n    #define FXAA_QUALITY_P6 2.0\n    #define FXAA_QUALITY_P7 4.0\n    #define FXAA_QUALITY_P8 8.0\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_QUALITY_PRESET == 27)\n    #define FXAA_QUALITY_PS 10\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 2.0\n    #define FXAA_QUALITY_P5 2.0\n    #define FXAA_QUALITY_P6 2.0\n    #define FXAA_QUALITY_P7 2.0\n    #define FXAA_QUALITY_P8 4.0\n    #define FXAA_QUALITY_P9 8.0\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_QUALITY_PRESET == 28)\n    #define FXAA_QUALITY_PS 11\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 2.0\n    #define FXAA_QUALITY_P5 2.0\n    #define FXAA_QUALITY_P6 2.0\n    #define FXAA_QUALITY_P7 2.0\n    #define FXAA_QUALITY_P8 2.0\n    #define FXAA_QUALITY_P9 4.0\n    #define FXAA_QUALITY_P10 8.0\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_QUALITY_PRESET == 29)\n    #define FXAA_QUALITY_PS 12\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 2.0\n    #define FXAA_QUALITY_P5 2.0\n    #define FXAA_QUALITY_P6 2.0\n    #define FXAA_QUALITY_P7 2.0\n    #define FXAA_QUALITY_P8 2.0\n    #define FXAA_QUALITY_P9 2.0\n    #define FXAA_QUALITY_P10 4.0\n    #define FXAA_QUALITY_P11 8.0\n#endif\n\n/*============================================================================\n                     FXAA QUALITY - EXTREME QUALITY\n============================================================================*/\n#if (FXAA_QUALITY_PRESET == 39)\n    #define FXAA_QUALITY_PS 12\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.0\n    #define FXAA_QUALITY_P2 1.0\n    #define FXAA_QUALITY_P3 1.0\n    #define FXAA_QUALITY_P4 1.0\n    #define FXAA_QUALITY_P5 1.5\n    #define FXAA_QUALITY_P6 2.0\n    #define FXAA_QUALITY_P7 2.0\n    #define FXAA_QUALITY_P8 2.0\n    #define FXAA_QUALITY_P9 2.0\n    #define FXAA_QUALITY_P10 4.0\n    #define FXAA_QUALITY_P11 8.0\n#endif\n\n\n\n/*============================================================================\n\n                                API PORTING\n\n============================================================================*/\n#if (FXAA_GLSL_100 == 1) || (FXAA_GLSL_120 == 1) || (FXAA_GLSL_130 == 1)\n    #define FxaaBool bool\n    #define FxaaDiscard discard\n    #define FxaaFloat float\n    #define FxaaFloat2 vec2\n    #define FxaaFloat3 vec3\n    #define FxaaFloat4 vec4\n    #define FxaaHalf float\n    #define FxaaHalf2 vec2\n    #define FxaaHalf3 vec3\n    #define FxaaHalf4 vec4\n    #define FxaaInt2 ivec2\n    #define FxaaSat(x) clamp(x, 0.0, 1.0)\n    #define FxaaTex sampler2D\n#else\n    #define FxaaBool bool\n    #define FxaaDiscard clip(-1)\n    #define FxaaFloat float\n    #define FxaaFloat2 float2\n    #define FxaaFloat3 float3\n    #define FxaaFloat4 float4\n    #define FxaaHalf half\n    #define FxaaHalf2 half2\n    #define FxaaHalf3 half3\n    #define FxaaHalf4 half4\n    #define FxaaSat(x) saturate(x)\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_GLSL_100 == 1)\n  #define FxaaTexTop(t, p) texture2D(t, p, 0.0)\n  #define FxaaTexOff(t, p, o, r) texture2D(t, p + (o * r), 0.0)\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_GLSL_120 == 1)\n    // Requires,\n    //  #version 120\n    // And at least,\n    //  #extension GL_EXT_gpu_shader4 : enable\n    //  (or set FXAA_FAST_PIXEL_OFFSET 1 to work like DX9)\n    #define FxaaTexTop(t, p) texture2DLod(t, p, 0.0)\n    #if (FXAA_FAST_PIXEL_OFFSET == 1)\n        #define FxaaTexOff(t, p, o, r) texture2DLodOffset(t, p, 0.0, o)\n    #else\n        #define FxaaTexOff(t, p, o, r) texture2DLod(t, p + (o * r), 0.0)\n    #endif\n    #if (FXAA_GATHER4_ALPHA == 1)\n        // use #extension GL_ARB_gpu_shader5 : enable\n        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)\n        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)\n        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)\n        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)\n    #endif\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_GLSL_130 == 1)\n    // Requires "#version 130" or better\n    #define FxaaTexTop(t, p) textureLod(t, p, 0.0)\n    #define FxaaTexOff(t, p, o, r) textureLodOffset(t, p, 0.0, o)\n    #if (FXAA_GATHER4_ALPHA == 1)\n        // use #extension GL_ARB_gpu_shader5 : enable\n        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)\n        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)\n        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)\n        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)\n    #endif\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_HLSL_3 == 1)\n    #define FxaaInt2 float2\n    #define FxaaTex sampler2D\n    #define FxaaTexTop(t, p) tex2Dlod(t, float4(p, 0.0, 0.0))\n    #define FxaaTexOff(t, p, o, r) tex2Dlod(t, float4(p + (o * r), 0, 0))\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_HLSL_4 == 1)\n    #define FxaaInt2 int2\n    struct FxaaTex { SamplerState smpl; Texture2D tex; };\n    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)\n    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_HLSL_5 == 1)\n    #define FxaaInt2 int2\n    struct FxaaTex { SamplerState smpl; Texture2D tex; };\n    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)\n    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)\n    #define FxaaTexAlpha4(t, p) t.tex.GatherAlpha(t.smpl, p)\n    #define FxaaTexOffAlpha4(t, p, o) t.tex.GatherAlpha(t.smpl, p, o)\n    #define FxaaTexGreen4(t, p) t.tex.GatherGreen(t.smpl, p)\n    #define FxaaTexOffGreen4(t, p, o) t.tex.GatherGreen(t.smpl, p, o)\n#endif\n\n\n/*============================================================================\n                   GREEN AS LUMA OPTION SUPPORT FUNCTION\n============================================================================*/\n#if (FXAA_GREEN_AS_LUMA == 0)\n    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.w; }\n#else\n    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.y; }\n#endif\n\n\n\n\n/*============================================================================\n\n                             FXAA3 QUALITY - PC\n\n============================================================================*/\n#if (FXAA_PC == 1)\n/*--------------------------------------------------------------------------*/\nFxaaFloat4 FxaaPixelShader(\n    //\n    // Use noperspective interpolation here (turn off perspective interpolation).\n    // {xy} = center of pixel\n    FxaaFloat2 pos,\n    //\n    // Used only for FXAA Console, and not used on the 360 version.\n    // Use noperspective interpolation here (turn off perspective interpolation).\n    // {xy_} = upper left of pixel\n    // {_zw} = lower right of pixel\n    FxaaFloat4 fxaaConsolePosPos,\n    //\n    // Input color texture.\n    // {rgb_} = color in linear or perceptual color space\n    // if (FXAA_GREEN_AS_LUMA == 0)\n    //     {__a} = luma in perceptual color space (not linear)\n    FxaaTex tex,\n    //\n    // Only used on the optimized 360 version of FXAA Console.\n    // For everything but 360, just use the same input here as for "tex".\n    // For 360, same texture, just alias with a 2nd sampler.\n    // This sampler needs to have an exponent bias of -1.\n    FxaaTex fxaaConsole360TexExpBiasNegOne,\n    //\n    // Only used on the optimized 360 version of FXAA Console.\n    // For everything but 360, just use the same input here as for "tex".\n    // For 360, same texture, just alias with a 3nd sampler.\n    // This sampler needs to have an exponent bias of -2.\n    FxaaTex fxaaConsole360TexExpBiasNegTwo,\n    //\n    // Only used on FXAA Quality.\n    // This must be from a constant/uniform.\n    // {x_} = 1.0/screenWidthInPixels\n    // {_y} = 1.0/screenHeightInPixels\n    FxaaFloat2 fxaaQualityRcpFrame,\n    //\n    // Only used on FXAA Console.\n    // This must be from a constant/uniform.\n    // This effects sub-pixel AA quality and inversely sharpness.\n    //   Where N ranges between,\n    //     N = 0.50 (default)\n    //     N = 0.33 (sharper)\n    // {x__} = -N/screenWidthInPixels\n    // {_y_} = -N/screenHeightInPixels\n    // {_z_} =  N/screenWidthInPixels\n    // {__w} =  N/screenHeightInPixels\n    FxaaFloat4 fxaaConsoleRcpFrameOpt,\n    //\n    // Only used on FXAA Console.\n    // Not used on 360, but used on PS3 and PC.\n    // This must be from a constant/uniform.\n    // {x__} = -2.0/screenWidthInPixels\n    // {_y_} = -2.0/screenHeightInPixels\n    // {_z_} =  2.0/screenWidthInPixels\n    // {__w} =  2.0/screenHeightInPixels\n    FxaaFloat4 fxaaConsoleRcpFrameOpt2,\n    //\n    // Only used on FXAA Console.\n    // Only used on 360 in place of fxaaConsoleRcpFrameOpt2.\n    // This must be from a constant/uniform.\n    // {x__} =  8.0/screenWidthInPixels\n    // {_y_} =  8.0/screenHeightInPixels\n    // {_z_} = -4.0/screenWidthInPixels\n    // {__w} = -4.0/screenHeightInPixels\n    FxaaFloat4 fxaaConsole360RcpFrameOpt2,\n    //\n    // Only used on FXAA Quality.\n    // This used to be the FXAA_QUALITY_SUBPIX define.\n    // It is here now to allow easier tuning.\n    // Choose the amount of sub-pixel aliasing removal.\n    // This can effect sharpness.\n    //   1.00 - upper limit (softer)\n    //   0.75 - default amount of filtering\n    //   0.50 - lower limit (sharper, less sub-pixel aliasing removal)\n    //   0.25 - almost off\n    //   0.00 - completely off\n    FxaaFloat fxaaQualitySubpix,\n    //\n    // Only used on FXAA Quality.\n    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD define.\n    // It is here now to allow easier tuning.\n    // The minimum amount of local contrast required to apply algorithm.\n    //   0.333 - too little (faster)\n    //   0.250 - low quality\n    //   0.166 - default\n    //   0.125 - high quality\n    //   0.063 - overkill (slower)\n    FxaaFloat fxaaQualityEdgeThreshold,\n    //\n    // Only used on FXAA Quality.\n    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD_MIN define.\n    // It is here now to allow easier tuning.\n    // Trims the algorithm from processing darks.\n    //   0.0833 - upper limit (default, the start of visible unfiltered edges)\n    //   0.0625 - high quality (faster)\n    //   0.0312 - visible limit (slower)\n    // Special notes when using FXAA_GREEN_AS_LUMA,\n    //   Likely want to set this to zero.\n    //   As colors that are mostly not-green\n    //   will appear very dark in the green channel!\n    //   Tune by looking at mostly non-green content,\n    //   then start at zero and increase until aliasing is a problem.\n    FxaaFloat fxaaQualityEdgeThresholdMin,\n    //\n    // Only used on FXAA Console.\n    // This used to be the FXAA_CONSOLE_EDGE_SHARPNESS define.\n    // It is here now to allow easier tuning.\n    // This does not effect PS3, as this needs to be compiled in.\n    //   Use FXAA_CONSOLE_PS3_EDGE_SHARPNESS for PS3.\n    //   Due to the PS3 being ALU bound,\n    //   there are only three safe values here: 2 and 4 and 8.\n    //   These options use the shaders ability to a free *|/ by 2|4|8.\n    // For all other platforms can be a non-power of two.\n    //   8.0 is sharper (default!!!)\n    //   4.0 is softer\n    //   2.0 is really soft (good only for vector graphics inputs)\n    FxaaFloat fxaaConsoleEdgeSharpness,\n    //\n    // Only used on FXAA Console.\n    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD define.\n    // It is here now to allow easier tuning.\n    // This does not effect PS3, as this needs to be compiled in.\n    //   Use FXAA_CONSOLE_PS3_EDGE_THRESHOLD for PS3.\n    //   Due to the PS3 being ALU bound,\n    //   there are only two safe values here: 1/4 and 1/8.\n    //   These options use the shaders ability to a free *|/ by 2|4|8.\n    // The console setting has a different mapping than the quality setting.\n    // Other platforms can use other values.\n    //   0.125 leaves less aliasing, but is softer (default!!!)\n    //   0.25 leaves more aliasing, and is sharper\n    FxaaFloat fxaaConsoleEdgeThreshold,\n    //\n    // Only used on FXAA Console.\n    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD_MIN define.\n    // It is here now to allow easier tuning.\n    // Trims the algorithm from processing darks.\n    // The console setting has a different mapping than the quality setting.\n    // This only applies when FXAA_EARLY_EXIT is 1.\n    // This does not apply to PS3,\n    // PS3 was simplified to avoid more shader instructions.\n    //   0.06 - faster but more aliasing in darks\n    //   0.05 - default\n    //   0.04 - slower and less aliasing in darks\n    // Special notes when using FXAA_GREEN_AS_LUMA,\n    //   Likely want to set this to zero.\n    //   As colors that are mostly not-green\n    //   will appear very dark in the green channel!\n    //   Tune by looking at mostly non-green content,\n    //   then start at zero and increase until aliasing is a problem.\n    FxaaFloat fxaaConsoleEdgeThresholdMin,\n    //\n    // Extra constants for 360 FXAA Console only.\n    // Use zeros or anything else for other platforms.\n    // These must be in physical constant registers and NOT immediates.\n    // Immediates will result in compiler un-optimizing.\n    // {xyzw} = float4(1.0, -1.0, 0.25, -0.25)\n    FxaaFloat4 fxaaConsole360ConstDir\n) {\n/*--------------------------------------------------------------------------*/\n    FxaaFloat2 posM;\n    posM.x = pos.x;\n    posM.y = pos.y;\n    #if (FXAA_GATHER4_ALPHA == 1)\n        #if (FXAA_DISCARD == 0)\n            FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);\n            #if (FXAA_GREEN_AS_LUMA == 0)\n                #define lumaM rgbyM.w\n            #else\n                #define lumaM rgbyM.y\n            #endif\n        #endif\n        #if (FXAA_GREEN_AS_LUMA == 0)\n            FxaaFloat4 luma4A = FxaaTexAlpha4(tex, posM);\n            FxaaFloat4 luma4B = FxaaTexOffAlpha4(tex, posM, FxaaInt2(-1, -1));\n        #else\n            FxaaFloat4 luma4A = FxaaTexGreen4(tex, posM);\n            FxaaFloat4 luma4B = FxaaTexOffGreen4(tex, posM, FxaaInt2(-1, -1));\n        #endif\n        #if (FXAA_DISCARD == 1)\n            #define lumaM luma4A.w\n        #endif\n        #define lumaE luma4A.z\n        #define lumaS luma4A.x\n        #define lumaSE luma4A.y\n        #define lumaNW luma4B.w\n        #define lumaN luma4B.z\n        #define lumaW luma4B.x\n    #else\n        FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);\n        #if (FXAA_GREEN_AS_LUMA == 0)\n            #define lumaM rgbyM.w\n        #else\n            #define lumaM rgbyM.y\n        #endif\n        #if (FXAA_GLSL_100 == 1)\n          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0, 1.0), fxaaQualityRcpFrame.xy));\n          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 0.0), fxaaQualityRcpFrame.xy));\n          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0,-1.0), fxaaQualityRcpFrame.xy));\n          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 0.0), fxaaQualityRcpFrame.xy));\n        #else\n          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0, 1), fxaaQualityRcpFrame.xy));\n          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 0), fxaaQualityRcpFrame.xy));\n          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0,-1), fxaaQualityRcpFrame.xy));\n          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 0), fxaaQualityRcpFrame.xy));\n        #endif\n    #endif\n/*--------------------------------------------------------------------------*/\n    FxaaFloat maxSM = max(lumaS, lumaM);\n    FxaaFloat minSM = min(lumaS, lumaM);\n    FxaaFloat maxESM = max(lumaE, maxSM);\n    FxaaFloat minESM = min(lumaE, minSM);\n    FxaaFloat maxWN = max(lumaN, lumaW);\n    FxaaFloat minWN = min(lumaN, lumaW);\n    FxaaFloat rangeMax = max(maxWN, maxESM);\n    FxaaFloat rangeMin = min(minWN, minESM);\n    FxaaFloat rangeMaxScaled = rangeMax * fxaaQualityEdgeThreshold;\n    FxaaFloat range = rangeMax - rangeMin;\n    FxaaFloat rangeMaxClamped = max(fxaaQualityEdgeThresholdMin, rangeMaxScaled);\n    FxaaBool earlyExit = range < rangeMaxClamped;\n/*--------------------------------------------------------------------------*/\n    if(earlyExit)\n        #if (FXAA_DISCARD == 1)\n            FxaaDiscard;\n        #else\n            return rgbyM;\n        #endif\n/*--------------------------------------------------------------------------*/\n    #if (FXAA_GATHER4_ALPHA == 0)\n        #if (FXAA_GLSL_100 == 1)\n          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0,-1.0), fxaaQualityRcpFrame.xy));\n          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 1.0), fxaaQualityRcpFrame.xy));\n          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0,-1.0), fxaaQualityRcpFrame.xy));\n          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 1.0), fxaaQualityRcpFrame.xy));\n        #else\n          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1,-1), fxaaQualityRcpFrame.xy));\n          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 1), fxaaQualityRcpFrame.xy));\n          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1,-1), fxaaQualityRcpFrame.xy));\n          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));\n        #endif\n    #else\n        FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(1, -1), fxaaQualityRcpFrame.xy));\n        FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));\n    #endif\n/*--------------------------------------------------------------------------*/\n    FxaaFloat lumaNS = lumaN + lumaS;\n    FxaaFloat lumaWE = lumaW + lumaE;\n    FxaaFloat subpixRcpRange = 1.0/range;\n    FxaaFloat subpixNSWE = lumaNS + lumaWE;\n    FxaaFloat edgeHorz1 = (-2.0 * lumaM) + lumaNS;\n    FxaaFloat edgeVert1 = (-2.0 * lumaM) + lumaWE;\n/*--------------------------------------------------------------------------*/\n    FxaaFloat lumaNESE = lumaNE + lumaSE;\n    FxaaFloat lumaNWNE = lumaNW + lumaNE;\n    FxaaFloat edgeHorz2 = (-2.0 * lumaE) + lumaNESE;\n    FxaaFloat edgeVert2 = (-2.0 * lumaN) + lumaNWNE;\n/*--------------------------------------------------------------------------*/\n    FxaaFloat lumaNWSW = lumaNW + lumaSW;\n    FxaaFloat lumaSWSE = lumaSW + lumaSE;\n    FxaaFloat edgeHorz4 = (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);\n    FxaaFloat edgeVert4 = (abs(edgeVert1) * 2.0) + abs(edgeVert2);\n    FxaaFloat edgeHorz3 = (-2.0 * lumaW) + lumaNWSW;\n    FxaaFloat edgeVert3 = (-2.0 * lumaS) + lumaSWSE;\n    FxaaFloat edgeHorz = abs(edgeHorz3) + edgeHorz4;\n    FxaaFloat edgeVert = abs(edgeVert3) + edgeVert4;\n/*--------------------------------------------------------------------------*/\n    FxaaFloat subpixNWSWNESE = lumaNWSW + lumaNESE;\n    FxaaFloat lengthSign = fxaaQualityRcpFrame.x;\n    FxaaBool horzSpan = edgeHorz >= edgeVert;\n    FxaaFloat subpixA = subpixNSWE * 2.0 + subpixNWSWNESE;\n/*--------------------------------------------------------------------------*/\n    if(!horzSpan) lumaN = lumaW;\n    if(!horzSpan) lumaS = lumaE;\n    if(horzSpan) lengthSign = fxaaQualityRcpFrame.y;\n    FxaaFloat subpixB = (subpixA * (1.0/12.0)) - lumaM;\n/*--------------------------------------------------------------------------*/\n    FxaaFloat gradientN = lumaN - lumaM;\n    FxaaFloat gradientS = lumaS - lumaM;\n    FxaaFloat lumaNN = lumaN + lumaM;\n    FxaaFloat lumaSS = lumaS + lumaM;\n    FxaaBool pairN = abs(gradientN) >= abs(gradientS);\n    FxaaFloat gradient = max(abs(gradientN), abs(gradientS));\n    if(pairN) lengthSign = -lengthSign;\n    FxaaFloat subpixC = FxaaSat(abs(subpixB) * subpixRcpRange);\n/*--------------------------------------------------------------------------*/\n    FxaaFloat2 posB;\n    posB.x = posM.x;\n    posB.y = posM.y;\n    FxaaFloat2 offNP;\n    offNP.x = (!horzSpan) ? 0.0 : fxaaQualityRcpFrame.x;\n    offNP.y = ( horzSpan) ? 0.0 : fxaaQualityRcpFrame.y;\n    if(!horzSpan) posB.x += lengthSign * 0.5;\n    if( horzSpan) posB.y += lengthSign * 0.5;\n/*--------------------------------------------------------------------------*/\n    FxaaFloat2 posN;\n    posN.x = posB.x - offNP.x * FXAA_QUALITY_P0;\n    posN.y = posB.y - offNP.y * FXAA_QUALITY_P0;\n    FxaaFloat2 posP;\n    posP.x = posB.x + offNP.x * FXAA_QUALITY_P0;\n    posP.y = posB.y + offNP.y * FXAA_QUALITY_P0;\n    FxaaFloat subpixD = ((-2.0)*subpixC) + 3.0;\n    FxaaFloat lumaEndN = FxaaLuma(FxaaTexTop(tex, posN));\n    FxaaFloat subpixE = subpixC * subpixC;\n    FxaaFloat lumaEndP = FxaaLuma(FxaaTexTop(tex, posP));\n/*--------------------------------------------------------------------------*/\n    if(!pairN) lumaNN = lumaSS;\n    FxaaFloat gradientScaled = gradient * 1.0/4.0;\n    FxaaFloat lumaMM = lumaM - lumaNN * 0.5;\n    FxaaFloat subpixF = subpixD * subpixE;\n    FxaaBool lumaMLTZero = lumaMM < 0.0;\n/*--------------------------------------------------------------------------*/\n    lumaEndN -= lumaNN * 0.5;\n    lumaEndP -= lumaNN * 0.5;\n    FxaaBool doneN = abs(lumaEndN) >= gradientScaled;\n    FxaaBool doneP = abs(lumaEndP) >= gradientScaled;\n    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P1;\n    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P1;\n    FxaaBool doneNP = (!doneN) || (!doneP);\n    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P1;\n    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P1;\n/*--------------------------------------------------------------------------*/\n    if(doneNP) {\n        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n        doneN = abs(lumaEndN) >= gradientScaled;\n        doneP = abs(lumaEndP) >= gradientScaled;\n        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P2;\n        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P2;\n        doneNP = (!doneN) || (!doneP);\n        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P2;\n        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P2;\n/*--------------------------------------------------------------------------*/\n        #if (FXAA_QUALITY_PS > 3)\n        if(doneNP) {\n            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n            doneN = abs(lumaEndN) >= gradientScaled;\n            doneP = abs(lumaEndP) >= gradientScaled;\n            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P3;\n            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P3;\n            doneNP = (!doneN) || (!doneP);\n            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P3;\n            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P3;\n/*--------------------------------------------------------------------------*/\n            #if (FXAA_QUALITY_PS > 4)\n            if(doneNP) {\n                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n                doneN = abs(lumaEndN) >= gradientScaled;\n                doneP = abs(lumaEndP) >= gradientScaled;\n                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P4;\n                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P4;\n                doneNP = (!doneN) || (!doneP);\n                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P4;\n                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P4;\n/*--------------------------------------------------------------------------*/\n                #if (FXAA_QUALITY_PS > 5)\n                if(doneNP) {\n                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n                    doneN = abs(lumaEndN) >= gradientScaled;\n                    doneP = abs(lumaEndP) >= gradientScaled;\n                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P5;\n                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P5;\n                    doneNP = (!doneN) || (!doneP);\n                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P5;\n                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P5;\n/*--------------------------------------------------------------------------*/\n                    #if (FXAA_QUALITY_PS > 6)\n                    if(doneNP) {\n                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n                        doneN = abs(lumaEndN) >= gradientScaled;\n                        doneP = abs(lumaEndP) >= gradientScaled;\n                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P6;\n                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P6;\n                        doneNP = (!doneN) || (!doneP);\n                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P6;\n                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P6;\n/*--------------------------------------------------------------------------*/\n                        #if (FXAA_QUALITY_PS > 7)\n                        if(doneNP) {\n                            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n                            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n                            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n                            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n                            doneN = abs(lumaEndN) >= gradientScaled;\n                            doneP = abs(lumaEndP) >= gradientScaled;\n                            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P7;\n                            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P7;\n                            doneNP = (!doneN) || (!doneP);\n                            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P7;\n                            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P7;\n/*--------------------------------------------------------------------------*/\n    #if (FXAA_QUALITY_PS > 8)\n    if(doneNP) {\n        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n        doneN = abs(lumaEndN) >= gradientScaled;\n        doneP = abs(lumaEndP) >= gradientScaled;\n        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P8;\n        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P8;\n        doneNP = (!doneN) || (!doneP);\n        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P8;\n        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P8;\n/*--------------------------------------------------------------------------*/\n        #if (FXAA_QUALITY_PS > 9)\n        if(doneNP) {\n            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n            doneN = abs(lumaEndN) >= gradientScaled;\n            doneP = abs(lumaEndP) >= gradientScaled;\n            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P9;\n            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P9;\n            doneNP = (!doneN) || (!doneP);\n            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P9;\n            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P9;\n/*--------------------------------------------------------------------------*/\n            #if (FXAA_QUALITY_PS > 10)\n            if(doneNP) {\n                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n                doneN = abs(lumaEndN) >= gradientScaled;\n                doneP = abs(lumaEndP) >= gradientScaled;\n                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P10;\n                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P10;\n                doneNP = (!doneN) || (!doneP);\n                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P10;\n                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P10;\n/*--------------------------------------------------------------------------*/\n                #if (FXAA_QUALITY_PS > 11)\n                if(doneNP) {\n                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n                    doneN = abs(lumaEndN) >= gradientScaled;\n                    doneP = abs(lumaEndP) >= gradientScaled;\n                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P11;\n                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P11;\n                    doneNP = (!doneN) || (!doneP);\n                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P11;\n                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P11;\n/*--------------------------------------------------------------------------*/\n                    #if (FXAA_QUALITY_PS > 12)\n                    if(doneNP) {\n                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n                        doneN = abs(lumaEndN) >= gradientScaled;\n                        doneP = abs(lumaEndP) >= gradientScaled;\n                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P12;\n                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P12;\n                        doneNP = (!doneN) || (!doneP);\n                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P12;\n                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P12;\n/*--------------------------------------------------------------------------*/\n                    }\n                    #endif\n/*--------------------------------------------------------------------------*/\n                }\n                #endif\n/*--------------------------------------------------------------------------*/\n            }\n            #endif\n/*--------------------------------------------------------------------------*/\n        }\n        #endif\n/*--------------------------------------------------------------------------*/\n    }\n    #endif\n/*--------------------------------------------------------------------------*/\n                        }\n                        #endif\n/*--------------------------------------------------------------------------*/\n                    }\n                    #endif\n/*--------------------------------------------------------------------------*/\n                }\n                #endif\n/*--------------------------------------------------------------------------*/\n            }\n            #endif\n/*--------------------------------------------------------------------------*/\n        }\n        #endif\n/*--------------------------------------------------------------------------*/\n    }\n/*--------------------------------------------------------------------------*/\n    FxaaFloat dstN = posM.x - posN.x;\n    FxaaFloat dstP = posP.x - posM.x;\n    if(!horzSpan) dstN = posM.y - posN.y;\n    if(!horzSpan) dstP = posP.y - posM.y;\n/*--------------------------------------------------------------------------*/\n    FxaaBool goodSpanN = (lumaEndN < 0.0) != lumaMLTZero;\n    FxaaFloat spanLength = (dstP + dstN);\n    FxaaBool goodSpanP = (lumaEndP < 0.0) != lumaMLTZero;\n    FxaaFloat spanLengthRcp = 1.0/spanLength;\n/*--------------------------------------------------------------------------*/\n    FxaaBool directionN = dstN < dstP;\n    FxaaFloat dst = min(dstN, dstP);\n    FxaaBool goodSpan = directionN ? goodSpanN : goodSpanP;\n    FxaaFloat subpixG = subpixF * subpixF;\n    FxaaFloat pixelOffset = (dst * (-spanLengthRcp)) + 0.5;\n    FxaaFloat subpixH = subpixG * fxaaQualitySubpix;\n/*--------------------------------------------------------------------------*/\n    FxaaFloat pixelOffsetGood = goodSpan ? pixelOffset : 0.0;\n    FxaaFloat pixelOffsetSubpix = max(pixelOffsetGood, subpixH);\n    if(!horzSpan) posM.x += pixelOffsetSubpix * lengthSign;\n    if( horzSpan) posM.y += pixelOffsetSubpix * lengthSign;\n    #if (FXAA_DISCARD == 1)\n        return FxaaTexTop(tex, posM);\n    #else\n        return FxaaFloat4(FxaaTexTop(tex, posM).xyz, lumaM);\n    #endif\n}\n/*==========================================================================*/\n#endif\n\nvoid main() {\n  gl_FragColor = FxaaPixelShader(\n    vUv,\n    vec4(0.0),\n    tDiffuse,\n    tDiffuse,\n    tDiffuse,\n    resolution,\n    vec4(0.0),\n    vec4(0.0),\n    vec4(0.0),\n    0.75,\n    0.166,\n    0.0833,\n    0.0,\n    0.0,\n    0.0,\n    vec4(0.0)\n  );\n\n  // TODO avoid querying texture twice for same texel\n  gl_FragColor.a = texture2D(tDiffuse, vUv).a;\n}'};
THREE.SSAOShader = {defines:{PERSPECTIVE_CAMERA:1, KERNEL_SIZE:32}, uniforms:{tDiffuse:{value:null}, tNormal:{value:null}, tDepth:{value:null}, tNoise:{value:null}, kernel:{value:null}, cameraNear:{value:null}, cameraFar:{value:null}, resolution:{value:new THREE.Vector2}, cameraProjectionMatrix:{value:new THREE.Matrix4}, cameraInverseProjectionMatrix:{value:new THREE.Matrix4}, kernelRadius:{value:8}, minDistance:{value:.005}, maxDistance:{value:.05}}, vertexShader:"varying vec2 vUv;\nvoid main() {\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", 
fragmentShader:"uniform sampler2D tDiffuse;\nuniform sampler2D tNormal;\nuniform sampler2D tDepth;\nuniform sampler2D tNoise;\nuniform vec3 kernel[ KERNEL_SIZE ];\nuniform vec2 resolution;\nuniform float cameraNear;\nuniform float cameraFar;\nuniform mat4 cameraProjectionMatrix;\nuniform mat4 cameraInverseProjectionMatrix;\nuniform float kernelRadius;\nuniform float minDistance;\nuniform float maxDistance;\nvarying vec2 vUv;\n#include <packing>\nfloat getDepth( const in vec2 screenPosition ) {\n\treturn texture2D( tDepth, screenPosition ).x;\n}\nfloat getLinearDepth( const in vec2 screenPosition ) {\n\t#if PERSPECTIVE_CAMERA == 1\n\t\tfloat fragCoordZ = texture2D( tDepth, screenPosition ).x;\n\t\tfloat viewZ = perspectiveDepthToViewZ( fragCoordZ, cameraNear, cameraFar );\n\t\treturn viewZToOrthographicDepth( viewZ, cameraNear, cameraFar );\n\t#else\n\t\treturn texture2D( depthSampler, coord ).x;\n\t#endif\n}\nfloat getViewZ( const in float depth ) {\n\t#if PERSPECTIVE_CAMERA == 1\n\t\treturn perspectiveDepthToViewZ( depth, cameraNear, cameraFar );\n\t#else\n\t\treturn orthographicDepthToViewZ( depth, cameraNear, cameraFar );\n\t#endif\n}\nvec3 getViewPosition( const in vec2 screenPosition, const in float depth, const in float viewZ ) {\n\tfloat clipW = cameraProjectionMatrix[2][3] * viewZ + cameraProjectionMatrix[3][3];\n\tvec4 clipPosition = vec4( ( vec3( screenPosition, depth ) - 0.5 ) * 2.0, 1.0 );\n\tclipPosition *= clipW; // unprojection.\n\treturn ( cameraInverseProjectionMatrix * clipPosition ).xyz;\n}\nvec3 getViewNormal( const in vec2 screenPosition ) {\n\treturn unpackRGBToNormal( texture2D( tNormal, screenPosition ).xyz );\n}\nvoid main() {\n\tfloat depth = getDepth( vUv );\n\tfloat viewZ = getViewZ( depth );\n\tvec3 viewPosition = getViewPosition( vUv, depth, viewZ );\n\tvec3 viewNormal = getViewNormal( vUv );\n vec2 noiseScale = vec2( resolution.x / 4.0, resolution.y / 4.0 );\n\tvec3 random = texture2D( tNoise, vUv * noiseScale ).xyz;\n\tvec3 tangent = normalize( random - viewNormal * dot( random, viewNormal ) );\n\tvec3 bitangent = cross( viewNormal, tangent );\n\tmat3 kernelMatrix = mat3( tangent, bitangent, viewNormal );\n float occlusion = 0.0;\n for ( int i = 0; i < KERNEL_SIZE; i ++ ) {\n\t\tvec3 sampleVector = kernelMatrix * kernel[ i ];\n\t\tvec3 samplePoint = viewPosition + ( sampleVector * kernelRadius );\n\t\tvec4 samplePointNDC = cameraProjectionMatrix * vec4( samplePoint, 1.0 );\n\t\tsamplePointNDC /= samplePointNDC.w;\n\t\tvec2 samplePointUv = samplePointNDC.xy * 0.5 + 0.5;\n\t\tfloat realDepth = getLinearDepth( samplePointUv );\n\t\tfloat sampleDepth = viewZToOrthographicDepth( samplePoint.z, cameraNear, cameraFar );\n\t\tfloat delta = sampleDepth - realDepth;\n\t\tif ( delta > minDistance && delta < maxDistance ) {\n\t\t\tocclusion += 1.0;\n\t\t}\n\t}\n\tocclusion = clamp( occlusion / float( KERNEL_SIZE ), 0.0, 1.0 );\n\tgl_FragColor = vec4( vec3( 1.0 - occlusion ), 1.0 );\n}"};
THREE.SSAODepthShader = {defines:{PERSPECTIVE_CAMERA:1}, uniforms:{tDepth:{value:null}, cameraNear:{value:null}, cameraFar:{value:null}}, vertexShader:"varying vec2 vUv;\nvoid main() {\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"uniform sampler2D tDepth;\nuniform float cameraNear;\nuniform float cameraFar;\nvarying vec2 vUv;\n#include <packing>\nfloat getLinearDepth( const in vec2 screenPosition ) {\n\t#if PERSPECTIVE_CAMERA == 1\n\t\tfloat fragCoordZ = texture2D( tDepth, screenPosition ).x;\n\t\tfloat viewZ = perspectiveDepthToViewZ( fragCoordZ, cameraNear, cameraFar );\n\t\treturn viewZToOrthographicDepth( viewZ, cameraNear, cameraFar );\n\t#else\n\t\treturn texture2D( depthSampler, coord ).x;\n\t#endif\n}\nvoid main() {\n\tfloat depth = getLinearDepth( vUv );\n\tgl_FragColor = vec4( vec3( 1.0 - depth ), 1.0 );\n}"};
THREE.SSAOBlurShader = {uniforms:{tDiffuse:{value:null}, resolution:{value:new THREE.Vector2}}, vertexShader:"varying vec2 vUv;\nvoid main() {\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"uniform sampler2D tDiffuse;\nuniform vec2 resolution;\nvarying vec2 vUv;\nvoid main() {\n\tvec2 texelSize = ( 1.0 / resolution );\n\tfloat result = 0.0;\n\tfor ( int i = - 2; i <= 2; i ++ ) {\n\t\tfor ( int j = - 2; j <= 2; j ++ ) {\n\t\t\tvec2 offset = ( vec2( float( i ), float( j ) ) ) * texelSize;\n\t\t\tresult += texture2D( tDiffuse, vUv + offset ).r;\n\t\t}\n\t}\n\tgl_FragColor = vec4( vec3( result / ( 5.0 * 5.0 ) ), 1.0 );\n}"};
THREE.FilmShader = {uniforms:{tDiffuse:{value:null}, time:{value:0}, nIntensity:{value:.5}, sIntensity:{value:.05}, sCount:{value:4096}, grayscale:{value:1}}, vertexShader:"varying vec2 vUv;\nvoid main() {\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"#include <common>\nuniform float time;\nuniform bool grayscale;\nuniform float nIntensity;\nuniform float sIntensity;\nuniform float sCount;\nuniform sampler2D tDiffuse;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 cTextureScreen = texture2D( tDiffuse, vUv );\n\tfloat dx = rand( vUv + time );\n\tvec3 cResult = cTextureScreen.rgb + cTextureScreen.rgb * clamp( 0.1 + dx, 0.0, 1.0 );\n\tvec2 sc = vec2( sin( vUv.y * sCount ), cos( vUv.y * sCount ) );\n\tcResult += cTextureScreen.rgb * vec3( sc.x, sc.y, sc.x ) * sIntensity;\n\tcResult = cTextureScreen.rgb + clamp( nIntensity, 0.0,1.0 ) * ( cResult - cTextureScreen.rgb );\n\tif( grayscale ) {\n\t\tcResult = vec3( cResult.r * 0.3 + cResult.g * 0.59 + cResult.b * 0.11 );\n\t}\n\tgl_FragColor =  vec4( cResult, cTextureScreen.a );\n}"};
THREE.DotScreenShader = {uniforms:{tDiffuse:{value:null}, tSize:{value:new THREE.Vector2(256, 256)}, center:{value:new THREE.Vector2(.5, .5)}, angle:{value:1.57}, scale:{value:1}}, vertexShader:"varying vec2 vUv;\nvoid main() {\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"uniform vec2 center;\nuniform float angle;\nuniform float scale;\nuniform vec2 tSize;\nuniform sampler2D tDiffuse;\nvarying vec2 vUv;\nfloat pattern() {\n\tfloat s = sin( angle ), c = cos( angle );\n\tvec2 tex = vUv * tSize - center;\n\tvec2 point = vec2( c * tex.x - s * tex.y, s * tex.x + c * tex.y ) * scale;\n\treturn ( sin( point.x ) * sin( point.y ) ) * 4.0;\n}\nvoid main() {\n\tvec4 color = texture2D( tDiffuse, vUv );\n\tfloat average = ( color.r + color.g + color.b ) / 3.0;\n\tgl_FragColor = vec4( vec3( average * 10.0 - 5.0 + pattern() ), color.a );\n}"};
THREE.LuminosityShader = {uniforms:{tDiffuse:{value:null}}, vertexShader:"varying vec2 vUv;\nvoid main() {\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"#include <common>\nuniform sampler2D tDiffuse;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texel = texture2D( tDiffuse, vUv );\n\tfloat l = linearToRelativeLuminance( texel.rgb );\n\tgl_FragColor = vec4( l, l, l, texel.w );\n}"};
THREE.SobelOperatorShader = {uniforms:{tDiffuse:{value:null}, resolution:{value:new THREE.Vector2}}, vertexShader:"varying vec2 vUv;\nvoid main() {\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"uniform sampler2D tDiffuse;\nuniform vec2 resolution;\nvarying vec2 vUv;\nvoid main() {\n\tvec2 texel = vec2( 1.0 / resolution.x, 1.0 / resolution.y );\n\tconst mat3 Gx = mat3( -1, -2, -1, 0, 0, 0, 1, 2, 1 );\n\tconst mat3 Gy = mat3( -1, 0, 1, -2, 0, 2, -1, 0, 1 );\n\tfloat tx0y0 = texture2D( tDiffuse, vUv + texel * vec2( -1, -1 ) ).r;\n\tfloat tx0y1 = texture2D( tDiffuse, vUv + texel * vec2( -1,  0 ) ).r;\n\tfloat tx0y2 = texture2D( tDiffuse, vUv + texel * vec2( -1,  1 ) ).r;\n\tfloat tx1y0 = texture2D( tDiffuse, vUv + texel * vec2(  0, -1 ) ).r;\n\tfloat tx1y1 = texture2D( tDiffuse, vUv + texel * vec2(  0,  0 ) ).r;\n\tfloat tx1y2 = texture2D( tDiffuse, vUv + texel * vec2(  0,  1 ) ).r;\n\tfloat tx2y0 = texture2D( tDiffuse, vUv + texel * vec2(  1, -1 ) ).r;\n\tfloat tx2y1 = texture2D( tDiffuse, vUv + texel * vec2(  1,  0 ) ).r;\n\tfloat tx2y2 = texture2D( tDiffuse, vUv + texel * vec2(  1,  1 ) ).r;\n\tfloat valueGx = Gx[0][0] * tx0y0 + Gx[1][0] * tx1y0 + Gx[2][0] * tx2y0 + \n\t\tGx[0][1] * tx0y1 + Gx[1][1] * tx1y1 + Gx[2][1] * tx2y1 + \n\t\tGx[0][2] * tx0y2 + Gx[1][2] * tx1y2 + Gx[2][2] * tx2y2; \n\tfloat valueGy = Gy[0][0] * tx0y0 + Gy[1][0] * tx1y0 + Gy[2][0] * tx2y0 + \n\t\tGy[0][1] * tx0y1 + Gy[1][1] * tx1y1 + Gy[2][1] * tx2y1 + \n\t\tGy[0][2] * tx0y2 + Gy[1][2] * tx1y2 + Gy[2][2] * tx2y2; \n\tfloat G = sqrt( ( valueGx * valueGx ) + ( valueGy * valueGy ) );\n\tgl_FragColor = vec4( vec3( G ), 1 );\n}"};
THREE.ColorifyShader = {uniforms:{tDiffuse:{value:null}, color:{value:new THREE.Color(16777215)}}, vertexShader:"varying vec2 vUv;\nvoid main() {\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"uniform vec3 color;\nuniform sampler2D tDiffuse;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texel = texture2D( tDiffuse, vUv );\n\tvec3 luma = vec3( 0.299, 0.587, 0.114 );\n\tfloat v = dot( texel.xyz, luma );\n\tgl_FragColor = vec4( v * color, texel.w );\n}"};
THREE.ToneMapShader = {uniforms:{tDiffuse:{value:null}, averageLuminance:{value:1}, luminanceMap:{value:null}, maxLuminance:{value:16}, minLuminance:{value:.01}, middleGrey:{value:.6}}, vertexShader:"varying vec2 vUv;\nvoid main() {\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"#include <common>\nuniform sampler2D tDiffuse;\nvarying vec2 vUv;\nuniform float middleGrey;\nuniform float minLuminance;\nuniform float maxLuminance;\n#ifdef ADAPTED_LUMINANCE\n\tuniform sampler2D luminanceMap;\n#else\n\tuniform float averageLuminance;\n#endif\nvec3 ToneMap( vec3 vColor ) {\n\t#ifdef ADAPTED_LUMINANCE\n\t\tfloat fLumAvg = texture2D(luminanceMap, vec2(0.5, 0.5)).r;\n\t#else\n\t\tfloat fLumAvg = averageLuminance;\n\t#endif\n\tfloat fLumPixel = linearToRelativeLuminance( vColor );\n\tfloat fLumScaled = (fLumPixel * middleGrey) / max( minLuminance, fLumAvg );\n\tfloat fLumCompressed = (fLumScaled * (1.0 + (fLumScaled / (maxLuminance * maxLuminance)))) / (1.0 + fLumScaled);\n\treturn fLumCompressed * vColor;\n}\nvoid main() {\n\tvec4 texel = texture2D( tDiffuse, vUv );\n\tgl_FragColor = vec4( ToneMap( texel.xyz ), texel.w );\n}"};
THREE.TechnicolorShader = {uniforms:{tDiffuse:{value:null}}, vertexShader:"varying vec2 vUv;\nvoid main() {\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"uniform sampler2D tDiffuse;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 tex = texture2D( tDiffuse, vec2( vUv.x, vUv.y ) );\n\tvec4 newTex = vec4(tex.r, (tex.g + tex.b) * .5, (tex.g + tex.b) * .5, 1.0);\n\tgl_FragColor = newTex;\n}"};
THREE.HueSaturationShader = {uniforms:{tDiffuse:{value:null}, hue:{value:0}, saturation:{value:0}}, vertexShader:"varying vec2 vUv;\nvoid main() {\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"uniform sampler2D tDiffuse;\nuniform float hue;\nuniform float saturation;\nvarying vec2 vUv;\nvoid main() {\n\tgl_FragColor = texture2D( tDiffuse, vUv );\n\tfloat angle = hue * 3.14159265;\n\tfloat s = sin(angle), c = cos(angle);\n\tvec3 weights = (vec3(2.0 * c, -sqrt(3.0) * s - c, sqrt(3.0) * s - c) + 1.0) / 3.0;\n\tfloat len = length(gl_FragColor.rgb);\n\tgl_FragColor.rgb = vec3(\n\t\tdot(gl_FragColor.rgb, weights.xyz),\n\t\tdot(gl_FragColor.rgb, weights.zxy),\n\t\tdot(gl_FragColor.rgb, weights.yzx)\n\t);\n\tfloat average = (gl_FragColor.r + gl_FragColor.g + gl_FragColor.b) / 3.0;\n\tif (saturation > 0.0) {\n\t\tgl_FragColor.rgb += (average - gl_FragColor.rgb) * (1.0 - 1.0 / (1.001 - saturation));\n\t} else {\n\t\tgl_FragColor.rgb += (average - gl_FragColor.rgb) * (-saturation);\n\t}\n}"};
THREE.EffectComposer = function(a, d) {
  this.renderer = a;
  if (void 0 === d) {
    d = {minFilter:THREE.LinearFilter, magFilter:THREE.LinearFilter, format:THREE.RGBAFormat, stencilBuffer:!1};
    var k = a.getSize(new THREE.Vector2);
    this._pixelRatio = a.getPixelRatio();
    this._width = k.width;
    this._height = k.height;
    d = new THREE.WebGLRenderTarget(this._width * this._pixelRatio, this._height * this._pixelRatio, d);
    d.texture.name = "EffectComposer.rt1";
  } else {
    this._pixelRatio = 1, this._width = d.width, this._height = d.height;
  }
  this.renderTarget1 = d;
  this.renderTarget2 = d.clone();
  this.renderTarget2.texture.name = "EffectComposer.rt2";
  this.writeBuffer = this.renderTarget1;
  this.readBuffer = this.renderTarget2;
  this.renderToScreen = !0;
  this.passes = [];
  void 0 === THREE.CopyShader && console.error("THREE.EffectComposer relies on THREE.CopyShader");
  void 0 === THREE.ShaderPass && console.error("THREE.EffectComposer relies on THREE.ShaderPass");
  this.copyPass = new THREE.ShaderPass(THREE.CopyShader);
  this.clock = new THREE.Clock;
};
Object.assign(THREE.EffectComposer.prototype, {swapBuffers:function() {
  var a = this.readBuffer;
  this.readBuffer = this.writeBuffer;
  this.writeBuffer = a;
}, addPass:function(a) {
  this.passes.push(a);
  a.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);
}, insertPass:function(a, d) {
  this.passes.splice(d, 0, a);
}, isLastEnabledPass:function(a) {
  for (a += 1; a < this.passes.length; a++) {
    if (this.passes[a].enabled) {
      return !1;
    }
  }
  return !0;
}, render:function(a) {
  void 0 === a && (a = this.clock.getDelta());
  var d = this.renderer.getRenderTarget(), k = !1, b, g = this.passes.length;
  for (b = 0; b < g; b++) {
    var f = this.passes[b];
    if (!1 !== f.enabled) {
      f.renderToScreen = this.renderToScreen && this.isLastEnabledPass(b);
      f.render(this.renderer, this.writeBuffer, this.readBuffer, a, k);
      if (f.needsSwap) {
        if (k) {
          var e = this.renderer.getContext(), r = this.renderer.state.buffers.stencil;
          r.setFunc(e.NOTEQUAL, 1, 4294967295);
          this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, a);
          r.setFunc(e.EQUAL, 1, 4294967295);
        }
        this.swapBuffers();
      }
      void 0 !== THREE.MaskPass && (f instanceof THREE.MaskPass ? k = !0 : f instanceof THREE.ClearMaskPass && (k = !1));
    }
  }
  this.renderer.setRenderTarget(d);
}, reset:function(a) {
  void 0 === a && (a = this.renderer.getSize(new THREE.Vector2), this._pixelRatio = this.renderer.getPixelRatio(), this._width = a.width, this._height = a.height, a = this.renderTarget1.clone(), a.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio));
  this.renderTarget1.dispose();
  this.renderTarget2.dispose();
  this.renderTarget1 = a;
  this.renderTarget2 = a.clone();
  this.writeBuffer = this.renderTarget1;
  this.readBuffer = this.renderTarget2;
}, setSize:function(a, d) {
  this._width = a;
  this._height = d;
  a = this._width * this._pixelRatio;
  d = this._height * this._pixelRatio;
  this.renderTarget1.setSize(a, d);
  this.renderTarget2.setSize(a, d);
  for (var k = 0; k < this.passes.length; k++) {
    this.passes[k].setSize(a, d);
  }
}, setPixelRatio:function(a) {
  this._pixelRatio = a;
  this.setSize(this._width, this._height);
}});
THREE.Pass = function() {
  this.needsSwap = this.enabled = !0;
  this.renderToScreen = this.clear = !1;
};
Object.assign(THREE.Pass.prototype, {setSize:function() {
}, render:function() {
  console.error("THREE.Pass: .render() must be implemented in derived pass.");
}});
THREE.Pass.FullScreenQuad = function() {
  var a = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1), d = new THREE.PlaneBufferGeometry(2, 2), k = function(a) {
    this._mesh = new THREE.Mesh(d, a);
  };
  Object.defineProperty(k.prototype, "material", {get:function() {
    return this._mesh.material;
  }, set:function(a) {
    this._mesh.material = a;
  }});
  Object.assign(k.prototype, {dispose:function() {
    this._mesh.geometry.dispose();
  }, render:function(b) {
    b.render(this._mesh, a);
  }});
  return k;
}();
THREE.RenderPass = function(a, d, k, b, g) {
  THREE.Pass.call(this);
  this.scene = a;
  this.camera = d;
  this.overrideMaterial = k;
  this.clearColor = b;
  this.clearAlpha = void 0 !== g ? g : 0;
  this.clear = !0;
  this.needsSwap = this.clearDepth = !1;
};
THREE.RenderPass.prototype = Object.assign(Object.create(THREE.Pass.prototype), {constructor:THREE.RenderPass, render:function(a, d, k) {
  d = a.autoClear;
  a.autoClear = !1;
  if (void 0 !== this.overrideMaterial) {
    var b = this.scene.overrideMaterial;
    this.scene.overrideMaterial = this.overrideMaterial;
  }
  if (this.clearColor) {
    var g = a.getClearColor().getHex();
    var f = a.getClearAlpha();
    a.setClearColor(this.clearColor, this.clearAlpha);
  }
  this.clearDepth && a.clearDepth();
  a.setRenderTarget(this.renderToScreen ? null : k);
  this.clear && a.clear(a.autoClearColor, a.autoClearDepth, a.autoClearStencil);
  a.render(this.scene, this.camera);
  this.clearColor && a.setClearColor(g, f);
  void 0 !== this.overrideMaterial && (this.scene.overrideMaterial = b);
  a.autoClear = d;
}});
THREE.ShaderPass = function(a, d) {
  THREE.Pass.call(this);
  this.textureID = void 0 !== d ? d : "tDiffuse";
  a instanceof THREE.ShaderMaterial ? (this.uniforms = a.uniforms, this.material = a) : a && (this.uniforms = THREE.UniformsUtils.clone(a.uniforms), this.material = new THREE.ShaderMaterial({defines:Object.assign({}, a.defines), uniforms:this.uniforms, vertexShader:a.vertexShader, fragmentShader:a.fragmentShader}));
  this.fsQuad = new THREE.Pass.FullScreenQuad(this.material);
};
THREE.ShaderPass.prototype = Object.assign(Object.create(THREE.Pass.prototype), {constructor:THREE.ShaderPass, render:function(a, d, k) {
  this.uniforms[this.textureID] && (this.uniforms[this.textureID].value = k.texture);
  this.fsQuad.material = this.material;
  this.renderToScreen ? a.setRenderTarget(null) : (a.setRenderTarget(d), this.clear && a.clear(a.autoClearColor, a.autoClearDepth, a.autoClearStencil));
  this.fsQuad.render(a);
}});
THREE.MaskPass = function(a, d) {
  THREE.Pass.call(this);
  this.scene = a;
  this.camera = d;
  this.clear = !0;
  this.inverse = this.needsSwap = !1;
};
THREE.MaskPass.prototype = Object.assign(Object.create(THREE.Pass.prototype), {constructor:THREE.MaskPass, render:function(a, d, k) {
  var b = a.getContext(), g = a.state;
  g.buffers.color.setMask(!1);
  g.buffers.depth.setMask(!1);
  g.buffers.color.setLocked(!0);
  g.buffers.depth.setLocked(!0);
  if (this.inverse) {
    var f = 0;
    var e = 1;
  } else {
    f = 1, e = 0;
  }
  g.buffers.stencil.setTest(!0);
  g.buffers.stencil.setOp(b.REPLACE, b.REPLACE, b.REPLACE);
  g.buffers.stencil.setFunc(b.ALWAYS, f, 4294967295);
  g.buffers.stencil.setClear(e);
  g.buffers.stencil.setLocked(!0);
  a.setRenderTarget(k);
  this.clear && a.clear();
  a.render(this.scene, this.camera);
  a.setRenderTarget(d);
  this.clear && a.clear();
  a.render(this.scene, this.camera);
  g.buffers.color.setLocked(!1);
  g.buffers.depth.setLocked(!1);
  g.buffers.stencil.setLocked(!1);
  g.buffers.stencil.setFunc(b.EQUAL, 1, 4294967295);
  g.buffers.stencil.setOp(b.KEEP, b.KEEP, b.KEEP);
  g.buffers.stencil.setLocked(!0);
}});
THREE.ClearMaskPass = function() {
  THREE.Pass.call(this);
  this.needsSwap = !1;
};
THREE.ClearMaskPass.prototype = Object.create(THREE.Pass.prototype);
Object.assign(THREE.ClearMaskPass.prototype, {render:function(a) {
  a.state.buffers.stencil.setLocked(!1);
  a.state.buffers.stencil.setTest(!1);
}});
THREE.LightProbeGenerator = {fromCubeTexture:function(a) {
  for (var d, k, b = 0, g = new THREE.Vector3, f = new THREE.Vector3, e = new THREE.Color, r = [0, 0, 0, 0, 0, 0, 0, 0, 0], q = new THREE.SphericalHarmonics3, m = q.coefficients, n = 0; 6 > n; n++) {
    var c = a.image[n], h = c.width, t = c.height, z = document.createElement("canvas");
    z.width = h;
    z.height = t;
    z = z.getContext("2d");
    z.drawImage(c, 0, 0, h, t);
    h = z.getImageData(0, 0, h, t);
    c = h.data;
    h = h.width;
    t = 2 / h;
    z = 0;
    for (var y = c.length; z < y; z += 4) {
      e.setRGB(c[z] / 255, c[z + 1] / 255, c[z + 2] / 255);
      convertColorToLinear(e, a.encoding);
      k = z / 4;
      d = -1 + (k % h + .5) * t;
      k = 1 - (Math.floor(k / h) + .5) * t;
      switch(n) {
        case 0:
          g.set(-1, k, -d);
          break;
        case 1:
          g.set(1, k, d);
          break;
        case 2:
          g.set(-d, 1, -k);
          break;
        case 3:
          g.set(-d, -1, k);
          break;
        case 4:
          g.set(-d, k, 1);
          break;
        case 5:
          g.set(d, k, -1);
      }
      d = g.lengthSq();
      k = 4 / (Math.sqrt(d) * d);
      b += k;
      f.copy(g).normalize();
      THREE.SphericalHarmonics3.getBasisAt(f, r);
      for (d = 0; 9 > d; d++) {
        m[d].x += r[d] * e.r * k, m[d].y += r[d] * e.g * k, m[d].z += r[d] * e.b * k;
      }
    }
  }
  a = 4 * Math.PI / b;
  for (d = 0; 9 > d; d++) {
    m[d].x *= a, m[d].y *= a, m[d].z *= a;
  }
  return new THREE.LightProbe(q);
}, fromCubeRenderTarget:function(a, d) {
  for (var k, b, g = 0, f = new THREE.Vector3, e = new THREE.Vector3, r = new THREE.Color, q = [0, 0, 0, 0, 0, 0, 0, 0, 0], m = new THREE.SphericalHarmonics3, n = m.coefficients, c = 0; 6 > c; c++) {
    var h = d.width, t = new Uint8Array(h * h * 4);
    a.readRenderTargetPixels(d, 0, 0, h, h, t, c);
    for (var z = 2 / h, y = 0, x = t.length; y < x; y += 4) {
      r.setRGB(t[y] / 255, t[y + 1] / 255, t[y + 2] / 255);
      convertColorToLinear(r, d.texture.encoding);
      b = y / 4;
      k = -1 + (b % h + .5) * z;
      b = 1 - (Math.floor(b / h) + .5) * z;
      switch(c) {
        case 0:
          f.set(1, b, -k);
          break;
        case 1:
          f.set(-1, b, k);
          break;
        case 2:
          f.set(k, 1, -b);
          break;
        case 3:
          f.set(k, -1, b);
          break;
        case 4:
          f.set(k, b, 1);
          break;
        case 5:
          f.set(-k, b, -1);
      }
      k = f.lengthSq();
      b = 4 / (Math.sqrt(k) * k);
      g += b;
      e.copy(f).normalize();
      THREE.SphericalHarmonics3.getBasisAt(e, q);
      for (k = 0; 9 > k; k++) {
        n[k].x += q[k] * r.r * b, n[k].y += q[k] * r.g * b, n[k].z += q[k] * r.b * b;
      }
    }
  }
  a = 4 * Math.PI / g;
  for (k = 0; 9 > k; k++) {
    n[k].x *= a, n[k].y *= a, n[k].z *= a;
  }
  return new THREE.LightProbe(m);
}};
var convertColorToLinear = function(a, d) {
  switch(d) {
    case THREE.sRGBEncoding:
      a.convertSRGBToLinear();
      break;
    case THREE.LinearEncoding:
      break;
    default:
      console.warn("WARNING: LightProbeGenerator convertColorToLinear() encountered an unsupported encoding.");
  }
  return a;
};
THREE.NURBSCurve = function(a, d, k, b, g) {
  THREE.Curve.call(this);
  this.degree = a;
  this.knots = d;
  this.controlPoints = [];
  this.startKnot = b || 0;
  this.endKnot = g || this.knots.length - 1;
  for (a = 0; a < k.length; ++a) {
    d = k[a], this.controlPoints[a] = new THREE.Vector4(d.x, d.y, d.z, d.w);
  }
};
THREE.NURBSCurve.prototype = Object.create(THREE.Curve.prototype);
THREE.NURBSCurve.prototype.constructor = THREE.NURBSCurve;
THREE.NURBSCurve.prototype.getPoint = function(a, d) {
  d = d || new THREE.Vector3;
  a = THREE.NURBSUtils.calcBSplinePoint(this.degree, this.knots, this.controlPoints, this.knots[this.startKnot] + a * (this.knots[this.endKnot] - this.knots[this.startKnot]));
  1 != a.w && a.divideScalar(a.w);
  return d.set(a.x, a.y, a.z);
};
THREE.NURBSCurve.prototype.getTangent = function(a, d) {
  d = d || new THREE.Vector3;
  a = THREE.NURBSUtils.calcNURBSDerivatives(this.degree, this.knots, this.controlPoints, this.knots[0] + a * (this.knots[this.knots.length - 1] - this.knots[0]), 1);
  d.copy(a[1]).normalize();
  return d;
};
THREE.NURBSSurface = function(a, d, k, b, g) {
  this.degree1 = a;
  this.degree2 = d;
  this.knots1 = k;
  this.knots2 = b;
  this.controlPoints = [];
  a = k.length - a - 1;
  d = b.length - d - 1;
  for (b = 0; b < a; ++b) {
    for (this.controlPoints[b] = [], k = 0; k < d; ++k) {
      var f = g[b][k];
      this.controlPoints[b][k] = new THREE.Vector4(f.x, f.y, f.z, f.w);
    }
  }
};
THREE.NURBSSurface.prototype = {constructor:THREE.NURBSSurface, getPoint:function(a, d, k) {
  THREE.NURBSUtils.calcSurfacePoint(this.degree1, this.degree2, this.knots1, this.knots2, this.controlPoints, this.knots1[0] + a * (this.knots1[this.knots1.length - 1] - this.knots1[0]), this.knots2[0] + d * (this.knots2[this.knots2.length - 1] - this.knots2[0]), k);
}};
THREE.NURBSUtils = {findSpan:function(a, d, k) {
  var b = k.length - a - 1;
  if (d >= k[b]) {
    return b - 1;
  }
  if (d <= k[a]) {
    return a;
  }
  for (var g = Math.floor((a + b) / 2); d < k[g] || d >= k[g + 1];) {
    d < k[g] ? b = g : a = g, g = Math.floor((a + b) / 2);
  }
  return g;
}, calcBasisFunctions:function(a, d, k, b) {
  for (var g = [], f = [], e = [], r = g[0] = 1; r <= k; ++r) {
    f[r] = d - b[a + 1 - r];
    e[r] = b[a + r] - d;
    for (var q = 0, m = 0; m < r; ++m) {
      var n = e[m + 1], c = f[r - m], h = g[m] / (n + c);
      g[m] = q + n * h;
      q = c * h;
    }
    g[r] = q;
  }
  return g;
}, calcBSplinePoint:function(a, d, k, b) {
  var g = this.findSpan(a, b, d);
  d = this.calcBasisFunctions(g, b, a, d);
  b = new THREE.Vector4(0, 0, 0, 0);
  for (var f = 0; f <= a; ++f) {
    var e = k[g - a + f], r = d[f], q = e.w * r;
    b.x += e.x * q;
    b.y += e.y * q;
    b.z += e.z * q;
    b.w += e.w * r;
  }
  return b;
}, calcBasisFunctionDerivatives:function(a, d, k, b, g) {
  for (var f = [], e = 0; e <= k; ++e) {
    f[e] = 0;
  }
  var r = [];
  for (e = 0; e <= b; ++e) {
    r[e] = f.slice(0);
  }
  var q = [];
  for (e = 0; e <= k; ++e) {
    q[e] = f.slice(0);
  }
  q[0][0] = 1;
  var m = f.slice(0), n = f.slice(0);
  for (e = 1; e <= k; ++e) {
    m[e] = d - g[a + 1 - e];
    n[e] = g[a + e] - d;
    for (var c = 0, h = 0; h < e; ++h) {
      var t = n[h + 1], z = m[e - h];
      q[e][h] = t + z;
      var y = q[h][e - 1] / q[e][h];
      q[h][e] = c + t * y;
      c = z * y;
    }
    q[e][e] = c;
  }
  for (e = 0; e <= k; ++e) {
    r[0][e] = q[e][k];
  }
  for (h = 0; h <= k; ++h) {
    a = 0;
    d = 1;
    g = [];
    for (e = 0; e <= k; ++e) {
      g[e] = f.slice(0);
    }
    for (m = g[0][0] = 1; m <= b; ++m) {
      n = 0;
      c = h - m;
      t = k - m;
      h >= m && (g[d][0] = g[a][0] / q[t + 1][c], n = g[d][0] * q[c][t]);
      z = h - 1 <= t ? m - 1 : k - h;
      for (e = -1 <= c ? 1 : -c; e <= z; ++e) {
        g[d][e] = (g[a][e] - g[a][e - 1]) / q[t + 1][c + e], n += g[d][e] * q[c + e][t];
      }
      h <= t && (g[d][m] = -g[a][m - 1] / q[t + 1][h], n += g[d][m] * q[h][t]);
      r[m][h] = n;
      e = a;
      a = d;
      d = e;
    }
  }
  h = k;
  for (m = 1; m <= b; ++m) {
    for (e = 0; e <= k; ++e) {
      r[m][e] *= h;
    }
    h *= k - m;
  }
  return r;
}, calcBSplineDerivatives:function(a, d, k, b, g) {
  var f = g < a ? g : a, e = [], r = this.findSpan(a, b, d);
  d = this.calcBasisFunctionDerivatives(r, b, a, f, d);
  b = [];
  for (var q = 0; q < k.length; ++q) {
    var m = k[q].clone(), n = m.w;
    m.x *= n;
    m.y *= n;
    m.z *= n;
    b[q] = m;
  }
  for (k = 0; k <= f; ++k) {
    m = b[r - a].clone().multiplyScalar(d[k][0]);
    for (q = 1; q <= a; ++q) {
      m.add(b[r - a + q].clone().multiplyScalar(d[k][q]));
    }
    e[k] = m;
  }
  for (k = f + 1; k <= g + 1; ++k) {
    e[k] = new THREE.Vector4(0, 0, 0);
  }
  return e;
}, calcKoverI:function(a, d) {
  for (var k = 1, b = 2; b <= a; ++b) {
    k *= b;
  }
  var g = 1;
  for (b = 2; b <= d; ++b) {
    g *= b;
  }
  for (b = 2; b <= a - d; ++b) {
    g *= b;
  }
  return k / g;
}, calcRationalCurveDerivatives:function(a) {
  for (var d = a.length, k = [], b = [], g = 0; g < d; ++g) {
    var f = a[g];
    k[g] = new THREE.Vector3(f.x, f.y, f.z);
    b[g] = f.w;
  }
  a = [];
  for (f = 0; f < d; ++f) {
    var e = k[f].clone();
    for (g = 1; g <= f; ++g) {
      e.sub(a[f - g].clone().multiplyScalar(this.calcKoverI(f, g) * b[g]));
    }
    a[f] = e.divideScalar(b[0]);
  }
  return a;
}, calcNURBSDerivatives:function(a, d, k, b, g) {
  a = this.calcBSplineDerivatives(a, d, k, b, g);
  return this.calcRationalCurveDerivatives(a);
}, calcSurfacePoint:function(a, d, k, b, g, f, e, r) {
  var q = this.findSpan(a, f, k), m = this.findSpan(d, e, b);
  k = this.calcBasisFunctions(q, f, a, k);
  b = this.calcBasisFunctions(m, e, d, b);
  e = [];
  for (f = 0; f <= d; ++f) {
    e[f] = new THREE.Vector4(0, 0, 0, 0);
    for (var n = 0; n <= a; ++n) {
      var c = g[q - a + n][m - d + f].clone(), h = c.w;
      c.x *= h;
      c.y *= h;
      c.z *= h;
      e[f].add(c.multiplyScalar(k[n]));
    }
  }
  a = new THREE.Vector4(0, 0, 0, 0);
  for (f = 0; f <= d; ++f) {
    a.add(e[f].multiplyScalar(b[f]));
  }
  a.divideScalar(a.w);
  r.set(a.x, a.y, a.z);
}};
THREE.Lensflare = function() {
  THREE.Mesh.call(this, THREE.Lensflare.Geometry, new THREE.MeshBasicMaterial({opacity:0, transparent:!0}));
  this.type = "Lensflare";
  this.frustumCulled = !1;
  this.renderOrder = Infinity;
  var a = new THREE.Vector3, d = new THREE.DataTexture(new Uint8Array(768), 16, 16, THREE.RGBFormat);
  d.minFilter = THREE.NearestFilter;
  d.magFilter = THREE.NearestFilter;
  d.wrapS = THREE.ClampToEdgeWrapping;
  d.wrapT = THREE.ClampToEdgeWrapping;
  d.needsUpdate = !0;
  var k = new THREE.DataTexture(new Uint8Array(768), 16, 16, THREE.RGBFormat);
  k.minFilter = THREE.NearestFilter;
  k.magFilter = THREE.NearestFilter;
  k.wrapS = THREE.ClampToEdgeWrapping;
  k.wrapT = THREE.ClampToEdgeWrapping;
  k.needsUpdate = !0;
  var b = THREE.Lensflare.Geometry, g = new THREE.RawShaderMaterial({uniforms:{scale:{value:null}, screenPosition:{value:null}}, vertexShader:"precision highp float;\nuniform vec3 screenPosition;\nuniform vec2 scale;\nattribute vec3 position;\nvoid main() {\n\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );\n}", fragmentShader:"precision highp float;\nvoid main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 1.0, 1.0 );\n}", depthTest:!0, depthWrite:!1, transparent:!1}), 
  f = new THREE.RawShaderMaterial({uniforms:{map:{value:d}, scale:{value:null}, screenPosition:{value:null}}, vertexShader:"precision highp float;\nuniform vec3 screenPosition;\nuniform vec2 scale;\nattribute vec3 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\n\tvUV = uv;\n\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );\n}", fragmentShader:"precision highp float;\nuniform sampler2D map;\nvarying vec2 vUV;\nvoid main() {\n\tgl_FragColor = texture2D( map, vUV );\n}", 
  depthTest:!1, depthWrite:!1, transparent:!1}), e = new THREE.Mesh(b, g), r = [], q = THREE.LensflareElement.Shader, m = new THREE.RawShaderMaterial({uniforms:{map:{value:null}, occlusionMap:{value:k}, color:{value:new THREE.Color(16777215)}, scale:{value:new THREE.Vector2}, screenPosition:{value:new THREE.Vector3}}, vertexShader:q.vertexShader, fragmentShader:q.fragmentShader, blending:THREE.AdditiveBlending, transparent:!0, depthWrite:!1}), n = new THREE.Mesh(b, m);
  this.addElement = function(a) {
    r.push(a);
  };
  var c = new THREE.Vector2, h = new THREE.Vector2, t = new THREE.Box2, z = new THREE.Vector4;
  this.onBeforeRender = function(q, x, p) {
    z.copy(q.getCurrentViewport());
    x = z.w / z.z;
    var v = z.z / 2, w = z.w / 2, y = 16 / z.w;
    c.set(y * x, y);
    t.min.set(z.x, z.y);
    t.max.set(z.x + (z.z - 16), z.y + (z.w - 16));
    a.setFromMatrixPosition(this.matrixWorld);
    a.applyMatrix4(p.matrixWorldInverse);
    a.applyMatrix4(p.projectionMatrix);
    h.x = z.x + a.x * v + v - 8;
    h.y = z.y + a.y * w + w - 8;
    if (t.containsPoint(h)) {
      q.copyFramebufferToTexture(h, d);
      v = g.uniforms;
      v.scale.value = c;
      v.screenPosition.value = a;
      q.renderBufferDirect(p, null, b, g, e, null);
      q.copyFramebufferToTexture(h, k);
      v = f.uniforms;
      v.scale.value = c;
      v.screenPosition.value = a;
      q.renderBufferDirect(p, null, b, f, e, null);
      w = 2 * -a.x;
      for (var A = 2 * -a.y, D = 0, F = r.length; D < F; D++) {
        x = r[D], v = m.uniforms, v.color.value.copy(x.color), v.map.value = x.texture, v.screenPosition.value.x = a.x + w * x.distance, v.screenPosition.value.y = a.y + A * x.distance, y = x.size / z.w, x = z.w / z.z, v.scale.value.set(y * x, y), m.uniformsNeedUpdate = !0, q.renderBufferDirect(p, null, b, m, n, null);
      }
    }
  };
  this.dispose = function() {
    g.dispose();
    f.dispose();
    m.dispose();
    d.dispose();
    k.dispose();
    for (var a = 0, c = r.length; a < c; a++) {
      r[a].texture.dispose();
    }
  };
};
THREE.Lensflare.prototype = Object.create(THREE.Mesh.prototype);
THREE.Lensflare.prototype.constructor = THREE.Lensflare;
THREE.Lensflare.prototype.isLensflare = !0;
THREE.LensflareElement = function(a, d, k, b) {
  this.texture = a;
  this.size = d || 1;
  this.distance = k || 0;
  this.color = b || new THREE.Color(16777215);
};
THREE.LensflareElement.Shader = {uniforms:{map:{value:null}, occlusionMap:{value:null}, color:{value:null}, scale:{value:null}, screenPosition:{value:null}}, vertexShader:"precision highp float;\nuniform vec3 screenPosition;\nuniform vec2 scale;\nuniform sampler2D occlusionMap;\nattribute vec3 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\n\tvUV = uv;\n\tvec2 pos = position.xy;\n\tvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\n\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\n\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\n\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\n\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\n\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\n\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\n\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\n\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\n\tvVisibility =        visibility.r / 9.0;\n\tvVisibility *= 1.0 - visibility.g / 9.0;\n\tvVisibility *=       visibility.b / 9.0;\n\tgl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}", 
fragmentShader:"precision highp float;\nuniform sampler2D map;\nuniform vec3 color;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\n\tvec4 texture = texture2D( map, vUV );\n\ttexture.a *= vVisibility;\n\tgl_FragColor = texture;\n\tgl_FragColor.rgb *= color;\n}"};
THREE.Lensflare.Geometry = function() {
  var a = new THREE.BufferGeometry, d = new Float32Array([-1, -1, 0, 0, 0, 1, -1, 0, 1, 0, 1, 1, 0, 1, 1, -1, 1, 0, 0, 1]);
  d = new THREE.InterleavedBuffer(d, 5);
  a.setIndex([0, 1, 2, 0, 2, 3]);
  a.setAttribute("position", new THREE.InterleavedBufferAttribute(d, 3, 0, !1));
  a.setAttribute("uv", new THREE.InterleavedBufferAttribute(d, 2, 3, !1));
  return a;
}();
THREE.TTFLoader = function(a) {
  THREE.Loader.call(this, a);
  this.reversed = !1;
};
THREE.TTFLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {constructor:THREE.TTFLoader, load:function(a, d, k, b) {
  var g = this, f = new THREE.FileLoader(this.manager);
  f.setPath(this.path);
  f.setResponseType("arraybuffer");
  f.load(a, function(a) {
    d(g.parse(a));
  }, k, b);
}, parse:function(a) {
  function d(a) {
    var b = [], d;
    a.forEach(function(a) {
      "m" === a.type.toLowerCase() ? (d = [a], b.push(d)) : "z" !== a.type.toLowerCase() && d.push(a);
    });
    var f = [];
    b.forEach(function(a) {
      var b = {type:"m", x:a[a.length - 1].x, y:a[a.length - 1].y};
      f.push(b);
      for (var e = a.length - 1; 0 < e; e--) {
        var d = a[e];
        b = {type:d.type};
        void 0 !== d.x2 && void 0 !== d.y2 ? (b.x1 = d.x2, b.y1 = d.y2, b.x2 = d.x1, b.y2 = d.y1) : void 0 !== d.x1 && void 0 !== d.y1 && (b.x1 = d.x1, b.y1 = d.y1);
        b.x = a[e - 1].x;
        b.y = a[e - 1].y;
        f.push(b);
      }
    });
    return f;
  }
  return "undefined" === typeof opentype ? (console.warn("THREE.TTFLoader: The loader requires opentype.js. Make sure it's included before using the loader."), null) : function(a, b) {
    for (var g = Math.round, f = {}, e = 1E5 / (72 * (a.unitsPerEm || 2048)), k = a.encoding.cmap.glyphIndexMap, q = Object.keys(k), m = 0; m < q.length; m++) {
      var n = q[m], c = a.glyphs.glyphs[k[n]];
      if (void 0 !== n) {
        var h = {ha:g(c.advanceWidth * e), x_min:g(c.xMin * e), x_max:g(c.xMax * e), o:""};
        b && (c.path.commands = d(c.path.commands));
        c.path.commands.forEach(function(a) {
          "c" === a.type.toLowerCase() && (a.type = "b");
          h.o += a.type.toLowerCase() + " ";
          void 0 !== a.x && void 0 !== a.y && (h.o += g(a.x * e) + " " + g(a.y * e) + " ");
          void 0 !== a.x1 && void 0 !== a.y1 && (h.o += g(a.x1 * e) + " " + g(a.y1 * e) + " ");
          void 0 !== a.x2 && void 0 !== a.y2 && (h.o += g(a.x2 * e) + " " + g(a.y2 * e) + " ");
        });
        f[String.fromCodePoint(c.unicode)] = h;
      }
    }
    return {glyphs:f, familyName:a.getEnglishName("fullName"), ascender:g(a.ascender * e), descender:g(a.descender * e), underlinePosition:a.tables.post.underlinePosition, underlineThickness:a.tables.post.underlineThickness, boundingBox:{xMin:a.tables.head.xMin, xMax:a.tables.head.xMax, yMin:a.tables.head.yMin, yMax:a.tables.head.yMax}, resolution:1E3, original_font_information:a.tables.name};
  }(opentype.parse(a), this.reversed);
}});
(function(a, d) {
  if ("function" === typeof define && define.amd) {
    define(["long"], d);
  } else {
    if ("function" === typeof require && "object" === typeof module && module && module.exports) {
      a = module;
      try {
        var k = require("long");
      } catch (b) {
      }
      k = d(k);
      a.exports = k;
    } else {
      (a.dcodeIO = a.dcodeIO || {}).ByteBuffer = d(a.dcodeIO.Long);
    }
  }
})(this, function(a) {
  function d(a) {
    var c = 0;
    return function() {
      return c < a.length ? a.charCodeAt(c++) : null;
    };
  }
  function k() {
    var a = [], b = [];
    return function() {
      if (0 === arguments.length) {
        return b.join("") + q.apply(String, a);
      }
      1024 < a.length + arguments.length && (b.push(q.apply(String, a)), a.length = 0);
      Array.prototype.push.apply(a, arguments);
    };
  }
  function b(a, b, e, f, d) {
    var c = 8 * d - f - 1;
    var h = (1 << c) - 1, g = h >> 1, m = -7;
    d = e ? d - 1 : 0;
    var n = e ? -1 : 1, k = a[b + d];
    d += n;
    e = k & (1 << -m) - 1;
    k >>= -m;
    for (m += c; 0 < m; e = 256 * e + a[b + d], d += n, m -= 8) {
    }
    c = e & (1 << -m) - 1;
    e >>= -m;
    for (m += f; 0 < m; c = 256 * c + a[b + d], d += n, m -= 8) {
    }
    if (0 === e) {
      e = 1 - g;
    } else {
      if (e === h) {
        return c ? NaN : Infinity * (k ? -1 : 1);
      }
      c += Math.pow(2, f);
      e -= g;
    }
    return (k ? -1 : 1) * c * Math.pow(2, e - f);
  }
  function g(a, b, e, f, d, g) {
    var c, h = 8 * g - d - 1, m = (1 << h) - 1, n = m >> 1, k = 23 === d ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    g = f ? 0 : g - 1;
    var q = f ? 1 : -1, r = 0 > b || 0 === b && 0 > 1 / b ? 1 : 0;
    b = Math.abs(b);
    for (isNaN(b) || Infinity === b ? (b = isNaN(b) ? 1 : 0, f = m) : (f = Math.floor(Math.log(b) / Math.LN2), 1 > b * (c = Math.pow(2, -f)) && (f--, c *= 2), b = 1 <= f + n ? b + k / c : b + k * Math.pow(2, 1 - n), 2 <= b * c && (f++, c /= 2), f + n >= m ? (b = 0, f = m) : 1 <= f + n ? (b = (b * c - 1) * Math.pow(2, d), f += n) : (b = b * Math.pow(2, n - 1) * Math.pow(2, d), f = 0)); 8 <= d; a[e + g] = b & 255, g += q, b /= 256, d -= 8) {
    }
    f = f << d | b;
    for (h += d; 0 < h; a[e + g] = f & 255, g += q, f /= 256, h -= 8) {
    }
    a[e + g - q] |= 128 * r;
  }
  var f = function(a, b, e) {
    "undefined" === typeof a && (a = f.DEFAULT_CAPACITY);
    "undefined" === typeof b && (b = f.DEFAULT_ENDIAN);
    "undefined" === typeof e && (e = f.DEFAULT_NOASSERT);
    if (!e) {
      a |= 0;
      if (0 > a) {
        throw RangeError("Illegal capacity");
      }
      b = !!b;
      e = !!e;
    }
    this.buffer = 0 === a ? r : new ArrayBuffer(a);
    this.view = 0 === a ? null : new Uint8Array(this.buffer);
    this.offset = 0;
    this.markedOffset = -1;
    this.limit = a;
    this.littleEndian = b;
    this.noAssert = e;
  };
  f.VERSION = "5.0.1";
  f.LITTLE_ENDIAN = !0;
  f.BIG_ENDIAN = !1;
  f.DEFAULT_CAPACITY = 16;
  f.DEFAULT_ENDIAN = f.BIG_ENDIAN;
  f.DEFAULT_NOASSERT = !1;
  f.Long = a || null;
  var e = f.prototype;
  Object.defineProperty(e, "__isByteBuffer__", {value:!0, enumerable:!1, configurable:!1});
  var r = new ArrayBuffer(0), q = String.fromCharCode;
  f.accessor = function() {
    return Uint8Array;
  };
  f.allocate = function(a, b, e) {
    return new f(a, b, e);
  };
  f.concat = function(a, b, e, d) {
    if ("boolean" === typeof b || "string" !== typeof b) {
      d = e, e = b, b = void 0;
    }
    for (var c = 0, h = 0, g = a.length, m; h < g; ++h) {
      f.isByteBuffer(a[h]) || (a[h] = f.wrap(a[h], b)), m = a[h].limit - a[h].offset, 0 < m && (c += m);
    }
    if (0 === c) {
      return new f(0, e, d);
    }
    b = new f(c, e, d);
    for (h = 0; h < g;) {
      e = a[h++], m = e.limit - e.offset, 0 >= m || (b.view.set(e.view.subarray(e.offset, e.limit), b.offset), b.offset += m);
    }
    b.limit = b.offset;
    b.offset = 0;
    return b;
  };
  f.isByteBuffer = function(a) {
    return !0 === (a && a.__isByteBuffer__);
  };
  f.type = function() {
    return ArrayBuffer;
  };
  f.wrap = function(a, b, d, g) {
    "string" !== typeof b && (g = d, d = b, b = void 0);
    if ("string" === typeof a) {
      switch("undefined" === typeof b && (b = "utf8"), b) {
        case "base64":
          return f.fromBase64(a, d);
        case "hex":
          return f.fromHex(a, d);
        case "binary":
          return f.fromBinary(a, d);
        case "utf8":
          return f.fromUTF8(a, d);
        case "debug":
          return f.fromDebug(a, d);
        default:
          throw Error("Unsupported encoding: " + b);
      }
    }
    if (null === a || "object" !== typeof a) {
      throw TypeError("Illegal buffer");
    }
    if (f.isByteBuffer(a)) {
      return b = e.clone.call(a), b.markedOffset = -1, b;
    }
    if (a instanceof Uint8Array) {
      b = new f(0, d, g), 0 < a.length && (b.buffer = a.buffer, b.offset = a.byteOffset, b.limit = a.byteOffset + a.byteLength, b.view = new Uint8Array(a.buffer));
    } else {
      if (a instanceof ArrayBuffer) {
        b = new f(0, d, g), 0 < a.byteLength && (b.buffer = a, b.offset = 0, b.limit = a.byteLength, b.view = 0 < a.byteLength ? new Uint8Array(a) : null);
      } else {
        if ("[object Array]" === Object.prototype.toString.call(a)) {
          for (b = new f(a.length, d, g), b.limit = a.length, d = 0; d < a.length; ++d) {
            b.view[d] = a[d];
          }
        } else {
          throw TypeError("Illegal buffer");
        }
      }
    }
    return b;
  };
  e.writeBitSet = function(a, b) {
    var c = "undefined" === typeof b;
    c && (b = this.offset);
    if (!this.noAssert) {
      if (!(a instanceof Array)) {
        throw TypeError("Illegal BitSet: Not an array");
      }
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+0) <= " + this.buffer.byteLength);
      }
    }
    var e = b, h = a.length, f = h >> 3, d = 0;
    for (b += this.writeVarint32(h, b); f--;) {
      var g = !!a[d++] & 1 | (!!a[d++] & 1) << 1 | (!!a[d++] & 1) << 2 | (!!a[d++] & 1) << 3 | (!!a[d++] & 1) << 4 | (!!a[d++] & 1) << 5 | (!!a[d++] & 1) << 6 | (!!a[d++] & 1) << 7;
      this.writeByte(g, b++);
    }
    if (d < h) {
      for (g = f = 0; d < h;) {
        g |= (!!a[d++] & 1) << f++;
      }
      this.writeByte(g, b++);
    }
    return c ? (this.offset = b, this) : b - e;
  };
  e.readBitSet = function(a) {
    var c = "undefined" === typeof a;
    c && (a = this.offset);
    var b = this.readVarint32(a), e = b.value, f = e >> 3, d = 0, g = [];
    for (a += b.length; f--;) {
      b = this.readByte(a++), g[d++] = !!(b & 1), g[d++] = !!(b & 2), g[d++] = !!(b & 4), g[d++] = !!(b & 8), g[d++] = !!(b & 16), g[d++] = !!(b & 32), g[d++] = !!(b & 64), g[d++] = !!(b & 128);
    }
    if (d < e) {
      for (f = 0, b = this.readByte(a++); d < e;) {
        g[d++] = !!(b >> f++ & 1);
      }
    }
    c && (this.offset = a);
    return g;
  };
  e.readBytes = function(a, b) {
    var c = "undefined" === typeof b;
    c && (b = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + a > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+" + a + ") <= " + this.buffer.byteLength);
      }
    }
    b = this.slice(b, b + a);
    c && (this.offset += a);
    return b;
  };
  e.writeBytes = e.append;
  e.writeInt8 = function(a, b) {
    var c = "undefined" === typeof b;
    c && (b = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal value: " + a + " (not an integer)");
      }
      a |= 0;
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+0) <= " + this.buffer.byteLength);
      }
    }
    b += 1;
    var e = this.buffer.byteLength;
    b > e && this.resize((e *= 2) > b ? e : b);
    this.view[b - 1] = a;
    c && (this.offset += 1);
    return this;
  };
  e.writeByte = e.writeInt8;
  e.readInt8 = function(a) {
    var c = "undefined" === typeof a;
    c && (a = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal offset: " + a + " (not an integer)");
      }
      a >>>= 0;
      if (0 > a || a + 1 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + a + " (+1) <= " + this.buffer.byteLength);
      }
    }
    a = this.view[a];
    128 === (a & 128) && (a = -(255 - a + 1));
    c && (this.offset += 1);
    return a;
  };
  e.readByte = e.readInt8;
  e.writeUint8 = function(a, b) {
    var c = "undefined" === typeof b;
    c && (b = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal value: " + a + " (not an integer)");
      }
      a >>>= 0;
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+0) <= " + this.buffer.byteLength);
      }
    }
    b += 1;
    var e = this.buffer.byteLength;
    b > e && this.resize((e *= 2) > b ? e : b);
    this.view[b - 1] = a;
    c && (this.offset += 1);
    return this;
  };
  e.writeUInt8 = e.writeUint8;
  e.readUint8 = function(a) {
    var c = "undefined" === typeof a;
    c && (a = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal offset: " + a + " (not an integer)");
      }
      a >>>= 0;
      if (0 > a || a + 1 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + a + " (+1) <= " + this.buffer.byteLength);
      }
    }
    a = this.view[a];
    c && (this.offset += 1);
    return a;
  };
  e.readUInt8 = e.readUint8;
  e.writeInt16 = function(a, b) {
    var c = "undefined" === typeof b;
    c && (b = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal value: " + a + " (not an integer)");
      }
      a |= 0;
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+0) <= " + this.buffer.byteLength);
      }
    }
    b += 2;
    var e = this.buffer.byteLength;
    b > e && this.resize((e *= 2) > b ? e : b);
    b -= 2;
    this.littleEndian ? (this.view[b + 1] = (a & 65280) >>> 8, this.view[b] = a & 255) : (this.view[b] = (a & 65280) >>> 8, this.view[b + 1] = a & 255);
    c && (this.offset += 2);
    return this;
  };
  e.writeShort = e.writeInt16;
  e.readInt16 = function(a) {
    var c = "undefined" === typeof a;
    c && (a = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal offset: " + a + " (not an integer)");
      }
      a >>>= 0;
      if (0 > a || a + 2 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + a + " (+2) <= " + this.buffer.byteLength);
      }
    }
    var b = 0;
    this.littleEndian ? (b = this.view[a], b |= this.view[a + 1] << 8) : (b = this.view[a] << 8, b |= this.view[a + 1]);
    32768 === (b & 32768) && (b = -(65535 - b + 1));
    c && (this.offset += 2);
    return b;
  };
  e.readShort = e.readInt16;
  e.writeUint16 = function(a, b) {
    var c = "undefined" === typeof b;
    c && (b = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal value: " + a + " (not an integer)");
      }
      a >>>= 0;
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+0) <= " + this.buffer.byteLength);
      }
    }
    b += 2;
    var e = this.buffer.byteLength;
    b > e && this.resize((e *= 2) > b ? e : b);
    b -= 2;
    this.littleEndian ? (this.view[b + 1] = (a & 65280) >>> 8, this.view[b] = a & 255) : (this.view[b] = (a & 65280) >>> 8, this.view[b + 1] = a & 255);
    c && (this.offset += 2);
    return this;
  };
  e.writeUInt16 = e.writeUint16;
  e.readUint16 = function(a) {
    var c = "undefined" === typeof a;
    c && (a = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal offset: " + a + " (not an integer)");
      }
      a >>>= 0;
      if (0 > a || a + 2 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + a + " (+2) <= " + this.buffer.byteLength);
      }
    }
    var b = 0;
    this.littleEndian ? (b = this.view[a], b |= this.view[a + 1] << 8) : (b = this.view[a] << 8, b |= this.view[a + 1]);
    c && (this.offset += 2);
    return b;
  };
  e.readUInt16 = e.readUint16;
  e.writeInt32 = function(a, b) {
    var c = "undefined" === typeof b;
    c && (b = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal value: " + a + " (not an integer)");
      }
      a |= 0;
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+0) <= " + this.buffer.byteLength);
      }
    }
    b += 4;
    var e = this.buffer.byteLength;
    b > e && this.resize((e *= 2) > b ? e : b);
    b -= 4;
    this.littleEndian ? (this.view[b + 3] = a >>> 24 & 255, this.view[b + 2] = a >>> 16 & 255, this.view[b + 1] = a >>> 8 & 255, this.view[b] = a & 255) : (this.view[b] = a >>> 24 & 255, this.view[b + 1] = a >>> 16 & 255, this.view[b + 2] = a >>> 8 & 255, this.view[b + 3] = a & 255);
    c && (this.offset += 4);
    return this;
  };
  e.writeInt = e.writeInt32;
  e.readInt32 = function(a) {
    var c = "undefined" === typeof a;
    c && (a = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal offset: " + a + " (not an integer)");
      }
      a >>>= 0;
      if (0 > a || a + 4 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + a + " (+4) <= " + this.buffer.byteLength);
      }
    }
    var b = 0;
    this.littleEndian ? (b = this.view[a + 2] << 16, b |= this.view[a + 1] << 8, b |= this.view[a], b += this.view[a + 3] << 24 >>> 0) : (b = this.view[a + 1] << 16, b |= this.view[a + 2] << 8, b |= this.view[a + 3], b += this.view[a] << 24 >>> 0);
    c && (this.offset += 4);
    return b | 0;
  };
  e.readInt = e.readInt32;
  e.writeUint32 = function(a, b) {
    var c = "undefined" === typeof b;
    c && (b = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal value: " + a + " (not an integer)");
      }
      a >>>= 0;
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+0) <= " + this.buffer.byteLength);
      }
    }
    b += 4;
    var e = this.buffer.byteLength;
    b > e && this.resize((e *= 2) > b ? e : b);
    b -= 4;
    this.littleEndian ? (this.view[b + 3] = a >>> 24 & 255, this.view[b + 2] = a >>> 16 & 255, this.view[b + 1] = a >>> 8 & 255, this.view[b] = a & 255) : (this.view[b] = a >>> 24 & 255, this.view[b + 1] = a >>> 16 & 255, this.view[b + 2] = a >>> 8 & 255, this.view[b + 3] = a & 255);
    c && (this.offset += 4);
    return this;
  };
  e.writeUInt32 = e.writeUint32;
  e.readUint32 = function(a) {
    var c = "undefined" === typeof a;
    c && (a = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal offset: " + a + " (not an integer)");
      }
      a >>>= 0;
      if (0 > a || a + 4 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + a + " (+4) <= " + this.buffer.byteLength);
      }
    }
    var b = 0;
    this.littleEndian ? (b = this.view[a + 2] << 16, b |= this.view[a + 1] << 8, b |= this.view[a], b += this.view[a + 3] << 24 >>> 0) : (b = this.view[a + 1] << 16, b |= this.view[a + 2] << 8, b |= this.view[a + 3], b += this.view[a] << 24 >>> 0);
    c && (this.offset += 4);
    return b;
  };
  e.readUInt32 = e.readUint32;
  a && (e.writeInt64 = function(c, b) {
    var e = "undefined" === typeof b;
    e && (b = this.offset);
    if (!this.noAssert) {
      if ("number" === typeof c) {
        c = a.fromNumber(c);
      } else {
        if ("string" === typeof c) {
          c = a.fromString(c);
        } else {
          if (!(c && c instanceof a)) {
            throw TypeError("Illegal value: " + c + " (not an integer or Long)");
          }
        }
      }
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+0) <= " + this.buffer.byteLength);
      }
    }
    "number" === typeof c ? c = a.fromNumber(c) : "string" === typeof c && (c = a.fromString(c));
    b += 8;
    var h = this.buffer.byteLength;
    b > h && this.resize((h *= 2) > b ? h : b);
    b -= 8;
    h = c.low;
    c = c.high;
    this.littleEndian ? (this.view[b + 3] = h >>> 24 & 255, this.view[b + 2] = h >>> 16 & 255, this.view[b + 1] = h >>> 8 & 255, this.view[b] = h & 255, b += 4, this.view[b + 3] = c >>> 24 & 255, this.view[b + 2] = c >>> 16 & 255, this.view[b + 1] = c >>> 8 & 255, this.view[b] = c & 255) : (this.view[b] = c >>> 24 & 255, this.view[b + 1] = c >>> 16 & 255, this.view[b + 2] = c >>> 8 & 255, this.view[b + 3] = c & 255, b += 4, this.view[b] = h >>> 24 & 255, this.view[b + 1] = h >>> 16 & 255, this.view[b + 
    2] = h >>> 8 & 255, this.view[b + 3] = h & 255);
    e && (this.offset += 8);
    return this;
  }, e.writeLong = e.writeInt64, e.readInt64 = function(c) {
    var b = "undefined" === typeof c;
    b && (c = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof c || 0 !== c % 1) {
        throw TypeError("Illegal offset: " + c + " (not an integer)");
      }
      c >>>= 0;
      if (0 > c || c + 8 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + c + " (+8) <= " + this.buffer.byteLength);
      }
    }
    var e = 0, f = 0;
    this.littleEndian ? (e = this.view[c + 2] << 16, e |= this.view[c + 1] << 8, e |= this.view[c], e += this.view[c + 3] << 24 >>> 0, c += 4, f = this.view[c + 2] << 16, f |= this.view[c + 1] << 8, f |= this.view[c], f += this.view[c + 3] << 24 >>> 0) : (f = this.view[c + 1] << 16, f |= this.view[c + 2] << 8, f |= this.view[c + 3], f += this.view[c] << 24 >>> 0, c += 4, e = this.view[c + 1] << 16, e |= this.view[c + 2] << 8, e |= this.view[c + 3], e += this.view[c] << 24 >>> 0);
    c = new a(e, f, !1);
    b && (this.offset += 8);
    return c;
  }, e.readLong = e.readInt64, e.writeUint64 = function(c, b) {
    var e = "undefined" === typeof b;
    e && (b = this.offset);
    if (!this.noAssert) {
      if ("number" === typeof c) {
        c = a.fromNumber(c);
      } else {
        if ("string" === typeof c) {
          c = a.fromString(c);
        } else {
          if (!(c && c instanceof a)) {
            throw TypeError("Illegal value: " + c + " (not an integer or Long)");
          }
        }
      }
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+0) <= " + this.buffer.byteLength);
      }
    }
    "number" === typeof c ? c = a.fromNumber(c) : "string" === typeof c && (c = a.fromString(c));
    b += 8;
    var h = this.buffer.byteLength;
    b > h && this.resize((h *= 2) > b ? h : b);
    b -= 8;
    h = c.low;
    c = c.high;
    this.littleEndian ? (this.view[b + 3] = h >>> 24 & 255, this.view[b + 2] = h >>> 16 & 255, this.view[b + 1] = h >>> 8 & 255, this.view[b] = h & 255, b += 4, this.view[b + 3] = c >>> 24 & 255, this.view[b + 2] = c >>> 16 & 255, this.view[b + 1] = c >>> 8 & 255, this.view[b] = c & 255) : (this.view[b] = c >>> 24 & 255, this.view[b + 1] = c >>> 16 & 255, this.view[b + 2] = c >>> 8 & 255, this.view[b + 3] = c & 255, b += 4, this.view[b] = h >>> 24 & 255, this.view[b + 1] = h >>> 16 & 255, this.view[b + 
    2] = h >>> 8 & 255, this.view[b + 3] = h & 255);
    e && (this.offset += 8);
    return this;
  }, e.writeUInt64 = e.writeUint64, e.readUint64 = function(c) {
    var b = "undefined" === typeof c;
    b && (c = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof c || 0 !== c % 1) {
        throw TypeError("Illegal offset: " + c + " (not an integer)");
      }
      c >>>= 0;
      if (0 > c || c + 8 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + c + " (+8) <= " + this.buffer.byteLength);
      }
    }
    var e = 0, f = 0;
    this.littleEndian ? (e = this.view[c + 2] << 16, e |= this.view[c + 1] << 8, e |= this.view[c], e += this.view[c + 3] << 24 >>> 0, c += 4, f = this.view[c + 2] << 16, f |= this.view[c + 1] << 8, f |= this.view[c], f += this.view[c + 3] << 24 >>> 0) : (f = this.view[c + 1] << 16, f |= this.view[c + 2] << 8, f |= this.view[c + 3], f += this.view[c] << 24 >>> 0, c += 4, e = this.view[c + 1] << 16, e |= this.view[c + 2] << 8, e |= this.view[c + 3], e += this.view[c] << 24 >>> 0);
    c = new a(e, f, !0);
    b && (this.offset += 8);
    return c;
  }, e.readUInt64 = e.readUint64);
  e.writeFloat32 = function(a, b) {
    var c = "undefined" === typeof b;
    c && (b = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a) {
        throw TypeError("Illegal value: " + a + " (not a number)");
      }
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+0) <= " + this.buffer.byteLength);
      }
    }
    b += 4;
    var e = this.buffer.byteLength;
    b > e && this.resize((e *= 2) > b ? e : b);
    g(this.view, a, b - 4, this.littleEndian, 23, 4);
    c && (this.offset += 4);
    return this;
  };
  e.writeFloat = e.writeFloat32;
  e.readFloat32 = function(a) {
    var c = "undefined" === typeof a;
    c && (a = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal offset: " + a + " (not an integer)");
      }
      a >>>= 0;
      if (0 > a || a + 4 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + a + " (+4) <= " + this.buffer.byteLength);
      }
    }
    a = b(this.view, a, this.littleEndian, 23, 4);
    c && (this.offset += 4);
    return a;
  };
  e.readFloat = e.readFloat32;
  e.writeFloat64 = function(a, b) {
    var c = "undefined" === typeof b;
    c && (b = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a) {
        throw TypeError("Illegal value: " + a + " (not a number)");
      }
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+0) <= " + this.buffer.byteLength);
      }
    }
    b += 8;
    var e = this.buffer.byteLength;
    b > e && this.resize((e *= 2) > b ? e : b);
    g(this.view, a, b - 8, this.littleEndian, 52, 8);
    c && (this.offset += 8);
    return this;
  };
  e.writeDouble = e.writeFloat64;
  e.readFloat64 = function(a) {
    var c = "undefined" === typeof a;
    c && (a = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal offset: " + a + " (not an integer)");
      }
      a >>>= 0;
      if (0 > a || a + 8 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + a + " (+8) <= " + this.buffer.byteLength);
      }
    }
    a = b(this.view, a, this.littleEndian, 52, 8);
    c && (this.offset += 8);
    return a;
  };
  e.readDouble = e.readFloat64;
  f.MAX_VARINT32_BYTES = 5;
  f.calculateVarint32 = function(a) {
    a >>>= 0;
    return 128 > a ? 1 : 16384 > a ? 2 : 2097152 > a ? 3 : 268435456 > a ? 4 : 5;
  };
  f.zigZagEncode32 = function(a) {
    return ((a |= 0) << 1 ^ a >> 31) >>> 0;
  };
  f.zigZagDecode32 = function(a) {
    return a >>> 1 ^ -(a & 1) | 0;
  };
  e.writeVarint32 = function(a, b) {
    var c = "undefined" === typeof b;
    c && (b = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal value: " + a + " (not an integer)");
      }
      a |= 0;
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+0) <= " + this.buffer.byteLength);
      }
    }
    var e = f.calculateVarint32(a);
    b += e;
    var h = this.buffer.byteLength;
    b > h && this.resize((h *= 2) > b ? h : b);
    b -= e;
    for (a >>>= 0; 128 <= a;) {
      h = a & 127 | 128, this.view[b++] = h, a >>>= 7;
    }
    this.view[b++] = a;
    return c ? (this.offset = b, this) : e;
  };
  e.writeVarint32ZigZag = function(a, b) {
    return this.writeVarint32(f.zigZagEncode32(a), b);
  };
  e.readVarint32 = function(a) {
    var c = "undefined" === typeof a;
    c && (a = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal offset: " + a + " (not an integer)");
      }
      a >>>= 0;
      if (0 > a || a + 1 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + a + " (+1) <= " + this.buffer.byteLength);
      }
    }
    var b = 0, e = 0;
    do {
      if (!this.noAssert && a > this.limit) {
        throw a = Error("Truncated"), a.truncated = !0, a;
      }
      var f = this.view[a++];
      5 > b && (e |= (f & 127) << 7 * b);
      ++b;
    } while (0 !== (f & 128));
    e |= 0;
    return c ? (this.offset = a, e) : {value:e, length:b};
  };
  e.readVarint32ZigZag = function(a) {
    a = this.readVarint32(a);
    "object" === typeof a ? a.value = f.zigZagDecode32(a.value) : a = f.zigZagDecode32(a);
    return a;
  };
  a && (f.MAX_VARINT64_BYTES = 10, f.calculateVarint64 = function(c) {
    "number" === typeof c ? c = a.fromNumber(c) : "string" === typeof c && (c = a.fromString(c));
    var b = c.toInt() >>> 0, e = c.shiftRightUnsigned(28).toInt() >>> 0;
    c = c.shiftRightUnsigned(56).toInt() >>> 0;
    return 0 == c ? 0 == e ? 16384 > b ? 128 > b ? 1 : 2 : 2097152 > b ? 3 : 4 : 16384 > e ? 128 > e ? 5 : 6 : 2097152 > e ? 7 : 8 : 128 > c ? 9 : 10;
  }, f.zigZagEncode64 = function(c) {
    "number" === typeof c ? c = a.fromNumber(c, !1) : "string" === typeof c ? c = a.fromString(c, !1) : !1 !== c.unsigned && (c = c.toSigned());
    return c.shiftLeft(1).xor(c.shiftRight(63)).toUnsigned();
  }, f.zigZagDecode64 = function(c) {
    "number" === typeof c ? c = a.fromNumber(c, !1) : "string" === typeof c ? c = a.fromString(c, !1) : !1 !== c.unsigned && (c = c.toSigned());
    return c.shiftRightUnsigned(1).xor(c.and(a.ONE).toSigned().negate()).toSigned();
  }, e.writeVarint64 = function(c, b) {
    var e = "undefined" === typeof b;
    e && (b = this.offset);
    if (!this.noAssert) {
      if ("number" === typeof c) {
        c = a.fromNumber(c);
      } else {
        if ("string" === typeof c) {
          c = a.fromString(c);
        } else {
          if (!(c && c instanceof a)) {
            throw TypeError("Illegal value: " + c + " (not an integer or Long)");
          }
        }
      }
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+0) <= " + this.buffer.byteLength);
      }
    }
    "number" === typeof c ? c = a.fromNumber(c, !1) : "string" === typeof c ? c = a.fromString(c, !1) : !1 !== c.unsigned && (c = c.toSigned());
    var h = f.calculateVarint64(c), d = c.toInt() >>> 0, g = c.shiftRightUnsigned(28).toInt() >>> 0;
    c = c.shiftRightUnsigned(56).toInt() >>> 0;
    b += h;
    var m = this.buffer.byteLength;
    b > m && this.resize((m *= 2) > b ? m : b);
    b -= h;
    switch(h) {
      case 10:
        this.view[b + 9] = c >>> 7 & 1;
      case 9:
        this.view[b + 8] = 9 !== h ? c | 128 : c & 127;
      case 8:
        this.view[b + 7] = 8 !== h ? g >>> 21 | 128 : g >>> 21 & 127;
      case 7:
        this.view[b + 6] = 7 !== h ? g >>> 14 | 128 : g >>> 14 & 127;
      case 6:
        this.view[b + 5] = 6 !== h ? g >>> 7 | 128 : g >>> 7 & 127;
      case 5:
        this.view[b + 4] = 5 !== h ? g | 128 : g & 127;
      case 4:
        this.view[b + 3] = 4 !== h ? d >>> 21 | 128 : d >>> 21 & 127;
      case 3:
        this.view[b + 2] = 3 !== h ? d >>> 14 | 128 : d >>> 14 & 127;
      case 2:
        this.view[b + 1] = 2 !== h ? d >>> 7 | 128 : d >>> 7 & 127;
      case 1:
        this.view[b] = 1 !== h ? d | 128 : d & 127;
    }
    return e ? (this.offset += h, this) : h;
  }, e.writeVarint64ZigZag = function(a, b) {
    return this.writeVarint64(f.zigZagEncode64(a), b);
  }, e.readVarint64 = function(c) {
    var b = "undefined" === typeof c;
    b && (c = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof c || 0 !== c % 1) {
        throw TypeError("Illegal offset: " + c + " (not an integer)");
      }
      c >>>= 0;
      if (0 > c || c + 1 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + c + " (+1) <= " + this.buffer.byteLength);
      }
    }
    var e = c, f = 0, d = 0;
    var g = this.view[c++];
    var m = g & 127;
    if (g & 128 && (g = this.view[c++], m |= (g & 127) << 7, g & 128 || this.noAssert && "undefined" === typeof g) && (g = this.view[c++], m |= (g & 127) << 14, g & 128 || this.noAssert && "undefined" === typeof g) && (g = this.view[c++], m |= (g & 127) << 21, g & 128 || this.noAssert && "undefined" === typeof g) && (g = this.view[c++], f = g & 127, g & 128 || this.noAssert && "undefined" === typeof g) && (g = this.view[c++], f |= (g & 127) << 7, g & 128 || this.noAssert && "undefined" === typeof g) && 
    (g = this.view[c++], f |= (g & 127) << 14, g & 128 || this.noAssert && "undefined" === typeof g) && (g = this.view[c++], f |= (g & 127) << 21, g & 128 || this.noAssert && "undefined" === typeof g) && (g = this.view[c++], d = g & 127, g & 128 || this.noAssert && "undefined" === typeof g) && (g = this.view[c++], d |= (g & 127) << 7, g & 128 || this.noAssert && "undefined" === typeof g)) {
      throw Error("Buffer overrun");
    }
    m = a.fromBits(m | f << 28, f >>> 4 | d << 24, !1);
    return b ? (this.offset = c, m) : {value:m, length:c - e};
  }, e.readVarint64ZigZag = function(c) {
    (c = this.readVarint64(c)) && c.value instanceof a ? c.value = f.zigZagDecode64(c.value) : c = f.zigZagDecode64(c);
    return c;
  });
  e.writeCString = function(a, b) {
    var c = "undefined" === typeof b;
    c && (b = this.offset);
    var e, f = a.length;
    if (!this.noAssert) {
      if ("string" !== typeof a) {
        throw TypeError("Illegal str: Not a string");
      }
      for (e = 0; e < f; ++e) {
        if (0 === a.charCodeAt(e)) {
          throw RangeError("Illegal str: Contains NULL-characters");
        }
      }
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+0) <= " + this.buffer.byteLength);
      }
    }
    f = n.calculateUTF16asUTF8(d(a))[1];
    b += f + 1;
    e = this.buffer.byteLength;
    b > e && this.resize((e *= 2) > b ? e : b);
    b -= f + 1;
    n.encodeUTF16toUTF8(d(a), function(a) {
      this.view[b++] = a;
    }.bind(this));
    this.view[b++] = 0;
    return c ? (this.offset = b, this) : f;
  };
  e.readCString = function(a) {
    var c = "undefined" === typeof a;
    c && (a = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal offset: " + a + " (not an integer)");
      }
      a >>>= 0;
      if (0 > a || a + 1 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + a + " (+1) <= " + this.buffer.byteLength);
      }
    }
    var b = a, e, f = -1;
    n.decodeUTF8toUTF16(function() {
      if (0 === f) {
        return null;
      }
      if (a >= this.limit) {
        throw RangeError("Illegal range: Truncated data, " + a + " < " + this.limit);
      }
      f = this.view[a++];
      return 0 === f ? null : f;
    }.bind(this), e = k(), !0);
    return c ? (this.offset = a, e()) : {string:e(), length:a - b};
  };
  e.writeIString = function(a, b) {
    var c = "undefined" === typeof b;
    c && (b = this.offset);
    if (!this.noAssert) {
      if ("string" !== typeof a) {
        throw TypeError("Illegal str: Not a string");
      }
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+0) <= " + this.buffer.byteLength);
      }
    }
    var e = b;
    var f = n.calculateUTF16asUTF8(d(a), this.noAssert)[1];
    b += 4 + f;
    var h = this.buffer.byteLength;
    b > h && this.resize((h *= 2) > b ? h : b);
    b -= 4 + f;
    this.littleEndian ? (this.view[b + 3] = f >>> 24 & 255, this.view[b + 2] = f >>> 16 & 255, this.view[b + 1] = f >>> 8 & 255, this.view[b] = f & 255) : (this.view[b] = f >>> 24 & 255, this.view[b + 1] = f >>> 16 & 255, this.view[b + 2] = f >>> 8 & 255, this.view[b + 3] = f & 255);
    b += 4;
    n.encodeUTF16toUTF8(d(a), function(a) {
      this.view[b++] = a;
    }.bind(this));
    if (b !== e + 4 + f) {
      throw RangeError("Illegal range: Truncated data, " + b + " == " + (b + 4 + f));
    }
    return c ? (this.offset = b, this) : b - e;
  };
  e.readIString = function(a) {
    var c = "undefined" === typeof a;
    c && (a = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal offset: " + a + " (not an integer)");
      }
      a >>>= 0;
      if (0 > a || a + 4 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + a + " (+4) <= " + this.buffer.byteLength);
      }
    }
    var b = a, e = this.readUint32(a);
    e = this.readUTF8String(e, f.METRICS_BYTES, a += 4);
    a += e.length;
    return c ? (this.offset = a, e.string) : {string:e.string, length:a - b};
  };
  f.METRICS_CHARS = "c";
  f.METRICS_BYTES = "b";
  e.writeUTF8String = function(a, b) {
    var c = "undefined" === typeof b;
    c && (b = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+0) <= " + this.buffer.byteLength);
      }
    }
    var e = b;
    var f = n.calculateUTF16asUTF8(d(a))[1];
    b += f;
    var h = this.buffer.byteLength;
    b > h && this.resize((h *= 2) > b ? h : b);
    b -= f;
    n.encodeUTF16toUTF8(d(a), function(a) {
      this.view[b++] = a;
    }.bind(this));
    return c ? (this.offset = b, this) : b - e;
  };
  e.writeString = e.writeUTF8String;
  f.calculateUTF8Chars = function(a) {
    return n.calculateUTF16asUTF8(d(a))[0];
  };
  f.calculateUTF8Bytes = function(a) {
    return n.calculateUTF16asUTF8(d(a))[1];
  };
  f.calculateString = f.calculateUTF8Bytes;
  e.readUTF8String = function(a, b, e) {
    "number" === typeof b && (e = b, b = void 0);
    var c = "undefined" === typeof e;
    c && (e = this.offset);
    "undefined" === typeof b && (b = f.METRICS_CHARS);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal length: " + a + " (not an integer)");
      }
      a |= 0;
      if ("number" !== typeof e || 0 !== e % 1) {
        throw TypeError("Illegal offset: " + e + " (not an integer)");
      }
      e >>>= 0;
      if (0 > e || e + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + e + " (+0) <= " + this.buffer.byteLength);
      }
    }
    var h = 0, d = e;
    if (b === f.METRICS_CHARS) {
      var g = k();
      n.decodeUTF8(function() {
        return h < a && e < this.limit ? this.view[e++] : null;
      }.bind(this), function(a) {
        ++h;
        n.UTF8toUTF16(a, g);
      });
      if (h !== a) {
        throw RangeError("Illegal range: Truncated data, " + h + " == " + a);
      }
      return c ? (this.offset = e, g()) : {string:g(), length:e - d};
    }
    if (b === f.METRICS_BYTES) {
      if (!this.noAssert) {
        if ("number" !== typeof e || 0 !== e % 1) {
          throw TypeError("Illegal offset: " + e + " (not an integer)");
        }
        e >>>= 0;
        if (0 > e || e + a > this.buffer.byteLength) {
          throw RangeError("Illegal offset: 0 <= " + e + " (+" + a + ") <= " + this.buffer.byteLength);
        }
      }
      var m = e + a;
      n.decodeUTF8toUTF16(function() {
        return e < m ? this.view[e++] : null;
      }.bind(this), g = k(), this.noAssert);
      if (e !== m) {
        throw RangeError("Illegal range: Truncated data, " + e + " == " + m);
      }
      return c ? (this.offset = e, g()) : {string:g(), length:e - d};
    }
    throw TypeError("Unsupported metrics: " + b);
  };
  e.readString = e.readUTF8String;
  e.writeVString = function(a, b) {
    var c = "undefined" === typeof b;
    c && (b = this.offset);
    if (!this.noAssert) {
      if ("string" !== typeof a) {
        throw TypeError("Illegal str: Not a string");
      }
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+0) <= " + this.buffer.byteLength);
      }
    }
    var e = b;
    var h = n.calculateUTF16asUTF8(d(a), this.noAssert)[1];
    var g = f.calculateVarint32(h);
    b += g + h;
    var m = this.buffer.byteLength;
    b > m && this.resize((m *= 2) > b ? m : b);
    b -= g + h;
    b += this.writeVarint32(h, b);
    n.encodeUTF16toUTF8(d(a), function(a) {
      this.view[b++] = a;
    }.bind(this));
    if (b !== e + h + g) {
      throw RangeError("Illegal range: Truncated data, " + b + " == " + (b + h + g));
    }
    return c ? (this.offset = b, this) : b - e;
  };
  e.readVString = function(a) {
    var c = "undefined" === typeof a;
    c && (a = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal offset: " + a + " (not an integer)");
      }
      a >>>= 0;
      if (0 > a || a + 1 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + a + " (+1) <= " + this.buffer.byteLength);
      }
    }
    var b = a, e = this.readVarint32(a);
    e = this.readUTF8String(e.value, f.METRICS_BYTES, a += e.length);
    a += e.length;
    return c ? (this.offset = a, e.string) : {string:e.string, length:a - b};
  };
  e.append = function(a, b, e) {
    if ("number" === typeof b || "string" !== typeof b) {
      e = b, b = void 0;
    }
    var c = "undefined" === typeof e;
    c && (e = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof e || 0 !== e % 1) {
        throw TypeError("Illegal offset: " + e + " (not an integer)");
      }
      e >>>= 0;
      if (0 > e || e + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + e + " (+0) <= " + this.buffer.byteLength);
      }
    }
    a instanceof f || (a = f.wrap(a, b));
    b = a.limit - a.offset;
    if (0 >= b) {
      return this;
    }
    e += b;
    var h = this.buffer.byteLength;
    e > h && this.resize((h *= 2) > e ? h : e);
    e -= b;
    this.view.set(a.view.subarray(a.offset, a.limit), e);
    a.offset += b;
    c && (this.offset += b);
    return this;
  };
  e.appendTo = function(a, b) {
    a.append(this, b);
    return this;
  };
  e.assert = function(a) {
    this.noAssert = !a;
    return this;
  };
  e.capacity = function() {
    return this.buffer.byteLength;
  };
  e.clear = function() {
    this.offset = 0;
    this.limit = this.buffer.byteLength;
    this.markedOffset = -1;
    return this;
  };
  e.clone = function(a) {
    var c = new f(0, this.littleEndian, this.noAssert);
    a ? (c.buffer = new ArrayBuffer(this.buffer.byteLength), c.view = new Uint8Array(c.buffer)) : (c.buffer = this.buffer, c.view = this.view);
    c.offset = this.offset;
    c.markedOffset = this.markedOffset;
    c.limit = this.limit;
    return c;
  };
  e.compact = function(a, b) {
    "undefined" === typeof a && (a = this.offset);
    "undefined" === typeof b && (b = this.limit);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal begin: Not an integer");
      }
      a >>>= 0;
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal end: Not an integer");
      }
      b >>>= 0;
      if (0 > a || a > b || b > this.buffer.byteLength) {
        throw RangeError("Illegal range: 0 <= " + a + " <= " + b + " <= " + this.buffer.byteLength);
      }
    }
    if (0 === a && b === this.buffer.byteLength) {
      return this;
    }
    var c = b - a;
    if (0 === c) {
      return this.buffer = r, this.view = null, 0 <= this.markedOffset && (this.markedOffset -= a), this.limit = this.offset = 0, this;
    }
    var e = new ArrayBuffer(c), f = new Uint8Array(e);
    f.set(this.view.subarray(a, b));
    this.buffer = e;
    this.view = f;
    0 <= this.markedOffset && (this.markedOffset -= a);
    this.offset = 0;
    this.limit = c;
    return this;
  };
  e.copy = function(a, b) {
    "undefined" === typeof a && (a = this.offset);
    "undefined" === typeof b && (b = this.limit);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal begin: Not an integer");
      }
      a >>>= 0;
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal end: Not an integer");
      }
      b >>>= 0;
      if (0 > a || a > b || b > this.buffer.byteLength) {
        throw RangeError("Illegal range: 0 <= " + a + " <= " + b + " <= " + this.buffer.byteLength);
      }
    }
    if (a === b) {
      return new f(0, this.littleEndian, this.noAssert);
    }
    var c = b - a, e = new f(c, this.littleEndian, this.noAssert);
    e.offset = 0;
    e.limit = c;
    0 <= e.markedOffset && (e.markedOffset -= a);
    this.copyTo(e, 0, a, b);
    return e;
  };
  e.copyTo = function(a, b, e, d) {
    var c, h;
    if (!this.noAssert && !f.isByteBuffer(a)) {
      throw TypeError("Illegal target: Not a ByteBuffer");
    }
    b = (h = "undefined" === typeof b) ? a.offset : b | 0;
    e = (c = "undefined" === typeof e) ? this.offset : e | 0;
    d = "undefined" === typeof d ? this.limit : d | 0;
    if (0 > b || b > a.buffer.byteLength) {
      throw RangeError("Illegal target range: 0 <= " + b + " <= " + a.buffer.byteLength);
    }
    if (0 > e || d > this.buffer.byteLength) {
      throw RangeError("Illegal source range: 0 <= " + e + " <= " + this.buffer.byteLength);
    }
    var g = d - e;
    if (0 === g) {
      return a;
    }
    a.ensureCapacity(b + g);
    a.view.set(this.view.subarray(e, d), b);
    c && (this.offset += g);
    h && (a.offset += g);
    return this;
  };
  e.ensureCapacity = function(a) {
    var c = this.buffer.byteLength;
    return c < a ? this.resize((c *= 2) > a ? c : a) : this;
  };
  e.fill = function(a, b, e) {
    var c = "undefined" === typeof b;
    c && (b = this.offset);
    "string" === typeof a && 0 < a.length && (a = a.charCodeAt(0));
    "undefined" === typeof b && (b = this.offset);
    "undefined" === typeof e && (e = this.limit);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal value: " + a + " (not an integer)");
      }
      a |= 0;
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal begin: Not an integer");
      }
      b >>>= 0;
      if ("number" !== typeof e || 0 !== e % 1) {
        throw TypeError("Illegal end: Not an integer");
      }
      e >>>= 0;
      if (0 > b || b > e || e > this.buffer.byteLength) {
        throw RangeError("Illegal range: 0 <= " + b + " <= " + e + " <= " + this.buffer.byteLength);
      }
    }
    if (b >= e) {
      return this;
    }
    for (; b < e;) {
      this.view[b++] = a;
    }
    c && (this.offset = b);
    return this;
  };
  e.flip = function() {
    this.limit = this.offset;
    this.offset = 0;
    return this;
  };
  e.mark = function(a) {
    a = "undefined" === typeof a ? this.offset : a;
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal offset: " + a + " (not an integer)");
      }
      a >>>= 0;
      if (0 > a || a + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + a + " (+0) <= " + this.buffer.byteLength);
      }
    }
    this.markedOffset = a;
    return this;
  };
  e.order = function(a) {
    if (!this.noAssert && "boolean" !== typeof a) {
      throw TypeError("Illegal littleEndian: Not a boolean");
    }
    this.littleEndian = !!a;
    return this;
  };
  e.LE = function(a) {
    this.littleEndian = "undefined" !== typeof a ? !!a : !0;
    return this;
  };
  e.BE = function(a) {
    this.littleEndian = "undefined" !== typeof a ? !a : !1;
    return this;
  };
  e.prepend = function(a, b, e) {
    if ("number" === typeof b || "string" !== typeof b) {
      e = b, b = void 0;
    }
    var c = "undefined" === typeof e;
    c && (e = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof e || 0 !== e % 1) {
        throw TypeError("Illegal offset: " + e + " (not an integer)");
      }
      e >>>= 0;
      if (0 > e || e + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + e + " (+0) <= " + this.buffer.byteLength);
      }
    }
    a instanceof f || (a = f.wrap(a, b));
    b = a.limit - a.offset;
    if (0 >= b) {
      return this;
    }
    var h = b - e;
    if (0 < h) {
      var d = new ArrayBuffer(this.buffer.byteLength + h), g = new Uint8Array(d);
      g.set(this.view.subarray(e, this.buffer.byteLength), b);
      this.buffer = d;
      this.view = g;
      this.offset += h;
      0 <= this.markedOffset && (this.markedOffset += h);
      this.limit += h;
      e += h;
    } else {
      new Uint8Array(this.buffer);
    }
    this.view.set(a.view.subarray(a.offset, a.limit), e - b);
    a.offset = a.limit;
    c && (this.offset -= b);
    return this;
  };
  e.prependTo = function(a, b) {
    a.prepend(this, b);
    return this;
  };
  e.printDebug = function(a) {
    "function" !== typeof a && (a = console.log.bind(console));
    a(this.toString() + "\n-------------------------------------------------------------------\n" + this.toDebug(!0));
  };
  e.remaining = function() {
    return this.limit - this.offset;
  };
  e.reset = function() {
    0 <= this.markedOffset ? (this.offset = this.markedOffset, this.markedOffset = -1) : this.offset = 0;
    return this;
  };
  e.resize = function(a) {
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal capacity: " + a + " (not an integer)");
      }
      a |= 0;
      if (0 > a) {
        throw RangeError("Illegal capacity: 0 <= " + a);
      }
    }
    if (this.buffer.byteLength < a) {
      a = new ArrayBuffer(a);
      var c = new Uint8Array(a);
      c.set(this.view);
      this.buffer = a;
      this.view = c;
    }
    return this;
  };
  e.reverse = function(a, b) {
    "undefined" === typeof a && (a = this.offset);
    "undefined" === typeof b && (b = this.limit);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal begin: Not an integer");
      }
      a >>>= 0;
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal end: Not an integer");
      }
      b >>>= 0;
      if (0 > a || a > b || b > this.buffer.byteLength) {
        throw RangeError("Illegal range: 0 <= " + a + " <= " + b + " <= " + this.buffer.byteLength);
      }
    }
    if (a === b) {
      return this;
    }
    Array.prototype.reverse.call(this.view.subarray(a, b));
    return this;
  };
  e.skip = function(a) {
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal length: " + a + " (not an integer)");
      }
      a |= 0;
    }
    var c = this.offset + a;
    if (!this.noAssert && (0 > c || c > this.buffer.byteLength)) {
      throw RangeError("Illegal length: 0 <= " + this.offset + " + " + a + " <= " + this.buffer.byteLength);
    }
    this.offset = c;
    return this;
  };
  e.slice = function(a, b) {
    "undefined" === typeof a && (a = this.offset);
    "undefined" === typeof b && (b = this.limit);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal begin: Not an integer");
      }
      a >>>= 0;
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal end: Not an integer");
      }
      b >>>= 0;
      if (0 > a || a > b || b > this.buffer.byteLength) {
        throw RangeError("Illegal range: 0 <= " + a + " <= " + b + " <= " + this.buffer.byteLength);
      }
    }
    var c = this.clone();
    c.offset = a;
    c.limit = b;
    return c;
  };
  e.toBuffer = function(a) {
    var c = this.offset, b = this.limit;
    if (!this.noAssert) {
      if ("number" !== typeof c || 0 !== c % 1) {
        throw TypeError("Illegal offset: Not an integer");
      }
      c >>>= 0;
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal limit: Not an integer");
      }
      b >>>= 0;
      if (0 > c || c > b || b > this.buffer.byteLength) {
        throw RangeError("Illegal range: 0 <= " + c + " <= " + b + " <= " + this.buffer.byteLength);
      }
    }
    if (!a && 0 === c && b === this.buffer.byteLength) {
      return this.buffer;
    }
    if (c === b) {
      return r;
    }
    a = new ArrayBuffer(b - c);
    (new Uint8Array(a)).set((new Uint8Array(this.buffer)).subarray(c, b), 0);
    return a;
  };
  e.toArrayBuffer = e.toBuffer;
  e.toString = function(a, b, e) {
    if ("undefined" === typeof a) {
      return "ByteBufferAB(offset=" + this.offset + ",markedOffset=" + this.markedOffset + ",limit=" + this.limit + ",capacity=" + this.capacity() + ")";
    }
    "number" === typeof a && (e = b = a = "utf8");
    switch(a) {
      case "utf8":
        return this.toUTF8(b, e);
      case "base64":
        return this.toBase64(b, e);
      case "hex":
        return this.toHex(b, e);
      case "binary":
        return this.toBinary(b, e);
      case "debug":
        return this.toDebug();
      case "columns":
        return this.toColumns();
      default:
        throw Error("Unsupported encoding: " + a);
    }
  };
  var m = function() {
    for (var a = {}, b = [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 43, 47], e = [], f = 0, d = b.length; f < d; ++f) {
      e[b[f]] = f;
    }
    a.encode = function(a, c) {
      for (var e, f; null !== (e = a());) {
        c(b[e >> 2 & 63]), f = (e & 3) << 4, null !== (e = a()) ? (f |= e >> 4 & 15, c(b[(f | e >> 4 & 15) & 63]), f = (e & 15) << 2, null !== (e = a()) ? (c(b[(f | e >> 6 & 3) & 63]), c(b[e & 63])) : (c(b[f & 63]), c(61))) : (c(b[f & 63]), c(61), c(61));
      }
    };
    a.decode = function(a, c) {
      function b(a) {
        throw Error("Illegal character code: " + a);
      }
      for (var f, d, h; null !== (f = a());) {
        if (d = e[f], "undefined" === typeof d && b(f), null !== (f = a()) && (h = e[f], "undefined" === typeof h && b(f), c(d << 2 >>> 0 | (h & 48) >> 4), null !== (f = a()))) {
          d = e[f];
          if ("undefined" === typeof d) {
            if (61 === f) {
              break;
            } else {
              b(f);
            }
          }
          c((h & 15) << 4 >>> 0 | (d & 60) >> 2);
          if (null !== (f = a())) {
            h = e[f];
            if ("undefined" === typeof h) {
              if (61 === f) {
                break;
              } else {
                b(f);
              }
            }
            c((d & 3) << 6 >>> 0 | h);
          }
        }
      }
    };
    a.test = function(a) {
      return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(a);
    };
    return a;
  }();
  e.toBase64 = function(a, b) {
    "undefined" === typeof a && (a = this.offset);
    "undefined" === typeof b && (b = this.limit);
    a |= 0;
    b |= 0;
    if (0 > a || b > this.capacity || a > b) {
      throw RangeError("begin, end");
    }
    var c;
    m.encode(function() {
      return a < b ? this.view[a++] : null;
    }.bind(this), c = k());
    return c();
  };
  f.fromBase64 = function(a, b) {
    if ("string" !== typeof a) {
      throw TypeError("str");
    }
    var c = new f(a.length / 4 * 3, b), e = 0;
    m.decode(d(a), function(a) {
      c.view[e++] = a;
    });
    c.limit = e;
    return c;
  };
  f.btoa = function(a) {
    return f.fromBinary(a).toBase64();
  };
  f.atob = function(a) {
    return f.fromBase64(a).toBinary();
  };
  e.toBinary = function(a, b) {
    "undefined" === typeof a && (a = this.offset);
    "undefined" === typeof b && (b = this.limit);
    a |= 0;
    b |= 0;
    if (0 > a || b > this.capacity() || a > b) {
      throw RangeError("begin, end");
    }
    if (a === b) {
      return "";
    }
    for (var c = [], e = []; a < b;) {
      c.push(this.view[a++]), 1024 <= c.length && (e.push(String.fromCharCode.apply(String, c)), c = []);
    }
    return e.join("") + String.fromCharCode.apply(String, c);
  };
  f.fromBinary = function(a, b) {
    if ("string" !== typeof a) {
      throw TypeError("str");
    }
    for (var c = 0, e = a.length, d = new f(e, b); c < e;) {
      b = a.charCodeAt(c);
      if (255 < b) {
        throw RangeError("illegal char code: " + b);
      }
      d.view[c++] = b;
    }
    d.limit = e;
    return d;
  };
  e.toDebug = function(a) {
    for (var c = -1, b = this.buffer.byteLength, e, f = "", d = "", g = ""; c < b;) {
      -1 !== c && (e = this.view[c], f = 16 > e ? f + ("0" + e.toString(16).toUpperCase()) : f + e.toString(16).toUpperCase(), a && (d += 32 < e && 127 > e ? String.fromCharCode(e) : "."));
      ++c;
      if (a && 0 < c && 0 === c % 16 && c !== b) {
        for (; 51 > f.length;) {
          f += " ";
        }
        g += f + d + "\n";
        f = d = "";
      }
      f = c === this.offset && c === this.limit ? f + (c === this.markedOffset ? "!" : "|") : c === this.offset ? f + (c === this.markedOffset ? "[" : "<") : c === this.limit ? f + (c === this.markedOffset ? "]" : ">") : f + (c === this.markedOffset ? "'" : a || 0 !== c && c !== b ? " " : "");
    }
    if (a && " " !== f) {
      for (; 51 > f.length;) {
        f += " ";
      }
      g += f + d + "\n";
    }
    return a ? g : f;
  };
  f.fromDebug = function(a, b, e) {
    var c = a.length;
    b = new f((c + 1) / 3 | 0, b, e);
    for (var d = 0, h = 0, g, m = !1, n = !1, k = !1, q = !1, r = !1; d < c;) {
      switch(g = a.charAt(d++)) {
        case "!":
          if (!e) {
            if (n || k || q) {
              r = !0;
              break;
            }
            n = k = q = !0;
          }
          b.offset = b.markedOffset = b.limit = h;
          m = !1;
          break;
        case "|":
          if (!e) {
            if (n || q) {
              r = ! 0;
              break;
            }
            n = q = !0;
          }
          b.offset = b.limit = h;
          m = !1;
          break;
        case "[":
          if (!e) {
            if (n || k) {
              r = !0;
              break;
            }
            n = k = !0;
          }
          b.offset = b.markedOffset = h;
          m = !1;
          break;
        case "<":
          if (!e) {
            if (n) {
              r = !0;
              break;
            }
            n = ! 0;
          }
          b.offset = h;
          m = !1;
          break;
        case "]":
          if (!e) {
            if (q || k) {
              r = !0;
              break;
            }
            q = k = !0;
          }
          b.limit = b.markedOffset = h;
          m = !1;
          break;
        case ">":
          if (!e) {
            if (q) {
              r = !0;
              break;
            }
            q = !0;
          }
          b.limit = h;
          m = !1;
          break;
        case "'":
          if (!e) {
            if (k) {
              r = !0;
              break;
            }
            k = !0;
          }
          b.markedOffset = h;
          m = !1;
          break;
        case " ":
          m = !1;
          break;
        default:
          if (!e && m) {
            r = !0;
          } else {
            g = parseInt(g + a.charAt(d++), 16);
            if (!e && (isNaN(g) || 0 > g || 255 < g)) {
              throw TypeError("Illegal str: Not a debug encoded string");
            }
            b.view[h++] = g;
            m = !0;
          }
      }
      if (r) {
        throw TypeError("Illegal str: Invalid symbol at " + d);
      }
    }
    if (!e) {
      if (!n || !q) {
        throw TypeError("Illegal str: Missing offset or limit");
      }
      if (h < b.buffer.byteLength) {
        throw TypeError("Illegal str: Not a debug encoded string (is it hex?) " + h + " < " + c);
      }
    }
    return b;
  };
  e.toHex = function(a, b) {
    a = "undefined" === typeof a ? this.offset : a;
    b = "undefined" === typeof b ? this.limit : b;
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal begin: Not an integer");
      }
      a >>>= 0;
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal end: Not an integer");
      }
      b >>>= 0;
      if (0 > a || a > b || b > this.buffer.byteLength) {
        throw RangeError("Illegal range: 0 <= " + a + " <= " + b + " <= " + this.buffer.byteLength);
      }
    }
    for (var c = Array(b - a), e; a < b;) {
      e = this.view[a++], 16 > e ? c.push("0", e.toString(16)) : c.push(e.toString(16));
    }
    return c.join("");
  };
  f.fromHex = function(a, b, e) {
    if (!e) {
      if ("string" !== typeof a) {
        throw TypeError("Illegal str: Not a string");
      }
      if (0 !== a.length % 2) {
        throw TypeError("Illegal str: Length not a multiple of 2");
      }
    }
    var c = a.length;
    b = new f(c / 2 | 0, b);
    for (var d, h = 0, g = 0; h < c; h += 2) {
      d = parseInt(a.substring(h, h + 2), 16);
      if (!e && (!isFinite(d) || 0 > d || 255 < d)) {
        throw TypeError("Illegal str: Contains non-hex characters");
      }
      b.view[g++] = d;
    }
    b.limit = g;
    return b;
  };
  var n = function() {
    var a = {MAX_CODEPOINT:1114111, encodeUTF8:function(a, c) {
      var b = null;
      for ("number" === typeof a && (b = a, a = function() {
        return null;
      }); null !== b || null !== (b = a());) {
        128 > b ? c(b & 127) : (2048 > b ? c(b >> 6 & 31 | 192) : (65536 > b ? c(b >> 12 & 15 | 224) : (c(b >> 18 & 7 | 240), c(b >> 12 & 63 | 128)), c(b >> 6 & 63 | 128)), c(b & 63 | 128)), b = null;
      }
    }, decodeUTF8:function(a, c) {
      for (var b, e, f, d, h = function(a) {
        a = a.slice(0, a.indexOf(null));
        var c = Error(a.toString());
        c.name = "TruncatedError";
        c.bytes = a;
        throw c;
      }; null !== (b = a());) {
        if (0 === (b & 128)) {
          c(b);
        } else {
          if (192 === (b & 224)) {
            null === (e = a()) && h([b, e]), c((b & 31) << 6 | e & 63);
          } else {
            if (224 === (b & 240)) {
              null !== (e = a()) && null !== (f = a()) || h([b, e, f]), c((b & 15) << 12 | (e & 63) << 6 | f & 63);
            } else {
              if (240 === (b & 248)) {
                null !== (e = a()) && null !== (f = a()) && null !== (d = a()) || h([b, e, f, d]), c((b & 7) << 18 | (e & 63) << 12 | (f & 63) << 6 | d & 63);
              } else {
                throw RangeError("Illegal starting byte: " + b);
              }
            }
          }
        }
      }
    }, UTF16toUTF8:function(a, c) {
      for (var b, e = null; null !== (b = null !== e ? e : a());) {
        55296 <= b && 57343 >= b && null !== (e = a()) && 56320 <= e && 57343 >= e ? (c(1024 * (b - 55296) + e - 56320 + 65536), e = null) : c(b);
      }
      null !== e && c(e);
    }, UTF8toUTF16:function(a, c) {
      var b = null;
      for ("number" === typeof a && (b = a, a = function() {
        return null;
      }); null !== b || null !== (b = a());) {
        65535 >= b ? c(b) : (b -= 65536, c((b >> 10) + 55296), c(b % 1024 + 56320)), b = null;
      }
    }, encodeUTF16toUTF8:function(c, b) {
      a.UTF16toUTF8(c, function(c) {
        a.encodeUTF8(c, b);
      });
    }, decodeUTF8toUTF16:function(c, b) {
      a.decodeUTF8(c, function(c) {
        a.UTF8toUTF16(c, b);
      });
    }, calculateCodePoint:function(a) {
      return 128 > a ? 1 : 2048 > a ? 2 : 65536 > a ? 3 : 4;
    }, calculateUTF8:function(a) {
      for (var c, b = 0; null !== (c = a());) {
        b += 128 > c ? 1 : 2048 > c ? 2 : 65536 > c ? 3 : 4;
      }
      return b;
    }, calculateUTF16asUTF8:function(c) {
      var b = 0, e = 0;
      a.UTF16toUTF8(c, function(a) {
        ++b;
        e += 128 > a ? 1 : 2048 > a ? 2 : 65536 > a ? 3 : 4;
      });
      return [b, e];
    }};
    return a;
  }();
  e.toUTF8 = function(a, b) {
    "undefined" === typeof a && (a = this.offset);
    "undefined" === typeof b && (b = this.limit);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal begin: Not an integer");
      }
      a >>>= 0;
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal end: Not an integer");
      }
      b >>>= 0;
      if (0 > a || a > b || b > this.buffer.byteLength) {
        throw RangeError("Illegal range: 0 <= " + a + " <= " + b + " <= " + this.buffer.byteLength);
      }
    }
    var c;
    try {
      n.decodeUTF8toUTF16(function() {
        return a < b ? this.view[a++] : null;
      }.bind(this), c = k());
    } catch (z) {
      if (a !== b) {
        throw RangeError("Illegal range: Truncated data, " + a + " != " + b);
      }
    }
    return c();
  };
  f.fromUTF8 = function(a, b, e) {
    if (!e && "string" !== typeof a) {
      throw TypeError("Illegal str: Not a string");
    }
    var c = new f(n.calculateUTF16asUTF8(d(a), !0)[1], b, e), h = 0;
    n.encodeUTF16toUTF8(d(a), function(a) {
      c.view[h++] = a;
    });
    c.limit = h;
    return c;
  };
  return f;
});
(function(a, d) {
  "function" === typeof define && define.amd ? define([], d) : "function" === typeof require && "object" === typeof module && module && module.exports ? module.exports = d() : (a.dcodeIO = a.dcodeIO || {}).Long = d();
})(this, function() {
  function a(a, c, b) {
    this.low = a | 0;
    this.high = c | 0;
    this.unsigned = !!b;
  }
  function d(a) {
    return !0 === (a && a.__isLong__);
  }
  function k(a, c) {
    var b;
    if (c) {
      a >>>= 0;
      if (b = 0 <= a && 256 > a) {
        if (c = q[a]) {
          return c;
        }
      }
      c = g(a, 0 > (a | 0) ? -1 : 0, !0);
      b && (q[a] = c);
    } else {
      a |= 0;
      if (b = -128 <= a && 128 > a) {
        if (c = r[a]) {
          return c;
        }
      }
      c = g(a, 0 > a ? -1 : 0, !1);
      b && (r[a] = c);
    }
    return c;
  }
  function b(a, e) {
    if (isNaN(a) || !isFinite(a)) {
      return e ? z : t;
    }
    if (e) {
      if (0 > a) {
        return z;
      }
      if (a >= n) {
        return w;
      }
    } else {
      if (a <= -c) {
        return C;
      }
      if (a + 1 >= c) {
        return v;
      }
    }
    return 0 > a ? b(-a, e).neg() : g(a % 4294967296 | 0, a / 4294967296 | 0, e);
  }
  function g(c, b, e) {
    return new a(c, b, e);
  }
  function f(a, c, e) {
    if (0 === a.length) {
      throw Error("empty string");
    }
    if ("NaN" === a || "Infinity" === a || "+Infinity" === a || "-Infinity" === a) {
      return t;
    }
    "number" === typeof c ? (e = c, c = !1) : c = !!c;
    e = e || 10;
    if (2 > e || 36 < e) {
      throw RangeError("radix");
    }
    var d;
    if (0 < (d = a.indexOf("-"))) {
      throw Error("interior hyphen");
    }
    if (0 === d) {
      return f(a.substring(1), c, e).neg();
    }
    d = b(m(e, 8));
    for (var h = t, g = 0; g < a.length; g += 8) {
      var p = Math.min(8, a.length - g), n = parseInt(a.substring(g, g + p), e);
      8 > p ? (p = b(m(e, p)), h = h.mul(p).add(b(n))) : (h = h.mul(d), h = h.add(b(n)));
    }
    h.unsigned = c;
    return h;
  }
  function e(c) {
    return c instanceof a ? c : "number" === typeof c ? b(c) : "string" === typeof c ? f(c) : g(c.low, c.high, c.unsigned);
  }
  Object.defineProperty(a.prototype, "__isLong__", {value:!0, enumerable:!1, configurable:!1});
  a.isLong = d;
  var r = {}, q = {};
  a.fromInt = k;
  a.fromNumber = b;
  a.fromBits = g;
  var m = Math.pow;
  a.fromString = f;
  a.fromValue = e;
  var n = 4294967296 * 4294967296, c = n / 2, h = k(16777216), t = k(0);
  a.ZERO = t;
  var z = k(0, !0);
  a.UZERO = z;
  var y = k(1);
  a.ONE = y;
  var x = k(1, !0);
  a.UONE = x;
  var p = k(-1);
  a.NEG_ONE = p;
  var v = g(-1, 2147483647, !1);
  a.MAX_VALUE = v;
  var w = g(-1, -1, !0);
  a.MAX_UNSIGNED_VALUE = w;
  var C = g(0, -2147483648, !1);
  a.MIN_VALUE = C;
  var A = a.prototype;
  A.toInt = function() {
    return this.unsigned ? this.low >>> 0 : this.low;
  };
  A.toNumber = function() {
    return this.unsigned ? 4294967296 * (this.high >>> 0) + (this.low >>> 0) : 4294967296 * this.high + (this.low >>> 0);
  };
  A.toString = function(a) {
    a = a || 10;
    if (2 > a || 36 < a) {
      throw RangeError("radix");
    }
    if (this.isZero()) {
      return "0";
    }
    if (this.isNegative()) {
      if (this.eq(C)) {
        var c = b(a), e = this.div(c);
        c = e.mul(c).sub(this);
        return e.toString(a) + c.toInt().toString(a);
      }
      return "-" + this.neg().toString(a);
    }
    e = b(m(a, 6), this.unsigned);
    c = this;
    for (var f = "";;) {
      var d = c.div(e), h = (c.sub(d.mul(e)).toInt() >>> 0).toString(a);
      c = d;
      if (c.isZero()) {
        return h + f;
      }
      for (; 6 > h.length;) {
        h = "0" + h;
      }
      f = "" + h + f;
    }
  };
  A.getHighBits = function() {
    return this.high;
  };
  A.getHighBitsUnsigned = function() {
    return this.high >>> 0;
  };
  A.getLowBits = function() {
    return this.low;
  };
  A.getLowBitsUnsigned = function() {
    return this.low >>> 0;
  };
  A.getNumBitsAbs = function() {
    if (this.isNegative()) {
      return this.eq(C) ? 64 : this.neg().getNumBitsAbs();
    }
    for (var a = 0 != this.high ? this.high : this.low, c = 31; 0 < c && 0 == (a & 1 << c); c--) {
    }
    return 0 != this.high ? c + 33 : c + 1;
  };
  A.isZero = function() {
    return 0 === this.high && 0 === this.low;
  };
  A.isNegative = function() {
    return !this.unsigned && 0 > this.high;
  };
  A.isPositive = function() {
    return this.unsigned || 0 <= this.high;
  };
  A.isOdd = function() {
    return 1 === (this.low & 1);
  };
  A.isEven = function() {
    return 0 === (this.low & 1);
  };
  A.equals = function(a) {
    d(a) || (a = e(a));
    return this.unsigned !== a.unsigned && 1 === this.high >>> 31 && 1 === a.high >>> 31 ? !1 : this.high === a.high && this.low === a.low;
  };
  A.eq = A.equals;
  A.notEquals = function(a) {
    return !this.eq(a);
  };
  A.neq = A.notEquals;
  A.lessThan = function(a) {
    return 0 > this.comp(a);
  };
  A.lt = A.lessThan;
  A.lessThanOrEqual = function(a) {
    return 0 >= this.comp(a);
  };
  A.lte = A.lessThanOrEqual;
  A.greaterThan = function(a) {
    return 0 < this.comp(a);
  };
  A.gt = A.greaterThan;
  A.greaterThanOrEqual = function(a) {
    return 0 <= this.comp(a);
  };
  A.gte = A.greaterThanOrEqual;
  A.compare = function(a) {
    d(a) || (a = e(a));
    if (this.eq(a)) {
      return 0;
    }
    var c = this.isNegative(), b = a.isNegative();
    return c && !b ? -1 : !c && b ? 1 : this.unsigned ? a.high >>> 0 > this.high >>> 0 || a.high === this.high && a.low >>> 0 > this.low >>> 0 ? -1 : 1 : this.sub(a).isNegative() ? -1 : 1;
  };
  A.comp = A.compare;
  A.negate = function() {
    return !this.unsigned && this.eq(C) ? C : this.not().add(y);
  };
  A.neg = A.negate;
  A.add = function(a) {
    d(a) || (a = e(a));
    var c = this.high >>> 16, b = this.high & 65535, f = this.low >>> 16, h = a.high >>> 16, m = a.high & 65535, p = a.low >>> 16;
    var n = (this.low & 65535) + (a.low & 65535);
    a = (n >>> 16) + (f + p);
    f = (a >>> 16) + (b + m);
    b = (f >>> 16) + (c + h) & 65535;
    return g((a & 65535) << 16 | n & 65535, b << 16 | f & 65535, this.unsigned);
  };
  A.subtract = function(a) {
    d(a) || (a = e(a));
    return this.add(a.neg());
  };
  A.sub = A.subtract;
  A.multiply = function(a) {
    if (this.isZero()) {
      return t;
    }
    d(a) || (a = e(a));
    if (a.isZero()) {
      return t;
    }
    if (this.eq(C)) {
      return a.isOdd() ? C : t;
    }
    if (a.eq(C)) {
      return this.isOdd() ? C : t;
    }
    if (this.isNegative()) {
      return a.isNegative() ? this.neg().mul(a.neg()) : this.neg().mul(a).neg();
    }
    if (a.isNegative()) {
      return this.mul(a.neg()).neg();
    }
    if (this.lt(h) && a.lt(h)) {
      return b(this.toNumber() * a.toNumber(), this.unsigned);
    }
    var c = this.high >>> 16, f = this.high & 65535, m = this.low >>> 16, p = this.low & 65535, n = a.high >>> 16, k = a.high & 65535, q = a.low >>> 16;
    a = a.low & 65535;
    var r = p * a;
    var v = (r >>> 16) + m * a;
    var w = v >>> 16;
    v = (v & 65535) + p * q;
    w += v >>> 16;
    w += f * a;
    var z = w >>> 16;
    w = (w & 65535) + m * q;
    z += w >>> 16;
    w = (w & 65535) + p * k;
    return g((v & 65535) << 16 | r & 65535, (z + (w >>> 16) + (c * a + f * q + m * k + p * n) & 65535) << 16 | w & 65535, this.unsigned);
  };
  A.mul = A.multiply;
  A.divide = function(a) {
    d(a) || (a = e(a));
    if (a.isZero()) {
      throw Error("division by zero");
    }
    if (this.isZero()) {
      return this.unsigned ? z : t;
    }
    if (this.unsigned) {
      a.unsigned || (a = a.toUnsigned());
      if (a.gt(this)) {
        return z;
      }
      if (a.gt(this.shru(1))) {
        return x;
      }
      var c = z;
    } else {
      if (this.eq(C)) {
        if (a.eq(y) || a.eq(p)) {
          return C;
        }
        if (a.eq(C)) {
          return y;
        }
        var f = this.shr(1).div(a).shl(1);
        if (f.eq(t)) {
          return a.isNegative() ? y : p;
        }
        var h = this.sub(a.mul(f));
        return f.add(h.div(a));
      }
      if (a.eq(C)) {
        return this.unsigned ? z : t;
      }
      if (this.isNegative()) {
        return a.isNegative() ? this.neg().div(a.neg()) : this.neg().div(a).neg();
      }
      if (a.isNegative()) {
        return this.div(a.neg()).neg();
      }
      c = t;
    }
    for (h = this; h.gte(a);) {
      f = Math.max(1, Math.floor(h.toNumber() / a.toNumber()));
      var g = Math.ceil(Math.log(f) / Math.LN2);
      g = 48 >= g ? 1 : m(2, g - 48);
      for (var n = b(f), k = n.mul(a); k.isNegative() || k.gt(h);) {
        f -= g, n = b(f, this.unsigned), k = n.mul(a);
      }
      n.isZero() && (n = y);
      c = c.add(n);
      h = h.sub(k);
    }
    return c;
  };
  A.div = A.divide;
  A.modulo = function(a) {
    d(a) || (a = e(a));
    return this.sub(this.div(a).mul(a));
  };
  A.mod = A.modulo;
  A.not = function() {
    return g(~this.low, ~this.high, this.unsigned);
  };
  A.and = function(a) {
    d(a) || (a = e(a));
    return g(this.low & a.low, this.high & a.high, this.unsigned);
  };
  A.or = function(a) {
    d(a) || (a = e(a));
    return g(this.low | a.low, this.high | a.high, this.unsigned);
  };
  A.xor = function(a) {
    d(a) || (a = e(a));
    return g(this.low ^ a.low, this.high ^ a.high, this.unsigned);
  };
  A.shiftLeft = function(a) {
    d(a) && (a = a.toInt());
    return 0 === (a &= 63) ? this : 32 > a ? g(this.low << a, this.high << a | this.low >>> 32 - a, this.unsigned) : g(0, this.low << a - 32, this.unsigned);
  };
  A.shl = A.shiftLeft;
  A.shiftRight = function(a) {
    d(a) && (a = a.toInt());
    return 0 === (a &= 63) ? this : 32 > a ? g(this.low >>> a | this.high << 32 - a, this.high >> a, this.unsigned) : g(this.high >> a - 32, 0 <= this.high ? 0 : -1, this.unsigned);
  };
  A.shr = A.shiftRight;
  A.shiftRightUnsigned = function(a) {
    d(a) && (a = a.toInt());
    a &= 63;
    if (0 === a) {
      return this;
    }
    var c = this.high;
    return 32 > a ? g(this.low >>> a | c << 32 - a, c >>> a, this.unsigned) : 32 === a ? g(c, 0, this.unsigned) : g(c >>> a - 32, 0, this.unsigned);
  };
  A.shru = A.shiftRightUnsigned;
  A.toSigned = function() {
    return this.unsigned ? g(this.low, this.high, !1) : this;
  };
  A.toUnsigned = function() {
    return this.unsigned ? this : g(this.low, this.high, !0);
  };
  A.toBytes = function(a) {
    return a ? this.toBytesLE() : this.toBytesBE();
  };
  A.toBytesLE = function() {
    var a = this.high, c = this.low;
    return [c & 255, c >>> 8 & 255, c >>> 16 & 255, c >>> 24 & 255, a & 255, a >>> 8 & 255, a >>> 16 & 255, a >>> 24 & 255];
  };
  A.toBytesBE = function() {
    var a = this.high, c = this.low;
    return [a >>> 24 & 255, a >>> 16 & 255, a >>> 8 & 255, a & 255, c >>> 24 & 255, c >>> 16 & 255, c >>> 8 & 255, c & 255];
  };
  return a;
});
(function(a) {
  function d(a) {
    if (!a) {
      throw Error("PSON requires ByteBuffer.js: Get it at https://github.com/dcodeIO/ByteBuffer.js");
    }
    var b = {T:{ZERO:0, MAX:239, NULL:240, TRUE:241, FALSE:242, EOBJECT:243, EARRAY:244, ESTRING:245, OBJECT:246, ARRAY:247, INTEGER:248, LONG:249, FLOAT:250, DOUBLE:251, STRING:252, STRING_ADD:253, STRING_GET:254, BINARY:255}};
    b.Encoder = function(a, b) {
      var e = new a(4);
      e.length = 4;
      var f = a.Long, d = function(a, b, c) {
        this.dict = {};
        this.next = 0;
        if (a && Array.isArray(a)) {
          for (; this.next < a.length;) {
            this.dict[a[this.next]] = this.next++;
          }
        }
        this.progressive = !!b;
        this.options = c || {};
      };
      d.prototype.encode = function(b, e) {
        var c = !1;
        e || (e = new a, c = !0);
        var f = e.littleEndian;
        try {
          return this._encodeValue(b, e.LE()), e.littleEndian = f, c ? e.flip() : e;
        } catch (t) {
          throw e.littleEndian = f, t;
        }
      };
      d.prototype._encodeValue = function(d, g, c) {
        if (null === d) {
          g.writeUint8(b.NULL);
        } else {
          switch(typeof d) {
            case "function":
              d = d.toString();
            case "string":
              0 === d.length ? g.writeUint8(b.ESTRING) : this.dict.hasOwnProperty(d) ? (g.writeUint8(b.STRING_GET), g.writeVarint32(this.dict[d])) : (g.writeUint8(b.STRING), g.writeVString(d));
              break;
            case "number":
              c = parseInt(d);
              d === c ? (c = a.zigZagEncode32(d), c <= b.MAX ? g.writeUint8(c) : (g.writeUint8(b.INTEGER), g.writeVarint32ZigZag(d))) : (e.writeFloat32(d, 0), d === e.readFloat32(0) ? (g.writeUint8(b.FLOAT), g.writeFloat32(d)) : (g.writeUint8(b.DOUBLE), g.writeFloat64(d)));
              break;
            case "boolean":
              g.writeUint8(d ? b.TRUE : b.FALSE);
              break;
            case "object":
              var h;
              if (Array.isArray(d)) {
                if (0 === d.length) {
                  g.writeUint8(b.EARRAY);
                } else {
                  for (g.writeUint8(b.ARRAY), g.writeVarint32(d.length), h = 0; h < d.length; h++) {
                    this._encodeValue(d[h], g);
                  }
                }
              } else {
                if (f && d instanceof f) {
                  g.writeUint8(b.LONG), g.writeVarint64ZigZag(d);
                } else {
                  try {
                    d = a.wrap(d), g.writeUint8(b.BINARY), g.writeVarint32(d.remaining()), g.append(d);
                  } catch (y) {
                    var m = Object.keys(d), n = 0;
                    for (h = 0; h < m.length; h++) {
                      "undefined" !== typeof d[m[h]] && n++;
                    }
                    if (0 === n) {
                      g.writeUint8(b.EOBJECT);
                    } else {
                      for (g.writeUint8(b.OBJECT), g.writeVarint32(n), c || (c = !!d._PSON_EXCL_), h = 0; h < m.length; h++) {
                        n = m[h], "undefined" !== typeof d[n] && (this.dict.hasOwnProperty(n) ? (g.writeUint8(b.STRING_GET), g.writeVarint32(this.dict[n])) : (this.progressive && !c ? (this.dict[n] = this.next++, g.writeUint8(b.STRING_ADD)) : g.writeUint8(b.STRING), g.writeVString(n)), this._encodeValue(d[n], g));
                      }
                    }
                  }
                }
              }
              break;
            case "undefined":
              g.writeUint8(b.NULL);
          }
        }
      };
      return d;
    }(a, b.T);
    b.Decoder = function(a, b) {
      var e = a.Long, f = function(a, b, e) {
        this.dict = a && Array.isArray(a) ? a : [];
        this.progressive = !!b;
        this.options = e || {};
      };
      f.prototype.decode = function(b) {
        b instanceof a || (b = a.wrap(b));
        var e = b.littleEndian;
        try {
          var f = this._decodeValue(b.LE());
          b.littleEndian = e;
          return f;
        } catch (c) {
          throw b.littleEndian = e, c;
        }
      };
      f.prototype._decodeValue = function(f) {
        var d = f.readUint8();
        if (d <= b.MAX) {
          return a.zigZagDecode32(d);
        }
        switch(d) {
          case b.NULL:
            return null;
          case b.TRUE:
            return !0;
          case b.FALSE:
            return !1;
          case b.EOBJECT:
            return {};
          case b.EARRAY:
            return [];
          case b.ESTRING:
            return "";
          case b.OBJECT:
            d = f.readVarint32();
            for (var g = {}; 0 <= --d;) {
              g[this._decodeValue(f)] = this._decodeValue(f);
            }
            return g;
          case b.ARRAY:
            d = f.readVarint32();
            for (g = []; 0 <= --d;) {
              g.push(this._decodeValue(f));
            }
            return g;
          case b.INTEGER:
            return f.readVarint32ZigZag();
          case b.LONG:
            return e ? f.readVarint64ZigZag() : f.readVarint32ZigZag();
          case b.FLOAT:
            return f.readFloat32();
          case b.DOUBLE:
            return f.readFloat64();
          case b.STRING:
            return f.readVString();
          case b.STRING_ADD:
            return f = f.readVString(), this.dict.push(f), f;
          case b.STRING_GET:
            return this.dict[f.readVarint32()];
          case b.BINARY:
            return d = f.readVarint32(), g = f.slice(f.offset, f.offset + d), f.offset += d, g;
          default:
            throw Error("Illegal type at " + f.offset + ": " + d);
        }
      };
      return f;
    }(a, b.T);
    b.Pair = function() {
      var a = function() {
      };
      a.prototype.encode = function(a) {
        return this.encoder.encode(a);
      };
      a.prototype.toArrayBuffer = function(a) {
        return this.encoder.encode(a).toArrayBuffer();
      };
      a.prototype.toBuffer = function(a) {
        return this.encoder.encode(a).toBuffer();
      };
      a.prototype.decode = function(a) {
        return this.decoder.decode(a);
      };
      return a;
    }();
    b.StaticPair = function(a, b, e) {
      var f = function(f, d) {
        a.call(this);
        this.encoder = new b(f, !1, d);
        this.decoder = new e(f, !1, d);
      };
      f.prototype = Object.create(a.prototype);
      return f;
    }(b.Pair, b.Encoder, b.Decoder);
    b.ProgressivePair = function(a, f, e) {
      var d = function(b, d) {
        a.call(this);
        this.encoder = new f(b, !0, d);
        this.decoder = new e(b, !0, d);
      };
      d.prototype = Object.create(a.prototype);
      d.prototype.exclude = function(a) {
        b.exclude(a);
      };
      d.prototype.include = function(a) {
        b.include(a);
      };
      return d;
    }(b.Pair, b.Encoder, b.Decoder);
    b.exclude = function(a) {
      "object" === typeof a && Object.defineProperty(a, "_PSON_EXCL_", {value:!0, enumerable:!1, configurable:!0});
    };
    b.include = function(a) {
      "object" === typeof a && delete a._PSON_EXCL_;
    };
    return b;
  }
  "undefined" != typeof module && module.exports ? module.exports = d(require("bytebuffer")) : "undefined" != typeof define && define.amd ? define("PSON", ["ByteBuffer"], d) : (a.dcodeIO || (a.dcodeIO = {}), a.dcodeIO.PSON = d(a.dcodeIO.ByteBuffer));
})(this);
function _typeof(a) {
  $jscomp.initSymbol();
  $jscomp.initSymbol();
  $jscomp.initSymbolIterator();
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(a) {
    return typeof a;
  } : function(a) {
    $jscomp.initSymbol();
    $jscomp.initSymbol();
    $jscomp.initSymbol();
    return a && "function" == typeof Symbol && a.constructor === Symbol && a !== Symbol.prototype ? "symbol" : typeof a;
  }, _typeof(a);
}
(function(a, d) {
  "object" === ("undefined" == typeof exports ? "undefined" : _typeof(exports)) && "undefined" != typeof module ? d(exports) : "function" == typeof define && define.amd ? define(["exports"], d) : (a = a || self, d(a.SPARSEOCTREE = {}));
})(this, function(a) {
  function d(a, c) {
    if (!(a instanceof c)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function k(a, c) {
    for (var b, e = 0; e < c.length; e++) {
      b = c[e], b.enumerable = b.enumerable || !1, b.configurable = !0, "value" in b && (b.writable = !0), Object.defineProperty(a, b.key, b);
    }
  }
  function b(a, c, b) {
    return c && k(a.prototype, c), b && k(a, b), a;
  }
  function g(a, c) {
    if ("function" != typeof c && null !== c) {
      throw new TypeError("Super expression must either be null or a function");
    }
    a.prototype = Object.create(c && c.prototype, {constructor:{value:a, writable:!0, configurable:!0}});
    c && e(a, c);
  }
  function f(a) {
    return f = Object.setPrototypeOf ? Object.getPrototypeOf : function(a) {
      return a.__proto__ || Object.getPrototypeOf(a);
    }, f(a);
  }
  function e(a, c) {
    return e = Object.setPrototypeOf || function(a, c) {
      return a.__proto__ = c, a;
    }, e(a, c);
  }
  function r(a, c) {
    if (!c || "object" !== _typeof(c) && "function" != typeof c) {
      if (void 0 === a) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
    } else {
      a = c;
    }
    return a;
  }
  function q(a, c, b) {
    return q = "undefined" != typeof Reflect && Reflect.get ? Reflect.get : function(a, c, b) {
      for (; !Object.prototype.hasOwnProperty.call(a, c) && (a = f(a), null !== a);) {
      }
      if (a) {
        return c = Object.getOwnPropertyDescriptor(a, c), c.get ? c.get.call(b) : c.value;
      }
    }, q(a, c, b || a);
  }
  function m(a) {
    if (Array.isArray(a)) {
      var c = 0;
      for (var b = Array(a.length); c < a.length; c++) {
        b[c] = a[c];
      }
      c = b;
    } else {
      c = void 0;
    }
    c || ($jscomp.initSymbol(), $jscomp.initSymbolIterator(), c = Symbol.iterator in Object(a) || "[object Arguments]" === Object.prototype.toString.call(a) ? Array.from(a) : void 0);
    if (!(a = c)) {
      throw new TypeError("Invalid attempt to spread non-iterable instance");
    }
    return a;
  }
  function n(a, c, b, e) {
    var f, d = 0;
    return c < b ? (f = c, d = 0) : (f = b, d = 1), e < f && (d = 2), Va[a][d];
  }
  function c(a, b, e, f, d, h, g, m, p) {
    var k = a.children;
    if (0 <= d && 0 <= h && 0 <= g) {
      if (null === k) {
        p.push(a);
      } else {
        var q = .5 * (b + d);
        var r = .5 * (e + h);
        var v = .5 * (f + g);
        var t = 0;
        a = (b > e && b > f ? (r < b && (t |= 2), v < b && (t |= 1)) : e > f ? (q < e && (t |= 4), v < e && (t |= 1)) : (q < f && (t |= 4), r < f && (t |= 2)), t);
        do {
          0 === a ? (c(k[Aa], b, e, f, q, r, v, m, p), a = n(a, q, r, v)) : 1 === a ? (c(k[1 ^ Aa], b, e, v, q, r, g, m, p), a = n(a, q, r, g)) : 2 === a ? (c(k[2 ^ Aa], b, r, f, q, h, v, m, p), a = n(a, q, h, v)) : 3 === a ? (c(k[3 ^ Aa], b, r, v, q, h, g, m, p), a = n(a, q, h, g)) : 4 === a ? (c(k[4 ^ Aa], q, e, f, d, r, v, m, p), a = n(a, d, r, v)) : 5 === a ? (c(k[5 ^ Aa], q, e, v, d, r, g, m, p), a = n(a, d, r, g)) : 6 === a ? (c(k[6 ^ Aa], q, r, f, d, h, v, m, p), a = n(a, d, h, v)) : 7 === 
          a ? (c(k[7 ^ Aa], q, r, v, d, h, g, m, p), a = 8) : void 0;
        } while (8 > a);
      }
    }
  }
  function h(a) {
    var c, b = a.children, e = 0;
    if (null !== b) {
      for (a = 0, c = b.length; a < c; ++a) {
        var f = 1 + h(b[a]);
        f > e && (e = f);
      }
    }
    return e;
  }
  function t(a, c, b) {
    var e, f = a.children;
    if (Ra.min = a.min, Ra.max = a.max, c.intersectsBox(Ra)) {
      if (null !== f) {
        for (a = 0, e = f.length; a < e; ++a) {
          t(f[a], c, b);
        }
      } else {
        b.push(a);
      }
    }
  }
  function z(a, c, b, e) {
    var f, d = a.children;
    if (b === c) {
      e.push(a);
    } else {
      if (null !== d) {
        for (++b, a = 0, f = d.length; a < f; ++a) {
          z(d[a], c, b, e);
        }
      }
    }
  }
  function y(a) {
    var c, b = a.children, e = 0;
    if (null !== b) {
      for (a = 0, c = b.length; a < c; ++a) {
        e += y(b[a]);
      }
    } else {
      null !== a.points && (e = a.points.length);
    }
    return e;
  }
  function x(a, c, b, e, f) {
    var d, h = e.children, g = !1, m = !1;
    if (e.contains(a, b.bias)) {
      if (null === h) {
        if (null === e.points) {
          e.points = [], e.data = [];
        } else {
          var p = 0;
          for (d = e.points.length; !g && p < d; ++p) {
            g = e.points[p].equals(a);
          }
        }
        g ? (e.data[p - 1] = c, m = !0) : e.points.length < b.maxPoints || f === b.maxDepth ? (e.points.push(a.clone()), e.data.push(c), ++b.pointCount, m = !0) : (e.split(), e.redistribute(b.bias), h = e.children);
      }
      if (null !== h) {
        for (++f, p = 0, d = h.length; !m && p < d; ++p) {
          m = x(a, c, b, h[p], f);
        }
      }
    }
    return m;
  }
  function p(a, c, b, e) {
    var f;
    var d = b.children;
    var h = null;
    if (b.contains(a, c.bias)) {
      if (null !== d) {
        var g = 0;
        for (f = d.length; null === h && g < f; ++g) {
          h = p(a, c, d[g], b);
        }
      } else {
        if (null !== b.points) {
          for (d = b.points, b = b.data, g = 0, f = d.length; g < f; ++g) {
            if (d[g].equals(a)) {
              a = f - 1;
              h = b[g];
              g < a && (d[g] = d[a], b[g] = b[a]);
              d.pop();
              b.pop();
              --c.pointCount;
              null !== e && y(e) <= c.maxPoints && e.merge();
              break;
            }
          }
        }
      }
    }
    return h;
  }
  function v(a, c, b) {
    var e, f = b.children, d = null;
    if (b.contains(a, c.bias)) {
      if (null !== f) {
        var h = 0;
        for (e = f.length; null === d && h < e; ++h) {
          d = v(a, c, f[h]);
        }
      } else {
        if (null !== b.points) {
          for (c = b.points, h = 0, e = c.length; null === d && h < e; ++h) {
            a.equals(c[h]) && (d = b.data[h]);
          }
        }
      }
    }
    return d;
  }
  function w(a, c, b, e, f, d) {
    var h, g = e.children, m = null;
    if (e.contains(a, b.bias)) {
      if (!e.contains(c, b.bias)) {
        m = p(a, b, e, f), x(c, m, b, f, d - 1);
      } else {
        if (null !== g) {
          for (++d, f = 0, h = g.length; null === m && f < h; ++f) {
            m = w(a, c, b, g[f], e, d);
          }
        } else {
          if (null !== e.points) {
            for (b = e.points, f = 0, h = b.length; f < h; ++f) {
              if (a.equals(b[f])) {
                b[f].copy(c);
                m = e.data[f];
                break;
              }
            }
          }
        }
      }
    }
    return m;
  }
  function C(a, c, b, e) {
    var f, d = null, h = c;
    if (null !== e.children) {
      var g, m;
      e = e.children.map(function(c) {
        return {octant:c, distance:c.distanceToCenterSquared(a)};
      }).sort(function(a, c) {
        return a.distance - c.distance;
      });
      c = 0;
      for (f = e.length; c < f && (g = e[c].octant, !g.contains(a, h) || (m = C(a, h, b, g), null === m || (h = m.distance, d = m, 0 !== h))); ++c) {
      }
    } else {
      if (null !== e.points) {
        m = e.points;
        var p = -1;
        c = 0;
        for (f = m.length; c < f; ++c) {
          if (!m[c].equals(a)) {
            g = a.distanceTo(m[c]), g < h && (h = g, p = c);
          } else {
            if (!b) {
              h = 0;
              p = c;
              break;
            }
          }
        }
        0 <= p && (d = {point:m[p], data:e.data[p], distance:h});
      }
    }
    return d;
  }
  function A(a, c, b, e, f) {
    var d, h = e.children;
    if (null !== h) {
      var g = 0;
      for (d = h.length; g < d; ++g) {
        e = h[g], e.contains(a, c) && A(a, c, b, e, f);
      }
    } else {
      if (null !== e.points) {
        var m = e.points;
        g = 0;
        for (d = m.length; g < d; ++g) {
          h = m[g], h.equals(a) ? !b && f.push({point:h.clone(), data:e.data[g]}) : h.distanceToSquared(a) <= c * c && f.push({point:h.clone(), data:e.data[g]});
        }
      }
    }
  }
  var D = Math.PI, F = Math.atan2, B = Math.round, E = Math.ceil, I = Math.floor, K = Math.abs, J = Math.acos, R = Math.sqrt, L = Math.cos, H = Math.sin, M = Math.max, S = Math.min, O = function() {
    function a() {
      var c = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : 0, b = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0, e = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : 0;
      d(this, a);
      this.x = c;
      this.y = b;
      this.z = e;
    }
    return b(a, [{key:"set", value:function(a, c, b) {
      return this.x = a, this.y = c, this.z = b, this;
    }}, {key:"copy", value:function(a) {
      return this.x = a.x, this.y = a.y, this.z = a.z, this;
    }}, {key:"clone", value:function() {
      return new this.constructor(this.x, this.y, this.z);
    }}, {key:"fromArray", value:function(a) {
      var c = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0;
      return this.x = a[c], this.y = a[c + 1], this.z = a[c + 2], this;
    }}, {key:"toArray", value:function() {
      var a = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : [], c = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0;
      return a[c] = this.x, a[c + 1] = this.y, a[c + 2] = this.z, a;
    }}, {key:"setFromSpherical", value:function(a) {
      this.setFromSphericalCoords(a.radius, a.phi, a.theta);
    }}, {key:"setFromSphericalCoords", value:function(a, c, b) {
      var e = H(c) * a;
      return this.x = e * H(b), this.y = L(c) * a, this.z = e * L(b), this;
    }}, {key:"setFromCylindrical", value:function(a) {
      this.setFromCylindricalCoords(a.radius, a.theta, a.y);
    }}, {key:"setFromCylindricalCoords", value:function(a, c, b) {
      return this.x = a * H(c), this.y = b, this.z = a * L(c), this;
    }}, {key:"setFromMatrixColumn", value:function(a, c) {
      return this.fromArray(a.elements, 4 * c);
    }}, {key:"setFromMatrixPosition", value:function(a) {
      a = a.elements;
      return this.x = a[12], this.y = a[13], this.z = a[14], this;
    }}, {key:"setFromMatrixScale", value:function(a) {
      var c = this.setFromMatrixColumn(a, 0).length(), b = this.setFromMatrixColumn(a, 1).length();
      a = this.setFromMatrixColumn(a, 2).length();
      return this.x = c, this.y = b, this.z = a, this;
    }}, {key:"add", value:function(a) {
      return this.x += a.x, this.y += a.y, this.z += a.z, this;
    }}, {key:"addScalar", value:function(a) {
      return this.x += a, this.y += a, this.z += a, this;
    }}, {key:"addVectors", value:function(a, c) {
      return this.x = a.x + c.x, this.y = a.y + c.y, this.z = a.z + c.z, this;
    }}, {key:"addScaledVector", value:function(a, c) {
      return this.x += a.x * c, this.y += a.y * c, this.z += a.z * c, this;
    }}, {key:"sub", value:function(a) {
      return this.x -= a.x, this.y -= a.y, this.z -= a.z, this;
    }}, {key:"subScalar", value:function(a) {
      return this.x -= a, this.y -= a, this.z -= a, this;
    }}, {key:"subVectors", value:function(a, c) {
      return this.x = a.x - c.x, this.y = a.y - c.y, this.z = a.z - c.z, this;
    }}, {key:"multiply", value:function(a) {
      return this.x *= a.x, this.y *= a.y, this.z *= a.z, this;
    }}, {key:"multiplyScalar", value:function(a) {
      return this.x *= a, this.y *= a, this.z *= a, this;
    }}, {key:"multiplyVectors", value:function(a, c) {
      return this.x = a.x * c.x, this.y = a.y * c.y, this.z = a.z * c.z, this;
    }}, {key:"divide", value:function(a) {
      return this.x /= a.x, this.y /= a.y, this.z /= a.z, this;
    }}, {key:"divideScalar", value:function(a) {
      return this.x /= a, this.y /= a, this.z /= a, this;
    }}, {key:"crossVectors", value:function(a, c) {
      var b = a.x, e = a.y;
      a = a.z;
      var f = c.x, d = c.y;
      c = c.z;
      return this.x = e * c - a * d, this.y = a * f - b * c, this.z = b * d - e * f, this;
    }}, {key:"cross", value:function(a) {
      return this.crossVectors(this, a);
    }}, {key:"transformDirection", value:function(a) {
      var c = this.x, b = this.y, e = this.z;
      a = a.elements;
      return this.x = a[0] * c + a[4] * b + a[8] * e, this.y = a[1] * c + a[5] * b + a[9] * e, this.z = a[2] * c + a[6] * b + a[10] * e, this.normalize();
    }}, {key:"applyMatrix3", value:function(a) {
      var c = this.x, b = this.y, e = this.z;
      a = a.elements;
      return this.x = a[0] * c + a[3] * b + a[6] * e, this.y = a[1] * c + a[4] * b + a[7] * e, this.z = a[2] * c + a[5] * b + a[8] * e, this;
    }}, {key:"applyMatrix4", value:function(a) {
      var c = this.x, b = this.y, e = this.z;
      a = a.elements;
      return this.x = a[0] * c + a[4] * b + a[8] * e + a[12], this.y = a[1] * c + a[5] * b + a[9] * e + a[13], this.z = a[2] * c + a[6] * b + a[10] * e + a[14], this;
    }}, {key:"applyQuaternion", value:function(a) {
      var c = this.x, b = this.y, e = this.z, f = a.x, d = a.y, h = a.z;
      a = a.w;
      var g = a * c + d * e - h * b, m = a * b + h * c - f * e, p = a * e + f * b - d * c;
      c = -f * c - d * b - h * e;
      return this.x = g * a + c * -f + m * -h - p * -d, this.y = m * a + c * -d + p * -f - g * -h, this.z = p * a + c * -h + g * -d - m * -f, this;
    }}, {key:"negate", value:function() {
      return this.x = -this.x, this.y = -this.y, this.z = -this.z, this;
    }}, {key:"dot", value:function(a) {
      return this.x * a.x + this.y * a.y + this.z * a.z;
    }}, {key:"reflect", value:function(a) {
      var c = a.x, b = a.y, e = a.z;
      return this.sub(a.multiplyScalar(2 * this.dot(a))), a.set(c, b, e), this;
    }}, {key:"angleTo", value:function(a) {
      a = this.dot(a) / R(this.lengthSquared() * a.lengthSquared());
      return J(S(M(a, -1), 1));
    }}, {key:"manhattanLength", value:function() {
      return K(this.x) + K(this.y) + K(this.z);
    }}, {key:"lengthSquared", value:function() {
      return this.x * this.x + this.y * this.y + this.z * this.z;
    }}, {key:"length", value:function() {
      return R(this.x * this.x + this.y * this.y + this.z * this.z);
    }}, {key:"manhattanDistanceTo", value:function(a) {
      return K(this.x - a.x) + K(this.y - a.y) + K(this.z - a.z);
    }}, {key:"distanceToSquared", value:function(a) {
      var c = this.x - a.x, b = this.y - a.y;
      a = this.z - a.z;
      return c * c + b * b + a * a;
    }}, {key:"distanceTo", value:function(a) {
      return R(this.distanceToSquared(a));
    }}, {key:"normalize", value:function() {
      return this.divideScalar(this.length());
    }}, {key:"setLength", value:function(a) {
      return this.normalize().multiplyScalar(a);
    }}, {key:"min", value:function(a) {
      return this.x = S(this.x, a.x), this.y = S(this.y, a.y), this.z = S(this.z, a.z), this;
    }}, {key:"max", value:function(a) {
      return this.x = M(this.x, a.x), this.y = M(this.y, a.y), this.z = M(this.z, a.z), this;
    }}, {key:"clamp", value:function(a, c) {
      return this.x = M(a.x, S(c.x, this.x)), this.y = M(a.y, S(c.y, this.y)), this.z = M(a.z, S(c.z, this.z)), this;
    }}, {key:"floor", value:function() {
      return this.x = I(this.x), this.y = I(this.y), this.z = I(this.z), this;
    }}, {key:"ceil", value:function() {
      return this.x = E(this.x), this.y = E(this.y), this.z = E(this.z), this;
    }}, {key:"round", value:function() {
      return this.x = B(this.x), this.y = B(this.y), this.z = B(this.z), this;
    }}, {key:"lerp", value:function(a, c) {
      return this.x += (a.x - this.x) * c, this.y += (a.y - this.y) * c, this.z += (a.z - this.z) * c, this;
    }}, {key:"lerpVectors", value:function(a, c, b) {
      return this.subVectors(c, a).multiplyScalar(b).add(a);
    }}, {key:"equals", value:function(a) {
      return a.x === this.x && a.y === this.y && a.z === this.z;
    }}]), a;
  }(), Z = new O, Q = [new O, new O, new O, new O, new O, new O, new O, new O], U = function() {
    function a() {
      var c = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : new O(1 / 0, 1 / 0, 1 / 0), b = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : new O(-Infinity, -Infinity, -Infinity);
      d(this, a);
      this.min = c;
      this.max = b;
    }
    return b(a, [{key:"set", value:function(a, c) {
      return this.min.copy(a), this.max.copy(c), this;
    }}, {key:"copy", value:function(a) {
      return this.min.copy(a.min), this.max.copy(a.max), this;
    }}, {key:"clone", value:function() {
      return (new this.constructor).copy(this);
    }}, {key:"makeEmpty", value:function() {
      return this.min.x = this.min.y = this.min.z = 1 / 0, this.max.x = this.max.y = this.max.z = -Infinity, this;
    }}, {key:"isEmpty", value:function() {
      return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
    }}, {key:"getCenter", value:function() {
      var a = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : new O;
      return this.isEmpty() ? a.set(0, 0, 0) : a.addVectors(this.min, this.max).multiplyScalar(.5);
    }}, {key:"getSize", value:function() {
      var a = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : new O;
      return this.isEmpty() ? a.set(0, 0, 0) : a.subVectors(this.max, this.min);
    }}, {key:"setFromSphere", value:function(a) {
      return this.set(a.center, a.center), this.expandByScalar(a.radius), this;
    }}, {key:"expandByPoint", value:function(a) {
      return this.min.min(a), this.max.max(a), this;
    }}, {key:"expandByVector", value:function(a) {
      return this.min.sub(a), this.max.add(a), this;
    }}, {key:"expandByScalar", value:function(a) {
      return this.min.addScalar(-a), this.max.addScalar(a), this;
    }}, {key:"setFromPoints", value:function(a) {
      var c;
      this.min.set(0, 0, 0);
      this.max.set(0, 0, 0);
      var b = 0;
      for (c = a.length; b < c; ++b) {
        this.expandByPoint(a[b]);
      }
      return this;
    }}, {key:"setFromCenterAndSize", value:function(a, c) {
      c = Z.copy(c).multiplyScalar(.5);
      return this.min.copy(a).sub(c), this.max.copy(a).add(c), this;
    }}, {key:"clampPoint", value:function(a) {
      return (1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : new O).copy(a).clamp(this.min, this.max);
    }}, {key:"distanceToPoint", value:function(a) {
      return Z.copy(a).clamp(this.min, this.max).sub(a).length();
    }}, {key:"applyMatrix4", value:function(a) {
      var c = this.min, b = this.max;
      return this.isEmpty() || (Q[0].set(c.x, c.y, c.z).applyMatrix4(a), Q[1].set(c.x, c.y, b.z).applyMatrix4(a), Q[2].set(c.x, b.y, c.z).applyMatrix4(a), Q[3].set(c.x, b.y, b.z).applyMatrix4(a), Q[4].set(b.x, c.y, c.z).applyMatrix4(a), Q[5].set(b.x, c.y, b.z).applyMatrix4(a), Q[6].set(b.x, b.y, c.z).applyMatrix4(a), Q[7].set(b.x, b.y, b.z).applyMatrix4(a), this.setFromPoints(Q)), this;
    }}, {key:"translate", value:function(a) {
      return this.min.add(a), this.max.add(a), this;
    }}, {key:"intersect", value:function(a) {
      return this.min.max(a.min), this.max.min(a.max), this.isEmpty() && this.makeEmpty(), this;
    }}, {key:"union", value:function(a) {
      return this.min.min(a.min), this.max.max(a.max), this;
    }}, {key:"containsPoint", value:function(a) {
      var c = this.min, b = this.max;
      return a.x >= c.x && a.y >= c.y && a.z >= c.z && a.x <= b.x && a.y <= b.y && a.z <= b.z;
    }}, {key:"containsBox", value:function(a) {
      var c = this.min, b = this.max, e = a.min;
      a = a.max;
      return c.x <= e.x && a.x <= b.x && c.y <= e.y && a.y <= b.y && c.z <= e.z && a.z <= b.z;
    }}, {key:"intersectsBox", value:function(a) {
      var c = this.min, b = this.max, e = a.min;
      a = a.max;
      return a.x >= c.x && a.y >= c.y && a.z >= c.z && e.x <= b.x && e.y <= b.y && e.z <= b.z;
    }}, {key:"intersectsSphere", value:function(a) {
      return this.clampPoint(a.center, Z).distanceToSquared(a.center) <= a.radius * a.radius;
    }}, {key:"intersectsPlane", value:function(a) {
      var c, b;
      return 0 < a.normal.x ? (c = a.normal.x * this.min.x, b = a.normal.x * this.max.x) : (c = a.normal.x * this.max.x, b = a.normal.x * this.min.x), 0 < a.normal.y ? (c += a.normal.y * this.min.y, b += a.normal.y * this.max.y) : (c += a.normal.y * this.max.y, b += a.normal.y * this.min.y), 0 < a.normal.z ? (c += a.normal.z * this.min.z, b += a.normal.z * this.max.z) : (c += a.normal.z * this.max.z, b += a.normal.z * this.min.z), c <= -a.constant && b >= -a.constant;
    }}, {key:"equals", value:function(a) {
      return a.min.equals(this.min) && a.max.equals(this.max);
    }}]), a;
  }(), P = new U, da = new O, N = function() {
    function a() {
      var c = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : new O, b = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0;
      d(this, a);
      this.center = c;
      this.radius = b;
    }
    return b(a, [{key:"set", value:function(a, c) {
      return this.center.copy(a), this.radius = c, this;
    }}, {key:"copy", value:function(a) {
      return this.center.copy(a.center), this.radius = a.radius, this;
    }}, {key:"clone", value:function() {
      return (new this.constructor).copy(this);
    }}, {key:"setFromPoints", value:function(a) {
      var c, b = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : P.setFromPoints(a).getCenter(this.center), e = 0;
      var f = 0;
      for (c = a.length; f < c; ++f) {
        e = M(e, b.distanceToSquared(a[f]));
      }
      return this.radius = R(e), this;
    }}, {key:"setFromBox", value:function(a) {
      return a.getCenter(this.center), this.radius = .5 * a.getSize(da).length(), this;
    }}, {key:"isEmpty", value:function() {
      return 0 >= this.radius;
    }}, {key:"translate", value:function(a) {
      return this.center.add(a), this;
    }}, {key:"clampPoint", value:function(a) {
      var c = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : new O, b = this.center.distanceToSquared(a);
      return c.copy(a), b > this.radius * this.radius && (c.sub(this.center).normalize(), c.multiplyScalar(this.radius).add(this.center)), c;
    }}, {key:"distanceToPoint", value:function(a) {
      return a.distanceTo(this.center) - this.radius;
    }}, {key:"containsPoint", value:function(a) {
      return a.distanceToSquared(this.center) <= this.radius * this.radius;
    }}, {key:"intersectsSphere", value:function(a) {
      var c = this.radius + a.radius;
      return a.center.distanceToSquared(this.center) <= c * c;
    }}, {key:"intersectsBox", value:function(a) {
      return a.intersectsSphere(this);
    }}, {key:"intersectsPlane", value:function(a) {
      return K(a.distanceToPoint(this.center)) <= this.radius;
    }}, {key:"equals", value:function(a) {
      return a.center.equals(this.center) && a.radius === this.radius;
    }}]), a;
  }(), V = function() {
    function a() {
      var c = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : 0, b = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0;
      d(this, a);
      this.x = c;
      this.y = b;
    }
    return b(a, [{key:"set", value:function(a, c) {
      return this.x = a, this.y = c, this;
    }}, {key:"copy", value:function(a) {
      return this.x = a.x, this.y = a.y, this;
    }}, {key:"clone", value:function() {
      return new this.constructor(this.x, this.y);
    }}, {key:"fromArray", value:function(a) {
      var c = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0;
      return this.x = a[c], this.y = a[c + 1], this;
    }}, {key:"toArray", value:function() {
      var a = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : [], c = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0;
      return a[c] = this.x, a[c + 1] = this.y, a;
    }}, {key:"add", value:function(a) {
      return this.x += a.x, this.y += a.y, this;
    }}, {key:"addScalar", value:function(a) {
      return this.x += a, this.y += a, this;
    }}, {key:"addVectors", value:function(a, c) {
      return this.x = a.x + c.x, this.y = a.y + c.y, this;
    }}, {key:"addScaledVector", value:function(a, c) {
      return this.x += a.x * c, this.y += a.y * c, this;
    }}, {key:"sub", value:function(a) {
      return this.x -= a.x, this.y -= a.y, this;
    }}, {key:"subScalar", value:function(a) {
      return this.x -= a, this.y -= a, this;
    }}, {key:"subVectors", value:function(a, c) {
      return this.x = a.x - c.x, this.y = a.y - c.y, this;
    }}, {key:"multiply", value:function(a) {
      return this.x *= a.x, this.y *= a.y, this;
    }}, {key:"multiplyScalar", value:function(a) {
      return this.x *= a, this.y *= a, this;
    }}, {key:"divide", value:function(a) {
      return this.x /= a.x, this.y /= a.y, this;
    }}, {key:"divideScalar", value:function(a) {
      return this.x /= a, this.y /= a, this;
    }}, {key:"applyMatrix3", value:function(a) {
      var c = this.x, b = this.y;
      a = a.elements;
      return this.x = a[0] * c + a[3] * b + a[6], this.y = a[1] * c + a[4] * b + a[7], this;
    }}, {key:"dot", value:function(a) {
      return this.x * a.x + this.y * a.y;
    }}, {key:"cross", value:function(a) {
      return this.x * a.y - this.y * a.x;
    }}, {key:"manhattanLength", value:function() {
      return K(this.x) + K(this.y);
    }}, {key:"lengthSquared", value:function() {
      return this.x * this.x + this.y * this.y;
    }}, {key:"length", value:function() {
      return R(this.x * this.x + this.y * this.y);
    }}, {key:"manhattanDistanceTo", value:function(a) {
      return K(this.x - a.x) + K(this.y - a.y);
    }}, {key:"distanceToSquared", value:function(a) {
      var c = this.x - a.x;
      a = this.y - a.y;
      return c * c + a * a;
    }}, {key:"distanceTo", value:function(a) {
      return R(this.distanceToSquared(a));
    }}, {key:"normalize", value:function() {
      return this.divideScalar(this.length());
    }}, {key:"setLength", value:function(a) {
      return this.normalize().multiplyScalar(a);
    }}, {key:"min", value:function(a) {
      return this.x = S(this.x, a.x), this.y = S(this.y, a.y), this;
    }}, {key:"max", value:function(a) {
      return this.x = M(this.x, a.x), this.y = M(this.y, a.y), this;
    }}, {key:"clamp", value:function(a, c) {
      return this.x = M(a.x, S(c.x, this.x)), this.y = M(a.y, S(c.y, this.y)), this;
    }}, {key:"floor", value:function() {
      return this.x = I(this.x), this.y = I(this.y), this;
    }}, {key:"ceil", value:function() {
      return this.x = E(this.x), this.y = E(this.y), this;
    }}, {key:"round", value:function() {
      return this.x = B(this.x), this.y = B(this.y), this;
    }}, {key:"negate", value:function() {
      return this.x = -this.x, this.y = -this.y, this;
    }}, {key:"angle", value:function() {
      var a = F(this.y, this.x);
      return 0 > a && (a += 2 * D), a;
    }}, {key:"lerp", value:function(a, c) {
      return this.x += (a.x - this.x) * c, this.y += (a.y - this.y) * c, this;
    }}, {key:"lerpVectors", value:function(a, c, b) {
      return this.subVectors(c, a).multiplyScalar(b).add(a);
    }}, {key:"rotateAround", value:function(a, c) {
      var b = L(c);
      c = H(c);
      var e = this.x - a.x, f = this.y - a.y;
      return this.x = e * b - f * c + a.x, this.y = e * c + f * b + a.y, this;
    }}, {key:"equals", value:function(a) {
      return a.x === this.x && a.y === this.y;
    }}, {key:"width", get:function() {
      return this.x;
    }, set:function(a) {
      return this.x = a;
    }}, {key:"height", get:function() {
      return this.y;
    }, set:function(a) {
      return this.y = a;
    }}]), a;
  }(), ea = new V;
  (function() {
    function a() {
      var c = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : new V(1 / 0, 1 / 0), b = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : new V(-Infinity, -Infinity);
      d(this, a);
      this.min = c;
      this.max = b;
    }
    return b(a, [{key:"set", value:function(a, c) {
      return this.min.copy(a), this.max.copy(c), this;
    }}, {key:"copy", value:function(a) {
      return this.min.copy(a.min), this.max.copy(a.max), this;
    }}, {key:"clone", value:function() {
      return (new this.constructor).copy(this);
    }}, {key:"makeEmpty", value:function() {
      return this.min.x = this.min.y = 1 / 0, this.max.x = this.max.y = -Infinity, this;
    }}, {key:"isEmpty", value:function() {
      return this.max.x < this.min.x || this.max.y < this.min.y;
    }}, {key:"getCenter", value:function() {
      var a = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : new V;
      return this.isEmpty() ? a.set(0, 0) : a.addVectors(this.min, this.max).multiplyScalar(.5);
    }}, {key:"getSize", value:function() {
      var a = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : new V;
      return this.isEmpty() ? a.set(0, 0) : a.subVectors(this.max, this.min);
    }}, {key:"getBoundingSphere", value:function() {
      var a = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : new N;
      return this.getCenter(a.center), a.radius = .5 * this.getSize(ea).length(), a;
    }}, {key:"expandByPoint", value:function(a) {
      return this.min.min(a), this.max.max(a), this;
    }}, {key:"expandByVector", value:function(a) {
      return this.min.sub(a), this.max.add(a), this;
    }}, {key:"expandByScalar", value:function(a) {
      return this.min.addScalar(-a), this.max.addScalar(a), this;
    }}, {key:"setFromPoints", value:function(a) {
      var c;
      this.min.set(0, 0);
      this.max.set(0, 0);
      var b = 0;
      for (c = a.length; b < c; ++b) {
        this.expandByPoint(a[b]);
      }
      return this;
    }}, {key:"setFromCenterAndSize", value:function(a, c) {
      c = ea.copy(c).multiplyScalar(.5);
      return this.min.copy(a).sub(c), this.max.copy(a).add(c), this;
    }}, {key:"clampPoint", value:function(a) {
      return (1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : new V).copy(a).clamp(this.min, this.max);
    }}, {key:"distanceToPoint", value:function(a) {
      return ea.copy(a).clamp(this.min, this.max).sub(a).length();
    }}, {key:"translate", value:function(a) {
      return this.min.add(a), this.max.add(a), this;
    }}, {key:"intersect", value:function(a) {
      return this.min.max(a.min), this.max.min(a.max), this.isEmpty() && this.makeEmpty(), this;
    }}, {key:"union", value:function(a) {
      return this.min.min(a.min), this.max.max(a.max), this;
    }}, {key:"containsPoint", value:function(a) {
      var c = this.min, b = this.max;
      return a.x >= c.x && a.y >= c.y && a.x <= b.x && a.y <= b.y;
    }}, {key:"containsBox", value:function(a) {
      var c = this.min, b = this.max, e = a.min;
      a = a.max;
      return c.x <= e.x && a.x <= b.x && c.y <= e.y && a.y <= b.y;
    }}, {key:"intersectsBox", value:function(a) {
      var c = this.min, b = this.max, e = a.min;
      a = a.max;
      return a.x >= c.x && a.y >= c.y && e.x <= b.x && e.y <= b.y;
    }}, {key:"equals", value:function(a) {
      return a.min.equals(this.min) && a.max.equals(this.max);
    }}]), a;
  })();
  (function() {
    function a() {
      var c = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : 1, b = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0, e = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : 0;
      d(this, a);
      this.radius = c;
      this.theta = b;
      this.y = e;
    }
    return b(a, [{key:"set", value:function(a, c, b) {
      return this.radius = a, this.theta = c, this.y = b, this;
    }}, {key:"copy", value:function(a) {
      return this.radius = a.radius, this.theta = a.theta, this.y = a.y, this;
    }}, {key:"clone", value:function() {
      return (new this.constructor).copy(this);
    }}, {key:"setFromVector3", value:function(a) {
      return this.setFromCartesianCoords(a.x, a.y, a.z);
    }}, {key:"setFromCartesianCoords", value:function(a, c, b) {
      return this.radius = R(a * a + b * b), this.theta = F(a, b), this.y = c, this;
    }}]), a;
  })();
  var ha = function() {
    function a() {
      d(this, a);
      this.elements = new Float32Array([1, 0, 0, 0, 1, 0, 0, 0, 1]);
    }
    return b(a, [{key:"set", value:function(a, c, b, e, f, d, h, g, m) {
      var p = this.elements;
      return p[0] = a, p[3] = c, p[6] = b, p[1] = e, p[4] = f, p[7] = d, p[2] = h, p[5] = g, p[8] = m, this;
    }}, {key:"identity", value:function() {
      return this.set(1, 0, 0, 0, 1, 0, 0, 0, 1), this;
    }}, {key:"copy", value:function(a) {
      a = a.elements;
      var c = this.elements;
      return c[0] = a[0], c[1] = a[1], c[2] = a[2], c[3] = a[3], c[4] = a[4], c[5] = a[5], c[6] = a[6], c[7] = a[7], c[8] = a[8], this;
    }}, {key:"clone", value:function() {
      return (new this.constructor).fromArray(this.elements);
    }}, {key:"fromArray", value:function(a) {
      var c, b = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0, e = this.elements;
      for (c = 0; 9 > c; ++c) {
        e[c] = a[c + b];
      }
      return this;
    }}, {key:"toArray", value:function() {
      var a, c = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : [], b = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0, e = this.elements;
      for (a = 0; 9 > a; ++a) {
        c[a + b] = e[a];
      }
      return c;
    }}, {key:"multiplyMatrices", value:function(a, c) {
      var b = a.elements, e = c.elements;
      c = this.elements;
      a = b[0];
      var f = b[3], d = b[6], h = b[1], g = b[4], m = b[7], p = b[2], n = b[5];
      b = b[8];
      var k = e[0], q = e[3], r = e[6], v = e[1], t = e[4], w = e[7], z = e[2], y = e[5];
      e = e[8];
      return c[0] = a * k + f * v + d * z, c[3] = a * q + f * t + d * y, c[6] = a * r + f * w + d * e, c[1] = h * k + g * v + m * z, c[4] = h * q + g * t + m * y, c[7] = h * r + g * w + m * e, c[2] = p * k + n * v + b * z, c[5] = p * q + n * t + b * y, c[8] = p * r + n * w + b * e, this;
    }}, {key:"multiply", value:function(a) {
      return this.multiplyMatrices(this, a);
    }}, {key:"premultiply", value:function(a) {
      return this.multiplyMatrices(a, this);
    }}, {key:"multiplyScalar", value:function(a) {
      var c = this.elements;
      return c[0] *= a, c[3] *= a, c[6] *= a, c[1] *= a, c[4] *= a, c[7] *= a, c[2] *= a, c[5] *= a, c[8] *= a, this;
    }}, {key:"determinant", value:function() {
      var a = this.elements, c = a[0], b = a[1], e = a[2], f = a[3], d = a[4], h = a[5], g = a[6], m = a[7];
      a = a[8];
      return c * d * a - c * h * m - b * f * a + b * h * g + e * f * m - e * d * g;
    }}, {key:"getInverse", value:function(a) {
      var c, b = a.elements, e = this.elements, f = b[0], d = b[1], h = b[2], g = b[3], m = b[4], p = b[5], n = b[6], k = b[7];
      b = b[8];
      var q = b * m - p * k, r = p * n - b * g, v = k * g - m * n, t = f * q + d * r + h * v;
      return 0 === t ? (console.error("Can't invert matrix, determinant is zero", a), this.identity()) : (c = 1 / t, e[0] = q * c, e[1] = (h * k - b * d) * c, e[2] = (p * d - h * m) * c, e[3] = r * c, e[4] = (b * f - h * n) * c, e[5] = (h * g - p * f) * c, e[6] = v * c, e[7] = (d * n - k * f) * c, e[8] = (m * f - d * g) * c), this;
    }}, {key:"transpose", value:function() {
      var a, c = this.elements;
      return a = c[1], c[1] = c[3], c[3] = a, a = c[2], c[2] = c[6], c[6] = a, a = c[5], c[5] = c[7], c[7] = a, this;
    }}, {key:"scale", value:function(a, c) {
      var b = this.elements;
      return b[0] *= a, b[3] *= a, b[6] *= a, b[1] *= c, b[4] *= c, b[7] *= c, this;
    }}, {key:"rotate", value:function(a) {
      var c = L(a);
      a = H(a);
      var b = this.elements, e = b[0], f = b[3], d = b[6], h = b[1], g = b[4], m = b[7];
      return b[0] = c * e + a * h, b[3] = c * f + a * g, b[6] = c * d + a * m, b[1] = -a * e + c * h, b[4] = -a * f + c * g, b[7] = -a * d + c * m, this;
    }}, {key:"translate", value:function(a, c) {
      var b = this.elements;
      return b[0] += a * b[2], b[3] += a * b[5], b[6] += a * b[8], b[1] += c * b[2], b[4] += c * b[5], b[7] += c * b[8], this;
    }}, {key:"equals", value:function(a) {
      var c = this.elements, b = a.elements, e = !0;
      for (a = 0; e && 9 > a; ++a) {
        c[a] !== b[a] && (e = !1);
      }
      return e;
    }}]), a;
  }(), W = new O, la = function() {
    function a() {
      var c = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : 0, b = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0, e = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : 0, f = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : 0;
      d(this, a);
      this.x = c;
      this.y = b;
      this.z = e;
      this.w = f;
    }
    var c = Number.EPSILON;
    return b(a, [{key:"set", value:function(a, c, b, e) {
      return this.x = a, this.y = c, this.z = b, this.w = e, this;
    }}, {key:"copy", value:function(a) {
      return this.x = a.x, this.y = a.y, this.z = a.z, this.w = a.w, this;
    }}, {key:"clone", value:function() {
      return new this.constructor(this.x, this.y, this.z, this.w);
    }}, {key:"fromArray", value:function(a) {
      var c = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0;
      return this.x = a[c], this.y = a[c + 1], this.z = a[c + 2], this.w = a[c + 3], this;
    }}, {key:"toArray", value:function() {
      var a = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : [], c = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0;
      return a[c] = this.x, a[c + 1] = this.y, a[c + 2] = this.z, a[c + 3] = this.w, a;
    }}, {key:"setFromEuler", value:function(a) {
      var c = a.x, b = a.y, e = a.z, f = L(c / 2), d = L(b / 2), h = L(e / 2);
      c = H(c / 2);
      b = H(b / 2);
      e = H(e / 2);
      switch(a.order) {
        case "XYZ":
          this.x = c * d * h + f * b * e;
          this.y = f * b * h - c * d * e;
          this.z = f * d * e + c * b * h;
          this.w = f * d * h - c * b * e;
          break;
        case "YXZ":
          this.x = c * d * h + f * b * e;
          this.y = f * b * h - c * d * e;
          this.z = f * d * e - c * b * h;
          this.w = f * d * h + c * b * e;
          break;
        case "ZXY":
          this.x = c * d * h - f * b * e;
          this.y = f * b * h + c * d * e;
          this.z = f * d * e + c * b * h;
          this.w = f * d * h - c * b * e;
          break;
        case "ZYX":
          this.x = c * d * h - f * b * e;
          this.y = f * b * h + c * d * e;
          this.z = f * d * e - c * b * h;
          this.w = f * d * h + c * b * e;
          break;
        case "YZX":
          this.x = c * d * h + f * b * e;
          this.y = f * b * h + c * d * e;
          this.z = f * d * e - c * b * h;
          this.w = f * d * h - c * b * e;
          break;
        case "XZY":
          this.x = c * d * h - f * b * e, this.y = f * b * h - c * d * e, this.z = f * d * e + c * b * h, this.w = f * d * h + c * b * e;
      }
      return this;
    }}, {key:"setFromAxisAngle", value:function(a, c) {
      c /= 2;
      var b = H(c);
      return this.x = a.x * b, this.y = a.y * b, this.z = a.z * b, this.w = L(c), this;
    }}, {key:"setFromRotationMatrix", value:function(a) {
      var c, b = a.elements;
      a = b[0];
      var e = b[4], f = b[8], d = b[1], h = b[5], g = b[9], m = b[2], p = b[6];
      b = b[10];
      var n = a + h + b;
      return 0 < n ? (c = .5 / R(n + 1), this.w = .25 / c, this.x = (p - g) * c, this.y = (f - m) * c, this.z = (d - e) * c) : a > h && a > b ? (c = 2 * R(1 + a - h - b), this.w = (p - g) / c, this.x = .25 * c, this.y = (e + d) / c, this.z = (f + m) / c) : h > b ? (c = 2 * R(1 + h - a - b), this.w = (f - m) / c, this.x = (e + d) / c, this.y = .25 * c, this.z = (g + p) / c) : (c = 2 * R(1 + b - a - h), this.w = (d - e) / c, this.x = (f + m) / c, this.y = (g + p) / c, this.z = .25 * c), this;
    }}, {key:"setFromUnitVectors", value:function(a, c) {
      var b = a.dot(c) + 1;
      return 1E-6 > b ? (b = 0, K(a.x) > K(a.z) ? W.set(-a.y, a.x, 0) : W.set(0, -a.z, a.y)) : W.crossVectors(a, c), this.x = W.x, this.y = W.y, this.z = W.z, this.w = b, this.normalize();
    }}, {key:"angleTo", value:function(a) {
      return 2 * J(K(S(M(this.dot(a), -1), 1)));
    }}, {key:"rotateTowards", value:function(a, c) {
      var b = this.angleTo(a);
      return 0 !== b && this.slerp(a, S(1, c / b)), this;
    }}, {key:"invert", value:function() {
      return this.conjugate();
    }}, {key:"conjugate", value:function() {
      return this.x *= -1, this.y *= -1, this.z *= -1, this;
    }}, {key:"lengthSquared", value:function() {
      return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
    }}, {key:"length", value:function() {
      return R(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
    }}, {key:"normalize", value:function() {
      var a, c = this.length();
      return 0 === c ? (this.x = 0, this.y = 0, this.z = 0, this.w = 1) : (a = 1 / c, this.x *= a, this.y *= a, this.z *= a, this.w *= a), this;
    }}, {key:"dot", value:function(a) {
      return this.x * a.x + this.y * a.y + this.z * a.z + this.w * a.w;
    }}, {key:"multiplyQuaternions", value:function(a, c) {
      var b = a.x, e = a.y, f = a.z;
      a = a.w;
      var d = c.x, h = c.y, g = c.z;
      c = c.w;
      return this.x = b * c + a * d + e * g - f * h, this.y = e * c + a * h + f * d - b * g, this.z = f * c + a * g + b * h - e * d, this.w = a * c - b * d - e * h - f * g, this;
    }}, {key:"multiply", value:function(a) {
      return this.multiplyQuaternions(this, a);
    }}, {key:"premultiply", value:function(a) {
      return this.multiplyQuaternions(a, this);
    }}, {key:"slerp", value:function(a, b) {
      var e, f, d, h, g, m, p, n = this.x, k = this.y, q = this.z, r = this.w;
      return 1 === b ? this.copy(a) : 0 < b && (e = r * a.w + n * a.x + k * a.y + q * a.z, 0 > e ? (this.w = -a.w, this.x = -a.x, this.y = -a.y, this.z = -a.z, e = -e) : this.copy(a), 1 <= e ? (this.w = r, this.x = n, this.y = k, this.z = q) : (f = 1 - e * e, g = 1 - b, f <= c ? (this.w = g * r + b * this.w, this.x = g * n + b * this.x, this.y = g * k + b * this.y, this.z = g * q + b * this.z, this.normalize()) : (d = R(f), h = F(d, e), m = H(g * h) / d, p = H(b * h) / d, this.w = r * m + this.w * 
      p, this.x = n * m + this.x * p, this.y = k * m + this.y * p, this.z = q * m + this.z * p))), this;
    }}, {key:"equals", value:function(a) {
      return a.x === this.x && a.y === this.y && a.z === this.z && a.w === this.w;
    }}], [{key:"slerp", value:function(a, c, b, e) {
      return b.copy(a).slerp(c, e);
    }}, {key:"slerpFlat", value:function(a, b, e, f, d, h, g) {
      var m, p, n, k, q, r, v, t, w = d[h], z = d[h + 1], y = d[h + 2];
      d = d[h + 3];
      h = e[f];
      var x = e[f + 1], C = e[f + 2];
      e = e[f + 3];
      (e !== d || h !== w || x !== z || C !== y) && (m = 1 - g, k = h * w + x * z + C * y + e * d, r = 0 <= k ? 1 : -1, q = 1 - k * k, q > c && (n = R(q), v = F(n, k * r), m = H(m * v) / n, g = H(g * v) / n), t = g * r, h = h * m + w * t, x = x * m + z * t, C = C * m + y * t, e = e * m + d * t, m === 1 - g && (p = 1 / R(h * h + x * x + C * C + e * e), h *= p, x *= p, C *= p, e *= p));
      a[b] = h;
      a[b + 1] = x;
      a[b + 2] = C;
      a[b + 3] = e;
    }}]), a;
  }(), X = new ha, ka = new la;
  (function() {
    function a() {
      var c = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : 0, b = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0, e = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : 0;
      d(this, a);
      this.x = c;
      this.y = b;
      this.z = e;
      this.order = a.defaultOrder;
    }
    return b(a, [{key:"set", value:function(a, c, b, e) {
      return this.x = a, this.y = c, this.z = b, this.order = e, this;
    }}, {key:"copy", value:function(a) {
      return this.x = a.x, this.y = a.y, this.z = a.z, this.order = a.order, this;
    }}, {key:"clone", value:function() {
      return new this.constructor(this.x, this.y, this.z, this.order);
    }}, {key:"fromArray", value:function(a) {
      var c = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0;
      return this.x = a[c], this.y = a[c + 1], this.z = a[c + 2], this.order = a[c + 3], this;
    }}, {key:"toArray", value:function() {
      var a = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : [], c = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0;
      return a[c] = this.x, a[c + 1] = this.y, a[c + 2] = this.z, a[c + 3] = this.order, a;
    }}, {key:"toVector3", value:function() {
      return (0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : new O).set(this.x, this.y, this.z);
    }}, {key:"setFromRotationMatrix", value:function(a) {
      var c = Math.asin, b = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : this.order, e = a.elements, f = e[0], d = e[4], h = e[8], g = e[1], m = e[5], p = e[9], n = e[2], k = e[6];
      e = e[10];
      switch(b) {
        case "XYZ":
          this.y = c(M(S(h, 1), -1));
          .99999 > K(h) ? (this.x = F(-p, e), this.z = F(-d, f)) : (this.x = F(k, m), this.z = 0);
          break;
        case "YXZ":
          this.x = c(-M(S(p, 1), -1));
          .99999 > K(p) ? (this.y = F(h, e), this.z = F(g, m)) : (this.y = F(-n, f), this.z = 0);
          break;
        case "ZXY":
          this.x = c(M(S(k, 1), -1));
          .99999 > K(k) ? (this.y = F(-n, e), this.z = F(-d, m)) : (this.y = 0, this.z = F(g, f));
          break;
        case "ZYX":
          this.y = c(-M(S(n, 1), -1));
          .99999 > K(n) ? (this.x = F(k, e), this.z = F(g, f)) : (this.x = 0, this.z = F(-d, m));
          break;
        case "YZX":
          this.z = c(M(S(g, 1), -1));
          .99999 > K(g) ? (this.x = F(-p, m), this.y = F(-n, f)) : (this.x = 0, this.y = F(h, e));
          break;
        case "XZY":
          this.z = c(-M(S(d, 1), -1)), .99999 > K(d) ? (this.x = F(k, m), this.y = F(h, f)) : (this.x = F(-p, e), this.y = 0);
      }
      return this.order = b, this;
    }}, {key:"setFromQuaternion", value:function(a, c) {
      return X.makeRotationFromQuaternion(a), this.setFromRotationMatrix(X, c);
    }}, {key:"setFromVector3", value:function(a) {
      return this.set(a.x, a.y, a.z, 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : this.order);
    }}, {key:"reorder", value:function(a) {
      return ka.setFromEuler(this), this.setFromQuaternion(ka, a);
    }}, {key:"equals", value:function(a) {
      return a.x === this.x && a.y === this.y && a.z === this.z && a.order === this.order;
    }}], [{key:"defaultOrder", get:function() {
      return "XYZ";
    }}]), a;
  })();
  var T = new O, ia = new O, sa = function() {
    function a() {
      var c = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : new O(1, 0, 0), b = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0;
      d(this, a);
      this.normal = c;
      this.constant = b;
    }
    return b(a, [{key:"set", value:function(a, c) {
      return this.normal.copy(a), this.constant = c, this;
    }}, {key:"setComponents", value:function(a, c, b, e) {
      return this.normal.set(a, c, b), this.constant = e, this;
    }}, {key:"copy", value:function(a) {
      return this.normal.copy(a.normal), this.constant = a.constant, this;
    }}, {key:"clone", value:function() {
      return (new this.constructor).copy(this);
    }}, {key:"setFromNormalAndCoplanarPoint", value:function(a, c) {
      return this.normal.copy(a), this.constant = -c.dot(this.normal), this;
    }}, {key:"setFromCoplanarPoints", value:function(a, c, b) {
      a = T.subVectors(b, c).cross(ia.subVectors(a, c)).normalize();
      return this.setFromNormalAndCoplanarPoint(a, T), this;
    }}, {key:"normalize", value:function() {
      var a = 1 / this.normal.length();
      return this.normal.multiplyScalar(a), this.constant *= a, this;
    }}, {key:"negate", value:function() {
      return this.normal.negate(), this.constant = -this.constant, this;
    }}, {key:"distanceToPoint", value:function(a) {
      return this.normal.dot(a) + this.constant;
    }}, {key:"distanceToSphere", value:function(a) {
      return this.distanceToPoint(a.center) - a.radius;
    }}, {key:"projectPoint", value:function(a, c) {
      return c.copy(this.normal).multiplyScalar(-this.distanceToPoint(a)).add(a);
    }}, {key:"coplanarPoint", value:function(a) {
      return a.copy(this.normal).multiplyScalar(-this.constant);
    }}, {key:"translate", value:function(a) {
      return this.constant -= a.dot(this.normal), this;
    }}, {key:"intersectLine", value:function(a, c) {
      var b = a.delta(T), e = this.normal.dot(b);
      0 === e ? 0 === this.distanceToPoint(a.start) && c.copy(a.start) : (e = -(a.start.dot(this.normal) + this.constant) / e, 0 <= e && 1 >= e && c.copy(b).multiplyScalar(e).add(a.start));
      return c;
    }}, {key:"intersectsLine", value:function(a) {
      var c = this.distanceToPoint(a.start);
      a = this.distanceToPoint(a.end);
      return 0 > c && 0 < a || 0 > a && 0 < c;
    }}, {key:"intersectsBox", value:function(a) {
      return a.intersectsPlane(this);
    }}, {key:"intersectsSphere", value:function(a) {
      return a.intersectsPlane(this);
    }}, {key:"equals", value:function(a) {
      return a.normal.equals(this.normal) && a.constant === this.constant;
    }}]), a;
  }(), va = new O;
  (function() {
    function a() {
      var c = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : new sa, b = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : new sa, e = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : new sa, f = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : new sa, h = 4 < arguments.length && void 0 !== arguments[4] ? arguments[4] : new sa, g = 5 < arguments.length && void 0 !== arguments[5] ? arguments[5] : new sa;
      d(this, a);
      this.planes = [c, b, e, f, h, g];
    }
    return b(a, [{key:"set", value:function(a, c, b, e, f, d) {
      var h = this.planes;
      return h[0].copy(a), h[1].copy(c), h[2].copy(b), h[3].copy(e), h[4].copy(f), h[5].copy(d), this;
    }}, {key:"clone", value:function() {
      return (new this.constructor).copy(this);
    }}, {key:"copy", value:function(a) {
      var c, b = this.planes;
      for (c = 0; 6 > c; ++c) {
        b[c].copy(a.planes[c]);
      }
      return this;
    }}, {key:"setFromMatrix", value:function(a) {
      var c = this.planes, b = a.elements;
      a = b[0];
      var e = b[1], f = b[2], d = b[3], h = b[4], g = b[5], m = b[6], p = b[7], n = b[8], k = b[9], q = b[10], r = b[11], v = b[12], t = b[13], w = b[14];
      b = b[15];
      return c[0].setComponents(d - a, p - h, r - n, b - v).normalize(), c[1].setComponents(d + a, p + h, r + n, b + v).normalize(), c[2].setComponents(d + e, p + g, r + k, b + t).normalize(), c[3].setComponents(d - e, p - g, r - k, b - t).normalize(), c[4].setComponents(d - f, p - m, r - q, b - w).normalize(), c[5].setComponents(d + f, p + m, r + q, b + w).normalize(), this;
    }}, {key:"intersectsSphere", value:function(a) {
      var c, b = this.planes, e = a.center, f = -a.radius, d = !0;
      for (a = 0; 6 > a; ++a) {
        if (c = b[a].distanceToPoint(e), c < f) {
          d = !1;
          break;
        }
      }
      return d;
    }}, {key:"intersectsBox", value:function(a) {
      var c, b = this.planes, e = a.min, f = a.max;
      for (a = 0; 6 > a; ++a) {
        if (c = b[a], va.x = 0 < c.normal.x ? f.x : e.x, va.y = 0 < c.normal.y ? f.y : e.y, va.z = 0 < c.normal.z ? f.z : e.z, 0 > c.distanceToPoint(va)) {
          return !1;
        }
      }
      return !0;
    }}, {key:"containsPoint", value:function(a) {
      var c, b = this.planes, e = !0;
      for (c = 0; 6 > c; ++c) {
        if (0 > b[c].distanceToPoint(a)) {
          e = !1;
          break;
        }
      }
      return e;
    }}]), a;
  })();
  var Ja = new O, Ga = new O;
  (function() {
    function a() {
      var c = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : new O, b = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : new O;
      d(this, a);
      this.start = c;
      this.end = b;
    }
    return b(a, [{key:"set", value:function(a, c) {
      return this.start.copy(a), this.end.copy(c), this;
    }}, {key:"copy", value:function(a) {
      return this.start.copy(a.start), this.end.copy(a.end), this;
    }}, {key:"clone", value:function() {
      return (new this.constructor).copy(this);
    }}, {key:"getCenter", value:function() {
      return (0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : new O).addVectors(this.start, this.end).multiplyScalar(.5);
    }}, {key:"delta", value:function() {
      return (0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : new O).subVectors(this.end, this.start);
    }}, {key:"lengthSquared", value:function() {
      return this.start.distanceToSquared(this.end);
    }}, {key:"length", value:function() {
      return this.start.distanceTo(this.end);
    }}, {key:"at", value:function(a, c) {
      return this.delta(c).multiplyScalar(a).add(this.start);
    }}, {key:"closestPointToPointParameter", value:function(a, c) {
      Ja.subVectors(a, this.start);
      Ga.subVectors(this.end, this.start);
      a = Ga.dot(Ga);
      var b = Ga.dot(Ja);
      return c ? S(M(b / a, 0), 1) : b / a;
    }}, {key:"closestPointToPoint", value:function(a) {
      var c = !!(1 < arguments.length && void 0 !== arguments[1]) && arguments[1], b = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : new O;
      c = this.closestPointToPointParameter(a, c);
      return this.delta(b).multiplyScalar(c).add(this.start);
    }}, {key:"equals", value:function(a) {
      return a.start.equals(this.start) && a.end.equals(this.end);
    }}]), a;
  })();
  var ta = new O, Pb = new O, wa = new O;
  (function() {
    function a() {
      d(this, a);
      this.elements = new Float32Array([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);
    }
    return b(a, [{key:"set", value:function(a, c, b, e, f, d, h, g, m, p, n, k, q, r, v, t) {
      var w = this.elements;
      return w[0] = a, w[4] = c, w[8] = b, w[12] = e, w[1] = f, w[5] = d, w[9] = h, w[13] = g, w[2] = m, w[6] = p, w[10] = n, w[14] = k, w[3] = q, w[7] = r, w[11] = v, w[15] = t, this;
    }}, {key:"identity", value:function() {
      return this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this;
    }}, {key:"copy", value:function(a) {
      a = a.elements;
      var c = this.elements;
      return c[0] = a[0], c[1] = a[1], c[2] = a[2], c[3] = a[3], c[4] = a[4], c[5] = a[5], c[6] = a[6], c[7] = a[7], c[8] = a[8], c[9] = a[9], c[10] = a[10], c[11] = a[11], c[12] = a[12], c[13] = a[13], c[14] = a[14], c[15] = a[15], this;
    }}, {key:"clone", value:function() {
      return (new this.constructor).fromArray(this.elements);
    }}, {key:"fromArray", value:function(a) {
      var c, b = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0, e = this.elements;
      for (c = 0; 16 > c; ++c) {
        e[c] = a[c + b];
      }
      return this;
    }}, {key:"toArray", value:function() {
      var a, c = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : [], b = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0, e = this.elements;
      for (a = 0; 16 > a; ++a) {
        c[a + b] = e[a];
      }
      return c;
    }}, {key:"getMaxScaleOnAxis", value:function() {
      var a = this.elements;
      return R(M(a[0] * a[0] + a[1] * a[1] + a[2] * a[2], a[4] * a[4] + a[5] * a[5] + a[6] * a[6], a[8] * a[8] + a[9] * a[9] + a[10] * a[10]));
    }}, {key:"copyPosition", value:function(a) {
      var c = this.elements;
      a = a.elements;
      return c[12] = a[12], c[13] = a[13], c[14] = a[14], this;
    }}, {key:"setPosition", value:function(a) {
      var c = this.elements;
      return c[12] = a.x, c[13] = a.y, c[14] = a.z, this;
    }}, {key:"extractBasis", value:function(a, c, b) {
      return a.setFromMatrixColumn(this, 0), c.setFromMatrixColumn(this, 1), b.setFromMatrixColumn(this, 2), this;
    }}, {key:"makeBasis", value:function(a, c, b) {
      return this.set(a.x, c.x, b.x, 0, a.y, c.y, b.y, 0, a.z, c.z, b.z, 0, 0, 0, 0, 1), this;
    }}, {key:"extractRotation", value:function(a) {
      var c = this.elements, b = a.elements, e = 1 / ta.setFromMatrixColumn(a, 0).length(), f = 1 / ta.setFromMatrixColumn(a, 1).length();
      a = 1 / ta.setFromMatrixColumn(a, 2).length();
      return c[0] = b[0] * e, c[1] = b[1] * e, c[2] = b[2] * e, c[3] = 0, c[4] = b[4] * f, c[5] = b[5] * f, c[6] = b[6] * f, c[7] = 0, c[8] = b[8] * a, c[9] = b[9] * a, c[10] = b[10] * a, c[11] = 0, c[12] = 0, c[13] = 0, c[14] = 0, c[15] = 1, this;
    }}, {key:"makeRotationFromEuler", value:function(a) {
      var c = this.elements, b = a.x, e = a.y, f = a.z, d = L(b);
      b = H(b);
      var h = L(e);
      e = H(e);
      var g = L(f);
      f = H(f);
      switch(a.order) {
        case "XYZ":
          a = d * g;
          var m = d * f;
          var p = b * g;
          var n = b * f;
          c[0] = h * g;
          c[4] = -h * f;
          c[8] = e;
          c[1] = m + p * e;
          c[5] = a - n * e;
          c[9] = -b * h;
          c[2] = n - a * e;
          c[6] = p + m * e;
          c[10] = d * h;
          break;
        case "YXZ":
          a = h * g;
          m = h * f;
          p = e * g;
          n = e * f;
          c[0] = a + n * b;
          c[4] = p * b - m;
          c[8] = d * e;
          c[1] = d * f;
          c[5] = d * g;
          c[9] = -b;
          c[2] = m * b - p;
          c[6] = n + a * b;
          c[10] = d * h;
          break;
        case "ZXY":
          a = h * g;
          m = h * f;
          p = e * g;
          n = e * f;
          c[0] = a - n * b;
          c[4] = -d * f;
          c[8] = p + m * b;
          c[1] = m + p * b;
          c[5] = d * g;
          c[9] = n - a * b;
          c[2] = -d * e;
          c[6] = b;
          c[10] = d * h;
          break;
        case "ZYX":
          a = d * g;
          m = d * f;
          p = b * g;
          n = b * f;
          c[0] = h * g;
          c[4] = p * e - m;
          c[8] = a * e + n;
          c[1] = h * f;
          c[5] = n * e + a;
          c[9] = m * e - p;
          c[2] = -e;
          c[6] = b * h;
          c[10] = d * h;
          break;
        case "YZX":
          a = d * h;
          m = d * e;
          p = b * h;
          n = b * e;
          c[0] = h * g;
          c[4] = n - a * f;
          c[8] = p * f + m;
          c[1] = f;
          c[5] = d * g;
          c[9] = -b * g;
          c[2] = -e * g;
          c[6] = m * f + p;
          c[10] = a - n * f;
          break;
        case "XZY":
          a = d * h, m = d * e, p = b * h, n = b * e, c[0] = h * g, c[4] = -f, c[8] = e * g, c[1] = a * f + n, c[5] = d * g, c[9] = m * f - p, c[2] = p * f - m, c[6] = b * g, c[10] = n * f + a;
      }
      return c[3] = 0, c[7] = 0, c[11] = 0, c[12] = 0, c[13] = 0, c[14] = 0, c[15] = 1, this;
    }}, {key:"makeRotationFromQuaternion", value:function(a) {
      return this.compose(ta.set(0, 0, 0), a, Pb.set(1, 1, 1));
    }}, {key:"lookAt", value:function(a, c, b) {
      var e = this.elements;
      return wa.subVectors(a, c), 0 === wa.lengthSquared() && (wa.z = 1), wa.normalize(), ta.crossVectors(b, wa), 0 === ta.lengthSquared() && (1 === K(b.z) ? wa.x += 1E-4 : wa.z += 1E-4, wa.normalize(), ta.crossVectors(b, wa)), ta.normalize(), Pb.crossVectors(wa, ta), e[0] = ta.x, e[4] = Pb.x, e[8] = wa.x, e[1] = ta.y, e[5] = Pb.y, e[9] = wa.y, e[2] = ta.z, e[6] = Pb.z, e[10] = wa.z, this;
    }}, {key:"multiplyMatrices", value:function(a, c) {
      var b = this.elements, e = a.elements, f = c.elements;
      c = e[0];
      a = e[4];
      var d = e[8], h = e[12], g = e[1], m = e[5], p = e[9], n = e[13], k = e[2], q = e[6], r = e[10], v = e[14], t = e[3], w = e[7], z = e[11];
      e = e[15];
      var y = f[0], x = f[4], C = f[8], A = f[12], B = f[1], D = f[5], F = f[9], E = f[13], H = f[2], P = f[6], ba = f[10], I = f[14], O = f[3], M = f[7], L = f[11];
      f = f[15];
      return b[0] = c * y + a * B + d * H + h * O, b[4] = c * x + a * D + d * P + h * M, b[8] = c * C + a * F + d * ba + h * L, b[12] = c * A + a * E + d * I + h * f, b[1] = g * y + m * B + p * H + n * O, b[5] = g * x + m * D + p * P + n * M, b[9] = g * C + m * F + p * ba + n * L, b[13] = g * A + m * E + p * I + n * f, b[2] = k * y + q * B + r * H + v * O, b[6] = k * x + q * D + r * P + v * M, b[10] = k * C + q * F + r * ba + v * L, b[14] = k * A + q * E + r * I + v * f, b[3] = t * y + w * B + z * 
      H + e * O, b[7] = t * x + w * D + z * P + e * M, b[11] = t * C + w * F + z * ba + e * L, b[15] = t * A + w * E + z * I + e * f, this;
    }}, {key:"multiply", value:function(a) {
      return this.multiplyMatrices(this, a);
    }}, {key:"premultiply", value:function(a) {
      return this.multiplyMatrices(a, this);
    }}, {key:"multiplyScalar", value:function(a) {
      var c = this.elements;
      return c[0] *= a, c[4] *= a, c[8] *= a, c[12] *= a, c[1] *= a, c[5] *= a, c[9] *= a, c[13] *= a, c[2] *= a, c[6] *= a, c[10] *= a, c[14] *= a, c[3] *= a, c[7] *= a, c[11] *= a, c[15] *= a, this;
    }}, {key:"determinant", value:function() {
      var a = this.elements, c = a[0], b = a[4], e = a[8], f = a[12], d = a[1], h = a[5], g = a[9], m = a[13], p = a[2], n = a[6], k = a[10], q = a[14], r = c * h, v = c * g;
      c *= m;
      var t = b * d, w = b * g;
      b *= m;
      var z = e * d, y = e * h;
      e *= m;
      d *= f;
      h *= f;
      f *= g;
      return a[3] * (f * n - e * n - h * k + b * k + y * q - w * q) + a[7] * (v * q - c * k + d * k - z * q + e * p - f * p) + a[11] * (c * n - r * q - d * n + t * q + h * p - b * p) + a[15] * (-y * p - v * n + r * k + z * n - t * k + w * p);
    }}, {key:"getInverse", value:function(a) {
      var c, b = this.elements, e = a.elements, f = e[0], d = e[1], h = e[2], g = e[3], m = e[4], p = e[5], n = e[6], k = e[7], q = e[8], r = e[9], v = e[10], t = e[11], w = e[12], z = e[13], y = e[14];
      e = e[15];
      var x = r * y * k - z * v * k + z * n * t - p * y * t - r * n * e + p * v * e, C = w * v * k - q * y * k - w * n * t + m * y * t + q * n * e - m * v * e, A = q * z * k - w * r * k + w * p * t - m * z * t - q * p * e + m * r * e, B = w * r * n - q * z * n - w * p * v + m * z * v + q * p * y - m * r * y, D = f * x + d * C + h * A + g * B;
      return 0 === D ? (console.error("Can't invert matrix, determinant is zero", a), this.identity()) : (c = 1 / D, b[0] = x * c, b[1] = (z * v * g - r * y * g - z * h * t + d * y * t + r * h * e - d * v * e) * c, b[2] = (p * y * g - z * n * g + z * h * k - d * y * k - p * h * e + d * n * e) * c, b[3] = (r * n * g - p * v * g - r * h * k + d * v * k + p * h * t - d * n * t) * c, b[4] = C * c, b[5] = (q * y * g - w * v * g + w * h * t - f * y * t - q * h * e + f * v * e) * c, b[6] = (w * n * g - 
      m * y * g - w * h * k + f * y * k + m * h * e - f * n * e) * c, b[7] = (m * v * g - q * n * g + q * h * k - f * v * k - m * h * t + f * n * t) * c, b[8] = A * c, b[9] = (w * r * g - q * z * g - w * d * t + f * z * t + q * d * e - f * r * e) * c, b[10] = (m * z * g - w * p * g + w * d * k - f * z * k - m * d * e + f * p * e) * c, b[11] = (q * p * g - m * r * g - q * d * k + f * r * k + m * d * t - f * p * t) * c, b[12] = B * c, b[13] = (q * z * h - w * r * h + w * d * v - f * z * v - q * d * 
      y + f * r * y) * c, b[14] = (w * p * h - m * z * h - w * d * n + f * z * n + m * d * y - f * p * y) * c, b[15] = (m * r * h - q * p * h + q * d * n - f * r * n - m * d * v + f * p * v) * c), this;
    }}, {key:"transpose", value:function() {
      var a, c = this.elements;
      return a = c[1], c[1] = c[4], c[4] = a, a = c[2], c[2] = c[8], c[8] = a, a = c[6], c[6] = c[9], c[9] = a, a = c[3], c[3] = c[12], c[12] = a, a = c[7], c[7] = c[13], c[13] = a, a = c[11], c[11] = c[14], c[14] = a, this;
    }}, {key:"scale", value:function(a, c, b) {
      var e = this.elements;
      return e[0] *= a, e[4] *= c, e[8] *= b, e[1] *= a, e[5] *= c, e[9] *= b, e[2] *= a, e[6] *= c, e[10] *= b, e[3] *= a, e[7] *= c, e[11] *= b, this;
    }}, {key:"makeScale", value:function(a, c, b) {
      return this.set(a, 0, 0, 0, 0, c, 0, 0, 0, 0, b, 0, 0, 0, 0, 1), this;
    }}, {key:"makeTranslation", value:function(a, c, b) {
      return this.set(1, 0, 0, a, 0, 1, 0, c, 0, 0, 1, b, 0, 0, 0, 1), this;
    }}, {key:"makeRotationX", value:function(a) {
      var c = L(a);
      a = H(a);
      return this.set(1, 0, 0, 0, 0, c, -a, 0, 0, a, c, 0, 0, 0, 0, 1), this;
    }}, {key:"makeRotationY", value:function(a) {
      var c = L(a);
      a = H(a);
      return this.set(c, 0, a, 0, 0, 1, 0, 0, -a, 0, c, 0, 0, 0, 0, 1), this;
    }}, {key:"makeRotationZ", value:function(a) {
      var c = L(a);
      a = H(a);
      return this.set(c, -a, 0, 0, a, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this;
    }}, {key:"makeRotationAxis", value:function(a, c) {
      var b = L(c);
      c = H(c);
      var e = 1 - b, f = a.x, d = a.y;
      a = a.z;
      var h = e * f, g = e * d;
      return this.set(h * f + b, h * d - c * a, h * a + c * d, 0, h * d + c * a, g * d + b, g * a - c * f, 0, h * a - c * d, g * a + c * f, e * a * a + b, 0, 0, 0, 0, 1), this;
    }}, {key:"makeShear", value:function(a, c, b) {
      return this.set(1, c, b, 0, a, 1, b, 0, a, c, 1, 0, 0, 0, 0, 1), this;
    }}, {key:"compose", value:function(a, c, b) {
      var e = this.elements, f = c.x, d = c.y, h = c.z, g = c.w, m = f + f, p = d + d, n = h + h;
      c = f * m;
      var k = f * p;
      f *= n;
      var q = d * p;
      d *= n;
      h *= n;
      m *= g;
      p *= g;
      g *= n;
      n = b.x;
      var r = b.y;
      b = b.z;
      return e[0] = (1 - (q + h)) * n, e[1] = (k + g) * n, e[2] = (f - p) * n, e[3] = 0, e[4] = (k - g) * r, e[5] = (1 - (c + h)) * r, e[6] = (d + m) * r, e[7] = 0, e[8] = (f + p) * b, e[9] = (d - m) * b, e[10] = (1 - (c + q)) * b, e[11] = 0, e[12] = a.x, e[13] = a.y, e[14] = a.z, e[15] = 1, this;
    }}, {key:"decompose", value:function(a, c, b) {
      var e = this.elements, f = e[0], d = e[1], h = e[2], g = e[4], m = e[5], p = e[6], n = e[8], k = e[9], q = e[10], r = this.determinant();
      r = ta.set(f, d, h).length() * (0 > r ? -1 : 1);
      var v = ta.set(g, m, p).length(), t = ta.set(n, k, q).length(), w = 1 / r, z = 1 / v, y = 1 / t;
      return a.x = e[12], a.y = e[13], a.z = e[14], e[0] *= w, e[1] *= w, e[2] *= w, e[4] *= z, e[5] *= z, e[6] *= z, e[8] *= y, e[9] *= y, e[10] *= y, c.setFromRotationMatrix(this), e[0] = f, e[1] = d, e[2] = h, e[4] = g, e[5] = m, e[6] = p, e[8] = n, e[9] = k, e[10] = q, b.x = r, b.y = v, b.z = t, this;
    }}, {key:"makePerspective", value:function(a, c, b, e, f, d) {
      var h = this.elements;
      return h[0] = 2 * f / (c - a), h[4] = 0, h[8] = (c + a) / (c - a), h[12] = 0, h[1] = 0, h[5] = 2 * f / (b - e), h[9] = (b + e) / (b - e), h[13] = 0, h[2] = 0, h[6] = 0, h[10] = -(d + f) / (d - f), h[14] = -2 * d * f / (d - f), h[3] = 0, h[7] = 0, h[11] = -1, h[15] = 0, this;
    }}, {key:"makeOrthographic", value:function(a, c, b, e, f, d) {
      var h = this.elements, g = 1 / (c - a), m = 1 / (b - e), p = 1 / (d - f);
      return h[0] = 2 * g, h[4] = 0, h[8] = 0, h[12] = -((c + a) * g), h[1] = 0, h[5] = 2 * m, h[9] = 0, h[13] = -((b + e) * m), h[2] = 0, h[6] = 0, h[10] = -2 * p, h[14] = -((d + f) * p), h[3] = 0, h[7] = 0, h[11] = 0, h[15] = 1, this;
    }}, {key:"equals", value:function(a) {
      var c = this.elements, b = a.elements, e = !0;
      for (a = 0; e && 16 > a; ++a) {
        c[a] !== b[a] && (e = !1);
      }
      return e;
    }}]), a;
  })();
  var ya = [new O, new O, new O, new O], gc = function() {
    function a() {
      var c = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : new O, b = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : new O;
      d(this, a);
      this.origin = c;
      this.direction = b;
    }
    return b(a, [{key:"set", value:function(a, c) {
      return this.origin.copy(a), this.direction.copy(c), this;
    }}, {key:"copy", value:function(a) {
      return this.origin.copy(a.origin), this.direction.copy(a.direction), this;
    }}, {key:"clone", value:function() {
      return (new this.constructor).copy(this);
    }}, {key:"at", value:function(a) {
      return (1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : new O).copy(this.direction).multiplyScalar(a).add(this.origin);
    }}, {key:"lookAt", value:function(a) {
      return this.direction.copy(a).sub(this.origin).normalize(), this;
    }}, {key:"recast", value:function(a) {
      return this.origin.copy(this.at(a, ya[0])), this;
    }}, {key:"closestPointToPoint", value:function(a) {
      var c = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : new O, b = c.subVectors(a, this.origin).dot(this.direction);
      return 0 <= b ? c.copy(this.direction).multiplyScalar(b).add(this.origin) : c.copy(this.origin);
    }}, {key:"distanceSquaredToPoint", value:function(a) {
      var c = ya[0].subVectors(a, this.origin).dot(this.direction);
      return 0 > c ? this.origin.distanceToSquared(a) : ya[0].copy(this.direction).multiplyScalar(c).add(this.origin).distanceToSquared(a);
    }}, {key:"distanceToPoint", value:function(a) {
      return R(this.distanceSquaredToPoint(a));
    }}, {key:"distanceToPlane", value:function(a) {
      var c = a.normal.dot(this.direction);
      a = 0 === c ? 0 === a.distanceToPoint(this.origin) ? 0 : -1 : -(this.origin.dot(a.normal) + a.constant) / c;
      return 0 <= a ? a : null;
    }}, {key:"distanceSquaredToSegment", value:function(a, c, b, e) {
      var f, d, h, g, m, p = ya[0].copy(a).add(c).multiplyScalar(.5), n = ya[1].copy(c).sub(a).normalize(), k = ya[2].copy(this.origin).sub(p);
      a = .5 * a.distanceTo(c);
      c = -this.direction.dot(n);
      var q = k.dot(this.direction), r = -k.dot(n);
      k = k.lengthSq();
      var v = K(1 - c * c);
      return 0 < v ? (f = c * r - q, d = c * q - r, h = a * v, 0 <= f ? d >= -h ? d <= h ? (g = 1 / v, f *= g, d *= g, m = f * (f + c * d + 2 * q) + d * (c * f + d + 2 * r) + k) : (d = a, f = M(0, -(c * d + q)), m = -f * f + d * (d + 2 * r) + k) : (d = -a, f = M(0, -(c * d + q)), m = -f * f + d * (d + 2 * r) + k) : d <= -h ? (f = M(0, -(-c * a + q)), d = 0 < f ? -a : S(M(-a, -r), a), m = -f * f + d * (d + 2 * r) + k) : d <= h ? (f = 0, d = S(M(-a, -r), a), m = d * (d + 2 * r) + k) : (f = M(0, -(c * 
      a + q)), d = 0 < f ? a : S(M(-a, -r), a), m = -f * f + d * (d + 2 * r) + k)) : (d = 0 < c ? -a : a, f = M(0, -(c * d + q)), m = -f * f + d * (d + 2 * r) + k), void 0 !== b && b.copy(this.direction).multiplyScalar(f).add(this.origin), void 0 !== e && e.copy(n).multiplyScalar(d).add(p), m;
    }}, {key:"intersectSphere", value:function(a) {
      var c, b, e, f = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : new O, d = ya[0].subVectors(a.center, this.origin), h = d.dot(this.direction);
      d = d.dot(d) - h * h;
      var g = a.radius * a.radius, m = null;
      return d <= g && (c = R(g - d), b = h - c, e = h + c, (0 <= b || 0 <= e) && (m = 0 > b ? this.at(e, f) : this.at(b, f))), m;
    }}, {key:"intersectsSphere", value:function(a) {
      return this.distanceSqToPoint(a.center) <= a.radius * a.radius;
    }}, {key:"intersectPlane", value:function(a) {
      var c = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : new O, b = this.distanceToPlane(a);
      return null === b ? null : this.at(b, c);
    }}, {key:"intersectsPlane", value:function(a) {
      var c = a.distanceToPoint(this.origin);
      return 0 === c || 0 > a.normal.dot(this.direction) * c;
    }}, {key:"intersectBox", value:function(a) {
      var c, b, e, f, d, h, g = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : new O, m = this.origin, p = this.direction, n = a.min, k = a.max, q = 1 / p.x, r = 1 / p.y;
      p = 1 / p.z;
      var v = null;
      return 0 <= q ? (c = (n.x - m.x) * q, b = (k.x - m.x) * q) : (c = (k.x - m.x) * q, b = (n.x - m.x) * q), 0 <= r ? (e = (n.y - m.y) * r, f = (k.y - m.y) * r) : (e = (k.y - m.y) * r, f = (n.y - m.y) * r), c <= f && e <= b && ((e > c || c !== c) && (c = e), (f < b || b !== b) && (b = f), 0 <= p ? (d = (n.z - m.z) * p, h = (k.z - m.z) * p) : (d = (k.z - m.z) * p, h = (n.z - m.z) * p), c <= h && d <= b && ((d > c || c !== c) && (c = d), (h < b || b !== b) && (b = h), 0 <= b && (v = this.at(0 <= 
      c ? c : b, g)))), v;
    }}, {key:"intersectsBox", value:function(a) {
      return null !== this.intersectBox(a, ya[0]);
    }}, {key:"intersectTriangle", value:function(a, c, b, e, f) {
      var d, h, g, m, p, n = this.direction, k = ya[0], q = ya[1], r = ya[2], v = ya[3], t = null;
      return q.subVectors(c, a), r.subVectors(b, a), v.crossVectors(q, r), d = n.dot(v), 0 === d || e && 0 < d || (0 < d ? h = 1 : (h = -1, d = -d), k.subVectors(this.origin, a), g = h * n.dot(r.crossVectors(k, r)), 0 <= g && (m = h * n.dot(q.cross(k)), 0 <= m && g + m <= d && (p = -h * k.dot(v), 0 <= p && (t = this.at(p / d, f))))), t;
    }}, {key:"applyMatrix4", value:function(a) {
      return this.origin.applyMatrix4(a), this.direction.transformDirection(a), this;
    }}, {key:"equals", value:function(a) {
      return a.origin.equals(this.origin) && a.direction.equals(this.direction);
    }}]), a;
  }();
  (function() {
    function a() {
      var c = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : 1, b = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0, e = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : 0;
      d(this, a);
      this.radius = c;
      this.phi = b;
      this.theta = e;
    }
    return b(a, [{key:"set", value:function(a, c, b) {
      return this.radius = a, this.phi = c, this.theta = b, this;
    }}, {key:"copy", value:function(a) {
      return this.radius = a.radius, this.phi = a.phi, this.theta = a.theta, this;
    }}, {key:"clone", value:function() {
      return (new this.constructor).copy(this);
    }}, {key:"makeSafe", value:function() {
      return this.phi = M(1E-6, S(D - 1E-6, this.phi)), this;
    }}, {key:"setFromVector3", value:function(a) {
      return this.setFromCartesianCoords(a.x, a.y, a.z);
    }}, {key:"setFromCartesianCoords", value:function(a, c, b) {
      return this.radius = R(a * a + c * c + b * b), 0 === this.radius ? (this.theta = 0, this.phi = 0) : (this.theta = F(a, b), this.phi = J(S(M(c / this.radius, -1), 1))), this;
    }}]), a;
  })();
  (function() {
    function a() {
      d(this, a);
      this.elements = new Float32Array([1, 0, 0, 1, 0, 1]);
    }
    return b(a, [{key:"set", value:function(a, c, b, e, f, d) {
      var h = this.elements;
      return h[0] = a, h[1] = c, h[3] = e, h[2] = b, h[4] = f, h[5] = d, this;
    }}, {key:"identity", value:function() {
      return this.set(1, 0, 0, 1, 0, 1), this;
    }}, {key:"copy", value:function(a) {
      a = a.elements;
      return this.set(a[0], a[1], a[2], a[3], a[4], a[5]), this;
    }}, {key:"clone", value:function() {
      return (new this.constructor).copy(this);
    }}, {key:"toMatrix3", value:function(a) {
      var c = a.elements;
      a.set(c[0], c[1], c[2], c[1], c[3], c[4], c[2], c[4], c[5]);
    }}, {key:"add", value:function(a) {
      var c = this.elements;
      a = a.elements;
      return c[0] += a[0], c[1] += a[1], c[3] += a[3], c[2] += a[2], c[4] += a[4], c[5] += a[5], this;
    }}, {key:"norm", value:function() {
      var a = this.elements, c = a[1] * a[1], b = a[2] * a[2], e = a[4] * a[4];
      return R(a[0] * a[0] + c + b + c + a[3] * a[3] + e + b + e + a[5] * a[5]);
    }}, {key:"off", value:function() {
      var a = this.elements;
      return R(2 * (a[1] * a[1] + a[2] * a[2] + a[4] * a[4]));
    }}, {key:"applyToVector3", value:function(a) {
      var c = a.x, b = a.y, e = a.z, f = this.elements;
      return a.x = f[0] * c + f[1] * b + f[2] * e, a.y = f[1] * c + f[3] * b + f[4] * e, a.z = f[2] * c + f[4] * b + f[5] * e, a;
    }}, {key:"equals", value:function(a) {
      var c = this.elements, b = a.elements, e = !0;
      for (a = 0; e && 6 > a; ++a) {
        c[a] !== b[a] && (e = !1);
      }
      return e;
    }}], [{key:"calculateIndex", value:function(a, c) {
      return 3 - (3 - a) * (2 - a) / 2 + c;
    }}]), a;
  })();
  (function() {
    function a() {
      var c = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : 0, b = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0, e = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : 0, f = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : 0;
      d(this, a);
      this.x = c;
      this.y = b;
      this.z = e;
      this.w = f;
    }
    return b(a, [{key:"set", value:function(a, c, b, e) {
      return this.x = a, this.y = c, this.z = b, this.w = e, this;
    }}, {key:"copy", value:function(a) {
      return this.x = a.x, this.y = a.y, this.z = a.z, this.w = a.w, this;
    }}, {key:"clone", value:function() {
      return new this.constructor(this.x, this.y, this.z, this.w);
    }}, {key:"fromArray", value:function(a) {
      var c = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0;
      return this.x = a[c], this.y = a[c + 1], this.z = a[c + 2], this.w = a[c + 3], this;
    }}, {key:"toArray", value:function() {
      var a = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : [], c = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0;
      return a[c] = this.x, a[c + 1] = this.y, a[c + 2] = this.z, a[c + 3] = this.w, a;
    }}, {key:"setAxisAngleFromQuaternion", value:function(a) {
      this.w = 2 * J(a.w);
      var c = R(1 - a.w * a.w);
      return 1E-4 > c ? (this.x = 1, this.y = 0, this.z = 0) : (this.x = a.x / c, this.y = a.y / c, this.z = a.z / c), this;
    }}, {key:"setAxisAngleFromRotationMatrix", value:function(a) {
      var c, b, e, f, d, h, g, m, p, n, k = a.elements;
      a = k[0];
      var q = k[4], r = k[8], v = k[1], t = k[5], w = k[9], z = k[2], y = k[6];
      k = k[10];
      return .01 > K(q - v) && .01 > K(r - z) && .01 > K(w - y) ? .1 > K(q + v) && .1 > K(r + z) && .1 > K(w + y) && .1 > K(a + t + k - 3) ? this.set(1, 0, 0, 0) : (f = (a + 1) / 2, d = (t + 1) / 2, h = (k + 1) / 2, g = (q + v) / 4, m = (r + z) / 4, p = (w + y) / 4, f > d && f > h ? .01 > f ? (c = 0, b = .707106781, e = .707106781) : (c = R(f), b = g / c, e = m / c) : d > h ? .01 > d ? (c = .707106781, b = 0, e = .707106781) : (b = R(d), c = g / b, e = p / b) : .01 > h ? (c = .707106781, b = .707106781, 
      e = 0) : (e = R(h), c = m / e, b = p / e), this.set(c, b, e, D)) : (n = R((y - w) * (y - w) + (r - z) * (r - z) + (v - q) * (v - q)), .001 > K(n) && (n = 1), this.x = (y - w) / n, this.y = (r - z) / n, this.z = (v - q) / n, this.w = J((a + t + k - 1) / 2)), this;
    }}, {key:"add", value:function(a) {
      return this.x += a.x, this.y += a.y, this.z += a.z, this.w += a.w, this;
    }}, {key:"addScalar", value:function(a) {
      return this.x += a, this.y += a, this.z += a, this.w += a, this;
    }}, {key:"addVectors", value:function(a, c) {
      return this.x = a.x + c.x, this.y = a.y + c.y, this.z = a.z + c.z, this.w = a.w + c.w, this;
    }}, {key:"addScaledVector", value:function(a, c) {
      return this.x += a.x * c, this.y += a.y * c, this.z += a.z * c, this.w += a.w * c, this;
    }}, {key:"sub", value:function(a) {
      return this.x -= a.x, this.y -= a.y, this.z -= a.z, this.w -= a.w, this;
    }}, {key:"subScalar", value:function(a) {
      return this.x -= a, this.y -= a, this.z -= a, this.w -= a, this;
    }}, {key:"subVectors", value:function(a, c) {
      return this.x = a.x - c.x, this.y = a.y - c.y, this.z = a.z - c.z, this.w = a.w - c.w, this;
    }}, {key:"multiply", value:function(a) {
      return this.x *= a.x, this.y *= a.y, this.z *= a.z, this.w *= a.w, this;
    }}, {key:"multiplyScalar", value:function(a) {
      return this.x *= a, this.y *= a, this.z *= a, this.w *= a, this;
    }}, {key:"multiplyVectors", value:function(a, c) {
      return this.x = a.x * c.x, this.y = a.y * c.y, this.z = a.z * c.z, this.w = a.w * c.w, this;
    }}, {key:"divide", value:function(a) {
      return this.x /= a.x, this.y /= a.y, this.z /= a.z, this.w /= a.w, this;
    }}, {key:"divideScalar", value:function(a) {
      return this.x /= a, this.y /= a, this.z /= a, this.w /= a, this;
    }}, {key:"applyMatrix4", value:function(a) {
      var c = this.x, b = this.y, e = this.z, f = this.w;
      a = a.elements;
      return this.x = a[0] * c + a[4] * b + a[8] * e + a[12] * f, this.y = a[1] * c + a[5] * b + a[9] * e + a[13] * f, this.z = a[2] * c + a[6] * b + a[10] * e + a[14] * f, this.w = a[3] * c + a[7] * b + a[11] * e + a[15] * f, this;
    }}, {key:"negate", value:function() {
      return this.x = -this.x, this.y = -this.y, this.z = -this.z, this.w = -this.w, this;
    }}, {key:"dot", value:function(a) {
      return this.x * a.x + this.y * a.y + this.z * a.z + this.w * a.w;
    }}, {key:"manhattanLength", value:function() {
      return K(this.x) + K(this.y) + K(this.z) + K(this.w);
    }}, {key:"lengthSquared", value:function() {
      return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
    }}, {key:"length", value:function() {
      return R(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
    }}, {key:"manhattanDistanceTo", value:function(a) {
      return K(this.x - a.x) + K(this.y - a.y) + K(this.z - a.z) + K(this.w - a.w);
    }}, {key:"distanceToSquared", value:function(a) {
      var c = this.x - a.x, b = this.y - a.y, e = this.z - a.z;
      a = this.w - a.w;
      return c * c + b * b + e * e + a * a;
    }}, {key:"distanceTo", value:function(a) {
      return R(this.distanceToSquared(a));
    }}, {key:"normalize", value:function() {
      return this.divideScalar(this.length());
    }}, {key:"setLength", value:function(a) {
      return this.normalize().multiplyScalar(a);
    }}, {key:"min", value:function(a) {
      return this.x = S(this.x, a.x), this.y = S(this.y, a.y), this.z = S(this.z, a.z), this.w = S(this.w, a.w), this;
    }}, {key:"max", value:function(a) {
      return this.x = M(this.x, a.x), this.y = M(this.y, a.y), this.z = M(this.z, a.z), this.w = M(this.w, a.w), this;
    }}, {key:"clamp", value:function(a, c) {
      return this.x = M(a.x, S(c.x, this.x)), this.y = M(a.y, S(c.y, this.y)), this.z = M(a.z, S(c.z, this.z)), this.w = M(a.w, S(c.w, this.w)), this;
    }}, {key:"floor", value:function() {
      return this.x = I(this.x), this.y = I(this.y), this.z = I(this.z), this.w = I(this.w), this;
    }}, {key:"ceil", value:function() {
      return this.x = E(this.x), this.y = E(this.y), this.z = E(this.z), this.w = E(this.w), this;
    }}, {key:"round", value:function() {
      return this.x = B(this.x), this.y = B(this.y), this.z = B(this.z), this.w = B(this.w), this;
    }}, {key:"lerp", value:function(a, c) {
      return this.x += (a.x - this.x) * c, this.y += (a.y - this.y) * c, this.z += (a.z - this.z) * c, this.w += (a.w - this.w) * c, this;
    }}, {key:"lerpVectors", value:function(a, c, b) {
      return this.subVectors(c, a).multiplyScalar(b).add(a);
    }}, {key:"equals", value:function(a) {
      return a.x === this.x && a.y === this.y && a.z === this.z && a.w === this.w;
    }}]), a;
  })();
  var Wd = new O, yc = function() {
    function a() {
      var c = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : new O, b = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : new O;
      d(this, a);
      this.min = c;
      this.max = b;
      this.children = null;
    }
    return b(a, [{key:"getCenter", value:function() {
      return (0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : new O).addVectors(this.min, this.max).multiplyScalar(.5);
    }}, {key:"getDimensions", value:function() {
      return (0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : new O).subVectors(this.max, this.min);
    }}, {key:"split", value:function() {
      var a, c = this.min, b = this.max, e = this.getCenter(Wd), f = this.children = [null, null, null, null, null, null, null, null];
      for (a = 0; 8 > a; ++a) {
        var d = Ya[a];
        f[a] = new this.constructor(new O(0 === d[0] ? c.x : e.x, 0 === d[1] ? c.y : e.y, 0 === d[2] ? c.z : e.z), new O(0 === d[0] ? e.x : b.x, 0 === d[1] ? e.y : b.y, 0 === d[2] ? e.z : b.z));
      }
    }}]), a;
  }(), Ya = [new Uint8Array([0, 0, 0]), new Uint8Array([0, 0, 1]), new Uint8Array([0, 1, 0]), new Uint8Array([0, 1, 1]), new Uint8Array([1, 0, 0]), new Uint8Array([1, 0, 1]), new Uint8Array([1, 1, 0]), new Uint8Array([1, 1, 1])];
  ha = [new Uint8Array([0, 4]), new Uint8Array([1, 5]), new Uint8Array([2, 6]), new Uint8Array([3, 7]), new Uint8Array([0, 2]), new Uint8Array([1, 3]), new Uint8Array([4, 6]), new Uint8Array([5, 7]), new Uint8Array([0, 1]), new Uint8Array([2, 3]), new Uint8Array([4, 5]), new Uint8Array([6, 7])];
  var pb = new O;
  la = function() {
    function a() {
      var c = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : new O, b = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0;
      d(this, a);
      this.min = c;
      this.size = b;
      this.children = null;
    }
    return b(a, [{key:"getCenter", value:function() {
      return (0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : new O).copy(this.min).addScalar(.5 * this.size);
    }}, {key:"getDimensions", value:function() {
      return (0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : new O).set(this.size, this.size, this.size);
    }}, {key:"split", value:function() {
      var a, c = this.min, b = this.getCenter(pb), e = .5 * this.size, f = this.children = [null, null, null, null, null, null, null, null];
      for (a = 0; 8 > a; ++a) {
        var d = Ya[a];
        f[a] = new this.constructor(new O(0 === d[0] ? c.x : b.x, 0 === d[1] ? c.y : b.y, 0 === d[2] ? c.z : b.z), e);
      }
    }}, {key:"max", get:function() {
      return this.min.clone().addScalar(this.size);
    }}]), a;
  }();
  var zc = function() {
    function a() {
      var c = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : null, b = !!(1 < arguments.length && void 0 !== arguments[1]) && arguments[1];
      d(this, a);
      this.value = c;
      this.done = b;
    }
    return b(a, [{key:"reset", value:function() {
      this.value = null;
      this.done = !1;
    }}]), a;
  }(), Cb = new U, Qb = function() {
    function a(c) {
      var b = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : null;
      d(this, a);
      this.octree = c;
      this.region = b;
      this.cull = null !== b;
      this.result = new zc;
      this.indices = this.trace = null;
      this.reset();
    }
    $jscomp.initSymbol();
    $jscomp.initSymbolIterator();
    return b(a, [{key:"reset", value:function() {
      var a = this.octree.root;
      return this.trace = [], this.indices = [], null !== a && (Cb.min = a.min, Cb.max = a.max, (!this.cull || this.region.intersectsBox(Cb)) && (this.trace.push(a), this.indices.push(0))), this.result.reset(), this;
    }}, {key:"next", value:function() {
      for (var a, c, b, e = this.cull, f = this.region, d = this.indices, h = this.trace, g = null, m = h.length - 1; null === g && 0 <= m;) {
        if (a = d[m]++, c = h[m].children, 8 > a) {
          if (null !== c) {
            if (b = c[a], !e || (Cb.min = b.min, Cb.max = b.max, f.intersectsBox(Cb))) {
              h.push(b), d.push(0), ++m;
            }
          } else {
            g = h.pop(), d.pop();
          }
        } else {
          h.pop(), d.pop(), --m;
        }
      }
      return this.result.value = g, this.result.done = null === g, this.result;
    }}, {key:"return", value:function(a) {
      return this.result.value = a, this.result.done = !0, this.result;
    }}, {key:Symbol.iterator, value:function() {
      return this;
    }}]), a;
  }(), Db = [new O, new O, new O], ib = new U, Ac = new gc, Va = [new Uint8Array([4, 2, 1]), new Uint8Array([5, 3, 8]), new Uint8Array([6, 8, 3]), new Uint8Array([7, 8, 8]), new Uint8Array([8, 6, 5]), new Uint8Array([8, 7, 8]), new Uint8Array([8, 8, 7]), new Uint8Array([8, 8, 8])], Aa = 0, jb = function() {
    function a() {
      d(this, a);
    }
    return b(a, null, [{key:"intersectOctree", value:function(a, b, e) {
      var f = ib.min.set(0, 0, 0);
      var d = ib.max.subVectors(a.max, a.min);
      var h = a.getDimensions(Db[0]);
      var g = Db[1].copy(h).multiplyScalar(.5);
      var m = Ac.origin.copy(b.ray.origin);
      var p = Ac.direction.copy(b.ray.direction);
      m.sub(a.getCenter(Db[2])).add(g);
      Aa = 0;
      0 > p.x && (m.x = h.x - m.x, p.x = -p.x, Aa |= 4);
      0 > p.y && (m.y = h.y - m.y, p.y = -p.y, Aa |= 2);
      0 > p.z && (m.z = h.z - m.z, p.z = -p.z, Aa |= 1);
      g = 1 / p.x;
      var n = 1 / p.y;
      h = 1 / p.z;
      p = (f.x - m.x) * g;
      g *= d.x - m.x;
      var k = (f.y - m.y) * n;
      n *= d.y - m.y;
      f = (f.z - m.z) * h;
      d = (d.z - m.z) * h;
      M(M(p, k), f) < S(S(g, n), d) && c(a.root, p, k, f, g, n, d, b, e);
    }}]), a;
  }(), Ra = new U;
  gc = function() {
    function a(c, b) {
      d(this, a);
      this.root = void 0 !== c && void 0 !== b ? new yc(c, b) : null;
    }
    $jscomp.initSymbol();
    $jscomp.initSymbolIterator();
    return b(a, [{key:"getCenter", value:function(a) {
      return this.root.getCenter(a);
    }}, {key:"getDimensions", value:function(a) {
      return this.root.getDimensions(a);
    }}, {key:"getDepth", value:function() {
      return h(this.root);
    }}, {key:"cull", value:function(a) {
      var c = [];
      return t(this.root, a, c), c;
    }}, {key:"findOctantsByLevel", value:function(a) {
      var c = [];
      return z(this.root, a, 0, c), c;
    }}, {key:"raycast", value:function(a) {
      var c = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : [];
      return jb.intersectOctree(this, a, c), c;
    }}, {key:"leaves", value:function(a) {
      return new Qb(this, a);
    }}, {key:Symbol.iterator, value:function() {
      return new Qb(this);
    }}, {key:"min", get:function() {
      return this.root.min;
    }}, {key:"max", get:function() {
      return this.root.max;
    }}, {key:"children", get:function() {
      return this.root.children;
    }}]), a;
  }();
  var Na = new O, Oa = function(a) {
    function c(a, b) {
      var e;
      return d(this, c), e = r(this, f(c).call(this, a, b)), e.points = null, e.data = null, e;
    }
    return g(c, a), b(c, [{key:"distanceToSquared", value:function(a) {
      return Na.copy(a).clamp(this.min, this.max).sub(a).lengthSquared();
    }}, {key:"distanceToCenterSquared", value:function(a) {
      var c = this.getCenter(Na), b = a.x - c.x, e = a.y - c.x;
      a = a.z - c.z;
      return b * b + e * e + a * a;
    }}, {key:"contains", value:function(a, c) {
      var b = this.min, e = this.max;
      return a.x >= b.x - c && a.y >= b.y - c && a.z >= b.z - c && a.x <= e.x + c && a.y <= e.y + c && a.z <= e.z + c;
    }}, {key:"redistribute", value:function(a) {
      var c, b, e, f = this.children, d = this.points, h = this.data;
      if (null !== f && null !== d) {
        var g = 0;
        for (c = d.length; g < c; ++g) {
          var m = d[g];
          var p = h[g];
          var n = 0;
          for (b = f.length; n < b; ++n) {
            if (e = f[n], e.contains(m, a)) {
              null === e.points && (e.points = [], e.data = []);
              e.points.push(m);
              e.data.push(p);
              break;
            }
          }
        }
      }
      this.data = this.points = null;
    }}, {key:"merge", value:function() {
      var a, c, b = this.children;
      if (null !== b) {
        this.points = [];
        this.data = [];
        var e = 0;
        for (a = b.length; e < a; ++e) {
          if (c = b[e], null !== c.points) {
            var f, d;
            (f = this.points).push.apply(f, m(c.points));
            (d = this.data).push.apply(d, m(c.data));
          }
        }
        this.children = null;
      }
    }}]), c;
  }(yc), kb = function qa(a, c, b) {
    var e = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
    d(this, qa);
    this.distance = a;
    this.distanceToRay = c;
    this.point = b;
    this.object = e;
  }, qb = function(a) {
    function c(a, b) {
      var e, h = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : 0, g = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : 8, m = 4 < arguments.length && void 0 !== arguments[4] ? arguments[4] : 8;
      return d(this, c), e = r(this, f(c).call(this)), e.root = new Oa(a, b), e.bias = M(0, h), e.maxPoints = M(1, B(g)), e.maxDepth = M(0, B(m)), e.pointCount = 0, e;
    }
    return g(c, a), b(c, [{key:"countPoints", value:function(a) {
      return y(a);
    }}, {key:"put", value:function(a, c) {
      return x(a, c, this, this.root, 0);
    }}, {key:"remove", value:function(a) {
      return p(a, this, this.root, null);
    }}, {key:"fetch", value:function(a) {
      return v(a, this, this.root);
    }}, {key:"move", value:function(a, c) {
      return w(a, c, this, this.root, null, 0);
    }}, {key:"findNearestPoint", value:function(a) {
      var c = C(a, 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 1 / 0, !!(2 < arguments.length && void 0 !== arguments[2]) && arguments[2], this.root);
      return null !== c && (c.point = c.point.clone()), c;
    }}, {key:"findPoints", value:function(a, c) {
      var b = [];
      return A(a, c, !!(2 < arguments.length && void 0 !== arguments[2]) && arguments[2], this.root, b), b;
    }}, {key:"raycast", value:function(a) {
      var b = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : [], e = q(f(c.prototype), "raycast", this).call(this, a);
      return 0 < e.length && this.testPoints(e, a, b), b;
    }}, {key:"testPoints", value:function(a, c, b) {
      var e, f, d, h, g, m, p, n = c.params.Points.threshold;
      var k = 0;
      for (h = a.length; k < h; ++k) {
        if (m = a[k], p = m.points, null !== p) {
          var q = 0;
          for (g = p.length; q < g; ++q) {
            var r = p[q];
            var v = c.ray.distanceSqToPoint(r);
            v < n * n && (e = c.ray.closestPointToPoint(r, new O), f = c.ray.origin.distanceTo(e), f >= c.near && f <= c.far && (d = R(v), b.push(new kb(f, d, e, m.data[q]))));
          }
        }
      }
    }}]), c;
  }(gc), db = new U, Bc = new O, rb = new O, Eb = new O;
  U = function() {
    function a() {
      d(this, a);
    }
    return b(a, null, [{key:"recycleOctants", value:function(a, c) {
      var b, e = a.min, f = a.getCenter(rb), d = a.getDimensions(Eb).multiplyScalar(.5), h = a.children, g = c.length;
      for (a = 0; 8 > a; ++a) {
        var m = Ya[a];
        db.min.addVectors(e, Bc.fromArray(m).multiply(d));
        db.max.addVectors(f, Bc.fromArray(m).multiply(d));
        for (m = 0; m < g; ++m) {
          if (b = c[m], null !== b && db.min.equals(b.min) && db.max.equals(b.max)) {
            h[a] = b;
            c[m] = null;
            break;
          }
        }
      }
    }}]), a;
  }();
  a.CubicOctant = la;
  a.edges = ha;
  a.Octant = yc;
  a.Octree = gc;
  a.OctantIterator = Qb;
  a.OctreeRaycaster = jb;
  a.pattern = Ya;
  a.PointOctant = Oa;
  a.PointOctree = qb;
  a.RayPointIntersection = kb;
  a.OctreeUtils = U;
  Object.defineProperty(a, "__esModule", {value:!0});
});
(function e$jscomp$0(a, d, k) {
  function g(e, q) {
    if (!d[e]) {
      if (!a[e]) {
        var m = "function" == typeof require && require;
        if (!q && m) {
          return m(e, !0);
        }
        if (f) {
          return f(e, !0);
        }
        q = Error("Cannot find module '" + e + "'");
        throw q.code = "MODULE_NOT_FOUND", q;
      }
      q = d[e] = {exports:{}};
      a[e][0].call(q.exports, function(f) {
        var c = a[e][1][f];
        return g(c ? c : f);
      }, q, q.exports, e$jscomp$0, a, d, k);
    }
    return d[e].exports;
  }
  for (var f = "function" == typeof require && require, e = 0; e < k.length; e++) {
    g(k[e]);
  }
  return g;
})({1:[function(a, d, k) {
  var b = Object.prototype.toString;
  d.exports = function(a) {
    return a.BYTES_PER_ELEMENT && "[object ArrayBuffer]" === b.call(a.buffer) || Array.isArray(a);
  };
}, {}], 2:[function(a, d, k) {
  d.exports = function(a, d) {
    return "number" === typeof a ? a : "number" === typeof d ? d : 0;
  };
}, {}], 3:[function(a, d, k) {
  d.exports = function(a) {
    switch(a) {
      case "int8":
        return Int8Array;
      case "int16":
        return Int16Array;
      case "int32":
        return Int32Array;
      case "uint8":
        return Uint8Array;
      case "uint16":
        return Uint16Array;
      case "uint32":
        return Uint32Array;
      case "float32":
        return Float32Array;
      case "float64":
        return Float64Array;
      case "array":
        return Array;
      case "uint8_clamped":
        return Uint8ClampedArray;
    }
  };
}, {}], 4:[function(a, d, k) {
  var b = a("dtype");
  d.exports = function(a, f, e) {
    if (!a) {
      throw new TypeError("must specify data as first parameter");
    }
    e = +(e || 0) | 0;
    if (Array.isArray(a) && Array.isArray(a[0])) {
      var d = a[0].length, g = a.length * d;
      f && "string" !== typeof f || (f = new (b(f || "float32"))(g + e));
      var m = f.length - e;
      if (g !== m) {
        throw Error("source length " + g + " (" + d + "x" + a.length + ") does not match destination length " + m);
      }
      for (g = 0; g < a.length; g++) {
        for (m = 0; m < d; m++) {
          f[e++] = a[g][m];
        }
      }
    } else {
      f && "string" !== typeof f ? f.set(a, e) : (f = b(f || "float32"), 0 === e ? f = new f(a) : (f = new f(a.length + e), f.set(a, e)));
    }
    return f;
  };
}, {dtype:3}], 5:[function(a, d, k) {
  d.exports = function(a) {
    if (!a || "string" !== typeof a) {
      throw Error("must specify property for indexof search");
    }
    return new Function("array", "value", "start", ["start = start || 0\nfor (var i=start; i<array.length; i++)", '  if (array[i]["' + a + '"] === value)', "      return i\nreturn -1"].join("\n"));
  };
}, {}], 6:[function(a, d, k) {
  d.exports = "function" === typeof Object.create ? function(a, d) {
    a.super_ = d;
    a.prototype = Object.create(d.prototype, {constructor:{value:a, enumerable:!1, writable:!0, configurable:!0}});
  } : function(a, d) {
    a.super_ = d;
    var b = function() {
    };
    b.prototype = d.prototype;
    a.prototype = new b;
    a.prototype.constructor = a;
  };
}, {}], 7:[function(a, d, k) {
  function b(a) {
    return !!a.constructor && "function" === typeof a.constructor.isBuffer && a.constructor.isBuffer(a);
  }
  d.exports = function(a) {
    return null != a && (b(a) || "function" === typeof a.readFloatLE && "function" === typeof a.slice && b(a.slice(0, 0)) || !!a._isBuffer);
  };
}, {}], 8:[function(a, d, k) {
  function b(a) {
    this.glyphs = [];
    this._measure = this.computeMetrics.bind(this);
    this.update(a);
  }
  function g(a, b) {
    if (!a.chars || 0 === a.chars.length) {
      return null;
    }
    b = c(a.chars, b);
    return 0 <= b ? a.chars[b] : null;
  }
  function f(a) {
    for (var b = 0; b < t.length; b++) {
      var e = t[b].charCodeAt(0);
      e = c(a.chars, e);
      if (0 <= e) {
        return a.chars[e].height;
      }
    }
    return 0;
  }
  function e(a) {
    for (var b = 0; b < y.length; b++) {
      var e = y[b].charCodeAt(0);
      e = c(a.chars, e);
      if (0 <= e) {
        return a.chars[e].height;
      }
    }
    return 0;
  }
  function r(a, c, b) {
    if (!a.kernings || 0 === a.kernings.length) {
      return 0;
    }
    a = a.kernings;
    for (var e = 0; e < a.length; e++) {
      var f = a[e];
      if (f.first === c && f.second === b) {
        return f.amount;
      }
    }
    return 0;
  }
  function q(a) {
    return "center" === a ? 1 : "right" === a ? 2 : 0;
  }
  var m = a("word-wrapper"), n = a("xtend"), c = a("indexof-property")("id"), h = a("as-number"), t = "xeaonsrcumvwz".split(""), z = ["m", "w"], y = "HINEFKLTUVWXYZ".split("");
  d.exports = function(a) {
    return new b(a);
  };
  b.prototype.update = function(a) {
    this._opt = a = n({measure:this._measure}, a);
    this._opt.tabSize = h(this._opt.tabSize, 4);
    if (!a.font) {
      throw Error("must provide a valid bitmap font");
    }
    var c = this.glyphs, b = a.text || "", d = a.font;
    this._setupSpaceGlyphs(d);
    var g = m.lines(b, a), k = a.width || 0;
    c.length = 0;
    var t = g.reduce(function(a, c) {
      return Math.max(a, c.width, k);
    }, 0), z = 0, y = 0, x = h(a.lineHeight, d.common.lineHeight), I = d.common.base, K = x - I, J = a.letterSpacing || 0;
    a = x * g.length - K;
    var R = q(this._opt.align);
    y -= a;
    this._width = t;
    this._height = a;
    this._descender = x - I;
    this._baseline = I;
    this._xHeight = f(d);
    this._capHeight = e(d);
    this._lineHeight = x;
    this._ascender = x - K - this._xHeight;
    var L = this;
    g.forEach(function(a, e) {
      var f = a.end, h = a.width;
      for (a = a.start; a < f; a++) {
        var g = b.charCodeAt(a);
        if (g = L.getGlyph(d, g)) {
          m && (z += r(d, m.id, g.id));
          var m = z;
          1 === R ? m += (t - h) / 2 : 2 === R && (m += t - h);
          c.push({position:[m, y], data:g, index:a, line:e});
          z += g.xadvance + J;
          m = g;
        }
      }
      y += x;
      z = 0;
    });
    this._linesTotal = g.length;
  };
  b.prototype._setupSpaceGlyphs = function(a) {
    this._fallbackTabGlyph = this._fallbackSpaceGlyph = null;
    if (a.chars && 0 !== a.chars.length) {
      var b;
      if (!(b = g(a, 32))) {
        a: {
          for (b = 0; b < z.length; b++) {
            var e = z[b].charCodeAt(0);
            e = c(a.chars, e);
            if (0 <= e) {
              b = a.chars[e];
              break a;
            }
          }
          b = 0;
        }
      }
      a = b || a.chars[0];
      b = this._opt.tabSize * a.xadvance;
      this._fallbackSpaceGlyph = a;
      this._fallbackTabGlyph = n(a, {x:0, y:0, xadvance:b, id:9, xoffset:0, yoffset:0, width:0, height:0});
    }
  };
  b.prototype.getGlyph = function(a, c) {
    return (a = g(a, c)) ? a : 9 === c ? this._fallbackTabGlyph : 32 === c ? this._fallbackSpaceGlyph : null;
  };
  b.prototype.computeMetrics = function(a, c, b, e) {
    var f = this._opt.letterSpacing || 0, d = this._opt.font, h = 0, g = 0, m = 0;
    if (!d.chars || 0 === d.chars.length) {
      return {start:c, end:c, width:0};
    }
    b = Math.min(a.length, b);
    for (var p = c; p < b; p++) {
      var n = a.charCodeAt(p);
      if (n = this.getGlyph(d, n)) {
        var k = v ? r(d, v.id, n.id) : 0;
        h += k;
        k = h + n.xadvance + f;
        var q = h + n.width;
        if (q >= e || k >= e) {
          break;
        }
        h = k;
        g = q;
        var v = n;
      }
      m++;
    }
    v && (g += v.xoffset);
    return {start:c, end:c + m, width:g};
  };
  "width height descender ascender xHeight baseline capHeight lineHeight".split(" ").forEach(function(a) {
    Object.defineProperty(b.prototype, a, {get:(new Function(["return function " + a + "() {", "  return this._" + a, "}"].join("\n")))(), configurable:!0});
  });
}, {"as-number":2, "indexof-property":5, "word-wrapper":15, xtend:16}], 9:[function(a, d, k) {
  var b = Object.prototype.hasOwnProperty, g = Object.prototype.propertyIsEnumerable;
  d.exports = function() {
    try {
      if (!Object.assign) {
        return !1;
      }
      var a = new String("abc");
      a[5] = "de";
      if ("5" === Object.getOwnPropertyNames(a)[0]) {
        return !1;
      }
      var b = {};
      for (a = 0; 10 > a; a++) {
        b["_" + String.fromCharCode(a)] = a;
      }
      if ("0123456789" !== Object.getOwnPropertyNames(b).map(function(a) {
        return b[a];
      }).join("")) {
        return !1;
      }
      var d = {};
      "abcdefghijklmnopqrst".split("").forEach(function(a) {
        d[a] = a;
      });
      return "abcdefghijklmnopqrst" !== Object.keys(Object.assign({}, d)).join("") ? !1 : !0;
    } catch (q) {
      return !1;
    }
  }() ? Object.assign : function(a, e) {
    if (null === a || void 0 === a) {
      throw new TypeError("Object.assign cannot be called with null or undefined");
    }
    var f = Object(a);
    for (var d, m = 1; m < arguments.length; m++) {
      var n = Object(arguments[m]);
      for (var c in n) {
        b.call(n, c) && (f[c] = n[c]);
      }
      if (Object.getOwnPropertySymbols) {
        d = Object.getOwnPropertySymbols(n);
        for (var h = 0; h < d.length; h++) {
          g.call(n, d[h]) && (f[d[h]] = n[d[h]]);
        }
      }
    }
    return f;
  };
}, {}], 10:[function(a, d, k) {
  var b = a("dtype"), g = a("an-array"), f = a("is-buffer"), e = [0, 2, 3], r = [2, 1, 3];
  d.exports = function(a, d) {
    a && (g(a) || f(a)) || (d = a || {}, a = null);
    d = "number" === typeof d ? {count:d} : d || {};
    var m = "string" === typeof d.type ? d.type : "uint16", c = d.start || 0, h = !1 !== d.clockwise ? e : r, k = h[0], q = h[1];
    h = h[2];
    d = 6 * ("number" === typeof d.count ? d.count : 1);
    a = a || new (b(m))(d);
    for (var y = m = 0; m < d; m += 6, y += 4) {
      var x = m + c;
      a[x + 0] = y + 0;
      a[x + 1] = y + 1;
      a[x + 2] = y + 2;
      a[x + 3] = y + k;
      a[x + 4] = y + q;
      a[x + 5] = y + h;
    }
    return a;
  };
}, {"an-array":1, dtype:3, "is-buffer":7}], 11:[function(a, d, k) {
  function b(a) {
    n.call(this);
    "string" === typeof a && (a = {text:a});
    this._opt = r({}, a);
    a && this.update(a);
  }
  var g = a("layout-bmfont-text");
  k = a("inherits");
  var f = a("quad-indices"), e = a("three-buffer-vertex-data"), r = a("object-assign"), q = a("./lib/vertices"), m = a("./lib/utils"), n = THREE.BufferGeometry;
  d.exports = function(a) {
    return new b(a);
  };
  k(b, n);
  b.prototype.update = function(a) {
    "string" === typeof a && (a = {text:a});
    a = r({}, this._opt, a);
    if (!a.font) {
      throw new TypeError("must specify a { font } in options");
    }
    this.layout = g(a);
    var c = !1 !== a.flipY, b = a.font, d = b.common.scaleW, m = b.common.scaleH;
    this.visibleGlyphs = b = this.layout.glyphs.filter(function(a) {
      a = a.data;
      return 0 < a.width * a.height;
    });
    var n = q.positions(b);
    c = q.uvs(b, d, m, c);
    d = f({clockwise:!0, type:"uint16", count:b.length});
    e.index(this, d, 1, "uint16");
    e.attr(this, "position", n, 2);
    e.attr(this, "uv", c, 2);
    !a.multipage && "page" in this.attributes ? this.removeAttribute("page") : a.multipage && (a = q.pages(b), e.attr(this, "page", a, 1));
  };
  b.prototype.computeBoundingSphere = function() {
    null === this.boundingSphere && (this.boundingSphere = new THREE.Sphere);
    var a = this.attributes.position.array, b = this.attributes.position.itemSize;
    !a || !b || 2 > a.length ? (this.boundingSphere.radius = 0, this.boundingSphere.center.set(0, 0, 0)) : (m.computeSphere(a, this.boundingSphere), isNaN(this.boundingSphere.radius) && console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.'));
  };
  b.prototype.computeBoundingBox = function() {
    null === this.boundingBox && (this.boundingBox = new THREE.Box3);
    var a = this.boundingBox, b = this.attributes.position.array, e = this.attributes.position.itemSize;
    !b || !e || 2 > b.length ? a.makeEmpty() : m.computeBox(b, a);
  };
}, {"./lib/utils":12, "./lib/vertices":13, inherits:6, "layout-bmfont-text":8, "object-assign":9, "quad-indices":10, "three-buffer-vertex-data":14}], 12:[function(a, d, k) {
  function b(a) {
    var b = a.length / 2;
    g.min[0] = a[0];
    g.min[1] = a[1];
    g.max[0] = a[0];
    g.max[1] = a[1];
    for (var f = 0; f < b; f++) {
      var d = a[2 * f], m = a[2 * f + 1];
      g.min[0] = Math.min(d, g.min[0]);
      g.min[1] = Math.min(m, g.min[1]);
      g.max[0] = Math.max(d, g.max[0]);
      g.max[1] = Math.max(m, g.max[1]);
    }
  }
  var g = {min:[0, 0], max:[0, 0]};
  d.exports.computeBox = function(a, e) {
    b(a);
    e.min.set(g.min[0], g.min[1], 0);
    e.max.set(g.max[0], g.max[1], 0);
  };
  d.exports.computeSphere = function(a, e) {
    b(a);
    a = g.min[0];
    var f = g.min[1], d = g.max[0] - a, m = g.max[1] - f, n = Math.sqrt(d * d + m * m);
    e.center.set(a + d / 2, f + m / 2, 0);
    e.radius = n / 2;
  };
}, {}], 13:[function(a, d, k) {
  d.exports.pages = function(a) {
    var b = new Float32Array(4 * a.length), f = 0;
    a.forEach(function(a) {
      a = a.data.page || 0;
      b[f++] = a;
      b[f++] = a;
      b[f++] = a;
      b[f++] = a;
    });
    return b;
  };
  d.exports.uvs = function(a, d, f, e) {
    var b = new Float32Array(8 * a.length), g = 0;
    a.forEach(function(a) {
      a = a.data;
      var m = a.y + a.height, c = a.x / d, h = a.y / f, k = (a.x + a.width) / d, q = m / f;
      e && (h = (f - a.y) / f, q = (f - m) / f);
      b[g++] = c;
      b[g++] = h;
      b[g++] = c;
      b[g++] = q;
      b[g++] = k;
      b[g++] = q;
      b[g++] = k;
      b[g++] = h;
    });
    return b;
  };
  d.exports.positions = function(a) {
    var b = new Float32Array(8 * a.length), f = 0;
    a.forEach(function(a) {
      var e = a.data, d = a.position[0] + e.xoffset;
      a = a.position[1] + e.yoffset;
      var g = e.width;
      e = e.height;
      b[f++] = d;
      b[f++] = a;
      b[f++] = d;
      b[f++] = a + e;
      b[f++] = d + g;
      b[f++] = a + e;
      b[f++] = d + g;
      b[f++] = a;
    });
    return b;
  };
}, {}], 14:[function(a, d, k) {
  function b(a, b, d, k) {
    b = b || [];
    var e;
    if (!(e = !a)) {
      if (e = b, a.itemSize === d && a.array) {
        var f = a.array.length;
        e = Array.isArray(e) && Array.isArray(e[0]) ? f !== e.length * d : f !== e.length;
      } else {
        e = !0;
      }
    }
    if (e) {
      return b = g(b, k), a = new THREE.BufferAttribute(b, d), a.needsUpdate = !0, a;
    }
    g(b, a.array);
    a.needsUpdate = !0;
    return null;
  }
  var g = a("flatten-vertex-data");
  d.exports.attr = function(a, e, d, g, m) {
    "number" !== typeof g && (g = 3);
    "string" !== typeof m && (m = "float32");
    if (Array.isArray(d) && Array.isArray(d[0]) && d[0].length !== g) {
      throw Error("Nested vertex array has unexpected size; expected " + g + " but found " + d[0].length);
    }
    var f = a.getAttribute(e);
    (d = b(f, d, g, m)) && a.addAttribute(e, d);
  };
  d.exports.index = function(a, e, d, g) {
    "number" !== typeof d && (d = 1);
    "string" !== typeof g && (g = "uint16");
    var f = !a.index && "function" !== typeof a.setIndex, n = f ? a.getAttribute("index") : a.index;
    if (e = b(n, e, d, g)) {
      f ? a.addAttribute("index", e) : a.index = e;
    }
  };
}, {"flatten-vertex-data":4}], 15:[function(a, d, k) {
  function b(a, b, f, d) {
    return {start:b, end:b + Math.min(d, f - b)};
  }
  var g = /\n/, f = /\s/;
  d.exports = function(a, b) {
    return d.exports.lines(a, b).map(function(b) {
      return a.substring(b.start, b.end);
    }).join("\n");
  };
  d.exports.lines = function(a, d) {
    d = d || {};
    if (0 === d.width && "nowrap" !== d.mode) {
      return [];
    }
    a = a || "";
    var e = "number" === typeof d.width ? d.width : Number.MAX_VALUE, m = Math.max(0, d.start || 0), n = "number" === typeof d.end ? d.end : a.length, c = d.mode;
    d = d.measure || b;
    if ("pre" === c) {
      var h = [];
      for (c = m; m < n && m < a.length; m++) {
        var k = a.charAt(m);
        if ((k = g.test(k)) || m === n - 1) {
          c = d(a, c, k ? m : m + 1, e), h.push(c), c = m + 1;
        }
      }
      return h;
    }
    h = m;
    m = [];
    "nowrap" === c && (e = Number.MAX_VALUE);
    for (; h < n && h < a.length;) {
      c = n;
      k = a.indexOf("\n", h);
      for (c = -1 === k || k > c ? c : k; h < c && f.test(a.charAt(h));) {
        h++;
      }
      k = d(a, h, c, e);
      var r = h + (k.end - k.start);
      k = r + 1;
      if (r < c) {
        for (; r > h && !f.test(a.charAt(r));) {
          r--;
        }
        if (r === h) {
          k > h + 1 && k--, r = k;
        } else {
          for (k = r; r > h && f.test(a.charAt(r - 1));) {
            r--;
          }
        }
      }
      r >= h && (h = d(a, h, r, e), m.push(h));
      h = k;
    }
    return m;
  };
}, {}], 16:[function(a, d, k) {
  d.exports = function() {
    for (var a = {}, f = 0; f < arguments.length; f++) {
      var e = arguments[f], d;
      for (d in e) {
        b.call(e, d) && (a[d] = e[d]);
      }
    }
    return a;
  };
  var b = Object.prototype.hasOwnProperty;
}, {}], 17:[function(a, d, k) {
  window.createGeometry = a("three-bmfont-text");
}, {"three-bmfont-text":11}]}, {}, [17]);
!function(a) {
  if ("object" == typeof exports && "undefined" != typeof module) {
    module.exports = a();
  } else {
    var d;
    "undefined" != typeof window ? d = window : "undefined" != typeof global ? d = global : "undefined" != typeof self && (d = self);
    d.CANNON = a();
  }
}(function() {
  return function g(d, k, b) {
    function f(q, m) {
      if (!k[q]) {
        if (!d[q]) {
          var n = "function" == typeof require && require;
          if (!m && n) {
            return n(q, !0);
          }
          if (e) {
            return e(q, !0);
          }
          throw Error("Cannot find module '" + q + "'");
        }
        m = k[q] = {exports:{}};
        d[q][0].call(m.exports, function(c) {
          var b = d[q][1][c];
          return f(b ? b : c);
        }, m, m.exports, g, d, k, b);
      }
      return k[q].exports;
    }
    for (var e = "function" == typeof require && require, r = 0; r < b.length; r++) {
      f(b[r]);
    }
    return f;
  }({1:[function(d, k) {
    k.exports = {name:"cannon", version:"0.6.2", description:"A lightweight 3D physics engine written in JavaScript.", homepage:"https://github.com/schteppe/cannon.js", author:"Stefan Hedman <schteppe@gmail.com> (http://steffe.se)", keywords:["cannon.js", "cannon", "physics", "engine", "3d"], main:"./build/cannon.js", engines:{node:"*"}, repository:{type:"git", url:"https://github.com/schteppe/cannon.js.git"}, bugs:{url:"https://github.com/schteppe/cannon.js/issues"}, licenses:[{type:"MIT"}], devDependencies:{jshint:"latest", 
    "uglify-js":"latest", nodeunit:"^0.9.0", grunt:"~0.4.0", "grunt-contrib-jshint":"~0.1.1", "grunt-contrib-nodeunit":"^0.4.1", "grunt-contrib-concat":"~0.1.3", "grunt-contrib-uglify":"^0.5.1", "grunt-browserify":"^2.1.4", "grunt-contrib-yuidoc":"^0.5.2", browserify:"*"}, dependencies:{}};
  }, {}], 2:[function(d, k) {
    k.exports = {version:d("../package.json").version, AABB:d("./collision/AABB"), ArrayCollisionMatrix:d("./collision/ArrayCollisionMatrix"), Body:d("./objects/Body"), Box:d("./shapes/Box"), Broadphase:d("./collision/Broadphase"), Constraint:d("./constraints/Constraint"), ContactEquation:d("./equations/ContactEquation"), Narrowphase:d("./world/Narrowphase"), ConeTwistConstraint:d("./constraints/ConeTwistConstraint"), ContactMaterial:d("./material/ContactMaterial"), ConvexPolyhedron:d("./shapes/ConvexPolyhedron"), 
    Cylinder:d("./shapes/Cylinder"), DistanceConstraint:d("./constraints/DistanceConstraint"), Equation:d("./equations/Equation"), EventTarget:d("./utils/EventTarget"), FrictionEquation:d("./equations/FrictionEquation"), GSSolver:d("./solver/GSSolver"), GridBroadphase:d("./collision/GridBroadphase"), Heightfield:d("./shapes/Heightfield"), HingeConstraint:d("./constraints/HingeConstraint"), LockConstraint:d("./constraints/LockConstraint"), Mat3:d("./math/Mat3"), Material:d("./material/Material"), 
    NaiveBroadphase:d("./collision/NaiveBroadphase"), ObjectCollisionMatrix:d("./collision/ObjectCollisionMatrix"), Pool:d("./utils/Pool"), Particle:d("./shapes/Particle"), Plane:d("./shapes/Plane"), PointToPointConstraint:d("./constraints/PointToPointConstraint"), Quaternion:d("./math/Quaternion"), Ray:d("./collision/Ray"), RaycastVehicle:d("./objects/RaycastVehicle"), RaycastResult:d("./collision/RaycastResult"), RigidVehicle:d("./objects/RigidVehicle"), RotationalEquation:d("./equations/RotationalEquation"), 
    RotationalMotorEquation:d("./equations/RotationalMotorEquation"), SAPBroadphase:d("./collision/SAPBroadphase"), SPHSystem:d("./objects/SPHSystem"), Shape:d("./shapes/Shape"), Solver:d("./solver/Solver"), Sphere:d("./shapes/Sphere"), SplitSolver:d("./solver/SplitSolver"), Spring:d("./objects/Spring"), Trimesh:d("./shapes/Trimesh"), Vec3:d("./math/Vec3"), Vec3Pool:d("./utils/Vec3Pool"), World:d("./world/World")};
  }, {"../package.json":1, "./collision/AABB":3, "./collision/ArrayCollisionMatrix":4, "./collision/Broadphase":5, "./collision/GridBroadphase":6, "./collision/NaiveBroadphase":7, "./collision/ObjectCollisionMatrix":8, "./collision/Ray":9, "./collision/RaycastResult":10, "./collision/SAPBroadphase":11, "./constraints/ConeTwistConstraint":12, "./constraints/Constraint":13, "./constraints/DistanceConstraint":14, "./constraints/HingeConstraint":15, "./constraints/LockConstraint":16, "./constraints/PointToPointConstraint":17, 
  "./equations/ContactEquation":19, "./equations/Equation":20, "./equations/FrictionEquation":21, "./equations/RotationalEquation":22, "./equations/RotationalMotorEquation":23, "./material/ContactMaterial":24, "./material/Material":25, "./math/Mat3":27, "./math/Quaternion":28, "./math/Vec3":30, "./objects/Body":31, "./objects/RaycastVehicle":32, "./objects/RigidVehicle":33, "./objects/SPHSystem":34, "./objects/Spring":35, "./shapes/Box":37, "./shapes/ConvexPolyhedron":38, "./shapes/Cylinder":39, 
  "./shapes/Heightfield":40, "./shapes/Particle":41, "./shapes/Plane":42, "./shapes/Shape":43, "./shapes/Sphere":44, "./shapes/Trimesh":45, "./solver/GSSolver":46, "./solver/Solver":47, "./solver/SplitSolver":48, "./utils/EventTarget":49, "./utils/Pool":51, "./utils/Vec3Pool":54, "./world/Narrowphase":55, "./world/World":56}], 3:[function(d, k) {
    function b(b) {
      b = b || {};
      this.lowerBound = new g;
      b.lowerBound && this.lowerBound.copy(b.lowerBound);
      this.upperBound = new g;
      b.upperBound && this.upperBound.copy(b.upperBound);
    }
    var g = d("../math/Vec3");
    d("../utils/Utils");
    k.exports = b;
    var f = new g;
    b.prototype.setFromPoints = function(b, e, d, g) {
      var c = this.lowerBound, h = this.upperBound;
      c.copy(b[0]);
      d && d.vmult(c, c);
      h.copy(c);
      for (var m = 1; m < b.length; m++) {
        var n = b[m];
        d && (d.vmult(n, f), n = f);
        n.x > h.x && (h.x = n.x);
        n.x < c.x && (c.x = n.x);
        n.y > h.y && (h.y = n.y);
        n.y < c.y && (c.y = n.y);
        n.z > h.z && (h.z = n.z);
        n.z < c.z && (c.z = n.z);
      }
      return e && (e.vadd(c, c), e.vadd(h, h)), g && (c.x -= g, c.y -= g, c.z -= g, h.x += g, h.y += g, h.z += g), this;
    };
    b.prototype.copy = function(b) {
      return this.lowerBound.copy(b.lowerBound), this.upperBound.copy(b.upperBound), this;
    };
    b.prototype.clone = function() {
      return (new b).copy(this);
    };
    b.prototype.extend = function(b) {
      var e = b.lowerBound.x;
      this.lowerBound.x > e && (this.lowerBound.x = e);
      e = b.upperBound.x;
      this.upperBound.x < e && (this.upperBound.x = e);
      e = b.lowerBound.y;
      this.lowerBound.y > e && (this.lowerBound.y = e);
      e = b.upperBound.y;
      this.upperBound.y < e && (this.upperBound.y = e);
      e = b.lowerBound.z;
      this.lowerBound.z > e && (this.lowerBound.z = e);
      e = b.upperBound.z;
      this.upperBound.z < e && (this.upperBound.z = e);
    };
    b.prototype.overlaps = function(b) {
      var e = this.lowerBound, f = this.upperBound, d = b.lowerBound;
      b = b.upperBound;
      return (d.x <= f.x && f.x <= b.x || e.x <= b.x && b.x <= f.x) && (d.y <= f.y && f.y <= b.y || e.y <= b.y && b.y <= f.y) && (d.z <= f.z && f.z <= b.z || e.z <= b.z && b.z <= f.z);
    };
    b.prototype.contains = function(b) {
      var e = this.lowerBound, f = this.upperBound, d = b.lowerBound;
      b = b.upperBound;
      return e.x <= d.x && f.x >= b.x && e.y <= d.y && f.y >= b.y && e.z <= d.z && f.z >= b.z;
    };
    b.prototype.getCorners = function(b, e, f, d, c, h, g, k) {
      var m = this.lowerBound, n = this.upperBound;
      b.copy(m);
      e.set(n.x, m.y, m.z);
      f.set(n.x, n.y, m.z);
      d.set(m.x, n.y, n.z);
      c.set(n.x, m.y, m.z);
      h.set(m.x, n.y, m.z);
      g.set(m.x, m.y, n.z);
      k.copy(n);
    };
    var e = [new g, new g, new g, new g, new g, new g, new g, new g];
    b.prototype.toLocalFrame = function(b, f) {
      this.getCorners(e[0], e[1], e[2], e[3], e[4], e[5], e[6], e[7]);
      for (var d = 0; 8 !== d; d++) {
        var g = e[d];
        b.pointToLocal(g, g);
      }
      return f.setFromPoints(e);
    };
    b.prototype.toWorldFrame = function(b, f) {
      this.getCorners(e[0], e[1], e[2], e[3], e[4], e[5], e[6], e[7]);
      for (var d = 0; 8 !== d; d++) {
        var g = e[d];
        b.pointToWorld(g, g);
      }
      return f.setFromPoints(e);
    };
  }, {"../math/Vec3":30, "../utils/Utils":53}], 4:[function(d, k) {
    function b() {
      this.matrix = [];
    }
    k.exports = b;
    b.prototype.get = function(b, f) {
      if (b = b.index, f = f.index, f > b) {
        var e = f;
        f = b;
        b = e;
      }
      return this.matrix[(b * (b + 1) >> 1) + f - 1];
    };
    b.prototype.set = function(b, f, e) {
      if (b = b.index, f = f.index, f > b) {
        var d = f;
        f = b;
        b = d;
      }
      this.matrix[(b * (b + 1) >> 1) + f - 1] = e ? 1 : 0;
    };
    b.prototype.reset = function() {
      for (var b = 0, f = this.matrix.length; b !== f; b++) {
        this.matrix[b] = 0;
      }
    };
    b.prototype.setNumObjects = function(b) {
      this.matrix.length = b * (b - 1) >> 1;
    };
  }, {}], 5:[function(d, k) {
    function b() {
      this.world = null;
      this.useBoundingBoxes = !1;
      this.dirty = !0;
    }
    var g = d("../objects/Body"), f = d("../math/Vec3"), e = d("../math/Quaternion");
    d("../shapes/Shape");
    d("../shapes/Plane");
    k.exports = b;
    b.prototype.collisionPairs = function() {
      throw Error("collisionPairs not implemented for this BroadPhase class!");
    };
    var r = g.STATIC | g.KINEMATIC;
    b.prototype.needBroadphaseCollision = function(c, b) {
      return 0 === (c.collisionFilterGroup & b.collisionFilterMask) || 0 === (b.collisionFilterGroup & c.collisionFilterMask) ? !1 : 0 === (c.type & r) && c.sleepState !== g.SLEEPING || 0 === (b.type & r) && b.sleepState !== g.SLEEPING ? !0 : !1;
    };
    b.prototype.intersectionTest = function(c, b, e, f) {
      this.useBoundingBoxes ? this.doBoundingBoxBroadphase(c, b, e, f) : this.doBoundingSphereBroadphase(c, b, e, f);
    };
    var q = new f;
    new f;
    new e;
    new f;
    b.prototype.doBoundingSphereBroadphase = function(c, b, e, f) {
      b.position.vsub(c.position, q);
      var d = Math.pow(c.boundingRadius + b.boundingRadius, 2), h = q.norm2();
      d > h && (e.push(c), f.push(b));
    };
    b.prototype.doBoundingBoxBroadphase = function(c, b, e, f) {
      c.aabbNeedsUpdate && c.computeAABB();
      b.aabbNeedsUpdate && b.computeAABB();
      c.aabb.overlaps(b.aabb) && (e.push(c), f.push(b));
    };
    var m = {keys:[]}, n = [], c = [];
    b.prototype.makePairsUnique = function(b, e) {
      for (var f = b.length, d = 0; d !== f; d++) {
        n[d] = b[d], c[d] = e[d];
      }
      b.length = 0;
      for (d = e.length = 0; d !== f; d++) {
        var h = n[d].id, g = c[d].id;
        h = g > h ? h + "," + g : g + "," + h;
        m[h] = d;
        m.keys.push(h);
      }
      for (d = 0; d !== m.keys.length; d++) {
        h = m.keys.pop(), f = m[h], b.push(n[f]), e.push(c[f]), delete m[h];
      }
    };
    b.prototype.setWorld = function() {
    };
    var h = new f;
    b.boundingSphereCheck = function(c, b) {
      return c.position.vsub(b.position, h), Math.pow(c.shape.boundingSphereRadius + b.shape.boundingSphereRadius, 2) > h.norm2();
    };
    b.prototype.aabbQuery = function() {
      return console.warn(".aabbQuery is not implemented in this Broadphase subclass."), [];
    };
  }, {"../math/Quaternion":28, "../math/Vec3":30, "../objects/Body":31, "../shapes/Plane":42, "../shapes/Shape":43}], 6:[function(d, k) {
    function b(b, e, d, c, h) {
      g.apply(this);
      this.nx = d || 10;
      this.ny = c || 10;
      this.nz = h || 10;
      this.aabbMin = b || new f(100, 100, 100);
      this.aabbMax = e || new f(-100, -100, -100);
      b = this.nx * this.ny * this.nz;
      if (0 >= b) {
        throw "GridBroadphase: Each dimension's n must be >0";
      }
      this.bins = [];
      this.binLengths = [];
      this.bins.length = b;
      this.binLengths.length = b;
      for (e = 0; b > e; e++) {
        this.bins[e] = [], this.binLengths[e] = 0;
      }
    }
    k.exports = b;
    var g = d("./Broadphase"), f = d("../math/Vec3"), e = d("../shapes/Shape");
    b.prototype = new g;
    b.prototype.constructor = b;
    var r = new f;
    new f;
    b.prototype.collisionPairs = function(b, f, d) {
      function c(c, b, e, f, d, h, g) {
        c = (c - B) * K | 0;
        b = (b - E) * J | 0;
        e = (e - I) * R | 0;
        f = Q((f - B) * K);
        d = Q((d - E) * J);
        h = Q((h - I) * R);
        0 > c ? c = 0 : c >= n && (c = n - 1);
        0 > b ? b = 0 : b >= k && (b = k - 1);
        0 > e ? e = 0 : e >= p && (e = p - 1);
        0 > f ? f = 0 : f >= n && (f = n - 1);
        0 > d ? d = 0 : d >= k && (d = k - 1);
        0 > h ? h = 0 : h >= p && (h = p - 1);
        c *= q;
        b *= w;
        e *= C;
        f *= q;
        d *= w;
        for (h *= C; f >= c; c += q) {
          for (var m = b; d >= m; m += w) {
            for (var r = e; h >= r; r += C) {
              var v = c + m + r;
              O[v][Z[v]++] = g;
            }
          }
        }
      }
      var h = b.numObjects();
      b = b.bodies;
      var g = this.aabbMax, m = this.aabbMin, n = this.nx, k = this.ny, p = this.nz, q = k * p, w = p, C = 1, A = g.x, D = g.y, F = g.z, B = m.x, E = m.y, I = m.z, K = n / (A - B), J = k / (D - E), R = p / (F - I);
      A = (A - B) / n;
      var L = (D - E) / k;
      F = (F - I) / p;
      var H = .5 * Math.sqrt(A * A + L * L + F * F);
      D = e.types;
      var M = D.SPHERE, S = D.PLANE, O = (D.BOX, D.COMPOUND, D.CONVEXPOLYHEDRON, this.bins), Z = this.binLengths;
      D = this.bins.length;
      for (m = 0; m !== D; m++) {
        Z[m] = 0;
      }
      var Q = Math.ceil;
      m = Math.min;
      g = Math.max;
      for (m = 0; m !== h; m++) {
        g = b[m];
        var U = g.shape;
        switch(U.type) {
          case M:
            var P = g.position.x, da = g.position.y, N = g.position.z;
            U = U.radius;
            c(P - U, da - U, N - U, P + U, da + U, N + U, g);
            break;
          case S:
            U.worldNormalNeedsUpdate && U.computeWorldNormal(g.quaternion);
            N = U.worldNormal;
            U = E + .5 * L - g.position.y;
            var V = I + .5 * F - g.position.z, ea = r;
            ea.set(B + .5 * A - g.position.x, U, V);
            for (var ha = P = 0; P !== n; P++, ha += q, ea.y = U, ea.x += A) {
              for (var W = da = 0; da !== k; da++, W += w, ea.z = V, ea.y += L) {
                for (var la = 0, X = 0; la !== p; la++, X += C, ea.z += F) {
                  if (ea.dot(N) < H) {
                    var ka = ha + W + X;
                    O[ka][Z[ka]++] = g;
                  }
                }
              }
            }
            break;
          default:
            g.aabbNeedsUpdate && g.computeAABB(), c(g.aabb.lowerBound.x, g.aabb.lowerBound.y, g.aabb.lowerBound.z, g.aabb.upperBound.x, g.aabb.upperBound.y, g.aabb.upperBound.z, g);
        }
      }
      for (m = 0; m !== D; m++) {
        if (h = Z[m], 1 < h) {
          for (b = O[m], P = 0; P !== h; P++) {
            for (g = b[P], da = 0; da !== P; da++) {
              A = b[da], this.needBroadphaseCollision(g, A) && this.intersectionTest(g, A, f, d);
            }
          }
        }
      }
      this.makePairsUnique(f, d);
    };
  }, {"../math/Vec3":30, "../shapes/Shape":43, "./Broadphase":5}], 7:[function(d, k) {
    function b() {
      g.apply(this);
    }
    k.exports = b;
    var g = d("./Broadphase");
    d = d("./AABB");
    b.prototype = new g;
    b.prototype.constructor = b;
    b.prototype.collisionPairs = function(b, e, d) {
      var f, g = b.bodies, n = g.length;
      for (b = 0; b !== n; b++) {
        for (f = 0; f !== b; f++) {
          var c = g[b];
          var h = g[f];
          this.needBroadphaseCollision(c, h) && this.intersectionTest(c, h, e, d);
        }
      }
    };
    new d;
    b.prototype.aabbQuery = function(b, e, d) {
      d = d || [];
      for (var f = 0; f < b.bodies.length; f++) {
        var g = b.bodies[f];
        g.aabbNeedsUpdate && g.computeAABB();
        g.aabb.overlaps(e) && d.push(g);
      }
      return d;
    };
  }, {"./AABB":3, "./Broadphase":5}], 8:[function(d, k) {
    function b() {
      this.matrix = {};
    }
    k.exports = b;
    b.prototype.get = function(b, f) {
      if (b = b.id, f = f.id, f > b) {
        var e = f;
        f = b;
        b = e;
      }
      return b + "-" + f in this.matrix;
    };
    b.prototype.set = function(b, f, e) {
      if (b = b.id, f = f.id, f > b) {
        var d = f;
        f = b;
        b = d;
      }
      e ? this.matrix[b + "-" + f] = !0 : delete this.matrix[b + "-" + f];
    };
    b.prototype.reset = function() {
      this.matrix = {};
    };
    b.prototype.setNumObjects = function() {
    };
  }, {}], 9:[function(d, k) {
    function b(c, e) {
      this.from = c ? c.clone() : new f;
      this.to = e ? e.clone() : new f;
      this._direction = new f;
      this.precision = 1E-4;
      this.checkCollisionResponse = !0;
      this.skipBackfaces = !1;
      this.collisionFilterGroup = this.collisionFilterMask = -1;
      this.mode = b.ANY;
      this.result = new r;
      this.hasHit = !1;
      this.callback = function() {
      };
    }
    function g(b, e, f, d) {
      d.vsub(e, M);
      f.vsub(e, c);
      b.vsub(e, h);
      var g, m;
      b = M.dot(M);
      e = M.dot(c);
      f = M.dot(h);
      d = c.dot(c);
      var p = c.dot(h);
      return 0 <= (g = d * f - e * p) && 0 <= (m = b * p - e * f) && b * d - e * e > g + m;
    }
    k.exports = b;
    var f = d("../math/Vec3");
    k = d("../math/Quaternion");
    var e = d("../math/Transform"), r = (d("../shapes/ConvexPolyhedron"), d("../shapes/Box"), d("../collision/RaycastResult")), q = d("../shapes/Shape");
    d = d("../collision/AABB");
    b.prototype.constructor = b;
    b.CLOSEST = 1;
    b.ANY = 2;
    b.ALL = 4;
    var m = new d, n = [];
    b.prototype.intersectWorld = function(c, e) {
      return this.mode = e.mode || b.ANY, this.result = e.result || new r, this.skipBackfaces = !!e.skipBackfaces, this.collisionFilterMask = "undefined" != typeof e.collisionFilterMask ? e.collisionFilterMask : -1, this.collisionFilterGroup = "undefined" != typeof e.collisionFilterGroup ? e.collisionFilterGroup : -1, e.from && this.from.copy(e.from), e.to && this.to.copy(e.to), this.callback = e.callback || function() {
      }, this.hasHit = !1, this.result.reset(), this._updateDirection(), this.getAABB(m), n.length = 0, c.broadphase.aabbQuery(c, m, n), this.intersectBodies(n), this.hasHit;
    };
    var c = new f, h = new f;
    b.pointInTriangle = g;
    var t = new f, z = new k;
    b.prototype.intersectBody = function(c, b) {
      b && (this.result = b, this._updateDirection());
      b = this.checkCollisionResponse;
      if ((!b || c.collisionResponse) && 0 !== (this.collisionFilterGroup & c.collisionFilterMask) && 0 !== (c.collisionFilterGroup & this.collisionFilterMask)) {
        for (var e = 0, f = c.shapes.length; f > e; e++) {
          var d = c.shapes[e];
          if ((!b || d.collisionResponse) && (c.quaternion.mult(c.shapeOrientations[e], z), c.quaternion.vmult(c.shapeOffsets[e], t), t.vadd(c.position, t), this.intersectShape(d, z, t, c), this.result._shouldStop)) {
            break;
          }
        }
      }
    };
    b.prototype.intersectBodies = function(c, b) {
      b && (this.result = b, this._updateDirection());
      b = 0;
      for (var e = c.length; !this.result._shouldStop && e > b; b++) {
        this.intersectBody(c[b]);
      }
    };
    b.prototype._updateDirection = function() {
      this.to.vsub(this.from, this._direction);
      this._direction.normalize();
    };
    b.prototype.intersectShape = function(c, b, e, f) {
      var d = this.from, h = this._direction;
      e.vsub(d, M);
      var g = M.dot(h);
      h.mult(g, S);
      S.vadd(d, S);
      e.distanceTo(S) > c.boundingSphereRadius || (d = this[c.type]) && d.call(this, c, b, e, f);
    };
    var y = (new f, new f, new f), x = new f, p = new f, v = new f;
    new f;
    new r;
    b.prototype.intersectBox = function(c, b, e, f) {
      return this.intersectConvex(c.convexPolyhedronRepresentation, b, e, f);
    };
    b.prototype[q.types.BOX] = b.prototype.intersectBox;
    b.prototype.intersectPlane = function(c, b, e, d) {
      var h = this.from, g = this.to, m = this._direction, p = new f(0, 0, 1);
      b.vmult(p, p);
      var n = new f;
      h.vsub(e, n);
      b = n.dot(p);
      g.vsub(e, n);
      n = n.dot(p);
      if (!(0 < b * n || h.distanceTo(g) < b || (n = p.dot(m), Math.abs(n) < this.precision))) {
        var k = new f;
        g = new f;
        b = new f;
        h.vsub(e, k);
        e = -p.dot(k) / n;
        m.scale(e, g);
        h.vadd(g, b);
        this.reportIntersection(p, b, c, d, -1);
      }
    };
    b.prototype[q.types.PLANE] = b.prototype.intersectPlane;
    b.prototype.getAABB = function(c) {
      var b = this.to, e = this.from;
      c.lowerBound.x = Math.min(b.x, e.x);
      c.lowerBound.y = Math.min(b.y, e.y);
      c.lowerBound.z = Math.min(b.z, e.z);
      c.upperBound.x = Math.max(b.x, e.x);
      c.upperBound.y = Math.max(b.y, e.y);
      c.upperBound.z = Math.max(b.z, e.z);
    };
    var w = {faceList:[0]};
    b.prototype.intersectHeightfield = function(c, d, h, g) {
      var m = (c.data, c.elementSize, new f), p = new b(this.from, this.to);
      e.pointToLocalFrame(h, d, p.from, p.from);
      e.pointToLocalFrame(h, d, p.to, p.to);
      var n = [], k = null, q = null, r = null, v = null, t = c.getIndexOfPosition(p.from.x, p.from.y, n, !1);
      if (t && (k = n[0], q = n[1], r = n[0], v = n[1]), t = c.getIndexOfPosition(p.to.x, p.to.y, n, !1), t && ((null === k || n[0] < k) && (k = n[0]), (null === r || n[0] > r) && (r = n[0]), (null === q || n[1] < q) && (q = n[1]), (null === v || n[1] > v) && (v = n[1])), null !== k) {
        for (p = [], c.getRectMinMax(k, q, r, v, p), k = (p[0], p[1], k); r >= k; k++) {
          for (p = q; v >= p; p++) {
            if (this.result._shouldStop || (c.getConvexTrianglePillar(k, p, !1), e.pointToWorldFrame(h, d, c.pillarOffset, m), this.intersectConvex(c.pillarConvex, d, m, g, w), this.result._shouldStop)) {
              return;
            }
            c.getConvexTrianglePillar(k, p, !0);
            e.pointToWorldFrame(h, d, c.pillarOffset, m);
            this.intersectConvex(c.pillarConvex, d, m, g, w);
          }
        }
      }
    };
    b.prototype[q.types.HEIGHTFIELD] = b.prototype.intersectHeightfield;
    var C = new f, A = new f;
    b.prototype.intersectSphere = function(c, b, e, f) {
      b = this.from;
      var d = this.to, h = Math.pow(d.x - b.x, 2) + Math.pow(d.y - b.y, 2) + Math.pow(d.z - b.z, 2), g = 2 * ((d.x - b.x) * (b.x - e.x) + (d.y - b.y) * (b.y - e.y) + (d.z - b.z) * (b.z - e.z)), m = Math.pow(g, 2) - 4 * h * (Math.pow(b.x - e.x, 2) + Math.pow(b.y - e.y, 2) + Math.pow(b.z - e.z, 2) - Math.pow(c.radius, 2));
      if (!(0 > m)) {
        if (0 === m) {
          b.lerp(d, m, C), C.vsub(e, A), A.normalize(), this.reportIntersection(A, C, c, f, -1);
        } else {
          var p = (-g - Math.sqrt(m)) / (2 * h);
          h = (-g + Math.sqrt(m)) / (2 * h);
          (0 <= p && 1 >= p && (b.lerp(d, p, C), C.vsub(e, A), A.normalize(), this.reportIntersection(A, C, c, f, -1)), this.result._shouldStop) || 0 <= h && 1 >= h && (b.lerp(d, h, C), C.vsub(e, A), A.normalize(), this.reportIntersection(A, C, c, f, -1));
        }
      }
    };
    b.prototype[q.types.SPHERE] = b.prototype.intersectSphere;
    var D = new f, F = (new f, new f, new f);
    b.prototype.intersectConvex = function(c, b, e, f, d) {
      d = d && d.faceList || null;
      for (var h = c.faces, m = c.vertices, n = c.faceNormals, k = this._direction, q = this.from, r = q.distanceTo(this.to), t = d ? d.length : h.length, w = this.result, z = 0; !w._shouldStop && t > z; z++) {
        var C = d ? d[z] : z, A = h[C], B = n[C], E = b, H = e;
        F.copy(m[A[0]]);
        E.vmult(F, F);
        F.vadd(H, F);
        F.vsub(q, F);
        E.vmult(B, D);
        B = k.dot(D);
        if (!(Math.abs(B) < this.precision || (B = D.dot(F) / B, 0 > B))) {
          for (k.mult(B, y), y.vadd(q, y), x.copy(m[A[0]]), E.vmult(x, x), H.vadd(x, x), B = 1; !w._shouldStop && B < A.length - 1; B++) {
            p.copy(m[A[B]]);
            v.copy(m[A[B + 1]]);
            E.vmult(p, p);
            E.vmult(v, v);
            H.vadd(p, p);
            H.vadd(v, v);
            var I = y.distanceTo(q);
            !g(y, x, p, v) && !g(y, p, x, v) || I > r || this.reportIntersection(D, y, c, f, C);
          }
        }
      }
    };
    b.prototype[q.types.CONVEXPOLYHEDRON] = b.prototype.intersectConvex;
    var B = new f, E = new f, I = new f, K = new f, J = new f, R = new f, L = (new d, []), H = new e;
    b.prototype.intersectTrimesh = function(c, b, f, d, h) {
      h = (h && h.faceList || null, c.indices);
      var m = (c.vertices, c.faceNormals, this.from), n = this.to, k = this._direction;
      H.position.copy(f);
      H.quaternion.copy(b);
      e.vectorToLocalFrame(f, b, k, E);
      e.pointToLocalFrame(f, b, m, I);
      e.pointToLocalFrame(f, b, n, K);
      m = I.distanceSquared(K);
      c.tree.rayQuery(this, H, L);
      n = 0;
      for (k = L.length; !this.result._shouldStop && n !== k; n++) {
        var q = L[n];
        c.getNormal(q, B);
        c.getVertex(h[3 * q], x);
        x.vsub(I, F);
        var r = E.dot(B);
        r = B.dot(F) / r;
        0 > r || (E.scale(r, y), y.vadd(I, y), c.getVertex(h[3 * q + 1], p), c.getVertex(h[3 * q + 2], v), r = y.distanceSquared(I), !g(y, p, x, v) && !g(y, x, p, v) || r > m || (e.vectorToWorldFrame(b, B, J), e.pointToWorldFrame(f, b, y, R), this.reportIntersection(J, R, c, d, q)));
      }
      L.length = 0;
    };
    b.prototype[q.types.TRIMESH] = b.prototype.intersectTrimesh;
    b.prototype.reportIntersection = function(c, e, f, d, h) {
      var g = this.from, m = this.to, p = g.distanceTo(e), n = this.result;
      if (!(this.skipBackfaces && 0 < c.dot(this._direction))) {
        switch(n.hitFaceIndex = "undefined" != typeof h ? h : -1, this.mode) {
          case b.ALL:
            this.hasHit = !0;
            n.set(g, m, c, e, f, d, p);
            n.hasHit = !0;
            this.callback(n);
            break;
          case b.CLOSEST:
            (p < n.distance || !n.hasHit) && (this.hasHit = !0, n.hasHit = !0, n.set(g, m, c, e, f, d, p));
            break;
          case b.ANY:
            this.hasHit = !0, n.hasHit = !0, n.set(g, m, c, e, f, d, p), n._shouldStop = !0;
        }
      }
    };
    var M = new f, S = new f;
  }, {"../collision/AABB":3, "../collision/RaycastResult":10, "../math/Quaternion":28, "../math/Transform":29, "../math/Vec3":30, "../shapes/Box":37, "../shapes/ConvexPolyhedron":38, "../shapes/Shape":43}], 10:[function(d, k) {
    function b() {
      this.rayFromWorld = new g;
      this.rayToWorld = new g;
      this.hitNormalWorld = new g;
      this.hitPointWorld = new g;
      this.hasHit = !1;
      this.body = this.shape = null;
      this.distance = this.hitFaceIndex = -1;
      this._shouldStop = !1;
    }
    var g = d("../math/Vec3");
    k.exports = b;
    b.prototype.reset = function() {
      this.rayFromWorld.setZero();
      this.rayToWorld.setZero();
      this.hitNormalWorld.setZero();
      this.hitPointWorld.setZero();
      this.hasHit = !1;
      this.body = this.shape = null;
      this.distance = this.hitFaceIndex = -1;
      this._shouldStop = !1;
    };
    b.prototype.abort = function() {
      this._shouldStop = !0;
    };
    b.prototype.set = function(b, e, d, g, m, n, c) {
      this.rayFromWorld.copy(b);
      this.rayToWorld.copy(e);
      this.hitNormalWorld.copy(d);
      this.hitPointWorld.copy(g);
      this.shape = m;
      this.body = n;
      this.distance = c;
    };
  }, {"../math/Vec3":30}], 11:[function(d, k) {
    function b(b) {
      g.apply(this);
      this.axisList = [];
      this.world = null;
      this.axisIndex = 0;
      var e = this.axisList;
      this._addBodyHandler = function(b) {
        e.push(b.body);
      };
      this._removeBodyHandler = function(b) {
        b = e.indexOf(b.body);
        -1 !== b && e.splice(b, 1);
      };
      b && this.setWorld(b);
    }
    var g = (d("../shapes/Shape"), d("../collision/Broadphase"));
    k.exports = b;
    b.prototype = new g;
    b.prototype.setWorld = function(b) {
      for (var e = this.axisList.length = 0; e < b.bodies.length; e++) {
        this.axisList.push(b.bodies[e]);
      }
      b.removeEventListener("addBody", this._addBodyHandler);
      b.removeEventListener("removeBody", this._removeBodyHandler);
      b.addEventListener("addBody", this._addBodyHandler);
      b.addEventListener("removeBody", this._removeBodyHandler);
      this.world = b;
      this.dirty = !0;
    };
    b.insertionSortX = function(b) {
      for (var e = 1, f = b.length; f > e; e++) {
        for (var d = b[e], g = e - 1; 0 <= g && !(b[g].aabb.lowerBound.x <= d.aabb.lowerBound.x); g--) {
          b[g + 1] = b[g];
        }
        b[g + 1] = d;
      }
      return b;
    };
    b.insertionSortY = function(b) {
      for (var e = 1, f = b.length; f > e; e++) {
        for (var d = b[e], g = e - 1; 0 <= g && !(b[g].aabb.lowerBound.y <= d.aabb.lowerBound.y); g--) {
          b[g + 1] = b[g];
        }
        b[g + 1] = d;
      }
      return b;
    };
    b.insertionSortZ = function(b) {
      for (var e = 1, f = b.length; f > e; e++) {
        for (var d = b[e], g = e - 1; 0 <= g && !(b[g].aabb.lowerBound.z <= d.aabb.lowerBound.z); g--) {
          b[g + 1] = b[g];
        }
        b[g + 1] = d;
      }
      return b;
    };
    b.prototype.collisionPairs = function(f, e, d) {
      var g, m = this.axisList, n = m.length, c = this.axisIndex;
      this.dirty && (this.sortList(), this.dirty = !1);
      for (f = 0; f !== n; f++) {
        var h = m[f];
        for (g = f + 1; n > g; g++) {
          var k = m[g];
          if (this.needBroadphaseCollision(h, k)) {
            if (!b.checkBounds(h, k, c)) {
              break;
            }
            this.intersectionTest(h, k, e, d);
          }
        }
      }
    };
    b.prototype.sortList = function() {
      for (var f = this.axisList, e = this.axisIndex, d = f.length, g = 0; g !== d; g++) {
        var m = f[g];
        m.aabbNeedsUpdate && m.computeAABB();
      }
      0 === e ? b.insertionSortX(f) : 1 === e ? b.insertionSortY(f) : 2 === e && b.insertionSortZ(f);
    };
    b.checkBounds = function(b, e, d) {
      var f, g;
      0 === d ? (f = b.position.x, g = e.position.x) : 1 === d ? (f = b.position.y, g = e.position.y) : 2 === d && (f = b.position.z, g = e.position.z);
      return f + b.boundingRadius > g - e.boundingRadius;
    };
    b.prototype.autoDetectAxis = function() {
      for (var b = 0, e = 0, d = 0, g = 0, m = 0, n = 0, c = this.axisList, h = c.length, k = 1 / h, z = 0; z !== h; z++) {
        var y = c[z], x = y.position.x;
        b += x;
        e += x * x;
        x = y.position.y;
        d += x;
        g += x * x;
        y = y.position.z;
        m += y;
        n += y * y;
      }
      b = e - b * b * k;
      d = g - d * d * k;
      m = n - m * m * k;
      this.axisIndex = b > d ? b > m ? 0 : 2 : d > m ? 1 : 2;
    };
    b.prototype.aabbQuery = function(b, e, d) {
      d = d || [];
      this.dirty && (this.sortList(), this.dirty = !1);
      b = this.axisIndex;
      var f = "x";
      1 === b && (f = "y");
      2 === b && (f = "z");
      b = this.axisList;
      for (f = (e.lowerBound[f], e.upperBound[f], 0); f < b.length; f++) {
        var g = b[f];
        g.aabbNeedsUpdate && g.computeAABB();
        g.aabb.overlaps(e) && d.push(g);
      }
      return d;
    };
  }, {"../collision/Broadphase":5, "../shapes/Shape":43}], 12:[function(d, k) {
    function b(b, d, n) {
      n = n || {};
      var c = "undefined" != typeof n.maxForce ? n.maxForce : 1E6, h = n.pivotA ? n.pivotA.clone() : new r, m = n.pivotB ? n.pivotB.clone() : new r;
      this.axisA = n.axisA ? n.axisA.clone() : new r;
      this.axisB = n.axisB ? n.axisB.clone() : new r;
      g.call(this, b, h, d, m, c);
      this.collideConnected = !!n.collideConnected;
      this.angle = "undefined" != typeof n.angle ? n.angle : 0;
      h = this.coneEquation = new f(b, d, n);
      b = this.twistEquation = new e(b, d, n);
      this.twistAngle = "undefined" != typeof n.twistAngle ? n.twistAngle : 0;
      h.maxForce = 0;
      h.minForce = -c;
      b.maxForce = 0;
      b.minForce = -c;
      this.equations.push(h, b);
    }
    k.exports = b;
    var g = (d("./Constraint"), d("./PointToPointConstraint")), f = d("../equations/ConeEquation"), e = d("../equations/RotationalEquation"), r = (d("../equations/ContactEquation"), d("../math/Vec3"));
    b.prototype = new g;
    b.constructor = b;
    new r;
    new r;
    b.prototype.update = function() {
      var b = this.bodyA, e = this.bodyB, d = this.coneEquation, c = this.twistEquation;
      g.prototype.update.call(this);
      b.vectorToWorldFrame(this.axisA, d.axisA);
      e.vectorToWorldFrame(this.axisB, d.axisB);
      this.axisA.tangents(c.axisA, c.axisA);
      b.vectorToWorldFrame(c.axisA, c.axisA);
      this.axisB.tangents(c.axisB, c.axisB);
      e.vectorToWorldFrame(c.axisB, c.axisB);
      d.angle = this.angle;
      c.maxAngle = this.twistAngle;
    };
  }, {"../equations/ConeEquation":18, "../equations/ContactEquation":19, "../equations/RotationalEquation":22, "../math/Vec3":30, "./Constraint":13, "./PointToPointConstraint":17}], 13:[function(d, k) {
    function b(d, e, k) {
      k = g.defaults(k, {collideConnected:!0, wakeUpBodies:!0});
      this.equations = [];
      this.bodyA = d;
      this.bodyB = e;
      this.id = b.idCounter++;
      this.collideConnected = k.collideConnected;
      k.wakeUpBodies && (d && d.wakeUp(), e && e.wakeUp());
    }
    k.exports = b;
    var g = d("../utils/Utils");
    b.prototype.update = function() {
      throw Error("method update() not implmemented in this Constraint subclass!");
    };
    b.prototype.enable = function() {
      for (var b = this.equations, e = 0; e < b.length; e++) {
        b[e].enabled = !0;
      }
    };
    b.prototype.disable = function() {
      for (var b = this.equations, e = 0; e < b.length; e++) {
        b[e].enabled = !1;
      }
    };
    b.idCounter = 0;
  }, {"../utils/Utils":53}], 14:[function(d, k) {
    function b(b, d, k, m) {
      g.call(this, b, d);
      "undefined" == typeof k && (k = b.position.distanceTo(d.position));
      "undefined" == typeof m && (m = 1E6);
      this.distance = k;
      b = this.distanceEquation = new f(b, d);
      this.equations.push(b);
      b.minForce = -m;
      b.maxForce = m;
    }
    k.exports = b;
    var g = d("./Constraint"), f = d("../equations/ContactEquation");
    b.prototype = new g;
    b.prototype.update = function() {
      var b = this.distanceEquation, d = .5 * this.distance, f = b.ni;
      this.bodyB.position.vsub(this.bodyA.position, f);
      f.normalize();
      f.mult(d, b.ri);
      f.mult(-d, b.rj);
    };
  }, {"../equations/ContactEquation":19, "./Constraint":13}], 15:[function(d, k) {
    function b(b, c, d) {
      d = d || {};
      var h = "undefined" != typeof d.maxForce ? d.maxForce : 1E6, m = d.pivotA ? d.pivotA.clone() : new r, n = d.pivotB ? d.pivotB.clone() : new r;
      g.call(this, b, m, c, n, h);
      (this.axisA = d.axisA ? d.axisA.clone() : new r(1, 0, 0)).normalize();
      (this.axisB = d.axisB ? d.axisB.clone() : new r(1, 0, 0)).normalize();
      m = this.rotationalEquation1 = new f(b, c, d);
      d = this.rotationalEquation2 = new f(b, c, d);
      b = this.motorEquation = new e(b, c, h);
      b.enabled = !1;
      this.equations.push(m, d, b);
    }
    k.exports = b;
    var g = (d("./Constraint"), d("./PointToPointConstraint")), f = d("../equations/RotationalEquation"), e = d("../equations/RotationalMotorEquation"), r = (d("../equations/ContactEquation"), d("../math/Vec3"));
    b.prototype = new g;
    b.constructor = b;
    b.prototype.enableMotor = function() {
      this.motorEquation.enabled = !0;
    };
    b.prototype.disableMotor = function() {
      this.motorEquation.enabled = !1;
    };
    b.prototype.setMotorSpeed = function(b) {
      this.motorEquation.targetVelocity = b;
    };
    b.prototype.setMotorMaxForce = function(b) {
      this.motorEquation.maxForce = b;
      this.motorEquation.minForce = -b;
    };
    var q = new r, m = new r;
    b.prototype.update = function() {
      var b = this.bodyA, c = this.bodyB, e = this.motorEquation, d = this.rotationalEquation1, f = this.rotationalEquation2, k = this.axisA, r = this.axisB;
      g.prototype.update.call(this);
      b.quaternion.vmult(k, q);
      c.quaternion.vmult(r, m);
      q.tangents(d.axisA, f.axisA);
      d.axisB.copy(m);
      f.axisB.copy(m);
      this.motorEquation.enabled && (b.quaternion.vmult(this.axisA, e.axisA), c.quaternion.vmult(this.axisB, e.axisB));
    };
  }, {"../equations/ContactEquation":19, "../equations/RotationalEquation":22, "../equations/RotationalMotorEquation":23, "../math/Vec3":30, "./Constraint":13, "./PointToPointConstraint":17}], 16:[function(d, k) {
    function b(b, d, m) {
      m = m || {};
      var n = "undefined" != typeof m.maxForce ? m.maxForce : 1E6, c = new e, h = new e, k = new e;
      b.position.vadd(d.position, k);
      k.scale(.5, k);
      d.pointToLocalFrame(k, h);
      b.pointToLocalFrame(k, c);
      g.call(this, b, c, d, h, n);
      n = this.rotationalEquation1 = new f(b, d, m);
      c = this.rotationalEquation2 = new f(b, d, m);
      b = this.rotationalEquation3 = new f(b, d, m);
      this.equations.push(n, c, b);
    }
    k.exports = b;
    var g = (d("./Constraint"), d("./PointToPointConstraint")), f = d("../equations/RotationalEquation"), e = (d("../equations/RotationalMotorEquation"), d("../equations/ContactEquation"), d("../math/Vec3"));
    b.prototype = new g;
    b.constructor = b;
    new e;
    new e;
    b.prototype.update = function() {
      var b = this.bodyA, d = this.bodyB, f = (this.motorEquation, this.rotationalEquation1), n = this.rotationalEquation2, c = this.rotationalEquation3;
      g.prototype.update.call(this);
      b.vectorToWorldFrame(e.UNIT_X, f.axisA);
      d.vectorToWorldFrame(e.UNIT_Y, f.axisB);
      b.vectorToWorldFrame(e.UNIT_Y, n.axisA);
      d.vectorToWorldFrame(e.UNIT_Z, n.axisB);
      b.vectorToWorldFrame(e.UNIT_Z, c.axisA);
      d.vectorToWorldFrame(e.UNIT_X, c.axisB);
    };
  }, {"../equations/ContactEquation":19, "../equations/RotationalEquation":22, "../equations/RotationalMotorEquation":23, "../math/Vec3":30, "./Constraint":13, "./PointToPointConstraint":17}], 17:[function(d, k) {
    function b(b, d, m, n, c) {
      g.call(this, b, m);
      c = "undefined" != typeof c ? c : 1E6;
      this.pivotA = d ? d.clone() : new e;
      this.pivotB = n ? n.clone() : new e;
      d = this.equationX = new f(b, m);
      n = this.equationY = new f(b, m);
      b = this.equationZ = new f(b, m);
      this.equations.push(d, n, b);
      d.minForce = n.minForce = b.minForce = -c;
      d.maxForce = n.maxForce = b.maxForce = c;
      d.ni.set(1, 0, 0);
      n.ni.set(0, 1, 0);
      b.ni.set(0, 0, 1);
    }
    k.exports = b;
    var g = d("./Constraint"), f = d("../equations/ContactEquation"), e = d("../math/Vec3");
    b.prototype = new g;
    b.prototype.update = function() {
      var b = this.bodyB, e = this.equationX, d = this.equationY, f = this.equationZ;
      this.bodyA.quaternion.vmult(this.pivotA, e.ri);
      b.quaternion.vmult(this.pivotB, e.rj);
      d.ri.copy(e.ri);
      d.rj.copy(e.rj);
      f.ri.copy(e.ri);
      f.rj.copy(e.rj);
    };
  }, {"../equations/ContactEquation":19, "../math/Vec3":30, "./Constraint":13}], 18:[function(d, k) {
    function b(b, e, d) {
      d = d || {};
      var c = "undefined" != typeof d.maxForce ? d.maxForce : 1E6;
      f.call(this, b, e, -c, c);
      this.axisA = d.axisA ? d.axisA.clone() : new g(1, 0, 0);
      this.axisB = d.axisB ? d.axisB.clone() : new g(0, 1, 0);
      this.angle = "undefined" != typeof d.angle ? d.angle : 0;
    }
    k.exports = b;
    var g = d("../math/Vec3"), f = (d("../math/Mat3"), d("./Equation"));
    b.prototype = new f;
    b.prototype.constructor = b;
    var e = new g, r = new g;
    b.prototype.computeB = function(b) {
      var d = this.a, f = this.b, c = this.axisA, h = this.axisB, g = this.jacobianElementA, k = this.jacobianElementB;
      c.cross(h, e);
      h.cross(c, r);
      g.rotational.copy(r);
      k.rotational.copy(e);
      c = Math.cos(this.angle) - c.dot(h);
      h = this.computeGW();
      g = this.computeGiMf();
      return -c * d - h * f - b * g;
    };
  }, {"../math/Mat3":27, "../math/Vec3":30, "./Equation":20}], 19:[function(d, k) {
    function b(c, b, e) {
      g.call(this, c, b, 0, "undefined" != typeof e ? e : 1E6);
      this.restitution = 0;
      this.ri = new f;
      this.rj = new f;
      this.ni = new f;
    }
    k.exports = b;
    var g = d("./Equation"), f = d("../math/Vec3");
    d("../math/Mat3");
    b.prototype = new g;
    b.prototype.constructor = b;
    var e = new f, r = new f, q = new f;
    b.prototype.computeB = function(c) {
      var b = this.a, d = this.b, f = this.bi, h = this.bj, g = this.ri, m = this.rj, n = f.velocity, k = f.angularVelocity, t = (f.force, f.torque, h.velocity), z = h.angularVelocity, E = (h.force, h.torque, q), I = this.jacobianElementA, K = this.jacobianElementB, J = this.ni;
      g.cross(J, e);
      m.cross(J, r);
      J.negate(I.spatial);
      e.negate(I.rotational);
      K.spatial.copy(J);
      K.rotational.copy(r);
      E.copy(h.position);
      E.vadd(m, E);
      E.vsub(f.position, E);
      E.vsub(g, E);
      f = J.dot(E);
      h = this.restitution + 1;
      n = h * t.dot(J) - h * n.dot(J) + z.dot(r) - k.dot(e);
      k = this.computeGiMf();
      return -f * b - n * d - c * k;
    };
    var m = new f, n = new f, c = new f, h = new f, t = new f;
    b.prototype.getImpactVelocityAlongNormal = function() {
      return this.bi.position.vadd(this.ri, c), this.bj.position.vadd(this.rj, h), this.bi.getVelocityAtWorldPoint(c, m), this.bj.getVelocityAtWorldPoint(h, n), m.vsub(n, t), this.ni.dot(t);
    };
  }, {"../math/Mat3":27, "../math/Vec3":30, "./Equation":20}], 20:[function(d, k) {
    function b(c, e, d, f) {
      this.id = b.id++;
      this.minForce = "undefined" == typeof d ? -1E6 : d;
      this.maxForce = "undefined" == typeof f ? 1E6 : f;
      this.bi = c;
      this.bj = e;
      this.eps = this.b = this.a = 0;
      this.jacobianElementA = new g;
      this.jacobianElementB = new g;
      this.enabled = !0;
      this.setSpookParams(1E7, 4, 1 / 60);
    }
    k.exports = b;
    var g = d("../math/JacobianElement");
    d = d("../math/Vec3");
    b.prototype.constructor = b;
    b.id = 0;
    b.prototype.setSpookParams = function(c, b, e) {
      this.a = 4 / (e * (1 + 4 * b));
      this.b = 4 * b / (1 + 4 * b);
      this.eps = 4 / (e * e * c * (1 + 4 * b));
    };
    b.prototype.computeB = function(c, b, e) {
      var d = this.computeGW(), f = this.computeGq(), h = this.computeGiMf();
      return -f * c - d * b - h * e;
    };
    b.prototype.computeGq = function() {
      var c = this.jacobianElementB, b = this.bj.position;
      return this.jacobianElementA.spatial.dot(this.bi.position) + c.spatial.dot(b);
    };
    var f = new d;
    b.prototype.computeGW = function() {
      var c = this.jacobianElementB, b = this.bi, e = this.bj, d = e.velocity;
      e = e.angularVelocity || f;
      return this.jacobianElementA.multiplyVectors(b.velocity, b.angularVelocity || f) + c.multiplyVectors(d, e);
    };
    b.prototype.computeGWlambda = function() {
      var c = this.jacobianElementB, b = this.bi, e = this.bj, d = e.vlambda;
      e = e.wlambda || f;
      return this.jacobianElementA.multiplyVectors(b.vlambda, b.wlambda || f) + c.multiplyVectors(d, e);
    };
    var e = new d, r = new d, q = new d, m = new d;
    b.prototype.computeGiMf = function() {
      var c = this.jacobianElementA, b = this.jacobianElementB, d = this.bi, f = this.bj, g = d.force, p = d.torque, n = f.force, k = f.torque, C = d.invMassSolve, A = f.invMassSolve;
      return d.invInertiaWorldSolve ? d.invInertiaWorldSolve.vmult(p, q) : q.set(0, 0, 0), f.invInertiaWorldSolve ? f.invInertiaWorldSolve.vmult(k, m) : m.set(0, 0, 0), g.mult(C, e), n.mult(A, r), c.multiplyVectors(e, q) + b.multiplyVectors(r, m);
    };
    var n = new d;
    b.prototype.computeGiMGt = function() {
      var c = this.jacobianElementA, b = this.jacobianElementB, e = this.bi, d = this.bj, f = e.invInertiaWorldSolve, g = d.invInertiaWorldSolve;
      e = e.invMassSolve + d.invMassSolve;
      return f && (f.vmult(c.rotational, n), e += n.dot(c.rotational)), g && (g.vmult(b.rotational, n), e += n.dot(b.rotational)), e;
    };
    var c = new d;
    new d;
    new d;
    new d;
    new d;
    new d;
    b.prototype.addToWlambda = function(b) {
      var e = this.jacobianElementA, d = this.jacobianElementB, f = this.bi, h = this.bj;
      e.spatial.mult(f.invMassSolve * b, c);
      f.vlambda.vadd(c, f.vlambda);
      d.spatial.mult(h.invMassSolve * b, c);
      h.vlambda.vadd(c, h.vlambda);
      f.invInertiaWorldSolve && (f.invInertiaWorldSolve.vmult(e.rotational, c), c.mult(b, c), f.wlambda.vadd(c, f.wlambda));
      h.invInertiaWorldSolve && (h.invInertiaWorldSolve.vmult(d.rotational, c), c.mult(b, c), h.wlambda.vadd(c, h.wlambda));
    };
    b.prototype.computeC = function() {
      return this.computeGiMGt() + this.eps;
    };
  }, {"../math/JacobianElement":26, "../math/Vec3":30}], 21:[function(d, k) {
    function b(b, e, d) {
      g.call(this, b, e, -d, d);
      this.ri = new f;
      this.rj = new f;
      this.t = new f;
    }
    k.exports = b;
    var g = d("./Equation"), f = d("../math/Vec3");
    d("../math/Mat3");
    b.prototype = new g;
    b.prototype.constructor = b;
    var e = new f, r = new f;
    b.prototype.computeB = function(b) {
      var d = (this.a, this.b), f = (this.bi, this.bj, this.ri), c = this.rj, h = this.t;
      f.cross(h, e);
      c.cross(h, r);
      f = this.jacobianElementA;
      c = this.jacobianElementB;
      h.negate(f.spatial);
      e.negate(f.rotational);
      c.spatial.copy(h);
      c.rotational.copy(r);
      h = this.computeGW();
      f = this.computeGiMf();
      return -h * d - b * f;
    };
  }, {"../math/Mat3":27, "../math/Vec3":30, "./Equation":20}], 22:[function(d, k) {
    function b(b, e, d) {
      d = d || {};
      var c = "undefined" != typeof d.maxForce ? d.maxForce : 1E6;
      f.call(this, b, e, -c, c);
      this.axisA = d.axisA ? d.axisA.clone() : new g(1, 0, 0);
      this.axisB = d.axisB ? d.axisB.clone() : new g(0, 1, 0);
      this.maxAngle = Math.PI / 2;
    }
    k.exports = b;
    var g = d("../math/Vec3"), f = (d("../math/Mat3"), d("./Equation"));
    b.prototype = new f;
    b.prototype.constructor = b;
    var e = new g, r = new g;
    b.prototype.computeB = function(b) {
      var d = this.a, f = this.b, c = this.axisA, h = this.axisB, g = this.jacobianElementA, k = this.jacobianElementB;
      c.cross(h, e);
      h.cross(c, r);
      g.rotational.copy(r);
      k.rotational.copy(e);
      c = Math.cos(this.maxAngle) - c.dot(h);
      h = this.computeGW();
      g = this.computeGiMf();
      return -c * d - h * f - b * g;
    };
  }, {"../math/Mat3":27, "../math/Vec3":30, "./Equation":20}], 23:[function(d, k) {
    function b(b, d, k) {
      k = "undefined" != typeof k ? k : 1E6;
      f.call(this, b, d, -k, k);
      this.axisA = new g;
      this.axisB = new g;
      this.targetVelocity = 0;
    }
    k.exports = b;
    var g = d("../math/Vec3"), f = (d("../math/Mat3"), d("./Equation"));
    b.prototype = new f;
    b.prototype.constructor = b;
    b.prototype.computeB = function(b) {
      var e = (this.a, this.b), d = (this.bi, this.bj, this.axisA), f = this.axisB, g = this.jacobianElementB;
      this.jacobianElementA.rotational.copy(d);
      f.negate(g.rotational);
      d = this.computeGW() - this.targetVelocity;
      f = this.computeGiMf();
      return -d * e - b * f;
    };
  }, {"../math/Mat3":27, "../math/Vec3":30, "./Equation":20}], 24:[function(d, k) {
    function b(d, e, k) {
      k = g.defaults(k, {friction:.3, restitution:.3, contactEquationStiffness:1E7, contactEquationRelaxation:3, frictionEquationStiffness:1E7, frictionEquationRelaxation:3});
      this.id = b.idCounter++;
      this.materials = [d, e];
      this.friction = k.friction;
      this.restitution = k.restitution;
      this.contactEquationStiffness = k.contactEquationStiffness;
      this.contactEquationRelaxation = k.contactEquationRelaxation;
      this.frictionEquationStiffness = k.frictionEquationStiffness;
      this.frictionEquationRelaxation = k.frictionEquationRelaxation;
    }
    var g = d("../utils/Utils");
    k.exports = b;
    b.idCounter = 0;
  }, {"../utils/Utils":53}], 25:[function(d, k) {
    function b(d) {
      var f = "";
      d = d || {};
      "string" == typeof d ? (f = d, d = {}) : "object" == typeof d && (f = "");
      this.name = f;
      this.id = b.idCounter++;
      this.friction = "undefined" != typeof d.friction ? d.friction : -1;
      this.restitution = "undefined" != typeof d.restitution ? d.restitution : -1;
    }
    k.exports = b;
    b.idCounter = 0;
  }, {}], 26:[function(d, k) {
    function b() {
      this.spatial = new g;
      this.rotational = new g;
    }
    k.exports = b;
    var g = d("./Vec3");
    b.prototype.multiplyElement = function(b) {
      return b.spatial.dot(this.spatial) + b.rotational.dot(this.rotational);
    };
    b.prototype.multiplyVectors = function(b, e) {
      return b.dot(this.spatial) + e.dot(this.rotational);
    };
  }, {"./Vec3":30}], 27:[function(d, k) {
    function b(b) {
      this.elements = b ? b : [0, 0, 0, 0, 0, 0, 0, 0, 0];
    }
    k.exports = b;
    var g = d("./Vec3");
    b.prototype.identity = function() {
      var b = this.elements;
      b[0] = 1;
      b[1] = 0;
      b[2] = 0;
      b[3] = 0;
      b[4] = 1;
      b[5] = 0;
      b[6] = 0;
      b[7] = 0;
      b[8] = 1;
    };
    b.prototype.setZero = function() {
      var b = this.elements;
      b[0] = 0;
      b[1] = 0;
      b[2] = 0;
      b[3] = 0;
      b[4] = 0;
      b[5] = 0;
      b[6] = 0;
      b[7] = 0;
      b[8] = 0;
    };
    b.prototype.setTrace = function(b) {
      var e = this.elements;
      e[0] = b.x;
      e[4] = b.y;
      e[8] = b.z;
    };
    b.prototype.getTrace = function(b) {
      b = b || new g;
      var e = this.elements;
      b.x = e[0];
      b.y = e[4];
      b.z = e[8];
    };
    b.prototype.vmult = function(b, e) {
      e = e || new g;
      var d = this.elements, f = b.x, m = b.y;
      b = b.z;
      return e.x = d[0] * f + d[1] * m + d[2] * b, e.y = d[3] * f + d[4] * m + d[5] * b, e.z = d[6] * f + d[7] * m + d[8] * b, e;
    };
    b.prototype.smult = function(b) {
      for (var e = 0; e < this.elements.length; e++) {
        this.elements[e] *= b;
      }
    };
    b.prototype.mmult = function(d, e) {
      e = e || new b;
      for (var f = 0; 3 > f; f++) {
        for (var g = 0; 3 > g; g++) {
          for (var m = 0, n = 0; 3 > n; n++) {
            m += d.elements[f + 3 * n] * this.elements[n + 3 * g];
          }
          e.elements[f + 3 * g] = m;
        }
      }
      return e;
    };
    b.prototype.scale = function(d, e) {
      e = e || new b;
      for (var f = this.elements, g = e.elements, m = 0; 3 !== m; m++) {
        g[3 * m] = d.x * f[3 * m], g[3 * m + 1] = d.y * f[3 * m + 1], g[3 * m + 2] = d.z * f[3 * m + 2];
      }
      return e;
    };
    b.prototype.solve = function(b, e) {
      e = e || new g;
      for (var d = [], f = 0; 12 > f; f++) {
        d.push(0);
      }
      var m;
      for (f = 0; 3 > f; f++) {
        for (m = 0; 3 > m; m++) {
          d[f + 4 * m] = this.elements[f + 3 * m];
        }
      }
      d[3] = b.x;
      d[7] = b.y;
      d[11] = b.z;
      var n = 3, c = n;
      do {
        if (f = c - n, 0 === d[f + 4 * f]) {
          for (m = f + 1; c > m; m++) {
            if (0 !== d[f + 4 * m]) {
              var h = 4;
              do {
                var k = 4 - h;
                d[k + 4 * f] += d[k + 4 * m];
              } while (--h);
              break;
            }
          }
        }
        if (0 !== d[f + 4 * f]) {
          for (m = f + 1; c > m; m++) {
            var z = d[f + 4 * m] / d[f + 4 * f];
            h = 4;
            do {
              k = 4 - h, d[k + 4 * m] = f >= k ? 0 : d[k + 4 * m] - d[k + 4 * f] * z;
            } while (--h);
          }
        }
      } while (--n);
      if (e.z = d[11] / d[10], e.y = (d[7] - d[6] * e.z) / d[5], e.x = (d[3] - d[2] * e.z - d[1] * e.y) / d[0], isNaN(e.x) || isNaN(e.y) || isNaN(e.z) || 1 / 0 === e.x || 1 / 0 === e.y || 1 / 0 === e.z) {
        throw "Could not solve equation! Got x=[" + e.toString() + "], b=[" + b.toString() + "], A=[" + this.toString() + "]";
      }
      return e;
    };
    b.prototype.e = function(b, e, d) {
      return void 0 === d ? this.elements[e + 3 * b] : void(this.elements[e + 3 * b] = d);
    };
    b.prototype.copy = function(b) {
      for (var e = 0; e < b.elements.length; e++) {
        this.elements[e] = b.elements[e];
      }
      return this;
    };
    b.prototype.toString = function() {
      for (var b = "", e = 0; 9 > e; e++) {
        b += this.elements[e] + ",";
      }
      return b;
    };
    b.prototype.reverse = function(d) {
      d = d || new b;
      for (var e = [], f = 0; 18 > f; f++) {
        e.push(0);
      }
      var g;
      for (f = 0; 3 > f; f++) {
        for (g = 0; 3 > g; g++) {
          e[f + 6 * g] = this.elements[f + 3 * g];
        }
      }
      e[3] = 1;
      e[9] = 0;
      e[15] = 0;
      e[4] = 0;
      e[10] = 1;
      e[16] = 0;
      e[5] = 0;
      e[11] = 0;
      e[17] = 1;
      var m = 3, k = m;
      do {
        if (f = k - m, 0 === e[f + 6 * f]) {
          for (g = f + 1; k > g; g++) {
            if (0 !== e[f + 6 * g]) {
              var c = 6;
              do {
                var h = 6 - c;
                e[h + 6 * f] += e[h + 6 * g];
              } while (--c);
              break;
            }
          }
        }
        if (0 !== e[f + 6 * f]) {
          for (g = f + 1; k > g; g++) {
            var t = e[f + 6 * g] / e[f + 6 * f];
            c = 6;
            do {
              h = 6 - c, e[h + 6 * g] = f >= h ? 0 : e[h + 6 * g] - e[h + 6 * f] * t;
            } while (--c);
          }
        }
      } while (--m);
      f = 2;
      do {
        g = f - 1;
        do {
          t = e[f + 6 * g] / e[f + 6 * f];
          c = 6;
          do {
            h = 6 - c, e[h + 6 * g] -= e[h + 6 * f] * t;
          } while (--c);
        } while (g--);
      } while (--f);
      f = 2;
      do {
        t = 1 / e[f + 6 * f];
        c = 6;
        do {
          h = 6 - c, e[h + 6 * f] *= t;
        } while (--c);
      } while (f--);
      f = 2;
      do {
        g = 2;
        do {
          if (h = e[3 + g + 6 * f], isNaN(h) || 1 / 0 === h) {
            throw "Could not reverse! A=[" + this.toString() + "]";
          }
          d.e(f, g, h);
        } while (g--);
      } while (f--);
      return d;
    };
    b.prototype.setRotationFromQuaternion = function(b) {
      var e = b.x, d = b.y, f = b.z, g = b.w, k = e + e, c = d + d, h = f + f;
      b = e * k;
      var t = e * c;
      e *= h;
      var z = d * c;
      d *= h;
      f *= h;
      k *= g;
      c *= g;
      g *= h;
      h = this.elements;
      return h[0] = 1 - (z + f), h[1] = t - g, h[2] = e + c, h[3] = t + g, h[4] = 1 - (b + f), h[5] = d - k, h[6] = e - c, h[7] = d + k, h[8] = 1 - (b + z), this;
    };
    b.prototype.transpose = function(d) {
      d = d || new b;
      for (var e = d.elements, f = this.elements, g = 0; 3 !== g; g++) {
        for (var m = 0; 3 !== m; m++) {
          e[3 * g + m] = f[3 * m + g];
        }
      }
      return d;
    };
  }, {"./Vec3":30}], 28:[function(d, k) {
    function b(b, c, e, d) {
      this.x = void 0 !== b ? b : 0;
      this.y = void 0 !== c ? c : 0;
      this.z = void 0 !== e ? e : 0;
      this.w = void 0 !== d ? d : 1;
    }
    k.exports = b;
    var g = d("./Vec3");
    b.prototype.set = function(b, c, e, d) {
      this.x = b;
      this.y = c;
      this.z = e;
      this.w = d;
    };
    b.prototype.toString = function() {
      return this.x + "," + this.y + "," + this.z + "," + this.w;
    };
    b.prototype.toArray = function() {
      return [this.x, this.y, this.z, this.w];
    };
    b.prototype.setFromAxisAngle = function(b, c) {
      var e = Math.sin(.5 * c);
      this.x = b.x * e;
      this.y = b.y * e;
      this.z = b.z * e;
      this.w = Math.cos(.5 * c);
    };
    b.prototype.toAxisAngle = function(b) {
      b = b || new g;
      this.normalize();
      var c = 2 * Math.acos(this.w), e = Math.sqrt(1 - this.w * this.w);
      return .001 > e ? (b.x = this.x, b.y = this.y, b.z = this.z) : (b.x = this.x / e, b.y = this.y / e, b.z = this.z / e), [b, c];
    };
    var f = new g, e = new g;
    b.prototype.setFromVectors = function(b, c) {
      if (b.isAntiparallelTo(c)) {
        b.tangents(f, e), this.setFromAxisAngle(f, Math.PI);
      } else {
        var d = b.cross(c);
        this.x = d.x;
        this.y = d.y;
        this.z = d.z;
        this.w = Math.sqrt(Math.pow(b.norm(), 2) * Math.pow(c.norm(), 2)) + b.dot(c);
        this.normalize();
      }
    };
    var r = new g, q = new g, m = new g;
    b.prototype.mult = function(e, c) {
      c = c || new b;
      var d = this.w;
      return r.set(this.x, this.y, this.z), q.set(e.x, e.y, e.z), c.w = d * e.w - r.dot(q), r.cross(q, m), c.x = d * q.x + e.w * r.x + m.x, c.y = d * q.y + e.w * r.y + m.y, c.z = d * q.z + e.w * r.z + m.z, c;
    };
    b.prototype.inverse = function(e) {
      var c = this.x, d = this.y, f = this.z, g = this.w;
      e = e || new b;
      this.conjugate(e);
      c = 1 / (c * c + d * d + f * f + g * g);
      return e.x *= c, e.y *= c, e.z *= c, e.w *= c, e;
    };
    b.prototype.conjugate = function(e) {
      return e = e || new b, e.x = -this.x, e.y = -this.y, e.z = -this.z, e.w = this.w, e;
    };
    b.prototype.normalize = function() {
      var b = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
      0 === b ? (this.x = 0, this.y = 0, this.z = 0, this.w = 0) : (b = 1 / b, this.x *= b, this.y *= b, this.z *= b, this.w *= b);
    };
    b.prototype.normalizeFast = function() {
      var b = (3 - (this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w)) / 2;
      0 === b ? (this.x = 0, this.y = 0, this.z = 0, this.w = 0) : (this.x *= b, this.y *= b, this.z *= b, this.w *= b);
    };
    b.prototype.vmult = function(b, c) {
      c = c || new g;
      var e = b.x, d = b.y, f = b.z;
      b = this.x;
      var m = this.y, k = this.z, p = this.w, n = p * e + m * f - k * d, q = p * d + k * e - b * f, r = p * f + b * d - m * e;
      e = -b * e - m * d - k * f;
      return c.x = n * p + e * -b + q * -k - r * -m, c.y = q * p + e * -m + r * -b - n * -k, c.z = r * p + e * -k + n * -m - q * -b, c;
    };
    b.prototype.copy = function(b) {
      return this.x = b.x, this.y = b.y, this.z = b.z, this.w = b.w, this;
    };
    b.prototype.toEuler = function(b, c) {
      c = c || "YZX";
      var e, d, f, g = this.x, m = this.y, p = this.z, k = this.w;
      switch(c) {
        case "YZX":
          c = g * m + p * k;
          if (.499 < c && (e = 2 * Math.atan2(g, k), d = Math.PI / 2, f = 0), -.499 > c && (e = -2 * Math.atan2(g, k), d = -Math.PI / 2, f = 0), isNaN(e)) {
            f = p * p, e = Math.atan2(2 * m * k - 2 * g * p, 1 - 2 * m * m - 2 * f), d = Math.asin(2 * c), f = Math.atan2(2 * g * k - 2 * m * p, 1 - 2 * g * g - 2 * f);
          }
          break;
        default:
          throw Error("Euler order " + c + " not supported yet.");
      }
      b.y = e;
      b.z = d;
      b.x = f;
    };
    b.prototype.setFromEuler = function(b, c, e, d) {
      d = d || "XYZ";
      var f = Math.cos(b / 2), h = Math.cos(c / 2), g = Math.cos(e / 2);
      b = Math.sin(b / 2);
      c = Math.sin(c / 2);
      e = Math.sin(e / 2);
      return "XYZ" === d ? (this.x = b * h * g + f * c * e, this.y = f * c * g - b * h * e, this.z = f * h * e + b * c * g, this.w = f * h * g - b * c * e) : "YXZ" === d ? (this.x = b * h * g + f * c * e, this.y = f * c * g - b * h * e, this.z = f * h * e - b * c * g, this.w = f * h * g + b * c * e) : "ZXY" === d ? (this.x = b * h * g - f * c * e, this.y = f * c * g + b * h * e, this.z = f * h * e + b * c * g, this.w = f * h * g - b * c * e) : "ZYX" === d ? (this.x = b * h * g - f * c * e, this.y = 
      f * c * g + b * h * e, this.z = f * h * e - b * c * g, this.w = f * h * g + b * c * e) : "YZX" === d ? (this.x = b * h * g + f * c * e, this.y = f * c * g + b * h * e, this.z = f * h * e - b * c * g, this.w = f * h * g - b * c * e) : "XZY" === d && (this.x = b * h * g - f * c * e, this.y = f * c * g - b * h * e, this.z = f * h * e + b * c * g, this.w = f * h * g + b * c * e), this;
    };
    b.prototype.clone = function() {
      return new b(this.x, this.y, this.z, this.w);
    };
  }, {"./Vec3":30}], 29:[function(d, k) {
    function b(b) {
      b = b || {};
      this.position = new g;
      b.position && this.position.copy(b.position);
      this.quaternion = new f;
      b.quaternion && this.quaternion.copy(b.quaternion);
    }
    var g = d("./Vec3"), f = d("./Quaternion");
    k.exports = b;
    var e = new f;
    b.pointToLocalFrame = function(b, d, f, k) {
      k = k || new g;
      return f.vsub(b, k), d.conjugate(e), e.vmult(k, k), k;
    };
    b.prototype.pointToLocal = function(e, d) {
      return b.pointToLocalFrame(this.position, this.quaternion, e, d);
    };
    b.pointToWorldFrame = function(b, e, d, f) {
      f = f || new g;
      return e.vmult(d, f), f.vadd(b, f), f;
    };
    b.prototype.pointToWorld = function(e, d) {
      return b.pointToWorldFrame(this.position, this.quaternion, e, d);
    };
    b.prototype.vectorToWorldFrame = function(b, e) {
      e = e || new g;
      return this.quaternion.vmult(b, e), e;
    };
    b.vectorToWorldFrame = function(b, e, d) {
      return b.vmult(e, d), d;
    };
    b.vectorToLocalFrame = function(b, e, d, f) {
      f = f || new g;
      return e.w *= -1, e.vmult(d, f), e.w *= -1, f;
    };
  }, {"./Quaternion":28, "./Vec3":30}], 30:[function(d, k) {
    function b(b, e, d) {
      this.x = b || 0;
      this.y = e || 0;
      this.z = d || 0;
    }
    k.exports = b;
    var g = d("./Mat3");
    b.ZERO = new b(0, 0, 0);
    b.UNIT_X = new b(1, 0, 0);
    b.UNIT_Y = new b(0, 1, 0);
    b.UNIT_Z = new b(0, 0, 1);
    b.prototype.cross = function(e, d) {
      var f = e.x, c = e.y;
      e = e.z;
      var h = this.x, g = this.y, m = this.z;
      return d = d || new b, d.x = g * e - m * c, d.y = m * f - h * e, d.z = h * c - g * f, d;
    };
    b.prototype.set = function(b, e, d) {
      return this.x = b, this.y = e, this.z = d, this;
    };
    b.prototype.setZero = function() {
      this.x = this.y = this.z = 0;
    };
    b.prototype.vadd = function(e, d) {
      return d ? (d.x = e.x + this.x, d.y = e.y + this.y, d.z = e.z + this.z, void 0) : new b(this.x + e.x, this.y + e.y, this.z + e.z);
    };
    b.prototype.vsub = function(e, d) {
      return d ? (d.x = this.x - e.x, d.y = this.y - e.y, d.z = this.z - e.z, void 0) : new b(this.x - e.x, this.y - e.y, this.z - e.z);
    };
    b.prototype.crossmat = function() {
      return new g([0, -this.z, this.y, this.z, 0, -this.x, -this.y, this.x, 0]);
    };
    b.prototype.normalize = function() {
      var b = this.x, e = this.y, d = this.z;
      b = Math.sqrt(b * b + e * e + d * d);
      0 < b ? (e = 1 / b, this.x *= e, this.y *= e, this.z *= e) : this.z = this.y = this.x = 0;
      return b;
    };
    b.prototype.unit = function(e) {
      e = e || new b;
      var d = this.x, f = this.y, c = this.z, h = Math.sqrt(d * d + f * f + c * c);
      return 0 < h ? (h = 1 / h, e.x = d * h, e.y = f * h, e.z = c * h) : (e.x = 1, e.y = 0, e.z = 0), e;
    };
    b.prototype.norm = function() {
      var b = this.x, e = this.y, d = this.z;
      return Math.sqrt(b * b + e * e + d * d);
    };
    b.prototype.length = b.prototype.norm;
    b.prototype.norm2 = function() {
      return this.dot(this);
    };
    b.prototype.lengthSquared = b.prototype.norm2;
    b.prototype.distanceTo = function(b) {
      var e = this.x, d = this.y, c = this.z, f = b.x, g = b.y;
      b = b.z;
      return Math.sqrt((f - e) * (f - e) + (g - d) * (g - d) + (b - c) * (b - c));
    };
    b.prototype.distanceSquared = function(b) {
      var e = this.x, d = this.y, c = this.z, f = b.x, g = b.y;
      b = b.z;
      return (f - e) * (f - e) + (g - d) * (g - d) + (b - c) * (b - c);
    };
    b.prototype.mult = function(e, d) {
      d = d || new b;
      var f = this.y, c = this.z;
      return d.x = e * this.x, d.y = e * f, d.z = e * c, d;
    };
    b.prototype.scale = b.prototype.mult;
    b.prototype.dot = function(b) {
      return this.x * b.x + this.y * b.y + this.z * b.z;
    };
    b.prototype.isZero = function() {
      return 0 === this.x && 0 === this.y && 0 === this.z;
    };
    b.prototype.negate = function(e) {
      return e = e || new b, e.x = -this.x, e.y = -this.y, e.z = -this.z, e;
    };
    var f = new b, e = new b;
    b.prototype.tangents = function(b, d) {
      var g = this.norm();
      0 < g ? (g = 1 / g, f.set(this.x * g, this.y * g, this.z * g), .9 > Math.abs(f.x) ? (e.set(1, 0, 0), f.cross(e, b)) : (e.set(0, 1, 0), f.cross(e, b)), f.cross(b, d)) : (b.set(1, 0, 0), d.set(0, 1, 0));
    };
    b.prototype.toString = function() {
      return this.x + "," + this.y + "," + this.z;
    };
    b.prototype.toArray = function() {
      return [this.x, this.y, this.z];
    };
    b.prototype.copy = function(b) {
      return this.x = b.x, this.y = b.y, this.z = b.z, this;
    };
    b.prototype.lerp = function(b, e, d) {
      var c = this.x, f = this.y, g = this.z;
      d.x = c + (b.x - c) * e;
      d.y = f + (b.y - f) * e;
      d.z = g + (b.z - g) * e;
    };
    b.prototype.almostEquals = function(b, e) {
      return void 0 === e && (e = 1E-6), Math.abs(this.x - b.x) > e || Math.abs(this.y - b.y) > e || Math.abs(this.z - b.z) > e ? !1 : !0;
    };
    b.prototype.almostZero = function(b) {
      return void 0 === b && (b = 1E-6), Math.abs(this.x) > b || Math.abs(this.y) > b || Math.abs(this.z) > b ? !1 : !0;
    };
    var r = new b;
    b.prototype.isAntiparallelTo = function(b, e) {
      return this.negate(r), r.almostEquals(b, e);
    };
    b.prototype.clone = function() {
      return new b(this.x, this.y, this.z);
    };
  }, {"./Mat3":27}], 31:[function(d, k) {
    function b(c) {
      c = c || {};
      g.apply(this);
      this.id = b.idCounter++;
      this.postStep = this.preStep = this.world = null;
      this.vlambda = new f;
      this.collisionFilterGroup = "number" == typeof c.collisionFilterGroup ? c.collisionFilterGroup : 1;
      this.collisionFilterMask = "number" == typeof c.collisionFilterMask ? c.collisionFilterMask : 1;
      this.collisionResponse = !0;
      this.position = new f;
      c.position && this.position.copy(c.position);
      this.previousPosition = new f;
      this.initPosition = new f;
      this.velocity = new f;
      c.velocity && this.velocity.copy(c.velocity);
      this.initVelocity = new f;
      this.force = new f;
      var d = "number" == typeof c.mass ? c.mass : 0;
      this.mass = d;
      this.invMass = 0 < d ? 1 / d : 0;
      this.material = c.material || null;
      this.linearDamping = "number" == typeof c.linearDamping ? c.linearDamping : .01;
      this.type = 0 >= d ? b.STATIC : b.DYNAMIC;
      typeof c.type == typeof b.STATIC && (this.type = c.type);
      this.allowSleep = "undefined" != typeof c.allowSleep ? c.allowSleep : !0;
      this.sleepState = 0;
      this.sleepSpeedLimit = "undefined" != typeof c.sleepSpeedLimit ? c.sleepSpeedLimit : .1;
      this.sleepTimeLimit = "undefined" != typeof c.sleepTimeLimit ? c.sleepTimeLimit : 1;
      this.timeLastSleepy = 0;
      this._wakeUpAfterNarrowphase = !1;
      this.torque = new f;
      this.quaternion = new r;
      c.quaternion && this.quaternion.copy(c.quaternion);
      this.initQuaternion = new r;
      this.angularVelocity = new f;
      c.angularVelocity && this.angularVelocity.copy(c.angularVelocity);
      this.initAngularVelocity = new f;
      this.interpolatedPosition = new f;
      this.interpolatedQuaternion = new r;
      this.shapes = [];
      this.shapeOffsets = [];
      this.shapeOrientations = [];
      this.inertia = new f;
      this.invInertia = new f;
      this.invInertiaWorld = new e;
      this.invMassSolve = 0;
      this.invInertiaSolve = new f;
      this.invInertiaWorldSolve = new e;
      this.fixedRotation = "undefined" != typeof c.fixedRotation ? c.fixedRotation : !1;
      this.angularDamping = "undefined" != typeof c.angularDamping ? c.angularDamping : .01;
      this.aabb = new q;
      this.aabbNeedsUpdate = !0;
      this.wlambda = new f;
      c.shape && this.addShape(c.shape);
      this.updateMassProperties();
    }
    k.exports = b;
    var g = d("../utils/EventTarget"), f = (d("../shapes/Shape"), d("../math/Vec3")), e = d("../math/Mat3"), r = d("../math/Quaternion"), q = (d("../material/Material"), d("../collision/AABB")), m = d("../shapes/Box");
    b.prototype = new g;
    b.prototype.constructor = b;
    b.DYNAMIC = 1;
    b.STATIC = 2;
    b.KINEMATIC = 4;
    b.AWAKE = 0;
    b.SLEEPY = 1;
    b.SLEEPING = 2;
    b.idCounter = 0;
    b.prototype.wakeUp = function() {
      var c = this.sleepState;
      this.sleepState = 0;
      c === b.SLEEPING && this.dispatchEvent({type:"wakeup"});
    };
    b.prototype.sleep = function() {
      this.sleepState = b.SLEEPING;
      this.velocity.set(0, 0, 0);
      this.angularVelocity.set(0, 0, 0);
    };
    b.sleepyEvent = {type:"sleepy"};
    b.sleepEvent = {type:"sleep"};
    b.prototype.sleepTick = function(c) {
      if (this.allowSleep) {
        var e = this.sleepState, d = this.velocity.norm2() + this.angularVelocity.norm2(), f = Math.pow(this.sleepSpeedLimit, 2);
        e === b.AWAKE && f > d ? (this.sleepState = b.SLEEPY, this.timeLastSleepy = c, this.dispatchEvent(b.sleepyEvent)) : e === b.SLEEPY && d > f ? this.wakeUp() : e === b.SLEEPY && c - this.timeLastSleepy > this.sleepTimeLimit && (this.sleep(), this.dispatchEvent(b.sleepEvent));
      }
    };
    b.prototype.updateSolveMassProperties = function() {
      this.sleepState === b.SLEEPING || this.type === b.KINEMATIC ? (this.invMassSolve = 0, this.invInertiaSolve.setZero(), this.invInertiaWorldSolve.setZero()) : (this.invMassSolve = this.invMass, this.invInertiaSolve.copy(this.invInertia), this.invInertiaWorldSolve.copy(this.invInertiaWorld));
    };
    b.prototype.pointToLocalFrame = function(c, b) {
      b = b || new f;
      return c.vsub(this.position, b), this.quaternion.conjugate().vmult(b, b), b;
    };
    b.prototype.vectorToLocalFrame = function(c, b) {
      b = b || new f;
      return this.quaternion.conjugate().vmult(c, b), b;
    };
    b.prototype.pointToWorldFrame = function(c, b) {
      b = b || new f;
      return this.quaternion.vmult(c, b), b.vadd(this.position, b), b;
    };
    b.prototype.vectorToWorldFrame = function(c, b) {
      b = b || new f;
      return this.quaternion.vmult(c, b), b;
    };
    var n = new f, c = new r;
    b.prototype.addShape = function(c, b, e) {
      var d = new f, h = new r;
      return b && d.copy(b), e && h.copy(e), this.shapes.push(c), this.shapeOffsets.push(d), this.shapeOrientations.push(h), this.updateMassProperties(), this.updateBoundingRadius(), this.aabbNeedsUpdate = !0, this;
    };
    b.prototype.updateBoundingRadius = function() {
      for (var c = this.shapes, b = this.shapeOffsets, e = c.length, d = 0, f = 0; f !== e; f++) {
        var h = c[f];
        h.updateBoundingSphereRadius();
        var g = b[f].norm();
        h = h.boundingSphereRadius;
        g + h > d && (d = g + h);
      }
      this.boundingRadius = d;
    };
    var h = new q;
    b.prototype.computeAABB = function() {
      for (var b = this.shapes, e = this.shapeOffsets, d = this.shapeOrientations, f = b.length, g = this.quaternion, m = this.aabb, p = 0; p !== f; p++) {
        var k = b[p];
        d[p].mult(g, c);
        c.vmult(e[p], n);
        n.vadd(this.position, n);
        k.calculateWorldAABB(n, c, h.lowerBound, h.upperBound);
        0 === p ? m.copy(h) : m.extend(h);
      }
      this.aabbNeedsUpdate = !1;
    };
    var t = new e, z = new e;
    new e;
    b.prototype.updateInertiaWorld = function(c) {
      var b = this.invInertia;
      if (b.x !== b.y || b.y !== b.z || c) {
        t.setRotationFromQuaternion(this.quaternion), t.transpose(z), t.scale(b, t), t.mmult(z, this.invInertiaWorld);
      }
    };
    var y = new f, x = new f;
    b.prototype.applyForce = function(c, e) {
      this.type === b.DYNAMIC && (e.vsub(this.position, y), y.cross(c, x), this.force.vadd(c, this.force), this.torque.vadd(x, this.torque));
    };
    var p = new f, v = new f;
    b.prototype.applyLocalForce = function(c, e) {
      this.type === b.DYNAMIC && (this.vectorToWorldFrame(c, p), this.pointToWorldFrame(e, v), this.applyForce(p, v));
    };
    var w = new f, C = new f, A = new f;
    b.prototype.applyImpulse = function(c, e) {
      this.type === b.DYNAMIC && (e.vsub(this.position, w), C.copy(c), C.mult(this.invMass, C), this.velocity.vadd(C, this.velocity), w.cross(c, A), this.invInertiaWorld.vmult(A, A), this.angularVelocity.vadd(A, this.angularVelocity));
    };
    var D = new f, F = new f;
    b.prototype.applyLocalImpulse = function(c, e) {
      this.type === b.DYNAMIC && (this.vectorToWorldFrame(c, D), this.pointToWorldFrame(e, F), this.applyImpulse(D, F));
    };
    var B = new f;
    b.prototype.updateMassProperties = function() {
      this.invMass = 0 < this.mass ? 1 / this.mass : 0;
      var c = this.inertia, b = this.fixedRotation;
      this.computeAABB();
      B.set((this.aabb.upperBound.x - this.aabb.lowerBound.x) / 2, (this.aabb.upperBound.y - this.aabb.lowerBound.y) / 2, (this.aabb.upperBound.z - this.aabb.lowerBound.z) / 2);
      m.calculateInertia(B, this.mass, c);
      this.invInertia.set(0 < c.x && !b ? 1 / c.x : 0, 0 < c.y && !b ? 1 / c.y : 0, 0 < c.z && !b ? 1 / c.z : 0);
      this.updateInertiaWorld(!0);
    };
    b.prototype.getVelocityAtWorldPoint = function(c, b) {
      var e = new f;
      return c.vsub(this.position, e), this.angularVelocity.cross(e, b), this.velocity.vadd(b, b), b;
    };
  }, {"../collision/AABB":3, "../material/Material":25, "../math/Mat3":27, "../math/Quaternion":28, "../math/Vec3":30, "../shapes/Box":37, "../shapes/Shape":43, "../utils/EventTarget":49}], 32:[function(d, k) {
    function b(c) {
      this.chassisBody = c.chassisBody;
      this.wheelInfos = [];
      this.sliding = !1;
      this.world = null;
      this.indexRightAxis = "undefined" != typeof c.indexRightAxis ? c.indexRightAxis : 1;
      this.indexForwardAxis = "undefined" != typeof c.indexForwardAxis ? c.indexForwardAxis : 0;
      this.indexUpAxis = "undefined" != typeof c.indexUpAxis ? c.indexUpAxis : 2;
    }
    function g(c, b, e) {
      var d = A, f = D, h = F, g = B;
      return b.vsub(c.position, d), d.cross(e, f), c.invInertiaWorld.vmult(f, g), g.cross(d, h), c.invMass + e.dot(h);
    }
    var f = (d("./Body"), d("../math/Vec3")), e = d("../math/Quaternion"), r = (d("../collision/RaycastResult"), d("../collision/Ray")), q = d("../objects/WheelInfo");
    k.exports = b;
    var m = (new f, new f, new f, new f), n = new f, c = new f;
    new r;
    b.prototype.addWheel = function(c) {
      c = c || {};
      c = new q(c);
      var b = this.wheelInfos.length;
      return this.wheelInfos.push(c), b;
    };
    b.prototype.setSteeringValue = function(c, b) {
      this.wheelInfos[b].steering = c;
    };
    new f;
    b.prototype.applyEngineForce = function(c, b) {
      this.wheelInfos[b].engineForce = c;
    };
    b.prototype.setBrake = function(c, b) {
      this.wheelInfos[b].brake = c;
    };
    b.prototype.addToWorld = function(c) {
      this.constraints;
      c.add(this.chassisBody);
      var b = this;
      this.preStepCallback = function() {
        b.updateVehicle(c.dt);
      };
      c.addEventListener("preStep", this.preStepCallback);
      this.world = c;
    };
    b.prototype.getVehicleAxisWorld = function(c, b) {
      b.set(0 === c ? 1 : 0, 1 === c ? 1 : 0, 2 === c ? 1 : 0);
      this.chassisBody.vectorToWorldFrame(b, b);
    };
    b.prototype.updateVehicle = function(c) {
      for (var b = this.wheelInfos, e = b.length, d = this.chassisBody, h = 0; e > h; h++) {
        this.updateWheelTransform(h);
      }
      this.currentVehicleSpeedKmHour = 3.6 * d.velocity.norm();
      h = new f;
      this.getVehicleAxisWorld(this.indexForwardAxis, h);
      0 > h.dot(d.velocity) && (this.currentVehicleSpeedKmHour *= -1);
      for (h = 0; e > h; h++) {
        this.castRay(b[h]);
      }
      this.updateSuspension(c);
      var g = new f, m = new f;
      for (h = 0; e > h; h++) {
        var p = b[h], k = p.suspensionForce;
        k > p.maxSuspensionForce && (k = p.maxSuspensionForce);
        p.raycastResult.hitNormalWorld.scale(k * c, g);
        p.raycastResult.hitPointWorld.vsub(d.position, m);
        d.applyImpulse(g, p.raycastResult.hitPointWorld);
      }
      this.updateFriction(c);
      g = new f;
      m = new f;
      k = new f;
      for (h = 0; e > h; h++) {
        p = b[h];
        d.getVelocityAtWorldPoint(p.chassisConnectionPointWorld, k);
        var n = 1;
        switch(this.indexUpAxis) {
          case 1:
            n = -1;
        }
        if (p.isInContact) {
          this.getVehicleAxisWorld(this.indexForwardAxis, m);
          var q = m.dot(p.raycastResult.hitNormalWorld);
          p.raycastResult.hitNormalWorld.scale(q, g);
          m.vsub(g, m);
          q = m.dot(k);
          p.deltaRotation = n * q * c / p.radius;
        }
        !p.sliding && p.isInContact || 0 === p.engineForce || !p.useCustomSlidingRotationalSpeed || (p.deltaRotation = (0 < p.engineForce ? 1 : -1) * p.customSlidingRotationalSpeed * c);
        Math.abs(p.brake) > Math.abs(p.engineForce) && (p.deltaRotation = 0);
        p.rotation += p.deltaRotation;
        p.deltaRotation *= .99;
      }
    };
    b.prototype.updateSuspension = function() {
      for (var c = this.chassisBody.mass, b = this.wheelInfos, e = b.length, d = 0; e > d; d++) {
        var f = b[d];
        if (f.isInContact) {
          var h = f.suspensionStiffness * (f.suspensionRestLength - f.suspensionLength) * f.clippedInvContactDotSuspension;
          var g = f.suspensionRelativeVelocity;
          h -= (0 > g ? f.dampingCompression : f.dampingRelaxation) * g;
          f.suspensionForce = h * c;
          0 > f.suspensionForce && (f.suspensionForce = 0);
        } else {
          f.suspensionForce = 0;
        }
      }
    };
    b.prototype.removeFromWorld = function(c) {
      this.constraints;
      c.remove(this.chassisBody);
      c.removeEventListener("preStep", this.preStepCallback);
      this.world = null;
    };
    var h = new f, t = new f;
    b.prototype.castRay = function(c) {
      this.updateWheelTransformWorld(c);
      var b = this.chassisBody, e = -1;
      c.directionWorld.scale(c.suspensionRestLength + c.radius, h);
      var d = c.chassisConnectionPointWorld;
      d.vadd(h, t);
      var g = c.raycastResult;
      g.reset();
      var m = b.collisionResponse;
      b.collisionResponse = !1;
      this.world.rayTest(d, t, g);
      b.collisionResponse = m;
      d = g.body;
      (c.raycastResult.groundObject = 0, d) ? (e = g.distance, c.raycastResult.hitNormalWorld = g.hitNormalWorld, c.isInContact = !0, c.suspensionLength = g.distance - c.radius, g = c.suspensionRestLength - c.maxSuspensionTravel, d = c.suspensionRestLength + c.maxSuspensionTravel, c.suspensionLength < g && (c.suspensionLength = g), c.suspensionLength > d && (c.suspensionLength = d, c.raycastResult.reset()), g = c.raycastResult.hitNormalWorld.dot(c.directionWorld), d = new f, b.getVelocityAtWorldPoint(c.raycastResult.hitPointWorld, 
      d), b = c.raycastResult.hitNormalWorld.dot(d), -.1 <= g ? (c.suspensionRelativeVelocity = 0, c.clippedInvContactDotSuspension = 10) : (g = -1 / g, c.suspensionRelativeVelocity = b * g, c.clippedInvContactDotSuspension = g)) : (c.suspensionLength = c.suspensionRestLength + 0 * c.maxSuspensionTravel, c.suspensionRelativeVelocity = 0, c.directionWorld.scale(-1, c.raycastResult.hitNormalWorld), c.clippedInvContactDotSuspension = 1);
      return e;
    };
    b.prototype.updateWheelTransformWorld = function(c) {
      c.isInContact = !1;
      var b = this.chassisBody;
      b.pointToWorldFrame(c.chassisConnectionPointLocal, c.chassisConnectionPointWorld);
      b.vectorToWorldFrame(c.directionLocal, c.directionWorld);
      b.vectorToWorldFrame(c.axleLocal, c.axleWorld);
    };
    b.prototype.updateWheelTransform = function(b) {
      b = this.wheelInfos[b];
      this.updateWheelTransformWorld(b);
      b.directionLocal.scale(-1, m);
      n.copy(b.axleLocal);
      m.cross(n, c);
      c.normalize();
      n.normalize();
      var d = b.steering, f = new e;
      f.setFromAxisAngle(m, d);
      d = new e;
      d.setFromAxisAngle(n, b.rotation);
      var h = b.worldTransform.quaternion;
      this.chassisBody.quaternion.mult(f, h);
      h.mult(d, h);
      h.normalize();
      f = b.worldTransform.position;
      f.copy(b.directionWorld);
      f.scale(b.suspensionLength, f);
      f.vadd(b.chassisConnectionPointWorld, f);
    };
    var z = [new f(1, 0, 0), new f(0, 1, 0), new f(0, 0, 1)];
    b.prototype.getWheelTransformWorld = function(c) {
      return this.wheelInfos[c].worldTransform;
    };
    var y = new f, x = [], p = [];
    b.prototype.updateFriction = function(c) {
      for (var b = this.wheelInfos, e = b.length, d = this.chassisBody, h = 0, m = 0; e > m; m++) {
        var k = b[m], n = k.raycastResult.body;
        n && h++;
        k.sideImpulse = 0;
        k.forwardImpulse = 0;
        p[m] || (p[m] = new f);
        x[m] || (x[m] = new f);
      }
      for (m = 0; e > m; m++) {
        if (k = b[m], n = k.raycastResult.body) {
          var q = x[m];
          this.getWheelTransformWorld(m).vectorToWorldFrame(z[this.indexRightAxis], q);
          h = k.raycastResult.hitNormalWorld;
          var r = q.dot(h);
          h.scale(r, y);
          q.vsub(y, q);
          q.normalize();
          h.cross(q, p[m]);
          p[m].normalize();
          h = k;
          r = d;
          var t = k.raycastResult.hitPointWorld, A = k.raycastResult.hitPointWorld;
          if (1.1 < q.norm2()) {
            n = 0;
          } else {
            var B = E, D = I, F = K;
            r.getVelocityAtWorldPoint(t, B);
            n.getVelocityAtWorldPoint(A, D);
            B.vsub(D, F);
            n = -.2 * q.dot(F) * (1 / (r.invMass + n.invMass));
          }
          h.sideImpulse = n;
          k.sideImpulse *= 1;
        }
      }
      this.sliding = !1;
      for (m = 0; e > m; m++) {
        k = b[m];
        n = k.raycastResult.body;
        t = 0;
        if (k.slipInfo = 1, n) {
          h = k.brake ? k.brake : 0;
          D = d;
          A = n;
          q = k.raycastResult.hitPointWorld;
          B = p[m];
          t = h;
          r = 0;
          F = q;
          var J = v, W = w, la = C;
          D.getVelocityAtWorldPoint(F, J);
          A.getVelocityAtWorldPoint(F, W);
          J.vsub(W, la);
          F = B.dot(la);
          D = g(D, q, B);
          A = g(A, q, B);
          t = (r = 1 / (D + A) * -F, r > t && (r = t), -t > r && (r = -t), r);
          t += k.engineForce * c;
          h /= t;
          k.slipInfo *= h;
        }
        if (k.forwardImpulse = 0, k.skidInfo = 1, n) {
          if (k.skidInfo = 1, n = k.suspensionForce * c * k.frictionSlip, h = n * n, k.forwardImpulse = t, r = .5 * k.forwardImpulse, t = 1 * k.sideImpulse, r = r * r + t * t, k.sliding = !1, r > h) {
            this.sliding = !0, k.sliding = !0, h = n / Math.sqrt(r), k.skidInfo *= h;
          }
        }
      }
      if (this.sliding) {
        for (m = 0; e > m; m++) {
          k = b[m], 0 !== k.sideImpulse && 1 > k.skidInfo && (k.forwardImpulse *= k.skidInfo, k.sideImpulse *= k.skidInfo);
        }
      }
      for (m = 0; e > m; m++) {
        k = b[m];
        c = new f;
        if (c.copy(k.raycastResult.hitPointWorld), 0 !== k.forwardImpulse) {
          n = new f, p[m].scale(k.forwardImpulse, n), d.applyImpulse(n, c);
        }
        0 !== k.sideImpulse && (n = k.raycastResult.body, h = new f, h.copy(k.raycastResult.hitPointWorld), r = new f, x[m].scale(k.sideImpulse, r), d.pointToLocalFrame(c, c), c["xyz"[this.indexUpAxis]] *= k.rollInfluence, d.pointToWorldFrame(c, c), d.applyImpulse(r, c), r.scale(-1, r), n.applyImpulse(r, h));
      }
    };
    var v = new f, w = new f, C = new f, A = new f, D = new f, F = new f, B = new f, E = new f, I = new f, K = new f;
  }, {"../collision/Ray":9, "../collision/RaycastResult":10, "../math/Quaternion":28, "../math/Vec3":30, "../objects/WheelInfo":36, "./Body":31}], 33:[function(d, k) {
    function b(c) {
      (this.wheelBodies = [], this.coordinateSystem = "undefined" == typeof c.coordinateSystem ? new r(1, 2, 3) : c.coordinateSystem.clone(), this.chassisBody = c.chassisBody, this.chassisBody) || (c = new e(new r(5, 2, .5)), this.chassisBody = new g(1, c));
      this.constraints = [];
      this.wheelAxes = [];
      this.wheelForces = [];
    }
    var g = d("./Body"), f = d("../shapes/Sphere"), e = d("../shapes/Box"), r = d("../math/Vec3"), q = d("../constraints/HingeConstraint");
    k.exports = b;
    b.prototype.addWheel = function(c) {
      c = c || {};
      var b = c.body;
      b || (b = new g(1, new f(1.2)));
      this.wheelBodies.push(b);
      this.wheelForces.push(0);
      var e = (new r, "undefined" != typeof c.position ? c.position.clone() : new r), d = new r;
      this.chassisBody.pointToWorldFrame(e, d);
      b.position.set(d.x, d.y, d.z);
      c = "undefined" != typeof c.axis ? c.axis.clone() : new r(0, 1, 0);
      this.wheelAxes.push(c);
      b = new q(this.chassisBody, b, {pivotA:e, axisA:c, pivotB:r.ZERO, axisB:c, collideConnected:!1});
      return this.constraints.push(b), this.wheelBodies.length - 1;
    };
    b.prototype.setSteeringValue = function(c, b) {
      var e = this.wheelAxes[b], d = Math.cos(c);
      c = Math.sin(c);
      var f = e.x;
      e = e.y;
      this.constraints[b].axisA.set(d * f - c * e, c * f + d * e, 0);
    };
    b.prototype.setMotorSpeed = function(c, b) {
      b = this.constraints[b];
      b.enableMotor();
      b.motorTargetVelocity = c;
    };
    b.prototype.disableMotor = function(c) {
      this.constraints[c].disableMotor();
    };
    var m = new r;
    b.prototype.setWheelForce = function(c, b) {
      this.wheelForces[b] = c;
    };
    b.prototype.applyWheelForce = function(c, b) {
      var e = this.wheelBodies[b], d = e.torque;
      this.wheelAxes[b].scale(c, m);
      e.vectorToWorldFrame(m, m);
      d.vadd(m, d);
    };
    b.prototype.addToWorld = function(c) {
      for (var b = this.constraints, e = this.wheelBodies.concat([this.chassisBody]), d = 0; d < e.length; d++) {
        c.add(e[d]);
      }
      for (d = 0; d < b.length; d++) {
        c.addConstraint(b[d]);
      }
      c.addEventListener("preStep", this._update.bind(this));
    };
    b.prototype._update = function() {
      for (var c = this.wheelForces, b = 0; b < c.length; b++) {
        this.applyWheelForce(c[b], b);
      }
    };
    b.prototype.removeFromWorld = function(c) {
      for (var b = this.constraints, e = this.wheelBodies.concat([this.chassisBody]), d = 0; d < e.length; d++) {
        c.remove(e[d]);
      }
      for (d = 0; d < b.length; d++) {
        c.removeConstraint(b[d]);
      }
    };
    var n = new r;
    b.prototype.getWheelSpeed = function(c) {
      var b = this.wheelBodies[c].angularVelocity;
      return this.chassisBody.vectorToWorldFrame(this.wheelAxes[c], n), b.dot(n);
    };
  }, {"../constraints/HingeConstraint":15, "../math/Vec3":30, "../shapes/Box":37, "../shapes/Sphere":44, "./Body":31}], 34:[function(d, k) {
    function b() {
      this.particles = [];
      this.speedOfSound = this.smoothingRadius = this.density = 1;
      this.viscosity = .01;
      this.eps = 1E-6;
      this.pressures = [];
      this.densities = [];
      this.neighbors = [];
    }
    k.exports = b;
    k = (d("../shapes/Shape"), d("../math/Vec3"));
    d("../math/Quaternion");
    d("../shapes/Particle");
    d("../objects/Body");
    d("../material/Material");
    b.prototype.add = function(c) {
      this.particles.push(c);
      this.neighbors.length < this.particles.length && this.neighbors.push([]);
    };
    b.prototype.remove = function(c) {
      c = this.particles.indexOf(c);
      -1 !== c && (this.particles.splice(c, 1), this.neighbors.length > this.particles.length && this.neighbors.pop());
    };
    var g = new k;
    b.prototype.getNeighbors = function(c, b) {
      for (var e = this.particles.length, d = c.id, f = this.smoothingRadius * this.smoothingRadius, h = 0; h !== e; h++) {
        var m = this.particles[h];
        m.position.vsub(c.position, g);
        d !== m.id && g.norm2() < f && b.push(m);
      }
    };
    var f = new k, e = new k, r = new k, q = new k, m = new k, n = new k;
    b.prototype.update = function() {
      for (var c = this.particles.length, b = this.speedOfSound, d = this.eps, g = 0; g !== c; g++) {
        var k = this.particles[g], x = this.neighbors[g];
        x.length = 0;
        this.getNeighbors(k, x);
        x.push(this.particles[g]);
        for (var p = x.length, v = 0, w = 0; w !== p; w++) {
          k.position.vsub(x[w].position, f);
          var C = f.norm();
          C = this.w(C);
          v += x[w].mass * C;
        }
        this.densities[g] = v;
        this.pressures[g] = b * b * (this.densities[g] - this.density);
      }
      for (g = 0; g !== c; g++) {
        b = this.particles[g];
        e.set(0, 0, 0);
        r.set(0, 0, 0);
        x = this.neighbors[g];
        p = x.length;
        for (w = 0; w !== p; w++) {
          v = x[w], b.position.vsub(v.position, m), C = m.norm(), k = -v.mass * (this.pressures[g] / (this.densities[g] * this.densities[g] + d) + this.pressures[w] / (this.densities[w] * this.densities[w] + d)), this.gradw(m, q), q.mult(k, q), e.vadd(q, e), v.velocity.vsub(b.velocity, n), n.mult(1 / (1E-4 + this.densities[g] * this.densities[w]) * this.viscosity * v.mass, n), k = this.nablaw(C), n.mult(k, n), r.vadd(n, r);
        }
        r.mult(b.mass, r);
        e.mult(b.mass, e);
        b.force.vadd(r, b.force);
        b.force.vadd(e, b.force);
      }
    };
    b.prototype.w = function(c) {
      var b = this.smoothingRadius;
      return 315 / (64 * Math.PI * Math.pow(b, 9)) * Math.pow(b * b - c * c, 3);
    };
    b.prototype.gradw = function(c, b) {
      var e = c.norm(), d = this.smoothingRadius;
      c.mult(945 / (32 * Math.PI * Math.pow(d, 9)) * Math.pow(d * d - e * e, 2), b);
    };
    b.prototype.nablaw = function(c) {
      var b = this.smoothingRadius;
      return 945 / (32 * Math.PI * Math.pow(b, 9)) * (b * b - c * c) * (7 * c * c - 3 * b * b);
    };
  }, {"../material/Material":25, "../math/Quaternion":28, "../math/Vec3":30, "../objects/Body":31, "../shapes/Particle":41, "../shapes/Shape":43}], 35:[function(d, k) {
    function b(c, b, e) {
      e = e || {};
      this.restLength = "number" == typeof e.restLength ? e.restLength : 1;
      this.stiffness = e.stiffness || 100;
      this.damping = e.damping || 1;
      this.bodyA = c;
      this.bodyB = b;
      this.localAnchorA = new g;
      this.localAnchorB = new g;
      e.localAnchorA && this.localAnchorA.copy(e.localAnchorA);
      e.localAnchorB && this.localAnchorB.copy(e.localAnchorB);
      e.worldAnchorA && this.setWorldAnchorA(e.worldAnchorA);
      e.worldAnchorB && this.setWorldAnchorB(e.worldAnchorB);
    }
    var g = d("../math/Vec3");
    k.exports = b;
    b.prototype.setWorldAnchorA = function(c) {
      this.bodyA.pointToLocalFrame(c, this.localAnchorA);
    };
    b.prototype.setWorldAnchorB = function(c) {
      this.bodyB.pointToLocalFrame(c, this.localAnchorB);
    };
    b.prototype.getWorldAnchorA = function(c) {
      this.bodyA.pointToWorldFrame(this.localAnchorA, c);
    };
    b.prototype.getWorldAnchorB = function(c) {
      this.bodyB.pointToWorldFrame(this.localAnchorB, c);
    };
    var f = new g, e = new g, r = new g, q = new g, m = new g, n = new g, c = new g, h = new g, t = new g, z = new g, y = new g;
    b.prototype.applyForce = function() {
      var b = this.stiffness, d = this.damping, g = this.restLength, k = this.bodyA, C = this.bodyB;
      this.getWorldAnchorA(m);
      this.getWorldAnchorB(n);
      m.vsub(k.position, c);
      n.vsub(C.position, h);
      n.vsub(m, f);
      var A = f.norm();
      e.copy(f);
      e.normalize();
      C.velocity.vsub(k.velocity, r);
      C.angularVelocity.cross(h, y);
      r.vadd(y, r);
      k.angularVelocity.cross(c, y);
      r.vsub(y, r);
      e.mult(-b * (A - g) - d * r.dot(e), q);
      k.force.vsub(q, k.force);
      C.force.vadd(q, C.force);
      c.cross(q, t);
      h.cross(q, z);
      k.torque.vsub(t, k.torque);
      C.torque.vadd(z, C.torque);
    };
  }, {"../math/Vec3":30}], 36:[function(d, k) {
    function b(b) {
      b = r.defaults(b, {chassisConnectionPointLocal:new g, chassisConnectionPointWorld:new g, directionLocal:new g, directionWorld:new g, axleLocal:new g, axleWorld:new g, suspensionRestLength:1, suspensionMaxLength:2, radius:1, suspensionStiffness:100, dampingCompression:10, dampingRelaxation:10, frictionSlip:1E4, steering:0, rotation:0, deltaRotation:0, rollInfluence:.01, maxSuspensionForce:Number.MAX_VALUE, isFrontWheel:!0, clippedInvContactDotSuspension:1, suspensionRelativeVelocity:0, suspensionForce:0, 
      skidInfo:0, suspensionLength:0, maxSuspensionTravel:1, useCustomSlidingRotationalSpeed:!1, customSlidingRotationalSpeed:-.1});
      this.maxSuspensionTravel = b.maxSuspensionTravel;
      this.customSlidingRotationalSpeed = b.customSlidingRotationalSpeed;
      this.useCustomSlidingRotationalSpeed = b.useCustomSlidingRotationalSpeed;
      this.sliding = !1;
      this.chassisConnectionPointLocal = b.chassisConnectionPointLocal.clone();
      this.chassisConnectionPointWorld = b.chassisConnectionPointWorld.clone();
      this.directionLocal = b.directionLocal.clone();
      this.directionWorld = b.directionWorld.clone();
      this.axleLocal = b.axleLocal.clone();
      this.axleWorld = b.axleWorld.clone();
      this.suspensionRestLength = b.suspensionRestLength;
      this.suspensionMaxLength = b.suspensionMaxLength;
      this.radius = b.radius;
      this.suspensionStiffness = b.suspensionStiffness;
      this.dampingCompression = b.dampingCompression;
      this.dampingRelaxation = b.dampingRelaxation;
      this.frictionSlip = b.frictionSlip;
      this.deltaRotation = this.rotation = this.steering = 0;
      this.rollInfluence = b.rollInfluence;
      this.maxSuspensionForce = b.maxSuspensionForce;
      this.brake = this.engineForce = 0;
      this.isFrontWheel = b.isFrontWheel;
      this.clippedInvContactDotSuspension = 1;
      this.forwardImpulse = this.sideImpulse = this.suspensionLength = this.skidInfo = this.suspensionForce = this.suspensionRelativeVelocity = 0;
      this.raycastResult = new e;
      this.worldTransform = new f;
      this.isInContact = !1;
    }
    var g = d("../math/Vec3"), f = d("../math/Transform"), e = d("../collision/RaycastResult"), r = d("../utils/Utils");
    k.exports = b;
    var q = new g, m = new g;
    q = new g;
    b.prototype.updateWheel = function(b) {
      var c = this.raycastResult;
      if (this.isInContact) {
        var e = c.hitNormalWorld.dot(c.directionWorld);
        c.hitPointWorld.vsub(b.position, m);
        b.getVelocityAtWorldPoint(m, q);
        b = c.hitNormalWorld.dot(q);
        -.1 <= e ? (this.suspensionRelativeVelocity = 0, this.clippedInvContactDotSuspension = 10) : (e = -1 / e, this.suspensionRelativeVelocity = b * e, this.clippedInvContactDotSuspension = e);
      } else {
        c.suspensionLength = this.suspensionRestLength, this.suspensionRelativeVelocity = 0, c.directionWorld.scale(-1, c.hitNormalWorld), this.clippedInvContactDotSuspension = 1;
      }
    };
  }, {"../collision/RaycastResult":10, "../math/Transform":29, "../math/Vec3":30, "../utils/Utils":53}], 37:[function(d, k) {
    function b(b) {
      g.call(this);
      this.type = g.types.BOX;
      this.halfExtents = b;
      this.convexPolyhedronRepresentation = null;
      this.updateConvexPolyhedronRepresentation();
      this.updateBoundingSphereRadius();
    }
    k.exports = b;
    var g = d("./Shape"), f = d("../math/Vec3"), e = d("./ConvexPolyhedron");
    b.prototype = new g;
    b.prototype.constructor = b;
    b.prototype.updateConvexPolyhedronRepresentation = function() {
      var b = this.halfExtents.x, d = this.halfExtents.y, c = this.halfExtents.z;
      b = [new f(-b, -d, -c), new f(b, -d, -c), new f(b, d, -c), new f(-b, d, -c), new f(-b, -d, c), new f(b, -d, c), new f(b, d, c), new f(-b, d, c)];
      this.convexPolyhedronRepresentation = b = (new f(0, 0, 1), new f(0, 1, 0), new f(1, 0, 0), new e(b, [[3, 2, 1, 0], [4, 5, 6, 7], [5, 4, 0, 1], [2, 3, 7, 6], [0, 4, 7, 3], [1, 2, 6, 5]]));
      b.material = this.material;
    };
    b.prototype.calculateLocalInertia = function(e, d) {
      return d = d || new f, b.calculateInertia(this.halfExtents, e, d), d;
    };
    b.calculateInertia = function(b, e, c) {
      c.x = 1 / 12 * e * (4 * b.y * b.y + 4 * b.z * b.z);
      c.y = 1 / 12 * e * (4 * b.x * b.x + 4 * b.z * b.z);
      c.z = 1 / 12 * e * (4 * b.y * b.y + 4 * b.x * b.x);
    };
    b.prototype.getSideNormals = function(b, e) {
      var c = this.halfExtents;
      if (b[0].set(c.x, 0, 0), b[1].set(0, c.y, 0), b[2].set(0, 0, c.z), b[3].set(-c.x, 0, 0), b[4].set(0, -c.y, 0), b[5].set(0, 0, -c.z), void 0 !== e) {
        for (c = 0; c !== b.length; c++) {
          e.vmult(b[c], b[c]);
        }
      }
      return b;
    };
    b.prototype.volume = function() {
      return 8 * this.halfExtents.x * this.halfExtents.y * this.halfExtents.z;
    };
    b.prototype.updateBoundingSphereRadius = function() {
      this.boundingSphereRadius = this.halfExtents.norm();
    };
    var r = new f;
    new f;
    b.prototype.forEachWorldCorner = function(b, e, c) {
      var d = this.halfExtents;
      d = [[d.x, d.y, d.z], [-d.x, d.y, d.z], [-d.x, -d.y, d.z], [-d.x, -d.y, -d.z], [d.x, -d.y, -d.z], [d.x, d.y, -d.z], [-d.x, d.y, -d.z], [d.x, -d.y, d.z]];
      for (var f = 0; f < d.length; f++) {
        r.set(d[f][0], d[f][1], d[f][2]), e.vmult(r, r), b.vadd(r, r), c(r.x, r.y, r.z);
      }
    };
    var q = [new f, new f, new f, new f, new f, new f, new f, new f];
    b.prototype.calculateWorldAABB = function(b, e, c, d) {
      var f = this.halfExtents;
      q[0].set(f.x, f.y, f.z);
      q[1].set(-f.x, f.y, f.z);
      q[2].set(-f.x, -f.y, f.z);
      q[3].set(-f.x, -f.y, -f.z);
      q[4].set(f.x, -f.y, -f.z);
      q[5].set(f.x, f.y, -f.z);
      q[6].set(-f.x, f.y, -f.z);
      q[7].set(f.x, -f.y, f.z);
      var h = q[0];
      e.vmult(h, h);
      b.vadd(h, h);
      d.copy(h);
      c.copy(h);
      for (f = 1; 8 > f; f++) {
        h = q[f];
        e.vmult(h, h);
        b.vadd(h, h);
        var g = h.x, m = h.y;
        h = h.z;
        g > d.x && (d.x = g);
        m > d.y && (d.y = m);
        h > d.z && (d.z = h);
        g < c.x && (c.x = g);
        m < c.y && (c.y = m);
        h < c.z && (c.z = h);
      }
    };
  }, {"../math/Vec3":30, "./ConvexPolyhedron":38, "./Shape":43}], 38:[function(d, k) {
    function b(c, b, e) {
      g.call(this);
      this.type = g.types.CONVEXPOLYHEDRON;
      this.vertices = c || [];
      this.worldVertices = [];
      this.worldVerticesNeedsUpdate = !0;
      this.faces = b || [];
      this.faceNormals = [];
      this.computeNormals();
      this.worldFaceNormalsNeedsUpdate = !0;
      this.worldFaceNormals = [];
      this.uniqueEdges = [];
      this.uniqueAxes = e ? e.slice() : null;
      this.computeEdges();
      this.updateBoundingSphereRadius();
    }
    k.exports = b;
    var g = d("./Shape"), f = d("../math/Vec3"), e = (d("../math/Quaternion"), d("../math/Transform"));
    b.prototype = new g;
    b.prototype.constructor = b;
    var r = new f;
    b.prototype.computeEdges = function() {
      for (var c = this.faces, b = this.vertices, e = (b.length, this.uniqueEdges), d = e.length = 0; d !== c.length; d++) {
        for (var f = c[d], h = f.length, g = 0; g !== h; g++) {
          b[f[g]].vsub(b[f[(g + 1) % h]], r);
          r.normalize();
          for (var m = !1, p = 0; p !== e.length; p++) {
            if (e[p].almostEquals(r) || e[p].almostEquals(r)) {
              m = !0;
              break;
            }
          }
          m || e.push(r.clone());
        }
      }
    };
    b.prototype.computeNormals = function() {
      this.faceNormals.length = this.faces.length;
      for (var c = 0; c < this.faces.length; c++) {
        for (var b = 0; b < this.faces[c].length; b++) {
          if (!this.vertices[this.faces[c][b]]) {
            throw Error("Vertex " + this.faces[c][b] + " not found!");
          }
        }
        b = this.faceNormals[c] || new f;
        this.getFaceNormal(c, b);
        b.negate(b);
        this.faceNormals[c] = b;
        if (0 > b.dot(this.vertices[this.faces[c][0]])) {
          for (console.error(".faceNormals[" + c + "] = Vec3(" + b.toString() + ") looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule."), b = 0; b < this.faces[c].length; b++) {
            console.warn(".vertices[" + this.faces[c][b] + "] = Vec3(" + this.vertices[this.faces[c][b]].toString() + ")");
          }
        }
      }
    };
    var q = new f, m = new f;
    b.computeNormal = function(c, b, e, d) {
      b.vsub(c, m);
      e.vsub(b, q);
      q.cross(m, d);
      d.isZero() || d.normalize();
    };
    b.prototype.getFaceNormal = function(c, e) {
      c = this.faces[c];
      return b.computeNormal(this.vertices[c[0]], this.vertices[c[1]], this.vertices[c[2]], e);
    };
    var n = new f;
    b.prototype.clipAgainstHull = function(c, b, e, d, h, g, m, p, k) {
      for (var r = -1, q = -Number.MAX_VALUE, v = 0; v < e.faces.length; v++) {
        n.copy(e.faceNormals[v]);
        h.vmult(n, n);
        var w = n.dot(g);
        w > q && (q = w, r = v);
      }
      q = [];
      v = e.faces[r];
      w = v.length;
      for (var t = 0; w > t; t++) {
        var z = e.vertices[v[t]], y = new f;
        y.copy(z);
        h.vmult(y, y);
        d.vadd(y, y);
        q.push(y);
      }
      0 <= r && this.clipFaceAgainstHull(g, c, b, q, m, p, k);
    };
    var c = new f, h = new f, t = new f, z = new f, y = new f, x = new f;
    b.prototype.findSeparatingAxis = function(b, e, d, f, g, m, p, k) {
      var n = Number.MAX_VALUE, q = 0;
      if (this.uniqueAxes) {
        for (var r = 0; r !== this.uniqueAxes.length; r++) {
          d.vmult(this.uniqueAxes[r], c);
          var v = this.testSepAxis(c, b, e, d, f, g);
          if (!1 === v) {
            return !1;
          }
          n > v && (n = v, m.copy(c));
        }
      } else {
        var w = p ? p.length : this.faces.length;
        for (r = 0; w > r; r++) {
          v = p ? p[r] : r;
          c.copy(this.faceNormals[v]);
          d.vmult(c, c);
          v = this.testSepAxis(c, b, e, d, f, g);
          if (!1 === v) {
            return !1;
          }
          n > v && (n = v, m.copy(c));
        }
      }
      if (b.uniqueAxes) {
        for (r = 0; r !== b.uniqueAxes.length; r++) {
          g.vmult(b.uniqueAxes[r], h);
          q++;
          v = this.testSepAxis(h, b, e, d, f, g);
          if (!1 === v) {
            return !1;
          }
          n > v && (n = v, m.copy(h));
        }
      } else {
        for (p = k ? k.length : b.faces.length, r = 0; p > r; r++) {
          v = k ? k[r] : r;
          h.copy(b.faceNormals[v]);
          g.vmult(h, h);
          q++;
          v = this.testSepAxis(h, b, e, d, f, g);
          if (!1 === v) {
            return !1;
          }
          n > v && (n = v, m.copy(h));
        }
      }
      for (k = 0; k !== this.uniqueEdges.length; k++) {
        for (d.vmult(this.uniqueEdges[k], z), q = 0; q !== b.uniqueEdges.length; q++) {
          if (g.vmult(b.uniqueEdges[q], y), z.cross(y, x), !x.almostZero()) {
            x.normalize();
            r = this.testSepAxis(x, b, e, d, f, g);
            if (!1 === r) {
              return !1;
            }
            n > r && (n = r, m.copy(x));
          }
        }
      }
      return f.vsub(e, t), 0 < t.dot(m) && m.negate(m), !0;
    };
    var p = [], v = [];
    b.prototype.testSepAxis = function(c, e, d, f, h, g) {
      b.project(this, c, d, f, p);
      b.project(e, c, h, g, v);
      d = p[0];
      c = p[1];
      e = v[0];
      f = v[1];
      if (f > d || c > e) {
        return !1;
      }
      d -= f;
      c = e - c;
      return c > d ? d : c;
    };
    var w = new f, C = new f;
    b.prototype.calculateLocalInertia = function(c, b) {
      this.computeLocalAABB(w, C);
      var e = C.x - w.x, d = C.y - w.y, f = C.z - w.z;
      b.x = 1 / 12 * c * (4 * d * d + 4 * f * f);
      b.y = 1 / 12 * c * (4 * e * e + 4 * f * f);
      b.z = 1 / 12 * c * (4 * d * d + 4 * e * e);
    };
    b.prototype.getPlaneConstantOfFace = function(c) {
      return -this.faceNormals[c].dot(this.vertices[this.faces[c][0]]);
    };
    var A = new f, D = new f, F = new f, B = new f, E = new f, I = new f, K = new f, J = new f;
    b.prototype.clipFaceAgainstHull = function(c, b, e, d, f, h, g) {
      for (var m = [], p = -1, k = Number.MAX_VALUE, n = 0; n < this.faces.length; n++) {
        A.copy(this.faceNormals[n]);
        e.vmult(A, A);
        var r = A.dot(c);
        k > r && (k = r, p = n);
      }
      if (!(0 > p)) {
        c = this.faces[p];
        c.connectedFaces = [];
        for (k = 0; k < this.faces.length; k++) {
          for (n = 0; n < this.faces[k].length; n++) {
            -1 !== c.indexOf(this.faces[k][n]) && k !== p && -1 === c.connectedFaces.indexOf(k) && c.connectedFaces.push(k);
          }
        }
        k = (d.length, c.length);
        for (n = 0; k > n; n++) {
          r = this.vertices[c[n]];
          r.vsub(this.vertices[c[(n + 1) % k]], D);
          F.copy(D);
          e.vmult(F, F);
          b.vadd(F, F);
          B.copy(this.faceNormals[p]);
          e.vmult(B, B);
          b.vadd(B, B);
          F.cross(B, E);
          E.negate(E);
          I.copy(r);
          e.vmult(I, I);
          b.vadd(I, I);
          r = (-I.dot(E), c.connectedFaces[n]);
          K.copy(this.faceNormals[r]);
          r = this.getPlaneConstantOfFace(r);
          J.copy(K);
          e.vmult(J, J);
          r -= J.dot(b);
          for (this.clipFaceAgainstPlane(d, m, J, r); d.length;) {
            d.shift();
          }
          for (; m.length;) {
            d.push(m.shift());
          }
        }
        K.copy(this.faceNormals[p]);
        r = this.getPlaneConstantOfFace(p);
        J.copy(K);
        e.vmult(J, J);
        r -= J.dot(b);
        for (k = 0; k < d.length; k++) {
          if (b = J.dot(d[k]) + r, f >= b && (console.log("clamped: depth=" + b + " to minDist=" + (f + "")), b = f), h >= b) {
            e = d[k], 0 >= b && g.push({point:e, normal:J, depth:b});
          }
        }
      }
    };
    b.prototype.clipFaceAgainstPlane = function(c, b, e, d) {
      var h, g = c.length;
      if (2 > g) {
        return b;
      }
      var m = c[c.length - 1], p = c[0];
      var k = e.dot(m) + d;
      for (var n = 0; g > n; n++) {
        if (p = c[n], h = e.dot(p) + d, 0 > k) {
          if (0 > h) {
            var r = new f;
            r.copy(p);
          } else {
            r = new f, m.lerp(p, k / (k - h), r);
          }
          b.push(r);
        } else {
          0 > h && (r = new f, m.lerp(p, k / (k - h), r), b.push(r), b.push(p));
        }
        m = p;
        k = h;
      }
      return b;
    };
    b.prototype.computeWorldVertices = function(c, b) {
      for (var e = this.vertices.length; this.worldVertices.length < e;) {
        this.worldVertices.push(new f);
      }
      for (var d = this.vertices, h = this.worldVertices, g = 0; g !== e; g++) {
        b.vmult(d[g], h[g]), c.vadd(h[g], h[g]);
      }
      this.worldVerticesNeedsUpdate = !1;
    };
    new f;
    b.prototype.computeLocalAABB = function(c, b) {
      var e = this.vertices.length, d = this.vertices;
      c.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);
      b.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);
      for (var f = 0; e > f; f++) {
        var h = d[f];
        h.x < c.x ? c.x = h.x : h.x > b.x && (b.x = h.x);
        h.y < c.y ? c.y = h.y : h.y > b.y && (b.y = h.y);
        h.z < c.z ? c.z = h.z : h.z > b.z && (b.z = h.z);
      }
    };
    b.prototype.computeWorldFaceNormals = function(c) {
      for (var b = this.faceNormals.length; this.worldFaceNormals.length < b;) {
        this.worldFaceNormals.push(new f);
      }
      for (var e = this.faceNormals, d = this.worldFaceNormals, h = 0; h !== b; h++) {
        c.vmult(e[h], d[h]);
      }
      this.worldFaceNormalsNeedsUpdate = !1;
    };
    b.prototype.updateBoundingSphereRadius = function() {
      for (var c = 0, b = this.vertices, e = 0, d = b.length; e !== d; e++) {
        var f = b[e].norm2();
        f > c && (c = f);
      }
      this.boundingSphereRadius = Math.sqrt(c);
    };
    var R = new f;
    b.prototype.calculateWorldAABB = function(c, b, e, d) {
      for (var f, h, g, m, p, k, n = this.vertices.length, r = this.vertices, q = 0; n > q; q++) {
        R.copy(r[q]);
        b.vmult(R, R);
        c.vadd(R, R);
        var v = R;
        v.x < f || void 0 === f ? f = v.x : (v.x > m || void 0 === m) && (m = v.x);
        v.y < h || void 0 === h ? h = v.y : (v.y > p || void 0 === p) && (p = v.y);
        v.z < g || void 0 === g ? g = v.z : (v.z > k || void 0 === k) && (k = v.z);
      }
      e.set(f, h, g);
      d.set(m, p, k);
    };
    b.prototype.volume = function() {
      return 4 * Math.PI * this.boundingSphereRadius / 3;
    };
    b.prototype.getAveragePointLocal = function(c) {
      c = c || new f;
      for (var b = this.vertices.length, e = this.vertices, d = 0; b > d; d++) {
        c.vadd(e[d], c);
      }
      return c.mult(1 / b, c), c;
    };
    b.prototype.transformAllPoints = function(c, b) {
      var e = this.vertices.length, d = this.vertices;
      if (b) {
        for (var f = 0; e > f; f++) {
          var h = d[f];
          b.vmult(h, h);
        }
        for (f = 0; f < this.faceNormals.length; f++) {
          h = this.faceNormals[f], b.vmult(h, h);
        }
      }
      if (c) {
        for (f = 0; e > f; f++) {
          h = d[f], h.vadd(c, h);
        }
      }
    };
    var L = new f, H = new f, M = new f;
    b.prototype.pointIsInside = function(c) {
      var b = this.vertices, e = this.faces, d = this.faceNormals, f = this.faces.length;
      this.getAveragePointLocal(L);
      for (var h = 0; f > h; h++) {
        var g = (this.faces[h].length, d[h]);
        var m = b[e[h][0]], p = H;
        c.vsub(m, p);
        p = g.dot(p);
        var k = M;
        L.vsub(m, k);
        g = g.dot(k);
        if (0 > p && 0 < g || 0 < p && 0 > g) {
          return !1;
        }
      }
      return -1;
    };
    var S = (new f, new f), O = new f;
    b.project = function(c, b, d, f, h) {
      var g = c.vertices.length;
      c = c.vertices;
      O.setZero();
      e.vectorToLocalFrame(d, f, b, S);
      e.pointToLocalFrame(d, f, O, O);
      f = O.dot(S);
      d = b = c[0].dot(S);
      for (var m = 1; g > m; m++) {
        var p = c[m].dot(S);
        p > b && (b = p);
        d > p && (d = p);
      }
      if (d -= f, b -= f, d > b) {
        g = d, d = b, b = g;
      }
      h[0] = b;
      h[1] = d;
    };
  }, {"../math/Quaternion":28, "../math/Transform":29, "../math/Vec3":30, "./Shape":43}], 39:[function(d, k) {
    function b(b, d, m, k) {
      var c = [], h = [], n = [], r = [], q = [], x = Math.cos, p = Math.sin;
      c.push(new f(d * x(0), d * p(0), .5 * -m));
      r.push(0);
      c.push(new f(b * x(0), b * p(0), .5 * m));
      q.push(1);
      for (var v = 0; k > v; v++) {
        var w = 2 * Math.PI / k * (v + 1), C = 2 * Math.PI / k * (v + .5);
        k - 1 > v ? (c.push(new f(d * x(w), d * p(w), .5 * -m)), r.push(2 * v + 2), c.push(new f(b * x(w), b * p(w), .5 * m)), q.push(2 * v + 3), n.push([2 * v + 2, 2 * v + 3, 2 * v + 1, 2 * v])) : n.push([0, 1, 2 * v + 1, 2 * v]);
        (1 === k % 2 || k / 2 > v) && h.push(new f(x(C), p(C), 0));
      }
      n.push(q);
      h.push(new f(0, 0, 1));
      b = [];
      for (v = 0; v < r.length; v++) {
        b.push(r[r.length - v - 1]);
      }
      n.push(b);
      this.type = g.types.CONVEXPOLYHEDRON;
      e.call(this, c, n, h);
    }
    k.exports = b;
    var g = d("./Shape"), f = d("../math/Vec3"), e = (d("../math/Quaternion"), d("./ConvexPolyhedron"));
    b.prototype = new e;
  }, {"../math/Quaternion":28, "../math/Vec3":30, "./ConvexPolyhedron":38, "./Shape":43}], 40:[function(d, k) {
    function b(b, d) {
      d = r.defaults(d, {maxValue:null, minValue:null, elementSize:1});
      this.data = b;
      this.maxValue = d.maxValue;
      this.minValue = d.minValue;
      this.elementSize = d.elementSize;
      null === d.minValue && this.updateMinValue();
      null === d.maxValue && this.updateMaxValue();
      this.cacheEnabled = !0;
      g.call(this);
      this.pillarConvex = new f;
      this.pillarOffset = new e;
      this.type = g.types.HEIGHTFIELD;
      this.updateBoundingSphereRadius();
      this._cachedPillars = {};
    }
    var g = d("./Shape"), f = d("./ConvexPolyhedron"), e = d("../math/Vec3"), r = d("../utils/Utils");
    k.exports = b;
    b.prototype = new g;
    b.prototype.update = function() {
      this._cachedPillars = {};
    };
    b.prototype.updateMinValue = function() {
      for (var b = this.data, e = b[0][0], d = 0; d !== b.length; d++) {
        for (var c = 0; c !== b[d].length; c++) {
          var f = b[d][c];
          e > f && (e = f);
        }
      }
      this.minValue = e;
    };
    b.prototype.updateMaxValue = function() {
      for (var b = this.data, e = b[0][0], d = 0; d !== b.length; d++) {
        for (var c = 0; c !== b[d].length; c++) {
          var f = b[d][c];
          f > e && (e = f);
        }
      }
      this.maxValue = e;
    };
    b.prototype.setHeightValueAtIndex = function(b, e, d) {
      this.data[b][e] = d;
      this.clearCachedConvexTrianglePillar(b, e, !1);
      0 < b && (this.clearCachedConvexTrianglePillar(b - 1, e, !0), this.clearCachedConvexTrianglePillar(b - 1, e, !1));
      0 < e && (this.clearCachedConvexTrianglePillar(b, e - 1, !0), this.clearCachedConvexTrianglePillar(b, e - 1, !1));
      0 < e && 0 < b && this.clearCachedConvexTrianglePillar(b - 1, e - 1, !0);
    };
    b.prototype.getRectMinMax = function(b, e, d, c, f) {
      f = f || [];
      for (var h = this.data, g = this.minValue; d >= b; b++) {
        for (var m = e; c >= m; m++) {
          var k = h[b][m];
          k > g && (g = k);
        }
      }
      f[0] = this.minValue;
      f[1] = g;
    };
    b.prototype.getIndexOfPosition = function(b, e, d, c) {
      var f = this.elementSize, g = this.data;
      b = Math.floor(b / f);
      e = Math.floor(e / f);
      return d[0] = b, d[1] = e, c && (0 > b && (b = 0), 0 > e && (e = 0), b >= g.length - 1 && (b = g.length - 1), e >= g[0].length - 1 && (e = g[0].length - 1)), 0 > b || 0 > e || b >= g.length - 1 || e >= g[0].length - 1 ? !1 : !0;
    };
    b.prototype.getHeightAt = function(b, e, d) {
      var c = [];
      this.getIndexOfPosition(b, e, c, d);
      b = [];
      return this.getRectMinMax(c[0], c[1] + 1, c[0], c[1] + 1, b), (b[0] + b[1]) / 2;
    };
    b.prototype.getCacheConvexTrianglePillarKey = function(b, e, d) {
      return b + "_" + e + "_" + (d ? 1 : 0);
    };
    b.prototype.getCachedConvexTrianglePillar = function(b, e, d) {
      return this._cachedPillars[this.getCacheConvexTrianglePillarKey(b, e, d)];
    };
    b.prototype.setCachedConvexTrianglePillar = function(b, e, d, c, f) {
      this._cachedPillars[this.getCacheConvexTrianglePillarKey(b, e, d)] = {convex:c, offset:f};
    };
    b.prototype.clearCachedConvexTrianglePillar = function(b, e, d) {
      delete this._cachedPillars[this.getCacheConvexTrianglePillarKey(b, e, d)];
    };
    b.prototype.getConvexTrianglePillar = function(b, d, g) {
      var c = this.pillarConvex, h = this.pillarOffset;
      if (this.cacheEnabled) {
        var m = this.getCachedConvexTrianglePillar(b, d, g);
        if (m) {
          return this.pillarConvex = m.convex, void(this.pillarOffset = m.offset);
        }
        c = new f;
        h = new e;
        this.pillarConvex = c;
        this.pillarOffset = h;
      }
      m = this.data;
      var k = this.elementSize, n = c.faces;
      c.vertices.length = 6;
      for (var r = 0; 6 > r; r++) {
        c.vertices[r] || (c.vertices[r] = new e);
      }
      n.length = 5;
      for (r = 0; 5 > r; r++) {
        n[r] || (n[r] = []);
      }
      r = c.vertices;
      var p = (Math.min(m[b][d], m[b + 1][d], m[b][d + 1], m[b + 1][d + 1]) - this.minValue) / 2 + this.minValue;
      g ? (h.set((b + .75) * k, (d + .75) * k, p), r[0].set(.25 * k, .25 * k, m[b + 1][d + 1] - p), r[1].set(-.75 * k, .25 * k, m[b][d + 1] - p), r[2].set(.25 * k, -.75 * k, m[b + 1][d] - p), r[3].set(.25 * k, .25 * k, -p - 1), r[4].set(-.75 * k, .25 * k, -p - 1), r[5].set(.25 * k, -.75 * k, -p - 1), n[0][0] = 0, n[0][1] = 1, n[0][2] = 2, n[1][0] = 5, n[1][1] = 4, n[1][2] = 3, n[2][0] = 2, n[2][1] = 5, n[2][2] = 3, n[2][3] = 0, n[3][0] = 3, n[3][1] = 4, n[3][2] = 1, n[3][3] = 0, n[4][0] = 1, n[4][1] = 
      4, n[4][2] = 5, n[4][3] = 2) : (h.set((b + .25) * k, (d + .25) * k, p), r[0].set(-.25 * k, -.25 * k, m[b][d] - p), r[1].set(.75 * k, -.25 * k, m[b + 1][d] - p), r[2].set(-.25 * k, .75 * k, m[b][d + 1] - p), r[3].set(-.25 * k, -.25 * k, -p - 1), r[4].set(.75 * k, -.25 * k, -p - 1), r[5].set(-.25 * k, .75 * k, -p - 1), n[0][0] = 0, n[0][1] = 1, n[0][2] = 2, n[1][0] = 5, n[1][1] = 4, n[1][2] = 3, n[2][0] = 0, n[2][1] = 2, n[2][2] = 5, n[2][3] = 3, n[3][0] = 1, n[3][1] = 0, n[3][2] = 3, n[3][3] = 
      4, n[4][0] = 4, n[4][1] = 5, n[4][2] = 2, n[4][3] = 1);
      c.computeNormals();
      c.computeEdges();
      c.updateBoundingSphereRadius();
      this.setCachedConvexTrianglePillar(b, d, g, c, h);
    };
    b.prototype.calculateLocalInertia = function(b, d) {
      return d = d || new e, d.set(0, 0, 0), d;
    };
    b.prototype.volume = function() {
      return Number.MAX_VALUE;
    };
    b.prototype.calculateWorldAABB = function(b, e, d, c) {
      d.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);
      c.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);
    };
    b.prototype.updateBoundingSphereRadius = function() {
      var b = this.data, d = this.elementSize;
      this.boundingSphereRadius = (new e(b.length * d, b[0].length * d, Math.max(Math.abs(this.maxValue), Math.abs(this.minValue)))).norm();
    };
  }, {"../math/Vec3":30, "../utils/Utils":53, "./ConvexPolyhedron":38, "./Shape":43}], 41:[function(d, k) {
    function b() {
      g.call(this);
      this.type = g.types.PARTICLE;
    }
    k.exports = b;
    var g = d("./Shape"), f = d("../math/Vec3");
    b.prototype = new g;
    b.prototype.constructor = b;
    b.prototype.calculateLocalInertia = function(b, d) {
      return d = d || new f, d.set(0, 0, 0), d;
    };
    b.prototype.volume = function() {
      return 0;
    };
    b.prototype.updateBoundingSphereRadius = function() {
      this.boundingSphereRadius = 0;
    };
    b.prototype.calculateWorldAABB = function(b, d, f, g) {
      f.copy(b);
      g.copy(b);
    };
  }, {"../math/Vec3":30, "./Shape":43}], 42:[function(d, k) {
    function b() {
      g.call(this);
      this.type = g.types.PLANE;
      this.worldNormal = new f;
      this.worldNormalNeedsUpdate = !0;
      this.boundingSphereRadius = Number.MAX_VALUE;
    }
    k.exports = b;
    var g = d("./Shape"), f = d("../math/Vec3");
    b.prototype = new g;
    b.prototype.constructor = b;
    b.prototype.computeWorldNormal = function(b) {
      var e = this.worldNormal;
      e.set(0, 0, 1);
      b.vmult(e, e);
      this.worldNormalNeedsUpdate = !1;
    };
    b.prototype.calculateLocalInertia = function(b, e) {
      return e || new f;
    };
    b.prototype.volume = function() {
      return Number.MAX_VALUE;
    };
    var e = new f;
    b.prototype.calculateWorldAABB = function(b, d, f, g) {
      e.set(0, 0, 1);
      d.vmult(e, e);
      d = Number.MAX_VALUE;
      f.set(-d, -d, -d);
      g.set(d, d, d);
      1 === e.x && (g.x = b.x);
      1 === e.y && (g.y = b.y);
      1 === e.z && (g.z = b.z);
      -1 === e.x && (f.x = b.x);
      -1 === e.y && (f.y = b.y);
      -1 === e.z && (f.z = b.z);
    };
    b.prototype.updateBoundingSphereRadius = function() {
      this.boundingSphereRadius = Number.MAX_VALUE;
    };
  }, {"../math/Vec3":30, "./Shape":43}], 43:[function(d, k) {
    function b() {
      this.id = b.idCounter++;
      this.boundingSphereRadius = this.type = 0;
      this.collisionResponse = !0;
      this.material = null;
    }
    k.exports = b;
    b = d("./Shape");
    d("../math/Vec3");
    d("../math/Quaternion");
    d("../material/Material");
    b.prototype.constructor = b;
    b.prototype.updateBoundingSphereRadius = function() {
      throw "computeBoundingSphereRadius() not implemented for shape type " + this.type;
    };
    b.prototype.volume = function() {
      throw "volume() not implemented for shape type " + this.type;
    };
    b.prototype.calculateLocalInertia = function() {
      throw "calculateLocalInertia() not implemented for shape type " + this.type;
    };
    b.idCounter = 0;
    b.types = {SPHERE:1, PLANE:2, BOX:4, COMPOUND:8, CONVEXPOLYHEDRON:16, HEIGHTFIELD:32, PARTICLE:64, CYLINDER:128, TRIMESH:256};
  }, {"../material/Material":25, "../math/Quaternion":28, "../math/Vec3":30, "./Shape":43}], 44:[function(d, k) {
    function b(b) {
      if (g.call(this), this.radius = void 0 !== b ? Number(b) : 1, this.type = g.types.SPHERE, 0 > this.radius) {
        throw Error("The sphere radius cannot be negative.");
      }
      this.updateBoundingSphereRadius();
    }
    k.exports = b;
    var g = d("./Shape"), f = d("../math/Vec3");
    b.prototype = new g;
    b.prototype.constructor = b;
    b.prototype.calculateLocalInertia = function(b, d) {
      d = d || new f;
      b = 2 * b * this.radius * this.radius / 5;
      return d.x = b, d.y = b, d.z = b, d;
    };
    b.prototype.volume = function() {
      return 4 * Math.PI * this.radius / 3;
    };
    b.prototype.updateBoundingSphereRadius = function() {
      this.boundingSphereRadius = this.radius;
    };
    b.prototype.calculateWorldAABB = function(b, d, f, g) {
      d = this.radius;
      for (var e = ["x", "y", "z"], c = 0; c < e.length; c++) {
        var h = e[c];
        f[h] = b[h] - d;
        g[h] = b[h] + d;
      }
    };
  }, {"../math/Vec3":30, "./Shape":43}], 45:[function(d, k) {
    function b(c, b) {
      g.call(this);
      this.type = g.types.TRIMESH;
      this.vertices = new Float32Array(c);
      this.indices = new Int16Array(b);
      this.normals = new Float32Array(b.length);
      this.aabb = new r;
      this.edges = null;
      this.scale = new f(1, 1, 1);
      this.tree = new q;
      this.updateEdges();
      this.updateNormals();
      this.updateAABB();
      this.updateBoundingSphereRadius();
      this.updateTree();
    }
    k.exports = b;
    var g = d("./Shape"), f = d("../math/Vec3"), e = (d("../math/Quaternion"), d("../math/Transform")), r = d("../collision/AABB"), q = d("../utils/Octree");
    b.prototype = new g;
    b.prototype.constructor = b;
    var m = new f;
    b.prototype.updateTree = function() {
      var c = this.tree;
      c.reset();
      c.aabb.copy(this.aabb);
      var b = this.scale;
      c.aabb.lowerBound.x *= 1 / b.x;
      c.aabb.lowerBound.y *= 1 / b.y;
      c.aabb.lowerBound.z *= 1 / b.z;
      c.aabb.upperBound.x *= 1 / b.x;
      c.aabb.upperBound.y *= 1 / b.y;
      c.aabb.upperBound.z *= 1 / b.z;
      b = new r;
      for (var e = new f, d = new f, h = new f, g = [e, d, h], p = 0; p < this.indices.length / 3; p++) {
        var m = 3 * p;
        this._getUnscaledVertex(this.indices[m], e);
        this._getUnscaledVertex(this.indices[m + 1], d);
        this._getUnscaledVertex(this.indices[m + 2], h);
        b.setFromPoints(g);
        c.insert(b, p);
      }
      c.removeEmptyNodes();
    };
    var n = new r;
    b.prototype.getTrianglesInAABB = function(c, b) {
      n.copy(c);
      var e = this.scale;
      c = e.x;
      var d = e.y;
      e = e.z;
      var f = n.lowerBound, h = n.upperBound;
      return f.x /= c, f.y /= d, f.z /= e, h.x /= c, h.y /= d, h.z /= e, this.tree.aabbQuery(n, b);
    };
    b.prototype.setScale = function(c) {
      var b = c.x === c.y === c.z;
      this.scale.x === this.scale.y === this.scale.z && b || this.updateNormals();
      this.scale.copy(c);
      this.updateAABB();
      this.updateBoundingSphereRadius();
    };
    b.prototype.updateNormals = function() {
      for (var c = this.normals, e = 0; e < this.indices.length / 3; e++) {
        var d = 3 * e, f = this.indices[d + 1], h = this.indices[d + 2];
        this.getVertex(this.indices[d], y);
        this.getVertex(f, x);
        this.getVertex(h, p);
        b.computeNormal(x, y, p, m);
        c[d] = m.x;
        c[d + 1] = m.y;
        c[d + 2] = m.z;
      }
    };
    b.prototype.updateEdges = function() {
      for (var c = {}, b = function() {
        c[h > f ? f + "_" + h : h + "_" + f] = !0;
      }, e = 0; e < this.indices.length / 3; e++) {
        var d = 3 * e, f = this.indices[d], h = this.indices[d + 1];
        d = this.indices[d + 2];
        b(f, h);
        b(h, d);
        b(d, f);
      }
      b = Object.keys(c);
      this.edges = new Int16Array(2 * b.length);
      for (e = 0; e < b.length; e++) {
        d = b[e].split("_"), this.edges[2 * e] = parseInt(d[0], 10), this.edges[2 * e + 1] = parseInt(d[1], 10);
      }
    };
    b.prototype.getEdgeVertex = function(c, b, e) {
      this.getVertex(this.edges[2 * c + (b ? 1 : 0)], e);
    };
    var c = new f, h = new f;
    b.prototype.getEdgeVector = function(b, e) {
      this.getEdgeVertex(b, 0, c);
      this.getEdgeVertex(b, 1, h);
      h.vsub(c, e);
    };
    var t = new f, z = new f;
    b.computeNormal = function(c, b, e, d) {
      b.vsub(c, z);
      e.vsub(b, t);
      t.cross(z, d);
      d.isZero() || d.normalize();
    };
    var y = new f, x = new f, p = new f;
    b.prototype.getVertex = function(c, b) {
      var e = this.scale;
      return this._getUnscaledVertex(c, b), b.x *= e.x, b.y *= e.y, b.z *= e.z, b;
    };
    b.prototype._getUnscaledVertex = function(c, b) {
      c *= 3;
      var e = this.vertices;
      return b.set(e[c], e[c + 1], e[c + 2]);
    };
    b.prototype.getWorldVertex = function(c, b, d, f) {
      return this.getVertex(c, f), e.pointToWorldFrame(b, d, f, f), f;
    };
    b.prototype.getTriangleVertices = function(c, b, e, d) {
      c *= 3;
      this.getVertex(this.indices[c], b);
      this.getVertex(this.indices[c + 1], e);
      this.getVertex(this.indices[c + 2], d);
    };
    b.prototype.getNormal = function(c, b) {
      c *= 3;
      return b.set(this.normals[c], this.normals[c + 1], this.normals[c + 2]);
    };
    var v = new r;
    b.prototype.calculateLocalInertia = function(c, b) {
      this.computeLocalAABB(v);
      var e = v.upperBound.x - v.lowerBound.x, d = v.upperBound.y - v.lowerBound.y, f = v.upperBound.z - v.lowerBound.z;
      return b.set(1 / 12 * c * (4 * d * d + 4 * f * f), 1 / 12 * c * (4 * e * e + 4 * f * f), 1 / 12 * c * (4 * d * d + 4 * e * e));
    };
    var w = new f;
    b.prototype.computeLocalAABB = function(c) {
      var b = c.lowerBound;
      c = c.upperBound;
      var e = this.vertices.length, d = (this.vertices, w);
      this.getVertex(0, d);
      b.copy(d);
      c.copy(d);
      for (var f = 0; f !== e; f++) {
        this.getVertex(f, d), d.x < b.x ? b.x = d.x : d.x > c.x && (c.x = d.x), d.y < b.y ? b.y = d.y : d.y > c.y && (c.y = d.y), d.z < b.z ? b.z = d.z : d.z > c.z && (c.z = d.z);
      }
    };
    b.prototype.updateAABB = function() {
      this.computeLocalAABB(this.aabb);
    };
    b.prototype.updateBoundingSphereRadius = function() {
      var c = 0, b = this.vertices, e = new f, d = 0;
      for (b = b.length / 3; d !== b; d++) {
        this.getVertex(d, e);
        var h = e.norm2();
        h > c && (c = h);
      }
      this.boundingSphereRadius = Math.sqrt(c);
    };
    var C = (new f, new e), A = new r;
    b.prototype.calculateWorldAABB = function(c, b, e, d) {
      C.position = c;
      C.quaternion = b;
      this.aabb.toWorldFrame(C, A);
      e.copy(A.lowerBound);
      d.copy(A.upperBound);
    };
    b.prototype.volume = function() {
      return 4 * Math.PI * this.boundingSphereRadius / 3;
    };
    b.createTorus = function(c, e, d, f, h) {
      c = c || 1;
      e = e || .5;
      d = d || 8;
      f = f || 6;
      h = h || 2 * Math.PI;
      for (var g = [], p = [], m = 0; d >= m; m++) {
        for (var k = 0; f >= k; k++) {
          var n = k / f * h, r = m / d * Math.PI * 2;
          g.push((c + e * Math.cos(r)) * Math.cos(n), (c + e * Math.cos(r)) * Math.sin(n), e * Math.sin(r));
        }
      }
      for (m = 1; d >= m; m++) {
        for (k = 1; f >= k; k++) {
          c = (f + 1) * (m - 1) + k - 1, e = (f + 1) * (m - 1) + k, h = (f + 1) * m + k, p.push((f + 1) * m + k - 1, c, h), p.push(c, e, h);
        }
      }
      return new b(g, p);
    };
  }, {"../collision/AABB":3, "../math/Quaternion":28, "../math/Transform":29, "../math/Vec3":30, "../utils/Octree":50, "./Shape":43}], 46:[function(d, k) {
    function b() {
      g.call(this);
      this.iterations = 10;
      this.tolerance = 1E-7;
    }
    k.exports = b;
    var g = (d("../math/Vec3"), d("../math/Quaternion"), d("./Solver"));
    b.prototype = new g;
    var f = [], e = [], r = [];
    b.prototype.solve = function(b, d) {
      var g, c = 0, h = this.iterations, m = this.tolerance * this.tolerance, k = this.equations, q = k.length;
      d = d.bodies;
      var x = d.length;
      if (0 !== q) {
        for (g = 0; g !== x; g++) {
          d[g].updateSolveMassProperties();
        }
      }
      e.length = q;
      r.length = q;
      f.length = q;
      for (g = 0; g !== q; g++) {
        var p = k[g];
        f[g] = 0;
        r[g] = p.computeB(b);
        e[g] = 1 / p.computeC();
      }
      if (0 !== q) {
        for (g = 0; g !== x; g++) {
          p = d[g], c = p.wlambda, p.vlambda.set(0, 0, 0), c && c.set(0, 0, 0);
        }
        for (c = 0; c !== h; c++) {
          for (var v = g = 0; v !== q; v++) {
            p = k[v];
            var w = r[v];
            var C = e[v];
            b = f[v];
            var A = p.computeGWlambda();
            w = C * (w - A - p.eps * b);
            b + w < p.minForce ? w = p.minForce - b : b + w > p.maxForce && (w = p.maxForce - b);
            f[v] += w;
            g += 0 < w ? w : -w;
            p.addToWlambda(w);
          }
          if (m > g * g) {
            break;
          }
        }
        for (g = 0; g !== x; g++) {
          p = d[g], h = p.velocity, m = p.angularVelocity, h.vadd(p.vlambda, h), m && m.vadd(p.wlambda, m);
        }
      }
      return c;
    };
  }, {"../math/Quaternion":28, "../math/Vec3":30, "./Solver":47}], 47:[function(d, k) {
    function b() {
      this.equations = [];
    }
    k.exports = b;
    b.prototype.solve = function() {
      return 0;
    };
    b.prototype.addEquation = function(b) {
      b.enabled && this.equations.push(b);
    };
    b.prototype.removeEquation = function(b) {
      var d = this.equations;
      b = d.indexOf(b);
      -1 !== b && d.splice(b, 1);
    };
    b.prototype.removeAllEquations = function() {
      this.equations.length = 0;
    };
  }, {}], 48:[function(d, k) {
    function b(c) {
      r.call(this);
      this.iterations = 10;
      this.tolerance = 1E-7;
      this.subsolver = c;
      this.nodes = [];
      for (this.nodePool = []; 128 > this.nodePool.length;) {
        this.nodePool.push(this.createNode());
      }
    }
    function g(b) {
      for (var e = b.length, d = 0; d !== e; d++) {
        var f = b[d];
        if (!(f.visited || f.body.type & c)) {
          return f;
        }
      }
      return !1;
    }
    function f(c, b, e) {
      b.push(c.body);
      b = c.eqs.length;
      for (var d = 0; d !== b; d++) {
        var f = c.eqs[d];
        -1 === e.indexOf(f) && e.push(f);
      }
    }
    function e(c, b) {
      return b.id - c.id;
    }
    k.exports = b;
    var r = (d("../math/Vec3"), d("../math/Quaternion"), d("./Solver"));
    d = d("../objects/Body");
    b.prototype = new r;
    var q = [], m = [], n = {bodies:[]}, c = d.STATIC, h = [];
    b.prototype.createNode = function() {
      return {body:null, children:[], eqs:[], visited:!1};
    };
    b.prototype.solve = function(c, b) {
      var d = this.nodePool, k = b.bodies, p = this.equations, r = p.length, w = k.length;
      for (b = this.subsolver; d.length < w;) {
        d.push(this.createNode());
      }
      q.length = w;
      for (var t = 0; w > t; t++) {
        q[t] = d[t];
      }
      for (t = 0; t !== w; t++) {
        d = q[t], d.body = k[t], d.children.length = 0, d.eqs.length = 0, d.visited = !1;
      }
      for (d = 0; d !== r; d++) {
        w = p[d];
        t = k.indexOf(w.bi);
        var z = k.indexOf(w.bj);
        t = q[t];
        z = q[z];
        t.children.push(z);
        t.eqs.push(w);
        z.children.push(t);
        z.eqs.push(w);
      }
      k = 0;
      p = m;
      b.tolerance = this.tolerance;
      for (b.iterations = this.iterations; t = g(q);) {
        p.length = 0;
        n.bodies.length = 0;
        w = t;
        t = f;
        r = n.bodies;
        d = p;
        h.push(w);
        w.visited = !0;
        for (t(w, r, d); h.length;) {
          for (z = h.pop(); w = g(z.children);) {
            w.visited = !0, t(w, r, d), h.push(w);
          }
        }
        r = p.length;
        p = p.sort(e);
        for (t = 0; t !== r; t++) {
          b.addEquation(p[t]);
        }
        b.solve(c, n);
        b.removeAllEquations();
        k++;
      }
      return k;
    };
  }, {"../math/Quaternion":28, "../math/Vec3":30, "../objects/Body":31, "./Solver":47}], 49:[function(d, k) {
    d = function() {
    };
    k.exports = d;
    d.prototype = {constructor:d, addEventListener:function(b, d) {
      void 0 === this._listeners && (this._listeners = {});
      var f = this._listeners;
      return void 0 === f[b] && (f[b] = []), -1 === f[b].indexOf(d) && f[b].push(d), this;
    }, hasEventListener:function(b, d) {
      if (void 0 === this._listeners) {
        return !1;
      }
      var f = this._listeners;
      return void 0 !== f[b] && -1 !== f[b].indexOf(d) ? !0 : !1;
    }, removeEventListener:function(b, d) {
      if (void 0 === this._listeners) {
        return this;
      }
      var f = this._listeners;
      if (void 0 === f[b]) {
        return this;
      }
      d = f[b].indexOf(d);
      return -1 !== d && f[b].splice(d, 1), this;
    }, dispatchEvent:function(b) {
      if (void 0 === this._listeners) {
        return this;
      }
      var d = this._listeners[b.type];
      if (void 0 !== d) {
        b.target = this;
        for (var f = 0, e = d.length; e > f; f++) {
          d[f].call(this, b);
        }
      }
      return this;
    }};
  }, {}], 50:[function(d, k) {
    function b(b) {
      b = b || {};
      this.root = b.root || null;
      this.aabb = b.aabb ? b.aabb.clone() : new f;
      this.data = [];
      this.children = [];
    }
    function g(e, d) {
      d = d || {};
      d.root = null;
      d.aabb = e;
      b.call(this, d);
      this.maxDepth = "undefined" != typeof d.maxDepth ? d.maxDepth : 8;
    }
    var f = d("../collision/AABB"), e = d("../math/Vec3");
    k.exports = g;
    g.prototype = new b;
    b.prototype.reset = function() {
      this.children.length = this.data.length = 0;
    };
    b.prototype.insert = function(b, e, c) {
      var d = this.data;
      if (c = c || 0, !this.aabb.contains(b)) {
        return !1;
      }
      var f = this.children;
      if (c < (this.maxDepth || this.root.maxDepth)) {
        var g = !1;
        f.length || (this.subdivide(), g = !0);
        for (var m = 0; 8 !== m; m++) {
          if (f[m].insert(b, e, c + 1)) {
            return !0;
          }
        }
        g && (f.length = 0);
      }
      return d.push(e), !0;
    };
    var r = new e;
    b.prototype.subdivide = function() {
      var d = this.aabb, g = d.lowerBound, c = d.upperBound;
      d = this.children;
      d.push(new b({aabb:new f({lowerBound:new e(0, 0, 0)})}), new b({aabb:new f({lowerBound:new e(1, 0, 0)})}), new b({aabb:new f({lowerBound:new e(1, 1, 0)})}), new b({aabb:new f({lowerBound:new e(1, 1, 1)})}), new b({aabb:new f({lowerBound:new e(0, 1, 1)})}), new b({aabb:new f({lowerBound:new e(0, 0, 1)})}), new b({aabb:new f({lowerBound:new e(1, 0, 1)})}), new b({aabb:new f({lowerBound:new e(0, 1, 0)})}));
      c.vsub(g, r);
      r.scale(.5, r);
      c = this.root || this;
      for (var h = 0; 8 !== h; h++) {
        var k = d[h];
        k.root = c;
        var q = k.aabb.lowerBound;
        q.x *= r.x;
        q.y *= r.y;
        q.z *= r.z;
        q.vadd(g, q);
        q.vadd(r, k.aabb.upperBound);
      }
    };
    b.prototype.aabbQuery = function(b, e) {
      for (var c = (this.data, this.children, [this]); c.length;) {
        var d = c.pop();
        d.aabb.overlaps(b) && Array.prototype.push.apply(e, d.data);
        Array.prototype.push.apply(c, d.children);
      }
      return e;
    };
    var q = new f;
    b.prototype.rayQuery = function(b, e, c) {
      return b.getAABB(q), q.toLocalFrame(e, q), this.aabbQuery(q, c), c;
    };
    b.prototype.removeEmptyNodes = function() {
      for (var b = [this]; b.length;) {
        for (var e = b.pop(), c = e.children.length - 1; 0 <= c; c--) {
          e.children[c].data.length || e.children.splice(c, 1);
        }
        Array.prototype.push.apply(b, e.children);
      }
    };
  }, {"../collision/AABB":3, "../math/Vec3":30}], 51:[function(d, k) {
    function b() {
      this.objects = [];
      this.type = Object;
    }
    k.exports = b;
    b.prototype.release = function() {
      for (var b = arguments.length, d = 0; d !== b; d++) {
        this.objects.push(arguments[d]);
      }
    };
    b.prototype.get = function() {
      return 0 === this.objects.length ? this.constructObject() : this.objects.pop();
    };
    b.prototype.constructObject = function() {
      throw Error("constructObject() not implemented in this Pool subclass yet!");
    };
  }, {}], 52:[function(d, k) {
    function b() {
      this.data = {keys:[]};
    }
    k.exports = b;
    b.prototype.get = function(b, d) {
      if (b > d) {
        var e = d;
        d = b;
        b = e;
      }
      return this.data[b + "-" + d];
    };
    b.prototype.set = function(b, d, e) {
      if (b > d) {
        var f = d;
        d = b;
        b = f;
      }
      f = b + "-" + d;
      this.get(b, d) || this.data.keys.push(f);
      this.data[f] = e;
    };
    b.prototype.reset = function() {
      for (var b = this.data, d = b.keys; 0 < d.length;) {
        var e = d.pop();
        delete b[e];
      }
    };
  }, {}], 53:[function(d, k) {
    function b() {
    }
    k.exports = b;
    b.defaults = function(b, d) {
      b = b || {};
      for (var e in d) {
        e in b || (b[e] = d[e]);
      }
      return b;
    };
  }, {}], 54:[function(d, k) {
    function b() {
      f.call(this);
      this.type = g;
    }
    k.exports = b;
    var g = d("../math/Vec3"), f = d("./Pool");
    b.prototype = new f;
    b.prototype.constructObject = function() {
      return new g;
    };
  }, {"../math/Vec3":30, "./Pool":51}], 55:[function(d, k) {
    function b(c) {
      this.contactPointPool = [];
      this.frictionEquationPool = [];
      this.result = [];
      this.frictionResult = [];
      this.v3pool = new m;
      this.world = c;
      this.currentContactMaterial = null;
      this.enableFrictionReduction = !1;
    }
    k.exports = b;
    k = d("../collision/AABB");
    var g = d("../shapes/Shape"), f = d("../collision/Ray"), e = d("../math/Vec3"), r = d("../math/Transform"), q = (d("../shapes/ConvexPolyhedron"), d("../math/Quaternion")), m = (d("../solver/Solver"), d("../utils/Vec3Pool")), n = d("../equations/ContactEquation"), c = d("../equations/FrictionEquation");
    b.prototype.createContactEquation = function(c, b, e, d, f, h) {
      var g;
      this.contactPointPool.length ? (g = this.contactPointPool.pop(), g.bi = c, g.bj = b) : g = new n(c, b);
      g.enabled = c.collisionResponse && b.collisionResponse && e.collisionResponse && d.collisionResponse;
      var p = this.currentContactMaterial;
      g.restitution = p.restitution;
      g.setSpookParams(p.contactEquationStiffness, p.contactEquationRelaxation, this.world.dt);
      c = e.material || c.material;
      b = d.material || b.material;
      return c && b && 0 <= c.restitution && 0 <= b.restitution && (g.restitution = c.restitution * b.restitution), g.si = f || e, g.sj = h || d, g;
    };
    b.prototype.createFrictionEquationsFromContact = function(b, e) {
      var d = b.bi, f = b.bj, h = this.world, g = this.currentContactMaterial, p = g.friction, m = b.si.material || d.material, k = b.sj.material || f.material;
      if (m && k && 0 <= m.friction && 0 <= k.friction && (p = m.friction * k.friction), 0 < p) {
        p *= h.gravity.length();
        m = d.invMass + f.invMass;
        0 < m && (m = 1 / m);
        var n = this.frictionEquationPool;
        k = n.length ? n.pop() : new c(d, f, p * m);
        n = n.length ? n.pop() : new c(d, f, p * m);
        return k.bi = n.bi = d, k.bj = n.bj = f, k.minForce = n.minForce = -p * m, k.maxForce = n.maxForce = p * m, k.ri.copy(b.ri), k.rj.copy(b.rj), n.ri.copy(b.ri), n.rj.copy(b.rj), b.ni.tangents(k.t, n.t), k.setSpookParams(g.frictionEquationStiffness, g.frictionEquationRelaxation, h.dt), n.setSpookParams(g.frictionEquationStiffness, g.frictionEquationRelaxation, h.dt), k.enabled = n.enabled = b.enabled, e.push(k, n), !0;
      }
      return !1;
    };
    var h = new e, t = new e, z = new e;
    b.prototype.createFrictionFromAverage = function(c) {
      var b = this.result[this.result.length - 1];
      if (this.createFrictionEquationsFromContact(b, this.frictionResult) && 1 !== c) {
        var e = this.frictionResult[this.frictionResult.length - 2], d = this.frictionResult[this.frictionResult.length - 1];
        h.setZero();
        t.setZero();
        z.setZero();
        for (var f = b.bi, g = (b.bj, 0); g !== c; g++) {
          b = this.result[this.result.length - 1 - g], b.bodyA !== f ? (h.vadd(b.ni, h), t.vadd(b.ri, t), z.vadd(b.rj, z)) : (h.vsub(b.ni, h), t.vadd(b.rj, t), z.vadd(b.ri, z));
        }
        c = 1 / c;
        t.scale(c, e.ri);
        z.scale(c, e.rj);
        d.ri.copy(e.ri);
        d.rj.copy(e.rj);
        h.normalize();
        h.tangents(e.t, d.t);
      }
    };
    var y = new e, x = new e, p = new q, v = new q;
    b.prototype.getContacts = function(c, b, e, d, f, h, g) {
      this.contactPointPool = f;
      this.frictionEquationPool = g;
      this.result = d;
      this.frictionResult = h;
      d = 0;
      for (f = c.length; d !== f; d++) {
        h = c[d];
        g = b[d];
        var m = null;
        h.material && g.material && (m = e.getContactMaterial(h.material, g.material) || null);
        for (var k = 0; k < h.shapes.length; k++) {
          h.quaternion.mult(h.shapeOrientations[k], p);
          h.quaternion.vmult(h.shapeOffsets[k], y);
          y.vadd(h.position, y);
          for (var n = h.shapes[k], r = 0; r < g.shapes.length; r++) {
            g.quaternion.mult(g.shapeOrientations[r], v);
            g.quaternion.vmult(g.shapeOffsets[r], x);
            x.vadd(g.position, x);
            var q = g.shapes[r];
            if (!(y.distanceTo(x) > n.boundingSphereRadius + q.boundingSphereRadius)) {
              var w = null;
              n.material && q.material && (w = e.getContactMaterial(n.material, q.material) || null);
              this.currentContactMaterial = w || m || e.defaultContactMaterial;
              (w = this[n.type | q.type]) && (n.type < q.type ? w.call(this, n, q, y, x, p, v, h, g, n, q) : w.call(this, q, n, x, y, v, p, g, h, n, q));
            }
          }
        }
      }
    };
    b.prototype[g.types.BOX | g.types.BOX] = b.prototype.boxBox = function(c, b, e, d, f, h, g, p) {
      c.convexPolyhedronRepresentation.material = c.material;
      b.convexPolyhedronRepresentation.material = b.material;
      c.convexPolyhedronRepresentation.collisionResponse = c.collisionResponse;
      b.convexPolyhedronRepresentation.collisionResponse = b.collisionResponse;
      this.convexConvex(c.convexPolyhedronRepresentation, b.convexPolyhedronRepresentation, e, d, f, h, g, p, c, b);
    };
    b.prototype[g.types.BOX | g.types.CONVEXPOLYHEDRON] = b.prototype.boxConvex = function(c, b, e, d, f, h, g, p) {
      c.convexPolyhedronRepresentation.material = c.material;
      c.convexPolyhedronRepresentation.collisionResponse = c.collisionResponse;
      this.convexConvex(c.convexPolyhedronRepresentation, b, e, d, f, h, g, p, c, b);
    };
    b.prototype[g.types.BOX | g.types.PARTICLE] = b.prototype.boxParticle = function(c, b, e, d, f, h, g, p) {
      c.convexPolyhedronRepresentation.material = c.material;
      c.convexPolyhedronRepresentation.collisionResponse = c.collisionResponse;
      this.convexParticle(c.convexPolyhedronRepresentation, b, e, d, f, h, g, p, c, b);
    };
    b.prototype[g.types.SPHERE] = b.prototype.sphereSphere = function(c, b, e, d, f, h, g, p) {
      f = this.createContactEquation(g, p, c, b);
      d.vsub(e, f.ni);
      f.ni.normalize();
      f.ri.copy(f.ni);
      f.rj.copy(f.ni);
      f.ri.mult(c.radius, f.ri);
      f.rj.mult(-b.radius, f.rj);
      f.ri.vadd(e, f.ri);
      f.ri.vsub(g.position, f.ri);
      f.rj.vadd(d, f.rj);
      f.rj.vsub(p.position, f.rj);
      this.result.push(f);
      this.createFrictionEquationsFromContact(f, this.frictionResult);
    };
    var w = new e, C = new e, A = new e;
    b.prototype[g.types.PLANE | g.types.TRIMESH] = b.prototype.planeTrimesh = function(c, b, d, f, h, g, p, m) {
      var k = new e;
      w.set(0, 0, 1);
      h.vmult(w, w);
      for (h = 0; h < b.vertices.length / 3; h++) {
        b.getVertex(h, k);
        var n = new e;
        n.copy(k);
        r.pointToWorldFrame(f, g, n, k);
        n = C;
        k.vsub(d, n);
        if (0 >= w.dot(n)) {
          var v = this.createContactEquation(p, m, c, b);
          v.ni.copy(w);
          var q = A;
          w.scale(n.dot(w), q);
          k.vsub(q, q);
          v.ri.copy(q);
          v.ri.vsub(p.position, v.ri);
          v.rj.copy(k);
          v.rj.vsub(m.position, v.rj);
          this.result.push(v);
          this.createFrictionEquationsFromContact(v, this.frictionResult);
        }
      }
    };
    var D = new e, F = new e, B = (new e, new e), E = new e, I = new e, K = new e, J = new e, R = new e, L = new e, H = new e, M = new e, S = new e, O = new e, Z = new k, Q = [];
    b.prototype[g.types.SPHERE | g.types.TRIMESH] = b.prototype.sphereTrimesh = function(c, b, e, d, h, g, p, m) {
      r.pointToLocalFrame(d, g, e, L);
      h = c.radius;
      Z.lowerBound.set(L.x - h, L.y - h, L.z - h);
      Z.upperBound.set(L.x + h, L.y + h, L.z + h);
      b.getTrianglesInAABB(Z, Q);
      var k = c.radius * c.radius;
      for (h = 0; h < Q.length; h++) {
        for (var n = 0; 3 > n; n++) {
          if (b.getVertex(b.indices[3 * Q[h] + n], B), B.vsub(L, F), F.norm2() <= k) {
            E.copy(B);
            r.pointToWorldFrame(d, g, E, B);
            B.vsub(e, F);
            var v = this.createContactEquation(p, m, c, b);
            v.ni.copy(F);
            v.ni.normalize();
            v.ri.copy(v.ni);
            v.ri.scale(c.radius, v.ri);
            v.ri.vadd(e, v.ri);
            v.ri.vsub(p.position, v.ri);
            v.rj.copy(B);
            v.rj.vsub(m.position, v.rj);
            this.result.push(v);
            this.createFrictionEquationsFromContact(v, this.frictionResult);
          }
        }
      }
      for (h = 0; h < Q.length; h++) {
        for (n = 0; 3 > n; n++) {
          b.getVertex(b.indices[3 * Q[h] + n], I), b.getVertex(b.indices[3 * Q[h] + (n + 1) % 3], K), K.vsub(I, J), L.vsub(K, H), e = H.dot(J), L.vsub(I, H), v = H.dot(J), 0 < v && 0 > e && (L.vsub(I, H), R.copy(J), R.normalize(), v = H.dot(R), R.scale(v, H), H.vadd(I, H), e = H.distanceTo(L), e < c.radius && (v = this.createContactEquation(p, m, c, b), H.vsub(L, v.ni), v.ni.normalize(), v.ni.scale(c.radius, v.ri), r.pointToWorldFrame(d, g, H, H), H.vsub(m.position, v.rj), r.vectorToWorldFrame(g, 
          v.ni, v.ni), r.vectorToWorldFrame(g, v.ri, v.ri), this.result.push(v), this.createFrictionEquationsFromContact(v, this.frictionResult)));
        }
      }
      h = 0;
      for (n = Q.length; h !== n; h++) {
        if (b.getTriangleVertices(Q[h], M, S, O), b.getNormal(Q[h], D), L.vsub(M, H), e = H.dot(D), D.scale(e, H), L.vsub(H, H), e = H.distanceTo(L), f.pointInTriangle(H, M, S, O) && e < c.radius) {
          v = this.createContactEquation(p, m, c, b), H.vsub(L, v.ni), v.ni.normalize(), v.ni.scale(c.radius, v.ri), r.pointToWorldFrame(d, g, H, H), H.vsub(m.position, v.rj), r.vectorToWorldFrame(g, v.ni, v.ni), r.vectorToWorldFrame(g, v.ri, v.ri), this.result.push(v), this.createFrictionEquationsFromContact(v, this.frictionResult);
        }
      }
      Q.length = 0;
    };
    var U = new e, P = new e;
    b.prototype[g.types.SPHERE | g.types.PLANE] = b.prototype.spherePlane = function(c, b, e, d, f, h, g, p) {
      b = this.createContactEquation(g, p, c, b);
      if (b.ni.set(0, 0, 1), h.vmult(b.ni, b.ni), b.ni.negate(b.ni), b.ni.normalize(), b.ni.mult(c.radius, b.ri), e.vsub(d, U), b.ni.mult(b.ni.dot(U), P), U.vsub(P, b.rj), -U.dot(b.ni) <= c.radius) {
        c = b.ri, h = b.rj, c.vadd(e, c), c.vsub(g.position, c), h.vadd(d, h), h.vsub(p.position, h), this.result.push(b), this.createFrictionEquationsFromContact(b, this.frictionResult);
      }
    };
    var da = new e, N = new e, V = new e, ea = new e, ha = new e, W = new e, la = new e, X = [new e, new e, new e, new e, new e, new e], ka = new e, T = new e, ia = new e, sa = new e;
    b.prototype[g.types.SPHERE | g.types.BOX] = b.prototype.sphereBox = function(c, b, e, d, f, h, g, p) {
      f = this.v3pool;
      e.vsub(d, ea);
      b.getSideNormals(X, h);
      h = c.radius;
      for (var m = !1, k = null, n = 0, r = 0, v = 0, q = null, w = 0, t = X.length; w !== t && !1 === m; w++) {
        var z = ha;
        z.copy(X[w]);
        var y = z.norm();
        z.normalize();
        var x = ea.dot(z);
        if (y + h > x && 0 < x) {
          var C = W, A = la;
          C.copy(X[(w + 1) % 3]);
          A.copy(X[(w + 2) % 3]);
          var B = C.norm(), D = A.norm();
          C.normalize();
          A.normalize();
          var F = ea.dot(C), E = ea.dot(A);
          B > F && F > -B && D > E && E > -D && (x = Math.abs(x - y - h), (null === q || q > x) && (q = x, r = F, v = E, k = y, T.copy(z), ia.copy(C), sa.copy(A), n++));
        }
      }
      n && (m = !0, n = this.createContactEquation(g, p, c, b), T.mult(-h, n.ri), n.ni.copy(T), n.ni.negate(n.ni), T.mult(k, T), ia.mult(r, ia), T.vadd(ia, T), sa.mult(v, sa), T.vadd(sa, n.rj), n.ri.vadd(e, n.ri), n.ri.vsub(g.position, n.ri), n.rj.vadd(d, n.rj), n.rj.vsub(p.position, n.rj), this.result.push(n), this.createFrictionEquationsFromContact(n, this.frictionResult));
      x = f.get();
      for (k = 0; 2 !== k && !m; k++) {
        for (r = 0; 2 !== r && !m; r++) {
          for (v = 0; 2 !== v && !m; v++) {
            if (x.set(0, 0, 0), k ? x.vadd(X[0], x) : x.vsub(X[0], x), r ? x.vadd(X[1], x) : x.vsub(X[1], x), v ? x.vadd(X[2], x) : x.vsub(X[2], x), d.vadd(x, ka), ka.vsub(e, ka), ka.norm2() < h * h) {
              m = !0, n = this.createContactEquation(g, p, c, b), n.ri.copy(ka), n.ri.normalize(), n.ni.copy(n.ri), n.ri.mult(h, n.ri), n.rj.copy(x), n.ri.vadd(e, n.ri), n.ri.vsub(g.position, n.ri), n.rj.vadd(d, n.rj), n.rj.vsub(p.position, n.rj), this.result.push(n), this.createFrictionEquationsFromContact(n, this.frictionResult);
            }
          }
        }
      }
      f.release(x);
      q = f.get();
      w = f.get();
      n = f.get();
      t = f.get();
      x = f.get();
      z = X.length;
      for (k = 0; k !== z && !m; k++) {
        for (r = 0; r !== z && !m; r++) {
          if (k % 3 !== r % 3) {
            X[r].cross(X[k], q);
            q.normalize();
            X[k].vadd(X[r], w);
            n.copy(e);
            n.vsub(w, n);
            n.vsub(d, n);
            y = n.dot(q);
            q.mult(y, t);
            for (v = 0; v === k % 3 || v === r % 3;) {
              v++;
            }
            x.copy(e);
            x.vsub(t, x);
            x.vsub(w, x);
            x.vsub(d, x);
            y = Math.abs(y);
            C = x.norm();
            y < X[v].norm() && h > C && (m = !0, v = this.createContactEquation(g, p, c, b), w.vadd(t, v.rj), v.rj.copy(v.rj), x.negate(v.ni), v.ni.normalize(), v.ri.copy(v.rj), v.ri.vadd(d, v.ri), v.ri.vsub(e, v.ri), v.ri.normalize(), v.ri.mult(h, v.ri), v.ri.vadd(e, v.ri), v.ri.vsub(g.position, v.ri), v.rj.vadd(d, v.rj), v.rj.vsub(p.position, v.rj), this.result.push(v), this.createFrictionEquationsFromContact(v, this.frictionResult));
          }
        }
      }
      f.release(q, w, n, t, x);
    };
    var va = new e, Ja = new e, Ga = new e, ta = new e, Pb = new e, wa = new e, ya = new e, gc = new e, Wd = new e, yc = new e;
    b.prototype[g.types.SPHERE | g.types.CONVEXPOLYHEDRON] = b.prototype.sphereConvex = function(c, b, e, d, f, h, g, p) {
      f = this.v3pool;
      e.vsub(d, va);
      for (var m = b.faceNormals, k = b.faces, n = b.vertices, r = c.radius, v = 0; v !== n.length; v++) {
        var q = Pb;
        h.vmult(n[v], q);
        d.vadd(q, q);
        var w = ta;
        if (q.vsub(e, w), w.norm2() < r * r) {
          return c = this.createContactEquation(g, p, c, b), c.ri.copy(w), c.ri.normalize(), c.ni.copy(c.ri), c.ri.mult(r, c.ri), q.vsub(d, c.rj), c.ri.vadd(e, c.ri), c.ri.vsub(g.position, c.ri), c.rj.vadd(d, c.rj), c.rj.vsub(p.position, c.rj), this.result.push(c), void this.createFrictionEquationsFromContact(c, this.frictionResult);
        }
      }
      v = 0;
      for (q = k.length; v !== q; v++) {
        w = k[v];
        var t = wa;
        h.vmult(m[v], t);
        var z = ya;
        h.vmult(n[w[0]], z);
        z.vadd(d, z);
        var y = gc;
        t.mult(-r, y);
        e.vadd(y, y);
        var x = Wd;
        y.vsub(z, x);
        y = x.dot(t);
        x = yc;
        if (e.vsub(z, x), 0 > y && 0 < x.dot(t)) {
          z = [];
          x = 0;
          for (var C = w.length; x !== C; x++) {
            var A = f.get();
            h.vmult(n[w[x]], A);
            d.vadd(A, A);
            z.push(A);
          }
          a: {
            x = z;
            C = t;
            A = e;
            for (var B = null, D = x.length, F = 0; F !== D; F++) {
              var E = x[F], H = da;
              x[(F + 1) % D].vsub(E, H);
              var I = N;
              H.cross(C, I);
              H = V;
              A.vsub(E, H);
              E = I.dot(H);
              if (!(null === B || 0 < E && !0 === B || 0 >= E && !1 === B)) {
                x = !1;
                break a;
              }
              null === B && (B = 0 < E);
            }
            x = !0;
          }
          if (x) {
            c = this.createContactEquation(g, p, c, b);
            t.mult(-r, c.ri);
            t.negate(c.ni);
            b = f.get();
            t.mult(-y, b);
            h = f.get();
            t.mult(-r, h);
            e.vsub(d, c.rj);
            c.rj.vadd(h, c.rj);
            c.rj.vadd(b, c.rj);
            c.rj.vadd(d, c.rj);
            c.rj.vsub(p.position, c.rj);
            c.ri.vadd(e, c.ri);
            c.ri.vsub(g.position, c.ri);
            f.release(b);
            f.release(h);
            this.result.push(c);
            this.createFrictionEquationsFromContact(c, this.frictionResult);
            x = 0;
            for (w = z.length; x !== w; x++) {
              f.release(z[x]);
            }
            break;
          }
          for (x = 0; x !== w.length; x++) {
            t = f.get();
            y = f.get();
            h.vmult(n[w[(x + 1) % w.length]], t);
            h.vmult(n[w[(x + 2) % w.length]], y);
            d.vadd(t, t);
            d.vadd(y, y);
            D = Ja;
            y.vsub(t, D);
            B = Ga;
            D.unit(B);
            C = f.get();
            A = f.get();
            e.vsub(t, A);
            F = A.dot(B);
            B.mult(F, C);
            C.vadd(t, C);
            B = f.get();
            if (C.vsub(e, B), 0 < F && F * F < D.norm2() && B.norm2() < r * r) {
              c = this.createContactEquation(g, p, c, b);
              C.vsub(d, c.rj);
              C.vsub(e, c.ni);
              c.ni.normalize();
              c.ni.mult(r, c.ri);
              c.rj.vadd(d, c.rj);
              c.rj.vsub(p.position, c.rj);
              c.ri.vadd(e, c.ri);
              c.ri.vsub(g.position, c.ri);
              this.result.push(c);
              this.createFrictionEquationsFromContact(c, this.frictionResult);
              x = 0;
              for (w = z.length; x !== w; x++) {
                f.release(z[x]);
              }
              return f.release(t), f.release(y), f.release(C), f.release(B), void f.release(A);
            }
            f.release(t);
            f.release(y);
            f.release(C);
            f.release(B);
            f.release(A);
          }
          x = 0;
          for (w = z.length; x !== w; x++) {
            f.release(z[x]);
          }
        }
      }
    };
    new e;
    new e;
    b.prototype[g.types.PLANE | g.types.BOX] = b.prototype.planeBox = function(c, b, e, d, f, h, g, p) {
      b.convexPolyhedronRepresentation.material = b.material;
      b.convexPolyhedronRepresentation.collisionResponse = b.collisionResponse;
      this.planeConvex(c, b.convexPolyhedronRepresentation, e, d, f, h, g, p);
    };
    var Ya = new e, pb = new e, zc = new e, Cb = new e;
    b.prototype[g.types.PLANE | g.types.CONVEXPOLYHEDRON] = b.prototype.planeConvex = function(c, b, e, d, f, h, g, p) {
      pb.set(0, 0, 1);
      f.vmult(pb, pb);
      for (var m = f = 0; m !== b.vertices.length; m++) {
        if (Ya.copy(b.vertices[m]), h.vmult(Ya, Ya), d.vadd(Ya, Ya), Ya.vsub(e, zc), 0 >= pb.dot(zc)) {
          var k = this.createContactEquation(g, p, c, b), n = Cb;
          pb.mult(pb.dot(zc), n);
          Ya.vsub(n, n);
          n.vsub(e, k.ri);
          k.ni.copy(pb);
          Ya.vsub(d, k.rj);
          k.ri.vadd(e, k.ri);
          k.ri.vsub(g.position, k.ri);
          k.rj.vadd(d, k.rj);
          k.rj.vsub(p.position, k.rj);
          this.result.push(k);
          f++;
          this.enableFrictionReduction || this.createFrictionEquationsFromContact(k, this.frictionResult);
        }
      }
      this.enableFrictionReduction && f && this.createFrictionFromAverage(f);
    };
    var Qb = new e, Db = new e;
    b.prototype[g.types.CONVEXPOLYHEDRON] = b.prototype.convexConvex = function(c, b, e, d, f, h, g, p, m, k, n, r) {
      if (!(e.distanceTo(d) > c.boundingSphereRadius + b.boundingSphereRadius) && c.findSeparatingAxis(b, e, f, d, h, Qb, n, r)) {
        n = [];
        c.clipAgainstHull(e, f, b, d, h, Qb, -100, 100, n);
        for (h = f = 0; h !== n.length; h++) {
          r = this.createContactEquation(g, p, c, b, m, k);
          var v = r.ri, q = r.rj;
          Qb.negate(r.ni);
          n[h].normal.negate(Db);
          Db.mult(n[h].depth, Db);
          n[h].point.vadd(Db, v);
          q.copy(n[h].point);
          v.vsub(e, v);
          q.vsub(d, q);
          v.vadd(e, v);
          v.vsub(g.position, v);
          q.vadd(d, q);
          q.vsub(p.position, q);
          this.result.push(r);
          f++;
          this.enableFrictionReduction || this.createFrictionEquationsFromContact(r, this.frictionResult);
        }
        this.enableFrictionReduction && f && this.createFrictionFromAverage(f);
      }
    };
    var ib = new e, Ac = new e, Va = new e;
    b.prototype[g.types.PLANE | g.types.PARTICLE] = b.prototype.planeParticle = function(c, b, e, d, f, h, g, p) {
      ib.set(0, 0, 1);
      g.quaternion.vmult(ib, ib);
      d.vsub(g.position, Ac);
      0 >= ib.dot(Ac) && (c = this.createContactEquation(p, g, b, c), c.ni.copy(ib), c.ni.negate(c.ni), c.ri.set(0, 0, 0), ib.mult(ib.dot(d), Va), d.vsub(Va, Va), c.rj.copy(Va), this.result.push(c), this.createFrictionEquationsFromContact(c, this.frictionResult));
    };
    var Aa = new e;
    b.prototype[g.types.PARTICLE | g.types.SPHERE] = b.prototype.sphereParticle = function(c, b, e, d, f, h, g, p) {
      Aa.set(0, 0, 1);
      d.vsub(e, Aa);
      Aa.norm2() <= c.radius * c.radius && (b = this.createContactEquation(p, g, b, c), Aa.normalize(), b.rj.copy(Aa), b.rj.mult(c.radius, b.rj), b.ni.copy(Aa), b.ni.negate(b.ni), b.ri.set(0, 0, 0), this.result.push(b), this.createFrictionEquationsFromContact(b, this.frictionResult));
    };
    var jb = new q, Ra = new e, Na = (new e, new e), Oa = new e, kb = new e;
    b.prototype[g.types.PARTICLE | g.types.CONVEXPOLYHEDRON] = b.prototype.convexParticle = function(c, b, e, d, f, h, g, p) {
      var m = -1;
      h = null;
      var k = 0;
      if (Ra.copy(d), Ra.vsub(e, Ra), f.conjugate(jb), jb.vmult(Ra, Ra), c.pointIsInside(Ra)) {
        c.worldVerticesNeedsUpdate && c.computeWorldVertices(e, f);
        c.worldFaceNormalsNeedsUpdate && c.computeWorldFaceNormals(f);
        f = 0;
        for (var n = c.faces.length; f !== n; f++) {
          var r = c.worldFaceNormals[f];
          d.vsub(c.worldVertices[c.faces[f][0]], Oa);
          var v = -r.dot(Oa);
          (null === h || Math.abs(v) < Math.abs(h)) && (h = v, m = f, Na.copy(r), k++);
        }
        -1 !== m ? (c = this.createContactEquation(p, g, b, c), Na.mult(h, kb), kb.vadd(d, kb), kb.vsub(e, kb), c.rj.copy(kb), Na.negate(c.ni), c.ri.set(0, 0, 0), b = c.ri, h = c.rj, b.vadd(d, b), b.vsub(p.position, b), h.vadd(e, h), h.vsub(g.position, h), this.result.push(c), this.createFrictionEquationsFromContact(c, this.frictionResult)) : console.warn("Point found inside convex, but did not find penetrating face!");
      }
    };
    b.prototype[g.types.BOX | g.types.HEIGHTFIELD] = b.prototype.boxHeightfield = function(c, b, e, d, f, h, g, p) {
      c.convexPolyhedronRepresentation.material = c.material;
      c.convexPolyhedronRepresentation.collisionResponse = c.collisionResponse;
      this.convexHeightfield(c.convexPolyhedronRepresentation, b, e, d, f, h, g, p);
    };
    var qb = new e, db = new e, Bc = [0];
    b.prototype[g.types.CONVEXPOLYHEDRON | g.types.HEIGHTFIELD] = b.prototype.convexHeightfield = function(c, b, e, d, f, h, g, p) {
      var m = b.data, k = b.elementSize, n = c.boundingSphereRadius;
      r.pointToLocalFrame(d, h, e, qb);
      var v = Math.floor((qb.x - n) / k) - 1, q = Math.ceil((qb.x + n) / k) + 1, w = Math.floor((qb.y - n) / k) - 1;
      k = Math.ceil((qb.y + n) / k) + 1;
      if (!(0 > q || 0 > k || v > m.length || w > m[0].length)) {
        0 > v && (v = 0);
        0 > q && (q = 0);
        0 > w && (w = 0);
        0 > k && (k = 0);
        v >= m.length && (v = m.length - 1);
        q >= m.length && (q = m.length - 1);
        k >= m[0].length && (k = m[0].length - 1);
        w >= m[0].length && (w = m[0].length - 1);
        m = [];
        b.getRectMinMax(v, w, q, k, m);
        var t = m[0];
        if (!(qb.z - n > m[1] || qb.z + n < t)) {
          for (n = v; q > n; n++) {
            for (v = w; k > v; v++) {
              b.getConvexTrianglePillar(n, v, !1), r.pointToWorldFrame(d, h, b.pillarOffset, db), e.distanceTo(db) < b.pillarConvex.boundingSphereRadius + c.boundingSphereRadius && this.convexConvex(c, b.pillarConvex, e, db, f, h, g, p, null, null, Bc, null), b.getConvexTrianglePillar(n, v, !0), r.pointToWorldFrame(d, h, b.pillarOffset, db), e.distanceTo(db) < b.pillarConvex.boundingSphereRadius + c.boundingSphereRadius && this.convexConvex(c, b.pillarConvex, e, db, f, h, g, p, null, null, Bc, null);
            }
          }
        }
      }
    };
    var rb = new e, Eb = new e;
    b.prototype[g.types.SPHERE | g.types.HEIGHTFIELD] = b.prototype.sphereHeightfield = function(c, b, e, d, f, h, g, p) {
      var m = b.data, k = c.radius, n = b.elementSize;
      r.pointToLocalFrame(d, h, e, rb);
      var v = Math.floor((rb.x - k) / n) - 1, q = Math.ceil((rb.x + k) / n) + 1, w = Math.floor((rb.y - k) / n) - 1;
      n = Math.ceil((rb.y + k) / n) + 1;
      if (!(0 > q || 0 > n || v > m.length || n > m[0].length)) {
        0 > v && (v = 0);
        0 > q && (q = 0);
        0 > w && (w = 0);
        0 > n && (n = 0);
        v >= m.length && (v = m.length - 1);
        q >= m.length && (q = m.length - 1);
        n >= m[0].length && (n = m[0].length - 1);
        w >= m[0].length && (w = m[0].length - 1);
        m = [];
        b.getRectMinMax(v, w, q, n, m);
        var t = m[0];
        if (!(rb.z - k > m[1] || rb.z + k < t)) {
          for (k = this.result; q > v; v++) {
            for (m = w; n > m; m++) {
              if (t = k.length, b.getConvexTrianglePillar(v, m, !1), r.pointToWorldFrame(d, h, b.pillarOffset, Eb), e.distanceTo(Eb) < b.pillarConvex.boundingSphereRadius + c.boundingSphereRadius && this.sphereConvex(c, b.pillarConvex, e, Eb, f, h, g, p), b.getConvexTrianglePillar(v, m, !0), r.pointToWorldFrame(d, h, b.pillarOffset, Eb), e.distanceTo(Eb) < b.pillarConvex.boundingSphereRadius + c.boundingSphereRadius && this.sphereConvex(c, b.pillarConvex, e, Eb, f, h, g, p), 2 < k.length - t) {
                return;
              }
            }
          }
        }
      }
    };
  }, {"../collision/AABB":3, "../collision/Ray":9, "../equations/ContactEquation":19, "../equations/FrictionEquation":21, "../math/Quaternion":28, "../math/Transform":29, "../math/Vec3":30, "../shapes/ConvexPolyhedron":38, "../shapes/Shape":43, "../solver/Solver":47, "../utils/Vec3Pool":54}], 56:[function(d, k) {
    function b() {
      q.apply(this);
      this.dt = -1;
      this.allowSleep = !1;
      this.contacts = [];
      this.frictionEquations = [];
      this.quatNormalizeSkip = 0;
      this.quatNormalizeFast = !1;
      this.stepnumber = this.time = 0;
      this.default_dt = 1 / 60;
      this.nextId = 0;
      this.gravity = new f;
      this.broadphase = new p;
      this.bodies = [];
      this.solver = new e;
      this.constraints = [];
      this.narrowphase = new r(this);
      this.collisionMatrix = new m;
      this.collisionMatrixPrevious = new m;
      this.materials = [];
      this.contactmaterials = [];
      this.contactMaterialTable = new t;
      this.defaultMaterial = new n("default");
      this.defaultContactMaterial = new c(this.defaultMaterial, this.defaultMaterial, {friction:.3, restitution:0});
      this.doProfiling = !1;
      this.profile = {solve:0, makeContactConstraints:0, broadphase:0, integrate:0, narrowphase:0};
      this.subsystems = [];
      this.addBodyEvent = {type:"addBody", body:null};
      this.removeBodyEvent = {type:"removeBody", body:null};
    }
    k.exports = b;
    var g = d("../shapes/Shape"), f = d("../math/Vec3");
    k = d("../math/Quaternion");
    var e = d("../solver/GSSolver"), r = (d("../utils/Vec3Pool"), d("../equations/ContactEquation"), d("../equations/FrictionEquation"), d("./Narrowphase")), q = d("../utils/EventTarget"), m = d("../collision/ArrayCollisionMatrix"), n = d("../material/Material"), c = d("../material/ContactMaterial"), h = d("../objects/Body"), t = d("../utils/TupleDictionary"), z = d("../collision/RaycastResult"), y = d("../collision/AABB"), x = d("../collision/Ray"), p = d("../collision/NaiveBroadphase");
    b.prototype = new q;
    var v = (new y, new x);
    if (b.prototype.getContactMaterial = function(c, b) {
      return this.contactMaterialTable.get(c.id, b.id);
    }, b.prototype.numObjects = function() {
      return this.bodies.length;
    }, b.prototype.collisionMatrixTick = function() {
      var c = this.collisionMatrixPrevious;
      this.collisionMatrixPrevious = this.collisionMatrix;
      this.collisionMatrix = c;
      this.collisionMatrix.reset();
    }, b.prototype.add = b.prototype.addBody = function(c) {
      -1 === this.bodies.indexOf(c) && (c.index = this.bodies.length, this.bodies.push(c), c.world = this, c.initPosition.copy(c.position), c.initVelocity.copy(c.velocity), c.timeLastSleepy = this.time, c instanceof h && (c.initAngularVelocity.copy(c.angularVelocity), c.initQuaternion.copy(c.quaternion)), this.collisionMatrix.setNumObjects(this.bodies.length), this.addBodyEvent.body = c, this.dispatchEvent(this.addBodyEvent));
    }, b.prototype.addConstraint = function(c) {
      this.constraints.push(c);
    }, b.prototype.removeConstraint = function(c) {
      c = this.constraints.indexOf(c);
      -1 !== c && this.constraints.splice(c, 1);
    }, b.prototype.rayTest = function(c, b, e) {
      e instanceof z ? this.raycastClosest(c, b, {skipBackfaces:!0}, e) : this.raycastAll(c, b, {skipBackfaces:!0}, e);
    }, b.prototype.raycastAll = function(c, b, e, d) {
      return e.mode = x.ALL, e.from = c, e.to = b, e.callback = d, v.intersectWorld(this, e);
    }, b.prototype.raycastAny = function(c, b, e, d) {
      return e.mode = x.ANY, e.from = c, e.to = b, e.result = d, v.intersectWorld(this, e);
    }, b.prototype.raycastClosest = function(c, b, e, d) {
      return e.mode = x.CLOSEST, e.from = c, e.to = b, e.result = d, v.intersectWorld(this, e);
    }, b.prototype.remove = function(c) {
      c.world = null;
      var b = this.bodies.length - 1, e = this.bodies, d = e.indexOf(c);
      if (-1 !== d) {
        e.splice(d, 1);
        for (d = 0; d !== e.length; d++) {
          e[d].index = d;
        }
        this.collisionMatrix.setNumObjects(b);
        this.removeBodyEvent.body = c;
        this.dispatchEvent(this.removeBodyEvent);
      }
    }, b.prototype.removeBody = b.prototype.remove, b.prototype.addMaterial = function(c) {
      this.materials.push(c);
    }, b.prototype.addContactMaterial = function(c) {
      this.contactmaterials.push(c);
      this.contactMaterialTable.set(c.materials[0].id, c.materials[1].id, c);
    }, "undefined" == typeof performance && (performance = {}), !performance.now) {
      var w = Date.now();
      performance.timing && performance.timing.navigationStart && (w = performance.timing.navigationStart);
      performance.now = function() {
        return Date.now() - w;
      };
    }
    var C = new f;
    b.prototype.step = function(c, b, e) {
      if (e = e || 10, b = b || 0, 0 === b) {
        this.internalStep(c), this.time += c;
      } else {
        var d = Math.floor((this.time + b) / c) - Math.floor(this.time / c);
        d = Math.min(d, e);
        e = performance.now();
        for (var f = 0; f !== d && (this.internalStep(c), !(performance.now() - e > 1E3 * c)); f++) {
        }
        this.time += b;
        c = this.time % c / c;
        b = this.bodies;
        for (d = 0; d !== b.length; d++) {
          e = b[d], e.type !== h.STATIC && e.sleepState !== h.SLEEPING ? (e.position.vsub(e.previousPosition, C), C.scale(c, C), e.position.vadd(C, e.interpolatedPosition)) : (e.interpolatedPosition.copy(e.position), e.interpolatedQuaternion.copy(e.quaternion));
        }
      }
    };
    var A = {type:"postStep"}, D = {type:"preStep"}, F = {type:"collide", body:null, contact:null}, B = [], E = [], I = [], K = [], J = (new f, new f, new f, new f, new f, new f, new f, new f, new f, new k, new k), R = new k, L = new f;
    b.prototype.internalStep = function(c) {
      this.dt = c;
      var b, e = this.contacts, d = this.numObjects(), f = this.bodies, p = this.solver, m = this.gravity, k = this.doProfiling, n = this.profile, v = h.DYNAMIC, r = this.constraints, q = (m.norm(), m.x), w = m.y, t = m.z;
      k && (b = performance.now());
      for (m = 0; m !== d; m++) {
        var z = f[m];
        if (z.type & v) {
          var y = z.force;
          z = z.mass;
          y.x += z * q;
          y.y += z * w;
          y.z += z * t;
        }
      }
      m = 0;
      for (z = this.subsystems.length; m !== z; m++) {
        this.subsystems[m].update();
      }
      k && (b = performance.now());
      I.length = 0;
      K.length = 0;
      this.broadphase.collisionPairs(this, I, K);
      k && (n.broadphase = performance.now() - b);
      z = r.length;
      for (m = 0; m !== z; m++) {
        if (q = r[m], !q.collideConnected) {
          for (w = I.length - 1; 0 <= w; --w) {
            (q.bodyA === I[w] && q.bodyB === K[w] || q.bodyB === I[w] && q.bodyA === K[w]) && (I.splice(w, 1), K.splice(w, 1));
          }
        }
      }
      this.collisionMatrixTick();
      k && (b = performance.now());
      z = e.length;
      for (m = 0; m !== z; m++) {
        B.push(e[m]);
      }
      e.length = 0;
      z = this.frictionEquations.length;
      for (m = 0; m !== z; m++) {
        E.push(this.frictionEquations[m]);
      }
      this.frictionEquations.length = 0;
      this.narrowphase.getContacts(I, K, this, e, B, this.frictionEquations, E);
      k && (n.narrowphase = performance.now() - b);
      k && (b = performance.now());
      for (m = 0; m < this.frictionEquations.length; m++) {
        p.addEquation(this.frictionEquations[m]);
      }
      m = e.length;
      for (w = 0; w !== m; w++) {
        q = e[w], z = q.bi, t = q.bj, q.si, q.sj, z.material && t.material && this.getContactMaterial(z.material, t.material), (z.material && t.material && 0 <= z.material.restitution && 0 <= t.material.restitution && (q.restitution = z.material.restitution * t.material.restitution), p.addEquation(q), z.allowSleep && z.type === h.DYNAMIC && z.sleepState === h.SLEEPING && t.sleepState === h.AWAKE && t.type !== h.STATIC) && t.velocity.norm2() + t.angularVelocity.norm2() >= 2 * Math.pow(t.sleepSpeedLimit, 
        2) && (z._wakeUpAfterNarrowphase = !0), t.allowSleep && t.type === h.DYNAMIC && t.sleepState === h.SLEEPING && z.sleepState === h.AWAKE && z.type !== h.STATIC && z.velocity.norm2() + z.angularVelocity.norm2() >= 2 * Math.pow(z.sleepSpeedLimit, 2) && (t._wakeUpAfterNarrowphase = !0), this.collisionMatrix.set(z, t, !0), this.collisionMatrixPrevious.get(z, t) || (F.body = t, F.contact = q, z.dispatchEvent(F), F.body = z, t.dispatchEvent(F));
      }
      k && (n.makeContactConstraints = performance.now() - b, b = performance.now());
      for (m = 0; m !== d; m++) {
        z = f[m], z._wakeUpAfterNarrowphase && (z.wakeUp(), z._wakeUpAfterNarrowphase = !1);
      }
      z = r.length;
      for (m = 0; m !== z; m++) {
        for (q = r[m], q.update(), w = 0, e = q.equations.length; w !== e; w++) {
          p.addEquation(q.equations[w]);
        }
      }
      p.solve(c, this);
      k && (n.solve = performance.now() - b);
      p.removeAllEquations();
      p = Math.pow;
      for (m = 0; m !== d; m++) {
        if (z = f[m], z.type & v && (r = p(1 - z.linearDamping, c), e = z.velocity, e.mult(r, e), r = z.angularVelocity)) {
          e = p(1 - z.angularDamping, c), r.mult(e, r);
        }
      }
      this.dispatchEvent(D);
      for (m = 0; m !== d; m++) {
        z = f[m], z.preStep && z.preStep.call(z);
      }
      k && (b = performance.now());
      v = h.DYNAMIC | h.KINEMATIC;
      p = 0 === this.stepnumber % (this.quatNormalizeSkip + 1);
      r = this.quatNormalizeFast;
      e = .5 * c;
      g.types.PLANE;
      g.types.CONVEXPOLYHEDRON;
      for (m = 0; m !== d; m++) {
        if (z = f[m], q = z.force, w = z.torque, z.type & v && z.sleepState !== h.SLEEPING) {
          t = z.velocity;
          y = z.angularVelocity;
          var x = z.position, C = z.quaternion, H = z.invMass, sa = z.invInertiaWorld;
          t.x += q.x * H * c;
          t.y += q.y * H * c;
          t.z += q.z * H * c;
          z.angularVelocity && (sa.vmult(w, L), L.mult(c, L), L.vadd(y, y));
          x.x += t.x * c;
          x.y += t.y * c;
          x.z += t.z * c;
          z.angularVelocity && (J.set(y.x, y.y, y.z, 0), J.mult(C, R), C.x += e * R.x, C.y += e * R.y, C.z += e * R.z, C.w += e * R.w, p && (r ? C.normalizeFast() : C.normalize()));
          z.aabb && (z.aabbNeedsUpdate = !0);
          z.updateInertiaWorld && z.updateInertiaWorld();
        }
      }
      this.clearForces();
      this.broadphase.dirty = !0;
      k && (n.integrate = performance.now() - b);
      this.time += c;
      this.stepnumber += 1;
      this.dispatchEvent(A);
      for (m = 0; m !== d; m++) {
        z = f[m], (c = z.postStep) && c.call(z);
      }
      if (this.allowSleep) {
        for (m = 0; m !== d; m++) {
          f[m].sleepTick(this.time);
        }
      }
    };
    b.prototype.clearForces = function() {
      for (var c = this.bodies, b = c.length, e = 0; e !== b; e++) {
        var d = c[e];
        d.force;
        d.torque;
        d.force.set(0, 0, 0);
        d.torque.set(0, 0, 0);
      }
    };
  }, {"../collision/AABB":3, "../collision/ArrayCollisionMatrix":4, "../collision/NaiveBroadphase":7, "../collision/Ray":9, "../collision/RaycastResult":10, "../equations/ContactEquation":19, "../equations/FrictionEquation":21, "../material/ContactMaterial":24, "../material/Material":25, "../math/Quaternion":28, "../math/Vec3":30, "../objects/Body":31, "../shapes/Shape":43, "../solver/GSSolver":46, "../utils/EventTarget":49, "../utils/TupleDictionary":52, "../utils/Vec3Pool":54, "./Narrowphase":55}]}, 
  {}, [2])(2);
});
!function(a, d, k) {
  function b(e, f) {
    if (!d[e]) {
      if (!a[e]) {
        var k = "function" == typeof require && require;
        if (!f && k) {
          return k(e, !0);
        }
        if (g) {
          return g(e, !0);
        }
        throw Error("Cannot find module '" + e + "'");
      }
      f = d[e] = {exports:{}};
      a[e][0].call(f.exports, function(d) {
        var f = a[e][1][d];
        return b(f ? f : d);
      }, f, f.exports);
    }
    return d[e].exports;
  }
  for (var g = "function" == typeof require && require, f = 0; f < k.length; f++) {
    b(k[f]);
  }
  return b;
}({1:[function(a, d) {
  var k = (a("./pointable"), a("gl-matrix")), b = k.vec3, g = k.mat3, f = k.mat4;
  a = (a("underscore"), d.exports = function(a, d) {
    this.finger = a;
    this._matrix = this._center = null;
    this.type = d.type;
    this.prevJoint = d.prevJoint;
    this.nextJoint = d.nextJoint;
    this.width = d.width;
    a = Array(3);
    b.sub(a, d.nextJoint, d.prevJoint);
    this.length = b.length(a);
    this.basis = d.basis;
  });
  a.prototype.left = function() {
    return this._left ? this._left : (this._left = 0 > g.determinant(this.basis[0].concat(this.basis[1]).concat(this.basis[2])), this._left);
  };
  a.prototype.matrix = function() {
    if (this._matrix) {
      return this._matrix;
    }
    var a = this.basis, b = this._matrix = f.create();
    return b[0] = a[0][0], b[1] = a[0][1], b[2] = a[0][2], b[4] = a[1][0], b[5] = a[1][1], b[6] = a[1][2], b[8] = a[2][0], b[9] = a[2][1], b[10] = a[2][2], b[3] = this.center()[0], b[7] = this.center()[1], b[11] = this.center()[2], this.left() && (b[0] *= -1, b[1] *= -1, b[2] *= -1), this._matrix;
  };
  a.prototype.lerp = function(a, d) {
    b.lerp(a, this.prevJoint, this.nextJoint, d);
  };
  a.prototype.center = function() {
    if (this._center) {
      return this._center;
    }
    var a = b.create();
    return this.lerp(a, .5), this._center = a, a;
  };
  a.prototype.direction = function() {
    return [-1 * this.basis[2][0], -1 * this.basis[2][1], -1 * this.basis[2][2]];
  };
}, {"./pointable":14, "gl-matrix":23, underscore:24}], 2:[function(a, d) {
  a = d.exports = function(a) {
    this.pos = 0;
    this._buf = [];
    this.size = a;
  };
  a.prototype.get = function(a) {
    return void 0 == a && (a = 0), a >= this.size ? void 0 : a >= this._buf.length ? void 0 : this._buf[(this.pos - a - 1) % this.size];
  };
  a.prototype.push = function(a) {
    return this._buf[this.pos % this.size] = a, this.pos++;
  };
}, {}], 3:[function(a, d) {
  var k = a("../protocol").chooseProtocol, b = a("events").EventEmitter, g = a("underscore"), f = d.exports = function(a) {
    this.opts = g.defaults(a || {}, {host:"127.0.0.1", enableGestures:!1, scheme:this.getScheme(), port:this.getPort(), background:!1, optimizeHMD:!1, requestProtocolVersion:f.defaultProtocolVersion});
    this.host = this.opts.host;
    this.port = this.opts.port;
    this.scheme = this.opts.scheme;
    this.protocolVersionVerified = !1;
    this.optimizeHMD = this.background = null;
    this.on("ready", function() {
      this.enableGestures(this.opts.enableGestures);
      this.setBackground(this.opts.background);
      this.setOptimizeHMD(this.opts.optimizeHMD);
      console.log(this.opts.optimizeHMD ? "Optimized for head mounted display usage." : "Optimized for desktop usage.");
    });
  };
  f.defaultProtocolVersion = 6;
  f.prototype.getUrl = function() {
    return this.scheme + "//" + this.host + ":" + this.port + "/v" + this.opts.requestProtocolVersion + ".json";
  };
  f.prototype.getScheme = function() {
    return "ws:";
  };
  f.prototype.getPort = function() {
    return 6437;
  };
  f.prototype.setBackground = function(a) {
    this.opts.background = a;
    this.protocol && this.protocol.sendBackground && this.background !== this.opts.background && (this.background = this.opts.background, this.protocol.sendBackground(this, this.opts.background));
  };
  f.prototype.setOptimizeHMD = function(a) {
    this.opts.optimizeHMD = a;
    this.protocol && this.protocol.sendOptimizeHMD && this.optimizeHMD !== this.opts.optimizeHMD && (this.optimizeHMD = this.opts.optimizeHMD, this.protocol.sendOptimizeHMD(this, this.opts.optimizeHMD));
  };
  f.prototype.handleOpen = function() {
    this.connected || (this.connected = !0, this.emit("connect"));
  };
  f.prototype.enableGestures = function(a) {
    this.gesturesEnabled = a ? !0 : !1;
    this.send(this.protocol.encode({enableGestures:this.gesturesEnabled}));
  };
  f.prototype.handleClose = function(a) {
    this.connected && (this.disconnect(), 1001 === a && 1 < this.opts.requestProtocolVersion && (this.protocolVersionVerified ? this.protocolVersionVerified = !1 : this.opts.requestProtocolVersion--), this.startReconnection());
  };
  f.prototype.startReconnection = function() {
    var a = this;
    this.reconnectionTimer || (this.reconnectionTimer = setInterval(function() {
      a.reconnect();
    }, 500));
  };
  f.prototype.stopReconnection = function() {
    this.reconnectionTimer = clearInterval(this.reconnectionTimer);
  };
  f.prototype.disconnect = function(a) {
    return a || this.stopReconnection(), this.socket ? (this.socket.close(), delete this.socket, delete this.protocol, delete this.background, delete this.optimizeHMD, delete this.focusedState, this.connected && (this.connected = !1, this.emit("disconnect")), !0) : void 0;
  };
  f.prototype.reconnect = function() {
    this.connected ? this.stopReconnection() : (this.disconnect(!0), this.connect());
  };
  f.prototype.handleData = function(a) {
    var b;
    a = JSON.parse(a);
    void 0 === this.protocol ? (b = this.protocol = k(a), this.protocolVersionVerified = !0, this.emit("ready")) : b = this.protocol(a);
    this.emit(b.type, b);
  };
  f.prototype.connect = function() {
    return this.socket ? void 0 : (this.socket = this.setupSocket(), !0);
  };
  f.prototype.send = function(a) {
    this.socket.send(a);
  };
  f.prototype.reportFocus = function(a) {
    this.connected && this.focusedState !== a && (this.focusedState = a, this.emit(this.focusedState ? "focus" : "blur"), this.protocol && this.protocol.sendFocused && this.protocol.sendFocused(this, this.focusedState));
  };
  g.extend(f.prototype, b.prototype);
}, {"../protocol":15, events:21, underscore:24}], 4:[function(a, d) {
  var k = d.exports = a("./base");
  a = a("underscore");
  d = d.exports = function(a) {
    k.call(this, a);
    var b = this;
    this.on("ready", function() {
      b.startFocusLoop();
    });
    this.on("disconnect", function() {
      b.stopFocusLoop();
    });
  };
  a.extend(d.prototype, k.prototype);
  d.__proto__ = k;
  d.prototype.useSecure = function() {
    return "https:" === location.protocol;
  };
  d.prototype.getScheme = function() {
    return this.useSecure() ? "wss:" : "ws:";
  };
  d.prototype.getPort = function() {
    return this.useSecure() ? 6436 : 6437;
  };
  d.prototype.setupSocket = function() {
    var a = this, d = new WebSocket(this.getUrl());
    return d.onopen = function() {
      a.handleOpen();
    }, d.onclose = function(b) {
      a.handleClose(b.code, b.reason);
    }, d.onmessage = function(b) {
      a.handleData(b.data);
    }, d.onerror = function() {
      a.useSecure() && "wss:" === a.scheme && (a.scheme = "ws:", a.port = 6437, a.disconnect(), a.connect());
    }, d;
  };
  d.prototype.startFocusLoop = function() {
    if (!this.focusDetectorTimer) {
      var a = this, d = null;
      d = "undefined" != typeof document.hidden ? "hidden" : "undefined" != typeof document.mozHidden ? "mozHidden" : "undefined" != typeof document.msHidden ? "msHidden" : "undefined" != typeof document.webkitHidden ? "webkitHidden" : void 0;
      void 0 === a.windowVisible && (a.windowVisible = void 0 === d ? !0 : !1 === document[d]);
      var f = window.addEventListener("focus", function() {
        a.windowVisible = !0;
        k();
      }), e = window.addEventListener("blur", function() {
        a.windowVisible = !1;
        k();
      });
      this.on("disconnect", function() {
        window.removeEventListener("focus", f);
        window.removeEventListener("blur", e);
      });
      var k = function() {
        a.reportFocus((void 0 === d ? !0 : !1 === document[d]) && a.windowVisible);
      };
      k();
      this.focusDetectorTimer = setInterval(k, 100);
    }
  };
  d.prototype.stopFocusLoop = function() {
    this.focusDetectorTimer && (clearTimeout(this.focusDetectorTimer), delete this.focusDetectorTimer);
  };
}, {"./base":3, underscore:24}], 5:[function(a, d) {
  var k = a("__browserify_process"), b = a("./frame"), g = a("./hand"), f = a("./pointable"), e = a("./finger"), r = a("./circular_buffer"), q = a("./pipeline"), m = a("events").EventEmitter, n = a("./gesture").gestureListener, c = a("./dialog"), h = a("underscore"), t = d.exports = function(c) {
    var e = this;
    c = h.defaults(c || {}, {inNode:"undefined" != typeof k && k.versions && k.versions.node});
    this.inNode = c.inNode;
    c = h.defaults(c || {}, {frameEventName:this.useAnimationLoop() ? "animationFrame" : "deviceFrame", suppressAnimationLoop:!this.useAnimationLoop(), loopWhileDisconnected:!0, useAllPlugins:!1, checkVersion:!0});
    this.animationFrameRequested = !1;
    this.onAnimationFrame = function(a) {
      e.lastConnectionFrame.valid && e.emit("animationFrame", e.lastConnectionFrame);
      e.emit("frameEnd", a);
      e.loopWhileDisconnected && (!1 !== e.connection.focusedState || e.connection.opts.background) ? window.requestAnimationFrame(e.onAnimationFrame) : e.animationFrameRequested = !1;
    };
    this.suppressAnimationLoop = c.suppressAnimationLoop;
    this.loopWhileDisconnected = c.loopWhileDisconnected;
    this.frameEventName = c.frameEventName;
    this.useAllPlugins = c.useAllPlugins;
    this.history = new r(200);
    this.lastConnectionFrame = this.lastValidFrame = this.lastFrame = b.Invalid;
    this.accumulatedGestures = [];
    this.checkVersion = c.checkVersion;
    this.connectionType = void 0 === c.connectionType ? a(this.inBrowser() ? "./connection/browser" : "./connection/node") : c.connectionType;
    this.connection = new this.connectionType(c);
    this.streamingCount = 0;
    this.devices = {};
    this.plugins = {};
    this._pluginPipelineSteps = {};
    this._pluginExtendedMethods = {};
    c.useAllPlugins && this.useRegisteredPlugins();
    this.setupFrameEvents(c);
    this.setupConnectionEvents();
    this.startAnimationLoop();
  };
  t.prototype.gesture = function(a, c) {
    a = n(this, a);
    return void 0 !== c && a.stop(c), a;
  };
  t.prototype.setBackground = function(a) {
    return this.connection.setBackground(a), this;
  };
  t.prototype.setOptimizeHMD = function(a) {
    return this.connection.setOptimizeHMD(a), this;
  };
  t.prototype.inBrowser = function() {
    return !this.inNode;
  };
  t.prototype.useAnimationLoop = function() {
    return this.inBrowser() && !this.inBackgroundPage();
  };
  t.prototype.inBackgroundPage = function() {
    return "undefined" != typeof chrome && chrome.extension && chrome.extension.getBackgroundPage && chrome.extension.getBackgroundPage() === window;
  };
  t.prototype.connect = function() {
    return this.connection.connect(), this;
  };
  t.prototype.streaming = function() {
    return 0 < this.streamingCount;
  };
  t.prototype.connected = function() {
    return !!this.connection.connected;
  };
  t.prototype.startAnimationLoop = function() {
    this.suppressAnimationLoop || this.animationFrameRequested || (this.animationFrameRequested = !0, window.requestAnimationFrame(this.onAnimationFrame));
  };
  t.prototype.disconnect = function() {
    return this.connection.disconnect(), this;
  };
  t.prototype.frame = function(a) {
    return this.history.get(a) || b.Invalid;
  };
  t.prototype.loop = function(a) {
    return a && ("function" == typeof a ? this.on(this.frameEventName, a) : this.setupFrameEvents(a)), this.connect();
  };
  t.prototype.addStep = function(a) {
    this.pipeline || (this.pipeline = new q(this));
    this.pipeline.addStep(a);
  };
  t.prototype.processFrame = function(a) {
    a.gestures && (this.accumulatedGestures = this.accumulatedGestures.concat(a.gestures));
    this.lastConnectionFrame = a;
    this.startAnimationLoop();
    this.emit("deviceFrame", a);
  };
  t.prototype.processFinishedFrame = function(a) {
    if (this.lastFrame = a, a.valid && (this.lastValidFrame = a), a.controller = this, a.historyIdx = this.history.push(a), a.gestures) {
      a.gestures = this.accumulatedGestures;
      this.accumulatedGestures = [];
      for (var c = 0; c != a.gestures.length; c++) {
        this.emit("gesture", a.gestures[c], a);
      }
    }
    this.pipeline && (a = this.pipeline.run(a), a || (a = b.Invalid));
    this.emit("frame", a);
    this.emitHandEvents(a);
  };
  t.prototype.emitHandEvents = function(a) {
    for (var c = 0; c < a.hands.length; c++) {
      this.emit("hand", a.hands[c]);
    }
  };
  t.prototype.setupFrameEvents = function(a) {
    a.frame && this.on("frame", a.frame);
    a.hand && this.on("hand", a.hand);
  };
  t.prototype.setupConnectionEvents = function() {
    var a = this;
    this.connection.on("frame", function(c) {
      a.processFrame(c);
    });
    this.on(this.frameEventName, function(c) {
      a.processFinishedFrame(c);
    });
    var c = function() {
      if (5 > a.connection.opts.requestProtocolVersion && 0 == a.streamingCount) {
        a.streamingCount = 1;
        var b = {attached:!0, streaming:!0, type:"unknown", id:"Lx00000000000"};
        a.devices[b.id] = b;
        a.emit("deviceAttached", b);
        a.emit("deviceStreaming", b);
        a.emit("streamingStarted", b);
        a.connection.removeListener("frame", c);
      }
    }, b = function() {
      if (0 < a.streamingCount) {
        for (var c in a.devices) {
          a.emit("deviceStopped", a.devices[c]), a.emit("deviceRemoved", a.devices[c]);
        }
        a.emit("streamingStopped", a.devices[c]);
        a.streamingCount = 0;
        for (c in a.devices) {
          delete a.devices[c];
        }
      }
    };
    this.connection.on("focus", function() {
      a.loopWhileDisconnected && a.startAnimationLoop();
      a.emit("focus");
    });
    this.connection.on("blur", function() {
      a.emit("blur");
    });
    this.connection.on("protocol", function(c) {
      c.on("beforeFrameCreated", function(c) {
        a.emit("beforeFrameCreated", c);
      });
      c.on("afterFrameCreated", function(c, b) {
        a.emit("afterFrameCreated", c, b);
      });
      a.emit("protocol", c);
    });
    this.connection.on("ready", function() {
      a.checkVersion && !a.inNode && a.checkOutOfDate();
      a.emit("ready");
    });
    this.connection.on("connect", function() {
      a.emit("connect");
      a.connection.removeListener("frame", c);
      a.connection.on("frame", c);
    });
    this.connection.on("disconnect", function() {
      a.emit("disconnect");
      b();
    });
    this.connection.on("deviceConnect", function(e) {
      e.state ? (a.emit("deviceConnected"), a.connection.removeListener("frame", c), a.connection.on("frame", c)) : (a.emit("deviceDisconnected"), b());
    });
    this.connection.on("deviceEvent", function(c) {
      c = c.state;
      var b = a.devices[c.id], e = {}, d;
      for (d in c) {
        b && b.hasOwnProperty(d) && b[d] == c[d] || (e[d] = !0);
      }
      a.devices[c.id] = c;
      e.attached && a.emit(c.attached ? "deviceAttached" : "deviceRemoved", c);
      e.streaming && (c.streaming ? (a.streamingCount++, a.emit("deviceStreaming", c), 1 == a.streamingCount && a.emit("streamingStarted", c), e.attached || a.emit("deviceConnected")) : e.attached && c.attached || (a.streamingCount--, a.emit("deviceStopped", c), 0 == a.streamingCount && a.emit("streamingStopped", c), a.emit("deviceDisconnected")));
    });
    this.on("newListener", function(a) {
      "deviceConnected" != a && "deviceDisconnected" != a || console.warn(a + " events are depricated.  Consider using 'streamingStarted/streamingStopped' or 'deviceStreaming/deviceStopped' instead");
    });
  };
  t.prototype.checkOutOfDate = function() {
    console.assert(this.connection && this.connection.protocol);
    var a = this.connection.protocol.serviceVersion, b = this.connection.protocol.version, e = this.connectionType.defaultProtocolVersion;
    return e > b ? (console.warn("Your Protocol Version is v" + b + ", this app was designed for v" + e), c.warnOutOfDate({sV:a, pV:b}), !0) : !1;
  };
  t._pluginFactories = {};
  t.plugin = function(a, c) {
    return this._pluginFactories[a] && console.warn('Plugin "' + a + '" already registered'), this._pluginFactories[a] = c;
  };
  t.plugins = function() {
    return h.keys(this._pluginFactories);
  };
  t.prototype.use = function(a, c) {
    var d, m;
    if (d = "function" == typeof a ? a : t._pluginFactories[a], !d) {
      throw "Leap Plugin " + a + " not found.";
    }
    if (c || (c = {}), this.plugins[a]) {
      return h.extend(this.plugins[a], c), this;
    }
    this.plugins[a] = c;
    c = d.call(this, c);
    for (m in c) {
      if (d = c[m], "function" == typeof d) {
        var k = a, n = m;
        -1 != ["beforeFrameCreated", "afterFrameCreated"].indexOf(n) ? this.on(n, d) : (this.pipeline || (this.pipeline = new q(this)), this._pluginPipelineSteps[k] || (this._pluginPipelineSteps[k] = []), this._pluginPipelineSteps[k].push(this.pipeline.addWrappedStep(n, d)));
      } else {
        k = a;
        n = m;
        switch(this._pluginExtendedMethods[k] || (this._pluginExtendedMethods[k] = []), n) {
          case "frame":
            n = b;
            break;
          case "hand":
            n = g;
            break;
          case "pointable":
            n = f;
            h.extend(e.prototype, d);
            h.extend(e.Invalid, d);
            break;
          case "finger":
            n = e;
            break;
          default:
            throw k + ' specifies invalid object type "' + n + '" for prototypical extension';
        }
        h.extend(n.prototype, d);
        h.extend(n.Invalid, d);
        this._pluginExtendedMethods[k].push([n, d]);
      }
    }
    return this;
  };
  t.prototype.stopUsing = function(a) {
    var c = this._pluginPipelineSteps[a];
    var b = this._pluginExtendedMethods[a], e;
    if (this.plugins[a]) {
      if (c) {
        for (e = 0; e < c.length; e++) {
          this.pipeline.removeStep(c[e]);
        }
      }
      if (b) {
        for (e = 0; e < b.length; e++) {
          c = b[e][0];
          var d = b[e][1];
          for (var f in d) {
            delete c.prototype[f], delete c.Invalid[f];
          }
        }
      }
      return delete this.plugins[a], this;
    }
  };
  t.prototype.useRegisteredPlugins = function() {
    for (var a in t._pluginFactories) {
      this.use(a);
    }
  };
  h.extend(t.prototype, m.prototype);
}, {"./circular_buffer":2, "./connection/browser":4, "./connection/node":20, "./dialog":6, "./finger":7, "./frame":8, "./gesture":9, "./hand":10, "./pipeline":13, "./pointable":14, __browserify_process:22, events:21, underscore:24}], 6:[function(a, d) {
  var k = a("__browserify_process"), b = d.exports = function(a, b) {
    this.options = b || {};
    this.message = a;
    this.createElement();
  };
  b.prototype.createElement = function() {
    this.element = document.createElement("div");
    this.element.className = "leapjs-dialog";
    this.element.style.position = "fixed";
    this.element.style.top = "8px";
    this.element.style.left = 0;
    this.element.style.right = 0;
    this.element.style.textAlign = "center";
    this.element.style.zIndex = 1E3;
    var a = document.createElement("div");
    this.element.appendChild(a);
    a.style.className = "leapjs-dialog";
    a.style.display = "inline-block";
    a.style.margin = "auto";
    a.style.padding = "8px";
    a.style.color = "#222";
    a.style.background = "#eee";
    a.style.borderRadius = "4px";
    a.style.border = "1px solid #999";
    a.style.textAlign = "left";
    a.style.cursor = "pointer";
    a.style.whiteSpace = "nowrap";
    a.style.transition = "box-shadow 1s linear";
    a.innerHTML = this.message;
    this.options.onclick && a.addEventListener("click", this.options.onclick);
    this.options.onmouseover && a.addEventListener("mouseover", this.options.onmouseover);
    this.options.onmouseout && a.addEventListener("mouseout", this.options.onmouseout);
    this.options.onmousemove && a.addEventListener("mousemove", this.options.onmousemove);
  };
  b.prototype.show = function() {
    return document.body.appendChild(this.element), this;
  };
  b.prototype.hide = function() {
    return document.body.removeChild(this.element), this;
  };
  b.warnOutOfDate = function(a) {
    a || (a = {});
    var d = "http://developer.leapmotion.com?";
    a.returnTo = window.location.href;
    for (var e in a) {
      d += e + "=" + encodeURIComponent(a[e]) + "&";
    }
    var g;
    return g = new b("This site requires Leap Motion Tracking V2.<button id='leapjs-accept-upgrade'  style='color: #444; transition: box-shadow 100ms linear; cursor: pointer; vertical-align: baseline; margin-left: 16px;'>Upgrade</button><button id='leapjs-decline-upgrade' style='color: #444; transition: box-shadow 100ms linear; cursor: pointer; vertical-align: baseline; margin-left: 8px; '>Not Now</button>", {onclick:function(a) {
      "leapjs-decline-upgrade" != a.target.id && (a = window.open(d, "_blank", "height=800,width=1000,location=1,menubar=1,resizable=1,status=1,toolbar=1,scrollbars=1"), window.focus && a.focus());
      return g.hide(), !0;
    }, onmousemove:function(a) {
      a.target == document.getElementById("leapjs-decline-upgrade") ? (document.getElementById("leapjs-decline-upgrade").style.color = "#000", document.getElementById("leapjs-decline-upgrade").style.boxShadow = "0px 0px 2px #5daa00", document.getElementById("leapjs-accept-upgrade").style.color = "#444", document.getElementById("leapjs-accept-upgrade").style.boxShadow = "none") : (document.getElementById("leapjs-accept-upgrade").style.color = "#000", document.getElementById("leapjs-accept-upgrade").style.boxShadow = 
      "0px 0px 2px #5daa00", document.getElementById("leapjs-decline-upgrade").style.color = "#444", document.getElementById("leapjs-decline-upgrade").style.boxShadow = "none");
    }, onmouseout:function() {
      document.getElementById("leapjs-decline-upgrade").style.color = "#444";
      document.getElementById("leapjs-decline-upgrade").style.boxShadow = "none";
      document.getElementById("leapjs-accept-upgrade").style.color = "#444";
      document.getElementById("leapjs-accept-upgrade").style.boxShadow = "none";
    }}), g.show();
  };
  b.hasWarnedBones = !1;
  b.warnBones = function() {
    this.hasWarnedBones || (this.hasWarnedBones = !0, console.warn("Your Leap Service is out of date"), "undefined" != typeof k && k.versions && k.versions.node || this.warnOutOfDate({reason:"bones"}));
  };
}, {__browserify_process:22}], 7:[function(a, d) {
  var k = a("./pointable"), b = a("./bone"), g = a("./dialog");
  a = a("underscore");
  d = d.exports = function(a) {
    k.call(this, a);
    this.dipPosition = a.dipPosition;
    this.pipPosition = a.pipPosition;
    this.mcpPosition = a.mcpPosition;
    this.carpPosition = a.carpPosition;
    this.extended = a.extended;
    this.type = a.type;
    this.finger = !0;
    this.positions = [this.carpPosition, this.mcpPosition, this.pipPosition, this.dipPosition, this.tipPosition];
    a.bases ? this.addBones(a) : g.warnBones();
  };
  a.extend(d.prototype, k.prototype);
  d.prototype.addBones = function(a) {
    this.metacarpal = new b(this, {type:0, width:this.width, prevJoint:this.carpPosition, nextJoint:this.mcpPosition, basis:a.bases[0]});
    this.proximal = new b(this, {type:1, width:this.width, prevJoint:this.mcpPosition, nextJoint:this.pipPosition, basis:a.bases[1]});
    this.medial = new b(this, {type:2, width:this.width, prevJoint:this.pipPosition, nextJoint:this.dipPosition, basis:a.bases[2]});
    this.distal = new b(this, {type:3, width:this.width, prevJoint:this.dipPosition, nextJoint:a.btipPosition, basis:a.bases[3]});
    this.bones = [this.metacarpal, this.proximal, this.medial, this.distal];
  };
  d.prototype.toString = function() {
    return "Finger [ id:" + this.id + " " + this.length + "mmx | width:" + this.width + "mm | direction:" + this.direction + " ]";
  };
  d.Invalid = {valid:!1};
}, {"./bone":1, "./dialog":6, "./pointable":14, underscore:24}], 8:[function(a, d) {
  var k = a("./hand"), b = a("./pointable"), g = a("./gesture").createGesture, f = a("gl-matrix"), e = f.mat3, r = f.vec3, q = a("./interaction_box"), m = a("./finger"), n = a("underscore");
  a = d.exports = function(a) {
    if (this.valid = !0, this.id = a.id, this.timestamp = a.timestamp, this.hands = [], this.handsMap = {}, this.pointables = [], this.tools = [], this.fingers = [], a.interactionBox && (this.interactionBox = new q(a.interactionBox)), this.gestures = [], this.pointablesMap = {}, this._translation = a.t, this._rotation = n.flatten(a.r), this._scaleFactor = a.s, this.data = a, this.type = "frame", this.currentFrameRate = a.currentFrameRate, a.gestures) {
      for (var c = 0, b = a.gestures.length; c != b; c++) {
        this.gestures.push(g(a.gestures[c]));
      }
    }
    this.postprocessData(a);
  };
  a.prototype.postprocessData = function(a) {
    a || (a = this.data);
    for (var c = 0, e = a.hands.length; c != e; c++) {
      var d = new k(a.hands[c]);
      d.frame = this;
      this.hands.push(d);
      this.handsMap[d.id] = d;
    }
    a.pointables = n.sortBy(a.pointables, function(a) {
      return a.id;
    });
    c = 0;
    for (e = a.pointables.length; c != e; c++) {
      d = a.pointables[c], d = d.dipPosition ? new m(d) : new b(d), d.frame = this, this.addPointable(d);
    }
  };
  a.prototype.addPointable = function(a) {
    if (this.pointables.push(a), this.pointablesMap[a.id] = a, (a.tool ? this.tools : this.fingers).push(a), void 0 !== a.handId && this.handsMap.hasOwnProperty(a.handId)) {
      var c = this.handsMap[a.handId];
      switch(c.pointables.push(a), (a.tool ? c.tools : c.fingers).push(a), a.type) {
        case 0:
          c.thumb = a;
          break;
        case 1:
          c.indexFinger = a;
          break;
        case 2:
          c.middleFinger = a;
          break;
        case 3:
          c.ringFinger = a;
          break;
        case 4:
          c.pinky = a;
      }
    }
  };
  a.prototype.tool = function(a) {
    a = this.pointable(a);
    return a.tool ? a : b.Invalid;
  };
  a.prototype.pointable = function(a) {
    return this.pointablesMap[a] || b.Invalid;
  };
  a.prototype.finger = function(a) {
    a = this.pointable(a);
    return a.tool ? b.Invalid : a;
  };
  a.prototype.hand = function(a) {
    return this.handsMap[a] || k.Invalid;
  };
  a.prototype.rotationAngle = function(a, b) {
    if (!this.valid || !a.valid) {
      return 0;
    }
    var c = this.rotationMatrix(a);
    c = Math.acos(.5 * (c[0] + c[4] + c[8] - 1));
    if (c = isNaN(c) ? 0 : c, void 0 !== b) {
      a = this.rotationAxis(a), c *= r.dot(a, r.normalize(r.create(), b));
    }
    return c;
  };
  a.prototype.rotationAxis = function(a) {
    return this.valid && a.valid ? r.normalize(r.create(), [this._rotation[7] - a._rotation[5], this._rotation[2] - a._rotation[6], this._rotation[3] - a._rotation[1]]) : r.create();
  };
  a.prototype.rotationMatrix = function(a) {
    if (!this.valid || !a.valid) {
      return e.create();
    }
    var c = e.transpose(e.create(), this._rotation);
    return e.multiply(e.create(), a._rotation, c);
  };
  a.prototype.scaleFactor = function(a) {
    return this.valid && a.valid ? Math.exp(this._scaleFactor - a._scaleFactor) : 1;
  };
  a.prototype.translation = function(a) {
    return this.valid && a.valid ? r.subtract(r.create(), this._translation, a._translation) : r.create();
  };
  a.prototype.toString = function() {
    var a = "Frame [ id:" + this.id + " | timestamp:" + this.timestamp + " | Hand count:(" + this.hands.length + ") | Pointable count:(" + this.pointables.length + ")";
    return this.gestures && (a += " | Gesture count:(" + this.gestures.length + ")"), a + " ]";
  };
  a.prototype.dump = function() {
    var a = "Frame Info:<br/>" + this.toString();
    a += "<br/><br/>Hands:<br/>";
    for (var b = 0, e = this.hands.length; b != e; b++) {
      a += "  " + this.hands[b].toString() + "<br/>";
    }
    a += "<br/><br/>Pointables:<br/>";
    b = 0;
    for (e = this.pointables.length; b != e; b++) {
      a += "  " + this.pointables[b].toString() + "<br/>";
    }
    if (this.gestures) {
      for (a += "<br/><br/>Gestures:<br/>", b = 0, e = this.gestures.length; b != e; b++) {
        a += "  " + this.gestures[b].toString() + "<br/>";
      }
    }
    return a += "<br/><br/>Raw JSON:<br/>", a + JSON.stringify(this.data);
  };
  a.Invalid = {valid:!1, hands:[], fingers:[], tools:[], gestures:[], pointables:[], pointable:function() {
    return b.Invalid;
  }, finger:function() {
    return b.Invalid;
  }, hand:function() {
    return k.Invalid;
  }, toString:function() {
    return "invalid frame";
  }, dump:function() {
    return this.toString();
  }, rotationAngle:function() {
    return 0;
  }, rotationMatrix:function() {
    return e.create();
  }, rotationAxis:function() {
    return r.create();
  }, scaleFactor:function() {
    return 1;
  }, translation:function() {
    return r.create();
  }};
}, {"./finger":7, "./gesture":9, "./hand":10, "./interaction_box":12, "./pointable":14, "gl-matrix":23, underscore:24}], 9:[function(a, d, k) {
  var b = a("gl-matrix").vec3;
  d = a("events").EventEmitter;
  var g = a("underscore"), f = (k.createGesture = function(a) {
    switch(a.type) {
      case "circle":
        var c = new e(a);
        break;
      case "swipe":
        c = new r(a);
        break;
      case "screenTap":
        c = new q(a);
        break;
      case "keyTap":
        c = new m(a);
        break;
      default:
        throw "unknown gesture type";
    }
    return c.id = a.id, c.handIds = a.handIds.slice(), c.pointableIds = a.pointableIds.slice(), c.duration = a.duration, c.state = a.state, c.type = a.type, c;
  }, k.gestureListener = function(a, c) {
    var b = {}, e = {};
    a.on("gesture", function(a, d) {
      if (a.type == c) {
        if (("start" == a.state || "stop" == a.state) && void 0 === e[a.id]) {
          var h = new f(a, d);
          e[a.id] = h;
          g.each(b, function(a, c) {
            h.on(c, a);
          });
        }
        e[a.id].update(a, d);
        "stop" == a.state && delete e[a.id];
      }
    });
    var d = {start:function(a) {
      return b.start = a, d;
    }, stop:function(a) {
      return b.stop = a, d;
    }, complete:function(a) {
      return b.stop = a, d;
    }, update:function(a) {
      return b.update = a, d;
    }};
    return d;
  }, k.Gesture = function(a, c) {
    this.gestures = [a];
    this.frames = [c];
  });
  f.prototype.update = function(a, c) {
    this.lastGesture = a;
    this.lastFrame = c;
    this.gestures.push(a);
    this.frames.push(c);
    this.emit(a.state, this);
  };
  f.prototype.translation = function() {
    return b.subtract(b.create(), this.lastGesture.startPosition, this.lastGesture.position);
  };
  g.extend(f.prototype, d.prototype);
  var e = function(a) {
    this.center = a.center;
    this.normal = a.normal;
    this.progress = a.progress;
    this.radius = a.radius;
  };
  e.prototype.toString = function() {
    return "CircleGesture [" + JSON.stringify(this) + "]";
  };
  var r = function(a) {
    this.startPosition = a.startPosition;
    this.position = a.position;
    this.direction = a.direction;
    this.speed = a.speed;
  };
  r.prototype.toString = function() {
    return "SwipeGesture [" + JSON.stringify(this) + "]";
  };
  var q = function(a) {
    this.position = a.position;
    this.direction = a.direction;
    this.progress = a.progress;
  };
  q.prototype.toString = function() {
    return "ScreenTapGesture [" + JSON.stringify(this) + "]";
  };
  var m = function(a) {
    this.position = a.position;
    this.direction = a.direction;
    this.progress = a.progress;
  };
  m.prototype.toString = function() {
    return "KeyTapGesture [" + JSON.stringify(this) + "]";
  };
}, {events:21, "gl-matrix":23, underscore:24}], 10:[function(a, d) {
  var k = a("./pointable"), b = a("./bone"), g = a("gl-matrix"), f = g.mat3, e = g.vec3, r = a("underscore");
  a = d.exports = function(a) {
    this.id = a.id;
    this.palmPosition = a.palmPosition;
    this.direction = a.direction;
    this.palmVelocity = a.palmVelocity;
    this.palmNormal = a.palmNormal;
    this.sphereCenter = a.sphereCenter;
    this.sphereRadius = a.sphereRadius;
    this.valid = !0;
    this.pointables = [];
    this.fingers = [];
    this.arm = a.armBasis ? new b(this, {type:4, width:a.armWidth, prevJoint:a.elbow, nextJoint:a.wrist, basis:a.armBasis}) : null;
    this.tools = [];
    this._translation = a.t;
    this._rotation = r.flatten(a.r);
    this._scaleFactor = a.s;
    this.timeVisible = a.timeVisible;
    this.stabilizedPalmPosition = a.stabilizedPalmPosition;
    this.type = a.type;
    this.grabStrength = a.grabStrength;
    this.pinchStrength = a.pinchStrength;
    this.confidence = a.confidence;
  };
  a.prototype.finger = function(a) {
    return (a = this.frame.finger(a)) && a.handId == this.id ? a : k.Invalid;
  };
  a.prototype.rotationAngle = function(a, b) {
    if (!this.valid || !a.valid || !a.hand(this.id).valid) {
      return 0;
    }
    var d = this.rotationMatrix(a);
    d = Math.acos(.5 * (d[0] + d[4] + d[8] - 1));
    if (d = isNaN(d) ? 0 : d, void 0 !== b) {
      a = this.rotationAxis(a), d *= e.dot(a, e.normalize(e.create(), b));
    }
    return d;
  };
  a.prototype.rotationAxis = function(a) {
    if (!this.valid || !a.valid) {
      return e.create();
    }
    a = a.hand(this.id);
    return a.valid ? e.normalize(e.create(), [this._rotation[7] - a._rotation[5], this._rotation[2] - a._rotation[6], this._rotation[3] - a._rotation[1]]) : e.create();
  };
  a.prototype.rotationMatrix = function(a) {
    if (!this.valid || !a.valid) {
      return f.create();
    }
    a = a.hand(this.id);
    if (!a.valid) {
      return f.create();
    }
    var b = f.transpose(f.create(), this._rotation);
    return f.multiply(f.create(), a._rotation, b);
  };
  a.prototype.scaleFactor = function(a) {
    if (!this.valid || !a.valid) {
      return 1;
    }
    a = a.hand(this.id);
    return a.valid ? Math.exp(this._scaleFactor - a._scaleFactor) : 1;
  };
  a.prototype.translation = function(a) {
    if (!this.valid || !a.valid) {
      return e.create();
    }
    a = a.hand(this.id);
    return a.valid ? [this._translation[0] - a._translation[0], this._translation[1] - a._translation[1], this._translation[2] - a._translation[2]] : e.create();
  };
  a.prototype.toString = function() {
    return "Hand (" + this.type + ") [ id: " + this.id + " | palm velocity:" + this.palmVelocity + " | sphere center:" + this.sphereCenter + " ] ";
  };
  a.prototype.pitch = function() {
    return Math.atan2(this.direction[1], -this.direction[2]);
  };
  a.prototype.yaw = function() {
    return Math.atan2(this.direction[0], -this.direction[2]);
  };
  a.prototype.roll = function() {
    return Math.atan2(this.palmNormal[0], -this.palmNormal[1]);
  };
  a.Invalid = {valid:!1, fingers:[], tools:[], pointables:[], left:!1, pointable:function() {
    return k.Invalid;
  }, finger:function() {
    return k.Invalid;
  }, toString:function() {
    return "invalid frame";
  }, dump:function() {
    return this.toString();
  }, rotationAngle:function() {
    return 0;
  }, rotationMatrix:function() {
    return f.create();
  }, rotationAxis:function() {
    return e.create();
  }, scaleFactor:function() {
    return 1;
  }, translation:function() {
    return e.create();
  }};
}, {"./bone":1, "./pointable":14, "gl-matrix":23, underscore:24}], 11:[function(a, d) {
  d.exports = {Controller:a("./controller"), Frame:a("./frame"), Gesture:a("./gesture"), Hand:a("./hand"), Pointable:a("./pointable"), Finger:a("./finger"), InteractionBox:a("./interaction_box"), CircularBuffer:a("./circular_buffer"), UI:a("./ui"), JSONProtocol:a("./protocol").JSONProtocol, glMatrix:a("gl-matrix"), mat3:a("gl-matrix").mat3, vec3:a("gl-matrix").vec3, loopController:void 0, version:a("./version.js"), _:a("underscore"), EventEmitter:a("events").EventEmitter, loop:function(a, b) {
    return a && void 0 === b && "[object Function]" === {}.toString.call(a) && (b = a, a = {}), this.loopController ? a && this.loopController.setupFrameEvents(a) : this.loopController = new this.Controller(a), this.loopController.loop(b), this.loopController;
  }, plugin:function(a, b) {
    this.Controller.plugin(a, b);
  }};
}, {"./circular_buffer":2, "./controller":5, "./finger":7, "./frame":8, "./gesture":9, "./hand":10, "./interaction_box":12, "./pointable":14, "./protocol":15, "./ui":16, "./version.js":19, events:21, "gl-matrix":23, underscore:24}], 12:[function(a, d) {
  var k = a("gl-matrix").vec3;
  a = d.exports = function(a) {
    this.valid = !0;
    this.center = a.center;
    this.size = a.size;
    this.width = a.size[0];
    this.height = a.size[1];
    this.depth = a.size[2];
  };
  a.prototype.denormalizePoint = function(a) {
    return k.fromValues((a[0] - .5) * this.size[0] + this.center[0], (a[1] - .5) * this.size[1] + this.center[1], (a[2] - .5) * this.size[2] + this.center[2]);
  };
  a.prototype.normalizePoint = function(a, d) {
    a = k.fromValues((a[0] - this.center[0]) / this.size[0] + .5, (a[1] - this.center[1]) / this.size[1] + .5, (a[2] - this.center[2]) / this.size[2] + .5);
    return d && (a[0] = Math.min(Math.max(a[0], 0), 1), a[1] = Math.min(Math.max(a[1], 0), 1), a[2] = Math.min(Math.max(a[2], 0), 1)), a;
  };
  a.prototype.toString = function() {
    return "InteractionBox [ width:" + this.width + " | height:" + this.height + " | depth:" + this.depth + " ]";
  };
  a.Invalid = {valid:!1};
}, {"gl-matrix":23}], 13:[function(a, d) {
  a = d.exports = function(a) {
    this.steps = [];
    this.controller = a;
  };
  a.prototype.addStep = function(a) {
    this.steps.push(a);
  };
  a.prototype.run = function(a) {
    for (var b = this.steps.length, d = 0; d != b && a; d++) {
      a = this.steps[d](a);
    }
    return a;
  };
  a.prototype.removeStep = function(a) {
    a = this.steps.indexOf(a);
    if (-1 === a) {
      throw "Step not found in pipeline";
    }
    this.steps.splice(a, 1);
  };
  a.prototype.addWrappedStep = function(a, b) {
    var d = this.controller, f = function(e) {
      var f;
      var g = "frame" == a ? [e] : e[a + "s"] || [];
      var m = 0;
      for (f = g.length; f > m; m++) {
        b.call(d, g[m]);
      }
      return e;
    };
    return this.addStep(f), f;
  };
}, {}], 14:[function(a, d) {
  a = a("gl-matrix");
  d = (a.vec3, d.exports = function(a) {
    this.valid = !0;
    this.id = a.id;
    this.handId = a.handId;
    this.length = a.length;
    this.tool = a.tool;
    this.width = a.width;
    this.direction = a.direction;
    this.stabilizedTipPosition = a.stabilizedTipPosition;
    this.tipPosition = a.tipPosition;
    this.tipVelocity = a.tipVelocity;
    this.touchZone = a.touchZone;
    this.touchDistance = a.touchDistance;
    this.timeVisible = a.timeVisible;
  });
  d.prototype.toString = function() {
    return "Pointable [ id:" + this.id + " " + this.length + "mmx | width:" + this.width + "mm | direction:" + this.direction + " ]";
  };
  d.prototype.hand = function() {
    return this.frame.hand(this.handId);
  };
  d.Invalid = {valid:!1};
}, {"gl-matrix":23}], 15:[function(a, d, k) {
  var b = a("./frame"), g = (a("./hand"), a("./pointable"), a("./finger"), a("underscore")), f = a("events").EventEmitter, e = function(a) {
    this.type = a.type;
    this.state = a.state;
  };
  k.chooseProtocol = function(a) {
    switch(a.version) {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
        var b = r(a);
        b.sendBackground = function(a, c) {
          a.send(b.encode({background:c}));
        };
        b.sendFocused = function(a, c) {
          a.send(b.encode({focused:c}));
        };
        b.sendOptimizeHMD = function(a, c) {
          a.send(b.encode({optimizeHMD:c}));
        };
        break;
      default:
        throw "unrecognized version";
    }
    return b;
  };
  var r = k.JSONProtocol = function(a) {
    var d = function(a) {
      if (a.event) {
        return new e(a.event);
      }
      d.emit("beforeFrameCreated", a);
      var c = new b(a);
      return d.emit("afterFrameCreated", c, a), c;
    };
    return d.encode = function(a) {
      return JSON.stringify(a);
    }, d.version = a.version, d.serviceVersion = a.serviceVersion, d.versionLong = "Version " + a.version, d.type = "protocol", g.extend(d, f.prototype), d;
  };
}, {"./finger":7, "./frame":8, "./hand":10, "./pointable":14, events:21, underscore:24}], 16:[function(a, d, k) {
  k.UI = {Region:a("./ui/region"), Cursor:a("./ui/cursor")};
}, {"./ui/cursor":17, "./ui/region":18}], 17:[function(a, d) {
  d.exports = function() {
    return function(a) {
      var b = a.pointables.sort(function(a, b) {
        return a.z - b.z;
      })[0];
      return b && b.valid && (a.cursorPosition = b.tipPosition), a;
    };
  };
}, {}], 18:[function(a, d) {
  var k = a("events").EventEmitter;
  a = a("underscore");
  var b = d.exports = function(a, b) {
    this.start = new Vector(a);
    this.end = new Vector(b);
    this.enteredFrame = null;
  };
  b.prototype.hasPointables = function(a) {
    for (var b = 0; b != a.pointables.length; b++) {
      var e = a.pointables[b].tipPosition;
      if (e.x >= this.start.x && e.x <= this.end.x && e.y >= this.start.y && e.y <= this.end.y && e.z >= this.start.z && e.z <= this.end.z) {
        return !0;
      }
    }
    return !1;
  };
  b.prototype.listener = function(a) {
    var b = this;
    return a && a.nearThreshold && this.setupNearRegion(a.nearThreshold), function(a) {
      return b.updatePosition(a);
    };
  };
  b.prototype.clipper = function() {
    var a = this;
    return function(b) {
      return a.updatePosition(b), a.enteredFrame ? b : null;
    };
  };
  b.prototype.setupNearRegion = function(a) {
    a = this.nearRegion = new b([this.start.x - a, this.start.y - a, this.start.z - a], [this.end.x + a, this.end.y + a, this.end.z + a]);
    var d = this;
    a.on("enter", function(a) {
      d.emit("near", a);
    });
    a.on("exit", function(a) {
      d.emit("far", a);
    });
    d.on("exit", function(a) {
      d.emit("near", a);
    });
  };
  b.prototype.updatePosition = function(a) {
    return this.nearRegion && this.nearRegion.updatePosition(a), this.hasPointables(a) && null == this.enteredFrame ? (this.enteredFrame = a, this.emit("enter", this.enteredFrame)) : this.hasPointables(a) || null == this.enteredFrame || (this.enteredFrame = null, this.emit("exit", this.enteredFrame)), a;
  };
  b.prototype.normalize = function(a) {
    return new Vector([(a.x - this.start.x) / (this.end.x - this.start.x), (a.y - this.start.y) / (this.end.y - this.start.y), (a.z - this.start.z) / (this.end.z - this.start.z)]);
  };
  b.prototype.mapToXY = function(a, b, e) {
    a = this.normalize(a);
    var d = a.x, f = a.y;
    return 1 < d ? d = 1 : -1 > d && (d = -1), 1 < f ? f = 1 : -1 > f && (f = -1), [(d + 1) / 2 * b, (1 - f) / 2 * e, a.z];
  };
  a.extend(b.prototype, k.prototype);
}, {events:21, underscore:24}], 19:[function(a, d) {
  d.exports = {full:"0.6.4", major:0, minor:6, dot:4};
}, {}], 20:[function() {
}, {}], 21:[function(a, d, k) {
  a = a("__browserify_process");
  a.EventEmitter || (a.EventEmitter = function() {
  });
  k = k.EventEmitter = a.EventEmitter;
  var b = "function" == typeof Array.isArray ? Array.isArray : function(a) {
    return "[object Array]" === Object.prototype.toString.call(a);
  };
  k.prototype.setMaxListeners = function(a) {
    this._events || (this._events = {});
    this._events.maxListeners = a;
  };
  k.prototype.emit = function(a) {
    if ("error" === a && (!this._events || !this._events.error || b(this._events.error) && !this._events.error.length)) {
      throw arguments[1] instanceof Error ? arguments[1] : Error("Uncaught, unspecified 'error' event.");
    }
    if (!this._events) {
      return !1;
    }
    var d = this._events[a];
    if (!d) {
      return !1;
    }
    if ("function" == typeof d) {
      switch(arguments.length) {
        case 1:
          d.call(this);
          break;
        case 2:
          d.call(this, arguments[1]);
          break;
        case 3:
          d.call(this, arguments[1], arguments[2]);
          break;
        default:
          var e = Array.prototype.slice.call(arguments, 1);
          d.apply(this, e);
      }
      return !0;
    }
    if (b(d)) {
      e = Array.prototype.slice.call(arguments, 1);
      d = d.slice();
      for (var g = 0, k = d.length; k > g; g++) {
        d[g].apply(this, e);
      }
      return !0;
    }
    return !1;
  };
  k.prototype.addListener = function(a, d) {
    if ("function" != typeof d) {
      throw Error("addListener only takes instances of Function");
    }
    if (this._events || (this._events = {}), this.emit("newListener", a, d), this._events[a]) {
      if (b(this._events[a])) {
        if (!this._events[a].warned) {
          var e;
          (e = void 0 !== this._events.maxListeners ? this._events.maxListeners : 10) && 0 < e && this._events[a].length > e && (this._events[a].warned = !0, console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.", this._events[a].length), console.trace());
        }
        this._events[a].push(d);
      } else {
        this._events[a] = [this._events[a], d];
      }
    } else {
      this._events[a] = d;
    }
    return this;
  };
  k.prototype.on = k.prototype.addListener;
  k.prototype.once = function(a, b) {
    var e = this;
    return e.on(a, function q() {
      e.removeListener(a, q);
      b.apply(this, arguments);
    }), this;
  };
  k.prototype.removeListener = function(a, d) {
    if ("function" != typeof d) {
      throw Error("removeListener only takes instances of Function");
    }
    if (!this._events || !this._events[a]) {
      return this;
    }
    var e = this._events[a];
    if (b(e)) {
      a: {
        if (e.indexOf) {
          d = e.indexOf(d);
        } else {
          for (var f = 0; f < e.length; f++) {
            if (d === e[f]) {
              d = f;
              break a;
            }
          }
          d = -1;
        }
      }
      if (0 > d) {
        return this;
      }
      e.splice(d, 1);
      0 == e.length && delete this._events[a];
    } else {
      this._events[a] === d && delete this._events[a];
    }
    return this;
  };
  k.prototype.removeAllListeners = function(a) {
    return 0 === arguments.length ? (this._events = {}, this) : (a && this._events && this._events[a] && (this._events[a] = null), this);
  };
  k.prototype.listeners = function(a) {
    return this._events || (this._events = {}), this._events[a] || (this._events[a] = []), b(this._events[a]) || (this._events[a] = [this._events[a]]), this._events[a];
  };
  k.listenerCount = function(a, b) {
    return a._events && a._events[b] ? "function" == typeof a._events[b] ? 1 : a._events[b].length : 0;
  };
}, {__browserify_process:22}], 22:[function(a, d) {
  a = d.exports = {};
  a.nextTick = function() {
    if ("undefined" != typeof window && window.setImmediate) {
      return function(a) {
        return window.setImmediate(a);
      };
    }
    if ("undefined" != typeof window && window.postMessage && window.addEventListener) {
      var a = [];
      return window.addEventListener("message", function(b) {
        var d = b.source;
        (d === window || null === d) && "process-tick" === b.data && (b.stopPropagation(), 0 < a.length) && a.shift()();
      }, !0), function(b) {
        a.push(b);
        window.postMessage("process-tick", "*");
      };
    }
    return function(a) {
      setTimeout(a, 0);
    };
  }();
  a.title = "browser";
  a.browser = !0;
  a.env = {};
  a.argv = [];
  a.binding = function() {
    throw Error("process.binding is not supported");
  };
  a.cwd = function() {
    return "/";
  };
  a.chdir = function() {
    throw Error("process.chdir is not supported");
  };
}, {}], 23:[function(a, d, k) {
  !function(a) {
    var b;
    "undefined" == typeof k ? "function" == typeof define && "object" == typeof define.amd && define.amd ? (b = {}, define(function() {
      return b;
    })) : b = "undefined" != typeof window ? window : a : b = k;
    (function(a) {
      if (!b) {
        var b = 1E-6;
      }
      if (!d) {
        var d = "undefined" != typeof Float32Array ? Float32Array : Array;
      }
      if (!f) {
        var f = Math.random;
      }
      var g = {setMatrixArrayType:function(a) {
        d = a;
      }};
      "undefined" != typeof a && (a.glMatrix = g);
      var k = Math.PI / 180;
      g.toRadian = function(a) {
        return a * k;
      };
      var c = {create:function() {
        var a = new d(2);
        return a[0] = 0, a[1] = 0, a;
      }, clone:function(a) {
        var c = new d(2);
        return c[0] = a[0], c[1] = a[1], c;
      }, fromValues:function(a, c) {
        var b = new d(2);
        return b[0] = a, b[1] = c, b;
      }, copy:function(a, c) {
        return a[0] = c[0], a[1] = c[1], a;
      }, set:function(a, c, b) {
        return a[0] = c, a[1] = b, a;
      }, add:function(a, c, b) {
        return a[0] = c[0] + b[0], a[1] = c[1] + b[1], a;
      }, subtract:function(a, c, b) {
        return a[0] = c[0] - b[0], a[1] = c[1] - b[1], a;
      }};
      c.sub = c.subtract;
      c.multiply = function(a, c, b) {
        return a[0] = c[0] * b[0], a[1] = c[1] * b[1], a;
      };
      c.mul = c.multiply;
      c.divide = function(a, c, b) {
        return a[0] = c[0] / b[0], a[1] = c[1] / b[1], a;
      };
      c.div = c.divide;
      c.min = function(a, c, b) {
        return a[0] = Math.min(c[0], b[0]), a[1] = Math.min(c[1], b[1]), a;
      };
      c.max = function(a, c, b) {
        return a[0] = Math.max(c[0], b[0]), a[1] = Math.max(c[1], b[1]), a;
      };
      c.scale = function(a, c, b) {
        return a[0] = c[0] * b, a[1] = c[1] * b, a;
      };
      c.scaleAndAdd = function(a, c, b, e) {
        return a[0] = c[0] + b[0] * e, a[1] = c[1] + b[1] * e, a;
      };
      c.distance = function(a, c) {
        var b = c[0] - a[0];
        a = c[1] - a[1];
        return Math.sqrt(b * b + a * a);
      };
      c.dist = c.distance;
      c.squaredDistance = function(a, c) {
        var b = c[0] - a[0];
        a = c[1] - a[1];
        return b * b + a * a;
      };
      c.sqrDist = c.squaredDistance;
      c.length = function(a) {
        var c = a[0];
        a = a[1];
        return Math.sqrt(c * c + a * a);
      };
      c.len = c.length;
      c.squaredLength = function(a) {
        var c = a[0];
        a = a[1];
        return c * c + a * a;
      };
      c.sqrLen = c.squaredLength;
      c.negate = function(a, c) {
        return a[0] = -c[0], a[1] = -c[1], a;
      };
      c.normalize = function(a, c) {
        var b = c[0], e = c[1];
        b = b * b + e * e;
        return 0 < b && (b = 1 / Math.sqrt(b), a[0] = c[0] * b, a[1] = c[1] * b), a;
      };
      c.dot = function(a, c) {
        return a[0] * c[0] + a[1] * c[1];
      };
      c.cross = function(a, c, b) {
        c = c[0] * b[1] - c[1] * b[0];
        return a[0] = a[1] = 0, a[2] = c, a;
      };
      c.lerp = function(a, c, b, e) {
        var d = c[0];
        c = c[1];
        return a[0] = d + e * (b[0] - d), a[1] = c + e * (b[1] - c), a;
      };
      c.random = function(a, c) {
        c = c || 1;
        var b = 2 * f() * Math.PI;
        return a[0] = Math.cos(b) * c, a[1] = Math.sin(b) * c, a;
      };
      c.transformMat2 = function(a, c, b) {
        var e = c[0];
        c = c[1];
        return a[0] = b[0] * e + b[2] * c, a[1] = b[1] * e + b[3] * c, a;
      };
      c.transformMat2d = function(a, c, b) {
        var e = c[0];
        c = c[1];
        return a[0] = b[0] * e + b[2] * c + b[4], a[1] = b[1] * e + b[3] * c + b[5], a;
      };
      c.transformMat3 = function(a, c, b) {
        var e = c[0];
        c = c[1];
        return a[0] = b[0] * e + b[3] * c + b[6], a[1] = b[1] * e + b[4] * c + b[7], a;
      };
      c.transformMat4 = function(a, c, b) {
        var e = c[0];
        c = c[1];
        return a[0] = b[0] * e + b[4] * c + b[12], a[1] = b[1] * e + b[5] * c + b[13], a;
      };
      c.forEach = function() {
        var a = c.create();
        return function(c, b, e, d, f, h) {
          b || (b = 2);
          e || (e = 0);
          for (d = d ? Math.min(d * b + e, c.length) : c.length; d > e; e += b) {
            a[0] = c[e], a[1] = c[e + 1], f(a, a, h), c[e] = a[0], c[e + 1] = a[1];
          }
          return c;
        };
      }();
      c.str = function(a) {
        return "vec2(" + a[0] + ", " + a[1] + ")";
      };
      "undefined" != typeof a && (a.vec2 = c);
      var h = {create:function() {
        var a = new d(3);
        return a[0] = 0, a[1] = 0, a[2] = 0, a;
      }, clone:function(a) {
        var c = new d(3);
        return c[0] = a[0], c[1] = a[1], c[2] = a[2], c;
      }, fromValues:function(a, c, b) {
        var e = new d(3);
        return e[0] = a, e[1] = c, e[2] = b, e;
      }, copy:function(a, c) {
        return a[0] = c[0], a[1] = c[1], a[2] = c[2], a;
      }, set:function(a, c, b, e) {
        return a[0] = c, a[1] = b, a[2] = e, a;
      }, add:function(a, c, b) {
        return a[0] = c[0] + b[0], a[1] = c[1] + b[1], a[2] = c[2] + b[2], a;
      }, subtract:function(a, c, b) {
        return a[0] = c[0] - b[0], a[1] = c[1] - b[1], a[2] = c[2] - b[2], a;
      }};
      h.sub = h.subtract;
      h.multiply = function(a, c, b) {
        return a[0] = c[0] * b[0], a[1] = c[1] * b[1], a[2] = c[2] * b[2], a;
      };
      h.mul = h.multiply;
      h.divide = function(a, c, b) {
        return a[0] = c[0] / b[0], a[1] = c[1] / b[1], a[2] = c[2] / b[2], a;
      };
      h.div = h.divide;
      h.min = function(a, c, b) {
        return a[0] = Math.min(c[0], b[0]), a[1] = Math.min(c[1], b[1]), a[2] = Math.min(c[2], b[2]), a;
      };
      h.max = function(a, c, b) {
        return a[0] = Math.max(c[0], b[0]), a[1] = Math.max(c[1], b[1]), a[2] = Math.max(c[2], b[2]), a;
      };
      h.scale = function(a, c, b) {
        return a[0] = c[0] * b, a[1] = c[1] * b, a[2] = c[2] * b, a;
      };
      h.scaleAndAdd = function(a, c, b, e) {
        return a[0] = c[0] + b[0] * e, a[1] = c[1] + b[1] * e, a[2] = c[2] + b[2] * e, a;
      };
      h.distance = function(a, c) {
        var b = c[0] - a[0], e = c[1] - a[1];
        a = c[2] - a[2];
        return Math.sqrt(b * b + e * e + a * a);
      };
      h.dist = h.distance;
      h.squaredDistance = function(a, c) {
        var b = c[0] - a[0], e = c[1] - a[1];
        a = c[2] - a[2];
        return b * b + e * e + a * a;
      };
      h.sqrDist = h.squaredDistance;
      h.length = function(a) {
        var c = a[0], b = a[1];
        a = a[2];
        return Math.sqrt(c * c + b * b + a * a);
      };
      h.len = h.length;
      h.squaredLength = function(a) {
        var c = a[0], b = a[1];
        a = a[2];
        return c * c + b * b + a * a;
      };
      h.sqrLen = h.squaredLength;
      h.negate = function(a, c) {
        return a[0] = -c[0], a[1] = -c[1], a[2] = -c[2], a;
      };
      h.normalize = function(a, c) {
        var b = c[0], e = c[1], d = c[2];
        b = b * b + e * e + d * d;
        return 0 < b && (b = 1 / Math.sqrt(b), a[0] = c[0] * b, a[1] = c[1] * b, a[2] = c[2] * b), a;
      };
      h.dot = function(a, c) {
        return a[0] * c[0] + a[1] * c[1] + a[2] * c[2];
      };
      h.cross = function(a, c, b) {
        var e = c[0], d = c[1];
        c = c[2];
        var f = b[0], h = b[1];
        b = b[2];
        return a[0] = d * b - c * h, a[1] = c * f - e * b, a[2] = e * h - d * f, a;
      };
      h.lerp = function(a, c, b, e) {
        var d = c[0], f = c[1];
        c = c[2];
        return a[0] = d + e * (b[0] - d), a[1] = f + e * (b[1] - f), a[2] = c + e * (b[2] - c), a;
      };
      h.random = function(a, c) {
        c = c || 1;
        var b = 2 * f() * Math.PI, e = 2 * f() - 1, d = Math.sqrt(1 - e * e) * c;
        return a[0] = Math.cos(b) * d, a[1] = Math.sin(b) * d, a[2] = e * c, a;
      };
      h.transformMat4 = function(a, c, b) {
        var e = c[0], d = c[1];
        c = c[2];
        return a[0] = b[0] * e + b[4] * d + b[8] * c + b[12], a[1] = b[1] * e + b[5] * d + b[9] * c + b[13], a[2] = b[2] * e + b[6] * d + b[10] * c + b[14], a;
      };
      h.transformMat3 = function(a, c, b) {
        var e = c[0], d = c[1];
        c = c[2];
        return a[0] = e * b[0] + d * b[3] + c * b[6], a[1] = e * b[1] + d * b[4] + c * b[7], a[2] = e * b[2] + d * b[5] + c * b[8], a;
      };
      h.transformQuat = function(a, c, b) {
        var e = c[0], d = c[1], f = c[2];
        c = b[0];
        var h = b[1], g = b[2];
        b = b[3];
        var m = b * e + h * f - g * d, k = b * d + g * e - c * f, p = b * f + c * d - h * e;
        e = -c * e - h * d - g * f;
        return a[0] = m * b + e * -c + k * -g - p * -h, a[1] = k * b + e * -h + p * -c - m * -g, a[2] = p * b + e * -g + m * -h - k * -c, a;
      };
      h.rotateX = function(a, c, b, e) {
        var d = [], f = [];
        return d[0] = c[0] - b[0], d[1] = c[1] - b[1], d[2] = c[2] - b[2], f[0] = d[0], f[1] = d[1] * Math.cos(e) - d[2] * Math.sin(e), f[2] = d[1] * Math.sin(e) + d[2] * Math.cos(e), a[0] = f[0] + b[0], a[1] = f[1] + b[1], a[2] = f[2] + b[2], a;
      };
      h.rotateY = function(a, c, b, e) {
        var d = [], f = [];
        return d[0] = c[0] - b[0], d[1] = c[1] - b[1], d[2] = c[2] - b[2], f[0] = d[2] * Math.sin(e) + d[0] * Math.cos(e), f[1] = d[1], f[2] = d[2] * Math.cos(e) - d[0] * Math.sin(e), a[0] = f[0] + b[0], a[1] = f[1] + b[1], a[2] = f[2] + b[2], a;
      };
      h.rotateZ = function(a, c, b, e) {
        var d = [], f = [];
        return d[0] = c[0] - b[0], d[1] = c[1] - b[1], d[2] = c[2] - b[2], f[0] = d[0] * Math.cos(e) - d[1] * Math.sin(e), f[1] = d[0] * Math.sin(e) + d[1] * Math.cos(e), f[2] = d[2], a[0] = f[0] + b[0], a[1] = f[1] + b[1], a[2] = f[2] + b[2], a;
      };
      h.forEach = function() {
        var a = h.create();
        return function(c, b, e, d, f, h) {
          b || (b = 3);
          e || (e = 0);
          for (d = d ? Math.min(d * b + e, c.length) : c.length; d > e; e += b) {
            a[0] = c[e], a[1] = c[e + 1], a[2] = c[e + 2], f(a, a, h), c[e] = a[0], c[e + 1] = a[1], c[e + 2] = a[2];
          }
          return c;
        };
      }();
      h.str = function(a) {
        return "vec3(" + a[0] + ", " + a[1] + ", " + a[2] + ")";
      };
      "undefined" != typeof a && (a.vec3 = h);
      var t = {create:function() {
        var a = new d(4);
        return a[0] = 0, a[1] = 0, a[2] = 0, a[3] = 0, a;
      }, clone:function(a) {
        var c = new d(4);
        return c[0] = a[0], c[1] = a[1], c[2] = a[2], c[3] = a[3], c;
      }, fromValues:function(a, c, b, e) {
        var f = new d(4);
        return f[0] = a, f[1] = c, f[2] = b, f[3] = e, f;
      }, copy:function(a, c) {
        return a[0] = c[0], a[1] = c[1], a[2] = c[2], a[3] = c[3], a;
      }, set:function(a, c, b, e, d) {
        return a[0] = c, a[1] = b, a[2] = e, a[3] = d, a;
      }, add:function(a, c, b) {
        return a[0] = c[0] + b[0], a[1] = c[1] + b[1], a[2] = c[2] + b[2], a[3] = c[3] + b[3], a;
      }, subtract:function(a, c, b) {
        return a[0] = c[0] - b[0], a[1] = c[1] - b[1], a[2] = c[2] - b[2], a[3] = c[3] - b[3], a;
      }};
      t.sub = t.subtract;
      t.multiply = function(a, c, b) {
        return a[0] = c[0] * b[0], a[1] = c[1] * b[1], a[2] = c[2] * b[2], a[3] = c[3] * b[3], a;
      };
      t.mul = t.multiply;
      t.divide = function(a, c, b) {
        return a[0] = c[0] / b[0], a[1] = c[1] / b[1], a[2] = c[2] / b[2], a[3] = c[3] / b[3], a;
      };
      t.div = t.divide;
      t.min = function(a, c, b) {
        return a[0] = Math.min(c[0], b[0]), a[1] = Math.min(c[1], b[1]), a[2] = Math.min(c[2], b[2]), a[3] = Math.min(c[3], b[3]), a;
      };
      t.max = function(a, c, b) {
        return a[0] = Math.max(c[0], b[0]), a[1] = Math.max(c[1], b[1]), a[2] = Math.max(c[2], b[2]), a[3] = Math.max(c[3], b[3]), a;
      };
      t.scale = function(a, c, b) {
        return a[0] = c[0] * b, a[1] = c[1] * b, a[2] = c[2] * b, a[3] = c[3] * b, a;
      };
      t.scaleAndAdd = function(a, c, b, e) {
        return a[0] = c[0] + b[0] * e, a[1] = c[1] + b[1] * e, a[2] = c[2] + b[2] * e, a[3] = c[3] + b[3] * e, a;
      };
      t.distance = function(a, c) {
        var b = c[0] - a[0], e = c[1] - a[1], d = c[2] - a[2];
        a = c[3] - a[3];
        return Math.sqrt(b * b + e * e + d * d + a * a);
      };
      t.dist = t.distance;
      t.squaredDistance = function(a, c) {
        var b = c[0] - a[0], e = c[1] - a[1], d = c[2] - a[2];
        a = c[3] - a[3];
        return b * b + e * e + d * d + a * a;
      };
      t.sqrDist = t.squaredDistance;
      t.length = function(a) {
        var c = a[0], b = a[1], e = a[2];
        a = a[3];
        return Math.sqrt(c * c + b * b + e * e + a * a);
      };
      t.len = t.length;
      t.squaredLength = function(a) {
        var c = a[0], b = a[1], e = a[2];
        a = a[3];
        return c * c + b * b + e * e + a * a;
      };
      t.sqrLen = t.squaredLength;
      t.negate = function(a, c) {
        return a[0] = -c[0], a[1] = -c[1], a[2] = -c[2], a[3] = -c[3], a;
      };
      t.normalize = function(a, c) {
        var b = c[0], e = c[1], d = c[2], f = c[3];
        b = b * b + e * e + d * d + f * f;
        return 0 < b && (b = 1 / Math.sqrt(b), a[0] = c[0] * b, a[1] = c[1] * b, a[2] = c[2] * b, a[3] = c[3] * b), a;
      };
      t.dot = function(a, c) {
        return a[0] * c[0] + a[1] * c[1] + a[2] * c[2] + a[3] * c[3];
      };
      t.lerp = function(a, c, b, e) {
        var d = c[0], f = c[1], h = c[2];
        c = c[3];
        return a[0] = d + e * (b[0] - d), a[1] = f + e * (b[1] - f), a[2] = h + e * (b[2] - h), a[3] = c + e * (b[3] - c), a;
      };
      t.random = function(a, c) {
        return c = c || 1, a[0] = f(), a[1] = f(), a[2] = f(), a[3] = f(), t.normalize(a, a), t.scale(a, a, c), a;
      };
      t.transformMat4 = function(a, c, b) {
        var e = c[0], d = c[1], f = c[2];
        c = c[3];
        return a[0] = b[0] * e + b[4] * d + b[8] * f + b[12] * c, a[1] = b[1] * e + b[5] * d + b[9] * f + b[13] * c, a[2] = b[2] * e + b[6] * d + b[10] * f + b[14] * c, a[3] = b[3] * e + b[7] * d + b[11] * f + b[15] * c, a;
      };
      t.transformQuat = function(a, c, b) {
        var e = c[0], d = c[1], f = c[2];
        c = b[0];
        var h = b[1], g = b[2];
        b = b[3];
        var m = b * e + h * f - g * d, k = b * d + g * e - c * f, p = b * f + c * d - h * e;
        e = -c * e - h * d - g * f;
        return a[0] = m * b + e * -c + k * -g - p * -h, a[1] = k * b + e * -h + p * -c - m * -g, a[2] = p * b + e * -g + m * -h - k * -c, a;
      };
      t.forEach = function() {
        var a = t.create();
        return function(c, b, e, d, f, h) {
          b || (b = 4);
          e || (e = 0);
          for (d = d ? Math.min(d * b + e, c.length) : c.length; d > e; e += b) {
            a[0] = c[e], a[1] = c[e + 1], a[2] = c[e + 2], a[3] = c[e + 3], f(a, a, h), c[e] = a[0], c[e + 1] = a[1], c[e + 2] = a[2], c[e + 3] = a[3];
          }
          return c;
        };
      }();
      t.str = function(a) {
        return "vec4(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ")";
      };
      "undefined" != typeof a && (a.vec4 = t);
      g = {create:function() {
        var a = new d(4);
        return a[0] = 1, a[1] = 0, a[2] = 0, a[3] = 1, a;
      }, clone:function(a) {
        var c = new d(4);
        return c[0] = a[0], c[1] = a[1], c[2] = a[2], c[3] = a[3], c;
      }, copy:function(a, c) {
        return a[0] = c[0], a[1] = c[1], a[2] = c[2], a[3] = c[3], a;
      }, identity:function(a) {
        return a[0] = 1, a[1] = 0, a[2] = 0, a[3] = 1, a;
      }, transpose:function(a, c) {
        if (a === c) {
          var b = c[1];
          a[1] = c[2];
          a[2] = b;
        } else {
          a[0] = c[0], a[1] = c[2], a[2] = c[1], a[3] = c[3];
        }
        return a;
      }, invert:function(a, c) {
        var b = c[0], e = c[1], d = c[2];
        c = c[3];
        var f = b * c - d * e;
        return f ? (f = 1 / f, a[0] = c * f, a[1] = -e * f, a[2] = -d * f, a[3] = b * f, a) : null;
      }, adjoint:function(a, c) {
        var b = c[0];
        return a[0] = c[3], a[1] = -c[1], a[2] = -c[2], a[3] = b, a;
      }, determinant:function(a) {
        return a[0] * a[3] - a[2] * a[1];
      }, multiply:function(a, c, b) {
        var e = c[0], d = c[1], f = c[2];
        c = c[3];
        var h = b[0], g = b[1], m = b[2];
        b = b[3];
        return a[0] = e * h + f * g, a[1] = d * h + c * g, a[2] = e * m + f * b, a[3] = d * m + c * b, a;
      }};
      g.mul = g.multiply;
      g.rotate = function(a, c, b) {
        var e = c[0], d = c[1], f = c[2];
        c = c[3];
        var h = Math.sin(b);
        b = Math.cos(b);
        return a[0] = e * b + f * h, a[1] = d * b + c * h, a[2] = e * -h + f * b, a[3] = d * -h + c * b, a;
      };
      g.scale = function(a, c, b) {
        var e = c[1], d = c[2], f = c[3], h = b[0];
        b = b[1];
        return a[0] = c[0] * h, a[1] = e * h, a[2] = d * b, a[3] = f * b, a;
      };
      g.str = function(a) {
        return "mat2(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ")";
      };
      g.frob = function(a) {
        return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2));
      };
      g.LDU = function(a, c, b, e) {
        return a[2] = e[2] / e[0], b[0] = e[0], b[1] = e[1], b[3] = e[3] - a[2] * b[1], [a, c, b];
      };
      "undefined" != typeof a && (a.mat2 = g);
      g = {create:function() {
        var a = new d(6);
        return a[0] = 1, a[1] = 0, a[2] = 0, a[3] = 1, a[4] = 0, a[5] = 0, a;
      }, clone:function(a) {
        var c = new d(6);
        return c[0] = a[0], c[1] = a[1], c[2] = a[2], c[3] = a[3], c[4] = a[4], c[5] = a[5], c;
      }, copy:function(a, c) {
        return a[0] = c[0], a[1] = c[1], a[2] = c[2], a[3] = c[3], a[4] = c[4], a[5] = c[5], a;
      }, identity:function(a) {
        return a[0] = 1, a[1] = 0, a[2] = 0, a[3] = 1, a[4] = 0, a[5] = 0, a;
      }, invert:function(a, c) {
        var b = c[0], e = c[1], d = c[2], f = c[3], h = c[4];
        c = c[5];
        var g = b * f - e * d;
        return g ? (g = 1 / g, a[0] = f * g, a[1] = -e * g, a[2] = -d * g, a[3] = b * g, a[4] = (d * c - f * h) * g, a[5] = (e * h - b * c) * g, a) : null;
      }, determinant:function(a) {
        return a[0] * a[3] - a[1] * a[2];
      }, multiply:function(a, c, b) {
        var e = c[0], d = c[1], f = c[2], h = c[3], g = c[4];
        c = c[5];
        var m = b[0], k = b[1], n = b[2], p = b[3], r = b[4];
        b = b[5];
        return a[0] = e * m + f * k, a[1] = d * m + h * k, a[2] = e * n + f * p, a[3] = d * n + h * p, a[4] = e * r + f * b + g, a[5] = d * r + h * b + c, a;
      }};
      g.mul = g.multiply;
      g.rotate = function(a, c, b) {
        var e = c[0], d = c[1], f = c[2], h = c[3], g = c[4];
        c = c[5];
        var m = Math.sin(b);
        b = Math.cos(b);
        return a[0] = e * b + f * m, a[1] = d * b + h * m, a[2] = e * -m + f * b, a[3] = d * -m + h * b, a[4] = g, a[5] = c, a;
      };
      g.scale = function(a, c, b) {
        var e = c[1], d = c[2], f = c[3], h = c[4], g = c[5], m = b[0];
        b = b[1];
        return a[0] = c[0] * m, a[1] = e * m, a[2] = d * b, a[3] = f * b, a[4] = h, a[5] = g, a;
      };
      g.translate = function(a, c, b) {
        var e = c[0], d = c[1], f = c[2], h = c[3], g = c[4];
        c = c[5];
        var m = b[0];
        b = b[1];
        return a[0] = e, a[1] = d, a[2] = f, a[3] = h, a[4] = e * m + f * b + g, a[5] = d * m + h * b + c, a;
      };
      g.str = function(a) {
        return "mat2d(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ")";
      };
      g.frob = function(a) {
        return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1);
      };
      "undefined" != typeof a && (a.mat2d = g);
      var z = {create:function() {
        var a = new d(9);
        return a[0] = 1, a[1] = 0, a[2] = 0, a[3] = 0, a[4] = 1, a[5] = 0, a[6] = 0, a[7] = 0, a[8] = 1, a;
      }, fromMat4:function(a, c) {
        return a[0] = c[0], a[1] = c[1], a[2] = c[2], a[3] = c[4], a[4] = c[5], a[5] = c[6], a[6] = c[8], a[7] = c[9], a[8] = c[10], a;
      }, clone:function(a) {
        var c = new d(9);
        return c[0] = a[0], c[1] = a[1], c[2] = a[2], c[3] = a[3], c[4] = a[4], c[5] = a[5], c[6] = a[6], c[7] = a[7], c[8] = a[8], c;
      }, copy:function(a, c) {
        return a[0] = c[0], a[1] = c[1], a[2] = c[2], a[3] = c[3], a[4] = c[4], a[5] = c[5], a[6] = c[6], a[7] = c[7], a[8] = c[8], a;
      }, identity:function(a) {
        return a[0] = 1, a[1] = 0, a[2] = 0, a[3] = 0, a[4] = 1, a[5] = 0, a[6] = 0, a[7] = 0, a[8] = 1, a;
      }, transpose:function(a, c) {
        if (a === c) {
          var b = c[1], e = c[2], d = c[5];
          a[1] = c[3];
          a[2] = c[6];
          a[3] = b;
          a[5] = c[7];
          a[6] = e;
          a[7] = d;
        } else {
          a[0] = c[0], a[1] = c[3], a[2] = c[6], a[3] = c[1], a[4] = c[4], a[5] = c[7], a[6] = c[2], a[7] = c[5], a[8] = c[8];
        }
        return a;
      }, invert:function(a, c) {
        var b = c[0], e = c[1], d = c[2], f = c[3], h = c[4], g = c[5], m = c[6], k = c[7];
        c = c[8];
        var n = c * h - g * k, p = -c * f + g * m, r = k * f - h * m, q = b * n + e * p + d * r;
        return q ? (q = 1 / q, a[0] = n * q, a[1] = (-c * e + d * k) * q, a[2] = (g * e - d * h) * q, a[3] = p * q, a[4] = (c * b - d * m) * q, a[5] = (-g * b + d * f) * q, a[6] = r * q, a[7] = (-k * b + e * m) * q, a[8] = (h * b - e * f) * q, a) : null;
      }, adjoint:function(a, c) {
        var b = c[0], e = c[1], d = c[2], f = c[3], h = c[4], g = c[5], m = c[6], k = c[7];
        c = c[8];
        return a[0] = h * c - g * k, a[1] = d * k - e * c, a[2] = e * g - d * h, a[3] = g * m - f * c, a[4] = b * c - d * m, a[5] = d * f - b * g, a[6] = f * k - h * m, a[7] = e * m - b * k, a[8] = b * h - e * f, a;
      }, determinant:function(a) {
        var c = a[3], b = a[4], e = a[5], d = a[6], f = a[7], h = a[8];
        return a[0] * (h * b - e * f) + a[1] * (-h * c + e * d) + a[2] * (f * c - b * d);
      }, multiply:function(a, c, b) {
        var e = c[0], d = c[1], f = c[2], h = c[3], g = c[4], m = c[5], k = c[6], n = c[7];
        c = c[8];
        var p = b[0], r = b[1], q = b[2], t = b[3], v = b[4], w = b[5], z = b[6], y = b[7];
        b = b[8];
        return a[0] = p * e + r * h + q * k, a[1] = p * d + r * g + q * n, a[2] = p * f + r * m + q * c, a[3] = t * e + v * h + w * k, a[4] = t * d + v * g + w * n, a[5] = t * f + v * m + w * c, a[6] = z * e + y * h + b * k, a[7] = z * d + y * g + b * n, a[8] = z * f + y * m + b * c, a;
      }};
      z.mul = z.multiply;
      z.translate = function(a, c, b) {
        var e = c[0], d = c[1], f = c[2], h = c[3], g = c[4], m = c[5], k = c[6], n = c[7];
        c = c[8];
        var p = b[0];
        b = b[1];
        return a[0] = e, a[1] = d, a[2] = f, a[3] = h, a[4] = g, a[5] = m, a[6] = p * e + b * h + k, a[7] = p * d + b * g + n, a[8] = p * f + b * m + c, a;
      };
      z.rotate = function(a, c, b) {
        var e = c[0], d = c[1], f = c[2], h = c[3], g = c[4], m = c[5], k = c[6], n = c[7];
        c = c[8];
        var p = Math.sin(b);
        b = Math.cos(b);
        return a[0] = b * e + p * h, a[1] = b * d + p * g, a[2] = b * f + p * m, a[3] = b * h - p * e, a[4] = b * g - p * d, a[5] = b * m - p * f, a[6] = k, a[7] = n, a[8] = c, a;
      };
      z.scale = function(a, c, b) {
        var e = b[0];
        b = b[1];
        return a[0] = e * c[0], a[1] = e * c[1], a[2] = e * c[2], a[3] = b * c[3], a[4] = b * c[4], a[5] = b * c[5], a[6] = c[6], a[7] = c[7], a[8] = c[8], a;
      };
      z.fromMat2d = function(a, c) {
        return a[0] = c[0], a[1] = c[1], a[2] = 0, a[3] = c[2], a[4] = c[3], a[5] = 0, a[6] = c[4], a[7] = c[5], a[8] = 1, a;
      };
      z.fromQuat = function(a, c) {
        var b = c[0], e = c[1], d = c[2];
        c = c[3];
        var f = b + b, h = e + e, g = d + d;
        b *= f;
        var m = e * f;
        e *= h;
        var k = d * f, n = d * h;
        d *= g;
        f *= c;
        h *= c;
        c *= g;
        return a[0] = 1 - e - d, a[3] = m - c, a[6] = k + h, a[1] = m + c, a[4] = 1 - b - d, a[7] = n - f, a[2] = k - h, a[5] = n + f, a[8] = 1 - b - e, a;
      };
      z.normalFromMat4 = function(a, c) {
        var b = c[0], e = c[1], d = c[2], f = c[3], h = c[4], g = c[5], m = c[6], k = c[7], n = c[8], p = c[9], r = c[10], q = c[11], t = c[12], v = c[13], z = c[14];
        c = c[15];
        var y = b * g - e * h, x = b * m - d * h, Q = b * k - f * h, U = e * m - d * g, P = e * k - f * g, da = d * k - f * m, N = n * v - p * t, V = n * z - r * t;
        n = n * c - q * t;
        var ea = p * z - r * v;
        p = p * c - q * v;
        r = r * c - q * z;
        return (q = y * r - x * p + Q * ea + U * n - P * V + da * N) ? (q = 1 / q, a[0] = (g * r - m * p + k * ea) * q, a[1] = (m * n - h * r - k * V) * q, a[2] = (h * p - g * n + k * N) * q, a[3] = (d * p - e * r - f * ea) * q, a[4] = (b * r - d * n + f * V) * q, a[5] = (e * n - b * p - f * N) * q, a[6] = (v * da - z * P + c * U) * q, a[7] = (z * Q - t * da - c * x) * q, a[8] = (t * P - v * Q + c * y) * q, a) : null;
      };
      z.str = function(a) {
        return "mat3(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ", " + a[8] + ")";
      };
      z.frob = function(a) {
        return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2));
      };
      "undefined" != typeof a && (a.mat3 = z);
      var y = {create:function() {
        var a = new d(16);
        return a[0] = 1, a[1] = 0, a[2] = 0, a[3] = 0, a[4] = 0, a[5] = 1, a[6] = 0, a[7] = 0, a[8] = 0, a[9] = 0, a[10] = 1, a[11] = 0, a[12] = 0, a[13] = 0, a[14] = 0, a[15] = 1, a;
      }, clone:function(a) {
        var c = new d(16);
        return c[0] = a[0], c[1] = a[1], c[2] = a[2], c[3] = a[3], c[4] = a[4], c[5] = a[5], c[6] = a[6], c[7] = a[7], c[8] = a[8], c[9] = a[9], c[10] = a[10], c[11] = a[11], c[12] = a[12], c[13] = a[13], c[14] = a[14], c[15] = a[15], c;
      }, copy:function(a, c) {
        return a[0] = c[0], a[1] = c[1], a[2] = c[2], a[3] = c[3], a[4] = c[4], a[5] = c[5], a[6] = c[6], a[7] = c[7], a[8] = c[8], a[9] = c[9], a[10] = c[10], a[11] = c[11], a[12] = c[12], a[13] = c[13], a[14] = c[14], a[15] = c[15], a;
      }, identity:function(a) {
        return a[0] = 1, a[1] = 0, a[2] = 0, a[3] = 0, a[4] = 0, a[5] = 1, a[6] = 0, a[7] = 0, a[8] = 0, a[9] = 0, a[10] = 1, a[11] = 0, a[12] = 0, a[13] = 0, a[14] = 0, a[15] = 1, a;
      }, transpose:function(a, c) {
        if (a === c) {
          var b = c[1], e = c[2], d = c[3], f = c[6], h = c[7], g = c[11];
          a[1] = c[4];
          a[2] = c[8];
          a[3] = c[12];
          a[4] = b;
          a[6] = c[9];
          a[7] = c[13];
          a[8] = e;
          a[9] = f;
          a[11] = c[14];
          a[12] = d;
          a[13] = h;
          a[14] = g;
        } else {
          a[0] = c[0], a[1] = c[4], a[2] = c[8], a[3] = c[12], a[4] = c[1], a[5] = c[5], a[6] = c[9], a[7] = c[13], a[8] = c[2], a[9] = c[6], a[10] = c[10], a[11] = c[14], a[12] = c[3], a[13] = c[7], a[14] = c[11], a[15] = c[15];
        }
        return a;
      }, invert:function(a, c) {
        var b = c[0], e = c[1], d = c[2], f = c[3], h = c[4], g = c[5], m = c[6], k = c[7], n = c[8], p = c[9], r = c[10], q = c[11], t = c[12], v = c[13], z = c[14];
        c = c[15];
        var y = b * g - e * h, x = b * m - d * h, Q = b * k - f * h, U = e * m - d * g, P = e * k - f * g, da = d * k - f * m, N = n * v - p * t, V = n * z - r * t, ea = n * c - q * t, ha = p * z - r * v, W = p * c - q * v, la = r * c - q * z, X = y * la - x * W + Q * ha + U * ea - P * V + da * N;
        return X ? (X = 1 / X, a[0] = (g * la - m * W + k * ha) * X, a[1] = (d * W - e * la - f * ha) * X, a[2] = (v * da - z * P + c * U) * X, a[3] = (r * P - p * da - q * U) * X, a[4] = (m * ea - h * la - k * V) * X, a[5] = (b * la - d * ea + f * V) * X, a[6] = (z * Q - t * da - c * x) * X, a[7] = (n * da - r * Q + q * x) * X, a[8] = (h * W - g * ea + k * N) * X, a[9] = (e * ea - b * W - f * N) * X, a[10] = (t * P - v * Q + c * y) * X, a[11] = (p * Q - n * P - q * y) * X, a[12] = (g * V - h * ha - 
        m * N) * X, a[13] = (b * ha - e * V + d * N) * X, a[14] = (v * x - t * U - z * y) * X, a[15] = (n * U - p * x + r * y) * X, a) : null;
      }, adjoint:function(a, c) {
        var b = c[0], e = c[1], d = c[2], f = c[3], h = c[4], g = c[5], m = c[6], k = c[7], n = c[8], p = c[9], r = c[10], q = c[11], t = c[12], v = c[13], z = c[14];
        c = c[15];
        return a[0] = g * (r * c - q * z) - p * (m * c - k * z) + v * (m * q - k * r), a[1] = -(e * (r * c - q * z) - p * (d * c - f * z) + v * (d * q - f * r)), a[2] = e * (m * c - k * z) - g * (d * c - f * z) + v * (d * k - f * m), a[3] = -(e * (m * q - k * r) - g * (d * q - f * r) + p * (d * k - f * m)), a[4] = -(h * (r * c - q * z) - n * (m * c - k * z) + t * (m * q - k * r)), a[5] = b * (r * c - q * z) - n * (d * c - f * z) + t * (d * q - f * r), a[6] = -(b * (m * c - k * z) - h * (d * c - f * 
        z) + t * (d * k - f * m)), a[7] = b * (m * q - k * r) - h * (d * q - f * r) + n * (d * k - f * m), a[8] = h * (p * c - q * v) - n * (g * c - k * v) + t * (g * q - k * p), a[9] = -(b * (p * c - q * v) - n * (e * c - f * v) + t * (e * q - f * p)), a[10] = b * (g * c - k * v) - h * (e * c - f * v) + t * (e * k - f * g), a[11] = -(b * (g * q - k * p) - h * (e * q - f * p) + n * (e * k - f * g)), a[12] = -(h * (p * z - r * v) - n * (g * z - m * v) + t * (g * r - m * p)), a[13] = b * (p * z - r * 
        v) - n * (e * z - d * v) + t * (e * r - d * p), a[14] = -(b * (g * z - m * v) - h * (e * z - d * v) + t * (e * m - d * g)), a[15] = b * (g * r - m * p) - h * (e * r - d * p) + n * (e * m - d * g), a;
      }, determinant:function(a) {
        var c = a[0], b = a[1], e = a[2], d = a[3], f = a[4], h = a[5], g = a[6], m = a[7], k = a[8], n = a[9], p = a[10], r = a[11], q = a[12], t = a[13], z = a[14];
        a = a[15];
        return (c * h - b * f) * (p * a - r * z) - (c * g - e * f) * (n * a - r * t) + (c * m - d * f) * (n * z - p * t) + (b * g - e * h) * (k * a - r * q) - (b * m - d * h) * (k * z - p * q) + (e * m - d * g) * (k * t - n * q);
      }, multiply:function(a, c, b) {
        var e = c[0], d = c[1], f = c[2], h = c[3], g = c[4], m = c[5], k = c[6], n = c[7], p = c[8], r = c[9], q = c[10], t = c[11], v = c[12], w = c[13], z = c[14];
        c = c[15];
        var y = b[0], x = b[1], U = b[2], P = b[3];
        return a[0] = y * e + x * g + U * p + P * v, a[1] = y * d + x * m + U * r + P * w, a[2] = y * f + x * k + U * q + P * z, a[3] = y * h + x * n + U * t + P * c, y = b[4], x = b[5], U = b[6], P = b[7], a[4] = y * e + x * g + U * p + P * v, a[5] = y * d + x * m + U * r + P * w, a[6] = y * f + x * k + U * q + P * z, a[7] = y * h + x * n + U * t + P * c, y = b[8], x = b[9], U = b[10], P = b[11], a[8] = y * e + x * g + U * p + P * v, a[9] = y * d + x * m + U * r + P * w, a[10] = y * f + x * k + 
        U * q + P * z, a[11] = y * h + x * n + U * t + P * c, y = b[12], x = b[13], U = b[14], P = b[15], a[12] = y * e + x * g + U * p + P * v, a[13] = y * d + x * m + U * r + P * w, a[14] = y * f + x * k + U * q + P * z, a[15] = y * h + x * n + U * t + P * c, a;
      }};
      y.mul = y.multiply;
      y.translate = function(a, c, b) {
        var e, d, f, h, g, m, k, n, p, r, q, t, v = b[0], w = b[1];
        b = b[2];
        return c === a ? (a[12] = c[0] * v + c[4] * w + c[8] * b + c[12], a[13] = c[1] * v + c[5] * w + c[9] * b + c[13], a[14] = c[2] * v + c[6] * w + c[10] * b + c[14], a[15] = c[3] * v + c[7] * w + c[11] * b + c[15]) : (e = c[0], d = c[1], f = c[2], h = c[3], g = c[4], m = c[5], k = c[6], n = c[7], p = c[8], r = c[9], q = c[10], t = c[11], a[0] = e, a[1] = d, a[2] = f, a[3] = h, a[4] = g, a[5] = m, a[6] = k, a[7] = n, a[8] = p, a[9] = r, a[10] = q, a[11] = t, a[12] = e * v + g * w + p * b + c[12], 
        a[13] = d * v + m * w + r * b + c[13], a[14] = f * v + k * w + q * b + c[14], a[15] = h * v + n * w + t * b + c[15]), a;
      };
      y.scale = function(a, c, b) {
        var e = b[0], d = b[1];
        b = b[2];
        return a[0] = c[0] * e, a[1] = c[1] * e, a[2] = c[2] * e, a[3] = c[3] * e, a[4] = c[4] * d, a[5] = c[5] * d, a[6] = c[6] * d, a[7] = c[7] * d, a[8] = c[8] * b, a[9] = c[9] * b, a[10] = c[10] * b, a[11] = c[11] * b, a[12] = c[12], a[13] = c[13], a[14] = c[14], a[15] = c[15], a;
      };
      y.rotate = function(a, c, e, d) {
        var f, h, g, m, k, n, p, r, q, t, v, w, z, y, x, C, U, P, da, N, V, ea, ha, W, la = d[0], X = d[1];
        d = d[2];
        var ka = Math.sqrt(la * la + X * X + d * d);
        return Math.abs(ka) < b ? null : (ka = 1 / ka, la *= ka, X *= ka, d *= ka, f = Math.sin(e), h = Math.cos(e), g = 1 - h, m = c[0], k = c[1], n = c[2], p = c[3], r = c[4], q = c[5], t = c[6], v = c[7], w = c[8], z = c[9], y = c[10], x = c[11], C = la * la * g + h, U = X * la * g + d * f, P = d * la * g - X * f, da = la * X * g - d * f, N = X * X * g + h, V = d * X * g + la * f, ea = la * d * g + X * f, ha = X * d * g - la * f, W = d * d * g + h, a[0] = m * C + r * U + w * P, a[1] = k * C + 
        q * U + z * P, a[2] = n * C + t * U + y * P, a[3] = p * C + v * U + x * P, a[4] = m * da + r * N + w * V, a[5] = k * da + q * N + z * V, a[6] = n * da + t * N + y * V, a[7] = p * da + v * N + x * V, a[8] = m * ea + r * ha + w * W, a[9] = k * ea + q * ha + z * W, a[10] = n * ea + t * ha + y * W, a[11] = p * ea + v * ha + x * W, c !== a && (a[12] = c[12], a[13] = c[13], a[14] = c[14], a[15] = c[15]), a);
      };
      y.rotateX = function(a, c, b) {
        var e = Math.sin(b);
        b = Math.cos(b);
        var d = c[4], f = c[5], h = c[6], g = c[7], m = c[8], k = c[9], n = c[10], r = c[11];
        return c !== a && (a[0] = c[0], a[1] = c[1], a[2] = c[2], a[3] = c[3], a[12] = c[12], a[13] = c[13], a[14] = c[14], a[15] = c[15]), a[4] = d * b + m * e, a[5] = f * b + k * e, a[6] = h * b + n * e, a[7] = g * b + r * e, a[8] = m * b - d * e, a[9] = k * b - f * e, a[10] = n * b - h * e, a[11] = r * b - g * e, a;
      };
      y.rotateY = function(a, c, b) {
        var e = Math.sin(b);
        b = Math.cos(b);
        var d = c[0], f = c[1], h = c[2], g = c[3], m = c[8], k = c[9], n = c[10], r = c[11];
        return c !== a && (a[4] = c[4], a[5] = c[5], a[6] = c[6], a[7] = c[7], a[12] = c[12], a[13] = c[13], a[14] = c[14], a[15] = c[15]), a[0] = d * b - m * e, a[1] = f * b - k * e, a[2] = h * b - n * e, a[3] = g * b - r * e, a[8] = d * e + m * b, a[9] = f * e + k * b, a[10] = h * e + n * b, a[11] = g * e + r * b, a;
      };
      y.rotateZ = function(a, c, b) {
        var e = Math.sin(b);
        b = Math.cos(b);
        var d = c[0], f = c[1], h = c[2], g = c[3], m = c[4], k = c[5], n = c[6], r = c[7];
        return c !== a && (a[8] = c[8], a[9] = c[9], a[10] = c[10], a[11] = c[11], a[12] = c[12], a[13] = c[13], a[14] = c[14], a[15] = c[15]), a[0] = d * b + m * e, a[1] = f * b + k * e, a[2] = h * b + n * e, a[3] = g * b + r * e, a[4] = m * b - d * e, a[5] = k * b - f * e, a[6] = n * b - h * e, a[7] = r * b - g * e, a;
      };
      y.fromRotationTranslation = function(a, c, b) {
        var e = c[0], d = c[1], f = c[2], h = c[3], g = e + e, m = d + d, k = f + f;
        c = e * g;
        var n = e * m;
        e *= k;
        var r = d * m;
        d *= k;
        f *= k;
        g *= h;
        m *= h;
        h *= k;
        return a[0] = 1 - (r + f), a[1] = n + h, a[2] = e - m, a[3] = 0, a[4] = n - h, a[5] = 1 - (c + f), a[6] = d + g, a[7] = 0, a[8] = e + m, a[9] = d - g, a[10] = 1 - (c + r), a[11] = 0, a[12] = b[0], a[13] = b[1], a[14] = b[2], a[15] = 1, a;
      };
      y.fromQuat = function(a, c) {
        var b = c[0], e = c[1], d = c[2];
        c = c[3];
        var f = b + b, h = e + e, g = d + d;
        b *= f;
        var m = e * f;
        e *= h;
        var k = d * f, n = d * h;
        d *= g;
        f *= c;
        h *= c;
        c *= g;
        return a[0] = 1 - e - d, a[1] = m + c, a[2] = k - h, a[3] = 0, a[4] = m - c, a[5] = 1 - b - d, a[6] = n + f, a[7] = 0, a[8] = k + h, a[9] = n - f, a[10] = 1 - b - e, a[11] = 0, a[12] = 0, a[13] = 0, a[14] = 0, a[15] = 1, a;
      };
      y.frustum = function(a, c, b, e, d, f, h) {
        var g = 1 / (b - c), m = 1 / (d - e), k = 1 / (f - h);
        return a[0] = 2 * f * g, a[1] = 0, a[2] = 0, a[3] = 0, a[4] = 0, a[5] = 2 * f * m, a[6] = 0, a[7] = 0, a[8] = (b + c) * g, a[9] = (d + e) * m, a[10] = (h + f) * k, a[11] = -1, a[12] = 0, a[13] = 0, a[14] = h * f * 2 * k, a[15] = 0, a;
      };
      y.perspective = function(a, c, b, e, d) {
        c = 1 / Math.tan(c / 2);
        var f = 1 / (e - d);
        return a[0] = c / b, a[1] = 0, a[2] = 0, a[3] = 0, a[4] = 0, a[5] = c, a[6] = 0, a[7] = 0, a[8] = 0, a[9] = 0, a[10] = (d + e) * f, a[11] = -1, a[12] = 0, a[13] = 0, a[14] = 2 * d * e * f, a[15] = 0, a;
      };
      y.ortho = function(a, c, b, e, d, f, h) {
        var g = 1 / (c - b), m = 1 / (e - d), k = 1 / (f - h);
        return a[0] = -2 * g, a[1] = 0, a[2] = 0, a[3] = 0, a[4] = 0, a[5] = -2 * m, a[6] = 0, a[7] = 0, a[8] = 0, a[9] = 0, a[10] = 2 * k, a[11] = 0, a[12] = (c + b) * g, a[13] = (d + e) * m, a[14] = (h + f) * k, a[15] = 1, a;
      };
      y.lookAt = function(a, c, e, d) {
        var f, h, g, m, k, n, r, q, p, t, v = c[0], w = c[1];
        c = c[2];
        var z = d[0], x = d[1];
        d = d[2];
        var C = e[0], Q = e[1];
        e = e[2];
        return Math.abs(v - C) < b && Math.abs(w - Q) < b && Math.abs(c - e) < b ? y.identity(a) : (r = v - C, q = w - Q, p = c - e, t = 1 / Math.sqrt(r * r + q * q + p * p), r *= t, q *= t, p *= t, f = x * p - d * q, h = d * r - z * p, g = z * q - x * r, t = Math.sqrt(f * f + h * h + g * g), t ? (t = 1 / t, f *= t, h *= t, g *= t) : (f = 0, h = 0, g = 0), m = q * g - p * h, k = p * f - r * g, n = r * h - q * f, t = Math.sqrt(m * m + k * k + n * n), t ? (t = 1 / t, m *= t, k *= t, n *= t) : (m = 
        0, k = 0, n = 0), a[0] = f, a[1] = m, a[2] = r, a[3] = 0, a[4] = h, a[5] = k, a[6] = q, a[7] = 0, a[8] = g, a[9] = n, a[10] = p, a[11] = 0, a[12] = -(f * v + h * w + g * c), a[13] = -(m * v + k * w + n * c), a[14] = -(r * v + q * w + p * c), a[15] = 1, a);
      };
      y.str = function(a) {
        return "mat4(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ", " + a[8] + ", " + a[9] + ", " + a[10] + ", " + a[11] + ", " + a[12] + ", " + a[13] + ", " + a[14] + ", " + a[15] + ")";
      };
      y.frob = function(a) {
        return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2));
      };
      "undefined" != typeof a && (a.mat4 = y);
      var x = {create:function() {
        var a = new d(4);
        return a[0] = 0, a[1] = 0, a[2] = 0, a[3] = 1, a;
      }};
      x.rotationTo = function() {
        var a = h.create(), c = h.fromValues(1, 0, 0), b = h.fromValues(0, 1, 0);
        return function(e, d, f) {
          var g = h.dot(d, f);
          return -.999999 > g ? (h.cross(a, c, d), 1E-6 > h.length(a) && h.cross(a, b, d), h.normalize(a, a), x.setAxisAngle(e, a, Math.PI), e) : .999999 < g ? (e[0] = 0, e[1] = 0, e[2] = 0, e[3] = 1, e) : (h.cross(a, d, f), e[0] = a[0], e[1] = a[1], e[2] = a[2], e[3] = 1 + g, x.normalize(e, e));
        };
      }();
      x.setAxes = function() {
        var a = z.create();
        return function(c, b, e, d) {
          return a[0] = e[0], a[3] = e[1], a[6] = e[2], a[1] = d[0], a[4] = d[1], a[7] = d[2], a[2] = -b[0], a[5] = -b[1], a[8] = -b[2], x.normalize(c, x.fromMat3(c, a));
        };
      }();
      x.clone = t.clone;
      x.fromValues = t.fromValues;
      x.copy = t.copy;
      x.set = t.set;
      x.identity = function(a) {
        return a[0] = 0, a[1] = 0, a[2] = 0, a[3] = 1, a;
      };
      x.setAxisAngle = function(a, c, b) {
        b *= .5;
        var e = Math.sin(b);
        return a[0] = e * c[0], a[1] = e * c[1], a[2] = e * c[2], a[3] = Math.cos(b), a;
      };
      x.add = t.add;
      x.multiply = function(a, c, b) {
        var e = c[0], d = c[1], f = c[2];
        c = c[3];
        var h = b[0], g = b[1], m = b[2];
        b = b[3];
        return a[0] = e * b + c * h + d * m - f * g, a[1] = d * b + c * g + f * h - e * m, a[2] = f * b + c * m + e * g - d * h, a[3] = c * b - e * h - d * g - f * m, a;
      };
      x.mul = x.multiply;
      x.scale = t.scale;
      x.rotateX = function(a, c, b) {
        b *= .5;
        var e = c[0], d = c[1], f = c[2];
        c = c[3];
        var h = Math.sin(b);
        b = Math.cos(b);
        return a[0] = e * b + c * h, a[1] = d * b + f * h, a[2] = f * b - d * h, a[3] = c * b - e * h, a;
      };
      x.rotateY = function(a, c, b) {
        b *= .5;
        var e = c[0], d = c[1], f = c[2];
        c = c[3];
        var h = Math.sin(b);
        b = Math.cos(b);
        return a[0] = e * b - f * h, a[1] = d * b + c * h, a[2] = f * b + e * h, a[3] = c * b - d * h, a;
      };
      x.rotateZ = function(a, c, b) {
        b *= .5;
        var e = c[0], d = c[1], f = c[2];
        c = c[3];
        var h = Math.sin(b);
        b = Math.cos(b);
        return a[0] = e * b + d * h, a[1] = d * b - e * h, a[2] = f * b + c * h, a[3] = c * b - f * h, a;
      };
      x.calculateW = function(a, c) {
        var b = c[0], e = c[1];
        c = c[2];
        return a[0] = b, a[1] = e, a[2] = c, a[3] = -Math.sqrt(Math.abs(1 - b * b - e * e - c * c)), a;
      };
      x.dot = t.dot;
      x.lerp = t.lerp;
      x.slerp = function(a, c, b, e) {
        var d, f, h, g, m, k = c[0], n = c[1], r = c[2];
        c = c[3];
        var q = b[0], p = b[1], t = b[2];
        b = b[3];
        return f = k * q + n * p + r * t + c * b, 0 > f && (f = -f, q = -q, p = -p, t = -t, b = -b), 1E-6 < 1 - f ? (d = Math.acos(f), h = Math.sin(d), g = Math.sin((1 - e) * d) / h, m = Math.sin(e * d) / h) : (g = 1 - e, m = e), a[0] = g * k + m * q, a[1] = g * n + m * p, a[2] = g * r + m * t, a[3] = g * c + m * b, a;
      };
      x.invert = function(a, c) {
        var b = c[0], e = c[1], d = c[2];
        c = c[3];
        var f = b * b + e * e + d * d + c * c;
        f = f ? 1 / f : 0;
        return a[0] = -b * f, a[1] = -e * f, a[2] = -d * f, a[3] = c * f, a;
      };
      x.conjugate = function(a, c) {
        return a[0] = -c[0], a[1] = -c[1], a[2] = -c[2], a[3] = c[3], a;
      };
      x.length = t.length;
      x.len = x.length;
      x.squaredLength = t.squaredLength;
      x.sqrLen = x.squaredLength;
      x.normalize = t.normalize;
      x.fromMat3 = function(a, c) {
        var b = c[0] + c[4] + c[8];
        if (0 < b) {
          b = Math.sqrt(b + 1), a[3] = .5 * b, b = .5 / b, a[0] = (c[7] - c[5]) * b, a[1] = (c[2] - c[6]) * b, a[2] = (c[3] - c[1]) * b;
        } else {
          var e = 0;
          c[4] > c[0] && (e = 1);
          c[8] > c[3 * e + e] && (e = 2);
          var d = (e + 1) % 3, f = (e + 2) % 3;
          b = Math.sqrt(c[3 * e + e] - c[3 * d + d] - c[3 * f + f] + 1);
          a[e] = .5 * b;
          b = .5 / b;
          a[3] = (c[3 * f + d] - c[3 * d + f]) * b;
          a[d] = (c[3 * d + e] + c[3 * e + d]) * b;
          a[f] = (c[3 * f + e] + c[3 * e + f]) * b;
        }
        return a;
      };
      x.str = function(a) {
        return "quat(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ")";
      };
      "undefined" != typeof a && (a.quat = x);
    })(b);
  }(this);
}, {}], 24:[function(a, d, k) {
  (function() {
    var a = this, g = a._, f = {}, e = Array.prototype, r = Object.prototype, q = e.push, m = e.slice, n = e.concat, c = r.toString, h = r.hasOwnProperty, t = e.forEach, z = e.map, y = e.reduce, x = e.reduceRight, p = e.filter, v = e.every, w = e.some, C = e.indexOf, A = e.lastIndexOf;
    r = Array.isArray;
    var D = Object.keys, F = Function.prototype.bind, B = function(a) {
      return a instanceof B ? a : this instanceof B ? void(this._wrapped = a) : new B(a);
    };
    "undefined" != typeof k ? ("undefined" != typeof d && d.exports && (k = d.exports = B), k._ = B) : a._ = B;
    B.VERSION = "1.4.4";
    var E = B.each = B.forEach = function(a, c, b) {
      if (null != a) {
        if (t && a.forEach === t) {
          a.forEach(c, b);
        } else {
          if (a.length === +a.length) {
            for (var e = 0, d = a.length; d > e && c.call(b, a[e], e, a) !== f; e++) {
            }
          } else {
            for (e in a) {
              if (B.has(a, e) && c.call(b, a[e], e, a) === f) {
                break;
              }
            }
          }
        }
      }
    };
    B.map = B.collect = function(a, c, b) {
      var e = [];
      return null == a ? e : z && a.map === z ? a.map(c, b) : (E(a, function(a, d, f) {
        e[e.length] = c.call(b, a, d, f);
      }), e);
    };
    B.reduce = B.foldl = B.inject = function(a, c, b, e) {
      var d = 2 < arguments.length;
      if (null == a && (a = []), y && a.reduce === y) {
        return e && (c = B.bind(c, e)), d ? a.reduce(c, b) : a.reduce(c);
      }
      if (E(a, function(a, f, h) {
        d ? b = c.call(e, b, a, f, h) : (b = a, d = !0);
      }), !d) {
        throw new TypeError("Reduce of empty array with no initial value");
      }
      return b;
    };
    B.reduceRight = B.foldr = function(a, c, b, e) {
      var d = 2 < arguments.length;
      if (null == a && (a = []), x && a.reduceRight === x) {
        return e && (c = B.bind(c, e)), d ? a.reduceRight(c, b) : a.reduceRight(c);
      }
      var f = a.length;
      if (f !== +f) {
        var h = B.keys(a);
        f = h.length;
      }
      if (E(a, function(g, m, k) {
        m = h ? h[--f] : --f;
        d ? b = c.call(e, b, a[m], m, k) : (b = a[m], d = !0);
      }), !d) {
        throw new TypeError("Reduce of empty array with no initial value");
      }
      return b;
    };
    B.find = B.detect = function(a, c, b) {
      var e;
      return I(a, function(a, d, f) {
        return c.call(b, a, d, f) ? (e = a, !0) : void 0;
      }), e;
    };
    B.filter = B.select = function(a, c, b) {
      var e = [];
      return null == a ? e : p && a.filter === p ? a.filter(c, b) : (E(a, function(a, d, f) {
        c.call(b, a, d, f) && (e[e.length] = a);
      }), e);
    };
    B.reject = function(a, c, b) {
      return B.filter(a, function(a, e, d) {
        return !c.call(b, a, e, d);
      }, b);
    };
    B.every = B.all = function(a, c, b) {
      c || (c = B.identity);
      var e = !0;
      return null == a ? e : v && a.every === v ? a.every(c, b) : (E(a, function(a, d, h) {
        return (e = e && c.call(b, a, d, h)) ? void 0 : f;
      }), !!e);
    };
    var I = B.some = B.any = function(a, c, b) {
      c || (c = B.identity);
      var e = !1;
      return null == a ? e : w && a.some === w ? a.some(c, b) : (E(a, function(a, d, h) {
        return e || (e = c.call(b, a, d, h)) ? f : void 0;
      }), !!e);
    };
    B.contains = B.include = function(a, c) {
      return null == a ? !1 : C && a.indexOf === C ? -1 != a.indexOf(c) : I(a, function(a) {
        return a === c;
      });
    };
    B.invoke = function(a, c) {
      var b = m.call(arguments, 2), e = B.isFunction(c);
      return B.map(a, function(a) {
        return (e ? c : a[c]).apply(a, b);
      });
    };
    B.pluck = function(a, c) {
      return B.map(a, function(a) {
        return a[c];
      });
    };
    B.where = function(a, c, b) {
      return B.isEmpty(c) ? b ? null : [] : B[b ? "find" : "filter"](a, function(a) {
        for (var b in c) {
          if (c[b] !== a[b]) {
            return !1;
          }
        }
        return !0;
      });
    };
    B.findWhere = function(a, c) {
      return B.where(a, c, !0);
    };
    B.max = function(a, c, b) {
      if (!c && B.isArray(a) && a[0] === +a[0] && 65535 > a.length) {
        return Math.max.apply(Math, a);
      }
      if (!c && B.isEmpty(a)) {
        return -1 / 0;
      }
      var e = {computed:-1 / 0, value:-1 / 0};
      return E(a, function(a, d, f) {
        d = c ? c.call(b, a, d, f) : a;
        d >= e.computed && (e = {value:a, computed:d});
      }), e.value;
    };
    B.min = function(a, c, b) {
      if (!c && B.isArray(a) && a[0] === +a[0] && 65535 > a.length) {
        return Math.min.apply(Math, a);
      }
      if (!c && B.isEmpty(a)) {
        return 1 / 0;
      }
      var e = {computed:1 / 0, value:1 / 0};
      return E(a, function(a, d, f) {
        d = c ? c.call(b, a, d, f) : a;
        d < e.computed && (e = {value:a, computed:d});
      }), e.value;
    };
    B.shuffle = function(a) {
      var c, b = 0, e = [];
      return E(a, function(a) {
        c = B.random(b++);
        e[b - 1] = e[c];
        e[c] = a;
      }), e;
    };
    var K = function(a) {
      return B.isFunction(a) ? a : function(c) {
        return c[a];
      };
    };
    B.sortBy = function(a, c, b) {
      var e = K(c);
      return B.pluck(B.map(a, function(a, c, d) {
        return {value:a, index:c, criteria:e.call(b, a, c, d)};
      }).sort(function(a, c) {
        var b = a.criteria, e = c.criteria;
        if (b !== e) {
          if (b > e || void 0 === b) {
            return 1;
          }
          if (e > b || void 0 === e) {
            return -1;
          }
        }
        return a.index < c.index ? -1 : 1;
      }), "value");
    };
    var J = function(a, c, b, e) {
      var d = {}, f = K(c || B.identity);
      return E(a, function(c, h) {
        h = f.call(b, c, h, a);
        e(d, h, c);
      }), d;
    };
    B.groupBy = function(a, c, b) {
      return J(a, c, b, function(a, c, b) {
        (B.has(a, c) ? a[c] : a[c] = []).push(b);
      });
    };
    B.countBy = function(a, c, b) {
      return J(a, c, b, function(a, c) {
        B.has(a, c) || (a[c] = 0);
        a[c]++;
      });
    };
    B.sortedIndex = function(a, c, b, e) {
      b = null == b ? B.identity : K(b);
      c = b.call(e, c);
      for (var d = 0, f = a.length; f > d;) {
        var h = d + f >>> 1;
        b.call(e, a[h]) < c ? d = h + 1 : f = h;
      }
      return d;
    };
    B.toArray = function(a) {
      return a ? B.isArray(a) ? m.call(a) : a.length === +a.length ? B.map(a, B.identity) : B.values(a) : [];
    };
    B.size = function(a) {
      return null == a ? 0 : a.length === +a.length ? a.length : B.keys(a).length;
    };
    B.first = B.head = B.take = function(a, c, b) {
      return null == a ? void 0 : null == c || b ? a[0] : m.call(a, 0, c);
    };
    B.initial = function(a, c, b) {
      return m.call(a, 0, a.length - (null == c || b ? 1 : c));
    };
    B.last = function(a, c, b) {
      return null == a ? void 0 : null == c || b ? a[a.length - 1] : m.call(a, Math.max(a.length - c, 0));
    };
    B.rest = B.tail = B.drop = function(a, c, b) {
      return m.call(a, null == c || b ? 1 : c);
    };
    B.compact = function(a) {
      return B.filter(a, B.identity);
    };
    var R = function(a, c, b) {
      return E(a, function(a) {
        B.isArray(a) ? c ? q.apply(b, a) : R(a, c, b) : b.push(a);
      }), b;
    };
    B.flatten = function(a, c) {
      return R(a, c, []);
    };
    B.without = function(a) {
      return B.difference(a, m.call(arguments, 1));
    };
    B.uniq = B.unique = function(a, c, b, e) {
      B.isFunction(c) && (e = b, b = c, c = !1);
      b = b ? B.map(a, b, e) : a;
      var d = [], f = [];
      return E(b, function(b, e) {
        (c ? e && f[f.length - 1] === b : B.contains(f, b)) || (f.push(b), d.push(a[e]));
      }), d;
    };
    B.union = function() {
      return B.uniq(n.apply(e, arguments));
    };
    B.intersection = function(a) {
      var c = m.call(arguments, 1);
      return B.filter(B.uniq(a), function(a) {
        return B.every(c, function(c) {
          return 0 <= B.indexOf(c, a);
        });
      });
    };
    B.difference = function(a) {
      var c = n.apply(e, m.call(arguments, 1));
      return B.filter(a, function(a) {
        return !B.contains(c, a);
      });
    };
    B.zip = function() {
      for (var a = m.call(arguments), c = B.max(B.pluck(a, "length")), b = Array(c), e = 0; c > e; e++) {
        b[e] = B.pluck(a, "" + e);
      }
      return b;
    };
    B.object = function(a, c) {
      if (null == a) {
        return {};
      }
      for (var b = {}, e = 0, d = a.length; d > e; e++) {
        c ? b[a[e]] = c[e] : b[a[e][0]] = a[e][1];
      }
      return b;
    };
    B.indexOf = function(a, c, b) {
      if (null == a) {
        return -1;
      }
      var e = 0, d = a.length;
      if (b) {
        if ("number" != typeof b) {
          return e = B.sortedIndex(a, c), a[e] === c ? e : -1;
        }
        e = 0 > b ? Math.max(0, d + b) : b;
      }
      if (C && a.indexOf === C) {
        return a.indexOf(c, b);
      }
      for (; d > e; e++) {
        if (a[e] === c) {
          return e;
        }
      }
      return -1;
    };
    B.lastIndexOf = function(a, c, b) {
      if (null == a) {
        return -1;
      }
      var e = null != b;
      if (A && a.lastIndexOf === A) {
        return e ? a.lastIndexOf(c, b) : a.lastIndexOf(c);
      }
      for (b = e ? b : a.length; b--;) {
        if (a[b] === c) {
          return b;
        }
      }
      return -1;
    };
    B.range = function(a, c, b) {
      1 >= arguments.length && (c = a || 0, a = 0);
      b = arguments[2] || 1;
      for (var e = Math.max(Math.ceil((c - a) / b), 0), d = 0, f = Array(e); e > d;) {
        f[d++] = a, a += b;
      }
      return f;
    };
    B.bind = function(a, c) {
      if (a.bind === F && F) {
        return F.apply(a, m.call(arguments, 1));
      }
      var b = m.call(arguments, 2);
      return function() {
        return a.apply(c, b.concat(m.call(arguments)));
      };
    };
    B.partial = function(a) {
      var c = m.call(arguments, 1);
      return function() {
        return a.apply(this, c.concat(m.call(arguments)));
      };
    };
    B.bindAll = function(a) {
      var c = m.call(arguments, 1);
      return 0 === c.length && (c = B.functions(a)), E(c, function(c) {
        a[c] = B.bind(a[c], a);
      }), a;
    };
    B.memoize = function(a, c) {
      var b = {};
      return c || (c = B.identity), function() {
        var e = c.apply(this, arguments);
        return B.has(b, e) ? b[e] : b[e] = a.apply(this, arguments);
      };
    };
    B.delay = function(a, c) {
      var b = m.call(arguments, 2);
      return setTimeout(function() {
        return a.apply(null, b);
      }, c);
    };
    B.defer = function(a) {
      return B.delay.apply(B, [a, 1].concat(m.call(arguments, 1)));
    };
    B.throttle = function(a, c) {
      var b, e, d, f, h = 0, g = function() {
        h = new Date;
        d = null;
        f = a.apply(b, e);
      };
      return function() {
        var m = new Date, k = c - (m - h);
        return b = this, e = arguments, 0 >= k ? (clearTimeout(d), d = null, h = m, f = a.apply(b, e)) : d || (d = setTimeout(g, k)), f;
      };
    };
    B.debounce = function(a, c, b) {
      var e, d;
      return function() {
        var f = this, h = arguments, g = b && !e;
        return clearTimeout(e), e = setTimeout(function() {
          e = null;
          b || (d = a.apply(f, h));
        }, c), g && (d = a.apply(f, h)), d;
      };
    };
    B.once = function(a) {
      var c, b = !1;
      return function() {
        return b ? c : (b = !0, c = a.apply(this, arguments), a = null, c);
      };
    };
    B.wrap = function(a, c) {
      return function() {
        var b = [a];
        return q.apply(b, arguments), c.apply(this, b);
      };
    };
    B.compose = function() {
      var a = arguments;
      return function() {
        for (var c = arguments, b = a.length - 1; 0 <= b; b--) {
          c = [a[b].apply(this, c)];
        }
        return c[0];
      };
    };
    B.after = function(a, c) {
      return 0 >= a ? c() : function() {
        return 1 > --a ? c.apply(this, arguments) : void 0;
      };
    };
    B.keys = D || function(a) {
      if (a !== Object(a)) {
        throw new TypeError("Invalid object");
      }
      var c = [], b;
      for (b in a) {
        B.has(a, b) && (c[c.length] = b);
      }
      return c;
    };
    B.values = function(a) {
      var c = [], b;
      for (b in a) {
        B.has(a, b) && c.push(a[b]);
      }
      return c;
    };
    B.pairs = function(a) {
      var c = [], b;
      for (b in a) {
        B.has(a, b) && c.push([b, a[b]]);
      }
      return c;
    };
    B.invert = function(a) {
      var c = {}, b;
      for (b in a) {
        B.has(a, b) && (c[a[b]] = b);
      }
      return c;
    };
    B.functions = B.methods = function(a) {
      var c = [], b;
      for (b in a) {
        B.isFunction(a[b]) && c.push(b);
      }
      return c.sort();
    };
    B.extend = function(a) {
      return E(m.call(arguments, 1), function(c) {
        if (c) {
          for (var b in c) {
            a[b] = c[b];
          }
        }
      }), a;
    };
    B.pick = function(a) {
      var c = {}, b = n.apply(e, m.call(arguments, 1));
      return E(b, function(b) {
        b in a && (c[b] = a[b]);
      }), c;
    };
    B.omit = function(a) {
      var c = {}, b = n.apply(e, m.call(arguments, 1)), d;
      for (d in a) {
        B.contains(b, d) || (c[d] = a[d]);
      }
      return c;
    };
    B.defaults = function(a) {
      return E(m.call(arguments, 1), function(c) {
        if (c) {
          for (var b in c) {
            null == a[b] && (a[b] = c[b]);
          }
        }
      }), a;
    };
    B.clone = function(a) {
      return B.isObject(a) ? B.isArray(a) ? a.slice() : B.extend({}, a) : a;
    };
    B.tap = function(a, c) {
      return c(a), a;
    };
    var L = function(a, b, e, d) {
      if (a === b) {
        return 0 !== a || 1 / a == 1 / b;
      }
      if (null == a || null == b) {
        return a === b;
      }
      a instanceof B && (a = a._wrapped);
      b instanceof B && (b = b._wrapped);
      var f = c.call(a);
      if (f != c.call(b)) {
        return !1;
      }
      switch(f) {
        case "[object String]":
          return a == String(b);
        case "[object Number]":
          return a != +a ? b != +b : 0 == a ? 1 / a == 1 / b : a == +b;
        case "[object Date]":
        case "[object Boolean]":
          return +a == +b;
        case "[object RegExp]":
          return a.source == b.source && a.global == b.global && a.multiline == b.multiline && a.ignoreCase == b.ignoreCase;
      }
      if ("object" != typeof a || "object" != typeof b) {
        return !1;
      }
      for (var h = e.length; h--;) {
        if (e[h] == a) {
          return d[h] == b;
        }
      }
      e.push(a);
      d.push(b);
      h = 0;
      var g = !0;
      if ("[object Array]" == f) {
        if (h = a.length, g = h == b.length) {
          for (; h-- && (g = L(a[h], b[h], e, d));) {
          }
        }
      } else {
        f = a.constructor;
        var m = b.constructor;
        if (f !== m && !(B.isFunction(f) && f instanceof f && B.isFunction(m) && m instanceof m)) {
          return !1;
        }
        for (var k in a) {
          if (B.has(a, k) && (h++, !(g = B.has(b, k) && L(a[k], b[k], e, d)))) {
            break;
          }
        }
        if (g) {
          for (k in b) {
            if (B.has(b, k) && !h--) {
              break;
            }
          }
          g = !h;
        }
      }
      return e.pop(), d.pop(), g;
    };
    B.isEqual = function(a, c) {
      return L(a, c, [], []);
    };
    B.isEmpty = function(a) {
      if (null == a) {
        return !0;
      }
      if (B.isArray(a) || B.isString(a)) {
        return 0 === a.length;
      }
      for (var c in a) {
        if (B.has(a, c)) {
          return !1;
        }
      }
      return !0;
    };
    B.isElement = function(a) {
      return !(!a || 1 !== a.nodeType);
    };
    B.isArray = r || function(a) {
      return "[object Array]" == c.call(a);
    };
    B.isObject = function(a) {
      return a === Object(a);
    };
    E("Arguments Function String Number Date RegExp".split(" "), function(a) {
      B["is" + a] = function(b) {
        return c.call(b) == "[object " + a + "]";
      };
    });
    B.isArguments(arguments) || (B.isArguments = function(a) {
      return !(!a || !B.has(a, "callee"));
    });
    "function" != typeof/./ && (B.isFunction = function(a) {
      return "function" == typeof a;
    });
    B.isFinite = function(a) {
      return isFinite(a) && !isNaN(parseFloat(a));
    };
    B.isNaN = function(a) {
      return B.isNumber(a) && a != +a;
    };
    B.isBoolean = function(a) {
      return !0 === a || !1 === a || "[object Boolean]" == c.call(a);
    };
    B.isNull = function(a) {
      return null === a;
    };
    B.isUndefined = function(a) {
      return void 0 === a;
    };
    B.has = function(a, c) {
      return h.call(a, c);
    };
    B.noConflict = function() {
      return a._ = g, this;
    };
    B.identity = function(a) {
      return a;
    };
    B.times = function(a, c, b) {
      for (var e = Array(a), d = 0; a > d; d++) {
        e[d] = c.call(b, d);
      }
      return e;
    };
    B.random = function(a, c) {
      return null == c && (c = a, a = 0), a + Math.floor(Math.random() * (c - a + 1));
    };
    var H = {escape:{"&":"&amp;", "<":"&lt;", ">":"&gt;", '"':"&quot;", "'":"&#x27;", "/":"&#x2F;"}};
    H.unescape = B.invert(H.escape);
    var M = {escape:new RegExp("[" + B.keys(H.escape).join("") + "]", "g"), unescape:new RegExp("(" + B.keys(H.unescape).join("|") + ")", "g")};
    B.each(["escape", "unescape"], function(a) {
      B[a] = function(c) {
        return null == c ? "" : ("" + c).replace(M[a], function(c) {
          return H[a][c];
        });
      };
    });
    B.result = function(a, c) {
      if (null == a) {
        return null;
      }
      c = a[c];
      return B.isFunction(c) ? c.call(a) : c;
    };
    B.mixin = function(a) {
      E(B.functions(a), function(c) {
        var b = B[c] = a[c];
        B.prototype[c] = function() {
          var a = [this._wrapped];
          return q.apply(a, arguments), U.call(this, b.apply(B, a));
        };
      });
    };
    var S = 0;
    B.uniqueId = function(a) {
      var c = ++S + "";
      return a ? a + c : c;
    };
    B.templateSettings = {evaluate:/<%([\s\S]+?)%>/g, interpolate:/<%=([\s\S]+?)%>/g, escape:/<%-([\s\S]+?)%>/g};
    var O = /(.)^/, Z = {"'":"'", "\\":"\\", "\r":"r", "\n":"n", "\t":"t", "\u2028":"u2028", "\u2029":"u2029"}, Q = /\\|'|\r|\n|\t|\u2028|\u2029/g;
    B.template = function(a, c, b) {
      b = B.defaults({}, b, B.templateSettings);
      var e = new RegExp([(b.escape || O).source, (b.interpolate || O).source, (b.evaluate || O).source].join("|") + "|$", "g"), d = 0, f = "__p+='";
      a.replace(e, function(c, b, e, h, g) {
        return f += a.slice(d, g).replace(Q, function(a) {
          return "\\" + Z[a];
        }), b && (f += "'+\n((__t=(" + b + "))==null?'':_.escape(__t))+\n'"), e && (f += "'+\n((__t=(" + e + "))==null?'':__t)+\n'"), h && (f += "';\n" + h + "\n__p+='"), d = g + c.length, c;
      });
      f += "';\n";
      b.variable || (f = "with(obj||{}){\n" + f + "}\n");
      f = "var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n" + f + "return __p;\n";
      try {
        var h = new Function(b.variable || "obj", "_", f);
      } catch (la) {
        throw la.source = f, la;
      }
      if (c) {
        return h(c, B);
      }
      c = function(a) {
        return h.call(this, a, B);
      };
      return c.source = "function(" + (b.variable || "obj") + "){\n" + f + "}", c;
    };
    B.chain = function(a) {
      return B(a).chain();
    };
    var U = function(a) {
      return this._chain ? B(a).chain() : a;
    };
    B.mixin(B);
    E("pop push reverse shift sort splice unshift".split(" "), function(a) {
      var c = e[a];
      B.prototype[a] = function() {
        var b = this._wrapped;
        return c.apply(b, arguments), "shift" != a && "splice" != a || 0 !== b.length || delete b[0], U.call(this, b);
      };
    });
    E(["concat", "join", "slice"], function(a) {
      var c = e[a];
      B.prototype[a] = function() {
        return U.call(this, c.apply(this._wrapped, arguments));
      };
    });
    B.extend(B.prototype, {chain:function() {
      return this._chain = !0, this;
    }, value:function() {
      return this._wrapped;
    }});
  }).call(this);
}, {}], 25:[function(a) {
  "undefined" != typeof window && "function" != typeof window.requestAnimationFrame && (window.requestAnimationFrame = window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(a) {
    setTimeout(a, 1E3 / 60);
  });
  Leap = a("../lib/index");
}, {"../lib/index":11}]}, {}, [25]);
var __extends = this && this.__extends || function() {
  var a = function(d, k) {
    a = Object.setPrototypeOf || {__proto__:[]} instanceof Array && function(a, d) {
      a.__proto__ = d;
    } || function(a, d) {
      for (var b in d) {
        d.hasOwnProperty(b) && (a[b] = d[b]);
      }
    };
    return a(d, k);
  };
  return function(d, k) {
    function b() {
      this.constructor = d;
    }
    a(d, k);
    d.prototype = null === k ? Object.create(k) : (b.prototype = k.prototype, new b);
  };
}(), spine;
(function(a) {
  var d = function() {
    function a(a, c, b) {
      if (null == a) {
        throw Error("name cannot be null.");
      }
      if (null == c) {
        throw Error("timelines cannot be null.");
      }
      this.name = a;
      this.timelines = c;
      this.timelineIds = [];
      for (a = 0; a < c.length; a++) {
        this.timelineIds[c[a].getPropertyId()] = !0;
      }
      this.duration = b;
    }
    a.prototype.hasTimeline = function(a) {
      return 1 == this.timelineIds[a];
    };
    a.prototype.apply = function(a, c, b, e, d, f, g, m) {
      if (null == a) {
        throw Error("skeleton cannot be null.");
      }
      e && 0 != this.duration && (b %= this.duration, 0 < c && (c %= this.duration));
      e = this.timelines;
      for (var h = 0, k = e.length; h < k; h++) {
        e[h].apply(a, c, b, d, f, g, m);
      }
    };
    a.binarySearch = function(a, c, b) {
      void 0 === b && (b = 1);
      var e = 0, d = a.length / b - 2;
      if (0 == d) {
        return b;
      }
      for (var f = d >>> 1;;) {
        a[(f + 1) * b] <= c ? e = f + 1 : d = f;
        if (e == d) {
          return (e + 1) * b;
        }
        f = e + d >>> 1;
      }
    };
    a.linearSearch = function(a, c, b) {
      for (var e = 0, d = a.length - b; e <= d; e += b) {
        if (a[e] > c) {
          return e;
        }
      }
      return -1;
    };
    return a;
  }();
  a.Animation = d;
  var k;
  (function(a) {
    a[a.setup = 0] = "setup";
    a[a.first = 1] = "first";
    a[a.replace = 2] = "replace";
    a[a.add = 3] = "add";
  })(k = a.MixBlend || (a.MixBlend = {}));
  var b;
  (function(a) {
    a[a.mixIn = 0] = "mixIn";
    a[a.mixOut = 1] = "mixOut";
  })(b = a.MixDirection || (a.MixDirection = {}));
  var g;
  (function(a) {
    a[a.rotate = 0] = "rotate";
    a[a.translate = 1] = "translate";
    a[a.scale = 2] = "scale";
    a[a.shear = 3] = "shear";
    a[a.attachment = 4] = "attachment";
    a[a.color = 5] = "color";
    a[a.deform = 6] = "deform";
    a[a.event = 7] = "event";
    a[a.drawOrder = 8] = "drawOrder";
    a[a.ikConstraint = 9] = "ikConstraint";
    a[a.transformConstraint = 10] = "transformConstraint";
    a[a.pathConstraintPosition = 11] = "pathConstraintPosition";
    a[a.pathConstraintSpacing = 12] = "pathConstraintSpacing";
    a[a.pathConstraintMix = 13] = "pathConstraintMix";
    a[a.twoColor = 14] = "twoColor";
  })(g = a.TimelineType || (a.TimelineType = {}));
  var f = function() {
    function b(e) {
      if (0 >= e) {
        throw Error("frameCount must be > 0: " + e);
      }
      this.curves = a.Utils.newFloatArray((e - 1) * b.BEZIER_SIZE);
    }
    b.prototype.getFrameCount = function() {
      return this.curves.length / b.BEZIER_SIZE + 1;
    };
    b.prototype.setLinear = function(a) {
      this.curves[a * b.BEZIER_SIZE] = b.LINEAR;
    };
    b.prototype.setStepped = function(a) {
      this.curves[a * b.BEZIER_SIZE] = b.STEPPED;
    };
    b.prototype.getCurveType = function(a) {
      a *= b.BEZIER_SIZE;
      if (a == this.curves.length) {
        return b.LINEAR;
      }
      a = this.curves[a];
      return a == b.LINEAR ? b.LINEAR : a == b.STEPPED ? b.STEPPED : b.BEZIER;
    };
    b.prototype.setCurve = function(a, c, e, d, f) {
      var h = .03 * (2 * -c + d), g = .03 * (2 * -e + f);
      d = .006 * (3 * (c - d) + 1);
      f = .006 * (3 * (e - f) + 1);
      var m = 2 * h + d, k = 2 * g + f;
      c = .3 * c + h + .16666667 * d;
      e = .3 * e + g + .16666667 * f;
      a *= b.BEZIER_SIZE;
      g = this.curves;
      g[a++] = b.BEZIER;
      h = c;
      for (var n = e, r = a + b.BEZIER_SIZE - 1; a < r; a += 2) {
        g[a] = h, g[a + 1] = n, c += m, e += k, m += d, k += f, h += c, n += e;
      }
    };
    b.prototype.getCurvePercent = function(e, c) {
      c = a.MathUtils.clamp(c, 0, 1);
      var d = this.curves;
      e *= b.BEZIER_SIZE;
      var f = d[e];
      if (f == b.LINEAR) {
        return c;
      }
      if (f == b.STEPPED) {
        return 0;
      }
      e++;
      f = 0;
      for (var g = e, m = e + b.BEZIER_SIZE - 1; e < m; e += 2) {
        if (f = d[e], f >= c) {
          return e == g ? m = g = 0 : (g = d[e - 2], m = d[e - 1]), m + (d[e + 1] - m) * (c - g) / (f - g);
        }
      }
      d = d[e - 1];
      return d + (1 - d) * (c - f) / (1 - f);
    };
    b.LINEAR = 0;
    b.STEPPED = 1;
    b.BEZIER = 2;
    b.BEZIER_SIZE = 19;
    return b;
  }();
  a.CurveTimeline = f;
  var e = function(b) {
    function e(c) {
      var e = b.call(this, c) || this;
      e.frames = a.Utils.newFloatArray(c << 1);
      return e;
    }
    __extends(e, b);
    e.prototype.getPropertyId = function() {
      return (g.rotate << 24) + this.boneIndex;
    };
    e.prototype.setFrame = function(a, b, d) {
      a <<= 1;
      this.frames[a] = b;
      this.frames[a + e.ROTATION] = d;
    };
    e.prototype.apply = function(a, b, f, g, m, n, r) {
      b = this.frames;
      a = a.bones[this.boneIndex];
      if (a.active) {
        if (f < b[0]) {
          switch(n) {
            case k.setup:
              a.rotation = a.data.rotation;
              break;
            case k.first:
              n = a.data.rotation - a.rotation, a.rotation += (n - 360 * (16384 - (16384.499999999996 - n / 360 | 0))) * m;
          }
        } else {
          if (f >= b[b.length - e.ENTRIES]) {
            switch(f = b[b.length + e.PREV_ROTATION], n) {
              case k.setup:
                a.rotation = a.data.rotation + f * m;
                break;
              case k.first:
              case k.replace:
                f += a.data.rotation - a.rotation, f -= 360 * (16384 - (16384.499999999996 - f / 360 | 0));
              case k.add:
                a.rotation += f * m;
            }
          } else {
            r = d.binarySearch(b, f, e.ENTRIES);
            g = b[r + e.PREV_ROTATION];
            var c = b[r];
            f = this.getCurvePercent((r >> 1) - 1, 1 - (f - c) / (b[r + e.PREV_TIME] - c));
            b = b[r + e.ROTATION] - g;
            b = g + (b - 360 * (16384 - (16384.499999999996 - b / 360 | 0))) * f;
            switch(n) {
              case k.setup:
                a.rotation = a.data.rotation + (b - 360 * (16384 - (16384.499999999996 - b / 360 | 0))) * m;
                break;
              case k.first:
              case k.replace:
                b += a.data.rotation - a.rotation;
              case k.add:
                a.rotation += (b - 360 * (16384 - (16384.499999999996 - b / 360 | 0))) * m;
            }
          }
        }
      }
    };
    e.ENTRIES = 2;
    e.PREV_TIME = -2;
    e.PREV_ROTATION = -1;
    e.ROTATION = 1;
    return e;
  }(f);
  a.RotateTimeline = e;
  e = function(b) {
    function e(c) {
      var d = b.call(this, c) || this;
      d.frames = a.Utils.newFloatArray(c * e.ENTRIES);
      return d;
    }
    __extends(e, b);
    e.prototype.getPropertyId = function() {
      return (g.translate << 24) + this.boneIndex;
    };
    e.prototype.setFrame = function(a, b, d, f) {
      a *= e.ENTRIES;
      this.frames[a] = b;
      this.frames[a + e.X] = d;
      this.frames[a + e.Y] = f;
    };
    e.prototype.apply = function(a, b, f, g, m, n, r) {
      b = this.frames;
      a = a.bones[this.boneIndex];
      if (a.active) {
        if (f < b[0]) {
          switch(n) {
            case k.setup:
              a.x = a.data.x;
              a.y = a.data.y;
              break;
            case k.first:
              a.x += (a.data.x - a.x) * m, a.y += (a.data.y - a.y) * m;
          }
        } else {
          if (f >= b[b.length - e.ENTRIES]) {
            g = b[b.length + e.PREV_X], r = b[b.length + e.PREV_Y];
          } else {
            var c = d.binarySearch(b, f, e.ENTRIES);
            g = b[c + e.PREV_X];
            r = b[c + e.PREV_Y];
            var h = b[c];
            f = this.getCurvePercent(c / e.ENTRIES - 1, 1 - (f - h) / (b[c + e.PREV_TIME] - h));
            g += (b[c + e.X] - g) * f;
            r += (b[c + e.Y] - r) * f;
          }
          switch(n) {
            case k.setup:
              a.x = a.data.x + g * m;
              a.y = a.data.y + r * m;
              break;
            case k.first:
            case k.replace:
              a.x += (a.data.x + g - a.x) * m;
              a.y += (a.data.y + r - a.y) * m;
              break;
            case k.add:
              a.x += g * m, a.y += r * m;
          }
        }
      }
    };
    e.ENTRIES = 3;
    e.PREV_TIME = -3;
    e.PREV_X = -2;
    e.PREV_Y = -1;
    e.X = 1;
    e.Y = 2;
    return e;
  }(f);
  a.TranslateTimeline = e;
  var r = function(e) {
    function f(a) {
      return e.call(this, a) || this;
    }
    __extends(f, e);
    f.prototype.getPropertyId = function() {
      return (g.scale << 24) + this.boneIndex;
    };
    f.prototype.apply = function(c, e, g, m, n, r, q) {
      var h = this.frames;
      c = c.bones[this.boneIndex];
      if (c.active) {
        if (g < h[0]) {
          switch(r) {
            case k.setup:
              c.scaleX = c.data.scaleX;
              c.scaleY = c.data.scaleY;
              break;
            case k.first:
              c.scaleX += (c.data.scaleX - c.scaleX) * n, c.scaleY += (c.data.scaleY - c.scaleY) * n;
          }
        } else {
          if (g >= h[h.length - f.ENTRIES]) {
            e = h[h.length + f.PREV_X] * c.data.scaleX, m = h[h.length + f.PREV_Y] * c.data.scaleY;
          } else {
            var p = d.binarySearch(h, g, f.ENTRIES);
            e = h[p + f.PREV_X];
            m = h[p + f.PREV_Y];
            var t = h[p];
            g = this.getCurvePercent(p / f.ENTRIES - 1, 1 - (g - t) / (h[p + f.PREV_TIME] - t));
            e = (e + (h[p + f.X] - e) * g) * c.data.scaleX;
            m = (m + (h[p + f.Y] - m) * g) * c.data.scaleY;
          }
          if (1 == n) {
            r == k.add ? (c.scaleX += e - c.data.scaleX, c.scaleY += m - c.data.scaleY) : (c.scaleX = e, c.scaleY = m);
          } else {
            if (q == b.mixOut) {
              switch(r) {
                case k.setup:
                  r = c.data.scaleX;
                  q = c.data.scaleY;
                  c.scaleX = r + (Math.abs(e) * a.MathUtils.signum(r) - r) * n;
                  c.scaleY = q + (Math.abs(m) * a.MathUtils.signum(q) - q) * n;
                  break;
                case k.first:
                case k.replace:
                  r = c.scaleX;
                  q = c.scaleY;
                  c.scaleX = r + (Math.abs(e) * a.MathUtils.signum(r) - r) * n;
                  c.scaleY = q + (Math.abs(m) * a.MathUtils.signum(q) - q) * n;
                  break;
                case k.add:
                  r = c.scaleX, q = c.scaleY, c.scaleX = r + (Math.abs(e) * a.MathUtils.signum(r) - c.data.scaleX) * n, c.scaleY = q + (Math.abs(m) * a.MathUtils.signum(q) - c.data.scaleY) * n;
              }
            } else {
              switch(r) {
                case k.setup:
                  r = Math.abs(c.data.scaleX) * a.MathUtils.signum(e);
                  q = Math.abs(c.data.scaleY) * a.MathUtils.signum(m);
                  c.scaleX = r + (e - r) * n;
                  c.scaleY = q + (m - q) * n;
                  break;
                case k.first:
                case k.replace:
                  r = Math.abs(c.scaleX) * a.MathUtils.signum(e);
                  q = Math.abs(c.scaleY) * a.MathUtils.signum(m);
                  c.scaleX = r + (e - r) * n;
                  c.scaleY = q + (m - q) * n;
                  break;
                case k.add:
                  r = a.MathUtils.signum(e), q = a.MathUtils.signum(m), c.scaleX = Math.abs(c.scaleX) * r + (e - Math.abs(c.data.scaleX) * r) * n, c.scaleY = Math.abs(c.scaleY) * q + (m - Math.abs(c.data.scaleY) * q) * n;
              }
            }
          }
        }
      }
    };
    return f;
  }(e);
  a.ScaleTimeline = r;
  e = function(a) {
    function b(c) {
      return a.call(this, c) || this;
    }
    __extends(b, a);
    b.prototype.getPropertyId = function() {
      return (g.shear << 24) + this.boneIndex;
    };
    b.prototype.apply = function(a, e, f, g, m, n, r) {
      e = this.frames;
      a = a.bones[this.boneIndex];
      if (a.active) {
        if (f < e[0]) {
          switch(n) {
            case k.setup:
              a.shearX = a.data.shearX;
              a.shearY = a.data.shearY;
              break;
            case k.first:
              a.shearX += (a.data.shearX - a.shearX) * m, a.shearY += (a.data.shearY - a.shearY) * m;
          }
        } else {
          if (f >= e[e.length - b.ENTRIES]) {
            g = e[e.length + b.PREV_X], r = e[e.length + b.PREV_Y];
          } else {
            var c = d.binarySearch(e, f, b.ENTRIES);
            g = e[c + b.PREV_X];
            r = e[c + b.PREV_Y];
            var h = e[c];
            f = this.getCurvePercent(c / b.ENTRIES - 1, 1 - (f - h) / (e[c + b.PREV_TIME] - h));
            g += (e[c + b.X] - g) * f;
            r += (e[c + b.Y] - r) * f;
          }
          switch(n) {
            case k.setup:
              a.shearX = a.data.shearX + g * m;
              a.shearY = a.data.shearY + r * m;
              break;
            case k.first:
            case k.replace:
              a.shearX += (a.data.shearX + g - a.shearX) * m;
              a.shearY += (a.data.shearY + r - a.shearY) * m;
              break;
            case k.add:
              a.shearX += g * m, a.shearY += r * m;
          }
        }
      }
    };
    return b;
  }(e);
  a.ShearTimeline = e;
  e = function(b) {
    function e(c) {
      var d = b.call(this, c) || this;
      d.frames = a.Utils.newFloatArray(c * e.ENTRIES);
      return d;
    }
    __extends(e, b);
    e.prototype.getPropertyId = function() {
      return (g.color << 24) + this.slotIndex;
    };
    e.prototype.setFrame = function(a, b, d, f, g, m) {
      a *= e.ENTRIES;
      this.frames[a] = b;
      this.frames[a + e.R] = d;
      this.frames[a + e.G] = f;
      this.frames[a + e.B] = g;
      this.frames[a + e.A] = m;
    };
    e.prototype.apply = function(a, b, f, g, m, n, r) {
      a = a.slots[this.slotIndex];
      if (a.bone.active) {
        var c = this.frames;
        if (f < c[0]) {
          switch(n) {
            case k.setup:
              a.color.setFromColor(a.data.color);
              break;
            case k.first:
              f = a.color, n = a.data.color, f.add((n.r - f.r) * m, (n.g - f.g) * m, (n.b - f.b) * m, (n.a - f.a) * m);
          }
        } else {
          if (f >= c[c.length - e.ENTRIES]) {
            f = c.length;
            b = c[f + e.PREV_R];
            g = c[f + e.PREV_G];
            r = c[f + e.PREV_B];
            var h = c[f + e.PREV_A];
          } else {
            var q = d.binarySearch(c, f, e.ENTRIES);
            b = c[q + e.PREV_R];
            g = c[q + e.PREV_G];
            r = c[q + e.PREV_B];
            h = c[q + e.PREV_A];
            var p = c[q];
            f = this.getCurvePercent(q / e.ENTRIES - 1, 1 - (f - p) / (c[q + e.PREV_TIME] - p));
            b += (c[q + e.R] - b) * f;
            g += (c[q + e.G] - g) * f;
            r += (c[q + e.B] - r) * f;
            h += (c[q + e.A] - h) * f;
          }
          1 == m ? a.color.set(b, g, r, h) : (f = a.color, n == k.setup && f.setFromColor(a.data.color), f.add((b - f.r) * m, (g - f.g) * m, (r - f.b) * m, (h - f.a) * m));
        }
      }
    };
    e.ENTRIES = 5;
    e.PREV_TIME = -5;
    e.PREV_R = -4;
    e.PREV_G = -3;
    e.PREV_B = -2;
    e.PREV_A = -1;
    e.R = 1;
    e.G = 2;
    e.B = 3;
    e.A = 4;
    return e;
  }(f);
  a.ColorTimeline = e;
  e = function(b) {
    function e(c) {
      var d = b.call(this, c) || this;
      d.frames = a.Utils.newFloatArray(c * e.ENTRIES);
      return d;
    }
    __extends(e, b);
    e.prototype.getPropertyId = function() {
      return (g.twoColor << 24) + this.slotIndex;
    };
    e.prototype.setFrame = function(a, b, d, f, g, m, k, n, r) {
      a *= e.ENTRIES;
      this.frames[a] = b;
      this.frames[a + e.R] = d;
      this.frames[a + e.G] = f;
      this.frames[a + e.B] = g;
      this.frames[a + e.A] = m;
      this.frames[a + e.R2] = k;
      this.frames[a + e.G2] = n;
      this.frames[a + e.B2] = r;
    };
    e.prototype.apply = function(a, b, f, g, m, n, r) {
      a = a.slots[this.slotIndex];
      if (a.bone.active) {
        var c = this.frames;
        if (f < c[0]) {
          switch(n) {
            case k.setup:
              a.color.setFromColor(a.data.color);
              a.darkColor.setFromColor(a.data.darkColor);
              break;
            case k.first:
              f = a.color, c = a.darkColor, n = a.data.color, a = a.data.darkColor, f.add((n.r - f.r) * m, (n.g - f.g) * m, (n.b - f.b) * m, (n.a - f.a) * m), c.add((a.r - c.r) * m, (a.g - c.g) * m, (a.b - c.b) * m, 0);
          }
        } else {
          if (f >= c[c.length - e.ENTRIES]) {
            f = c.length;
            b = c[f + e.PREV_R];
            g = c[f + e.PREV_G];
            r = c[f + e.PREV_B];
            var h = c[f + e.PREV_A];
            var q = c[f + e.PREV_R2];
            var p = c[f + e.PREV_G2];
            var t = c[f + e.PREV_B2];
          } else {
            var z = d.binarySearch(c, f, e.ENTRIES);
            b = c[z + e.PREV_R];
            g = c[z + e.PREV_G];
            r = c[z + e.PREV_B];
            h = c[z + e.PREV_A];
            q = c[z + e.PREV_R2];
            p = c[z + e.PREV_G2];
            t = c[z + e.PREV_B2];
            var y = c[z];
            f = this.getCurvePercent(z / e.ENTRIES - 1, 1 - (f - y) / (c[z + e.PREV_TIME] - y));
            b += (c[z + e.R] - b) * f;
            g += (c[z + e.G] - g) * f;
            r += (c[z + e.B] - r) * f;
            h += (c[z + e.A] - h) * f;
            q += (c[z + e.R2] - q) * f;
            p += (c[z + e.G2] - p) * f;
            t += (c[z + e.B2] - t) * f;
          }
          1 == m ? (a.color.set(b, g, r, h), a.darkColor.set(q, p, t, 1)) : (f = a.color, c = a.darkColor, n == k.setup && (f.setFromColor(a.data.color), c.setFromColor(a.data.darkColor)), f.add((b - f.r) * m, (g - f.g) * m, (r - f.b) * m, (h - f.a) * m), c.add((q - c.r) * m, (p - c.g) * m, (t - c.b) * m, 0));
        }
      }
    };
    e.ENTRIES = 8;
    e.PREV_TIME = -8;
    e.PREV_R = -7;
    e.PREV_G = -6;
    e.PREV_B = -5;
    e.PREV_A = -4;
    e.PREV_R2 = -3;
    e.PREV_G2 = -2;
    e.PREV_B2 = -1;
    e.R = 1;
    e.G = 2;
    e.B = 3;
    e.A = 4;
    e.R2 = 5;
    e.G2 = 6;
    e.B2 = 7;
    return e;
  }(f);
  a.TwoColorTimeline = e;
  e = function() {
    function e(b) {
      this.frames = a.Utils.newFloatArray(b);
      this.attachmentNames = Array(b);
    }
    e.prototype.getPropertyId = function() {
      return (g.attachment << 24) + this.slotIndex;
    };
    e.prototype.getFrameCount = function() {
      return this.frames.length;
    };
    e.prototype.setFrame = function(a, c, b) {
      this.frames[a] = c;
      this.attachmentNames[a] = b;
    };
    e.prototype.apply = function(a, c, e, f, g, m, r) {
      c = a.slots[this.slotIndex];
      if (c.bone.active) {
        if (r == b.mixOut && m == k.setup) {
          e = c.data.attachmentName, c.setAttachment(null == e ? null : a.getAttachment(this.slotIndex, e));
        } else {
          if (r = this.frames, e < r[0]) {
            if (m == k.setup || m == k.first) {
              e = c.data.attachmentName, c.setAttachment(null == e ? null : a.getAttachment(this.slotIndex, e));
            }
          } else {
            e = e >= r[r.length - 1] ? r.length - 1 : d.binarySearch(r, e, 1) - 1, e = this.attachmentNames[e], a.slots[this.slotIndex].setAttachment(null == e ? null : a.getAttachment(this.slotIndex, e));
          }
        }
      }
    };
    return e;
  }();
  a.AttachmentTimeline = e;
  var q = null;
  e = function(b) {
    function e(c) {
      var e = b.call(this, c) || this;
      e.frames = a.Utils.newFloatArray(c);
      e.frameVertices = Array(c);
      null == q && (q = a.Utils.newFloatArray(64));
      return e;
    }
    __extends(e, b);
    e.prototype.getPropertyId = function() {
      return (g.deform << 27) + +this.attachment.id + this.slotIndex;
    };
    e.prototype.setFrame = function(a, b, e) {
      this.frames[a] = b;
      this.frameVertices[a] = e;
    };
    e.prototype.apply = function(c, b, e, f, g, m, n) {
      c = c.slots[this.slotIndex];
      if (c.bone.active) {
        var h = c.getAttachment();
        if (h instanceof a.VertexAttachment && h.deformAttachment == this.attachment) {
          b = c.deform;
          0 == b.length && (m = k.setup);
          n = this.frameVertices;
          c = n[0].length;
          var r = this.frames;
          if (e < r[0]) {
            switch(m) {
              case k.setup:
                b.length = 0;
                break;
              case k.first:
                if (1 == g) {
                  b.length = 0;
                } else {
                  if (b = a.Utils.setArraySize(b, c), null == h.bones) {
                    for (m = h.vertices, f = 0; f < c; f++) {
                      b[f] += (m[f] - b[f]) * g;
                    }
                  } else {
                    for (g = 1 - g, f = 0; f < c; f++) {
                      b[f] *= g;
                    }
                  }
                }
            }
          } else {
            if (b = a.Utils.setArraySize(b, c), e >= r[r.length - 1]) {
              if (f = n[r.length - 1], 1 == g) {
                if (m == k.add) {
                  if (null == h.bones) {
                    for (m = h.vertices, g = 0; g < c; g++) {
                      b[g] += f[g] - m[g];
                    }
                  } else {
                    for (g = 0; g < c; g++) {
                      b[g] += f[g];
                    }
                  }
                } else {
                  a.Utils.arrayCopy(f, 0, b, 0, c);
                }
              } else {
                switch(m) {
                  case k.setup:
                    if (null == h.bones) {
                      for (m = h.vertices, n = 0; n < c; n++) {
                        r = m[n], b[n] = r + (f[n] - r) * g;
                      }
                    } else {
                      for (n = 0; n < c; n++) {
                        b[n] = f[n] * g;
                      }
                    }
                    break;
                  case k.first:
                  case k.replace:
                    for (n = 0; n < c; n++) {
                      b[n] += (f[n] - b[n]) * g;
                    }
                    break;
                  case k.add:
                    if (null == h.bones) {
                      for (m = h.vertices, n = 0; n < c; n++) {
                        b[n] += (f[n] - m[n]) * g;
                      }
                    } else {
                      for (n = 0; n < c; n++) {
                        b[n] += f[n] * g;
                      }
                    }
                }
              }
            } else {
              var q = d.binarySearch(r, e);
              f = n[q - 1];
              n = n[q];
              var p = r[q];
              e = this.getCurvePercent(q - 1, 1 - (e - p) / (r[q - 1] - p));
              if (1 == g) {
                if (m == k.add) {
                  if (null == h.bones) {
                    for (m = h.vertices, g = 0; g < c; g++) {
                      h = f[g], b[g] += h + (n[g] - h) * e - m[g];
                    }
                  } else {
                    for (g = 0; g < c; g++) {
                      h = f[g], b[g] += h + (n[g] - h) * e;
                    }
                  }
                } else {
                  for (g = 0; g < c; g++) {
                    h = f[g], b[g] = h + (n[g] - h) * e;
                  }
                }
              } else {
                switch(m) {
                  case k.setup:
                    if (null == h.bones) {
                      for (m = h.vertices, q = 0; q < c; q++) {
                        h = f[q], r = m[q], b[q] = r + (h + (n[q] - h) * e - r) * g;
                      }
                    } else {
                      for (m = 0; m < c; m++) {
                        h = f[m], b[m] = (h + (n[m] - h) * e) * g;
                      }
                    }
                    break;
                  case k.first:
                  case k.replace:
                    for (m = 0; m < c; m++) {
                      h = f[m], b[m] += (h + (n[m] - h) * e - b[m]) * g;
                    }
                    break;
                  case k.add:
                    if (null == h.bones) {
                      for (m = h.vertices, r = 0; r < c; r++) {
                        h = f[r], b[r] += (h + (n[r] - h) * e - m[r]) * g;
                      }
                    } else {
                      for (m = 0; m < c; m++) {
                        h = f[m], b[m] += (h + (n[m] - h) * e) * g;
                      }
                    }
                }
              }
            }
          }
        }
      }
    };
    return e;
  }(f);
  a.DeformTimeline = e;
  e = function() {
    function b(b) {
      this.frames = a.Utils.newFloatArray(b);
      this.events = Array(b);
    }
    b.prototype.getPropertyId = function() {
      return g.event << 24;
    };
    b.prototype.getFrameCount = function() {
      return this.frames.length;
    };
    b.prototype.setFrame = function(a, c) {
      this.frames[a] = c.time;
      this.events[a] = c;
    };
    b.prototype.apply = function(a, c, b, e, f, g, m) {
      if (null != e) {
        var h = this.frames, k = this.frames.length;
        if (c > b) {
          this.apply(a, c, Number.MAX_VALUE, e, f, g, m), c = -1;
        } else {
          if (c >= h[k - 1]) {
            return;
          }
        }
        if (!(b < h[0])) {
          if (c < h[0]) {
            a = 0;
          } else {
            for (a = d.binarySearch(h, c), c = h[a]; 0 < a && h[a - 1] == c;) {
              a--;
            }
          }
          for (; a < k && b >= h[a]; a++) {
            e.push(this.events[a]);
          }
        }
      }
    };
    return b;
  }();
  a.EventTimeline = e;
  e = function() {
    function e(b) {
      this.frames = a.Utils.newFloatArray(b);
      this.drawOrders = Array(b);
    }
    e.prototype.getPropertyId = function() {
      return g.drawOrder << 24;
    };
    e.prototype.getFrameCount = function() {
      return this.frames.length;
    };
    e.prototype.setFrame = function(a, c, b) {
      this.frames[a] = c;
      this.drawOrders[a] = b;
    };
    e.prototype.apply = function(e, c, f, g, m, r, q) {
      c = e.drawOrder;
      g = e.slots;
      if (q == b.mixOut && r == k.setup) {
        a.Utils.arrayCopy(e.slots, 0, e.drawOrder, 0, e.slots.length);
      } else {
        if (q = this.frames, f < q[0]) {
          r != k.setup && r != k.first || a.Utils.arrayCopy(e.slots, 0, e.drawOrder, 0, e.slots.length);
        } else {
          if (e = f >= q[q.length - 1] ? q.length - 1 : d.binarySearch(q, f) - 1, e = this.drawOrders[e], null == e) {
            a.Utils.arrayCopy(g, 0, c, 0, g.length);
          } else {
            for (f = 0, r = e.length; f < r; f++) {
              c[f] = g[e[f]];
            }
          }
        }
      }
    };
    return e;
  }();
  a.DrawOrderTimeline = e;
  e = function(e) {
    function f(c) {
      var b = e.call(this, c) || this;
      b.frames = a.Utils.newFloatArray(c * f.ENTRIES);
      return b;
    }
    __extends(f, e);
    f.prototype.getPropertyId = function() {
      return (g.ikConstraint << 24) + this.ikConstraintIndex;
    };
    f.prototype.setFrame = function(a, b, e, d, g, m, k) {
      a *= f.ENTRIES;
      this.frames[a] = b;
      this.frames[a + f.MIX] = e;
      this.frames[a + f.SOFTNESS] = d;
      this.frames[a + f.BEND_DIRECTION] = g;
      this.frames[a + f.COMPRESS] = m ? 1 : 0;
      this.frames[a + f.STRETCH] = k ? 1 : 0;
    };
    f.prototype.apply = function(a, e, g, m, n, r, q) {
      e = this.frames;
      a = a.ikConstraints[this.ikConstraintIndex];
      if (a.active) {
        if (g < e[0]) {
          switch(r) {
            case k.setup:
              a.mix = a.data.mix;
              a.softness = a.data.softness;
              a.bendDirection = a.data.bendDirection;
              a.compress = a.data.compress;
              a.stretch = a.data.stretch;
              break;
            case k.first:
              a.mix += (a.data.mix - a.mix) * n, a.softness += (a.data.softness - a.softness) * n, a.bendDirection = a.data.bendDirection, a.compress = a.data.compress, a.stretch = a.data.stretch;
          }
        } else {
          if (g >= e[e.length - f.ENTRIES]) {
            r == k.setup ? (a.mix = a.data.mix + (e[e.length + f.PREV_MIX] - a.data.mix) * n, a.softness = a.data.softness + (e[e.length + f.PREV_SOFTNESS] - a.data.softness) * n, q == b.mixOut ? (a.bendDirection = a.data.bendDirection, a.compress = a.data.compress, a.stretch = a.data.stretch) : (a.bendDirection = e[e.length + f.PREV_BEND_DIRECTION], a.compress = 0 != e[e.length + f.PREV_COMPRESS], a.stretch = 0 != e[e.length + f.PREV_STRETCH])) : (a.mix += (e[e.length + f.PREV_MIX] - a.mix) * n, 
            a.softness += (e[e.length + f.PREV_SOFTNESS] - a.softness) * n, q == b.mixIn && (a.bendDirection = e[e.length + f.PREV_BEND_DIRECTION], a.compress = 0 != e[e.length + f.PREV_COMPRESS], a.stretch = 0 != e[e.length + f.PREV_STRETCH]));
          } else {
            m = d.binarySearch(e, g, f.ENTRIES);
            var c = e[m + f.PREV_MIX], h = e[m + f.PREV_SOFTNESS], p = e[m];
            g = this.getCurvePercent(m / f.ENTRIES - 1, 1 - (g - p) / (e[m + f.PREV_TIME] - p));
            r == k.setup ? (a.mix = a.data.mix + (c + (e[m + f.MIX] - c) * g - a.data.mix) * n, a.softness = a.data.softness + (h + (e[m + f.SOFTNESS] - h) * g - a.data.softness) * n, q == b.mixOut ? (a.bendDirection = a.data.bendDirection, a.compress = a.data.compress, a.stretch = a.data.stretch) : (a.bendDirection = e[m + f.PREV_BEND_DIRECTION], a.compress = 0 != e[m + f.PREV_COMPRESS], a.stretch = 0 != e[m + f.PREV_STRETCH])) : (a.mix += (c + (e[m + f.MIX] - c) * g - a.mix) * n, a.softness += 
            (h + (e[m + f.SOFTNESS] - h) * g - a.softness) * n, q == b.mixIn && (a.bendDirection = e[m + f.PREV_BEND_DIRECTION], a.compress = 0 != e[m + f.PREV_COMPRESS], a.stretch = 0 != e[m + f.PREV_STRETCH]));
          }
        }
      }
    };
    f.ENTRIES = 6;
    f.PREV_TIME = -6;
    f.PREV_MIX = -5;
    f.PREV_SOFTNESS = -4;
    f.PREV_BEND_DIRECTION = -3;
    f.PREV_COMPRESS = -2;
    f.PREV_STRETCH = -1;
    f.MIX = 1;
    f.SOFTNESS = 2;
    f.BEND_DIRECTION = 3;
    f.COMPRESS = 4;
    f.STRETCH = 5;
    return f;
  }(f);
  a.IkConstraintTimeline = e;
  e = function(b) {
    function e(c) {
      var d = b.call(this, c) || this;
      d.frames = a.Utils.newFloatArray(c * e.ENTRIES);
      return d;
    }
    __extends(e, b);
    e.prototype.getPropertyId = function() {
      return (g.transformConstraint << 24) + this.transformConstraintIndex;
    };
    e.prototype.setFrame = function(a, b, d, f, g, m) {
      a *= e.ENTRIES;
      this.frames[a] = b;
      this.frames[a + e.ROTATE] = d;
      this.frames[a + e.TRANSLATE] = f;
      this.frames[a + e.SCALE] = g;
      this.frames[a + e.SHEAR] = m;
    };
    e.prototype.apply = function(a, b, f, g, m, n, r) {
      b = this.frames;
      a = a.transformConstraints[this.transformConstraintIndex];
      if (a.active) {
        if (f < b[0]) {
          switch(f = a.data, n) {
            case k.setup:
              a.rotateMix = f.rotateMix;
              a.translateMix = f.translateMix;
              a.scaleMix = f.scaleMix;
              a.shearMix = f.shearMix;
              break;
            case k.first:
              a.rotateMix += (f.rotateMix - a.rotateMix) * m, a.translateMix += (f.translateMix - a.translateMix) * m, a.scaleMix += (f.scaleMix - a.scaleMix) * m, a.shearMix += (f.shearMix - a.shearMix) * m;
          }
        } else {
          if (f >= b[b.length - e.ENTRIES]) {
            f = b.length;
            g = b[f + e.PREV_ROTATE];
            r = b[f + e.PREV_TRANSLATE];
            var c = b[f + e.PREV_SCALE];
            var h = b[f + e.PREV_SHEAR];
          } else {
            var q = d.binarySearch(b, f, e.ENTRIES);
            g = b[q + e.PREV_ROTATE];
            r = b[q + e.PREV_TRANSLATE];
            c = b[q + e.PREV_SCALE];
            h = b[q + e.PREV_SHEAR];
            var p = b[q];
            f = this.getCurvePercent(q / e.ENTRIES - 1, 1 - (f - p) / (b[q + e.PREV_TIME] - p));
            g += (b[q + e.ROTATE] - g) * f;
            r += (b[q + e.TRANSLATE] - r) * f;
            c += (b[q + e.SCALE] - c) * f;
            h += (b[q + e.SHEAR] - h) * f;
          }
          n == k.setup ? (f = a.data, a.rotateMix = f.rotateMix + (g - f.rotateMix) * m, a.translateMix = f.translateMix + (r - f.translateMix) * m, a.scaleMix = f.scaleMix + (c - f.scaleMix) * m, a.shearMix = f.shearMix + (h - f.shearMix) * m) : (a.rotateMix += (g - a.rotateMix) * m, a.translateMix += (r - a.translateMix) * m, a.scaleMix += (c - a.scaleMix) * m, a.shearMix += (h - a.shearMix) * m);
        }
      }
    };
    e.ENTRIES = 5;
    e.PREV_TIME = -5;
    e.PREV_ROTATE = -4;
    e.PREV_TRANSLATE = -3;
    e.PREV_SCALE = -2;
    e.PREV_SHEAR = -1;
    e.ROTATE = 1;
    e.TRANSLATE = 2;
    e.SCALE = 3;
    e.SHEAR = 4;
    return e;
  }(f);
  a.TransformConstraintTimeline = e;
  e = function(b) {
    function e(c) {
      var d = b.call(this, c) || this;
      d.frames = a.Utils.newFloatArray(c * e.ENTRIES);
      return d;
    }
    __extends(e, b);
    e.prototype.getPropertyId = function() {
      return (g.pathConstraintPosition << 24) + this.pathConstraintIndex;
    };
    e.prototype.setFrame = function(a, b, d) {
      a *= e.ENTRIES;
      this.frames[a] = b;
      this.frames[a + e.VALUE] = d;
    };
    e.prototype.apply = function(a, b, f, g, m, n, r) {
      b = this.frames;
      a = a.pathConstraints[this.pathConstraintIndex];
      if (a.active) {
        if (f < b[0]) {
          switch(n) {
            case k.setup:
              a.position = a.data.position;
              break;
            case k.first:
              a.position += (a.data.position - a.position) * m;
          }
        } else {
          if (f >= b[b.length - e.ENTRIES]) {
            g = b[b.length + e.PREV_VALUE];
          } else {
            r = d.binarySearch(b, f, e.ENTRIES);
            g = b[r + e.PREV_VALUE];
            var c = b[r];
            f = this.getCurvePercent(r / e.ENTRIES - 1, 1 - (f - c) / (b[r + e.PREV_TIME] - c));
            g += (b[r + e.VALUE] - g) * f;
          }
          a.position = n == k.setup ? a.data.position + (g - a.data.position) * m : a.position + (g - a.position) * m;
        }
      }
    };
    e.ENTRIES = 2;
    e.PREV_TIME = -2;
    e.PREV_VALUE = -1;
    e.VALUE = 1;
    return e;
  }(f);
  a.PathConstraintPositionTimeline = e;
  e = function(a) {
    function b(c) {
      return a.call(this, c) || this;
    }
    __extends(b, a);
    b.prototype.getPropertyId = function() {
      return (g.pathConstraintSpacing << 24) + this.pathConstraintIndex;
    };
    b.prototype.apply = function(a, e, f, g, m, n, r) {
      e = this.frames;
      a = a.pathConstraints[this.pathConstraintIndex];
      if (a.active) {
        if (f < e[0]) {
          switch(n) {
            case k.setup:
              a.spacing = a.data.spacing;
              break;
            case k.first:
              a.spacing += (a.data.spacing - a.spacing) * m;
          }
        } else {
          if (f >= e[e.length - b.ENTRIES]) {
            g = e[e.length + b.PREV_VALUE];
          } else {
            r = d.binarySearch(e, f, b.ENTRIES);
            g = e[r + b.PREV_VALUE];
            var c = e[r];
            f = this.getCurvePercent(r / b.ENTRIES - 1, 1 - (f - c) / (e[r + b.PREV_TIME] - c));
            g += (e[r + b.VALUE] - g) * f;
          }
          a.spacing = n == k.setup ? a.data.spacing + (g - a.data.spacing) * m : a.spacing + (g - a.spacing) * m;
        }
      }
    };
    return b;
  }(e);
  a.PathConstraintSpacingTimeline = e;
  f = function(b) {
    function e(c) {
      var d = b.call(this, c) || this;
      d.frames = a.Utils.newFloatArray(c * e.ENTRIES);
      return d;
    }
    __extends(e, b);
    e.prototype.getPropertyId = function() {
      return (g.pathConstraintMix << 24) + this.pathConstraintIndex;
    };
    e.prototype.setFrame = function(a, b, d, f) {
      a *= e.ENTRIES;
      this.frames[a] = b;
      this.frames[a + e.ROTATE] = d;
      this.frames[a + e.TRANSLATE] = f;
    };
    e.prototype.apply = function(a, b, f, g, m, n, r) {
      b = this.frames;
      a = a.pathConstraints[this.pathConstraintIndex];
      if (a.active) {
        if (f < b[0]) {
          switch(n) {
            case k.setup:
              a.rotateMix = a.data.rotateMix;
              a.translateMix = a.data.translateMix;
              break;
            case k.first:
              a.rotateMix += (a.data.rotateMix - a.rotateMix) * m, a.translateMix += (a.data.translateMix - a.translateMix) * m;
          }
        } else {
          if (f >= b[b.length - e.ENTRIES]) {
            g = b[b.length + e.PREV_ROTATE], r = b[b.length + e.PREV_TRANSLATE];
          } else {
            var c = d.binarySearch(b, f, e.ENTRIES);
            g = b[c + e.PREV_ROTATE];
            r = b[c + e.PREV_TRANSLATE];
            var h = b[c];
            f = this.getCurvePercent(c / e.ENTRIES - 1, 1 - (f - h) / (b[c + e.PREV_TIME] - h));
            g += (b[c + e.ROTATE] - g) * f;
            r += (b[c + e.TRANSLATE] - r) * f;
          }
          n == k.setup ? (a.rotateMix = a.data.rotateMix + (g - a.data.rotateMix) * m, a.translateMix = a.data.translateMix + (r - a.data.translateMix) * m) : (a.rotateMix += (g - a.rotateMix) * m, a.translateMix += (r - a.translateMix) * m);
        }
      }
    };
    e.ENTRIES = 3;
    e.PREV_TIME = -3;
    e.PREV_ROTATE = -2;
    e.PREV_TRANSLATE = -1;
    e.ROTATE = 1;
    e.TRANSLATE = 2;
    return e;
  }(f);
  a.PathConstraintMixTimeline = f;
})(spine || (spine = {}));
(function(a) {
  var d = function() {
    function d(e) {
      this.tracks = [];
      this.timeScale = 1;
      this.events = [];
      this.listeners = [];
      this.queue = new b(this);
      this.propertyIDs = new a.IntSet;
      this.animationsChanged = !1;
      this.trackEntryPool = new a.Pool(function() {
        return new k;
      });
      this.data = e;
    }
    d.prototype.update = function(a) {
      a *= this.timeScale;
      for (var b = this.tracks, e = 0, d = b.length; e < d; e++) {
        var f = b[e];
        if (null != f) {
          f.animationLast = f.nextAnimationLast;
          f.trackLast = f.nextTrackLast;
          var c = a * f.timeScale;
          if (0 < f.delay) {
            f.delay -= c;
            if (0 < f.delay) {
              continue;
            }
            c = -f.delay;
            f.delay = 0;
          }
          var h = f.next;
          if (null != h) {
            var g = f.trackLast - h.delay;
            if (0 <= g) {
              h.delay = 0;
              h.trackTime += 0 == f.timeScale ? 0 : (g / f.timeScale + a) * h.timeScale;
              f.trackTime += c;
              for (this.setCurrent(e, h, !0); null != h.mixingFrom;) {
                h.mixTime += a, h = h.mixingFrom;
              }
              continue;
            }
          } else {
            if (f.trackLast >= f.trackEnd && null == f.mixingFrom) {
              b[e] = null;
              this.queue.end(f);
              this.disposeNext(f);
              continue;
            }
          }
          if (null != f.mixingFrom && this.updateMixingFrom(f, a)) {
            for (h = f.mixingFrom, f.mixingFrom = null, null != h && (h.mixingTo = null); null != h;) {
              this.queue.end(h), h = h.mixingFrom;
            }
          }
          f.trackTime += c;
        }
      }
      this.queue.drain();
    };
    d.prototype.updateMixingFrom = function(a, b) {
      var e = a.mixingFrom;
      if (null == e) {
        return !0;
      }
      var d = this.updateMixingFrom(e, b);
      e.animationLast = e.nextAnimationLast;
      e.trackLast = e.nextTrackLast;
      if (0 < a.mixTime && a.mixTime >= a.mixDuration) {
        if (0 == e.totalAlpha || 0 == a.mixDuration) {
          a.mixingFrom = e.mixingFrom, null != e.mixingFrom && (e.mixingFrom.mixingTo = a), a.interruptAlpha = e.interruptAlpha, this.queue.end(e);
        }
        return d;
      }
      e.trackTime += b * e.timeScale;
      a.mixTime += b;
      return !1;
    };
    d.prototype.apply = function(b) {
      if (null == b) {
        throw Error("skeleton cannot be null.");
      }
      this.animationsChanged && this._animationsChanged();
      for (var e = this.events, f = this.tracks, g = !1, k = 0, c = f.length; k < c; k++) {
        var h = f[k];
        if (!(null == h || 0 < h.delay)) {
          g = !0;
          var t = 0 == k ? a.MixBlend.first : h.mixBlend, z = h.alpha;
          null != h.mixingFrom ? z *= this.applyMixingFrom(h, b, t) : h.trackTime >= h.trackEnd && null == h.next && (z = 0);
          var y = h.animationLast, x = h.getAnimationTime(), p = h.animation.timelines.length, v = h.animation.timelines;
          if (0 == k && 1 == z || t == a.MixBlend.add) {
            for (var w = 0; w < p; w++) {
              a.Utils.webkit602BugfixHelper(z, t), v[w].apply(b, y, x, e, z, t, a.MixDirection.mixIn);
            }
          } else {
            var C = h.timelineMode, A = 0 == h.timelinesRotation.length;
            A && a.Utils.setArraySize(h.timelinesRotation, p << 1, null);
            var D = h.timelinesRotation;
            for (w = 0; w < p; w++) {
              var F = v[w], B = (C[w] & d.NOT_LAST - 1) == d.SUBSEQUENT ? t : a.MixBlend.setup;
              F instanceof a.RotateTimeline ? this.applyRotateTimeline(F, b, x, z, B, D, w << 1, A) : (a.Utils.webkit602BugfixHelper(z, t), F.apply(b, y, x, e, z, B, a.MixDirection.mixIn));
            }
          }
          this.queueEvents(h, x);
          e.length = 0;
          h.nextAnimationLast = x;
          h.nextTrackLast = h.trackTime;
        }
      }
      this.queue.drain();
      return g;
    };
    d.prototype.applyMixingFrom = function(b, f, g) {
      var e = b.mixingFrom;
      null != e.mixingFrom && this.applyMixingFrom(e, f, g);
      if (0 == b.mixDuration) {
        var k = 1;
        g == a.MixBlend.first && (g = a.MixBlend.setup);
      } else {
        k = b.mixTime / b.mixDuration, 1 < k && (k = 1), g != a.MixBlend.first && (g = e.mixBlend);
      }
      var c = k < e.eventThreshold ? this.events : null, h = k < e.attachmentThreshold, r = k < e.drawOrderThreshold, q = e.animationLast, y = e.getAnimationTime(), x = e.animation.timelines.length, p = e.animation.timelines, v = e.alpha * b.interruptAlpha, w = v * (1 - k);
      if (g == a.MixBlend.add) {
        for (var C = 0; C < x; C++) {
          p[C].apply(f, q, y, c, w, g, a.MixDirection.mixOut);
        }
      } else {
        var A = e.timelineMode, D = e.timelineHoldMix, F = 0 == e.timelinesRotation.length;
        F && a.Utils.setArraySize(e.timelinesRotation, x << 1, null);
        var B = e.timelinesRotation;
        for (C = e.totalAlpha = 0; C < x; C++) {
          var E = p[C], I = a.MixDirection.mixOut;
          switch(A[C] & d.NOT_LAST - 1) {
            case d.SUBSEQUENT:
              var K = g;
              if (!h && E instanceof a.AttachmentTimeline) {
                if ((A[C] & d.NOT_LAST) == d.NOT_LAST) {
                  continue;
                }
                K = a.MixBlend.setup;
              }
              if (!r && E instanceof a.DrawOrderTimeline) {
                continue;
              }
              var J = w;
              break;
            case d.FIRST:
              K = a.MixBlend.setup;
              J = w;
              break;
            case d.HOLD:
              K = a.MixBlend.setup;
              J = v;
              break;
            default:
              K = a.MixBlend.setup, J = D[C], J = v * Math.max(0, 1 - J.mixTime / J.mixDuration);
          }
          e.totalAlpha += J;
          if (E instanceof a.RotateTimeline) {
            this.applyRotateTimeline(E, f, y, J, K, B, C << 1, F);
          } else {
            a.Utils.webkit602BugfixHelper(J, g);
            if (K == a.MixBlend.setup) {
              if (E instanceof a.AttachmentTimeline) {
                if (h || (A[C] & d.NOT_LAST) == d.NOT_LAST) {
                  I = a.MixDirection.mixIn;
                }
              } else {
                E instanceof a.DrawOrderTimeline && r && (I = a.MixDirection.mixIn);
              }
            }
            E.apply(f, q, y, c, J, K, I);
          }
        }
      }
      0 < b.mixDuration && this.queueEvents(e, y);
      this.events.length = 0;
      e.nextAnimationLast = y;
      e.nextTrackLast = e.trackTime;
      return k;
    };
    d.prototype.applyRotateTimeline = function(b, d, f, g, k, c, h, t) {
      t && (c[h] = 0);
      if (1 == g) {
        b.apply(d, 0, f, null, 1, k, a.MixDirection.mixIn);
      } else {
        var e = b.frames;
        d = d.bones[b.boneIndex];
        if (d.active) {
          if (f < e[0]) {
            switch(k) {
              case a.MixBlend.setup:
                d.rotation = d.data.rotation;
              default:
                return;
              case a.MixBlend.first:
                k = d.rotation, e = d.data.rotation;
            }
          } else {
            if (k = k == a.MixBlend.setup ? d.data.rotation : d.rotation, f >= e[e.length - a.RotateTimeline.ENTRIES]) {
              e = d.data.rotation + e[e.length + a.RotateTimeline.PREV_ROTATION];
            } else {
              var m = a.Animation.binarySearch(e, f, a.RotateTimeline.ENTRIES), n = e[m + a.RotateTimeline.PREV_ROTATION], r = e[m];
              b = b.getCurvePercent((m >> 1) - 1, 1 - (f - r) / (e[m + a.RotateTimeline.PREV_TIME] - r));
              e = e[m + a.RotateTimeline.ROTATION] - n;
              e = n + (e - 360 * (16384 - (16384.499999999996 - e / 360 | 0))) * b + d.data.rotation;
              e -= 360 * (16384 - (16384.499999999996 - e / 360 | 0));
            }
          }
          e -= k;
          e -= 360 * (16384 - (16384.499999999996 - e / 360 | 0));
          0 == e ? n = c[h] : (t ? (t = 0, n = e) : (t = c[h], n = c[h + 1]), b = 0 < e, f = 0 <= t, a.MathUtils.signum(n) != a.MathUtils.signum(e) && 90 >= Math.abs(n) && (180 < Math.abs(t) && (t += 360 * a.MathUtils.signum(t)), f = b), n = e + t - t % 360, f != b && (n += 360 * a.MathUtils.signum(t)), c[h] = n);
          c[h + 1] = e;
          k += n * g;
          d.rotation = k - 360 * (16384 - (16384.499999999996 - k / 360 | 0));
        }
      }
    };
    d.prototype.queueEvents = function(a, b) {
      for (var e = a.animationStart, d = a.animationEnd, f = d - e, c = a.trackLast % f, h = this.events, g = 0, k = h.length; g < k; g++) {
        var r = h[g];
        if (r.time < c) {
          break;
        }
        r.time > d || this.queue.event(a, r);
      }
      for ((a.loop ? 0 == f || c > a.trackTime % f : b >= d && a.animationLast < d) && this.queue.complete(a); g < k; g++) {
        h[g].time < e || this.queue.event(a, h[g]);
      }
    };
    d.prototype.clearTracks = function() {
      var a = this.queue.drainDisabled;
      this.queue.drainDisabled = !0;
      for (var b = 0, d = this.tracks.length; b < d; b++) {
        this.clearTrack(b);
      }
      this.tracks.length = 0;
      this.queue.drainDisabled = a;
      this.queue.drain();
    };
    d.prototype.clearTrack = function(a) {
      if (!(a >= this.tracks.length) && (a = this.tracks[a], null != a)) {
        this.queue.end(a);
        this.disposeNext(a);
        for (var b = a;;) {
          var e = b.mixingFrom;
          if (null == e) {
            break;
          }
          this.queue.end(e);
          b.mixingFrom = null;
          b.mixingTo = null;
          b = e;
        }
        this.tracks[a.trackIndex] = null;
        this.queue.drain();
      }
    };
    d.prototype.setCurrent = function(a, b, d) {
      var e = this.expandToIndex(a);
      this.tracks[a] = b;
      null != e && (d && this.queue.interrupt(e), b.mixingFrom = e, e.mixingTo = b, b.mixTime = 0, null != e.mixingFrom && 0 < e.mixDuration && (b.interruptAlpha *= Math.min(1, e.mixTime / e.mixDuration)), e.timelinesRotation.length = 0);
      this.queue.start(b);
    };
    d.prototype.setAnimation = function(a, b, d) {
      var e = this.data.skeletonData.findAnimation(b);
      if (null == e) {
        throw Error("Animation not found: " + b);
      }
      return this.setAnimationWith(a, e, d);
    };
    d.prototype.setAnimationWith = function(a, b, d) {
      if (null == b) {
        throw Error("animation cannot be null.");
      }
      var e = !0, f = this.expandToIndex(a);
      null != f && (-1 == f.nextTrackLast ? (this.tracks[a] = f.mixingFrom, this.queue.interrupt(f), this.queue.end(f), this.disposeNext(f), f = f.mixingFrom, e = !1) : this.disposeNext(f));
      b = this.trackEntry(a, b, d, f);
      this.setCurrent(a, b, e);
      this.queue.drain();
      return b;
    };
    d.prototype.addAnimation = function(a, b, d, f) {
      var e = this.data.skeletonData.findAnimation(b);
      if (null == e) {
        throw Error("Animation not found: " + b);
      }
      return this.addAnimationWith(a, e, d, f);
    };
    d.prototype.addAnimationWith = function(a, b, d, f) {
      if (null == b) {
        throw Error("animation cannot be null.");
      }
      var e = this.expandToIndex(a);
      if (null != e) {
        for (; null != e.next;) {
          e = e.next;
        }
      }
      d = this.trackEntry(a, b, d, e);
      null == e ? (this.setCurrent(a, d, !0), this.queue.drain()) : (e.next = d, 0 >= f && (a = e.animationEnd - e.animationStart, 0 != a ? (f = e.loop ? f + a * (1 + (e.trackTime / a | 0)) : f + Math.max(a, e.trackTime), f -= this.data.getMix(e.animation, b)) : f = e.trackTime));
      d.delay = f;
      return d;
    };
    d.prototype.setEmptyAnimation = function(a, b) {
      a = this.setAnimationWith(a, d.emptyAnimation, !1);
      a.mixDuration = b;
      a.trackEnd = b;
      return a;
    };
    d.prototype.addEmptyAnimation = function(a, b, f) {
      0 >= f && (f -= b);
      a = this.addAnimationWith(a, d.emptyAnimation, !1, f);
      a.mixDuration = b;
      a.trackEnd = b;
      return a;
    };
    d.prototype.setEmptyAnimations = function(a) {
      var b = this.queue.drainDisabled;
      this.queue.drainDisabled = !0;
      for (var e = 0, d = this.tracks.length; e < d; e++) {
        var f = this.tracks[e];
        null != f && this.setEmptyAnimation(f.trackIndex, a);
      }
      this.queue.drainDisabled = b;
      this.queue.drain();
    };
    d.prototype.expandToIndex = function(b) {
      if (b < this.tracks.length) {
        return this.tracks[b];
      }
      a.Utils.ensureArrayCapacity(this.tracks, b + 1, null);
      this.tracks.length = b + 1;
      return null;
    };
    d.prototype.trackEntry = function(b, d, f, g) {
      var e = this.trackEntryPool.obtain();
      e.trackIndex = b;
      e.animation = d;
      e.loop = f;
      e.holdPrevious = !1;
      e.eventThreshold = 0;
      e.attachmentThreshold = 0;
      e.drawOrderThreshold = 0;
      e.animationStart = 0;
      e.animationEnd = d.duration;
      e.animationLast = -1;
      e.nextAnimationLast = -1;
      e.delay = 0;
      e.trackTime = 0;
      e.trackLast = -1;
      e.nextTrackLast = -1;
      e.trackEnd = Number.MAX_VALUE;
      e.timeScale = 1;
      e.alpha = 1;
      e.interruptAlpha = 1;
      e.mixTime = 0;
      e.mixDuration = null == g ? 0 : this.data.getMix(g.animation, d);
      e.mixBlend = a.MixBlend.replace;
      return e;
    };
    d.prototype.disposeNext = function(a) {
      for (var b = a.next; null != b;) {
        this.queue.dispose(b), b = b.next;
      }
      a.next = null;
    };
    d.prototype._animationsChanged = function() {
      this.animationsChanged = !1;
      this.propertyIDs.clear();
      for (var b = 0, d = this.tracks.length; b < d; b++) {
        var f = this.tracks[b];
        if (null != f) {
          for (; null != f.mixingFrom;) {
            f = f.mixingFrom;
          }
          do {
            null != f.mixingFrom && f.mixBlend == a.MixBlend.add || this.computeHold(f), f = f.mixingTo;
          } while (null != f);
        }
      }
      this.propertyIDs.clear();
      for (b = this.tracks.length - 1; 0 <= b; b--) {
        for (f = this.tracks[b]; null != f;) {
          this.computeNotLast(f), f = f.mixingFrom;
        }
      }
    };
    d.prototype.computeHold = function(b) {
      var e = b.mixingTo, f = b.animation.timelines, g = b.animation.timelines.length, k = a.Utils.setArraySize(b.timelineMode, g);
      b.timelineHoldMix.length = 0;
      var c = a.Utils.setArraySize(b.timelineHoldMix, g), h = this.propertyIDs;
      if (null != e && e.holdPrevious) {
        for (var t = 0; t < g; t++) {
          h.add(f[t].getPropertyId()), k[t] = d.HOLD;
        }
      } else {
        a: for (t = 0; t < g; t++) {
          var z = f[t], y = z.getPropertyId();
          if (h.add(y)) {
            if (null == e || z instanceof a.AttachmentTimeline || z instanceof a.DrawOrderTimeline || z instanceof a.EventTimeline || !e.animation.hasTimeline(y)) {
              k[t] = d.FIRST;
            } else {
              for (z = e.mixingTo; null != z; z = z.mixingTo) {
                if (!z.animation.hasTimeline(y)) {
                  if (0 < b.mixDuration) {
                    k[t] = d.HOLD_MIX;
                    c[t] = z;
                    continue a;
                  }
                  break;
                }
              }
              k[t] = d.HOLD;
            }
          } else {
            k[t] = d.SUBSEQUENT;
          }
        }
      }
    };
    d.prototype.computeNotLast = function(b) {
      var e = b.animation.timelines, f = b.animation.timelines.length;
      b = b.timelineMode;
      for (var g = this.propertyIDs, k = 0; k < f; k++) {
        e[k] instanceof a.AttachmentTimeline && (g.add(e[k].slotIndex) || (b[k] |= d.NOT_LAST));
      }
    };
    d.prototype.getCurrent = function(a) {
      return a >= this.tracks.length ? null : this.tracks[a];
    };
    d.prototype.addListener = function(a) {
      if (null == a) {
        throw Error("listener cannot be null.");
      }
      this.listeners.push(a);
    };
    d.prototype.removeListener = function(a) {
      a = this.listeners.indexOf(a);
      0 <= a && this.listeners.splice(a, 1);
    };
    d.prototype.clearListeners = function() {
      this.listeners.length = 0;
    };
    d.prototype.clearListenerNotifications = function() {
      this.queue.clear();
    };
    d.emptyAnimation = new a.Animation("<empty>", [], 0);
    d.SUBSEQUENT = 0;
    d.FIRST = 1;
    d.HOLD = 2;
    d.HOLD_MIX = 3;
    d.NOT_LAST = 4;
    return d;
  }();
  a.AnimationState = d;
  var k = function() {
    function b() {
      this.mixBlend = a.MixBlend.replace;
      this.timelineMode = [];
      this.timelineHoldMix = [];
      this.timelinesRotation = [];
    }
    b.prototype.reset = function() {
      this.listener = this.animation = this.mixingTo = this.mixingFrom = this.next = null;
      this.timelineMode.length = 0;
      this.timelineHoldMix.length = 0;
      this.timelinesRotation.length = 0;
    };
    b.prototype.getAnimationTime = function() {
      if (this.loop) {
        var a = this.animationEnd - this.animationStart;
        return 0 == a ? this.animationStart : this.trackTime % a + this.animationStart;
      }
      return Math.min(this.trackTime + this.animationStart, this.animationEnd);
    };
    b.prototype.setAnimationLast = function(a) {
      this.nextAnimationLast = this.animationLast = a;
    };
    b.prototype.isComplete = function() {
      return this.trackTime >= this.animationEnd - this.animationStart;
    };
    b.prototype.resetRotationDirections = function() {
      this.timelinesRotation.length = 0;
    };
    return b;
  }();
  a.TrackEntry = k;
  var b = function() {
    function a(a) {
      this.objects = [];
      this.drainDisabled = !1;
      this.animState = a;
    }
    a.prototype.start = function(a) {
      this.objects.push(g.start);
      this.objects.push(a);
      this.animState.animationsChanged = !0;
    };
    a.prototype.interrupt = function(a) {
      this.objects.push(g.interrupt);
      this.objects.push(a);
    };
    a.prototype.end = function(a) {
      this.objects.push(g.end);
      this.objects.push(a);
      this.animState.animationsChanged = !0;
    };
    a.prototype.dispose = function(a) {
      this.objects.push(g.dispose);
      this.objects.push(a);
    };
    a.prototype.complete = function(a) {
      this.objects.push(g.complete);
      this.objects.push(a);
    };
    a.prototype.event = function(a, b) {
      this.objects.push(g.event);
      this.objects.push(a);
      this.objects.push(b);
    };
    a.prototype.drain = function() {
      if (!this.drainDisabled) {
        this.drainDisabled = !0;
        for (var a = this.objects, b = this.animState.listeners, d = 0; d < a.length; d += 2) {
          var f = a[d + 1];
          switch(a[d]) {
            case g.start:
              null != f.listener && f.listener.start && f.listener.start(f);
              for (var k = 0; k < b.length; k++) {
                b[k].start && b[k].start(f);
              }
              break;
            case g.interrupt:
              null != f.listener && f.listener.interrupt && f.listener.interrupt(f);
              for (k = 0; k < b.length; k++) {
                b[k].interrupt && b[k].interrupt(f);
              }
              break;
            case g.end:
              for (null != f.listener && f.listener.end && f.listener.end(f), k = 0; k < b.length; k++) {
                b[k].end && b[k].end(f);
              }
            case g.dispose:
              null != f.listener && f.listener.dispose && f.listener.dispose(f);
              for (k = 0; k < b.length; k++) {
                b[k].dispose && b[k].dispose(f);
              }
              this.animState.trackEntryPool.free(f);
              break;
            case g.complete:
              null != f.listener && f.listener.complete && f.listener.complete(f);
              for (k = 0; k < b.length; k++) {
                b[k].complete && b[k].complete(f);
              }
              break;
            case g.event:
              var c = a[d++ + 2];
              null != f.listener && f.listener.event && f.listener.event(f, c);
              for (k = 0; k < b.length; k++) {
                b[k].event && b[k].event(f, c);
              }
          }
        }
        this.clear();
        this.drainDisabled = !1;
      }
    };
    a.prototype.clear = function() {
      this.objects.length = 0;
    };
    return a;
  }();
  a.EventQueue = b;
  var g;
  (function(a) {
    a[a.start = 0] = "start";
    a[a.interrupt = 1] = "interrupt";
    a[a.end = 2] = "end";
    a[a.dispose = 3] = "dispose";
    a[a.complete = 4] = "complete";
    a[a.event = 5] = "event";
  })(g = a.EventType || (a.EventType = {}));
  d = function() {
    function a() {
    }
    a.prototype.start = function(a) {
    };
    a.prototype.interrupt = function(a) {
    };
    a.prototype.end = function(a) {
    };
    a.prototype.dispose = function(a) {
    };
    a.prototype.complete = function(a) {
    };
    a.prototype.event = function(a, b) {
    };
    return a;
  }();
  a.AnimationStateAdapter = d;
})(spine || (spine = {}));
(function(a) {
  var d = function() {
    function a(a) {
      this.animationToMixTime = {};
      this.defaultMix = 0;
      if (null == a) {
        throw Error("skeletonData cannot be null.");
      }
      this.skeletonData = a;
    }
    a.prototype.setMix = function(a, d, f) {
      var b = this.skeletonData.findAnimation(a);
      if (null == b) {
        throw Error("Animation not found: " + a);
      }
      a = this.skeletonData.findAnimation(d);
      if (null == a) {
        throw Error("Animation not found: " + d);
      }
      this.setMixWith(b, a, f);
    };
    a.prototype.setMixWith = function(a, d, f) {
      if (null == a) {
        throw Error("from cannot be null.");
      }
      if (null == d) {
        throw Error("to cannot be null.");
      }
      this.animationToMixTime[a.name + "." + d.name] = f;
    };
    a.prototype.getMix = function(a, d) {
      a = this.animationToMixTime[a.name + "." + d.name];
      return void 0 === a ? this.defaultMix : a;
    };
    return a;
  }();
  a.AnimationStateData = d;
})(spine || (spine = {}));
(function(a) {
  var d = function() {
    function d(a, d) {
      void 0 === d && (d = "");
      this.assets = {};
      this.errors = {};
      this.loaded = this.toLoad = 0;
      this.rawDataUris = {};
      this.textureLoader = a;
      this.pathPrefix = d;
    }
    d.prototype.downloadText = function(a, d, f) {
      var b = new XMLHttpRequest;
      b.overrideMimeType("text/html");
      this.rawDataUris[a] && (a = this.rawDataUris[a]);
      b.open("GET", a, !0);
      b.onload = function() {
        200 == b.status ? d(b.responseText) : f(b.status, b.responseText);
      };
      b.onerror = function() {
        f(b.status, b.responseText);
      };
      b.send();
    };
    d.prototype.downloadBinary = function(a, d, f) {
      var b = new XMLHttpRequest;
      this.rawDataUris[a] && (a = this.rawDataUris[a]);
      b.open("GET", a, !0);
      b.responseType = "arraybuffer";
      b.onload = function() {
        200 == b.status ? d(new Uint8Array(b.response)) : f(b.status, b.responseText);
      };
      b.onerror = function() {
        f(b.status, b.responseText);
      };
      b.send();
    };
    d.prototype.setRawDataURI = function(a, d) {
      this.rawDataUris[this.pathPrefix + a] = d;
    };
    d.prototype.loadBinary = function(a, d, f) {
      var b = this;
      void 0 === d && (d = null);
      void 0 === f && (f = null);
      a = this.pathPrefix + a;
      this.toLoad++;
      this.downloadBinary(a, function(e) {
        b.assets[a] = e;
        d && d(a, e);
        b.toLoad--;
        b.loaded++;
      }, function(e, d) {
        b.errors[a] = "Couldn't load binary " + a + ": status " + status + ", " + d;
        f && f(a, "Couldn't load binary " + a + ": status " + status + ", " + d);
        b.toLoad--;
        b.loaded++;
      });
    };
    d.prototype.loadText = function(a, d, f) {
      var b = this;
      void 0 === d && (d = null);
      void 0 === f && (f = null);
      a = this.pathPrefix + a;
      this.toLoad++;
      this.downloadText(a, function(e) {
        b.assets[a] = e;
        d && d(a, e);
        b.toLoad--;
        b.loaded++;
      }, function(e, d) {
        b.errors[a] = "Couldn't load text " + a + ": status " + status + ", " + d;
        f && f(a, "Couldn't load text " + a + ": status " + status + ", " + d);
        b.toLoad--;
        b.loaded++;
      });
    };
    d.prototype.loadTexture = function(a, d, f) {
      var b = this;
      void 0 === d && (d = null);
      void 0 === f && (f = null);
      var g = a = this.pathPrefix + a;
      this.toLoad++;
      var k = new Image;
      k.crossOrigin = "anonymous";
      k.onload = function(e) {
        e = b.textureLoader(k);
        b.assets[g] = e;
        b.toLoad--;
        b.loaded++;
        d && d(a, k);
      };
      k.onerror = function(e) {
        b.errors[a] = "Couldn't load image " + a;
        b.toLoad--;
        b.loaded++;
        f && f(a, "Couldn't load image " + a);
      };
      this.rawDataUris[a] && (a = this.rawDataUris[a]);
      k.src = a;
    };
    d.prototype.loadTextureAtlas = function(b, d, f) {
      var e = this;
      void 0 === d && (d = null);
      void 0 === f && (f = null);
      var g = 0 <= b.lastIndexOf("/") ? b.substring(0, b.lastIndexOf("/")) : "";
      b = this.pathPrefix + b;
      this.toLoad++;
      this.downloadText(b, function(k) {
        var m = 0, n = [];
        try {
          new a.TextureAtlas(k, function(c) {
            n.push("" == g ? c : g + "/" + c);
            c = document.createElement("img");
            c.width = 16;
            c.height = 16;
            return new a.FakeTexture(c);
          });
        } catch (t) {
          var c = t;
          e.errors[b] = "Couldn't load texture atlas " + b + ": " + c.message;
          f && f(b, "Couldn't load texture atlas " + b + ": " + c.message);
          e.toLoad--;
          e.loaded++;
          return;
        }
        c = function(c) {
          var h = !1;
          e.loadTexture(c, function(c, r) {
            m++;
            if (m == n.length) {
              if (h) {
                e.errors[b] = "Couldn't load texture atlas page " + c + "} of atlas " + b, f && f(b, "Couldn't load texture atlas page " + c + " of atlas " + b), e.toLoad--, e.loaded++;
              } else {
                try {
                  var q = new a.TextureAtlas(k, function(a) {
                    return e.get("" == g ? a : g + "/" + a);
                  });
                  e.assets[b] = q;
                  d && d(b, q);
                  e.toLoad--;
                  e.loaded++;
                } catch (v) {
                  c = v, e.errors[b] = "Couldn't load texture atlas " + b + ": " + c.message, f && f(b, "Couldn't load texture atlas " + b + ": " + c.message), e.toLoad--, e.loaded++;
                }
              }
            }
          }, function(a, c) {
            h = !0;
            m++;
            m == n.length && (e.errors[b] = "Couldn't load texture atlas page " + a + "} of atlas " + b, f && f(b, "Couldn't load texture atlas page " + a + " of atlas " + b), e.toLoad--, e.loaded++);
          });
        };
        for (var h = 0; h < n.length; h++) {
          c(n[h]);
        }
      }, function(a, d) {
        e.errors[b] = "Couldn't load texture atlas " + b + ": status " + status + ", " + d;
        f && f(b, "Couldn't load texture atlas " + b + ": status " + status + ", " + d);
        e.toLoad--;
        e.loaded++;
      });
    };
    d.prototype.get = function(a) {
      a = this.pathPrefix + a;
      return this.assets[a];
    };
    d.prototype.remove = function(a) {
      a = this.pathPrefix + a;
      var b = this.assets[a];
      b.dispose && b.dispose();
      this.assets[a] = null;
    };
    d.prototype.removeAll = function() {
      for (var a in this.assets) {
        var d = this.assets[a];
        d.dispose && d.dispose();
      }
      this.assets = {};
    };
    d.prototype.isLoadingComplete = function() {
      return 0 == this.toLoad;
    };
    d.prototype.getToLoad = function() {
      return this.toLoad;
    };
    d.prototype.getLoaded = function() {
      return this.loaded;
    };
    d.prototype.dispose = function() {
      this.removeAll();
    };
    d.prototype.hasErrors = function() {
      return 0 < Object.keys(this.errors).length;
    };
    d.prototype.getErrors = function() {
      return this.errors;
    };
    return d;
  }();
  a.AssetManager = d;
})(spine || (spine = {}));
(function(a) {
  var d = function() {
    function d(a) {
      this.atlas = a;
    }
    d.prototype.newRegionAttachment = function(b, d, f) {
      b = this.atlas.findRegion(f);
      if (null == b) {
        throw Error("Region not found in atlas: " + f + " (region attachment: " + d + ")");
      }
      b.renderObject = b;
      d = new a.RegionAttachment(d);
      d.setRegion(b);
      return d;
    };
    d.prototype.newMeshAttachment = function(b, d, f) {
      b = this.atlas.findRegion(f);
      if (null == b) {
        throw Error("Region not found in atlas: " + f + " (mesh attachment: " + d + ")");
      }
      b.renderObject = b;
      d = new a.MeshAttachment(d);
      d.region = b;
      return d;
    };
    d.prototype.newBoundingBoxAttachment = function(b, d) {
      return new a.BoundingBoxAttachment(d);
    };
    d.prototype.newPathAttachment = function(b, d) {
      return new a.PathAttachment(d);
    };
    d.prototype.newPointAttachment = function(b, d) {
      return new a.PointAttachment(d);
    };
    d.prototype.newClippingAttachment = function(b, d) {
      return new a.ClippingAttachment(d);
    };
    return d;
  }();
  a.AtlasAttachmentLoader = d;
})(spine || (spine = {}));
(function(a) {
  a = a.BlendMode || (a.BlendMode = {});
  a[a.Normal = 0] = "Normal";
  a[a.Additive = 1] = "Additive";
  a[a.Multiply = 2] = "Multiply";
  a[a.Screen = 3] = "Screen";
})(spine || (spine = {}));
(function(a) {
  var d = function() {
    function d(a, d, f) {
      this.children = [];
      this.ashearY = this.ashearX = this.ascaleY = this.ascaleX = this.arotation = this.ay = this.ax = this.shearY = this.shearX = this.scaleY = this.scaleX = this.rotation = this.y = this.x = 0;
      this.appliedValid = !1;
      this.worldX = this.worldY = this.d = this.c = this.b = this.a = 0;
      this.active = this.sorted = !1;
      if (null == a) {
        throw Error("data cannot be null.");
      }
      if (null == d) {
        throw Error("skeleton cannot be null.");
      }
      this.data = a;
      this.skeleton = d;
      this.parent = f;
      this.setToSetupPose();
    }
    d.prototype.isActive = function() {
      return this.active;
    };
    d.prototype.update = function() {
      this.updateWorldTransformWith(this.x, this.y, this.rotation, this.scaleX, this.scaleY, this.shearX, this.shearY);
    };
    d.prototype.updateWorldTransform = function() {
      this.updateWorldTransformWith(this.x, this.y, this.rotation, this.scaleX, this.scaleY, this.shearX, this.shearY);
    };
    d.prototype.updateWorldTransformWith = function(b, d, f, e, k, q, m) {
      this.ax = b;
      this.ay = d;
      this.arotation = f;
      this.ascaleX = e;
      this.ascaleY = k;
      this.ashearX = q;
      this.ashearY = m;
      this.appliedValid = !0;
      var g = this.parent;
      if (null == g) {
        var c = this.skeleton;
        m = f + 90 + m;
        var h = c.scaleX, r = c.scaleY;
        this.a = a.MathUtils.cosDeg(f + q) * e * h;
        this.b = a.MathUtils.cosDeg(m) * k * h;
        this.c = a.MathUtils.sinDeg(f + q) * e * r;
        this.d = a.MathUtils.sinDeg(m) * k * r;
        this.worldX = b * h + c.x;
        this.worldY = d * r + c.y;
      } else {
        c = g.a;
        h = g.b;
        r = g.c;
        var z = g.d;
        this.worldX = c * b + h * d + g.worldX;
        this.worldY = r * b + z * d + g.worldY;
        switch(this.data.transformMode) {
          case a.TransformMode.Normal:
            m = f + 90 + m;
            b = a.MathUtils.cosDeg(f + q) * e;
            d = a.MathUtils.cosDeg(m) * k;
            e *= a.MathUtils.sinDeg(f + q);
            k *= a.MathUtils.sinDeg(m);
            this.a = c * b + h * e;
            this.b = c * d + h * k;
            this.c = r * b + z * e;
            this.d = r * d + z * k;
            return;
          case a.TransformMode.OnlyTranslation:
            m = f + 90 + m;
            this.a = a.MathUtils.cosDeg(f + q) * e;
            this.b = a.MathUtils.cosDeg(m) * k;
            this.c = a.MathUtils.sinDeg(f + q) * e;
            this.d = a.MathUtils.sinDeg(m) * k;
            break;
          case a.TransformMode.NoRotationOrReflection:
            b = c * c + r * r;
            1E-4 < b ? (b = Math.abs(c * z - h * r) / b, h = r * b, z = c * b, b = Math.atan2(r, c) * a.MathUtils.radDeg) : (r = c = 0, b = 90 - Math.atan2(z, h) * a.MathUtils.radDeg);
            q = f + q - b;
            m = f + m - b + 90;
            b = a.MathUtils.cosDeg(q) * e;
            d = a.MathUtils.cosDeg(m) * k;
            e *= a.MathUtils.sinDeg(q);
            k *= a.MathUtils.sinDeg(m);
            this.a = c * b - h * e;
            this.b = c * d - h * k;
            this.c = r * b + z * e;
            this.d = r * d + z * k;
            break;
          case a.TransformMode.NoScale:
          case a.TransformMode.NoScaleOrReflection:
            b = a.MathUtils.cosDeg(f), d = a.MathUtils.sinDeg(f), f = (c * b + h * d) / this.skeleton.scaleX, g = (r * b + z * d) / this.skeleton.scaleY, b = Math.sqrt(f * f + g * g), 1E-5 < b && (b = 1 / b), f *= b, g *= b, b = Math.sqrt(f * f + g * g), this.data.transformMode == a.TransformMode.NoScale && 0 > c * z - h * r != (0 > this.skeleton.scaleX != 0 > this.skeleton.scaleY) && (b = -b), h = Math.PI / 2 + Math.atan2(g, f), c = Math.cos(h) * b, h = Math.sin(h) * b, b = a.MathUtils.cosDeg(q) * 
            e, d = a.MathUtils.cosDeg(90 + m) * k, e *= a.MathUtils.sinDeg(q), k *= a.MathUtils.sinDeg(90 + m), this.a = f * b + c * e, this.b = f * d + c * k, this.c = g * b + h * e, this.d = g * d + h * k;
        }
        this.a *= this.skeleton.scaleX;
        this.b *= this.skeleton.scaleX;
        this.c *= this.skeleton.scaleY;
        this.d *= this.skeleton.scaleY;
      }
    };
    d.prototype.setToSetupPose = function() {
      var a = this.data;
      this.x = a.x;
      this.y = a.y;
      this.rotation = a.rotation;
      this.scaleX = a.scaleX;
      this.scaleY = a.scaleY;
      this.shearX = a.shearX;
      this.shearY = a.shearY;
    };
    d.prototype.getWorldRotationX = function() {
      return Math.atan2(this.c, this.a) * a.MathUtils.radDeg;
    };
    d.prototype.getWorldRotationY = function() {
      return Math.atan2(this.d, this.b) * a.MathUtils.radDeg;
    };
    d.prototype.getWorldScaleX = function() {
      return Math.sqrt(this.a * this.a + this.c * this.c);
    };
    d.prototype.getWorldScaleY = function() {
      return Math.sqrt(this.b * this.b + this.d * this.d);
    };
    d.prototype.updateAppliedTransform = function() {
      this.appliedValid = !0;
      var b = this.parent;
      if (null == b) {
        this.ax = this.worldX, this.ay = this.worldY, this.arotation = Math.atan2(this.c, this.a) * a.MathUtils.radDeg, this.ascaleX = Math.sqrt(this.a * this.a + this.c * this.c), this.ascaleY = Math.sqrt(this.b * this.b + this.d * this.d), this.ashearX = 0, this.ashearY = Math.atan2(this.a * this.b + this.c * this.d, this.a * this.d - this.b * this.c) * a.MathUtils.radDeg;
      } else {
        var d = b.a, f = b.b, e = b.c, k = b.d, q = 1 / (d * k - f * e), m = this.worldX - b.worldX;
        b = this.worldY - b.worldY;
        this.ax = m * k * q - b * f * q;
        this.ay = b * d * q - m * e * q;
        k *= q;
        d *= q;
        f *= q;
        q *= e;
        e = k * this.a - f * this.c;
        f = k * this.b - f * this.d;
        k = d * this.c - q * this.a;
        q = d * this.d - q * this.b;
        this.ashearX = 0;
        this.ascaleX = Math.sqrt(e * e + k * k);
        1E-4 < this.ascaleX ? (d = e * q - f * k, this.ascaleY = d / this.ascaleX, this.ashearY = Math.atan2(e * f + k * q, d) * a.MathUtils.radDeg, this.arotation = Math.atan2(k, e) * a.MathUtils.radDeg) : (this.ascaleX = 0, this.ascaleY = Math.sqrt(f * f + q * q), this.ashearY = 0, this.arotation = 90 - Math.atan2(q, f) * a.MathUtils.radDeg);
      }
    };
    d.prototype.worldToLocal = function(a) {
      var b = this.a, d = this.b, e = this.c, k = this.d, q = 1 / (b * k - d * e), m = a.x - this.worldX, n = a.y - this.worldY;
      a.x = m * k * q - n * d * q;
      a.y = n * b * q - m * e * q;
      return a;
    };
    d.prototype.localToWorld = function(a) {
      var b = a.x, d = a.y;
      a.x = b * this.a + d * this.b + this.worldX;
      a.y = b * this.c + d * this.d + this.worldY;
      return a;
    };
    d.prototype.worldToLocalRotation = function(b) {
      var d = a.MathUtils.sinDeg(b);
      b = a.MathUtils.cosDeg(b);
      return Math.atan2(this.a * d - this.c * b, this.d * b - this.b * d) * a.MathUtils.radDeg + this.rotation - this.shearX;
    };
    d.prototype.localToWorldRotation = function(b) {
      b -= this.rotation - this.shearX;
      var d = a.MathUtils.sinDeg(b);
      b = a.MathUtils.cosDeg(b);
      return Math.atan2(b * this.c + d * this.d, b * this.a + d * this.b) * a.MathUtils.radDeg;
    };
    d.prototype.rotateWorld = function(b) {
      var d = this.a, f = this.b, e = this.c, k = this.d, q = a.MathUtils.cosDeg(b);
      b = a.MathUtils.sinDeg(b);
      this.a = q * d - b * e;
      this.b = q * f - b * k;
      this.c = b * d + q * e;
      this.d = b * f + q * k;
      this.appliedValid = !1;
    };
    return d;
  }();
  a.Bone = d;
})(spine || (spine = {}));
(function(a) {
  var d = function() {
    return function(b, d, f) {
      this.rotation = this.y = this.x = 0;
      this.scaleY = this.scaleX = 1;
      this.shearY = this.shearX = 0;
      this.transformMode = k.Normal;
      this.skinRequired = !1;
      this.color = new a.Color;
      if (0 > b) {
        throw Error("index must be >= 0.");
      }
      if (null == d) {
        throw Error("name cannot be null.");
      }
      this.index = b;
      this.name = d;
      this.parent = f;
    };
  }();
  a.BoneData = d;
  var k;
  (function(a) {
    a[a.Normal = 0] = "Normal";
    a[a.OnlyTranslation = 1] = "OnlyTranslation";
    a[a.NoRotationOrReflection = 2] = "NoRotationOrReflection";
    a[a.NoScale = 3] = "NoScale";
    a[a.NoScaleOrReflection = 4] = "NoScaleOrReflection";
  })(k = a.TransformMode || (a.TransformMode = {}));
})(spine || (spine = {}));
(function(a) {
  var d = function() {
    return function(a, b, d) {
      this.name = a;
      this.order = b;
      this.skinRequired = d;
    };
  }();
  a.ConstraintData = d;
})(spine || (spine = {}));
(function(a) {
  var d = function() {
    return function(a, b) {
      if (null == b) {
        throw Error("data cannot be null.");
      }
      this.time = a;
      this.data = b;
    };
  }();
  a.Event = d;
})(spine || (spine = {}));
(function(a) {
  var d = function() {
    return function(a) {
      this.name = a;
    };
  }();
  a.EventData = d;
})(spine || (spine = {}));
(function(a) {
  var d = function() {
    function d(a, d) {
      this.bendDirection = 0;
      this.stretch = this.compress = !1;
      this.mix = 1;
      this.softness = 0;
      this.active = !1;
      if (null == a) {
        throw Error("data cannot be null.");
      }
      if (null == d) {
        throw Error("skeleton cannot be null.");
      }
      this.data = a;
      this.mix = a.mix;
      this.softness = a.softness;
      this.bendDirection = a.bendDirection;
      this.compress = a.compress;
      this.stretch = a.stretch;
      this.bones = [];
      for (var b = 0; b < a.bones.length; b++) {
        this.bones.push(d.findBone(a.bones[b].name));
      }
      this.target = d.findBone(a.target.name);
    }
    d.prototype.isActive = function() {
      return this.active;
    };
    d.prototype.apply = function() {
      this.update();
    };
    d.prototype.update = function() {
      var a = this.target, d = this.bones;
      switch(d.length) {
        case 1:
          this.apply1(d[0], a.worldX, a.worldY, this.compress, this.stretch, this.data.uniform, this.mix);
          break;
        case 2:
          this.apply2(d[0], d[1], a.worldX, a.worldY, this.bendDirection, this.stretch, this.softness, this.mix);
      }
    };
    d.prototype.apply1 = function(b, d, f, e, k, q, m) {
      b.appliedValid || b.updateAppliedTransform();
      var g = b.parent, c = g.a, h = g.b, r = g.c, z = g.d, y = -b.ashearX - b.arotation;
      switch(b.data.transformMode) {
        case a.TransformMode.OnlyTranslation:
          h = d - b.worldX;
          var x = f - b.worldY;
          break;
        case a.TransformMode.NoRotationOrReflection:
          y += Math.atan2(r, c) * a.MathUtils.radDeg, x = Math.abs(c * z - h * r) / (c * c + r * r), h = -r * x, z = c * x;
        default:
          x = d - g.worldX;
          g = f - g.worldY;
          var p = c * z - h * r;
          h = (x * z - g * h) / p - b.ax;
          x = (g * c - x * r) / p - b.ay;
      }
      y += Math.atan2(x, h) * a.MathUtils.radDeg;
      0 > b.ascaleX && (y += 180);
      180 < y ? y -= 360 : -180 > y && (y += 360);
      c = b.ascaleX;
      r = b.ascaleY;
      if (e || k) {
        switch(b.data.transformMode) {
          case a.TransformMode.NoScale:
          case a.TransformMode.NoScaleOrReflection:
            h = d - b.worldX, x = f - b.worldY;
        }
        d = b.data.length * c;
        f = Math.sqrt(h * h + x * x);
        if (e && f < d || k && f > d && 1E-4 < d) {
          e = (f / d - 1) * m + 1, c *= e, q && (r *= e);
        }
      }
      b.updateWorldTransformWith(b.ax, b.ay, b.arotation + y * m, c, r, b.ashearX, b.ashearY);
    };
    d.prototype.apply2 = function(b, d, f, e, k, q, m, n) {
      if (0 == n) {
        d.updateWorldTransform();
      } else {
        b.appliedValid || b.updateAppliedTransform();
        d.appliedValid || d.updateAppliedTransform();
        var c = b.ax, h = b.ay, g = b.ascaleX, r = g, y = b.ascaleY, x = d.ascaleX;
        if (0 > g) {
          g = -g;
          var p = 180;
          var v = -1;
        } else {
          p = 0, v = 1;
        }
        0 > y && (y = -y, v = -v);
        if (0 > x) {
          x = -x;
          var w = 180;
        } else {
          w = 0;
        }
        var C = d.ax, A = b.a, D = b.b, F = b.c, B = b.d, E = 1E-4 >= Math.abs(g - y);
        if (E) {
          var I = d.ay;
          var K = A * C + D * I + b.worldX;
          var J = F * C + B * I + b.worldY;
        } else {
          I = 0, K = A * C + b.worldX, J = F * C + b.worldY;
        }
        var R = b.parent;
        A = R.a;
        D = R.b;
        F = R.c;
        B = R.d;
        var L = 1 / (A * B - D * F), H = K - R.worldX;
        K = J - R.worldY;
        J = (H * B - K * D) * L - c;
        K = (K * A - H * F) * L - h;
        J = Math.sqrt(J * J + K * K);
        var M = d.data.length * x;
        if (1E-4 > J) {
          this.apply1(b, f, e, !1, q, !1, n), d.updateWorldTransformWith(C, I, 0, d.ascaleX, d.ascaleY, d.ashearX, d.ashearY);
        } else {
          H = f - R.worldX;
          K = e - R.worldY;
          B = (H * B - K * D) * L - c;
          F = (K * A - H * F) * L - h;
          L = B * B + F * F;
          0 != m && (m *= g * (x + 1) / 2, A = Math.sqrt(L), D = A - J - M * g + m, 0 < D && (L = Math.min(1, D / (2 * m)) - 1, L = (D - m * (1 - L * L)) / A, B -= L * B, F -= L * F, L = B * B + F * F));
          a: {
            if (E) {
              M *= g, A = (L - J * J - M * M) / (2 * J * M), -1 > A ? A = -1 : 1 < A && (A = 1, q && (r *= (Math.sqrt(L) / (J + M) - 1) * n + 1)), k *= Math.acos(A), A = J + M * A, D = M * Math.sin(k), A = Math.atan2(F * A - B * D, B * A + F * D);
            } else {
              A = g * M;
              D = y * M;
              K = A * A;
              H = D * D;
              q = Math.atan2(F, B);
              F = H * J * J + K * L - K * H;
              m = -2 * H * J;
              E = H - K;
              B = m * m - 4 * E * F;
              if (0 <= B && (B = Math.sqrt(B), 0 > m && (B = -B), B = -(m + B) / 2, m = B / E, F /= B, F = Math.abs(m) < Math.abs(F) ? m : F, F * F <= L)) {
                K = Math.sqrt(L - F * F) * k;
                A = q - Math.atan2(K, F);
                k = Math.atan2(K / y, (F - J) / g);
                break a;
              }
              g = a.MathUtils.PI;
              m = J - A;
              E = m * m;
              y = M = 0;
              x = J + A;
              f = x * x;
              e = 0;
              F = -A * J / (K - H);
              -1 <= F && 1 >= F && (F = Math.acos(F), H = A * Math.cos(F) + J, K = D * Math.sin(F), B = H * H + K * K, B < E && (g = F, E = B, m = H, M = K), B > f && (y = F, f = B, x = H, e = K));
              L <= (E + f) / 2 ? (A = q - Math.atan2(M * k, m), k *= g) : (A = q - Math.atan2(e * k, x), k *= y);
            }
          }
          J = Math.atan2(I, C) * v;
          D = b.arotation;
          A = (A - J) * a.MathUtils.radDeg + p - D;
          180 < A ? A -= 360 : -180 > A && (A += 360);
          b.updateWorldTransformWith(c, h, D + A * n, r, b.ascaleY, 0, 0);
          D = d.arotation;
          k = ((k + J) * a.MathUtils.radDeg - d.ashearX) * v + w - D;
          180 < k ? k -= 360 : -180 > k && (k += 360);
          d.updateWorldTransformWith(C, I, D + k * n, d.ascaleX, d.ascaleY, d.ashearX, d.ashearY);
        }
      }
    };
    return d;
  }();
  a.IkConstraint = d;
})(spine || (spine = {}));
(function(a) {
  var d = function(a) {
    function b(b) {
      b = a.call(this, b, 0, !1) || this;
      b.bones = [];
      b.bendDirection = 1;
      b.compress = !1;
      b.stretch = !1;
      b.uniform = !1;
      b.mix = 1;
      b.softness = 0;
      return b;
    }
    __extends(b, a);
    return b;
  }(a.ConstraintData);
  a.IkConstraintData = d;
})(spine || (spine = {}));
(function(a) {
  var d = function() {
    function d(a, d) {
      this.translateMix = this.rotateMix = this.spacing = this.position = 0;
      this.spaces = [];
      this.positions = [];
      this.world = [];
      this.curves = [];
      this.lengths = [];
      this.segments = [];
      this.active = !1;
      if (null == a) {
        throw Error("data cannot be null.");
      }
      if (null == d) {
        throw Error("skeleton cannot be null.");
      }
      this.data = a;
      this.bones = [];
      for (var b = 0, e = a.bones.length; b < e; b++) {
        this.bones.push(d.findBone(a.bones[b].name));
      }
      this.target = d.findSlot(a.target.name);
      this.position = a.position;
      this.spacing = a.spacing;
      this.rotateMix = a.rotateMix;
      this.translateMix = a.translateMix;
    }
    d.prototype.isActive = function() {
      return this.active;
    };
    d.prototype.apply = function() {
      this.update();
    };
    d.prototype.update = function() {
      var b = this.target.getAttachment();
      if (b instanceof a.PathAttachment) {
        var g = this.rotateMix, f = this.translateMix, e = 0 < g;
        if (0 < f || e) {
          var k = this.data, q = k.spacingMode == a.SpacingMode.Percent, m = k.rotateMode, n = m == a.RotateMode.Tangent, c = m == a.RotateMode.ChainScale, h = this.bones.length, t = n ? h : h + 1, z = this.bones, y = a.Utils.setArraySize(this.spaces, t), x = null, p = this.spacing;
          if (c || !q) {
            c && (x = a.Utils.setArraySize(this.lengths, h));
            for (var v = k.spacingMode == a.SpacingMode.Length, w = 0, C = t - 1; w < C;) {
              var A = z[w], D = A.data.length;
              if (D < d.epsilon) {
                c && (x[w] = 0), y[++w] = 0;
              } else {
                if (q) {
                  if (c) {
                    var F = D * A.a, B = D * A.c;
                    x[w] = Math.sqrt(F * F + B * B);
                  }
                  y[++w] = p;
                } else {
                  F = D * A.a, B = D * A.c, A = Math.sqrt(F * F + B * B), c && (x[w] = A), y[++w] = (v ? D + p : p) * A / D;
                }
              }
            }
          } else {
            for (w = 1; w < t; w++) {
              y[w] = p;
            }
          }
          b = this.computeWorldPositions(b, t, n, k.positionMode == a.PositionMode.Percent, q);
          q = b[0];
          t = b[1];
          k = k.offsetRotation;
          0 == k ? m = m == a.RotateMode.Chain : (m = !1, p = this.target.bone, k *= 0 < p.a * p.d - p.b * p.c ? a.MathUtils.degRad : -a.MathUtils.degRad);
          w = 0;
          for (p = 3; w < h; w++, p += 3) {
            A = z[w];
            A.worldX += (q - A.worldX) * f;
            A.worldY += (t - A.worldY) * f;
            F = b[p];
            B = b[p + 1];
            v = F - q;
            C = B - t;
            c && (q = x[w], 0 != q && (q = (Math.sqrt(v * v + C * C) / q - 1) * g + 1, A.a *= q, A.c *= q));
            q = F;
            t = B;
            if (e) {
              F = A.a;
              B = A.b;
              D = A.c;
              var E = A.d;
              var I = n ? b[p - 1] : 0 == y[w + 1] ? b[p + 2] : Math.atan2(C, v);
              I -= Math.atan2(D, F);
              if (m) {
                var K = Math.cos(I);
                var J = Math.sin(I);
                var R = A.data.length;
                q += (R * (K * F - J * D) - v) * g;
                t += (R * (J * F + K * D) - C) * g;
              } else {
                I += k;
              }
              I > a.MathUtils.PI ? I -= a.MathUtils.PI2 : I < -a.MathUtils.PI && (I += a.MathUtils.PI2);
              I *= g;
              K = Math.cos(I);
              J = Math.sin(I);
              A.a = K * F - J * D;
              A.b = K * B - J * E;
              A.c = J * F + K * D;
              A.d = J * B + K * E;
            }
            A.appliedValid = !1;
          }
        }
      }
    };
    d.prototype.computeWorldPositions = function(b, g, f, e, k) {
      var r = this.target, m = this.position, n = this.spaces, c = a.Utils.setArraySize(this.positions, 3 * g + 2), h = b.closed, t = b.worldVerticesLength, z = t / 6, y = d.NONE;
      if (!b.constantSpeed) {
        var x = b.lengths;
        z -= h ? 1 : 2;
        var p = x[z];
        e && (m *= p);
        if (k) {
          for (var v = 1; v < g; v++) {
            n[v] *= p;
          }
        }
        var w = a.Utils.setArraySize(this.world, 8);
        for (k = e = v = 0; v < g; v++, e += 3) {
          var C = n[v], A = m += C;
          if (h) {
            A %= p, 0 > A && (A += p), k = 0;
          } else {
            if (0 > A) {
              y != d.BEFORE && (y = d.BEFORE, b.computeWorldVertices(r, 2, 4, w, 0, 2));
              this.addBeforePosition(A, w, 0, c, e);
              continue;
            } else {
              if (A > p) {
                y != d.AFTER && (y = d.AFTER, b.computeWorldVertices(r, t - 6, 4, w, 0, 2));
                this.addAfterPosition(A - p, w, 0, c, e);
                continue;
              }
            }
          }
          for (;; k++) {
            var D = x[k];
            if (!(A > D)) {
              if (0 == k) {
                A /= D;
              } else {
                var F = x[k - 1];
                A = (A - F) / (D - F);
              }
              break;
            }
          }
          k != y && (y = k, h && k == z ? (b.computeWorldVertices(r, t - 4, 4, w, 0, 2), b.computeWorldVertices(r, 0, 4, w, 4, 2)) : b.computeWorldVertices(r, 6 * k + 2, 8, w, 0, 2));
          this.addCurvePosition(A, w[0], w[1], w[2], w[3], w[4], w[5], w[6], w[7], c, e, f || 0 < v && 0 == C);
        }
        return c;
      }
      h ? (t += 2, w = a.Utils.setArraySize(this.world, t), b.computeWorldVertices(r, 2, t - 4, w, 0, 2), b.computeWorldVertices(r, 0, 2, w, t - 4, 2), w[t - 2] = w[0], w[t - 1] = w[1]) : (z--, t -= 4, w = a.Utils.setArraySize(this.world, t), b.computeWorldVertices(r, 2, t, w, 0, 2));
      r = a.Utils.setArraySize(this.curves, z);
      x = 0;
      p = w[0];
      D = w[1];
      var B = 0, E = 0, I = 0, K = 0, J = 0, R = 0;
      v = 0;
      for (C = 2; v < z; v++, C += 6) {
        B = w[C];
        E = w[C + 1];
        I = w[C + 2];
        K = w[C + 3];
        J = w[C + 4];
        R = w[C + 5];
        var L = .1875 * (p - 2 * B + I);
        var H = .1875 * (D - 2 * E + K);
        F = .09375 * (3 * (B - I) - p + J);
        var M = .09375 * (3 * (E - K) - D + R);
        var S = 2 * L + F;
        var O = 2 * H + M;
        L = .75 * (B - p) + L + .16666667 * F;
        H = .75 * (E - D) + H + .16666667 * M;
        x += Math.sqrt(L * L + H * H);
        L += S;
        H += O;
        S += F;
        O += M;
        x += Math.sqrt(L * L + H * H);
        L += S;
        H += O;
        x += Math.sqrt(L * L + H * H);
        L += S + F;
        H += O + M;
        x += Math.sqrt(L * L + H * H);
        r[v] = x;
        p = J;
        D = R;
      }
      m = e ? m * x : x / b.lengths[z - 1] * m;
      if (k) {
        for (v = 1; v < g; v++) {
          n[v] *= x;
        }
      }
      b = this.segments;
      for (M = k = e = v = z = 0; v < g; v++, e += 3) {
        C = n[v];
        A = m += C;
        if (h) {
          A %= x, 0 > A && (A += x), k = 0;
        } else {
          if (0 > A) {
            this.addBeforePosition(A, w, 0, c, e);
            continue;
          } else {
            if (A > x) {
              this.addAfterPosition(A - x, w, t - 4, c, e);
              continue;
            }
          }
        }
        for (;; k++) {
          if (S = r[k], !(A > S)) {
            0 == k ? A /= S : (F = r[k - 1], A = (A - F) / (S - F));
            break;
          }
        }
        if (k != y) {
          y = k;
          var Z = 6 * k;
          p = w[Z];
          D = w[Z + 1];
          B = w[Z + 2];
          E = w[Z + 3];
          I = w[Z + 4];
          K = w[Z + 5];
          J = w[Z + 6];
          R = w[Z + 7];
          L = .03 * (p - 2 * B + I);
          H = .03 * (D - 2 * E + K);
          F = .006 * (3 * (B - I) - p + J);
          M = .006 * (3 * (E - K) - D + R);
          S = 2 * L + F;
          O = 2 * H + M;
          L = .3 * (B - p) + L + .16666667 * F;
          H = .3 * (E - D) + H + .16666667 * M;
          z = Math.sqrt(L * L + H * H);
          b[0] = z;
          for (Z = 1; 8 > Z; Z++) {
            L += S, H += O, S += F, O += M, z += Math.sqrt(L * L + H * H), b[Z] = z;
          }
          L += S;
          H += O;
          z += Math.sqrt(L * L + H * H);
          b[8] = z;
          L += S + F;
          H += O + M;
          z += Math.sqrt(L * L + H * H);
          b[9] = z;
          M = 0;
        }
        for (A *= z;; M++) {
          if (S = b[M], !(A > S)) {
            0 == M ? A /= S : (F = b[M - 1], A = M + (A - F) / (S - F));
            break;
          }
        }
        this.addCurvePosition(.1 * A, p, D, B, E, I, K, J, R, c, e, f || 0 < v && 0 == C);
      }
      return c;
    };
    d.prototype.addBeforePosition = function(a, d, f, e, k) {
      var b = d[f], g = d[f + 1];
      d = Math.atan2(d[f + 3] - g, d[f + 2] - b);
      e[k] = b + a * Math.cos(d);
      e[k + 1] = g + a * Math.sin(d);
      e[k + 2] = d;
    };
    d.prototype.addAfterPosition = function(a, d, f, e, k) {
      var b = d[f + 2], g = d[f + 3];
      d = Math.atan2(g - d[f + 1], b - d[f]);
      e[k] = b + a * Math.cos(d);
      e[k + 1] = g + a * Math.sin(d);
      e[k + 2] = d;
    };
    d.prototype.addCurvePosition = function(a, d, f, e, k, q, m, n, c, h, t, z) {
      if (0 == a || isNaN(a)) {
        h[t] = d, h[t + 1] = f, h[t + 2] = Math.atan2(k - f, e - d);
      } else {
        var b = a * a, g = b * a, r = 1 - a, v = r * r, w = v * r, C = r * a, A = 3 * C;
        r *= A;
        A *= a;
        n = d * w + e * r + q * A + n * g;
        c = f * w + k * r + m * A + c * g;
        h[t] = n;
        h[t + 1] = c;
        z && (h[t + 2] = .001 > a ? Math.atan2(k - f, e - d) : Math.atan2(c - (f * v + k * C * 2 + m * b), n - (d * v + e * C * 2 + q * b)));
      }
    };
    d.NONE = -1;
    d.BEFORE = -2;
    d.AFTER = -3;
    d.epsilon = 1E-5;
    return d;
  }();
  a.PathConstraint = d;
})(spine || (spine = {}));
(function(a) {
  var d = function(a) {
    function b(b) {
      b = a.call(this, b, 0, !1) || this;
      b.bones = [];
      return b;
    }
    __extends(b, a);
    return b;
  }(a.ConstraintData);
  a.PathConstraintData = d;
  (function(a) {
    a[a.Fixed = 0] = "Fixed";
    a[a.Percent = 1] = "Percent";
  })(a.PositionMode || (a.PositionMode = {}));
  (function(a) {
    a[a.Length = 0] = "Length";
    a[a.Fixed = 1] = "Fixed";
    a[a.Percent = 2] = "Percent";
  })(a.SpacingMode || (a.SpacingMode = {}));
  (function(a) {
    a[a.Tangent = 0] = "Tangent";
    a[a.Chain = 1] = "Chain";
    a[a.ChainScale = 2] = "ChainScale";
  })(a.RotateMode || (a.RotateMode = {}));
})(spine || (spine = {}));
(function(a) {
  var d = function() {
    function a(a) {
      this.toLoad = [];
      this.assets = {};
      this.clientId = a;
    }
    a.prototype.loaded = function() {
      var a = 0, b;
      for (b in this.assets) {
        a++;
      }
      return a;
    };
    return a;
  }(), k = function() {
    function a(a) {
      void 0 === a && (a = "");
      this.clientAssets = {};
      this.queuedAssets = {};
      this.rawAssets = {};
      this.errors = {};
      this.pathPrefix = a;
    }
    a.prototype.queueAsset = function(a, b, e) {
      var f = this.clientAssets[a];
      if (null === f || void 0 === f) {
        f = new d(a), this.clientAssets[a] = f;
      }
      null !== b && (f.textureLoader = b);
      f.toLoad.push(e);
      if (this.queuedAssets[e] === e) {
        return !1;
      }
      this.queuedAssets[e] = e;
      return !0;
    };
    a.prototype.loadText = function(a, b) {
      var e = this;
      b = this.pathPrefix + b;
      if (this.queueAsset(a, null, b)) {
        var d = new XMLHttpRequest;
        d.overrideMimeType("text/html");
        d.onreadystatechange = function() {
          d.readyState == XMLHttpRequest.DONE && (200 <= d.status && 300 > d.status ? e.rawAssets[b] = d.responseText : e.errors[b] = "Couldn't load text " + b + ": status " + d.status + ", " + d.responseText);
        };
        d.open("GET", b, !0);
        d.send();
      }
    };
    a.prototype.loadJson = function(a, b) {
      var e = this;
      b = this.pathPrefix + b;
      if (this.queueAsset(a, null, b)) {
        var d = new XMLHttpRequest;
        d.overrideMimeType("text/html");
        d.onreadystatechange = function() {
          d.readyState == XMLHttpRequest.DONE && (200 <= d.status && 300 > d.status ? e.rawAssets[b] = JSON.parse(d.responseText) : e.errors[b] = "Couldn't load text " + b + ": status " + d.status + ", " + d.responseText);
        };
        d.open("GET", b, !0);
        d.send();
      }
    };
    a.prototype.loadTexture = function(a, b, e) {
      var d = this;
      e = this.pathPrefix + e;
      if (this.queueAsset(a, b, e)) {
        var f = new Image;
        f.crossOrigin = "anonymous";
        f.onload = function(a) {
          d.rawAssets[e] = f;
        };
        f.onerror = function(a) {
          d.errors[e] = "Couldn't load image " + e;
        };
        f.src = e;
      }
    };
    a.prototype.get = function(a, b) {
      b = this.pathPrefix + b;
      a = this.clientAssets[a];
      return null === a || void 0 === a ? !0 : a.assets[b];
    };
    a.prototype.updateClientAssets = function(a) {
      for (var b = 0; b < a.toLoad.length; b++) {
        var e = a.toLoad[b], d = a.assets[e];
        if (null === d || void 0 === d) {
          d = this.rawAssets[e], null !== d && void 0 !== d && (a.assets[e] = d instanceof HTMLImageElement ? a.textureLoader(d) : d);
        }
      }
    };
    a.prototype.isLoadingComplete = function(a) {
      a = this.clientAssets[a];
      if (null === a || void 0 === a) {
        return !0;
      }
      this.updateClientAssets(a);
      return a.toLoad.length == a.loaded();
    };
    a.prototype.dispose = function() {
    };
    a.prototype.hasErrors = function() {
      return 0 < Object.keys(this.errors).length;
    };
    a.prototype.getErrors = function() {
      return this.errors;
    };
    return a;
  }();
  a.SharedAssetManager = k;
})(spine || (spine = {}));
(function(a) {
  var d = function() {
    function d(b) {
      this._updateCache = [];
      this.updateCacheReset = [];
      this.time = 0;
      this.scaleY = this.scaleX = 1;
      this.y = this.x = 0;
      if (null == b) {
        throw Error("data cannot be null.");
      }
      this.data = b;
      this.bones = [];
      for (var d = 0; d < b.bones.length; d++) {
        var f = b.bones[d];
        if (null == f.parent) {
          f = new a.Bone(f, this, null);
        } else {
          var e = this.bones[f.parent.index];
          f = new a.Bone(f, this, e);
          e.children.push(f);
        }
        this.bones.push(f);
      }
      this.slots = [];
      this.drawOrder = [];
      for (d = 0; d < b.slots.length; d++) {
        e = b.slots[d], f = this.bones[e.boneData.index], f = new a.Slot(e, f), this.slots.push(f), this.drawOrder.push(f);
      }
      this.ikConstraints = [];
      for (d = 0; d < b.ikConstraints.length; d++) {
        this.ikConstraints.push(new a.IkConstraint(b.ikConstraints[d], this));
      }
      this.transformConstraints = [];
      for (d = 0; d < b.transformConstraints.length; d++) {
        this.transformConstraints.push(new a.TransformConstraint(b.transformConstraints[d], this));
      }
      this.pathConstraints = [];
      for (d = 0; d < b.pathConstraints.length; d++) {
        this.pathConstraints.push(new a.PathConstraint(b.pathConstraints[d], this));
      }
      this.color = new a.Color(1, 1, 1, 1);
      this.updateCache();
    }
    d.prototype.updateCache = function() {
      this._updateCache.length = 0;
      this.updateCacheReset.length = 0;
      for (var a = this.bones, d = 0, f = a.length; d < f; d++) {
        var e = a[d];
        e.sorted = e.data.skinRequired;
        e.active = !e.sorted;
      }
      if (null != this.skin) {
        var k = this.skin.bones;
        d = 0;
        for (f = this.skin.bones.length; d < f; d++) {
          e = this.bones[k[d].index];
          do {
            e.sorted = !1, e.active = !0, e = e.parent;
          } while (null != e);
        }
      }
      f = this.ikConstraints;
      e = this.transformConstraints;
      k = this.pathConstraints;
      var q = f.length, m = e.length, n = k.length, c = q + m + n;
      d = 0;
      a: for (; d < c; d++) {
        for (var h = 0; h < q; h++) {
          var t = f[h];
          if (t.data.order == d) {
            this.sortIkConstraint(t);
            continue a;
          }
        }
        for (h = 0; h < m; h++) {
          if (t = e[h], t.data.order == d) {
            this.sortTransformConstraint(t);
            continue a;
          }
        }
        for (h = 0; h < n; h++) {
          if (t = k[h], t.data.order == d) {
            this.sortPathConstraint(t);
            continue a;
          }
        }
      }
      d = 0;
      for (f = a.length; d < f; d++) {
        this.sortBone(a[d]);
      }
    };
    d.prototype.sortIkConstraint = function(b) {
      b.active = b.target.isActive() && (!b.data.skinRequired || null != this.skin && a.Utils.contains(this.skin.constraints, b.data, !0));
      if (b.active) {
        this.sortBone(b.target);
        var d = b.bones, f = d[0];
        this.sortBone(f);
        if (1 < d.length) {
          var e = d[d.length - 1];
          -1 < this._updateCache.indexOf(e) || this.updateCacheReset.push(e);
        }
        this._updateCache.push(b);
        this.sortReset(f.children);
        d[d.length - 1].sorted = !0;
      }
    };
    d.prototype.sortPathConstraint = function(b) {
      b.active = b.target.bone.isActive() && (!b.data.skinRequired || null != this.skin && a.Utils.contains(this.skin.constraints, b.data, !0));
      if (b.active) {
        var d = b.target, f = d.data.index, e = d.bone;
        null != this.skin && this.sortPathConstraintAttachment(this.skin, f, e);
        null != this.data.defaultSkin && this.data.defaultSkin != this.skin && this.sortPathConstraintAttachment(this.data.defaultSkin, f, e);
        for (var k = 0, q = this.data.skins.length; k < q; k++) {
          this.sortPathConstraintAttachment(this.data.skins[k], f, e);
        }
        k = d.getAttachment();
        k instanceof a.PathAttachment && this.sortPathConstraintAttachmentWith(k, e);
        e = b.bones;
        d = e.length;
        for (k = 0; k < d; k++) {
          this.sortBone(e[k]);
        }
        this._updateCache.push(b);
        for (k = 0; k < d; k++) {
          this.sortReset(e[k].children);
        }
        for (k = 0; k < d; k++) {
          e[k].sorted = !0;
        }
      }
    };
    d.prototype.sortTransformConstraint = function(b) {
      b.active = b.target.isActive() && (!b.data.skinRequired || null != this.skin && a.Utils.contains(this.skin.constraints, b.data, !0));
      if (b.active) {
        this.sortBone(b.target);
        var d = b.bones, f = d.length;
        if (b.data.local) {
          for (var e = 0; e < f; e++) {
            var k = d[e];
            this.sortBone(k.parent);
            -1 < this._updateCache.indexOf(k) || this.updateCacheReset.push(k);
          }
        } else {
          for (e = 0; e < f; e++) {
            this.sortBone(d[e]);
          }
        }
        this._updateCache.push(b);
        for (b = 0; b < f; b++) {
          this.sortReset(d[b].children);
        }
        for (b = 0; b < f; b++) {
          d[b].sorted = !0;
        }
      }
    };
    d.prototype.sortPathConstraintAttachment = function(a, d, f) {
      if (a = a.attachments[d]) {
        for (var b in a) {
          this.sortPathConstraintAttachmentWith(a[b], f);
        }
      }
    };
    d.prototype.sortPathConstraintAttachmentWith = function(b, d) {
      if (b instanceof a.PathAttachment) {
        if (b = b.bones, null == b) {
          this.sortBone(d);
        } else {
          d = this.bones;
          for (var f = 0; f < b.length;) {
            var e = b[f++];
            for (e = f + e; f < e; f++) {
              this.sortBone(d[b[f]]);
            }
          }
        }
      }
    };
    d.prototype.sortBone = function(a) {
      if (!a.sorted) {
        var b = a.parent;
        null != b && this.sortBone(b);
        a.sorted = !0;
        this._updateCache.push(a);
      }
    };
    d.prototype.sortReset = function(a) {
      for (var b = 0, d = a.length; b < d; b++) {
        var e = a[b];
        e.active && (e.sorted && this.sortReset(e.children), e.sorted = !1);
      }
    };
    d.prototype.updateWorldTransform = function() {
      for (var a = this.updateCacheReset, d = 0, f = a.length; d < f; d++) {
        var e = a[d];
        e.ax = e.x;
        e.ay = e.y;
        e.arotation = e.rotation;
        e.ascaleX = e.scaleX;
        e.ascaleY = e.scaleY;
        e.ashearX = e.shearX;
        e.ashearY = e.shearY;
        e.appliedValid = !0;
      }
      a = this._updateCache;
      d = 0;
      for (f = a.length; d < f; d++) {
        a[d].update();
      }
    };
    d.prototype.setToSetupPose = function() {
      this.setBonesToSetupPose();
      this.setSlotsToSetupPose();
    };
    d.prototype.setBonesToSetupPose = function() {
      for (var a = this.bones, d = 0, f = a.length; d < f; d++) {
        a[d].setToSetupPose();
      }
      var e = this.ikConstraints;
      d = 0;
      for (f = e.length; d < f; d++) {
        a = e[d], a.mix = a.data.mix, a.softness = a.data.softness, a.bendDirection = a.data.bendDirection, a.compress = a.data.compress, a.stretch = a.data.stretch;
      }
      var k = this.transformConstraints;
      d = 0;
      for (f = k.length; d < f; d++) {
        a = k[d], e = a.data, a.rotateMix = e.rotateMix, a.translateMix = e.translateMix, a.scaleMix = e.scaleMix, a.shearMix = e.shearMix;
      }
      k = this.pathConstraints;
      d = 0;
      for (f = k.length; d < f; d++) {
        a = k[d], e = a.data, a.position = e.position, a.spacing = e.spacing, a.rotateMix = e.rotateMix, a.translateMix = e.translateMix;
      }
    };
    d.prototype.setSlotsToSetupPose = function() {
      var b = this.slots;
      a.Utils.arrayCopy(b, 0, this.drawOrder, 0, b.length);
      for (var d = 0, f = b.length; d < f; d++) {
        b[d].setToSetupPose();
      }
    };
    d.prototype.getRootBone = function() {
      return 0 == this.bones.length ? null : this.bones[0];
    };
    d.prototype.findBone = function(a) {
      if (null == a) {
        throw Error("boneName cannot be null.");
      }
      for (var b = this.bones, d = 0, e = b.length; d < e; d++) {
        var k = b[d];
        if (k.data.name == a) {
          return k;
        }
      }
      return null;
    };
    d.prototype.findBoneIndex = function(a) {
      if (null == a) {
        throw Error("boneName cannot be null.");
      }
      for (var b = this.bones, d = 0, e = b.length; d < e; d++) {
        if (b[d].data.name == a) {
          return d;
        }
      }
      return -1;
    };
    d.prototype.findSlot = function(a) {
      if (null == a) {
        throw Error("slotName cannot be null.");
      }
      for (var b = this.slots, d = 0, e = b.length; d < e; d++) {
        var k = b[d];
        if (k.data.name == a) {
          return k;
        }
      }
      return null;
    };
    d.prototype.findSlotIndex = function(a) {
      if (null == a) {
        throw Error("slotName cannot be null.");
      }
      for (var b = this.slots, d = 0, e = b.length; d < e; d++) {
        if (b[d].data.name == a) {
          return d;
        }
      }
      return -1;
    };
    d.prototype.setSkinByName = function(a) {
      var b = this.data.findSkin(a);
      if (null == b) {
        throw Error("Skin not found: " + a);
      }
      this.setSkin(b);
    };
    d.prototype.setSkin = function(a) {
      if (a != this.skin) {
        if (null != a) {
          if (null != this.skin) {
            a.attachAll(this, this.skin);
          } else {
            for (var b = this.slots, d = 0, e = b.length; d < e; d++) {
              var k = b[d], q = k.data.attachmentName;
              null != q && (q = a.getAttachment(d, q), null != q && k.setAttachment(q));
            }
          }
        }
        this.skin = a;
        this.updateCache();
      }
    };
    d.prototype.getAttachmentByName = function(a, d) {
      return this.getAttachment(this.data.findSlotIndex(a), d);
    };
    d.prototype.getAttachment = function(a, d) {
      if (null == d) {
        throw Error("attachmentName cannot be null.");
      }
      if (null != this.skin) {
        var b = this.skin.getAttachment(a, d);
        if (null != b) {
          return b;
        }
      }
      return null != this.data.defaultSkin ? this.data.defaultSkin.getAttachment(a, d) : null;
    };
    d.prototype.setAttachment = function(a, d) {
      if (null == a) {
        throw Error("slotName cannot be null.");
      }
      for (var b = this.slots, e = 0, g = b.length; e < g; e++) {
        var k = b[e];
        if (k.data.name == a) {
          b = null;
          if (null != d && (b = this.getAttachment(e, d), null == b)) {
            throw Error("Attachment not found: " + d + ", for slot: " + a);
          }
          k.setAttachment(b);
          return;
        }
      }
      throw Error("Slot not found: " + a);
    };
    d.prototype.findIkConstraint = function(a) {
      if (null == a) {
        throw Error("constraintName cannot be null.");
      }
      for (var b = this.ikConstraints, d = 0, e = b.length; d < e; d++) {
        var k = b[d];
        if (k.data.name == a) {
          return k;
        }
      }
      return null;
    };
    d.prototype.findTransformConstraint = function(a) {
      if (null == a) {
        throw Error("constraintName cannot be null.");
      }
      for (var b = this.transformConstraints, d = 0, e = b.length; d < e; d++) {
        var k = b[d];
        if (k.data.name == a) {
          return k;
        }
      }
      return null;
    };
    d.prototype.findPathConstraint = function(a) {
      if (null == a) {
        throw Error("constraintName cannot be null.");
      }
      for (var b = this.pathConstraints, d = 0, e = b.length; d < e; d++) {
        var k = b[d];
        if (k.data.name == a) {
          return k;
        }
      }
      return null;
    };
    d.prototype.getBounds = function(b, d, f) {
      void 0 === f && (f = Array(2));
      if (null == b) {
        throw Error("offset cannot be null.");
      }
      if (null == d) {
        throw Error("size cannot be null.");
      }
      for (var e = this.drawOrder, g = Number.POSITIVE_INFINITY, k = Number.POSITIVE_INFINITY, m = Number.NEGATIVE_INFINITY, n = Number.NEGATIVE_INFINITY, c = 0, h = e.length; c < h; c++) {
        var t = e[c];
        if (t.bone.active) {
          var z = null, y = t.getAttachment();
          if (y instanceof a.RegionAttachment) {
            var x = 8;
            z = a.Utils.setArraySize(f, x, 0);
            y.computeWorldVertices(t.bone, z, 0, 2);
          } else {
            y instanceof a.MeshAttachment && (x = y.worldVerticesLength, z = a.Utils.setArraySize(f, x, 0), y.computeWorldVertices(t, 0, x, z, 0, 2));
          }
          if (null != z) {
            for (t = 0, x = z.length; t < x; t += 2) {
              y = z[t];
              var p = z[t + 1];
              g = Math.min(g, y);
              k = Math.min(k, p);
              m = Math.max(m, y);
              n = Math.max(n, p);
            }
          }
        }
      }
      b.set(g, k);
      d.set(m - g, n - k);
    };
    d.prototype.update = function(a) {
      this.time += a;
    };
    return d;
  }();
  a.Skeleton = d;
})(spine || (spine = {}));
(function(a) {
  var d = function() {
    function d(a) {
      this.scale = 1;
      this.linkedMeshes = [];
      this.attachmentLoader = a;
    }
    d.prototype.readSkeletonData = function(b) {
      var e = this.scale, f = new a.SkeletonData;
      f.name = "";
      b = new k(b);
      f.hash = b.readString();
      f.version = b.readString();
      if ("3.8.75" == f.version) {
        throw Error("Unsupported skeleton data, please export with a newer version of Spine.");
      }
      f.x = b.readFloat();
      f.y = b.readFloat();
      f.width = b.readFloat();
      f.height = b.readFloat();
      var g = b.readBoolean();
      g && (f.fps = b.readFloat(), f.imagesPath = b.readString(), f.audioPath = b.readString());
      var n = b.readInt(!0);
      for (var c = 0; c < n; c++) {
        b.strings.push(b.readString());
      }
      n = b.readInt(!0);
      for (c = 0; c < n; c++) {
        var h = b.readString(), t = 0 == c ? null : f.bones[b.readInt(!0)];
        h = new a.BoneData(c, h, t);
        h.rotation = b.readFloat();
        h.x = b.readFloat() * e;
        h.y = b.readFloat() * e;
        h.scaleX = b.readFloat();
        h.scaleY = b.readFloat();
        h.shearX = b.readFloat();
        h.shearY = b.readFloat();
        h.length = b.readFloat() * e;
        h.transformMode = d.TransformModeValues[b.readInt(!0)];
        h.skinRequired = b.readBoolean();
        g && a.Color.rgba8888ToColor(h.color, b.readInt32());
        f.bones.push(h);
      }
      n = b.readInt(!0);
      for (c = 0; c < n; c++) {
        h = b.readString(), t = f.bones[b.readInt(!0)], h = new a.SlotData(c, h, t), a.Color.rgba8888ToColor(h.color, b.readInt32()), t = b.readInt32(), -1 != t && a.Color.rgb888ToColor(h.darkColor = new a.Color, t), h.attachmentName = b.readStringRef(), h.blendMode = d.BlendModeValues[b.readInt(!0)], f.slots.push(h);
      }
      n = b.readInt(!0);
      for (c = 0; c < n; c++) {
        h = new a.IkConstraintData(b.readString());
        h.order = b.readInt(!0);
        h.skinRequired = b.readBoolean();
        t = b.readInt(!0);
        for (var z = 0; z < t; z++) {
          h.bones.push(f.bones[b.readInt(!0)]);
        }
        h.target = f.bones[b.readInt(!0)];
        h.mix = b.readFloat();
        h.softness = b.readFloat() * e;
        h.bendDirection = b.readByte();
        h.compress = b.readBoolean();
        h.stretch = b.readBoolean();
        h.uniform = b.readBoolean();
        f.ikConstraints.push(h);
      }
      n = b.readInt(!0);
      for (c = 0; c < n; c++) {
        h = new a.TransformConstraintData(b.readString());
        h.order = b.readInt(!0);
        h.skinRequired = b.readBoolean();
        t = b.readInt(!0);
        for (z = 0; z < t; z++) {
          h.bones.push(f.bones[b.readInt(!0)]);
        }
        h.target = f.bones[b.readInt(!0)];
        h.local = b.readBoolean();
        h.relative = b.readBoolean();
        h.offsetRotation = b.readFloat();
        h.offsetX = b.readFloat() * e;
        h.offsetY = b.readFloat() * e;
        h.offsetScaleX = b.readFloat();
        h.offsetScaleY = b.readFloat();
        h.offsetShearY = b.readFloat();
        h.rotateMix = b.readFloat();
        h.translateMix = b.readFloat();
        h.scaleMix = b.readFloat();
        h.shearMix = b.readFloat();
        f.transformConstraints.push(h);
      }
      n = b.readInt(!0);
      for (c = 0; c < n; c++) {
        h = new a.PathConstraintData(b.readString());
        h.order = b.readInt(!0);
        h.skinRequired = b.readBoolean();
        t = b.readInt(!0);
        for (z = 0; z < t; z++) {
          h.bones.push(f.bones[b.readInt(!0)]);
        }
        h.target = f.slots[b.readInt(!0)];
        h.positionMode = d.PositionModeValues[b.readInt(!0)];
        h.spacingMode = d.SpacingModeValues[b.readInt(!0)];
        h.rotateMode = d.RotateModeValues[b.readInt(!0)];
        h.offsetRotation = b.readFloat();
        h.position = b.readFloat();
        h.positionMode == a.PositionMode.Fixed && (h.position *= e);
        h.spacing = b.readFloat();
        if (h.spacingMode == a.SpacingMode.Length || h.spacingMode == a.SpacingMode.Fixed) {
          h.spacing *= e;
        }
        h.rotateMix = b.readFloat();
        h.translateMix = b.readFloat();
        f.pathConstraints.push(h);
      }
      n = this.readSkin(b, f, !0, g);
      null != n && (f.defaultSkin = n, f.skins.push(n));
      c = f.skins.length;
      for (a.Utils.setArraySize(f.skins, n = c + b.readInt(!0)); c < n; c++) {
        f.skins[c] = this.readSkin(b, f, !1, g);
      }
      n = this.linkedMeshes.length;
      for (c = 0; c < n; c++) {
        e = this.linkedMeshes[c];
        g = null == e.skin ? f.defaultSkin : f.findSkin(e.skin);
        if (null == g) {
          throw Error("Skin not found: " + e.skin);
        }
        g = g.getAttachment(e.slotIndex, e.parent);
        if (null == g) {
          throw Error("Parent mesh not found: " + e.parent);
        }
        e.mesh.deformAttachment = e.inheritDeform ? g : e.mesh;
        e.mesh.setParentMesh(g);
        e.mesh.updateUVs();
      }
      this.linkedMeshes.length = 0;
      n = b.readInt(!0);
      for (c = 0; c < n; c++) {
        h = new a.EventData(b.readStringRef()), h.intValue = b.readInt(!1), h.floatValue = b.readFloat(), h.stringValue = b.readString(), h.audioPath = b.readString(), null != h.audioPath && (h.volume = b.readFloat(), h.balance = b.readFloat()), f.events.push(h);
      }
      n = b.readInt(!0);
      for (c = 0; c < n; c++) {
        f.animations.push(this.readAnimation(b, b.readString(), f));
      }
      return f;
    };
    d.prototype.readSkin = function(b, d, f, g) {
      if (f) {
        var e = b.readInt(!0);
        if (0 == e) {
          return null;
        }
        f = new a.Skin("default");
      } else {
        f = new a.Skin(b.readStringRef());
        f.bones.length = b.readInt(!0);
        var c = 0;
        for (e = f.bones.length; c < e; c++) {
          f.bones[c] = d.bones[b.readInt(!0)];
        }
        c = 0;
        for (e = b.readInt(!0); c < e; c++) {
          f.constraints.push(d.ikConstraints[b.readInt(!0)]);
        }
        c = 0;
        for (e = b.readInt(!0); c < e; c++) {
          f.constraints.push(d.transformConstraints[b.readInt(!0)]);
        }
        c = 0;
        for (e = b.readInt(!0); c < e; c++) {
          f.constraints.push(d.pathConstraints[b.readInt(!0)]);
        }
        e = b.readInt(!0);
      }
      for (c = 0; c < e; c++) {
        for (var h = b.readInt(!0), k = 0, m = b.readInt(!0); k < m; k++) {
          var r = b.readStringRef(), q = this.readAttachment(b, d, f, h, r, g);
          null != q && f.setAttachment(h, r, q);
        }
      }
      return f;
    };
    d.prototype.readAttachment = function(e, f, g, k, n, c) {
      var h = this.scale, m = e.readStringRef();
      null == m && (m = n);
      n = e.readByte();
      switch(d.AttachmentTypeValues[n]) {
        case a.AttachmentType.Region:
          f = e.readStringRef();
          k = e.readFloat();
          var r = e.readFloat(), q = e.readFloat();
          c = e.readFloat();
          var x = e.readFloat(), p = e.readFloat(), v = e.readFloat();
          n = e.readInt32();
          null == f && (f = m);
          e = this.attachmentLoader.newRegionAttachment(g, m, f);
          if (null == e) {
            break;
          }
          e.path = f;
          e.x = r * h;
          e.y = q * h;
          e.scaleX = c;
          e.scaleY = x;
          e.rotation = k;
          e.width = p * h;
          e.height = v * h;
          a.Color.rgba8888ToColor(e.color, n);
          e.updateOffset();
          return e;
        case a.AttachmentType.BoundingBox:
          k = e.readInt(!0);
          r = this.readVertices(e, k);
          n = c ? e.readInt32() : 0;
          h = this.attachmentLoader.newBoundingBoxAttachment(g, m);
          if (null == h) {
            break;
          }
          h.worldVerticesLength = k << 1;
          h.vertices = r.vertices;
          h.bones = r.bones;
          c && a.Color.rgba8888ToColor(h.color, n);
          return h;
        case a.AttachmentType.Mesh:
          f = e.readStringRef();
          n = e.readInt32();
          k = e.readInt(!0);
          q = this.readFloatArray(e, k << 1, 1);
          x = this.readShortArray(e);
          r = this.readVertices(e, k);
          var w = e.readInt(!0), C = null;
          v = p = 0;
          c && (C = this.readShortArray(e), p = e.readFloat(), v = e.readFloat());
          null == f && (f = m);
          e = this.attachmentLoader.newMeshAttachment(g, m, f);
          if (null == e) {
            break;
          }
          e.path = f;
          a.Color.rgba8888ToColor(e.color, n);
          e.bones = r.bones;
          e.vertices = r.vertices;
          e.worldVerticesLength = k << 1;
          e.triangles = x;
          e.regionUVs = q;
          e.updateUVs();
          e.hullLength = w << 1;
          c && (e.edges = C, e.width = p * h, e.height = v * h);
          return e;
        case a.AttachmentType.LinkedMesh:
          f = e.readStringRef();
          n = e.readInt32();
          r = e.readStringRef();
          q = e.readStringRef();
          x = e.readBoolean();
          v = p = 0;
          c && (p = e.readFloat(), v = e.readFloat());
          null == f && (f = m);
          e = this.attachmentLoader.newMeshAttachment(g, m, f);
          if (null == e) {
            break;
          }
          e.path = f;
          a.Color.rgba8888ToColor(e.color, n);
          c && (e.width = p * h, e.height = v * h);
          this.linkedMeshes.push(new b(e, r, k, q, x));
          return e;
        case a.AttachmentType.Path:
          p = e.readBoolean();
          v = e.readBoolean();
          k = e.readInt(!0);
          r = this.readVertices(e, k);
          q = a.Utils.newArray(k / 3, 0);
          n = 0;
          for (f = q.length; n < f; n++) {
            q[n] = e.readFloat() * h;
          }
          n = c ? e.readInt32() : 0;
          f = this.attachmentLoader.newPathAttachment(g, m);
          if (null == f) {
            break;
          }
          f.closed = p;
          f.constantSpeed = v;
          f.worldVerticesLength = k << 1;
          f.vertices = r.vertices;
          f.bones = r.bones;
          f.lengths = q;
          c && a.Color.rgba8888ToColor(f.color, n);
          return f;
        case a.AttachmentType.Point:
          k = e.readFloat();
          r = e.readFloat();
          q = e.readFloat();
          n = c ? e.readInt32() : 0;
          e = this.attachmentLoader.newPointAttachment(g, m);
          if (null == e) {
            break;
          }
          e.x = r * h;
          e.y = q * h;
          e.rotation = k;
          c && a.Color.rgba8888ToColor(e.color, n);
          return e;
        case a.AttachmentType.Clipping:
          if (h = e.readInt(!0), k = e.readInt(!0), r = this.readVertices(e, k), n = c ? e.readInt32() : 0, e = this.attachmentLoader.newClippingAttachment(g, m), null != e) {
            return e.endSlot = f.slots[h], e.worldVerticesLength = k << 1, e.vertices = r.vertices, e.bones = r.bones, c && a.Color.rgba8888ToColor(e.color, n), e;
          }
      }
      return null;
    };
    d.prototype.readVertices = function(b, d) {
      var e = d << 1, f = new g, k = this.scale;
      if (!b.readBoolean()) {
        return f.vertices = this.readFloatArray(b, e, k), f;
      }
      e = [];
      for (var c = [], h = 0; h < d; h++) {
        var r = b.readInt(!0);
        c.push(r);
        for (var z = 0; z < r; z++) {
          c.push(b.readInt(!0)), e.push(b.readFloat() * k), e.push(b.readFloat() * k), e.push(b.readFloat());
        }
      }
      f.vertices = a.Utils.toFloatArray(e);
      f.bones = c;
      return f;
    };
    d.prototype.readFloatArray = function(a, b, d) {
      var e = Array(b);
      if (1 == d) {
        for (var f = 0; f < b; f++) {
          e[f] = a.readFloat();
        }
      } else {
        for (f = 0; f < b; f++) {
          e[f] = a.readFloat() * d;
        }
      }
      return e;
    };
    d.prototype.readShortArray = function(a) {
      for (var b = a.readInt(!0), e = Array(b), d = 0; d < b; d++) {
        e[d] = a.readShort();
      }
      return e;
    };
    d.prototype.readAnimation = function(b, f, g) {
      for (var e = [], k = this.scale, c = 0, h = new a.Color, r = new a.Color, q = 0, y = b.readInt(!0); q < y; q++) {
        for (var x = b.readInt(!0), p = 0, v = b.readInt(!0); p < v; p++) {
          var w = b.readByte(), C = b.readInt(!0);
          switch(w) {
            case d.SLOT_ATTACHMENT:
              w = new a.AttachmentTimeline(C);
              w.slotIndex = x;
              for (var A = 0; A < C; A++) {
                w.setFrame(A, b.readFloat(), b.readStringRef());
              }
              e.push(w);
              c = Math.max(c, w.frames[C - 1]);
              break;
            case d.SLOT_COLOR:
              w = new a.ColorTimeline(C);
              w.slotIndex = x;
              for (A = 0; A < C; A++) {
                var D = b.readFloat();
                a.Color.rgba8888ToColor(h, b.readInt32());
                w.setFrame(A, D, h.r, h.g, h.b, h.a);
                A < C - 1 && this.readCurve(b, A, w);
              }
              e.push(w);
              c = Math.max(c, w.frames[(C - 1) * a.ColorTimeline.ENTRIES]);
              break;
            case d.SLOT_TWO_COLOR:
              w = new a.TwoColorTimeline(C);
              w.slotIndex = x;
              for (A = 0; A < C; A++) {
                D = b.readFloat(), a.Color.rgba8888ToColor(h, b.readInt32()), a.Color.rgb888ToColor(r, b.readInt32()), w.setFrame(A, D, h.r, h.g, h.b, h.a, r.r, r.g, r.b), A < C - 1 && this.readCurve(b, A, w);
              }
              e.push(w);
              c = Math.max(c, w.frames[(C - 1) * a.TwoColorTimeline.ENTRIES]);
          }
        }
      }
      q = 0;
      for (y = b.readInt(!0); q < y; q++) {
        for (D = b.readInt(!0), p = 0, v = b.readInt(!0); p < v; p++) {
          switch(w = b.readByte(), C = b.readInt(!0), w) {
            case d.BONE_ROTATE:
              w = new a.RotateTimeline(C);
              w.boneIndex = D;
              for (A = 0; A < C; A++) {
                w.setFrame(A, b.readFloat(), b.readFloat()), A < C - 1 && this.readCurve(b, A, w);
              }
              e.push(w);
              c = Math.max(c, w.frames[(C - 1) * a.RotateTimeline.ENTRIES]);
              break;
            case d.BONE_TRANSLATE:
            case d.BONE_SCALE:
            case d.BONE_SHEAR:
              x = 1;
              w == d.BONE_SCALE ? w = new a.ScaleTimeline(C) : w == d.BONE_SHEAR ? w = new a.ShearTimeline(C) : (w = new a.TranslateTimeline(C), x = k);
              w.boneIndex = D;
              for (A = 0; A < C; A++) {
                w.setFrame(A, b.readFloat(), b.readFloat() * x, b.readFloat() * x), A < C - 1 && this.readCurve(b, A, w);
              }
              e.push(w);
              c = Math.max(c, w.frames[(C - 1) * a.TranslateTimeline.ENTRIES]);
          }
        }
      }
      q = 0;
      for (y = b.readInt(!0); q < y; q++) {
        D = b.readInt(!0);
        C = b.readInt(!0);
        w = new a.IkConstraintTimeline(C);
        w.ikConstraintIndex = D;
        for (A = 0; A < C; A++) {
          w.setFrame(A, b.readFloat(), b.readFloat(), b.readFloat() * k, b.readByte(), b.readBoolean(), b.readBoolean()), A < C - 1 && this.readCurve(b, A, w);
        }
        e.push(w);
        c = Math.max(c, w.frames[(C - 1) * a.IkConstraintTimeline.ENTRIES]);
      }
      q = 0;
      for (y = b.readInt(!0); q < y; q++) {
        D = b.readInt(!0);
        C = b.readInt(!0);
        w = new a.TransformConstraintTimeline(C);
        w.transformConstraintIndex = D;
        for (A = 0; A < C; A++) {
          w.setFrame(A, b.readFloat(), b.readFloat(), b.readFloat(), b.readFloat(), b.readFloat()), A < C - 1 && this.readCurve(b, A, w);
        }
        e.push(w);
        c = Math.max(c, w.frames[(C - 1) * a.TransformConstraintTimeline.ENTRIES]);
      }
      q = 0;
      for (y = b.readInt(!0); q < y; q++) {
        for (D = b.readInt(!0), h = g.pathConstraints[D], p = 0, v = b.readInt(!0); p < v; p++) {
          switch(w = b.readByte(), C = b.readInt(!0), w) {
            case d.PATH_POSITION:
            case d.PATH_SPACING:
              x = 1;
              if (w == d.PATH_SPACING) {
                if (w = new a.PathConstraintSpacingTimeline(C), h.spacingMode == a.SpacingMode.Length || h.spacingMode == a.SpacingMode.Fixed) {
                  x = k;
                }
              } else {
                w = new a.PathConstraintPositionTimeline(C), h.positionMode == a.PositionMode.Fixed && (x = k);
              }
              w.pathConstraintIndex = D;
              for (A = 0; A < C; A++) {
                w.setFrame(A, b.readFloat(), b.readFloat() * x), A < C - 1 && this.readCurve(b, A, w);
              }
              e.push(w);
              c = Math.max(c, w.frames[(C - 1) * a.PathConstraintPositionTimeline.ENTRIES]);
              break;
            case d.PATH_MIX:
              w = new a.PathConstraintMixTimeline(C);
              w.pathConstraintIndex = D;
              for (A = 0; A < C; A++) {
                w.setFrame(A, b.readFloat(), b.readFloat(), b.readFloat()), A < C - 1 && this.readCurve(b, A, w);
              }
              e.push(w);
              c = Math.max(c, w.frames[(C - 1) * a.PathConstraintMixTimeline.ENTRIES]);
          }
        }
      }
      q = 0;
      for (y = b.readInt(!0); q < y; q++) {
        for (h = g.skins[b.readInt(!0)], p = 0, v = b.readInt(!0); p < v; p++) {
          x = b.readInt(!0);
          r = 0;
          for (var F = b.readInt(!0); r < F; r++) {
            D = h.getAttachment(x, b.readStringRef());
            var B = null != D.bones, E = D.vertices, I = B ? E.length / 3 * 2 : E.length;
            C = b.readInt(!0);
            w = new a.DeformTimeline(C);
            w.slotIndex = x;
            w.attachment = D;
            for (A = 0; A < C; A++) {
              D = b.readFloat();
              var K = b.readInt(!0);
              if (0 == K) {
                var J = B ? a.Utils.newFloatArray(I) : E;
              } else {
                J = a.Utils.newFloatArray(I);
                var R = b.readInt(!0);
                K += R;
                if (1 == k) {
                  for (; R < K; R++) {
                    J[R] = b.readFloat();
                  }
                } else {
                  for (; R < K; R++) {
                    J[R] = b.readFloat() * k;
                  }
                }
                if (!B) {
                  for (R = 0, K = J.length; R < K; R++) {
                    J[R] += E[R];
                  }
                }
              }
              w.setFrame(A, D, J);
              A < C - 1 && this.readCurve(b, A, w);
            }
            e.push(w);
            c = Math.max(c, w.frames[C - 1]);
          }
        }
      }
      k = b.readInt(!0);
      if (0 < k) {
        w = new a.DrawOrderTimeline(k);
        y = g.slots.length;
        for (q = 0; q < k; q++) {
          D = b.readFloat();
          v = b.readInt(!0);
          C = a.Utils.newArray(y, 0);
          for (p = y - 1; 0 <= p; p--) {
            C[p] = -1;
          }
          A = a.Utils.newArray(y - v, 0);
          for (p = r = h = 0; p < v; p++) {
            for (x = b.readInt(!0); h != x;) {
              A[r++] = h++;
            }
            C[h + b.readInt(!0)] = h++;
          }
          for (; h < y;) {
            A[r++] = h++;
          }
          for (p = y - 1; 0 <= p; p--) {
            -1 == C[p] && (C[p] = A[--r]);
          }
          w.setFrame(q, D, C);
        }
        e.push(w);
        c = Math.max(c, w.frames[k - 1]);
      }
      p = b.readInt(!0);
      if (0 < p) {
        w = new a.EventTimeline(p);
        for (q = 0; q < p; q++) {
          D = b.readFloat(), x = g.events[b.readInt(!0)], D = new a.Event(D, x), D.intValue = b.readInt(!1), D.floatValue = b.readFloat(), D.stringValue = b.readBoolean() ? b.readString() : x.stringValue, null != D.data.audioPath && (D.volume = b.readFloat(), D.balance = b.readFloat()), w.setFrame(q, D);
        }
        e.push(w);
        c = Math.max(c, w.frames[p - 1]);
      }
      return new a.Animation(f, e, c);
    };
    d.prototype.readCurve = function(a, b, f) {
      switch(a.readByte()) {
        case d.CURVE_STEPPED:
          f.setStepped(b);
          break;
        case d.CURVE_BEZIER:
          this.setCurve(f, b, a.readFloat(), a.readFloat(), a.readFloat(), a.readFloat());
      }
    };
    d.prototype.setCurve = function(a, b, d, f, g, c) {
      a.setCurve(b, d, f, g, c);
    };
    d.AttachmentTypeValues = [0, 1, 2, 3, 4, 5, 6];
    d.TransformModeValues = [a.TransformMode.Normal, a.TransformMode.OnlyTranslation, a.TransformMode.NoRotationOrReflection, a.TransformMode.NoScale, a.TransformMode.NoScaleOrReflection];
    d.PositionModeValues = [a.PositionMode.Fixed, a.PositionMode.Percent];
    d.SpacingModeValues = [a.SpacingMode.Length, a.SpacingMode.Fixed, a.SpacingMode.Percent];
    d.RotateModeValues = [a.RotateMode.Tangent, a.RotateMode.Chain, a.RotateMode.ChainScale];
    d.BlendModeValues = [a.BlendMode.Normal, a.BlendMode.Additive, a.BlendMode.Multiply, a.BlendMode.Screen];
    d.BONE_ROTATE = 0;
    d.BONE_TRANSLATE = 1;
    d.BONE_SCALE = 2;
    d.BONE_SHEAR = 3;
    d.SLOT_ATTACHMENT = 0;
    d.SLOT_COLOR = 1;
    d.SLOT_TWO_COLOR = 2;
    d.PATH_POSITION = 0;
    d.PATH_SPACING = 1;
    d.PATH_MIX = 2;
    d.CURVE_LINEAR = 0;
    d.CURVE_STEPPED = 1;
    d.CURVE_BEZIER = 2;
    return d;
  }();
  a.SkeletonBinary = d;
  var k = function() {
    function a(a, b, d, f) {
      void 0 === b && (b = []);
      void 0 === d && (d = 0);
      void 0 === f && (f = new DataView(a.buffer));
      this.strings = b;
      this.index = d;
      this.buffer = f;
    }
    a.prototype.readByte = function() {
      return this.buffer.getInt8(this.index++);
    };
    a.prototype.readShort = function() {
      var a = this.buffer.getInt16(this.index);
      this.index += 2;
      return a;
    };
    a.prototype.readInt32 = function() {
      var a = this.buffer.getInt32(this.index);
      this.index += 4;
      return a;
    };
    a.prototype.readInt = function(a) {
      var b = this.readByte(), e = b & 127;
      0 != (b & 128) && (b = this.readByte(), e |= (b & 127) << 7, 0 != (b & 128) && (b = this.readByte(), e |= (b & 127) << 14, 0 != (b & 128) && (b = this.readByte(), e |= (b & 127) << 21, 0 != (b & 128) && (b = this.readByte(), e |= (b & 127) << 28))));
      return a ? e : e >>> 1 ^ -(e & 1);
    };
    a.prototype.readStringRef = function() {
      var a = this.readInt(!0);
      return 0 == a ? null : this.strings[a - 1];
    };
    a.prototype.readString = function() {
      var a = this.readInt(!0);
      switch(a) {
        case 0:
          return null;
        case 1:
          return "";
      }
      a--;
      for (var b = "", d = 0; d < a;) {
        var f = this.readByte();
        switch(f >> 4) {
          case 12:
          case 13:
            b += String.fromCharCode((f & 31) << 6 | this.readByte() & 63);
            d += 2;
            break;
          case 14:
            b += String.fromCharCode((f & 15) << 12 | (this.readByte() & 63) << 6 | this.readByte() & 63);
            d += 3;
            break;
          default:
            b += String.fromCharCode(f), d++;
        }
      }
      return b;
    };
    a.prototype.readFloat = function() {
      var a = this.buffer.getFloat32(this.index);
      this.index += 4;
      return a;
    };
    a.prototype.readBoolean = function() {
      return 0 != this.readByte();
    };
    return a;
  }(), b = function() {
    return function(a, b, d, g, k) {
      this.mesh = a;
      this.skin = b;
      this.slotIndex = d;
      this.parent = g;
      this.inheritDeform = k;
    };
  }(), g = function() {
    return function(a, b) {
      void 0 === a && (a = null);
      void 0 === b && (b = null);
      this.bones = a;
      this.vertices = b;
    };
  }();
})(spine || (spine = {}));
(function(a) {
  var d = function() {
    function d() {
      this.maxY = this.maxX = this.minY = this.minX = 0;
      this.boundingBoxes = [];
      this.polygons = [];
      this.polygonPool = new a.Pool(function() {
        return a.Utils.newFloatArray(16);
      });
    }
    d.prototype.update = function(b, d) {
      if (null == b) {
        throw Error("skeleton cannot be null.");
      }
      var f = this.boundingBoxes, e = this.polygons, g = this.polygonPool;
      b = b.slots;
      var k = b.length;
      f.length = 0;
      g.freeAll(e);
      for (var m = e.length = 0; m < k; m++) {
        var n = b[m];
        if (n.bone.active) {
          var c = n.getAttachment();
          if (c instanceof a.BoundingBoxAttachment) {
            f.push(c);
            var h = g.obtain();
            h.length != c.worldVerticesLength && (h = a.Utils.newFloatArray(c.worldVerticesLength));
            e.push(h);
            c.computeWorldVertices(n, 0, c.worldVerticesLength, h, 0, 2);
          }
        }
      }
      d ? this.aabbCompute() : (this.minY = this.minX = Number.POSITIVE_INFINITY, this.maxY = this.maxX = Number.NEGATIVE_INFINITY);
    };
    d.prototype.aabbCompute = function() {
      for (var a = Number.POSITIVE_INFINITY, d = Number.POSITIVE_INFINITY, f = Number.NEGATIVE_INFINITY, e = Number.NEGATIVE_INFINITY, k = this.polygons, q = 0, m = k.length; q < m; q++) {
        var n = k[q], c = n, h = 0;
        for (n = n.length; h < n; h += 2) {
          var t = c[h], z = c[h + 1];
          a = Math.min(a, t);
          d = Math.min(d, z);
          f = Math.max(f, t);
          e = Math.max(e, z);
        }
      }
      this.minX = a;
      this.minY = d;
      this.maxX = f;
      this.maxY = e;
    };
    d.prototype.aabbContainsPoint = function(a, d) {
      return a >= this.minX && a <= this.maxX && d >= this.minY && d <= this.maxY;
    };
    d.prototype.aabbIntersectsSegment = function(a, d, f, e) {
      var b = this.minX, g = this.minY, k = this.maxX, n = this.maxY;
      if (a <= b && f <= b || d <= g && e <= g || a >= k && f >= k || d >= n && e >= n) {
        return !1;
      }
      f = (e - d) / (f - a);
      e = f * (b - a) + d;
      if (e > g && e < n) {
        return !0;
      }
      e = f * (k - a) + d;
      if (e > g && e < n) {
        return !0;
      }
      g = (g - d) / f + a;
      if (g > b && g < k) {
        return !0;
      }
      g = (n - d) / f + a;
      return g > b && g < k ? !0 : !1;
    };
    d.prototype.aabbIntersectsSkeleton = function(a) {
      return this.minX < a.maxX && this.maxX > a.minX && this.minY < a.maxY && this.maxY > a.minY;
    };
    d.prototype.containsPoint = function(a, d) {
      for (var b = this.polygons, e = 0, g = b.length; e < g; e++) {
        if (this.containsPointPolygon(b[e], a, d)) {
          return this.boundingBoxes[e];
        }
      }
      return null;
    };
    d.prototype.containsPointPolygon = function(a, d, f) {
      for (var b = a.length, g = b - 2, k = !1, m = 0; m < b; m += 2) {
        var n = a[m + 1], c = a[g + 1];
        if (n < f && c >= f || c < f && n >= f) {
          var h = a[m];
          h + (f - n) / (c - n) * (a[g] - h) < d && (k = !k);
        }
        g = m;
      }
      return k;
    };
    d.prototype.intersectsSegment = function(a, d, f, e) {
      for (var b = this.polygons, g = 0, k = b.length; g < k; g++) {
        if (this.intersectsSegmentPolygon(b[g], a, d, f, e)) {
          return this.boundingBoxes[g];
        }
      }
      return null;
    };
    d.prototype.intersectsSegmentPolygon = function(a, d, f, e, k) {
      for (var b = a.length, g = d - e, n = f - k, c = d * k - f * e, h = a[b - 2], r = a[b - 1], z = 0; z < b; z += 2) {
        var y = a[z], x = a[z + 1], p = h * x - r * y, v = h - y, w = r - x, C = g * w - n * v;
        v = (c * v - g * p) / C;
        if ((v >= h && v <= y || v >= y && v <= h) && (v >= d && v <= e || v >= e && v <= d) && (h = (c * w - n * p) / C, (h >= r && h <= x || h >= x && h <= r) && (h >= f && h <= k || h >= k && h <= f))) {
          return !0;
        }
        h = y;
        r = x;
      }
      return !1;
    };
    d.prototype.getPolygon = function(a) {
      if (null == a) {
        throw Error("boundingBox cannot be null.");
      }
      a = this.boundingBoxes.indexOf(a);
      return -1 == a ? null : this.polygons[a];
    };
    d.prototype.getWidth = function() {
      return this.maxX - this.minX;
    };
    d.prototype.getHeight = function() {
      return this.maxY - this.minY;
    };
    return d;
  }();
  a.SkeletonBounds = d;
})(spine || (spine = {}));
(function(a) {
  var d = function() {
    function d() {
      this.triangulator = new a.Triangulator;
      this.clippingPolygon = [];
      this.clipOutput = [];
      this.clippedVertices = [];
      this.clippedTriangles = [];
      this.scratch = [];
    }
    d.prototype.clipStart = function(b, g) {
      if (null != this.clipAttachment) {
        return 0;
      }
      this.clipAttachment = g;
      var f = g.worldVerticesLength, e = a.Utils.setArraySize(this.clippingPolygon, f);
      g.computeWorldVertices(b, 0, f, e, 0, 2);
      b = this.clippingPolygon;
      d.makeClockwise(b);
      b = this.clippingPolygons = this.triangulator.decompose(b, this.triangulator.triangulate(b));
      g = 0;
      for (f = b.length; g < f; g++) {
        e = b[g], d.makeClockwise(e), e.push(e[0]), e.push(e[1]);
      }
      return b.length;
    };
    d.prototype.clipEndWithSlot = function(a) {
      null != this.clipAttachment && this.clipAttachment.endSlot == a.data && this.clipEnd();
    };
    d.prototype.clipEnd = function() {
      null != this.clipAttachment && (this.clippingPolygons = this.clipAttachment = null, this.clippedVertices.length = 0, this.clippedTriangles.length = 0, this.clippingPolygon.length = 0);
    };
    d.prototype.isClipping = function() {
      return null != this.clipAttachment;
    };
    d.prototype.clipTriangles = function(b, d, f, e, k, q, m, n) {
      d = this.clipOutput;
      var c = this.clippedVertices, h = this.clippedTriangles, g = this.clippingPolygons, r = this.clippingPolygons.length, y = n ? 12 : 8, x = 0;
      c.length = 0;
      var p = h.length = 0;
      a: for (; p < e; p += 3) {
        var v = f[p] << 1, w = b[v], C = b[v + 1], A = k[v], D = k[v + 1];
        v = f[p + 1] << 1;
        var F = b[v], B = b[v + 1], E = k[v], I = k[v + 1];
        v = f[p + 2] << 1;
        var K = b[v], J = b[v + 1], R = k[v];
        v = k[v + 1];
        for (var L = 0; L < r; L++) {
          var H = c.length;
          if (this.clip(w, C, F, B, K, J, g[L], d)) {
            var M = d.length;
            if (0 != M) {
              for (var S = B - J, O = K - F, Z = w - K, Q = J - C, U = 1 / (S * Z + O * (C - J)), P = M >> 1, da = this.clipOutput, N = a.Utils.setArraySize(c, H + P * y), V = 0; V < M; V += 2) {
                var ea = da[V], ha = da[V + 1];
                N[H] = ea;
                N[H + 1] = ha;
                N[H + 2] = q.r;
                N[H + 3] = q.g;
                N[H + 4] = q.b;
                N[H + 5] = q.a;
                ea -= K;
                var W = ha - J;
                ha = (S * ea + O * W) * U;
                ea = (Q * ea + Z * W) * U;
                W = 1 - ha - ea;
                N[H + 6] = A * ha + E * ea + R * W;
                N[H + 7] = D * ha + I * ea + v * W;
                n && (N[H + 8] = m.r, N[H + 9] = m.g, N[H + 10] = m.b, N[H + 11] = m.a);
                H += y;
              }
              H = h.length;
              M = a.Utils.setArraySize(h, H + 3 * (P - 2));
              P--;
              for (V = 1; V < P; V++) {
                M[H] = x, M[H + 1] = x + V, M[H + 2] = x + V + 1, H += 3;
              }
              x += P + 1;
            }
          } else {
            N = a.Utils.setArraySize(c, H + 3 * y);
            N[H] = w;
            N[H + 1] = C;
            N[H + 2] = q.r;
            N[H + 3] = q.g;
            N[H + 4] = q.b;
            N[H + 5] = q.a;
            n ? (N[H + 6] = A, N[H + 7] = D, N[H + 8] = m.r, N[H + 9] = m.g, N[H + 10] = m.b, N[H + 11] = m.a, N[H + 12] = F, N[H + 13] = B, N[H + 14] = q.r, N[H + 15] = q.g, N[H + 16] = q.b, N[H + 17] = q.a, N[H + 18] = E, N[H + 19] = I, N[H + 20] = m.r, N[H + 21] = m.g, N[H + 22] = m.b, N[H + 23] = m.a, N[H + 24] = K, N[H + 25] = J, N[H + 26] = q.r, N[H + 27] = q.g, N[H + 28] = q.b, N[H + 29] = q.a, N[H + 30] = R, N[H + 31] = v, N[H + 32] = m.r, N[H + 33] = m.g, N[H + 34] = m.b, N[H + 35] = m.a) : 
            (N[H + 6] = A, N[H + 7] = D, N[H + 8] = F, N[H + 9] = B, N[H + 10] = q.r, N[H + 11] = q.g, N[H + 12] = q.b, N[H + 13] = q.a, N[H + 14] = E, N[H + 15] = I, N[H + 16] = K, N[H + 17] = J, N[H + 18] = q.r, N[H + 19] = q.g, N[H + 20] = q.b, N[H + 21] = q.a, N[H + 22] = R, N[H + 23] = v);
            H = h.length;
            M = a.Utils.setArraySize(h, H + 3);
            M[H] = x;
            M[H + 1] = x + 1;
            M[H + 2] = x + 2;
            x += 3;
            continue a;
          }
        }
      }
    };
    d.prototype.clip = function(a, d, f, e, k, q, m, n) {
      var c = n, b = !1;
      if (2 <= m.length % 4) {
        var g = n;
        n = this.scratch;
      } else {
        g = this.scratch;
      }
      g.length = 0;
      g.push(a);
      g.push(d);
      g.push(f);
      g.push(e);
      g.push(k);
      g.push(q);
      g.push(a);
      g.push(d);
      n.length = 0;
      d = m.length - 4;
      for (a = 0;; a += 2) {
        f = m[a];
        e = m[a + 1];
        k = m[a + 2];
        q = m[a + 3];
        for (var r = f - k, y = e - q, x = g, p = g.length - 2, v = n.length, w = 0; w < p; w += 2) {
          var C = x[w], A = x[w + 1], D = x[w + 2], F = x[w + 3], B = 0 < r * (F - q) - y * (D - k);
          if (0 < r * (A - q) - y * (C - k)) {
            if (B) {
              n.push(D);
              n.push(F);
              continue;
            }
            b = F - A;
            B = D - C;
            var E = b * (k - f) - B * (q - e);
            1E-6 < Math.abs(E) ? (b = (B * (e - A) - b * (f - C)) / E, n.push(f + (k - f) * b), n.push(e + (q - e) * b)) : (n.push(f), n.push(e));
          } else {
            B && (b = F - A, B = D - C, E = b * (k - f) - B * (q - e), 1E-6 < Math.abs(E) ? (b = (B * (e - A) - b * (f - C)) / E, n.push(f + (k - f) * b), n.push(e + (q - e) * b)) : (n.push(f), n.push(e)), n.push(D), n.push(F));
          }
          b = !0;
        }
        if (v == n.length) {
          return c.length = 0, !0;
        }
        n.push(n[0]);
        n.push(n[1]);
        if (a == d) {
          break;
        }
        f = n;
        n = g;
        n.length = 0;
        g = f;
      }
      if (c != n) {
        for (a = c.length = 0, m = n.length - 2; a < m; a++) {
          c[a] = n[a];
        }
      } else {
        c.length -= 2;
      }
      return b;
    };
    d.makeClockwise = function(a) {
      for (var b = a.length, d = a[b - 2] * a[1] - a[0] * a[b - 1], e, k, q, m, n = 0, c = b - 3; n < c; n += 2) {
        e = a[n], k = a[n + 1], q = a[n + 2], m = a[n + 3], d += e * m - q * k;
      }
      if (!(0 > d)) {
        for (n = 0, d = b - 2, c = b >> 1; n < c; n += 2) {
          b = a[n], e = a[n + 1], k = d - n, a[n] = a[k], a[n + 1] = a[k + 1], a[k] = b, a[k + 1] = e;
        }
      }
    };
    return d;
  }();
  a.SkeletonClipping = d;
})(spine || (spine = {}));
(function(a) {
  var d = function() {
    function a() {
      this.bones = [];
      this.slots = [];
      this.skins = [];
      this.events = [];
      this.animations = [];
      this.ikConstraints = [];
      this.transformConstraints = [];
      this.pathConstraints = [];
      this.fps = 0;
    }
    a.prototype.findBone = function(a) {
      if (null == a) {
        throw Error("boneName cannot be null.");
      }
      for (var b = this.bones, d = 0, e = b.length; d < e; d++) {
        var k = b[d];
        if (k.name == a) {
          return k;
        }
      }
      return null;
    };
    a.prototype.findBoneIndex = function(a) {
      if (null == a) {
        throw Error("boneName cannot be null.");
      }
      for (var b = this.bones, d = 0, e = b.length; d < e; d++) {
        if (b[d].name == a) {
          return d;
        }
      }
      return -1;
    };
    a.prototype.findSlot = function(a) {
      if (null == a) {
        throw Error("slotName cannot be null.");
      }
      for (var b = this.slots, d = 0, e = b.length; d < e; d++) {
        var k = b[d];
        if (k.name == a) {
          return k;
        }
      }
      return null;
    };
    a.prototype.findSlotIndex = function(a) {
      if (null == a) {
        throw Error("slotName cannot be null.");
      }
      for (var b = this.slots, d = 0, e = b.length; d < e; d++) {
        if (b[d].name == a) {
          return d;
        }
      }
      return -1;
    };
    a.prototype.findSkin = function(a) {
      if (null == a) {
        throw Error("skinName cannot be null.");
      }
      for (var b = this.skins, d = 0, e = b.length; d < e; d++) {
        var k = b[d];
        if (k.name == a) {
          return k;
        }
      }
      return null;
    };
    a.prototype.findEvent = function(a) {
      if (null == a) {
        throw Error("eventDataName cannot be null.");
      }
      for (var b = this.events, d = 0, e = b.length; d < e; d++) {
        var k = b[d];
        if (k.name == a) {
          return k;
        }
      }
      return null;
    };
    a.prototype.findAnimation = function(a) {
      if (null == a) {
        throw Error("animationName cannot be null.");
      }
      for (var b = this.animations, d = 0, e = b.length; d < e; d++) {
        var k = b[d];
        if (k.name == a) {
          return k;
        }
      }
      return null;
    };
    a.prototype.findIkConstraint = function(a) {
      if (null == a) {
        throw Error("constraintName cannot be null.");
      }
      for (var b = this.ikConstraints, d = 0, e = b.length; d < e; d++) {
        var k = b[d];
        if (k.name == a) {
          return k;
        }
      }
      return null;
    };
    a.prototype.findTransformConstraint = function(a) {
      if (null == a) {
        throw Error("constraintName cannot be null.");
      }
      for (var b = this.transformConstraints, d = 0, e = b.length; d < e; d++) {
        var k = b[d];
        if (k.name == a) {
          return k;
        }
      }
      return null;
    };
    a.prototype.findPathConstraint = function(a) {
      if (null == a) {
        throw Error("constraintName cannot be null.");
      }
      for (var b = this.pathConstraints, d = 0, e = b.length; d < e; d++) {
        var k = b[d];
        if (k.name == a) {
          return k;
        }
      }
      return null;
    };
    a.prototype.findPathConstraintIndex = function(a) {
      if (null == a) {
        throw Error("pathConstraintName cannot be null.");
      }
      for (var b = this.pathConstraints, d = 0, e = b.length; d < e; d++) {
        if (b[d].name == a) {
          return d;
        }
      }
      return -1;
    };
    return a;
  }();
  a.SkeletonData = d;
})(spine || (spine = {}));
(function(a) {
  var d = function() {
    function b(a) {
      this.scale = 1;
      this.linkedMeshes = [];
      this.attachmentLoader = a;
    }
    b.prototype.readSkeletonData = function(d) {
      var f = this.scale, e = new a.SkeletonData;
      d = "string" === typeof d ? JSON.parse(d) : d;
      var g = d.skeleton;
      if (null != g) {
        e.hash = g.hash;
        e.version = g.spine;
        if ("3.8.75" == e.version) {
          throw Error("Unsupported skeleton data, please export with a newer version of Spine.");
        }
        e.x = g.x;
        e.y = g.y;
        e.width = g.width;
        e.height = g.height;
        e.fps = g.fps;
        e.imagesPath = g.images;
      }
      if (d.bones) {
        for (g = 0; g < d.bones.length; g++) {
          var k = d.bones[g], m = null, n = this.getValue(k, "parent", null);
          if (null != n && (m = e.findBone(n), null == m)) {
            throw Error("Parent bone not found: " + n);
          }
          m = new a.BoneData(e.bones.length, k.name, m);
          m.length = this.getValue(k, "length", 0) * f;
          m.x = this.getValue(k, "x", 0) * f;
          m.y = this.getValue(k, "y", 0) * f;
          m.rotation = this.getValue(k, "rotation", 0);
          m.scaleX = this.getValue(k, "scaleX", 1);
          m.scaleY = this.getValue(k, "scaleY", 1);
          m.shearX = this.getValue(k, "shearX", 0);
          m.shearY = this.getValue(k, "shearY", 0);
          m.transformMode = b.transformModeFromString(this.getValue(k, "transform", "normal"));
          m.skinRequired = this.getValue(k, "skin", !1);
          e.bones.push(m);
        }
      }
      if (d.slots) {
        for (g = 0; g < d.slots.length; g++) {
          k = d.slots[g];
          var c = k.name;
          n = k.bone;
          m = e.findBone(n);
          if (null == m) {
            throw Error("Slot bone not found: " + n);
          }
          m = new a.SlotData(e.slots.length, c, m);
          n = this.getValue(k, "color", null);
          null != n && m.color.setFromString(n);
          n = this.getValue(k, "dark", null);
          null != n && (m.darkColor = new a.Color(1, 1, 1, 1), m.darkColor.setFromString(n));
          m.attachmentName = this.getValue(k, "attachment", null);
          m.blendMode = b.blendModeFromString(this.getValue(k, "blend", "normal"));
          e.slots.push(m);
        }
      }
      if (d.ik) {
        for (g = 0; g < d.ik.length; g++) {
          var h = d.ik[g];
          m = new a.IkConstraintData(h.name);
          m.order = this.getValue(h, "order", 0);
          m.skinRequired = this.getValue(h, "skin", !1);
          for (var t = 0; t < h.bones.length; t++) {
            n = h.bones[t];
            k = e.findBone(n);
            if (null == k) {
              throw Error("IK bone not found: " + n);
            }
            m.bones.push(k);
          }
          k = h.target;
          m.target = e.findBone(k);
          if (null == m.target) {
            throw Error("IK target bone not found: " + k);
          }
          m.mix = this.getValue(h, "mix", 1);
          m.softness = this.getValue(h, "softness", 0) * f;
          m.bendDirection = this.getValue(h, "bendPositive", !0) ? 1 : -1;
          m.compress = this.getValue(h, "compress", !1);
          m.stretch = this.getValue(h, "stretch", !1);
          m.uniform = this.getValue(h, "uniform", !1);
          e.ikConstraints.push(m);
        }
      }
      if (d.transform) {
        for (g = 0; g < d.transform.length; g++) {
          h = d.transform[g];
          m = new a.TransformConstraintData(h.name);
          m.order = this.getValue(h, "order", 0);
          m.skinRequired = this.getValue(h, "skin", !1);
          for (t = 0; t < h.bones.length; t++) {
            n = h.bones[t];
            k = e.findBone(n);
            if (null == k) {
              throw Error("Transform constraint bone not found: " + n);
            }
            m.bones.push(k);
          }
          k = h.target;
          m.target = e.findBone(k);
          if (null == m.target) {
            throw Error("Transform constraint target bone not found: " + k);
          }
          m.local = this.getValue(h, "local", !1);
          m.relative = this.getValue(h, "relative", !1);
          m.offsetRotation = this.getValue(h, "rotation", 0);
          m.offsetX = this.getValue(h, "x", 0) * f;
          m.offsetY = this.getValue(h, "y", 0) * f;
          m.offsetScaleX = this.getValue(h, "scaleX", 0);
          m.offsetScaleY = this.getValue(h, "scaleY", 0);
          m.offsetShearY = this.getValue(h, "shearY", 0);
          m.rotateMix = this.getValue(h, "rotateMix", 1);
          m.translateMix = this.getValue(h, "translateMix", 1);
          m.scaleMix = this.getValue(h, "scaleMix", 1);
          m.shearMix = this.getValue(h, "shearMix", 1);
          e.transformConstraints.push(m);
        }
      }
      if (d.path) {
        for (g = 0; g < d.path.length; g++) {
          h = d.path[g];
          m = new a.PathConstraintData(h.name);
          m.order = this.getValue(h, "order", 0);
          m.skinRequired = this.getValue(h, "skin", !1);
          for (t = 0; t < h.bones.length; t++) {
            n = h.bones[t];
            k = e.findBone(n);
            if (null == k) {
              throw Error("Transform constraint bone not found: " + n);
            }
            m.bones.push(k);
          }
          k = h.target;
          m.target = e.findSlot(k);
          if (null == m.target) {
            throw Error("Path target slot not found: " + k);
          }
          m.positionMode = b.positionModeFromString(this.getValue(h, "positionMode", "percent"));
          m.spacingMode = b.spacingModeFromString(this.getValue(h, "spacingMode", "length"));
          m.rotateMode = b.rotateModeFromString(this.getValue(h, "rotateMode", "tangent"));
          m.offsetRotation = this.getValue(h, "rotation", 0);
          m.position = this.getValue(h, "position", 0);
          m.positionMode == a.PositionMode.Fixed && (m.position *= f);
          m.spacing = this.getValue(h, "spacing", 0);
          if (m.spacingMode == a.SpacingMode.Length || m.spacingMode == a.SpacingMode.Fixed) {
            m.spacing *= f;
          }
          m.rotateMix = this.getValue(h, "rotateMix", 1);
          m.translateMix = this.getValue(h, "translateMix", 1);
          e.pathConstraints.push(m);
        }
      }
      if (d.skins) {
        for (g = 0; g < d.skins.length; g++) {
          m = d.skins[g];
          f = new a.Skin(m.name);
          if (m.bones) {
            for (n = 0; n < m.bones.length; n++) {
              k = e.findBone(m.bones[n]);
              if (null == k) {
                throw Error("Skin bone not found: " + m.bones[g]);
              }
              f.bones.push(k);
            }
          }
          if (m.ik) {
            for (n = 0; n < m.ik.length; n++) {
              k = e.findIkConstraint(m.ik[n]);
              if (null == k) {
                throw Error("Skin IK constraint not found: " + m.ik[g]);
              }
              f.constraints.push(k);
            }
          }
          if (m.transform) {
            for (n = 0; n < m.transform.length; n++) {
              k = e.findTransformConstraint(m.transform[n]);
              if (null == k) {
                throw Error("Skin transform constraint not found: " + m.transform[g]);
              }
              f.constraints.push(k);
            }
          }
          if (m.path) {
            for (n = 0; n < m.path.length; n++) {
              k = e.findPathConstraint(m.path[n]);
              if (null == k) {
                throw Error("Skin path constraint not found: " + m.path[g]);
              }
              f.constraints.push(k);
            }
          }
          for (c in m.attachments) {
            n = e.findSlot(c);
            if (null == n) {
              throw Error("Slot not found: " + c);
            }
            k = m.attachments[c];
            for (var z in k) {
              h = this.readAttachment(k[z], f, n.index, z, e), null != h && f.setAttachment(n.index, z, h);
            }
          }
          e.skins.push(f);
          "default" == f.name && (e.defaultSkin = f);
        }
      }
      g = 0;
      for (c = this.linkedMeshes.length; g < c; g++) {
        z = this.linkedMeshes[g];
        f = null == z.skin ? e.defaultSkin : e.findSkin(z.skin);
        if (null == f) {
          throw Error("Skin not found: " + z.skin);
        }
        f = f.getAttachment(z.slotIndex, z.parent);
        if (null == f) {
          throw Error("Parent mesh not found: " + z.parent);
        }
        z.mesh.deformAttachment = z.inheritDeform ? f : z.mesh;
        z.mesh.setParentMesh(f);
        z.mesh.updateUVs();
      }
      this.linkedMeshes.length = 0;
      if (d.events) {
        for (var y in d.events) {
          g = d.events[y], m = new a.EventData(y), m.intValue = this.getValue(g, "int", 0), m.floatValue = this.getValue(g, "float", 0), m.stringValue = this.getValue(g, "string", ""), m.audioPath = this.getValue(g, "audio", null), null != m.audioPath && (m.volume = this.getValue(g, "volume", 1), m.balance = this.getValue(g, "balance", 0)), e.events.push(m);
        }
      }
      if (d.animations) {
        for (var x in d.animations) {
          this.readAnimation(d.animations[x], x, e);
        }
      }
      return e;
    };
    b.prototype.readAttachment = function(b, d, e, r, q) {
      var f = this.scale;
      r = this.getValue(b, "name", r);
      switch(this.getValue(b, "type", "region")) {
        case "region":
          q = this.getValue(b, "path", r);
          e = this.attachmentLoader.newRegionAttachment(d, r, q);
          if (null == e) {
            break;
          }
          e.path = q;
          e.x = this.getValue(b, "x", 0) * f;
          e.y = this.getValue(b, "y", 0) * f;
          e.scaleX = this.getValue(b, "scaleX", 1);
          e.scaleY = this.getValue(b, "scaleY", 1);
          e.rotation = this.getValue(b, "rotation", 0);
          e.width = b.width * f;
          e.height = b.height * f;
          d = this.getValue(b, "color", null);
          null != d && e.color.setFromString(d);
          e.updateOffset();
          return e;
        case "boundingbox":
          f = this.attachmentLoader.newBoundingBoxAttachment(d, r);
          if (null == f) {
            break;
          }
          this.readVertices(b, f, b.vertexCount << 1);
          d = this.getValue(b, "color", null);
          null != d && f.color.setFromString(d);
          return f;
        case "mesh":
        case "linkedmesh":
          q = this.getValue(b, "path", r);
          r = this.attachmentLoader.newMeshAttachment(d, r, q);
          if (null == r) {
            break;
          }
          r.path = q;
          d = this.getValue(b, "color", null);
          null != d && r.color.setFromString(d);
          r.width = this.getValue(b, "width", 0) * f;
          r.height = this.getValue(b, "height", 0) * f;
          f = this.getValue(b, "parent", null);
          if (null != f) {
            return this.linkedMeshes.push(new k(r, this.getValue(b, "skin", null), e, f, this.getValue(b, "deform", !0))), r;
          }
          f = b.uvs;
          this.readVertices(b, r, f.length);
          r.triangles = b.triangles;
          r.regionUVs = f;
          r.updateUVs();
          r.edges = this.getValue(b, "edges", null);
          r.hullLength = 2 * this.getValue(b, "hull", 0);
          return r;
        case "path":
          q = this.attachmentLoader.newPathAttachment(d, r);
          if (null == q) {
            break;
          }
          q.closed = this.getValue(b, "closed", !1);
          q.constantSpeed = this.getValue(b, "constantSpeed", !0);
          e = b.vertexCount;
          this.readVertices(b, q, e << 1);
          e = a.Utils.newArray(e / 3, 0);
          for (d = 0; d < b.lengths.length; d++) {
            e[d] = b.lengths[d] * f;
          }
          q.lengths = e;
          d = this.getValue(b, "color", null);
          null != d && q.color.setFromString(d);
          return q;
        case "point":
          q = this.attachmentLoader.newPointAttachment(d, r);
          if (null == q) {
            break;
          }
          q.x = this.getValue(b, "x", 0) * f;
          q.y = this.getValue(b, "y", 0) * f;
          q.rotation = this.getValue(b, "rotation", 0);
          d = this.getValue(b, "color", null);
          null != d && q.color.setFromString(d);
          return q;
        case "clipping":
          if (f = this.attachmentLoader.newClippingAttachment(d, r), null != f) {
            e = this.getValue(b, "end", null);
            if (null != e) {
              q = q.findSlot(e);
              if (null == q) {
                throw Error("Clipping end slot not found: " + e);
              }
              f.endSlot = q;
            }
            e = b.vertexCount;
            this.readVertices(b, f, e << 1);
            d = this.getValue(b, "color", null);
            null != d && f.color.setFromString(d);
            return f;
          }
      }
      return null;
    };
    b.prototype.readVertices = function(b, d, e) {
      var f = this.scale;
      d.worldVerticesLength = e;
      b = b.vertices;
      if (e == b.length) {
        var g = a.Utils.toFloatArray(b);
        if (1 != f) {
          e = 0;
          for (var k = b.length; e < k; e++) {
            g[e] *= f;
          }
        }
        d.vertices = g;
      } else {
        g = [];
        var n = [];
        e = 0;
        for (k = b.length; e < k;) {
          var c = b[e++];
          n.push(c);
          for (c = e + 4 * c; e < c; e += 4) {
            n.push(b[e]), g.push(b[e + 1] * f), g.push(b[e + 2] * f), g.push(b[e + 3]);
          }
        }
        d.bones = n;
        d.vertices = a.Utils.toFloatArray(g);
      }
    };
    b.prototype.readAnimation = function(b, d, e) {
      var f = this.scale, g = [], k = 0;
      if (b.slots) {
        for (var n in b.slots) {
          var c = b.slots[n], h = e.findSlotIndex(n);
          if (-1 == h) {
            throw Error("Slot not found: " + n);
          }
          for (var t in c) {
            var z = c[t];
            if ("attachment" == t) {
              var y = new a.AttachmentTimeline(z.length);
              y.slotIndex = h;
              for (var x = 0, p = 0; p < z.length; p++) {
                var v = z[p];
                y.setFrame(x++, this.getValue(v, "time", 0), v.name);
              }
              g.push(y);
              k = Math.max(k, y.frames[y.getFrameCount() - 1]);
            } else {
              if ("color" == t) {
                y = new a.ColorTimeline(z.length);
                y.slotIndex = h;
                for (p = x = 0; p < z.length; p++) {
                  v = z[p];
                  var w = new a.Color;
                  w.setFromString(v.color);
                  y.setFrame(x, this.getValue(v, "time", 0), w.r, w.g, w.b, w.a);
                  this.readCurve(v, y, x);
                  x++;
                }
                g.push(y);
                k = Math.max(k, y.frames[(y.getFrameCount() - 1) * a.ColorTimeline.ENTRIES]);
              } else {
                if ("twoColor" == t) {
                  y = new a.TwoColorTimeline(z.length);
                  y.slotIndex = h;
                  for (p = x = 0; p < z.length; p++) {
                    v = z[p];
                    w = new a.Color;
                    var C = new a.Color;
                    w.setFromString(v.light);
                    C.setFromString(v.dark);
                    y.setFrame(x, this.getValue(v, "time", 0), w.r, w.g, w.b, w.a, C.r, C.g, C.b);
                    this.readCurve(v, y, x);
                    x++;
                  }
                  g.push(y);
                  k = Math.max(k, y.frames[(y.getFrameCount() - 1) * a.TwoColorTimeline.ENTRIES]);
                } else {
                  throw Error("Invalid timeline type for a slot: " + t + " (" + n + ")");
                }
              }
            }
          }
        }
      }
      if (b.bones) {
        for (var A in b.bones) {
          c = b.bones[A];
          w = e.findBoneIndex(A);
          if (-1 == w) {
            throw Error("Bone not found: " + A);
          }
          for (t in c) {
            if (z = c[t], "rotate" === t) {
              y = new a.RotateTimeline(z.length);
              y.boneIndex = w;
              for (p = x = 0; p < z.length; p++) {
                v = z[p], y.setFrame(x, this.getValue(v, "time", 0), this.getValue(v, "angle", 0)), this.readCurve(v, y, x), x++;
              }
              g.push(y);
              k = Math.max(k, y.frames[(y.getFrameCount() - 1) * a.RotateTimeline.ENTRIES]);
            } else {
              if ("translate" === t || "scale" === t || "shear" === t) {
                h = 1;
                C = 0;
                "scale" === t ? (y = new a.ScaleTimeline(z.length), C = 1) : "shear" === t ? y = new a.ShearTimeline(z.length) : (y = new a.TranslateTimeline(z.length), h = f);
                y.boneIndex = w;
                for (p = x = 0; p < z.length; p++) {
                  v = z[p];
                  var D = this.getValue(v, "x", C), F = this.getValue(v, "y", C);
                  y.setFrame(x, this.getValue(v, "time", 0), D * h, F * h);
                  this.readCurve(v, y, x);
                  x++;
                }
                g.push(y);
                k = Math.max(k, y.frames[(y.getFrameCount() - 1) * a.TranslateTimeline.ENTRIES]);
              } else {
                throw Error("Invalid timeline type for a bone: " + t + " (" + A + ")");
              }
            }
          }
        }
      }
      if (b.ik) {
        for (var B in b.ik) {
          c = b.ik[B];
          x = e.findIkConstraint(B);
          y = new a.IkConstraintTimeline(c.length);
          y.ikConstraintIndex = e.ikConstraints.indexOf(x);
          for (p = x = 0; p < c.length; p++) {
            v = c[p], y.setFrame(x, this.getValue(v, "time", 0), this.getValue(v, "mix", 1), this.getValue(v, "softness", 0) * f, this.getValue(v, "bendPositive", !0) ? 1 : -1, this.getValue(v, "compress", !1), this.getValue(v, "stretch", !1)), this.readCurve(v, y, x), x++;
          }
          g.push(y);
          k = Math.max(k, y.frames[(y.getFrameCount() - 1) * a.IkConstraintTimeline.ENTRIES]);
        }
      }
      if (b.transform) {
        for (B in b.transform) {
          c = b.transform[B];
          x = e.findTransformConstraint(B);
          y = new a.TransformConstraintTimeline(c.length);
          y.transformConstraintIndex = e.transformConstraints.indexOf(x);
          for (p = x = 0; p < c.length; p++) {
            v = c[p], y.setFrame(x, this.getValue(v, "time", 0), this.getValue(v, "rotateMix", 1), this.getValue(v, "translateMix", 1), this.getValue(v, "scaleMix", 1), this.getValue(v, "shearMix", 1)), this.readCurve(v, y, x), x++;
          }
          g.push(y);
          k = Math.max(k, y.frames[(y.getFrameCount() - 1) * a.TransformConstraintTimeline.ENTRIES]);
        }
      }
      if (b.path) {
        for (B in b.path) {
          c = b.path[B];
          A = e.findPathConstraintIndex(B);
          if (-1 == A) {
            throw Error("Path constraint not found: " + B);
          }
          w = e.pathConstraints[A];
          for (t in c) {
            if (z = c[t], "position" === t || "spacing" === t) {
              h = 1;
              if ("spacing" === t) {
                if (y = new a.PathConstraintSpacingTimeline(z.length), w.spacingMode == a.SpacingMode.Length || w.spacingMode == a.SpacingMode.Fixed) {
                  h = f;
                }
              } else {
                y = new a.PathConstraintPositionTimeline(z.length), w.positionMode == a.PositionMode.Fixed && (h = f);
              }
              y.pathConstraintIndex = A;
              for (p = x = 0; p < z.length; p++) {
                v = z[p], y.setFrame(x, this.getValue(v, "time", 0), this.getValue(v, t, 0) * h), this.readCurve(v, y, x), x++;
              }
              g.push(y);
              k = Math.max(k, y.frames[(y.getFrameCount() - 1) * a.PathConstraintPositionTimeline.ENTRIES]);
            } else {
              if ("mix" === t) {
                y = new a.PathConstraintMixTimeline(z.length);
                y.pathConstraintIndex = A;
                for (p = x = 0; p < z.length; p++) {
                  v = z[p], y.setFrame(x, this.getValue(v, "time", 0), this.getValue(v, "rotateMix", 1), this.getValue(v, "translateMix", 1)), this.readCurve(v, y, x), x++;
                }
                g.push(y);
                k = Math.max(k, y.frames[(y.getFrameCount() - 1) * a.PathConstraintMixTimeline.ENTRIES]);
              }
            }
          }
        }
      }
      if (b.deform) {
        for (var E in b.deform) {
          A = b.deform[E];
          w = e.findSkin(E);
          if (null == w) {
            throw Error("Skin not found: " + E);
          }
          for (n in A) {
            c = A[n];
            h = e.findSlotIndex(n);
            if (-1 == h) {
              throw Error("Slot not found: " + c.name);
            }
            for (t in c) {
              z = c[t];
              x = w.getAttachment(h, t);
              if (null == x) {
                throw Error("Deform attachment not found: " + z.name);
              }
              C = null != x.bones;
              D = x.vertices;
              F = C ? D.length / 3 * 2 : D.length;
              y = new a.DeformTimeline(z.length);
              y.slotIndex = h;
              y.attachment = x;
              for (B = x = 0; B < z.length; B++) {
                v = z[B];
                var I = this.getValue(v, "vertices", null);
                if (null == I) {
                  var K = C ? a.Utils.newFloatArray(F) : D;
                } else {
                  K = a.Utils.newFloatArray(F);
                  p = this.getValue(v, "offset", 0);
                  a.Utils.arrayCopy(I, 0, K, p, I.length);
                  if (1 != f) {
                    for (I = p + I.length; p < I; p++) {
                      K[p] *= f;
                    }
                  }
                  if (!C) {
                    for (p = 0; p < F; p++) {
                      K[p] += D[p];
                    }
                  }
                }
                y.setFrame(x, this.getValue(v, "time", 0), K);
                this.readCurve(v, y, x);
                x++;
              }
              g.push(y);
              k = Math.max(k, y.frames[y.getFrameCount() - 1]);
            }
          }
        }
      }
      f = b.drawOrder;
      null == f && (f = b.draworder);
      if (null != f) {
        y = new a.DrawOrderTimeline(f.length);
        n = e.slots.length;
        for (B = x = 0; B < f.length; B++) {
          t = f[B];
          E = null;
          z = this.getValue(t, "offsets", null);
          if (null != z) {
            E = a.Utils.newArray(n, -1);
            v = a.Utils.newArray(n - z.length, 0);
            for (p = A = c = 0; p < z.length; p++) {
              w = z[p];
              h = e.findSlotIndex(w.slot);
              if (-1 == h) {
                throw Error("Slot not found: " + w.slot);
              }
              for (; c != h;) {
                v[A++] = c++;
              }
              E[c + w.offset] = c++;
            }
            for (; c < n;) {
              v[A++] = c++;
            }
            for (p = n - 1; 0 <= p; p--) {
              -1 == E[p] && (E[p] = v[--A]);
            }
          }
          y.setFrame(x++, this.getValue(t, "time", 0), E);
        }
        g.push(y);
        k = Math.max(k, y.frames[y.getFrameCount() - 1]);
      }
      if (b.events) {
        y = new a.EventTimeline(b.events.length);
        for (p = x = 0; p < b.events.length; p++) {
          f = b.events[p];
          n = e.findEvent(f.name);
          if (null == n) {
            throw Error("Event not found: " + f.name);
          }
          t = new a.Event(a.Utils.toSinglePrecision(this.getValue(f, "time", 0)), n);
          t.intValue = this.getValue(f, "int", n.intValue);
          t.floatValue = this.getValue(f, "float", n.floatValue);
          t.stringValue = this.getValue(f, "string", n.stringValue);
          null != t.data.audioPath && (t.volume = this.getValue(f, "volume", 1), t.balance = this.getValue(f, "balance", 0));
          y.setFrame(x++, t);
        }
        g.push(y);
        k = Math.max(k, y.frames[y.getFrameCount() - 1]);
      }
      if (isNaN(k)) {
        throw Error("Error while parsing animation, duration is NaN");
      }
      e.animations.push(new a.Animation(d, g, k));
    };
    b.prototype.readCurve = function(a, b, e) {
      a.hasOwnProperty("curve") && ("stepped" == a.curve ? b.setStepped(e) : b.setCurve(e, a.curve, this.getValue(a, "c2", 0), this.getValue(a, "c3", 1), this.getValue(a, "c4", 1)));
    };
    b.prototype.getValue = function(a, b, e) {
      return void 0 !== a[b] ? a[b] : e;
    };
    b.blendModeFromString = function(b) {
      b = b.toLowerCase();
      if ("normal" == b) {
        return a.BlendMode.Normal;
      }
      if ("additive" == b) {
        return a.BlendMode.Additive;
      }
      if ("multiply" == b) {
        return a.BlendMode.Multiply;
      }
      if ("screen" == b) {
        return a.BlendMode.Screen;
      }
      throw Error("Unknown blend mode: " + b);
    };
    b.positionModeFromString = function(b) {
      b = b.toLowerCase();
      if ("fixed" == b) {
        return a.PositionMode.Fixed;
      }
      if ("percent" == b) {
        return a.PositionMode.Percent;
      }
      throw Error("Unknown position mode: " + b);
    };
    b.spacingModeFromString = function(b) {
      b = b.toLowerCase();
      if ("length" == b) {
        return a.SpacingMode.Length;
      }
      if ("fixed" == b) {
        return a.SpacingMode.Fixed;
      }
      if ("percent" == b) {
        return a.SpacingMode.Percent;
      }
      throw Error("Unknown position mode: " + b);
    };
    b.rotateModeFromString = function(b) {
      b = b.toLowerCase();
      if ("tangent" == b) {
        return a.RotateMode.Tangent;
      }
      if ("chain" == b) {
        return a.RotateMode.Chain;
      }
      if ("chainscale" == b) {
        return a.RotateMode.ChainScale;
      }
      throw Error("Unknown rotate mode: " + b);
    };
    b.transformModeFromString = function(b) {
      b = b.toLowerCase();
      if ("normal" == b) {
        return a.TransformMode.Normal;
      }
      if ("onlytranslation" == b) {
        return a.TransformMode.OnlyTranslation;
      }
      if ("norotationorreflection" == b) {
        return a.TransformMode.NoRotationOrReflection;
      }
      if ("noscale" == b) {
        return a.TransformMode.NoScale;
      }
      if ("noscaleorreflection" == b) {
        return a.TransformMode.NoScaleOrReflection;
      }
      throw Error("Unknown transform mode: " + b);
    };
    return b;
  }();
  a.SkeletonJson = d;
  var k = function() {
    return function(a, d, f, e, k) {
      this.mesh = a;
      this.skin = d;
      this.slotIndex = f;
      this.parent = e;
      this.inheritDeform = k;
    };
  }();
})(spine || (spine = {}));
(function(a) {
  var d = function() {
    return function(a, d, f) {
      this.slotIndex = a;
      this.name = d;
      this.attachment = f;
    };
  }();
  a.SkinEntry = d;
  var k = function() {
    function b(a) {
      this.attachments = [];
      this.bones = [];
      this.constraints = [];
      if (null == a) {
        throw Error("name cannot be null.");
      }
      this.name = a;
    }
    b.prototype.setAttachment = function(a, b, e) {
      if (null == e) {
        throw Error("attachment cannot be null.");
      }
      var d = this.attachments;
      a >= d.length && (d.length = a + 1);
      d[a] || (d[a] = {});
      d[a][b] = e;
    };
    b.prototype.addSkin = function(a) {
      for (var b = 0; b < a.bones.length; b++) {
        for (var e = a.bones[b], d = !1, g = 0; g < this.bones.length; g++) {
          if (this.bones[g] == e) {
            d = !0;
            break;
          }
        }
        d || this.bones.push(e);
      }
      for (b = 0; b < a.constraints.length; b++) {
        e = a.constraints[b];
        d = !1;
        for (g = 0; g < this.constraints.length; g++) {
          if (this.constraints[g] == e) {
            d = !0;
            break;
          }
        }
        d || this.constraints.push(e);
      }
      a = a.getAttachments();
      for (b = 0; b < a.length; b++) {
        d = a[b], this.setAttachment(d.slotIndex, d.name, d.attachment);
      }
    };
    b.prototype.copySkin = function(b) {
      for (var d = 0; d < b.bones.length; d++) {
        for (var e = b.bones[d], g = !1, k = 0; k < this.bones.length; k++) {
          if (this.bones[k] == e) {
            g = !0;
            break;
          }
        }
        g || this.bones.push(e);
      }
      for (d = 0; d < b.constraints.length; d++) {
        e = b.constraints[d];
        g = !1;
        for (k = 0; k < this.constraints.length; k++) {
          if (this.constraints[k] == e) {
            g = !0;
            break;
          }
        }
        g || this.constraints.push(e);
      }
      b = b.getAttachments();
      for (d = 0; d < b.length; d++) {
        g = b[d], null != g.attachment && (g.attachment = g.attachment instanceof a.MeshAttachment ? g.attachment.newLinkedMesh() : g.attachment.copy(), this.setAttachment(g.slotIndex, g.name, g.attachment));
      }
    };
    b.prototype.getAttachment = function(a, b) {
      return (a = this.attachments[a]) ? a[b] : null;
    };
    b.prototype.removeAttachment = function(a, b) {
      (a = this.attachments[a]) && (a[b] = null);
    };
    b.prototype.getAttachments = function() {
      for (var a = [], b = 0; b < this.attachments.length; b++) {
        var e = this.attachments[b];
        if (e) {
          for (var k in e) {
            var q = e[k];
            q && a.push(new d(b, k, q));
          }
        }
      }
      return a;
    };
    b.prototype.getAttachmentsForSlot = function(a, b) {
      var e = this.attachments[a];
      if (e) {
        for (var f in e) {
          var g = e[f];
          g && b.push(new d(a, f, g));
        }
      }
    };
    b.prototype.clear = function() {
      this.attachments.length = 0;
      this.bones.length = 0;
      this.constraints.length = 0;
    };
    b.prototype.attachAll = function(a, b) {
      for (var e = 0, d = 0; d < a.slots.length; d++) {
        var f = a.slots[d], g = f.getAttachment();
        if (g && e < b.attachments.length) {
          var k = b.attachments[e], c;
          for (c in k) {
            if (g == k[c]) {
              g = this.getAttachment(e, c);
              null != g && f.setAttachment(g);
              break;
            }
          }
        }
        e++;
      }
    };
    return b;
  }();
  a.Skin = k;
})(spine || (spine = {}));
(function(a) {
  var d = function() {
    function d(b, d) {
      this.deform = [];
      if (null == b) {
        throw Error("data cannot be null.");
      }
      if (null == d) {
        throw Error("bone cannot be null.");
      }
      this.data = b;
      this.bone = d;
      this.color = new a.Color;
      this.darkColor = null == b.darkColor ? null : new a.Color;
      this.setToSetupPose();
    }
    d.prototype.getSkeleton = function() {
      return this.bone.skeleton;
    };
    d.prototype.getAttachment = function() {
      return this.attachment;
    };
    d.prototype.setAttachment = function(a) {
      this.attachment != a && (this.attachment = a, this.attachmentTime = this.bone.skeleton.time, this.deform.length = 0);
    };
    d.prototype.setAttachmentTime = function(a) {
      this.attachmentTime = this.bone.skeleton.time - a;
    };
    d.prototype.getAttachmentTime = function() {
      return this.bone.skeleton.time - this.attachmentTime;
    };
    d.prototype.setToSetupPose = function() {
      this.color.setFromColor(this.data.color);
      null != this.darkColor && this.darkColor.setFromColor(this.data.darkColor);
      null == this.data.attachmentName ? this.attachment = null : (this.attachment = null, this.setAttachment(this.bone.skeleton.getAttachment(this.data.index, this.data.attachmentName)));
    };
    return d;
  }();
  a.Slot = d;
})(spine || (spine = {}));
(function(a) {
  var d = function() {
    return function(d, b, g) {
      this.color = new a.Color(1, 1, 1, 1);
      if (0 > d) {
        throw Error("index must be >= 0.");
      }
      if (null == b) {
        throw Error("name cannot be null.");
      }
      if (null == g) {
        throw Error("boneData cannot be null.");
      }
      this.index = d;
      this.name = b;
      this.boneData = g;
    };
  }();
  a.SlotData = d;
})(spine || (spine = {}));
(function(a) {
  var d = function() {
    function a(a) {
      this._image = a;
    }
    a.prototype.getImage = function() {
      return this._image;
    };
    a.filterFromString = function(a) {
      switch(a.toLowerCase()) {
        case "nearest":
          return k.Nearest;
        case "linear":
          return k.Linear;
        case "mipmap":
          return k.MipMap;
        case "mipmapnearestnearest":
          return k.MipMapNearestNearest;
        case "mipmaplinearnearest":
          return k.MipMapLinearNearest;
        case "mipmapnearestlinear":
          return k.MipMapNearestLinear;
        case "mipmaplinearlinear":
          return k.MipMapLinearLinear;
        default:
          throw Error("Unknown texture filter " + a);
      }
    };
    a.wrapFromString = function(a) {
      switch(a.toLowerCase()) {
        case "mirroredtepeat":
          return b.MirroredRepeat;
        case "clamptoedge":
          return b.ClampToEdge;
        case "repeat":
          return b.Repeat;
        default:
          throw Error("Unknown texture wrap " + a);
      }
    };
    return a;
  }();
  a.Texture = d;
  var k;
  (function(a) {
    a[a.Nearest = 9728] = "Nearest";
    a[a.Linear = 9729] = "Linear";
    a[a.MipMap = 9987] = "MipMap";
    a[a.MipMapNearestNearest = 9984] = "MipMapNearestNearest";
    a[a.MipMapLinearNearest = 9985] = "MipMapLinearNearest";
    a[a.MipMapNearestLinear = 9986] = "MipMapNearestLinear";
    a[a.MipMapLinearLinear = 9987] = "MipMapLinearLinear";
  })(k = a.TextureFilter || (a.TextureFilter = {}));
  var b;
  (function(a) {
    a[a.MirroredRepeat = 33648] = "MirroredRepeat";
    a[a.ClampToEdge = 33071] = "ClampToEdge";
    a[a.Repeat = 10497] = "Repeat";
  })(b = a.TextureWrap || (a.TextureWrap = {}));
  var g = function() {
    return function() {
      this.height = this.width = this.v2 = this.u2 = this.v = this.u = 0;
      this.rotate = !1;
      this.originalHeight = this.originalWidth = this.offsetY = this.offsetX = 0;
    };
  }();
  a.TextureRegion = g;
  d = function(a) {
    function b() {
      return null !== a && a.apply(this, arguments) || this;
    }
    __extends(b, a);
    b.prototype.setFilters = function(a, b) {
    };
    b.prototype.setWraps = function(a, b) {
    };
    b.prototype.dispose = function() {
    };
    return b;
  }(d);
  a.FakeTexture = d;
})(spine || (spine = {}));
(function(a) {
  var d = function() {
    function d(a, b) {
      this.pages = [];
      this.regions = [];
      this.load(a, b);
    }
    d.prototype.load = function(e, d) {
      if (null == d) {
        throw Error("textureLoader cannot be null.");
      }
      e = new k(e);
      for (var f = Array(4), m = null;;) {
        var n = e.readLine();
        if (null == n) {
          break;
        }
        n = n.trim();
        if (0 == n.length) {
          m = null;
        } else {
          if (m) {
            var c = new g;
            c.name = n;
            c.page = m;
            n = e.readValue();
            "true" == n.toLocaleLowerCase() ? c.degrees = 90 : "false" == n.toLocaleLowerCase() ? c.degrees = 0 : c.degrees = parseFloat(n);
            c.rotate = 90 == c.degrees;
            e.readTuple(f);
            n = parseInt(f[0]);
            var h = parseInt(f[1]);
            e.readTuple(f);
            var r = parseInt(f[0]), z = parseInt(f[1]);
            c.u = n / m.width;
            c.v = h / m.height;
            c.rotate ? (c.u2 = (n + z) / m.width, c.v2 = (h + r) / m.height) : (c.u2 = (n + r) / m.width, c.v2 = (h + z) / m.height);
            c.x = n;
            c.y = h;
            c.width = Math.abs(r);
            c.height = Math.abs(z);
            4 == e.readTuple(f) && 4 == e.readTuple(f) && e.readTuple(f);
            c.originalWidth = parseInt(f[0]);
            c.originalHeight = parseInt(f[1]);
            e.readTuple(f);
            c.offsetX = parseInt(f[0]);
            c.offsetY = parseInt(f[1]);
            c.index = parseInt(e.readValue());
            c.texture = m.texture;
            this.regions.push(c);
          } else {
            m = new b, m.name = n, 2 == e.readTuple(f) && (m.width = parseInt(f[0]), m.height = parseInt(f[1]), e.readTuple(f)), e.readTuple(f), m.minFilter = a.Texture.filterFromString(f[0]), m.magFilter = a.Texture.filterFromString(f[1]), c = e.readValue(), m.uWrap = a.TextureWrap.ClampToEdge, m.vWrap = a.TextureWrap.ClampToEdge, "x" == c ? m.uWrap = a.TextureWrap.Repeat : "y" == c ? m.vWrap = a.TextureWrap.Repeat : "xy" == c && (m.uWrap = m.vWrap = a.TextureWrap.Repeat), m.texture = d(n), m.texture.setFilters(m.minFilter, 
            m.magFilter), m.texture.setWraps(m.uWrap, m.vWrap), m.width = m.texture.getImage().width, m.height = m.texture.getImage().height, this.pages.push(m);
          }
        }
      }
    };
    d.prototype.findRegion = function(a) {
      for (var b = 0; b < this.regions.length; b++) {
        if (this.regions[b].name == a) {
          return this.regions[b];
        }
      }
      return null;
    };
    d.prototype.dispose = function() {
      for (var a = 0; a < this.pages.length; a++) {
        this.pages[a].texture.dispose();
      }
    };
    return d;
  }();
  a.TextureAtlas = d;
  var k = function() {
    function a(a) {
      this.index = 0;
      this.lines = a.split(/\r\n|\r|\n/);
    }
    a.prototype.readLine = function() {
      return this.index >= this.lines.length ? null : this.lines[this.index++];
    };
    a.prototype.readValue = function() {
      var a = this.readLine(), b = a.indexOf(":");
      if (-1 == b) {
        throw Error("Invalid line: " + a);
      }
      return a.substring(b + 1).trim();
    };
    a.prototype.readTuple = function(a) {
      var b = this.readLine(), e = b.indexOf(":");
      if (-1 == e) {
        throw Error("Invalid line: " + b);
      }
      var d = 0;
      for (e += 1; 3 > d; d++) {
        var f = b.indexOf(",", e);
        if (-1 == f) {
          break;
        }
        a[d] = b.substr(e, f - e).trim();
        e = f + 1;
      }
      a[d] = b.substring(e).trim();
      return d + 1;
    };
    return a;
  }(), b = function() {
    return function() {
    };
  }();
  a.TextureAtlasPage = b;
  var g = function(a) {
    function b() {
      return null !== a && a.apply(this, arguments) || this;
    }
    __extends(b, a);
    return b;
  }(a.TextureRegion);
  a.TextureAtlasRegion = g;
})(spine || (spine = {}));
(function(a) {
  var d = function() {
    function d(b, d) {
      this.shearMix = this.scaleMix = this.translateMix = this.rotateMix = 0;
      this.temp = new a.Vector2;
      this.active = !1;
      if (null == b) {
        throw Error("data cannot be null.");
      }
      if (null == d) {
        throw Error("skeleton cannot be null.");
      }
      this.data = b;
      this.rotateMix = b.rotateMix;
      this.translateMix = b.translateMix;
      this.scaleMix = b.scaleMix;
      this.shearMix = b.shearMix;
      this.bones = [];
      for (var f = 0; f < b.bones.length; f++) {
        this.bones.push(d.findBone(b.bones[f].name));
      }
      this.target = d.findBone(b.target.name);
    }
    d.prototype.isActive = function() {
      return this.active;
    };
    d.prototype.apply = function() {
      this.update();
    };
    d.prototype.update = function() {
      this.data.local ? this.data.relative ? this.applyRelativeLocal() : this.applyAbsoluteLocal() : this.data.relative ? this.applyRelativeWorld() : this.applyAbsoluteWorld();
    };
    d.prototype.applyAbsoluteWorld = function() {
      var b = this.rotateMix, d = this.translateMix, f = this.scaleMix, e = this.shearMix, k = this.target, q = k.a, m = k.b, n = k.c, c = k.d, h = 0 < q * c - m * n ? a.MathUtils.degRad : -a.MathUtils.degRad, t = this.data.offsetRotation * h;
      h *= this.data.offsetShearY;
      for (var z = this.bones, y = 0, x = z.length; y < x; y++) {
        var p = z[y], v = !1;
        if (0 != b) {
          var w = p.a;
          v = p.b;
          var C = p.c, A = p.d, D = Math.atan2(n, q) - Math.atan2(C, w) + t;
          D > a.MathUtils.PI ? D -= a.MathUtils.PI2 : D < -a.MathUtils.PI && (D += a.MathUtils.PI2);
          D *= b;
          var F = Math.cos(D);
          D = Math.sin(D);
          p.a = F * w - D * C;
          p.b = F * v - D * A;
          p.c = D * w + F * C;
          p.d = D * v + F * A;
          v = !0;
        }
        0 != d && (v = this.temp, k.localToWorld(v.set(this.data.offsetX, this.data.offsetY)), p.worldX += (v.x - p.worldX) * d, p.worldY += (v.y - p.worldY) * d, v = !0);
        0 < f && (v = Math.sqrt(p.a * p.a + p.c * p.c), A = Math.sqrt(q * q + n * n), 1E-5 < v && (v = (v + (A - v + this.data.offsetScaleX) * f) / v), p.a *= v, p.c *= v, v = Math.sqrt(p.b * p.b + p.d * p.d), A = Math.sqrt(m * m + c * c), 1E-5 < v && (v = (v + (A - v + this.data.offsetScaleY) * f) / v), p.b *= v, p.d *= v, v = !0);
        0 < e && (v = p.b, A = p.d, w = Math.atan2(A, v), D = Math.atan2(c, m) - Math.atan2(n, q) - (w - Math.atan2(p.c, p.a)), D > a.MathUtils.PI ? D -= a.MathUtils.PI2 : D < -a.MathUtils.PI && (D += a.MathUtils.PI2), D = w + (D + h) * e, v = Math.sqrt(v * v + A * A), p.b = Math.cos(D) * v, p.d = Math.sin(D) * v, v = !0);
        v && (p.appliedValid = !1);
      }
    };
    d.prototype.applyRelativeWorld = function() {
      var b = this.rotateMix, d = this.translateMix, f = this.scaleMix, e = this.shearMix, k = this.target, q = k.a, m = k.b, n = k.c, c = k.d, h = 0 < q * c - m * n ? a.MathUtils.degRad : -a.MathUtils.degRad, t = this.data.offsetRotation * h;
      h *= this.data.offsetShearY;
      for (var z = this.bones, y = 0, x = z.length; y < x; y++) {
        var p = z[y], v = !1;
        if (0 != b) {
          v = p.a;
          var w = p.b, C = p.c, A = p.d, D = Math.atan2(n, q) + t;
          D > a.MathUtils.PI ? D -= a.MathUtils.PI2 : D < -a.MathUtils.PI && (D += a.MathUtils.PI2);
          D *= b;
          var F = Math.cos(D);
          D = Math.sin(D);
          p.a = F * v - D * C;
          p.b = F * w - D * A;
          p.c = D * v + F * C;
          p.d = D * w + F * A;
          v = !0;
        }
        0 != d && (v = this.temp, k.localToWorld(v.set(this.data.offsetX, this.data.offsetY)), p.worldX += v.x * d, p.worldY += v.y * d, v = !0);
        0 < f && (v = (Math.sqrt(q * q + n * n) - 1 + this.data.offsetScaleX) * f + 1, p.a *= v, p.c *= v, v = (Math.sqrt(m * m + c * c) - 1 + this.data.offsetScaleY) * f + 1, p.b *= v, p.d *= v, v = !0);
        0 < e && (D = Math.atan2(c, m) - Math.atan2(n, q), D > a.MathUtils.PI ? D -= a.MathUtils.PI2 : D < -a.MathUtils.PI && (D += a.MathUtils.PI2), w = p.b, A = p.d, D = Math.atan2(A, w) + (D - a.MathUtils.PI / 2 + h) * e, v = Math.sqrt(w * w + A * A), p.b = Math.cos(D) * v, p.d = Math.sin(D) * v, v = !0);
        v && (p.appliedValid = !1);
      }
    };
    d.prototype.applyAbsoluteLocal = function() {
      var a = this.rotateMix, d = this.translateMix, f = this.scaleMix, e = this.shearMix, k = this.target;
      k.appliedValid || k.updateAppliedTransform();
      for (var q = this.bones, m = 0, n = q.length; m < n; m++) {
        var c = q[m];
        c.appliedValid || c.updateAppliedTransform();
        var h = c.arotation;
        if (0 != a) {
          var t = k.arotation - h + this.data.offsetRotation;
          t -= 360 * (16384 - (16384.499999999996 - t / 360 | 0));
          h += t * a;
        }
        var z = c.ax, y = c.ay;
        0 != d && (z += (k.ax - z + this.data.offsetX) * d, y += (k.ay - y + this.data.offsetY) * d);
        var x = c.ascaleX, p = c.ascaleY;
        0 != f && (1E-5 < x && (x = (x + (k.ascaleX - x + this.data.offsetScaleX) * f) / x), 1E-5 < p && (p = (p + (k.ascaleY - p + this.data.offsetScaleY) * f) / p));
        var v = c.ashearY;
        0 != e && (t = k.ashearY - v + this.data.offsetShearY, t -= 360 * (16384 - (16384.499999999996 - t / 360 | 0)), c.shearY += t * e);
        c.updateWorldTransformWith(z, y, h, x, p, c.ashearX, v);
      }
    };
    d.prototype.applyRelativeLocal = function() {
      var a = this.rotateMix, d = this.translateMix, f = this.scaleMix, e = this.shearMix, k = this.target;
      k.appliedValid || k.updateAppliedTransform();
      for (var q = this.bones, m = 0, n = q.length; m < n; m++) {
        var c = q[m];
        c.appliedValid || c.updateAppliedTransform();
        var h = c.arotation;
        0 != a && (h += (k.arotation + this.data.offsetRotation) * a);
        var t = c.ax, z = c.ay;
        0 != d && (t += (k.ax + this.data.offsetX) * d, z += (k.ay + this.data.offsetY) * d);
        var y = c.ascaleX, x = c.ascaleY;
        0 != f && (1E-5 < y && (y *= (k.ascaleX - 1 + this.data.offsetScaleX) * f + 1), 1E-5 < x && (x *= (k.ascaleY - 1 + this.data.offsetScaleY) * f + 1));
        var p = c.ashearY;
        0 != e && (p += (k.ashearY + this.data.offsetShearY) * e);
        c.updateWorldTransformWith(t, z, h, y, x, c.ashearX, p);
      }
    };
    return d;
  }();
  a.TransformConstraint = d;
})(spine || (spine = {}));
(function(a) {
  var d = function(a) {
    function b(b) {
      b = a.call(this, b, 0, !1) || this;
      b.bones = [];
      b.rotateMix = 0;
      b.translateMix = 0;
      b.scaleMix = 0;
      b.shearMix = 0;
      b.offsetRotation = 0;
      b.offsetX = 0;
      b.offsetY = 0;
      b.offsetScaleX = 0;
      b.offsetScaleY = 0;
      b.offsetShearY = 0;
      b.relative = !1;
      b.local = !1;
      return b;
    }
    __extends(b, a);
    return b;
  }(a.ConstraintData);
  a.TransformConstraintData = d;
})(spine || (spine = {}));
(function(a) {
  var d = function() {
    function d() {
      this.convexPolygons = [];
      this.convexPolygonsIndices = [];
      this.indicesArray = [];
      this.isConcaveArray = [];
      this.triangles = [];
      this.polygonPool = new a.Pool(function() {
        return [];
      });
      this.polygonIndicesPool = new a.Pool(function() {
        return [];
      });
    }
    d.prototype.triangulate = function(a) {
      for (var b = a.length >> 1, f = this.indicesArray, e = f.length = 0; e < b; e++) {
        f[e] = e;
      }
      var k = this.isConcaveArray;
      e = k.length = 0;
      for (var q = b; e < q; ++e) {
        k[e] = d.isConcave(e, b, a, f);
      }
      q = this.triangles;
      for (q.length = 0; 3 < b;) {
        var m = b - 1;
        e = 0;
        for (var n = 1;;) {
          a: {
            if (!k[e]) {
              var c = f[m] << 1, h = f[e] << 1, t = f[n] << 1, z = a[c];
              c = a[c + 1];
              var y = a[h];
              h = a[h + 1];
              var x = a[t];
              t = a[t + 1];
              for (var p = (n + 1) % b; p != m; p = (p + 1) % b) {
                if (k[p]) {
                  var v = f[p] << 1, w = a[v];
                  v = a[v + 1];
                  if (d.positiveArea(x, t, z, c, w, v) && d.positiveArea(z, c, y, h, w, v) && d.positiveArea(y, h, x, t, w, v)) {
                    break a;
                  }
                }
              }
              break;
            }
          }
          if (0 == n) {
            do {
              if (!k[e]) {
                break;
              }
              e--;
            } while (0 < e);
            break;
          }
          m = e;
          e = n;
          n = (n + 1) % b;
        }
        q.push(f[(b + e - 1) % b]);
        q.push(f[e]);
        q.push(f[(e + 1) % b]);
        f.splice(e, 1);
        k.splice(e, 1);
        b--;
        m = (b + e - 1) % b;
        e = e == b ? 0 : e;
        k[m] = d.isConcave(m, b, a, f);
        k[e] = d.isConcave(e, b, a, f);
      }
      3 == b && (q.push(f[2]), q.push(f[0]), q.push(f[1]));
      return q;
    };
    d.prototype.decompose = function(a, g) {
      var b = this.convexPolygons;
      this.polygonPool.freeAll(b);
      b.length = 0;
      var e = this.convexPolygonsIndices;
      this.polygonIndicesPool.freeAll(e);
      e.length = 0;
      var k = this.polygonIndicesPool.obtain();
      k.length = 0;
      var q = this.polygonPool.obtain();
      q.length = 0;
      for (var m = -1, n = 0, c = 0, h = g.length; c < h; c += 3) {
        var t = g[c] << 1, z = g[c + 1] << 1, y = g[c + 2] << 1, x = a[t], p = a[t + 1], v = a[z], w = a[z + 1], C = a[y], A = a[y + 1], D = !1;
        if (m == t) {
          var F = q.length - 4;
          F = d.winding(q[F], q[F + 1], q[F + 2], q[F + 3], C, A);
          var B = d.winding(C, A, q[0], q[1], q[2], q[3]);
          F == n && B == n && (q.push(C), q.push(A), k.push(y), D = !0);
        }
        D || (0 < q.length ? (b.push(q), e.push(k)) : (this.polygonPool.free(q), this.polygonIndicesPool.free(k)), q = this.polygonPool.obtain(), q.length = 0, q.push(x), q.push(p), q.push(v), q.push(w), q.push(C), q.push(A), k = this.polygonIndicesPool.obtain(), k.length = 0, k.push(t), k.push(z), k.push(y), n = d.winding(x, p, v, w, C, A), m = t);
      }
      0 < q.length && (b.push(q), e.push(k));
      c = 0;
      for (h = b.length; c < h; c++) {
        if (k = e[c], 0 != k.length) {
          for (a = k[0], g = k[k.length - 1], q = b[c], F = q.length - 4, m = q[F], n = q[F + 1], t = q[F + 2], z = q[F + 3], y = q[0], x = q[1], p = q[2], v = q[3], w = d.winding(m, n, t, z, y, x), D = 0; D < h; D++) {
            if (D != c) {
              var E = e[D];
              if (3 == E.length) {
                F = E[0];
                B = E[1];
                var I = E[2], K = b[D];
                C = K[K.length - 2];
                A = K[K.length - 1];
                F == a && B == g && (F = d.winding(m, n, t, z, C, A), B = d.winding(C, A, y, x, p, v), F == w && B == w && (K.length = 0, E.length = 0, q.push(C), q.push(A), k.push(I), m = t, n = z, t = C, z = A, D = 0));
              }
            }
          }
        }
      }
      for (c = b.length - 1; 0 <= c; c--) {
        q = b[c], 0 == q.length && (b.splice(c, 1), this.polygonPool.free(q), k = e[c], e.splice(c, 1), this.polygonIndicesPool.free(k));
      }
      return b;
    };
    d.isConcave = function(a, d, f, e) {
      var b = e[(d + a - 1) % d] << 1, g = e[a] << 1;
      a = e[(a + 1) % d] << 1;
      return !this.positiveArea(f[b], f[b + 1], f[g], f[g + 1], f[a], f[a + 1]);
    };
    d.positiveArea = function(a, d, f, e, k, q) {
      return 0 <= a * (q - e) + f * (d - q) + k * (e - d);
    };
    d.winding = function(a, d, f, e, k, q) {
      f -= a;
      e -= d;
      return 0 <= k * e - q * f + f * d - a * e ? 1 : -1;
    };
    return d;
  }();
  a.Triangulator = d;
})(spine || (spine = {}));
(function(a) {
  var d = function() {
    function a() {
      this.array = [];
    }
    a.prototype.add = function(a) {
      var b = this.contains(a);
      this.array[a | 0] = a | 0;
      return !b;
    };
    a.prototype.contains = function(a) {
      return void 0 != this.array[a | 0];
    };
    a.prototype.remove = function(a) {
      this.array[a | 0] = void 0;
    };
    a.prototype.clear = function() {
      this.array.length = 0;
    };
    return a;
  }();
  a.IntSet = d;
  d = function() {
    function a(a, d, f, e) {
      void 0 === a && (a = 0);
      void 0 === d && (d = 0);
      void 0 === f && (f = 0);
      void 0 === e && (e = 0);
      this.r = a;
      this.g = d;
      this.b = f;
      this.a = e;
    }
    a.prototype.set = function(a, d, f, e) {
      this.r = a;
      this.g = d;
      this.b = f;
      this.a = e;
      this.clamp();
      return this;
    };
    a.prototype.setFromColor = function(a) {
      this.r = a.r;
      this.g = a.g;
      this.b = a.b;
      this.a = a.a;
      return this;
    };
    a.prototype.setFromString = function(a) {
      a = "#" == a.charAt(0) ? a.substr(1) : a;
      this.r = parseInt(a.substr(0, 2), 16) / 255;
      this.g = parseInt(a.substr(2, 2), 16) / 255;
      this.b = parseInt(a.substr(4, 2), 16) / 255;
      this.a = (8 != a.length ? 255 : parseInt(a.substr(6, 2), 16)) / 255;
      return this;
    };
    a.prototype.add = function(a, d, f, e) {
      this.r += a;
      this.g += d;
      this.b += f;
      this.a += e;
      this.clamp();
      return this;
    };
    a.prototype.clamp = function() {
      0 > this.r ? this.r = 0 : 1 < this.r && (this.r = 1);
      0 > this.g ? this.g = 0 : 1 < this.g && (this.g = 1);
      0 > this.b ? this.b = 0 : 1 < this.b && (this.b = 1);
      0 > this.a ? this.a = 0 : 1 < this.a && (this.a = 1);
      return this;
    };
    a.rgba8888ToColor = function(a, d) {
      a.r = ((d & 4278190080) >>> 24) / 255;
      a.g = ((d & 16711680) >>> 16) / 255;
      a.b = ((d & 65280) >>> 8) / 255;
      a.a = (d & 255) / 255;
    };
    a.rgb888ToColor = function(a, d) {
      a.r = ((d & 16711680) >>> 16) / 255;
      a.g = ((d & 65280) >>> 8) / 255;
      a.b = (d & 255) / 255;
    };
    a.WHITE = new a(1, 1, 1, 1);
    a.RED = new a(1, 0, 0, 1);
    a.GREEN = new a(0, 1, 0, 1);
    a.BLUE = new a(0, 0, 1, 1);
    a.MAGENTA = new a(1, 0, 1, 1);
    return a;
  }();
  a.Color = d;
  d = function() {
    function a() {
    }
    a.clamp = function(a, d, f) {
      return a < d ? d : a > f ? f : a;
    };
    a.cosDeg = function(b) {
      return Math.cos(b * a.degRad);
    };
    a.sinDeg = function(b) {
      return Math.sin(b * a.degRad);
    };
    a.signum = function(a) {
      return 0 < a ? 1 : 0 > a ? -1 : 0;
    };
    a.toInt = function(a) {
      return 0 < a ? Math.floor(a) : Math.ceil(a);
    };
    a.cbrt = function(a) {
      var b = Math.pow(Math.abs(a), 1 / 3);
      return 0 > a ? -b : b;
    };
    a.randomTriangular = function(b, d) {
      return a.randomTriangularWith(b, d, .5 * (b + d));
    };
    a.randomTriangularWith = function(a, d, f) {
      var b = Math.random(), g = d - a;
      return b <= (f - a) / g ? a + Math.sqrt(b * g * (f - a)) : d - Math.sqrt((1 - b) * g * (d - f));
    };
    a.PI = 3.1415927;
    a.PI2 = 2 * a.PI;
    a.radiansToDegrees = 180 / a.PI;
    a.radDeg = a.radiansToDegrees;
    a.degreesToRadians = a.PI / 180;
    a.degRad = a.degreesToRadians;
    return a;
  }();
  a.MathUtils = d;
  d = function() {
    function a() {
    }
    a.prototype.apply = function(a, d, f) {
      return a + (d - a) * this.applyInternal(f);
    };
    return a;
  }();
  a.Interpolation = d;
  d = function(a) {
    function b(b) {
      var d = a.call(this) || this;
      d.power = 2;
      d.power = b;
      return d;
    }
    __extends(b, a);
    b.prototype.applyInternal = function(a) {
      return .5 >= a ? Math.pow(2 * a, this.power) / 2 : Math.pow(2 * (a - 1), this.power) / (0 == this.power % 2 ? -2 : 2) + 1;
    };
    return b;
  }(d);
  a.Pow = d;
  d = function(a) {
    function b(b) {
      return a.call(this, b) || this;
    }
    __extends(b, a);
    b.prototype.applyInternal = function(a) {
      return Math.pow(a - 1, this.power) * (0 == this.power % 2 ? -1 : 1) + 1;
    };
    return b;
  }(d);
  a.PowOut = d;
  d = function() {
    function a() {
    }
    a.arrayCopy = function(a, d, f, e, k) {
      for (var b = d; b < d + k; b++, e++) {
        f[e] = a[b];
      }
    };
    a.setArraySize = function(a, d, f) {
      void 0 === f && (f = 0);
      var b = a.length;
      if (b == d) {
        return a;
      }
      a.length = d;
      if (b < d) {
        for (; b < d; b++) {
          a[b] = f;
        }
      }
      return a;
    };
    a.ensureArrayCapacity = function(b, d, f) {
      void 0 === f && (f = 0);
      return b.length >= d ? b : a.setArraySize(b, d, f);
    };
    a.newArray = function(a, d) {
      for (var b = Array(a), e = 0; e < a; e++) {
        b[e] = d;
      }
      return b;
    };
    a.newFloatArray = function(b) {
      if (a.SUPPORTS_TYPED_ARRAYS) {
        return new Float32Array(b);
      }
      b = Array(b);
      for (var d = 0; d < b.length; d++) {
        b[d] = 0;
      }
      return b;
    };
    a.newShortArray = function(b) {
      if (a.SUPPORTS_TYPED_ARRAYS) {
        return new Int16Array(b);
      }
      b = Array(b);
      for (var d = 0; d < b.length; d++) {
        b[d] = 0;
      }
      return b;
    };
    a.toFloatArray = function(b) {
      return a.SUPPORTS_TYPED_ARRAYS ? new Float32Array(b) : b;
    };
    a.toSinglePrecision = function(b) {
      return a.SUPPORTS_TYPED_ARRAYS ? Math.fround(b) : b;
    };
    a.webkit602BugfixHelper = function(a, d) {
    };
    a.contains = function(a, d, f) {
      for (f = 0; f < a.length; f++) {
        if (a[f] == d) {
          return !0;
        }
      }
      return !1;
    };
    a.SUPPORTS_TYPED_ARRAYS = "undefined" !== typeof Float32Array;
    return a;
  }();
  a.Utils = d;
  d = function() {
    function a() {
    }
    a.logBones = function(a) {
      for (var b = 0; b < a.bones.length; b++) {
        var d = a.bones[b];
        console.log(d.data.name + ", " + d.a + ", " + d.b + ", " + d.c + ", " + d.d + ", " + d.worldX + ", " + d.worldY);
      }
    };
    return a;
  }();
  a.DebugUtils = d;
  d = function() {
    function a(a) {
      this.items = [];
      this.instantiator = a;
    }
    a.prototype.obtain = function() {
      return 0 < this.items.length ? this.items.pop() : this.instantiator();
    };
    a.prototype.free = function(a) {
      a.reset && a.reset();
      this.items.push(a);
    };
    a.prototype.freeAll = function(a) {
      for (var b = 0; b < a.length; b++) {
        a[b].reset && a[b].reset(), this.items[b] = a[b];
      }
    };
    a.prototype.clear = function() {
      this.items.length = 0;
    };
    return a;
  }();
  a.Pool = d;
  d = function() {
    function a(a, d) {
      void 0 === a && (a = 0);
      void 0 === d && (d = 0);
      this.x = a;
      this.y = d;
    }
    a.prototype.set = function(a, d) {
      this.x = a;
      this.y = d;
      return this;
    };
    a.prototype.length = function() {
      var a = this.x, d = this.y;
      return Math.sqrt(a * a + d * d);
    };
    a.prototype.normalize = function() {
      var a = this.length();
      0 != a && (this.x /= a, this.y /= a);
      return this;
    };
    return a;
  }();
  a.Vector2 = d;
  d = function() {
    function a() {
      this.maxDelta = .064;
      this.totalTime = this.delta = this.framesPerSecond = 0;
      this.lastTime = Date.now() / 1E3;
      this.frameTime = this.frameCount = 0;
    }
    a.prototype.update = function() {
      var a = Date.now() / 1E3;
      this.delta = a - this.lastTime;
      this.frameTime += this.delta;
      this.totalTime += this.delta;
      this.delta > this.maxDelta && (this.delta = this.maxDelta);
      this.lastTime = a;
      this.frameCount++;
      1 < this.frameTime && (this.framesPerSecond = this.frameCount / this.frameTime, this.frameCount = this.frameTime = 0);
    };
    return a;
  }();
  a.TimeKeeper = d;
  d = function() {
    function a(a) {
      void 0 === a && (a = 32);
      this.mean = this.lastValue = this.addedValues = 0;
      this.dirty = !0;
      this.values = Array(a);
    }
    a.prototype.hasEnoughData = function() {
      return this.addedValues >= this.values.length;
    };
    a.prototype.addValue = function(a) {
      this.addedValues < this.values.length && this.addedValues++;
      this.values[this.lastValue++] = a;
      this.lastValue > this.values.length - 1 && (this.lastValue = 0);
      this.dirty = !0;
    };
    a.prototype.getMean = function() {
      if (this.hasEnoughData()) {
        if (this.dirty) {
          for (var a = 0, d = 0; d < this.values.length; d++) {
            a += this.values[d];
          }
          this.mean = a / this.values.length;
          this.dirty = !1;
        }
        return this.mean;
      }
      return 0;
    };
    return a;
  }();
  a.WindowedMean = d;
})(spine || (spine = {}));
(function() {
  Math.fround || (Math.fround = function(a) {
    return function(d) {
      return a[0] = d, a[0];
    };
  }(new Float32Array(1)));
})();
(function(a) {
  var d = function() {
    return function(a) {
      if (null == a) {
        throw Error("name cannot be null.");
      }
      this.name = a;
    };
  }();
  a.Attachment = d;
  d = function(d) {
    function b(a) {
      a = d.call(this, a) || this;
      a.id = (b.nextID++ & 65535) << 11;
      a.worldVerticesLength = 0;
      return a.deformAttachment = a;
    }
    __extends(b, d);
    b.prototype.computeWorldVertices = function(a, b, e, d, k, m) {
      e = k + (e >> 1) * m;
      var f = a.bone.skeleton, c = a.deform, h = this.vertices, g = this.bones;
      if (null == g) {
        0 < c.length && (h = c);
        a = a.bone;
        c = a.worldX;
        g = a.worldY;
        var q = a.a;
        f = a.b;
        var r = a.c;
        a = a.d;
        for (var x = b; k < e; x += 2, k += m) {
          b = h[x];
          var p = h[x + 1];
          d[k] = b * q + p * f + c;
          d[k + 1] = b * r + p * a + g;
        }
      } else {
        for (p = a = q = 0; p < b; p += 2) {
          r = g[q], q += r + 1, a += r;
        }
        x = f.bones;
        if (0 == c.length) {
          for (f = 3 * a; k < e; k += m) {
            var v = 0, w = 0;
            r = g[q++];
            for (r += q; q < r; q++, f += 3) {
              a = x[g[q]];
              b = h[f];
              p = h[f + 1];
              var C = h[f + 2];
              v += (b * a.a + p * a.b + a.worldX) * C;
              w += (b * a.c + p * a.d + a.worldY) * C;
            }
            d[k] = v;
            d[k + 1] = w;
          }
        } else {
          f = 3 * a;
          for (var A = a << 1; k < e; k += m) {
            w = v = 0;
            r = g[q++];
            for (r += q; q < r; q++, f += 3, A += 2) {
              a = x[g[q]], b = h[f] + c[A], p = h[f + 1] + c[A + 1], C = h[f + 2], v += (b * a.a + p * a.b + a.worldX) * C, w += (b * a.c + p * a.d + a.worldY) * C;
            }
            d[k] = v;
            d[k + 1] = w;
          }
        }
      }
    };
    b.prototype.copyTo = function(b) {
      null != this.bones ? (b.bones = Array(this.bones.length), a.Utils.arrayCopy(this.bones, 0, b.bones, 0, this.bones.length)) : b.bones = null;
      null != this.vertices ? (b.vertices = a.Utils.newFloatArray(this.vertices.length), a.Utils.arrayCopy(this.vertices, 0, b.vertices, 0, this.vertices.length)) : b.vertices = null;
      b.worldVerticesLength = this.worldVerticesLength;
      b.deformAttachment = this.deformAttachment;
    };
    b.nextID = 0;
    return b;
  }(d);
  a.VertexAttachment = d;
})(spine || (spine = {}));
(function(a) {
  a = a.AttachmentType || (a.AttachmentType = {});
  a[a.Region = 0] = "Region";
  a[a.BoundingBox = 1] = "BoundingBox";
  a[a.Mesh = 2] = "Mesh";
  a[a.LinkedMesh = 3] = "LinkedMesh";
  a[a.Path = 4] = "Path";
  a[a.Point = 5] = "Point";
  a[a.Clipping = 6] = "Clipping";
})(spine || (spine = {}));
(function(a) {
  var d = function(d) {
    function b(b) {
      b = d.call(this, b) || this;
      b.color = new a.Color(1, 1, 1, 1);
      return b;
    }
    __extends(b, d);
    b.prototype.copy = function() {
      var a = new b(name);
      this.copyTo(a);
      a.color.setFromColor(this.color);
      return a;
    };
    return b;
  }(a.VertexAttachment);
  a.BoundingBoxAttachment = d;
})(spine || (spine = {}));
(function(a) {
  var d = function(d) {
    function b(b) {
      b = d.call(this, b) || this;
      b.color = new a.Color(.2275, .2275, .8078, 1);
      return b;
    }
    __extends(b, d);
    b.prototype.copy = function() {
      var a = new b(name);
      this.copyTo(a);
      a.endSlot = this.endSlot;
      a.color.setFromColor(this.color);
      return a;
    };
    return b;
  }(a.VertexAttachment);
  a.ClippingAttachment = d;
})(spine || (spine = {}));
(function(a) {
  var d = function(d) {
    function b(b) {
      b = d.call(this, b) || this;
      b.color = new a.Color(1, 1, 1, 1);
      b.tempColor = new a.Color(0, 0, 0, 0);
      return b;
    }
    __extends(b, d);
    b.prototype.updateUVs = function() {
      var b = this.regionUVs;
      if (null == this.uvs || this.uvs.length != b.length) {
        this.uvs = a.Utils.newFloatArray(b.length);
      }
      var d = this.uvs, e = this.uvs.length, k = this.region.u, q = this.region.v;
      if (this.region instanceof a.TextureAtlasRegion) {
        var m = this.region;
        var n = m.texture.getImage().width;
        var c = m.texture.getImage().height;
        switch(m.degrees) {
          case 90:
            k -= (m.originalHeight - m.offsetY - m.height) / n;
            q -= (m.originalWidth - m.offsetX - m.width) / c;
            n = m.originalHeight / n;
            m = m.originalWidth / c;
            for (c = 0; c < e; c += 2) {
              d[c] = k + b[c + 1] * n, d[c + 1] = q + (1 - b[c]) * m;
            }
            return;
          case 180:
            k -= (m.originalWidth - m.offsetX - m.width) / n;
            q -= m.offsetY / c;
            n = m.originalWidth / n;
            m = m.originalHeight / c;
            for (c = 0; c < e; c += 2) {
              d[c] = k + (1 - b[c]) * n, d[c + 1] = q + (1 - b[c + 1]) * m;
            }
            return;
          case 270:
            k -= m.offsetY / n;
            q -= m.offsetX / c;
            n = m.originalHeight / n;
            m = m.originalWidth / c;
            for (c = 0; c < e; c += 2) {
              d[c] = k + (1 - b[c + 1]) * n, d[c + 1] = q + b[c] * m;
            }
            return;
        }
        k -= m.offsetX / n;
        q -= (m.originalHeight - m.offsetY - m.height) / c;
        n = m.originalWidth / n;
        m = m.originalHeight / c;
      } else {
        null == this.region ? (k = q = 0, n = m = 1) : (n = this.region.u2 - k, m = this.region.v2 - q);
      }
      for (c = 0; c < e; c += 2) {
        d[c] = k + b[c] * n, d[c + 1] = q + b[c + 1] * m;
      }
    };
    b.prototype.getParentMesh = function() {
      return this.parentMesh;
    };
    b.prototype.setParentMesh = function(a) {
      this.parentMesh = a;
      null != a && (this.bones = a.bones, this.vertices = a.vertices, this.worldVerticesLength = a.worldVerticesLength, this.regionUVs = a.regionUVs, this.triangles = a.triangles, this.hullLength = a.hullLength, this.worldVerticesLength = a.worldVerticesLength);
    };
    b.prototype.copy = function() {
      if (null != this.parentMesh) {
        return this.newLinkedMesh();
      }
      var d = new b(this.name);
      d.region = this.region;
      d.path = this.path;
      d.color.setFromColor(this.color);
      this.copyTo(d);
      d.regionUVs = Array(this.regionUVs.length);
      a.Utils.arrayCopy(this.regionUVs, 0, d.regionUVs, 0, this.regionUVs.length);
      d.uvs = Array(this.uvs.length);
      a.Utils.arrayCopy(this.uvs, 0, d.uvs, 0, this.uvs.length);
      d.triangles = Array(this.triangles.length);
      a.Utils.arrayCopy(this.triangles, 0, d.triangles, 0, this.triangles.length);
      d.hullLength = this.hullLength;
      null != this.edges && (d.edges = Array(this.edges.length), a.Utils.arrayCopy(this.edges, 0, d.edges, 0, this.edges.length));
      d.width = this.width;
      d.height = this.height;
      return d;
    };
    b.prototype.newLinkedMesh = function() {
      var a = new b(this.name);
      a.region = this.region;
      a.path = this.path;
      a.color.setFromColor(this.color);
      a.deformAttachment = this.deformAttachment;
      a.setParentMesh(null != this.parentMesh ? this.parentMesh : this);
      a.updateUVs();
      return a;
    };
    return b;
  }(a.VertexAttachment);
  a.MeshAttachment = d;
})(spine || (spine = {}));
(function(a) {
  var d = function(d) {
    function b(b) {
      b = d.call(this, b) || this;
      b.closed = !1;
      b.constantSpeed = !1;
      b.color = new a.Color(1, 1, 1, 1);
      return b;
    }
    __extends(b, d);
    b.prototype.copy = function() {
      var d = new b(name);
      this.copyTo(d);
      d.lengths = Array(this.lengths.length);
      a.Utils.arrayCopy(this.lengths, 0, d.lengths, 0, this.lengths.length);
      d.closed = closed;
      d.constantSpeed = this.constantSpeed;
      d.color.setFromColor(this.color);
      return d;
    };
    return b;
  }(a.VertexAttachment);
  a.PathAttachment = d;
})(spine || (spine = {}));
(function(a) {
  var d = function(d) {
    function b(b) {
      b = d.call(this, b) || this;
      b.color = new a.Color(.38, .94, 0, 1);
      return b;
    }
    __extends(b, d);
    b.prototype.computeWorldPosition = function(a, b) {
      b.x = this.x * a.a + this.y * a.b + a.worldX;
      b.y = this.x * a.c + this.y * a.d + a.worldY;
      return b;
    };
    b.prototype.computeWorldRotation = function(b) {
      var d = a.MathUtils.cosDeg(this.rotation), e = a.MathUtils.sinDeg(this.rotation);
      return Math.atan2(d * b.c + e * b.d, d * b.a + e * b.b) * a.MathUtils.radDeg;
    };
    b.prototype.copy = function() {
      var a = new b(name);
      a.x = this.x;
      a.y = this.y;
      a.rotation = this.rotation;
      a.color.setFromColor(this.color);
      return a;
    };
    return b;
  }(a.VertexAttachment);
  a.PointAttachment = d;
})(spine || (spine = {}));
(function(a) {
  var d = function(d) {
    function b(b) {
      b = d.call(this, b) || this;
      b.x = 0;
      b.y = 0;
      b.scaleX = 1;
      b.scaleY = 1;
      b.rotation = 0;
      b.width = 0;
      b.height = 0;
      b.color = new a.Color(1, 1, 1, 1);
      b.offset = a.Utils.newFloatArray(8);
      b.uvs = a.Utils.newFloatArray(8);
      b.tempColor = new a.Color(1, 1, 1, 1);
      return b;
    }
    __extends(b, d);
    b.prototype.updateOffset = function() {
      var a = this.width / this.region.originalWidth * this.scaleX, d = this.height / this.region.originalHeight * this.scaleY, e = -this.width / 2 * this.scaleX + this.region.offsetX * a, k = -this.height / 2 * this.scaleY + this.region.offsetY * d, q = e + this.region.width * a;
      a = k + this.region.height * d;
      d = this.rotation * Math.PI / 180;
      var m = Math.cos(d), n = Math.sin(d);
      d = e * m + this.x;
      e *= n;
      var c = k * m + this.y;
      k *= n;
      var h = q * m + this.x;
      q *= n;
      m = a * m + this.y;
      a *= n;
      n = this.offset;
      n[b.OX1] = d - k;
      n[b.OY1] = c + e;
      n[b.OX2] = d - a;
      n[b.OY2] = m + e;
      n[b.OX3] = h - a;
      n[b.OY3] = m + q;
      n[b.OX4] = h - k;
      n[b.OY4] = c + q;
    };
    b.prototype.setRegion = function(a) {
      this.region = a;
      var b = this.uvs;
      a.rotate ? (b[2] = a.u, b[3] = a.v2, b[4] = a.u, b[5] = a.v, b[6] = a.u2, b[7] = a.v, b[0] = a.u2, b[1] = a.v2) : (b[0] = a.u, b[1] = a.v2, b[2] = a.u, b[3] = a.v, b[4] = a.u2, b[5] = a.v, b[6] = a.u2, b[7] = a.v2);
    };
    b.prototype.computeWorldVertices = function(a, d, e, k) {
      var f = this.offset, g = a.worldX, n = a.worldY, c = a.a, h = a.b, r = a.c;
      a = a.d;
      var z = f[b.OX1];
      var y = f[b.OY1];
      d[e] = z * c + y * h + g;
      d[e + 1] = z * r + y * a + n;
      e += k;
      z = f[b.OX2];
      y = f[b.OY2];
      d[e] = z * c + y * h + g;
      d[e + 1] = z * r + y * a + n;
      e += k;
      z = f[b.OX3];
      y = f[b.OY3];
      d[e] = z * c + y * h + g;
      d[e + 1] = z * r + y * a + n;
      e += k;
      z = f[b.OX4];
      y = f[b.OY4];
      d[e] = z * c + y * h + g;
      d[e + 1] = z * r + y * a + n;
    };
    b.prototype.copy = function() {
      var d = new b(name);
      d.region = this.region;
      d.rendererObject = this.rendererObject;
      d.path = this.path;
      d.x = this.x;
      d.y = this.y;
      d.scaleX = this.scaleX;
      d.scaleY = this.scaleY;
      d.rotation = this.rotation;
      d.width = this.width;
      d.height = this.height;
      a.Utils.arrayCopy(this.uvs, 0, d.uvs, 0, 8);
      a.Utils.arrayCopy(this.offset, 0, d.offset, 0, 8);
      d.color.setFromColor(this.color);
      return d;
    };
    b.OX1 = 0;
    b.OY1 = 1;
    b.OX2 = 2;
    b.OY2 = 3;
    b.OX3 = 4;
    b.OY3 = 5;
    b.OX4 = 6;
    b.OY4 = 7;
    b.X1 = 0;
    b.Y1 = 1;
    b.C1R = 2;
    b.C1G = 3;
    b.C1B = 4;
    b.C1A = 5;
    b.U1 = 6;
    b.V1 = 7;
    b.X2 = 8;
    b.Y2 = 9;
    b.C2R = 10;
    b.C2G = 11;
    b.C2B = 12;
    b.C2A = 13;
    b.U2 = 14;
    b.V2 = 15;
    b.X3 = 16;
    b.Y3 = 17;
    b.C3R = 18;
    b.C3G = 19;
    b.C3B = 20;
    b.C3A = 21;
    b.U3 = 22;
    b.V3 = 23;
    b.X4 = 24;
    b.Y4 = 25;
    b.C4R = 26;
    b.C4G = 27;
    b.C4B = 28;
    b.C4A = 29;
    b.U4 = 30;
    b.V4 = 31;
    return b;
  }(a.Attachment);
  a.RegionAttachment = d;
})(spine || (spine = {}));
(function(a) {
  var d = function() {
    function d(a, d) {
      this.jitterY = this.jitterX = 0;
      this.jitterX = a;
      this.jitterY = d;
    }
    d.prototype.begin = function(a) {
    };
    d.prototype.transform = function(b, d, f, e) {
      b.x += a.MathUtils.randomTriangular(-this.jitterX, this.jitterY);
      b.y += a.MathUtils.randomTriangular(-this.jitterX, this.jitterY);
    };
    d.prototype.end = function() {
    };
    return d;
  }();
  a.JitterEffect = d;
})(spine || (spine = {}));
(function(a) {
  var d = function() {
    function d(a) {
      this.worldY = this.worldX = this.angle = this.radius = this.centerY = this.centerX = 0;
      this.radius = a;
    }
    d.prototype.begin = function(a) {
      this.worldX = a.x + this.centerX;
      this.worldY = a.y + this.centerY;
    };
    d.prototype.transform = function(b, g, f, e) {
      e = this.angle * a.MathUtils.degreesToRadians;
      g = b.x - this.worldX;
      f = b.y - this.worldY;
      var k = Math.sqrt(g * g + f * f);
      k < this.radius && (k = d.interpolation.apply(0, e, (this.radius - k) / this.radius), e = Math.cos(k), k = Math.sin(k), b.x = e * g - k * f + this.worldX, b.y = k * g + e * f + this.worldY);
    };
    d.prototype.end = function() {
    };
    d.interpolation = new a.PowOut(2);
    return d;
  }();
  a.SwirlEffect = d;
})(spine || (spine = {}));
(function(a) {
  (function(d) {
    var k = function(a) {
      function b(b) {
        void 0 === b && (b = "");
        return a.call(this, function(a) {
          return new d.ThreeJsTexture(a);
        }, b) || this;
      }
      __extends(b, a);
      return b;
    }(a.AssetManager);
    d.AssetManager = k;
  })(a.threejs || (a.threejs = {}));
})(spine || (spine = {}));
(function(a) {
  (function(a) {
    var d = function(b) {
      function d(f, e) {
        void 0 === f && (f = 10920);
        void 0 === e && (e = function(a) {
        });
        var g = b.call(this) || this;
        g.verticesLength = 0;
        g.indicesLength = 0;
        if (10920 < f) {
          throw Error("Can't have more than 10920 triangles per batch: " + f);
        }
        var k = g.vertices = new Float32Array(f * d.VERTEX_SIZE);
        f = g.indices = new Uint16Array(3 * f);
        var m = new THREE.BufferGeometry;
        k = g.vertexBuffer = new THREE.InterleavedBuffer(k, d.VERTEX_SIZE);
        k.usage = WebGLRenderingContext.DYNAMIC_DRAW;
        m.setAttribute("position", new THREE.InterleavedBufferAttribute(k, 3, 0, !1));
        m.setAttribute("color", new THREE.InterleavedBufferAttribute(k, 4, 3, !1));
        m.setAttribute("uv", new THREE.InterleavedBufferAttribute(k, 2, 7, !1));
        m.setIndex(new THREE.BufferAttribute(f, 1));
        m.getIndex().usage = WebGLRenderingContext.DYNAMIC_DRAW;
        m.drawRange.start = 0;
        m.drawRange.count = 0;
        g.geometry = m;
        g.material = new a.SkeletonMeshMaterial(e);
        return g;
      }
      __extends(d, b);
      d.prototype.dispose = function() {
        this.geometry.dispose();
        if (this.material instanceof THREE.Material) {
          this.material.dispose();
        } else {
          if (this.material) {
            for (var a = 0; a < this.material.length; a++) {
              var b = this.material[a];
              b instanceof THREE.Material && b.dispose();
            }
          }
        }
      };
      d.prototype.clear = function() {
        var a = this.geometry;
        a.drawRange.start = 0;
        a.drawRange.count = 0;
        this.material.uniforms.map.value = null;
      };
      d.prototype.begin = function() {
        this.indicesLength = this.verticesLength = 0;
      };
      d.prototype.canBatch = function(a, b) {
        return this.indicesLength + b >= this.indices.byteLength / 2 || this.verticesLength + a >= this.vertices.byteLength / 2 ? !1 : !0;
      };
      d.prototype.batch = function(a, b, g, k, m) {
        void 0 === m && (m = 0);
        for (var e = this.verticesLength / d.VERTEX_SIZE, c = this.vertices, f = this.verticesLength, q = 0; q < b;) {
          c[f++] = a[q++], c[f++] = a[q++], c[f++] = m, c[f++] = a[q++], c[f++] = a[q++], c[f++] = a[q++], c[f++] = a[q++], c[f++] = a[q++], c[f++] = a[q++];
        }
        this.verticesLength = f;
        a = this.indices;
        f = this.indicesLength;
        for (q = 0; q < k; f++, q++) {
          a[f] = g[q] + e;
        }
        this.indicesLength += k;
      };
      d.prototype.end = function() {
        this.vertexBuffer.needsUpdate = 0 < this.verticesLength;
        this.vertexBuffer.updateRange.offset = 0;
        this.vertexBuffer.updateRange.count = this.verticesLength;
        var a = this.geometry;
        a.getIndex().needsUpdate = 0 < this.indicesLength;
        a.getIndex().updateRange.offset = 0;
        a.getIndex().updateRange.count = this.indicesLength;
        a.drawRange.start = 0;
        a.drawRange.count = this.indicesLength;
      };
      d.VERTEX_SIZE = 9;
      return d;
    }(THREE.Mesh);
    a.MeshBatcher = d;
  })(a.threejs || (a.threejs = {}));
})(spine || (spine = {}));
(function(a) {
  (function(d) {
    var k = function(a) {
      function b(b) {
        var e = {uniforms:{map:{type:"t", value:null}}, vertexShader:"\n\t\t\t\tattribute vec4 color;\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tvarying vec4 vColor;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tvColor = color;\n\t\t\t\t\tgl_Position = projectionMatrix*modelViewMatrix*vec4(position,1.0);\n\t\t\t\t}\n\t\t\t", fragmentShader:"\n\t\t\t\tuniform sampler2D map;\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tvarying vec4 vColor;\n\t\t\t\tvoid main(void) {\n\t\t\t\t\tgl_FragColor = texture2D(map, vUv)*vColor;\n\t\t\t\t}\n\t\t\t", 
        side:THREE.DoubleSide, transparent:!0, alphaTest:.5};
        b(e);
        return a.call(this, e) || this;
      }
      __extends(b, a);
      return b;
    }(THREE.ShaderMaterial);
    d.SkeletonMeshMaterial = k;
    k = function(b) {
      function g(d, e) {
        void 0 === e && (e = function(a) {
        });
        var f = b.call(this) || this;
        f.tempPos = new a.Vector2;
        f.tempUv = new a.Vector2;
        f.tempLight = new a.Color;
        f.tempDark = new a.Color;
        f.zOffset = .1;
        f.batches = [];
        f.nextBatchIndex = 0;
        f.clipper = new a.SkeletonClipping;
        f.vertices = a.Utils.newFloatArray(1024);
        f.tempColor = new a.Color;
        f.materialCustomizer = e;
        f.skeleton = new a.Skeleton(d);
        d = new a.AnimationStateData(d);
        f.state = new a.AnimationState(d);
        return f;
      }
      __extends(g, b);
      g.prototype.update = function(a) {
        var b = this.state, d = this.skeleton;
        b.update(a);
        b.apply(d);
        d.updateWorldTransform();
        this.updateGeometry();
      };
      g.prototype.dispose = function() {
        for (var a = 0; a < this.batches.length; a++) {
          this.batches[a].dispose();
        }
      };
      g.prototype.clearBatches = function() {
        for (var a = 0; a < this.batches.length; a++) {
          this.batches[a].clear(), this.batches[a].visible = !1;
        }
        this.nextBatchIndex = 0;
      };
      g.prototype.nextBatch = function() {
        if (this.batches.length == this.nextBatchIndex) {
          var a = new d.MeshBatcher(10920, this.materialCustomizer);
          this.add(a);
          this.batches.push(a);
        }
        a = this.batches[this.nextBatchIndex++];
        a.visible = !0;
        return a;
      };
      g.prototype.updateGeometry = function() {
        this.clearBatches();
        var b = this.tempPos, e = this.tempUv, d = this.tempLight, k = this.tempDark, m = this.clipper, n = this.skeleton.drawOrder, c = this.nextBatch();
        c.begin();
        for (var h = 0, t = this.zOffset, z = 0, y = n.length; z < y; z++) {
          var x = m.isClipping() ? 2 : g.VERTEX_SIZE, p = n[z];
          if (p.bone.active) {
            var v = p.getAttachment();
            if (v instanceof a.RegionAttachment) {
              var w = v.color;
              var C = this.vertices;
              var A = 4 * x;
              v.computeWorldVertices(p.bone, C, 0, x);
              var D = g.QUAD_TRIANGLES;
              var F = v.uvs;
              v = v.region.renderObject.texture;
            } else {
              if (v instanceof a.MeshAttachment) {
                w = v.color, C = this.vertices, A = (v.worldVerticesLength >> 1) * x, A > C.length && (C = this.vertices = a.Utils.newFloatArray(A)), v.computeWorldVertices(p, 0, v.worldVerticesLength, C, 0, x), D = v.triangles, F = v.uvs, v = v.region.renderObject.texture;
              } else {
                v instanceof a.ClippingAttachment && m.clipStart(p, v);
                continue;
              }
            }
            if (null != v) {
              var B = p.bone.skeleton.color, E = p.color, I = this.tempColor;
              I.set(B.r * E.r * w.r, B.g * E.g * w.g, B.b * E.b * w.b, B.a * E.a * w.a);
              if (m.isClipping()) {
                m.clipTriangles(C, A, D, D.length, F, I, null, !1);
                A = m.clippedVertices;
                D = m.clippedTriangles;
                if (null != this.vertexEffect) {
                  for (E = this.vertexEffect, w = A, B = 0, C = A.length; B < C; B += x) {
                    b.x = w[B], b.y = w[B + 1], d.setFromColor(I), k.set(0, 0, 0, 0), e.x = w[B + 6], e.y = w[B + 7], E.transform(b, e, d, k), w[B] = b.x, w[B + 1] = b.y, w[B + 2] = d.r, w[B + 3] = d.g, w[B + 4] = d.b, w[B + 5] = d.a, w[B + 6] = e.x, w[B + 7] = e.y;
                  }
                }
                x = A;
                A = A.length;
                I = D;
                D = D.length;
              } else {
                w = C;
                if (null != this.vertexEffect) {
                  E = this.vertexEffect;
                  for (var K = B = 0, J = A; B < J; B += x, K += 2) {
                    b.x = w[B], b.y = w[B + 1], d.setFromColor(I), k.set(0, 0, 0, 0), e.x = F[K], e.y = F[K + 1], E.transform(b, e, d, k), w[B] = b.x, w[B + 1] = b.y, w[B + 2] = d.r, w[B + 3] = d.g, w[B + 4] = d.b, w[B + 5] = d.a, w[B + 6] = e.x, w[B + 7] = e.y;
                  }
                } else {
                  for (B = 2, K = 0, E = A; B < E; B += x, K += 2) {
                    w[B] = I.r, w[B + 1] = I.g, w[B + 2] = I.b, w[B + 3] = I.a, w[B + 4] = F[K], w[B + 5] = F[K + 1];
                  }
                }
                x = C;
                I = D;
                D = D.length;
              }
              if (0 == A || 0 == D) {
                continue;
              }
              c.canBatch(A, D) || (c.end(), c = this.nextBatch(), c.begin());
              C = c.material;
              null == C.uniforms.map.value && (C.uniforms.map.value = v.texture);
              C.uniforms.map.value != v.texture && (c.end(), c = this.nextBatch(), c.begin(), C = c.material, C.uniforms.map.value = v.texture);
              C.needsUpdate = !0;
              c.batch(x, A, I, D, h);
              h += t;
            }
            m.clipEndWithSlot(p);
          }
        }
        m.clipEnd();
        c.end();
      };
      g.QUAD_TRIANGLES = [0, 1, 2, 2, 3, 0];
      g.VERTEX_SIZE = 8;
      return g;
    }(THREE.Object3D);
    d.SkeletonMesh = k;
  })(a.threejs || (a.threejs = {}));
})(spine || (spine = {}));
(function(a) {
  (function(d) {
    var k = function(b) {
      function d(a) {
        var e = b.call(this, a) || this;
        e.texture = new THREE.Texture(a);
        e.texture.flipY = !1;
        e.texture.needsUpdate = !0;
        return e;
      }
      __extends(d, b);
      d.prototype.setFilters = function(a, b) {
        this.texture.minFilter = d.toThreeJsTextureFilter(a);
        this.texture.magFilter = d.toThreeJsTextureFilter(b);
      };
      d.prototype.setWraps = function(a, b) {
        this.texture.wrapS = d.toThreeJsTextureWrap(a);
        this.texture.wrapT = d.toThreeJsTextureWrap(b);
      };
      d.prototype.dispose = function() {
        this.texture.dispose();
      };
      d.toThreeJsTextureFilter = function(b) {
        if (b === a.TextureFilter.Linear) {
          return THREE.LinearFilter;
        }
        if (b === a.TextureFilter.MipMap) {
          return THREE.LinearMipMapLinearFilter;
        }
        if (b === a.TextureFilter.MipMapLinearNearest) {
          return THREE.LinearMipMapNearestFilter;
        }
        if (b === a.TextureFilter.MipMapNearestLinear) {
          return THREE.NearestMipMapLinearFilter;
        }
        if (b === a.TextureFilter.MipMapNearestNearest) {
          return THREE.NearestMipMapNearestFilter;
        }
        if (b === a.TextureFilter.Nearest) {
          return THREE.NearestFilter;
        }
        throw Error("Unknown texture filter: " + b);
      };
      d.toThreeJsTextureWrap = function(b) {
        if (b === a.TextureWrap.ClampToEdge) {
          return THREE.ClampToEdgeWrapping;
        }
        if (b === a.TextureWrap.MirroredRepeat) {
          return THREE.MirroredRepeatWrapping;
        }
        if (b === a.TextureWrap.Repeat) {
          return THREE.RepeatWrapping;
        }
        throw Error("Unknown texture wrap: " + b);
      };
      return d;
    }(a.Texture);
    d.ThreeJsTexture = k;
  })(a.threejs || (a.threejs = {}));
})(spine || (spine = {}));
(function(a) {
  "object" === typeof exports && "undefined" !== typeof module ? module.exports = a() : "function" === typeof define && define.amd ? define([], a) : ("undefined" !== typeof window ? window : "undefined" !== typeof global ? global : "undefined" !== typeof self ? self : this).opentype = a();
})(function() {
  return function g(d, k, b) {
    function f(q, m) {
      if (!k[q]) {
        if (!d[q]) {
          var n = "function" == typeof require && require;
          if (!m && n) {
            return n(q, !0);
          }
          if (e) {
            return e(q, !0);
          }
          m = Error("Cannot find module '" + q + "'");
          throw m.code = "MODULE_NOT_FOUND", m;
        }
        m = k[q] = {exports:{}};
        d[q][0].call(m.exports, function(b) {
          var c = d[q][1][b];
          return f(c ? c : b);
        }, m, m.exports, g, d, k, b);
      }
      return k[q].exports;
    }
    for (var e = "function" == typeof require && require, r = 0; r < b.length; r++) {
      f(b[r]);
    }
    return f;
  }({1:[function(d, k, b) {
    function g() {
      this.table = new Uint16Array(16);
      this.trans = new Uint16Array(288);
    }
    function f(b, c) {
      this.source = b;
      this.bitcount = this.tag = this.sourceIndex = 0;
      this.dest = c;
      this.destLen = 0;
      this.ltree = new g;
      this.dtree = new g;
    }
    function e(b, c, e, d) {
      var f;
      for (f = 0; e > f; ++f) {
        b[f] = 0;
      }
      for (f = 0; 30 - e > f; ++f) {
        b[f + e] = f / e | 0;
      }
      e = d;
      for (f = 0; 30 > f; ++f) {
        c[f] = e, e += 1 << b[f];
      }
    }
    function r(b, c, e, d) {
      var f, h;
      for (f = 0; 16 > f; ++f) {
        b.table[f] = 0;
      }
      for (f = 0; d > f; ++f) {
        b.table[c[e + f]]++;
      }
      for (f = h = b.table[0] = 0; 16 > f; ++f) {
        A[f] = h, h += b.table[f];
      }
      for (f = 0; d > f; ++f) {
        c[e + f] && (b.trans[A[c[e + f]]++] = f);
      }
    }
    function q(b, c, e) {
      if (!c) {
        return e;
      }
      for (; 24 > b.bitcount;) {
        b.tag |= b.source[b.sourceIndex++] << b.bitcount, b.bitcount += 8;
      }
      var d = b.tag & 65535 >>> 16 - c;
      return b.tag >>>= c, b.bitcount -= c, d + e;
    }
    function m(b, c) {
      for (; 24 > b.bitcount;) {
        b.tag |= b.source[b.sourceIndex++] << b.bitcount, b.bitcount += 8;
      }
      var e = 0, d = 0, f = 0, h = b.tag;
      do {
        d = 2 * d + (1 & h), h >>>= 1, ++f, e += c.table[f], d -= c.table[f];
      } while (0 <= d);
      return b.tag = h, b.bitcount -= f, c.trans[e + d];
    }
    function n(b, e, d) {
      for (;;) {
        var f = m(b, e);
        if (256 === f) {
          return c;
        }
        if (256 > f) {
          b.dest[b.destLen++] = f;
        } else {
          var h;
          f -= 257;
          f = q(b, z[f], y[f]);
          var g = m(b, d);
          for (h = g = b.destLen - q(b, x[g], p[g]); g + f > h; ++h) {
            b.dest[b.destLen++] = b.dest[h];
          }
        }
      }
    }
    var c = 0, h = new g, t = new g, z = new Uint8Array(30), y = new Uint16Array(30), x = new Uint8Array(30), p = new Uint16Array(30), v = new Uint8Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]), w = new g, C = new Uint8Array(320), A = new Uint16Array(16);
    (function(b, c) {
      var e;
      for (e = 0; 7 > e; ++e) {
        b.table[e] = 0;
      }
      b.table[7] = 24;
      b.table[8] = 152;
      b.table[9] = 112;
      for (e = 0; 24 > e; ++e) {
        b.trans[e] = 256 + e;
      }
      for (e = 0; 144 > e; ++e) {
        b.trans[24 + e] = e;
      }
      for (e = 0; 8 > e; ++e) {
        b.trans[168 + e] = 280 + e;
      }
      for (e = 0; 112 > e; ++e) {
        b.trans[176 + e] = 144 + e;
      }
      for (e = 0; 5 > e; ++e) {
        c.table[e] = 0;
      }
      c.table[5] = 32;
      for (e = 0; 32 > e; ++e) {
        c.trans[e] = e;
      }
    })(h, t);
    e(z, y, 4, 3);
    e(x, p, 2, 1);
    z[28] = 0;
    y[28] = 258;
    k.exports = function(b, e) {
      b = new f(b, e);
      do {
        e = b;
        e.bitcount-- || (e.tag = e.source[e.sourceIndex++], e.bitcount = 7);
        var d = 1 & e.tag;
        switch(e = (e.tag >>>= 1, d), q(b, 2, 0)) {
          case 0:
            var g, k = g = void 0;
            for (d = b; 8 < d.bitcount;) {
              d.sourceIndex--, d.bitcount -= 8;
            }
            if (k = d.source[d.sourceIndex + 1], k = 256 * k + d.source[d.sourceIndex], g = d.source[d.sourceIndex + 3], g = 256 * g + d.source[d.sourceIndex + 2], k !== (65535 & ~g)) {
              d = -3;
            } else {
              d.sourceIndex += 4;
              for (g = k; g; --g) {
                d.dest[d.destLen++] = d.source[d.sourceIndex++];
              }
              d = (d.bitcount = 0, c);
            }
            break;
          case 1:
            d = n(b, h, t);
            break;
          case 2:
            var p;
            k = b;
            var z = b.ltree, y = b.dtree;
            g = q(k, 5, 257);
            d = q(k, 5, 1);
            var x = q(k, 4, 4);
            for (p = 0; 19 > p; ++p) {
              C[p] = 0;
            }
            for (p = 0; x > p; ++p) {
              var A = q(k, 3, 0);
              C[v[p]] = A;
            }
            r(w, C, 0, 19);
            for (p = 0; g + d > p;) {
              switch(x = m(k, w), x) {
                case 16:
                  A = C[p - 1];
                  for (x = q(k, 2, 3); x; --x) {
                    C[p++] = A;
                  }
                  break;
                case 17:
                  for (x = q(k, 3, 3); x; --x) {
                    C[p++] = 0;
                  }
                  break;
                case 18:
                  for (x = q(k, 7, 11); x; --x) {
                    C[p++] = 0;
                  }
                  break;
                default:
                  C[p++] = x;
              }
            }
            r(z, C, 0, g);
            r(y, C, g, d);
            d = n(b, b.ltree, b.dtree);
            break;
          default:
            d = -3;
        }
        if (d !== c) {
          throw Error("Data error");
        }
      } while (!e);
      return b.destLen < b.dest.length ? "function" == typeof b.dest.slice ? b.dest.slice(0, b.destLen) : b.dest.subarray(0, b.destLen) : b.dest;
    };
  }, {}], 2:[function(d, k, b) {
    b.fail = function(b) {
      throw Error(b);
    };
    b.argument = function(d, f) {
      d || b.fail(f);
    };
    b.assert = b.argument;
  }, {}], 3:[function(d, k, b) {
    b.line = function(b, d, e, k, q) {
      b.beginPath();
      b.moveTo(d, e);
      b.lineTo(k, q);
      b.stroke();
    };
  }, {}], 4:[function(d, k, b) {
    function g(b) {
      this.font = b;
    }
    function f(b) {
      this.cmap = b;
    }
    function e(b, e) {
      this.encoding = b;
      this.charset = e;
    }
    function r(e) {
      var d;
      switch(e.version) {
        case 1:
          this.names = b.standardNames.slice();
          break;
        case 2:
          this.names = Array(e.numberOfGlyphs);
          for (d = 0; d < e.numberOfGlyphs; d++) {
            this.names[d] = e.glyphNameIndex[d] < b.standardNames.length ? b.standardNames[e.glyphNameIndex[d]] : e.names[e.glyphNameIndex[d] - b.standardNames.length];
          }
          break;
        case 2.5:
          this.names = Array(e.numberOfGlyphs);
          for (d = 0; d < e.numberOfGlyphs; d++) {
            this.names[d] = b.standardNames[d + e.glyphNameIndex[d]];
          }
          break;
        case 3:
          this.names = [];
      }
    }
    g.prototype.charToGlyphIndex = function(b) {
      b = b.charCodeAt(0);
      var e = this.font.glyphs;
      if (!e) {
        return null;
      }
      for (var d = 0; d < e.length; d += 1) {
        for (var c = e.get(d), f = 0; f < c.unicodes.length; f += 1) {
          if (c.unicodes[f] === b) {
            return d;
          }
        }
      }
    };
    f.prototype.charToGlyphIndex = function(b) {
      return this.cmap.glyphIndexMap[b.charCodeAt(0)] || 0;
    };
    e.prototype.charToGlyphIndex = function(b) {
      b = b.charCodeAt(0);
      return this.charset.indexOf(this.encoding[b]);
    };
    r.prototype.nameToGlyphIndex = function(b) {
      return this.names.indexOf(b);
    };
    r.prototype.glyphIndexToName = function(b) {
      return this.names[b];
    };
    b.cffStandardStrings = ".notdef;space;exclam;quotedbl;numbersign;dollar;percent;ampersand;quoteright;parenleft;parenright;asterisk;plus;comma;hyphen;period;slash;zero;one;two;three;four;five;six;seven;eight;nine;colon;semicolon;less;equal;greater;question;at;A;B;C;D;E;F;G;H;I;J;K;L;M;N;O;P;Q;R;S;T;U;V;W;X;Y;Z;bracketleft;backslash;bracketright;asciicircum;underscore;quoteleft;a;b;c;d;e;f;g;h;i;j;k;l;m;n;o;p;q;r;s;t;u;v;w;x;y;z;braceleft;bar;braceright;asciitilde;exclamdown;cent;sterling;fraction;yen;florin;section;currency;quotesingle;quotedblleft;guillemotleft;guilsinglleft;guilsinglright;fi;fl;endash;dagger;daggerdbl;periodcentered;paragraph;bullet;quotesinglbase;quotedblbase;quotedblright;guillemotright;ellipsis;perthousand;questiondown;grave;acute;circumflex;tilde;macron;breve;dotaccent;dieresis;ring;cedilla;hungarumlaut;ogonek;caron;emdash;AE;ordfeminine;Lslash;Oslash;OE;ordmasculine;ae;dotlessi;lslash;oslash;oe;germandbls;onesuperior;logicalnot;mu;trademark;Eth;onehalf;plusminus;Thorn;onequarter;divide;brokenbar;degree;thorn;threequarters;twosuperior;registered;minus;eth;multiply;threesuperior;copyright;Aacute;Acircumflex;Adieresis;Agrave;Aring;Atilde;Ccedilla;Eacute;Ecircumflex;Edieresis;Egrave;Iacute;Icircumflex;Idieresis;Igrave;Ntilde;Oacute;Ocircumflex;Odieresis;Ograve;Otilde;Scaron;Uacute;Ucircumflex;Udieresis;Ugrave;Yacute;Ydieresis;Zcaron;aacute;acircumflex;adieresis;agrave;aring;atilde;ccedilla;eacute;ecircumflex;edieresis;egrave;iacute;icircumflex;idieresis;igrave;ntilde;oacute;ocircumflex;odieresis;ograve;otilde;scaron;uacute;ucircumflex;udieresis;ugrave;yacute;ydieresis;zcaron;exclamsmall;Hungarumlautsmall;dollaroldstyle;dollarsuperior;ampersandsmall;Acutesmall;parenleftsuperior;parenrightsuperior;266 ff;onedotenleader;zerooldstyle;oneoldstyle;twooldstyle;threeoldstyle;fouroldstyle;fiveoldstyle;sixoldstyle;sevenoldstyle;eightoldstyle;nineoldstyle;commasuperior;threequartersemdash;periodsuperior;questionsmall;asuperior;bsuperior;centsuperior;dsuperior;esuperior;isuperior;lsuperior;msuperior;nsuperior;osuperior;rsuperior;ssuperior;tsuperior;ff;ffi;ffl;parenleftinferior;parenrightinferior;Circumflexsmall;hyphensuperior;Gravesmall;Asmall;Bsmall;Csmall;Dsmall;Esmall;Fsmall;Gsmall;Hsmall;Ismall;Jsmall;Ksmall;Lsmall;Msmall;Nsmall;Osmall;Psmall;Qsmall;Rsmall;Ssmall;Tsmall;Usmall;Vsmall;Wsmall;Xsmall;Ysmall;Zsmall;colonmonetary;onefitted;rupiah;Tildesmall;exclamdownsmall;centoldstyle;Lslashsmall;Scaronsmall;Zcaronsmall;Dieresissmall;Brevesmall;Caronsmall;Dotaccentsmall;Macronsmall;figuredash;hypheninferior;Ogoneksmall;Ringsmall;Cedillasmall;questiondownsmall;oneeighth;threeeighths;fiveeighths;seveneighths;onethird;twothirds;zerosuperior;foursuperior;fivesuperior;sixsuperior;sevensuperior;eightsuperior;ninesuperior;zeroinferior;oneinferior;twoinferior;threeinferior;fourinferior;fiveinferior;sixinferior;seveninferior;eightinferior;nineinferior;centinferior;dollarinferior;periodinferior;commainferior;Agravesmall;Aacutesmall;Acircumflexsmall;Atildesmall;Adieresissmall;Aringsmall;AEsmall;Ccedillasmall;Egravesmall;Eacutesmall;Ecircumflexsmall;Edieresissmall;Igravesmall;Iacutesmall;Icircumflexsmall;Idieresissmall;Ethsmall;Ntildesmall;Ogravesmall;Oacutesmall;Ocircumflexsmall;Otildesmall;Odieresissmall;OEsmall;Oslashsmall;Ugravesmall;Uacutesmall;Ucircumflexsmall;Udieresissmall;Yacutesmall;Thornsmall;Ydieresissmall;001.000;001.001;001.002;001.003;Black;Bold;Book;Light;Medium;Regular;Roman;Semibold".split(";");
    b.cffStandardEncoding = "                                space exclam quotedbl numbersign dollar percent ampersand quoteright parenleft parenright asterisk plus comma hyphen period slash zero one two three four five six seven eight nine colon semicolon less equal greater question at A B C D E F G H I J K L M N O P Q R S T U V W X Y Z bracketleft backslash bracketright asciicircum underscore quoteleft a b c d e f g h i j k l m n o p q r s t u v w x y z braceleft bar braceright asciitilde                                   exclamdown cent sterling fraction yen florin section currency quotesingle quotedblleft guillemotleft guilsinglleft guilsinglright fi fl  endash dagger daggerdbl periodcentered  paragraph bullet quotesinglbase quotedblbase quotedblright guillemotright ellipsis perthousand  questiondown  grave acute circumflex tilde macron breve dotaccent dieresis  ring cedilla  hungarumlaut ogonek caron emdash                 AE  ordfeminine     Lslash Oslash OE ordmasculine      ae    dotlessi   lslash oslash oe germandbls".split(" ");
    b.cffExpertEncoding = "                                space exclamsmall Hungarumlautsmall  dollaroldstyle dollarsuperior ampersandsmall Acutesmall parenleftsuperior parenrightsuperior twodotenleader onedotenleader comma hyphen period fraction zerooldstyle oneoldstyle twooldstyle threeoldstyle fouroldstyle fiveoldstyle sixoldstyle sevenoldstyle eightoldstyle nineoldstyle colon semicolon commasuperior threequartersemdash periodsuperior questionsmall  asuperior bsuperior centsuperior dsuperior esuperior   isuperior   lsuperior msuperior nsuperior osuperior   rsuperior ssuperior tsuperior  ff fi fl ffi ffl parenleftinferior  parenrightinferior Circumflexsmall hyphensuperior Gravesmall Asmall Bsmall Csmall Dsmall Esmall Fsmall Gsmall Hsmall Ismall Jsmall Ksmall Lsmall Msmall Nsmall Osmall Psmall Qsmall Rsmall Ssmall Tsmall Usmall Vsmall Wsmall Xsmall Ysmall Zsmall colonmonetary onefitted rupiah Tildesmall                                   exclamdownsmall centoldstyle Lslashsmall   Scaronsmall Zcaronsmall Dieresissmall Brevesmall Caronsmall  Dotaccentsmall   Macronsmall   figuredash hypheninferior   Ogoneksmall Ringsmall Cedillasmall    onequarter onehalf threequarters questiondownsmall oneeighth threeeighths fiveeighths seveneighths onethird twothirds   zerosuperior onesuperior twosuperior threesuperior foursuperior fivesuperior sixsuperior sevensuperior eightsuperior ninesuperior zeroinferior oneinferior twoinferior threeinferior fourinferior fiveinferior sixinferior seveninferior eightinferior nineinferior centinferior dollarinferior periodinferior commainferior Agravesmall Aacutesmall Acircumflexsmall Atildesmall Adieresissmall Aringsmall AEsmall Ccedillasmall Egravesmall Eacutesmall Ecircumflexsmall Edieresissmall Igravesmall Iacutesmall Icircumflexsmall Idieresissmall Ethsmall Ntildesmall Ogravesmall Oacutesmall Ocircumflexsmall Otildesmall Odieresissmall OEsmall Oslashsmall Ugravesmall Uacutesmall Ucircumflexsmall Udieresissmall Yacutesmall Thornsmall Ydieresissmall".split(" ");
    b.standardNames = ".notdef .null nonmarkingreturn space exclam quotedbl numbersign dollar percent ampersand quotesingle parenleft parenright asterisk plus comma hyphen period slash zero one two three four five six seven eight nine colon semicolon less equal greater question at A B C D E F G H I J K L M N O P Q R S T U V W X Y Z bracketleft backslash bracketright asciicircum underscore grave a b c d e f g h i j k l m n o p q r s t u v w x y z braceleft bar braceright asciitilde Adieresis Aring Ccedilla Eacute Ntilde Odieresis Udieresis aacute agrave acircumflex adieresis atilde aring ccedilla eacute egrave ecircumflex edieresis iacute igrave icircumflex idieresis ntilde oacute ograve ocircumflex odieresis otilde uacute ugrave ucircumflex udieresis dagger degree cent sterling section bullet paragraph germandbls registered copyright trademark acute dieresis notequal AE Oslash infinity plusminus lessequal greaterequal yen mu partialdiff summation product pi integral ordfeminine ordmasculine Omega ae oslash questiondown exclamdown logicalnot radical florin approxequal Delta guillemotleft guillemotright ellipsis nonbreakingspace Agrave Atilde Otilde OE oe endash emdash quotedblleft quotedblright quoteleft quoteright divide lozenge ydieresis Ydieresis fraction currency guilsinglleft guilsinglright fi fl daggerdbl periodcentered quotesinglbase quotedblbase perthousand Acircumflex Ecircumflex Aacute Edieresis Egrave Iacute Icircumflex Idieresis Igrave Oacute Ocircumflex apple Ograve Uacute Ucircumflex Ugrave dotlessi circumflex tilde macron breve dotaccent ring cedilla hungarumlaut ogonek caron Lslash lslash Scaron scaron Zcaron zcaron brokenbar Eth eth Yacute yacute Thorn thorn minus multiply onesuperior twosuperior threesuperior onehalf onequarter threequarters franc Gbreve gbreve Idotaccent Scedilla scedilla Cacute cacute Ccaron ccaron dcroat".split(" ");
    b.DefaultEncoding = g;
    b.CmapEncoding = f;
    b.CffEncoding = e;
    b.GlyphNames = r;
    b.addGlyphNames = function(b) {
      for (var e, d = b.tables.cmap.glyphIndexMap, c = Object.keys(d), f = 0; f < c.length; f += 1) {
        var g = c[f];
        e = b.glyphs.get(d[g]);
        e.addUnicode(parseInt(g));
      }
      for (f = 0; f < b.glyphs.length; f += 1) {
        e = b.glyphs.get(f), b.cffEncoding ? e.name = b.cffEncoding.charset[f] : b.glyphNames.names && (e.name = b.glyphNames.glyphIndexToName(f));
      }
    };
  }, {}], 5:[function(d, k, b) {
    function g(b) {
      b = b || {};
      b.empty || (n.checkArgument(b.familyName, "When creating a new Font object, familyName is required."), n.checkArgument(b.styleName, "When creating a new Font object, styleName is required."), n.checkArgument(b.unitsPerEm, "When creating a new Font object, unitsPerEm is required."), n.checkArgument(b.ascender, "When creating a new Font object, ascender is required."), n.checkArgument(b.descender, "When creating a new Font object, descender is required."), n.checkArgument(0 > b.descender, "Descender should be negative (e.g. -512)."), 
      this.names = {fontFamily:{en:b.familyName || " "}, fontSubfamily:{en:b.styleName || " "}, fullName:{en:b.fullName || b.familyName + " " + b.styleName}, postScriptName:{en:b.postScriptName || b.familyName + b.styleName}, designer:{en:b.designer || " "}, designerURL:{en:b.designerURL || " "}, manufacturer:{en:b.manufacturer || " "}, manufacturerURL:{en:b.manufacturerURL || " "}, license:{en:b.license || " "}, licenseURL:{en:b.licenseURL || " "}, version:{en:b.version || "Version 0.1"}, description:{en:b.description || 
      " "}, copyright:{en:b.copyright || " "}, trademark:{en:b.trademark || " "}}, this.unitsPerEm = b.unitsPerEm || 1E3, this.ascender = b.ascender, this.descender = b.descender, this.createdTimestamp = b.createdTimestamp, this.tables = {os2:{usWeightClass:b.weightClass || this.usWeightClasses.MEDIUM, usWidthClass:b.widthClass || this.usWidthClasses.MEDIUM, fsSelection:b.fsSelection || this.fsSelectionValues.REGULAR}});
      this.supported = !0;
      this.glyphs = new q.GlyphSet(this, b.glyphs || []);
      this.encoding = new r.DefaultEncoding(this);
      this.substitution = new m(this);
      this.tables = this.tables || {};
    }
    var f = d("./path"), e = d("./tables/sfnt"), r = d("./encoding"), q = d("./glyphset"), m = d("./substitution"), n = d("./util");
    g.prototype.hasChar = function(b) {
      return null !== this.encoding.charToGlyphIndex(b);
    };
    g.prototype.charToGlyphIndex = function(b) {
      return this.encoding.charToGlyphIndex(b);
    };
    g.prototype.charToGlyph = function(b) {
      b = this.charToGlyphIndex(b);
      b = this.glyphs.get(b);
      return b || (b = this.glyphs.get(0)), b;
    };
    g.prototype.stringToGlyphs = function(b) {
      for (var c = [], e = 0; e < b.length; e += 1) {
        c.push(this.charToGlyph(b[e]));
      }
      return c;
    };
    g.prototype.nameToGlyphIndex = function(b) {
      return this.glyphNames.nameToGlyphIndex(b);
    };
    g.prototype.nameToGlyph = function(b) {
      b = this.nametoGlyphIndex(b);
      b = this.glyphs.get(b);
      return b || (b = this.glyphs.get(0)), b;
    };
    g.prototype.glyphIndexToName = function(b) {
      return this.glyphNames.glyphIndexToName ? this.glyphNames.glyphIndexToName(b) : "";
    };
    g.prototype.getKerningValue = function(b, e) {
      b = b.index || b;
      e = e.index || e;
      var c = this.getGposKerningValue;
      return c ? c(b, e) : this.kerningPairs[b + "," + e] || 0;
    };
    g.prototype.forEachGlyph = function(b, e, d, f, g, k) {
      e = void 0 !== e ? e : 0;
      d = void 0 !== d ? d : 0;
      f = void 0 !== f ? f : 72;
      g = g || {};
      var c = void 0 === g.kerning ? !0 : g.kerning, h = 1 / this.unitsPerEm * f;
      b = this.stringToGlyphs(b);
      for (var m = 0; m < b.length; m += 1) {
        var n = b[m];
        if (k(n, e, d, f, g), n.advanceWidth && (e += n.advanceWidth * h), c && m < b.length - 1) {
          n = this.getKerningValue(n, b[m + 1]), e += n * h;
        }
      }
    };
    g.prototype.getPath = function(b, e, d, g, k) {
      var c = new f.Path;
      return this.forEachGlyph(b, e, d, g, k, function(b, e, d, f) {
        b = b.getPath(e, d, f);
        c.extend(b);
      }), c;
    };
    g.prototype.getPaths = function(b, e, d, f, g) {
      var c = [];
      return this.forEachGlyph(b, e, d, f, g, function(b, e, d, f) {
        b = b.getPath(e, d, f);
        c.push(b);
      }), c;
    };
    g.prototype.draw = function(b, e, d, f, g, k) {
      this.getPath(e, d, f, g, k).draw(b);
    };
    g.prototype.drawPoints = function(b, e, d, f, g, k) {
      this.forEachGlyph(e, d, f, g, k, function(c, e, d, f) {
        c.drawPoints(b, e, d, f);
      });
    };
    g.prototype.drawMetrics = function(b, e, d, f, g, k) {
      this.forEachGlyph(e, d, f, g, k, function(c, e, d, f) {
        c.drawMetrics(b, e, d, f);
      });
    };
    g.prototype.getEnglishName = function(b) {
      return (b = this.names[b]) ? b.en : void 0;
    };
    g.prototype.validate = function() {
      function b(b) {
        var c = d.getEnglishName(b);
        c && 0 < c.trim().length || e.push("No English " + b + " specified.");
      }
      var e = [], d = this;
      b("fontFamily");
      b("weightName");
      b("manufacturer");
      b("copyright");
      b("version");
      0 < this.unitsPerEm || e.push("No unitsPerEm specified.");
    };
    g.prototype.toTables = function() {
      return e.fontToTable(this);
    };
    g.prototype.toBuffer = function() {
      return console.warn("Font.toBuffer is deprecated. Use Font.toArrayBuffer instead."), this.toArrayBuffer();
    };
    g.prototype.toArrayBuffer = function() {
      for (var b = this.toTables().encode(), e = new ArrayBuffer(b.length), d = new Uint8Array(e), f = 0; f < b.length; f++) {
        d[f] = b[f];
      }
      return e;
    };
    g.prototype.download = function() {
      var b = this.getEnglishName("fontFamily"), e = this.getEnglishName("fontSubfamily"), f = b.replace(/\s/g, "") + "-" + e + ".otf", g = this.toArrayBuffer();
      n.isBrowser() ? (window.requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem, window.requestFileSystem(window.TEMPORARY, g.byteLength, function(b) {
        b.root.getFile(f, {create:!0}, function(b) {
          b.createWriter(function(c) {
            var e = new DataView(g);
            e = new Blob([e], {type:"font/opentype"});
            c.write(e);
            c.addEventListener("writeend", function() {
              location.href = b.toURL();
            }, !1);
          });
        });
      }, function(b) {
        throw Error(b.name + ": " + b.message);
      })) : (b = d("fs"), e = n.arrayBufferToNodeBuffer(g), b.writeFileSync(f, e));
    };
    g.prototype.fsSelectionValues = {ITALIC:1, UNDERSCORE:2, NEGATIVE:4, OUTLINED:8, STRIKEOUT:16, BOLD:32, REGULAR:64, USER_TYPO_METRICS:128, WWS:256, OBLIQUE:512};
    g.prototype.usWidthClasses = {ULTRA_CONDENSED:1, EXTRA_CONDENSED:2, CONDENSED:3, SEMI_CONDENSED:4, MEDIUM:5, SEMI_EXPANDED:6, EXPANDED:7, EXTRA_EXPANDED:8, ULTRA_EXPANDED:9};
    g.prototype.usWeightClasses = {THIN:100, EXTRA_LIGHT:200, LIGHT:300, NORMAL:400, MEDIUM:500, SEMI_BOLD:600, BOLD:700, EXTRA_BOLD:800, BLACK:900};
    b.Font = g;
  }, {"./encoding":4, "./glyphset":7, "./path":11, "./substitution":12, "./tables/sfnt":31, "./util":33, fs:void 0}], 6:[function(d, k, b) {
    function g(b, e) {
      var c = e || {commands:[]};
      return {configurable:!0, get:function() {
        return "function" == typeof c && (c = c()), c;
      }, set:function(b) {
        c = b;
      }};
    }
    function f(b) {
      this.bindConstructorValues(b);
    }
    var e = d("./check"), r = d("./draw"), q = d("./path");
    f.prototype.bindConstructorValues = function(b) {
      this.index = b.index || 0;
      this.name = b.name || null;
      this.unicode = b.unicode || void 0;
      this.unicodes = b.unicodes || void 0 !== b.unicode ? [b.unicode] : [];
      b.xMin && (this.xMin = b.xMin);
      b.yMin && (this.yMin = b.yMin);
      b.xMax && (this.xMax = b.xMax);
      b.yMax && (this.yMax = b.yMax);
      b.advanceWidth && (this.advanceWidth = b.advanceWidth);
      Object.defineProperty(this, "path", g(this, b.path));
    };
    f.prototype.addUnicode = function(b) {
      0 === this.unicodes.length && (this.unicode = b);
      this.unicodes.push(b);
    };
    f.prototype.getPath = function(b, e, c, d) {
      b = void 0 !== b ? b : 0;
      e = void 0 !== e ? e : 0;
      d = void 0 !== d ? d : {xScale:1, yScale:1};
      var f = 1 / this.path.unitsPerEm * (void 0 !== c ? c : 72);
      c = d.xScale * f;
      d = d.yScale * f;
      f = new q.Path;
      for (var h = this.path.commands, g = 0; g < h.length; g += 1) {
        var k = h[g];
        "M" === k.type ? f.moveTo(b + k.x * c, e + -k.y * d) : "L" === k.type ? f.lineTo(b + k.x * c, e + -k.y * d) : "Q" === k.type ? f.quadraticCurveTo(b + k.x1 * c, e + -k.y1 * d, b + k.x * c, e + -k.y * d) : "C" === k.type ? f.curveTo(b + k.x1 * c, e + -k.y1 * d, b + k.x2 * c, e + -k.y2 * d, b + k.x * c, e + -k.y * d) : "Z" === k.type && f.closePath();
      }
      return f;
    };
    f.prototype.getContours = function() {
      if (void 0 === this.points) {
        return [];
      }
      for (var b = [], d = [], c = 0; c < this.points.length; c += 1) {
        var f = this.points[c];
        d.push(f);
        f.lastPointOfContour && (b.push(d), d = []);
      }
      return e.argument(0 === d.length, "There are still points left in the current contour."), b;
    };
    f.prototype.getMetrics = function() {
      for (var b = this.path.commands, e = [], c = [], d = 0; d < b.length; d += 1) {
        var f = b[d];
        "Z" !== f.type && (e.push(f.x), c.push(f.y));
        "Q" !== f.type && "C" !== f.type || (e.push(f.x1), c.push(f.y1));
        "C" === f.type && (e.push(f.x2), c.push(f.y2));
      }
      b = {xMin:Math.min.apply(null, e), yMin:Math.min.apply(null, c), xMax:Math.max.apply(null, e), yMax:Math.max.apply(null, c), leftSideBearing:this.leftSideBearing};
      return isFinite(b.xMin) || (b.xMin = 0), isFinite(b.xMax) || (b.xMax = this.advanceWidth), isFinite(b.yMin) || (b.yMin = 0), isFinite(b.yMax) || (b.yMax = 0), b.rightSideBearing = this.advanceWidth - b.leftSideBearing - (b.xMax - b.xMin), b;
    };
    f.prototype.draw = function(b, e, c, d, f) {
      this.getPath(e, c, d, f).draw(b);
    };
    f.prototype.drawPoints = function(b, e, c, d) {
      function f(c, e, d, f) {
        var h = 2 * Math.PI;
        b.beginPath();
        for (var g = 0; g < c.length; g += 1) {
          b.moveTo(e + c[g].x * f, d + c[g].y * f), b.arc(e + c[g].x * f, d + c[g].y * f, 2, 0, h, !1);
        }
        b.closePath();
        b.fill();
      }
      e = void 0 !== e ? e : 0;
      c = void 0 !== c ? c : 0;
      d = 1 / this.path.unitsPerEm * (void 0 !== d ? d : 24);
      for (var h = [], g = [], k = this.path, m = 0; m < k.commands.length; m += 1) {
        var n = k.commands[m];
        void 0 !== n.x && h.push({x:n.x, y:-n.y});
        void 0 !== n.x1 && g.push({x:n.x1, y:-n.y1});
        void 0 !== n.x2 && g.push({x:n.x2, y:-n.y2});
      }
      b.fillStyle = "blue";
      f(h, e, c, d);
      b.fillStyle = "red";
      f(g, e, c, d);
    };
    f.prototype.drawMetrics = function(b, e, c, d) {
      e = void 0 !== e ? e : 0;
      c = void 0 !== c ? c : 0;
      d = 1 / this.path.unitsPerEm * (void 0 !== d ? d : 24);
      b.lineWidth = 1;
      b.strokeStyle = "black";
      r.line(b, e, -1E4, e, 1E4);
      r.line(b, -1E4, c, 1E4, c);
      var f = this.xMin || 0, h = this.yMin || 0, g = this.xMax || 0, k = this.yMax || 0, m = this.advanceWidth || 0;
      b.strokeStyle = "blue";
      r.line(b, e + f * d, -1E4, e + f * d, 1E4);
      r.line(b, e + g * d, -1E4, e + g * d, 1E4);
      r.line(b, -1E4, c + -h * d, 1E4, c + -h * d);
      r.line(b, -1E4, c + -k * d, 1E4, c + -k * d);
      b.strokeStyle = "green";
      r.line(b, e + m * d, -1E4, e + m * d, 1E4);
    };
    b.Glyph = f;
  }, {"./check":2, "./draw":3, "./path":11}], 7:[function(d, k, b) {
    function g(b, e, d) {
      Object.defineProperty(b, e, {get:function() {
        return b.path, b[d];
      }, set:function(e) {
        b[d] = e;
      }, enumerable:!0, configurable:!0});
    }
    function f(b, e) {
      if (this.font = b, this.glyphs = {}, Array.isArray(e)) {
        for (b = 0; b < e.length; b++) {
          this.glyphs[b] = e[b];
        }
      }
      this.length = e && e.length || 0;
    }
    var e = d("./glyph");
    f.prototype.get = function(b) {
      return "function" == typeof this.glyphs[b] && (this.glyphs[b] = this.glyphs[b]()), this.glyphs[b];
    };
    f.prototype.push = function(b, e) {
      this.glyphs[b] = e;
      this.length++;
    };
    b.GlyphSet = f;
    b.glyphLoader = function(b, d) {
      return new e.Glyph({index:d, font:b});
    };
    b.ttfGlyphLoader = function(b, d, f, k, c, h) {
      return function() {
        var m = new e.Glyph({index:d, font:b});
        return m.path = function() {
          f(m, k, c);
          var e = h(b.glyphs, m);
          return e.unitsPerEm = b.unitsPerEm, e;
        }, g(m, "xMin", "_xMin"), g(m, "xMax", "_xMax"), g(m, "yMin", "_yMin"), g(m, "yMax", "_yMax"), m;
      };
    };
    b.cffGlyphLoader = function(b, d, f, g) {
      return function() {
        var c = new e.Glyph({index:d, font:b});
        return c.path = function() {
          var e = f(b, c, g);
          return e.unitsPerEm = b.unitsPerEm, e;
        }, c;
      };
    };
  }, {"./glyph":6}], 8:[function(d, k, b) {
    function g(b, d) {
      for (var e = 0, f = b.length - 1; f >= e;) {
        var g = e + f >>> 1, c = b[g].tag;
        if (c === d) {
          return g;
        }
        d > c ? e = g + 1 : f = g - 1;
      }
      return -e - 1;
    }
    var f = d("./check");
    k.exports = {searchTag:g, binSearch:function(b, d) {
      for (var e = 0, f = b.length - 1; f >= e;) {
        var g = e + f >>> 1, c = b[g];
        if (c === d) {
          return g;
        }
        d > c ? e = g + 1 : f = g - 1;
      }
      return -e - 1;
    }, getScriptNames:function() {
      var b = this.getGsubTable();
      return b ? b.scripts.map(function(b) {
        return b.tag;
      }) : [];
    }, getScriptTable:function(b, d) {
      var e = this.getGsubTable(d);
      if (e) {
        d = e.scripts;
        e = g(e.scripts, b);
        if (0 <= e) {
          return d[e].script;
        }
        b = {tag:b, script:{defaultLangSys:{reserved:0, reqFeatureIndex:65535, featureIndexes:[]}, langSysRecords:[]}};
        return d.splice(-1 - e, 0, b.script), b;
      }
    }, getLangSysTable:function(b, d, f) {
      if (b = this.getScriptTable(b, f)) {
        if ("DFLT" === d) {
          return b.defaultLangSys;
        }
        var e = g(b.langSysRecords, d);
        if (0 <= e) {
          return b.langSysRecords[e].langSys;
        }
        if (f) {
          return d = {tag:d, langSys:{reserved:0, reqFeatureIndex:65535, featureIndexes:[]}}, b.langSysRecords.splice(-1 - e, 0, d), d.langSys;
        }
      }
    }, getFeatureTable:function(b, d, g, k) {
      if (b = this.getLangSysTable(b, d, k)) {
        var e;
        b = b.featureIndexes;
        d = this.font.tables.gsub.features;
        for (var c = 0; c < b.length; c++) {
          if (e = d[b[c]], e.tag === g) {
            return e.feature;
          }
        }
        if (k) {
          return k = d.length, f.assert(0 === k || g >= d[k - 1].tag, "Features must be added in alphabetical order."), e = {tag:g, feature:{params:0, lookupListIndexes:[]}}, d.push(e), b.push(k), e.feature;
        }
      }
    }, getLookupTable:function(b, d, f, g, k) {
      if (b = this.getFeatureTable(b, d, f, k)) {
        var c;
        b = b.lookupListIndexes;
        d = this.font.tables.gsub.lookups;
        for (f = 0; f < b.length; f++) {
          if (c = d[b[f]], c.lookupType === g) {
            return c;
          }
        }
        if (k) {
          return c = {lookupType:g, lookupFlag:0, subtables:[], markFilteringSet:void 0}, g = d.length, d.push(c), b.push(g), c;
        }
      }
    }, expandCoverage:function(b) {
      if (1 === b.format) {
        return b.glyphs;
      }
      var e = [];
      b = b.ranges;
      for (var d = 0; b > d; d++) {
        var f = b[d], g = f.end;
        for (f = f.start; g >= f; f++) {
          e.push(f);
        }
      }
      return e;
    }};
  }, {"./check":2}], 9:[function(d, k, b) {
    function g(b, c) {
      d("fs").readFile(b, function(b, e) {
        return b ? c(b.message) : void c(null, z.nodeBufferToArrayBuffer(e));
      });
    }
    function f(b, c) {
      var e = new XMLHttpRequest;
      e.open("get", b, !0);
      e.responseType = "arraybuffer";
      e.onload = function() {
        return 200 !== e.status ? c("Font could not be loaded: " + e.statusText) : c(null, e.response);
      };
      e.send();
    }
    function e(b, c) {
      for (var e = [], d = 12, f = 0; c > f; f += 1) {
        var g = h.getTag(b, d), k = h.getULong(b, d + 4), m = h.getULong(b, d + 8), n = h.getULong(b, d + 12);
        e.push({tag:g, checksum:k, offset:m, length:n, compression:!1});
        d += 16;
      }
      return e;
    }
    function r(b, c) {
      if ("WOFF" === c.compression) {
        b = new Uint8Array(b.buffer, c.offset + 2, c.compressedLength - 2);
        var e = new Uint8Array(c.originalLength);
        if (m(b, e), e.byteLength !== c.originalLength) {
          throw Error("Decompression error: " + c.tag + " decompressed length doesn't match recorded length");
        }
        return {data:new DataView(e.buffer, 0), offset:0};
      }
      return {data:b, offset:c.offset};
    }
    function q(b) {
      var d = new c.Font({empty:!0});
      b = new DataView(b, 0);
      var f = h.getTag(b, 0);
      if (f === String.fromCharCode(0, 1, 0, 0)) {
        d.outlinesFormat = "truetype";
        f = h.getUShort(b, 4);
        var g = e(b, f);
      } else {
        if ("OTTO" === f) {
          d.outlinesFormat = "cff", f = h.getUShort(b, 4), g = e(b, f);
        } else {
          if ("wOFF" !== f) {
            throw Error("Unsupported OpenType signature " + f);
          }
          g = h.getTag(b, 4);
          if (g === String.fromCharCode(0, 1, 0, 0)) {
            d.outlinesFormat = "truetype";
          } else {
            if ("OTTO" !== g) {
              throw Error("Unsupported OpenType flavor " + f);
            }
            d.outlinesFormat = "cff";
          }
          g = f = h.getUShort(b, 12);
          for (var k = [], m = 44, q = 0; g > q; q += 1) {
            var t = h.getTag(b, m), z = h.getULong(b, m + 4), M = h.getULong(b, m + 8), ea = h.getULong(b, m + 12);
            k.push({tag:t, offset:z, compression:ea > M ? "WOFF" : !1, compressedLength:M, originalLength:ea});
            m += 20;
          }
          g = k;
        }
      }
      for (k = 0; f > k; k += 1) {
        switch(m = g[k], m.tag) {
          case "cmap":
            m = r(b, m);
            d.tables.cmap = y.parse(m.data, m.offset);
            d.encoding = new n.CmapEncoding(d.tables.cmap);
            break;
          case "fvar":
            var ha = m;
            break;
          case "head":
            m = r(b, m);
            d.tables.head = A.parse(m.data, m.offset);
            d.unitsPerEm = d.tables.head.unitsPerEm;
            var W = d.tables.head.indexToLocFormat;
            break;
          case "hhea":
            m = r(b, m);
            d.tables.hhea = D.parse(m.data, m.offset);
            d.ascender = d.tables.hhea.ascender;
            d.descender = d.tables.hhea.descender;
            d.numberOfHMetrics = d.tables.hhea.numberOfHMetrics;
            break;
          case "hmtx":
            var la = m;
            break;
          case "ltag":
            m = r(b, m);
            var X = E.parse(m.data, m.offset);
            break;
          case "maxp":
            m = r(b, m);
            d.tables.maxp = K.parse(m.data, m.offset);
            d.numGlyphs = d.tables.maxp.numGlyphs;
            break;
          case "name":
            var ka = m;
            break;
          case "OS/2":
            m = r(b, m);
            d.tables.os2 = R.parse(m.data, m.offset);
            break;
          case "post":
            m = r(b, m);
            d.tables.post = L.parse(m.data, m.offset);
            d.glyphNames = new n.GlyphNames(d.tables.post);
            break;
          case "glyf":
            var T = m;
            break;
          case "loca":
            var ia = m;
            break;
          case "CFF ":
            var sa = m;
            break;
          case "kern":
            var va = m;
            break;
          case "GPOS":
            var Ja = m;
            break;
          case "GSUB":
            var Ga = m;
            break;
          case "meta":
            var ta = m;
        }
      }
      ka = r(b, ka);
      if (d.tables.name = J.parse(ka.data, ka.offset, X), d.names = d.tables.name, T && ia) {
        W = 0 === W, ia = r(b, ia), ia = I.parse(ia.data, ia.offset, d.numGlyphs, W), T = r(b, T), d.glyphs = v.parse(T.data, T.offset, ia, d);
      } else {
        if (!sa) {
          throw Error("Font doesn't contain TrueType or CFF outlines.");
        }
        T = r(b, sa);
        x.parse(T.data, T.offset, d);
      }
      la = r(b, la);
      (F.parse(la.data, la.offset, d.numberOfHMetrics, d.numGlyphs, d.glyphs), n.addGlyphNames(d), va) ? (va = r(b, va), d.kerningPairs = B.parse(va.data, va.offset)) : d.kerningPairs = {};
      Ja && (Ja = r(b, Ja), w.parse(Ja.data, Ja.offset, d));
      Ga && (Ga = r(b, Ga), d.tables.gsub = C.parse(Ga.data, Ga.offset));
      ha && (ha = r(b, ha), d.tables.fvar = p.parse(ha.data, ha.offset, d.names));
      ta && (ta = r(b, ta), d.tables.meta = H.parse(ta.data, ta.offset), d.metas = d.tables.meta);
      return d;
    }
    var m = d("tiny-inflate"), n = d("./encoding"), c = d("./font");
    k = d("./glyph");
    var h = d("./parse"), t = d("./path"), z = d("./util"), y = d("./tables/cmap"), x = d("./tables/cff"), p = d("./tables/fvar"), v = d("./tables/glyf"), w = d("./tables/gpos"), C = d("./tables/gsub"), A = d("./tables/head"), D = d("./tables/hhea"), F = d("./tables/hmtx"), B = d("./tables/kern"), E = d("./tables/ltag"), I = d("./tables/loca"), K = d("./tables/maxp"), J = d("./tables/name"), R = d("./tables/os2"), L = d("./tables/post"), H = d("./tables/meta");
    b._parse = h;
    b.Font = c.Font;
    b.Glyph = k.Glyph;
    b.Path = t.Path;
    b.parse = q;
    b.load = function(b, c) {
      ("undefined" == typeof window ? g : f)(b, function(b, d) {
        if (b) {
          return c(b);
        }
        try {
          var e = q(d);
        } catch (U) {
          return c(U, null);
        }
        return c(null, e);
      });
    };
    b.loadSync = function(b) {
      b = d("fs").readFileSync(b);
      return q(z.nodeBufferToArrayBuffer(b));
    };
  }, {"./encoding":4, "./font":5, "./glyph":6, "./parse":10, "./path":11, "./tables/cff":14, "./tables/cmap":15, "./tables/fvar":16, "./tables/glyf":17, "./tables/gpos":18, "./tables/gsub":19, "./tables/head":20, "./tables/hhea":21, "./tables/hmtx":22, "./tables/kern":23, "./tables/loca":24, "./tables/ltag":25, "./tables/maxp":26, "./tables/meta":27, "./tables/name":28, "./tables/os2":29, "./tables/post":30, "./util":33, fs:void 0, "tiny-inflate":1}], 10:[function(d, k, b) {
    function g(b, d) {
      return b.getUint16(d, !1);
    }
    function f(b, d) {
      this.data = b;
      this.offset = d;
      this.relativeOffset = 0;
    }
    var e = d("./check");
    b.getByte = function(b, d) {
      return b.getUint8(d);
    };
    b.getCard8 = b.getByte;
    b.getUShort = b.getCard16 = g;
    b.getShort = function(b, d) {
      return b.getInt16(d, !1);
    };
    b.getULong = function(b, d) {
      return b.getUint32(d, !1);
    };
    b.getFixed = function(b, d) {
      var c = b.getInt16(d, !1);
      b = b.getUint16(d + 2, !1);
      return c + b / 65535;
    };
    b.getTag = function(b, d) {
      for (var c = "", e = d; d + 4 > e; e += 1) {
        c += String.fromCharCode(b.getInt8(e));
      }
      return c;
    };
    b.getOffset = function(b, d, c) {
      for (var e = 0, f = 0; c > f; f += 1) {
        e <<= 8, e += b.getUint8(d + f);
      }
      return e;
    };
    b.getBytes = function(b, d, c) {
      for (var e = []; c > d; d += 1) {
        e.push(b.getUint8(d));
      }
      return e;
    };
    b.bytesToString = function(b) {
      for (var d = "", c = 0; c < b.length; c += 1) {
        d += String.fromCharCode(b[c]);
      }
      return d;
    };
    var r = {"byte":1, uShort:2, "short":2, uLong:4, fixed:4, longDateTime:8, tag:4};
    f.prototype.parseByte = function() {
      var b = this.data.getUint8(this.offset + this.relativeOffset);
      return this.relativeOffset += 1, b;
    };
    f.prototype.parseChar = function() {
      var b = this.data.getInt8(this.offset + this.relativeOffset);
      return this.relativeOffset += 1, b;
    };
    f.prototype.parseCard8 = f.prototype.parseByte;
    f.prototype.parseUShort = function() {
      var b = this.data.getUint16(this.offset + this.relativeOffset);
      return this.relativeOffset += 2, b;
    };
    f.prototype.parseCard16 = f.prototype.parseUShort;
    f.prototype.parseSID = f.prototype.parseUShort;
    f.prototype.parseOffset16 = f.prototype.parseUShort;
    f.prototype.parseShort = function() {
      var b = this.data.getInt16(this.offset + this.relativeOffset);
      return this.relativeOffset += 2, b;
    };
    f.prototype.parseF2Dot14 = function() {
      var b = this.data.getInt16(this.offset + this.relativeOffset) / 16384;
      return this.relativeOffset += 2, b;
    };
    f.prototype.parseULong = function() {
      var d = b.getULong(this.data, this.offset + this.relativeOffset);
      return this.relativeOffset += 4, d;
    };
    f.prototype.parseFixed = function() {
      var d = b.getFixed(this.data, this.offset + this.relativeOffset);
      return this.relativeOffset += 4, d;
    };
    f.prototype.parseString = function(b) {
      var d = this.data, c = this.offset + this.relativeOffset, e = "";
      this.relativeOffset += b;
      for (var f = 0; b > f; f++) {
        e += String.fromCharCode(d.getUint8(c + f));
      }
      return e;
    };
    f.prototype.parseTag = function() {
      return this.parseString(4);
    };
    f.prototype.parseLongDateTime = function() {
      var d = b.getULong(this.data, this.offset + this.relativeOffset + 4);
      return d -= 2082844800, this.relativeOffset += 8, d;
    };
    f.prototype.parseVersion = function() {
      var b = g(this.data, this.offset + this.relativeOffset), d = g(this.data, this.offset + this.relativeOffset + 2);
      return this.relativeOffset += 4, b + d / 4096 / 10;
    };
    f.prototype.skip = function(b, d) {
      void 0 === d && (d = 1);
      this.relativeOffset += r[b] * d;
    };
    f.prototype.parseOffset16List = f.prototype.parseUShortList = function(b) {
      void 0 === b && (b = this.parseUShort());
      for (var d = Array(b), c = this.data, e = this.offset + this.relativeOffset, f = 0; b > f; f++) {
        d[f] = c.getUint16(e), e += 2;
      }
      return this.relativeOffset += 2 * b, d;
    };
    f.prototype.parseList = function(b, d) {
      d || (d = b, b = this.parseUShort());
      for (var c = Array(b), e = 0; b > e; e++) {
        c[e] = d.call(this);
      }
      return c;
    };
    f.prototype.parseRecordList = function(b, d) {
      d || (d = b, b = this.parseUShort());
      for (var c = Array(b), e = Object.keys(d), f = 0; b > f; f++) {
        for (var g = {}, k = 0; k < e.length; k++) {
          var m = e[k];
          g[m] = d[m].call(this);
        }
        c[f] = g;
      }
      return c;
    };
    f.prototype.parseStruct = function(b) {
      if ("function" == typeof b) {
        return b.call(this);
      }
      for (var d = Object.keys(b), c = {}, e = 0; e < d.length; e++) {
        var f = d[e];
        c[f] = b[f].call(this);
      }
      return c;
    };
    f.prototype.parsePointer = function(b) {
      var d = this.parseOffset16();
      return 0 < d ? (new f(this.data, this.offset + d)).parseStruct(b) : void 0;
    };
    f.prototype.parseListOfLists = function(b) {
      for (var d = this.parseOffset16List(), c = d.length, e = this.relativeOffset, f = Array(c), g = 0; c > g; g++) {
        var k = d[g];
        if (0 !== k) {
          if (this.relativeOffset = k, b) {
            for (var m = this.parseOffset16List(), p = Array(m.length), q = 0; q < m.length; q++) {
              this.relativeOffset = k + m[q], p[q] = b.call(this);
            }
            f[g] = p;
          } else {
            f[g] = this.parseUShortList();
          }
        } else {
          f[g] = void 0;
        }
      }
      return this.relativeOffset = e, f;
    };
    f.prototype.parseCoverage = function() {
      var b = this.offset + this.relativeOffset, d = this.parseUShort(), c = this.parseUShort();
      if (1 === d) {
        return {format:1, glyphs:this.parseUShortList(c)};
      }
      if (2 === d) {
        b = Array(c);
        for (d = 0; c > d; d++) {
          b[d] = {start:this.parseUShort(), end:this.parseUShort(), index:this.parseUShort()};
        }
        return {format:2, ranges:b};
      }
      e.assert(!1, "0x" + b.toString(16) + ": Coverage format must be 1 or 2.");
    };
    f.prototype.parseClassDef = function() {
      var b = this.offset + this.relativeOffset, d = this.parseUShort();
      return 1 === d ? {format:1, startGlyph:this.parseUShort(), classes:this.parseUShortList()} : 2 === d ? {format:2, ranges:this.parseRecordList({start:f.uShort, end:f.uShort, classId:f.uShort})} : void e.assert(!1, "0x" + b.toString(16) + ": ClassDef format must be 1 or 2.");
    };
    f.list = function(b, d) {
      return function() {
        return this.parseList(b, d);
      };
    };
    f.recordList = function(b, d) {
      return function() {
        return this.parseRecordList(b, d);
      };
    };
    f.pointer = function(b) {
      return function() {
        return this.parsePointer(b);
      };
    };
    f.tag = f.prototype.parseTag;
    f.byte = f.prototype.parseByte;
    f.uShort = f.offset16 = f.prototype.parseUShort;
    f.uShortList = f.prototype.parseUShortList;
    f.struct = f.prototype.parseStruct;
    f.coverage = f.prototype.parseCoverage;
    f.classDef = f.prototype.parseClassDef;
    var q = {reserved:f.uShort, reqFeatureIndex:f.uShort, featureIndexes:f.uShortList};
    f.prototype.parseScriptList = function() {
      return this.parsePointer(f.recordList({tag:f.tag, script:f.pointer({defaultLangSys:f.pointer(q), langSysRecords:f.recordList({tag:f.tag, langSys:f.pointer(q)})})}));
    };
    f.prototype.parseFeatureList = function() {
      return this.parsePointer(f.recordList({tag:f.tag, feature:f.pointer({featureParams:f.offset16, lookupListIndexes:f.uShortList})}));
    };
    f.prototype.parseLookupList = function(b) {
      return this.parsePointer(f.list(f.pointer(function() {
        var d = this.parseUShort();
        e.argument(1 <= d && 8 >= d, "GSUB lookup type " + d + " unknown.");
        var c = this.parseUShort(), h = 16 & c;
        return {lookupType:d, lookupFlag:c, subtables:this.parseList(f.pointer(b[d])), markFilteringSet:h ? this.parseUShort() : void 0};
      })));
    };
    b.Parser = f;
  }, {"./check":2}], 11:[function(d, k, b) {
    function g() {
      this.commands = [];
      this.fill = "black";
      this.stroke = null;
      this.strokeWidth = 1;
    }
    g.prototype.moveTo = function(b, d) {
      this.commands.push({type:"M", x:b, y:d});
    };
    g.prototype.lineTo = function(b, d) {
      this.commands.push({type:"L", x:b, y:d});
    };
    g.prototype.curveTo = g.prototype.bezierCurveTo = function(b, d, g, k, m, n) {
      this.commands.push({type:"C", x1:b, y1:d, x2:g, y2:k, x:m, y:n});
    };
    g.prototype.quadTo = g.prototype.quadraticCurveTo = function(b, d, g, k) {
      this.commands.push({type:"Q", x1:b, y1:d, x:g, y:k});
    };
    g.prototype.close = g.prototype.closePath = function() {
      this.commands.push({type:"Z"});
    };
    g.prototype.extend = function(b) {
      b.commands && (b = b.commands);
      Array.prototype.push.apply(this.commands, b);
    };
    g.prototype.draw = function(b) {
      b.beginPath();
      for (var d = 0; d < this.commands.length; d += 1) {
        var f = this.commands[d];
        "M" === f.type ? b.moveTo(f.x, f.y) : "L" === f.type ? b.lineTo(f.x, f.y) : "C" === f.type ? b.bezierCurveTo(f.x1, f.y1, f.x2, f.y2, f.x, f.y) : "Q" === f.type ? b.quadraticCurveTo(f.x1, f.y1, f.x, f.y) : "Z" === f.type && b.closePath();
      }
      this.fill && (b.fillStyle = this.fill, b.fill());
      this.stroke && (b.strokeStyle = this.stroke, b.lineWidth = this.strokeWidth, b.stroke());
    };
    g.prototype.toPathData = function(b) {
      function d() {
        for (var d = "", c = 0; c < arguments.length; c += 1) {
          var e = arguments[c];
          0 <= e && 0 < c && (d += " ");
          d += Math.round(e) === e ? "" + Math.round(e) : e.toFixed(b);
        }
        return d;
      }
      b = void 0 !== b ? b : 2;
      for (var f = "", g = 0; g < this.commands.length; g += 1) {
        var k = this.commands[g];
        "M" === k.type ? f += "M" + d(k.x, k.y) : "L" === k.type ? f += "L" + d(k.x, k.y) : "C" === k.type ? f += "C" + d(k.x1, k.y1, k.x2, k.y2, k.x, k.y) : "Q" === k.type ? f += "Q" + d(k.x1, k.y1, k.x, k.y) : "Z" === k.type && (f += "Z");
      }
      return f;
    };
    g.prototype.toSVG = function(b) {
      var d = '<path d="';
      return d += this.toPathData(b), d += '"', this.fill && "black" !== this.fill && (d += null === this.fill ? ' fill="none"' : ' fill="' + this.fill + '"'), this.stroke && (d += ' stroke="' + this.stroke + '" stroke-width="' + this.strokeWidth + '"'), d + "/>";
    };
    b.Path = g;
  }, {}], 12:[function(d, k, b) {
    function g(b, d, f) {
      b = b.subtables;
      for (var e = 0; e < b.length; e++) {
        var g = b[e];
        if (g.substFormat === d) {
          return g;
        }
      }
      return f ? (b.push(f), f) : void 0;
    }
    var f = d("./check");
    d = d("./layout");
    b = function(b) {
      this.font = b;
    };
    b.prototype = d;
    b.prototype.getGsubTable = function(b) {
      var d = this.font.tables.gsub;
      return !d && b && (this.font.tables.gsub = d = {version:1, scripts:[{tag:"DFLT", script:{defaultLangSys:{reserved:0, reqFeatureIndex:65535, featureIndexes:[]}, langSysRecords:[]}}], features:[], lookups:[]}), d;
    };
    b.prototype.getSingle = function(b, d, f) {
      var e = [];
      b = this.getLookupTable(d, f, b, 1);
      if (!b) {
        return e;
      }
      b = b.subtables;
      for (d = 0; d < b.length; d++) {
        var g = b[d];
        f = this.expandCoverage(g.coverage);
        if (1 === g.substFormat) {
          var c = g.deltaGlyphId;
          for (g = 0; g < f.length; g++) {
            var h = f[g];
            e.push({sub:h, by:h + c});
          }
        } else {
          for (c = g.substitute, g = 0; g < f.length; g++) {
            e.push({sub:f[g], by:c[g]});
          }
        }
      }
      return e;
    };
    b.prototype.getAlternates = function(b, d, f) {
      var e = [];
      b = this.getLookupTable(d, f, b, 3);
      if (!b) {
        return e;
      }
      b = b.subtables;
      for (d = 0; d < b.length; d++) {
        var g = b[d];
        f = this.expandCoverage(g.coverage);
        g = g.alternateSets;
        for (var c = 0; c < f.length; c++) {
          e.push({sub:f[c], by:g[c]});
        }
      }
      return e;
    };
    b.prototype.getLigatures = function(b, d, f) {
      var e = [];
      b = this.getLookupTable(d, f, b, 4);
      if (!b) {
        return [];
      }
      b = b.subtables;
      for (d = 0; d < b.length; d++) {
        var g = b[d];
        f = this.expandCoverage(g.coverage);
        g = g.ligatureSets;
        for (var c = 0; c < f.length; c++) {
          for (var h = f[c], k = g[c], q = 0; q < k.length; q++) {
            var r = k[q];
            e.push({sub:[h].concat(r.components), by:r.ligGlyph});
          }
        }
      }
      return e;
    };
    b.prototype.addSingle = function(b, d, k, m) {
      b = this.getLookupTable(k, m, b, 1, !0);
      b = g(b, 2, {substFormat:2, coverage:{format:1, glyphs:[]}, substitute:[]});
      f.assert(1 === b.coverage.format, "Ligature: unable to modify coverage table format " + b.coverage.format);
      k = d.sub;
      m = this.binSearch(b.coverage.glyphs, k);
      0 > m && (m = -1 - m, b.coverage.glyphs.splice(m, 0, k), b.substitute.splice(m, 0, 0));
      b.substitute[m] = d.by;
    };
    b.prototype.addAlternate = function(b, d, k, m) {
      b = this.getLookupTable(k, m, b, 3, !0);
      b = g(b, 1, {substFormat:1, coverage:{format:1, glyphs:[]}, alternateSets:[]});
      f.assert(1 === b.coverage.format, "Ligature: unable to modify coverage table format " + b.coverage.format);
      k = d.sub;
      m = this.binSearch(b.coverage.glyphs, k);
      0 > m && (m = -1 - m, b.coverage.glyphs.splice(m, 0, k), b.alternateSets.splice(m, 0, 0));
      b.alternateSets[m] = d.by;
    };
    b.prototype.addLigature = function(b, d, g, k) {
      b = this.getLookupTable(g || "DFLT", k || "DFLT", b, 4, !0);
      (g = b.subtables[0]) || (g = {substFormat:1, coverage:{format:1, glyphs:[]}, ligatureSets:[]}, b.subtables[0] = g);
      f.assert(1 === g.coverage.format, "Ligature: unable to modify coverage table format " + g.coverage.format);
      k = d.sub[0];
      b = d.sub.slice(1);
      d = {ligGlyph:d.by, components:b};
      var e = this.binSearch(g.coverage.glyphs, k);
      if (0 <= e) {
        g = g.ligatureSets[e];
        for (k = 0; k < g.length; k++) {
          a: {
            e = g[k].components;
            var c = e.length;
            if (c !== b.length) {
              e = !1;
            } else {
              for (var h = 0; c > h; h++) {
                if (e[h] !== b[h]) {
                  e = !1;
                  break a;
                }
              }
              e = !0;
            }
          }
          if (e) {
            return;
          }
        }
        g.push(d);
      } else {
        e = -1 - e, g.coverage.glyphs.splice(e, 0, k), g.ligatureSets.splice(e, 0, [d]);
      }
    };
    b.prototype.getFeature = function(b, d, f) {
      if (d = d || "DFLT", f = f || "DFLT", /ss\d\d/.test(b)) {
        return this.getSingle(b, d, f);
      }
      switch(b) {
        case "aalt":
        case "salt":
          return this.getSingle(b, d, f).concat(this.getAlternates(b, d, f));
        case "dlig":
        case "liga":
        case "rlig":
          return this.getLigatures(b, d, f);
      }
    };
    b.prototype.add = function(b, d, f, g) {
      if (f = f || "DFLT", g = g || "DFLT", /ss\d\d/.test(b)) {
        return this.addSingle(b, d, f, g);
      }
      switch(b) {
        case "aalt":
        case "salt":
          return "number" == typeof d.by ? this.addSingle(b, d, f, g) : this.addAlternate(b, d, f, g);
        case "dlig":
        case "liga":
        case "rlig":
          return this.addLigature(b, d, f, g);
      }
    };
    k.exports = b;
  }, {"./check":2, "./layout":8}], 13:[function(d, k, b) {
    function g(b, c, d) {
      var e;
      for (e = 0; e < c.length; e += 1) {
        var f = c[e];
        this[f.name] = f.value;
      }
      if (this.tableName = b, this.fields = c, d) {
        for (b = Object.keys(d), e = 0; e < b.length; e += 1) {
          c = b[e], f = d[c], void 0 !== this[c] && (this[c] = f);
        }
      }
    }
    function f(b, c, d) {
      void 0 === d && (d = c.length);
      var e = Array(c.length + 1);
      e[0] = {name:b + "Count", type:"USHORT", value:d};
      for (d = 0; d < c.length; d++) {
        e[d + 1] = {name:b + d, type:"USHORT", value:c[d]};
      }
      return e;
    }
    function e(b, c, d) {
      var e = c.length, f = Array(e + 1);
      f[0] = {name:b + "Count", type:"USHORT", value:e};
      for (var h = 0; e > h; h++) {
        f[h + 1] = {name:b + h, type:"TABLE", value:d(c[h], h)};
      }
      return f;
    }
    function r(b, c, d) {
      var e = c.length, f = [];
      f[0] = {name:b + "Count", type:"USHORT", value:e};
      for (b = 0; e > b; b++) {
        f = f.concat(d(c[b], b));
      }
      return f;
    }
    function q(b) {
      1 === b.format ? g.call(this, "coverageTable", [{name:"coverageFormat", type:"USHORT", value:1}].concat(f("glyph", b.glyphs))) : h.assert(!1, "Can't create coverage table format 2 yet.");
    }
    function m(b) {
      g.call(this, "scriptListTable", r("scriptRecord", b, function(b, c) {
        var d = b.script, e = d.defaultLangSys;
        return h.assert(!!e, "Unable to write GSUB: script " + b.tag + " has no default language system."), [{name:"scriptTag" + c, type:"TAG", value:b.tag}, {name:"script" + c, type:"TABLE", value:new g("scriptTable", [{name:"defaultLangSys", type:"TABLE", value:new g("defaultLangSys", [{name:"lookupOrder", type:"USHORT", value:0}, {name:"reqFeatureIndex", type:"USHORT", value:e.reqFeatureIndex}].concat(f("featureIndex", e.featureIndexes)))}].concat(r("langSys", d.langSysRecords, function(b, c) {
          var d = b.langSys;
          return [{name:"langSysTag" + c, type:"TAG", value:b.tag}, {name:"langSys" + c, type:"TABLE", value:new g("langSys", [{name:"lookupOrder", type:"USHORT", value:0}, {name:"reqFeatureIndex", type:"USHORT", value:d.reqFeatureIndex}].concat(f("featureIndex", d.featureIndexes)))}];
        })))}];
      }));
    }
    function n(b) {
      g.call(this, "featureListTable", r("featureRecord", b, function(b, c) {
        var d = b.feature;
        return [{name:"featureTag" + c, type:"TAG", value:b.tag}, {name:"feature" + c, type:"TABLE", value:new g("featureTable", [{name:"featureParams", type:"USHORT", value:d.featureParams}].concat(f("lookupListIndex", d.lookupListIndexes)))}];
      }));
    }
    function c(b, c) {
      g.call(this, "lookupListTable", e("lookup", b, function(b) {
        var d = c[b.lookupType];
        return h.assert(!!d, "Unable to write GSUB lookup type " + b.lookupType + " tables."), new g("lookupTable", [{name:"lookupType", type:"USHORT", value:b.lookupType}, {name:"lookupFlag", type:"USHORT", value:b.lookupFlag}].concat(e("subtable", b.subtables, d)));
      }));
    }
    var h = d("./check"), t = d("./types").encode, z = d("./types").sizeOf;
    g.prototype.encode = function() {
      return t.TABLE(this);
    };
    g.prototype.sizeOf = function() {
      return z.TABLE(this);
    };
    q.prototype = Object.create(g.prototype);
    q.prototype.constructor = q;
    m.prototype = Object.create(g.prototype);
    m.prototype.constructor = m;
    n.prototype = Object.create(g.prototype);
    n.prototype.constructor = n;
    c.prototype = Object.create(g.prototype);
    c.prototype.constructor = c;
    b.Record = b.Table = g;
    b.Coverage = q;
    b.ScriptList = m;
    b.FeatureList = n;
    b.LookupList = c;
    b.ushortList = f;
    b.tableList = e;
    b.recordList = r;
  }, {"./check":2, "./types":32}], 14:[function(d, k, b) {
    function g(b, c) {
      if (b === c) {
        return !0;
      }
      if (Array.isArray(b) && Array.isArray(c)) {
        if (b.length !== c.length) {
          return !1;
        }
        for (var d = 0; d < b.length; d += 1) {
          if (!g(b[d], c[d])) {
            return !1;
          }
        }
        return !0;
      }
      return !1;
    }
    function f(b, c, d) {
      var e, f = [], h = [];
      var g = v.getCard16(b, c);
      if (0 !== g) {
        var k = v.getByte(b, c + 2);
        var m = c + (g + 1) * k + 2;
        var n = c + 3;
        for (e = 0; g + 1 > e; e += 1) {
          f.push(v.getOffset(b, n, k)), n += k;
        }
        g = m + f[g];
      } else {
        g = c + 2;
      }
      for (e = 0; e < f.length - 1; e += 1) {
        k = v.getBytes(b, m + f[e], m + f[e + 1]), d && (k = d(k)), h.push(k);
      }
      return {objects:h, startOffset:c, endOffset:g};
    }
    function e(b, c) {
      var d, e, f, h;
      if (28 === c) {
        return d = b.parseByte(), e = b.parseByte(), d << 8 | e;
      }
      if (29 === c) {
        return d = b.parseByte(), e = b.parseByte(), f = b.parseByte(), h = b.parseByte(), d << 24 | e << 16 | f << 8 | h;
      }
      if (30 === c) {
        c = "";
        for (d = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", ".", "E", "E-", null, "-"];;) {
          f = b.parseByte();
          e = f >> 4;
          f &= 15;
          if (15 === e) {
            break;
          }
          if (c += d[e], 15 === f) {
            break;
          }
          c += d[f];
        }
        return parseFloat(c);
      }
      if (32 <= c && 246 >= c) {
        return c - 139;
      }
      if (247 <= c && 250 >= c) {
        return d = b.parseByte(), 256 * (c - 247) + d + 108;
      }
      if (251 <= c && 254 >= c) {
        return d = b.parseByte(), 256 * -(c - 251) - d - 108;
      }
      throw Error("Invalid b0 " + c);
    }
    function r(b, c, d) {
      var f = new v.Parser(b, void 0 !== c ? c : 0);
      c = [];
      var h = [];
      for (d = void 0 !== d ? d : b.length; f.relativeOffset < d;) {
        b = f.parseByte(), 21 >= b ? (12 === b && (b = 1200 + f.parseByte()), c.push([b, h]), h = []) : h.push(e(f, b));
      }
      d = {};
      for (b = 0; b < c.length; b += 1) {
        f = c[b][0];
        h = c[b][1];
        if (h = 1 === h.length ? h[0] : h, d.hasOwnProperty(f)) {
          throw Error("Object " + d + " already has key " + f);
        }
        d[f] = h;
      }
      return d;
    }
    function q(b, c) {
      return 390 >= c ? x.cffStandardStrings[c] : b[c - 391];
    }
    function m(b, c, d) {
      for (var e = {}, f = 0; f < c.length; f += 1) {
        var h = c[f], g = b[h.op];
        void 0 === g && (g = void 0 !== h.value ? h.value : null);
        "SID" === h.type && (g = q(d, g));
        e[h.name] = g;
      }
      return e;
    }
    function n(b, c, d) {
      function e(b, c) {
        z && p.closePath();
        p.moveTo(b, c);
        z = !0;
      }
      function f() {
        0 !== q.length % 2 && !t && (v = q.shift() + b.nominalWidthX);
        r += q.length >> 1;
        q.length = 0;
        t = !0;
      }
      function h(d) {
        for (var w, A, C, B, D, F, E, H, L, M, I = 0; I < d.length;) {
          switch(D = d[I], I += 1, D) {
            case 1:
              f();
              break;
            case 3:
              f();
              break;
            case 4:
              1 < q.length && !t && (v = q.shift() + b.nominalWidthX, t = !0);
              x += q.pop();
              e(y, x);
              break;
            case 5:
              for (; 0 < q.length;) {
                y += q.shift(), x += q.shift(), p.lineTo(y, x);
              }
              break;
            case 6:
              for (; 0 < q.length && (y += q.shift(), p.lineTo(y, x), 0 !== q.length);) {
                x += q.shift(), p.lineTo(y, x);
              }
              break;
            case 7:
              for (; 0 < q.length && (x += q.shift(), p.lineTo(y, x), 0 !== q.length);) {
                y += q.shift(), p.lineTo(y, x);
              }
              break;
            case 8:
              for (; 0 < q.length;) {
                g = y + q.shift(), k = x + q.shift(), m = g + q.shift(), n = k + q.shift(), y = m + q.shift(), x = n + q.shift(), p.curveTo(g, k, m, n, y, x);
              }
              break;
            case 10:
              D = q.pop() + b.subrsBias;
              (D = b.subrs[D]) && h(D);
              break;
            case 11:
              return;
            case 12:
              switch(D = d[I], I += 1, D) {
                case 35:
                  g = y + q.shift();
                  k = x + q.shift();
                  m = g + q.shift();
                  n = k + q.shift();
                  D = m + q.shift();
                  F = n + q.shift();
                  E = D + q.shift();
                  H = F + q.shift();
                  L = E + q.shift();
                  M = H + q.shift();
                  y = L + q.shift();
                  x = M + q.shift();
                  q.shift();
                  p.curveTo(g, k, m, n, D, F);
                  p.curveTo(E, H, L, M, y, x);
                  break;
                case 34:
                  g = y + q.shift();
                  k = x;
                  m = g + q.shift();
                  n = k + q.shift();
                  D = m + q.shift();
                  F = n;
                  E = D + q.shift();
                  H = n;
                  L = E + q.shift();
                  M = x;
                  y = L + q.shift();
                  p.curveTo(g, k, m, n, D, F);
                  p.curveTo(E, H, L, M, y, x);
                  break;
                case 36:
                  g = y + q.shift();
                  k = x + q.shift();
                  m = g + q.shift();
                  n = k + q.shift();
                  D = m + q.shift();
                  F = n;
                  E = D + q.shift();
                  H = n;
                  L = E + q.shift();
                  M = H + q.shift();
                  y = L + q.shift();
                  p.curveTo(g, k, m, n, D, F);
                  p.curveTo(E, H, L, M, y, x);
                  break;
                case 37:
                  g = y + q.shift();
                  k = x + q.shift();
                  m = g + q.shift();
                  n = k + q.shift();
                  D = m + q.shift();
                  F = n + q.shift();
                  E = D + q.shift();
                  H = F + q.shift();
                  L = E + q.shift();
                  M = H + q.shift();
                  Math.abs(L - y) > Math.abs(M - x) ? y = L + q.shift() : x = M + q.shift();
                  p.curveTo(g, k, m, n, D, F);
                  p.curveTo(E, H, L, M, y, x);
                  break;
                default:
                  console.log("Glyph " + c.index + ": unknown operator 1200" + D), q.length = 0;
              }break;
            case 14:
              0 < q.length && !t && (v = q.shift() + b.nominalWidthX, t = !0);
              z && (p.closePath(), z = !1);
              break;
            case 18:
              f();
              break;
            case 19:
            case 20:
              f();
              I += r + 7 >> 3;
              break;
            case 21:
              2 < q.length && !t && (v = q.shift() + b.nominalWidthX, t = !0);
              x += q.pop();
              y += q.pop();
              e(y, x);
              break;
            case 22:
              1 < q.length && !t && (v = q.shift() + b.nominalWidthX, t = !0);
              y += q.pop();
              e(y, x);
              break;
            case 23:
              f();
              break;
            case 24:
              for (; 2 < q.length;) {
                g = y + q.shift(), k = x + q.shift(), m = g + q.shift(), n = k + q.shift(), y = m + q.shift(), x = n + q.shift(), p.curveTo(g, k, m, n, y, x);
              }
              y += q.shift();
              x += q.shift();
              p.lineTo(y, x);
              break;
            case 25:
              for (; 6 < q.length;) {
                y += q.shift(), x += q.shift(), p.lineTo(y, x);
              }
              g = y + q.shift();
              k = x + q.shift();
              m = g + q.shift();
              n = k + q.shift();
              y = m + q.shift();
              x = n + q.shift();
              p.curveTo(g, k, m, n, y, x);
              break;
            case 26:
              for (q.length % 2 && (y += q.shift()); 0 < q.length;) {
                g = y, k = x + q.shift(), m = g + q.shift(), n = k + q.shift(), y = m, x = n + q.shift(), p.curveTo(g, k, m, n, y, x);
              }
              break;
            case 27:
              for (q.length % 2 && (x += q.shift()); 0 < q.length;) {
                g = y + q.shift(), k = x, m = g + q.shift(), n = k + q.shift(), y = m + q.shift(), x = n, p.curveTo(g, k, m, n, y, x);
              }
              break;
            case 28:
              w = d[I];
              A = d[I + 1];
              q.push((w << 24 | A << 16) >> 16);
              I += 2;
              break;
            case 29:
              D = q.pop() + b.gsubrsBias;
              (D = b.gsubrs[D]) && h(D);
              break;
            case 30:
              for (; 0 < q.length && (g = y, k = x + q.shift(), m = g + q.shift(), n = k + q.shift(), y = m + q.shift(), x = n + (1 === q.length ? q.shift() : 0), p.curveTo(g, k, m, n, y, x), 0 !== q.length);) {
                g = y + q.shift(), k = x, m = g + q.shift(), n = k + q.shift(), x = n + q.shift(), y = m + (1 === q.length ? q.shift() : 0), p.curveTo(g, k, m, n, y, x);
              }
              break;
            case 31:
              for (; 0 < q.length && (g = y + q.shift(), k = x, m = g + q.shift(), n = k + q.shift(), x = n + q.shift(), y = m + (1 === q.length ? q.shift() : 0), p.curveTo(g, k, m, n, y, x), 0 !== q.length);) {
                g = y, k = x + q.shift(), m = g + q.shift(), n = k + q.shift(), y = m + q.shift(), x = n + (1 === q.length ? q.shift() : 0), p.curveTo(g, k, m, n, y, x);
              }
              break;
            default:
              32 > D ? console.log("Glyph " + c.index + ": unknown operator " + D) : 247 > D ? q.push(D - 139) : 251 > D ? (w = d[I], I += 1, q.push(256 * (D - 247) + w + 108)) : 255 > D ? (w = d[I], I += 1, q.push(256 * -(D - 251) - w - 108)) : (w = d[I], A = d[I + 1], C = d[I + 2], B = d[I + 3], I += 4, q.push((w << 24 | A << 16 | C << 8 | B) / 65536));
          }
        }
      }
      var g, k, m, n, p = new w.Path, q = [], r = 0, t = !1, v = b.defaultWidthX, z = !1, y = 0, x = 0;
      return h(d), c.advanceWidth = v, p;
    }
    function c(b) {
      return 1240 > b.length ? 107 : 33900 > b.length ? 1131 : 32768;
    }
    function h(b, c) {
      var d, e = x.cffStandardStrings.indexOf(b);
      return e = c.indexOf(b), 0 <= e ? d = e + x.cffStandardStrings.length : (d = x.cffStandardStrings.length + c.length, c.push(b)), d;
    }
    function t(b, c, d) {
      for (var e = {}, f = 0; f < b.length; f += 1) {
        var k = b[f], m = c[k.name];
        void 0 === m || g(m, k.value) || ("SID" === k.type && (m = h(m, d)), e[k.op] = {name:k.name, type:k.type, value:m});
      }
      return e;
    }
    function z(b, c) {
      var d = new C.Record("Top DICT", [{name:"dict", type:"DICT", value:{}}]);
      return d.dict = t(A, b, c), d;
    }
    function y(b) {
      var c = new C.Record("Top DICT INDEX", [{name:"topDicts", type:"INDEX", value:[]}]);
      return c.topDicts = [{name:"topDict_0", type:"TABLE", value:b}], c;
    }
    var x = d("../encoding"), p = d("../glyphset"), v = d("../parse"), w = d("../path"), C = d("../table"), A = [{name:"version", op:0, type:"SID"}, {name:"notice", op:1, type:"SID"}, {name:"copyright", op:1200, type:"SID"}, {name:"fullName", op:2, type:"SID"}, {name:"familyName", op:3, type:"SID"}, {name:"weight", op:4, type:"SID"}, {name:"isFixedPitch", op:1201, type:"number", value:0}, {name:"italicAngle", op:1202, type:"number", value:0}, {name:"underlinePosition", op:1203, type:"number", value:-100}, 
    {name:"underlineThickness", op:1204, type:"number", value:50}, {name:"paintType", op:1205, type:"number", value:0}, {name:"charstringType", op:1206, type:"number", value:2}, {name:"fontMatrix", op:1207, type:"real real real real real real".split(" "), value:[.001, 0, 0, .001, 0, 0]}, {name:"uniqueId", op:13, type:"number"}, {name:"fontBBox", op:5, type:["number", "number", "number", "number"], value:[0, 0, 0, 0]}, {name:"strokeWidth", op:1208, type:"number", value:0}, {name:"xuid", op:14, type:[], 
    value:null}, {name:"charset", op:15, type:"offset", value:0}, {name:"encoding", op:16, type:"offset", value:0}, {name:"charStrings", op:17, type:"offset", value:0}, {name:"private", op:18, type:["number", "offset"], value:[0, 0]}], D = [{name:"subrs", op:19, type:"offset", value:0}, {name:"defaultWidthX", op:20, type:"number", value:0}, {name:"nominalWidthX", op:21, type:"number", value:0}];
    b.parse = function(b, d, e) {
      e.tables.cff = {};
      var h = {};
      h = (h.formatMajor = v.getCard8(b, d), h.formatMinor = v.getCard8(b, d + 1), h.size = v.getCard8(b, d + 2), h.offsetSize = v.getCard8(b, d + 3), h.startOffset = d, h.endOffset = d + 4, h);
      h = f(b, h.endOffset, v.bytesToString);
      h = f(b, h.endOffset);
      var g = f(b, h.endOffset, v.bytesToString), k = f(b, g.endOffset);
      e.gsubrs = k.objects;
      e.gsubrsBias = c(e.gsubrs);
      k = new DataView((new Uint8Array(h.objects[0])).buffer);
      h = g.objects;
      k = r(k, 0, k.byteLength);
      k = m(k, A, h);
      e.tables.cff.topDict = k;
      h = d + k["private"][1];
      var t = g.objects;
      var w = r(b, h, k["private"][0]);
      t = m(w, D, t);
      (e.defaultWidthX = t.defaultWidthX, e.nominalWidthX = t.nominalWidthX, 0 !== t.subrs) ? (h = f(b, h + t.subrs), e.subrs = h.objects, e.subrsBias = c(e.subrs)) : (e.subrs = [], e.subrsBias = 0);
      h = f(b, d + k.charStrings);
      e.nGlyphs = h.objects.length;
      t = e.nGlyphs;
      w = g.objects;
      var y = new v.Parser(b, d + k.charset);
      --t;
      g = [".notdef"];
      var z = y.parseCard8();
      if (0 === z) {
        for (z = 0; t > z; z += 1) {
          var C = y.parseSID();
          g.push(q(w, C));
        }
      } else {
        if (1 === z) {
          for (; g.length <= t;) {
            C = y.parseSID();
            var B = y.parseCard8();
            for (z = 0; B >= z; z += 1) {
              g.push(q(w, C)), C += 1;
            }
          }
        } else {
          if (2 !== z) {
            throw Error("Unknown charset format " + z);
          }
          for (; g.length <= t;) {
            for (C = y.parseSID(), B = y.parseCard16(), z = 0; B >= z; z += 1) {
              g.push(q(w, C)), C += 1;
            }
          }
        }
      }
      if (0 === k.encoding) {
        b = new x.CffEncoding(x.cffStandardEncoding, g);
      } else {
        if (1 === k.encoding) {
          b = new x.CffEncoding(x.cffExpertEncoding, g);
        } else {
          t = {};
          b = new v.Parser(b, d + k.encoding);
          d = b.parseCard8();
          if (0 === d) {
            for (w = b.parseCard8(), d = 0; w > d; d += 1) {
              k = b.parseCard8(), t[k] = d;
            }
          } else {
            if (1 !== d) {
              throw Error("Unknown encoding format " + d);
            }
            w = b.parseCard8();
            k = 1;
            for (d = 0; w > d; d += 1) {
              for (y = b.parseCard8(), z = b.parseCard8(), C = y; y + z >= C; C += 1) {
                t[C] = k, k += 1;
              }
            }
          }
          b = new x.CffEncoding(t, g);
        }
      }
      e.cffEncoding = b;
      e.encoding = e.encoding || e.cffEncoding;
      e.glyphs = new p.GlyphSet(e);
      for (b = 0; b < e.nGlyphs; b += 1) {
        e.glyphs.push(b, p.cffGlyphLoader(e, b, n, h.objects[b]));
      }
    };
    b.make = function(b, c) {
      var d = new C.Table("CFF ", [{name:"header", type:"RECORD"}, {name:"nameIndex", type:"RECORD"}, {name:"topDictIndex", type:"RECORD"}, {name:"stringIndex", type:"RECORD"}, {name:"globalSubrIndex", type:"RECORD"}, {name:"charsets", type:"RECORD"}, {name:"charStringsIndex", type:"RECORD"}, {name:"privateDict", type:"RECORD"}]), e = 1 / c.unitsPerEm;
      e = {version:c.version, fullName:c.fullName, familyName:c.familyName, weight:c.weightName, fontBBox:c.fontBBox || [0, 0, 0, 0], fontMatrix:[e, 0, 0, e, 0, 0], charset:999, encoding:0, charStrings:999, "private":[0, 999]};
      for (var f = [], g = 1; g < b.length; g += 1) {
        var k = b.get(g);
        f.push(k.name);
      }
      k = [];
      d.header = new C.Record("Header", [{name:"major", type:"Card8", value:1}, {name:"minor", type:"Card8", value:0}, {name:"hdrSize", type:"Card8", value:4}, {name:"major", type:"Card8", value:1}]);
      c = [c.postScriptName];
      g = new C.Record("Name INDEX", [{name:"names", type:"INDEX", value:[]}]);
      g.names = [];
      for (var m = 0; m < c.length; m += 1) {
        g.names.push({name:"name_" + m, type:"NAME", value:c[m]});
      }
      d.nameIndex = g;
      c = z(e, k);
      d.topDictIndex = y(c);
      d.globalSubrIndex = new C.Record("Global Subr INDEX", [{name:"subrs", type:"INDEX", value:[]}]);
      g = new C.Record("Charsets", [{name:"format", type:"Card8", value:0}]);
      for (m = 0; m < f.length; m += 1) {
        var n = h(f[m], k);
        g.fields.push({name:"glyph_" + m, type:"SID", value:n});
      }
      d.charsets = g;
      f = new C.Record("CharStrings INDEX", [{name:"charStrings", type:"INDEX", value:[]}]);
      for (g = 0; g < b.length; g += 1) {
        m = b.get(g);
        n = [];
        var q = m.path;
        n.push({name:"width", type:"NUMBER", value:m.advanceWidth});
        for (var p = 0, r = 0, w = 0; w < q.commands.length; w += 1) {
          var v = q.commands[w];
          if ("Q" === v.type) {
            var x = 1 / 3, A = 2 / 3;
            v = {type:"C", x:v.x, y:v.y, x1:x * p + A * v.x1, y1:x * r + A * v.y1, x2:x * v.x + A * v.x1, y2:x * v.y + A * v.y1};
          }
          if ("M" === v.type) {
            p = Math.round(v.x - p), r = Math.round(v.y - r), n.push({name:"dx", type:"NUMBER", value:p}), n.push({name:"dy", type:"NUMBER", value:r}), n.push({name:"rmoveto", type:"OP", value:21}), p = Math.round(v.x), r = Math.round(v.y);
          } else {
            if ("L" === v.type) {
              p = Math.round(v.x - p), r = Math.round(v.y - r), n.push({name:"dx", type:"NUMBER", value:p}), n.push({name:"dy", type:"NUMBER", value:r}), n.push({name:"rlineto", type:"OP", value:5}), p = Math.round(v.x), r = Math.round(v.y);
            } else {
              if ("C" === v.type) {
                x = Math.round(v.x1 - p);
                A = Math.round(v.y1 - r);
                var B = Math.round(v.x2 - v.x1), F = Math.round(v.y2 - v.y1);
                p = Math.round(v.x - v.x2);
                r = Math.round(v.y - v.y2);
                n.push({name:"dx1", type:"NUMBER", value:x});
                n.push({name:"dy1", type:"NUMBER", value:A});
                n.push({name:"dx2", type:"NUMBER", value:B});
                n.push({name:"dy2", type:"NUMBER", value:F});
                n.push({name:"dx", type:"NUMBER", value:p});
                n.push({name:"dy", type:"NUMBER", value:r});
                n.push({name:"rrcurveto", type:"OP", value:8});
                p = Math.round(v.x);
                r = Math.round(v.y);
              }
            }
          }
        }
        n = (n.push({name:"endchar", type:"OP", value:14}), n);
        f.charStrings.push({name:m.name, type:"CHARSTRING", value:n});
      }
      d.charStringsIndex = f;
      b = new C.Record("Private DICT", [{name:"dict", type:"DICT", value:{}}]);
      b = (b.dict = t(D, {}, k), b);
      d.privateDict = b;
      b = new C.Record("String INDEX", [{name:"strings", type:"INDEX", value:[]}]);
      b.strings = [];
      for (f = 0; f < k.length; f += 1) {
        b.strings.push({name:"string_" + f, type:"STRING", value:k[f]});
      }
      d.stringIndex = b;
      b = d.header.sizeOf() + d.nameIndex.sizeOf() + d.topDictIndex.sizeOf() + d.stringIndex.sizeOf() + d.globalSubrIndex.sizeOf();
      return e.charset = b, e.encoding = 0, e.charStrings = e.charset + d.charsets.sizeOf(), e.private[1] = e.charStrings + d.charStringsIndex.sizeOf(), c = z(e, k), d.topDictIndex = y(c), d;
    };
  }, {"../encoding":4, "../glyphset":7, "../parse":10, "../path":11, "../table":13}], 15:[function(d, k, b) {
    function g(b, d, e) {
      b.segments.push({end:d, start:d, delta:-(d - e), offset:0});
    }
    var f = d("../check"), e = d("../parse"), r = d("../table");
    b.parse = function(b, d) {
      var g, c = {};
      c.version = e.getUShort(b, d);
      f.argument(0 === c.version, "cmap table version should be 0.");
      c.numTables = e.getUShort(b, d + 2);
      var h = -1;
      for (g = c.numTables - 1; 0 <= g; --g) {
        var k = e.getUShort(b, d + 4 + 8 * g), m = e.getUShort(b, d + 4 + 8 * g + 2);
        if (3 === k && (0 === m || 1 === m || 10 === m)) {
          h = e.getULong(b, d + 4 + 8 * g + 4);
          break;
        }
      }
      if (-1 === h) {
        return null;
      }
      g = new e.Parser(b, d + h);
      if (c.format = g.parseUShort(), 12 === c.format) {
        g.parseUShort();
        c.length = g.parseULong();
        c.language = g.parseULong();
        var q;
        c.groupCount = q = g.parseULong();
        c.glyphIndexMap = {};
        for (b = 0; q > b; b += 1) {
          for (m = g.parseULong(), h = g.parseULong(), k = g.parseULong(); h >= m; m += 1) {
            c.glyphIndexMap[m] = k, k++;
          }
        }
      } else {
        if (4 !== c.format) {
          throw Error("Only format 4 and 12 cmap tables are supported.");
        }
        var r = h;
        c.length = g.parseUShort();
        c.language = g.parseUShort();
        c.segCount = h = g.parseUShort() >> 1;
        g.skip("uShort", 3);
        c.glyphIndexMap = {};
        g = new e.Parser(b, d + r + 14);
        k = new e.Parser(b, d + r + 16 + 2 * h);
        m = new e.Parser(b, d + r + 16 + 4 * h);
        var p = new e.Parser(b, d + r + 16 + 6 * h);
        r = d + r + 16 + 8 * h;
        for (d = 0; h - 1 > d; d += 1) {
          for (var v = g.parseUShort(), w = k.parseUShort(), C = m.parseShort(), A = p.parseUShort(), D = w; v >= D; D += 1) {
            0 !== A ? (r = p.offset + p.relativeOffset - 2, r += A, r += 2 * (D - w), q = e.getUShort(b, r), 0 !== q && (q = q + C & 65535)) : q = D + C & 65535, c.glyphIndexMap[D] = q;
          }
        }
      }
      return c;
    };
    b.make = function(b) {
      var d, e = new r.Table("cmap", [{name:"version", type:"USHORT", value:0}, {name:"numTables", type:"USHORT", value:1}, {name:"platformID", type:"USHORT", value:3}, {name:"encodingID", type:"USHORT", value:1}, {name:"offset", type:"ULONG", value:12}, {name:"format", type:"USHORT", value:4}, {name:"length", type:"USHORT", value:0}, {name:"language", type:"USHORT", value:0}, {name:"segCountX2", type:"USHORT", value:0}, {name:"searchRange", type:"USHORT", value:0}, {name:"entrySelector", type:"USHORT", 
      value:0}, {name:"rangeShift", type:"USHORT", value:0}]);
      e.segments = [];
      for (d = 0; d < b.length; d += 1) {
        for (var c = b.get(d), f = 0; f < c.unicodes.length; f += 1) {
          g(e, c.unicodes[f], d);
        }
        e.segments = e.segments.sort(function(b, c) {
          return b.start - c.start;
        });
      }
      e.segments.push({end:65535, start:65535, delta:1, offset:0});
      b = e.segments.length;
      e.segCountX2 = 2 * b;
      e.searchRange = 2 * Math.pow(2, Math.floor(Math.log(b) / Math.log(2)));
      e.entrySelector = Math.log(e.searchRange / 2) / Math.log(2);
      e.rangeShift = e.segCountX2 - e.searchRange;
      c = [];
      f = [];
      var k = [], q = [], y = [];
      for (d = 0; b > d; d += 1) {
        var x = e.segments[d];
        c = c.concat({name:"end_" + d, type:"USHORT", value:x.end});
        f = f.concat({name:"start_" + d, type:"USHORT", value:x.start});
        k = k.concat({name:"idDelta_" + d, type:"SHORT", value:x.delta});
        q = q.concat({name:"idRangeOffset_" + d, type:"USHORT", value:x.offset});
        void 0 !== x.glyphId && (y = y.concat({name:"glyph_" + d, type:"USHORT", value:x.glyphId}));
      }
      return e.fields = e.fields.concat(c), e.fields.push({name:"reservedPad", type:"USHORT", value:0}), e.fields = e.fields.concat(f), e.fields = e.fields.concat(k), e.fields = e.fields.concat(q), e.fields = e.fields.concat(y), e.length = 2 * c.length + 16 + 2 * f.length + 2 * k.length + 2 * q.length + 2 * y.length, e;
    };
  }, {"../check":2, "../parse":10, "../table":13}], 16:[function(d, k, b) {
    function g(b, c) {
      var d = JSON.stringify(b), e = 256, f;
      for (f in c) {
        var h = parseInt(f);
        if (h && !(256 > h)) {
          if (JSON.stringify(c[f]) === d) {
            return h;
          }
          h >= e && (e = h + 1);
        }
      }
      return c[e] = b, e;
    }
    function f(b, c, d) {
      d = g(c.name, d);
      return [{name:"tag_" + b, type:"TAG", value:c.tag}, {name:"minValue_" + b, type:"FIXED", value:c.minValue << 16}, {name:"defaultValue_" + b, type:"FIXED", value:c.defaultValue << 16}, {name:"maxValue_" + b, type:"FIXED", value:c.maxValue << 16}, {name:"flags_" + b, type:"USHORT", value:0}, {name:"nameID_" + b, type:"USHORT", value:d}];
    }
    function e(b, c, d) {
      var e = {};
      b = new n.Parser(b, c);
      return e.tag = b.parseTag(), e.minValue = b.parseFixed(), e.defaultValue = b.parseFixed(), e.maxValue = b.parseFixed(), b.skip("uShort", 1), e.name = d[b.parseUShort()] || {}, e;
    }
    function r(b, c, d, e) {
      e = g(c.name, e);
      e = [{name:"nameID_" + b, type:"USHORT", value:e}, {name:"flags_" + b, type:"USHORT", value:0}];
      for (var f = 0; f < d.length; ++f) {
        var h = d[f].tag;
        e.push({name:"axis_" + b + " " + h, type:"FIXED", value:c.coordinates[h] << 16});
      }
      return e;
    }
    function q(b, c, d, e) {
      var f = {};
      b = new n.Parser(b, c);
      f.name = e[b.parseUShort()] || {};
      b.skip("uShort", 1);
      f.coordinates = {};
      for (e = 0; e < d.length; ++e) {
        f.coordinates[d[e].tag] = b.parseFixed();
      }
      return f;
    }
    var m = d("../check"), n = d("../parse"), c = d("../table");
    b.make = function(b, d) {
      var e = new c.Table("fvar", [{name:"version", type:"ULONG", value:65536}, {name:"offsetToData", type:"USHORT", value:0}, {name:"countSizePairs", type:"USHORT", value:2}, {name:"axisCount", type:"USHORT", value:b.axes.length}, {name:"axisSize", type:"USHORT", value:20}, {name:"instanceCount", type:"USHORT", value:b.instances.length}, {name:"instanceSize", type:"USHORT", value:4 + 4 * b.axes.length}]);
      e.offsetToData = e.sizeOf();
      for (var h = 0; h < b.axes.length; h++) {
        e.fields = e.fields.concat(f(h, b.axes[h], d));
      }
      for (h = 0; h < b.instances.length; h++) {
        e.fields = e.fields.concat(r(h, b.instances[h], b.axes, d));
      }
      return e;
    };
    b.parse = function(b, c, d) {
      var f = new n.Parser(b, c), h = f.parseULong();
      m.argument(65536 === h, "Unsupported fvar table version.");
      var g = f.parseOffset16();
      f.skip("uShort", 1);
      var k = f.parseUShort(), r = f.parseUShort();
      h = f.parseUShort();
      f = f.parseUShort();
      for (var t = [], z = 0; k > z; z++) {
        t.push(e(b, c + g + z * r, d));
      }
      z = [];
      c = c + g + k * r;
      for (g = 0; h > g; g++) {
        z.push(q(b, c + g * f, t, d));
      }
      return {axes:t, instances:z};
    };
  }, {"../check":2, "../parse":10, "../table":13}], 17:[function(d, k, b) {
    function g(b, c, d, e, f) {
      var h;
      return 0 < (c & e) ? (h = b.parseByte(), 0 === (c & f) && (h = -h), h = d + h) : h = 0 < (c & f) ? d : d + b.parseShort(), h;
    }
    function f(b, c, d) {
      c = new n.Parser(c, d);
      b.numberOfContours = c.parseShort();
      b._xMin = c.parseShort();
      b._yMin = c.parseShort();
      b._xMax = c.parseShort();
      b._yMax = c.parseShort();
      var e;
      if (0 < b.numberOfContours) {
        var f, h = b.endPointIndices = [];
        for (f = 0; f < b.numberOfContours; f += 1) {
          h.push(c.parseUShort());
        }
        b.instructionLength = c.parseUShort();
        b.instructions = [];
        for (f = 0; f < b.instructionLength; f += 1) {
          b.instructions.push(c.parseByte());
        }
        var k = h[h.length - 1] + 1;
        d = [];
        for (f = 0; k > f; f += 1) {
          if (e = c.parseByte(), d.push(e), 0 < (8 & e)) {
            for (var m = c.parseByte(), r = 0; m > r; r += 1) {
              d.push(e), f += 1;
            }
          }
        }
        if (q.argument(d.length === k, "Bad flags."), 0 < h.length) {
          r = [];
          if (0 < k) {
            for (f = 0; k > f; f += 1) {
              e = d[f], m = {}, m.onCurve = !!(1 & e), m.lastPointOfContour = 0 <= h.indexOf(f), r.push(m);
            }
            for (f = h = 0; k > f; f += 1) {
              e = d[f], m = r[f], m.x = g(c, e, h, 2, 16), h = m.x;
            }
            for (f = h = 0; k > f; f += 1) {
              e = d[f], m = r[f], m.y = g(c, e, h, 4, 32), h = m.y;
            }
          }
          b.points = r;
        } else {
          b.points = [];
        }
      } else {
        if (0 === b.numberOfContours) {
          b.points = [];
        } else {
          for (b.isComposite = !0, b.points = [], b.components = [], e = !0; e;) {
            d = c.parseUShort(), e = {glyphIndex:c.parseUShort(), xScale:1, scale01:0, scale10:0, yScale:1, dx:0, dy:0}, 0 < (1 & d) ? 0 < (2 & d) ? (e.dx = c.parseShort(), e.dy = c.parseShort()) : e.matchedPoints = [c.parseUShort(), c.parseUShort()] : 0 < (2 & d) ? (e.dx = c.parseChar(), e.dy = c.parseChar()) : e.matchedPoints = [c.parseByte(), c.parseByte()], 0 < (8 & d) ? e.xScale = e.yScale = c.parseF2Dot14() : 0 < (64 & d) ? (e.xScale = c.parseF2Dot14(), e.yScale = c.parseF2Dot14()) : 0 < (128 & 
            d) && (e.xScale = c.parseF2Dot14(), e.scale01 = c.parseF2Dot14(), e.scale10 = c.parseF2Dot14(), e.yScale = c.parseF2Dot14()), b.components.push(e), e = !!(32 & d);
          }
        }
      }
    }
    function e(b, c) {
      for (var d = [], e = 0; e < b.length; e += 1) {
        var f = b[e];
        d.push({x:c.xScale * f.x + c.scale01 * f.y + c.dx, y:c.scale10 * f.x + c.yScale * f.y + c.dy, onCurve:f.onCurve, lastPointOfContour:f.lastPointOfContour});
      }
      return d;
    }
    function r(b, d) {
      if (d.isComposite) {
        for (var f = 0; f < d.components.length; f += 1) {
          var h = d.components[f], g = b.get(h.glyphIndex);
          if (g.getPath(), g.points) {
            if (void 0 === h.matchedPoints) {
              g = e(g.points, h);
            } else {
              if (h.matchedPoints[0] > d.points.length - 1 || h.matchedPoints[1] > g.points.length - 1) {
                throw Error("Matched points out of range in " + d.name);
              }
              var k = d.points[h.matchedPoints[0]], m = g.points[h.matchedPoints[1]];
              h = {xScale:h.xScale, scale01:h.scale01, scale10:h.scale10, yScale:h.yScale, dx:0, dy:0};
              m = e([m], h)[0];
              h.dx = k.x - m.x;
              h.dy = k.y - m.y;
              g = e(g.points, h);
            }
            d.points = d.points.concat(g);
          }
        }
      }
      var n;
      d = d.points;
      b = new c.Path;
      if (d) {
        f = [];
        g = [];
        for (k = 0; k < d.length; k += 1) {
          m = d[k], g.push(m), m.lastPointOfContour && (f.push(g), g = []);
        }
        d = (q.argument(0 === g.length, "There are still points left in the current contour."), f);
        for (f = 0; f < d.length; f += 1) {
          var r;
          g = d[f];
          k = g[0];
          m = g[g.length - 1];
          k.onCurve ? (n = null, r = !0) : (k = m.onCurve ? m : {x:(k.x + m.x) / 2, y:(k.y + m.y) / 2}, n = k, r = !1);
          b.moveTo(k.x, k.y);
          for (h = r ? 1 : 0; h < g.length; h += 1) {
            var t = g[h], D = 0 === h ? k : g[h - 1];
            if (D.onCurve && t.onCurve) {
              b.lineTo(t.x, t.y);
            } else {
              if (D.onCurve && !t.onCurve) {
                n = t;
              } else {
                if (D.onCurve || t.onCurve) {
                  if (D.onCurve || !t.onCurve) {
                    throw Error("Invalid state.");
                  }
                  b.quadraticCurveTo(n.x, n.y, t.x, t.y);
                  n = null;
                } else {
                  b.quadraticCurveTo(D.x, D.y, (D.x + t.x) / 2, (D.y + t.y) / 2), n = t;
                }
              }
            }
          }
          k !== m && (n ? b.quadraticCurveTo(n.x, n.y, k.x, k.y) : b.lineTo(k.x, k.y));
        }
        n = (b.closePath(), b);
      } else {
        n = b;
      }
      return n;
    }
    var q = d("../check"), m = d("../glyphset"), n = d("../parse"), c = d("../path");
    b.parse = function(b, c, d, e) {
      var h, g = new m.GlyphSet(e);
      for (h = 0; h < d.length - 1; h += 1) {
        var k = d[h];
        k !== d[h + 1] ? g.push(h, m.ttfGlyphLoader(e, h, f, b, c + k, r)) : g.push(h, m.glyphLoader(e, h));
      }
      return g;
    };
  }, {"../check":2, "../glyphset":7, "../parse":10, "../path":11}], 18:[function(d, k, b) {
    function g(b, d) {
      b = new n.Parser(b, d);
      d = b.parseUShort();
      for (var c = [], e = 0; d > e; e++) {
        c[b.parseTag()] = {offset:b.parseUShort()};
      }
      return c;
    }
    function f(b, d) {
      b = new n.Parser(b, d);
      var c = b.parseUShort();
      d = b.parseUShort();
      if (1 === c) {
        return b.parseUShortList(d);
      }
      if (2 === c) {
        for (c = []; d--;) {
          for (var e = b.parseUShort(), f = b.parseUShort(), h = b.parseUShort(); f >= e; e++) {
            c[h++] = e;
          }
        }
        return c;
      }
    }
    function e(b, d) {
      b = new n.Parser(b, d);
      d = b.parseUShort();
      if (1 === d) {
        var c = b.parseUShort();
        d = b.parseUShort();
        var e = b.parseUShortList(d);
        return function(b) {
          return e[b - c] || 0;
        };
      }
      if (2 === d) {
        d = b.parseUShort();
        for (var f = [], h = [], g = [], k = 0; d > k; k++) {
          f[k] = b.parseUShort(), h[k] = b.parseUShort(), g[k] = b.parseUShort();
        }
        return function(b) {
          for (var c = 0, d = f.length - 1; d > c;) {
            var e = c + d + 1 >> 1;
            b < f[e] ? d = e - 1 : c = e;
          }
          return f[c] <= b && b <= h[c] ? g[c] || 0 : 0;
        };
      }
    }
    function r(b, d) {
      var c, h = new n.Parser(b, d), g = h.parseUShort(), k = h.parseUShort();
      k = f(b, d + k);
      var m = h.parseUShort(), q = h.parseUShort();
      if (4 === m && 0 === q) {
        var r = {};
        if (1 === g) {
          b = h.parseUShort();
          var C = [];
          d = h.parseOffset16List(b);
          for (g = 0; b > g; g++) {
            var A = d[g], D = r[A];
            if (!D) {
              for (D = {}, h.relativeOffset = A, A = h.parseUShort(); A--;) {
                var F = h.parseUShort();
                m && (c = h.parseShort());
                q && h.parseShort();
                D[F] = c;
              }
            }
            C[k[g]] = D;
          }
          return function(b, c) {
            return (b = C[b]) ? b[c] : void 0;
          };
        }
        if (2 === g) {
          D = h.parseUShort();
          A = h.parseUShort();
          r = h.parseUShort();
          g = h.parseUShort();
          var B = e(b, d + D), E = e(b, d + A), I = [];
          for (b = 0; r > b; b++) {
            for (d = I[b] = [], D = 0; g > D; D++) {
              m && (c = h.parseShort()), q && h.parseShort(), d[D] = c;
            }
          }
          var K = {};
          for (b = 0; b < k.length; b++) {
            K[k[b]] = 1;
          }
          return function(b, c) {
            if (K[b]) {
              return b = B(b), c = E(c), (b = I[b]) ? b[c] : void 0;
            }
          };
        }
      }
    }
    function q(b, d) {
      var c = new n.Parser(b, d), e = c.parseUShort(), f = c.parseUShort(), h = 16 & f, g = c.parseUShort(), k = c.parseOffset16List(g);
      c = {lookupType:e, lookupFlag:f, markFilteringSet:h ? c.parseUShort() : -1};
      if (2 === e) {
        var m = [];
        for (e = 0; g > e; e++) {
          m.push(r(b, d + k[e]));
        }
        c.getKerningValue = function(b, c) {
          for (var d = m.length; d--;) {
            var e = m[d](b, c);
            if (void 0 !== e) {
              return e;
            }
          }
          return 0;
        };
      }
      return c;
    }
    var m = d("../check"), n = d("../parse");
    b.parse = function(b, d, e) {
      var c = new n.Parser(b, d), f = c.parseFixed();
      m.argument(1 === f, "Unsupported GPOS table version.");
      g(b, d + c.parseUShort());
      g(b, d + c.parseUShort());
      var h = c.parseUShort();
      c.relativeOffset = h;
      f = c.parseUShort();
      c = c.parseOffset16List(f);
      d += h;
      for (h = 0; f > h; h++) {
        var k = q(b, d + c[h]);
        2 !== k.lookupType || e.getGposKerningValue || (e.getGposKerningValue = k.getKerningValue);
      }
    };
  }, {"../check":2, "../parse":10}], 19:[function(d, k, b) {
    var g = d("../check"), f = d("../parse").Parser, e = Array(9), r = d("../table");
    e[1] = function() {
      var b = this.offset + this.relativeOffset, c = this.parseUShort();
      return 1 === c ? {substFormat:1, coverage:this.parsePointer(f.coverage), deltaGlyphId:this.parseUShort()} : 2 === c ? {substFormat:2, coverage:this.parsePointer(f.coverage), substitute:this.parseOffset16List()} : void g.assert(!1, "0x" + b.toString(16) + ": lookup type 1 format must be 1 or 2.");
    };
    e[2] = function() {
      var b = this.parseUShort();
      return g.argument(1 === b, "GSUB Multiple Substitution Subtable identifier-format must be 1"), {substFormat:b, coverage:this.parsePointer(f.coverage), sequences:this.parseListOfLists()};
    };
    e[3] = function() {
      var b = this.parseUShort();
      return g.argument(1 === b, "GSUB Alternate Substitution Subtable identifier-format must be 1"), {substFormat:b, coverage:this.parsePointer(f.coverage), alternateSets:this.parseListOfLists()};
    };
    e[4] = function() {
      var b = this.parseUShort();
      return g.argument(1 === b, "GSUB ligature table identifier-format must be 1"), {substFormat:b, coverage:this.parsePointer(f.coverage), ligatureSets:this.parseListOfLists(function() {
        return {ligGlyph:this.parseUShort(), components:this.parseUShortList(this.parseUShort() - 1)};
      })};
    };
    var q = {sequenceIndex:f.uShort, lookupListIndex:f.uShort};
    e[5] = function() {
      var b = this.offset + this.relativeOffset, c = this.parseUShort();
      if (1 === c) {
        return {substFormat:c, coverage:this.parsePointer(f.coverage), ruleSets:this.parseListOfLists(function() {
          var b = this.parseUShort(), c = this.parseUShort();
          return {input:this.parseUShortList(b - 1), lookupRecords:this.parseRecordList(c, q)};
        })};
      }
      if (2 === c) {
        return {substFormat:c, coverage:this.parsePointer(f.coverage), classDef:this.parsePointer(f.classDef), classSets:this.parseListOfLists(function() {
          var b = this.parseUShort(), c = this.parseUShort();
          return {classes:this.parseUShortList(b - 1), lookupRecords:this.parseRecordList(c, q)};
        })};
      }
      if (3 === c) {
        b = this.parseUShort();
        var d = this.parseUShort();
        return {substFormat:c, coverages:this.parseList(b, f.pointer(f.coverage)), lookupRecords:this.parseRecordList(d, q)};
      }
      g.assert(!1, "0x" + b.toString(16) + ": lookup type 5 format must be 1, 2 or 3.");
    };
    e[6] = function() {
      var b = this.offset + this.relativeOffset, c = this.parseUShort();
      return 1 === c ? {substFormat:1, coverage:this.parsePointer(f.coverage), chainRuleSets:this.parseListOfLists(function() {
        return {backtrack:this.parseUShortList(), input:this.parseUShortList(this.parseShort() - 1), lookahead:this.parseUShortList(), lookupRecords:this.parseRecordList(q)};
      })} : 2 === c ? {substFormat:2, coverage:this.parsePointer(f.coverage), backtrackClassDef:this.parsePointer(f.classDef), inputClassDef:this.parsePointer(f.classDef), lookaheadClassDef:this.parsePointer(f.classDef), chainClassSet:this.parseListOfLists(function() {
        return {backtrack:this.parseUShortList(), input:this.parseUShortList(this.parseShort() - 1), lookahead:this.parseUShortList(), lookupRecords:this.parseRecordList(q)};
      })} : 3 === c ? {substFormat:3, backtrackCoverage:this.parseList(f.pointer(f.coverage)), inputCoverage:this.parseList(f.pointer(f.coverage)), lookaheadCoverage:this.parseList(f.pointer(f.coverage)), lookupRecords:this.parseRecordList(q)} : void g.assert(!1, "0x" + b.toString(16) + ": lookup type 6 format must be 1, 2 or 3.");
    };
    e[7] = function() {
      var b = this.parseUShort();
      g.argument(1 === b, "GSUB Extension Substitution subtable identifier-format must be 1");
      b = this.parseUShort();
      var c = new f(this.data, this.offset + this.parseULong());
      return {substFormat:1, lookupType:b, extension:e[b].call(c)};
    };
    e[8] = function() {
      var b = this.parseUShort();
      return g.argument(1 === b, "GSUB Reverse Chaining Contextual Single Substitution Subtable identifier-format must be 1"), {substFormat:b, coverage:this.parsePointer(f.coverage), backtrackCoverage:this.parseList(f.pointer(f.coverage)), lookaheadCoverage:this.parseList(f.pointer(f.coverage)), substitutes:this.parseUShortList()};
    };
    var m = Array(9);
    m[1] = function(b) {
      return 1 === b.substFormat ? new r.Table("substitutionTable", [{name:"substFormat", type:"USHORT", value:1}, {name:"coverage", type:"TABLE", value:new r.Coverage(b.coverage)}, {name:"deltaGlyphID", type:"USHORT", value:b.deltaGlyphId}]) : new r.Table("substitutionTable", [{name:"substFormat", type:"USHORT", value:2}, {name:"coverage", type:"TABLE", value:new r.Coverage(b.coverage)}].concat(r.ushortList("substitute", b.substitute)));
    };
    m[3] = function(b) {
      return g.assert(1 === b.substFormat, "Lookup type 3 substFormat must be 1."), new r.Table("substitutionTable", [{name:"substFormat", type:"USHORT", value:1}, {name:"coverage", type:"TABLE", value:new r.Coverage(b.coverage)}].concat(r.tableList("altSet", b.alternateSets, function(b) {
        return new r.Table("alternateSetTable", r.ushortList("alternate", b));
      })));
    };
    m[4] = function(b) {
      return g.assert(1 === b.substFormat, "Lookup type 4 substFormat must be 1."), new r.Table("substitutionTable", [{name:"substFormat", type:"USHORT", value:1}, {name:"coverage", type:"TABLE", value:new r.Coverage(b.coverage)}].concat(r.tableList("ligSet", b.ligatureSets, function(b) {
        return new r.Table("ligatureSetTable", r.tableList("ligature", b, function(b) {
          return new r.Table("ligatureTable", [{name:"ligGlyph", type:"USHORT", value:b.ligGlyph}].concat(r.ushortList("component", b.components, b.components.length + 1)));
        }));
      })));
    };
    b.parse = function(b, c) {
      b = new f(b, c || 0);
      c = b.parseVersion();
      return g.argument(1 === c, "Unsupported GSUB table version."), {version:c, scripts:b.parseScriptList(), features:b.parseFeatureList(), lookups:b.parseLookupList(e)};
    };
    b.make = function(b) {
      return new r.Table("GSUB", [{name:"version", type:"ULONG", value:65536}, {name:"scripts", type:"TABLE", value:new r.ScriptList(b.scripts)}, {name:"features", type:"TABLE", value:new r.FeatureList(b.features)}, {name:"lookups", type:"TABLE", value:new r.LookupList(b.lookups, m)}]);
    };
  }, {"../check":2, "../parse":10, "../table":13}], 20:[function(d, k, b) {
    var g = d("../check"), f = d("../parse"), e = d("../table");
    b.parse = function(b, d) {
      var e = {};
      b = new f.Parser(b, d);
      return e.version = b.parseVersion(), e.fontRevision = Math.round(1E3 * b.parseFixed()) / 1E3, e.checkSumAdjustment = b.parseULong(), e.magicNumber = b.parseULong(), g.argument(1594834165 === e.magicNumber, "Font header has wrong magic number."), e.flags = b.parseUShort(), e.unitsPerEm = b.parseUShort(), e.created = b.parseLongDateTime(), e.modified = b.parseLongDateTime(), e.xMin = b.parseShort(), e.yMin = b.parseShort(), e.xMax = b.parseShort(), e.yMax = b.parseShort(), e.macStyle = b.parseUShort(), 
      e.lowestRecPPEM = b.parseUShort(), e.fontDirectionHint = b.parseShort(), e.indexToLocFormat = b.parseShort(), e.glyphDataFormat = b.parseShort(), e;
    };
    b.make = function(b) {
      var d = Math.round((new Date).getTime() / 1E3) + 2082844800, f = d;
      return b.createdTimestamp && (f = b.createdTimestamp + 2082844800), new e.Table("head", [{name:"version", type:"FIXED", value:65536}, {name:"fontRevision", type:"FIXED", value:65536}, {name:"checkSumAdjustment", type:"ULONG", value:0}, {name:"magicNumber", type:"ULONG", value:1594834165}, {name:"flags", type:"USHORT", value:0}, {name:"unitsPerEm", type:"USHORT", value:1E3}, {name:"created", type:"LONGDATETIME", value:f}, {name:"modified", type:"LONGDATETIME", value:d}, {name:"xMin", type:"SHORT", 
      value:0}, {name:"yMin", type:"SHORT", value:0}, {name:"xMax", type:"SHORT", value:0}, {name:"yMax", type:"SHORT", value:0}, {name:"macStyle", type:"USHORT", value:0}, {name:"lowestRecPPEM", type:"USHORT", value:0}, {name:"fontDirectionHint", type:"SHORT", value:2}, {name:"indexToLocFormat", type:"SHORT", value:0}, {name:"glyphDataFormat", type:"SHORT", value:0}], b);
    };
  }, {"../check":2, "../parse":10, "../table":13}], 21:[function(d, k, b) {
    var g = d("../parse"), f = d("../table");
    b.parse = function(b, d) {
      var e = {};
      b = new g.Parser(b, d);
      return e.version = b.parseVersion(), e.ascender = b.parseShort(), e.descender = b.parseShort(), e.lineGap = b.parseShort(), e.advanceWidthMax = b.parseUShort(), e.minLeftSideBearing = b.parseShort(), e.minRightSideBearing = b.parseShort(), e.xMaxExtent = b.parseShort(), e.caretSlopeRise = b.parseShort(), e.caretSlopeRun = b.parseShort(), e.caretOffset = b.parseShort(), b.relativeOffset += 8, e.metricDataFormat = b.parseShort(), e.numberOfHMetrics = b.parseUShort(), e;
    };
    b.make = function(b) {
      return new f.Table("hhea", [{name:"version", type:"FIXED", value:65536}, {name:"ascender", type:"FWORD", value:0}, {name:"descender", type:"FWORD", value:0}, {name:"lineGap", type:"FWORD", value:0}, {name:"advanceWidthMax", type:"UFWORD", value:0}, {name:"minLeftSideBearing", type:"FWORD", value:0}, {name:"minRightSideBearing", type:"FWORD", value:0}, {name:"xMaxExtent", type:"FWORD", value:0}, {name:"caretSlopeRise", type:"SHORT", value:1}, {name:"caretSlopeRun", type:"SHORT", value:0}, {name:"caretOffset", 
      type:"SHORT", value:0}, {name:"reserved1", type:"SHORT", value:0}, {name:"reserved2", type:"SHORT", value:0}, {name:"reserved3", type:"SHORT", value:0}, {name:"reserved4", type:"SHORT", value:0}, {name:"metricDataFormat", type:"SHORT", value:0}, {name:"numberOfHMetrics", type:"USHORT", value:0}], b);
    };
  }, {"../parse":10, "../table":13}], 22:[function(d, k, b) {
    var g = d("../parse"), f = d("../table");
    b.parse = function(b, d, f, k, n) {
      var c, e;
      b = new g.Parser(b, d);
      for (d = 0; k > d; d += 1) {
        f > d && (c = b.parseUShort(), e = b.parseShort());
        var m = n.get(d);
        m.advanceWidth = c;
        m.leftSideBearing = e;
      }
    };
    b.make = function(b) {
      for (var d = new f.Table("hmtx", []), e = 0; e < b.length; e += 1) {
        var g = b.get(e), k = g.leftSideBearing || 0;
        d.fields.push({name:"advanceWidth_" + e, type:"USHORT", value:g.advanceWidth || 0});
        d.fields.push({name:"leftSideBearing_" + e, type:"SHORT", value:k});
      }
      return d;
    };
  }, {"../parse":10, "../table":13}], 23:[function(d, k, b) {
    var g = d("../check"), f = d("../parse");
    b.parse = function(b, d) {
      var e = {};
      b = new f.Parser(b, d);
      d = b.parseUShort();
      g.argument(0 === d, "Unsupported kern table version.");
      b.skip("uShort", 1);
      d = b.parseUShort();
      g.argument(0 === d, "Unsupported kern sub-table version.");
      b.skip("uShort", 2);
      d = b.parseUShort();
      b.skip("uShort", 3);
      for (var k = 0; d > k; k += 1) {
        var n = b.parseUShort(), c = b.parseUShort(), h = b.parseShort();
        e[n + "," + c] = h;
      }
      return e;
    };
  }, {"../check":2, "../parse":10}], 24:[function(d, k, b) {
    var g = d("../parse");
    b.parse = function(b, d, k, q) {
      b = new g.Parser(b, d);
      d = q ? b.parseUShort : b.parseULong;
      for (var e = [], f = 0; k + 1 > f; f += 1) {
        var c = d.call(b);
        q && (c *= 2);
        e.push(c);
      }
      return e;
    };
  }, {"../parse":10}], 25:[function(d, k, b) {
    var g = d("../check"), f = d("../parse"), e = d("../table");
    b.make = function(b) {
      for (var d = new e.Table("ltag", [{name:"version", type:"ULONG", value:1}, {name:"flags", type:"ULONG", value:0}, {name:"numTags", type:"ULONG", value:b.length}]), f = "", g = 12 + 4 * b.length, c = 0; c < b.length; ++c) {
        var h = f.indexOf(b[c]);
        0 > h && (h = f.length, f += b[c]);
        d.fields.push({name:"offset " + c, type:"USHORT", value:g + h});
        d.fields.push({name:"length " + c, type:"USHORT", value:b[c].length});
      }
      return d.fields.push({name:"stringPool", type:"CHARARRAY", value:f}), d;
    };
    b.parse = function(b, d) {
      var e = new f.Parser(b, d), k = e.parseULong();
      g.argument(1 === k, "Unsupported ltag table version.");
      e.skip("uLong", 1);
      k = e.parseULong();
      for (var c = [], h = 0; k > h; h++) {
        for (var q = "", r = d + e.parseUShort(), y = e.parseUShort(), x = r; r + y > x; ++x) {
          q += String.fromCharCode(b.getInt8(x));
        }
        c.push(q);
      }
      return c;
    };
  }, {"../check":2, "../parse":10, "../table":13}], 26:[function(d, k, b) {
    var g = d("../parse"), f = d("../table");
    b.parse = function(b, d) {
      var e = {};
      b = new g.Parser(b, d);
      return e.version = b.parseVersion(), e.numGlyphs = b.parseUShort(), 1 === e.version && (e.maxPoints = b.parseUShort(), e.maxContours = b.parseUShort(), e.maxCompositePoints = b.parseUShort(), e.maxCompositeContours = b.parseUShort(), e.maxZones = b.parseUShort(), e.maxTwilightPoints = b.parseUShort(), e.maxStorage = b.parseUShort(), e.maxFunctionDefs = b.parseUShort(), e.maxInstructionDefs = b.parseUShort(), e.maxStackElements = b.parseUShort(), e.maxSizeOfInstructions = b.parseUShort(), e.maxComponentElements = 
      b.parseUShort(), e.maxComponentDepth = b.parseUShort()), e;
    };
    b.make = function(b) {
      return new f.Table("maxp", [{name:"version", type:"FIXED", value:20480}, {name:"numGlyphs", type:"USHORT", value:b}]);
    };
  }, {"../parse":10, "../table":13}], 27:[function(d, k, b) {
    var g = d("../types").decode, f = d("../check"), e = d("../parse"), r = d("../table");
    b.parse = function(b, d) {
      var k = new e.Parser(b, d), c = k.parseULong();
      f.argument(1 === c, "Unsupported META table version.");
      k.parseULong();
      k.parseULong();
      c = k.parseULong();
      for (var h = {}, m = 0; c > m; m++) {
        var q = k.parseTag(), r = k.parseULong(), x = k.parseULong();
        r = g.UTF8(b, d + r, x);
        h[q] = r;
      }
      return h;
    };
    b.make = function(b) {
      var d = Object.keys(b).length, e = "", c = 16 + 12 * d;
      d = new r.Table("meta", [{name:"version", type:"ULONG", value:1}, {name:"flags", type:"ULONG", value:0}, {name:"offset", type:"ULONG", value:c}, {name:"numTags", type:"ULONG", value:d}]);
      for (var f in b) {
        var g = e.length;
        e += b[f];
        d.fields.push({name:"tag " + f, type:"TAG", value:f});
        d.fields.push({name:"offset " + f, type:"ULONG", value:c + g});
        d.fields.push({name:"length " + f, type:"ULONG", value:b[f].length});
      }
      return d.fields.push({name:"stringPool", type:"CHARARRAY", value:e}), d;
    };
  }, {"../check":2, "../parse":10, "../table":13, "../types":32}], 28:[function(d, k, b) {
    function g(b, c, d) {
      switch(b) {
        case 0:
          return x;
        case 1:
          return v[d] || p[c];
        case 3:
          if (1 === c || 10 === c) {
            return x;
          }
      }
    }
    function f(b) {
      var c = {}, d;
      for (d in b) {
        c[b[d]] = parseInt(d);
      }
      return c;
    }
    function e(b, d, e, f, h, g) {
      return new c.Record("NameRecord", [{name:"platformID", type:"USHORT", value:b}, {name:"encodingID", type:"USHORT", value:d}, {name:"languageID", type:"USHORT", value:e}, {name:"nameID", type:"USHORT", value:f}, {name:"length", type:"USHORT", value:h}, {name:"offset", type:"USHORT", value:g}]);
    }
    function r(b, c) {
      a: {
        var d = b.length;
        var e = c.length - d + 1, f = 0;
        b: for (; e > f; f++) {
          for (; e > f;) {
            for (var h = 0; d > h; h++) {
              if (c[f + h] !== b[h]) {
                continue b;
              }
            }
            d = f;
            break a;
          }
        }
        d = -1;
      }
      if (0 > d) {
        for (d = c.length, e = 0, f = b.length; f > e; ++e) {
          c.push(b[e]);
        }
      }
      return d;
    }
    k = d("../types");
    var q = k.decode, m = k.encode, n = d("../parse"), c = d("../table"), h = "copyright fontFamily fontSubfamily uniqueID fullName version postScriptName trademark manufacturer designer description manufacturerURL designerURL license licenseURL reserved preferredFamily preferredSubfamily compatibleFullName sampleText postScriptFindFontName wwsFamily wwsSubfamily".split(" "), t = {0:"en", 1:"fr", 2:"de", 3:"it", 4:"nl", 5:"sv", 6:"es", 7:"da", 8:"pt", 9:"no", 10:"he", 11:"ja", 12:"ar", 13:"fi", 14:"el", 
    15:"is", 16:"mt", 17:"tr", 18:"hr", 19:"zh-Hant", 20:"ur", 21:"hi", 22:"th", 23:"ko", 24:"lt", 25:"pl", 26:"hu", 27:"es", 28:"lv", 29:"se", 30:"fo", 31:"fa", 32:"ru", 33:"zh", 34:"nl-BE", 35:"ga", 36:"sq", 37:"ro", 38:"cz", 39:"sk", 40:"si", 41:"yi", 42:"sr", 43:"mk", 44:"bg", 45:"uk", 46:"be", 47:"uz", 48:"kk", 49:"az-Cyrl", 50:"az-Arab", 51:"hy", 52:"ka", 53:"mo", 54:"ky", 55:"tg", 56:"tk", 57:"mn-CN", 58:"mn", 59:"ps", 60:"ks", 61:"ku", 62:"sd", 63:"bo", 64:"ne", 65:"sa", 66:"mr", 67:"bn", 
    68:"as", 69:"gu", 70:"pa", 71:"or", 72:"ml", 73:"kn", 74:"ta", 75:"te", 76:"si", 77:"my", 78:"km", 79:"lo", 80:"vi", 81:"id", 82:"tl", 83:"ms", 84:"ms-Arab", 85:"am", 86:"ti", 87:"om", 88:"so", 89:"sw", 90:"rw", 91:"rn", 92:"ny", 93:"mg", 94:"eo", 128:"cy", 129:"eu", 130:"ca", 131:"la", 132:"qu", 133:"gn", 134:"ay", 135:"tt", 136:"ug", 137:"dz", 138:"jv", 139:"su", 140:"gl", 141:"af", 142:"br", 143:"iu", 144:"gd", 145:"gv", 146:"ga", 147:"to", 148:"el-polyton", 149:"kl", 150:"az", 151:"nn"}, 
    z = {0:0, 1:0, 2:0, 3:0, 4:0, 5:0, 6:0, 7:0, 8:0, 9:0, 10:5, 11:1, 12:4, 13:0, 14:6, 15:0, 16:0, 17:0, 18:0, 19:2, 20:4, 21:9, 22:21, 23:3, 24:29, 25:29, 26:29, 27:29, 28:29, 29:0, 30:0, 31:4, 32:7, 33:25, 34:0, 35:0, 36:0, 37:0, 38:29, 39:29, 40:0, 41:5, 42:7, 43:7, 44:7, 45:7, 46:7, 47:7, 48:7, 49:7, 50:4, 51:24, 52:23, 53:7, 54:7, 55:7, 56:7, 57:27, 58:7, 59:4, 60:4, 61:4, 62:4, 63:26, 64:9, 65:9, 66:9, 67:13, 68:13, 69:11, 70:10, 71:12, 72:17, 73:16, 74:14, 75:15, 76:18, 77:19, 78:20, 79:22, 
    80:30, 81:0, 82:0, 83:0, 84:4, 85:28, 86:28, 87:28, 88:0, 89:0, 90:0, 91:0, 92:0, 93:0, 94:0, 128:0, 129:0, 130:0, 131:0, 132:0, 133:0, 134:0, 135:7, 136:4, 137:26, 138:0, 139:0, 140:0, 141:0, 142:0, 143:28, 144:0, 145:0, 146:0, 147:0, 148:6, 149:0, 150:0, 151:0}, y = {1078:"af", 1052:"sq", 1156:"gsw", 1118:"am", 5121:"ar-DZ", 15361:"ar-BH", 3073:"ar", 2049:"ar-IQ", 11265:"ar-JO", 13313:"ar-KW", 12289:"ar-LB", 4097:"ar-LY", 6145:"ary", 8193:"ar-OM", 16385:"ar-QA", 1025:"ar-SA", 10241:"ar-SY", 
    7169:"aeb", 14337:"ar-AE", 9217:"ar-YE", 1067:"hy", 1101:"as", 2092:"az-Cyrl", 1068:"az", 1133:"ba", 1069:"eu", 1059:"be", 2117:"bn", 1093:"bn-IN", 8218:"bs-Cyrl", 5146:"bs", 1150:"br", 1026:"bg", 1027:"ca", 3076:"zh-HK", 5124:"zh-MO", 2052:"zh", 4100:"zh-SG", 1028:"zh-TW", 1155:"co", 1050:"hr", 4122:"hr-BA", 1029:"cs", 1030:"da", 1164:"prs", 1125:"dv", 2067:"nl-BE", 1043:"nl", 3081:"en-AU", 10249:"en-BZ", 4105:"en-CA", 9225:"en-029", 16393:"en-IN", 6153:"en-IE", 8201:"en-JM", 17417:"en-MY", 
    5129:"en-NZ", 13321:"en-PH", 18441:"en-SG", 7177:"en-ZA", 11273:"en-TT", 2057:"en-GB", 1033:"en", 12297:"en-ZW", 1061:"et", 1080:"fo", 1124:"fil", 1035:"fi", 2060:"fr-BE", 3084:"fr-CA", 1036:"fr", 5132:"fr-LU", 6156:"fr-MC", 4108:"fr-CH", 1122:"fy", 1110:"gl", 1079:"ka", 3079:"de-AT", 1031:"de", 5127:"de-LI", 4103:"de-LU", 2055:"de-CH", 1032:"el", 1135:"kl", 1095:"gu", 1128:"ha", 1037:"he", 1081:"hi", 1038:"hu", 1039:"is", 1136:"ig", 1057:"id", 1117:"iu", 2141:"iu-Latn", 2108:"ga", 1076:"xh", 
    1077:"zu", 1040:"it", 2064:"it-CH", 1041:"ja", 1099:"kn", 1087:"kk", 1107:"km", 1158:"quc", 1159:"rw", 1089:"sw", 1111:"kok", 1042:"ko", 1088:"ky", 1108:"lo", 1062:"lv", 1063:"lt", 2094:"dsb", 1134:"lb", 1071:"mk", 2110:"ms-BN", 1086:"ms", 1100:"ml", 1082:"mt", 1153:"mi", 1146:"arn", 1102:"mr", 1148:"moh", 1104:"mn", 2128:"mn-CN", 1121:"ne", 1044:"nb", 2068:"nn", 1154:"oc", 1096:"or", 1123:"ps", 1045:"pl", 1046:"pt", 2070:"pt-PT", 1094:"pa", 1131:"qu-BO", 2155:"qu-EC", 3179:"qu", 1048:"ro", 1047:"rm", 
    1049:"ru", 9275:"smn", 4155:"smj-NO", 5179:"smj", 3131:"se-FI", 1083:"se", 2107:"se-SE", 8251:"sms", 6203:"sma-NO", 7227:"sms", 1103:"sa", 7194:"sr-Cyrl-BA", 3098:"sr", 6170:"sr-Latn-BA", 2074:"sr-Latn", 1132:"nso", 1074:"tn", 1115:"si", 1051:"sk", 1060:"sl", 11274:"es-AR", 16394:"es-BO", 13322:"es-CL", 9226:"es-CO", 5130:"es-CR", 7178:"es-DO", 12298:"es-EC", 17418:"es-SV", 4106:"es-GT", 18442:"es-HN", 2058:"es-MX", 19466:"es-NI", 6154:"es-PA", 15370:"es-PY", 10250:"es-PE", 20490:"es-PR", 3082:"es", 
    1034:"es", 21514:"es-US", 14346:"es-UY", 8202:"es-VE", 2077:"sv-FI", 1053:"sv", 1114:"syr", 1064:"tg", 2143:"tzm", 1097:"ta", 1092:"tt", 1098:"te", 1054:"th", 1105:"bo", 1055:"tr", 1090:"tk", 1152:"ug", 1058:"uk", 1070:"hsb", 1056:"ur", 2115:"uz-Cyrl", 1091:"uz", 1066:"vi", 1106:"cy", 1160:"wo", 1157:"sah", 1144:"ii", 1130:"yo"}, x = "utf-16", p = {0:"macintosh", 1:"x-mac-japanese", 2:"x-mac-chinesetrad", 3:"x-mac-korean", 6:"x-mac-greek", 7:"x-mac-cyrillic", 9:"x-mac-devanagai", 10:"x-mac-gurmukhi", 
    11:"x-mac-gujarati", 12:"x-mac-oriya", 13:"x-mac-bengali", 14:"x-mac-tamil", 15:"x-mac-telugu", 16:"x-mac-kannada", 17:"x-mac-malayalam", 18:"x-mac-sinhalese", 19:"x-mac-burmese", 20:"x-mac-khmer", 21:"x-mac-thai", 22:"x-mac-lao", 23:"x-mac-georgian", 24:"x-mac-armenian", 25:"x-mac-chinesesimp", 26:"x-mac-tibetan", 27:"x-mac-mongolian", 28:"x-mac-ethiopic", 29:"x-mac-ce", 30:"x-mac-vietnamese", 31:"x-mac-extarabic"}, v = {15:"x-mac-icelandic", 17:"x-mac-turkish", 18:"x-mac-croatian", 24:"x-mac-ce", 
    25:"x-mac-ce", 26:"x-mac-ce", 27:"x-mac-ce", 28:"x-mac-ce", 30:"x-mac-icelandic", 37:"x-mac-romanian", 38:"x-mac-ce", 39:"x-mac-ce", 40:"x-mac-ce", 143:"x-mac-inuit", 146:"x-mac-gaelic"};
    b.parse = function(b, c, d) {
      var e = {};
      c = new n.Parser(b, c);
      for (var f = c.parseUShort(), k = c.parseUShort(), m = c.offset + c.parseUShort(), p = 0; k > p; p++) {
        var r = c.parseUShort(), v = c.parseUShort(), w = c.parseUShort(), z = c.parseUShort();
        z = h[z] || z;
        var A = c.parseUShort(), C = c.parseUShort();
        a: {
          switch(r) {
            case 0:
              if (65535 === w) {
                var S = "und";
                break a;
              }
              if (d) {
                S = d[w];
                break a;
              }
              break;
            case 1:
              S = t[w];
              break a;
            case 3:
              S = y[w];
              break a;
          }
          S = void 0;
        }
        r = g(r, v, w);
        void 0 !== r && void 0 !== S && (r = r === x ? q.UTF16(b, m + C, A) : q.MACSTRING(b, m + C, A, r)) && (v = e[z], void 0 === v && (v = e[z] = {}), v[S] = r);
      }
      return 1 === f && c.parseUShort(), e;
    };
    b.make = function(b, d) {
      var k, n = [], q = {}, p = f(h);
      for (w in b) {
        var v = p[w];
        if (void 0 === v && (v = w), k = parseInt(v), isNaN(k)) {
          throw Error('Name table entry "' + w + '" does not exist, see nameTableNames for complete list.');
        }
        q[k] = b[w];
        n.push(k);
      }
      var w = f(t);
      v = f(y);
      b = [];
      p = [];
      for (var x = 0; x < n.length; x++) {
        k = n[x];
        var C = q[k], R;
        for (R in C) {
          var L = C[R], H = 1, M = w[R], S = z[M], O = g(H, S, M);
          O = m.MACSTRING(L, O);
          void 0 === O && (H = 0, M = d.indexOf(R), 0 > M && (M = d.length, d.push(R)), S = 4, O = m.UTF16(L));
          var Z = r(O, p);
          b.push(e(H, S, M, k, O.length, Z));
          H = v[R];
          void 0 !== H && (L = m.UTF16(L), M = r(L, p), b.push(e(3, 1, H, k, L.length, M)));
        }
      }
      b.sort(function(b, c) {
        return b.platformID - c.platformID || b.encodingID - c.encodingID || b.languageID - c.languageID || b.nameID - c.nameID;
      });
      d = new c.Table("name", [{name:"format", type:"USHORT", value:0}, {name:"count", type:"USHORT", value:b.length}, {name:"stringOffset", type:"USHORT", value:6 + 12 * b.length}]);
      for (k = 0; k < b.length; k++) {
        d.fields.push({name:"record_" + k, type:"RECORD", value:b[k]});
      }
      return d.fields.push({name:"strings", type:"LITERAL", value:p}), d;
    };
  }, {"../parse":10, "../table":13, "../types":32}], 29:[function(d, k, b) {
    var g = d("../parse"), f = d("../table"), e = [{begin:0, end:127}, {begin:128, end:255}, {begin:256, end:383}, {begin:384, end:591}, {begin:592, end:687}, {begin:688, end:767}, {begin:768, end:879}, {begin:880, end:1023}, {begin:11392, end:11519}, {begin:1024, end:1279}, {begin:1328, end:1423}, {begin:1424, end:1535}, {begin:42240, end:42559}, {begin:1536, end:1791}, {begin:1984, end:2047}, {begin:2304, end:2431}, {begin:2432, end:2559}, {begin:2560, end:2687}, {begin:2688, end:2815}, {begin:2816, 
    end:2943}, {begin:2944, end:3071}, {begin:3072, end:3199}, {begin:3200, end:3327}, {begin:3328, end:3455}, {begin:3584, end:3711}, {begin:3712, end:3839}, {begin:4256, end:4351}, {begin:6912, end:7039}, {begin:4352, end:4607}, {begin:7680, end:7935}, {begin:7936, end:8191}, {begin:8192, end:8303}, {begin:8304, end:8351}, {begin:8352, end:8399}, {begin:8400, end:8447}, {begin:8448, end:8527}, {begin:8528, end:8591}, {begin:8592, end:8703}, {begin:8704, end:8959}, {begin:8960, end:9215}, {begin:9216, 
    end:9279}, {begin:9280, end:9311}, {begin:9312, end:9471}, {begin:9472, end:9599}, {begin:9600, end:9631}, {begin:9632, end:9727}, {begin:9728, end:9983}, {begin:9984, end:10175}, {begin:12288, end:12351}, {begin:12352, end:12447}, {begin:12448, end:12543}, {begin:12544, end:12591}, {begin:12592, end:12687}, {begin:43072, end:43135}, {begin:12800, end:13055}, {begin:13056, end:13311}, {begin:44032, end:55215}, {begin:55296, end:57343}, {begin:67840, end:67871}, {begin:19968, end:40959}, {begin:57344, 
    end:63743}, {begin:12736, end:12783}, {begin:64256, end:64335}, {begin:64336, end:65023}, {begin:65056, end:65071}, {begin:65040, end:65055}, {begin:65104, end:65135}, {begin:65136, end:65279}, {begin:65280, end:65519}, {begin:65520, end:65535}, {begin:3840, end:4095}, {begin:1792, end:1871}, {begin:1920, end:1983}, {begin:3456, end:3583}, {begin:4096, end:4255}, {begin:4608, end:4991}, {begin:5024, end:5119}, {begin:5120, end:5759}, {begin:5760, end:5791}, {begin:5792, end:5887}, {begin:6016, 
    end:6143}, {begin:6144, end:6319}, {begin:10240, end:10495}, {begin:40960, end:42127}, {begin:5888, end:5919}, {begin:66304, end:66351}, {begin:66352, end:66383}, {begin:66560, end:66639}, {begin:118784, end:119039}, {begin:119808, end:120831}, {begin:1044480, end:1048573}, {begin:65024, end:65039}, {begin:917504, end:917631}, {begin:6400, end:6479}, {begin:6480, end:6527}, {begin:6528, end:6623}, {begin:6656, end:6687}, {begin:11264, end:11359}, {begin:11568, end:11647}, {begin:19904, end:19967}, 
    {begin:43008, end:43055}, {begin:65536, end:65663}, {begin:65856, end:65935}, {begin:66432, end:66463}, {begin:66464, end:66527}, {begin:66640, end:66687}, {begin:66688, end:66735}, {begin:67584, end:67647}, {begin:68096, end:68191}, {begin:119552, end:119647}, {begin:73728, end:74751}, {begin:119648, end:119679}, {begin:7040, end:7103}, {begin:7168, end:7247}, {begin:7248, end:7295}, {begin:43136, end:43231}, {begin:43264, end:43311}, {begin:43312, end:43359}, {begin:43520, end:43615}, {begin:65936, 
    end:65999}, {begin:66E3, end:66047}, {begin:66208, end:66271}, {begin:127024, end:127135}];
    b.unicodeRanges = e;
    b.getUnicodeRange = function(b) {
      for (var d = 0; d < e.length; d += 1) {
        var f = e[d];
        if (b >= f.begin && b < f.end) {
          return d;
        }
      }
      return -1;
    };
    b.parse = function(b, d) {
      var e = {};
      b = new g.Parser(b, d);
      e.version = b.parseUShort();
      e.xAvgCharWidth = b.parseShort();
      e.usWeightClass = b.parseUShort();
      e.usWidthClass = b.parseUShort();
      e.fsType = b.parseUShort();
      e.ySubscriptXSize = b.parseShort();
      e.ySubscriptYSize = b.parseShort();
      e.ySubscriptXOffset = b.parseShort();
      e.ySubscriptYOffset = b.parseShort();
      e.ySuperscriptXSize = b.parseShort();
      e.ySuperscriptYSize = b.parseShort();
      e.ySuperscriptXOffset = b.parseShort();
      e.ySuperscriptYOffset = b.parseShort();
      e.yStrikeoutSize = b.parseShort();
      e.yStrikeoutPosition = b.parseShort();
      e.sFamilyClass = b.parseShort();
      e.panose = [];
      for (d = 0; 10 > d; d++) {
        e.panose[d] = b.parseByte();
      }
      return e.ulUnicodeRange1 = b.parseULong(), e.ulUnicodeRange2 = b.parseULong(), e.ulUnicodeRange3 = b.parseULong(), e.ulUnicodeRange4 = b.parseULong(), e.achVendID = String.fromCharCode(b.parseByte(), b.parseByte(), b.parseByte(), b.parseByte()), e.fsSelection = b.parseUShort(), e.usFirstCharIndex = b.parseUShort(), e.usLastCharIndex = b.parseUShort(), e.sTypoAscender = b.parseShort(), e.sTypoDescender = b.parseShort(), e.sTypoLineGap = b.parseShort(), e.usWinAscent = b.parseUShort(), e.usWinDescent = 
      b.parseUShort(), 1 <= e.version && (e.ulCodePageRange1 = b.parseULong(), e.ulCodePageRange2 = b.parseULong()), 2 <= e.version && (e.sxHeight = b.parseShort(), e.sCapHeight = b.parseShort(), e.usDefaultChar = b.parseUShort(), e.usBreakChar = b.parseUShort(), e.usMaxContent = b.parseUShort()), e;
    };
    b.make = function(b) {
      return new f.Table("OS/2", [{name:"version", type:"USHORT", value:3}, {name:"xAvgCharWidth", type:"SHORT", value:0}, {name:"usWeightClass", type:"USHORT", value:0}, {name:"usWidthClass", type:"USHORT", value:0}, {name:"fsType", type:"USHORT", value:0}, {name:"ySubscriptXSize", type:"SHORT", value:650}, {name:"ySubscriptYSize", type:"SHORT", value:699}, {name:"ySubscriptXOffset", type:"SHORT", value:0}, {name:"ySubscriptYOffset", type:"SHORT", value:140}, {name:"ySuperscriptXSize", type:"SHORT", 
      value:650}, {name:"ySuperscriptYSize", type:"SHORT", value:699}, {name:"ySuperscriptXOffset", type:"SHORT", value:0}, {name:"ySuperscriptYOffset", type:"SHORT", value:479}, {name:"yStrikeoutSize", type:"SHORT", value:49}, {name:"yStrikeoutPosition", type:"SHORT", value:258}, {name:"sFamilyClass", type:"SHORT", value:0}, {name:"bFamilyType", type:"BYTE", value:0}, {name:"bSerifStyle", type:"BYTE", value:0}, {name:"bWeight", type:"BYTE", value:0}, {name:"bProportion", type:"BYTE", value:0}, {name:"bContrast", 
      type:"BYTE", value:0}, {name:"bStrokeVariation", type:"BYTE", value:0}, {name:"bArmStyle", type:"BYTE", value:0}, {name:"bLetterform", type:"BYTE", value:0}, {name:"bMidline", type:"BYTE", value:0}, {name:"bXHeight", type:"BYTE", value:0}, {name:"ulUnicodeRange1", type:"ULONG", value:0}, {name:"ulUnicodeRange2", type:"ULONG", value:0}, {name:"ulUnicodeRange3", type:"ULONG", value:0}, {name:"ulUnicodeRange4", type:"ULONG", value:0}, {name:"achVendID", type:"CHARARRAY", value:"XXXX"}, {name:"fsSelection", 
      type:"USHORT", value:0}, {name:"usFirstCharIndex", type:"USHORT", value:0}, {name:"usLastCharIndex", type:"USHORT", value:0}, {name:"sTypoAscender", type:"SHORT", value:0}, {name:"sTypoDescender", type:"SHORT", value:0}, {name:"sTypoLineGap", type:"SHORT", value:0}, {name:"usWinAscent", type:"USHORT", value:0}, {name:"usWinDescent", type:"USHORT", value:0}, {name:"ulCodePageRange1", type:"ULONG", value:0}, {name:"ulCodePageRange2", type:"ULONG", value:0}, {name:"sxHeight", type:"SHORT", value:0}, 
      {name:"sCapHeight", type:"SHORT", value:0}, {name:"usDefaultChar", type:"USHORT", value:0}, {name:"usBreakChar", type:"USHORT", value:0}, {name:"usMaxContext", type:"USHORT", value:0}], b);
    };
  }, {"../parse":10, "../table":13}], 30:[function(d, k, b) {
    var g = d("../encoding"), f = d("../parse"), e = d("../table");
    b.parse = function(b, d) {
      var e = {};
      d = new f.Parser(b, d);
      switch(e.version = d.parseVersion(), e.italicAngle = d.parseFixed(), e.underlinePosition = d.parseShort(), e.underlineThickness = d.parseShort(), e.isFixedPitch = d.parseULong(), e.minMemType42 = d.parseULong(), e.maxMemType42 = d.parseULong(), e.minMemType1 = d.parseULong(), e.maxMemType1 = d.parseULong(), e.version) {
        case 1:
          e.names = g.standardNames.slice();
          break;
        case 2:
          e.numberOfGlyphs = d.parseUShort();
          e.glyphNameIndex = Array(e.numberOfGlyphs);
          for (b = 0; b < e.numberOfGlyphs; b++) {
            e.glyphNameIndex[b] = d.parseUShort();
          }
          e.names = [];
          for (b = 0; b < e.numberOfGlyphs; b++) {
            if (e.glyphNameIndex[b] >= g.standardNames.length) {
              var k = d.parseChar();
              e.names.push(d.parseString(k));
            }
          }
          break;
        case 2.5:
          for (e.numberOfGlyphs = d.parseUShort(), e.offset = Array(e.numberOfGlyphs), b = 0; b < e.numberOfGlyphs; b++) {
            e.offset[b] = d.parseChar();
          }
      }
      return e;
    };
    b.make = function() {
      return new e.Table("post", [{name:"version", type:"FIXED", value:196608}, {name:"italicAngle", type:"FIXED", value:0}, {name:"underlinePosition", type:"FWORD", value:0}, {name:"underlineThickness", type:"FWORD", value:0}, {name:"isFixedPitch", type:"ULONG", value:0}, {name:"minMemType42", type:"ULONG", value:0}, {name:"maxMemType42", type:"ULONG", value:0}, {name:"minMemType1", type:"ULONG", value:0}, {name:"maxMemType1", type:"ULONG", value:0}]);
    };
  }, {"../encoding":4, "../parse":10, "../table":13}], 31:[function(d, k, b) {
    function g(b) {
      for (; 0 !== b.length % 4;) {
        b.push(0);
      }
      for (var c = 0, d = 0; d < b.length; d += 4) {
        c += (b[d] << 24) + (b[d + 1] << 16) + (b[d + 2] << 8) + b[d + 3];
      }
      return c % Math.pow(2, 32);
    }
    function f(b, c, d, e) {
      return new m.Record("Table Record", [{name:"tag", type:"TAG", value:void 0 !== b ? b : ""}, {name:"checkSum", type:"ULONG", value:void 0 !== c ? c : 0}, {name:"offset", type:"ULONG", value:void 0 !== d ? d : 0}, {name:"length", type:"ULONG", value:void 0 !== e ? e : 0}]);
    }
    function e(b) {
      var c = new m.Table("sfnt", [{name:"version", type:"TAG", value:"OTTO"}, {name:"numTables", type:"USHORT", value:0}, {name:"searchRange", type:"USHORT", value:0}, {name:"entrySelector", type:"USHORT", value:0}, {name:"rangeShift", type:"USHORT", value:0}]);
      c.tables = b;
      c.numTables = b.length;
      var d = Math.pow(2, Math.log(c.numTables) / Math.log(2) | 0);
      c.searchRange = 16 * d;
      c.entrySelector = Math.log(d) / Math.log(2) | 0;
      c.rangeShift = 16 * c.numTables - c.searchRange;
      d = [];
      for (var e = [], h = c.sizeOf() + f().sizeOf() * c.numTables; 0 !== h % 4;) {
        h += 1, e.push({name:"padding", type:"BYTE", value:0});
      }
      for (var k = 0; k < b.length; k += 1) {
        var n = b[k];
        q.argument(4 === n.tableName.length, "Table name" + n.tableName + " is invalid.");
        var p = n.sizeOf(), r = f(n.tableName, g(n.encode()), h, p);
        d.push({name:r.tag + " Table Record", type:"RECORD", value:r});
        e.push({name:n.tableName + " table", type:"RECORD", value:n});
        h += p;
        for (q.argument(!isNaN(h), "Something went wrong calculating the offset."); 0 !== h % 4;) {
          h += 1, e.push({name:"padding", type:"BYTE", value:0});
        }
      }
      return d.sort(function(b, c) {
        return b.value.tag > c.value.tag ? 1 : -1;
      }), c.fields = c.fields.concat(d), c.fields = c.fields.concat(e), c;
    }
    function r(b, c, d) {
      for (var e = 0; e < c.length; e += 1) {
        var f = b.charToGlyphIndex(c[e]);
        if (0 < f) {
          return b.glyphs.get(f).getMetrics();
        }
      }
      return d;
    }
    var q = d("../check"), m = d("../table"), n = d("./cmap"), c = d("./cff"), h = d("./head"), t = d("./hhea"), z = d("./hmtx"), y = d("./ltag"), x = d("./maxp"), p = d("./name"), v = d("./os2"), w = d("./post"), C = d("./gsub"), A = d("./meta");
    b.computeCheckSum = g;
    b.make = e;
    b.fontToTable = function(b) {
      for (var d, f = [], k = [], m = [], q = [], D = [], R = [], L = [], H = 0, M = 0, S = 0, O = 0, Z = 0, Q = 0; Q < b.glyphs.length; Q += 1) {
        var U = b.glyphs.get(Q), P = 0 | U.unicode;
        if (isNaN(U.advanceWidth)) {
          throw Error("Glyph " + U.name + " (" + Q + "): advanceWidth is not a number.");
        }
        (d > P || void 0 === d) && 0 < P && (d = P);
        P > H && (H = P);
        P = v.getUnicodeRange(P);
        if (32 > P) {
          M |= 1 << P;
        } else {
          if (64 > P) {
            S |= 1 << P - 32;
          } else {
            if (96 > P) {
              O |= 1 << P - 64;
            } else {
              if (!(123 > P)) {
                throw Error("Unicode ranges bits > 123 are reserved for internal usage");
              }
              Z |= 1 << P - 96;
            }
          }
        }
        ".notdef" !== U.name && (P = U.getMetrics(), f.push(P.xMin), k.push(P.yMin), m.push(P.xMax), q.push(P.yMax), R.push(P.leftSideBearing), L.push(P.rightSideBearing), D.push(U.advanceWidth));
      }
      Q = Math.min.apply(null, f);
      k = Math.min.apply(null, k);
      m = Math.max.apply(null, m);
      q = Math.max.apply(null, q);
      f = Math.max.apply(null, D);
      for (P = U = 0; P < D.length; P += 1) {
        U += D[P];
      }
      Q = {xMin:Q, yMin:k, xMax:m, yMax:q, advanceWidthMax:f, advanceWidthAvg:U / D.length, minLeftSideBearing:Math.min.apply(null, R), maxLeftSideBearing:Math.max.apply(null, R), minRightSideBearing:Math.min.apply(null, L)};
      Q.ascender = b.ascender;
      Q.descender = b.descender;
      D = h.make({flags:3, unitsPerEm:b.unitsPerEm, xMin:Q.xMin, yMin:Q.yMin, xMax:Q.xMax, yMax:Q.yMax, lowestRecPPEM:3, createdTimestamp:b.createdTimestamp});
      R = t.make({ascender:Q.ascender, descender:Q.descender, advanceWidthMax:Q.advanceWidthMax, minLeftSideBearing:Q.minLeftSideBearing, minRightSideBearing:Q.minRightSideBearing, xMaxExtent:Q.maxLeftSideBearing + (Q.xMax - Q.xMin), numberOfHMetrics:b.glyphs.length});
      L = x.make(b.glyphs.length);
      d = v.make({xAvgCharWidth:Math.round(Q.advanceWidthAvg), usWeightClass:b.tables.os2.usWeightClass, usWidthClass:b.tables.os2.usWidthClass, usFirstCharIndex:d, usLastCharIndex:H, ulUnicodeRange1:M, ulUnicodeRange2:S, ulUnicodeRange3:O, ulUnicodeRange4:Z, fsSelection:b.tables.os2.fsSelection, sTypoAscender:Q.ascender, sTypoDescender:Q.descender, sTypoLineGap:0, usWinAscent:Q.yMax, usWinDescent:Math.abs(Q.yMin), ulCodePageRange1:1, sxHeight:r(b, "xyvw", {yMax:Math.round(Q.ascender / 2)}).yMax, 
      sCapHeight:r(b, "HIKLEFJMNTZBDPRAGOQSUVWXY", Q).yMax, usDefaultChar:b.hasChar(" ") ? 32 : 0, usBreakChar:b.hasChar(" ") ? 32 : 0});
      H = z.make(b.glyphs);
      M = n.make(b.glyphs);
      S = b.getEnglishName("fontFamily");
      O = b.getEnglishName("fontSubfamily");
      Z = S + " " + O;
      (q = b.getEnglishName("postScriptName")) || (q = S.replace(/\s/g, "") + "-" + O);
      m = {};
      for (var da in b.names) {
        m[da] = b.names[da];
      }
      m.uniqueID || (m.uniqueID = {en:b.getEnglishName("manufacturer") + ":" + Z});
      m.postScriptName || (m.postScriptName = {en:q});
      m.preferredFamily || (m.preferredFamily = b.names.fontFamily);
      m.preferredSubfamily || (m.preferredSubfamily = b.names.fontSubfamily);
      k = [];
      da = p.make(m, k);
      m = 0 < k.length ? y.make(k) : void 0;
      k = w.make();
      O = c.make(b.glyphs, {version:b.getEnglishName("version"), fullName:Z, familyName:S, weightName:O, postScriptName:q, unitsPerEm:b.unitsPerEm, fontBBox:[0, Q.yMin, Q.ascender, Q.advanceWidthMax]});
      S = b.metas && 0 < Object.keys(b.metas).length ? A.make(b.metas) : void 0;
      da = [D, R, L, d, da, M, k, O, H];
      m && da.push(m);
      b.tables.gsub && da.push(C.make(b.tables.gsub));
      S && da.push(S);
      b = e(da);
      da = b.encode();
      da = g(da);
      d = b.fields;
      H = !1;
      for (Q = 0; Q < d.length; Q += 1) {
        if ("head table" === d[Q].name) {
          d[Q].value.checkSumAdjustment = 2981146554 - da;
          H = !0;
          break;
        }
      }
      if (!H) {
        throw Error("Could not find head table with checkSum to adjust.");
      }
      return b;
    };
  }, {"../check":2, "../table":13, "./cff":14, "./cmap":15, "./gsub":19, "./head":20, "./hhea":21, "./hmtx":22, "./ltag":25, "./maxp":26, "./meta":27, "./name":28, "./os2":29, "./post":30}], 32:[function(d, k, b) {
    function g(b) {
      return function() {
        return b;
      };
    }
    var f = d("./check");
    d = {};
    var e = {}, r = {};
    e.BYTE = function(b) {
      return f.argument(0 <= b && 255 >= b, "Byte value should be between 0 and 255."), [b];
    };
    r.BYTE = g(1);
    e.CHAR = function(b) {
      return [b.charCodeAt(0)];
    };
    r.CHAR = g(1);
    e.CHARARRAY = function(b) {
      for (var c = [], d = 0; d < b.length; d += 1) {
        c[d] = b.charCodeAt(d);
      }
      return c;
    };
    r.CHARARRAY = function(b) {
      return b.length;
    };
    e.USHORT = function(b) {
      return [b >> 8 & 255, 255 & b];
    };
    r.USHORT = g(2);
    e.SHORT = function(b) {
      return 32768 <= b && (b = -(65536 - b)), [b >> 8 & 255, 255 & b];
    };
    r.SHORT = g(2);
    e.UINT24 = function(b) {
      return [b >> 16 & 255, b >> 8 & 255, 255 & b];
    };
    r.UINT24 = g(3);
    e.ULONG = function(b) {
      return [b >> 24 & 255, b >> 16 & 255, b >> 8 & 255, 255 & b];
    };
    r.ULONG = g(4);
    e.LONG = function(b) {
      return 2147483648 <= b && (b = -(4294967296 - b)), [b >> 24 & 255, b >> 16 & 255, b >> 8 & 255, 255 & b];
    };
    r.LONG = g(4);
    e.FIXED = e.ULONG;
    r.FIXED = r.ULONG;
    e.FWORD = e.SHORT;
    r.FWORD = r.SHORT;
    e.UFWORD = e.USHORT;
    r.UFWORD = r.USHORT;
    e.LONGDATETIME = function(b) {
      return [0, 0, 0, 0, b >> 24 & 255, b >> 16 & 255, b >> 8 & 255, 255 & b];
    };
    r.LONGDATETIME = g(8);
    e.TAG = function(b) {
      return f.argument(4 === b.length, "Tag should be exactly 4 ASCII characters."), [b.charCodeAt(0), b.charCodeAt(1), b.charCodeAt(2), b.charCodeAt(3)];
    };
    r.TAG = g(4);
    e.Card8 = e.BYTE;
    r.Card8 = r.BYTE;
    e.Card16 = e.USHORT;
    r.Card16 = r.USHORT;
    e.OffSize = e.BYTE;
    r.OffSize = r.BYTE;
    e.SID = e.USHORT;
    r.SID = r.USHORT;
    e.NUMBER = function(b) {
      return -107 <= b && 107 >= b ? [b + 139] : 108 <= b && 1131 >= b ? (b -= 108, [(b >> 8) + 247, 255 & b]) : -1131 <= b && -108 >= b ? (b = -b - 108, [(b >> 8) + 251, 255 & b]) : -32768 <= b && 32767 >= b ? e.NUMBER16(b) : e.NUMBER32(b);
    };
    r.NUMBER = function(b) {
      return e.NUMBER(b).length;
    };
    e.NUMBER16 = function(b) {
      return [28, b >> 8 & 255, 255 & b];
    };
    r.NUMBER16 = g(3);
    e.NUMBER32 = function(b) {
      return [29, b >> 24 & 255, b >> 16 & 255, b >> 8 & 255, 255 & b];
    };
    r.NUMBER32 = g(5);
    e.REAL = function(b) {
      var c = b.toString(), d = /\.(\d*?)(?:9{5,20}|0{5,20})\d{0,2}(?:e(.+)|$)/.exec(c);
      d && (c = parseFloat("1e" + ((d[2] ? +d[2] : 0) + d[1].length)), c = (Math.round(b * c) / c).toString());
      var e = "";
      b = 0;
      for (d = c.length; d > b; b += 1) {
        var f = c[b];
        e += "e" === f ? "-" === c[++b] ? "c" : "b" : "." === f ? "a" : "-" === f ? "e" : f;
      }
      e += 1 & e.length ? "f" : "ff";
      c = [30];
      b = 0;
      for (d = e.length; d > b; b += 2) {
        c.push(parseInt(e.substr(b, 2), 16));
      }
      return c;
    };
    r.REAL = function(b) {
      return e.REAL(b).length;
    };
    e.NAME = e.CHARARRAY;
    r.NAME = r.CHARARRAY;
    e.STRING = e.CHARARRAY;
    r.STRING = r.CHARARRAY;
    d.UTF8 = function(b, c, d) {
      for (var e = [], f = 0; d > f; f++, c += 1) {
        e[f] = b.getUint8(c);
      }
      return String.fromCharCode.apply(null, e);
    };
    d.UTF16 = function(b, c, d) {
      var e = [];
      d /= 2;
      for (var f = 0; d > f; f++, c += 2) {
        e[f] = b.getUint16(c);
      }
      return String.fromCharCode.apply(null, e);
    };
    e.UTF16 = function(b) {
      for (var c = [], d = 0; d < b.length; d += 1) {
        var e = b.charCodeAt(d);
        c[c.length] = e >> 8 & 255;
        c[c.length] = 255 & e;
      }
      return c;
    };
    r.UTF16 = function(b) {
      return 2 * b.length;
    };
    var q = {"x-mac-croatian":"\u00c4\u00c5\u00c7\u00c9\u00d1\u00d6\u00dc\u00e1\u00e0\u00e2\u00e4\u00e3\u00e5\u00e7\u00e9\u00e8\u00ea\u00eb\u00ed\u00ec\u00ee\u00ef\u00f1\u00f3\u00f2\u00f4\u00f6\u00f5\u00fa\u00f9\u00fb\u00fc\u2020\u00b0\u00a2\u00a3\u00a7\u2022\u00b6\u00df\u00ae\u0160\u2122\u00b4\u00a8\u2260\u017d\u00d8\u221e\u00b1\u2264\u2265\u2206\u00b5\u2202\u2211\u220f\u0161\u222b\u00aa\u00ba\u03a9\u017e\u00f8\u00bf\u00a1\u00ac\u221a\u0192\u2248\u0106\u00ab\u010c\u2026\u00a0\u00c0\u00c3\u00d5\u0152\u0153\u0110\u2014\u201c\u201d\u2018\u2019\u00f7\u25ca\uf8ff\u00a9\u2044\u20ac\u2039\u203a\u00c6\u00bb\u2013\u00b7\u201a\u201e\u2030\u00c2\u0107\u00c1\u010d\u00c8\u00cd\u00ce\u00cf\u00cc\u00d3\u00d4\u0111\u00d2\u00da\u00db\u00d9\u0131\u02c6\u02dc\u00af\u03c0\u00cb\u02da\u00b8\u00ca\u00e6\u02c7", 
    "x-mac-cyrillic":"\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041a\u041b\u041c\u041d\u041e\u041f\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042a\u042b\u042c\u042d\u042e\u042f\u2020\u00b0\u0490\u00a3\u00a7\u2022\u00b6\u0406\u00ae\u00a9\u2122\u0402\u0452\u2260\u0403\u0453\u221e\u00b1\u2264\u2265\u0456\u00b5\u0491\u0408\u0404\u0454\u0407\u0457\u0409\u0459\u040a\u045a\u0458\u0405\u00ac\u221a\u0192\u2248\u2206\u00ab\u00bb\u2026\u00a0\u040b\u045b\u040c\u045c\u0455\u2013\u2014\u201c\u201d\u2018\u2019\u00f7\u201e\u040e\u045e\u040f\u045f\u2116\u0401\u0451\u044f\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043a\u043b\u043c\u043d\u043e\u043f\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044a\u044b\u044c\u044d\u044e", 
    "x-mac-gaelic":"\u00c4\u00c5\u00c7\u00c9\u00d1\u00d6\u00dc\u00e1\u00e0\u00e2\u00e4\u00e3\u00e5\u00e7\u00e9\u00e8\u00ea\u00eb\u00ed\u00ec\u00ee\u00ef\u00f1\u00f3\u00f2\u00f4\u00f6\u00f5\u00fa\u00f9\u00fb\u00fc\u2020\u00b0\u00a2\u00a3\u00a7\u2022\u00b6\u00df\u00ae\u00a9\u2122\u00b4\u00a8\u2260\u00c6\u00d8\u1e02\u00b1\u2264\u2265\u1e03\u010a\u010b\u1e0a\u1e0b\u1e1e\u1e1f\u0120\u0121\u1e40\u00e6\u00f8\u1e41\u1e56\u1e57\u027c\u0192\u017f\u1e60\u00ab\u00bb\u2026\u00a0\u00c0\u00c3\u00d5\u0152\u0153\u2013\u2014\u201c\u201d\u2018\u2019\u1e61\u1e9b\u00ff\u0178\u1e6a\u20ac\u2039\u203a\u0176\u0177\u1e6b\u00b7\u1ef2\u1ef3\u204a\u00c2\u00ca\u00c1\u00cb\u00c8\u00cd\u00ce\u00cf\u00cc\u00d3\u00d4\u2663\u00d2\u00da\u00db\u00d9\u0131\u00dd\u00fd\u0174\u0175\u1e84\u1e85\u1e80\u1e81\u1e82\u1e83", 
    "x-mac-greek":"\u00c4\u00b9\u00b2\u00c9\u00b3\u00d6\u00dc\u0385\u00e0\u00e2\u00e4\u0384\u00a8\u00e7\u00e9\u00e8\u00ea\u00eb\u00a3\u2122\u00ee\u00ef\u2022\u00bd\u2030\u00f4\u00f6\u00a6\u20ac\u00f9\u00fb\u00fc\u2020\u0393\u0394\u0398\u039b\u039e\u03a0\u00df\u00ae\u00a9\u03a3\u03aa\u00a7\u2260\u00b0\u00b7\u0391\u00b1\u2264\u2265\u00a5\u0392\u0395\u0396\u0397\u0399\u039a\u039c\u03a6\u03ab\u03a8\u03a9\u03ac\u039d\u00ac\u039f\u03a1\u2248\u03a4\u00ab\u00bb\u2026\u00a0\u03a5\u03a7\u0386\u0388\u0153\u2013\u2015\u201c\u201d\u2018\u2019\u00f7\u0389\u038a\u038c\u038e\u03ad\u03ae\u03af\u03cc\u038f\u03cd\u03b1\u03b2\u03c8\u03b4\u03b5\u03c6\u03b3\u03b7\u03b9\u03be\u03ba\u03bb\u03bc\u03bd\u03bf\u03c0\u03ce\u03c1\u03c3\u03c4\u03b8\u03c9\u03c2\u03c7\u03c5\u03b6\u03ca\u03cb\u0390\u03b0\u00ad", 
    "x-mac-icelandic":"\u00c4\u00c5\u00c7\u00c9\u00d1\u00d6\u00dc\u00e1\u00e0\u00e2\u00e4\u00e3\u00e5\u00e7\u00e9\u00e8\u00ea\u00eb\u00ed\u00ec\u00ee\u00ef\u00f1\u00f3\u00f2\u00f4\u00f6\u00f5\u00fa\u00f9\u00fb\u00fc\u00dd\u00b0\u00a2\u00a3\u00a7\u2022\u00b6\u00df\u00ae\u00a9\u2122\u00b4\u00a8\u2260\u00c6\u00d8\u221e\u00b1\u2264\u2265\u00a5\u00b5\u2202\u2211\u220f\u03c0\u222b\u00aa\u00ba\u03a9\u00e6\u00f8\u00bf\u00a1\u00ac\u221a\u0192\u2248\u2206\u00ab\u00bb\u2026\u00a0\u00c0\u00c3\u00d5\u0152\u0153\u2013\u2014\u201c\u201d\u2018\u2019\u00f7\u25ca\u00ff\u0178\u2044\u20ac\u00d0\u00f0\u00de\u00fe\u00fd\u00b7\u201a\u201e\u2030\u00c2\u00ca\u00c1\u00cb\u00c8\u00cd\u00ce\u00cf\u00cc\u00d3\u00d4\uf8ff\u00d2\u00da\u00db\u00d9\u0131\u02c6\u02dc\u00af\u02d8\u02d9\u02da\u00b8\u02dd\u02db\u02c7", 
    "x-mac-inuit":"\u1403\u1404\u1405\u1406\u140a\u140b\u1431\u1432\u1433\u1434\u1438\u1439\u1449\u144e\u144f\u1450\u1451\u1455\u1456\u1466\u146d\u146e\u146f\u1470\u1472\u1473\u1483\u148b\u148c\u148d\u148e\u1490\u1491\u00b0\u14a1\u14a5\u14a6\u2022\u00b6\u14a7\u00ae\u00a9\u2122\u14a8\u14aa\u14ab\u14bb\u14c2\u14c3\u14c4\u14c5\u14c7\u14c8\u14d0\u14ef\u14f0\u14f1\u14f2\u14f4\u14f5\u1505\u14d5\u14d6\u14d7\u14d8\u14da\u14db\u14ea\u1528\u1529\u152a\u152b\u152d\u2026\u00a0\u152e\u153e\u1555\u1556\u1557\u2013\u2014\u201c\u201d\u2018\u2019\u1558\u1559\u155a\u155d\u1546\u1547\u1548\u1549\u154b\u154c\u1550\u157f\u1580\u1581\u1582\u1583\u1584\u1585\u158f\u1590\u1591\u1592\u1593\u1594\u1595\u1671\u1672\u1673\u1674\u1675\u1676\u1596\u15a0\u15a1\u15a2\u15a3\u15a4\u15a5\u15a6\u157c\u0141\u0142", 
    "x-mac-ce":"\u00c4\u0100\u0101\u00c9\u0104\u00d6\u00dc\u00e1\u0105\u010c\u00e4\u010d\u0106\u0107\u00e9\u0179\u017a\u010e\u00ed\u010f\u0112\u0113\u0116\u00f3\u0117\u00f4\u00f6\u00f5\u00fa\u011a\u011b\u00fc\u2020\u00b0\u0118\u00a3\u00a7\u2022\u00b6\u00df\u00ae\u00a9\u2122\u0119\u00a8\u2260\u0123\u012e\u012f\u012a\u2264\u2265\u012b\u0136\u2202\u2211\u0142\u013b\u013c\u013d\u013e\u0139\u013a\u0145\u0146\u0143\u00ac\u221a\u0144\u0147\u2206\u00ab\u00bb\u2026\u00a0\u0148\u0150\u00d5\u0151\u014c\u2013\u2014\u201c\u201d\u2018\u2019\u00f7\u25ca\u014d\u0154\u0155\u0158\u2039\u203a\u0159\u0156\u0157\u0160\u201a\u201e\u0161\u015a\u015b\u00c1\u0164\u0165\u00cd\u017d\u017e\u016a\u00d3\u00d4\u016b\u016e\u00da\u016f\u0170\u0171\u0172\u0173\u00dd\u00fd\u0137\u017b\u0141\u017c\u0122\u02c7", 
    macintosh:"\u00c4\u00c5\u00c7\u00c9\u00d1\u00d6\u00dc\u00e1\u00e0\u00e2\u00e4\u00e3\u00e5\u00e7\u00e9\u00e8\u00ea\u00eb\u00ed\u00ec\u00ee\u00ef\u00f1\u00f3\u00f2\u00f4\u00f6\u00f5\u00fa\u00f9\u00fb\u00fc\u2020\u00b0\u00a2\u00a3\u00a7\u2022\u00b6\u00df\u00ae\u00a9\u2122\u00b4\u00a8\u2260\u00c6\u00d8\u221e\u00b1\u2264\u2265\u00a5\u00b5\u2202\u2211\u220f\u03c0\u222b\u00aa\u00ba\u03a9\u00e6\u00f8\u00bf\u00a1\u00ac\u221a\u0192\u2248\u2206\u00ab\u00bb\u2026\u00a0\u00c0\u00c3\u00d5\u0152\u0153\u2013\u2014\u201c\u201d\u2018\u2019\u00f7\u25ca\u00ff\u0178\u2044\u20ac\u2039\u203a\ufb01\ufb02\u2021\u00b7\u201a\u201e\u2030\u00c2\u00ca\u00c1\u00cb\u00c8\u00cd\u00ce\u00cf\u00cc\u00d3\u00d4\uf8ff\u00d2\u00da\u00db\u00d9\u0131\u02c6\u02dc\u00af\u02d8\u02d9\u02da\u00b8\u02dd\u02db\u02c7", 
    "x-mac-romanian":"\u00c4\u00c5\u00c7\u00c9\u00d1\u00d6\u00dc\u00e1\u00e0\u00e2\u00e4\u00e3\u00e5\u00e7\u00e9\u00e8\u00ea\u00eb\u00ed\u00ec\u00ee\u00ef\u00f1\u00f3\u00f2\u00f4\u00f6\u00f5\u00fa\u00f9\u00fb\u00fc\u2020\u00b0\u00a2\u00a3\u00a7\u2022\u00b6\u00df\u00ae\u00a9\u2122\u00b4\u00a8\u2260\u0102\u0218\u221e\u00b1\u2264\u2265\u00a5\u00b5\u2202\u2211\u220f\u03c0\u222b\u00aa\u00ba\u03a9\u0103\u0219\u00bf\u00a1\u00ac\u221a\u0192\u2248\u2206\u00ab\u00bb\u2026\u00a0\u00c0\u00c3\u00d5\u0152\u0153\u2013\u2014\u201c\u201d\u2018\u2019\u00f7\u25ca\u00ff\u0178\u2044\u20ac\u2039\u203a\u021a\u021b\u2021\u00b7\u201a\u201e\u2030\u00c2\u00ca\u00c1\u00cb\u00c8\u00cd\u00ce\u00cf\u00cc\u00d3\u00d4\uf8ff\u00d2\u00da\u00db\u00d9\u0131\u02c6\u02dc\u00af\u02d8\u02d9\u02da\u00b8\u02dd\u02db\u02c7", 
    "x-mac-turkish":"\u00c4\u00c5\u00c7\u00c9\u00d1\u00d6\u00dc\u00e1\u00e0\u00e2\u00e4\u00e3\u00e5\u00e7\u00e9\u00e8\u00ea\u00eb\u00ed\u00ec\u00ee\u00ef\u00f1\u00f3\u00f2\u00f4\u00f6\u00f5\u00fa\u00f9\u00fb\u00fc\u2020\u00b0\u00a2\u00a3\u00a7\u2022\u00b6\u00df\u00ae\u00a9\u2122\u00b4\u00a8\u2260\u00c6\u00d8\u221e\u00b1\u2264\u2265\u00a5\u00b5\u2202\u2211\u220f\u03c0\u222b\u00aa\u00ba\u03a9\u00e6\u00f8\u00bf\u00a1\u00ac\u221a\u0192\u2248\u2206\u00ab\u00bb\u2026\u00a0\u00c0\u00c3\u00d5\u0152\u0153\u2013\u2014\u201c\u201d\u2018\u2019\u00f7\u25ca\u00ff\u0178\u011e\u011f\u0130\u0131\u015e\u015f\u2021\u00b7\u201a\u201e\u2030\u00c2\u00ca\u00c1\u00cb\u00c8\u00cd\u00ce\u00cf\u00cc\u00d3\u00d4\uf8ff\u00d2\u00da\u00db\u00d9\uf8a0\u02c6\u02dc\u00af\u02d8\u02d9\u02da\u00b8\u02dd\u02db\u02c7"};
    d.MACSTRING = function(b, c, d, e) {
      e = q[e];
      if (void 0 !== e) {
        for (var f = "", h = 0; d > h; h++) {
          var g = b.getUint8(c + h);
          f += 127 >= g ? String.fromCharCode(g) : e[127 & g];
        }
        return f;
      }
    };
    var m = "function" == typeof WeakMap && new WeakMap, n;
    e.MACSTRING = function(b, c) {
      a: {
        if (!n) {
          for (d in n = {}, q) {
            n[d] = new String(d);
          }
        }
        var d = n[c];
        if (void 0 !== d) {
          if (m) {
            var e = m.get(d);
            if (void 0 !== e) {
              d = e;
              break a;
            }
          }
          c = q[c];
          if (void 0 !== c) {
            e = {};
            for (var f = 0; f < c.length; f++) {
              e[c.charCodeAt(f)] = f + 128;
            }
            d = (m && m.set(d, e), e);
            break a;
          }
        }
        d = void 0;
      }
      if (void 0 !== d) {
        c = [];
        for (e = 0; e < b.length; e++) {
          f = b.charCodeAt(e);
          if (128 <= f && (f = d[f], void 0 === f)) {
            return;
          }
          c[e] = f;
        }
        return c;
      }
    };
    r.MACSTRING = function(b, c) {
      b = e.MACSTRING(b, c);
      return void 0 !== b ? b.length : 0;
    };
    e.INDEX = function(b) {
      var c, d = 1, f = [d], h = [];
      for (c = 0; c < b.length; c += 1) {
        var g = e.OBJECT(b[c]);
        Array.prototype.push.apply(h, g);
        d += g.length;
        f.push(d);
      }
      if (0 === h.length) {
        return [0, 0];
      }
      g = [];
      d = 1 + Math.floor(Math.log(d) / Math.log(2)) / 8 | 0;
      var k = [void 0, e.BYTE, e.USHORT, e.UINT24, e.ULONG][d];
      for (c = 0; c < f.length; c += 1) {
        var m = k(f[c]);
        Array.prototype.push.apply(g, m);
      }
      return Array.prototype.concat(e.Card16(b.length), e.OffSize(d), g, h);
    };
    r.INDEX = function(b) {
      return e.INDEX(b).length;
    };
    e.DICT = function(b) {
      for (var c = [], d = Object.keys(b), f = d.length, h = 0; f > h; h += 1) {
        var g = parseInt(d[h], 0), k = b[g];
        c = c.concat(e.OPERAND(k.value, k.type));
        c = c.concat(e.OPERATOR(g));
      }
      return c;
    };
    r.DICT = function(b) {
      return e.DICT(b).length;
    };
    e.OPERATOR = function(b) {
      return 1200 > b ? [b] : [12, b - 1200];
    };
    e.OPERAND = function(b, c) {
      var d = [];
      if (Array.isArray(c)) {
        for (var h = 0; h < c.length; h += 1) {
          f.argument(b.length === c.length, "Not enough arguments given for type" + c), d = d.concat(e.OPERAND(b[h], c[h]));
        }
      } else {
        if ("SID" === c) {
          d = d.concat(e.NUMBER(b));
        } else {
          if ("offset" === c) {
            d = d.concat(e.NUMBER32(b));
          } else {
            if ("number" === c) {
              d = d.concat(e.NUMBER(b));
            } else {
              if ("real" !== c) {
                throw Error("Unknown operand type " + c);
              }
              d = d.concat(e.REAL(b));
            }
          }
        }
      }
      return d;
    };
    e.OP = e.BYTE;
    r.OP = r.BYTE;
    var c = "function" == typeof WeakMap && new WeakMap;
    e.CHARSTRING = function(b) {
      if (c) {
        var d = c.get(b);
        if (void 0 !== d) {
          return d;
        }
      }
      d = [];
      for (var f = b.length, h = 0; f > h; h += 1) {
        var g = b[h];
        d = d.concat(e[g.type](g.value));
      }
      return c && c.set(b, d), d;
    };
    r.CHARSTRING = function(b) {
      return e.CHARSTRING(b).length;
    };
    e.OBJECT = function(b) {
      var c = e[b.type];
      return f.argument(void 0 !== c, "No encoding function for type " + b.type), c(b.value);
    };
    r.OBJECT = function(b) {
      var c = r[b.type];
      return f.argument(void 0 !== c, "No sizeOf function for type " + b.type), c(b.value);
    };
    e.TABLE = function(b) {
      var c, d = [], h = b.fields.length, g = [], k = [];
      for (c = 0; h > c; c += 1) {
        var m = b.fields[c], n = e[m.type];
        f.argument(void 0 !== n, "No encoding function for field type " + m.type + " (" + m.name + ")");
        var q = b[m.name];
        void 0 === q && (q = m.value);
        n = n(q);
        "TABLE" === m.type ? (k.push(d.length), d = d.concat([0, 0]), g.push(n)) : d = d.concat(n);
      }
      for (c = 0; c < g.length; c += 1) {
        h = k[c], m = d.length, f.argument(65536 > m, "Table " + b.tableName + " too big."), d[h] = m >> 8, d[h + 1] = 255 & m, d = d.concat(g[c]);
      }
      return d;
    };
    r.TABLE = function(b) {
      for (var c = 0, d = b.fields.length, e = 0; d > e; e += 1) {
        var h = b.fields[e], g = r[h.type];
        f.argument(void 0 !== g, "No sizeOf function for field type " + h.type + " (" + h.name + ")");
        var k = b[h.name];
        void 0 === k && (k = h.value);
        c += g(k);
        "TABLE" === h.type && (c += 2);
      }
      return c;
    };
    e.RECORD = e.TABLE;
    r.RECORD = r.TABLE;
    e.LITERAL = function(b) {
      return b;
    };
    r.LITERAL = function(b) {
      return b.length;
    };
    b.decode = d;
    b.encode = e;
    b.sizeOf = r;
  }, {"./check":2}], 33:[function(d, k, b) {
    b.isBrowser = function() {
      return "undefined" != typeof window;
    };
    b.isNode = function() {
      return "undefined" == typeof window;
    };
    b.nodeBufferToArrayBuffer = function(b) {
      for (var d = new ArrayBuffer(b.length), e = new Uint8Array(d), g = 0; g < b.length; ++g) {
        e[g] = b[g];
      }
      return d;
    };
    b.arrayBufferToNodeBuffer = function(b) {
      var d = new Buffer(b.byteLength);
      b = new Uint8Array(b);
      for (var e = 0; e < d.length; ++e) {
        d[e] = b[e];
      }
      return d;
    };
    b.checkArgument = function(b, d) {
      if (!b) {
        throw d;
      }
    };
  }, {}]}, {}, [9])(9);
});
!function(a, d) {
  "object" == typeof exports && "object" == typeof module ? module.exports = d() : "function" == typeof define && define.amd ? define("chevrotain", [], d) : "object" == typeof exports ? exports.chevrotain = d() : a.chevrotain = d();
}("undefined" != typeof self ? self : this, function() {
  return function(a) {
    function d(b) {
      if (k[b]) {
        return k[b].exports;
      }
      var g = k[b] = {i:b, l:!1, exports:{}};
      return a[b].call(g.exports, g, g.exports, d), g.l = !0, g.exports;
    }
    var k = {};
    return d.m = a, d.c = k, d.d = function(a, g, f) {
      d.o(a, g) || Object.defineProperty(a, g, {enumerable:!0, get:f});
    }, d.r = function(a) {
      $jscomp.initSymbol();
      $jscomp.initSymbol();
      $jscomp.initSymbol();
      "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(a, Symbol.toStringTag, {value:"Module"});
      Object.defineProperty(a, "__esModule", {value:!0});
    }, d.t = function(a, g) {
      if ((1 & g && (a = d(a)), 8 & g) || 4 & g && "object" == typeof a && a && a.__esModule) {
        return a;
      }
      var b = Object.create(null);
      if (d.r(b), Object.defineProperty(b, "default", {enumerable:!0, value:a}), 2 & g && "string" != typeof a) {
        for (var e in a) {
          d.d(b, e, function(b) {
            return a[b];
          }.bind(null, e));
        }
      }
      return b;
    }, d.n = function(a) {
      var b = a && a.__esModule ? function() {
        return a.default;
      } : function() {
        return a;
      };
      return d.d(b, "a", b), b;
    }, d.o = function(a, d) {
      return Object.prototype.hasOwnProperty.call(a, d);
    }, d.p = "", d(d.s = 18);
  }([function(a, d, k) {
    function b(a) {
      return a && 0 === a.length;
    }
    function g(a) {
      return null == a ? [] : Object.keys(a);
    }
    function f(a) {
      for (var b = [], c = Object.keys(a), d = 0; d < c.length; d++) {
        b.push(a[c[d]]);
      }
      return b;
    }
    function e(a) {
      for (var b = [], c = 0; c < a.length; c++) {
        var d = a[c];
        Array.isArray(d) ? b = b.concat(e(d)) : b.push(d);
      }
      return b;
    }
    function r(a, b) {
      if (Array.isArray(a)) {
        for (var c = 0; c < a.length; c++) {
          b.call(null, a[c], c);
        }
      } else {
        if (!p(a)) {
          throw Error("non exhaustive match");
        }
        var d = g(a);
        for (c = 0; c < d.length; c++) {
          var e = d[c];
          b.call(null, a[e], e);
        }
      }
    }
    function q(a) {
      return void 0 === a;
    }
    function m(a, b) {
      var c = [];
      if (Array.isArray(a)) {
        for (var d = 0; d < a.length; d++) {
          var e = a[d];
          b.call(null, e) && c.push(e);
        }
      }
      return c;
    }
    function n(a, b) {
      return m(a, function(a) {
        return !b(a);
      });
    }
    function c(a, b) {
      return !!p(a) && a.hasOwnProperty(b);
    }
    function h(a, b) {
      return void 0 !== y(a, function(a) {
        return a === b;
      });
    }
    function t(a) {
      for (var b = [], c = 0; c < a.length; c++) {
        b.push(a[c]);
      }
      return b;
    }
    function z(a) {
      var b = {}, c;
      for (c in a) {
        Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
      }
      return b;
    }
    function y(a, b) {
      for (var c = 0; c < a.length; c++) {
        var d = a[c];
        if (b.call(null, d)) {
          return d;
        }
      }
    }
    function x(a, b, c) {
      var d = Array.isArray(a), e = d ? a : f(a);
      a = d ? [] : g(a);
      for (var h = 0; h < e.length; h++) {
        c = b.call(null, c, e[h], d ? h : a[h]);
      }
      return c;
    }
    function p(a) {
      return a instanceof Object;
    }
    function v(a) {
      for (var b = [], d = 1; d < arguments.length; d++) {
        b[d - 1] = arguments[d];
      }
      for (d = 0; d < b.length; d++) {
        var e = b[d];
        if (!q(e)) {
          for (var f = g(e), h = 0; h < f.length; h++) {
            var k = f[h];
            c(a, k) || (a[k] = e[k]);
          }
        }
      }
      return a;
    }
    Object.defineProperty(d, "__esModule", {value:!0});
    d.isEmpty = b;
    d.keys = g;
    d.values = f;
    d.mapValues = function(a, b) {
      for (var c = [], d = g(a), e = 0; e < d.length; e++) {
        var f = d[e];
        c.push(b.call(null, a[f], f));
      }
      return c;
    };
    d.map = function(a, b) {
      for (var c = [], d = 0; d < a.length; d++) {
        c.push(b.call(null, a[d], d));
      }
      return c;
    };
    d.flatten = e;
    d.first = function(a) {
      return b(a) ? void 0 : a[0];
    };
    d.last = function(a) {
      var b = a && a.length;
      return b ? a[b - 1] : void 0;
    };
    d.forEach = r;
    d.isString = function(a) {
      return "string" == typeof a;
    };
    d.isUndefined = q;
    d.isFunction = function(a) {
      return a instanceof Function;
    };
    d.drop = function(a, b) {
      return void 0 === b && (b = 1), a.slice(b, a.length);
    };
    d.dropRight = function(a, b) {
      return void 0 === b && (b = 1), a.slice(0, a.length - b);
    };
    d.filter = m;
    d.reject = n;
    d.pick = function(a, b) {
      for (var c = Object.keys(a), d = {}, e = 0; e < c.length; e++) {
        var f = c[e], h = a[f];
        b(h) && (d[f] = h);
      }
      return d;
    };
    d.has = c;
    d.contains = h;
    d.cloneArr = t;
    d.cloneObj = z;
    d.find = y;
    d.findAll = function(a, b) {
      for (var c = [], d = 0; d < a.length; d++) {
        var e = a[d];
        b.call(null, e) && c.push(e);
      }
      return c;
    };
    d.reduce = x;
    d.compact = function(a) {
      return n(a, function(a) {
        return null == a;
      });
    };
    d.uniq = function(a, b) {
      void 0 === b && (b = function(a) {
        return a;
      });
      var c = [];
      return x(a, function(a, d) {
        var e = b(d);
        return h(c, e) ? a : (c.push(e), a.concat(d));
      }, []);
    };
    d.partial = function(a) {
      for (var b = [], c = 1; c < arguments.length; c++) {
        b[c - 1] = arguments[c];
      }
      b = [null].concat(b);
      return Function.bind.apply(a, b);
    };
    d.isArray = function(a) {
      return Array.isArray(a);
    };
    d.isRegExp = function(a) {
      return a instanceof RegExp;
    };
    d.isObject = p;
    d.every = function(a, b) {
      for (var c = 0; c < a.length; c++) {
        if (!b(a[c], c)) {
          return !1;
        }
      }
      return !0;
    };
    d.difference = function(a, b) {
      return n(a, function(a) {
        return h(b, a);
      });
    };
    d.some = function(a, b) {
      for (var c = 0; c < a.length; c++) {
        if (b(a[c])) {
          return !0;
        }
      }
      return !1;
    };
    d.indexOf = function(a, b) {
      for (var c = 0; c < a.length; c++) {
        if (a[c] === b) {
          return c;
        }
      }
      return -1;
    };
    d.sortBy = function(a, b) {
      a = t(a);
      return a.sort(function(a, c) {
        return b(a) - b(c);
      }), a;
    };
    d.zipObject = function(a, b) {
      if (a.length !== b.length) {
        throw Error("can't zipObject with different number of keys and values!");
      }
      for (var c = {}, d = 0; d < a.length; d++) {
        c[a[d]] = b[d];
      }
      return c;
    };
    d.assign = function(a) {
      for (var b = [], c = 1; c < arguments.length; c++) {
        b[c - 1] = arguments[c];
      }
      for (c = 0; c < b.length; c++) {
        for (var d = b[c], e = g(d), f = 0; f < e.length; f++) {
          var h = e[f];
          a[h] = d[h];
        }
      }
      return a;
    };
    d.assignNoOverwrite = v;
    d.defaults = function() {
      for (var a = [], b = 0; b < arguments.length; b++) {
        a[b] = arguments[b];
      }
      return v.apply(null, [{}].concat(a));
    };
    d.groupBy = function(a, b) {
      var c = {};
      return r(a, function(a) {
        var d = b(a), e = c[d];
        e ? e.push(a) : c[d] = [a];
      }), c;
    };
    d.merge = function(a, b) {
      a = z(a);
      for (var c = g(b), d = 0; d < c.length; d++) {
        var e = c[d];
        a[e] = b[e];
      }
      return a;
    };
    d.NOOP = function() {
    };
    d.IDENTITY = function(a) {
      return a;
    };
    d.packArray = function(a) {
      for (var b = [], c = 0; c < a.length; c++) {
        var d = a[c];
        b.push(void 0 !== d ? d : void 0);
      }
      return b;
    };
    d.PRINT_ERROR = function(a) {
      console && console.error && console.error("Error: " + a);
    };
    d.PRINT_WARNING = function(a) {
      console && console.warn && console.warn("Warning: " + a);
    };
    d.isES2015MapSupported = function() {
      return "function" == typeof Map;
    };
    d.applyMixins = function(a, b) {
      b.forEach(function(b) {
        var c = b.prototype;
        Object.getOwnPropertyNames(c).forEach(function(d) {
          if ("constructor" !== d) {
            var e = Object.getOwnPropertyDescriptor(c, d);
            e && (e.get || e.set) ? Object.defineProperty(a.prototype, d, e) : a.prototype[d] = b.prototype[d];
          }
        });
      });
    };
    d.toFastProperties = function(a) {
      function b() {
      }
      b.prototype = a;
      new b;
      return a;
    };
  }, function(a, d, k) {
    function b(a) {
      function d(a) {
        return e.map(a, b);
      }
      if (a instanceof q) {
        return {type:"NonTerminal", name:a.nonTerminalName, idx:a.idx};
      }
      if (a instanceof n) {
        return {type:"Flat", definition:d(a.definition)};
      }
      if (a instanceof c) {
        return {type:"Option", idx:a.idx, definition:d(a.definition)};
      }
      if (a instanceof h) {
        return {type:"RepetitionMandatory", name:a.name, idx:a.idx, definition:d(a.definition)};
      }
      if (a instanceof t) {
        return {type:"RepetitionMandatoryWithSeparator", name:a.name, idx:a.idx, separator:b(new p({terminalType:a.separator})), definition:d(a.definition)};
      }
      if (a instanceof y) {
        return {type:"RepetitionWithSeparator", name:a.name, idx:a.idx, separator:b(new p({terminalType:a.separator})), definition:d(a.definition)};
      }
      if (a instanceof z) {
        return {type:"Repetition", name:a.name, idx:a.idx, definition:d(a.definition)};
      }
      if (a instanceof x) {
        return {type:"Alternation", name:a.name, idx:a.idx, definition:d(a.definition)};
      }
      if (a instanceof p) {
        var f = {type:"Terminal", name:r.tokenName(a.terminalType), label:r.tokenLabel(a.terminalType), idx:a.idx}, g = a.terminalType.PATTERN;
        return a.terminalType.PATTERN && (f.pattern = e.isRegExp(g) ? g.source : g), f;
      }
      if (a instanceof m) {
        return {type:"Rule", name:a.name, orgText:a.orgText, definition:d(a.definition)};
      }
      throw Error("non exhaustive match");
    }
    var g, f = this && this.__extends || (g = function(a, b) {
      return (g = Object.setPrototypeOf || {__proto__:[]} instanceof Array && function(a, b) {
        a.__proto__ = b;
      } || function(a, b) {
        for (var c in b) {
          b.hasOwnProperty(c) && (a[c] = b[c]);
        }
      })(a, b);
    }, function(a, b) {
      function c() {
        this.constructor = a;
      }
      g(a, b);
      a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c);
    });
    Object.defineProperty(d, "__esModule", {value:!0});
    var e = k(0), r = k(2);
    a = function() {
      function a(a) {
        this.definition = a;
      }
      return a.prototype.accept = function(a) {
        a.visit(this);
        e.forEach(this.definition, function(b) {
          b.accept(a);
        });
      }, a;
    }();
    d.AbstractProduction = a;
    var q = function(a) {
      function b(b) {
        var c = a.call(this, []) || this;
        return c.idx = 1, e.assign(c, e.pick(b, function(a) {
          return void 0 !== a;
        })), c;
      }
      return f(b, a), Object.defineProperty(b.prototype, "definition", {get:function() {
        return void 0 !== this.referencedRule ? this.referencedRule.definition : [];
      }, set:function(a) {
      }, enumerable:!0, configurable:!0}), b.prototype.accept = function(a) {
        a.visit(this);
      }, b;
    }(a);
    d.NonTerminal = q;
    var m = function(a) {
      function b(b) {
        var c = a.call(this, b.definition) || this;
        return c.orgText = "", e.assign(c, e.pick(b, function(a) {
          return void 0 !== a;
        })), c;
      }
      return f(b, a), b;
    }(a);
    d.Rule = m;
    var n = function(a) {
      function b(b) {
        var c = a.call(this, b.definition) || this;
        return e.assign(c, e.pick(b, function(a) {
          return void 0 !== a;
        })), c;
      }
      return f(b, a), b;
    }(a);
    d.Flat = n;
    var c = function(a) {
      function b(b) {
        var c = a.call(this, b.definition) || this;
        return c.idx = 1, e.assign(c, e.pick(b, function(a) {
          return void 0 !== a;
        })), c;
      }
      return f(b, a), b;
    }(a);
    d.Option = c;
    var h = function(a) {
      function b(b) {
        var c = a.call(this, b.definition) || this;
        return c.idx = 1, e.assign(c, e.pick(b, function(a) {
          return void 0 !== a;
        })), c;
      }
      return f(b, a), b;
    }(a);
    d.RepetitionMandatory = h;
    var t = function(a) {
      function b(b) {
        var c = a.call(this, b.definition) || this;
        return c.idx = 1, e.assign(c, e.pick(b, function(a) {
          return void 0 !== a;
        })), c;
      }
      return f(b, a), b;
    }(a);
    d.RepetitionMandatoryWithSeparator = t;
    var z = function(a) {
      function b(b) {
        var c = a.call(this, b.definition) || this;
        return c.idx = 1, e.assign(c, e.pick(b, function(a) {
          return void 0 !== a;
        })), c;
      }
      return f(b, a), b;
    }(a);
    d.Repetition = z;
    var y = function(a) {
      function b(b) {
        var c = a.call(this, b.definition) || this;
        return c.idx = 1, e.assign(c, e.pick(b, function(a) {
          return void 0 !== a;
        })), c;
      }
      return f(b, a), b;
    }(a);
    d.RepetitionWithSeparator = y;
    var x = function(a) {
      function b(b) {
        var c = a.call(this, b.definition) || this;
        return c.idx = 1, e.assign(c, e.pick(b, function(a) {
          return void 0 !== a;
        })), c;
      }
      return f(b, a), b;
    }(a);
    d.Alternation = x;
    var p = function() {
      function a(a) {
        this.idx = 1;
        e.assign(this, e.pick(a, function(a) {
          return void 0 !== a;
        }));
      }
      return a.prototype.accept = function(a) {
        a.visit(this);
      }, a;
    }();
    d.Terminal = p;
    d.serializeGrammar = function(a) {
      return e.map(a, b);
    };
    d.serializeProduction = b;
  }, function(a, d, k) {
    function b(a) {
      return e.isString(a.LABEL) && "" !== a.LABEL;
    }
    function g(a) {
      return e.isObject(a) && a.hasOwnProperty("tokenName") && e.isString(a.tokenName) ? a.tokenName : r.functionName(a);
    }
    function f(a) {
      var b = a.name, c = a.pattern, d = {};
      r.defineNameProp(d, b) || (d.tokenName = b);
      e.isUndefined(c) || (d.PATTERN = c);
      if (e.has(a, "parent")) {
        throw "The parent property is no longer supported.\nSee: https://github.com/SAP/chevrotain/issues/564#issuecomment-349062346 for details.";
      }
      e.has(a, "categories") && (d.CATEGORIES = a.categories);
      q.augmentTokenTypes([d]);
      e.has(a, "label") && (d.LABEL = a.label);
      e.has(a, "group") && (d.GROUP = a.group);
      e.has(a, "pop_mode") && (d.POP_MODE = a.pop_mode);
      e.has(a, "push_mode") && (d.PUSH_MODE = a.push_mode);
      e.has(a, "longer_alt") && (d.LONGER_ALT = a.longer_alt);
      e.has(a, "line_breaks") && (d.LINE_BREAKS = a.line_breaks);
      e.has(a, "start_chars_hint") && (d.START_CHARS_HINT = a.start_chars_hint);
      return d;
    }
    Object.defineProperty(d, "__esModule", {value:!0});
    var e = k(0), r = k(4);
    a = k(15);
    var q = k(7);
    d.tokenLabel = function(a) {
      return b(a) ? a.LABEL : g(a);
    };
    d.hasTokenLabel = b;
    d.tokenName = g;
    d.createToken = f;
    d.EOF = f({name:"EOF", pattern:a.Lexer.NA});
    q.augmentTokenTypes([d.EOF]);
    d.createTokenInstance = function(a, b, c, d, e, f, g, k) {
      return {image:b, startOffset:c, endOffset:d, startLine:e, endLine:f, startColumn:g, endColumn:k, tokenTypeIdx:a.tokenTypeIdx, tokenType:a};
    };
    d.tokenMatcher = function(a, b) {
      return q.tokenStructuredMatcher(a, b);
    };
  }, function(a, d, k) {
    var b, g = this && this.__extends || (b = function(a, c) {
      return (b = Object.setPrototypeOf || {__proto__:[]} instanceof Array && function(a, b) {
        a.__proto__ = b;
      } || function(a, b) {
        for (var c in b) {
          b.hasOwnProperty(c) && (a[c] = b[c]);
        }
      })(a, c);
    }, function(a, c) {
      function d() {
        this.constructor = a;
      }
      b(a, c);
      a.prototype = null === c ? Object.create(c) : (d.prototype = c.prototype, new d);
    });
    Object.defineProperty(d, "__esModule", {value:!0});
    var f = k(4), e = k(0), r = k(26), q = k(2), m = k(23), n = k(16), c = k(10), h = k(24);
    a = k(25);
    var t = k(31), z = k(32), y = k(34), x = k(35), p = k(36), v = k(37);
    k = k(38);
    d.END_OF_FILE = q.createTokenInstance(q.EOF, "", NaN, NaN, NaN, NaN, NaN, NaN);
    Object.freeze(d.END_OF_FILE);
    d.DEFAULT_PARSER_CONFIG = Object.freeze({recoveryEnabled:!1, maxLookahead:4, ignoredIssues:{}, dynamicTokensEnabled:!1, outputCst:!0, errorMessageProvider:c.defaultParserErrorProvider, serializedGrammar:null});
    d.DEFAULT_RULE_CONFIG = Object.freeze({recoveryValueFunc:function() {
    }, resyncEnabled:!0});
    (function(a) {
      a[a.INVALID_RULE_NAME = 0] = "INVALID_RULE_NAME";
      a[a.DUPLICATE_RULE_NAME = 1] = "DUPLICATE_RULE_NAME";
      a[a.INVALID_RULE_OVERRIDE = 2] = "INVALID_RULE_OVERRIDE";
      a[a.DUPLICATE_PRODUCTIONS = 3] = "DUPLICATE_PRODUCTIONS";
      a[a.UNRESOLVED_SUBRULE_REF = 4] = "UNRESOLVED_SUBRULE_REF";
      a[a.LEFT_RECURSION = 5] = "LEFT_RECURSION";
      a[a.NONE_LAST_EMPTY_ALT = 6] = "NONE_LAST_EMPTY_ALT";
      a[a.AMBIGUOUS_ALTS = 7] = "AMBIGUOUS_ALTS";
      a[a.CONFLICT_TOKENS_RULES_NAMESPACE = 8] = "CONFLICT_TOKENS_RULES_NAMESPACE";
      a[a.INVALID_TOKEN_NAME = 9] = "INVALID_TOKEN_NAME";
      a[a.INVALID_NESTED_RULE_NAME = 10] = "INVALID_NESTED_RULE_NAME";
      a[a.DUPLICATE_NESTED_NAME = 11] = "DUPLICATE_NESTED_NAME";
      a[a.NO_NON_EMPTY_LOOKAHEAD = 12] = "NO_NON_EMPTY_LOOKAHEAD";
      a[a.AMBIGUOUS_PREFIX_ALTS = 13] = "AMBIGUOUS_PREFIX_ALTS";
      a[a.TOO_MANY_ALTS = 14] = "TOO_MANY_ALTS";
    })(d.ParserDefinitionErrorType || (d.ParserDefinitionErrorType = {}));
    d.EMPTY_ALT = function(a) {
      return void 0 === a && (a = void 0), function() {
        return a;
      };
    };
    q = function() {
      function a(a, b) {
        void 0 === b && (b = d.DEFAULT_PARSER_CONFIG);
        this.ignoredIssues = d.DEFAULT_PARSER_CONFIG.ignoredIssues;
        this.definitionErrors = [];
        this.selfAnalysisDone = !1;
        this.initErrorHandler(b);
        this.initLexerAdapter();
        this.initLooksAhead(b);
        this.initRecognizerEngine(a, b);
        this.initRecoverable(b);
        this.initTreeBuilder(b);
        this.initContentAssist();
        this.ignoredIssues = e.has(b, "ignoredIssues") ? b.ignoredIssues : d.DEFAULT_PARSER_CONFIG.ignoredIssues;
        e.toFastProperties(this);
      }
      return a.performSelfAnalysis = function(a) {
        a.performSelfAnalysis();
      }, a.prototype.performSelfAnalysis = function() {
        var b, d = this;
        this.selfAnalysisDone = !0;
        var g = f.classNameFromInstance(this), k = this.gastProductionsCache;
        if (this.serializedGrammar) {
          var q = m.deserializeGrammar(this.serializedGrammar, this.tokensMap);
          e.forEach(q, function(a) {
            d.gastProductionsCache.put(a.name, a);
          });
        }
        q = h.resolveGrammar({rules:k.values()});
        if (this.definitionErrors.push.apply(this.definitionErrors, q), e.isEmpty(q)) {
          g = h.validateGrammar({rules:k.values(), maxLookahead:this.maxLookahead, tokenTypes:e.values(this.tokensMap), ignoredIssues:this.ignoredIssues, errMsgProvider:c.defaultGrammarValidatorErrorProvider, grammarName:g}), this.definitionErrors.push.apply(this.definitionErrors, g);
        }
        e.isEmpty(this.definitionErrors) && (this.resyncFollows = r.computeAllProdsFollows(k.values()));
        if (this.allRuleNames = n.analyzeCst(k.values(), this.fullRuleNameToShort).allRuleNames, !a.DEFER_DEFINITION_ERRORS_HANDLING && !e.isEmpty(this.definitionErrors)) {
          throw b = e.map(this.definitionErrors, function(a) {
            return a.message;
          }), Error("Parser Definition Errors detected:\n " + b.join("\n-------------------------------\n"));
        }
      }, a.DEFER_DEFINITION_ERRORS_HANDLING = !1, a;
    }();
    d.Parser = q;
    e.applyMixins(q, [a.Recoverable, t.LooksAhead, z.TreeBuilder, y.LexerAdapter, p.RecognizerEngine, x.RecognizerApi, v.ErrorHandler, k.ContentAssist]);
    a = function(a) {
      function b(b, c) {
        void 0 === c && (c = d.DEFAULT_PARSER_CONFIG);
        c = e.cloneObj(c);
        return c.outputCst = !0, a.call(this, b, c) || this;
      }
      return g(b, a), b;
    }(q);
    d.CstParser = a;
    a = function(a) {
      function b(b, c) {
        void 0 === c && (c = d.DEFAULT_PARSER_CONFIG);
        c = e.cloneObj(c);
        return c.outputCst = !1, a.call(this, b, c) || this;
      }
      return g(b, a), b;
    }(q);
    d.EmbeddedActionsParser = a;
  }, function(a, d, k) {
    function b(a) {
      return a.name || a.toString().match(f)[1];
    }
    Object.defineProperty(d, "__esModule", {value:!0});
    var g = k(0);
    d.classNameFromInstance = function(a) {
      return b(a.constructor);
    };
    var f = /^\s*function\s*(\S*)\s*\(/;
    d.functionName = b;
    d.defineNameProp = function(a, b) {
      var d = Object.getOwnPropertyDescriptor(a, "name");
      return !(!g.isUndefined(d) && !d.configurable || (Object.defineProperty(a, "name", {enumerable:!1, configurable:!0, writable:!1, value:b}), 0));
    };
    a = function() {
      function a() {
        this._state = {};
      }
      return a.prototype.keys = function() {
        return g.keys(this._state);
      }, a.prototype.values = function() {
        return g.values(this._state);
      }, a.prototype.put = function(a, b) {
        this._state[a] = b;
      }, a.prototype.putAll = function(a) {
        this._state = g.assign(this._state, a._state);
      }, a.prototype.get = function(a) {
        return this._state[a];
      }, a.prototype.containsKey = function(a) {
        return g.has(this._state, a);
      }, a.prototype.clear = function() {
        this._state = {};
      }, a;
    }();
    d.HashTable = a;
  }, function(a, d, k) {
    Object.defineProperty(d, "__esModule", {value:!0});
    var b = k(1);
    a = function() {
      function a() {
      }
      return a.prototype.visit = function(a) {
        if (a instanceof b.NonTerminal) {
          return this.visitNonTerminal(a);
        }
        if (a instanceof b.Flat) {
          return this.visitFlat(a);
        }
        if (a instanceof b.Option) {
          return this.visitOption(a);
        }
        if (a instanceof b.RepetitionMandatory) {
          return this.visitRepetitionMandatory(a);
        }
        if (a instanceof b.RepetitionMandatoryWithSeparator) {
          return this.visitRepetitionMandatoryWithSeparator(a);
        }
        if (a instanceof b.RepetitionWithSeparator) {
          return this.visitRepetitionWithSeparator(a);
        }
        if (a instanceof b.Repetition) {
          return this.visitRepetition(a);
        }
        if (a instanceof b.Alternation) {
          return this.visitAlternation(a);
        }
        if (a instanceof b.Terminal) {
          return this.visitTerminal(a);
        }
        if (a instanceof b.Rule) {
          return this.visitRule(a);
        }
        throw Error("non exhaustive match");
      }, a.prototype.visitNonTerminal = function(a) {
      }, a.prototype.visitFlat = function(a) {
      }, a.prototype.visitOption = function(a) {
      }, a.prototype.visitRepetition = function(a) {
      }, a.prototype.visitRepetitionMandatory = function(a) {
      }, a.prototype.visitRepetitionMandatoryWithSeparator = function(a) {
      }, a.prototype.visitRepetitionWithSeparator = function(a) {
      }, a.prototype.visitAlternation = function(a) {
      }, a.prototype.visitTerminal = function(a) {
      }, a.prototype.visitRule = function(a) {
      }, a;
    }();
    d.GAstVisitor = a;
  }, function(a, d, k) {
    function b(a, b, c) {
      this.name = "MismatchedTokenException";
      this.message = a;
      this.token = b;
      this.previousToken = c;
      this.resyncedTokens = [];
    }
    function g(a, b, c) {
      this.name = "NoViableAltException";
      this.message = a;
      this.token = b;
      this.previousToken = c;
      this.resyncedTokens = [];
    }
    function f(a, b) {
      this.name = "NotAllInputParsedException";
      this.message = a;
      this.token = b;
      this.resyncedTokens = [];
    }
    function e(a, b, c) {
      this.name = "EarlyExitException";
      this.message = a;
      this.token = b;
      this.previousToken = c;
      this.resyncedTokens = [];
    }
    Object.defineProperty(d, "__esModule", {value:!0});
    var r = k(0), q = ["MismatchedTokenException", "NoViableAltException", "EarlyExitException", "NotAllInputParsedException"];
    Object.freeze(q);
    d.isRecognitionException = function(a) {
      return r.contains(q, a.name);
    };
    d.MismatchedTokenException = b;
    b.prototype = Error.prototype;
    d.NoViableAltException = g;
    g.prototype = Error.prototype;
    d.NotAllInputParsedException = f;
    f.prototype = Error.prototype;
    d.EarlyExitException = e;
    e.prototype = Error.prototype;
  }, function(a, d, k) {
    function b(a) {
      for (var b = t.cloneArr(a), c = !0; c;) {
        a = t.compact(t.flatten(t.map(a, function(a) {
          return a.CATEGORIES;
        })));
        var d = t.difference(a, b);
        b = b.concat(d);
        t.isEmpty(d) ? c = !1 : a = d;
      }
      return b;
    }
    function g(a) {
      t.forEach(a, function(a) {
        q(a) || (d.tokenIdxToClass.put(d.tokenShortNameIdx, a), a.tokenTypeIdx = d.tokenShortNameIdx++);
        m(a) && !t.isArray(a.CATEGORIES) && (a.CATEGORIES = [a.CATEGORIES]);
        m(a) || (a.CATEGORIES = []);
        n(a) || (a.categoryMatches = []);
        c(a) || (a.categoryMatchesMap = {});
        h(a) || (a.tokenName = z.tokenName(a));
      });
    }
    function f(a) {
      t.forEach(a, function(a) {
        a.categoryMatches = [];
        t.forEach(a.categoryMatchesMap, function(b, c) {
          a.categoryMatches.push(d.tokenIdxToClass.get(c).tokenTypeIdx);
        });
      });
    }
    function e(a) {
      t.forEach(a, function(a) {
        r([], a);
      });
    }
    function r(a, b) {
      t.forEach(a, function(a) {
        b.categoryMatchesMap[a.tokenTypeIdx] = !0;
      });
      t.forEach(b.CATEGORIES, function(c) {
        var d = a.concat(b);
        t.contains(d, c) || r(d, c);
      });
    }
    function q(a) {
      return t.has(a, "tokenTypeIdx");
    }
    function m(a) {
      return t.has(a, "CATEGORIES");
    }
    function n(a) {
      return t.has(a, "categoryMatches");
    }
    function c(a) {
      return t.has(a, "categoryMatchesMap");
    }
    function h(a) {
      return t.has(a, "tokenName");
    }
    Object.defineProperty(d, "__esModule", {value:!0});
    var t = k(0);
    a = k(4);
    var z = k(2);
    d.tokenStructuredMatcher = function(a, b) {
      a = a.tokenTypeIdx;
      return a === b.tokenTypeIdx || !0 === b.isParent && !0 === b.categoryMatchesMap[a];
    };
    d.tokenStructuredMatcherNoCategories = function(a, b) {
      return a.tokenTypeIdx === b.tokenTypeIdx;
    };
    d.tokenShortNameIdx = 1;
    d.tokenIdxToClass = new a.HashTable;
    d.augmentTokenTypes = function(a) {
      a = b(a);
      g(a);
      e(a);
      f(a);
      t.forEach(a, function(a) {
        a.isParent = 0 < a.categoryMatches.length;
      });
    };
    d.expandCategories = b;
    d.assignTokenDefaultProps = g;
    d.assignCategoriesTokensProp = f;
    d.assignCategoriesMapProp = e;
    d.singleAssignCategoriesToksMap = r;
    d.hasShortKeyProperty = q;
    d.hasCategoriesProperty = m;
    d.hasExtendingTokensTypesProperty = n;
    d.hasExtendingTokensTypesMapProperty = c;
    d.hasTokenNameProperty = h;
    d.isTokenType = function(a) {
      return t.has(a, "tokenTypeIdx");
    };
  }, function(a, d, k) {
    var b, g = this && this.__extends || (b = function(a, d) {
      return (b = Object.setPrototypeOf || {__proto__:[]} instanceof Array && function(a, b) {
        a.__proto__ = b;
      } || function(a, b) {
        for (var c in b) {
          b.hasOwnProperty(c) && (a[c] = b[c]);
        }
      })(a, d);
    }, function(a, d) {
      function e() {
        this.constructor = a;
      }
      b(a, d);
      a.prototype = null === d ? Object.create(d) : (e.prototype = d.prototype, new e);
    });
    Object.defineProperty(d, "__esModule", {value:!0});
    var f = k(0), e = k(1);
    a = k(5);
    var r = k(2);
    d.isSequenceProd = function(a) {
      return a instanceof e.Flat || a instanceof e.Option || a instanceof e.Repetition || a instanceof e.RepetitionMandatory || a instanceof e.RepetitionMandatoryWithSeparator || a instanceof e.RepetitionWithSeparator || a instanceof e.Terminal || a instanceof e.Rule;
    };
    d.isOptionalProd = function c(a, b) {
      return void 0 === b && (b = []), !!(a instanceof e.Option || a instanceof e.Repetition || a instanceof e.RepetitionWithSeparator) || (a instanceof e.Alternation ? f.some(a.definition, function(a) {
        return c(a, b);
      }) : !(a instanceof e.NonTerminal && f.contains(b, a)) && a instanceof e.AbstractProduction && (a instanceof e.NonTerminal && b.push(a), f.every(a.definition, function(a) {
        return c(a, b);
      })));
    };
    d.isBranchingProd = function(a) {
      return a instanceof e.Alternation;
    };
    d.getProductionDslName = function(a) {
      if (a instanceof e.NonTerminal) {
        return "SUBRULE";
      }
      if (a instanceof e.Option) {
        return "OPTION";
      }
      if (a instanceof e.Alternation) {
        return "OR";
      }
      if (a instanceof e.RepetitionMandatory) {
        return "AT_LEAST_ONE";
      }
      if (a instanceof e.RepetitionMandatoryWithSeparator) {
        return "AT_LEAST_ONE_SEP";
      }
      if (a instanceof e.RepetitionWithSeparator) {
        return "MANY_SEP";
      }
      if (a instanceof e.Repetition) {
        return "MANY";
      }
      if (a instanceof e.Terminal) {
        return "CONSUME";
      }
      throw Error("non exhaustive match");
    };
    k = function(a) {
      function b() {
        var b = null !== a && a.apply(this, arguments) || this;
        return b.separator = "-", b.dslMethods = {option:[], alternation:[], repetition:[], repetitionWithSeparator:[], repetitionMandatory:[], repetitionMandatoryWithSeparator:[]}, b;
      }
      return g(b, a), b.prototype.visitTerminal = function(a) {
        var b = r.tokenName(a.terminalType) + this.separator + "Terminal";
        f.has(this.dslMethods, b) || (this.dslMethods[b] = []);
        this.dslMethods[b].push(a);
      }, b.prototype.visitNonTerminal = function(a) {
        var b = a.nonTerminalName + this.separator + "Terminal";
        f.has(this.dslMethods, b) || (this.dslMethods[b] = []);
        this.dslMethods[b].push(a);
      }, b.prototype.visitOption = function(a) {
        this.dslMethods.option.push(a);
      }, b.prototype.visitRepetitionWithSeparator = function(a) {
        this.dslMethods.repetitionWithSeparator.push(a);
      }, b.prototype.visitRepetitionMandatory = function(a) {
        this.dslMethods.repetitionMandatory.push(a);
      }, b.prototype.visitRepetitionMandatoryWithSeparator = function(a) {
        this.dslMethods.repetitionMandatoryWithSeparator.push(a);
      }, b.prototype.visitRepetition = function(a) {
        this.dslMethods.repetition.push(a);
      }, b.prototype.visitAlternation = function(a) {
        this.dslMethods.alternation.push(a);
      }, b;
    }(a.GAstVisitor);
    d.DslMethodsCollectorVisitor = k;
  }, function(a, d, k) {
    Object.defineProperty(d, "__esModule", {value:!0});
    d.BITS_FOR_METHOD_IDX = 4;
    d.BITS_FOR_OCCURRENCE_IDX = 4;
    d.BITS_FOR_RULE_IDX = 24;
    d.BITS_FOR_ALT_IDX = 8;
    d.OR_IDX = 1 << d.BITS_FOR_METHOD_IDX;
    d.OPTION_IDX = 2 << d.BITS_FOR_METHOD_IDX;
    d.MANY_IDX = 3 << d.BITS_FOR_METHOD_IDX;
    d.AT_LEAST_ONE_IDX = 4 << d.BITS_FOR_METHOD_IDX;
    d.MANY_SEP_IDX = 5 << d.BITS_FOR_METHOD_IDX;
    d.AT_LEAST_ONE_SEP_IDX = 6 << d.BITS_FOR_METHOD_IDX;
    d.getKeyForAutomaticLookahead = function(a, b, d) {
      return d | b | a;
    };
    var b = 32 - d.BITS_FOR_ALT_IDX;
    d.getKeyForAltIndex = function(a, d, e, k) {
      return e | d | a | k + 1 << b;
    };
  }, function(a, d, k) {
    Object.defineProperty(d, "__esModule", {value:!0});
    var b = k(2), g = k(0), f = k(0), e = k(1), r = k(8), q = k(11), m = k(17), n = k(3);
    d.defaultParserErrorProvider = {buildMismatchTokenMessage:function(a) {
      var c = a.expected, d = a.actual;
      a.previous;
      a.ruleName;
      return "Expecting " + (b.hasTokenLabel(c) ? "--\x3e " + b.tokenLabel(c) + " <--" : "token of type --\x3e " + b.tokenName(c) + " <--") + " but found --\x3e '" + d.image + "' <--";
    }, buildNotAllInputParsedMessage:function(a) {
      var b = a.firstRedundant;
      a.ruleName;
      return "Redundant input, expecting EOF but found: " + b.image;
    }, buildNoViableAltMessage:function(a) {
      var c = a.expectedPathsPerAlt, d = a.actual, e = (a.previous, a.customUserDescription);
      a = (a.ruleName, "\nbut found: '" + f.first(d).image + "'");
      if (e) {
        return "Expecting: " + e + a;
      }
      c = f.reduce(c, function(a, b) {
        return a.concat(b);
      }, []);
      c = f.map(c, function(a) {
        return "[" + f.map(a, function(a) {
          return b.tokenLabel(a);
        }).join(", ") + "]";
      });
      return "Expecting: one of these possible Token sequences:\n" + f.map(c, function(a, b) {
        return "  " + (b + 1) + ". " + a;
      }).join("\n") + a;
    }, buildEarlyExitMessage:function(a) {
      var c = a.expectedIterationPaths, d = a.actual, e = a.customUserDescription;
      a = (a.ruleName, "\nbut found: '" + f.first(d).image + "'");
      return e ? "Expecting: " + e + a : "Expecting: " + ("expecting at least one iteration which starts with one of these possible Token sequences::\n  <" + f.map(c, function(a) {
        return "[" + f.map(a, function(a) {
          return b.tokenLabel(a);
        }).join(",") + "]";
      }).join(" ,") + ">") + a;
    }};
    Object.freeze(d.defaultParserErrorProvider);
    d.defaultGrammarResolverErrorProvider = {buildRuleNotFoundError:function(a, b) {
      return "Invalid grammar, reference to a rule which is not defined: ->" + b.nonTerminalName + "<-\ninside top level rule: ->" + a.name + "<-";
    }};
    d.defaultGrammarValidatorErrorProvider = {buildDuplicateFoundError:function(a, d) {
      a = a.name;
      var c = f.first(d), h = c.idx, g = r.getProductionDslName(c);
      c = c instanceof e.Terminal ? b.tokenName(c.terminalType) : c instanceof e.NonTerminal ? c.nonTerminalName : "";
      return ("->" + g + "<- with numerical suffix: ->" + h + "<-\n                  " + (c ? "and argument: ->" + c + "<-" : "") + "\n                  appears more than once (" + d.length + " times) in the top level rule: ->" + a + "<-.\n                  " + (0 === h ? "Also note that numerical suffix 0 means " + g + " without any suffix." : "") + "\n                  To fix this make sure each usage of " + g + " " + (c ? "with the argument: ->" + c + "<-" : "") + "\n                  in the rule ->" + 
      a + "<- has a different occurrence index (0-5), as that combination acts as a unique\n                  position key in the grammar, which is needed by the parsing engine.\n                  \n                  For further details see: https://sap.github.io/chevrotain/docs/FAQ.html#NUMERICAL_SUFFIXES \n                  ").replace(/[ \t]+/g, " ").replace(/\s\s+/g, "\n");
    }, buildInvalidNestedRuleNameError:function(a, b) {
      return "Invalid nested rule name: ->" + b.name + "<- inside rule: ->" + a.name + "<-\nit must match the pattern: ->" + q.validNestedRuleName.toString() + "<-.\nNote that this means a nested rule name must start with the '$'(dollar) sign.";
    }, buildDuplicateNestedRuleNameError:function(a, b) {
      return "Duplicate nested rule name: ->" + f.first(b).name + "<- inside rule: ->" + a.name + "<-\nA nested name must be unique in the scope of a top level grammar rule.";
    }, buildNamespaceConflictError:function(a) {
      return "Namespace conflict found in grammar.\nThe grammar has both a Terminal(Token) and a Non-Terminal(Rule) named: <" + a.name + ">.\nTo resolve this make sure each Terminal and Non-Terminal names are unique\nThis is easy to accomplish by using the convention that Terminal names start with an uppercase letter\nand Non-Terminal names start with a lower case letter.";
    }, buildAlternationPrefixAmbiguityError:function(a) {
      var c = f.map(a.prefixPath, function(a) {
        return b.tokenLabel(a);
      }).join(", "), d = 0 === a.alternation.idx ? "" : a.alternation.idx;
      return "Ambiguous alternatives: <" + a.ambiguityIndices.join(" ,") + "> due to common lookahead prefix\nin <OR" + d + "> inside <" + a.topLevelRule.name + "> Rule,\n<" + c + "> may appears as a prefix path in all these alternatives.\nhttps://sap.github.io/chevrotain/docs/guide/resolving_grammar_errors.html#COMMON_PREFIX\nFor Further details.";
    }, buildAlternationAmbiguityError:function(a) {
      var c = f.map(a.prefixPath, function(a) {
        return b.tokenLabel(a);
      }).join(", "), d = 0 === a.alternation.idx ? "" : a.alternation.idx;
      a = "Ambiguous alternatives: <" + a.ambiguityIndices.join(" ,") + "> in <OR" + d + "> inside <" + a.topLevelRule.name + "> Rule,\n<" + c + "> may appears as a prefix path in all these alternatives.\n";
      c = m.VERSION.replace(/\./g, "_");
      return a = a + "To Resolve this, try one of of the following: \n1. Refactor your grammar to be LL(K) for the current value of k (by default k=" + n.DEFAULT_PARSER_CONFIG.maxLookahead + "})\n2. Increase the value of K for your grammar by providing a larger 'maxLookahead' value in the parser's config\n3. This issue can be ignored (if you know what you are doing...), see https://sap.github.io/chevrotain/documentation/" + c + "/interfaces/iparserconfig.html#ignoredissues for more details\n";
    }, buildEmptyRepetitionError:function(a) {
      var b = r.getProductionDslName(a.repetition);
      return 0 !== a.repetition.idx && (b += a.repetition.idx), "The repetition <" + b + "> within Rule <" + a.topLevelRule.name + "> can never consume any tokens.\nThis could lead to an infinite loop.";
    }, buildTokenNameError:function(a) {
      return "Invalid Grammar Token name: ->" + b.tokenName(a.tokenType) + "<- it must match the pattern: ->" + a.expectedPattern.toString() + "<-";
    }, buildEmptyAlternationError:function(a) {
      return "Ambiguous empty alternative: <" + (a.emptyChoiceIdx + 1) + "> in <OR" + a.alternation.idx + "> inside <" + a.topLevelRule.name + "> Rule.\nOnly the last alternative may be an empty alternative.";
    }, buildTooManyAlternativesError:function(a) {
      return "An Alternation cannot have more than 256 alternatives:\n<OR" + a.alternation.idx + "> inside <" + a.topLevelRule.name + "> Rule.\n has " + (a.alternation.definition.length + 1) + " alternatives.";
    }, buildLeftRecursionError:function(a) {
      var b = a.topLevelRule.name;
      return "Left Recursion found in grammar.\nrule: <" + b + "> can be invoked from itself (directly or indirectly)\nwithout consuming any Tokens. The grammar path that causes this is: \n " + (b + " --\x3e " + g.map(a.leftRecursionPath, function(a) {
        return a.name;
      }).concat([b]).join(" --\x3e ")) + "\n To fix this refactor your grammar to remove the left recursion.\nsee: https://en.wikipedia.org/wiki/LL_parser#Left_Factoring.";
    }, buildInvalidRuleNameError:function(a) {
      return "Invalid grammar rule name: ->" + a.topLevelRule.name + "<- it must match the pattern: ->" + a.expectedPattern.toString() + "<-";
    }, buildDuplicateRuleNameError:function(a) {
      return "Duplicate definition, rule: ->" + (a.topLevelRule instanceof e.Rule ? a.topLevelRule.name : a.topLevelRule) + "<- is already defined in the grammar: ->" + a.grammarName + "<-";
    }};
  }, function(a, d, k) {
    function b(a) {
      return A.getProductionDslName(a) + "_#_" + a.idx + "_#_" + g(a);
    }
    function g(a) {
      return a instanceof I.Terminal ? D.tokenName(a.terminalType) : a instanceof I.NonTerminal ? a.nonTerminalName : "";
    }
    function f(a, b) {
      var c = [], e = a.name;
      return e.match(d.validTermsPattern) || c.push({message:b.buildInvalidRuleNameError({topLevelRule:a, expectedPattern:d.validTermsPattern}), type:C.ParserDefinitionErrorType.INVALID_RULE_NAME, ruleName:e}), c;
    }
    function e(a, b, c) {
      var e, f = [];
      return b.name.match(d.validNestedRuleName) || (e = c.buildInvalidNestedRuleNameError(a, b), f.push({message:e, type:C.ParserDefinitionErrorType.INVALID_NESTED_RULE_NAME, ruleName:a.name})), f;
    }
    function r(a, b) {
      var c = [];
      return D.tokenName(a).match(d.validTermsPattern) || c.push({message:b.buildTokenNameError({tokenType:a, expectedPattern:d.validTermsPattern}), type:C.ParserDefinitionErrorType.INVALID_TOKEN_NAME}), c;
    }
    function q(a, b, c, d) {
      var e = [];
      1 < w.reduce(b, function(b, c) {
        return c.name === a.name ? b + 1 : b;
      }, 0) && (b = d.buildDuplicateRuleNameError({topLevelRule:a, grammarName:c}), e.push({message:b, type:C.ParserDefinitionErrorType.DUPLICATE_RULE_NAME, ruleName:a.name}));
      return e;
    }
    function m(a, b, c, d) {
      void 0 === d && (d = []);
      var e = [];
      b = n(b.definition);
      if (v.isEmpty(b)) {
        return [];
      }
      var f = a.name;
      v.contains(b, a) && e.push({message:c.buildLeftRecursionError({topLevelRule:a, leftRecursionPath:d}), type:C.ParserDefinitionErrorType.LEFT_RECURSION, ruleName:f});
      b = v.difference(b, d.concat([a]));
      b = v.map(b, function(b) {
        var e = v.cloneArr(d);
        return e.push(b), m(a, b, c, e);
      });
      return e.concat(v.flatten(b));
    }
    function n(a) {
      var b = [];
      if (v.isEmpty(a)) {
        return b;
      }
      var c = v.first(a);
      if (c instanceof I.NonTerminal) {
        b.push(c.referencedRule);
      } else {
        if (c instanceof I.Flat || c instanceof I.Option || c instanceof I.RepetitionMandatory || c instanceof I.RepetitionMandatoryWithSeparator || c instanceof I.RepetitionWithSeparator || c instanceof I.Repetition) {
          b = b.concat(n(c.definition));
        } else {
          if (c instanceof I.Alternation) {
            b = v.flatten(v.map(c.definition, function(a) {
              return n(a.definition);
            }));
          } else {
            if (!(c instanceof I.Terminal)) {
              throw Error("non exhaustive match");
            }
          }
        }
      }
      c = A.isOptionalProd(c);
      var d = 1 < a.length;
      return c && d ? (a = v.drop(a), b.concat(n(a))) : b;
    }
    function c(a, b) {
      var c = new J;
      a.accept(c);
      return v.reduce(c.alternations, function(c, d) {
        var e = v.dropRight(d.definition);
        e = v.map(e, function(c, e) {
          c = E.nextPossibleTokensAfter([c], [], null, 1);
          return v.isEmpty(c) ? {message:b.buildEmptyAlternationError({topLevelRule:a, alternation:d, emptyChoiceIdx:e}), type:C.ParserDefinitionErrorType.NONE_LAST_EMPTY_ALT, ruleName:a.name, occurrence:d.idx, alternative:e + 1} : null;
        });
        return c.concat(v.compact(e));
      }, []);
    }
    function h(a, b, c, d) {
      var e = new J;
      a.accept(e);
      e = e.alternations;
      var f = c[a.name];
      return f && (e = w.reject(e, function(a) {
        return f[A.getProductionDslName(a) + (0 === a.idx ? "" : a.idx)];
      })), v.reduce(e, function(c, e) {
        var f = F.getLookaheadPathsForOr(e.idx, a, b), h = function(a, b, c, d) {
          var e = [], f = w.reduce(a, function(b, c, d) {
            return w.forEach(c, function(c) {
              var f = [d];
              w.forEach(a, function(a, b) {
                d !== b && F.containsPath(a, c) && f.push(b);
              });
              1 < f.length && !F.containsPath(e, c) && (e.push(c), b.push({alts:f, path:c}));
            }), b;
          }, []);
          return v.map(f, function(a) {
            var e = w.map(a.alts, function(a) {
              return a + 1;
            });
            return {message:d.buildAlternationAmbiguityError({topLevelRule:c, alternation:b, ambiguityIndices:e, prefixPath:a.path}), type:C.ParserDefinitionErrorType.AMBIGUOUS_ALTS, ruleName:c.name, occurrence:b.idx, alternatives:[a.alts]};
          });
        }(f, e, a, d);
        e = y(f, e, a, d);
        return c.concat(h, e);
      }, []);
    }
    function t(a, b) {
      var c = new J;
      a.accept(c);
      return v.reduce(c.alternations, function(c, d) {
        return 255 < d.definition.length && c.push({message:b.buildTooManyAlternativesError({topLevelRule:a, alternation:d}), type:C.ParserDefinitionErrorType.TOO_MANY_ALTS, ruleName:a.name, occurrence:d.idx}), c;
      }, []);
    }
    function z(a, b, c) {
      var d = [];
      return w.forEach(a, function(a) {
        var e = new R;
        a.accept(e);
        w.forEach(e.allProductions, function(e) {
          var f = F.getProdType(e);
          f = F.getLookaheadPathsForOptionalProd(e.idx, a, f, b)[0];
          w.isEmpty(w.flatten(f)) && (e = c.buildEmptyRepetitionError({topLevelRule:a, repetition:e}), d.push({message:e, type:C.ParserDefinitionErrorType.NO_NON_EMPTY_LOOKAHEAD, ruleName:a.name}));
        });
      }), d;
    }
    function y(a, b, c, d) {
      var e = [], f = w.reduce(a, function(a, b, c) {
        b = w.map(b, function(a) {
          return {idx:c, path:a};
        });
        return a.concat(b);
      }, []);
      return w.forEach(f, function(a) {
        var h = a.idx, g = a.path;
        a = w.findAll(f, function(a) {
          return a.idx < h && F.isStrictPrefixOfPath(a.path, g);
        });
        a = w.map(a, function(a) {
          var e = [a.idx + 1, h + 1], f = 0 === b.idx ? "" : b.idx;
          return {message:d.buildAlternationPrefixAmbiguityError({topLevelRule:c, alternation:b, ambiguityIndices:e, prefixPath:a.path}), type:C.ParserDefinitionErrorType.AMBIGUOUS_PREFIX_ALTS, ruleName:c.name, occurrence:f, alternatives:e};
        });
        e = e.concat(a);
      }), e;
    }
    var x, p = this && this.__extends || (x = function(a, b) {
      return (x = Object.setPrototypeOf || {__proto__:[]} instanceof Array && function(a, b) {
        a.__proto__ = b;
      } || function(a, b) {
        for (var c in b) {
          b.hasOwnProperty(c) && (a[c] = b[c]);
        }
      })(a, b);
    }, function(a, b) {
      function c() {
        this.constructor = a;
      }
      x(a, b);
      a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c);
    });
    Object.defineProperty(d, "__esModule", {value:!0});
    var v = k(0), w = k(0), C = k(3), A = k(8), D = k(2), F = k(12), B = k(16), E = k(13), I = k(1);
    a = k(5);
    d.validateGrammar = function(a, d, k, n, p, y) {
      var x = v.map(a, function(a) {
        return function(a, c) {
          var d = new K;
          a.accept(d);
          d = v.groupBy(d.allProductions, b);
          d = v.pick(d, function(a) {
            return 1 < a.length;
          });
          return v.map(v.values(d), function(b) {
            var d = v.first(b);
            b = c.buildDuplicateFoundError(a, b);
            var e = A.getProductionDslName(d);
            b = {message:b, type:C.ParserDefinitionErrorType.DUPLICATE_PRODUCTIONS, ruleName:a.name, dslName:e, occurrence:d.idx};
            d = g(d);
            return d && (b.parameter = d), b;
          });
        }(a, p);
      }), H = v.map(a, function(a) {
        return m(a, a, p);
      }), E = [], F = [], L = [];
      w.every(H, w.isEmpty) && (E = w.map(a, function(a) {
        return c(a, p);
      }), F = w.map(a, function(a) {
        return h(a, d, n, p);
      }), L = z(a, d, p));
      var I = function(a, b, c) {
        var d = [], e = w.map(b, function(a) {
          return D.tokenName(a);
        });
        return w.forEach(a, function(a) {
          var b = a.name;
          w.contains(e, b) && (a = c.buildNamespaceConflictError(a), d.push({message:a, type:C.ParserDefinitionErrorType.CONFLICT_TOKENS_RULES_NAMESPACE, ruleName:b}));
        }), d;
      }(a, k, p);
      k = v.map(k, function(a) {
        return r(a, p);
      });
      var M = function(a, b) {
        var c = [];
        return w.forEach(a, function(a) {
          var d = new B.NamedDSLMethodsCollectorVisitor("");
          a.accept(d);
          d = w.map(d.result, function(a) {
            return a.orgProd;
          });
          c.push(w.map(d, function(c) {
            return e(a, c, b);
          }));
        }), w.flatten(c);
      }(a, p), J = function(a, b) {
        var c = [];
        return w.forEach(a, function(a) {
          var d = new B.NamedDSLMethodsCollectorVisitor("");
          a.accept(d);
          d = w.groupBy(d.result, function(a) {
            return a.name;
          });
          d = w.pick(d, function(a) {
            return 1 < a.length;
          });
          w.forEach(w.values(d), function(d) {
            d = w.map(d, function(a) {
              return a.orgProd;
            });
            d = b.buildDuplicateNestedRuleNameError(a, d);
            c.push({message:d, type:C.ParserDefinitionErrorType.DUPLICATE_NESTED_NAME, ruleName:a.name});
          });
        }), c;
      }(a, p), S = w.map(a, function(a) {
        return t(a, p);
      }), O = w.map(a, function(a) {
        return f(a, p);
      }), R = w.map(a, function(b) {
        return q(b, a, y, p);
      });
      return v.flatten(x.concat(k, M, J, L, H, E, F, I, S, O, R));
    };
    d.identifyProductionForDuplicates = b;
    var K = function(a) {
      function b() {
        var b = null !== a && a.apply(this, arguments) || this;
        return b.allProductions = [], b;
      }
      return p(b, a), b.prototype.visitNonTerminal = function(a) {
        this.allProductions.push(a);
      }, b.prototype.visitOption = function(a) {
        this.allProductions.push(a);
      }, b.prototype.visitRepetitionWithSeparator = function(a) {
        this.allProductions.push(a);
      }, b.prototype.visitRepetitionMandatory = function(a) {
        this.allProductions.push(a);
      }, b.prototype.visitRepetitionMandatoryWithSeparator = function(a) {
        this.allProductions.push(a);
      }, b.prototype.visitRepetition = function(a) {
        this.allProductions.push(a);
      }, b.prototype.visitAlternation = function(a) {
        this.allProductions.push(a);
      }, b.prototype.visitTerminal = function(a) {
        this.allProductions.push(a);
      }, b;
    }(a.GAstVisitor);
    d.OccurrenceValidationCollector = K;
    d.validTermsPattern = /^[a-zA-Z_]\w*$/;
    d.validNestedRuleName = new RegExp(d.validTermsPattern.source.replace("^", "^\\$"));
    d.validateRuleName = f;
    d.validateNestedRuleName = e;
    d.validateTokenName = r;
    d.validateRuleDoesNotAlreadyExist = q;
    d.validateRuleIsOverridden = function(a, b, c) {
      var d, e = [];
      return v.contains(b, a) || (d = "Invalid rule override, rule: ->" + a + "<- cannot be overridden in the grammar: ->" + c + "<-as it is not defined in any of the super grammars ", e.push({message:d, type:C.ParserDefinitionErrorType.INVALID_RULE_OVERRIDE, ruleName:a})), e;
    };
    d.validateNoLeftRecursion = m;
    d.getFirstNoneTerminal = n;
    var J = function(a) {
      function b() {
        var b = null !== a && a.apply(this, arguments) || this;
        return b.alternations = [], b;
      }
      return p(b, a), b.prototype.visitAlternation = function(a) {
        this.alternations.push(a);
      }, b;
    }(a.GAstVisitor);
    d.validateEmptyOrAlternative = c;
    d.validateAmbiguousAlternationAlternatives = h;
    var R = function(a) {
      function b() {
        var b = null !== a && a.apply(this, arguments) || this;
        return b.allProductions = [], b;
      }
      return p(b, a), b.prototype.visitRepetitionWithSeparator = function(a) {
        this.allProductions.push(a);
      }, b.prototype.visitRepetitionMandatory = function(a) {
        this.allProductions.push(a);
      }, b.prototype.visitRepetitionMandatoryWithSeparator = function(a) {
        this.allProductions.push(a);
      }, b.prototype.visitRepetition = function(a) {
        this.allProductions.push(a);
      }, b;
    }(a.GAstVisitor);
    d.RepetionCollector = R;
    d.validateTooManyAlts = t;
    d.validateSomeNonEmptyLookaheadPath = z;
    d.checkPrefixAlternativesAmbiguities = y;
  }, function(a, d, k) {
    function b(a, b) {
      function d(a, b) {
        return c.reduce(a, function(a, d, e) {
          return e !== b ? (d = c.map(d, function(a) {
            return a.partialPath;
          }), a.concat(d)) : a;
        }, []);
      }
      function f(a, b) {
        return void 0 === c.find(a, function(a) {
          return c.every(b, function(b, c) {
            return d = b, e = a[c], d === e || d && e && (d.categoryMatchesMap[e.tokenTypeIdx] || e.categoryMatchesMap[d.tokenTypeIdx]);
            var d, e;
          });
        });
      }
      function g(a) {
        for (var b = [], c = 0; c < a; c++) {
          b.push([]);
        }
        return b;
      }
      var k = c.map(a, function(a) {
        return h.possiblePathsFrom([a], 1);
      });
      a = g(k.length);
      for (var m = 1; m <= b; m++) {
        var n = k;
        k = g(n.length);
        for (var q = 0; q < n.length; q++) {
          for (var p = n[q], r = d(n, q), t = 0; t < p.length; t++) {
            var v = p[t].partialPath, z = p[t].suffixDef;
            f(r, v) || c.isEmpty(z) || v.length === b ? (z = a[q], e(z, v) || z.push(v)) : (v = h.possiblePathsFrom(z, m + 1, v), k[q] = k[q].concat(v));
          }
        }
      }
      return a;
    }
    function g(a, c, d) {
      a = new x(a, n.ALTERNATION);
      return c.accept(a), b(a.result, d);
    }
    function f(a, c, d, e) {
      var f = new x(a, d);
      c.accept(f);
      f = f.result;
      a = (new y(c, a, d)).startWalking();
      return b([new z.Flat({definition:f}), new z.Flat({definition:a})], e);
    }
    function e(a, b) {
      return void 0 !== c.find(a, function(a) {
        return b.length === a.length && c.every(b, function(b, c) {
          return b === a[c] || a[c].categoryMatchesMap[b.tokenTypeIdx];
        });
      });
    }
    function r(a) {
      return c.every(a, function(a) {
        return c.every(a, function(a) {
          return c.every(a, function(a) {
            return c.isEmpty(a.categoryMatches);
          });
        });
      });
    }
    var q, m = this && this.__extends || (q = function(a, b) {
      return (q = Object.setPrototypeOf || {__proto__:[]} instanceof Array && function(a, b) {
        a.__proto__ = b;
      } || function(a, b) {
        for (var c in b) {
          b.hasOwnProperty(c) && (a[c] = b[c]);
        }
      })(a, b);
    }, function(a, b) {
      function c() {
        this.constructor = a;
      }
      q(a, b);
      a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c);
    });
    Object.defineProperty(d, "__esModule", {value:!0});
    var n, c = k(0), h = k(13);
    a = k(14);
    var t = k(7), z = k(1);
    k = k(5);
    !function(a) {
      a[a.OPTION = 0] = "OPTION";
      a[a.REPETITION = 1] = "REPETITION";
      a[a.REPETITION_MANDATORY = 2] = "REPETITION_MANDATORY";
      a[a.REPETITION_MANDATORY_WITH_SEPARATOR = 3] = "REPETITION_MANDATORY_WITH_SEPARATOR";
      a[a.REPETITION_WITH_SEPARATOR = 4] = "REPETITION_WITH_SEPARATOR";
      a[a.ALTERNATION = 5] = "ALTERNATION";
    }(n = d.PROD_TYPE || (d.PROD_TYPE = {}));
    d.getProdType = function(a) {
      if (a instanceof z.Option) {
        return n.OPTION;
      }
      if (a instanceof z.Repetition) {
        return n.REPETITION;
      }
      if (a instanceof z.RepetitionMandatory) {
        return n.REPETITION_MANDATORY;
      }
      if (a instanceof z.RepetitionMandatoryWithSeparator) {
        return n.REPETITION_MANDATORY_WITH_SEPARATOR;
      }
      if (a instanceof z.RepetitionWithSeparator) {
        return n.REPETITION_WITH_SEPARATOR;
      }
      if (a instanceof z.Alternation) {
        return n.ALTERNATION;
      }
      throw Error("non exhaustive match");
    };
    d.buildLookaheadFuncForOr = function(a, b, c, d, e, f) {
      a = g(a, b, c);
      return f(a, d, r(a) ? t.tokenStructuredMatcherNoCategories : t.tokenStructuredMatcher, e);
    };
    d.buildLookaheadFuncForOptionalProd = function(a, b, c, d, e, h) {
      a = f(a, b, e, c);
      b = r(a) ? t.tokenStructuredMatcherNoCategories : t.tokenStructuredMatcher;
      return h(a[0], b, d);
    };
    d.buildAlternativesLookAheadFunc = function(a, b, d, e) {
      var f = a.length, h = c.every(a, function(a) {
        return c.every(a, function(a) {
          return 1 === a.length;
        });
      });
      if (b) {
        return function(b) {
          b = c.map(b, function(a) {
            return a.GATE;
          });
          for (var e = 0; e < f; e++) {
            var h = a[e], g = h.length, k = b[e];
            if (void 0 === k || !1 !== k.call(this)) {
              a: for (k = 0; k < g; k++) {
                for (var m = h[k], n = m.length, q = 0; q < n; q++) {
                  var p = this.LA(q + 1);
                  if (!1 === d(p, m[q])) {
                    continue a;
                  }
                }
                return e;
              }
            }
          }
        };
      }
      if (h && !e) {
        b = c.map(a, function(a) {
          return c.flatten(a);
        });
        var g = c.reduce(b, function(a, b, d) {
          return c.forEach(b, function(b) {
            c.has(a, b.tokenTypeIdx) || (a[b.tokenTypeIdx] = d);
            c.forEach(b.categoryMatches, function(b) {
              c.has(a, b) || (a[b] = d);
            });
          }), a;
        }, []);
        return function() {
          var a = this.LA(1);
          return g[a.tokenTypeIdx];
        };
      }
      return function() {
        for (var b = 0; b < f; b++) {
          var c = a[b], e = c.length, h = 0;
          a: for (; h < e; h++) {
            for (var g = c[h], k = g.length, m = 0; m < k; m++) {
              var n = this.LA(m + 1);
              if (!1 === d(n, g[m])) {
                continue a;
              }
            }
            return b;
          }
        }
      };
    };
    d.buildSingleAlternativeLookaheadFunction = function(a, b, d) {
      var e = c.every(a, function(a) {
        return 1 === a.length;
      }), f = a.length;
      if (e && !d) {
        d = c.flatten(a);
        if (1 === d.length && c.isEmpty(d[0].categoryMatches)) {
          var h = d[0].tokenTypeIdx;
          return function() {
            return this.LA(1).tokenTypeIdx === h;
          };
        }
        var g = c.reduce(d, function(a, b, d) {
          return a[b.tokenTypeIdx] = !0, c.forEach(b.categoryMatches, function(b) {
            a[b] = !0;
          }), a;
        }, []);
        return function() {
          var a = this.LA(1);
          return !0 === g[a.tokenTypeIdx];
        };
      }
      return function() {
        var c = 0;
        a: for (; c < f; c++) {
          for (var d = a[c], e = d.length, h = 0; h < e; h++) {
            var g = this.LA(h + 1);
            if (!1 === b(g, d[h])) {
              continue a;
            }
          }
          return !0;
        }
        return !1;
      };
    };
    var y = function(a) {
      function b(b, c, d) {
        var e = a.call(this) || this;
        return e.topProd = b, e.targetOccurrence = c, e.targetProdType = d, e;
      }
      return m(b, a), b.prototype.startWalking = function() {
        return this.walk(this.topProd), this.restDef;
      }, b.prototype.checkIsTarget = function(a, b, c, d) {
        return a.idx === this.targetOccurrence && this.targetProdType === b && (this.restDef = c.concat(d), !0);
      }, b.prototype.walkOption = function(b, c, d) {
        this.checkIsTarget(b, n.OPTION, c, d) || a.prototype.walkOption.call(this, b, c, d);
      }, b.prototype.walkAtLeastOne = function(b, c, d) {
        this.checkIsTarget(b, n.REPETITION_MANDATORY, c, d) || a.prototype.walkOption.call(this, b, c, d);
      }, b.prototype.walkAtLeastOneSep = function(b, c, d) {
        this.checkIsTarget(b, n.REPETITION_MANDATORY_WITH_SEPARATOR, c, d) || a.prototype.walkOption.call(this, b, c, d);
      }, b.prototype.walkMany = function(b, c, d) {
        this.checkIsTarget(b, n.REPETITION, c, d) || a.prototype.walkOption.call(this, b, c, d);
      }, b.prototype.walkManySep = function(b, c, d) {
        this.checkIsTarget(b, n.REPETITION_WITH_SEPARATOR, c, d) || a.prototype.walkOption.call(this, b, c, d);
      }, b;
    }(a.RestWalker), x = function(a) {
      function b(b, c) {
        var d = a.call(this) || this;
        return d.targetOccurrence = b, d.targetProdType = c, d.result = [], d;
      }
      return m(b, a), b.prototype.checkIsTarget = function(a, b) {
        a.idx === this.targetOccurrence && this.targetProdType === b && (this.result = a.definition);
      }, b.prototype.visitOption = function(a) {
        this.checkIsTarget(a, n.OPTION);
      }, b.prototype.visitRepetition = function(a) {
        this.checkIsTarget(a, n.REPETITION);
      }, b.prototype.visitRepetitionMandatory = function(a) {
        this.checkIsTarget(a, n.REPETITION_MANDATORY);
      }, b.prototype.visitRepetitionMandatoryWithSeparator = function(a) {
        this.checkIsTarget(a, n.REPETITION_MANDATORY_WITH_SEPARATOR);
      }, b.prototype.visitRepetitionWithSeparator = function(a) {
        this.checkIsTarget(a, n.REPETITION_WITH_SEPARATOR);
      }, b.prototype.visitAlternation = function(a) {
        this.checkIsTarget(a, n.ALTERNATION);
      }, b;
    }(k.GAstVisitor);
    d.lookAheadSequenceFromAlternatives = b;
    d.getLookaheadPathsForOr = g;
    d.getLookaheadPathsForOptionalProd = f;
    d.containsPath = e;
    d.isStrictPrefixOfPath = function(a, b) {
      return a.length < b.length && c.every(a, function(a, c) {
        c = b[c];
        return a === c || c.categoryMatchesMap[a.tokenTypeIdx];
      });
    };
    d.areTokenCategoriesNotUsed = r;
  }, function(a, d, k) {
    function b(a, b, d, f) {
      d = e.cloneArr(d);
      d.push(a.name);
      f = e.cloneArr(f);
      return f.push(1), {idx:b, def:a.definition, ruleStack:d, occurrenceStack:f};
    }
    var g, f = this && this.__extends || (g = function(a, b) {
      return (g = Object.setPrototypeOf || {__proto__:[]} instanceof Array && function(a, b) {
        a.__proto__ = b;
      } || function(a, b) {
        for (var c in b) {
          b.hasOwnProperty(c) && (a[c] = b[c]);
        }
      })(a, b);
    }, function(a, b) {
      function c() {
        this.constructor = a;
      }
      g(a, b);
      a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c);
    });
    Object.defineProperty(d, "__esModule", {value:!0});
    a = k(14);
    var e = k(0), r = k(2), q = k(21), m = k(1);
    k = function(a) {
      function b(b, c) {
        var d = a.call(this) || this;
        return d.topProd = b, d.path = c, d.possibleTokTypes = [], d.nextProductionName = "", d.nextProductionOccurrence = 0, d.found = !1, d.isAtEndOfPath = !1, d;
      }
      return f(b, a), b.prototype.startWalking = function() {
        if (this.found = !1, this.path.ruleStack[0] !== this.topProd.name) {
          throw Error("The path does not start with the walker's top Rule!");
        }
        return this.ruleStack = e.cloneArr(this.path.ruleStack).reverse(), this.occurrenceStack = e.cloneArr(this.path.occurrenceStack).reverse(), this.ruleStack.pop(), this.occurrenceStack.pop(), this.updateExpectedNext(), this.walk(this.topProd), this.possibleTokTypes;
      }, b.prototype.walk = function(b, c) {
        void 0 === c && (c = []);
        this.found || a.prototype.walk.call(this, b, c);
      }, b.prototype.walkProdRef = function(a, b, c) {
        a.referencedRule.name === this.nextProductionName && a.idx === this.nextProductionOccurrence && (b = b.concat(c), this.updateExpectedNext(), this.walk(a.referencedRule, b));
      }, b.prototype.updateExpectedNext = function() {
        e.isEmpty(this.ruleStack) ? (this.nextProductionName = "", this.nextProductionOccurrence = 0, this.isAtEndOfPath = !0) : (this.nextProductionName = this.ruleStack.pop(), this.nextProductionOccurrence = this.occurrenceStack.pop());
      }, b;
    }(a.RestWalker);
    d.AbstractNextPossibleTokensWalker = k;
    k = function(a) {
      function b(b, c) {
        b = a.call(this, b, c) || this;
        return b.path = c, b.nextTerminalName = "", b.nextTerminalOccurrence = 0, b.nextTerminalName = r.tokenName(b.path.lastTok), b.nextTerminalOccurrence = b.path.lastTokOccurrence, b;
      }
      return f(b, a), b.prototype.walkTerminal = function(a, b, c) {
        this.isAtEndOfPath && r.tokenName(a.terminalType) === this.nextTerminalName && a.idx === this.nextTerminalOccurrence && !this.found && (a = b.concat(c), a = new m.Flat({definition:a}), this.possibleTokTypes = q.first(a), this.found = !0);
      }, b;
    }(k);
    d.NextAfterTokenWalker = k;
    a = function(a) {
      function b(b, c) {
        var d = a.call(this) || this;
        return d.topRule = b, d.occurrence = c, d.result = {token:void 0, occurrence:void 0, isEndOfRule:void 0}, d;
      }
      return f(b, a), b.prototype.startWalking = function() {
        return this.walk(this.topRule), this.result;
      }, b;
    }(a.RestWalker);
    d.AbstractNextTerminalAfterProductionWalker = a;
    k = function(a) {
      function b() {
        return null !== a && a.apply(this, arguments) || this;
      }
      return f(b, a), b.prototype.walkMany = function(b, c, d) {
        b.idx === this.occurrence ? (b = e.first(c.concat(d)), this.result.isEndOfRule = void 0 === b, b instanceof m.Terminal && (this.result.token = b.terminalType, this.result.occurrence = b.idx)) : a.prototype.walkMany.call(this, b, c, d);
      }, b;
    }(a);
    d.NextTerminalAfterManyWalker = k;
    k = function(a) {
      function b() {
        return null !== a && a.apply(this, arguments) || this;
      }
      return f(b, a), b.prototype.walkManySep = function(b, c, d) {
        b.idx === this.occurrence ? (b = e.first(c.concat(d)), this.result.isEndOfRule = void 0 === b, b instanceof m.Terminal && (this.result.token = b.terminalType, this.result.occurrence = b.idx)) : a.prototype.walkManySep.call(this, b, c, d);
      }, b;
    }(a);
    d.NextTerminalAfterManySepWalker = k;
    k = function(a) {
      function b() {
        return null !== a && a.apply(this, arguments) || this;
      }
      return f(b, a), b.prototype.walkAtLeastOne = function(b, c, d) {
        b.idx === this.occurrence ? (b = e.first(c.concat(d)), this.result.isEndOfRule = void 0 === b, b instanceof m.Terminal && (this.result.token = b.terminalType, this.result.occurrence = b.idx)) : a.prototype.walkAtLeastOne.call(this, b, c, d);
      }, b;
    }(a);
    d.NextTerminalAfterAtLeastOneWalker = k;
    a = function(a) {
      function b() {
        return null !== a && a.apply(this, arguments) || this;
      }
      return f(b, a), b.prototype.walkAtLeastOneSep = function(b, c, d) {
        b.idx === this.occurrence ? (b = e.first(c.concat(d)), this.result.isEndOfRule = void 0 === b, b instanceof m.Terminal && (this.result.token = b.terminalType, this.result.occurrence = b.idx)) : a.prototype.walkAtLeastOneSep.call(this, b, c, d);
      }, b;
    }(a);
    d.NextTerminalAfterAtLeastOneSepWalker = a;
    d.possiblePathsFrom = function z(a, b, d) {
      function c(c) {
        c = z(c.concat(e.drop(a, h + 1)), b, d);
        return f.concat(c);
      }
      void 0 === d && (d = []);
      d = e.cloneArr(d);
      for (var f = [], h = 0; d.length < b && h < a.length;) {
        var g = a[h];
        if (g instanceof m.Flat || g instanceof m.NonTerminal) {
          return c(g.definition);
        }
        if (g instanceof m.Option) {
          f = c(g.definition);
        } else {
          if (g instanceof m.RepetitionMandatory) {
            return c(g = g.definition.concat([new m.Repetition({definition:g.definition})]));
          }
          if (g instanceof m.RepetitionMandatoryWithSeparator) {
            return c(g = [new m.Flat({definition:g.definition}), new m.Repetition({definition:[new m.Terminal({terminalType:g.separator})].concat(g.definition)})]);
          }
          if (g instanceof m.RepetitionWithSeparator) {
            g = g.definition.concat([new m.Repetition({definition:[new m.Terminal({terminalType:g.separator})].concat(g.definition)})]), f = c(g);
          } else {
            if (g instanceof m.Repetition) {
              g = g.definition.concat([new m.Repetition({definition:g.definition})]), f = c(g);
            } else {
              if (g instanceof m.Alternation) {
                return e.forEach(g.definition, function(a) {
                  f = c(a.definition);
                }), f;
              }
              if (!(g instanceof m.Terminal)) {
                throw Error("non exhaustive match");
              }
              d.push(g.terminalType);
            }
          }
        }
        h++;
      }
      return f.push({partialPath:d, suffixDef:e.drop(a, h)}), f;
    };
    d.nextPossibleTokensAfter = function(a, d, f, g) {
      var c = ["EXIT_NONE_TERMINAL"], h = !1, k = d.length;
      g = k - g - 1;
      var q = [], r = [];
      for (r.push({idx:-1, def:a, ruleStack:[], occurrenceStack:[]}); !e.isEmpty(r);) {
        var t = r.pop();
        if ("EXIT_ALTERNATIVE" !== t) {
          a = t.def;
          var z = t.idx, D = t.ruleStack, F = t.occurrenceStack;
          if (!e.isEmpty(a)) {
            if (t = a[0], "EXIT_NONE_TERMINAL" === t) {
              var B = {idx:z, def:e.drop(a), ruleStack:e.dropRight(D), occurrenceStack:e.dropRight(F)};
              r.push(B);
            } else {
              if (t instanceof m.Terminal) {
                if (z < k - 1) {
                  z += 1, f(d[z], t.terminalType) && (B = {idx:z, def:e.drop(a), ruleStack:D, occurrenceStack:F}, r.push(B));
                } else {
                  if (z !== k - 1) {
                    throw Error("non exhaustive match");
                  }
                  q.push({nextTokenType:t.terminalType, nextTokenOccurrence:t.idx, ruleStack:D, occurrenceStack:F});
                  h = !0;
                }
              } else {
                if (t instanceof m.NonTerminal) {
                  B = e.cloneArr(D), B.push(t.nonTerminalName), D = e.cloneArr(F), D.push(t.idx), B = {idx:z, def:t.definition.concat(c, e.drop(a)), ruleStack:B, occurrenceStack:D}, r.push(B);
                } else {
                  if (t instanceof m.Option) {
                    var E = {idx:z, def:e.drop(a), ruleStack:D, occurrenceStack:F};
                    r.push(E);
                    r.push("EXIT_ALTERNATIVE");
                    a = {idx:z, def:t.definition.concat(e.drop(a)), ruleStack:D, occurrenceStack:F};
                    r.push(a);
                  } else {
                    if (t instanceof m.RepetitionMandatory) {
                      B = new m.Repetition({definition:t.definition, idx:t.idx}), B = {idx:z, def:t.definition.concat([B], e.drop(a)), ruleStack:D, occurrenceStack:F}, r.push(B);
                    } else {
                      if (t instanceof m.RepetitionMandatoryWithSeparator) {
                        E = new m.Terminal({terminalType:t.separator}), B = new m.Repetition({definition:[E].concat(t.definition), idx:t.idx}), B = {idx:z, def:t.definition.concat([B], e.drop(a)), ruleStack:D, occurrenceStack:F}, r.push(B);
                      } else {
                        if (t instanceof m.RepetitionWithSeparator) {
                          E = {idx:z, def:e.drop(a), ruleStack:D, occurrenceStack:F}, r.push(E), r.push("EXIT_ALTERNATIVE"), E = new m.Terminal({terminalType:t.separator}), E = new m.Repetition({definition:[E].concat(t.definition), idx:t.idx}), a = {idx:z, def:t.definition.concat([E], e.drop(a)), ruleStack:D, occurrenceStack:F}, r.push(a);
                        } else {
                          if (t instanceof m.Repetition) {
                            E = {idx:z, def:e.drop(a), ruleStack:D, occurrenceStack:F}, r.push(E), r.push("EXIT_ALTERNATIVE"), E = new m.Repetition({definition:t.definition, idx:t.idx}), a = {idx:z, def:t.definition.concat([E], e.drop(a)), ruleStack:D, occurrenceStack:F}, r.push(a);
                          } else {
                            if (t instanceof m.Alternation) {
                              for (E = t.definition.length - 1; 0 <= E; E--) {
                                var I = {idx:z, def:t.definition[E].definition.concat(e.drop(a)), ruleStack:D, occurrenceStack:F};
                                r.push(I);
                                r.push("EXIT_ALTERNATIVE");
                              }
                            } else {
                              if (t instanceof m.Flat) {
                                r.push({idx:z, def:t.definition.concat(e.drop(a)), ruleStack:D, occurrenceStack:F});
                              } else {
                                if (!(t instanceof m.Rule)) {
                                  throw Error("non exhaustive match");
                                }
                                r.push(b(t, z, D, F));
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        } else {
          h && e.last(r).idx <= g && r.pop();
        }
      }
      return q;
    };
  }, function(a, d, k) {
    function b(a, b, d) {
      return [new f.Option({definition:[new f.Terminal({terminalType:a.separator})].concat(a.definition)})].concat(b, d);
    }
    Object.defineProperty(d, "__esModule", {value:!0});
    var g = k(0), f = k(1);
    a = function() {
      function a() {
      }
      return a.prototype.walk = function(a, b) {
        var d = this;
        void 0 === b && (b = []);
        g.forEach(a.definition, function(e, c) {
          c = g.drop(a.definition, c + 1);
          if (e instanceof f.NonTerminal) {
            d.walkProdRef(e, c, b);
          } else {
            if (e instanceof f.Terminal) {
              d.walkTerminal(e, c, b);
            } else {
              if (e instanceof f.Flat) {
                d.walkFlat(e, c, b);
              } else {
                if (e instanceof f.Option) {
                  d.walkOption(e, c, b);
                } else {
                  if (e instanceof f.RepetitionMandatory) {
                    d.walkAtLeastOne(e, c, b);
                  } else {
                    if (e instanceof f.RepetitionMandatoryWithSeparator) {
                      d.walkAtLeastOneSep(e, c, b);
                    } else {
                      if (e instanceof f.RepetitionWithSeparator) {
                        d.walkManySep(e, c, b);
                      } else {
                        if (e instanceof f.Repetition) {
                          d.walkMany(e, c, b);
                        } else {
                          if (!(e instanceof f.Alternation)) {
                            throw Error("non exhaustive match");
                          }
                          d.walkOr(e, c, b);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        });
      }, a.prototype.walkTerminal = function(a, b, d) {
      }, a.prototype.walkProdRef = function(a, b, d) {
      }, a.prototype.walkFlat = function(a, b, d) {
        b = b.concat(d);
        this.walk(a, b);
      }, a.prototype.walkOption = function(a, b, d) {
        b = b.concat(d);
        this.walk(a, b);
      }, a.prototype.walkAtLeastOne = function(a, b, d) {
        b = [new f.Option({definition:a.definition})].concat(b, d);
        this.walk(a, b);
      }, a.prototype.walkAtLeastOneSep = function(a, d, e) {
        d = b(a, d, e);
        this.walk(a, d);
      }, a.prototype.walkMany = function(a, b, d) {
        b = [new f.Option({definition:a.definition})].concat(b, d);
        this.walk(a, b);
      }, a.prototype.walkManySep = function(a, d, e) {
        d = b(a, d, e);
        this.walk(a, d);
      }, a.prototype.walkOr = function(a, b, d) {
        var e = this, c = b.concat(d);
        g.forEach(a.definition, function(a) {
          a = new f.Flat({definition:[a]});
          e.walk(a, c);
        });
      }, a;
    }();
    d.RestWalker = a;
  }, function(a, d, k) {
    Object.defineProperty(d, "__esModule", {value:!0});
    var b = k(27), g = k(0), f = k(7);
    a = k(20);
    !function(a) {
      a[a.MISSING_PATTERN = 0] = "MISSING_PATTERN";
      a[a.INVALID_PATTERN = 1] = "INVALID_PATTERN";
      a[a.EOI_ANCHOR_FOUND = 2] = "EOI_ANCHOR_FOUND";
      a[a.UNSUPPORTED_FLAGS_FOUND = 3] = "UNSUPPORTED_FLAGS_FOUND";
      a[a.DUPLICATE_PATTERNS_FOUND = 4] = "DUPLICATE_PATTERNS_FOUND";
      a[a.INVALID_GROUP_TYPE_FOUND = 5] = "INVALID_GROUP_TYPE_FOUND";
      a[a.PUSH_MODE_DOES_NOT_EXIST = 6] = "PUSH_MODE_DOES_NOT_EXIST";
      a[a.MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE = 7] = "MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE";
      a[a.MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY = 8] = "MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY";
      a[a.MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST = 9] = "MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST";
      a[a.LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED = 10] = "LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED";
      a[a.SOI_ANCHOR_FOUND = 11] = "SOI_ANCHOR_FOUND";
      a[a.EMPTY_MATCH_PATTERN = 12] = "EMPTY_MATCH_PATTERN";
      a[a.NO_LINE_BREAKS_FLAGS = 13] = "NO_LINE_BREAKS_FLAGS";
      a[a.UNREACHABLE_PATTERN = 14] = "UNREACHABLE_PATTERN";
      a[a.IDENTIFY_TERMINATOR = 15] = "IDENTIFY_TERMINATOR";
      a[a.CUSTOM_LINE_BREAK = 16] = "CUSTOM_LINE_BREAK";
    }(d.LexerDefinitionErrorType || (d.LexerDefinitionErrorType = {}));
    var e = {deferDefinitionErrorsHandling:!1, positionTracking:"full", lineTerminatorsPattern:/\n|\r\n?/g, lineTerminatorCharacters:["\n", "\r"], ensureOptimizations:!1, safeMode:!1, errorMessageProvider:a.defaultLexerErrorProvider};
    Object.freeze(e);
    a = function() {
      function a(a, d) {
        var k = this;
        if (void 0 === d && (d = e), this.lexerDefinition = a, this.lexerDefinitionErrors = [], this.lexerDefinitionWarning = [], this.patternIdxToConfig = {}, this.charCodeToPatternIdxToConfig = {}, this.modes = [], this.emptyGroups = {}, this.config = void 0, this.trackStartLines = !0, this.trackEndLines = !0, this.hasCustom = !1, this.canModeBeOptimized = {}, "boolean" == typeof d) {
          throw Error("The second argument to the Lexer constructor is now an ILexerConfig Object.\na boolean 2nd argument is no longer supported");
        }
        if (this.config = g.merge(e, d), this.config.lineTerminatorsPattern === e.lineTerminatorsPattern) {
          this.config.lineTerminatorsPattern = b.LineTerminatorOptimizedTester;
        } else {
          if (this.config.lineTerminatorCharacters === e.lineTerminatorCharacters) {
            throw Error("Error: Missing <lineTerminatorCharacters> property on the Lexer config.\n\tFor details See: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#MISSING_LINE_TERM_CHARS");
          }
        }
        if (d.safeMode && d.ensureOptimizations) {
          throw Error('"safeMode" and "ensureOptimizations" flags are mutually exclusive.');
        }
        this.trackStartLines = /full|onlyStart/i.test(this.config.positionTracking);
        this.trackEndLines = /full/i.test(this.config.positionTracking);
        var c, h = !0;
        g.isArray(a) ? ((c = {modes:{}}).modes[b.DEFAULT_MODE] = g.cloneArr(a), c[b.DEFAULT_MODE] = b.DEFAULT_MODE) : (h = !1, c = g.cloneObj(a));
        this.lexerDefinitionErrors = this.lexerDefinitionErrors.concat(b.performRuntimeChecks(c, this.trackStartLines, this.config.lineTerminatorCharacters));
        this.lexerDefinitionWarning = this.lexerDefinitionWarning.concat(b.performWarningRuntimeChecks(c, this.trackStartLines, this.config.lineTerminatorCharacters));
        c.modes = c.modes ? c.modes : {};
        g.forEach(c.modes, function(a, b) {
          c.modes[b] = g.reject(a, function(a) {
            return g.isUndefined(a);
          });
        });
        var m = g.keys(c.modes);
        if (g.forEach(c.modes, function(a, c) {
          if (k.modes.push(c), k.lexerDefinitionErrors = k.lexerDefinitionErrors.concat(b.validatePatterns(a, m)), g.isEmpty(k.lexerDefinitionErrors)) {
            f.augmentTokenTypes(a), a = b.analyzeTokenTypes(a, {lineTerminatorCharacters:k.config.lineTerminatorCharacters, positionTracking:d.positionTracking, ensureOptimizations:d.ensureOptimizations, safeMode:d.safeMode}), k.patternIdxToConfig[c] = a.patternIdxToConfig, k.charCodeToPatternIdxToConfig[c] = a.charCodeToPatternIdxToConfig, k.emptyGroups = g.merge(k.emptyGroups, a.emptyGroups), k.hasCustom = a.hasCustom || k.hasCustom, k.canModeBeOptimized[c] = a.canBeOptimized;
          }
        }), this.defaultMode = c.defaultMode, !g.isEmpty(this.lexerDefinitionErrors) && !this.config.deferDefinitionErrorsHandling) {
          throw a = g.map(this.lexerDefinitionErrors, function(a) {
            return a.message;
          }).join("-----------------------\n"), Error("Errors detected in definition of Lexer:\n" + a);
        }
        if (g.forEach(this.lexerDefinitionWarning, function(a) {
          g.PRINT_WARNING(a.message);
        }), b.SUPPORT_STICKY ? (this.chopInput = g.IDENTITY, this.match = this.matchWithTest) : (this.updateLastIndex = g.NOOP, this.match = this.matchWithExec), h && (this.handleModes = g.NOOP), !1 === this.trackStartLines && (this.computeNewColumn = g.IDENTITY), !1 === this.trackEndLines && (this.updateTokenEndLineColumnLocation = g.NOOP), /full/i.test(this.config.positionTracking)) {
          this.createTokenInstance = this.createFullToken;
        } else {
          if (/onlyStart/i.test(this.config.positionTracking)) {
            this.createTokenInstance = this.createStartOnlyToken;
          } else {
            if (!/onlyOffset/i.test(this.config.positionTracking)) {
              throw Error('Invalid <positionTracking> config option: "' + this.config.positionTracking + '"');
            }
            this.createTokenInstance = this.createOffsetOnlyToken;
          }
        }
        this.hasCustom ? this.addToken = this.addTokenUsingPush : this.addToken = this.addTokenUsingMemberAccess;
        a = g.reduce(this.canModeBeOptimized, function(a, b, c) {
          return !1 === b && a.push(c), a;
        }, []);
        if (d.ensureOptimizations && !g.isEmpty(a)) {
          throw Error("Lexer Modes: < " + a.join(", ") + ' > cannot be optimized.\n\t Disable the "ensureOptimizations" lexer config flag to silently ignore this and run the lexer in an un-optimized mode.\n\t Or inspect the console log for details on how to resolve these issues.');
        }
      }
      return a.prototype.tokenize = function(a, b) {
        if (void 0 === b && (b = this.defaultMode), !g.isEmpty(this.lexerDefinitionErrors)) {
          throw a = g.map(this.lexerDefinitionErrors, function(a) {
            return a.message;
          }).join("-----------------------\n"), Error("Unable to Tokenize because Errors detected in definition of Lexer:\n" + a);
        }
        return this.tokenizeInternal(a, b);
      }, a.prototype.tokenizeInternal = function(a, d) {
        function e(a) {
          S.push(a);
          M = this.charCodeToPatternIdxToConfig[a];
          H = this.patternIdxToConfig[a];
          L = L = H.length;
          a = this.canModeBeOptimized[a] && !1 === this.config.safeMode;
          Q = M && a ? function(a) {
            a = M[a];
            return void 0 === a ? O : a;
          } : function() {
            return H;
          };
        }
        var c, f, k, m, q, r, p, v = this, w = a, C = w.length, A = 0, D = 0, F = Array(this.hasCustom ? 0 : Math.floor(a.length / 10)), B = [], E = this.trackStartLines ? 1 : void 0, I = this.trackStartLines ? 1 : void 0, K = b.cloneEmptyGroups(this.emptyGroups), J = this.trackStartLines, R = this.config.lineTerminatorsPattern, L = 0, H = [], M = [], S = [], O = [];
        Object.freeze(O);
        var Z, Q = void 0, U = function(a) {
          if (1 === S.length && void 0 === a.tokenType.PUSH_MODE) {
            var b = v.config.errorMessageProvider.buildUnableToPopLexerModeMessage(a);
            B.push({offset:a.startOffset, line:void 0 !== a.startLine ? a.startLine : void 0, column:void 0 !== a.startColumn ? a.startColumn : void 0, length:a.image.length, message:b});
          } else {
            S.pop(), a = g.last(S), H = v.patternIdxToConfig[a], M = v.charCodeToPatternIdxToConfig[a], L = H.length, a = v.canModeBeOptimized[a] && !1 === v.config.safeMode, Q = M && a ? function(a) {
              a = M[a];
              return void 0 === a ? O : a;
            } : function() {
              return H;
            };
          }
        };
        for (e.call(this, d); A < C;) {
          d = null;
          var P = w.charCodeAt(A);
          var da = Q(P);
          var N = da.length;
          for (c = 0; c < N; c++) {
            var V = (Z = da[c]).pattern;
            if (!1 !== (ea = Z.short) ? P === ea && (d = V) : !0 === Z.isCustom ? d = null !== (p = V.exec(w, A, F, K)) ? p[0] : p : (this.updateLastIndex(V, A), d = this.match(V, a, A)), null !== d) {
              void 0 !== (V = Z.longerAlt) && (V = H[V], c = V.pattern, !0 === V.isCustom ? f = null !== (p = c.exec(w, A, F, K)) ? p[0] : p : (this.updateLastIndex(c, A), f = this.match(c, a, A)), f && f.length > d.length && (d = f, Z = V));
              break;
            }
          }
          if (null !== d) {
            if (k = d.length, void 0 !== (m = Z.group) && (q = Z.tokenTypeIdx, r = this.createTokenInstance(d, A, q, Z.tokenType, E, I, k), !1 === m ? D = this.addToken(F, D, r) : K[m].push(r)), a = this.chopInput(a, k), A += k, I = this.computeNewColumn(I, k), !0 === J && !0 === Z.canLineTerminator) {
              V = 0;
              P = c = void 0;
              R.lastIndex = 0;
              do {
                !0 === (c = R.test(d)) && (P = R.lastIndex - 1, V++);
              } while (c);
              0 !== V && (E += V, I = k - P, this.updateTokenEndLineColumnLocation(r, m, P, V, E, I, k));
            }
            this.handleModes(Z, U, e, r);
          } else {
            d = A;
            c = E;
            P = I;
            for (N = !1; !N && A < C;) {
              for (w.charCodeAt(A), a = this.chopInput(a, 1), A++, da = 0; da < L; da++) {
                var ea, ha = H[da];
                V = ha.pattern;
                if (!1 !== (ea = ha.short) ? w.charCodeAt(A) === ea && (N = !0) : !0 === ha.isCustom ? N = null !== V.exec(w, A, F, K) : (this.updateLastIndex(V, A), N = null !== V.exec(a)), !0 === N) {
                  break;
                }
              }
            }
            V = A - d;
            da = this.config.errorMessageProvider.buildUnexpectedCharactersMessage(w, d, V, c, P);
            B.push({offset:d, line:c, column:P, length:V, message:da});
          }
        }
        return this.hasCustom || (F.length = D), {tokens:F, groups:K, errors:B};
      }, a.prototype.handleModes = function(a, b, d, c) {
        !0 === a.pop ? (a = a.push, b(c), void 0 !== a && d.call(this, a)) : void 0 !== a.push && d.call(this, a.push);
      }, a.prototype.chopInput = function(a, b) {
        return a.substring(b);
      }, a.prototype.updateLastIndex = function(a, b) {
        a.lastIndex = b;
      }, a.prototype.updateTokenEndLineColumnLocation = function(a, b, d, c, e, f, g) {
        var h, k;
        void 0 !== b && (k = (h = d === g - 1) ? -1 : 0, 1 === c && !0 === h || (a.endLine = e + k, a.endColumn = f - 1 - k));
      }, a.prototype.computeNewColumn = function(a, b) {
        return a + b;
      }, a.prototype.createTokenInstance = function() {
        for (var a = 0; a < arguments.length; a++) {
        }
        return null;
      }, a.prototype.createOffsetOnlyToken = function(a, b, d, c) {
        return {image:a, startOffset:b, tokenTypeIdx:d, tokenType:c};
      }, a.prototype.createStartOnlyToken = function(a, b, d, c, e, f) {
        return {image:a, startOffset:b, startLine:e, startColumn:f, tokenTypeIdx:d, tokenType:c};
      }, a.prototype.createFullToken = function(a, b, d, c, e, f, g) {
        return {image:a, startOffset:b, endOffset:b + g - 1, startLine:e, endLine:e, startColumn:f, endColumn:f + g - 1, tokenTypeIdx:d, tokenType:c};
      }, a.prototype.addToken = function(a, b, d) {
        return 666;
      }, a.prototype.addTokenUsingPush = function(a, b, d) {
        return a.push(d), b;
      }, a.prototype.addTokenUsingMemberAccess = function(a, b, d) {
        return a[b] = d, ++b;
      }, a.prototype.match = function(a, b, d) {
        return null;
      }, a.prototype.matchWithTest = function(a, b, d) {
        return !0 === a.test(b) ? b.substring(d, a.lastIndex) : null;
      }, a.prototype.matchWithExec = function(a, b) {
        a = a.exec(b);
        return null !== a ? a[0] : a;
      }, a.SKIPPED = "This marks a skipped Token pattern, this means each token identified by it willbe consumed and then thrown into oblivion, this can be used to for example to completely ignore whitespace.", a.NA = /NOT_APPLICABLE/, a;
    }();
    d.Lexer = a;
  }, function(a, d, k) {
    var b, g = this && this.__extends || (b = function(a, c) {
      return (b = Object.setPrototypeOf || {__proto__:[]} instanceof Array && function(a, b) {
        a.__proto__ = b;
      } || function(a, b) {
        for (var c in b) {
          b.hasOwnProperty(c) && (a[c] = b[c]);
        }
      })(a, c);
    }, function(a, c) {
      function d() {
        this.constructor = a;
      }
      b(a, c);
      a.prototype = null === c ? Object.create(c) : (d.prototype = c.prototype, new d);
    });
    Object.defineProperty(d, "__esModule", {value:!0});
    var f = k(0), e = k(4), r = k(9), q = k(1);
    a = k(5);
    d.addTerminalToCst = function(a, b, d) {
      void 0 === a.children[d] ? a.children[d] = [b] : a.children[d].push(b);
    };
    d.addNoneTerminalToCst = function(a, b, d) {
      void 0 === a.children[b] ? a.children[b] = [d] : a.children[b].push(d);
    };
    var m = function(a) {
      function b(b) {
        var c = a.call(this) || this;
        return c.result = [], c.ruleIdx = b, c;
      }
      return g(b, a), b.prototype.collectNamedDSLMethod = function(a, b, c) {
        if (!f.isUndefined(a.name)) {
          if (a instanceof q.Option || a instanceof q.Repetition || a instanceof q.RepetitionMandatory || a instanceof q.Alternation) {
            b = new b({definition:a.definition, idx:a.idx});
          } else {
            if (!(a instanceof q.RepetitionMandatoryWithSeparator || a instanceof q.RepetitionWithSeparator)) {
              throw Error("non exhaustive match");
            }
            b = new b({definition:a.definition, idx:a.idx, separator:a.separator});
          }
          b = [b];
          c = r.getKeyForAutomaticLookahead(this.ruleIdx, c, a.idx);
          this.result.push({def:b, key:c, name:a.name, orgProd:a});
        }
      }, b.prototype.visitOption = function(a) {
        this.collectNamedDSLMethod(a, q.Option, r.OPTION_IDX);
      }, b.prototype.visitRepetition = function(a) {
        this.collectNamedDSLMethod(a, q.Repetition, r.MANY_IDX);
      }, b.prototype.visitRepetitionMandatory = function(a) {
        this.collectNamedDSLMethod(a, q.RepetitionMandatory, r.AT_LEAST_ONE_IDX);
      }, b.prototype.visitRepetitionMandatoryWithSeparator = function(a) {
        this.collectNamedDSLMethod(a, q.RepetitionMandatoryWithSeparator, r.AT_LEAST_ONE_SEP_IDX);
      }, b.prototype.visitRepetitionWithSeparator = function(a) {
        this.collectNamedDSLMethod(a, q.RepetitionWithSeparator, r.MANY_SEP_IDX);
      }, b.prototype.visitAlternation = function(a) {
        var b = this;
        this.collectNamedDSLMethod(a, q.Alternation, r.OR_IDX);
        var c = 1 < a.definition.length;
        f.forEach(a.definition, function(d, e) {
          if (!f.isUndefined(d.name)) {
            var h = c ? [new q.Option({definition:d.definition})] : d.definition;
            e = r.getKeyForAltIndex(b.ruleIdx, r.OR_IDX, a.idx, e);
            b.result.push({def:h, key:e, name:d.name, orgProd:d});
          }
        });
      }, b;
    }(a.GAstVisitor);
    d.NamedDSLMethodsCollectorVisitor = m;
    d.analyzeCst = function(a, b) {
      var c = {dictDef:new e.HashTable, allRuleNames:[]};
      return f.forEach(a, function(a) {
        var d = b.get(a.name);
        c.allRuleNames.push(a.name);
        d = new m(d);
        a.accept(d);
        f.forEach(d.result, function(b) {
          b.def;
          b.key;
          c.allRuleNames.push(a.name + b.name);
        });
      }), c;
    };
  }, function(a, d, k) {
    Object.defineProperty(d, "__esModule", {value:!0});
    d.VERSION = "4.6.0";
  }, function(a, d, k) {
    Object.defineProperty(d, "__esModule", {value:!0});
    d = k(3);
    var b = k(15), g = k(2), f = k(6), e = k(17), r = k(10), q = k(39), m = k(5), n = k(1), c = k(24), h = k(40);
    k = k(20);
    var t = {};
    t.VERSION = e.VERSION;
    t.Parser = d.Parser;
    t.CstParser = d.CstParser;
    t.EmbeddedActionsParser = d.EmbeddedActionsParser;
    t.ParserDefinitionErrorType = d.ParserDefinitionErrorType;
    t.Lexer = b.Lexer;
    t.LexerDefinitionErrorType = b.LexerDefinitionErrorType;
    t.EOF = g.EOF;
    t.tokenName = g.tokenName;
    t.tokenLabel = g.tokenLabel;
    t.tokenMatcher = g.tokenMatcher;
    t.createToken = g.createToken;
    t.createTokenInstance = g.createTokenInstance;
    t.EMPTY_ALT = d.EMPTY_ALT;
    t.defaultParserErrorProvider = r.defaultParserErrorProvider;
    t.isRecognitionException = f.isRecognitionException;
    t.EarlyExitException = f.EarlyExitException;
    t.MismatchedTokenException = f.MismatchedTokenException;
    t.NotAllInputParsedException = f.NotAllInputParsedException;
    t.NoViableAltException = f.NoViableAltException;
    t.defaultLexerErrorProvider = k.defaultLexerErrorProvider;
    t.Flat = n.Flat;
    t.Repetition = n.Repetition;
    t.RepetitionWithSeparator = n.RepetitionWithSeparator;
    t.RepetitionMandatory = n.RepetitionMandatory;
    t.RepetitionMandatoryWithSeparator = n.RepetitionMandatoryWithSeparator;
    t.Option = n.Option;
    t.Alternation = n.Alternation;
    t.NonTerminal = n.NonTerminal;
    t.Terminal = n.Terminal;
    t.Rule = n.Rule;
    t.GAstVisitor = m.GAstVisitor;
    t.serializeGrammar = n.serializeGrammar;
    t.serializeProduction = n.serializeProduction;
    t.resolveGrammar = c.resolveGrammar;
    t.defaultGrammarResolverErrorProvider = r.defaultGrammarResolverErrorProvider;
    t.validateGrammar = c.validateGrammar;
    t.defaultGrammarValidatorErrorProvider = r.defaultGrammarValidatorErrorProvider;
    t.assignOccurrenceIndices = c.assignOccurrenceIndices;
    t.clearCache = function() {
      console.warn("The clearCache function was 'soft' removed from the Chevrotain API.\n\t It performs no action other than printing this message.\n\t Please avoid using it as it will be completely removed in the future");
    };
    t.createSyntaxDiagramsCode = q.createSyntaxDiagramsCode;
    t.generateParserFactory = h.generateParserFactory;
    t.generateParserModule = h.generateParserModule;
    a.exports = t;
  }, function(a, d, k) {
    var b, g;
    "undefined" != typeof self && self;
    k = [];
    void 0 === (g = "function" == typeof(b = function() {
      function a() {
      }
      function b(a) {
        return a.charCodeAt(0);
      }
      function d(a, b) {
        void 0 !== a.length ? a.forEach(function(a) {
          b.push(a);
        }) : b.push(a);
      }
      function g(a, b) {
        if (!0 === a[b]) {
          throw "duplicate flag " + b;
        }
        a[b] = !0;
      }
      function k(a) {
        if (void 0 === a) {
          throw Error("Internal Error - Should never get here!");
        }
      }
      function n() {
      }
      a.prototype.saveState = function() {
        return {idx:this.idx, input:this.input, groupIdx:this.groupIdx};
      };
      a.prototype.restoreState = function(a) {
        this.idx = a.idx;
        this.input = a.input;
        this.groupIdx = a.groupIdx;
      };
      a.prototype.pattern = function(a) {
        this.idx = 0;
        this.input = a;
        this.groupIdx = 0;
        this.consumeChar("/");
        a = this.disjunction();
        this.consumeChar("/");
        for (var b = {type:"Flags", global:!1, ignoreCase:!1, multiLine:!1, unicode:!1, sticky:!1}; this.isRegExpFlag();) {
          switch(this.popChar()) {
            case "g":
              g(b, "global");
              break;
            case "i":
              g(b, "ignoreCase");
              break;
            case "m":
              g(b, "multiLine");
              break;
            case "u":
              g(b, "unicode");
              break;
            case "y":
              g(b, "sticky");
          }
        }
        if (this.idx !== this.input.length) {
          throw Error("Redundant input: " + this.input.substring(this.idx));
        }
        return {type:"Pattern", flags:b, value:a};
      };
      a.prototype.disjunction = function() {
        var a = [];
        for (a.push(this.alternative()); "|" === this.peekChar();) {
          this.consumeChar("|"), a.push(this.alternative());
        }
        return {type:"Disjunction", value:a};
      };
      a.prototype.alternative = function() {
        for (var a = []; this.isTerm();) {
          a.push(this.term());
        }
        return {type:"Alternative", value:a};
      };
      a.prototype.term = function() {
        return this.isAssertion() ? this.assertion() : this.atom();
      };
      a.prototype.assertion = function() {
        switch(this.popChar()) {
          case "^":
            return {type:"StartAnchor"};
          case "$":
            return {type:"EndAnchor"};
          case "\\":
            switch(this.popChar()) {
              case "b":
                return {type:"WordBoundary"};
              case "B":
                return {type:"NonWordBoundary"};
            }throw Error("Invalid Assertion Escape");
          case "(":
            switch(this.consumeChar("?"), this.popChar()) {
              case "=":
                var a = "Lookahead";
                break;
              case "!":
                a = "NegativeLookahead";
            }k(a);
            var b = this.disjunction();
            return this.consumeChar(")"), {type:a, value:b};
        }
        throw Error("Internal Error - Should never get here!");
      };
      a.prototype.quantifier = function(a) {
        switch(this.popChar()) {
          case "*":
            var b = {atLeast:0, atMost:1 / 0};
            break;
          case "+":
            b = {atLeast:1, atMost:1 / 0};
            break;
          case "?":
            b = {atLeast:0, atMost:1};
            break;
          case "{":
            var c = this.integerIncludingZero();
            switch(this.popChar()) {
              case "}":
                b = {atLeast:c, atMost:c};
                break;
              case ",":
                var d;
                this.isDigit() ? (d = this.integerIncludingZero(), b = {atLeast:c, atMost:d}) : b = {atLeast:c, atMost:1 / 0};
                this.consumeChar("}");
            }if (!0 === a && void 0 === b) {
              return;
            }
            k(b);
        }
        if (!0 !== a || void 0 !== b) {
          return k(b), "?" === this.peekChar(0) ? (this.consumeChar("?"), b.greedy = !1) : b.greedy = !0, b.type = "Quantifier", b;
        }
      };
      a.prototype.atom = function() {
        switch(this.peekChar()) {
          case ".":
            var a = this.dotAll();
            break;
          case "\\":
            a = this.atomEscape();
            break;
          case "[":
            a = this.characterClass();
            break;
          case "(":
            a = this.group();
        }
        return void 0 === a && this.isPatternCharacter() && (a = this.patternCharacter()), k(a), this.isQuantifier() && (a.quantifier = this.quantifier()), a;
      };
      a.prototype.dotAll = function() {
        return this.consumeChar("."), {type:"Set", complement:!0, value:[b("\n"), b("\r"), b("\u2028"), b("\u2029")]};
      };
      a.prototype.atomEscape = function() {
        switch(this.consumeChar("\\"), this.peekChar()) {
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9":
            return this.decimalEscapeAtom();
          case "d":
          case "D":
          case "s":
          case "S":
          case "w":
          case "W":
            return this.characterClassEscape();
          case "f":
          case "n":
          case "r":
          case "t":
          case "v":
            return this.controlEscapeAtom();
          case "c":
            return this.controlLetterEscapeAtom();
          case "0":
            return this.nulCharacterAtom();
          case "x":
            return this.hexEscapeSequenceAtom();
          case "u":
            return this.regExpUnicodeEscapeSequenceAtom();
          default:
            return this.identityEscapeAtom();
        }
      };
      a.prototype.decimalEscapeAtom = function() {
        return {type:"GroupBackReference", value:this.positiveInteger()};
      };
      a.prototype.characterClassEscape = function() {
        var a = !1;
        switch(this.popChar()) {
          case "d":
            var b = y;
            break;
          case "D":
            b = y;
            a = !0;
            break;
          case "s":
            b = p;
            break;
          case "S":
            b = p;
            a = !0;
            break;
          case "w":
            b = x;
            break;
          case "W":
            b = x, a = !0;
        }
        return k(b), {type:"Set", value:b, complement:a};
      };
      a.prototype.controlEscapeAtom = function() {
        switch(this.popChar()) {
          case "f":
            var a = b("\f");
            break;
          case "n":
            a = b("\n");
            break;
          case "r":
            a = b("\r");
            break;
          case "t":
            a = b("\t");
            break;
          case "v":
            a = b("\v");
        }
        return k(a), {type:"Character", value:a};
      };
      a.prototype.controlLetterEscapeAtom = function() {
        this.consumeChar("c");
        var a = this.popChar();
        if (!1 === /[a-zA-Z]/.test(a)) {
          throw Error("Invalid ");
        }
        return {type:"Character", value:a.toUpperCase().charCodeAt(0) - 64};
      };
      a.prototype.nulCharacterAtom = function() {
        return this.consumeChar("0"), {type:"Character", value:b("\x00")};
      };
      a.prototype.hexEscapeSequenceAtom = function() {
        return this.consumeChar("x"), this.parseHexDigits(2);
      };
      a.prototype.regExpUnicodeEscapeSequenceAtom = function() {
        return this.consumeChar("u"), this.parseHexDigits(4);
      };
      a.prototype.identityEscapeAtom = function() {
        var a = this.popChar();
        return {type:"Character", value:b(a)};
      };
      a.prototype.classPatternCharacterAtom = function() {
        switch(this.peekChar()) {
          case "\n":
          case "\r":
          case "\u2028":
          case "\u2029":
          case "\\":
          case "]":
            throw Error("TBD");
          default:
            var a = this.popChar();
            return {type:"Character", value:b(a)};
        }
      };
      a.prototype.characterClass = function() {
        var a = [], c = !1;
        this.consumeChar("[");
        for ("^" === this.peekChar(0) && (this.consumeChar("^"), c = !0); this.isClassAtom();) {
          var e = this.classAtom();
          if ("Character" === e.type && this.isRangeDash()) {
            this.consumeChar("-");
            var f = this.classAtom();
            if ("Character" === f.type) {
              if (f.value < e.value) {
                throw Error("Range out of order in character class");
              }
              a.push({from:e.value, to:f.value});
            } else {
              d(e.value, a), a.push(b("-")), d(f.value, a);
            }
          } else {
            d(e.value, a);
          }
        }
        return this.consumeChar("]"), {type:"Set", complement:c, value:a};
      };
      a.prototype.classAtom = function() {
        switch(this.peekChar()) {
          case "]":
          case "\n":
          case "\r":
          case "\u2028":
          case "\u2029":
            throw Error("TBD");
          case "\\":
            return this.classEscape();
          default:
            return this.classPatternCharacterAtom();
        }
      };
      a.prototype.classEscape = function() {
        switch(this.consumeChar("\\"), this.peekChar()) {
          case "b":
            return this.consumeChar("b"), {type:"Character", value:b("\b")};
          case "d":
          case "D":
          case "s":
          case "S":
          case "w":
          case "W":
            return this.characterClassEscape();
          case "f":
          case "n":
          case "r":
          case "t":
          case "v":
            return this.controlEscapeAtom();
          case "c":
            return this.controlLetterEscapeAtom();
          case "0":
            return this.nulCharacterAtom();
          case "x":
            return this.hexEscapeSequenceAtom();
          case "u":
            return this.regExpUnicodeEscapeSequenceAtom();
          default:
            return this.identityEscapeAtom();
        }
      };
      a.prototype.group = function() {
        var a = !0;
        switch(this.consumeChar("("), this.peekChar(0)) {
          case "?":
            this.consumeChar("?");
            this.consumeChar(":");
            a = !1;
            break;
          default:
            this.groupIdx++;
        }
        var b = this.disjunction();
        this.consumeChar(")");
        b = {type:"Group", capturing:a, value:b};
        return a && (b.idx = this.groupIdx), b;
      };
      a.prototype.positiveInteger = function() {
        var a = this.popChar();
        if (!1 === z.test(a)) {
          throw Error("Expecting a positive integer");
        }
        for (; t.test(this.peekChar(0));) {
          a += this.popChar();
        }
        return parseInt(a, 10);
      };
      a.prototype.integerIncludingZero = function() {
        var a = this.popChar();
        if (!1 === t.test(a)) {
          throw Error("Expecting an integer");
        }
        for (; t.test(this.peekChar(0));) {
          a += this.popChar();
        }
        return parseInt(a, 10);
      };
      a.prototype.patternCharacter = function() {
        var a = this.popChar();
        switch(a) {
          case "\n":
          case "\r":
          case "\u2028":
          case "\u2029":
          case "^":
          case "$":
          case "\\":
          case ".":
          case "*":
          case "+":
          case "?":
          case "(":
          case ")":
          case "[":
          case "|":
            throw Error("TBD");
          default:
            return {type:"Character", value:b(a)};
        }
      };
      a.prototype.isRegExpFlag = function() {
        switch(this.peekChar(0)) {
          case "g":
          case "i":
          case "m":
          case "u":
          case "y":
            return !0;
          default:
            return !1;
        }
      };
      a.prototype.isRangeDash = function() {
        return "-" === this.peekChar() && this.isClassAtom(1);
      };
      a.prototype.isDigit = function() {
        return t.test(this.peekChar(0));
      };
      a.prototype.isClassAtom = function(a) {
        switch(void 0 === a && (a = 0), this.peekChar(a)) {
          case "]":
          case "\n":
          case "\r":
          case "\u2028":
          case "\u2029":
            return !1;
          default:
            return !0;
        }
      };
      a.prototype.isTerm = function() {
        return this.isAtom() || this.isAssertion();
      };
      a.prototype.isAtom = function() {
        if (this.isPatternCharacter()) {
          return !0;
        }
        switch(this.peekChar(0)) {
          case ".":
          case "\\":
          case "[":
          case "(":
            return !0;
          default:
            return !1;
        }
      };
      a.prototype.isAssertion = function() {
        switch(this.peekChar(0)) {
          case "^":
          case "$":
            return !0;
          case "\\":
            switch(this.peekChar(1)) {
              case "b":
              case "B":
                return !0;
              default:
                return !1;
            }case "(":
            return "?" === this.peekChar(1) && ("=" === this.peekChar(2) || "!" === this.peekChar(2));
          default:
            return !1;
        }
      };
      a.prototype.isQuantifier = function() {
        var a = this.saveState();
        try {
          return void 0 !== this.quantifier(!0);
        } catch (w) {
          return !1;
        } finally {
          this.restoreState(a);
        }
      };
      a.prototype.isPatternCharacter = function() {
        switch(this.peekChar()) {
          case "^":
          case "$":
          case "\\":
          case ".":
          case "*":
          case "+":
          case "?":
          case "(":
          case ")":
          case "[":
          case "|":
          case "/":
          case "\n":
          case "\r":
          case "\u2028":
          case "\u2029":
            return !1;
          default:
            return !0;
        }
      };
      a.prototype.parseHexDigits = function(a) {
        for (var b = "", c = 0; c < a; c++) {
          var d = this.popChar();
          if (!1 === h.test(d)) {
            throw Error("Expecting a HexDecimal digits");
          }
          b += d;
        }
        return {type:"Character", value:parseInt(b, 16)};
      };
      a.prototype.peekChar = function(a) {
        return void 0 === a && (a = 0), this.input[this.idx + a];
      };
      a.prototype.popChar = function() {
        var a = this.peekChar(0);
        return this.consumeChar(), a;
      };
      a.prototype.consumeChar = function(a) {
        if (void 0 !== a && this.input[this.idx] !== a) {
          throw Error("Expected: '" + a + "' but found: '" + this.input[this.idx] + "' at offset: " + this.idx);
        }
        if (this.idx >= this.input.length) {
          throw Error("Unexpected end of input");
        }
        this.idx++;
      };
      var c, h = /[0-9a-fA-F]/, t = /[0-9]/, z = /[1-9]/, y = [];
      for (c = b("0"); c <= b("9"); c++) {
        y.push(c);
      }
      var x = [b("_")].concat(y);
      for (c = b("a"); c <= b("z"); c++) {
        x.push(c);
      }
      for (c = b("A"); c <= b("Z"); c++) {
        x.push(c);
      }
      var p = [b(" "), b("\f"), b("\n"), b("\r"), b("\t"), b("\v"), b("\t"), b("\u00a0"), b("\u1680"), b("\u2000"), b("\u2001"), b("\u2002"), b("\u2003"), b("\u2004"), b("\u2005"), b("\u2006"), b("\u2007"), b("\u2008"), b("\u2009"), b("\u200a"), b("\u2028"), b("\u2029"), b("\u202f"), b("\u205f"), b("\u3000"), b("\ufeff")];
      return n.prototype.visitChildren = function(a) {
        for (var b in a) {
          var c = a[b];
          a.hasOwnProperty(b) && (void 0 !== c.type ? this.visit(c) : Array.isArray(c) && c.forEach(function(a) {
            this.visit(a);
          }, this));
        }
      }, n.prototype.visit = function(a) {
        switch(a.type) {
          case "Pattern":
            this.visitPattern(a);
            break;
          case "Flags":
            this.visitFlags(a);
            break;
          case "Disjunction":
            this.visitDisjunction(a);
            break;
          case "Alternative":
            this.visitAlternative(a);
            break;
          case "StartAnchor":
            this.visitStartAnchor(a);
            break;
          case "EndAnchor":
            this.visitEndAnchor(a);
            break;
          case "WordBoundary":
            this.visitWordBoundary(a);
            break;
          case "NonWordBoundary":
            this.visitNonWordBoundary(a);
            break;
          case "Lookahead":
            this.visitLookahead(a);
            break;
          case "NegativeLookahead":
            this.visitNegativeLookahead(a);
            break;
          case "Character":
            this.visitCharacter(a);
            break;
          case "Set":
            this.visitSet(a);
            break;
          case "Group":
            this.visitGroup(a);
            break;
          case "GroupBackReference":
            this.visitGroupBackReference(a);
            break;
          case "Quantifier":
            this.visitQuantifier(a);
        }
        this.visitChildren(a);
      }, n.prototype.visitPattern = function(a) {
      }, n.prototype.visitFlags = function(a) {
      }, n.prototype.visitDisjunction = function(a) {
      }, n.prototype.visitAlternative = function(a) {
      }, n.prototype.visitStartAnchor = function(a) {
      }, n.prototype.visitEndAnchor = function(a) {
      }, n.prototype.visitWordBoundary = function(a) {
      }, n.prototype.visitNonWordBoundary = function(a) {
      }, n.prototype.visitLookahead = function(a) {
      }, n.prototype.visitNegativeLookahead = function(a) {
      }, n.prototype.visitCharacter = function(a) {
      }, n.prototype.visitSet = function(a) {
      }, n.prototype.visitGroup = function(a) {
      }, n.prototype.visitGroupBackReference = function(a) {
      }, n.prototype.visitQuantifier = function(a) {
      }, {RegExpParser:a, BaseRegExpVisitor:n, VERSION:"0.4.0"};
    }) ? b.apply(d, k) : b) || (a.exports = g);
  }, function(a, d, k) {
    Object.defineProperty(d, "__esModule", {value:!0});
    d.defaultLexerErrorProvider = {buildUnableToPopLexerModeMessage:function(a) {
      return "Unable to pop Lexer Mode after encountering Token ->" + a.image + "<- The Mode Stack is empty";
    }, buildUnexpectedCharactersMessage:function(a, d, f, e, k) {
      return "unexpected character: ->" + a.charAt(d) + "<- at offset: " + d + ", skipped " + f + " characters.";
    }};
  }, function(a, d, k) {
    function b(a) {
      if (a instanceof r.NonTerminal) {
        return b(a.referencedRule);
      }
      if (a instanceof r.Terminal) {
        return [a.terminalType];
      }
      if (q.isSequenceProd(a)) {
        return g(a);
      }
      if (q.isBranchingProd(a)) {
        return f(a);
      }
      throw Error("non exhaustive match");
    }
    function g(a) {
      var d = [];
      a = a.definition;
      var c = 0;
      var f = a.length > c;
      for (var g = !0; f && g;) {
        f = a[c], g = q.isOptionalProd(f), d = d.concat(b(f)), c += 1, f = a.length > c;
      }
      return e.uniq(d);
    }
    function f(a) {
      a = e.map(a.definition, function(a) {
        return b(a);
      });
      return e.uniq(e.flatten(a));
    }
    Object.defineProperty(d, "__esModule", {value:!0});
    var e = k(0), r = k(1), q = k(8);
    d.first = b;
    d.firstForSequence = g;
    d.firstForBranching = f;
    d.firstForTerminal = function(a) {
      return [a.terminalType];
    };
  }, function(a, d, k) {
    Object.defineProperty(d, "__esModule", {value:!0});
    d.IN = "_~IN~_";
  }, function(a, d, k) {
    function b(a, b, c) {
      switch(a.type) {
        case I.AT_LEAST_ONE:
          return function(a, b, c) {
            return g(ha, new R.RepetitionMandatory({definition:[]}), a, b, c);
          }(a, b, c);
        case I.AT_LEAST_ONE_SEP:
          return f(a, b, R.RepetitionMandatoryWithSeparator, V, c);
        case I.MANY_SEP:
          return f(a, b, R.RepetitionWithSeparator, da, c);
        case I.MANY:
          return function(a, b, c) {
            return g(U, new R.Repetition({definition:[]}), a, b, c);
          }(a, b, c);
        case I.OPTION:
          return function(a, b, c) {
            return g(Z, new R.Option({definition:[]}), a, b, c);
          }(a, b, c);
        case I.OR:
          return function(a, b, c) {
            return g(la, new R.Alternation({definition:[]}), a, b, c);
          }(a, b, c);
        case I.FLAT:
          return function(a, b, c) {
            var d = new R.Flat({definition:[]}), f = ka.exec(a.text)[1];
            J.isUndefined(f) || (d.name = f);
            return e(d, a.range, b, c);
          }(a, b, c);
        case I.REF:
          return function(a) {
            a = M.exec(a.text);
            var b = void 0 === a[1] ? 0 : parseInt(a[1], 10);
            return new R.NonTerminal({nonTerminalName:a[2], idx:b});
          }(a);
        case I.TERMINAL:
          return function(a, b) {
            var c = L.exec(a.text);
            a = void 0 === c[1] ? 0 : parseInt(c[1], 10);
            c = c[2];
            var e = d.terminalNameToConstructor[c];
            if (!e) {
              throw Error("Terminal Token name: <" + c + "> not found in rule: <" + b + ">  \n\tSee: https://sap.github.io/chevrotain/docs/guide/resolving_grammar_errors.html#TERMINAL_NAME_NOT_FOUND\n\tFor Further details.");
            }
            return new R.Terminal({terminalType:e, idx:a});
          }(a, c);
        default:
          throw Error("non exhaustive match");
      }
    }
    function g(a, b, c, d, f) {
      a = a.exec(c.text);
      b.idx = void 0 === a[1] ? 0 : parseInt(a[1], 10);
      a = a[2];
      return J.isUndefined(a) || (b.name = a), e(b, c.range, d, f);
    }
    function f(a, b, c, f, h) {
      f = f.exec(a.text);
      var g = void 0 === f[1] ? 0 : parseInt(f[1], 10), k = f[3], m = d.terminalNameToConstructor[k];
      if (!m) {
        throw Error("Separator Terminal Token name: " + k + " not found");
      }
      c = new c({definition:[], separator:m, idx:g});
      f = f[2];
      return J.isUndefined(f) || (c.name = f), e(c, a.range, b, h);
    }
    function e(a, c, d, e) {
      c = r(c, d);
      c = J.sortBy(c, function(a) {
        return a.range.start;
      });
      var f = [];
      return J.forEach(c, function(a) {
        f.push(b(a, d, e));
      }), a.definition = f, a;
    }
    function r(a, b) {
      return J.filter(b, function(c) {
        var d = a.strictlyContainsRange(c.range), e = J.every(b, function(b) {
          var d = b.range.strictlyContainsRange(c.range);
          b = b.range.isStrictlyContainedInRange(a);
          return !(d && b);
        });
        return d && e;
      });
    }
    function q(a) {
      return a.replace(ia, "").replace(sa, "");
    }
    function m(a, b) {
      return void 0 !== b ? a : "";
    }
    function n(a) {
      return a.replace(va, m).replace(Ja, m);
    }
    function c(a) {
      var b = h(a), c = t(a), d = z(a), e = y(a), f = x(a), g = p(a), k = v(a);
      a = w(a);
      return [].concat(b, c, d, e, f, g, k, a);
    }
    function h(a) {
      return A(a, I.TERMINAL, H);
    }
    function t(a) {
      return A(a, I.REF, S);
    }
    function z(a) {
      return D(a, I.AT_LEAST_ONE, W, ta);
    }
    function y(a) {
      return D(a, I.AT_LEAST_ONE_SEP, ea, ta);
    }
    function x(a) {
      return D(a, I.MANY, P, ta);
    }
    function p(a) {
      return D(a, I.MANY_SEP, N, ta);
    }
    function v(a) {
      return D(a, I.OPTION, Q, ta);
    }
    function w(a) {
      a = D(a, I.OR, X, ta);
      var b = C(a);
      return a.concat(b);
    }
    function C(a) {
      var b = [];
      return J.forEach(a, function(a) {
        var c = D(a.text, I.FLAT, T, Ga), d = a.range.start;
        J.forEach(c, function(a) {
          a.range.start += d;
          a.range.end += d;
        });
        b = b.concat(c);
      }), J.uniq(b, function(a) {
        return a.type + "~" + a.range.start + "~" + a.range.end + "~" + a.text;
      });
    }
    function A(a, b, c) {
      for (var d, e = []; d = c.exec(a);) {
        var f = new K.Range(d.index, c.lastIndex);
        e.push({range:f, text:d[0], type:b});
      }
      return e;
    }
    function D(a, b, c, d) {
      for (var e, f = []; e = c.exec(a);) {
        var h = e.index, g = d(h + e[0].length, a);
        e = new K.Range(h, g);
        h = a.substr(h, g - h + 1);
        f.push({range:e, text:h, type:b});
      }
      return f;
    }
    function F(a, b, c, d) {
      for (var e = [1], f = -1; !J.isEmpty(e) && f + c < d.length;) {
        f++;
        var h = d.charAt(c + f);
        h === a ? e.push(1) : h === b && e.pop();
      }
      if (J.isEmpty(e)) {
        return f + c;
      }
      throw Error("INVALID INPUT TEXT, UNTERMINATED PARENTHESIS");
    }
    function B(a, b) {
      return J.map(a, function(a) {
        return E(a, b);
      });
    }
    function E(a, b) {
      switch(a.type) {
        case "NonTerminal":
          return new R.NonTerminal({nonTerminalName:a.name, idx:a.idx});
        case "Flat":
          return new R.Flat({name:a.name, definition:B(a.definition, b)});
        case "Option":
          return new R.Option({name:a.name, idx:a.idx, definition:B(a.definition, b)});
        case "RepetitionMandatory":
          return new R.RepetitionMandatory({name:a.name, idx:a.idx, definition:B(a.definition, b)});
        case "RepetitionMandatoryWithSeparator":
          return new R.RepetitionMandatoryWithSeparator({name:a.name, idx:a.idx, separator:b[a.separator.name], definition:B(a.definition, b)});
        case "RepetitionWithSeparator":
          return new R.RepetitionWithSeparator({name:a.name, idx:a.idx, separator:b[a.separator.name], definition:B(a.definition, b)});
        case "Repetition":
          return new R.Repetition({name:a.name, idx:a.idx, definition:B(a.definition, b)});
        case "Alternation":
          return new R.Alternation({name:a.name, idx:a.idx, definition:B(a.definition, b)});
        case "Terminal":
          return new R.Terminal({terminalType:b[a.name], idx:a.idx});
        case "Rule":
          return new R.Rule({name:a.name, orgText:a.orgText, definition:B(a.definition, b)});
      }
    }
    Object.defineProperty(d, "__esModule", {value:!0});
    var I, K = k(29), J = k(0), R = k(1);
    !function(a) {
      a[a.OPTION = 0] = "OPTION";
      a[a.OR = 1] = "OR";
      a[a.MANY = 2] = "MANY";
      a[a.MANY_SEP = 3] = "MANY_SEP";
      a[a.AT_LEAST_ONE = 4] = "AT_LEAST_ONE";
      a[a.AT_LEAST_ONE_SEP = 5] = "AT_LEAST_ONE_SEP";
      a[a.REF = 6] = "REF";
      a[a.TERMINAL = 7] = "TERMINAL";
      a[a.FLAT = 8] = "FLAT";
    }(I = d.ProdType || (d.ProdType = {}));
    a = /(?:\s*{\s*NAME\s*:\s*["'`]([\w$]*)["'`])?/;
    k = new RegExp(a.source.replace("{", "").replace(")?", "\\s*,)?"));
    var L = /\.\s*CONSUME(\d+)?\s*\(\s*(?:[a-zA-Z_$]\w*\s*\.\s*)*([a-zA-Z_$]\w*)/, H = new RegExp(L.source, "g"), M = /\.\s*SUBRULE(\d+)?\s*\(\s*(?:[a-zA-Z_$]\w*\s*\.\s*)*([a-zA-Z_$]\w*)/, S = new RegExp(M.source, "g"), O = /\.\s*OPTION(\d+)?\s*\(/, Z = new RegExp(O.source + a.source), Q = new RegExp(O.source, "g");
    O = /\.\s*MANY(\d+)?\s*\(/;
    var U = new RegExp(O.source + a.source), P = new RegExp(O.source, "g");
    O = /\s*SEP\s*:\s*(?:[a-zA-Z_$]\w*\s*\.\s*)*([a-zA-Z_$]\w*)/;
    var da = new RegExp(/\.\s*MANY_SEP(\d+)?\s*\(\s*{/.source + k.source + O.source), N = new RegExp(da.source, "g"), V = new RegExp(/\.\s*AT_LEAST_ONE_SEP(\d+)?\s*\(\s*{/.source + k.source + O.source), ea = new RegExp(V.source, "g");
    O = /\.\s*AT_LEAST_ONE(\d+)?\s*\(/;
    var ha = new RegExp(O.source + a.source), W = new RegExp(O.source, "g");
    O = /\.\s*OR(\d+)?\s*\(/;
    var la = new RegExp(O.source + a.source), X = new RegExp(O.source, "g"), ka = new RegExp(k.source + /\s*(ALT)\s*:/.source), T = new RegExp(ka.source, "g");
    d.terminalNameToConstructor = {};
    d.buildTopProduction = function(a, b, f) {
      d.terminalNameToConstructor = f;
      f = c(n(q("  " + a)));
      var h = new K.Range(0, a.length + 2);
      return e(new R.Rule({name:b, definition:[], orgText:a}), h, f, b);
    };
    d.buildProdGast = b;
    d.getDirectlyContainedRanges = r;
    var ia = /\/\/.*/g, sa = /\/\*([^*]|[\r\n]|(\*+([^*\/]|[\r\n])))*\*+\//g, va = /(NAME\s*:\s*)?"([^\\"]|\\([bfnrtv"\\\/]|u[0-9a-fA-F]{4}))*"/g, Ja = /(NAME\s*:\s*)?'([^\\']|\\([bfnrtv'\\\/]|u[0-9a-fA-F]{4}))*'/g;
    d.removeComments = q;
    d.removeStringLiterals = n;
    d.createRanges = c;
    d.createTerminalRanges = h;
    d.createRefsRanges = t;
    d.createAtLeastOneRanges = z;
    d.createAtLeastOneSepRanges = y;
    d.createManyRanges = x;
    d.createManySepRanges = p;
    d.createOptionRanges = v;
    d.createOrRanges = w;
    var Ga = J.partial(F, "{", "}"), ta = J.partial(F, "(", ")");
    d.createOrPartRanges = C;
    d.findClosingOffset = F;
    d.deserializeGrammar = B;
    d.deserializeProduction = E;
  }, function(a, d, k) {
    Object.defineProperty(d, "__esModule", {value:!0});
    var b = k(0), g = k(4), f = k(30), e = k(11), r = k(10), q = k(8);
    d.resolveGrammar = function(a) {
      a = b.defaults(a, {errMsgProvider:r.defaultGrammarResolverErrorProvider});
      var d = new g.HashTable;
      return b.forEach(a.rules, function(a) {
        d.put(a.name, a);
      }), f.resolveGrammar(d, a.errMsgProvider);
    };
    d.validateGrammar = function(a) {
      return a = b.defaults(a, {errMsgProvider:r.defaultGrammarValidatorErrorProvider, ignoredIssues:{}}), e.validateGrammar(a.rules, a.maxLookahead, a.tokenTypes, a.ignoredIssues, a.errMsgProvider, a.grammarName);
    };
    d.assignOccurrenceIndices = function(a) {
      b.forEach(a.rules, function(a) {
        var c = new q.DslMethodsCollectorVisitor;
        a.accept(c);
        b.forEach(c.dslMethods, function(a) {
          b.forEach(a, function(a, b) {
            a.idx = b + 1;
          });
        });
      });
    };
  }, function(a, d, k) {
    function b(a) {
      this.name = d.IN_RULE_RECOVERY_EXCEPTION;
      this.message = a;
    }
    function g(a, b, d, e, g, k) {
      var c = this.getKeyForAutomaticLookahead(e, g);
      e = this.firstAfterRepMap.get(c);
      void 0 === e && (e = this.getCurrRuleFullName(), e = (new k(this.getGAstProductions().get(e), g)).startWalking(), this.firstAfterRepMap.put(c, e));
      g = e.token;
      k = e.occurrence;
      e = e.isEndOfRule;
      1 === this.RULE_STACK.length && e && void 0 === g && (g = f.EOF, k = 1);
      this.shouldInRepetitionRecoveryBeTried(g, k) && this.tryInRepetitionRecovery(a, b, d, g);
    }
    Object.defineProperty(d, "__esModule", {value:!0});
    var f = k(2), e = k(0), r = k(6), q = k(22), m = k(4), n = k(3);
    d.EOF_FOLLOW_KEY = {};
    d.IN_RULE_RECOVERY_EXCEPTION = "InRuleRecoveryException";
    d.InRuleRecoveryException = b;
    b.prototype = Error.prototype;
    a = function() {
      function a() {
      }
      return a.prototype.initRecoverable = function(a) {
        this.firstAfterRepMap = new m.HashTable;
        this.resyncFollows = new m.HashTable;
        (this.recoveryEnabled = e.has(a, "recoveryEnabled") ? a.recoveryEnabled : n.DEFAULT_PARSER_CONFIG.recoveryEnabled) && (this.attemptInRepetitionRecovery = g);
      }, a.prototype.getTokenToInsert = function(a) {
        a = f.createTokenInstance(a, "", NaN, NaN, NaN, NaN, NaN, NaN);
        return a.isInsertedInRecovery = !0, a;
      }, a.prototype.canTokenTypeBeInsertedInRecovery = function(a) {
        return !0;
      }, a.prototype.tryInRepetitionRecovery = function(a, b, c, d) {
        for (var f = this, g = this.findReSyncTokenType(), h = this.exportLexerState(), k = [], m = !1, n = this.LA(1), q = this.LA(1), t = function() {
          var a = f.LA(0);
          a = f.errorMessageProvider.buildMismatchTokenMessage({expected:d, actual:n, previous:a, ruleName:f.getCurrRuleFullName()});
          a = new r.MismatchedTokenException(a, n, f.LA(0));
          a.resyncedTokens = e.dropRight(k);
          f.SAVE_ERROR(a);
        }; !m;) {
          if (this.tokenMatcher(q, d)) {
            return void t();
          }
          if (c.call(this)) {
            return t(), void a.apply(this, b);
          }
          this.tokenMatcher(q, g) ? m = !0 : (q = this.SKIP_TOKEN(), this.addToResyncTokens(q, k));
        }
        this.importLexerState(h);
      }, a.prototype.shouldInRepetitionRecoveryBeTried = function(a, b) {
        return void 0 !== a && void 0 !== b && !this.tokenMatcher(this.LA(1), a) && !this.isBackTracking() && !this.canPerformInRuleRecovery(a, this.getFollowsForInRuleRecovery(a, b));
      }, a.prototype.getFollowsForInRuleRecovery = function(a, b) {
        a = this.getCurrentGrammarPath(a, b);
        return this.getNextPossibleTokenTypes(a);
      }, a.prototype.tryInRuleRecovery = function(a, c) {
        if (this.canRecoverWithSingleTokenInsertion(a, c)) {
          return this.getTokenToInsert(a);
        }
        if (this.canRecoverWithSingleTokenDeletion(a)) {
          return a = this.SKIP_TOKEN(), this.consumeToken(), a;
        }
        throw new b("sad sad panda");
      }, a.prototype.canPerformInRuleRecovery = function(a, b) {
        return this.canRecoverWithSingleTokenInsertion(a, b) || this.canRecoverWithSingleTokenDeletion(a);
      }, a.prototype.canRecoverWithSingleTokenInsertion = function(a, b) {
        var c = this;
        if (!this.canTokenTypeBeInsertedInRecovery(a) || e.isEmpty(b)) {
          return !1;
        }
        var d = this.LA(1);
        return void 0 !== e.find(b, function(a) {
          return c.tokenMatcher(d, a);
        });
      }, a.prototype.canRecoverWithSingleTokenDeletion = function(a) {
        return this.tokenMatcher(this.LA(2), a);
      }, a.prototype.isInCurrentRuleReSyncSet = function(a) {
        var b = this.getCurrFollowKey();
        b = this.getFollowSetFromFollowKey(b);
        return e.contains(b, a);
      }, a.prototype.findReSyncTokenType = function() {
        for (var a = this.flattenFollowSet(), b = this.LA(1), c = 2;;) {
          b = b.tokenType;
          if (e.contains(a, b)) {
            return b;
          }
          b = this.LA(c);
          c++;
        }
      }, a.prototype.getCurrFollowKey = function() {
        if (1 === this.RULE_STACK.length) {
          return d.EOF_FOLLOW_KEY;
        }
        var a = this.getLastExplicitRuleShortName(), b = this.getLastExplicitRuleOccurrenceIndex(), c = this.getPreviousExplicitRuleShortName();
        return {ruleName:this.shortRuleNameToFullName(a), idxInCallingRule:b, inRule:this.shortRuleNameToFullName(c)};
      }, a.prototype.buildFullFollowKeyStack = function() {
        var a = this, b = this.RULE_STACK, c = this.RULE_OCCURRENCE_STACK;
        return e.isEmpty(this.LAST_EXPLICIT_RULE_STACK) || (b = e.map(this.LAST_EXPLICIT_RULE_STACK, function(b) {
          return a.RULE_STACK[b];
        }), c = e.map(this.LAST_EXPLICIT_RULE_STACK, function(b) {
          return a.RULE_OCCURRENCE_STACK[b];
        })), e.map(b, function(e, f) {
          return 0 === f ? d.EOF_FOLLOW_KEY : {ruleName:a.shortRuleNameToFullName(e), idxInCallingRule:c[f], inRule:a.shortRuleNameToFullName(b[f - 1])};
        });
      }, a.prototype.flattenFollowSet = function() {
        var a = this, b = e.map(this.buildFullFollowKeyStack(), function(b) {
          return a.getFollowSetFromFollowKey(b);
        });
        return e.flatten(b);
      }, a.prototype.getFollowSetFromFollowKey = function(a) {
        return a === d.EOF_FOLLOW_KEY ? [f.EOF] : this.resyncFollows.get(a.ruleName + a.idxInCallingRule + q.IN + a.inRule);
      }, a.prototype.addToResyncTokens = function(a, b) {
        return this.tokenMatcher(a, f.EOF) || b.push(a), b;
      }, a.prototype.reSyncTo = function(a) {
        for (var b = [], c = this.LA(1); !1 === this.tokenMatcher(c, a);) {
          c = this.SKIP_TOKEN(), this.addToResyncTokens(c, b);
        }
        return e.dropRight(b);
      }, a.prototype.attemptInRepetitionRecovery = function(a, b, c, d, e, f) {
      }, a.prototype.getCurrentGrammarPath = function(a, b) {
        return {ruleStack:this.getHumanReadableRuleStack(), occurrenceStack:e.cloneArr(this.RULE_OCCURRENCE_STACK), lastTok:a, lastTokOccurrence:b};
      }, a.prototype.getHumanReadableRuleStack = function() {
        var a = this;
        return e.isEmpty(this.LAST_EXPLICIT_RULE_STACK) ? e.map(this.RULE_STACK, function(b) {
          return a.shortRuleNameToFullName(b);
        }) : e.map(this.LAST_EXPLICIT_RULE_STACK, function(b) {
          return a.shortRuleNameToFullName(a.RULE_STACK[b]);
        });
      }, a;
    }();
    d.Recoverable = a;
    d.attemptInRepetitionRecovery = g;
  }, function(a, d, k) {
    function b(a, b) {
      return a.name + b + m.IN;
    }
    var g, f = this && this.__extends || (g = function(a, b) {
      return (g = Object.setPrototypeOf || {__proto__:[]} instanceof Array && function(a, b) {
        a.__proto__ = b;
      } || function(a, b) {
        for (var c in b) {
          b.hasOwnProperty(c) && (a[c] = b[c]);
        }
      })(a, b);
    }, function(a, b) {
      function c() {
        this.constructor = a;
      }
      g(a, b);
      a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c);
    });
    Object.defineProperty(d, "__esModule", {value:!0});
    a = k(14);
    var e = k(4), r = k(21), q = k(0), m = k(22), n = k(2), c = k(1), h = function(a) {
      function d(b) {
        var c = a.call(this) || this;
        return c.topProd = b, c.follows = new e.HashTable, c;
      }
      return f(d, a), d.prototype.startWalking = function() {
        return this.walk(this.topProd), this.follows;
      }, d.prototype.walkTerminal = function(a, b, c) {
      }, d.prototype.walkProdRef = function(a, d, e) {
        a = b(a.referencedRule, a.idx) + this.topProd.name;
        d = d.concat(e);
        d = new c.Flat({definition:d});
        d = r.first(d);
        this.follows.put(a, d);
      }, d;
    }(a.RestWalker);
    d.ResyncFollowsWalker = h;
    d.computeAllProdsFollows = function(a) {
      var b = new e.HashTable;
      return q.forEach(a, function(a) {
        a = (new h(a)).startWalking();
        b.putAll(a);
      }), b;
    };
    d.buildBetweenProdsFollowPrefix = b;
    d.buildInProdFollowPrefix = function(a) {
      return n.tokenName(a.terminalType) + a.idx + m.IN;
    };
  }, function(a, d, k) {
    function b(a) {
      var b = E.filter(a, function(a) {
        return !E.has(a, "PATTERN");
      });
      return {errors:E.map(b, function(a) {
        return {message:"Token Type: ->" + F.tokenName(a) + "<- missing static 'PATTERN' property", type:B.LexerDefinitionErrorType.MISSING_PATTERN, tokenTypes:[a]};
      }), valid:E.difference(a, b)};
    }
    function g(a) {
      var b = E.filter(a, function(a) {
        a = a.PATTERN;
        return !(E.isRegExp(a) || E.isFunction(a) || E.has(a, "exec") || E.isString(a));
      });
      return {errors:E.map(b, function(a) {
        return {message:"Token Type: ->" + F.tokenName(a) + "<- static 'PATTERN' can only be a RegExp, a Function matching the {CustomPatternMatcherFunc} type or an Object matching the {ICustomPattern} interface.", type:B.LexerDefinitionErrorType.INVALID_PATTERN, tokenTypes:[a]};
      }), valid:E.difference(a, b)};
    }
    function f(a) {
      var b = function(a) {
        function b() {
          var b = null !== a && a.apply(this, arguments) || this;
          return b.found = !1, b;
        }
        return A(b, a), b.prototype.visitEndAnchor = function(a) {
          this.found = !0;
        }, b;
      }(D.BaseRegExpVisitor);
      a = E.filter(a, function(a) {
        a = a.PATTERN;
        try {
          var c = K.pattern(a.toString()), d = new b;
          return d.visit(c), d.found;
        } catch (Z) {
          return J.test(a.source);
        }
      });
      return E.map(a, function(a) {
        return {message:"Unexpected RegExp Anchor Error:\n\tToken Type: ->" + F.tokenName(a) + "<- static 'PATTERN' cannot contain end of input anchor '$'\n\tSee sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#ANCHORS\tfor details.", type:B.LexerDefinitionErrorType.EOI_ANCHOR_FOUND, tokenTypes:[a]};
      });
    }
    function e(a) {
      a = E.filter(a, function(a) {
        return a.PATTERN.test("");
      });
      return E.map(a, function(a) {
        return {message:"Token Type: ->" + F.tokenName(a) + "<- static 'PATTERN' must not match an empty string", type:B.LexerDefinitionErrorType.EMPTY_MATCH_PATTERN, tokenTypes:[a]};
      });
    }
    function r(a) {
      var b = function(a) {
        function b() {
          var b = null !== a && a.apply(this, arguments) || this;
          return b.found = !1, b;
        }
        return A(b, a), b.prototype.visitStartAnchor = function(a) {
          this.found = !0;
        }, b;
      }(D.BaseRegExpVisitor);
      a = E.filter(a, function(a) {
        a = a.PATTERN;
        try {
          var c = K.pattern(a.toString()), d = new b;
          return d.visit(c), d.found;
        } catch (Z) {
          return R.test(a.source);
        }
      });
      return E.map(a, function(a) {
        return {message:"Unexpected RegExp Anchor Error:\n\tToken Type: ->" + F.tokenName(a) + "<- static 'PATTERN' cannot contain start of input anchor '^'\n\tSee https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#ANCHORS\tfor details.", type:B.LexerDefinitionErrorType.SOI_ANCHOR_FOUND, tokenTypes:[a]};
      });
    }
    function q(a) {
      a = E.filter(a, function(a) {
        a = a.PATTERN;
        return a instanceof RegExp && (a.multiline || a.global);
      });
      return E.map(a, function(a) {
        return {message:"Token Type: ->" + F.tokenName(a) + "<- static 'PATTERN' may NOT contain global('g') or multiline('m')", type:B.LexerDefinitionErrorType.UNSUPPORTED_FLAGS_FOUND, tokenTypes:[a]};
      });
    }
    function m(a) {
      var b = [], c = E.map(a, function(c) {
        return E.reduce(a, function(a, d) {
          return c.PATTERN.source !== d.PATTERN.source || E.contains(b, d) || d.PATTERN === B.Lexer.NA ? a : (b.push(d), a.push(d), a);
        }, []);
      });
      c = E.compact(c);
      c = E.filter(c, function(a) {
        return 1 < a.length;
      });
      return E.map(c, function(a) {
        var b = E.map(a, function(a) {
          return F.tokenName(a);
        });
        return {message:"The same RegExp pattern ->" + E.first(a).PATTERN + "<-has been used in all of the following Token Types: " + b.join(", ") + " <-", type:B.LexerDefinitionErrorType.DUPLICATE_PATTERNS_FOUND, tokenTypes:a};
      });
    }
    function n(a) {
      a = E.filter(a, function(a) {
        if (!E.has(a, "GROUP")) {
          return !1;
        }
        a = a.GROUP;
        return a !== B.Lexer.SKIPPED && a !== B.Lexer.NA && !E.isString(a);
      });
      return E.map(a, function(a) {
        return {message:"Token Type: ->" + F.tokenName(a) + "<- static 'GROUP' can only be Lexer.SKIPPED/Lexer.NA/A String", type:B.LexerDefinitionErrorType.INVALID_GROUP_TYPE_FOUND, tokenTypes:[a]};
      });
    }
    function c(a, b) {
      a = E.filter(a, function(a) {
        return void 0 !== a.PUSH_MODE && !E.contains(b, a.PUSH_MODE);
      });
      return E.map(a, function(a) {
        return {message:"Token Type: ->" + F.tokenName(a) + "<- static 'PUSH_MODE' value cannot refer to a Lexer Mode ->" + a.PUSH_MODE + "<-which does not exist", type:B.LexerDefinitionErrorType.PUSH_MODE_DOES_NOT_EXIST, tokenTypes:[a]};
      });
    }
    function h(a) {
      var b = [], c = E.reduce(a, function(a, b, c) {
        var d = b.PATTERN;
        return d === B.Lexer.NA ? a : (E.isString(d) ? a.push({str:d, idx:c, tokenType:b}) : E.isRegExp(d) && void 0 === E.find(".\\[]|^$()?*+{".split(""), function(a) {
          return -1 !== d.source.indexOf(a);
        }) && a.push({str:d.source, idx:c, tokenType:b}), a);
      }, []);
      return E.forEach(a, function(a, d) {
        E.forEach(c, function(c) {
          var e = c.str, f = c.tokenType;
          d < c.idx && function(a, b) {
            if (E.isRegExp(b)) {
              return a = b.exec(a), null !== a && 0 === a.index;
            }
            if (E.isFunction(b)) {
              return b(a, 0, [], {});
            }
            if (E.has(b, "exec")) {
              return b.exec(a, 0, [], {});
            }
            if ("string" == typeof b) {
              return b === a;
            }
            throw Error("non exhaustive match");
          }(e, a.PATTERN) && (c = "Token: ->" + F.tokenName(f) + "<- can never be matched.\nBecause it appears AFTER the Token Type ->" + F.tokenName(a) + "<-in the lexer's definition.\nSee https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#UNREACHABLE", b.push({message:c, type:B.LexerDefinitionErrorType.UNREACHABLE_PATTERN, tokenTypes:[a, f]}));
        });
      }), b;
    }
    function t(a) {
      return new RegExp("^(?:" + a.source + ")", a.ignoreCase ? "i" : "");
    }
    function z(a) {
      return new RegExp("" + a.source, a.ignoreCase ? "iy" : "y");
    }
    function y(a) {
      a = a.PATTERN;
      if (E.isRegExp(a)) {
        return !1;
      }
      if (E.isFunction(a) || E.has(a, "exec")) {
        return !0;
      }
      if (E.isString(a)) {
        return !1;
      }
      throw Error("non exhaustive match");
    }
    function x(a) {
      return !(!E.isString(a) || 1 !== a.length) && a.charCodeAt(0);
    }
    function p(a, b) {
      if (E.has(a, "LINE_BREAKS")) {
        return !1;
      }
      if (E.isRegExp(a.PATTERN)) {
        try {
          I.canMatchCharCode(b, a.PATTERN);
        } catch (M) {
          return {issue:B.LexerDefinitionErrorType.IDENTIFY_TERMINATOR, errMsg:M.message};
        }
        return !1;
      }
      if (E.isString(a.PATTERN)) {
        return !1;
      }
      if (y(a)) {
        return {issue:B.LexerDefinitionErrorType.CUSTOM_LINE_BREAK};
      }
      throw Error("non exhaustive match");
    }
    function v(a, b) {
      if (b.issue === B.LexerDefinitionErrorType.IDENTIFY_TERMINATOR) {
        return "Warning: unable to identify line terminator usage in pattern.\n\tThe problem is in the <" + a.name + "> Token Type\n\t Root cause: " + b.errMsg + ".\n\tFor details See: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#IDENTIFY_TERMINATOR";
      }
      if (b.issue === B.LexerDefinitionErrorType.CUSTOM_LINE_BREAK) {
        return "Warning: A Custom Token Pattern should specify the <line_breaks> option.\n\tThe problem is in the <" + a.name + "> Token Type\n\tFor details See: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#CUSTOM_LINE_BREAK";
      }
      throw Error("non exhaustive match");
    }
    function w(a) {
      return E.map(a, function(a) {
        return E.isString(a) && 0 < a.length ? a.charCodeAt(0) : a;
      });
    }
    var C, A = this && this.__extends || (C = function(a, b) {
      return (C = Object.setPrototypeOf || {__proto__:[]} instanceof Array && function(a, b) {
        a.__proto__ = b;
      } || function(a, b) {
        for (var c in b) {
          b.hasOwnProperty(c) && (a[c] = b[c]);
        }
      })(a, b);
    }, function(a, b) {
      function c() {
        this.constructor = a;
      }
      C(a, b);
      a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c);
    });
    Object.defineProperty(d, "__esModule", {value:!0});
    var D = k(19), F = k(2), B = k(15), E = k(0), I = k(28), K = new D.RegExpParser;
    d.DEFAULT_MODE = "defaultMode";
    d.MODES = "modes";
    d.SUPPORT_STICKY = "boolean" == typeof/(?:)/.sticky;
    d.disableSticky = function() {
      d.SUPPORT_STICKY = !1;
    };
    d.enableSticky = function() {
      d.SUPPORT_STICKY = !0;
    };
    d.analyzeTokenTypes = function(a, b) {
      function c(a, b, c) {
        void 0 === a[b] && (a[b] = []);
        a[b].push(c);
      }
      b = E.defaults(b, {useSticky:d.SUPPORT_STICKY, debug:!1, safeMode:!1, positionTracking:"full", lineTerminatorCharacters:["\r", "\n"]});
      var e = E.reject(a, function(a) {
        return a.PATTERN === B.Lexer.NA;
      }), f = !1, g = E.map(e, function(a) {
        a = a.PATTERN;
        if (E.isRegExp(a)) {
          var c = a.source;
          return 1 === c.length && "^" !== c && "$" !== c && "." !== c ? c : 2 !== c.length || "\\" !== c[0] || E.contains("dDsStrnt0cbBfvwW".split(""), c[1]) ? b.useSticky ? z(a) : t(a) : c[1];
        }
        if (E.isFunction(a)) {
          return f = !0, {exec:a};
        }
        if (E.has(a, "exec")) {
          return f = !0, a;
        }
        if ("string" == typeof a) {
          if (1 === a.length) {
            return a;
          }
          a = a.replace(/[\\^$.*+?()[\]{}|]/g, "\\$&");
          a = new RegExp(a);
          return b.useSticky ? z(a) : t(a);
        }
        throw Error("non exhaustive match");
      }), h = E.map(e, function(a) {
        return a.tokenTypeIdx;
      }), k = E.map(e, function(a) {
        a = a.GROUP;
        if (a !== B.Lexer.SKIPPED) {
          if (E.isString(a)) {
            return a;
          }
          if (E.isUndefined(a)) {
            return !1;
          }
          throw Error("non exhaustive match");
        }
      }), m = E.map(e, function(a) {
        if (a = a.LONGER_ALT) {
          return E.indexOf(e, a);
        }
      }), n = E.map(e, function(a) {
        return a.PUSH_MODE;
      }), q = E.map(e, function(a) {
        return E.has(a, "POP_MODE");
      }), r = w(b.lineTerminatorCharacters), v = E.map(e, function(a) {
        return !1;
      });
      "onlyOffset" !== b.positionTracking && (v = E.map(e, function(a) {
        return E.has(a, "LINE_BREAKS") ? a.LINE_BREAKS : !1 === p(a, r) ? I.canMatchCharCode(r, a.PATTERN) : void 0;
      }));
      var A = E.map(e, y), C = E.map(g, x);
      a = E.reduce(e, function(a, b) {
        b = b.GROUP;
        return E.isString(b) && b !== B.Lexer.SKIPPED && (a[b] = []), a;
      }, {});
      var D = E.map(g, function(a, b) {
        return {pattern:g[b], longerAlt:m[b], canLineTerminator:v[b], isCustom:A[b], short:C[b], group:k[b], push:n[b], pop:q[b], tokenTypeIdx:h[b], tokenType:e[b]};
      }), H = !0, J = [];
      return b.safeMode || (J = E.reduce(e, function(a, d, e) {
        "string" == typeof d.PATTERN ? (d = d.PATTERN.charCodeAt(0), c(a, d, D[e])) : E.isArray(d.START_CHARS_HINT) ? E.forEach(d.START_CHARS_HINT, function(b) {
          b = "string" == typeof b ? b.charCodeAt(0) : b;
          c(a, b, D[e]);
        }) : E.isRegExp(d.PATTERN) ? d.PATTERN.unicode ? (H = !1, b.ensureOptimizations && E.PRINT_ERROR(I.failedOptimizationPrefixMsg + "\tUnable to analyze < " + d.PATTERN.toString() + " > pattern.\n\tThe regexp unicode flag is not currently supported by the regexp-to-ast library.\n\tThis will disable the lexer's first char optimizations.\n\tFor details See: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#UNICODE_OPTIMIZE")) : (d = I.getStartCodes(d.PATTERN, b.ensureOptimizations), 
        E.isEmpty(d) && (H = !1), E.forEach(d, function(b) {
          c(a, b, D[e]);
        })) : (b.ensureOptimizations && E.PRINT_ERROR(I.failedOptimizationPrefixMsg + "\tTokenType: <" + F.tokenName(d) + "> is using a custom token pattern without providing <start_chars_hint> parameter.\n\tThis will disable the lexer's first char optimizations.\n\tFor details See: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#CUSTOM_OPTIMIZE"), H = !1);
        return a;
      }, [])), H && 65536 > J.length && (J = E.packArray(J)), {emptyGroups:a, patternIdxToConfig:D, charCodeToPatternIdxToConfig:J, hasCustom:f, canBeOptimized:H};
    };
    d.validatePatterns = function(a, d) {
      var k = [];
      a = b(a);
      k = k.concat(a.errors);
      a = g(a.valid);
      var p = a.valid;
      return k = (k = (k = (k = (k = k.concat(a.errors)).concat(function(a) {
        var b = [];
        a = E.filter(a, function(a) {
          return E.isRegExp(a.PATTERN);
        });
        return b = (b = (b = (b = (b = b.concat(f(a))).concat(r(a))).concat(q(a))).concat(m(a))).concat(e(a));
      }(p))).concat(n(p))).concat(c(p, d))).concat(h(p));
    };
    d.findMissingPatterns = b;
    d.findInvalidPatterns = g;
    var J = /[^\\][\$]/;
    d.findEndOfInputAnchor = f;
    d.findEmptyMatchRegExps = e;
    var R = /[^\\[][\^]|^\^/;
    d.findStartOfInputAnchor = r;
    d.findUnsupportedFlags = q;
    d.findDuplicatePatterns = m;
    d.findInvalidGroupType = n;
    d.findModesThatDoNotExist = c;
    d.findUnreachablePatterns = h;
    d.addStartOfInput = t;
    d.addStickyFlag = z;
    d.performRuntimeChecks = function(a, b, c) {
      var e = [];
      return E.has(a, d.DEFAULT_MODE) || e.push({message:"A MultiMode Lexer cannot be initialized without a <" + d.DEFAULT_MODE + "> property in its definition\n", type:B.LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE}), E.has(a, d.MODES) || e.push({message:"A MultiMode Lexer cannot be initialized without a <" + d.MODES + "> property in its definition\n", type:B.LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY}), E.has(a, d.MODES) && E.has(a, d.DEFAULT_MODE) && !E.has(a.modes, 
      a.defaultMode) && e.push({message:"A MultiMode Lexer cannot be initialized with a " + d.DEFAULT_MODE + ": <" + a.defaultMode + ">which does not exist\n", type:B.LexerDefinitionErrorType.MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST}), E.has(a, d.MODES) && E.forEach(a.modes, function(a, b) {
        E.forEach(a, function(a, c) {
          E.isUndefined(a) && e.push({message:"A Lexer cannot be initialized using an undefined Token Type. Mode:<" + b + "> at index: <" + c + ">\n", type:B.LexerDefinitionErrorType.LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED});
        });
      }), e;
    };
    d.performWarningRuntimeChecks = function(a, b, c) {
      var d = [], e = !1;
      a = E.compact(E.flatten(E.mapValues(a.modes, function(a) {
        return a;
      })));
      a = E.reject(a, function(a) {
        return a.PATTERN === B.Lexer.NA;
      });
      var f = w(c);
      return b && E.forEach(a, function(a) {
        var b = p(a, f);
        !1 !== b ? (a = {message:v(a, b), type:b.issue, tokenType:a}, d.push(a)) : E.has(a, "LINE_BREAKS") ? !0 === a.LINE_BREAKS && (e = !0) : I.canMatchCharCode(f, a.PATTERN) && (e = !0);
      }), b && !e && d.push({message:"Warning: No LINE_BREAKS Found.\n\tThis Lexer has been defined to track line and column information,\n\tBut none of the Token Types can be identified as matching a line terminator.\n\tSee https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#LINE_BREAKS \n\tfor details.", type:B.LexerDefinitionErrorType.NO_LINE_BREAKS_FLAGS}), d;
    };
    d.cloneEmptyGroups = function(a) {
      var b = {}, c = E.keys(a);
      return E.forEach(c, function(c) {
        if (!E.isArray(a[c])) {
          throw Error("non exhaustive match");
        }
        b[c] = [];
      }), b;
    };
    d.isCustomPattern = y;
    d.isShortPattern = x;
    d.LineTerminatorOptimizedTester = {test:function(a) {
      for (var b = a.length, c = this.lastIndex; c < b; c++) {
        var d = a.charCodeAt(c);
        if (10 === d) {
          return this.lastIndex = c + 1, !0;
        }
        if (13 === d) {
          return 10 === a.charCodeAt(c + 1) ? this.lastIndex = c + 2 : this.lastIndex = c + 1, !0;
        }
      }
      return !1;
    }, lastIndex:0};
    d.buildLineBreakIssueMessage = v;
  }, function(a, d, k) {
    function b(a) {
      switch(a.type) {
        case "Disjunction":
          return n.flatten(n.map(a.value, b));
        case "Alternative":
          var c = [];
          a = a.value;
          for (var d = 0; d < a.length; d++) {
            var f = a[d];
            if (!n.contains("GroupBackReference Lookahead NegativeLookahead StartAnchor EndAnchor WordBoundary NonWordBoundary".split(" "), f.type)) {
              switch(f.type) {
                case "Character":
                  c.push(f.value);
                  break;
                case "Set":
                  if (!0 === f.complement) {
                    throw Error("Complement Sets are not supported for first char optimization");
                  }
                  n.forEach(f.value, function(a) {
                    if ("number" == typeof a) {
                      c.push(a);
                    } else {
                      for (var b = a.from; b <= a.to; b++) {
                        c.push(b);
                      }
                    }
                  });
                  break;
                case "Group":
                  var g = b(f.value);
                  n.forEach(g, function(a) {
                    return c.push(a);
                  });
                  break;
                default:
                  throw Error("Non Exhaustive Match");
              }
              g = void 0 !== f.quantifier && 0 === f.quantifier.atLeast;
              if ("Group" === f.type && !1 === e(f) || "Group" !== f.type && !1 === g) {
                break;
              }
            }
          }
          return c;
        default:
          throw Error("non exhaustive match!");
      }
    }
    function g(a) {
      var b = [];
      return n.forEach(a, function(a) {
        b.push(a);
        a = String.fromCharCode(a);
        a.toUpperCase() !== a ? b.push(a.toUpperCase().charCodeAt(0)) : a.toLowerCase() !== a && b.push(a.toLowerCase().charCodeAt(0));
      }), b;
    }
    function f(a, b) {
      return n.find(a.value, function(a) {
        return "number" == typeof a ? n.contains(b, a) : void 0 !== n.find(b, function(b) {
          return a.from <= b && b <= a.to;
        });
      });
    }
    function e(a) {
      return !(!a.quantifier || 0 !== a.quantifier.atLeast) || !!a.value && (n.isArray(a.value) ? n.every(a.value, e) : e(a.value));
    }
    var r, q = this && this.__extends || (r = function(a, b) {
      return (r = Object.setPrototypeOf || {__proto__:[]} instanceof Array && function(a, b) {
        a.__proto__ = b;
      } || function(a, b) {
        for (var c in b) {
          b.hasOwnProperty(c) && (a[c] = b[c]);
        }
      })(a, b);
    }, function(a, b) {
      function c() {
        this.constructor = a;
      }
      r(a, b);
      a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c);
    });
    Object.defineProperty(d, "__esModule", {value:!0});
    var m = k(19), n = k(0), c = new m.RegExpParser;
    d.failedOptimizationPrefixMsg = 'Unable to use "first char" lexer optimizations:\n';
    d.getStartCodes = function(a, e) {
      void 0 === e && (e = !1);
      try {
        var f = c.pattern(a.toString()), h = b(f.value);
        return f.flags.ignoreCase && (h = g(h)), h;
      } catch (p) {
        "Complement Sets are not supported for first char optimization" === p.message ? e && n.PRINT_WARNING(d.failedOptimizationPrefixMsg + "\tUnable to optimize: < " + a.toString() + " >\n\tComplement Sets cannot be automatically optimized.\n\tThis will disable the lexer's first char optimizations.\n\tSee: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#COMPLEMENT for details.") : (f = "", e && (f = "\n\tThis will disable the lexer's first char optimizations.\n\tSee: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#REGEXP_PARSING for details."), 
        n.PRINT_ERROR(d.failedOptimizationPrefixMsg + "\n\tFailed parsing: < " + a.toString() + " >\n\tUsing the regexp-to-ast library version: " + m.VERSION + "\n\tPlease open an issue at: https://github.com/bd82/regexp-to-ast/issues" + f));
      }
      return [];
    };
    d.firstChar = b;
    d.applyIgnoreCase = g;
    var h = function(a) {
      function b(b) {
        var c = a.call(this) || this;
        return c.targetCharCodes = b, c.found = !1, c;
      }
      return q(b, a), b.prototype.visitChildren = function(b) {
        switch(b.type) {
          case "Lookahead":
            return void this.visitLookahead(b);
          case "NegativeLookahead":
            return void this.visitNegativeLookahead(b);
        }
        a.prototype.visitChildren.call(this, b);
      }, b.prototype.visitCharacter = function(a) {
        n.contains(this.targetCharCodes, a.value) && (this.found = !0);
      }, b.prototype.visitSet = function(a) {
        a.complement ? void 0 === f(a, this.targetCharCodes) && (this.found = !0) : void 0 !== f(a, this.targetCharCodes) && (this.found = !0);
      }, b;
    }(m.BaseRegExpVisitor);
    d.canMatchCharCode = function(a, b) {
      if (b instanceof RegExp) {
        b = c.pattern(b.toString());
        var d = new h(a);
        return d.visit(b), d.found;
      }
      return void 0 !== n.find(b, function(b) {
        return n.contains(a, b.charCodeAt(0));
      });
    };
  }, function(a, d, k) {
    function b(a, b) {
      return !(0 > a || b < a);
    }
    Object.defineProperty(d, "__esModule", {value:!0});
    a = function() {
      function a(a, d) {
        if (this.start = a, this.end = d, !b(a, d)) {
          throw Error("INVALID RANGE");
        }
      }
      return a.prototype.contains = function(a) {
        return this.start <= a && this.end >= a;
      }, a.prototype.containsRange = function(a) {
        return this.start <= a.start && this.end >= a.end;
      }, a.prototype.isContainedInRange = function(a) {
        return a.containsRange(this);
      }, a.prototype.strictlyContainsRange = function(a) {
        return this.start < a.start && this.end > a.end;
      }, a.prototype.isStrictlyContainedInRange = function(a) {
        return a.strictlyContainsRange(this);
      }, a;
    }();
    d.Range = a;
    d.isValidRange = b;
  }, function(a, d, k) {
    var b, g = this && this.__extends || (b = function(a, d) {
      return (b = Object.setPrototypeOf || {__proto__:[]} instanceof Array && function(a, b) {
        a.__proto__ = b;
      } || function(a, b) {
        for (var c in b) {
          b.hasOwnProperty(c) && (a[c] = b[c]);
        }
      })(a, d);
    }, function(a, d) {
      function e() {
        this.constructor = a;
      }
      b(a, d);
      a.prototype = null === d ? Object.create(d) : (e.prototype = d.prototype, new e);
    });
    Object.defineProperty(d, "__esModule", {value:!0});
    var f = k(3), e = k(0);
    a = k(5);
    d.resolveGrammar = function(a, b) {
      a = new r(a, b);
      return a.resolveRefs(), a.errors;
    };
    var r = function(a) {
      function b(b, c) {
        var d = a.call(this) || this;
        return d.nameToTopRule = b, d.errMsgProvider = c, d.errors = [], d;
      }
      return g(b, a), b.prototype.resolveRefs = function() {
        var a = this;
        e.forEach(this.nameToTopRule.values(), function(b) {
          a.currTopLevel = b;
          b.accept(a);
        });
      }, b.prototype.visitNonTerminal = function(a) {
        var b = this.nameToTopRule.get(a.nonTerminalName);
        b ? a.referencedRule = b : (b = this.errMsgProvider.buildRuleNotFoundError(this.currTopLevel, a), this.errors.push({message:b, type:f.ParserDefinitionErrorType.UNRESOLVED_SUBRULE_REF, ruleName:this.currTopLevel.name, unresolvedRefName:a.nonTerminalName}));
      }, b;
    }(a.GAstVisitor);
    d.GastRefResolverVisitor = r;
  }, function(a, d, k) {
    Object.defineProperty(d, "__esModule", {value:!0});
    var b = k(12), g = k(0), f = k(3), e = k(9);
    a = function() {
      function a() {
      }
      return a.prototype.initLooksAhead = function(a) {
        this.dynamicTokensEnabled = g.has(a, "dynamicTokensEnabled") ? a.dynamicTokensEnabled : f.DEFAULT_PARSER_CONFIG.dynamicTokensEnabled;
        this.maxLookahead = g.has(a, "maxLookahead") ? a.maxLookahead : f.DEFAULT_PARSER_CONFIG.maxLookahead;
        this.lookAheadFuncsCache = g.isES2015MapSupported() ? new Map : [];
        g.isES2015MapSupported() ? (this.getLaFuncFromCache = this.getLaFuncFromMap, this.setLaFuncCache = this.setLaFuncCacheUsingMap) : (this.getLaFuncFromCache = this.getLaFuncFromObj, this.setLaFuncCache = this.setLaFuncUsingObj);
      }, a.prototype.lookAheadBuilderForOptional = function(a, d, e) {
        return b.buildSingleAlternativeLookaheadFunction(a, d, e);
      }, a.prototype.lookAheadBuilderForAlternatives = function(a, d, e, c) {
        return b.buildAlternativesLookAheadFunc(a, d, e, c);
      }, a.prototype.getKeyForAutomaticLookahead = function(a, b) {
        var d = this.getLastExplicitRuleShortName();
        return e.getKeyForAutomaticLookahead(d, a, b);
      }, a.prototype.getLookaheadFuncForOr = function(a, d) {
        var f = this.getKeyForAutomaticLookahead(e.OR_IDX, a), c = this.getLaFuncFromCache(f);
        if (void 0 === c) {
          var h = this.getCurrRuleFullName();
          h = this.getGAstProductions().get(h);
          d = g.some(d, function(a) {
            return g.isFunction(a.GATE);
          });
          return c = b.buildLookaheadFuncForOr(a, h, this.maxLookahead, d, this.dynamicTokensEnabled, this.lookAheadBuilderForAlternatives), this.setLaFuncCache(f, c), c;
        }
        return c;
      }, a.prototype.getLookaheadFuncForOption = function(a, d) {
        return this.getLookaheadFuncFor(a, d, this.maxLookahead, b.PROD_TYPE.OPTION);
      }, a.prototype.getLookaheadFuncForMany = function(a, d) {
        return this.getLookaheadFuncFor(a, d, this.maxLookahead, b.PROD_TYPE.REPETITION);
      }, a.prototype.getLookaheadFuncForManySep = function(a, d) {
        return this.getLookaheadFuncFor(a, d, this.maxLookahead, b.PROD_TYPE.REPETITION_WITH_SEPARATOR);
      }, a.prototype.getLookaheadFuncForAtLeastOne = function(a, d) {
        return this.getLookaheadFuncFor(a, d, this.maxLookahead, b.PROD_TYPE.REPETITION_MANDATORY);
      }, a.prototype.getLookaheadFuncForAtLeastOneSep = function(a, d) {
        return this.getLookaheadFuncFor(a, d, this.maxLookahead, b.PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR);
      }, a.prototype.getLookaheadFuncFor = function(a, d, e, c) {
        var f = this.getLaFuncFromCache(a);
        if (void 0 === f) {
          var g = this.getCurrRuleFullName();
          g = this.getGAstProductions().get(g);
          return f = b.buildLookaheadFuncForOptionalProd(d, g, e, this.dynamicTokensEnabled, c, this.lookAheadBuilderForOptional), this.setLaFuncCache(a, f), f;
        }
        return f;
      }, a.prototype.getLaFuncFromCache = function(a) {
      }, a.prototype.getLaFuncFromMap = function(a) {
        return this.lookAheadFuncsCache.get(a);
      }, a.prototype.getLaFuncFromObj = function(a) {
        return this.lookAheadFuncsCache[a];
      }, a.prototype.setLaFuncCache = function(a, b) {
      }, a.prototype.setLaFuncCacheUsingMap = function(a, b) {
        this.lookAheadFuncsCache.set(a, b);
      }, a.prototype.setLaFuncUsingObj = function(a, b) {
        this.lookAheadFuncsCache[a] = b;
      }, a;
    }();
    d.LooksAhead = a;
  }, function(a, d, k) {
    Object.defineProperty(d, "__esModule", {value:!0});
    var b = k(16), g = k(0), f = k(33), e = k(9), r = k(3);
    a = function() {
      function a() {
      }
      return a.prototype.initTreeBuilder = function(a) {
        this.LAST_EXPLICIT_RULE_STACK = [];
        this.CST_STACK = [];
        (this.outputCst = g.has(a, "outputCst") ? a.outputCst : r.DEFAULT_PARSER_CONFIG.outputCst) || (this.cstInvocationStateUpdate = g.NOOP, this.cstFinallyStateUpdate = g.NOOP, this.cstPostTerminal = g.NOOP, this.cstPostNonTerminal = g.NOOP, this.getLastExplicitRuleShortName = this.getLastExplicitRuleShortNameNoCst, this.getPreviousExplicitRuleShortName = this.getPreviousExplicitRuleShortNameNoCst, this.getLastExplicitRuleOccurrenceIndex = this.getLastExplicitRuleOccurrenceIndexNoCst, this.manyInternal = 
        this.manyInternalNoCst, this.orInternal = this.orInternalNoCst, this.optionInternal = this.optionInternalNoCst, this.atLeastOneInternal = this.atLeastOneInternalNoCst, this.manySepFirstInternal = this.manySepFirstInternalNoCst, this.atLeastOneSepFirstInternal = this.atLeastOneSepFirstInternalNoCst);
      }, a.prototype.cstNestedInvocationStateUpdate = function(a, b) {
        this.CST_STACK.push({name:a, fullName:this.shortRuleNameToFull.get(this.getLastExplicitRuleShortName()) + a, children:{}});
      }, a.prototype.cstInvocationStateUpdate = function(a, b) {
        this.LAST_EXPLICIT_RULE_STACK.push(this.RULE_STACK.length - 1);
        this.CST_STACK.push({name:a, children:{}});
      }, a.prototype.cstFinallyStateUpdate = function() {
        this.LAST_EXPLICIT_RULE_STACK.pop();
        this.CST_STACK.pop();
      }, a.prototype.cstNestedFinallyStateUpdate = function() {
        this.CST_STACK.pop();
      }, a.prototype.cstPostTerminal = function(a, d) {
        b.addTerminalToCst(this.CST_STACK[this.CST_STACK.length - 1], d, a);
      }, a.prototype.cstPostNonTerminal = function(a, d) {
        b.addNoneTerminalToCst(this.CST_STACK[this.CST_STACK.length - 1], d, a);
      }, a.prototype.getBaseCstVisitorConstructor = function() {
        if (g.isUndefined(this.baseCstVisitorConstructor)) {
          var a = f.createBaseSemanticVisitorConstructor(this.className, this.allRuleNames);
          return this.baseCstVisitorConstructor = a, a;
        }
        return this.baseCstVisitorConstructor;
      }, a.prototype.getBaseCstVisitorConstructorWithDefaults = function() {
        if (g.isUndefined(this.baseCstVisitorWithDefaultsConstructor)) {
          var a = f.createBaseVisitorConstructorWithDefaults(this.className, this.allRuleNames, this.getBaseCstVisitorConstructor());
          return this.baseCstVisitorWithDefaultsConstructor = a, a;
        }
        return this.baseCstVisitorWithDefaultsConstructor;
      }, a.prototype.nestedRuleBeforeClause = function(a, b) {
        var c;
        return void 0 !== a.NAME ? (c = a.NAME, this.nestedRuleInvocationStateUpdate(c, b), c) : void 0;
      }, a.prototype.nestedAltBeforeClause = function(a, b, c, d) {
        var f, g = this.getLastExplicitRuleShortName();
        b = e.getKeyForAltIndex(g, c, b, d);
        return void 0 !== a.NAME ? (f = a.NAME, this.nestedRuleInvocationStateUpdate(f, b), {shortName:b, nestedName:f}) : void 0;
      }, a.prototype.nestedRuleFinallyClause = function(a, d) {
        a = this.CST_STACK;
        var c = a[a.length - 1];
        this.nestedRuleFinallyStateUpdate();
        b.addNoneTerminalToCst(a[a.length - 1], d, c);
      }, a.prototype.getLastExplicitRuleShortName = function() {
        return this.RULE_STACK[this.LAST_EXPLICIT_RULE_STACK[this.LAST_EXPLICIT_RULE_STACK.length - 1]];
      }, a.prototype.getLastExplicitRuleShortNameNoCst = function() {
        var a = this.RULE_STACK;
        return a[a.length - 1];
      }, a.prototype.getPreviousExplicitRuleShortName = function() {
        return this.RULE_STACK[this.LAST_EXPLICIT_RULE_STACK[this.LAST_EXPLICIT_RULE_STACK.length - 2]];
      }, a.prototype.getPreviousExplicitRuleShortNameNoCst = function() {
        var a = this.RULE_STACK;
        return a[a.length - 2];
      }, a.prototype.getLastExplicitRuleOccurrenceIndex = function() {
        return this.RULE_OCCURRENCE_STACK[this.LAST_EXPLICIT_RULE_STACK[this.LAST_EXPLICIT_RULE_STACK.length - 1]];
      }, a.prototype.getLastExplicitRuleOccurrenceIndexNoCst = function() {
        var a = this.RULE_OCCURRENCE_STACK;
        return a[a.length - 1];
      }, a.prototype.nestedRuleInvocationStateUpdate = function(a, b) {
        this.RULE_OCCURRENCE_STACK.push(1);
        this.RULE_STACK.push(b);
        this.cstNestedInvocationStateUpdate(a, b);
      }, a.prototype.nestedRuleFinallyStateUpdate = function() {
        this.RULE_STACK.pop();
        this.RULE_OCCURRENCE_STACK.pop();
        this.cstNestedFinallyStateUpdate();
      }, a;
    }();
    d.TreeBuilder = a;
  }, function(a, d, k) {
    function b(a, b) {
      for (var c = q.keys(a), d = c.length, e = 0; e < d; e++) {
        for (var f = a[c[e]], g = f.length, h = 0; h < g; h++) {
          var k = f[h];
          void 0 === k.tokenTypeIdx && (void 0 !== k.fullName ? this[k.fullName](k.children, b) : this[k.name](k.children, b));
        }
      }
    }
    function g(a, b) {
      var c = f(a, b);
      a = e(a, b);
      return c.concat(a);
    }
    function f(a, b) {
      b = q.map(b, function(b) {
        if (!q.isFunction(a[b])) {
          return {msg:"Missing visitor method: <" + b + "> on " + m.functionName(a.constructor) + " CST Visitor.", type:r.MISSING_METHOD, methodName:b};
        }
      });
      return q.compact(b);
    }
    function e(a, b) {
      var d = [], e;
      for (e in a) {
        n.validTermsPattern.test(e) && q.isFunction(a[e]) && !q.contains(c, e) && !q.contains(b, e) && d.push({msg:"Redundant visitor method: <" + e + "> on " + m.functionName(a.constructor) + " CST Visitor\nThere is no Grammar Rule corresponding to this method's name.\nFor utility methods on visitor classes use methods names that do not match /" + n.validTermsPattern.source + "/.", type:r.REDUNDANT_METHOD, methodName:e});
      }
      return d;
    }
    Object.defineProperty(d, "__esModule", {value:!0});
    var r, q = k(0), m = k(4), n = k(11);
    d.defaultVisit = b;
    d.createBaseSemanticVisitorConstructor = function(a, b) {
      var c = function() {
      };
      return m.defineNameProp(c, a + "BaseSemantics"), (c.prototype = {visit:function(a, b) {
        if (q.isArray(a) && (a = a[0]), !q.isUndefined(a)) {
          return void 0 !== a.fullName ? this[a.fullName](a.children, b) : this[a.name](a.children, b);
        }
      }, validateVisitor:function() {
        var a = g(this, b);
        if (!q.isEmpty(a)) {
          throw a = q.map(a, function(a) {
            return a.msg;
          }), Error("Errors Detected in CST Visitor <" + m.functionName(this.constructor) + ">:\n\t" + a.join("\n\n").replace(/\n/g, "\n\t"));
        }
      }}).constructor = c, c._RULE_NAMES = b, c;
    };
    d.createBaseVisitorConstructorWithDefaults = function(a, c, d) {
      var e = function() {
      };
      m.defineNameProp(e, a + "BaseSemanticsWithDefaults");
      var f = Object.create(d.prototype);
      return q.forEach(c, function(a) {
        f[a] = b;
      }), (e.prototype = f).constructor = e, e;
    };
    (function(a) {
      a[a.REDUNDANT_METHOD = 0] = "REDUNDANT_METHOD";
      a[a.MISSING_METHOD = 1] = "MISSING_METHOD";
    })(r = d.CstVisitorDefinitionError || (d.CstVisitorDefinitionError = {}));
    d.validateVisitor = g;
    d.validateMissingCstMethods = f;
    var c = ["constructor", "visit", "validateVisitor"];
    d.validateRedundantMethods = e;
  }, function(a, d, k) {
    Object.defineProperty(d, "__esModule", {value:!0});
    var b = k(3);
    a = function() {
      function a() {
      }
      return a.prototype.initLexerAdapter = function() {
        this.tokVector = [];
        this.tokVectorLength = 0;
        this.currIdx = -1;
      }, Object.defineProperty(a.prototype, "input", {get:function() {
        return this.tokVector;
      }, set:function(a) {
        this.reset();
        this.tokVector = a;
        this.tokVectorLength = a.length;
      }, enumerable:!0, configurable:!0}), a.prototype.SKIP_TOKEN = function() {
        return this.currIdx <= this.tokVector.length - 2 ? (this.consumeToken(), this.LA(1)) : b.END_OF_FILE;
      }, a.prototype.LA = function(a) {
        return 0 > this.currIdx + a || this.tokVectorLength <= this.currIdx + a ? b.END_OF_FILE : this.tokVector[this.currIdx + a];
      }, a.prototype.consumeToken = function() {
        this.currIdx++;
      }, a.prototype.exportLexerState = function() {
        return this.currIdx;
      }, a.prototype.importLexerState = function(a) {
        this.currIdx = a;
      }, a.prototype.resetLexerState = function() {
        this.currIdx = -1;
      }, a.prototype.moveToTerminatedState = function() {
        this.currIdx = this.tokVector.length - 1;
      }, a.prototype.getLexerPosition = function() {
        return this.exportLexerState();
      }, a;
    }();
    d.LexerAdapter = a;
  }, function(a, d, k) {
    Object.defineProperty(d, "__esModule", {value:!0});
    var b = k(0), g = k(6), f = k(3), e = k(10), r = k(23), q = k(11), m = k(1);
    a = function() {
      function a() {
      }
      return a.prototype.CONSUME = function(a, b) {
        return this.consumeInternal(a, 0, b);
      }, a.prototype.CONSUME1 = function(a, b) {
        return this.consumeInternal(a, 1, b);
      }, a.prototype.CONSUME2 = function(a, b) {
        return this.consumeInternal(a, 2, b);
      }, a.prototype.CONSUME3 = function(a, b) {
        return this.consumeInternal(a, 3, b);
      }, a.prototype.CONSUME4 = function(a, b) {
        return this.consumeInternal(a, 4, b);
      }, a.prototype.CONSUME5 = function(a, b) {
        return this.consumeInternal(a, 5, b);
      }, a.prototype.CONSUME6 = function(a, b) {
        return this.consumeInternal(a, 6, b);
      }, a.prototype.CONSUME7 = function(a, b) {
        return this.consumeInternal(a, 7, b);
      }, a.prototype.CONSUME8 = function(a, b) {
        return this.consumeInternal(a, 8, b);
      }, a.prototype.CONSUME9 = function(a, b) {
        return this.consumeInternal(a, 9, b);
      }, a.prototype.SUBRULE = function(a, b) {
        return this.subruleInternal(a, 0, b);
      }, a.prototype.SUBRULE1 = function(a, b) {
        return this.subruleInternal(a, 1, b);
      }, a.prototype.SUBRULE2 = function(a, b) {
        return this.subruleInternal(a, 2, b);
      }, a.prototype.SUBRULE3 = function(a, b) {
        return this.subruleInternal(a, 3, b);
      }, a.prototype.SUBRULE4 = function(a, b) {
        return this.subruleInternal(a, 4, b);
      }, a.prototype.SUBRULE5 = function(a, b) {
        return this.subruleInternal(a, 5, b);
      }, a.prototype.SUBRULE6 = function(a, b) {
        return this.subruleInternal(a, 6, b);
      }, a.prototype.SUBRULE7 = function(a, b) {
        return this.subruleInternal(a, 7, b);
      }, a.prototype.SUBRULE8 = function(a, b) {
        return this.subruleInternal(a, 8, b);
      }, a.prototype.SUBRULE9 = function(a, b) {
        return this.subruleInternal(a, 9, b);
      }, a.prototype.OPTION = function(a) {
        return this.optionInternal(a, 0);
      }, a.prototype.OPTION1 = function(a) {
        return this.optionInternal(a, 1);
      }, a.prototype.OPTION2 = function(a) {
        return this.optionInternal(a, 2);
      }, a.prototype.OPTION3 = function(a) {
        return this.optionInternal(a, 3);
      }, a.prototype.OPTION4 = function(a) {
        return this.optionInternal(a, 4);
      }, a.prototype.OPTION5 = function(a) {
        return this.optionInternal(a, 5);
      }, a.prototype.OPTION6 = function(a) {
        return this.optionInternal(a, 6);
      }, a.prototype.OPTION7 = function(a) {
        return this.optionInternal(a, 7);
      }, a.prototype.OPTION8 = function(a) {
        return this.optionInternal(a, 8);
      }, a.prototype.OPTION9 = function(a) {
        return this.optionInternal(a, 9);
      }, a.prototype.OR = function(a) {
        return this.orInternal(a, 0);
      }, a.prototype.OR1 = function(a) {
        return this.orInternal(a, 1);
      }, a.prototype.OR2 = function(a) {
        return this.orInternal(a, 2);
      }, a.prototype.OR3 = function(a) {
        return this.orInternal(a, 3);
      }, a.prototype.OR4 = function(a) {
        return this.orInternal(a, 4);
      }, a.prototype.OR5 = function(a) {
        return this.orInternal(a, 5);
      }, a.prototype.OR6 = function(a) {
        return this.orInternal(a, 6);
      }, a.prototype.OR7 = function(a) {
        return this.orInternal(a, 7);
      }, a.prototype.OR8 = function(a) {
        return this.orInternal(a, 8);
      }, a.prototype.OR9 = function(a) {
        return this.orInternal(a, 9);
      }, a.prototype.MANY = function(a) {
        this.manyInternal(0, a);
      }, a.prototype.MANY1 = function(a) {
        this.manyInternal(1, a);
      }, a.prototype.MANY2 = function(a) {
        this.manyInternal(2, a);
      }, a.prototype.MANY3 = function(a) {
        this.manyInternal(3, a);
      }, a.prototype.MANY4 = function(a) {
        this.manyInternal(4, a);
      }, a.prototype.MANY5 = function(a) {
        this.manyInternal(5, a);
      }, a.prototype.MANY6 = function(a) {
        this.manyInternal(6, a);
      }, a.prototype.MANY7 = function(a) {
        this.manyInternal(7, a);
      }, a.prototype.MANY8 = function(a) {
        this.manyInternal(8, a);
      }, a.prototype.MANY9 = function(a) {
        this.manyInternal(9, a);
      }, a.prototype.MANY_SEP = function(a) {
        this.manySepFirstInternal(0, a);
      }, a.prototype.MANY_SEP1 = function(a) {
        this.manySepFirstInternal(1, a);
      }, a.prototype.MANY_SEP2 = function(a) {
        this.manySepFirstInternal(2, a);
      }, a.prototype.MANY_SEP3 = function(a) {
        this.manySepFirstInternal(3, a);
      }, a.prototype.MANY_SEP4 = function(a) {
        this.manySepFirstInternal(4, a);
      }, a.prototype.MANY_SEP5 = function(a) {
        this.manySepFirstInternal(5, a);
      }, a.prototype.MANY_SEP6 = function(a) {
        this.manySepFirstInternal(6, a);
      }, a.prototype.MANY_SEP7 = function(a) {
        this.manySepFirstInternal(7, a);
      }, a.prototype.MANY_SEP8 = function(a) {
        this.manySepFirstInternal(8, a);
      }, a.prototype.MANY_SEP9 = function(a) {
        this.manySepFirstInternal(9, a);
      }, a.prototype.AT_LEAST_ONE = function(a) {
        this.atLeastOneInternal(0, a);
      }, a.prototype.AT_LEAST_ONE1 = function(a) {
        return this.atLeastOneInternal(1, a);
      }, a.prototype.AT_LEAST_ONE2 = function(a) {
        this.atLeastOneInternal(2, a);
      }, a.prototype.AT_LEAST_ONE3 = function(a) {
        this.atLeastOneInternal(3, a);
      }, a.prototype.AT_LEAST_ONE4 = function(a) {
        this.atLeastOneInternal(4, a);
      }, a.prototype.AT_LEAST_ONE5 = function(a) {
        this.atLeastOneInternal(5, a);
      }, a.prototype.AT_LEAST_ONE6 = function(a) {
        this.atLeastOneInternal(6, a);
      }, a.prototype.AT_LEAST_ONE7 = function(a) {
        this.atLeastOneInternal(7, a);
      }, a.prototype.AT_LEAST_ONE8 = function(a) {
        this.atLeastOneInternal(8, a);
      }, a.prototype.AT_LEAST_ONE9 = function(a) {
        this.atLeastOneInternal(9, a);
      }, a.prototype.AT_LEAST_ONE_SEP = function(a) {
        this.atLeastOneSepFirstInternal(0, a);
      }, a.prototype.AT_LEAST_ONE_SEP1 = function(a) {
        this.atLeastOneSepFirstInternal(1, a);
      }, a.prototype.AT_LEAST_ONE_SEP2 = function(a) {
        this.atLeastOneSepFirstInternal(2, a);
      }, a.prototype.AT_LEAST_ONE_SEP3 = function(a) {
        this.atLeastOneSepFirstInternal(3, a);
      }, a.prototype.AT_LEAST_ONE_SEP4 = function(a) {
        this.atLeastOneSepFirstInternal(4, a);
      }, a.prototype.AT_LEAST_ONE_SEP5 = function(a) {
        this.atLeastOneSepFirstInternal(5, a);
      }, a.prototype.AT_LEAST_ONE_SEP6 = function(a) {
        this.atLeastOneSepFirstInternal(6, a);
      }, a.prototype.AT_LEAST_ONE_SEP7 = function(a) {
        this.atLeastOneSepFirstInternal(7, a);
      }, a.prototype.AT_LEAST_ONE_SEP8 = function(a) {
        this.atLeastOneSepFirstInternal(8, a);
      }, a.prototype.AT_LEAST_ONE_SEP9 = function(a) {
        this.atLeastOneSepFirstInternal(9, a);
      }, a.prototype.RULE = function(a, d, g) {
        if (void 0 === g && (g = f.DEFAULT_RULE_CONFIG), b.contains(this.definedRulesNames, a)) {
          var c = {message:e.defaultGrammarValidatorErrorProvider.buildDuplicateRuleNameError({topLevelRule:a, grammarName:this.className}), type:f.ParserDefinitionErrorType.DUPLICATE_RULE_NAME, ruleName:a};
          this.definitionErrors.push(c);
        }
        (this.definedRulesNames.push(a), this.gastProductionsCache.containsKey(a) || this.serializedGrammar) || (c = r.buildTopProduction(d.toString(), a, this.tokensMap), this.gastProductionsCache.put(a, c));
        d = this.defineRule(a, d, g);
        return this[a] = d, d;
      }, a.prototype.OVERRIDE_RULE = function(a, b, d) {
        void 0 === d && (d = f.DEFAULT_RULE_CONFIG);
        var c = [];
        (c = c.concat(q.validateRuleIsOverridden(a, this.definedRulesNames, this.className)), this.definitionErrors.push.apply(this.definitionErrors, c), this.serializedGrammar) || (c = r.buildTopProduction(b.toString(), a, this.tokensMap), this.gastProductionsCache.put(a, c));
        b = this.defineRule(a, b, d);
        return this[a] = b, b;
      }, a.prototype.BACKTRACK = function(a, b) {
        return function() {
          this.isBackTrackingStack.push(1);
          var c = this.saveRecogState();
          try {
            return a.apply(this, b), !0;
          } catch (z) {
            if (g.isRecognitionException(z)) {
              return !1;
            }
            throw z;
          } finally {
            this.reloadRecogState(c), this.isBackTrackingStack.pop();
          }
        };
      }, a.prototype.getGAstProductions = function() {
        return this.gastProductionsCache;
      }, a.prototype.getSerializedGastProductions = function() {
        return m.serializeGrammar(this.gastProductionsCache.values());
      }, a;
    }();
    d.RecognizerApi = a;
  }, function(a, d, k) {
    Object.defineProperty(d, "__esModule", {value:!0});
    var b = k(0), g = k(9), f = k(6), e = k(12), r = k(13), q = k(3), m = k(25), n = k(2), c = k(7), h = k(4);
    a = function() {
      function a() {
      }
      return a.prototype.initRecognizerEngine = function(a, d) {
        if (this.className = h.classNameFromInstance(this), this.shortRuleNameToFull = new h.HashTable, this.fullRuleNameToShort = new h.HashTable, this.ruleShortNameIdx = 256, this.tokenMatcher = c.tokenStructuredMatcherNoCategories, this.definedRulesNames = [], this.tokensMap = {}, this.allRuleNames = [], this.isBackTrackingStack = [], this.RULE_STACK = [], this.RULE_OCCURRENCE_STACK = [], this.gastProductionsCache = new h.HashTable, this.serializedGrammar = b.has(d, "serializedGrammar") ? d.serializedGrammar : 
        q.DEFAULT_PARSER_CONFIG.serializedGrammar, b.isArray(a)) {
          if (b.isEmpty(a)) {
            throw Error("A Token Vocabulary cannot be empty.\n\tNote that the first argument for the parser constructor\n\tis no longer a Token vector (since v4.0).");
          }
          if ("number" == typeof a[0].startOffset) {
            throw Error("The Parser constructor no longer accepts a token vector as the first argument.\n\tSee: https://sap.github.io/chevrotain/docs/changes/BREAKING_CHANGES.html#_4-0-0\n\tFor Further details.");
          }
        }
        if (b.isArray(a)) {
          this.tokensMap = b.reduce(a, function(a, b) {
            return a[n.tokenName(b)] = b, a;
          }, {});
        } else {
          if (b.has(a, "modes") && b.every(b.flatten(b.values(a.modes)), c.isTokenType)) {
            d = b.flatten(b.values(a.modes)), d = b.uniq(d), this.tokensMap = b.reduce(d, function(a, b) {
              return a[n.tokenName(b)] = b, a;
            }, {});
          } else {
            if (!b.isObject(a)) {
              throw Error("<tokensDictionary> argument must be An Array of Token constructors, A dictionary of Token constructors or an IMultiModeLexerDefinition");
            }
            this.tokensMap = b.cloneObj(a);
          }
        }
        this.tokensMap.EOF = n.EOF;
        this.tokenMatcher = b.every(b.values(a), function(a) {
          return b.isEmpty(a.categoryMatches);
        }) ? c.tokenStructuredMatcherNoCategories : c.tokenStructuredMatcher;
        c.augmentTokenTypes(b.values(this.tokensMap));
      }, a.prototype.defineRule = function(a, c, d) {
        if (this.selfAnalysisDone) {
          throw Error("Grammar rule <" + a + "> may not be defined after the 'performSelfAnalysis' method has been called'\nMake sure that all grammar rule definitions are done before 'performSelfAnalysis' is called.");
        }
        var e, k = b.has(d, "resyncEnabled") ? d.resyncEnabled : q.DEFAULT_RULE_CONFIG.resyncEnabled, h = b.has(d, "recoveryValueFunc") ? d.recoveryValueFunc : q.DEFAULT_RULE_CONFIG.recoveryValueFunc, m = this.ruleShortNameIdx << g.BITS_FOR_METHOD_IDX + g.BITS_FOR_OCCURRENCE_IDX;
        this.ruleShortNameIdx++;
        this.shortRuleNameToFull.put(m, a);
        this.fullRuleNameToShort.put(a, m);
        return (e = function(b, d) {
          void 0 === b && (b = 0);
          this.ruleInvocationStateUpdate(m, a, b);
          a: {
            try {
              var e = !0 === this.outputCst ? (c.apply(this, d), this.CST_STACK[this.CST_STACK.length - 1]) : c.apply(this, d);
              break a;
            } catch (J) {
              var g = 1 === this.RULE_STACK.length, n = k && !this.isBackTracking() && this.recoveryEnabled;
              if (f.isRecognitionException(J)) {
                if (n) {
                  var p, q = this.findReSyncTokenType();
                  if (this.isInCurrentRuleReSyncSet(q)) {
                    e = (J.resyncedTokens = this.reSyncTo(q), this.outputCst ? ((p = this.CST_STACK[this.CST_STACK.length - 1]).recoveredNode = !0, p) : h());
                    break a;
                  }
                  throw this.outputCst && ((p = this.CST_STACK[this.CST_STACK.length - 1]).recoveredNode = !0, J.partialCstResult = p), J;
                }
                if (g) {
                  e = (this.moveToTerminatedState(), h());
                  break a;
                }
              }
              throw J;
            } finally {
              this.ruleFinallyStateUpdate();
            }
            e = void 0;
          }
          return e;
        }).ruleName = a, e;
      }, a.prototype.optionInternal = function(a, b) {
        var c = this.getKeyForAutomaticLookahead(g.OPTION_IDX, b), d = this.nestedRuleBeforeClause(a, c);
        try {
          return this.optionInternalLogic(a, b, c);
        } finally {
          void 0 !== d && this.nestedRuleFinallyClause(c, d);
        }
      }, a.prototype.optionInternalNoCst = function(a, b) {
        var c = this.getKeyForAutomaticLookahead(g.OPTION_IDX, b);
        return this.optionInternalLogic(a, b, c);
      }, a.prototype.optionInternalLogic = function(a, b, c) {
        var d, e = this;
        c = this.getLookaheadFuncForOption(c, b);
        if (void 0 !== a.DEF) {
          if (b = a.DEF, void 0 !== (d = a.GATE)) {
            var f = c;
            c = function() {
              return d.call(e) && f.call(e);
            };
          }
        } else {
          b = a;
        }
        if (!0 === c.call(this)) {
          return b.call(this);
        }
      }, a.prototype.atLeastOneInternal = function(a, b) {
        var c = this.getKeyForAutomaticLookahead(g.AT_LEAST_ONE_IDX, a), d = this.nestedRuleBeforeClause(b, c);
        try {
          return this.atLeastOneInternalLogic(a, b, c);
        } finally {
          void 0 !== d && this.nestedRuleFinallyClause(c, d);
        }
      }, a.prototype.atLeastOneInternalNoCst = function(a, b) {
        var c = this.getKeyForAutomaticLookahead(g.AT_LEAST_ONE_IDX, a);
        this.atLeastOneInternalLogic(a, b, c);
      }, a.prototype.atLeastOneInternalLogic = function(a, b, c) {
        var d, f = this, k = this.getLookaheadFuncForAtLeastOne(c, a);
        if (void 0 !== b.DEF) {
          if (c = b.DEF, void 0 !== (d = b.GATE)) {
            var h = k;
            k = function() {
              return d.call(f) && h.call(f);
            };
          }
        } else {
          c = b;
        }
        if (!0 !== k.call(this)) {
          throw this.raiseEarlyExitException(a, e.PROD_TYPE.REPETITION_MANDATORY, b.ERR_MSG);
        }
        for (var m = this.doSingleRepetition(c); !0 === k.call(this) && !0 === m;) {
          m = this.doSingleRepetition(c);
        }
        this.attemptInRepetitionRecovery(this.atLeastOneInternal, [a, b], k, g.AT_LEAST_ONE_IDX, a, r.NextTerminalAfterAtLeastOneWalker);
      }, a.prototype.atLeastOneSepFirstInternal = function(a, b) {
        var c = this.getKeyForAutomaticLookahead(g.AT_LEAST_ONE_SEP_IDX, a), d = this.nestedRuleBeforeClause(b, c);
        try {
          this.atLeastOneSepFirstInternalLogic(a, b, c);
        } finally {
          void 0 !== d && this.nestedRuleFinallyClause(c, d);
        }
      }, a.prototype.atLeastOneSepFirstInternalNoCst = function(a, b) {
        var c = this.getKeyForAutomaticLookahead(g.AT_LEAST_ONE_SEP_IDX, a);
        this.atLeastOneSepFirstInternalLogic(a, b, c);
      }, a.prototype.atLeastOneSepFirstInternalLogic = function(a, b, c) {
        var d = this, f = b.DEF, k = b.SEP;
        if (!0 !== this.getLookaheadFuncForAtLeastOneSep(c, a).call(this)) {
          throw this.raiseEarlyExitException(a, e.PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR, b.ERR_MSG);
        }
        f.call(this);
        for (b = function() {
          return d.tokenMatcher(d.LA(1), k);
        }; !0 === this.tokenMatcher(this.LA(1), k);) {
          this.CONSUME(k), f.call(this);
        }
        this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [a, k, b, f, r.NextTerminalAfterAtLeastOneSepWalker], b, g.AT_LEAST_ONE_SEP_IDX, a, r.NextTerminalAfterAtLeastOneSepWalker);
      }, a.prototype.manyInternal = function(a, b) {
        var c = this.getKeyForAutomaticLookahead(g.MANY_IDX, a), d = this.nestedRuleBeforeClause(b, c);
        try {
          return this.manyInternalLogic(a, b, c);
        } finally {
          void 0 !== d && this.nestedRuleFinallyClause(c, d);
        }
      }, a.prototype.manyInternalNoCst = function(a, b) {
        var c = this.getKeyForAutomaticLookahead(g.MANY_IDX, a);
        return this.manyInternalLogic(a, b, c);
      }, a.prototype.manyInternalLogic = function(a, b, c) {
        var d, e = this, f = this.getLookaheadFuncForMany(c, a);
        if (void 0 !== b.DEF) {
          if (c = b.DEF, void 0 !== (d = b.GATE)) {
            var k = f;
            f = function() {
              return d.call(e) && k.call(e);
            };
          }
        } else {
          c = b;
        }
        for (var h = !0; !0 === f.call(this) && !0 === h;) {
          h = this.doSingleRepetition(c);
        }
        this.attemptInRepetitionRecovery(this.manyInternal, [a, b], f, g.MANY_IDX, a, r.NextTerminalAfterManyWalker);
      }, a.prototype.manySepFirstInternal = function(a, b) {
        var c = this.getKeyForAutomaticLookahead(g.MANY_SEP_IDX, a), d = this.nestedRuleBeforeClause(b, c);
        try {
          this.manySepFirstInternalLogic(a, b, c);
        } finally {
          void 0 !== d && this.nestedRuleFinallyClause(c, d);
        }
      }, a.prototype.manySepFirstInternalNoCst = function(a, b) {
        var c = this.getKeyForAutomaticLookahead(g.MANY_SEP_IDX, a);
        this.manySepFirstInternalLogic(a, b, c);
      }, a.prototype.manySepFirstInternalLogic = function(a, b, c) {
        var d = this, e = b.DEF, f = b.SEP;
        if (!0 === this.getLookaheadFuncForManySep(c, a).call(this)) {
          e.call(this);
          for (b = function() {
            return d.tokenMatcher(d.LA(1), f);
          }; !0 === this.tokenMatcher(this.LA(1), f);) {
            this.CONSUME(f), e.call(this);
          }
          this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [a, f, b, e, r.NextTerminalAfterManySepWalker], b, g.MANY_SEP_IDX, a, r.NextTerminalAfterManySepWalker);
        }
      }, a.prototype.repetitionSepSecondInternal = function(a, b, c, d, e) {
        for (; c();) {
          this.CONSUME(b), d.call(this);
        }
        this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [a, b, c, d, e], c, g.AT_LEAST_ONE_SEP_IDX, a, e);
      }, a.prototype.doSingleRepetition = function(a) {
        var b = this.getLexerPosition();
        return a.call(this), this.getLexerPosition() > b;
      }, a.prototype.orInternalNoCst = function(a, c) {
        var d = b.isArray(a) ? a : a.DEF, e = this.getLookaheadFuncForOr(c, d).call(this, d);
        if (void 0 !== e) {
          return d[e].ALT.call(this);
        }
        this.raiseNoAltException(c, a.ERR_MSG);
      }, a.prototype.orInternal = function(a, c) {
        var d = this.getKeyForAutomaticLookahead(g.OR_IDX, c), e = this.nestedRuleBeforeClause(a, d);
        try {
          var f = b.isArray(a) ? a : a.DEF, k = this.getLookaheadFuncForOr(c, f).call(this, f);
          if (void 0 !== k) {
            var h = f[k], m = this.nestedAltBeforeClause(h, c, g.OR_IDX, k);
            try {
              return h.ALT.call(this);
            } finally {
              void 0 !== m && this.nestedRuleFinallyClause(m.shortName, m.nestedName);
            }
          }
          this.raiseNoAltException(c, a.ERR_MSG);
        } finally {
          void 0 !== e && this.nestedRuleFinallyClause(d, e);
        }
      }, a.prototype.ruleFinallyStateUpdate = function() {
        if (this.RULE_STACK.pop(), this.RULE_OCCURRENCE_STACK.pop(), this.cstFinallyStateUpdate(), 0 === this.RULE_STACK.length && !this.isAtEndOfInput()) {
          var a = this.LA(1), b = this.errorMessageProvider.buildNotAllInputParsedMessage({firstRedundant:a, ruleName:this.getCurrRuleFullName()});
          this.SAVE_ERROR(new f.NotAllInputParsedException(b, a));
        }
      }, a.prototype.subruleInternal = function(a, b, c) {
        var d;
        try {
          return d = a.call(this, b, void 0 !== c ? c.ARGS : void 0), this.cstPostNonTerminal(d, void 0 !== c && void 0 !== c.LABEL ? c.LABEL : a.ruleName), d;
        } catch (v) {
          throw f.isRecognitionException(v) && void 0 !== v.partialCstResult && (this.cstPostNonTerminal(v.partialCstResult, void 0 !== c && void 0 !== c.LABEL ? c.LABEL : a.ruleName), delete v.partialCstResult), v;
        }
      }, a.prototype.consumeInternal = function(a, b, c) {
        try {
          var d = this.LA(1);
          if (!0 !== this.tokenMatcher(d, a)) {
            var e = void 0, g = this.LA(0);
            throw e = void 0 !== c && c.ERR_MSG ? c.ERR_MSG : this.errorMessageProvider.buildMismatchTokenMessage({expected:a, actual:d, previous:g, ruleName:this.getCurrRuleFullName()}), this.SAVE_ERROR(new f.MismatchedTokenException(e, d, g));
          }
          this.consumeToken();
          var k = d;
        } catch (A) {
          if (!this.recoveryEnabled || "MismatchedTokenException" !== A.name || this.isBackTracking()) {
            throw A;
          }
          b = this.getFollowsForInRuleRecovery(a, b);
          try {
            k = this.tryInRuleRecovery(a, b);
          } catch (D) {
            throw D.name === m.IN_RULE_RECOVERY_EXCEPTION ? A : D;
          }
        }
        return this.cstPostTerminal(void 0 !== c && void 0 !== c.LABEL ? c.LABEL : a.tokenName, k), k;
      }, a.prototype.saveRecogState = function() {
        var a = this.errors, c = b.cloneArr(this.RULE_STACK);
        return {errors:a, lexerState:this.exportLexerState(), RULE_STACK:c, CST_STACK:this.CST_STACK, LAST_EXPLICIT_RULE_STACK:this.LAST_EXPLICIT_RULE_STACK};
      }, a.prototype.reloadRecogState = function(a) {
        this.errors = a.errors;
        this.importLexerState(a.lexerState);
        this.RULE_STACK = a.RULE_STACK;
      }, a.prototype.ruleInvocationStateUpdate = function(a, b, c) {
        this.RULE_OCCURRENCE_STACK.push(c);
        this.RULE_STACK.push(a);
        this.cstInvocationStateUpdate(b, a);
      }, a.prototype.isBackTracking = function() {
        return !b.isEmpty(this.isBackTrackingStack);
      }, a.prototype.getCurrRuleFullName = function() {
        var a = this.getLastExplicitRuleShortName();
        return this.shortRuleNameToFull.get(a);
      }, a.prototype.shortRuleNameToFullName = function(a) {
        return this.shortRuleNameToFull.get(a);
      }, a.prototype.isAtEndOfInput = function() {
        return this.tokenMatcher(this.LA(1), n.EOF);
      }, a.prototype.reset = function() {
        this.resetLexerState();
        this.isBackTrackingStack = [];
        this.errors = [];
        this.RULE_STACK = [];
        this.LAST_EXPLICIT_RULE_STACK = [];
        this.CST_STACK = [];
        this.RULE_OCCURRENCE_STACK = [];
      }, a;
    }();
    d.RecognizerEngine = a;
  }, function(a, d, k) {
    Object.defineProperty(d, "__esModule", {value:!0});
    var b = k(6), g = k(0), f = k(12), e = k(3);
    a = function() {
      function a() {
      }
      return a.prototype.initErrorHandler = function(a) {
        this._errors = [];
        this.errorMessageProvider = g.defaults(a.errorMessageProvider, e.DEFAULT_PARSER_CONFIG.errorMessageProvider);
      }, a.prototype.SAVE_ERROR = function(a) {
        if (b.isRecognitionException(a)) {
          return a.context = {ruleStack:this.getHumanReadableRuleStack(), ruleOccurrenceStack:g.cloneArr(this.RULE_OCCURRENCE_STACK)}, this._errors.push(a), a;
        }
        throw Error("Trying to save an Error which is not a RecognitionException");
      }, Object.defineProperty(a.prototype, "errors", {get:function() {
        return g.cloneArr(this._errors);
      }, set:function(a) {
        this._errors = a;
      }, enumerable:!0, configurable:!0}), a.prototype.raiseEarlyExitException = function(a, d, e) {
        var c = this.getCurrRuleFullName(), g = this.getGAstProductions().get(c);
        a = f.getLookaheadPathsForOptionalProd(a, g, d, this.maxLookahead)[0];
        d = [];
        for (g = 1; g < this.maxLookahead; g++) {
          d.push(this.LA(g));
        }
        e = this.errorMessageProvider.buildEarlyExitMessage({expectedIterationPaths:a, actual:d, previous:this.LA(0), customUserDescription:e, ruleName:c});
        throw this.SAVE_ERROR(new b.EarlyExitException(e, this.LA(1), this.LA(0)));
      }, a.prototype.raiseNoAltException = function(a, d) {
        var e = this.getCurrRuleFullName();
        e = this.getGAstProductions().get(e);
        a = f.getLookaheadPathsForOr(a, e, this.maxLookahead);
        e = [];
        for (var c = 1; c <= this.maxLookahead; c++) {
          e.push(this.LA(c));
        }
        c = this.LA(0);
        d = this.errorMessageProvider.buildNoViableAltMessage({expectedPathsPerAlt:a, actual:e, previous:c, customUserDescription:d, ruleName:this.getCurrRuleFullName()});
        throw this.SAVE_ERROR(new b.NoViableAltException(d, this.LA(1), c));
      }, a;
    }();
    d.ErrorHandler = a;
  }, function(a, d, k) {
    Object.defineProperty(d, "__esModule", {value:!0});
    var b = k(13), g = k(0);
    a = function() {
      function a() {
      }
      return a.prototype.initContentAssist = function() {
      }, a.prototype.computeContentAssist = function(a, d) {
        var e = this.gastProductionsCache.get(a);
        if (g.isUndefined(e)) {
          throw Error("Rule ->" + a + "<- does not exist in this grammar.");
        }
        return b.nextPossibleTokensAfter([e], d, this.tokenMatcher, this.maxLookahead);
      }, a.prototype.getNextPossibleTokenTypes = function(a) {
        var d = g.first(a.ruleStack);
        d = this.getGAstProductions().get(d);
        return (new b.NextAfterTokenWalker(d, a)).startWalking();
      }, a;
    }();
    d.ContentAssist = a;
  }, function(a, d, k) {
    Object.defineProperty(d, "__esModule", {value:!0});
    var b = k(17);
    d.createSyntaxDiagramsCode = function(a, d) {
      d = void 0 === d ? {} : d;
      var e = d.resourceBase;
      e = void 0 === e ? "https://unpkg.com/chevrotain@" + b.VERSION + "/diagrams/" : e;
      d = d.css;
      return "\n\x3c!-- This is a generated file --\x3e\n<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<style>\n  body {\n    background-color: hsl(30, 20%, 95%)\n  }\n</style>\n\n\n<link rel='stylesheet' href='" + (void 0 === d ? "https://unpkg.com/chevrotain@" + b.VERSION + "/diagrams/diagrams.css" : d) + "'>\n\n<script src='" + e + "vendor/railroad-diagrams.js'>\x3c/script>\n<script src='" + e + "src/diagrams_builder.js'>\x3c/script>\n<script src='" + e + "src/diagrams_behavior.js'>\x3c/script>\n<script src='" + 
      e + 'src/main.js\'>\x3c/script>\n\n<div id="diagrams" align="center"></div>    \n\n<script>\n    window.serializedGrammar = ' + JSON.stringify(a, null, "  ") + ';\n\x3c/script>\n\n<script>\n    var diagramsDiv = document.getElementById("diagrams");\n    main.drawDiagramsFromSerializedGrammar(serializedGrammar, diagramsDiv);\n\x3c/script>\n';
    };
  }, function(a, d, k) {
    Object.defineProperty(d, "__esModule", {value:!0});
    var b = k(41);
    d.generateParserFactory = function(a) {
      var d = b.genWrapperFunction({name:a.name, rules:a.rules}), e = new Function("tokenVocabulary", "config", "chevrotain", d);
      return function(b) {
        return e(a.tokenVocabulary, b, k(18));
      };
    };
    d.generateParserModule = function(a) {
      return b.genUmdModule({name:a.name, rules:a.rules});
    };
  }, function(a, d, k) {
    function b(a) {
      return "\nfunction " + a.name + "(tokenVocabulary, config) {\n    // invoke super constructor\n    // No support for embedded actions currently, so we can 'hardcode'\n    // The use of CstParser.\n    chevrotain.CstParser.call(this, tokenVocabulary, config)\n\n    const $ = this\n\n    " + g(a.rules) + "\n\n    // very important to call this after all the rules have been defined.\n    // otherwise the parser may not work correctly as it will lack information\n    // derived during the self analysis phase.\n    this.performSelfAnalysis(this)\n}\n\n// inheritance as implemented in javascript in the previous decade... :(\n" + 
      a.name + ".prototype = Object.create(chevrotain.CstParser.prototype)\n" + a.name + ".prototype.constructor = " + a.name + "    \n    ";
    }
    function g(a) {
      return z.map(a, function(a) {
        return f(a, 1);
      }).join("\n");
    }
    function f(a, b) {
      var c = t(b, '$.RULE("' + a.name + '", function() {') + "\n";
      return c += h(a.definition, b + 1), c + (t(b + 1, "})") + "\n");
    }
    function e(a, b) {
      var c = y.tokenName(a.terminalType);
      return t(b, "$.CONSUME" + a.idx + "(this.tokensMap." + c + ")\n");
    }
    function r(a, b) {
      return t(b, "$.SUBRULE" + a.idx + "($." + a.nonTerminalName + ")\n");
    }
    function q(a, b) {
      var c = t(b, "$.OR" + a.idx + "([") + "\n";
      return c += z.map(a.definition, function(a) {
        return m(a, b + 1);
      }).join(",\n"), c += "\n" + t(b, "])\n");
    }
    function m(a, b) {
      var c = t(b, "{") + "\n";
      return a.name && (c += t(b + 1, 'NAME: "' + a.name + '",') + "\n"), c += t(b + 1, "ALT: function() {") + "\n", c += h(a.definition, b + 1), c += t(b + 1, "}") + "\n", c + t(b, "}");
    }
    function n(a, b, d) {
      a = t(d, "$." + (a + b.idx) + "(");
      return b.name || b.separator ? (a += "{\n", b.name && (a += t(d + 1, 'NAME: "' + b.name + '"') + ",\n"), b.separator && (a += t(d + 1, "SEP: this.tokensMap." + y.tokenName(b.separator)) + ",\n"), a += "DEF: " + c(b.definition, d + 2) + "\n", a += t(d, "}") + "\n") : a += c(b.definition, d + 1), a + (t(d, ")") + "\n");
    }
    function c(a, b) {
      var c = "function() {\n";
      return c += h(a, b), c + (t(b, "}") + "\n");
    }
    function h(a, b) {
      var c = "";
      return z.forEach(a, function(a) {
        c += function(a, b) {
          if (a instanceof x.NonTerminal) {
            return r(a, b);
          }
          if (a instanceof x.Option) {
            return n("OPTION", a, b);
          }
          if (a instanceof x.RepetitionMandatory) {
            return n("AT_LEAST_ONE", a, b);
          }
          if (a instanceof x.RepetitionMandatoryWithSeparator) {
            return n("AT_LEAST_ONE_SEP", a, b);
          }
          if (a instanceof x.RepetitionWithSeparator) {
            return n("MANY_SEP", a, b);
          }
          if (a instanceof x.Repetition) {
            return n("MANY", a, b);
          }
          if (a instanceof x.Alternation) {
            return q(a, b);
          }
          if (a instanceof x.Terminal) {
            return e(a, b);
          }
          if (a instanceof x.Flat) {
            return h(a.definition, b);
          }
          throw Error("non exhaustive match");
        }(a, b + 1);
      }), c;
    }
    function t(a, b) {
      return Array(4 * a + 1).join(" ") + b;
    }
    Object.defineProperty(d, "__esModule", {value:!0});
    var z = k(0), y = k(2), x = k(1);
    d.genUmdModule = function(a) {
      return "\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define(['chevrotain'], factory);\n    } else if (typeof module === 'object' && module.exports) {\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like environments that support module.exports,\n        // like Node.\n        module.exports = factory(require('chevrotain'));\n    } else {\n        // Browser globals (root is window)\n        root.returnExports = factory(root.b);\n    }\n}(typeof self !== 'undefined' ? self : this, function (chevrotain) {\n\n" + 
      b(a) + "\n    \nreturn {\n    " + a.name + ": " + a.name + " \n}\n}));\n";
    };
    d.genWrapperFunction = function(a) {
      return "    \n" + b(a) + "\nreturn new " + a.name + "(tokenVocabulary, config)    \n";
    };
    d.genClass = b;
    d.genAllRules = g;
    d.genRule = f;
    d.genTerminal = e;
    d.genNonTerminal = r;
    d.genAlternation = q;
    d.genSingleAlt = m;
  }]);
});
"use strict";
THREE.KeyframeTrack.prototype.color = "#FF0000";
THREE.KeyframeTrack.prototype.setColor = function(a) {
  this.color = a;
};
THREE.KeyframeTrack.prototype.sort = function() {
  for (var a = 0; a < this.times.length; a++) {
    for (var d = a + 1; d < this.times.length; d++) {
      if (this.times[a] > this.times[d]) {
        var k = this.times[d];
        this.times[d] = this.times[a];
        this.times[a] = k;
        for (var b = this.getValueSize(), g = d * b, f = a * b, e = 0; e < b; e++) {
          k = this.values[g + e], this.values[g + e] = this.values[f + e], this.values[f + e] = k;
        }
      }
    }
  }
};
THREE.KeyframeTrack._toJSON = THREE.KeyframeTrack.toJSON;
THREE.KeyframeTrack.toJSON = function(a) {
  var d = THREE.KeyframeTrack._toJSON.call(this, a);
  d.color = a.color;
  return d;
};
THREE.KeyframeTrack._parse = THREE.KeyframeTrack.parse;
THREE.KeyframeTrack.parse = function(a) {
  var d = THREE.KeyframeTrack._parse.call(this, a);
  void 0 !== a.color && (d.color = a.color);
  return d;
};
"use strict";
THREE.AnimationClip.prototype.enabled = !0;
THREE.AnimationClip.prototype.loop = THREE.LoopRepeat;
THREE.AnimationClip.prototype.timeScale = 1;
THREE.AnimationClip.prototype.weight = 1;
THREE.AnimationClip._toJSON = THREE.AnimationClip.toJSON;
THREE.AnimationClip.toJSON = function(a) {
  var d = THREE.AnimationClip._toJSON.call(this, a);
  d.enabled = a.enabled;
  d.loop = a.loop;
  d.timeScale = a.timeScale;
  d.weight = a.weight;
  return d;
};
THREE.AnimationClip._parse = THREE.AnimationClip.parse;
THREE.AnimationClip.parse = function(a) {
  var d = THREE.AnimationClip._parse.call(this, a);
  void 0 !== a.enabled && (d.enabled = a.enabled, d.loop = a.loop, d.timeScale = a.timeScale, d.weight = a.weight);
  return d;
};
"use strict";
THREE.Object3D.prototype.folded = !1;
THREE.Object3D.prototype.locked = !1;
THREE.Object3D.prototype.contains = function(a) {
  for (var d = 0; d < this.children.length; d++) {
    if (this.children[d].uuid === a.uuid || this.children[d].contains(a)) {
      return !0;
    }
  }
  return !1;
};
THREE.Object3D.prototype.playAnimation = function() {
  void 0 !== this.mixer && this.mixer.play();
};
THREE.Object3D.prototype.stopAnimation = function() {
  void 0 !== this.mixer && this.mixer.stop();
};
THREE.Object3D.prototype.initialize = function() {
  void 0 !== this.animations && (this.mixer = new AnimationMixer(this), this.mixer.createActions(this.animations), this.mixer.play());
};
THREE.Object3D.prototype.update = function(a) {
  void 0 !== this.mixer && this.mixer.update(a);
};
THREE.Object3D.prototype.resize = function(a, d) {
};
THREE.Object3D.prototype.dispose = function() {
  void 0 !== this.mixer && this.mixer.dispose();
};
THREE.Object3D.prototype.addAbove = function(a, d) {
  if (a === this) {
    return console.error("THREE.Object3D.add: object can't be added as a child of itself.", a), this;
  }
  a && a.isObject3D ? (null !== a.parent && a.parent.remove(a), a.parent = this, a.dispatchEvent({type:"added"}), d = this.children.indexOf(d), this.children.splice(d, 0, a)) : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", a);
  return this;
};
THREE.Object3D.prototype.addBellow = function(a, d) {
  if (a === this) {
    return console.error("THREE.Object3D.add: object can't be added as a child of itself.", a), this;
  }
  a && a.isObject3D ? (null !== a.parent && a.parent.remove(a), a.parent = this, a.dispatchEvent({type:"added"}), d = this.children.indexOf(d) + 1, this.children.splice(d, 0, a)) : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", a);
  return this;
};
THREE.Object3D.prototype.getScene = function() {
  for (var a = this; null !== a.parent;) {
    if (a = a.parent, a instanceof Scene) {
      return a;
    }
  }
  return null;
};
THREE.Object3D.prototype.removeAll = function() {
  for (; 0 < this.children.length;) {
    this.remove(this.children[0]);
  }
};
THREE.Object3D.prototype.isEmpty = function() {
  return 0 === this.children.length;
};
THREE.Object3D.prototype.destroy = function() {
  for (; 0 < this.children.length;) {
    this.children[0].destroy();
  }
  null !== this.parent && (this.dispose && this.dispose(), this.parent.remove(this), this.parent = null);
};
THREE.Object3D.prototype.toJSON = function(a, d, k) {
  function b(b, d) {
    void 0 === b[d.uuid] && (b[d.uuid] = d.toJSON(a));
    return d.uuid;
  }
  function g(a) {
    var b = [], c;
    for (c in a) {
      var d = a[c];
      delete d.metadata;
      b.push(d);
    }
    return b;
  }
  var f = void 0 === a, e = {};
  f && (a = new ResourceManager.ResourceContainer, e.metadata = {version:Nunu.VERSION, type:"Object3D"});
  var r = {};
  r.uuid = this.uuid;
  r.type = this.type;
  r.name = this.name;
  r.folded = this.folded;
  r.locked = this.locked;
  r.castShadow = this.castShadow;
  r.receiveShadow = this.receiveShadow;
  r.visible = this.visible;
  r.matrixAutoUpdate = this.matrixAutoUpdate;
  r.frustumCulled = this.frustumCulled;
  r.renderOrder = this.renderOrder;
  r.position = this.position.toArray();
  r.quaternion = this.quaternion.toArray();
  r.scale = this.scale.toArray();
  r.layers = this.layers.mask;
  r.userData = this.userData;
  if (this.isMesh || this.isLine || this.isPoints) {
    r.geometry = b(a.geometries, this.geometry);
    var q = this.geometry.parameters;
    if (void 0 !== q && void 0 !== q.shapes) {
      var m = q.shapes;
      if (Array.isArray(m)) {
        q = 0;
        for (var n = m.length; q < n; q++) {
          b(a.shapes, m[q]);
        }
      } else {
        b(a.shapes, m);
      }
    }
  }
  if (void 0 !== this.material) {
    if (this.material instanceof THREE.Material) {
      r.material = b(a.materials, this.material);
    } else {
      if (this.material instanceof Array) {
        m = [];
        for (q = 0; q < this.material.length; q++) {
          m.push(b(a.materials, this.material[q]));
        }
        r.material = m;
      }
    }
  }
  if (void 0 !== this.animations && 0 < this.animations.length) {
    for (r.animations = [], q = 0; q < this.animations.length; q++) {
      r.animations.push(THREE.AnimationClip.toJSON(this.animations[q]));
    }
  }
  void 0 !== d && d(a, r);
  if (!1 !== k && 0 < this.children.length) {
    for (r.children = [], q = 0; q < this.children.length; q++) {
      this.children[q].locked || r.children.push(this.children[q].toJSON(a).object);
    }
  }
  f && (e.geometries = g(a.geometries), e.materials = g(a.materials), e.textures = g(a.textures), e.images = g(a.images), e.videos = g(a.videos), e.audio = g(a.audio), e.fonts = g(a.fonts), e.skeletons = g(a.skeletons), e.resources = g(a.resources), e.shapes = g(a.shapes));
  e.object = r;
  return e;
};
"use strict";
THREE.BufferGeometry.prototype.toJSON = function() {
  var a = {metadata:{version:Nunu.VERSION, type:"BufferGeometry"}};
  a.uuid = this.uuid;
  a.type = this.type;
  a.name = this.name;
  void 0 !== this.userData && (a.userData = this.userData);
  if (void 0 !== this.parameters) {
    var d = this.parameters;
    for (q in d) {
      void 0 !== d[q] && (a[q] = d[q]);
    }
    return a;
  }
  a.data = {attributes:{}};
  d = this.index;
  null !== d && (a.data.index = {type:d.array.constructor.name, array:Array.prototype.slice.call(d.array)});
  var k = this.attributes;
  for (q in k) {
    d = k[q];
    if (void 0 !== d.toJSON) {
      var b = d.toJSON();
      "" !== d.name && (b.name = d.name);
    } else {
      b = {name:d.name, itemSize:d.itemSize, type:d.array.constructor.name, array:Array.prototype.slice.call(d.array), normalized:d.normalized};
    }
    a.data.attributes[q] = b;
  }
  k = {};
  var g = !1;
  for (q in k) {
    for (var f = this.morphAttributes[q], e = [], r = 0; r < f.length; r++) {
      d = f[r], void 0 !== d.toJSON ? (b = d.toJSON(), "" !== d.name && (b.name = d.name)) : b = {name:d.name, itemSize:d.itemSize, type:d.array.constructor.name, array:Array.prototype.slice.call(d.array), normalized:d.normalized}, e.push(b);
    }
    0 < e.length && (k[q] = e, g = !0);
  }
  g && (a.data.morphAttributes = k, a.data.morphTargetsRelative = this.morphTargetsRelative);
  var q = this.groups;
  0 < q.length && (a.data.groups = JSON.parse(JSON.stringify(q)));
  q = this.boundingSphere;
  null !== q && (a.data.boundingSphere = {center:q.center.toArray(), radius:q.radius});
  return a;
};
"use strict";
THREE.BufferAttribute.prototype.toJSON = function() {
  return {bufferType:"BufferAttribute", itemSize:this.itemSize, type:this.array.constructor.name, array:Array.prototype.slice.call(this.array), normalized:this.normalized};
};
"use strict";
THREE.InterleavedBufferAttribute.prototype.toJSON = function() {
  return {bufferType:"InterleavedBufferAttribute", data:this.data.toJSON(), itemSize:this.itemSize, offset:this.offset, normalized:this.normalized};
};
var typedArray = new TYPED_ARRAYS[json.type](json.array);
"use strict";
THREE.InterleavedBuffer.prototype.toJSON = function() {
  return {type:this.array.constructor.name, array:Array.prototype.slice.call(this.array), stride:this.stride, count:this.count, usage:this.usage};
};
"use strict";
THREE.InstancedBufferAttribute.prototype.toJSON = function() {
  var a = BufferAttribute.prototype.toJSON.call(this);
  a.bufferType = "InstancedBufferAttribute";
  a.meshPerAttribute = this.meshPerAttribute;
  return a;
};
var TYPED_ARRAYS = {Int8Array:Int8Array, Uint8Array:Uint8Array, Uint8ClampedArray:"undefined" !== typeof Uint8ClampedArray ? Uint8ClampedArray : Uint8Array, Int16Array:Int16Array, Uint16Array:Uint16Array, Int32Array:Int32Array, Uint32Array:Uint32Array, Float32Array:Float32Array, Float64Array:Float64Array}, parseBufferAttribute = function(a) {
  if (void 0 !== a.bufferType) {
    if ("BufferAttribute" === a.bufferType) {
      var d = new TYPED_ARRAYS[a.type](a.array);
      d = new THREE.BufferAttribute(d, a.itemSize, a.normalized);
    } else {
      "InstancedBufferAttribute" === a.bufferType ? (d = new TYPED_ARRAYS[a.type](a.array), d = new THREE.InstancedBufferAttribute(d, a.itemSize, a.normalized, a.meshPerAttribute)) : "InterleavedBufferAttribute" === a.bufferType && (d = new TYPED_ARRAYS[a.data.type](a.data.array), d = new THREE.InterleavedBuffer(d, a.data.stride), d.setUsage(a.data.usage), d.count = a.data.count, d = new THREE.InterleavedBufferAttribute(d, a.itemSize, a.offset, a.normalized));
    }
  } else {
    d = new TYPED_ARRAYS[a.type](a.array), d = new (a.isInstancedBufferAttribute ? THREE.InstancedBufferAttribute : THREE.BufferAttribute)(d, a.itemSize, a.normalized);
  }
  void 0 !== a.name && (d.name = a.name);
  return d;
};
THREE.BufferGeometryLoader.prototype.parse = function(a) {
  var d = a.isInstancedBufferGeometry ? new InstancedBufferGeometry : new BufferGeometry, k = a.data.index;
  void 0 !== k && (k = new TYPED_ARRAYS[k.type](k.array), d.setIndex(new THREE.BufferAttribute(k, 1)));
  k = a.data.attributes;
  for (var b in k) {
    d.setAttribute(b, parseBufferAttribute(k[b]));
  }
  var g = a.data.morphAttributes;
  if (g) {
    for (b in g) {
      var f = g[b], e = [];
      k = 0;
      for (var r = f.length; k < r; k++) {
        e.push(parseBufferAttribute(f[k]));
      }
      d.morphAttributes[b] = e;
    }
  }
  a.data.morphTargetsRelative && (d.morphTargetsRelative = !0);
  b = a.data.groups || a.data.drawcalls || a.data.offsets;
  if (void 0 !== b) {
    for (k = 0, g = b.length; k !== g; ++k) {
      f = b[k], d.addGroup(f.start, f.count, f.materialIndex);
    }
  }
  b = a.data.boundingSphere;
  void 0 !== b && (k = new THREE.Vector3, void 0 !== b.center && k.fromArray(b.center), d.boundingSphere = new THREE.Sphere(k, b.radius));
  a.name && (d.name = a.name);
  a.userData && (d.userData = a.userData);
  return d;
};
"use strict";
THREE.Camera.prototype.render = function(a, d) {
  a.render(d, this);
};
"use strict";
THREE.Material.prototype.dispose = function() {
  function a(a) {
    void 0 !== a && null !== a && a.dispose();
  }
  this.dispatchEvent({type:"dispose"});
  a(this.map);
  a(this.bumpMap);
  a(this.normalMap);
  a(this.displacementMap);
  a(this.specularMap);
  a(this.emissiveMap);
  a(this.alphaMap);
  a(this.roughnessMap);
  a(this.metalnessMap);
  a(this.envMap);
};
THREE.Material.prototype.toJSON = function(a) {
  function d(a) {
    var b = [], d;
    for (d in a) {
      var f = a[d];
      delete f.metadata;
      b.push(f);
    }
    return b;
  }
  void 0 === a && (a = {textures:{}, images:{}, videos:{}});
  var k = {};
  k.uuid = this.uuid;
  k.type = this.type;
  k.name = this.name;
  k.toneMapped = this.toneMapped;
  k.depthFunc = this.depthFunc;
  k.depthTest = this.depthTest;
  k.depthWrite = this.depthWrite;
  this.color && this.color.isColor && (k.color = this.color.getHex());
  void 0 !== this.roughness && (k.roughness = this.roughness);
  void 0 !== this.metalness && (k.metalness = this.metalness);
  this.specular && this.specular.isColor && (k.specular = this.specular.getHex());
  void 0 !== this.shininess && (k.shininess = this.shininess);
  void 0 !== this.clearcoat && (k.clearcoat = this.clearcoat);
  void 0 !== this.clearcoatRoughness && (k.clearcoatRoughness = this.clearcoatRoughness);
  void 0 !== this.transparency && (k.transparency = this.transparency);
  this.map && this.map.isTexture && (k.map = this.map.toJSON(a).uuid);
  this.alphaMap && this.alphaMap.isTexture && (k.alphaMap = this.alphaMap.toJSON(a).uuid);
  this.lightMap && this.lightMap.isTexture && (k.lightMap = this.lightMap.toJSON(a).uuid);
  this.bumpMap && this.bumpMap.isTexture && (k.bumpMap = this.bumpMap.toJSON(a).uuid, k.bumpScale = this.bumpScale);
  this.normalMap && this.normalMap.isTexture && (k.normalMap = this.normalMap.toJSON(a).uuid, k.normalMapType = this.normalMapType, k.normalScale = this.normalScale.toArray());
  this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture && (k.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(a).uuid, k.clearcoatNormalScale = this.clearcoatNormalScale.toArray());
  this.displacementMap && this.displacementMap.isTexture && (k.displacementMap = this.displacementMap.toJSON(a).uuid, k.displacementScale = this.displacementScale, k.displacementBias = this.displacementBias);
  this.roughnessMap && this.roughnessMap.isTexture && (k.roughnessMap = this.roughnessMap.toJSON(a).uuid);
  this.metalnessMap && this.metalnessMap.isTexture && (k.metalnessMap = this.metalnessMap.toJSON(a).uuid);
  this.emissive && this.emissive.isColor && (k.emissive = this.emissive.getHex());
  1 !== this.emissiveIntensity && (k.emissiveIntensity = this.emissiveIntensity);
  this.matcap && this.matcap.isTexture && (k.matcap = this.matcap.toJSON(a).uuid);
  this.emissiveMap && this.emissiveMap.isTexture && (k.emissiveMap = this.emissiveMap.toJSON(a).uuid);
  this.aoMap && this.aoMap.isTexture && (k.aoMap = this.aoMap.toJSON(a).uuid);
  this.aoMapIntensity && (k.aoMapIntensity = this.aoMapIntensity);
  this.specularMap && this.specularMap.isTexture && (k.specularMap = this.specularMap.toJSON(a).uuid);
  this.envMap && this.envMap.isTexture && (k.envMap = this.envMap.toJSON(a).uuid, k.reflectivity = this.reflectivity, this.combine && (k.combine = this.combine), this.envMapIntensity && (k.envMapIntensity = this.envMapIntensity), this.refractionRatio && (k.refractionRatio = this.refractionRatio));
  this.gradientMap && this.gradientMap.isTexture && (k.gradientMap = this.gradientMap.toJSON(a).uuid);
  void 0 !== this.size && (k.size = this.size);
  void 0 !== this.sizeAttenuation && (k.sizeAttenuation = this.sizeAttenuation);
  void 0 !== this.rotation && (k.rotation = this.rotation);
  void 0 !== this.linewidth && (k.linewidth = this.linewidth);
  void 0 !== this.dashSize && (k.dashSize = this.dashSize);
  void 0 !== this.gapSize && (k.gapSize = this.gapSize);
  void 0 !== this.scale && (k.scale = this.scale);
  this.blending !== THREE.NormalBlending && (k.blending = this.blending);
  this.side !== THREE.FrontSide && (k.side = this.side);
  this.vertexColors !== THREE.NoColors && (k.vertexColors = this.vertexColors);
  k.flatShading = this.flatShading;
  1 > this.opacity && (k.opacity = this.opacity);
  !0 === this.transparent && (k.transparent = this.transparent);
  !0 === this.dithering && (k.dithering = !0);
  0 < this.alphaTest && (k.alphaTest = this.alphaTest);
  !0 === this.premultipliedAlpha && (k.premultipliedAlpha = this.premultipliedAlpha);
  !0 === this.wireframe && (k.wireframe = this.wireframe);
  1 < this.wireframeLinewidth && (k.wireframeLinewidth = this.wireframeLinewidth);
  "round" !== this.wireframeLinecap && (k.wireframeLinecap = this.wireframeLinecap);
  "round" !== this.wireframeLinejoin && (k.wireframeLinejoin = this.wireframeLinejoin);
  k.skinning = this.skinning;
  k.morphTargets = this.morphTargets;
  void 0 !== this.morphNormals && (k.morphNormals = this.morphNormals);
  if (void 0 === a) {
    var b = d(a.textures), g = d(a.images);
    a = d(a.videos);
    0 < b.length && (k.textures = b);
    0 < g.length && (k.images = g);
    0 < a.length && (k.videos = a);
  }
  return k;
};
"use strict";
THREE.Texture.prototype.toJSON = function(a) {
  if (void 0 !== a.textures[this.uuid]) {
    return a.textures[this.uuid];
  }
  var d = {metadata:{version:Nunu.VERSION, type:"Texture"}, uuid:this.uuid, name:this.name, category:this.category, mapping:this.mapping, repeat:[this.repeat.x, this.repeat.y], offset:[this.offset.x, this.offset.y], center:[this.center.x, this.center.y], rotation:this.rotation, wrap:[this.wrapS, this.wrapT], format:this.format, type:this.type, encoding:this.encoding, minFilter:this.minFilter, magFilter:this.magFilter, anisotropy:this.anisotropy, flipY:this.flipY, premultiplyAlpha:this.premultiplyAlpha, 
  unpackAlignment:this.unpackAlignment};
  return a.textures[this.uuid] = d;
};
"use strict";
THREE.LightShadow.prototype.toJSON = function() {
  var a = {};
  a.bias = this.bias;
  a.radius = this.radius;
  a.mapSize = {};
  a.mapSize.x = this.mapSize.x;
  a.mapSize.y = this.mapSize.y;
  a.camera = {};
  a.camera.top = this.camera.top;
  a.camera.bottom = this.camera.bottom;
  a.camera.far = this.camera.far;
  a.camera.near = this.camera.near;
  a.camera.left = this.camera.left;
  a.camera.right = this.camera.right;
  return a;
};
THREE.LightShadow.prototype.fromJSON = function(a) {
  void 0 !== a.bias && (this.bias = a.bias);
  void 0 !== a.radius && (this.radius = a.radius);
  if (void 0 !== a.mapSize) {
    var d = a.mapSize;
    this.mapSize.set(d.x, d.y);
  }
  void 0 !== a.camera && (a = a.camera, this.camera.top = a.top, this.camera.bottom = a.bottom, this.camera.left = a.left, this.camera.right = a.right, this.camera.near = a.near, this.camera.far = a.far);
};
"use strict";
THREE.Fog.NONE = 0;
THREE.Fog.LINEAR = 1;
THREE.Fog.EXPONENTIAL = 2;
"use strict";
THREE.Points.prototype.raycast = function(a, d) {
  null === this.geometry.boundingBox && this.geometry.computeBoundingBox();
  var k = new THREE.Box3;
  k.copy(this.geometry.boundingBox);
  k.applyMatrix4(this.matrixWorld);
  null !== a.ray.intersectBox(k, new THREE.Vector3) && d.push({object:this});
};
"use strict";
function Nunu() {
}
Nunu.NAME = "nunuStudio";
Nunu.VERSION = "<PLACEHOLDER_VERSION>";
Nunu.TIMESTAMP = "<PLACEHOLDER_TIMESTAMP>";
Nunu.REPOSITORY_BRANCH = "<PLACEHOLDER_REPOSITORY_BRANCH>";
Nunu.REPOSITORY_COMMIT = "<PLACEHOLDER_REPOSITORY_COMMIT>";
Nunu.NWJS = 200;
Nunu.BROWSER = 201;
Nunu.CORDOVA = 202;
Nunu.developmentMode = function() {
  return "<PLACEHOLDER_TIMESTAMP>" === Nunu.TIMESTAMP;
};
Nunu.vrAvailable = function() {
  return Nunu.webVRAvailable() || Nunu.webXRAvailable();
};
Nunu.enterVR = function(a, d) {
  Nunu.webXRAvailable() ? Nunu.getXRSession(function(k) {
    a.xr.enabled = !0;
    a.xr.setSession(k);
    void 0 !== d && d();
  }) : Nunu.webVRAvailable() ? Nunu.getVRDisplay(function(k) {
    k.isPresenting || (a.xr.enabled = !0, a.xr.setDevice(k), k.requestPresent([{source:a.domElement}]), void 0 !== d && d());
  }) : console.warn("nunuStudio: VR support is not available.");
};
Nunu.exitVR = function(a) {
  Nunu.webXRAvailable() ? Nunu.getXRSession(function(d) {
    a.xr.enabled = !1;
    a.xr.setSession(null);
  }) : Nunu.webVRAvailable() && Nunu.getVRDisplay(function(d) {
    d.isPresenting && (a.xr.enabled = !1, a.xr.setDevice(null), device.exitPresent());
  });
};
Nunu.webXRSession = null;
Nunu.webXRSupported = null;
void 0 !== navigator.xr && void 0 !== navigator.xr.isSessionSupported && navigator.xr.isSessionSupported("immersive-vr").then(function(a) {
  Nunu.webXRSupported = a;
});
Nunu.webXRAvailable = function() {
  return void 0 !== navigator.xr && void 0 !== navigator.xr.isSessionSupported && !1 !== Nunu.webXRSupported;
};
Nunu.getXRSession = function(a) {
  Nunu.webXRAvailable() ? null !== Nunu.webXRSession ? a(Nunu.webXRSession) : navigator.xr.requestSession("immersive-vr", {optionalFeatures:["local-floor", "bounded-floor"]}).then(function(d) {
    Nunu.webXRSession = d;
    a(d);
  }) : console.warn("nunuStudio: WebXR support is not available.");
};
Nunu.webVRDisplay = null;
Nunu.webVRHasDisplay = null;
void 0 !== navigator.getVRDisplays && navigator.getVRDisplays().then(function(a) {
  Nunu.webVRHasDisplay = 0 < a.length;
});
Nunu.webVRAvailable = function() {
  return void 0 !== navigator.getVRDisplays && !1 !== Nunu.webVRHasDisplay;
};
Nunu.getVRDisplay = function(a) {
  Nunu.webVRAvailable() ? null !== Nunu.webVRDisplay ? a(Nunu.webVRDisplay) : navigator.getVRDisplays().then(function(d) {
    0 < d.length ? (Nunu.webVRDisplay = d[0], a(d[0])) : console.warn("nunuStudio: WebVR supported but no display is available.");
  }) : console.warn("nunuStudio: WebVR support is not available.");
};
Nunu.getQueryParameters = function() {
  for (var a = location.search.substring(1).split("&"), d = {}, k = 0; k < a.length; k++) {
    var b = a[k].split("=");
    if (1 < b.length) {
      var g = unescape(b[0]).replace(/"/g, "");
      b = unescape(b[1]).replace(/"/g, "");
      d[g] = b;
    }
  }
  return d;
};
Nunu.createWorker = function(a, d) {
  a = new Blob([a], {type:"application/javascript"});
  a = new Worker(URL.createObjectURL(a));
  void 0 !== d && (a.onmessage = d);
  return a;
};
Nunu.webAudioAvailable = function() {
  return void 0 !== window.AudioContext || void 0 !== window.webkitAudioContext;
};
Nunu.webGLAvailable = function() {
  try {
    var a = document.createElement("canvas");
    (a.getContext("webgl") || a.getContext("experimental-webgl")).getSupportedExtensions();
    return !0;
  } catch (d) {
  }
  return !1;
};
Nunu.getPlatform = function() {
  return void 0 !== window.nw ? Nunu.NWJS : void 0 !== window.cordova ? Nunu.CORDOVA : Nunu.BROWSER;
};
Nunu.runningOnDesktop = function() {
  return void 0 !== window.nw;
};
Nunu.openWebpage = function(a) {
  Nunu.runningOnDesktop() ? require("nw.gui").Shell.openExternal(a) : window.open(a);
};
Nunu.isFullscreen = function() {
  return !0 === document.webkitIsFullScreen || !0 === document.mozFullScreen || !0 === document.webkitIsFullScreen || !0 === document.webkitIsFullScreen || !0 === document.fullscreen || !1;
};
Nunu.setFullscreen = function(a, d) {
  var k = Nunu.isFullscreen();
  void 0 === a && (a = !k);
  !0 === a ? (void 0 === d && (d = document.body), !1 === k && (d.requestFullscreen = d.requestFullscreen || d.mozRequestFullScreen || d.webkitRequestFullscreen || d.msRequestFullscreen, void 0 !== d.requestFullscreen && d.requestFullscreen())) : !0 === k && (document.exitFullscreen = document.exitFullscreen || document.mozCancelFullScreen || document.webkitExitFullscreen, void 0 !== document.exitFullscreen && document.exitFullscreen());
};
"use strict";
function importFrom(a) {
  for (var d in a) {
    d in window || (window[d] = a[d]);
  }
}
importFrom(THREE);
importFrom(CANNON);
"use strict";
function FileSystem() {
}
try {
  FileSystem.fs = require("fs");
} catch (a) {
}
FileSystem.isLocalFile = function(a) {
  return !(a.startsWith("http") || a.startsWith("blob") || a.startsWith("data"));
};
FileSystem.readFile = function(a, d, k, b, g) {
  void 0 === d && (d = !0);
  if (void 0 !== FileSystem.fs && FileSystem.isLocalFile(a)) {
    if (!0 === d) {
      return a = FileSystem.fs.readFileSync(a, "utf8"), void 0 !== k && k(a), a;
    }
    FileSystem.fs.readFile(a, "utf8", function(a, b) {
      null !== a ? void 0 !== g && g(a) : void 0 !== k && k(b);
    });
    return null;
  }
  var f = new XMLHttpRequest;
  f.overrideMimeType("text/plain");
  f.open("GET", a, !d);
  void 0 !== k && (f.onload = function() {
    k(f.response);
  });
  void 0 !== b && (f.onprogress = b);
  void 0 !== g && (f.onerror = g);
  f.send(null);
  return !0 === d ? f.response : null;
};
FileSystem.readFileArrayBuffer = function(a, d, k, b, g) {
  void 0 === d && (d = !0);
  if (void 0 !== FileSystem.fs && FileSystem.isLocalFile(a)) {
    if (!0 === d) {
      return a = FileSystem.fs.readFileSync(a), ArraybufferUtils.fromBuffer(a);
    }
    FileSystem.fs.readFile(a, function(a, b) {
      null !== a ? void 0 !== g && g(a) : void 0 !== k && k(ArraybufferUtils.fromBuffer(b));
    });
    return null;
  }
  var f = new XMLHttpRequest;
  f.open("GET", a, !d);
  f.overrideMimeType("text/plain; charset=x-user-defined");
  void 0 !== k && (f.onload = function() {
    k(ArraybufferUtils.fromBinaryString(f.response));
  });
  void 0 !== b && (f.onprogress = b);
  void 0 !== g && (f.onerror = g);
  f.send(null);
  return !0 === d ? ArraybufferUtils.fromBinaryString(f.response) : null;
};
FileSystem.readFileBase64 = function(a, d, k, b, g) {
  void 0 === d && (d = !0);
  if (void 0 !== FileSystem.fs && FileSystem.isLocalFile(a)) {
    if (!0 === d) {
      return a = FileSystem.fs.readFileSync(a), (new Buffer(a)).toString("base64");
    }
    FileSystem.fs.readFile(a, function(a, b) {
      null !== a ? void 0 !== g && g(a) : void 0 !== k && k((new Buffer(b)).toString("base64"));
    });
    return null;
  }
  var f = new XMLHttpRequest;
  f.open("GET", a, !d);
  f.overrideMimeType("text/plain; charset=x-user-defined");
  void 0 !== k && (f.onload = function() {
    k(Base64Utils.fromBinaryString(f.response));
  });
  void 0 !== b && (f.onprogress = b);
  void 0 !== g && (f.onerror = g);
  f.send(null);
  return !0 === d ? Base64Utils.fromBinaryString(f.response) : null;
};
FileSystem.writeFile = function(a, d, k, b) {
  void 0 !== FileSystem.fs ? void 0 !== FileSystem.fs.writeFileSync ? !1 !== k ? (FileSystem.fs.writeFileSync(a, d, "utf8"), void 0 !== b && b()) : FileSystem.fs.writeFile(a, d, "utf8", b) : (a = FileSystem.fs.createWriteStream(a, "utf8"), a.write(d), a.end()) : (d = new Blob([d], {type:"octet/stream"}), k = document.createElement("a"), k.download = a, k.href = window.URL.createObjectURL(d), k.style.display = "none", k.onclick = function() {
    document.body.removeChild(this);
  }, document.body.appendChild(k), k.click(), void 0 !== b && b());
};
FileSystem.writeFileBase64 = function(a, d, k, b) {
  void 0 !== FileSystem.fs ? (d = Buffer.from(Base64Utils.removeHeader(d), "base64"), void 0 !== FileSystem.fs.writeFile ? !1 !== k ? (FileSystem.fs.writeFileSync(a, d), void 0 !== b && b()) : FileSystem.fs.writeFile(a, d, b) : (a = FileSystem.fs.createWriteStream(a), a.write(d), a.end())) : (k = ArraybufferUtils.fromBase64(Base64Utils.removeHeader(d)), k = new Blob([k]), d = document.createElement("a"), d.download = a, d.href = window.URL.createObjectURL(k), d.onclick = function() {
    document.body.removeChild(this);
  }, d.style.display = "none", document.body.appendChild(d), d.click(), void 0 !== b && b());
};
FileSystem.writeFileArrayBuffer = function(a, d, k, b) {
  void 0 !== FileSystem.fs ? (d = BufferUtils.fromArrayBuffer(d), void 0 !== FileSystem.fs.writeFileSync ? !1 !== k ? (FileSystem.fs.writeFileSync(a, d), void 0 !== b && b()) : FileSystem.fs.writeFile(a, d, b) : (a = FileSystem.fs.createWriteStream(a), a.write(d), a.end())) : (k = new Blob([d]), d = document.createElement("a"), d.download = a, d.href = window.URL.createObjectURL(k), d.onclick = function() {
    document.body.removeChild(this);
  }, d.style.display = "none", document.body.appendChild(d), d.click(), void 0 !== b && b());
};
FileSystem.chooseFile = function(a, d, k, b) {
  var g = document.createElement("input");
  g.type = "file";
  g.style.display = "none";
  document.body.appendChild(g);
  void 0 !== d && (g.accept = d);
  !0 === b && (g.multiple = !0);
  g.onchange = function(b) {
    void 0 !== a && a(g.files);
    document.body.removeChild(g);
  };
  void 0 !== k && (g.nwsaveas = !0 !== k ? k : "file");
  g.click();
};
FileSystem.chooseFileName = function(a, d, k) {
  k = prompt("Save As", void 0 !== k ? k : "file");
  null !== k && (void 0 === d || k.endsWith(d) || (k += d), void 0 !== a && a(k));
};
FileSystem.copyFile = function(a, d) {
  void 0 !== FileSystem.fs && (void 0 !== FileSystem.fs.copyFileSync ? FileSystem.fs.copyFileSync(a, d) : (a.replace(/\//g, "\\"), d.replace(/\//g, "\\"), FileSystem.fs.createReadStream(a).pipe(FileSystem.fs.createWriteStream(d))));
};
FileSystem.makeDirectory = function(a) {
  void 0 !== FileSystem.fs && (a.replace(/\//g, "\\"), FileSystem.fs.mkdirSync(a, {recursive:!0}));
};
FileSystem.getFilesDirectory = function(a) {
  if (void 0 !== FileSystem.fs) {
    try {
      return a.replace(/\//g, "\\"), FileSystem.fs.readdirSync(a);
    } catch (d) {
    }
  }
  return [];
};
FileSystem.deleteFolder = function(a) {
  void 0 !== FileSystem.fs && FileSystem.fs.existsSync(a) && (FileSystem.fs.readdirSync(a).forEach(function(d, k) {
    d = a + "/" + d;
    FileSystem.fs.lstatSync(d).isDirectory() ? FileSystem.deleteFolder(d) : FileSystem.fs.unlinkSync(d);
  }), FileSystem.fs.rmdirSync(a));
};
FileSystem.copyFolder = function(a, d) {
  if (void 0 !== FileSystem.fs) {
    a.replace(/\//g, "\\");
    d.replace(/\//g, "\\");
    FileSystem.makeDirectory(d);
    for (var k = FileSystem.fs.readdirSync(a), b = 0; b < k.length; b++) {
      var g = a + "\\" + k[b], f = d + "\\" + k[b], e = FileSystem.fs.statSync(g);
      e.isDirectory() ? FileSystem.copyFolder(g, f) : e.isSymbolicLink() ? FileSystem.fs.symlinkSync(FileSystem.fs.readlinkSync(g), f) : FileSystem.copyFile(g, f);
    }
  }
};
FileSystem.fileExists = function(a) {
  return void 0 !== FileSystem.fs ? (a.replace(/\//g, "\\"), FileSystem.fs.existsSync(a)) : !1;
};
FileSystem.getFileName = function(a) {
  if (void 0 !== a) {
    var d = a.lastIndexOf("\\"), k = a.lastIndexOf("/");
    return a.substring(d > k ? d + 1 : k + 1, a.lastIndexOf("."));
  }
  return "";
};
FileSystem.getFileNameWithExtension = function(a) {
  if (void 0 !== a) {
    var d = a.lastIndexOf("\\"), k = a.lastIndexOf("/");
    return a.substring(d > k ? d + 1 : k + 1, a.length);
  }
  return "";
};
FileSystem.getNameWithoutExtension = function(a) {
  return void 0 !== a ? a.substring(0, a.lastIndexOf(".")) : "";
};
FileSystem.getFilePath = function(a) {
  if (void 0 !== a) {
    var d = a.lastIndexOf("\\"), k = a.lastIndexOf("/");
    return a.substring(0, d > k ? d + 1 : k + 1);
  }
  return "";
};
FileSystem.getFileExtension = function(a) {
  return void 0 !== a ? a.substring(a.lastIndexOf(".") + 1, a.length).toLowerCase() : "";
};
"use strict";
function TargetConfig() {
  this.desktop = {fullscreen:!1, frame:!0, resizable:!0};
}
"use strict";
function AnimationMixer(a) {
  THREE.AnimationMixer.call(this, a);
  this.playing = !1;
}
AnimationMixer.prototype = Object.create(THREE.AnimationMixer.prototype);
AnimationMixer.prototype.createActions = function(a) {
  for (var d = 0; d < a.length; d++) {
    var k = this.clipAction(a[d]);
    k.setLoop(a[d].loop);
    k.weight = a[d].weight;
    k.timeScale = a[d].timeScale;
    k.enabled = a[d].enabled;
    k.play();
  }
  return this._actions;
};
AnimationMixer.prototype.setTime = function(a) {
  this.time = a;
  for (var d = 0; d < this._actions.length; d++) {
    this._actions[d].time = a;
  }
  this.update(0, !0);
};
AnimationMixer.prototype.play = function() {
  this.playing = !0;
};
AnimationMixer.prototype.stop = function() {
  this.setTime(0);
  this.playing = !1;
};
AnimationMixer.prototype.pause = function() {
  this.playing = !1;
};
AnimationMixer.prototype.dispose = function() {
  this.stopAllAction();
  this.uncacheRoot(this._root);
};
AnimationMixer.prototype.update = function(a, d) {
  if (this.playing || d) {
    this.time += a;
    d = Math.sign(a);
    for (var k = 0; k < this._actions.length; k++) {
      this._actions[k]._update(this.time, a, d, this._accuIndex);
    }
    for (k = 0; k < this._bindings.length; k++) {
      this._bindings[k].apply(this._accuIndex);
    }
  }
  return this;
};
"use strict";
function Key() {
  this.justReleased = this.justPressed = this.pressed = !1;
}
Key.DOWN = -1;
Key.UP = 1;
Key.RESET = 0;
Key.prototype.constructor = Key;
Key.prototype.update = function(a) {
  this.justReleased = this.justPressed = !1;
  a === Key.DOWN ? (!1 === this.pressed && (this.justPressed = !0), this.pressed = !0) : a === Key.UP ? (this.pressed && (this.justReleased = !0), this.pressed = !1) : a === Key.RESET && (this.justPressed = this.justReleased = !1);
};
Key.prototype.set = function(a, d, k) {
  this.justPressed = a;
  this.pressed = d;
  this.justReleased = k;
};
Key.prototype.reset = function() {
  this.justReleased = this.pressed = this.justPressed = !1;
};
"use strict";
function Keyboard(a) {
  this.keys = [];
  this.actions = [];
  var d = this, k = this.actions;
  this.events = new EventManager;
  this.events.add(window, "keydown", function(a) {
    k.push(a.keyCode);
    k.push(Key.DOWN);
  });
  this.events.add(window, "keyup", function(a) {
    k.push(a.keyCode);
    k.push(Key.UP);
  });
  this.events.add(window, "focus", function(a) {
    d.reset();
  });
  !0 !== a && this.create();
}
Keyboard.prototype = Keyboard;
Keyboard.prototype.constructor = Keyboard;
Keyboard.update = function() {
  for (var a = 0; this.actions.length > a;) {
    var d = this.actions.shift(), k = this.actions.shift();
    void 0 === this.keys[d] && (this.keys[d] = new Key);
    this.keys[d].update(k);
    if (this.keys[d].justReleased || this.keys[d].justPressed) {
      this.actions.push(d), this.actions.push(Key.RESET), a += 2;
    }
  }
};
Keyboard.reset = function() {
  for (var a = 0; a < this.keys.length; a++) {
    void 0 !== this.keys[a] && this.keys[a].reset();
  }
};
Keyboard.keyPressed = function(a) {
  return void 0 !== this.keys[a] && this.keys[a].pressed;
};
Keyboard.keyJustPressed = function(a) {
  return void 0 !== this.keys[a] && this.keys[a].justPressed;
};
Keyboard.keyJustReleased = function(a) {
  return void 0 !== this.keys[a] && this.keys[a].justReleased;
};
Keyboard.create = function() {
  this.events.create();
};
Keyboard.dispose = function() {
  this.events.destroy();
};
Keyboard.TAB = 9;
Keyboard.ENTER = 13;
Keyboard.SHIFT = 16;
Keyboard.CTRL = 17;
Keyboard.ALT = 18;
Keyboard.CAPS_LOCK = 20;
Keyboard.ESC = 27;
Keyboard.SPACEBAR = 32;
Keyboard.PAGE_UP = 33;
Keyboard.PAGE_DOWN = 34;
Keyboard.END = 35;
Keyboard.HOME = 36;
Keyboard.INSERT = 45;
Keyboard.DEL = 46;
Keyboard.LEFT = 37;
Keyboard.RIGHT = 39;
Keyboard.UP = 38;
Keyboard.DOWN = 40;
Keyboard.NUM0 = 48;
Keyboard.NUM1 = 49;
Keyboard.NUM2 = 50;
Keyboard.NUM3 = 51;
Keyboard.NUM4 = 52;
Keyboard.NUM5 = 53;
Keyboard.NUM6 = 54;
Keyboard.NUM7 = 55;
Keyboard.NUM8 = 56;
Keyboard.NUM9 = 57;
Keyboard.A = 65;
Keyboard.B = 66;
Keyboard.C = 67;
Keyboard.D = 68;
Keyboard.E = 69;
Keyboard.F = 70;
Keyboard.G = 71;
Keyboard.H = 72;
Keyboard.I = 73;
Keyboard.J = 74;
Keyboard.K = 75;
Keyboard.L = 76;
Keyboard.M = 77;
Keyboard.N = 78;
Keyboard.O = 79;
Keyboard.P = 80;
Keyboard.Q = 81;
Keyboard.R = 82;
Keyboard.S = 83;
Keyboard.T = 84;
Keyboard.U = 85;
Keyboard.V = 86;
Keyboard.W = 87;
Keyboard.X = 88;
Keyboard.Y = 89;
Keyboard.Z = 90;
Keyboard.F1 = 112;
Keyboard.F2 = 113;
Keyboard.F3 = 114;
Keyboard.F4 = 115;
Keyboard.F5 = 116;
Keyboard.F6 = 117;
Keyboard.F7 = 118;
Keyboard.F8 = 119;
Keyboard.F9 = 120;
Keyboard.F10 = 121;
Keyboard.F11 = 122;
Keyboard.F12 = 123;
"use strict";
function TizenKeyboard() {
}
TizenKeyboard.ARROW_LEFT = 37;
TizenKeyboard.ARROW_UP = 38;
TizenKeyboard.ARROW_RIGHT = 39;
TizenKeyboard.ARROW_DOWN = 40;
TizenKeyboard.ENTER = 13;
TizenKeyboard.BACK = 10009;
TizenKeyboard.VOLUME_UP = 447;
TizenKeyboard.VOLUME_DOWN = 448;
TizenKeyboard.VOLUME_MUTE = 449;
TizenKeyboard.CHANNEL_UP = 427;
TizenKeyboard.CHANNEL_DOWN = 428;
TizenKeyboard.F0_RED = 403;
TizenKeyboard.F1_GREEN = 404;
TizenKeyboard.F2_YELLOW = 405;
TizenKeyboard.F3_BLUE = 406;
TizenKeyboard.NUM_0 = 48;
TizenKeyboard.NUM_1 = 49;
TizenKeyboard.NUM_2 = 50;
TizenKeyboard.NUM_3 = 51;
TizenKeyboard.NUM_4 = 52;
TizenKeyboard.NUM_5 = 53;
TizenKeyboard.NUM_6 = 54;
TizenKeyboard.NUM_7 = 55;
TizenKeyboard.NUM_8 = 56;
TizenKeyboard.NUM_9 = 57;
TizenKeyboard.MINUS = 189;
TizenKeyboard.E_MANUAL = 10146;
TizenKeyboard.PREVIOUS_CHANNEL = 10190;
TizenKeyboard.PICTURE_SIZE = 10140;
TizenKeyboard.SOCCER = 10228;
TizenKeyboard.TELETEXT = 10200;
TizenKeyboard.SEARCH = 10225;
TizenKeyboard.GUIDE = 458;
TizenKeyboard.SOURCE = 10072;
TizenKeyboard.EXTRA = 10253;
TizenKeyboard.MTS = 10195;
TizenKeyboard.MEDIA_PLAY_PAUSE = 10252;
TizenKeyboard.MENU = 18;
TizenKeyboard.MEDIA_REWIND = 412;
TizenKeyboard.TOOLS = 10135;
TizenKeyboard.MEDIA_FAST_FORWARD = 417;
TizenKeyboard.INFO = 457;
TizenKeyboard.MEDIA_PLAY = 415;
TizenKeyboard.EXIT = 10182;
TizenKeyboard.MEDIA_PAUSE = 19;
TizenKeyboard.MEDIA_STOP = 413;
TizenKeyboard.CAPTION = 10221;
TizenKeyboard.MEDIA_RECORD = 416;
TizenKeyboard.CHANNEL_LIST = 10073;
TizenKeyboard.MEDIA_TRACK_PREVIOUS = 10232;
TizenKeyboard.MEDIA_TRACK_NEXT = 10233;
TizenKeyboard.MEDIA_3D = 10199;
"use strict";
function Mouse(a, d) {
  this._keys = Array(5);
  this._position = new THREE.Vector2(0, 0);
  this._positionUpdated = !1;
  this._delta = new THREE.Vector2(0, 0);
  this._wheel = 0;
  this._wheelUpdated = !1;
  this._doubleClicked = Array(5);
  this.keys = Array(5);
  this.position = new THREE.Vector2(0, 0);
  this.delta = new THREE.Vector2(0, 0);
  this.wheel = 0;
  this.doubleClicked = Array(5);
  this.domElement = void 0 !== a ? a : window;
  this.canvas = null;
  this.events = new EventManager;
  for (a = 0; 5 > a; a++) {
    this._doubleClicked[a] = !1, this.doubleClicked[a] = !1, this._keys[a] = new Key, this.keys[a] = new Key;
  }
  var k = this;
  void 0 !== window.onmousewheel ? this.events.add(this.domElement, "mousewheel", function(a) {
    k._wheel = a.deltaY;
    k._wheelUpdated = !0;
  }) : void 0 !== window.addEventListener ? this.events.add(this.domElement, "DOMMouseScroll", function(a) {
    k._wheel = 30 * a.detail;
    k._wheelUpdated = !0;
  }) : this.events.add(this.domElement, "wheel", function(a) {
    k._wheel = a.deltaY;
    k._wheelUpdated = !0;
  });
  if (void 0 !== window.ontouchstart || 0 < navigator.msMaxTouchPoints) {
    var b = new Vector2(0, 0);
    this.events.add(this.domElement, "touchstart", function(a) {
      a = a.touches[0];
      k.updatePosition(a.clientX, a.clientY, 0, 0);
      k.updateKey(Mouse.LEFT, Key.DOWN);
      b.set(a.clientX, a.clientY);
    });
    this.events.add(this.domElement, "touchend", function(a) {
      k.updateKey(Mouse.LEFT, Key.UP);
    });
    this.events.add(this.domElement, "touchcancel", function(a) {
      k.updateKey(Mouse.LEFT, Key.UP);
    });
    this.events.add(document.body, "touchmove", function(a) {
      a = a.touches[0];
      k.updatePosition(a.clientX, a.clientY, a.clientX - b.x, a.clientY - b.y);
      b.set(a.clientX, a.clientY);
    });
  }
  this.events.add(this.domElement, "mousemove", function(a) {
    k.updatePosition(a.clientX, a.clientY, a.movementX, a.movementY);
  });
  this.events.add(this.domElement, "mousedown", function(a) {
    k.updateKey(a.which - 1, Key.DOWN);
  });
  this.events.add(this.domElement, "mouseup", function(a) {
    k.updateKey(a.which - 1, Key.UP);
  });
  this.events.add(this.domElement, "dragstart", function(a) {
    k.updateKey(a.which - 1, Key.UP);
  });
  this.events.add(this.domElement, "dblclick", function(a) {
    k._doubleClicked[a.which - 1] = !0;
  });
  !0 !== d && this.create();
}
Mouse.prototype = Mouse;
Mouse.prototype.constructor = Mouse;
Mouse.LEFT = 0;
Mouse.MIDDLE = 1;
Mouse.RIGHT = 2;
Mouse.BACK = 3;
Mouse.FORWARD = 4;
Mouse.setCanvas = function(a) {
  this.canvas = a;
  a.mouseInside = !1;
  a.addEventListener("mouseenter", function() {
    this.mouseInside = !0;
  });
  a.addEventListener("mouseleave", function() {
    this.mouseInside = !1;
  });
};
Mouse.insideCanvas = function() {
  return null !== this.canvas && this.canvas.mouseInside;
};
Mouse.setLock = function(a) {
  null !== this.canvas && (a ? this.canvas.requestPointerLock ? this.canvas.requestPointerLock() : this.canvas.mozRequestPointerLock ? this.canvas.mozRequestPointerLock() : this.canvas.webkitRequestPointerLock && this.canvas.webkitRequestPointerLock() : document.exitPointerLock ? document.exitPointerLock() : document.mozExitPointerLock ? document.mozExitPointerLock() : document.webkitExitPointerLock && document.webkitExitPointerLock());
};
Mouse.buttonPressed = function(a) {
  return this.keys[a].pressed;
};
Mouse.buttonDoubleClicked = function(a) {
  return this.doubleClicked[a];
};
Mouse.buttonJustPressed = function(a) {
  return this.keys[a].justPressed;
};
Mouse.buttonJustReleased = function(a) {
  return this.keys[a].justReleased;
};
Mouse.updatePosition = function(a, d, k, b) {
  if (null !== this.canvas) {
    var g = this.canvas.getBoundingClientRect();
    a -= g.left;
    d -= g.top;
  }
  this._position.set(a, d);
  this._delta.x += k;
  this._delta.y += b;
  this._positionUpdated = !0;
};
Mouse.updateKey = function(a, d) {
  -1 < a && this._keys[a].update(d);
};
Mouse.update = function() {
  for (var a = 0; 5 > a; a++) {
    this._keys[a].justPressed && this.keys[a].justPressed && (this._keys[a].justPressed = !1), this._keys[a].justReleased && this.keys[a].justReleased && (this._keys[a].justReleased = !1), this.keys[a].set(this._keys[a].justPressed, this._keys[a].pressed, this._keys[a].justReleased), !0 === this._doubleClicked[a] ? (this.doubleClicked[a] = !0, this._doubleClicked[a] = !1) : this.doubleClicked[a] = !1;
  }
  this._wheelUpdated ? (this.wheel = this._wheel, this._wheelUpdated = !1) : this.wheel = 0;
  this._positionUpdated ? (this.delta.copy(this._delta), this.position.copy(this._position), this._delta.set(0, 0), this._positionUpdated = !1) : (this.delta.x = 0, this.delta.y = 0);
};
Mouse.create = function() {
  this.events.create();
};
Mouse.dispose = function() {
  this.events.destroy();
};
"use strict";
function Gamepad() {
  this.product = this.vendor = -1;
  this.connected = !1;
  this.gamepad = null;
  this.buttons = [];
  for (var a = navigator.getGamepads(), d = 0; d < a.length; d++) {
    if (null !== a[d]) {
      this.setGamepad(a[d]);
      break;
    }
  }
  null === this.gamepad && console.warn("nunuStudio: No gamepad found");
}
Gamepad.prototype.setGamepad = function(a) {
  if (void 0 !== a && null !== a) {
    this.index = a.index;
    this.gamepad = a;
    this.buttons = [];
    for (var d = 0; d < a.buttons.length; d++) {
      this.buttons.push(new Key);
    }
    this.setProductVendor(a);
    this.connected = !0;
  } else {
    console.warn("nunuStudio: No gamepad found"), this.disconnect();
  }
};
Gamepad.prototype.disconnect = function() {
  this.product = this.vendor = -1;
  this.connected = !1;
  this.gamepad = null;
  this.buttons = [];
};
Gamepad.prototype.setProductVendor = function(a) {
  try {
    var d = a.id.split(":");
    this.vendor = d[1].split(" ")[1];
    this.product = d[2].replace(" ", "").replace(")", "");
    return;
  } catch (k) {
  }
  try {
    d = a.id.split("-"), this.vendor = d[0], this.product = d[1];
  } catch (k) {
  }
};
Gamepad.prototype.update = function(a) {
  this.gamepad = navigator.getGamepads()[this.index];
  if (void 0 !== this.gamepad) {
    for (a = 0; a < this.buttons.length; a++) {
      this.buttons[a].update(this.gamepad.buttons[a].pressed ? Key.DOWN : Key.UP);
    }
  }
};
Gamepad.prototype.getAnalogueButton = function(a) {
  return a > this.buttons.length || 0 > a ? 0 : this.gamepad.buttons[a].value;
};
Gamepad.prototype.getAxis = function(a) {
  return a > this.gamepad.axes.length || 0 > a ? 0 : this.gamepad.axes[a];
};
Gamepad.prototype.buttonExists = function(a) {
  return 0 <= a && a < this.buttons.length;
};
Gamepad.prototype.buttonPressed = function(a) {
  return this.buttons[a] ? this.buttons[a].pressed : !1;
};
Gamepad.prototype.buttonJustPressed = function(a) {
  return this.buttons[a] ? this.buttons[a].justPressed : !1;
};
Gamepad.prototype.buttonJustReleased = function(a) {
  return this.buttons[a] ? this.buttons[a].justReleased : !1;
};
Gamepad.LEFT = 14;
Gamepad.RIGHT = 15;
Gamepad.DOWN = 13;
Gamepad.UP = 12;
Gamepad.SELECT = 8;
Gamepad.START = 9;
Gamepad.HOME = 16;
Gamepad.LEFT_TRIGGER_A = 4;
Gamepad.LEFT_TRIGGER_B = 6;
Gamepad.RIGHT_TRIGGER_A = 5;
Gamepad.RIGHT_TRIGGER_B = 7;
Gamepad.L1 = 4;
Gamepad.L2 = 6;
Gamepad.L3 = 6;
Gamepad.R1 = 5;
Gamepad.R2 = 7;
Gamepad.R3 = 11;
Gamepad.A = 0;
Gamepad.B = 1;
Gamepad.C = 2;
Gamepad.D = 3;
Gamepad.X = 2;
Gamepad.Y = 3;
Gamepad.LEFT_ANALOGUE_BUT = 10;
Gamepad.LEFT_ANALOGUE_HOR = 0;
Gamepad.LEFT_ANALOGUE_VERT = 1;
Gamepad.RIGHT_ANALOGUE_BUT = 11;
Gamepad.RIGHT_ANALOGUE_HOR = 2;
Gamepad.RIGHT_ANALOGUE_VERT = 3;
"use strict";
function Gyroscope() {
  this.orientation = this.gamma = this.beta = this.alpha = 0;
  this.events = new EventManager;
  var a = this;
  this.events.add(window, "orientationchange", function(d) {
    a.orientation = THREE.Math.degToRad(window.orientation);
  });
  this.events.add(window, "deviceorientation", function(d) {
    a.alpha = THREE.Math.degToRad(d.alpha);
    a.beta = THREE.Math.degToRad(d.beta);
    a.gamma = THREE.Math.degToRad(d.gamma);
  });
  this.events.create();
}
Gyroscope.prototype.setObjectQuaternion = function() {
  var a = new THREE.Euler, d = new THREE.Quaternion, k = new THREE.Vector3(0, 0, 1), b = new THREE.Quaternion(-Math.sqrt(.5), 0, 0, Math.sqrt(.5));
  return function(g) {
    a.set(this.beta, this.alpha, -this.gamma, "YXZ");
    g.quaternion.setFromEuler(a);
    g.quaternion.multiply(b);
    g.quaternion.multiply(d.setFromAxisAngle(k, -this.orientation));
  };
}();
Gyroscope.prototype.dispose = function() {
  this.events.destroy();
};
"use strict";
function RendererState() {
  this.autoClearDepth = this.autoClearStencil = this.autoClearColor = this.autoClear = !1;
  this.sortObjects = !0;
  this.clearColor = new THREE.Color;
  this.clearAlpha = 1;
}
RendererState.prototype.backup = function(a) {
  this.autoClear = a.autoClear;
  this.autoClearColor = a.autoClearColor;
  this.autoClearStencil = a.autoClearStencil;
  this.autoClearDepth = a.autoClearDepth;
  this.sortObjects = a.sortObjects;
  this.clearColor.copy(a.getClearColor());
  this.clearAlpha = a.getClearAlpha();
};
RendererState.prototype.restore = function(a) {
  a.autoClear = this.autoClear;
  a.autoClearColor = this.autoClearColor;
  a.autoClearStencil = this.autoClearStencil;
  a.autoClearDepth = this.autoClearDepth;
  a.sortObjects = this.sortObjects;
  a.setClearColor(this.clearColor);
  a.setClearAlpha(this.clearAlpha);
};
"use strict";
function RendererConfiguration(a) {
  this.backgroundColor = null;
  this.backend = RendererConfiguration.WEBGL2;
  this.autoClearStencil = this.autoClearDepth = this.autoClearColor = this.autoClear = !1;
  this.stencil = this.shadows = this.antialiasing = !0;
  this.shadowsType = THREE.PCFSoftShadowMap;
  this.shadowsAutoUpdate = !0;
  this.toneMapping = THREE.NoToneMapping;
  this.toneMappingWhitePoint = this.toneMappingExposure = 1;
  this.sortObjects = !0;
  this.gammaFactor = 2;
  this.precision = "highp";
  this.alpha = !1;
  this.premultipliedAlpha = !0;
  this.preserveDrawingBuffer = !1;
  this.powerPreference = "high-performance";
  this.physicallyCorrectLights = this.logarithmicDepthBuffer = !1;
  this.checkShaderErrors = !0;
  this.maxMorphTargets = 8;
  this.maxMorphNormals = 4;
  if (void 0 !== a) {
    for (var d in this) {
      void 0 !== a[d] && (this[d] = a[d]);
    }
  }
}
RendererConfiguration.WEBGL = 1;
RendererConfiguration.WEBGL2 = 2;
RendererConfiguration.prototype.createRenderer = function(a) {
  var d = null;
  if (this.backend === RendererConfiguration.WEBGL2) {
    try {
      d = a.getContext("webgl2");
    } catch (k) {
    }
  }
  d = new THREE.WebGLRenderer({canvas:a, context:d, precision:this.precision, alpha:this.alpha, premultipliedAlpha:this.premultipliedAlpha, antialias:this.antialiasing, stencil:this.stencil, preserveDrawingBuffer:this.preserveDrawingBuffer, powerPreference:this.powerPreference, logarithmicDepthBuffer:this.logarithmicDepthBuffer});
  this.apply(d);
  null !== this.backgroundColor && (a.style.backgroundColor = this.backgroundColor);
  return d;
};
RendererConfiguration.prototype.apply = function(a) {
  a.autoClear = this.autoClear;
  a.autoClearColor = this.autoClearColor;
  a.autoClearDepth = this.autoClearDepth;
  a.autoClearStencil = this.autoClearStencil;
  a.shadowMap.enabled = this.shadows;
  a.shadowMap.type = this.shadowsType;
  a.shadowMap.autoUpdate = this.shadowsAutoUpdate;
  a.shadowMap.needsUpdate = !0;
  a.toneMapping = this.toneMapping;
  a.toneMappingExposure = this.toneMappingExposure;
  a.toneMappingWhitePoint = this.toneMappingWhitePoint;
  a.debug.checkShaderErrors = this.checkShaderErrors;
  a.sortObjects = this.sortObjects;
  a.gammaFactor = this.gammaFactor;
  a.physicallyCorrectLights = this.physicallyCorrectLights;
  a.maxMorphTargets = this.maxMorphTargets;
  a.maxMorphNormals = this.maxMorphNormals;
};
RendererConfiguration.prototype.toJSON = function() {
  return {backgroundColor:this.backgroundColor, backend:this.backend, autoClear:this.autoClear, autoClearColor:this.autoClearColor, autoClearDepth:this.autoClearDepth, autoClearStencil:this.autoClearStencil, antialiasing:this.antialiasing, shadows:this.shadows, stencil:this.stencil, shadowsType:this.shadowsType, shadowsAutoUpdate:this.shadowsAutoUpdate, toneMapping:this.toneMapping, toneMappingExposure:this.toneMappingExposure, toneMappingWhitePoint:this.toneMappingWhitePoint, sortObjects:this.sortObjects, 
  checkShaderErrors:this.checkShaderErrors, gammaFactor:this.gammaFactor, precision:this.precision, alpha:this.alpha, premultipliedAlpha:this.premultipliedAlpha, preserveDrawingBuffer:this.preserveDrawingBuffer, powerPreference:this.powerPreference, logarithmicDepthBuffer:this.logarithmicDepthBuffer, physicallyCorrectLights:this.physicallyCorrectLights, maxMorphTargets:this.maxMorphTargets, maxMorphNormals:this.maxMorphNormals};
};
RendererConfiguration.prototype.fromJSON = function(a) {
  this.backgroundColor = a.backgroundColor;
  this.backend = a.backend;
  this.autoClear = a.autoClear;
  this.autoClearColor = a.autoClearColor;
  this.autoClearDepth = a.autoClearDepth;
  this.autoClearStencil = a.autoClearStencil;
  this.antialiasing = a.antialiasing;
  this.shadows = a.shadows;
  this.stencil = a.stencil;
  this.shadowsType = a.shadowsType;
  this.shadowsAutoUpdate = a.shadowsAutoUpdate;
  this.toneMapping = a.toneMapping;
  this.toneMappingExposure = a.toneMappingExposure;
  this.toneMappingWhitePoint = a.toneMappingWhitePoint;
  this.sortObjects = a.sortObjects;
  this.checkShaderErrors = a.checkShaderErrors;
  this.gammaFactor = a.gammaFactor;
  this.precision = a.precision;
  this.alpha = a.alpha;
  this.premultipliedAlpha = a.premultipliedAlpha;
  this.preserveDrawingBuffer = a.preserveDrawingBuffer;
  this.powerPreference = a.powerPreference;
  this.logarithmicDepthBuffer = a.logarithmicDepthBuffer;
  this.physicallyCorrectLights = a.physicallyCorrectLights;
  this.maxMorphTargets = a.maxMorphTargets;
  this.maxMorphNormals = a.maxMorphNormals;
};
"use strict";
function CSS3DRenderer(a) {
  this.size = new THREE.Vector2(2, 2);
  this.halfSize = new THREE.Vector2(1, 1);
  this.matrix = new THREE.Matrix4;
  this.cache = {camera:{fov:0, style:""}, objects:new WeakMap};
  this.domElement = void 0 !== a ? a : document.createElement("div");
  this.domElement.style.overflow = "hidden";
  this.domElement.style.pointerEvents = "none";
  this.cameraElement = document.createElement("div");
  this.cameraElement.style.WebkitTransformStyle = "preserve-3d";
  this.cameraElement.style.transformStyle = "preserve-3d";
  this.domElement.appendChild(this.cameraElement);
}
CSS3DRenderer.prototype.getSize = function() {
  return {width:this.size.x, height:this.size.y};
};
CSS3DRenderer.prototype.setSize = function(a, d) {
  this.size.set(a, d);
  this.halfSize.set(a / 2, d / 2);
  this.domElement.style.width = a + "px";
  this.domElement.style.height = d + "px";
  this.cameraElement.style.width = a + "px";
  this.cameraElement.style.height = d + "px";
};
CSS3DRenderer.prototype.render = function(a, d) {
  function k(a) {
    a = a.elements;
    return "matrix3d(" + a[0] + "," + -a[1] + "," + a[2] + "," + a[3] + "," + a[4] + "," + -a[5] + "," + a[6] + "," + a[7] + "," + a[8] + "," + -a[9] + "," + a[10] + "," + a[11] + "," + a[12] + "," + -a[13] + "," + a[14] + "," + a[15] + ")";
  }
  function b(a, b) {
    a = a.elements;
    return "translate(-50%,-50%)matrix3d(" + a[0] + "," + a[1] + "," + a[2] + "," + a[3] + "," + -a[4] + "," + -a[5] + "," + -a[6] + "," + -a[7] + "," + a[8] + "," + a[9] + "," + a[10] + "," + a[11] + "," + a[12] + "," + a[13] + "," + a[14] + "," + a[15] + ")";
  }
  function g(a, d, e) {
    if (!0 === a.isCSS3DObject) {
      if (!0 === a.isCSS3DSprite) {
        matrix.copy(d.matrixWorldInverse);
        matrix.transpose();
        matrix.copyPosition(a.matrixWorld);
        matrix.scale(a.scale);
        matrix.elements[3] = 0;
        matrix.elements[7] = 0;
        matrix.elements[11] = 0;
        matrix.elements[15] = 1;
        var c = b(matrix, e);
      } else {
        c = b(a.matrixWorld, e);
      }
      var k = a.element, m = f.cache.objects.get(a);
      if (void 0 === m || m.style !== c) {
        k.style.WebkitTransform = c, k.style.transform = c, f.cache.objects.set(a, {style:c});
      }
      k.parentNode !== f.cameraElement && f.cameraElement.appendChild(k);
    }
    c = 0;
    for (k = a.children.length; c < k; c++) {
      g(a.children[c], d, e);
    }
  }
  var f = this, e = d.projectionMatrix.elements[5] * this.halfSize.y;
  this.cache.camera.fov !== e && (d.isPerspectiveCamera && (this.domElement.style.WebkitPerspective = e + "px", this.domElement.style.perspective = e + "px"), this.cache.camera.fov = e);
  a.updateMatrixWorld();
  null === d.parent && d.updateMatrixWorld();
  e = d.isOrthographicCamera ? "scale(" + e + ")translate(" + -(d.right + d.left) / 2 + "px," + (d.top + d.bottom) / 2 + "px)" + k(d.matrixWorldInverse) : "translateZ(" + e + "px)" + k(d.matrixWorldInverse);
  var r = e + "translate(" + this.halfSize.x + "px," + this.halfSize.y + "px)";
  this.cache.camera.style !== r && (this.cameraElement.style.WebkitTransform = r, this.cameraElement.style.transform = r, this.cache.camera.style = r);
  g(a, d, e);
};
"use strict";
function CSS3DObject(a) {
  THREE.Object3D.call(this);
  this.element = a;
  this.element.style.position = "absolute";
  this.addEventListener("removed", function() {
    null !== this.element.parentNode && this.element.parentNode.removeChild(this.element);
  });
  var d = this, k = !0;
  Object.defineProperties(this, {visible:{get:function() {
    return k;
  }, set:function(a) {
    k = a;
    d.element.style.display = a ? "block" : "none";
  }}});
}
CSS3DObject.prototype = Object.create(THREE.Object3D.prototype);
CSS3DObject.prototype.constructor = CSS3DObject;
CSS3DObject.prototype.isCSS3DObject = !0;
"use strict";
function CSS3DSprite(a) {
  CSS3DObject.call(this, a);
}
CSS3DSprite.prototype = Object.create(CSS3DObject.prototype);
CSS3DSprite.prototype.constructor = CSS3DSprite;
CSS3DSprite.prototype.isCSS3DSprite = !0;
"use strict";
function Pass() {
  this.uuid = THREE.Math.generateUUID();
  this.type = "Pass";
  this.needsSwap = this.enabled = !0;
  this.copyToScreen = this.renderToScreen = this.clear = !1;
}
Pass.RGBALinear = {minFilter:THREE.LinearFilter, magFilter:THREE.LinearFilter, format:THREE.RGBAFormat};
Pass.RGBLinear = {minFilter:THREE.LinearFilter, magFilter:THREE.LinearFilter, format:THREE.RGBFormat};
Pass.RGBANearest = {minFilter:THREE.NearestFilter, magFilter:THREE.NearestFilter, format:THREE.RGBAFormat};
Pass.prototype.createQuadScene = function() {
  this.camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);
  this.scene = new THREE.Scene;
  this.quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2), null);
  this.quad.frustumCulled = !1;
  this.scene.add(this.quad);
};
Pass.prototype.setSize = function(a, d) {
};
Pass.prototype.render = function(a, d, k, b, g, f, e) {
};
Pass.prototype.dispose = function() {
};
Pass.prototype.toJSON = function(a) {
  a = {};
  a.uuid = this.uuid;
  a.type = this.type;
  a.clear = this.clear;
  a.enabled = this.enabled;
  a.needsSwap = this.needsSwap;
  a.renderToScreen = this.renderToScreen;
  a.copyToScreen = this.copyToScreen;
  return a;
};
"use strict";
function ShaderPass(a, d) {
  Pass.call(this);
  this.type = "Shader";
  this.textureID = void 0 !== d ? d : "tDiffuse";
  a instanceof THREE.ShaderMaterial ? (this.uniforms = a.uniforms, this.material = a) : a && (this.uniforms = THREE.UniformsUtils.clone(a.uniforms), this.material = new THREE.ShaderMaterial({defines:Object.assign({}, a.defines), uniforms:this.uniforms, vertexShader:a.vertexShader, fragmentShader:a.fragmentShader}));
  this.createQuadScene();
}
ShaderPass.prototype = Object.create(Pass.prototype);
ShaderPass.prototype.render = function(a, d, k, b, g, f, e) {
  this.uniforms[this.textureID] && (this.uniforms[this.textureID].value = k.texture);
  this.quad.material = this.material;
  a.setRenderTarget(this.renderToScreen ? null : d);
  this.clear && a.clear();
  a.render(this.scene, this.camera);
};
"use strict";
function EffectComposer() {
  void 0 === THREE.CopyShader && console.error("EffectComposer relies on THREE.CopyShader");
  this.uuid = THREE.Math.generateUUID();
  this.height = this.width = 1;
  this.passes = [];
  this.writeBuffer = new THREE.WebGLRenderTarget(this.width, this.height, EffectComposer.bufferParameters);
  this.readBuffer = new THREE.WebGLRenderTarget(this.width, this.height, EffectComposer.bufferParameters);
  this.copyPass = new ShaderPass(THREE.CopyShader);
  this.rendererState = new RendererState;
}
EffectComposer.bufferParameters = {minFilter:THREE.LinearFilter, magFilter:THREE.LinearFilter, format:THREE.RGBAFormat, stencilBuffer:!1};
EffectComposer.prototype.swapBuffers = function() {
  var a = this.readBuffer;
  this.readBuffer = this.writeBuffer;
  this.writeBuffer = a;
};
EffectComposer.prototype.addPass = function(a) {
  this.passes.push(a);
};
EffectComposer.prototype.moveBack = function(a) {
  var d = this.passes.indexOf(a);
  if (0 < d) {
    for (var k = d; k !== d - 1; --k) {
      this.passes[k] = this.passes[k - 1];
    }
    this.passes[d - 1] = a;
    return !0;
  }
  return !1;
};
EffectComposer.prototype.moveForward = function(a) {
  var d = this.passes.indexOf(a);
  if (-1 !== d && d < this.passes.length - 1) {
    for (var k = d; k !== d + 1; k += 1) {
      this.passes[k] = this.passes[k + 1];
    }
    this.passes[d + 1] = a;
    return !0;
  }
  return !1;
};
EffectComposer.prototype.removePass = function(a) {
  a = this.passes.indexOf(a);
  -1 !== a && this.passes.splice(a, 1);
};
EffectComposer.prototype.insertPass = function(a, d) {
  this.passes.splice(d, 0, a);
};
EffectComposer.prototype.render = function(a, d, k, b) {
  var g = !1;
  this.rendererState.backup(a);
  for (var f = 0; f < this.passes.length; f++) {
    var e = this.passes[f];
    if (e.enabled) {
      e.render(a, this.writeBuffer, this.readBuffer, b, g, d, k);
      if (e.renderToScreen) {
        e.copyToScreen && (this.copyPass.renderToScreen = !0, this.copyPass.render(a, this.readBuffer, this.writeBuffer, b));
        break;
      }
      e.needsSwap && (g && (a.context.stencilFunc(a.context.NOTEQUAL, 1, 4294967295), this.copyPass.renderToScreen = !1, this.copyPass.render(a, this.writeBuffer, this.readBuffer, b), a.context.stencilFunc(a.context.EQUAL, 1, 4294967295)), this.swapBuffers());
      void 0 !== THREE.MaskPass && (e instanceof THREE.MaskPass ? g = !0 : e instanceof THREE.ClearMaskPass && (g = !1));
    }
  }
  this.rendererState.restore(a);
};
EffectComposer.prototype.setSize = function(a, d) {
  a = Math.floor(a);
  d = Math.floor(d);
  this.width = a;
  this.height = d;
  this.writeBuffer.setSize(a, d);
  this.readBuffer.setSize(a, d);
  for (var k = 0; k < this.passes.length; k++) {
    this.passes[k].setSize(a, d);
  }
};
EffectComposer.prototype.reset = function() {
  this.dispose();
  this.writeBuffer = new THREE.WebGLRenderTarget(this.width, this.height, EffectComposer.bufferParameters);
  this.readBuffer = new THREE.WebGLRenderTarget(this.width, this.height, EffectComposer.bufferParameters);
};
EffectComposer.prototype.dispose = function() {
  this.writeBuffer.dispose();
  this.readBuffer.dispose();
  this.readBuffer = this.writeBuffer = null;
};
EffectComposer.prototype.toJSON = function() {
  var a = {};
  a.uuid = this.uuid;
  a.passes = [];
  for (var d = 0; d < this.passes.length; d++) {
    a.passes.push(this.passes[d].toJSON());
  }
  return a;
};
EffectComposer.fromJSON = function(a) {
  var d = new EffectComposer;
  d.uuid = a.uuid;
  for (var k = 0; k < a.passes.length; k++) {
    var b = a.passes[k];
    if ("Render" === b.type) {
      var g = new RenderPass;
    } else {
      if ("UnrealBloom" === b.type) {
        for (g = new UnrealBloomPass, g.strength = b.strength, g.radius = b.radius, g.threshold = b.threshold, g.bloomFactors = b.bloomFactors, k = 0; k < g.bloomTintColors.length; k++) {
          g.bloomTintColors[k].fromArray(b.bloomTintColors[k]);
        }
      } else {
        "Bloom" === b.type ? g = new BloomPass(b.strength, b.kernelSize, b.sigma, b.resolution) : "SSAONOH" === b.type ? (g = new SSAONOHPass, g.kernelRadius = b.kernelRadius, g.minDistance = b.minDistance, g.maxDistance = b.maxDistance, g.kernelSize = b.kernelSize) : "SSAO" === b.type ? (g = new SSAOPass, g.onlyAO = b.onlyAO, g.radius = b.radius, g.aoClamp = b.aoClamp, g.lumInfluence = b.lumInfluence) : "Bokeh" === b.type ? g = new BokehPass(b.focus, b.aperture, b.maxblur) : "FXAA" === b.type ? 
        g = new FXAAPass : "Copy" === b.type ? g = new CopyPass : "Film" === b.type ? (g = new FilmPass, g.grayscale = b.grayscale, g.noiseIntensity = b.noiseIntensity, g.scanlinesIntensity = b.scanlinesIntensity, g.scanlinesCount = b.scanlinesCount) : "DotScreen" === b.type ? (g = new DotScreenPass, g.center.fromArray(b.center), g.angle = b.angle, g.scale = b.scale) : "Colorify" === b.type ? (g = new ColorifyPass, g.color.setHex(b.color)) : "Sobel" === b.type ? g = new SobelPass : "Technicolor" === 
        b.type ? g = new TechnicolorPass : "HueSaturation" === b.type ? (g = new HueSaturationPass, g.hue = b.hue, g.saturation = b.saturation) : "AdaptiveToneMapping" === b.type ? (g = new AdaptiveToneMappingPass(b.adaptive), g.tau = b.tau, g.minLuminance = b.minLuminance) : "Afterimage" === b.type ? (g = new AfterimagePass, g.damp = b.damp) : g = new RenderPass;
      }
    }
    g.uuid = b.uuid;
    g.enabled = b.enabled;
    g.needsSwap = b.needsSwap;
    g.renderToScreen = b.renderToScreen;
    g.clear = b.clear;
    g.copyToScreen = !0 === b.copyToScreen;
    d.addPass(g);
  }
  return d;
};
"use strict";
function RenderPass() {
  Pass.call(this);
  this.type = "Render";
  this.clear = !0;
}
RenderPass.prototype = Object.create(Pass.prototype);
RenderPass.prototype.render = function(a, d, k, b, g, f, e) {
  this.clear ? (a.autoClear = !0, a.autoClearColor = !0, a.autoClearDepth = !0, a.autoClearStencil = !0) : a.autoClear = !1;
  a.setRenderTarget(this.renderToScreen ? null : d);
  a.render(f, e);
};
"use strict";
function FXAAPass() {
  ShaderPass.call(this, THREE.FXAAShader);
  this.type = "FXAA";
}
FXAAPass.prototype = Object.create(ShaderPass.prototype);
FXAAPass.prototype.setSize = function(a, d) {
  this.uniforms.resolution.value.set(1 / a, 1 / d);
};
"use strict";
function AfterimagePass(a) {
  void 0 === THREE.AfterimageShader && console.error("AfterimagePass relies on THREE.AfterimageShader");
  Pass.call(this);
  this.type = "Afterimage";
  this.uniforms = THREE.UniformsUtils.clone(THREE.AfterimageShader.uniforms);
  this.textureComp = new THREE.WebGLRenderTarget(1, 1, {minFilter:THREE.LinearFilter, magFilter:THREE.NearestFilter, format:THREE.RGBAFormat});
  this.textureOld = new THREE.WebGLRenderTarget(1, 1, {minFilter:THREE.LinearFilter, magFilter:THREE.NearestFilter, format:THREE.RGBAFormat});
  this.shaderMaterial = new THREE.ShaderMaterial({uniforms:this.uniforms, vertexShader:THREE.AfterimageShader.vertexShader, fragmentShader:THREE.AfterimageShader.fragmentShader});
  this.basicMaterial = new THREE.MeshBasicMaterial;
  this.createQuadScene();
  Object.defineProperties(this, {damp:{get:function() {
    return this.uniforms.damp.value;
  }, set:function(a) {
    this.uniforms.damp.value = a;
  }}});
  this.damp = void 0 !== a ? a : .96;
}
AfterimagePass.prototype = Object.create(Pass.prototype);
AfterimagePass.prototype.render = function(a, d, k, b, g, f, e) {
  b = this.textureOld;
  this.textureOld = this.textureComp;
  this.textureComp = b;
  this.uniforms.tNew.value = k.texture;
  this.uniforms.tOld.value = this.textureOld.texture;
  this.quad.material = this.shaderMaterial;
  a.autoClear = !1;
  a.setRenderTarget(this.textureComp);
  a.render(this.scene, this.camera);
  this.basicMaterial.map = this.textureComp.texture;
  this.clear ? (a.autoClear = !0, a.autoClearColor = !0, a.autoClearDepth = !0, a.autoClearStencil = !0) : a.autoClear = !1;
  this.quad.material = this.basicMaterial;
  a.setRenderTarget(this.renderToScreen ? null : d);
  a.render(this.scene, this.camera);
};
AfterimagePass.prototype.setSize = function(a, d) {
  this.textureComp.setSize(a, d);
  this.textureOld.setSize(a, d);
};
AfterimagePass.prototype.toJSON = function(a) {
  a = Pass.prototype.toJSON.call(this, a);
  a.damp = this.damp;
  return a;
};
"use strict";
function UnrealBloomPass(a, d, k) {
  void 0 === THREE.LuminosityHighPassShader && console.error("UnrealBloomPass relies on THREE.LuminosityHighPassShader");
  void 0 === THREE.CopyShader && console.error("UnrealBloomPass relies on THREE.CopyShader");
  Pass.call(this);
  this.type = "UnrealBloom";
  this.renderTargetsHorizontal = [];
  this.renderTargetsVertical = [];
  this.nMips = 5;
  for (var b = 0; b < this.nMips; b++) {
    var g = new THREE.WebGLRenderTarget(0, 0, Pass.RGBALinear);
    g.texture.generateMipmaps = !1;
    this.renderTargetsHorizontal.push(g);
    g = new THREE.WebGLRenderTarget(0, 0, Pass.RGBALinear);
    g.texture.generateMipmaps = !1;
    this.renderTargetsVertical.push(g);
  }
  this.renderTargetBright = new THREE.WebGLRenderTarget(0, 0, Pass.RGBALinear);
  this.renderTargetBright.texture.generateMipmaps = !1;
  b = THREE.LuminosityHighPassShader;
  this.highPassUniforms = THREE.UniformsUtils.clone(b.uniforms);
  this.materialHighPassFilter = new THREE.ShaderMaterial({uniforms:this.highPassUniforms, vertexShader:b.vertexShader, fragmentShader:b.fragmentShader, defines:{}});
  this.separableBlurMaterials = [];
  g = [3, 5, 7, 9, 11];
  for (b = 0; b < this.nMips; b++) {
    this.separableBlurMaterials.push(UnrealBloomPass.getSeperableBlurMaterial(g[b])), this.separableBlurMaterials[b].uniforms.texSize.value = new THREE.Vector2(0, 0);
  }
  this.compositeMaterial = UnrealBloomPass.getCompositeMaterial(this.nMips);
  this.compositeMaterial.uniforms.blurTexture1.value = this.renderTargetsVertical[0].texture;
  this.compositeMaterial.uniforms.blurTexture2.value = this.renderTargetsVertical[1].texture;
  this.compositeMaterial.uniforms.blurTexture3.value = this.renderTargetsVertical[2].texture;
  this.compositeMaterial.uniforms.blurTexture4.value = this.renderTargetsVertical[3].texture;
  this.compositeMaterial.uniforms.blurTexture5.value = this.renderTargetsVertical[4].texture;
  this.highPassUniforms.luminosityThreshold.value = void 0 !== k ? k : .7;
  this.highPassUniforms.smoothWidth.value = .01;
  this.compositeMaterial.uniforms.bloomStrength.value = void 0 !== a ? a : .8;
  this.compositeMaterial.uniforms.bloomRadius.value = void 0 !== d ? d : .3;
  this.compositeMaterial.uniforms.bloomFactors.value = [1, .8, .6, .4, .2];
  this.compositeMaterial.uniforms.bloomTintColors.value = [new THREE.Vector3(1, 1, 1), new THREE.Vector3(1, 1, 1), new THREE.Vector3(1, 1, 1), new THREE.Vector3(1, 1, 1), new THREE.Vector3(1, 1, 1)];
  this.compositeMaterial.needsUpdate = !0;
  this.copyUniforms = THREE.UniformsUtils.clone(THREE.CopyShader.uniforms);
  this.copyUniforms.opacity.value = 1;
  this.materialCopy = new THREE.ShaderMaterial({uniforms:this.copyUniforms, vertexShader:THREE.CopyShader.vertexShader, fragmentShader:THREE.CopyShader.fragmentShader, blending:THREE.AdditiveBlending, depthTest:!1, depthWrite:!1, transparent:!0});
  this.createQuadScene();
  this.basic = new THREE.MeshBasicMaterial;
  Object.defineProperties(this, {strength:{get:function() {
    return this.compositeMaterial.uniforms.bloomStrength.value;
  }, set:function(a) {
    this.compositeMaterial.uniforms.bloomStrength.value = a;
  }}, radius:{get:function() {
    return this.compositeMaterial.uniforms.bloomRadius.value;
  }, set:function(a) {
    this.compositeMaterial.uniforms.bloomRadius.value = a;
  }}, threshold:{get:function() {
    return this.highPassUniforms.luminosityThreshold.value;
  }, set:function(a) {
    this.highPassUniforms.luminosityThreshold.value;
  }}, smooth:{get:function() {
    return this.highPassUniforms.smoothWidth.value;
  }, set:function(a) {
    this.highPassUniforms.smoothWidth.value;
  }}, bloomFactors:{get:function() {
    return this.compositeMaterial.uniforms.bloomFactors.value;
  }, set:function(a) {
    this.compositeMaterial.uniforms.bloomFactors.value;
  }}, bloomTintColors:{get:function() {
    return this.compositeMaterial.uniforms.bloomTintColors.value;
  }, set:function(a) {
    this.compositeMaterial.uniforms.bloomTintColors.value = a;
  }}});
}
UnrealBloomPass.prototype = Object.create(Pass.prototype);
UnrealBloomPass.BlurDirectionX = new THREE.Vector2(1, 0);
UnrealBloomPass.BlurDirectionY = new THREE.Vector2(0, 1);
UnrealBloomPass.prototype.dispose = function() {
  for (var a = 0; a < this.renderTargetsHorizontal.length; a++) {
    this.renderTargetsHorizontal[a].dispose();
  }
  for (a = 0; a < this.renderTargetsVertical.length; a++) {
    this.renderTargetsVertical[a].dispose();
  }
  this.renderTargetBright.dispose();
};
UnrealBloomPass.prototype.setSize = function(a, d) {
  a = Math.round(a / 2);
  d = Math.round(d / 2);
  this.renderTargetBright.setSize(a, d);
  for (var k = 0; k < this.nMips; k++) {
    this.renderTargetsHorizontal[k].setSize(a, d), this.renderTargetsVertical[k].setSize(a, d), this.separableBlurMaterials[k].uniforms.texSize.value.set(a, d), a = Math.round(a / 2), d = Math.round(d / 2);
  }
};
UnrealBloomPass.prototype.render = function(a, d, k, b, g, f, e) {
  a.autoClear = !1;
  a.setClearColor(new THREE.Color(0, 0, 0), 0);
  g && a.context.disable(a.context.STENCIL_TEST);
  this.renderToScreen && (this.quad.material = this.basic, this.basic.map = k.texture, a.setRenderTarget(null), a.clear(), a.render(this.scene, this.camera));
  this.highPassUniforms.tDiffuse.value = k.texture;
  this.quad.material = this.materialHighPassFilter;
  a.setRenderTarget(this.renderTargetBright);
  a.clear();
  a.render(this.scene, this.camera);
  d = this.renderTargetBright;
  for (b = 0; b < this.nMips; b++) {
    this.quad.material = this.separableBlurMaterials[b], this.separableBlurMaterials[b].uniforms.colorTexture.value = d.texture, this.separableBlurMaterials[b].uniforms.direction.value = UnrealBloomPass.BlurDirectionX, a.setRenderTarget(this.renderTargetsHorizontal[b]), a.clear(), a.render(this.scene, this.camera), this.separableBlurMaterials[b].uniforms.colorTexture.value = this.renderTargetsHorizontal[b].texture, this.separableBlurMaterials[b].uniforms.direction.value = UnrealBloomPass.BlurDirectionY, 
    a.setRenderTarget(this.renderTargetsVertical[b]), a.clear(), a.render(this.scene, this.camera), d = this.renderTargetsVertical[b];
  }
  this.quad.material = this.compositeMaterial;
  a.setRenderTarget(this.renderTargetsHorizontal[0]);
  a.render(this.scene, this.camera);
  this.quad.material = this.materialCopy;
  this.copyUniforms.tDiffuse.value = this.renderTargetsHorizontal[0].texture;
  g && a.context.enable(a.context.STENCIL_TEST);
  a.setRenderTarget(this.renderToScreen ? null : k);
  a.render(this.scene, this.camera);
};
UnrealBloomPass.prototype.toJSON = function(a) {
  a = Pass.prototype.toJSON.call(this, a);
  a.strength = this.strength;
  a.radius = this.radius;
  a.threshold = this.threshold;
  a.bloomFactors = this.bloomFactors;
  a.bloomTintColors = [];
  for (var d = 0; d < this.bloomTintColors.length; d++) {
    a.bloomTintColors.push(this.bloomTintColors[d].toArray());
  }
  return a;
};
UnrealBloomPass.getSeperableBlurMaterial = function(a) {
  return new THREE.ShaderMaterial({defines:{KERNEL_RADIUS:a, SIGMA:a}, uniforms:{colorTexture:{value:null}, texSize:{value:new THREE.Vector2(.5, .5)}, direction:{value:new THREE.Vector2(.5, .5)}}, vertexShader:"\n\t\t\tvarying vec2 vUv;\n\t\t\tvoid main()\n\t\t\t{\n\t\t\t\tvUv = uv;\n\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n\t\t\t}", fragmentShader:"\n\t\t\t#include <common>\n\t\t\tvarying vec2 vUv;\n\t\t\tuniform sampler2D colorTexture;\n\t\t\tuniform vec2 texSize;\n\t\t\tuniform vec2 direction;\n\t\t\t\n\t\t\tfloat gaussianPdf(in float x, in float sigma)\n\t\t\t{\n\t\t\t\treturn 0.39894 * exp(-0.5 * x * x / (sigma * sigma)) / sigma;\n\t\t\t}\n\t\t\t\n\t\t\tvoid main()\n\t\t\t{\n\t\t\t\tvec2 invSize = 1.0 / texSize;\n\t\t\t\tfloat fSigma = float(SIGMA);\n\t\t\t\tfloat weightSum = gaussianPdf(0.0, fSigma);\n\t\t\t\tvec3 diffuseSum = texture2D(colorTexture, vUv).rgb * weightSum;\n\t\t\t\tfor(int i = 1; i < KERNEL_RADIUS; i++)\n\t\t\t\t{\n\t\t\t\t\tfloat x = float(i);\n\t\t\t\t\tfloat w = gaussianPdf(x, fSigma);\n\t\t\t\t\tvec2 uvOffset = direction * invSize * x;\n\t\t\t\t\tvec3 sample1 = texture2D(colorTexture, vUv + uvOffset).rgb;\n\t\t\t\t\tvec3 sample2 = texture2D(colorTexture, vUv - uvOffset).rgb;\n\t\t\t\t\tdiffuseSum += (sample1 + sample2) * w;\n\t\t\t\t\tweightSum += 2.0 * w;\n\t\t\t\t}\n\t\t\t\tgl_FragColor = vec4(diffuseSum/weightSum, 1.0);\n\t\t\t}"});
};
UnrealBloomPass.getCompositeMaterial = function(a) {
  return new THREE.ShaderMaterial({defines:{NUM_MIPS:a}, uniforms:{blurTexture1:{value:null}, blurTexture2:{value:null}, blurTexture3:{value:null}, blurTexture4:{value:null}, blurTexture5:{value:null}, dirtTexture:{value:null}, bloomStrength:{value:1}, bloomFactors:{value:null}, bloomTintColors:{value:null}, bloomRadius:{value:0}}, vertexShader:"\n\t\t\tvarying vec2 vUv;\n\t\t\tvoid main()\n\t\t\t{\n\t\t\t\tvUv = uv;\n\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n\t\t\t}", 
  fragmentShader:"\n\t\t\tvarying vec2 vUv;\n\t\t\tuniform sampler2D blurTexture1;\n\t\t\tuniform sampler2D blurTexture2;\n\t\t\tuniform sampler2D blurTexture3;\n\t\t\tuniform sampler2D blurTexture4;\n\t\t\tuniform sampler2D blurTexture5;\n\t\t\tuniform sampler2D dirtTexture;\n\t\t\tuniform float bloomStrength;\n\t\t\tuniform float bloomRadius;\n\t\t\tuniform float bloomFactors[NUM_MIPS];\n\t\t\tuniform vec3 bloomTintColors[NUM_MIPS];\n\t\t\t\n\t\t\tfloat lerpBloomFactor(const in float factor)\n\t\t\t{\n\t\t\t\tfloat mirrorFactor = 1.2 - factor;\n\t\t\t\treturn mix(factor, mirrorFactor, bloomRadius);\n\t\t\t}\n\t\t\t\n\t\t\tvoid main()\n\t\t\t{\n\t\t\t\tgl_FragColor = bloomStrength * (lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) + \n\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) + \n\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) + \n\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) + \n\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv));\n\t\t\t}"});
};
"use strict";
function BloomPass(a, d, k, b) {
  Pass.call(this);
  void 0 === THREE.ConvolutionShader && console.error("BloomPass relies on THREE.ConvolutionShader");
  void 0 === THREE.CopyShader && console.error("BloomPass relies on THREE.CopyShader");
  this.type = "Bloom";
  this.copyToScreen = !0;
  this.createQuadScene();
  a = void 0 !== a ? a : 1;
  d = void 0 !== d ? d : 25;
  k = void 0 !== k ? k : 4;
  b = void 0 !== b ? b : 256;
  this.renderTargetX = new THREE.WebGLRenderTarget(b, b, Pass.RGBALinear);
  this.renderTargetY = new THREE.WebGLRenderTarget(b, b, Pass.RGBALinear);
  this.copyUniforms = THREE.UniformsUtils.clone(THREE.CopyShader.uniforms);
  this.copyUniforms.opacity.value = a;
  this.materialCopy = new THREE.ShaderMaterial({uniforms:this.copyUniforms, vertexShader:THREE.CopyShader.vertexShader, fragmentShader:THREE.CopyShader.fragmentShader, blending:THREE.AdditiveBlending, transparent:!0});
  this.convolutionUniforms = THREE.UniformsUtils.clone(THREE.ConvolutionShader.uniforms);
  this.convolutionUniforms.uImageIncrement.value = BloomPass.blurX;
  this.convolutionUniforms.cKernel.value = THREE.ConvolutionShader.buildKernel(k);
  this.materialConvolution = new THREE.ShaderMaterial({uniforms:this.convolutionUniforms, vertexShader:THREE.ConvolutionShader.vertexShader, fragmentShader:THREE.ConvolutionShader.fragmentShader, defines:{KERNEL_SIZE_FLOAT:d.toFixed(1), KERNEL_SIZE_INT:d.toFixed(0)}});
}
BloomPass.blurX = new THREE.Vector2(.001953125, 0);
BloomPass.blurY = new THREE.Vector2(0, .001953125);
BloomPass.prototype = Object.create(Pass.prototype);
BloomPass.prototype.render = function(a, d, k, b, g, f, e) {
  g && a.context.disable(a.context.STENCIL_TEST);
  this.quad.material = this.materialConvolution;
  this.convolutionUniforms.tDiffuse.value = k.texture;
  this.convolutionUniforms.uImageIncrement.value = BloomPass.blurX;
  a.setRenderTarget(this.renderTargetX);
  a.clear(!0, !0, !0);
  a.render(this.scene, this.camera);
  this.convolutionUniforms.tDiffuse.value = this.renderTargetX.texture;
  this.convolutionUniforms.uImageIncrement.value = BloomPass.blurY;
  a.setRenderTarget(this.renderTargetY);
  a.clear(!0, !0, !0);
  a.render(this.scene, this.camera);
  this.quad.material = this.materialCopy;
  this.copyUniforms.tDiffuse.value = this.renderTargetY.texture;
  g && a.context.enable(a.context.STENCIL_TEST);
  a.setRenderTarget(d);
  a.render(this.scene, this.camera);
};
BloomPass.prototype.toJSON = function(a) {
  a = Pass.prototype.toJSON.call(this, a);
  a.strength = this.strength;
  a.kernelSize = this.kernelSize;
  a.sigma = this.sigma;
  a.resolution = this.resolution;
  return a;
};
"use strict";
function SSAONOHPass() {
  void 0 === THREE.SSAOShader && console.warn("SSAONOHPass depends on THREE.SSAOShader");
  Pass.call(this);
  this.type = "SSAONOH";
  this.kernel = [];
  this.noiseTexture = null;
  this.createQuadScene();
  this.depthTexture = new THREE.DepthTexture;
  this.depthTexture.type = THREE.UnsignedShortType;
  this.depthTexture.minFilter = THREE.NearestFilter;
  this.depthTexture.maxFilter = THREE.NearestFilter;
  this.normalMaterial = new THREE.MeshNormalMaterial;
  this.normalMaterial.blending = THREE.NoBlending;
  this.normalRenderTarget = new THREE.WebGLRenderTarget(1, 1, {minFilter:THREE.LinearFilter, magFilter:THREE.LinearFilter, format:THREE.RGBAFormat, depthTexture:this.depthTexture, depthBuffer:!0});
  this.ssaoRenderTarget = new THREE.WebGLRenderTarget(1, 1, Pass.RGBALinear);
  this.blurRenderTarget = new THREE.WebGLRenderTarget(1, 1, Pass.RGBALinear);
  this.blurMaterial = new THREE.ShaderMaterial({defines:Object.assign({}, THREE.SSAOBlurShader.defines), uniforms:THREE.UniformsUtils.clone(THREE.SSAOBlurShader.uniforms), vertexShader:THREE.SSAOBlurShader.vertexShader, fragmentShader:THREE.SSAOBlurShader.fragmentShader});
  this.blurMaterial.uniforms.tDiffuse.value = this.ssaoRenderTarget.texture;
  this.ssaoMaterial = new THREE.ShaderMaterial({defines:Object.assign({}, THREE.SSAOShader.defines), uniforms:THREE.UniformsUtils.clone(THREE.SSAOShader.uniforms), vertexShader:THREE.SSAOShader.vertexShader, fragmentShader:THREE.SSAOShader.fragmentShader, blending:THREE.NoBlending});
  this.ssaoMaterial.uniforms.tNormal.value = this.normalRenderTarget.texture;
  this.copyMaterial = new THREE.ShaderMaterial({uniforms:THREE.UniformsUtils.clone(THREE.CopyShader.uniforms), vertexShader:THREE.CopyShader.vertexShader, fragmentShader:THREE.CopyShader.fragmentShader, transparent:!0, depthTest:!1, depthWrite:!1, blendSrc:THREE.DstColorFactor, blendDst:THREE.ZeroFactor, blendEquation:THREE.AddEquation, blendSrcAlpha:THREE.DstAlphaFactor, blendDstAlpha:THREE.ZeroFactor, blendEquationAlpha:THREE.AddEquation});
  this._kernelSize = 0;
  var a = this;
  Object.defineProperties(this, {kernelRadius:{get:function() {
    return a.ssaoMaterial.uniforms.kernelRadius.value;
  }, set:function(d) {
    a.ssaoMaterial.uniforms.kernelRadius.value = d;
  }}, minDistance:{get:function() {
    return a.ssaoMaterial.uniforms.minDistance.value;
  }, set:function(d) {
    a.ssaoMaterial.uniforms.minDistance.value = d;
  }}, maxDistance:{get:function() {
    return a.ssaoMaterial.uniforms.maxDistance.value;
  }, set:function(d) {
    a.ssaoMaterial.uniforms.maxDistance.value = d;
  }}, kernelSize:{get:function() {
    return a._kernelSize;
  }, set:function(d) {
    a._kernelSize = d;
    a.generateSampleKernel();
    a.generateRandomKernelRotations();
    a.ssaoMaterial.uniforms.tNoise.value = a.noiseTexture;
    a.ssaoMaterial.uniforms.kernel.value = a.kernel;
  }}});
  this.kernelSize = 64;
  this.kernelRadius = 8;
  this.minDistance = .1;
  this.maxDistance = 1E3;
}
SSAONOHPass.prototype = Object.create(Pass.prototype);
SSAONOHPass.prototype.generateSampleKernel = function() {
  for (var a = 0; a < this._kernelSize; a++) {
    var d = new THREE.Vector3;
    d.x = 2 * Math.random() - 1;
    d.y = 2 * Math.random() - 1;
    d.z = Math.random();
    d.normalize();
    var k = a / this._kernelSize;
    k = THREE.Math.lerp(.1, 1, k * k);
    d.multiplyScalar(k);
    this.kernel.push(d);
  }
};
SSAONOHPass.prototype.generateRandomKernelRotations = function() {
  void 0 === SimplexNoise && console.error("SSAONOHPass: The pass relies on SimplexNoise.");
  for (var a = new SimplexNoise, d = new Float32Array(16), k = 0; 16 > k; k++) {
    d[k] = a.noise3d(2 * Math.random() - 1, 2 * Math.random() - 1, 0);
  }
  this.noiseTexture = new THREE.DataTexture(d, 4, 4, THREE.LuminanceFormat, THREE.FloatType);
  this.noiseTexture.wrapS = THREE.RepeatWrapping;
  this.noiseTexture.wrapT = THREE.RepeatWrapping;
  this.noiseTexture.needsUpdate = !0;
};
SSAONOHPass.prototype.render = function(a, d, k, b, g, f, e) {
  a.autoClear = !1;
  a.setClearColor(7829503);
  a.setClearAlpha(1);
  f.overrideMaterial = this.normalMaterial;
  a.setRenderTarget(this.normalRenderTarget);
  a.clear(!0, !0, !0);
  a.render(f, e);
  f.overrideMaterial = null;
  this.ssaoMaterial.uniforms.tDepth.value = this.depthTexture;
  this.ssaoMaterial.uniforms.tDiffuse.value = k.texture;
  this.ssaoMaterial.uniforms.cameraNear.value = e.near;
  this.ssaoMaterial.uniforms.cameraFar.value = e.far;
  this.ssaoMaterial.uniforms.cameraProjectionMatrix.value.copy(e.projectionMatrix);
  this.ssaoMaterial.uniforms.cameraInverseProjectionMatrix.value.getInverse(e.projectionMatrix);
  this.renderPass(a, this.ssaoMaterial, this.ssaoRenderTarget);
  this.renderPass(a, this.blurMaterial, this.blurRenderTarget);
  this.renderToScreen ? (this.copyMaterial.uniforms.tDiffuse.value = k.texture, this.copyMaterial.blending = THREE.NoBlending, this.renderPass(a, this.copyMaterial, null, this.clear), this.copyMaterial.uniforms.tDiffuse.value = this.blurRenderTarget.texture, this.copyMaterial.blending = THREE.CustomBlending, this.renderPass(a, this.copyMaterial, null, !1)) : (this.copyMaterial.uniforms.tDiffuse.value = k.texture, this.copyMaterial.blending = THREE.NoBlending, this.renderPass(a, this.copyMaterial, 
  d, this.clear), this.copyMaterial.uniforms.tDiffuse.value = this.blurRenderTarget.texture, this.copyMaterial.blending = THREE.CustomBlending, this.renderPass(a, this.copyMaterial, d, !1));
};
SSAONOHPass.prototype.renderPass = function(a, d, k, b) {
  this.quad.material = d;
  a.autoClear = !1;
  a.setRenderTarget(k);
  b && a.clear(!0, !0, !0);
  a.render(this.scene, this.camera);
};
SSAONOHPass.prototype.dispose = function() {
  this.normalRenderTarget.dispose();
  this.ssaoRenderTarget.dispose();
  this.blurRenderTarget.dispose();
  this.quad.geometry.dispose();
  this.normalMaterial.dispose();
  this.blurMaterial.dispose();
  this.copyMaterial.dispose();
};
SSAONOHPass.prototype.setSize = function(a, d) {
  this.ssaoMaterial.uniforms.resolution.value.set(a, d);
  this.blurMaterial.uniforms.resolution.value.set(a, d);
  this.normalRenderTarget.setSize(a, d);
  this.ssaoRenderTarget.setSize(a, d);
  this.blurRenderTarget.setSize(a, d);
};
SSAONOHPass.prototype.toJSON = function(a) {
  a = Pass.prototype.toJSON.call(this, a);
  a.kernelSize = this.kernelSize;
  a.kernelRadius = this.kernelRadius;
  a.minDistance = this.minDistance;
  a.maxDistance = this.maxDistance;
  return a;
};
"use strict";
function SSAOPass() {
  ShaderPass.call(this, SSAOShader);
  this.type = "SSAO";
  this.depthMaterial = new THREE.MeshDepthMaterial;
  this.depthMaterial.depthPacking = THREE.RGBADepthPacking;
  this.depthMaterial.blending = THREE.NoBlending;
  this.depthRenderTarget = new THREE.WebGLRenderTarget(2, 2, {minFilter:THREE.LinearFilter, magFilter:THREE.LinearFilter});
  this.uniforms.tDepth.value = this.depthRenderTarget.texture;
  this.uniforms.size.value.set(2, 2);
  Object.defineProperties(this, {radius:{get:function() {
    return this.uniforms.radius.value;
  }, set:function(a) {
    this.uniforms.radius.value = a;
  }}, onlyAO:{get:function() {
    return this.uniforms.onlyAO.value;
  }, set:function(a) {
    this.uniforms.onlyAO.value = a;
  }}, aoClamp:{get:function() {
    return this.uniforms.aoClamp.value;
  }, set:function(a) {
    this.uniforms.aoClamp.value = a;
  }}, lumInfluence:{get:function() {
    return this.uniforms.lumInfluence.value;
  }, set:function(a) {
    this.uniforms.lumInfluence.value = a;
  }}});
  this.radius = 4;
  this.onlyAO = !1;
  this.aoClamp = .25;
  this.lumInfluence = .7;
}
SSAOPass.prototype = Object.create(ShaderPass.prototype);
SSAOPass.prototype.render = function(a, d, k, b, g, f, e) {
  this.uniforms.cameraNear.value = e.near;
  this.uniforms.cameraFar.value = e.far;
  f.overrideMaterial = this.depthMaterial;
  a.setRenderTarget(this.depthRenderTarget);
  a.clear(!0, !0, !0);
  a.render(f, e);
  f.overrideMaterial = null;
  ShaderPass.prototype.render.call(this, a, d, k, b, g);
};
SSAOPass.prototype.setSize = function(a, d) {
  this.uniforms.size.value.set(a, d);
  this.depthRenderTarget.setSize(a, d);
};
SSAOPass.prototype.toJSON = function(a) {
  a = Pass.prototype.toJSON.call(this, a);
  a.onlyAO = this.onlyAO;
  a.radius = this.radius;
  a.aoClamp = this.aoClamp;
  a.lumInfluence = this.lumInfluence;
  return a;
};
"use strict";
function BokehPass(a, d, k) {
  void 0 === THREE.BokehShader && console.error("BokehPass relies on THREE.BokehShader");
  Pass.call(this);
  this.type = "Bokeh";
  this.renderTargetColor = new THREE.WebGLRenderTarget(0, 0, Pass.RGBLinear);
  this.renderTargetDepth = this.renderTargetColor.clone();
  this.materialDepth = new THREE.MeshDepthMaterial;
  this.materialDepth.depthPacking = THREE.RGBADepthPacking;
  this.materialDepth.blending = THREE.NoBlending;
  this.uniforms = THREE.UniformsUtils.clone(THREE.BokehShader.uniforms);
  this.uniforms.tDepth.value = this.renderTargetDepth.texture;
  this.materialBokeh = new THREE.ShaderMaterial({defines:THREE.BokehShader.defines, uniforms:this.uniforms, vertexShader:THREE.BokehShader.vertexShader, fragmentShader:THREE.BokehShader.fragmentShader});
  this.createQuadScene();
  this.quad.material = this.materialBokeh;
  var b = this;
  Object.defineProperties(this, {aperture:{get:function() {
    return b.uniforms.aperture.value;
  }, set:function(a) {
    b.uniforms.aperture.value = a;
  }}, focus:{get:function() {
    return b.uniforms.focus.value;
  }, set:function(a) {
    b.uniforms.focus.value = a;
  }}, maxblur:{get:function() {
    return b.uniforms.maxblur.value;
  }, set:function(a) {
    b.uniforms.maxblur.value = a;
  }}});
  this.focus = void 0 !== a ? a : 1;
  this.aperture = void 0 !== d ? d : 1;
  this.maxblur = void 0 !== k ? k : .2;
}
BokehPass.prototype = Object.create(Pass.prototype);
BokehPass.prototype.render = function(a, d, k, b, g, f, e) {
  f.overrideMaterial = this.materialDepth;
  a.autoClear = !1;
  a.setClearColor(16777215);
  a.setClearAlpha(1);
  a.setRenderTarget(this.renderTargetDepth);
  a.clear(!0, !0, !0);
  a.render(f, e);
  this.uniforms.tColor.value = k.texture;
  this.uniforms.nearClip.value = e.near;
  this.uniforms.farClip.value = e.far;
  this.uniforms.aspect.value = e.aspect;
  this.clear ? (a.autoClear = !0, a.autoClearColor = !0, a.autoClearDepth = !0, a.autoClearStencil = !0) : a.autoClear = !1;
  a.setRenderTarget(this.renderToScreen ? null : d);
  a.render(this.scene, this.camera);
  f.overrideMaterial = null;
};
BokehPass.prototype.setSize = function(a, d) {
  this.renderTargetColor.setSize(a, d);
  this.renderTargetDepth.setSize(a, d);
};
BokehPass.prototype.toJSON = function(a) {
  a = Pass.prototype.toJSON.call(this, a);
  a.aperture = this.aperture;
  a.focus = this.focus;
  a.maxblur = this.maxblur;
  return a;
};
"use strict";
function CopyPass() {
  ShaderPass.call(this, THREE.CopyShader);
  this.type = "Copy";
}
CopyPass.prototype = Object.create(ShaderPass.prototype);
"use strict";
function FilmPass(a, d, k, b) {
  void 0 === THREE.FilmShader && console.error("FilmPass relies on THREE.FilmShader");
  Pass.call(this);
  this.type = "Film";
  this.createQuadScene();
  this.uniforms = THREE.UniformsUtils.clone(THREE.FilmShader.uniforms);
  this.material = new THREE.ShaderMaterial({uniforms:this.uniforms, vertexShader:THREE.FilmShader.vertexShader, fragmentShader:THREE.FilmShader.fragmentShader});
  var g = this;
  Object.defineProperties(this, {grayscale:{get:function() {
    return g.uniforms.grayscale.value;
  }, set:function(a) {
    g.uniforms.grayscale.value = a;
  }}, noiseIntensity:{get:function() {
    return g.uniforms.nIntensity.value;
  }, set:function(a) {
    g.uniforms.nIntensity.value = a;
  }}, scanlinesIntensity:{get:function() {
    return g.uniforms.sIntensity.value;
  }, set:function(a) {
    g.uniforms.sIntensity.value = a;
  }}, scanlinesCount:{get:function() {
    return g.uniforms.sCount.value;
  }, set:function(a) {
    g.uniforms.sCount.value = a;
  }}});
  this.grayscale = void 0 !== b ? b : !1;
  this.noiseIntensity = void 0 !== a ? a : .35;
  this.scanlinesIntensity = void 0 !== d ? d : .5;
  this.scanlinesCount = void 0 !== k ? k : 512;
}
FilmPass.prototype = Object.create(Pass.prototype);
FilmPass.prototype.render = function(a, d, k, b, g, f, e) {
  this.uniforms.time.value += b;
  this.uniforms.tDiffuse.value = k.texture;
  this.quad.material = this.material;
  this.clear ? (a.autoClear = !0, a.autoClearColor = !0, a.autoClearDepth = !0, a.autoClearStencil = !0) : a.autoClear = !1;
  a.setRenderTarget(this.renderToScreen ? null : d);
  a.render(this.scene, this.camera);
};
FilmPass.prototype.toJSON = function(a) {
  a = Pass.prototype.toJSON.call(this, a);
  a.grayscale = this.grayscale;
  a.noiseIntensity = this.noiseIntensity;
  a.scanlinesIntensity = this.scanlinesIntensity;
  a.scanlinesCount = this.scanlinesCount;
  return a;
};
"use strict";
function DotScreenPass(a, d, k) {
  void 0 === THREE.DotScreenShader && console.error("DotScreenPass relies on THREE.DotScreenShader");
  Pass.call(this);
  this.type = "DotScreen";
  this.createQuadScene();
  this.uniforms = THREE.UniformsUtils.clone(THREE.DotScreenShader.uniforms);
  this.material = new THREE.ShaderMaterial({uniforms:this.uniforms, vertexShader:THREE.DotScreenShader.vertexShader, fragmentShader:THREE.DotScreenShader.fragmentShader});
  Object.defineProperties(this, {center:{get:function() {
    return this.uniforms.center.value;
  }, set:function(a) {
    this.uniforms.center.value = a;
  }}, angle:{get:function() {
    return this.uniforms.angle.value;
  }, set:function(a) {
    this.uniforms.angle.value = a;
  }}, scale:{get:function() {
    return this.uniforms.scale.value;
  }, set:function(a) {
    this.uniforms.scale.value = a;
  }}});
  void 0 !== a && this.center.copy(a);
  this.angle = void 0 !== d ? d : .5;
  this.scale = void 0 !== k ? k : .8;
}
DotScreenPass.prototype = Object.create(Pass.prototype);
DotScreenPass.prototype.render = function(a, d, k, b, g, f, e) {
  this.uniforms.tDiffuse.value = k.texture;
  this.uniforms.tSize.value.set(k.width, k.height);
  this.quad.material = this.material;
  this.clear ? (a.autoClear = !0, a.autoClearColor = !0, a.autoClearDepth = !0, a.autoClearStencil = !0) : a.autoClear = !1;
  a.setRenderTarget(this.renderToScreen ? null : d);
  a.render(this.scene, this.camera);
};
DotScreenPass.prototype.toJSON = function(a) {
  a = Pass.prototype.toJSON.call(this, a);
  a.center = this.center.toArray();
  a.angle = this.angle;
  a.scale = this.scale;
  return a;
};
"use strict";
function SobelPass(a, d, k) {
  void 0 === THREE.SobelOperatorShader && console.error("SobelPass relies on THREE.SobelOperatorShader");
  void 0 === THREE.LuminosityShader && console.error("SobelPass relies on THREE.LuminosityShader");
  ShaderPass.call(this, THREE.SobelOperatorShader);
  this.type = "Sobel";
}
SobelPass.prototype = Object.create(ShaderPass.prototype);
SobelPass.prototype.setSize = function(a, d) {
  this.uniforms.resolution.value.set(a, d);
};
"use strict";
function ColorifyPass() {
  ShaderPass.call(this, THREE.ColorifyShader);
  this.type = "Colorify";
  Object.defineProperties(this, {color:{get:function() {
    return this.uniforms.color.value;
  }, set:function(a) {
    this.uniforms.color.value = a;
  }}});
}
ColorifyPass.prototype = Object.create(ShaderPass.prototype);
ColorifyPass.prototype.toJSON = function(a) {
  a = Pass.prototype.toJSON.call(this, a);
  a.color = this.color.getHex();
  return a;
};
"use strict";
function TechnicolorPass() {
  ShaderPass.call(this, THREE.TechnicolorShader);
  this.type = "Technicolor";
}
TechnicolorPass.prototype = Object.create(ShaderPass.prototype);
"use strict";
function HueSaturationPass(a, d) {
  ShaderPass.call(this, THREE.HueSaturationShader);
  this.type = "HueSaturation";
  Object.defineProperties(this, {hue:{get:function() {
    return this.uniforms.hue.value;
  }, set:function(a) {
    this.uniforms.hue.value = a;
  }}, saturation:{get:function() {
    return this.uniforms.saturation.value;
  }, set:function(a) {
    this.uniforms.saturation.value = a;
  }}});
  this.hue = void 0 !== a ? a : 0;
  this.saturation = void 0 !== d ? d : 0;
}
HueSaturationPass.prototype = Object.create(ShaderPass.prototype);
HueSaturationPass.prototype.toJSON = function(a) {
  a = Pass.prototype.toJSON.call(this, a);
  a.hue = this.hue;
  a.saturation = this.saturation;
  return a;
};
function AdaptiveToneMappingPass(a, d) {
  Pass.call(this);
  var k = this;
  this.type = "AdaptiveToneMapping";
  this.needsInit = !0;
  this.resolution = void 0 !== d ? d : 256;
  this._adaptive = void 0 !== a ? a : !0;
  this.currentLuminanceRT = this.previousLuminanceRT = this.luminanceRT = null;
  this.copyUniforms = THREE.UniformsUtils.clone(THREE.CopyShader.uniforms);
  this.materialCopy = new THREE.ShaderMaterial({uniforms:this.copyUniforms, vertexShader:THREE.CopyShader.vertexShader, fragmentShader:THREE.CopyShader.fragmentShader, blending:THREE.NoBlending, depthTest:!1});
  this.materialLuminance = new THREE.ShaderMaterial({uniforms:THREE.UniformsUtils.clone(THREE.LuminosityShader.uniforms), vertexShader:THREE.LuminosityShader.vertexShader, fragmentShader:THREE.LuminosityShader.fragmentShader, blending:THREE.NoBlending});
  this.createShader();
  void 0 === THREE.ToneMapShader && console.error("nunuStudio: AdaptiveToneMappingPass relies on THREE.ToneMapShader");
  this.materialToneMap = new THREE.ShaderMaterial({uniforms:THREE.UniformsUtils.clone(THREE.ToneMapShader.uniforms), vertexShader:THREE.ToneMapShader.vertexShader, fragmentShader:THREE.ToneMapShader.fragmentShader, blending:THREE.NoBlending});
  this.createQuadScene();
  Object.defineProperties(this, {minLuminance:{get:function() {
    return k.adaptLuminanceShader.uniforms.minLuminance.value;
  }, set:function(a) {
    k.adaptLuminanceShader.uniforms.minLuminance.value = a;
  }}, tau:{get:function() {
    return k.adaptLuminanceShader.uniforms.tau.value;
  }, set:function(a) {
    k.adaptLuminanceShader.uniforms.tau.value = a;
  }}, adaptive:{get:function() {
    return k._adaptive;
  }, set:function(a) {
    a ? (this._adaptive = !0, this.materialToneMap.defines.ADAPTED_LUMINANCE = "", this.materialToneMap.uniforms.luminanceMap.value = this.luminanceRT.texture) : (this._adaptive = !1, delete this.materialToneMap.defines.ADAPTED_LUMINANCE, this.materialToneMap.uniforms.luminanceMap.value = null);
    this.materialToneMap.needsUpdate = !0;
  }}});
}
AdaptiveToneMappingPass.prototype = Object.create(Pass.prototype);
AdaptiveToneMappingPass.prototype.constructor = AdaptiveToneMappingPass;
AdaptiveToneMappingPass.prototype.render = function(a, d, k, b, g) {
  this.needsInit && (this.reset(), this.luminanceRT.texture.type = k.texture.type, this.previousLuminanceRT.texture.type = k.texture.type, this.currentLuminanceRT.texture.type = k.texture.type, this.needsInit = !1);
  this._adaptive && (this.quad.material = this.materialLuminance, this.materialLuminance.uniforms.tDiffuse.value = k.texture, a.setRenderTarget(this.currentLuminanceRT), a.render(this.scene, this.camera), this.quad.material = this.materialAdaptiveLum, this.materialAdaptiveLum.uniforms.delta.value = b, this.materialAdaptiveLum.uniforms.lastLum.value = this.previousLuminanceRT.texture, this.materialAdaptiveLum.uniforms.currentLum.value = this.currentLuminanceRT.texture, a.setRenderTarget(this.luminanceRT), 
  a.render(this.scene, this.camera), this.quad.material = this.materialCopy, this.copyUniforms.tDiffuse.value = this.luminanceRT.texture, a.setRenderTarget(this.previousLuminanceRT), a.render(this.scene, this.camera));
  this.quad.material = this.materialToneMap;
  this.materialToneMap.uniforms.tDiffuse.value = k.texture;
  this.clear ? (a.autoClear = !0, a.autoClearColor = !0, a.autoClearDepth = !0, a.autoClearStencil = !0) : a.autoClear = !1;
  a.setRenderTarget(this.renderToScreen ? null : d);
  a.render(this.scene, this.camera);
};
AdaptiveToneMappingPass.prototype.createShader = function() {
  this.adaptLuminanceShader = {defines:{MIP_LEVEL_1X1:(Math.log(this.resolution) / Math.log(2)).toFixed(1)}, uniforms:{lastLum:{value:null}, currentLum:{value:null}, minLuminance:{value:.01}, delta:{value:.016}, tau:{value:1}}, vertexShader:"varying vec2 vUv;\n\t\tvoid main(){\n\t\t\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n\t\t\n\t\t}", fragmentShader:"varying vec2 vUv;\n\t\t\n\t\tuniform sampler2D lastLum;\n\t\tuniform sampler2D currentLum;\n\t\tuniform float minLuminance;\n\t\tuniform float delta;\n\t\tuniform float tau;\n\t\t\n\t\tvoid main()\n\t\t{\n\t\t\tvec4 lastLum = texture2D(lastLum, vUv, MIP_LEVEL_1X1);\n\t\t\tvec4 currentLum = texture2D(currentLum, vUv, MIP_LEVEL_1X1);\n\t\t\t\n\t\t\tfloat fLastLum = max(minLuminance, lastLum.r);\n\t\t\tfloat fCurrentLum = max(minLuminance, currentLum.r);\n\t\t\t\n\t\t\t// The adaption seems to work better in extreme lighting differences if the input luminance is squared.\t\t\tfCurrentLum *= fCurrentLum;\n\t\t\t\n\t\t\t// Adapt the luminance using Pattanaik's technique\t\t\tfloat fAdaptedLum = fLastLum + (fCurrentLum - fLastLum) * (1.0 - exp(-delta * tau));\n\t\t\tgl_FragColor.r = fAdaptedLum;\n\t\t}"};
  this.materialAdaptiveLum = new THREE.ShaderMaterial({uniforms:THREE.UniformsUtils.clone(this.adaptLuminanceShader.uniforms), vertexShader:this.adaptLuminanceShader.vertexShader, fragmentShader:this.adaptLuminanceShader.fragmentShader, defines:this.adaptLuminanceShader.defines, blending:THREE.NoBlending});
};
AdaptiveToneMappingPass.prototype.reset = function() {
  this.luminanceRT && this.luminanceRT.dispose();
  this.currentLuminanceRT && this.currentLuminanceRT.dispose();
  this.previousLuminanceRT && this.previousLuminanceRT.dispose();
  this.luminanceRT = new THREE.WebGLRenderTarget(this.resolution, this.resolution, Pass.RGBALinear);
  this.luminanceRT.texture.generateMipmaps = !1;
  this.previousLuminanceRT = new THREE.WebGLRenderTarget(this.resolution, this.resolution, Pass.RGBALinear);
  this.previousLuminanceRT.texture.generateMipmaps = !1;
  this.currentLuminanceRT = new THREE.WebGLRenderTarget(this.resolution, this.resolution, {minFilter:THREE.LinearMipMapLinearFilter, magFilter:THREE.LinearFilter, format:THREE.RGBAFormat});
  this._adaptive && (this.materialToneMap.defines.ADAPTED_LUMINANCE = "", this.materialToneMap.uniforms.luminanceMap.value = this.luminanceRT.texture);
  this.quad.material = new THREE.MeshBasicMaterial({color:7829367});
  this.materialLuminance.needsUpdate = !0;
  this.materialAdaptiveLum.needsUpdate = !0;
  this.materialToneMap.needsUpdate = !0;
};
AdaptiveToneMappingPass.prototype.dispose = function() {
  this.luminanceRT && this.luminanceRT.dispose();
  this.previousLuminanceRT && this.previousLuminanceRT.dispose();
  this.currentLuminanceRT && this.currentLuminanceRT.dispose();
  this.materialLuminance && this.materialLuminance.dispose();
  this.materialAdaptiveLum && this.materialAdaptiveLum.dispose();
  this.materialCopy && this.materialCopy.dispose();
  this.materialToneMap && this.materialToneMap.dispose();
};
AdaptiveToneMappingPass.prototype.toJSON = function(a) {
  a = Pass.prototype.toJSON.call(this, a);
  a.minLuminance = this.minLuminance;
  a.tau = this.tau;
  a.adaptive = this._adaptive;
  return a;
};
"use strict";
var SSAOShader = {uniforms:{tDiffuse:{value:null}, tDepth:{value:null}, size:{value:new THREE.Vector2(512, 512)}, cameraNear:{value:1}, cameraFar:{value:100}, radius:{value:32}, onlyAO:{value:0}, aoClamp:{value:.25}, lumInfluence:{value:.7}}, vertexShader:"\n\tvarying vec2 vUv;\n\tvoid main()\n\t{\n\t\tvUv = uv;\n\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n\t}", fragmentShader:"\n\tuniform float cameraNear;\n\tuniform float cameraFar;\n\n\t#ifdef USE_LOGDEPTHBUF\n\t\tuniform float logDepthBufFC;\n\t#endif\n\n\tuniform float radius; // ao radius \n\tuniform bool onlyAO; // use only ambient occlusion pass?\n\n\tuniform vec2 size; // texture width, height\n\tuniform float aoClamp; // depth clamp - reduces haloing at screen edges\n\n\tuniform float lumInfluence; // how much luminance affects occlusion\n\n\tuniform sampler2D tDiffuse;\n\tuniform sampler2D tDepth;\n\n\tvarying vec2 vUv;\n\n\t#define DL 2.399963229728653 // PI *(3.0 - sqrt(5.0))\n\t#define EULER 2.718281828459045\n\n\t// user variables\n\tconst int samples = 64; // ao sample count\n\tconst bool useNoise = true; // use noise instead of pattern for sample dithering\n\tconst float noiseAmount = 0.0004; // dithering amount\n\tconst float diffArea = 0.4; // self-shadowing reduction\n\tconst float gDisplace = 0.4; // gauss bell center\n\n\t// RGBA depth\n\t#include <packing>\n\n\t// generating noise / pattern texture for dithering\n\tvec2 rand(const vec2 coord)\n\t{\n\t\tvec2 noise;\n\n\t\tif(useNoise)\n\t\t{\n\t\t\tfloat nx = dot(coord, vec2(12.9898, 78.233));\n\t\t\tfloat ny = dot(coord, vec2(12.9898, 78.233) * 2.0);\n\t\t\tnoise = clamp(fract(43758.5453 * sin(vec2(nx, ny))), 0.0, 1.0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfloat ff = fract(1.0 - coord.s *(size.x / 2.0));\n\t\t\tfloat gg = fract(coord.t *(size.y / 2.0));\n\t\t\tnoise = vec2(0.25, 0.75) * vec2(ff) + vec2(0.75, 0.25) * gg;\n\t\t}\n\n\t\treturn(noise * 2.0  - 1.0) * noiseAmount;\n\t}\n\n\tfloat readDepth(const in vec2 coord) {\n\n\t\tfloat cameraFarPlusNear = cameraFar + cameraNear;\n\t\tfloat cameraFarMinusNear = cameraFar - cameraNear;\n\t\tfloat cameraCoef = 2.0 * cameraNear;\n\n\t\t#ifdef USE_LOGDEPTHBUF\n\t\t\tfloat logz = unpackRGBAToDepth(texture2D(tDepth, coord));\n\t\t\tfloat w = pow(2.0, (logz / logDepthBufFC)) - 1.0;\n\t\t\tfloat z = (logz / w) + 1.0;\n\t\t#else\n\t\t\tfloat z = unpackRGBAToDepth(texture2D(tDepth, coord));\n\t\t#endif\n\n\t\treturn cameraCoef /(cameraFarPlusNear - z * cameraFarMinusNear);\n\t}\n\n\tfloat compareDepths(const in float depth1, const in float depth2, inout int far)\n\t{\n\t\tfloat garea = 8.0; // gauss bell width\n\t\tfloat diff =(depth1 - depth2) * 100.0; // depth difference (0-100)\n\n\t\t// reduce left bell width to avoid self-shadowing\n\t\tif(diff < gDisplace)\n\t\t{\n\t\t\tgarea = diffArea;\n\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfar = 1;\n\t\t}\n\n\t\tfloat dd = diff - gDisplace;\n\t\tfloat gauss = pow(EULER, -2.0 *(dd * dd) /(garea * garea));\n\t\treturn gauss;\n\t}\n\n\tfloat calcAO(float depth, float dw, float dh)\n\t{\n\t\tvec2 vv = vec2(dw, dh);\n\t\tvec2 coord1 = vUv + radius * vv;\n\t\tvec2 coord2 = vUv - radius * vv;\n\n\t\tfloat temp1 = 0.0;\n\t\tfloat temp2 = 0.0;\n\n\t\tint far = 0;\n\t\ttemp1 = compareDepths(depth, readDepth(coord1), far);\n\n\t\t// DEPTH EXTRAPOLATION\n\t\tif(far > 0)\n\t\t{\n\t\t\ttemp2 = compareDepths(readDepth(coord2), depth, far);\n\t\t\ttemp1 +=(1.0 - temp1) * temp2;\n\t\t}\n\n\t\treturn temp1;\n\t}\n\n\tvoid main()\n\t{\n\t\tvec2 noise = rand(vUv);\n\t\tfloat depth = readDepth(vUv);\n\n\t\tfloat tt = clamp(depth, aoClamp, 1.0);\n\n\t\tfloat w =(1.0 / size.x) / tt +(noise.x *(1.0 - noise.x));\n\t\tfloat h =(1.0 / size.y) / tt +(noise.y *(1.0 - noise.y));\n\n\t\tfloat ao = 0.0;\n\n\t\tfloat dz = 1.0 / float(samples);\n\t\tfloat l = 0.0;\n\t\tfloat z = 1.0 - dz / 2.0;\n\n\t\tfor(int i = 0; i <= samples; i ++)\n\t\t{\n\t\t\tfloat r = sqrt(1.0 - z);\n\n\t\t\tfloat pw = cos(l) * r;\n\t\t\tfloat ph = sin(l) * r;\n\t\t\tao += calcAO(depth, pw * w, ph * h);\n\t\t\tz = z - dz;\n\t\t\tl = l + DL;\n\t\t}\n\n\t\tao /= float(samples);\n\t\tao = 1.0 - ao;\n\n\t\tvec3 color = texture2D(tDiffuse, vUv).rgb;\n\n\t\tvec3 lumcoeff = vec3(0.299, 0.587, 0.114);\n\t\tfloat lum = dot(color.rgb, lumcoeff);\n\t\tvec3 luminance = vec3(lum);\n\n\t\tvec3 final = vec3(color * mix(vec3(ao), vec3(1.0), luminance * lumInfluence)); // mix(color * ao, white, luminance)\n\n\t\tif(onlyAO)\n\t\t{\n\t\t\tfinal = vec3(mix(vec3(ao), vec3(1.0), luminance * lumInfluence)); // ambient occlusion only\n\t\t}\n\n\t\tgl_FragColor = vec4(final, 1.0);\n\t}"};
"use strict";
function Resource(a, d) {
  this.name = a;
  this.uuid = THREE.Math.generateUUID();
  this.type = d;
  this.encoding = this.format = "";
  this.data = null;
}
Resource.prototype.export = function(a) {
  "base64" === this.format ? FileSystem.writeFileBase64(a, this.data) : "arraybuffer" === this.format ? FileSystem.writeFileArrayBuffer(a, void 0 !== this.arraybuffer ? this.arraybuffer : this.data) : "string" === this.format ? FileSystem.writeFile(a, this.data) : "json" === this.format ? FileSystem.writeFile(a, JSON.stringify(this.data)) : "url" === this.format && FileSystem.writeFileArrayBuffer(a, FileSystem.readFileArrayBuffer(this.data));
};
Resource.prototype.dispose = function() {
};
Resource.prototype.toJSON = function(a) {
  a = {};
  a.name = this.name;
  a.uuid = this.uuid;
  a.type = this.type;
  return a;
};
"use strict";
function Font(a) {
  Resource.call(this, "font", "Font");
  this.reversed = !1;
  this.font = null;
  if (void 0 !== a) {
    if (a instanceof ArrayBuffer) {
      this.data = a, this.format = "arraybuffer", this.loadTTF();
    } else {
      if ("object" === typeof a) {
        this.font = this.data = a, this.encoding = this.format = "json";
      } else {
        if (this.encoding = FileSystem.getFileExtension(a), this.name = FileSystem.getFileName(a), "json" === this.encoding) {
          this.data = JSON.parse(FileSystem.readFile(a)), this.format = "json", this.font = this.data;
        } else {
          if ("ttf" === this.encoding || "otf" === this.encoding || "ttc" === this.encoding || "otc" === this.encoding) {
            this.data = FileSystem.readFileArrayBuffer(a), this.format = "arraybuffer", this.loadTTF();
          }
        }
      }
    }
  }
}
Font.prototype = Object.create(Resource.prototype);
Font.fileIsFont = function(a) {
  return void 0 !== a ? (a = a.name.toLocaleLowerCase(), a.endsWith("ttf") || a.endsWith("otf") || a.endsWith("ttc") || a.endsWith("otc") || a.endsWith("json")) : !1;
};
Font.prototype.isFont = !0;
Font.prototype.reverseGlyphs = function() {
  this.reversed = !this.reversed;
  this.loadTTF();
};
Font.prototype.loadTTF = function() {
  var a = new THREE.TTFLoader;
  a.reversed = this.reversed;
  this.font = a.parse(this.data);
};
Font.prototype.toJSON = function(a) {
  if (void 0 !== a.fonts[this.uuid]) {
    return a.fonts[this.uuid];
  }
  var d = Resource.prototype.toJSON.call(this, a);
  d.encoding = this.encoding;
  d.reversed = this.reversed;
  "arraybuffer" === this.format ? (d.data = this.data, d.format = this.format) : "base64" === this.format ? (d.data = ArraybufferUtils.fromBase64(this.data), d.format = "arraybuffer") : (d.data = this.data, d.format = this.format);
  return a.fonts[this.uuid] = d;
};
Font.prototype.generateShapes = function(a, d, k) {
  void 0 === d && (d = 100);
  void 0 === k && (k = 10);
  var b = this.font;
  a = String(a).split("");
  var g = d / b.resolution, f = (b.boundingBox.yMax - b.boundingBox.yMin) * g, e = 0, r = 0;
  d = [];
  for (var q = 0; q < a.length; q++) {
    var m = a[q];
    if ("\n" === m) {
      r -= f, e = 0;
    } else {
      var n;
      var c = g;
      var h = e, t = r;
      if (m = b.glyphs[m] || b.glyphs["?"]) {
        var z = new THREE.ShapePath, y = [], x = THREE.ShapeUtils.b2, p = THREE.ShapeUtils.b3;
        if (m.o) {
          for (var v = m._cachedOutline || (m._cachedOutline = m.o.split(" ")), w = 0, C = v.length; w < C;) {
            var A = v[w++];
            if ("m" === A) {
              var D = v[w++] * c + h;
              var F = v[w++] * c + t;
              z.moveTo(D, F);
            }
            if ("l" === A) {
              D = v[w++] * c + h, F = v[w++] * c + t, z.lineTo(D, F);
            } else {
              if ("q" === A) {
                var B = v[w++] * c + h;
                var E = v[w++] * c + t;
                var I = v[w++] * c + h;
                A = v[w++] * c + t;
                z.quadraticCurveTo(I, A, B, E);
                if (n = y[y.length - 1]) {
                  var K = n.x;
                  n = n.y;
                  for (var J = 1; J <= k; J++) {
                    var R = J / k;
                    x(R, K, I, B);
                    x(R, n, A, E);
                  }
                }
              } else {
                if ("b" === A && (B = v[w++] * c + h, E = v[w++] * c + t, I = v[w++] * c + h, A = v[w++] * c + t, D = v[w++] * c + h, F = v[w++] * c + t, z.bezierCurveTo(I, A, D, F, B, E), n = y[y.length - 1])) {
                  for (K = n.x, n = n.y, J = 1; J <= k; J++) {
                    R = J / k, p(R, K, I, D, B), p(R, n, A, F, E);
                  }
                }
              }
            }
          }
        }
        c = {width:m.ha * c, path:z};
      } else {
        c = void 0;
      }
      e += c.width;
      d.push(c.path);
    }
  }
  k = [];
  for (b = 0; b < d.length; b++) {
    Array.prototype.push.apply(k, d[b].toShapes());
  }
  return k;
};
"use strict";
function Video(a, d) {
  Resource.call(this, "video", "Video");
  void 0 !== a && (a instanceof ArrayBuffer ? this.loadArrayBufferData(a, d) : Base64Utils.isBase64(a) ? (this.encoding = Base64Utils.getFileFormat(a), this.format = "base64", this.data = a) : this.loadArrayBufferData(FileSystem.readFileArrayBuffer(a), FileSystem.getFileExtension(a)));
}
Video.prototype = Object.create(Resource.prototype);
Video.fileIsVideo = function(a) {
  return void 0 !== a && a.type.startsWith("video") ? !0 : !1;
};
Video.prototype.loadArrayBufferData = function(a, d) {
  var k = new Uint8Array(a);
  k = new Blob([k], {type:"video/" + d});
  this.data = URL.createObjectURL(k);
  this.arraybuffer = a;
  this.encoding = d;
  this.format = "arraybuffer";
};
Video.prototype.toJSON = function(a) {
  if (void 0 !== a.videos[this.uuid]) {
    return a.videos[this.uuid];
  }
  var d = Resource.prototype.toJSON.call(this, a);
  d.encoding = this.encoding;
  "arraybuffer" === this.format ? (d.format = this.format, d.data = this.arraybuffer) : "base64" === this.format ? (d.format = "arraybuffer", d.data = ArraybufferUtils.fromBase64(Base64Utils.removeHeader(this.data))) : (d.format = this.format, d.data = this.data);
  return a.videos[this.uuid] = d;
};
"use strict";
function Audio(a, d) {
  Resource.call(this, "audio", "Audio");
  void 0 !== a && (a instanceof ArrayBuffer ? (this.data = a, this.encoding = void 0 !== d ? d : "") : Base64Utils.isBase64(a) ? (this.encoding = void 0 !== d ? d : "", this.data = ArraybufferUtils.fromBase64(a)) : (this.data = FileSystem.readFileArrayBuffer(a), this.encoding = FileSystem.getFileExtension(a)), this.format = "arraybuffer");
}
Audio.prototype = Object.create(Resource.prototype);
Audio.fileIsAudio = function(a) {
  return void 0 !== a && a.type.startsWith("audio") ? !0 : !1;
};
Audio.prototype.getAudioBuffer = function(a, d) {
  a.decodeAudioData(this.data.slice(0), d, function(a) {
    console.error("nunuStudio: Cannot decode audio buffer (" + a + ")");
  });
};
Audio.prototype.toJSON = function(a) {
  if (void 0 !== a.audio[this.uuid]) {
    return a.audio[this.uuid];
  }
  var d = Resource.prototype.toJSON.call(this, a);
  d.encoding = this.encoding;
  d.data = this.data;
  d.format = this.format;
  return a.audio[this.uuid] = d;
};
"use strict";
function Image(a, d) {
  Resource.call(this, "image", "Image");
  this.height = this.width = -1;
  void 0 !== a ? a instanceof ArrayBuffer ? this.loadArrayBufferData(a, d) : Base64Utils.isBase64(a) ? (this.encoding = Base64Utils.getFileFormat(a), this.format = "base64", this.data = a) : a.startsWith("blob") ? (a = FileSystem.readFileArrayBuffer(a, !0), this.loadArrayBufferData(a)) : (this.encoding = FileSystem.getFileExtension(a), this.format = "url", this.data = a) : this.createSolidColor();
}
Image.prototype = Object.create(Resource.prototype);
Image.fileIsImage = function(a) {
  if (void 0 !== a) {
    if (a.type.startsWith("image")) {
      return !0;
    }
    a = a.name.toLocaleLowerCase();
    return a.endsWith("tga") || a.endsWith("dds") || a.endsWith("pvr") || a.endsWith("ktx") || a.endsWith("basis");
  }
  return !1;
};
Image.prototype.createSolidColor = function(a) {
  var d = document.createElement("canvas");
  d.width = 1;
  d.height = 1;
  var k = d.getContext("2d");
  k.fillStyle = void 0 !== a ? a : MathUtils.randomColor();
  k.fillRect(0, 0, 1, 1);
  this.data = d.toDataURL("image/png");
  this.format = "base64";
  this.encoding = "png";
};
Image.prototype.loadArrayBufferData = function(a, d) {
  var k = new Uint8Array(a);
  k = new Blob([k], {type:"image/" + d});
  this.data = URL.createObjectURL(k);
  this.arraybuffer = a;
  this.encoding = void 0 !== d ? d : "";
  this.format = "arraybuffer";
};
Image.prototype.hasTransparency = function(a) {
  if (!0 === a) {
    a = document.createElement("img");
    a.src = this.data;
    var d = document.createElement("canvas");
    d.width = a.width;
    d.height = a.height;
    d = d.getContext("2d");
    d.drawImage(a, 0, 0, a.width, a.height);
    a = d.getImageData(0, 0, a.width, a.height).data;
    for (d = 3; d < a.length; d += 4) {
      if (255 !== a[d]) {
        return !0;
      }
    }
    return !1;
  }
  return "png" === this.encoding || "gif" === this.encoding;
};
Image.prototype.compressJPEG = function(a) {
  var d = document.createElement("img");
  d.src = this.data;
  var k = document.createElement("canvas");
  k.width = d.width;
  k.height = d.height;
  k.getContext("2d").drawImage(d, 0, 0, d.width, d.height);
  var b = this;
  k.toBlob(function(a) {
    var d = new FileReader;
    d.onload = function() {
      b.encoding = "jpeg";
      b.format = "arraybuffer";
      b.data = d.result;
    };
    d.readAsArrayBuffer(a);
  }, "image/jpeg", void 0 !== a ? a : .7);
};
Image.prototype.dispose = function() {
  "arraybuffer" === this.format && URL.revokeObjectURL(this.data);
};
Image.prototype.toJSON = function(a) {
  if (void 0 !== a.images[this.uuid]) {
    return a.images[this.uuid];
  }
  var d = Resource.prototype.toJSON.call(this, a);
  "url" === this.format && this.loadArrayBufferData(FileSystem.readFileArrayBuffer(this.data), this.encoding);
  d.width = this.width;
  d.height = this.height;
  d.encoding = this.encoding;
  "arraybuffer" === this.format ? (d.format = this.format, d.data = this.arraybuffer) : "base64" === this.format ? (d.format = "arraybuffer", d.data = ArraybufferUtils.fromBase64(Base64Utils.removeHeader(this.data))) : (d.format = this.format, d.data = this.data);
  return a.images[this.uuid] = d;
};
"use strict";
function Model() {
  Resource.call(this, "model", "Model");
}
Model.prototype = Object.create(Resource.prototype);
Model.extensions = "gcode drc assimp assimp.json blend amf babylon prwm svg obj 3ds dae gltf glb 3mf awd ply vtk vtp wrl vrml fbx pcd stl json x".split(" ");
Model.fileIsModel = function(a) {
  if (void 0 !== a) {
    a = a.name.toLocaleLowerCase();
    for (var d = 0; d < Model.extensions.length; d++) {
      if (a.endsWith(Model.extensions[d])) {
        return !0;
      }
    }
  }
  return !1;
};
"use strict";
function TextFile(a, d) {
  Resource.call(this, "text", "TextFile");
  this.format = "string";
  this.encoding = void 0 !== d ? d : "txt";
  this.data = void 0 !== a ? a : "";
}
TextFile.prototype = Object.create(Resource.prototype);
TextFile.extensions = ".js .txt .glsl .json .xml .yaml .csv .css .html".split(" ");
TextFile.fileIsText = function(a) {
  a = a.name.toLocaleLowerCase();
  for (var d = 0; d < TextFile.extensions.length; d++) {
    if (a.endsWith(TextFile.extensions[d])) {
      return !0;
    }
  }
  return !1;
};
TextFile.prototype.toJSON = function(a) {
  if (void 0 !== a.resources[this.uuid]) {
    return a.resources[this.uuid];
  }
  var d = Resource.prototype.toJSON.call(this, a);
  d.encoding = this.encoding;
  d.data = this.data;
  d.format = this.format;
  return a.resources[this.uuid] = d;
};
"use strict";
function ResourceManager() {
  THREE.Object3D.call(this);
  ResourceManager.ResourceContainer.call(this);
}
ResourceManager.ResourceContainer = function() {
  this.images = [];
  this.videos = [];
  this.audio = [];
  this.fonts = [];
  this.materials = [];
  this.textures = [];
  this.geometries = [];
  this.resources = [];
  this.shapes = [];
  this.skeletons = [];
};
ResourceManager.prototype = Object.create(THREE.Object3D.prototype);
ResourceManager.prototype.dispose = function() {
  for (var a in this.geometries) {
    this.geometries[a].dispose();
  }
  for (a in this.textures) {
    this.textures[a].dispose();
  }
  for (a in this.materials) {
    this.materials[a].dispose();
  }
};
ResourceManager.prototype.removeGeometry = function(a, d) {
  this.traverse(function(k) {
    void 0 !== k.geometry && k.geometry.uuid === a.uuid && (k.geometry = d);
  });
  delete this.geometries[a.uuid];
};
ResourceManager.prototype.getResourceByName = function(a) {
  for (var d in this.resources) {
    if (this.resources[d].name === a) {
      return this.resources[d];
    }
  }
  console.warn("nunuStudio: Resource " + a + " not found");
  return null;
};
ResourceManager.prototype.addResource = function(a) {
  a instanceof Resource && (this.resources[a.uuid] = a);
};
ResourceManager.prototype.removeResource = function(a) {
  delete this.resources[a.uuid];
};
ResourceManager.prototype.getImageByName = function(a) {
  for (var d in this.images) {
    if (this.images[d].name === a) {
      return this.images[d];
    }
  }
  console.warn("nunuStudio: Resource " + a + " not found");
  return null;
};
ResourceManager.prototype.removeImage = function(a) {
  a instanceof Image && delete this.images[a.uuid];
};
ResourceManager.prototype.getVideoByName = function(a) {
  for (var d in this.videos) {
    if (this.videos[d].name === a) {
      return this.videos[d];
    }
  }
  console.warn("nunuStudio: Resource " + a + " not found");
  return null;
};
ResourceManager.prototype.removeVideo = function(a) {
  a instanceof Video && delete this.videos[a.uuid];
};
ResourceManager.prototype.getMaterialByName = function(a) {
  for (var d in this.materials) {
    if (this.materials[d].name === a) {
      return this.materials[d];
    }
  }
  console.warn("nunuStudio: Resource " + a + " not found");
  return null;
};
ResourceManager.prototype.addMaterial = function(a) {
  a instanceof THREE.Material && (this.materials[a.uuid] = a);
};
ResourceManager.prototype.removeMaterial = function(a, d, k) {
  void 0 === d && (d = new THREE.MeshBasicMaterial);
  void 0 === k && (k = new THREE.SpriteMaterial);
  a instanceof THREE.Material && (delete this.materials[a.uuid], this.traverse(function(b) {
    void 0 !== b.material && b.material.uuid === a.uuid && (b.material = b instanceof THREE.Sprite ? k : d);
  }));
};
ResourceManager.prototype.getTextureByName = function(a) {
  for (var d in this.textures) {
    if (this.textures[d].name === a) {
      return this.textures[d];
    }
  }
  console.warn("nunuStudio: Resource " + a + " not found");
  return null;
};
ResourceManager.prototype.addTexture = function(a) {
  material instanceof THREE.Texture && (this.textures[a.uuid] = a);
};
ResourceManager.prototype.removeTexture = function(a, d) {
  void 0 === d && (d = new THREE.Texture);
  a instanceof THREE.Texture && (delete this.textures[a.uuid], this.traverse(function(k) {
    void 0 !== k.material ? (k = k.material, null != k.map && k.map.uuid === a.uuid && (k.map = d, k.needsUpdate = !0), null != k.bumpMap && k.bumpMap.uuid === a.uuid && (k.bumpMap = d, k.needsUpdate = !0), null != k.normalMap && k.normalMap.uuid === a.uuid && (k.normalMap = d, k.needsUpdate = !0), null != k.displacementMap && k.displacementMap.uuid === a.uuid && (k.displacementMap = d, k.needsUpdate = !0), null != k.specularMap && k.specularMap.uuid === a.uuid && (k.specularMap = d, k.needsUpdate = 
    !0), null != k.emissiveMap && k.emissiveMap.uuid === a.uuid && (k.emissiveMap = d, k.needsUpdate = !0), null != k.alphaMap && k.alphaMap.uuid === a.uuid && (k.alphaMap = d, k.needsUpdate = !0), null != k.roughnessMap && k.roughnessMap.uuid === a.uuid && (k.roughnessMap = d, k.needsUpdate = !0), null != k.metalnessMap && k.metalnessMap.uuid === a.uuid && (k.metalnessMap = d, k.needsUpdate = !0), null != k.envMap && k.envMap.uuid === a.uuid && (k.envMap = null, k.needsUpdate = !0)) : k instanceof 
    ParticleEmitter && k.group.texture.uuid === a.uuid && (k.group.texture = d);
  }));
};
ResourceManager.prototype.getFontByName = function(a) {
  for (var d in this.fonts) {
    if (this.fonts[d].name === a) {
      return this.fonts[d];
    }
  }
  console.warn("nunuStudio: Resource " + a + " not found");
  return null;
};
ResourceManager.prototype.addFont = function(a) {
  a instanceof Font && (this.fonts[a.uuid] = a);
};
ResourceManager.prototype.removeFont = function(a, d) {
  void 0 === d && (d = new Font);
  a instanceof Font && (delete this.fonts[a.uuid], this.traverse(function(k) {
    void 0 !== k.font && k.font.uuid === a.uuid && k.setFont(d);
  }));
};
ResourceManager.prototype.getAudioByName = function(a) {
  for (var d in this.audio) {
    if (this.audio[d].name === a) {
      return this.audio[d];
    }
  }
  console.warn("nunuStudio: Resource " + a + " not found");
  return null;
};
ResourceManager.prototype.addAudio = function(a) {
  a instanceof Audio && (this.audio[a.uuid] = a);
};
ResourceManager.prototype.removeAudio = function(a, d) {
  void 0 === d && (d = new Audio);
  a instanceof Audio && (delete this.audio[a.uuid], this.traverse(function(k) {
    void 0 !== k.audio && k.audio.uuid === a.uuid && k.setAudio(d);
  }));
};
"use strict";
function VideoStream(a) {
  Video.call(this);
  this.format = "url";
  this.encoding = FileSystem.getFileExtension(a);
  this.data = a;
}
VideoStream.prototype = Object.create(Video.prototype);
"use strict";
function Texture(a, d, k, b, g, f, e, r, q, m) {
  this.source = "string" === typeof a ? new Image(a) : void 0 === a ? new Image : a;
  THREE.Texture.call(this, document.createElement("img"), d, k, b, g, f, e, r, q, m);
  var n = this;
  this.name = "texture";
  this.category = "Image";
  this.disposed = !1;
  this.format = this.source.hasTransparency() ? THREE.RGBAFormat : THREE.RGBFormat;
  this.image.src = this.source.data;
  this.image.onload = function() {
    n.needsUpdate = !0;
  };
  this.image.onerror = function() {
    console.log("nunuStudio: Failed to load image " + n.source.uuid + " data.");
    n.source.createSolidColor();
    n.image.src = n.source.data;
    n.needsUpdate = !0;
  };
  if ("gif" === this.source.encoding) {
    var c = function() {
      n.disposed || (n.needsUpdate = !0, requestAnimationFrame(c));
    };
    this.generateMipmaps = !1;
    this.minFilter = this.magFilter = THREE.LinearFilter;
    c();
  }
}
Texture.prototype = Object.create(THREE.Texture.prototype);
Texture.isTexture = !0;
Texture.prototype.dispose = function() {
  THREE.Texture.prototype.dispose.call(this);
  this.disposed = !0;
};
Texture.prototype.toJSON = function(a) {
  var d = THREE.Texture.prototype.toJSON.call(this, a);
  a = this.source.toJSON(a);
  d.image = a.uuid;
  return d;
};
"use strict";
function CanvasTexture(a, d, k, b, g, f, e, r, q, m, n) {
  THREE.Texture.call(this, document.createElement("canvas"), k, b, g, f, e, r, q, m, n);
  this.name = "canvas";
  this.category = "Canvas";
  this.format = THREE.RGBAFormat;
  Object.defineProperties(this, {width:{get:function() {
    return this.image.width;
  }, set:function(a) {
    this.image.width = a;
  }}, height:{get:function() {
    return this.image.height;
  }, set:function(a) {
    this.image.height = a;
  }}});
  this.width = void 0 !== a ? a : 1;
  this.height = void 0 !== d ? d : 1;
  this.context = this.image.getContext("2d");
}
CanvasTexture.prototype = Object.create(THREE.Texture.prototype);
CanvasTexture.prototype.constructor = CanvasTexture;
CanvasTexture.prototype.isCanvasTexture = !0;
CanvasTexture.prototype.placeholder = function() {
  this.context.fillStyle = "#000000";
  this.context.fillRect(0, 0, this.width, this.height);
  this.context.font = "Normal " + Math.round(this.width / 12) + "px Arial";
  this.context.textAlign = "center";
  this.context.fillStyle = "#FF0000";
  this.context.fillText("Canvas Texture", this.width / 2, this.height / 2);
  this.needsUpdate = !0;
};
CanvasTexture.prototype.clear = function(a) {
  void 0 === a ? this.context.clearRect(0, 0, width, height) : (this.context.fillStyle = a, this.context.fillRect(0, 0, this.width, this.height));
};
CanvasTexture.prototype.toJSON = function(a) {
  a = THREE.Texture.prototype.toJSON.call(this, a);
  a.width = this.width;
  a.height = this.height;
  return a;
};
"use strict";
function VideoTexture(a, d, k, b, g, f) {
  function e() {
    r.disposed || (r.image.readyState >= r.image.HAVE_CURRENT_DATA && (r.needsUpdate = !0), requestAnimationFrame(e));
  }
  THREE.Texture.call(this, document.createElement("video"), d, k, b, THREE.LinearFilter, THREE.LinearFilter, THREE.RGBFormat, g, f);
  this.generateMipmaps = this.disposed = !1;
  this.name = "video";
  this.category = "Video";
  this.loop = this.autoplay = !0;
  this.volume = this.playbackRate = 1;
  this.image.crossOrigin = "anonymous";
  this.image.autoplay = this.autoplay;
  this.image.playbackRate = this.playbackRate;
  this.image.loop = this.loop;
  this.image.volume = this.volume;
  this.video = null;
  this.setVideo(a);
  var r = this;
  e();
}
VideoTexture.prototype = Object.create(THREE.Texture.prototype);
VideoTexture.isVideoTexture = !0;
VideoTexture.prototype.setVideo = function(a) {
  null === a || void 0 === a ? (this.video = null, this.image.src = null) : ("string" === typeof a ? this.video = new Video(a) : a instanceof Video && (this.video = a), this.image.src = this.video.data);
};
VideoTexture.prototype.setTime = function(a) {
  this.image.currentTime = a;
};
VideoTexture.prototype.setLoop = function(a) {
  this.loop = a;
  this.image.loop = a;
};
VideoTexture.prototype.setVolume = function(a) {
  this.volume = 0 <= a && 1 >= a ? a : 0 <= a ? 1 : 0;
  this.image.volume = this.volume;
};
VideoTexture.prototype.setAutoPlay = function(a) {
  this.autoplay = a;
  this.image.autoplay = this.autoplay;
};
VideoTexture.prototype.setPlaybackRate = function(a) {
  this.playbackRate = a;
  this.image.playbackRate = a;
};
VideoTexture.prototype.pause = function() {
  this.image.paused || this.image.pause();
};
VideoTexture.prototype.play = function() {
  this.image.paused && this.image.play();
};
VideoTexture.prototype.dispose = function() {
  THREE.Texture.prototype.dispose.call(this);
  this.disposed = !0;
  this.image.pause();
  this.image.src = "";
  this.image.load();
};
VideoTexture.prototype.toJSON = function(a) {
  var d = THREE.Texture.prototype.toJSON.call(this, a);
  a = this.video.toJSON(a);
  d.video = a.uuid;
  d.loop = this.loop;
  d.autoplay = this.autoplay;
  d.playbackRate = this.playbackRate;
  d.volume = this.volume;
  return d;
};
"use strict";
function WebcamTexture(a, d, k, b, g) {
  function f() {
    e.readyState >= e.HAVE_CURRENT_DATA && (r.needsUpdate = !0);
    r.disposed || requestAnimationFrame(f);
  }
  var e = document.createElement("video");
  e.autoplay = !0;
  e.loop = !0;
  THREE.Texture.call(this, e, a, d, k, THREE.LinearFilter, THREE.LinearFilter, THREE.RGBFormat, b, g);
  var r = this;
  this.disposed = this.generateMipmaps = !1;
  this.name = "webcam";
  this.category = "Webcam";
  this.mode = WebcamTexture.USER;
  this.stream = null;
  this.connect();
  requestAnimationFrame(f);
}
WebcamTexture.USER = 21;
WebcamTexture.ENVIRONMENT = 22;
WebcamTexture.prototype = Object.create(THREE.Texture.prototype);
WebcamTexture.prototype.constructor = WebcamTexture;
WebcamTexture.isTexture = !0;
WebcamTexture.prototype.connect = function() {
  var a = {facingMode:this.mode === WebcamTexture.USER ? "user" : {exact:"environment"}}, d = this;
  void 0 !== navigator.webkitGetUserMedia && (navigator.getUserMedia = navigator.webkitGetUserMedia);
  navigator.mediaDevices && navigator.mediaDevices.getUserMedia ? navigator.mediaDevices.getUserMedia({video:a}).then(function(a) {
    d.stream = a;
    d.image.srcObject = a;
    d.image.play();
  }).catch(function(a) {
    console.warn("nunuStudio: No webcam available");
  }) : navigator.getUserMedia && navigator.getUserMedia({video:!0}, function(a) {
    d.stream = a;
    d.image.src = URL.createObjectURL(a);
  }, function(a) {
    console.warn("nunuStudio: No webcam available");
  });
};
WebcamTexture.prototype.disconnect = function() {
  if (null !== this.stream) {
    for (var a = this.stream.getTracks(), d = 0; d < a.length; d++) {
      a[d].stop();
    }
  }
};
WebcamTexture.prototype.dispose = function() {
  THREE.Texture.prototype.dispose.call(this);
  this.disconnect();
  this.disposed = !0;
  this.image.paused || this.image.pause();
};
WebcamTexture.prototype.toJSON = function(a) {
  a = THREE.Texture.prototype.toJSON.call(this, a);
  a.mode = this.mode;
  return a;
};
"use strict";
function CubeTexture(a, d, k, b, g, f, e, r, q, m) {
  void 0 === d && (d = THREE.CubeReflectionMapping);
  for (var n = [], c = 0; 6 > c; c++) {
    n.push(document.createElement("canvas"));
  }
  THREE.Texture.call(this, n, d, k, b, g, f, e, r, q, m);
  this.images = void 0 !== a ? a : [];
  this.size = 512;
  this.flipY = !1;
  this.mode = 6 === this.images.length ? CubeTexture.CUBE : CubeTexture.CROSS;
  0 < this.images.length && this.updateImages();
  this.name = "cubetexture";
  this.category = "Cube";
}
CubeTexture.prototype = Object.create(THREE.Texture.prototype);
CubeTexture.prototype.constructor = CubeTexture;
CubeTexture.prototype.isCubeTexture = !0;
CubeTexture.RIGHT = 0;
CubeTexture.LEFT = 1;
CubeTexture.TOP = 2;
CubeTexture.BOTTOM = 3;
CubeTexture.FRONT = 4;
CubeTexture.BACK = 5;
CubeTexture.CUBE = 20;
CubeTexture.CROSS = 21;
CubeTexture.EQUIRECTANGULAR = 22;
CubeTexture.prototype.setSize = function(a) {
  0 !== (a & a - 1) ? console.warn("nunuStudio: CubeTexture new size is not a power of two.") : this.size = a;
};
CubeTexture.prototype.setImages = function(a, d) {
  this.mode = void 0 !== d ? d : CubeTexture.CUBE;
  this.images = a;
};
CubeTexture.prototype.updateImages = function() {
  var a = this;
  if (this.mode === CubeTexture.CUBE) {
    for (var d = 0; d < this.images.length; d++) {
      "string" === typeof this.images[d] && (this.images[d] = new Image(this.images[d]));
      var k = document.createElement("img");
      k.crossOrigin = "anonymous";
      k.index = d;
      k.src = this.images[d].data;
      k.onload = function() {
        a.image[this.index].width = a.size;
        a.image[this.index].height = a.size;
        a.image[this.index].getContext("2d").drawImage(this, 0, 0, a.size, a.size);
        a.needsUpdate = !0;
      };
    }
  } else {
    if (this.mode === CubeTexture.CROSS) {
      for (d = 0; d < this.image.length; d++) {
        this.image[d].width = this.size, this.image[d].height = this.size;
      }
      k = document.createElement("img");
      k.src = this.images[0].data;
      k.onload = function() {
        var b = this.naturalWidth / 4, d = this.naturalHeight / 3;
        a.image[CubeTexture.LEFT].getContext("2d").drawImage(this, 0, d, b, d, 0, 0, a.size, a.size);
        a.image[CubeTexture.FRONT].getContext("2d").drawImage(this, b, d, b, d, 0, 0, a.size, a.size);
        a.image[CubeTexture.RIGHT].getContext("2d").drawImage(this, 2 * b, d, b, d, 0, 0, a.size, a.size);
        a.image[CubeTexture.BACK].getContext("2d").drawImage(this, 3 * b, d, b, d, 0, 0, a.size, a.size);
        a.image[CubeTexture.TOP].getContext("2d").drawImage(this, b, 0, b, d, 0, 0, a.size, a.size);
        a.image[CubeTexture.BOTTOM].getContext("2d").drawImage(this, b, 2 * d, b, d, 0, 0, a.size, a.size);
        a.needsUpdate = !0;
      };
    } else {
      if (this.mode === CubeTexture.EQUIRECTANGULAR) {
        for (d = 0; d < this.image.length; d++) {
          this.image[d].width = this.size, this.image[d].height = this.size;
        }
        k = document.createElement("img");
        k.src = this.images[0].data;
        k.onload = function() {
          var b = document.createElement("canvas");
          b.width = k.naturalWidth;
          b.height = k.naturalHeight;
          var d = b.getContext("2d");
          d.drawImage(k, 0, 0);
          b = d.getImageData(0, 0, b.width, b.height);
          for (d = 0; 6 > d; d++) {
            var f = CubeTexture.renderEquirectFace(b, d, Math.PI, a.size);
            a.image[d].getContext("2d").putImageData(f, 0, 0);
          }
          a.needsUpdate = !0;
        };
      }
    }
  }
};
CubeTexture.resampleBilinear = function(a, d, k, b, g) {
  var f = a.width, e = a.height;
  a = a.data;
  var r = THREE.Math.clamp(Math.floor(k), 0, f - 1), q = THREE.Math.clamp(Math.ceil(k), 0, f - 1);
  k -= r;
  var m = THREE.Math.clamp(Math.floor(b), 0, e - 1), n = THREE.Math.clamp(Math.ceil(b), 0, e - 1);
  b -= m;
  e = 4 * (m * f + r);
  m = 4 * (m * f + q);
  r = 4 * (n * f + r);
  f = 4 * (n * f + q);
  for (q = 0; 3 > q; q++) {
    d.data[g + q] = Math.ceil((a[e + q] * (1 - k) + a[m + q] * k) * (1 - b) + (a[r + q] * (1 - k) + a[f + q] * k) * b);
  }
};
CubeTexture.renderEquirectFace = function(a, d, k, b) {
  var g = new ImageData(b, b);
  d = CubeTexture.faces[d];
  for (var f = 0; f < b; f++) {
    for (var e = 0; e < b; e++) {
      var r = 4 * (e * b + f);
      g.data[r + 3] = 255;
      var q = d(2 * (f + .5) / b - 1, 2 * (e + .5) / b - 1), m = Math.sqrt(q.x * q.x + q.y * q.y + q.z * q.z), n = THREE.Math.euclideanModulo(Math.atan2(q.y, q.x) + k, 2 * Math.PI);
      CubeTexture.resampleBilinear(a, g, a.width * n / Math.PI / 2 - .5, a.height * Math.acos(q.z / m) / Math.PI - .5, r);
    }
  }
  return g;
};
CubeTexture.faces = [function(a, d) {
  return new THREE.Vector3(a, -1, -d);
}, function(a, d) {
  return new THREE.Vector3(-a, 1, -d);
}, function(a, d) {
  return new THREE.Vector3(-d, -a, 1);
}, function(a, d) {
  return new THREE.Vector3(d, -a, -1);
}, function(a, d) {
  return new THREE.Vector3(-1, -a, -d);
}, function(a, d) {
  return new THREE.Vector3(1, a, -d);
}];
CubeTexture.prototype.toJSON = function(a) {
  var d = THREE.Texture.prototype.toJSON.call(this, a);
  d.size = this.size;
  d.mode = this.mode;
  d.images = [];
  if (this.mode === CubeTexture.EQUIRECTANGULAR || this.mode === CubeTexture.CROSS) {
    var k = this.images[0].toJSON(a);
    d.images.push(k.uuid);
  } else {
    for (var b = 0; b < this.images.length; b++) {
      k = this.images[b].toJSON(a), d.images.push(k.uuid);
    }
  }
  return d;
};
"use strict";
function CompressedTexture(a, d, k, b, g, f, e, r, q, m, n, c) {
  THREE.Texture.call(this, null, f, e, r, q, m, b, g, n, c);
  this.category = "Compressed";
  this.image = {width:d, height:k};
  this.mipmaps = a;
  this.generateMipmaps = this.flipY = this.isCubeTexture = !1;
}
CompressedTexture.prototype = Object.create(Texture.prototype);
CompressedTexture.prototype.constructor = CompressedTexture;
CompressedTexture.prototype.isCompressedTexture = !0;
CompressedTexture.prototype.toJSON = function(a) {
  a = THREE.Texture.prototype.toJSON.call(this, a);
  if (a.isCubeTexture = this.isCubeTexture) {
    a.image = [];
    for (var d = 0; d < this.image.length; d++) {
      for (var k = {mipmaps:[], format:this.image[d].format, width:this.image[d].width, height:this.image[d].height}, b = 0; b < this.image[d].mipmaps.length; b++) {
        k.mipmaps.push({width:this.image[d].mipmaps[b].width, height:this.image[d].mipmaps[b].height, data:this.image[d].mipmaps[b].data});
      }
      a.image.push(k);
    }
  } else {
    for (a.mipmaps = [], a.width = this.image.width, a.height = this.image.height, b = 0; b < this.mipmaps.length; b++) {
      a.mipmaps.push({width:this.mipmaps[b].width, height:this.mipmaps[b].height, data:this.mipmaps[b].data});
    }
  }
  return a;
};
"use strict";
function SpriteSheetTexture(a, d, k, b, g, f, e) {
  function r() {
    q.disposed || (q.step(), setTimeout(r, 1E3 * q.animationSpeed));
  }
  "string" === typeof a ? this.source = new Image(a) : a instanceof Image && (this.source = a);
  THREE.Texture.call(this, document.createElement("img"), g, THREE.RepeatWrapping, THREE.RepeatWrapping, THREE.LinearFilter, THREE.LinearFilter, THREE.RGBFormat, f, e);
  this.name = "animation";
  this.category = "SpriteSheet";
  this.disposed = !1;
  this.format = this.source.hasTransparency() ? THREE.RGBAFormat : THREE.RGBFormat;
  this.repeat.set(1 / d, 1 / k);
  this.loop = !0;
  this.animationSpeed = .1;
  this._totalFrames = b;
  this._endFrame = this._beginFrame = 0;
  this._framesHorizontal = d;
  this._framesVertical = k;
  var q = this;
  Object.defineProperties(this, {framesHorizontal:{get:function() {
    return this._framesHorizontal;
  }, set:function(a) {
    this._framesHorizontal = a;
    this.repeat.x = 1 / a;
    this.totalFrames = this._framesHorizontal * this._framesVertical;
  }}, framesVertical:{get:function() {
    return this._framesVertical;
  }, set:function(a) {
    this._framesVertical = a;
    this.repeat.y = 1 / a;
    this.totalFrames = this._framesHorizontal * this._framesVertical;
  }}, endFrame:{get:function() {
    return this._endFrame;
  }, set:function(a) {
    a > this._totalFrames && (a = this._totalFrames);
    this._endFrame = a;
  }}, beginFrame:{get:function() {
    return this._beginFrame;
  }, set:function(a) {
    0 > a && (a = 0);
    this._beginFrame = this.currentFrame = a;
  }}, totalFrames:{get:function() {
    return this._totalFrames;
  }, set:function(a) {
    this._beginFrame = 0;
    this._totalFrames = this._endFrame = a;
  }}});
  this.image.crossOrigin = "anonymous";
  this.image.src = this.source.data;
  this.image.onload = function() {
    q.needsUpdate = !0;
  };
  this.currentFrame = 0;
  r();
}
SpriteSheetTexture.prototype = Object.create(THREE.Texture.prototype);
SpriteSheetTexture.isTexture = !0;
SpriteSheetTexture.prototype.step = function() {
  this.currentFrame++;
  this.currentFrame >= this._endFrame && (this.currentFrame = this._beginFrame);
  this.offset.x = this.currentFrame % this.framesHorizontal / this.framesHorizontal;
  this.offset.y = 1 - this.repeat.y - Math.floor(this.currentFrame / this.framesHorizontal) / this.framesVertical;
};
SpriteSheetTexture.prototype.setAnimationSpeed = function(a) {
  this.animationSpeed = a;
};
SpriteSheetTexture.prototype.setFrameGrid = function(a, d) {
  this._framesHorizontal = a;
  this._framesVertical = d;
  this._totalFrames = a * d;
  this.repeat.set(1 / a, 1 / d);
};
SpriteSheetTexture.prototype.setAnimationFrames = function(a, d) {
  this.beginFrame = a;
  this.endFrame = d;
};
SpriteSheetTexture.prototype.dispose = function() {
  THREE.Texture.prototype.dispose.call(this);
  this.disposed = !0;
};
SpriteSheetTexture.prototype.toJSON = function(a) {
  var d = THREE.Texture.prototype.toJSON.call(this, a);
  a = this.source.toJSON(a);
  d.image = a.uuid;
  d.loop = this.loop;
  d.animationSpeed = this.animationSpeed;
  d.framesHorizontal = this._framesHorizontal;
  d.framesVertical = this._framesVertical;
  d.totalFrames = this._totalFrames;
  d.beginFrame = this._beginFrame;
  d.endFrame = this._endFrame;
  return d;
};
"use strict";
function FontLoader(a) {
  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
}
FontLoader.prototype.load = function(a, d, k, b) {
  (new THREE.FileLoader(this.manager)).load(a, function(a) {
    d(new Font(JSON.parse(a)));
  }, k, b);
};
FontLoader.prototype.parse = function(a) {
  if (void 0 !== a.data) {
    var d = new Font;
    d.name = a.name;
    d.uuid = a.uuid;
    d.encoding = a.encoding;
    void 0 !== a.reversed && (d.reversed = a.reversed);
    "arraybuffer" === a.format ? (d.format = a.format, d.data = void 0 !== a.data.toArrayBuffer ? a.data.toArrayBuffer() : a.data, d.loadTTF()) : "base64" === a.format ? (d.format = "arraybuffer", d.data = ArraybufferUtils.fromBase64(a.data), d.loadTTF()) : (d.format = a.format, d.data = a.data, d.font = a.data);
    return d;
  }
  return new Font(a);
};
"use strict";
function ImageLoader(a) {
  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
  this.path = "";
  this.crossOrigin = "Anonymous";
}
ImageLoader.prototype.setCrossOrigin = function(a) {
  this.crossOrigin = a;
  return this;
};
ImageLoader.prototype.setPath = function(a) {
  this.path = a;
  return this;
};
ImageLoader.prototype.loadJSON = function(a, d, k, b) {
  var g = this;
  (new THREE.FileLoader(this.manager)).load(a, function(a) {
    d(g.parse(JSON.parse(a)));
  }, k, b);
};
ImageLoader.prototype.parse = function(a) {
  var d = new Image(void 0 !== a.data.toArrayBuffer ? a.data.toArrayBuffer() : a.data, a.encoding);
  d.name = a.name;
  d.uuid = a.uuid;
  void 0 !== a.width && (d.width = a.width, d.height = a.height);
  return d;
};
"use strict";
function VideoLoader(a) {
  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
}
VideoLoader.prototype.load = function(a, d, k, b) {
  var g = this;
  (new THREE.FileLoader(this.manager)).load(a, function(a) {
    d(g.parse(JSON.parse(a)));
  }, k, b);
};
VideoLoader.prototype.parse = function(a) {
  var d = new Video(void 0 !== a.data.toArrayBuffer ? a.data.toArrayBuffer() : a.data, a.encoding);
  d.name = a.name;
  d.uuid = a.uuid;
  return d;
};
"use strict";
function AudioLoader(a) {
  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
}
AudioLoader.prototype.load = function(a, d, k, b) {
  (new THREE.FileLoader(this.manager)).load(a, function(a) {
    d(self.parse(JSON.parse(a)));
  }, k, b);
};
AudioLoader.prototype.parse = function(a) {
  var d = new Audio;
  d.name = a.name;
  d.uuid = a.uuid;
  d.encoding = a.encoding;
  "base64" === a.format ? (d.format = "arraybuffer", d.data = ArraybufferUtils.fromBase64(a.data)) : "arraybuffer" === a.format ? (d.format = a.format, d.data = void 0 !== a.data.toArrayBuffer ? a.data.toArrayBuffer() : a.data) : (d.format = a.format, d.data = a.data);
  return d;
};
"use strict";
function MaterialLoader(a) {
  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
  this.textures = {};
}
MaterialLoader.prototype.load = function(a, d, k, b) {
  var g = this;
  (new FileLoader(g.manager)).load(a, function(a) {
    d(g.parse(JSON.parse(a)));
  }, k, b);
};
MaterialLoader.prototype.setTextures = function(a) {
  this.textures = a;
};
MaterialLoader.prototype.parse = function(a) {
  var d = THREE.MaterialLoader.prototype.parse.call(this, a);
  void 0 !== a.specular && (void 0 === d.specular && (d.specular = new THREE.Color), d.specular.setHex(a.specular));
  void 0 !== a.shading && (d.flatShading = 1 === a.shading);
  if (void 0 !== a.normalScale) {
    var k = a.normalScale;
    !1 === Array.isArray(k) && (k = [k, k]);
    d.normalScale = (new Vector2).fromArray(k);
  }
  if (void 0 !== a.materials) {
    k = 0;
    for (var b = a.materials.length; k < b; k++) {
      d.materials.push(this.parse(a.materials[k]));
    }
  }
  return d;
};
"use strict";
function TextureLoader(a) {
  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
  this.path = "";
  this.crossOrigin = "anonymous";
  this.images = [];
  this.videos = [];
  this.fonts = [];
}
THREE._TextureLoader = THREE.TextureLoader;
THREE.TextureLoader = TextureLoader;
TextureLoader.prototype.setCrossOrigin = function(a) {
  this.crossOrigin = a;
  return this;
};
TextureLoader.prototype.setPath = function(a) {
  this.path = a;
  return this;
};
TextureLoader.prototype.setImages = function(a) {
  this.images = a;
  return this;
};
TextureLoader.prototype.setVideos = function(a) {
  this.videos = a;
  return this;
};
TextureLoader.prototype.setFonts = function(a) {
  this.fonts = a;
  return this;
};
TextureLoader.prototype.load = function(a, d, k, b) {
  try {
    var g = new Texture(this.path + a);
    void 0 !== d && d(g);
    return g;
  } catch (f) {
    return void 0 !== b && b(f), console.warn("nunuStudio: Texture not found", f), new Texture;
  }
};
TextureLoader.prototype.loadJSON = function(a, d, k, b) {
  var g = this;
  (new THREE.FileLoader(this.manager)).load(a, function(a) {
    g.parse(JSON.parse(a), d);
  }, k, b);
};
TextureLoader.prototype.parse = function(a, d) {
  var k = a.category;
  if ("Video" === k) {
    void 0 === a.video && console.warn("TextureLoader: No video specified for", a.uuid), void 0 === this.videos[a.video] && console.warn("TextureLoader: Undefined video", a.video), k = new VideoTexture(this.videos[a.video]), k.setLoop(a.loop), k.setAutoPlay(a.autoplay), k.setPlaybackRate(a.playbackRate), k.setVolume(a.volume);
  } else {
    if ("Webcam" === k) {
      k = new WebcamTexture, void 0 !== a.mode && (k.mode = a.mode);
    } else {
      if ("Compressed" === k) {
        if (a.isCubeTexture) {
          k = new CompressedTexture;
          k.image = [];
          k.isCubeTexture = !0;
          for (var b = 0; b < a.image.length; b++) {
            for (var g = 0; g < a.image[b].mipmaps.length; g++) {
              void 0 !== a.image[b].mipmaps[g].data.toArrayBuffer && (a.image[b].mipmaps[g].data = new Uint8Array(a.image[b].mipmaps[g].data.toArrayBuffer()));
            }
            k.image.push(a.image[b]);
          }
        } else {
          for (g = 0; g < a.mipmaps.length; g++) {
            void 0 !== a.mipmaps[g].data.toArrayBuffer && (a.mipmaps[g].data = new Uint8Array(a.mipmaps[g].data.toArrayBuffer()));
          }
          k = new CompressedTexture(a.mipmaps, a.width, a.height);
        }
      } else {
        if ("Cube" === k) {
          b = [];
          for (g = 0; g < a.images.length; g++) {
            void 0 === this.images[a.images[g]] && console.warn("nunuStudio: TextureLoader, undefined image", a.images[g]), b.push(this.images[a.images[g]]);
          }
          k = new CubeTexture;
          k.setImages(b, a.mode);
          k.setSize(a.size);
          k.updateImages();
        } else {
          "Canvas" === k ? k = new CanvasTexture(a.width, a.height) : (void 0 === a.image && console.warn("nunuStudio: TextureLoader, no image specified for", a.uuid), void 0 === this.images[a.image] && console.warn("nunuStudio: TextureLoader, undefined image", a.image), "SpriteSheet" === k ? (k = new SpriteSheetTexture(this.images[a.image], a.framesHorizontal, a.framesVertical, a.totalFrames), k.loop = a.loop, k.animationSpeed = a.animationSpeed, k.beginFrame = a.beginFrame, k.endFrame = a.endFrame) : 
          k = new Texture(this.images[a.image]));
        }
      }
    }
  }
  k.needsUpdate = !0;
  k.uuid = a.uuid;
  k.name = a.name;
  k.mapping = a.mapping;
  k.repeat.set(a.repeat[0], a.repeat[1]);
  k.offset.set(a.offset[0], a.offset[1]);
  void 0 !== a.center && k.center.set(a.center[0], a.center[1]);
  void 0 !== a.rotation && (k.rotation = a.rotation);
  k.wrapS = a.wrap[0];
  k.wrapT = a.wrap[1];
  void 0 !== a.format && (k.format = a.format);
  void 0 !== a.type && (k.type = a.type);
  void 0 !== a.encoding && (k.encoding = a.encoding);
  k.minFilter = a.minFilter;
  k.magFilter = a.magFilter;
  k.anisotropy = a.anisotropy;
  k.flipY = a.flipY;
  void 0 !== a.premultiplyAlpha && (k.premultiplyAlpha = a.premultiplyAlpha);
  void 0 !== a.unpackAlignment && (k.unpackAlignment = a.unpackAlignment);
  void 0 !== d && d(k);
  return k;
};
"use strict";
function GeometryLoader(a) {
  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
  this.shapes = {};
}
GeometryLoader.prototype.setShapes = function(a) {
  this.shapes = a;
  return this;
};
GeometryLoader.prototype.load = function(a, d, k, b) {
  (new THREE.FileLoader(this.manager)).load(a, function(a) {
    d(self.parse(JSON.parse(a)));
  }, k, b);
};
GeometryLoader.prototype.parse = function(a) {
  var d = null;
  if ("CapsuleBufferGeometry" === a.type) {
    d = new CapsuleBufferGeometry(a.radiusTop, a.radiusBottom, a.height, a.radialSegments, a.heightSegments, a.capsTopSegments, a.capsBottomSegments, a.thetaStart, a.thetaLength);
  } else {
    if ("Geometry" === a.type) {
      d = (new LegacyGeometryLoader).parse(a.data).geometry;
    } else {
      var k = THREE.ObjectLoader.prototype.parseGeometries([a], this.shapes), b;
      for (b in k) {
        d = k[b];
        break;
      }
    }
  }
  console.log("GeometryLoader.prototype.parse", a, d);
  d.uuid = a.uuid;
  d.name = void 0 !== a.name ? a.name : "geometry";
  return d;
};
"use strict";
function LegacyGeometryLoader(a) {
  this.manager = void 0 !== a ? a : DefaultLoadingManager;
  this.withCredentials = !1;
}
LegacyGeometryLoader.prototype.load = function(a, d, k, b) {
  var g = this, f = void 0 === this.path ? LoaderUtils.extractUrlBase(a) : this.path, e = new THREE.FileLoader(this.manager);
  e.setPath(this.path);
  e.setWithCredentials(this.withCredentials);
  e.load(a, function(b) {
    b = JSON.parse(b);
    var e = b.metadata;
    if (void 0 !== e && (e = e.type, void 0 !== e && "object" === e.toLowerCase())) {
      console.error("nunuStudio: LegacyGeometryLoader: " + a + " should be loaded with ObjectLoader instead.");
      return;
    }
    b = g.parse(b, f);
    d(b.geometry, b.materials);
  }, k, b);
};
LegacyGeometryLoader.prototype.setPath = function(a) {
  this.path = a;
  return this;
};
LegacyGeometryLoader.prototype.setResourcePath = function(a) {
  this.resourcePath = a;
  return this;
};
LegacyGeometryLoader.prototype.setCrossOrigin = function(a) {
  this.crossOrigin = a;
  return this;
};
LegacyGeometryLoader.prototype.parse = function() {
  return function(a, d) {
    void 0 !== a.data && (a = a.data);
    a.scale = void 0 !== a.scale ? 1 / a.scale : 1;
    var k = new THREE.Geometry, b = a, g, f, e, r = b.faces;
    var q = b.vertices;
    var m = b.normals, n = b.colors;
    var c = b.scale;
    var h = 0;
    if (void 0 !== b.uvs) {
      for (g = 0; g < b.uvs.length; g++) {
        b.uvs[g].length && h++;
      }
      for (g = 0; g < h; g++) {
        k.faceVertexUvs[g] = [];
      }
    }
    var t = 0;
    for (e = q.length; t < e;) {
      g = new THREE.Vector3, g.x = q[t++] * c, g.y = q[t++] * c, g.z = q[t++] * c, k.vertices.push(g);
    }
    t = 0;
    for (e = r.length; t < e;) {
      q = r[t++];
      var z = q & 1;
      var y = q & 2;
      g = q & 8;
      var x = q & 16;
      var p = q & 32;
      c = q & 64;
      q &= 128;
      if (z) {
        z = new THREE.Face3;
        z.a = r[t];
        z.b = r[t + 1];
        z.c = r[t + 3];
        var v = new THREE.Face3;
        v.a = r[t + 1];
        v.b = r[t + 2];
        v.c = r[t + 3];
        t += 4;
        y && (y = r[t++], z.materialIndex = y, v.materialIndex = y);
        y = k.faces.length;
        if (g) {
          for (g = 0; g < h; g++) {
            var w = b.uvs[g];
            k.faceVertexUvs[g][y] = [];
            k.faceVertexUvs[g][y + 1] = [];
            for (f = 0; 4 > f; f++) {
              var C = r[t++];
              var A = w[2 * C];
              C = w[2 * C + 1];
              A = new THREE.Vector2(A, C);
              2 !== f && k.faceVertexUvs[g][y].push(A);
              0 !== f && k.faceVertexUvs[g][y + 1].push(A);
            }
          }
        }
        x && (x = 3 * r[t++], z.normal.set(m[x++], m[x++], m[x]), v.normal.copy(z.normal));
        if (p) {
          for (g = 0; 4 > g; g++) {
            x = 3 * r[t++], p = new THREE.Vector3(m[x++], m[x++], m[x]), 2 !== g && z.vertexNormals.push(p), 0 !== g && v.vertexNormals.push(p);
          }
        }
        c && (c = r[t++], c = n[c], z.color.setHex(c), v.color.setHex(c));
        if (q) {
          for (g = 0; 4 > g; g++) {
            c = r[t++], c = n[c], 2 !== g && z.vertexColors.push(new Color(c)), 0 !== g && v.vertexColors.push(new Color(c));
          }
        }
        k.faces.push(z);
        k.faces.push(v);
      } else {
        z = new THREE.Face3;
        z.a = r[t++];
        z.b = r[t++];
        z.c = r[t++];
        y && (y = r[t++], z.materialIndex = y);
        y = k.faces.length;
        if (g) {
          for (g = 0; g < h; g++) {
            for (w = b.uvs[g], k.faceVertexUvs[g][y] = [], f = 0; 3 > f; f++) {
              C = r[t++], A = w[2 * C], C = w[2 * C + 1], A = new THREE.Vector2(A, C), k.faceVertexUvs[g][y].push(A);
            }
          }
        }
        x && (x = 3 * r[t++], z.normal.set(m[x++], m[x++], m[x]));
        if (p) {
          for (g = 0; 3 > g; g++) {
            x = 3 * r[t++], p = new THREE.Vector3(m[x++], m[x++], m[x]), z.vertexNormals.push(p);
          }
        }
        c && (c = r[t++], z.color.setHex(n[c]));
        if (q) {
          for (g = 0; 3 > g; g++) {
            c = r[t++], z.vertexColors.push(new Color(n[c]));
          }
        }
        k.faces.push(z);
      }
    }
    b = a;
    t = void 0 !== b.influencesPerVertex ? b.influencesPerVertex : 2;
    if (b.skinWeights) {
      for (e = 0, r = b.skinWeights.length; e < r; e += t) {
        k.skinWeights.push(new Vector4(b.skinWeights[e], 1 < t ? b.skinWeights[e + 1] : 0, 2 < t ? b.skinWeights[e + 2] : 0, 3 < t ? b.skinWeights[e + 3] : 0));
      }
    }
    if (b.skinIndices) {
      for (e = 0, r = b.skinIndices.length; e < r; e += t) {
        k.skinIndices.push(new Vector4(b.skinIndices[e], 1 < t ? b.skinIndices[e + 1] : 0, 2 < t ? b.skinIndices[e + 2] : 0, 3 < t ? b.skinIndices[e + 3] : 0));
      }
    }
    k.bones = b.bones;
    k.bones && 0 < k.bones.length && (k.skinWeights.length !== k.skinIndices.length || k.skinIndices.length !== k.vertices.length) && console.warn("When skinning, number of vertices (" + k.vertices.length + "), skinIndices (" + k.skinIndices.length + "), and skinWeights (" + k.skinWeights.length + ") should match.");
    e = a;
    r = e.scale;
    if (void 0 !== e.morphTargets) {
      for (b = 0, t = e.morphTargets.length; b < t; b++) {
        for (k.morphTargets[b] = {}, k.morphTargets[b].name = e.morphTargets[b].name, k.morphTargets[b].vertices = [], m = k.morphTargets[b].vertices, n = e.morphTargets[b].vertices, h = 0, q = n.length; h < q; h += 3) {
          c = new THREE.Vector3, c.x = n[h] * r, c.y = n[h + 1] * r, c.z = n[h + 2] * r, m.push(c);
        }
      }
    }
    if (void 0 !== e.morphColors && 0 < e.morphColors.length) {
      for (r = k.faces, e = e.morphColors[0].colors, b = 0, t = r.length; b < t; b++) {
        r[b].color.fromArray(e, 3 * b);
      }
    }
    e = a;
    b = [];
    t = [];
    void 0 !== e.animation && t.push(e.animation);
    void 0 !== e.animations && (e.animations.length ? t = t.concat(e.animations) : t.push(e.animations));
    for (e = 0; e < t.length; e++) {
      (r = AnimationClip.parseAnimation(t[e], k.bones)) && b.push(r);
    }
    k.morphTargets && (t = AnimationClip.CreateClipsFromMorphTargetSequences(k.morphTargets, 10), b = b.concat(t));
    0 < b.length && (k.animations = b);
    k.computeFaceNormals();
    k.computeBoundingSphere();
    if (void 0 === a.materials || 0 === a.materials.length) {
      return {geometry:k};
    }
    a = Loader.prototype.initMaterials(a.materials, this.resourcePath || d, this.crossOrigin);
    return {geometry:k, materials:a};
  };
}();
"use strict";
function ObjectLoader(a) {
  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
  this.texturePath = "";
}
ObjectLoader.prototype.load = function(a, d, k, b) {
  "" === this.texturePath && (this.texturePath = a.substring(0, a.lastIndexOf("/") + 1));
  var g = this;
  (new THREE.FileLoader(this.manager)).load(a, function(a) {
    g.parse(JSON.parse(a), d);
  }, k, b);
};
ObjectLoader.prototype.parse = function(a, d) {
  var k = this.parseResources(a.resources), b = this.parseShape(a.shapes), g = this.parseGeometries(a.geometries, b), f = this.parseImages(a.images), e = this.parseVideos(a.videos), r = this.parseAudio(a.audio), q = this.parseFonts(a.fonts), m = this.parseTextures(a.textures, f, e), n = this.parseMaterials(a.materials, m);
  k = this.parseObject(a.object, g, n, m, r, q, k, f, e, b, c);
  if (a.skeletons) {
    var c = this.parseSkeletons(a.skeletons, k);
    this.bindSkeletons(k, c);
  }
  a.animations && (k.animations = this.parseAnimations(a.animations));
  void 0 !== a.images && 0 !== a.images.length || void 0 === d || d(k);
  return k;
};
ObjectLoader.prototype.setTexturePath = function(a) {
  this.texturePath = a;
};
ObjectLoader.prototype.setCrossOrigin = function(a) {
  this.crossOrigin = a;
};
ObjectLoader.prototype.parseResources = function(a) {
  var d = [];
  if (void 0 !== a) {
    for (var k in a) {
      var b = new TextFile(a[k].data, a[k].encoding);
      b.format = a[k].format;
      b.name = a[k].name;
      b.uuid = a[k].uuid;
      d[b.uuid] = b;
    }
  }
  return d;
};
ObjectLoader.prototype.parseShape = function(a) {
  var d = {};
  if (void 0 !== a) {
    for (var k = 0, b = a.length; k < b; k++) {
      var g = (new Shape).fromJSON(a[k]);
      d[g.uuid] = g;
    }
  }
  return d;
};
ObjectLoader.prototype.parseGeometries = function(a, d) {
  var k = new GeometryLoader;
  k.setShapes(d);
  d = [];
  if (void 0 !== a) {
    for (var b = 0; b < a.length; b++) {
      d[a[b].uuid] = k.parse(a[b]);
    }
  }
  return d;
};
ObjectLoader.prototype.parseMaterials = function(a, d) {
  var k = [], b = new MaterialLoader;
  b.setTextures(d);
  if (void 0 !== a) {
    for (var g in a) {
      k[a[g].uuid] = b.parse(a[g]);
    }
  }
  return k;
};
ObjectLoader.prototype.parseAnimations = function(a) {
  for (var d = [], k = 0; k < a.length; k++) {
    var b = THREE.AnimationClip.parse(a[k]);
    void 0 !== a[k].uuid && (b.uuid = a[k].uuid);
    d.push();
  }
  return d;
};
ObjectLoader.prototype.parseImages = function(a) {
  var d = new ImageLoader, k = [];
  if (void 0 !== a) {
    for (var b in a) {
      k[a[b].uuid] = d.parse(a[b]);
    }
  }
  return k;
};
ObjectLoader.prototype.parseVideos = function(a) {
  var d = new VideoLoader, k = [];
  if (void 0 !== a) {
    for (var b in a) {
      k[a[b].uuid] = d.parse(a[b]);
    }
  }
  return k;
};
ObjectLoader.prototype.parseAudio = function(a) {
  var d = new AudioLoader, k = [];
  if (void 0 !== a) {
    for (var b in a) {
      k[a[b].uuid] = d.parse(a[b]);
    }
  }
  return k;
};
ObjectLoader.prototype.parseFonts = function(a) {
  var d = new FontLoader, k = [];
  if (void 0 !== a) {
    for (var b in a) {
      k[a[b].uuid] = d.parse(a[b]);
    }
  }
  return k;
};
ObjectLoader.prototype.parseTextures = function(a, d, k) {
  var b = [], g = new TextureLoader;
  g.setImages(d);
  g.setVideos(k);
  if (void 0 !== a) {
    for (var f in a) {
      b[a[f].uuid] = g.parse(a[f]);
    }
  }
  return b;
};
ObjectLoader.prototype.parseSkeletons = function(a, d) {
  var k = {};
  if (void 0 === a) {
    return k;
  }
  for (var b = 0; b < a.length; b++) {
    var g = a[b], f = g.uuid, e = g.bones;
    g = g.boneInverses;
    for (var r = [], q = [], m = 0, n = e.length; m < n; m++) {
      var c = d.getObjectByProperty("uuid", e[m]);
      void 0 === c && (console.warn("THREE.ObjectLoader: Not found Bone whose uuid is " + e[m]), c = new THREE.Bone);
      r.push(c);
      q.push((new THREE.Matrix4).fromArray(g[m]));
    }
    k[f] = new Skeleton(r, q);
  }
  return k;
};
ObjectLoader.prototype.bindSkeletons = function(a, d) {
  0 !== Object.keys(d).length && a.traverse(function(a) {
    if (!0 === a.isSkinnedMesh && void 0 !== a.skeletonUUID) {
      var b = d[a.skeletonUUID];
      void 0 === b ? console.warn("THREE.ObjectLoader: Not found Skeleton whose uuid is " + a.skeletonUUID) : a.bind(b, a.bindMatrix);
      delete a.skeletonUUID;
    }
  });
};
ObjectLoader.prototype.parseObject = function(a, d, k, b, g, f, e, r, q, m, n) {
  function c(a) {
    void 0 === b[a] && console.warn("ObjectLoader: Undefined texture", a);
    return b[a];
  }
  function h(a) {
    void 0 === d[a] && console.warn("ObjectLoader: Undefined geometry", a);
    return d[a];
  }
  function t(a) {
    if (a instanceof Array) {
      for (var b = [], c = 0; c < a.length; c++) {
        b.push(k[a[c]]);
      }
      return b;
    }
    void 0 === k[a] && console.warn("ObjectLoader: Undefined material", a);
    return k[a];
  }
  function z(a) {
    void 0 === f[a] && console.warn("ObjectLoader: Undefined font", a);
    return f[a];
  }
  function y(a) {
    void 0 === g[a] && console.warn("ObjectLoader: Undefined audio", a);
    return g[a];
  }
  try {
    switch(a.type) {
      case "SpineAnimation":
        for (var x = 0; x < a.textures.length; x++) {
          a.textures[x].texture = c(a.textures[x].texture);
        }
        var p = new SpineAnimation(a.json, a.atlas, "", a.textures);
        void 0 !== a.animation && (p.animation = a.animation, p.track = a.track, p.loop = a.loop);
        void 0 !== a.skin && (p.skin = a.skin);
        break;
      case "Audio":
        p = new AudioEmitter(y(a.audio));
        p.autoplay = a.autoplay;
        p.startTime = a.startTime;
        p.playbackRate = a.playbackRate;
        p.loop = void 0 !== a.source ? a.source.loop : a.loop;
        void 0 !== a.volume && (p.volume = a.volume);
        break;
      case "PositionalAudio":
        p = new PositionalAudio(y(a.audio));
        p.autoplay = a.autoplay;
        p.startTime = a.startTime;
        p.playbackRate = a.playbackRate;
        p.loop = void 0 !== a.source ? a.source.loop : a.loop;
        void 0 !== a.volume && (p.volume = a.volume);
        p.distanceModel = a.distanceModel;
        p.panningModel = a.panningModel;
        break;
      case "Physics":
        p = new PhysicsObject;
        void 0 !== a.mode && (p.mode = a.mode);
        p.body.type = a.body.type;
        p.body.mass = a.body.mass;
        p.body.linearDamping = a.body.linearDamping;
        p.body.angularDamping = a.body.angularDamping;
        p.body.allowSleep = a.body.allowSleep;
        p.body.sleepSpeedLimit = a.body.sleepSpeedLimit;
        p.body.sleepTimeLimit = a.body.sleepTimeLimit;
        p.body.collisionFilterGroup = a.body.collisionFilterGroup;
        p.body.collisionFilterMask = a.body.collisionFilterMask;
        p.body.fixedRotation = a.body.fixedRotation;
        m = a.body.shapes;
        for (x = 0; x < m.length; x++) {
          var v = m[x];
          v.type === CANNON.Shape.types.SPHERE ? p.body.addShape(new CANNON.Sphere(v.radius)) : v.type === CANNON.Shape.types.BOX ? p.body.addShape(new CANNON.Box(new CANNON.Vec3(v.halfExtents.x, v.halfExtents.y, v.halfExtents.z))) : v.type === CANNON.Shape.types.PARTICLE ? p.body.addShape(new CANNON.Particle) : v.type === CANNON.Shape.types.PLANE ? p.body.addShape(new CANNON.Plane) : v.type === CANNON.Shape.types.CONVEXPOLYHEDRON && p.body.addShape(new CANNON.ConvexPolyhedron(v.vertices, v.faces));
        }
        break;
      case "ParticleEmiter":
        v = function(a) {
          return Array.isArray(a) ? (new THREE.Vector3).fromArray(a) : new THREE.Vector3(a.x, a.y, a.z);
        };
        if (void 0 !== a.group) {
          var w = a.group;
          w.texture.value = c(w.texture.value);
          w.texture.frames = (new THREE.Vector2).fromArray(w.texture.frames || [1, 1]);
        }
        if (void 0 !== a.emitter) {
          var C = a.emitter;
          C.position.value = v(C.position.value);
          C.position.spread = v(C.position.spread);
          C.velocity.value = v(C.velocity.value);
          C.velocity.spread = v(C.velocity.spread);
          C.acceleration.value = v(C.acceleration.value);
          C.acceleration.spread = v(C.acceleration.spread);
          for (x = 0; x < C.color.value.length; x++) {
            C.color.value[x] = new THREE.Color(C.color.value[x]), C.color.spread[x] = v(C.color.spread[x]);
          }
        }
        p = new ParticleEmitter(a.group, a.emitter);
        break;
      case "LensFlare":
        p = new LensFlare;
        void 0 !== a.lensFlares && (a.elements = a.lensFlares);
        for (x = 0; x < a.elements.length; x++) {
          p.addFlare(c(a.elements[x].texture), a.elements[x].size, a.elements[x].distance, new THREE.Color(a.elements[x].color));
        }
        break;
      case "TextMesh":
      case "Text3D":
        p = new TextMesh(a.text, t(a.material), z(a.font), a.height, a.bevel, a.bevelThickness, a.bevelSize, a.size, a.curveSegments, a.extruded);
        break;
      case "Program":
        p = new Program(a.name);
        p.description = a.description;
        p.author = a.author;
        p.version = a.version;
        p.vr = a.vr;
        p.vrScale = a.vrScale;
        void 0 !== a.rendererConfig ? p.rendererConfig.fromJSON(a.rendererConfig) : (p.rendererConfig.antialiasing = a.antialiasing, p.rendererConfig.shadows = a.shadows, p.rendererConfig.shadowsType = a.shadowsType, p.rendererConfig.toneMapping = a.toneMapping, p.rendererConfig.toneMappingWhitePoint = a.toneMappingWhitePoint, p.rendererConfig.toneMappingExposure = a.toneMappingExposure);
        void 0 !== a.lockPointer && (p.lockPointer = a.lockPointer);
        void 0 !== a.defaultScene && (p.defaultScene = a.defaultScene);
        void 0 !== a.handlePixelRatio && (p.handlePixelRatio = a.handlePixelRatio);
        break;
      case "LeapDevice":
        p = new LeapMotion;
        p.mode = a.mode;
        p.useArm = a.useArm;
        void 0 !== a.debugModel && (p.debugModel = a.debugModel);
        void 0 !== a.gesturesEnabled && (p.gesturesEnabled = a.gesturesEnabled);
        void 0 !== a.posesEnabled && (p.posesEnabled = a.posesEnabled);
        break;
      case "Kinect":
        p = new KinectDevice;
        void 0 !== a.debugModel && (p.debugModel = a.debugModel);
        break;
      case "Sky":
        p = new Sky(a.autoUpdate, a.dayTime, a.sunDistance, a.time);
        void 0 !== a.sun && (p.sun.shadow.fromJSON(a.sun.shadow), void 0 !== a.sun.castShadow && (p.sun.castShadow = a.sun.castShadow));
        if (void 0 !== a.colorTop) {
          for (p.colorTop = [], x = 0; x < a.colorTop.length; x++) {
            p.colorTop.push(new THREE.Color(a.colorTop[x]));
          }
        }
        if (void 0 !== a.colorBottom) {
          for (p.colorBottom = [], x = 0; x < a.colorBottom.length; x++) {
            p.colorBottom.push(new THREE.Color(a.colorBottom[x]));
          }
        }
        void 0 !== a.sunColor && (p.sunColor = a.sunColor);
        void 0 !== a.moonColor && (p.moonColor = a.moonColor);
        void 0 !== a.intensity && (p.intensity = a.intensity);
        break;
      case "CubeCamera":
        p = new CubeCamera(a.near, a.far, a.resolution, a.autoUpdate);
        break;
      case "FirstPersonControls":
        p = new FirstPersonControls;
        p.sensitivity = a.sensitivity;
        p.needsButtonPressed = a.needsButtonPressed;
        p.movementEnabled = a.movementEnabled;
        p.moveSpeed = a.moveSpeed;
        p.moveOnPlane = a.moveOnPlane;
        p.moveKeys = a.moveKeys;
        break;
      case "OrbitControls":
        p = new OrbitControls;
        p.distance = a.distance;
        p.maxDistance = a.maxDistance;
        p.minDistance = a.minDistance;
        p.sensitivity = a.sensitivity;
        p.limitUp = a.limitUp;
        p.limitDown = a.limitDown;
        p.needsButtonPressed = a.needsButtonPressed;
        p.zoomEnabled = a.zoomEnabled;
        p.movementEnabled = a.movementEnabled;
        void 0 !== a.smooth && (p.smooth = a.smooth, p.friction = a.friction, p.speed = a.speed, p.invertNavigation = a.invertNavigation);
        void 0 !== a.center && (p.center.fromArray(a.center), p.vector.fromArray(a.vector));
        break;
      case "Scene":
        p = new Scene;
        void 0 !== a.background && (Number.isInteger(a.background) ? p.background = new THREE.Color(a.background) : p.background = c(a.background));
        void 0 !== a.fog && ("Fog" === a.fog.type ? p.fog = new THREE.Fog(a.fog.color, a.fog.near, a.fog.far) : "FogExp2" === a.fog.type && (p.fog = new THREE.FogExp2(a.fog.color, a.fog.density)));
        void 0 !== a.defaultCamera && (p.defaultCamera = this.parse(a.defaultCamera));
        void 0 !== a.cameras && (p.cameras = a.cameras);
        void 0 !== a.usePhysics && (p.usePhysics = a.usePhysics);
        void 0 !== a.world && (p.world.gravity.set(a.world.gravity.x, a.world.gravity.y, a.world.gravity.z), p.world.quatNormalizeSkip = a.world.quatNormalizeSkip, p.world.quatNormalizeFast = a.world.quatNormalizeFast, p.world.solver.tolerance = a.world.solver.tolerance, p.world.solver.iterations = a.world.solver.iterations);
        break;
      case "PerspectiveCamera":
        p = new PerspectiveCamera(a.fov, a.aspect, a.near, a.far);
        void 0 !== a.focus && (p.focus = a.focus);
        void 0 !== a.zoom && (p.zoom = a.zoom);
        void 0 !== a.filmGauge && (p.filmGauge = a.filmGauge);
        void 0 !== a.filmOffset && (p.filmOffset = a.filmOffset);
        void 0 !== a.view && (p.view = Object.assign({}, a.view));
        void 0 !== a.viewport && (a.viewport instanceof Array ? (p.viewport.size.fromArray(a.viewport), p.viewport.offset.fromArray(a.offset)) : p.viewport.fromJSON(a.viewport));
        void 0 !== a.clearColor && (p.clearColor = a.clearColor);
        void 0 !== a.clearDepth && (p.clearDepth = a.clearDepth);
        void 0 !== a.clearStencil && (p.clearStencil = a.clearStencil);
        void 0 !== a.order && (p.order = a.order);
        void 0 !== a.composer && (p.composer = EffectComposer.fromJSON(a.composer));
        break;
      case "OrthographicCamera":
        p = new OrthographicCamera(a.size, a.aspect, a.mode, a.near, a.far);
        void 0 !== a.viewport && (a.viewport instanceof Array ? (p.viewport.size.fromArray(a.viewport), p.viewport.offset.fromArray(a.offset)) : p.viewport.fromJSON(a.viewport));
        void 0 !== a.clearColor && (p.clearColor = a.clearColor);
        void 0 !== a.clearDepth && (p.clearDepth = a.clearDepth);
        void 0 !== a.clearStencil && (p.clearStencil = a.clearStencil);
        void 0 !== a.order && (p.order = a.order);
        void 0 !== a.composer && (p.composer = EffectComposer.fromJSON(a.composer));
        void 0 !== a.zoom && (p.zoom = a.zoom);
        void 0 !== a.view && (p.view = Object.assign({}, a.view));
        break;
      case "Script":
        p = new Script(a.code, a.mode);
        break;
      case "RectAreaLight":
        p = new RectAreaLight(a.color, a.intensity, a.width, a.height);
        break;
      case "AmbientLight":
        p = new AmbientLight(a.color, a.intensity);
        break;
      case "DirectionalLight":
        p = new DirectionalLight(a.color, a.intensity);
        break;
      case "PointLight":
        p = new PointLight(a.color, a.intensity, a.distance, a.decay);
        break;
      case "SpotLight":
        p = new SpotLight(a.color, a.intensity, a.distance, a.angle, a.penumbra, a.decay);
        break;
      case "HemisphereLight":
        p = new HemisphereLight(a.color, a.groundColor, a.intensity);
        break;
      case "SkinnedMesh":
        var A = h(a.geometry), D = t(a.material);
        if (void 0 !== a.skeleton && void 0 !== A.bones) {
          var F = A.bones;
          A.bones = void 0;
        }
        p = new SkinnedMesh(A, D);
        void 0 !== a.skeleton && (p.skeletonUUID = a.skeleton);
        void 0 !== a.bindMode && (p.bindMode = a.bindMode);
        void 0 !== a.bindMatrix && p.bindMatrix.fromArray(a.bindMatrix);
        p.updateMatrixWorld(!0);
        void 0 !== F && (A.bones = F);
        break;
      case "InstancedMesh":
        A = h(a.geometry);
        D = t(a.material);
        p = new InstancedMesh(A, D, a.count);
        p.instanceMatrix = new THREE.BufferAttribute(new Float32Array(a.instanceMatrix.array), 16);
        break;
      case "HTMLView":
        p = new HTMLView;
        p.height = a.height;
        p.width = a.width;
        p.url = a.url;
        break;
      case "LightProbe":
        p = new LightProbe;
        p.sh.fromArray(a.sh);
        break;
      case "Mesh":
        A = h(a.geometry);
        D = t(a.material);
        p = A.bones && 0 < A.bones.length ? new SkinnedMesh(A, D) : new Mesh(A, D);
        break;
      case "TextBitmap":
        p = TextBitmap.fromJSON(a, c(a.texture));
        break;
      case "TextSprite":
        p = TextSprite.fromJSON(a);
        break;
      case "LOD":
        p = new THREE.LOD;
        break;
      case "Line":
        p = new THREE.Line(h(a.geometry), t(a.material), a.mode);
        break;
      case "LineLoop":
        p = new THREE.LineLoop(h(a.geometry), t(a.material));
        break;
      case "LineSegments":
        p = new THREE.LineSegments(h(a.geometry), t(a.material));
        break;
      case "PointCloud":
      case "Points":
        p = new THREE.Points(h(a.geometry), t(a.material));
        break;
      case "Sprite":
        p = new Sprite(t(a.material));
        break;
      case "Group":
        p = new Container;
        break;
      case "Bone":
        p = new THREE.Bone;
        break;
      default:
        p = new Container;
    }
  } catch (E) {
    console.error("nunuStudio: Error parsing and creating object " + a.uuid + ", object skiped.", E, a), p = new Container;
  }
  p.uuid = a.uuid;
  p.name = a.name;
  p.locked = !0 === a.locked || !0 === a.hidden;
  p.folded = !0 === a.folded;
  void 0 !== a.frustumCulled && (p.frustumCulled = a.frustumCulled);
  void 0 !== a.renderOrder && (p.renderOrder = a.renderOrder);
  if (void 0 !== a.animations) {
    for (p.animations = [], x = 0; x < a.animations.length; x++) {
      p.animations.push(THREE.AnimationClip.parse(a.animations[x]));
    }
  }
  void 0 !== a.matrix && (p.matrix.fromArray(a.matrix), p.matrix.decompose(p.position, p.quaternion, p.scale));
  void 0 !== a.position && p.position.fromArray(a.position);
  void 0 !== a.rotation && p.rotation.fromArray(a.rotation);
  void 0 !== a.quaternion && p.quaternion.fromArray(a.quaternion);
  void 0 !== a.scale && p.scale.fromArray(a.scale);
  p.castShadow = !0 === a.castShadow;
  p.receiveShadow = !0 === a.receiveShadow;
  void 0 !== a.shadow && p.shadow.fromJSON(a.shadow);
  p.visible = !0 === a.visible;
  void 0 !== a.userData && (p.userData = a.userData);
  void 0 !== a.layers && (p.layers.mask = a.layers);
  if (void 0 !== a.children) {
    for (var B in a.children) {
      p.add(this.parseObject(a.children[B], d, k, b, g, f, r, q, m, n));
    }
  }
  void 0 !== a.matrixAutoUpdate && (p.matrixAutoUpdate = a.matrixAutoUpdate, p.matrixAutoUpdate || (p.updateMatrix(), p.updateMatrixWorld(!0)));
  if ("Program" === a.type) {
    p.materials = k, p.textures = b, p.resources = e, p.fonts = f, p.audio = g, p.geometries = d, p.images = r, p.videos = q, p.shapes = m, p.skeletons = n;
  } else {
    if ("Scene" === a.type) {
      for (x = 0; x < p.cameras.length; x++) {
        B = p.getCamera(p.cameras[x]), null !== B ? p.cameras[x] = B : p.cameras.splice(x, 1);
      }
    } else {
      if ("LOD" === a.type) {
        for (x = a.levels, a = 0; a < x.length; a++) {
          e = x[a], B = p.getObjectByProperty("uuid", e.object), void 0 !== B && p.addLevel(B, e.distance);
        }
      }
    }
  }
  return p;
};
"use strict";
function CapsuleBufferGeometry(a, d, k, b, g, f, e, r, q) {
  THREE.BufferGeometry.call(this);
  this.type = "CapsuleBufferGeometry";
  this.parameters = {radiusTop:a, radiusBottom:d, height:k, radialSegments:b, heightSegments:g, capsTopSegments:f, capsBottomSegments:e, thetaStart:r, thetaLength:q};
  a = void 0 !== a ? a : 1;
  d = void 0 !== d ? d : 1;
  k = void 0 !== k ? k : 2;
  b = Math.floor(b) || 8;
  g = Math.floor(g) || 1;
  f = Math.floor(f) || 2;
  e = Math.floor(e) || 2;
  r = void 0 !== r ? r : 0;
  q = void 0 !== q ? q : 2 * Math.PI;
  var m = Math.acos((d - a) / k), n = (b + 1) * (g + 1 + e + f), c = b * (g + e + f) * 6;
  c = new THREE.BufferAttribute(new (65535 < c ? Uint32Array : Uint16Array)(c), 1);
  var h = new THREE.BufferAttribute(new Float32Array(3 * n), 3), t = new THREE.BufferAttribute(new Float32Array(3 * n), 3);
  n = new THREE.BufferAttribute(new Float32Array(2 * n), 2);
  var z = 0, y = 0, x = [], p = k / 2, v, w = new THREE.Vector3, C = new THREE.Vector3, A = Math.cos(m), D = Math.sin(m), F = (new THREE.Vector2(a * D, p + a * A)).sub(new THREE.Vector2(d * D, -p + d * A)).length(), B = a * m + F + d * (Math.PI / 2 - m), E = 0;
  for (v = 0; v <= f; v++) {
    var I = [];
    var K = Math.PI / 2 - v / f * m;
    E += a * m / f;
    var J = Math.cos(K), R = Math.sin(K), L = J * a;
    for (K = 0; K <= b; K++) {
      var H = K / b, M = H * q + r, S = Math.sin(M);
      M = Math.cos(M);
      C.x = L * S;
      C.y = p + R * a;
      C.z = L * M;
      h.setXYZ(z, C.x, C.y, C.z);
      w.set(J * S, R, J * M);
      t.setXYZ(z, w.x, w.y, w.z);
      n.setXY(z, H, 1 - E / B);
      I.push(z);
      z++;
    }
    x.push(I);
  }
  k = k + A * a - A * d;
  J = D * (d - a) / k;
  for (v = 1; v <= g; v++) {
    I = [];
    E += F / g;
    L = D * (v * (d - a) / g + a);
    for (K = 0; K <= b; K++) {
      H = K / b, M = H * q + r, S = Math.sin(M), M = Math.cos(M), C.x = L * S, C.y = p + A * a - v * k / g, C.z = L * M, h.setXYZ(z, C.x, C.y, C.z), w.set(S, J, M).normalize(), t.setXYZ(z, w.x, w.y, w.z), n.setXY(z, H, 1 - E / B), I.push(z), z++;
    }
    x.push(I);
  }
  for (v = 1; v <= e; v++) {
    I = [];
    K = Math.PI / 2 - m - v / e * (Math.PI - m);
    E += d * m / e;
    J = Math.cos(K);
    R = Math.sin(K);
    L = J * d;
    for (K = 0; K <= b; K++) {
      H = K / b, M = H * q + r, S = Math.sin(M), M = Math.cos(M), C.x = L * S, C.y = -p + R * d, C.z = L * M, h.setXYZ(z, C.x, C.y, C.z), w.set(J * S, R, J * M), t.setXYZ(z, w.x, w.y, w.z), n.setXY(z, H, 1 - E / B), I.push(z), z++;
    }
    x.push(I);
  }
  for (K = 0; K < b; K++) {
    for (v = 0; v < f + g + e; v++) {
      a = x[v + 1][K], d = x[v + 1][K + 1], r = x[v][K + 1], c.setX(y, x[v][K]), y++, c.setX(y, a), y++, c.setX(y, r), y++, c.setX(y, a), y++, c.setX(y, d), y++, c.setX(y, r), y++;
    }
  }
  this.setIndex(c);
  this.addAttribute("position", h);
  this.addAttribute("normal", t);
  this.addAttribute("uv", n);
}
CapsuleBufferGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);
CapsuleBufferGeometry.prototype.constructor = CapsuleBufferGeometry;
"use strict";
function LeapMotion() {
  THREE.Group.call(this);
  this.type = "LeapDevice";
  this.name = "leap";
  this.posesEnabled = this.gesturesEnabled = this.debugModel = !0;
  this.mode = LeapMotion.DESK;
  this.useArm = !1;
  this.boneMeshes = [];
  this.armMeshes = [];
  this.material = new THREE.MeshPhongMaterial;
  this.geometry = new THREE.BoxBufferGeometry(1, 1, 1);
  this.gesture = [];
  for (var a = 0; 10 > a; a++) {
    this.gesture[a] = !1;
  }
  this.pose = [];
  for (a = 0; 3 > a; a++) {
    this.pose[a] = !1;
  }
  this.data = null;
}
LeapMotion.prototype = Object.create(THREE.Group.prototype);
LeapMotion.DESK = 0;
LeapMotion.HDM = 1;
LeapMotion.SWIPE = 0;
LeapMotion.SWIPE_LEFT = 1;
LeapMotion.SWIPE_RIGHT = 2;
LeapMotion.SWIPE_FRONT = 3;
LeapMotion.SWIPE_BACK = 4;
LeapMotion.SWIPE_UP = 5;
LeapMotion.SWIPE_DOWN = 6;
LeapMotion.CIRCLE = 7;
LeapMotion.SCREEN_TAP = 8;
LeapMotion.KEY_TAP = 9;
LeapMotion.CLOSED = 0;
LeapMotion.OPEN = 1;
LeapMotion.POINTING = 2;
LeapMotion.prototype.initialize = function() {
  var a = this;
  Leap.loop({background:!0}, function(d) {
    a.data = d;
  }).connect();
  THREE.Object3D.prototype.initialize.call(this);
};
LeapMotion.prototype.update = function(a) {
  null !== this.data && (this.gesturesEnabled && this.updateGestures(), this.posesEnabled && this.updatePoses(), this.debugModel && this.updateDebugModel());
  THREE.Object3D.prototype.update.call(this, a);
};
LeapMotion.prototype.checkGesture = function(a) {
  return void 0 !== this.gesture[a] ? this.gesture[a] : !1;
};
LeapMotion.prototype.checkPose = function(a) {
  return void 0 !== this.pose[a] ? this.pose[a] : !1;
};
LeapMotion.prototype.setMode = function(a) {
  this.mode = a;
};
LeapMotion.prototype.updatePoses = function() {
  for (var a = 0; a < this.pose.length; a++) {
    this.pose[a] = !0;
  }
  for (var d = 0; d < this.data.hands.length; d++) {
    var k = this.data.hands[d], b = k.sphereCenter;
    b = new THREE.Vector3(b[0], b[1], b[2]);
    var g = [], f = 0;
    for (a = 0; a < this.pose.length; a++) {
      this.pose[a] = !0;
    }
    var e = [];
    for (a = 0; a < k.fingers.length; a++) {
      var r = k.fingers[a];
      e.push(r.direction);
      r = r.distal.nextJoint;
      r = new THREE.Vector3(r[0], r[1], r[2]);
      g.push(b.distanceTo(r) / k._scaleFactor);
      0 !== a && (.3 > e[a][2] && (this.pose[LeapMotion.CLOSED] = !1), -.5 < e[a][2] && (this.pose[LeapMotion.OPEN] = !1), 1 === a ? f = g[1] : f < 2 * g[a] - 15 && (this.pose[LeapMotion.POINTING] = !1));
    }
    f < 2 * g[0] - 15 && (this.pose[LeapMotion.POINTING] = !1);
  }
};
LeapMotion.prototype.updateGestures = function() {
  for (var a = 0; a < this.gesture.length; a++) {
    this.gesture[a] = !1;
  }
  var d = this;
  this.data.valid && 0 < this.data.gestures.length && this.data.gestures.forEach(function(a) {
    "swipe" === a.type ? (d.gesture[LeapMotion.SWIPE] = !0, 0 < a.direction[0] ? d.gesture[LeapMotion.SWIPE_RIGHT] = !0 : d.gesture[LeapMotion.SWIPE_LEFT] = !0, 0 < a.direction[1] ? d.gesture[LeapMotion.SWIPE_UP] = !0 : d.gesture[LeapMotion.SWIPE_DOWN] = !0, 0 < a.direction[2] ? d.gesture[LeapMotion.SWIPE_FRONT] = !0 : d.gesture[LeapMotion.SWIPE_BACK] = !0) : "circle" === a.type ? d.gesture[LeapMotion.CIRCLE] = !0 : "keyTap" === a.type ? d.gesture[LeapMotion.KEY_TAP] = !0 : "screenTap" === a.type && 
    (d.gesture[LeapMotion.SCREEN_TAP] = !0);
  });
};
LeapMotion.prototype.updateDebugModel = function() {
  var a = this;
  this.armMeshes.forEach(function(b) {
    a.remove(b);
  });
  this.boneMeshes.forEach(function(b) {
    a.remove(b);
  });
  for (var d = 0, k = 0, b = 0; b < this.data.hands.length; b++) {
    for (var g = this.data.hands[b], f = 0; f < g.fingers.length; f++) {
      for (var e = g.fingers[f], r = 0; r < e.bones.length; r++) {
        var q = e.bones[r];
        if (0 !== d) {
          var m = this.boneMeshes[d] || this.addMesh(this.boneMeshes);
          this.updateMesh(q, m);
        }
        d++;
      }
    }
    this.showArm && (g = g.arm, f = this.armMeshes[k++] || this.addMesh(this.armMeshes), this.updateMesh(g, f), f.scale.set(g.width / 1200, g.width / 300, g.length / 150));
  }
};
LeapMotion.prototype.addMesh = function(a) {
  var d = new Mesh(this.geometry, this.material);
  d.castShadow = this.castShadow;
  d.receiveShadow = this.receiveShadow;
  a.push(d);
  return d;
};
LeapMotion.prototype.updateMesh = function(a, d) {
  d.position.fromArray(a.center());
  d.position.divideScalar(150);
  d.setRotationFromMatrix((new THREE.Matrix4).fromArray(a.matrix()));
  d.scale.set(a.width / 150, a.width / 150, a.length / 150);
  this.add(d);
};
LeapMotion.prototype.getMovement = function() {
  var a = this.data.gestures[0].position, d = this.data.gestures[0].startPosition;
  a = new THREE.Vector3(a[0] - d[0], a[1] - d[1], a[2] - d[2]);
  a.divideScalar(this.data.currentFrameRate);
  return a;
};
LeapMotion.prototype.toJSON = function(a) {
  a = THREE.Group.prototype.toJSON.call(this, a);
  a.object.type = this.type;
  a.object.debugModel = this.debugModel;
  a.object.gesturesEnabled = this.gesturesEnabled;
  a.object.posesEnabled = this.posesEnabled;
  a.object.mode = this.mode;
  a.object.useArm = this.useArm;
  return a;
};
"use strict";
function LeapMotion() {
  THREE.Group.call(this);
  this.type = "LeapDevice";
  this.name = "leap";
  this.posesEnabled = this.gesturesEnabled = this.debugModel = !0;
  this.mode = LeapMotion.DESK;
  this.useArm = !1;
  this.boneMeshes = [];
  this.armMeshes = [];
  this.material = new THREE.MeshPhongMaterial;
  this.geometry = new THREE.BoxBufferGeometry(1, 1, 1);
  this.gesture = [];
  for (var a = 0; 10 > a; a++) {
    this.gesture[a] = !1;
  }
  this.pose = [];
  for (a = 0; 3 > a; a++) {
    this.pose[a] = !1;
  }
  this.data = null;
}
LeapMotion.prototype = Object.create(THREE.Group.prototype);
LeapMotion.DESK = 0;
LeapMotion.HDM = 1;
LeapMotion.SWIPE = 0;
LeapMotion.SWIPE_LEFT = 1;
LeapMotion.SWIPE_RIGHT = 2;
LeapMotion.SWIPE_FRONT = 3;
LeapMotion.SWIPE_BACK = 4;
LeapMotion.SWIPE_UP = 5;
LeapMotion.SWIPE_DOWN = 6;
LeapMotion.CIRCLE = 7;
LeapMotion.SCREEN_TAP = 8;
LeapMotion.KEY_TAP = 9;
LeapMotion.CLOSED = 0;
LeapMotion.OPEN = 1;
LeapMotion.POINTING = 2;
LeapMotion.prototype.initialize = function() {
  var a = this;
  Leap.loop({background:!0}, function(d) {
    a.data = d;
  }).connect();
  THREE.Object3D.prototype.initialize.call(this);
};
LeapMotion.prototype.update = function(a) {
  null !== this.data && (this.gesturesEnabled && this.updateGestures(), this.posesEnabled && this.updatePoses(), this.debugModel && this.updateDebugModel());
  THREE.Object3D.prototype.update.call(this, a);
};
LeapMotion.prototype.checkGesture = function(a) {
  return void 0 !== this.gesture[a] ? this.gesture[a] : !1;
};
LeapMotion.prototype.checkPose = function(a) {
  return void 0 !== this.pose[a] ? this.pose[a] : !1;
};
LeapMotion.prototype.setMode = function(a) {
  this.mode = a;
};
LeapMotion.prototype.updatePoses = function() {
  for (var a = 0; a < this.pose.length; a++) {
    this.pose[a] = !0;
  }
  for (var d = 0; d < this.data.hands.length; d++) {
    var k = this.data.hands[d], b = k.sphereCenter;
    b = new THREE.Vector3(b[0], b[1], b[2]);
    var g = [], f = 0;
    for (a = 0; a < this.pose.length; a++) {
      this.pose[a] = !0;
    }
    var e = [];
    for (a = 0; a < k.fingers.length; a++) {
      var r = k.fingers[a];
      e.push(r.direction);
      r = r.distal.nextJoint;
      r = new THREE.Vector3(r[0], r[1], r[2]);
      g.push(b.distanceTo(r) / k._scaleFactor);
      0 !== a && (.3 > e[a][2] && (this.pose[LeapMotion.CLOSED] = !1), -.5 < e[a][2] && (this.pose[LeapMotion.OPEN] = !1), 1 === a ? f = g[1] : f < 2 * g[a] - 15 && (this.pose[LeapMotion.POINTING] = !1));
    }
    f < 2 * g[0] - 15 && (this.pose[LeapMotion.POINTING] = !1);
  }
};
LeapMotion.prototype.updateGestures = function() {
  for (var a = 0; a < this.gesture.length; a++) {
    this.gesture[a] = !1;
  }
  var d = this;
  this.data.valid && 0 < this.data.gestures.length && this.data.gestures.forEach(function(a) {
    "swipe" === a.type ? (d.gesture[LeapMotion.SWIPE] = !0, 0 < a.direction[0] ? d.gesture[LeapMotion.SWIPE_RIGHT] = !0 : d.gesture[LeapMotion.SWIPE_LEFT] = !0, 0 < a.direction[1] ? d.gesture[LeapMotion.SWIPE_UP] = !0 : d.gesture[LeapMotion.SWIPE_DOWN] = !0, 0 < a.direction[2] ? d.gesture[LeapMotion.SWIPE_FRONT] = !0 : d.gesture[LeapMotion.SWIPE_BACK] = !0) : "circle" === a.type ? d.gesture[LeapMotion.CIRCLE] = !0 : "keyTap" === a.type ? d.gesture[LeapMotion.KEY_TAP] = !0 : "screenTap" === a.type && 
    (d.gesture[LeapMotion.SCREEN_TAP] = !0);
  });
};
LeapMotion.prototype.updateDebugModel = function() {
  var a = this;
  this.armMeshes.forEach(function(b) {
    a.remove(b);
  });
  this.boneMeshes.forEach(function(b) {
    a.remove(b);
  });
  for (var d = 0, k = 0, b = 0; b < this.data.hands.length; b++) {
    for (var g = this.data.hands[b], f = 0; f < g.fingers.length; f++) {
      for (var e = g.fingers[f], r = 0; r < e.bones.length; r++) {
        var q = e.bones[r];
        if (0 !== d) {
          var m = this.boneMeshes[d] || this.addMesh(this.boneMeshes);
          this.updateMesh(q, m);
        }
        d++;
      }
    }
    this.showArm && (g = g.arm, f = this.armMeshes[k++] || this.addMesh(this.armMeshes), this.updateMesh(g, f), f.scale.set(g.width / 1200, g.width / 300, g.length / 150));
  }
};
LeapMotion.prototype.addMesh = function(a) {
  var d = new Mesh(this.geometry, this.material);
  d.castShadow = this.castShadow;
  d.receiveShadow = this.receiveShadow;
  a.push(d);
  return d;
};
LeapMotion.prototype.updateMesh = function(a, d) {
  d.position.fromArray(a.center());
  d.position.divideScalar(150);
  d.setRotationFromMatrix((new THREE.Matrix4).fromArray(a.matrix()));
  d.scale.set(a.width / 150, a.width / 150, a.length / 150);
  this.add(d);
};
LeapMotion.prototype.getMovement = function() {
  var a = this.data.gestures[0].position, d = this.data.gestures[0].startPosition;
  a = new THREE.Vector3(a[0] - d[0], a[1] - d[1], a[2] - d[2]);
  a.divideScalar(this.data.currentFrameRate);
  return a;
};
LeapMotion.prototype.toJSON = function(a) {
  a = THREE.Group.prototype.toJSON.call(this, a);
  a.object.type = this.type;
  a.object.debugModel = this.debugModel;
  a.object.gesturesEnabled = this.gesturesEnabled;
  a.object.posesEnabled = this.posesEnabled;
  a.object.mode = this.mode;
  a.object.useArm = this.useArm;
  return a;
};
"use strict";
function KinectDevice() {
  THREE.Group.call(this);
  this.type = "Kinect";
  this.name = "kinect";
  this.socket = new WebSocket("ws://127.0.0.1:8181");
  this.connected = !1;
  this.debugModel = !0;
  this.dataTimeout = 0;
  this.data = this.camera = null;
  this.dataReceived = !1;
  var a = this;
  this.socket.onopen = function() {
    a.connected = !0;
  };
  this.socket.onclose = function() {
    a.connected = !1;
  };
  this.socket.onmessage = function(d) {
    "string" === typeof d.data ? (a.data = JSON.parse(d.data), a.dataReceived = !0, a.dataTimeout = KinectDevice.DATA_TIMEOUT) : d.data instanceof Blob && (a.camera = d.data);
  };
}
KinectDevice.DATA_TIMEOUT = 20;
KinectDevice.DEPTH = 0;
KinectDevice.COLOR = 1;
KinectDevice.JOINTS_NAME = [["head", "shouldercenter"], ["shouldercenter", "shoulderright"], ["shouldercenter", "shoulderleft"], ["shoulderright", "elbowright"], ["shoulderleft", "elbowleft"], ["elbowright", "wristright"], ["elbowleft", "wristleft"], ["wristright", "handright"], ["wristleft", "handleft"], ["shouldercenter", "spine"], ["spine", "hipcenter"], ["hipcenter", "hipright"], ["hipcenter", "hipleft"], ["hipright", "kneeright"], ["hipleft", "kneeleft"], ["kneeright", "ankleright"], ["kneeleft", 
"ankleleft"], ["ankleright", "footright"], ["ankleleft", "footleft"]];
KinectDevice.prototype = Object.create(THREE.Group.prototype);
KinectDevice.prototype.update = function(a) {
  if (null !== this.data) {
    if (this.dataReceived) {
      for (this.dataReceived = !1; 0 < this.children.length;) {
        this.children.pop();
      }
      if (this.debugModel) {
        for (var d = new THREE.SphereGeometry(.04, 6, 6), k = new THREE.MeshPhongMaterial(16711680), b = 0; b < this.data.skeletons.length; b++) {
          for (var g = this.data.skeletons[b].joints, f = 0; f < g.length; f++) {
            var e = new Mesh(d, k);
            e.position.set(g[f].x, g[f].y, g[f].z);
            e.castShadow = !0;
            this.add(e);
          }
        }
      }
    } else {
      if (0 < this.dataTimeout && (this.dataTimeout--, 0 === this.dataTimeout)) {
        for (; 0 < this.children.length;) {
          this.children.pop();
        }
      }
    }
  }
  THREE.Object3D.prototype.update.call(this, a);
};
KinectDevice.prototype.isConnected = function() {
  return this.connected;
};
KinectDevice.prototype.setCameraMode = function(a) {
  a === KinectDevice.COLOR ? socket.send("Color") : a === KinectDevice.DEPTH && socket.send("Depth");
};
KinectDevice.prototype.toJSON = function(a) {
  a = THREE.Group.prototype.toJSON.call(this, a);
  a.object.debugModel = this.debugModel;
  return a;
};
"use strict";
function Mesh(a, d) {
  THREE._Mesh.call(this, a, d);
  this.name = "model";
  this.castShadow = this.receiveShadow = !0;
}
THREE._Mesh = THREE.Mesh;
THREE.Mesh = Mesh;
Mesh.prototype = Object.create(THREE._Mesh.prototype);
Mesh.prototype.dispose = function() {
  null !== this.material && void 0 !== this.material.dispose && this.material.dispose();
  null !== this.geometry && void 0 !== this.geometry.dispose && this.geometry.dispose();
  THREE.Object3D.prototype.dispose.call(this);
};
"use strict";
function SkinnedMesh(a, d) {
  THREE._SkinnedMesh.call(this, a, d);
  this.name = "skinned";
  this.castShadow = this.receiveShadow = !0;
  this.skeleton = null;
}
THREE._SkinnedMesh = THREE.SkinnedMesh;
THREE.SkinnedMesh = SkinnedMesh;
SkinnedMesh.prototype = Object.create(THREE._SkinnedMesh.prototype);
SkinnedMesh.prototype.dispose = function() {
  null !== this.material && void 0 !== this.material.dispose && this.material.dispose();
  null !== this.geometry && void 0 !== this.geometry.dispose && this.geometry.dispose();
  THREE.Object3D.prototype.dispose.call(this);
};
SkinnedMesh.prototype.toJSON = function(a) {
  var d = this;
  a = THREE.Object3D.prototype.toJSON.call(this, a, function(a, b) {
    void 0 !== d.skeleton && (void 0 === a.skeletons[d.skeleton.uuid] && (a.skeletons[d.skeleton.uuid] = d.skeleton.toJSON(a)), b.skeleton = d.skeleton.uuid);
  });
  void 0 !== this.bindMode && (a.object.bindMode = this.bindMode);
  void 0 !== this.bindMatrix && (a.object.bindMatrix = this.bindMatrix.toArray());
  return a;
};
"use strict";
function InstancedMesh(a, d, k) {
  THREE._InstancedMesh.call(this, a, d, k);
  this.name = "instanced";
  this.type = "InstancedMesh";
  this.castShadow = this.receiveShadow = !0;
  Object.defineProperties(this, {count:{get:function() {
    return k;
  }, set:function(a) {
    a > k && (this.instanceMatrix = new THREE.BufferAttribute(new Float32Array(16 * a), 16));
    k = a;
  }}});
}
THREE._InstancedMesh = THREE.InstancedMesh;
THREE.InstancedMesh = InstancedMesh;
InstancedMesh.prototype = Object.create(THREE._InstancedMesh.prototype);
InstancedMesh.prototype.dispose = function() {
  null !== this.material && void 0 !== this.material.dispose && this.material.dispose();
  null !== this.geometry && this.geometry.dispose();
  THREE.Object3D.prototype.dispose.call(this);
};
InstancedMesh.prototype.toJSON = function(a) {
  a = THREE.Object3D.prototype.toJSON.call(this, a);
  a.object.instanceMatrix = this.instanceMatrix.toJSON();
  a.object.count = this.count;
  return a;
};
"use strict";
function CanvasSprite() {
  this.texture = new CanvasTexture;
  this.canvas = this.texture.image;
  var a = new THREE.SpriteMaterial({map:this.texture, color:16777215, transparent:!0, alphaTest:.4, depthTest:!0, depthWrite:!0, sizeAttenuation:!0});
  THREE.Sprite.call(this, a);
  this.name = "sprite";
  this.type = "CanvasSprite";
  Object.defineProperties(this, {sizeAttenuation:{get:function() {
    return this.material.sizeAttenuation;
  }, set:function(a) {
    this.material.sizeAttenuation = a;
    this.material.needsUpdate = !0;
  }}});
}
CanvasSprite.prototype = Object.create(THREE.Sprite.prototype);
"use strict";
function Sprite(a) {
  THREE._Sprite.call(this, a);
  this.name = "sprite";
}
THREE._Sprite = THREE.Sprite;
THREE.Sprite = Sprite;
Sprite.prototype = Object.create(THREE._Sprite.prototype);
Sprite.prototype.dispose = function() {
  null !== this.material && void 0 !== this.material.dispose && this.material.dispose();
  THREE.Object3D.prototype.dispose.call(this);
};
"use strict";
function TextMesh(a, d, k, b, g, f, e, r, q, m) {
  Mesh.call(this, TextMesh.EMPTY_GEOMETRY, d);
  this.name = "text";
  this.type = "TextMesh";
  this.font = void 0 !== k ? k : null;
  this.extruded = void 0 !== m ? m : !0;
  this.size = void 0 !== r ? r : 1;
  this.height = void 0 !== b ? b : .5;
  this.curveSegments = void 0 !== q ? q : 15;
  this.bevel = void 0 !== g ? g : !1;
  this.bevelThickness = void 0 !== f ? f : .1;
  this.bevelSize = void 0 !== e ? e : .05;
  a = void 0 !== a ? a : "text";
  Object.defineProperties(this, {text:{get:function() {
    return a;
  }, set:function(b) {
    a !== b && (a = b, this.updateGeometry());
  }}});
  this.updateGeometry();
}
TextMesh.prototype = Object.create(Mesh.prototype);
TextMesh.EMPTY_GEOMETRY = new THREE.Geometry;
TextMesh.prototype.setFont = function(a) {
  this.font !== a && (this.font = a, this.updateGeometry());
};
TextMesh.prototype.setText = function(a) {
  this.text = a;
};
TextMesh.prototype.updateGeometry = function() {
  if (null !== this.font) {
    if (void 0 !== this.geometry && this.geometry.dispose(), !0 !== this.font.isFont) {
      console.warn("nunuStudio: Font parameter is not an instance of THREE.Font."), this.geometry = TextMesh.EMPTY_GEOMETRY;
    } else {
      var a = this.font.generateShapes(this.text, this.size);
      this.extruded ? (this.geometry = new THREE.ExtrudeBufferGeometry(a, {curveSegments:this.curveSegments, depth:this.height, bevelEnabled:this.bevel, bevelSize:this.bevelSize, bevelThickness:this.bevelThickness}), this.geometry.computeVertexNormals()) : this.geometry = new THREE.ShapeBufferGeometry(a, this.curveSegments);
    }
  }
};
TextMesh.prototype.clone = function() {
  return new TextMesh(this.text, this.material, this.font, this.height, this.bevel, this.bevelThickness, this.bevelSize, this.size, this.curveSegments);
};
TextMesh.prototype.toJSON = function(a) {
  var d = this.geometry;
  this.geometry = void 0;
  var k = this.font;
  a = THREE.Object3D.prototype.toJSON.call(this, a, function(a, d) {
    k = k.toJSON(a);
  });
  a.object.text = this.text;
  a.object.font = k.uuid;
  a.object.size = this.size;
  a.object.curveSegments = this.curveSegments;
  a.object.height = this.height;
  a.object.bevel = this.bevel;
  a.object.bevelThickness = this.bevelThickness;
  a.object.bevelSize = this.bevelSize;
  a.object.extruded = this.extruded;
  this.geometry = d;
  return a;
};
"use strict";
function TextBitmap(a, d, k, b) {
  if (void 0 === a.font) {
    throw Error("TextBitmap configuration font is required.");
  }
  void 0 === a.width && (a.width = 500);
  void 0 === a.align && (a.align = TextBitmap.CENTER);
  void 0 === a.lineHeight && (a.lineHeight = a.font.common.lineHeight);
  void 0 === a.letterSpacing && (a.letterSpacing = 5);
  void 0 === a.text && (a.text = "");
  this.config = a;
  this.uniforms = {map:{type:"t", value:d}, color:{type:"v3", value:new THREE.Color(void 0 !== b ? b : 16777215)}, smoothing:{type:"f", value:0}, threshold:{type:"f", value:.4}};
  THREE.Mesh.call(this, createGeometry(this.config), null);
  this.name = "text";
  this.type = "TextBitmap";
  k = void 0 !== k ? k : TextBitmap.BITMAP;
  var g = .01;
  Object.defineProperties(this, {fontScale:{get:function() {
    return g;
  }, set:function(a) {
    g = a;
    this.updateGeometry();
  }}, shader:{get:function() {
    return k;
  }, set:function(a) {
    k = a;
    this.updateShader();
  }}, texture:{get:function() {
    return this.uniforms.map.value;
  }, set:function(a) {
    this.uniforms.map.value = a;
    this.material.needsUpdate = !0;
  }}, font:{get:function() {
    return this.config.font;
  }, set:function(a) {
    this.config.font = a;
    this.updateGeometry();
  }}, text:{get:function() {
    return this.config.text;
  }, set:function(a) {
    this.config.text !== a && (this.config.text = a, this.updateGeometry());
  }}, lineHeight:{get:function() {
    return this.config.lineHeight;
  }, set:function(a) {
    this.config.lineHeight = a;
    this.updateGeometry();
  }}, letterSpacing:{get:function() {
    return this.config.letterSpacing;
  }, set:function(a) {
    this.config.letterSpacing = a;
    this.updateGeometry();
  }}, align:{get:function() {
    return this.config.align;
  }, set:function(a) {
    this.config.align = a;
    this.updateGeometry();
  }}, width:{get:function() {
    return this.config.width;
  }, set:function(a) {
    this.config.width = a;
    this.updateGeometry();
  }}, color:{get:function() {
    return this.uniforms.color.value;
  }, set:function(a) {
    this.uniforms.color.value = a;
  }}, threshold:{get:function() {
    return this.uniforms.threshold.value;
  }, set:function(a) {
    this.uniforms.threshold.value = a;
  }}, smoothing:{get:function() {
    return this.uniforms.smoothing.value;
  }, set:function(a) {
    this.uniforms.smoothing.value = a;
  }}});
  this.updateGeometry();
  this.updateShader(d);
}
TextBitmap.prototype = Object.create(THREE.Mesh.prototype);
TextBitmap.prototype.constructor = TextBitmap;
TextBitmap.BITMAP = 100;
TextBitmap.SDF = 101;
TextBitmap.MSDF = 102;
TextBitmap.LEFT = "left";
TextBitmap.CENTER = "center";
TextBitmap.RIGHT = "right";
TextBitmap.VERTEX_SHADER = "\n#define BILLBOARD 0 \n\nvarying vec2 vUv;\n\nvoid main()\n{\n\tvUv = uv;\n\t\n\t#if BILLBOARD\n\t\tmat4 model = modelViewMatrix; \n\t\tmodel[0][0] = 1.0;\n\t\tmodel[0][1] = 0.0;\n\t\tmodel[0][2] = 0.0;\n\t\t\n\t\tmodel[1][0] = 0.0;\n\t\tmodel[1][1] = 1.0;\n\t\tmodel[1][2] = 0.0;\n\t\t\n\t\tmodel[2][0] = 0.0;\n\t\tmodel[2][1] = 0.0;\n\t\tmodel[2][2] = 1.0;\n\t\t\n\t\tgl_Position = projectionMatrix * model * vec4(position, 1.0);\n\t#else\n\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n\t#endif\n\t\n}";
TextBitmap.BITMAP_SHADER = "\nvarying vec2 vUv;\nuniform sampler2D map;\n\nvoid main()\n{\n\tgl_FragColor = texture2D(map, vUv);\n}";
TextBitmap.SDF_SHADER = "\nvarying vec2 vUv;\nuniform sampler2D map;\nuniform vec3 color;\nuniform float smoothing;\nuniform float threshold;\n\nvoid main()\n{\n\tfloat distance = texture2D(map, vUv).a;\n\tfloat alpha = smoothstep(threshold - smoothing, threshold + smoothing, distance);\n\tgl_FragColor = vec4(color, alpha);\n}";
TextBitmap.MSDF_SHADER = "\n#extension GL_OES_standard_derivatives : enable\n\nvarying vec2 vUv;\nuniform sampler2D map;\nuniform vec3 color;\nuniform float smoothing;\nuniform float threshold;\n\nfloat median(float r, float g, float b)\n{\n\treturn max(min(r, g), min(max(r, g), b));\n}\n\nvoid main()\n{\n\tvec3 sample = texture2D(map, vUv).rgb;\n\tfloat sigDist = median(sample.r, sample.g, sample.b) - 0.5;\n\tfloat alpha = clamp(sigDist / fwidth(sigDist) + 0.5, 0.0, 1.0);\n\tgl_FragColor = vec4(color, 1.0 - alpha);\n}";
TextBitmap.prototype.setText = function(a) {
  this.text = a;
};
TextBitmap.prototype.updateShader = function() {
  this.material = new THREE.ShaderMaterial({uniforms:this.uniforms, fragmentShader:this.shader === TextBitmap.SDF ? TextBitmap.SDF_SHADER : this.shader === TextBitmap.MSDF ? TextBitmap.MSDF_SHADER : TextBitmap.BITMAP_SHADER, vertexShader:TextBitmap.VERTEX_SHADER, side:THREE.DoubleSide, transparent:!0, depthTest:!0});
};
TextBitmap.prototype.updateGeometry = function() {
  this.geometry.update(this.config);
  if (1 !== this.fontScale) {
    for (var a = this.geometry.attributes.position.array, d = 0; d < a.length; d++) {
      a[d] *= this.fontScale;
    }
  }
};
TextBitmap.prototype.toJSON = function(a) {
  var d = THREE.Object3D.prototype.toJSON.call(this, a);
  d.object.texture = this.texture.toJSON(a).uuid;
  d.object.fontScale = this.fontScale;
  d.object.shader = this.shader;
  d.object.text = this.text;
  d.object.font = this.font;
  d.object.lineHeight = this.lineHeight;
  d.object.letterSpacing = this.letterSpacing;
  d.object.align = this.align;
  d.object.width = this.width;
  d.object.color = this.color;
  d.object.threshold = this.threshold;
  d.object.smoothing = this.smoothing;
  return d;
};
TextBitmap.fromJSON = function(a, d) {
  d = new TextBitmap(a, d, a.shader);
  d.color = a.color;
  d.threshold = a.threshold;
  d.smoothing = a.smoothing;
  d.fontScale = a.fontScale;
  return d;
};
"use strict";
function TextSprite() {
  CanvasSprite.call(this);
  this.name = "text";
  this.type = "TextSprite";
  var a = "", d = "#FFFFFF", k = !0, b = "#000000", g = 1, f = 32, e = TextSprite.CENTER, r = "arial";
  Object.defineProperties(this, {font:{get:function() {
    return r;
  }, set:function(a) {
    r = a;
    this.drawText();
  }}, align:{get:function() {
    return e;
  }, set:function(a) {
    e = a;
    this.drawText();
  }}, color:{get:function() {
    return d;
  }, set:function(a) {
    d = a;
    this.drawText();
  }}, text:{get:function() {
    return a;
  }, set:function(b) {
    b !== a && (a = b, this.drawText());
  }}, outline:{get:function() {
    return k;
  }, set:function(a) {
    k = a;
    this.drawText();
  }}, outlineColor:{get:function() {
    return b;
  }, set:function(a) {
    b = a;
    this.drawText();
  }}, outlineWidth:{get:function() {
    return g;
  }, set:function(a) {
    g = a;
    this.drawText();
  }}, resolution:{get:function() {
    return f;
  }, set:function(a) {
    f = a;
    this.drawText();
  }}});
  this.text = "text";
}
TextSprite.prototype = Object.create(CanvasSprite.prototype);
TextSprite.LEFT = "left";
TextSprite.CENTER = "center";
TextSprite.RIGHT = "right";
TextSprite.prototype.drawText = function() {
  var a = this.resolution, d = .8 * a, k = this.texture.context;
  k.font = d + "px " + this.font;
  var b = k.measureText(this.text).width;
  b = THREE.Math.ceilPowerOfTwo(b);
  var g = b / a;
  this.texture.width = b;
  this.texture.height = a;
  k.clearRect(0, 0, b, a);
  0 !== this.text.length && (k.font = d + "px " + this.font, k.textAlign = this.align, k.textBaseline = "middle", k.fillStyle = this.color, k.fillText(this.text, b / 2, a / 2), !0 === this.outline && (k.lineWidth = this.outlineWidth, k.strokeStyle = this.outlineColor, k.strokeText(this.text, b / 2, a / 2)), this.scale.x = g * this.scale.y, this.texture.needsUpdate = !0);
};
TextSprite.prototype.toJSON = function(a) {
  a = THREE.Object3D.prototype.toJSON.call(this, a);
  a.object.text = this.text;
  a.object.color = this.color;
  a.object.outline = this.outline;
  a.object.outlineColor = this.outlineColor;
  a.object.outlineWidth = this.outlineWidth;
  a.object.resolution = this.resolution;
  a.object.align = this.align;
  a.object.font = this.font;
  return a;
};
TextSprite.fromJSON = function(a) {
  var d = new TextSprite;
  d.text = a.text;
  d.color = a.color;
  d.outline = a.outline;
  d.outlineColor = a.outlineColor;
  d.outlineWidth = a.outlineWidth;
  d.resolution = a.resolution;
  d.align = a.align;
  d.font = a.font;
  return d;
};
"use strict";
function PointLight(a, d, k, b) {
  THREE._PointLight.call(this, a, d, k, b);
  this.name = "point";
  this.castShadow = !0;
  this.shadow.camera.near = .1;
  this.shadow.camera.far = 1E3;
  this.shadow.bias = 0;
}
THREE._PointLight = THREE.PointLight;
THREE.PointLight = PointLight;
PointLight.prototype = Object.create(THREE._PointLight.prototype);
PointLight.prototype.updateShadowMap = function() {
  this.shadow.map.dispose();
  this.shadow.map = null;
  this.shadow.camera.updateProjectionMatrix();
};
"use strict";
function SpotLight(a, d, k, b, g, f) {
  THREE._SpotLight.call(this, a, d, k, b, g, f);
  this.name = "spotlight";
  this.castShadow = !0;
  this.shadow.camera.near = .05;
  this.shadow.camera.far = 5E3;
  this.shadow.mapSize.width = 512;
  this.shadow.mapSize.height = 512;
}
THREE._SpotLight = THREE.SpotLight;
THREE.SpotLight = SpotLight;
SpotLight.prototype = Object.create(THREE._SpotLight.prototype);
SpotLight.prototype.setTarget = function(a) {
  this.target = a;
};
SpotLight.prototype.updateShadowMap = function() {
  this.shadow.map.dispose();
  this.shadow.map = null;
  this.shadow.camera.updateProjectionMatrix();
};
SpotLight.prototype.toJSON = function(a) {
  a = THREE.Light.prototype.toJSON.call(this, a);
  a.object.target = this.target.uuid;
  return a;
};
"use strict";
function AmbientLight(a) {
  THREE._AmbientLight.call(this, a);
  this.name = "ambient";
  this.matrixAutoUpdate = !1;
}
THREE._AmbientLight = THREE.AmbientLight;
THREE.AmbientLight = AmbientLight;
AmbientLight.prototype = Object.create(THREE._AmbientLight.prototype);
"use strict";
function DirectionalLight(a, d) {
  THREE._DirectionalLight.call(this, a, d);
  this.name = "directional";
  this.castShadow = !0;
  this.shadow.camera.near = .5;
  this.shadow.camera.far = 1E4;
}
THREE._DirectionalLight = THREE.DirectionalLight;
THREE.DirectionalLight = DirectionalLight;
DirectionalLight.prototype = Object.create(THREE._DirectionalLight.prototype);
DirectionalLight.prototype.updateShadowMap = function() {
  this.shadow.map.dispose();
  this.shadow.map = null;
  this.shadow.camera.updateProjectionMatrix();
};
"use strict";
function HemisphereLight(a, d, k) {
  THREE._HemisphereLight.call(this, a, d, k);
  this.name = "hemisphere";
}
THREE._HemisphereLight = THREE.HemisphereLight;
THREE.HemisphereLight = HemisphereLight;
HemisphereLight.prototype = Object.create(THREE._HemisphereLight.prototype);
"use strict";
function RectAreaLight(a, d, k, b) {
  THREE._RectAreaLight.call(this, a, d, k, b);
  this.name = "rectarea";
}
THREE._RectAreaLight = THREE.RectAreaLight;
THREE.RectAreaLight = RectAreaLight;
RectAreaLight.prototype = Object.create(THREE._RectAreaLight.prototype);
RectAreaLight.prototype.toJSON = function(a) {
  a = THREE.Light.prototype.toJSON.call(this, a);
  a.object.width = this.width;
  a.object.height = this.height;
  return a;
};
"use strict";
function LightProbe(a, d) {
  THREE._LightProbe.call(this, a, d);
  this.type = "LightProbe";
  this.name = "probe";
}
THREE._LightProbe = THREE.LightProbe;
THREE.LightProbe = LightProbe;
LightProbe.prototype = Object.create(THREE._LightProbe.prototype);
LightProbe.prototype.generate = function() {
  var a = this.getScene();
  if (null === a) {
    console.warn("nunuStudio: LightProbe cannot generate, no scene.", this);
  } else {
    var d = new OffscreenCanvas(256, 256);
    d = new THREE.WebGLRenderer({canvas:d, alpha:!0});
    var k = new THREE._CubeCamera(1, 1E3, 256, {format:THREE.RGBAFormat, magFilter:THREE.LinearFilter, minFilter:THREE.LinearFilter});
    k.matrixAutoUpdate = !1;
    k.matrix.copy(this.matrix);
    k.matrixWorld.copy(this.matrixWorld);
    k.renderTarget.texture.encoding = THREE.sRGBEncoding;
    k.update(d, a);
    this.sh = LightProbeGenerator.fromCubeRenderTarget(d, k.renderTarget).sh;
  }
};
LightProbe.prototype.toJSON = function(a) {
  a = THREE.Light.prototype.toJSON.call(this, a);
  a.object.sh = this.sh.toArray();
  return a;
};
"use strict";
function Viewport(a) {
  this.offset = new THREE.Vector2(0, 0);
  this.size = new THREE.Vector2(1, 1);
  this.mode = void 0 !== a ? a : Viewport.RELATIVE;
  this.anchor = Viewport.TOP_LEFT;
  this.height = this.width = 1;
  this.viewport = new THREE.Vector4(0, 0, 1, 1);
}
Viewport.RELATIVE = 200;
Viewport.ABSOLUTE = 201;
Viewport.TOP_LEFT = 301;
Viewport.TOP_RIGHT = 302;
Viewport.BOTTOM_LEFT = 303;
Viewport.BOTTOM_RIGHT = 304;
Viewport.prototype.update = function(a) {
  var d;
  if (void 0 === a) {
    var k = d = 0;
    var b = this.width;
    a = this.height;
  } else {
    d = a.viewport.x, k = a.viewport.y, b = a.viewport.z, a = a.viewport.w;
  }
  if (this.mode === Viewport.RELATIVE) {
    var g = new THREE.Vector2(this.offset.x * b, this.offset.y * a);
    var f = new THREE.Vector2(this.size.x * b, this.size.y * a);
  } else {
    this.mode === Viewport.ABSOLUTE && (g = this.offset, f = this.size);
  }
  this.anchor === Viewport.BOTTOM_LEFT ? this.viewport.set(g.x + d, g.y + k, f.x, f.y) : this.anchor === Viewport.BOTTOM_RIGHT ? this.viewport.set(b - f.x - g.x + d, g.y + k, f.x, f.y) : this.anchor === Viewport.TOP_LEFT ? this.viewport.set(g.x + d, a - f.y - g.y + k, f.x, f.y) : this.anchor === Viewport.TOP_RIGHT && this.viewport.set(b - f.x - g.x + d, a - f.y - g.y + k, f.x, f.y);
};
Viewport.prototype.getAspectRatio = function() {
  return this.viewport.z / this.viewport.w;
};
Viewport.prototype.isInside = function(a, d) {
  return d.position.x > this.viewport.x && d.position.x < this.viewport.x + this.viewport.z && d.position.y < this.height - this.viewport.y && d.position.y > this.height - this.viewport.y - this.viewport.w;
};
Viewport.prototype.getNormalized = function() {
  var a = new THREE.Vector2;
  return function(d, k) {
    a.set((k.position.x - this.viewport.z - this.viewport.x) / this.viewport.z * 2 + 1, -(k.position.y - (this.height - (this.viewport.y + this.viewport.w))) / this.viewport.w * 2 + 1);
    return a;
  };
}();
Viewport.prototype.enable = function(a) {
  a.setViewport(this.viewport);
  a.setScissor(this.viewport);
};
Viewport.prototype.toJSON = function() {
  return {offset:this.offset.toArray(), size:this.size.toArray(), mode:this.mode, anchor:this.anchor};
};
Viewport.prototype.fromJSON = function(a) {
  this.offset.fromArray(a.offset);
  this.size.fromArray(a.size);
  this.mode = a.mode;
  this.anchor = a.anchor;
};
"use strict";
function PerspectiveCamera(a, d, k, b) {
  this.viewport = new Viewport;
  THREE.PerspectiveCamera.call(this, a, d, k, b);
  this.name = "camera";
  this.clearStencil = this.clearDepth = this.clearColor = !0;
  this.order = 0;
  this.composer = new EffectComposer;
  a = new RenderPass;
  a.renderToScreen = !0;
  this.composer.addPass(a);
}
PerspectiveCamera.prototype = Object.create(THREE.PerspectiveCamera.prototype);
PerspectiveCamera.prototype.resize = function(a, d, k) {
  this.viewport.width = a;
  this.viewport.height = d;
  this.viewport.update(k);
  this.aspect = this.viewport.getAspectRatio();
  this.updateProjectionMatrix();
  this.composer.setSize(this.viewport.viewport.z, this.viewport.viewport.w);
};
PerspectiveCamera.prototype.setupRenderer = function(a) {
  this.viewport.enable(a);
  a.clear(this.clearColor, this.clearDepth, this.clearStencil);
};
PerspectiveCamera.prototype.render = function(a, d) {
  this.composer.render(a, d, this, .016);
};
PerspectiveCamera.prototype.destroy = function() {
  var a = this.getScene();
  null !== a && a.removeCamera(this);
  THREE.Object3D.prototype.destroy.call(this);
};
PerspectiveCamera.prototype.updateProjectionMatrix = function() {
  var a = this.near * Math.tan(.5 * THREE.Math.DEG2RAD * this.fov) / this.zoom, d = 2 * a, k = this.aspect * d, b = -.5 * k;
  0 !== this.filmOffset && (b += this.near * this.filmOffset / this.getFilmWidth());
  this.projectionMatrix.makePerspective(b, b + k, a, a - d, this.near, this.far);
  this.projectionMatrixInverse.getInverse(this.projectionMatrix);
};
PerspectiveCamera.prototype.toJSON = function(a) {
  a = THREE.PerspectiveCamera.prototype.toJSON.call(this, a);
  a.object.clearColor = this.clearColor;
  a.object.clearDepth = this.clearDepth;
  a.object.clearStencil = this.clearStencil;
  a.object.viewport = this.viewport.toJSON();
  a.object.order = this.order;
  a.object.composer = this.composer.toJSON();
  return a;
};
"use strict";
function OrthographicCamera(a, d, k, b, g) {
  THREE.OrthographicCamera.call(this, -1, 1, 1, -1, b, g);
  this.name = "camera";
  this.size = void 0 != a ? a : 10;
  this.aspect = void 0 != d ? d : 1;
  this.mode = void 0 !== k ? k : OrthographicCamera.RESIZE_HORIZONTAL;
  this.viewport = new Viewport;
  this.clearStencil = this.clearDepth = this.clearColor = !0;
  this.order = 0;
  this.updateProjectionMatrix();
  this.composer = new EffectComposer;
  a = new RenderPass;
  a.renderToScreen = !0;
  this.composer.addPass(a);
}
OrthographicCamera.prototype = Object.create(THREE.OrthographicCamera.prototype);
OrthographicCamera.RESIZE_HORIZONTAL = 0;
OrthographicCamera.RESIZE_VERTICAL = 1;
OrthographicCamera.prototype.resize = function(a, d, k) {
  this.viewport.width = a;
  this.viewport.height = d;
  this.viewport.update(k);
  this.aspect = this.viewport.getAspectRatio();
  this.updateProjectionMatrix();
  this.composer.setSize(this.viewport.viewport.z, this.viewport.viewport.w);
};
OrthographicCamera.prototype.setupRenderer = function(a) {
  this.viewport.enable(a);
  a.clear(this.clearColor, this.clearDepth, this.clearStencil);
};
OrthographicCamera.prototype.render = function(a, d) {
  this.composer.render(a, d, this, .016);
};
OrthographicCamera.prototype.destroy = function() {
  var a = this.getScene();
  null !== a && a.removeCamera(this);
  THREE.Object3D.prototype.destroy.call(this);
};
OrthographicCamera.prototype.updateProjectionMatrix = function() {
  this.mode === OrthographicCamera.RESIZE_HORIZONTAL ? (this.top = this.size / 2, this.bottom = -this.top, this.right = this.top * this.aspect, this.left = -this.right) : this.mode === OrthographicCamera.RESIZE_VERTICAL && (this.right = this.size / 2, this.left = -this.right, this.top = this.right / this.aspect, this.bottom = -this.top);
  THREE.OrthographicCamera.prototype.updateProjectionMatrix.call(this);
};
OrthographicCamera.prototype.toJSON = function(a) {
  a = THREE.OrthographicCamera.prototype.toJSON.call(this, a);
  a.object.size = this.size;
  a.object.aspect = this.aspect;
  a.object.mode = this.mode;
  a.object.clearColor = this.clearColor;
  a.object.clearDepth = this.clearDepth;
  a.object.clearStencil = this.clearStencil;
  a.object.viewport = this.viewport.toJSON();
  a.object.order = this.order;
  a.object.composer = this.composer.toJSON();
  return a;
};
"use strict";
function CubeCamera(a, d, k, b) {
  THREE.Object3D.call(this);
  this.name = "cubecamera";
  this.type = "CubeCamera";
  this.near = void 0 !== a ? a : .01;
  this.far = void 0 !== d ? d : 1E4;
  this.resolution = void 0 !== k ? k : 256;
  this.autoUpdate = void 0 !== b ? b : !1;
  this.cameras = [];
  for (a = 0; 6 > a; a++) {
    d = new THREE.PerspectiveCamera(90, 1, this.near, this.far), d.parent = this, this.cameras.push(d);
  }
  this.cameras[0].up.set(0, -1, 0);
  this.cameras[0].lookAt(new THREE.Vector3(1, 0, 0));
  this.cameras[1].up.set(0, -1, 0);
  this.cameras[1].lookAt(new THREE.Vector3(-1, 0, 0));
  this.cameras[2].up.set(0, 0, 1);
  this.cameras[2].lookAt(new THREE.Vector3(0, 1, 0));
  this.cameras[3].up.set(0, 0, -1);
  this.cameras[3].lookAt(new THREE.Vector3(0, -1, 0));
  this.cameras[4].up.set(0, -1, 0);
  this.cameras[4].lookAt(new THREE.Vector3(0, 0, 1));
  this.cameras[5].up.set(0, -1, 0);
  this.cameras[5].lookAt(new THREE.Vector3(0, 0, -1));
  this.renderTarget = new THREE.WebGLCubeRenderTarget(new THREE.Vector2(this.resolution, this.resolution), {format:THREE.RGBFormat, magFilter:THREE.LinearFilter, minFilter:THREE.LinearFilter});
  this.cube = this.renderTarget.texture;
  this.cube.generateMipmaps = !1;
  this.cube.name = "cube";
  this.renderer = this.scene = null;
}
THREE._CubeCamera = THREE.CubeCamera;
THREE.CubeCamera = CubeCamera;
CubeCamera.prototype = Object.create(THREE.Object3D.prototype);
CubeCamera.prototype.initialize = function() {
  for (var a = this; null !== a.parent;) {
    a = a.parent, a instanceof Scene ? this.scene = a : a instanceof Program && (this.renderer = a.renderer);
  }
  THREE.Object3D.prototype.initialize.call(this);
};
CubeCamera.prototype.update = function(a) {
  this.autoUpdate && this.updateCubeMap(this.renderer, this.scene);
  THREE.Object3D.prototype.update.call(this, a);
};
CubeCamera.prototype.setResolution = function(a) {
  this.resolution = a;
  this.renderTarget.setSize(a, a);
};
CubeCamera.prototype.clear = function(a, d, k, b) {
  for (var g = a.getRenderTarget(), f = 0; 6 > f; f++) {
    a.setRenderTarget(this.renderTarget, f), a.clear(d, k, b);
  }
  a.setRenderTarget(g);
};
CubeCamera.prototype.updateCubeMap = function(a, d) {
  var k = a.autoClear;
  a.autoClear = !0;
  for (var b = 0; 6 > b; b++) {
    this.cameras[b].updateMatrixWorld(), a.setRenderTarget(this.renderTarget, b), a.render(d, this.cameras[b]);
  }
  a.autoClear = k;
};
CubeCamera.prototype.toJSON = function(a) {
  a = THREE.Object3D.prototype.toJSON.call(this, a);
  a.object.near = this.near;
  a.object.far = this.far;
  a.object.resolution = this.resolution;
  a.object.autoUpdate = this.autoUpdate;
  return a;
};
"use strict";
function AudioEmitter(a) {
  THREE.Object3D.call(this);
  this.name = "audio";
  this.type = "Audio";
  this.listener = new THREE.AudioListener;
  this.context = this.listener.context;
  this.matrixAutoUpdate = !1;
  this.gain = this.context.createGain();
  this.gain.connect(this.listener.getInput());
  this.buffer = null;
  this.filters = [];
  this.sourceType = "empty";
  this.audio = void 0 !== a ? a : null;
  this.autoplay = !0;
  this.playbackRate = this.volume = 1;
  this.startTime = 0;
  this.loop = !0;
  this.detune = 0;
  this.isPlaying = !1;
  this.hasPlaybackControl = !0;
  this.filters = [];
}
THREE.Audio = AudioEmitter;
AudioEmitter.prototype = Object.create(THREE.Object3D.prototype);
AudioEmitter.SOURCE = {EMPTY:"empty", BUFFER:"buffer", NODE:"audioNode"};
AudioEmitter.prototype.onEnded = function() {
  this.isPlaying = !1;
};
AudioEmitter.prototype.connect = function() {
  if (0 < this.filters.length) {
    this.source.connect(this.filters[0]);
    for (var a = 1, d = this.filters.length; a < d; a++) {
      this.filters[a - 1].connect(this.filters[a]);
    }
    this.filters[this.filters.length - 1].connect(this.getOutput());
  } else {
    this.source.connect(this.getOutput());
  }
  return this;
};
AudioEmitter.prototype.disconnect = function() {
  if (0 < this.filters.length) {
    this.source.disconnect(this.filters[0]);
    for (var a = 1, d = this.filters.length; a < d; a++) {
      this.filters[a - 1].disconnect(this.filters[a]);
    }
    this.filters[this.filters.length - 1].disconnect(this.getOutput());
  } else {
    this.source.disconnect(this.getOutput());
  }
  return this;
};
AudioEmitter.prototype.initialize = function() {
  if (null !== this.audio) {
    var a = this;
    this.audio.getAudioBuffer(this.context, function(d) {
      a.setBuffer(d);
    });
  } else {
    console.warn("nunuStudio: AudioEmitter audio is null.");
  }
  this.setVolume(this.volume);
  this.setPlaybackRate(this.playbackRate);
  THREE.Object3D.prototype.initialize.call(this);
};
AudioEmitter.prototype.setBuffer = function(a) {
  this.buffer = a;
  this.sourceType = "buffer";
  !0 === this.autoplay && this.play();
  return this;
};
AudioEmitter.prototype.play = function() {
  if (null === this.buffer) {
    console.warn("nunuStudio: Audio buffer not ready, audio will not play.");
  } else {
    this.isPlaying && console.warn("nunuStudio: Audio is already playing, its only possible to control the last playing instance.");
    var a = this.context.createBufferSource();
    a.buffer = this.buffer;
    a.detune.value = this.detune;
    a.loop = this.loop;
    a.onended = this.onEnded.bind(this);
    a.playbackRate.setValueAtTime(this.playbackRate, this.startTime);
    a.start(0, this.startTime);
    this.isPlaying = !0;
    this.source = a;
    return this.connect();
  }
};
AudioEmitter.prototype.pause = function() {
  this.source.stop();
  this.startTime = this.context.currentTime;
  this.isPlaying = !1;
  return this;
};
AudioEmitter.prototype.stop = function() {
  this.source.stop();
  this.startTime = 0;
  this.isPlaying = !1;
  return this;
};
AudioEmitter.prototype.setAudio = function(a) {
  this.audio = a;
  null !== this.buffer && (this.isPlaying && this.stop(), this.disconnect());
  var d = this;
  this.audio.getAudioBuffer(this.context, function(a) {
    d.setBuffer(a);
  });
};
AudioEmitter.prototype.getVolume = function() {
  return this.gain.gain.value;
};
AudioEmitter.prototype.setVolume = function(a) {
  this.volume = a;
  this.gain.gain.value = a;
  return this;
};
AudioEmitter.prototype.setLoop = function(a) {
  this.loop = a;
  this.isPlaying && (this.source.loop = this.loop);
  return this;
};
AudioEmitter.prototype.setDetune = function(a) {
  this.detune = a;
  !0 === this.isPlaying && this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, .01);
  return this;
};
AudioEmitter.prototype.getLoop = function() {
  return this.loop;
};
AudioEmitter.prototype.setPlaybackRate = function(a) {
  this.playbackRate = a;
  this.isPlaying && this.source.playbackRate.setValueAtTime(this.playbackRate, this.context.currentTime);
  return this;
};
AudioEmitter.prototype.getPlaybackRate = function() {
  return this.playbackRate;
};
AudioEmitter.prototype.getFilters = function() {
  return this.filters;
};
AudioEmitter.prototype.setFilters = function(a) {
  a || (a = []);
  this.isPlaying ? (this.disconnect(), this.filters = a, this.connect()) : this.filters = a;
  return this;
};
AudioEmitter.prototype.getFilter = function(a) {
  return this.getFilters()[void 0 !== a ? a : 0];
};
AudioEmitter.prototype.setFilter = function(a) {
  return this.setFilters(a ? [a] : []);
};
AudioEmitter.prototype.setNodeSource = function(a) {
  this.hasPlaybackControl = !1;
  this.sourceType = "audioNode";
  this.source = a;
  this.connect();
  return this;
};
AudioEmitter.prototype.getOutput = function() {
  return this.gain;
};
AudioEmitter.prototype.dispose = function() {
  this.isPlaying && (this.stop(), this.disconnect());
  THREE.Object3D.prototype.dispose.call(this);
};
AudioEmitter.prototype.toJSON = function(a) {
  var d = this.audio;
  a = THREE.Object3D.prototype.toJSON.call(this, a, function(a, b) {
    d = d.toJSON(a);
  });
  a.object.audio = d.uuid;
  a.object.volume = this.volume;
  a.object.autoplay = this.autoplay;
  a.object.startTime = this.startTime;
  a.object.playbackRate = this.playbackRate;
  a.object.loop = this.loop;
  return a;
};
"use strict";
function PositionalAudio(a) {
  AudioEmitter.call(this, a);
  this.type = "PositionalAudio";
  this.matrixAutoUpdate = !0;
  this.distanceModel = "inverse";
  this.panningModel = "HRTF";
  this.panner = this.context.createPanner();
  this.panner.connect(this.gain);
  this.panner.panningModel = this.panningModel;
  this.panner.distanceModel = this.distanceModel;
  this.panner.refDistance = 1;
  this.panner.maxDistance = 1E4;
  this.panner.rolloffFactor = 1;
  this.panner.coneInnerAngle = 360;
  this.panner.coneOuterAngle = 0;
  this.panner.coneOuterGain = 0;
  this.scene = null;
  this.tempPosition = new THREE.Vector3;
  this.tempPositionCamera = new THREE.Vector3;
  this.tempQuaternionCamera = new THREE.Quaternion;
}
THREE.PositionalAudio = PositionalAudio;
PositionalAudio.prototype = Object.create(AudioEmitter.prototype);
PositionalAudio.prototype.initialize = function() {
  AudioEmitter.prototype.initialize.call(this);
  for (var a = this.parent; null !== a;) {
    if (a instanceof Scene) {
      this.scene = a;
      break;
    }
    a = a.parent;
  }
};
PositionalAudio.prototype.update = function(a) {
  if (0 < this.scene.cameras.length) {
    var d = this.scene.cameras[0];
    this.getWorldPosition(this.tempPosition);
    d.getWorldPosition(this.tempPositionCamera);
    d.getWorldQuaternion(this.tempQuaternionCamera);
    this.tempPosition.sub(this.tempPositionCamera);
    this.tempPosition.z = -this.tempPosition.z;
    this.tempPosition.applyQuaternion(this.tempQuaternionCamera);
    this.panner.setPosition(this.tempPosition.x, this.tempPosition.z, this.tempPosition.y);
  } else {
    this.panner.setPosition(0, 0, 0), this.panner.setOrientation(0, 0, 0);
  }
  THREE.Object3D.prototype.update.call(this, a);
};
PositionalAudio.prototype.getOutput = function() {
  return this.panner;
};
PositionalAudio.prototype.getRefDistance = function() {
  return this.panner.refDistance;
};
PositionalAudio.prototype.setRefDistance = function(a) {
  this.panner.refDistance = a;
};
PositionalAudio.prototype.getRolloffFactor = function() {
  return this.panner.rolloffFactor;
};
PositionalAudio.prototype.setRolloffFactor = function(a) {
  this.panner.rolloffFactor = a;
};
PositionalAudio.prototype.getDistanceModel = function() {
  return this.panner.distanceModel;
};
PositionalAudio.prototype.setDistanceModel = function(a) {
  this.panner.distanceModel = a;
};
PositionalAudio.prototype.getMaxDistance = function() {
  return this.panner.maxDistance;
};
PositionalAudio.prototype.setMaxDistance = function(a) {
  this.panner.maxDistance = a;
};
PositionalAudio.prototype.toJSON = function(a) {
  a = AudioEmitter.prototype.toJSON.call(this, a);
  a.object.distanceModel = this.distanceModel;
  a.object.panningModel = this.panningModel;
  return a;
};
function Script(a, d) {
  THREE.Group.call(this);
  this.type = "Script";
  this.name = "script";
  this.code = void 0 !== a ? a : Script.DEFAULT;
  this.mode = void 0 !== d ? d : Script.APPEND;
  this.script = {};
  this.scene = this.program = null;
}
Script.prototype = Object.create(THREE.Group.prototype);
Script.includeRegex = /include[ ]*\([ \n]*["'].+?["'][ \n]*\);*/gi;
Script.includeRegexStart = /include[ ]*\([ \n]*["']/gi;
Script.includeRegexEnd = /["'][ \n]*\);*/gi;
Script.DEFAULT = "function initialize()\n{\n\t// TODO <INITIALIZATION CODE>\n}\n\nfunction update(delta)\n{\n\t// TODO <UPDATE CODE>\n}\n";
Script.METHODS = "initialize update dispose onMouseOver onResize onAppData".split(" ");
Script.APPEND = 100;
Script.EVALUATE = 101;
Script.INCLUDE = 102;
Script.getIncludes = function(a) {
  for (var d = [], k = new RegExp(Script.includeRegex, "gi");;) {
    var b = k.exec(a);
    if (null === b) {
      break;
    }
    b = b[0];
    b = b.replace(Script.includeRegexStart, "");
    b = b.replace(Script.includeRegexEnd, "");
    d.push(b);
  }
  return d;
};
Script.removeIncludes = function(a) {
  return a.replace(Script.includeRegex, "");
};
Script.prototype.initialize = function() {
  for (var a = this; null !== a.parent;) {
    a = a.parent, a instanceof Scene ? this.scene = a : a instanceof Program && (this.program = a);
  }
  THREE.Object3D.prototype.initialize.call(this);
  var d = this;
  this.compileCode(this.code, function() {
    void 0 !== d.script.initialize && d.script.initialize.call(d);
  });
};
Script.prototype.update = function(a) {
  if (void 0 !== this.script.onMouseOver) {
    var d = this.scene.raycaster.intersectObjects(this.children, !0);
    0 < d.length && this.script.onMouseOver.call(this, d);
  }
  void 0 !== this.script.update && this.script.update.call(this, a);
  THREE.Object3D.prototype.update.call(this, a);
};
Script.prototype.dispose = function() {
  void 0 !== this.script.dispose && this.script.dispose.call(this);
  THREE.Object3D.prototype.dispose.call(this);
};
Script.prototype.resize = function(a, d) {
  void 0 !== this.script.onResize && this.script.onResize.call(this, a, d);
};
Script.prototype.appData = function(a) {
  void 0 !== this.script.onAppData && this.script.onAppData.call(this, a);
};
Script.prototype.compileCode = function(a, d) {
  void 0 !== a && (this.code = a);
  try {
    a = this.code;
    for (var k = 0; k < Script.METHODS.length; k++) {
      var b = Script.METHODS[k];
      a += "\nif(this." + b + " == undefined && typeof " + b + " !== 'undefined'){this." + b + " = " + b + ";}";
    }
    if (this.mode === Script.APPEND) {
      var g = Script.getIncludes(a);
      a = Script.removeIncludes(a);
      for (k = 0; k < g.length; k++) {
        var f = this.program.getResourceByName(g[k]);
        if (null === f) {
          if (f = FileSystem.readFile(g[k], !0), null !== f) {
            a = f + "\n" + a;
          } else {
            throw Error("Script include() library " + g[k] + " not found.");
          }
        } else {
          a = f.data + "\n" + a;
        }
      }
      a += '\nfunction include(name)\t\t\t{\t\t\t\tconsole.warn("nunuStudio: Script running in append mode, " + name + " cannot be included in runtime.");\t\t\t}';
    } else {
      if (this.mode === Script.EVALUATE) {
        a += '\nfunction include(name)\t\t\t{\t\t\t\tvar text = program.getResourceByName(name);\t\t\t\tif(text === null)\t\t\t\t{\t\t\t\t\ttext = FileSystem.readFile(name, true);\t\t\t\t\tif(text !== null)\t\t\t\t\t{\t\t\t\t\t\tnew Function(text).call(this);\t\t\t\t\t}\t\t\t\t\telse\t\t\t\t\t{\t\t\t\t\t\tconsole.warn("nunuStudio: Javascript file " + name + " not found.");\t\t\t\t\t}\t\t\t\t}\t\t\t\telse\t\t\t\t{\t\t\t\t\tnew Function(text.data).call(this);\t\t\t\t}\t\t\t}';
      } else {
        if (this.mode === Script.INCLUDE) {
          g = Script.getIncludes(a);
          a = Script.removeIncludes(a);
          var e = 0, r = [];
          for (k = 0; k < g.length; k++) {
            var q = this.program.getResourceByName(g[k]);
            if (null !== q) {
              var m = new Blob([q.data], {type:"text/plain"});
              r.push(URL.createObjectURL(m));
            } else {
              var n = FileSystem.readFile(g[k], !0);
              if (null !== n) {
                m = new Blob([n], {type:"text/plain"}), r.push(URL.createObjectURL(m));
              } else {
                throw Error("Script include() library " + g[k] + " not found.");
              }
            }
          }
          if (0 < r.length) {
            for (k = 0; k < r.length; k++) {
              var c = document.createElement("script");
              c.type = "text/javascript";
              c.async = !0;
              c.src = url;
              c.onload = function() {
                e++;
                e === r.length && d();
              };
              c.onerror = c.onload;
              document.body.appendChild(c);
            }
          } else {
            d();
          }
        }
      }
    }
    var h = new Function("Keyboard, Mouse, self, program, scene", a);
    try {
      this.script = new h(this.program.keyboard, this.program.mouse, this, this.program, this.scene);
    } catch (t) {
      throw console.warn("nunuStudio: Error initializing script code", t), "Error initializing script code";
    }
    this.mode !== Script.INCLUDE && d();
  } catch (t) {
    throw console.warn("nunuStudio: Error compiling script code", t), "Error compiling script code";
  }
};
Script.prototype.toJSON = function(a) {
  a = THREE.Object3D.prototype.toJSON.call(this, a);
  a.object.code = this.code;
  a.object.mode = this.mode;
  return a;
};
"use strict";
function PhysicsObject() {
  THREE.Group.call(this);
  this.name = "physics";
  this.type = "Physics";
  this.body = new CANNON.Body;
  this.body.type = CANNON.Body.DYNAMIC;
  this.body.mass = 1;
  this.world = null;
  this.mode = PhysicsObject.WORLD;
}
PhysicsObject.prototype = Object.create(THREE.Group.prototype);
PhysicsObject.WORLD = 100;
PhysicsObject.LOCAL = 101;
PhysicsObject.prototype.initialize = function() {
  if (this.mode === PhysicsObject.WORLD) {
    this.body.position.copy(this.position), this.body.quaternion.copy(this.quaternion);
  } else {
    if (this.mode === PhysicsObject.LOCAL) {
      var a = new THREE.Vector3;
      this.getWorldPosition(a);
      this.body.position.copy(a);
      a = new THREE.Quaternion;
      this.getWorldQuaternion(a);
      this.body.quaternion.copy(a);
    }
  }
  for (a = this; null !== a.parent;) {
    a = a.parent, a instanceof Scene && (this.world = a.world, this.world.addBody(this.body));
  }
  THREE.Object3D.prototype.initialize.call(this);
};
PhysicsObject.prototype.update = function(a) {
  if (this.mode === PhysicsObject.WORLD) {
    this.position.copy(this.body.position), this.body.fixedRotation || this.quaternion.copy(this.body.quaternion);
  } else {
    if (this.mode === PhysicsObject.LOCAL) {
      var d = new THREE.Matrix4;
      if (!this.body.fixedRotation) {
        var k = new THREE.Quaternion;
        k.copy(this.body.quaternion);
        d.makeRotationFromQuaternion(k);
      }
      d.setPosition(this.body.position.x, this.body.position.y, this.body.position.z);
      k = new THREE.Matrix4;
      k.getInverse(this.parent.matrixWorld);
      var b = new THREE.Vector3;
      k.multiply(d);
      k.decompose(this.position, this.quaternion, b);
    }
  }
  THREE.Object3D.prototype.update.call(this, a);
};
PhysicsObject.prototype.addShape = function(a) {
  a instanceof CANNON.Shape && this.body.addShape(a);
};
PhysicsObject.prototype.toJSON = function(a) {
  a = THREE.Object3D.prototype.toJSON.call(this, a);
  a.object.mode = this.mode;
  a.object.body = {};
  a.object.body.type = this.body.type;
  a.object.body.mass = this.body.mass;
  a.object.body.linearDamping = this.body.linearDamping;
  a.object.body.angularDamping = this.body.angularDamping;
  a.object.body.allowSleep = this.body.allowSleep;
  a.object.body.sleepSpeedLimit = this.body.sleepSpeedLimit;
  a.object.body.sleepTimeLimit = this.body.sleepTimeLimit;
  a.object.body.collisionFilterGroup = this.body.collisionFilterGroup;
  a.object.body.collisionFilterMask = this.body.collisionFilterMask;
  a.object.body.fixedRotation = this.body.fixedRotation;
  a.object.body.shapes = [];
  for (var d = this.body.shapes, k = 0; k < d.length; k++) {
    var b = d[k], g = {};
    g.type = b.type;
    b.type === CANNON.Shape.types.SPHERE ? g.radius = b.radius : b.type === CANNON.Shape.types.BOX ? (g.halfExtents = {}, g.halfExtents.x = b.halfExtents.x, g.halfExtents.y = b.halfExtents.y, g.halfExtents.z = b.halfExtents.z) : b.type === CANNON.Shape.types.CONVEXPOLYHEDRON ? (g.vertices = b.vertices, g.faces = b.faces) : b.type === CANNON.Shape.types.TRIMESH && (g.vertices = b.vertices, g.normals = b.normals, g.edges = b.edges, g.indices = b.indices);
    a.object.body.shapes[k] = g;
  }
  return a;
};
"use strict";
function SpineAnimation(a, d, k, b) {
  void 0 === b && (b = []);
  var g = new spine.TextureAtlas(d, function(a) {
    for (var e = 0; e < b.length; e++) {
      if (b[e].name === a) {
        var f = new SpineTexture(b[e].texture);
        break;
      }
    }
    e === b.length && (f = new SpineTexture(new Texture(new Image(k + "/" + a))), b.push({name:a, texture:f.texture}));
    a = f.texture.image;
    e = f.texture.source;
    if (0 < e.width && 0 < e.height) {
      a.width = e.width, a.height = e.height;
    } else {
      if (0 !== a.naturalWidth && 0 !== a.naturalHeight) {
        a.width = a.naturalWidth, a.height = a.naturalHeight, e.width = a.width, e.height = a.height;
      } else {
        e = d.search("size: ");
        var g = d.search("\nformat");
        e = d.substring(e + 6, g);
        e = e.split(",");
        a.width = parseInt(e[0]);
        a.height = parseInt(e[1]);
      }
    }
    return f;
  });
  g = new spine.AtlasAttachmentLoader(g);
  g = (new spine.SkeletonJson(g)).readSkeletonData(a);
  spine.threejs.SkeletonMesh.call(this, g);
  this.name = "spine";
  this.type = "SpineAnimation";
  this.scale.set(.01, .01, .01);
  this.json = a;
  this.atlas = d;
  this.textures = b;
  this.skin = 0 < this.getSkins().length ? this.getSkins()[0].name : null;
  this.animation = 0 < this.getAnimations().length ? this.getAnimations()[0].name : null;
  this.track = 0;
  this.loop = !0;
  this.clock = new THREE.Clock;
  this.play();
}
SpineAnimation.prototype = Object.create(spine.threejs.SkeletonMesh.prototype);
SpineAnimation.prototype.update = function(a) {
  spine.threejs.SkeletonMesh.prototype.update.call(this, a);
  THREE.Object3D.prototype.update.call(this);
};
SpineAnimation.prototype.onBeforeRender = function() {
  this.state.update(this.clock.getDelta());
  this.state.apply(this.skeleton);
  this.skeleton.updateWorldTransform();
  this.updateGeometry();
};
SpineAnimation.prototype.play = function() {
  null !== this.animation && this.setAnimation(this.track, this.animation, this.loop);
  null !== this.skin && this.setSkin(this.skin);
};
SpineAnimation.prototype.getAnimations = function() {
  return this.state.data.skeletonData.animations;
};
SpineAnimation.prototype.setAnimation = function(a, d, k) {
  try {
    void 0 !== a && (this.track = a), void 0 !== d && (this.animation = d), void 0 !== k && (this.loop = k), this.state.setAnimation(this.track, this.animation, this.loop);
  } catch (b) {
    this.animation = null, console.warn("nunuStudio: Error setting spine animation " + name + " on track " + a);
  }
};
SpineAnimation.prototype.getSkins = function() {
  return this.state.data.skeletonData.skins;
};
SpineAnimation.prototype.setSkin = function(a) {
  try {
    this.skeleton.setSkinByName(a), this.skin = a;
  } catch (d) {
    this.skin = null, console.warn("nunuStudio: Error setting spine skin " + a);
  }
};
SpineAnimation.prototype.toJSON = function(a) {
  var d = [], k = this;
  a = THREE.Object3D.prototype.toJSON.call(this, a, function(a, g) {
    for (g = 0; g < k.textures.length; g++) {
      var b = k.textures[g].texture.toJSON(a);
      d.push({name:k.textures[g].name, texture:b.uuid});
    }
  });
  a.object.json = this.json;
  a.object.atlas = this.atlas;
  a.object.textures = d;
  null !== this.animation && (a.object.animation = this.animation, a.object.track = this.track, a.object.loop = this.loop);
  null !== this.skin && (a.object.skin = this.skin);
  return a;
};
"use strict";
function SpineTexture(a) {
  spine.threejs.ThreeJsTexture.call(this, a.image);
  this.texture = a;
  this.texture.flipY = !1;
}
SpineTexture.prototype = Object.create(spine.threejs.ThreeJsTexture.prototype);
"use strict";
function ParticleEmitterControl(a) {
  a = ShaderUtils.ensureTypedArg(a, ShaderUtils.types.OBJECT, {});
  a.position = ShaderUtils.ensureTypedArg(a.position, ShaderUtils.types.OBJECT, {});
  a.velocity = ShaderUtils.ensureTypedArg(a.velocity, ShaderUtils.types.OBJECT, {});
  a.acceleration = ShaderUtils.ensureTypedArg(a.acceleration, ShaderUtils.types.OBJECT, {});
  a.radius = ShaderUtils.ensureTypedArg(a.radius, ShaderUtils.types.OBJECT, {});
  a.drag = ShaderUtils.ensureTypedArg(a.drag, ShaderUtils.types.OBJECT, {});
  a.rotation = ShaderUtils.ensureTypedArg(a.rotation, ShaderUtils.types.OBJECT, {});
  a.color = ShaderUtils.ensureTypedArg(a.color, ShaderUtils.types.OBJECT, {});
  a.opacity = ShaderUtils.ensureTypedArg(a.opacity, ShaderUtils.types.OBJECT, {});
  a.size = ShaderUtils.ensureTypedArg(a.size, ShaderUtils.types.OBJECT, {});
  a.angle = ShaderUtils.ensureTypedArg(a.angle, ShaderUtils.types.OBJECT, {});
  a.wiggle = ShaderUtils.ensureTypedArg(a.wiggle, ShaderUtils.types.OBJECT, {});
  a.maxAge = ShaderUtils.ensureTypedArg(a.maxAge, ShaderUtils.types.OBJECT, {});
  a.onParticleSpawn && console.warn("nunuStudio: onParticleSpawn has been removed. Please set properties directly to alter values at runtime.");
  this.uuid = THREE.Math.generateUUID();
  this.type = ShaderUtils.ensureTypedArg(a.type, ShaderUtils.types.NUMBER, ParticleDistributions.BOX);
  this.position = {_value:ShaderUtils.ensureInstanceOf(a.position.value, THREE.Vector3, new THREE.Vector3), _spread:ShaderUtils.ensureInstanceOf(a.position.spread, THREE.Vector3, new THREE.Vector3), _spreadClamp:ShaderUtils.ensureInstanceOf(a.position.spreadClamp, THREE.Vector3, new THREE.Vector3), _distribution:ShaderUtils.ensureTypedArg(a.position.distribution, ShaderUtils.types.NUMBER, this.type), _randomise:ShaderUtils.ensureTypedArg(a.position.randomise, ShaderUtils.types.BOOLEAN, !1), _radius:ShaderUtils.ensureTypedArg(a.position.radius, 
  ShaderUtils.types.NUMBER, 10), _radiusScale:ShaderUtils.ensureInstanceOf(a.position.radiusScale, THREE.Vector3, new THREE.Vector3(1, 1, 1)), _distributionClamp:ShaderUtils.ensureTypedArg(a.position.distributionClamp, ShaderUtils.types.NUMBER, 0)};
  this.velocity = {_value:ShaderUtils.ensureInstanceOf(a.velocity.value, THREE.Vector3, new THREE.Vector3), _spread:ShaderUtils.ensureInstanceOf(a.velocity.spread, THREE.Vector3, new THREE.Vector3), _distribution:ShaderUtils.ensureTypedArg(a.velocity.distribution, ShaderUtils.types.NUMBER, this.type), _randomise:ShaderUtils.ensureTypedArg(a.position.randomise, ShaderUtils.types.BOOLEAN, !1)};
  this.acceleration = {_value:ShaderUtils.ensureInstanceOf(a.acceleration.value, THREE.Vector3, new THREE.Vector3), _spread:ShaderUtils.ensureInstanceOf(a.acceleration.spread, THREE.Vector3, new THREE.Vector3), _distribution:ShaderUtils.ensureTypedArg(a.acceleration.distribution, ShaderUtils.types.NUMBER, this.type), _randomise:ShaderUtils.ensureTypedArg(a.position.randomise, ShaderUtils.types.BOOLEAN, !1)};
  this.drag = {_value:ShaderUtils.ensureTypedArg(a.drag.value, ShaderUtils.types.NUMBER, 0), _spread:ShaderUtils.ensureTypedArg(a.drag.spread, ShaderUtils.types.NUMBER, 0), _randomise:ShaderUtils.ensureTypedArg(a.position.randomise, ShaderUtils.types.BOOLEAN, !1)};
  this.wiggle = {_value:ShaderUtils.ensureTypedArg(a.wiggle.value, ShaderUtils.types.NUMBER, 0), _spread:ShaderUtils.ensureTypedArg(a.wiggle.spread, ShaderUtils.types.NUMBER, 0)};
  this.rotation = {_axis:ShaderUtils.ensureInstanceOf(a.rotation.axis, THREE.Vector3, new THREE.Vector3(0, 1, 0)), _axisSpread:ShaderUtils.ensureInstanceOf(a.rotation.axisSpread, THREE.Vector3, new THREE.Vector3), _angle:ShaderUtils.ensureTypedArg(a.rotation.angle, ShaderUtils.types.NUMBER, 0), _angleSpread:ShaderUtils.ensureTypedArg(a.rotation.angleSpread, ShaderUtils.types.NUMBER, 0), _static:ShaderUtils.ensureTypedArg(a.rotation.static, ShaderUtils.types.BOOLEAN, !1), _center:ShaderUtils.ensureInstanceOf(a.rotation.center, 
  THREE.Vector3, this.position._value.clone()), _randomise:ShaderUtils.ensureTypedArg(a.position.randomise, ShaderUtils.types.BOOLEAN, !1)};
  this.maxAge = {_value:ShaderUtils.ensureTypedArg(a.maxAge.value, ShaderUtils.types.NUMBER, 2), _spread:ShaderUtils.ensureTypedArg(a.maxAge.spread, ShaderUtils.types.NUMBER, 0)};
  this.color = {_value:ShaderUtils.ensureArrayInstanceOf(a.color.value, THREE.Color, new THREE.Color), _spread:ShaderUtils.ensureArrayInstanceOf(a.color.spread, THREE.Vector3, new THREE.Vector3), _randomise:ShaderUtils.ensureTypedArg(a.position.randomise, ShaderUtils.types.BOOLEAN, !1)};
  this.opacity = {_value:ShaderUtils.ensureArrayTypedArg(a.opacity.value, ShaderUtils.types.NUMBER, 1), _spread:ShaderUtils.ensureArrayTypedArg(a.opacity.spread, ShaderUtils.types.NUMBER, 0), _randomise:ShaderUtils.ensureTypedArg(a.position.randomise, ShaderUtils.types.BOOLEAN, !1)};
  this.size = {_value:ShaderUtils.ensureArrayTypedArg(a.size.value, ShaderUtils.types.NUMBER, 1), _spread:ShaderUtils.ensureArrayTypedArg(a.size.spread, ShaderUtils.types.NUMBER, 0), _randomise:ShaderUtils.ensureTypedArg(a.position.randomise, ShaderUtils.types.BOOLEAN, !1)};
  this.angle = {_value:ShaderUtils.ensureArrayTypedArg(a.angle.value, ShaderUtils.types.NUMBER, 0), _spread:ShaderUtils.ensureArrayTypedArg(a.angle.spread, ShaderUtils.types.NUMBER, 0), _randomise:ShaderUtils.ensureTypedArg(a.position.randomise, ShaderUtils.types.BOOLEAN, !1)};
  this.particleCount = ShaderUtils.ensureTypedArg(a.particleCount, ShaderUtils.types.NUMBER, 100);
  this.duration = ShaderUtils.ensureTypedArg(a.duration, ShaderUtils.types.NUMBER, null);
  this.isStatic = ShaderUtils.ensureTypedArg(a.isStatic, ShaderUtils.types.BOOLEAN, !1);
  this.activeMultiplier = ShaderUtils.ensureTypedArg(a.activeMultiplier, ShaderUtils.types.NUMBER, 1);
  this.direction = ShaderUtils.ensureTypedArg(a.direction, ShaderUtils.types.NUMBER, 1);
  this.alive = ShaderUtils.ensureTypedArg(a.alive, ShaderUtils.types.BOOLEAN, !0);
  this.activeParticleCount = this.age = this.attributeEnd = this.attributeOffset = this.activationIndex = this.particlesPerSecond = 0;
  this.paramsArray = this.attributes = this.group = null;
  this.resetFlags = {position:ShaderUtils.ensureTypedArg(a.position.randomise, ShaderUtils.types.BOOLEAN, !1) || ShaderUtils.ensureTypedArg(a.radius.randomise, ShaderUtils.types.BOOLEAN, !1), velocity:ShaderUtils.ensureTypedArg(a.velocity.randomise, ShaderUtils.types.BOOLEAN, !1), acceleration:ShaderUtils.ensureTypedArg(a.acceleration.randomise, ShaderUtils.types.BOOLEAN, !1) || ShaderUtils.ensureTypedArg(a.drag.randomise, ShaderUtils.types.BOOLEAN, !1), rotation:ShaderUtils.ensureTypedArg(a.rotation.randomise, 
  ShaderUtils.types.BOOLEAN, !1), rotationCenter:ShaderUtils.ensureTypedArg(a.rotation.randomise, ShaderUtils.types.BOOLEAN, !1), size:ShaderUtils.ensureTypedArg(a.size.randomise, ShaderUtils.types.BOOLEAN, !1), color:ShaderUtils.ensureTypedArg(a.color.randomise, ShaderUtils.types.BOOLEAN, !1), opacity:ShaderUtils.ensureTypedArg(a.opacity.randomise, ShaderUtils.types.BOOLEAN, !1), angle:ShaderUtils.ensureTypedArg(a.angle.randomise, ShaderUtils.types.BOOLEAN, !1)};
  this.updateFlags = {};
  this.updateCounts = {};
  this.updateMap = {maxAge:"params", position:"position", velocity:"velocity", acceleration:"acceleration", drag:"acceleration", wiggle:"params", rotation:"rotation", size:"size", color:"color", opacity:"opacity", angle:"angle"};
  for (var d in this.updateMap) {
    this.updateMap.hasOwnProperty(d) && (this.updateCounts[this.updateMap[d]] = 0, this.updateFlags[this.updateMap[d]] = !1, this._createGetterSetters(this[d], d));
  }
  this.bufferUpdateRanges = {};
  this.attributeKeys = null;
  this.attributeCount = 0;
  ShaderUtils.ensureValueOverLifetimeCompliance(this.color, ParticleEmitter.valueOverLifetimeLength, ParticleEmitter.valueOverLifetimeLength);
  ShaderUtils.ensureValueOverLifetimeCompliance(this.opacity, ParticleEmitter.valueOverLifetimeLength, ParticleEmitter.valueOverLifetimeLength);
  ShaderUtils.ensureValueOverLifetimeCompliance(this.size, ParticleEmitter.valueOverLifetimeLength, ParticleEmitter.valueOverLifetimeLength);
  ShaderUtils.ensureValueOverLifetimeCompliance(this.angle, ParticleEmitter.valueOverLifetimeLength, ParticleEmitter.valueOverLifetimeLength);
}
ParticleEmitterControl.constructor = ParticleEmitterControl;
ParticleEmitterControl.prototype._createGetterSetters = function(a, d) {
  var k = this, b;
  for (b in a) {
    if (a.hasOwnProperty(b)) {
      var g = b.replace("_", "");
      Object.defineProperty(a, g, {get:function(a) {
        return function() {
          return this[a];
        };
      }(b), set:function(a) {
        return function(b) {
          var e = k.updateMap[d], f = this[a], g = ParticleEmitter.valueOverLifetimeLength;
          "_rotationCenter" === a ? (k.updateFlags.rotationCenter = !0, k.updateCounts.rotationCenter = 0) : "_randomise" === a ? k.resetFlags[e] = b : (k.updateFlags[e] = !0, k.updateCounts[e] = 0);
          k.group._updateDefines();
          this[a] = b;
          Array.isArray(f) && ShaderUtils.ensureValueOverLifetimeCompliance(k[d], g, g);
        };
      }(b)});
    }
  }
};
ParticleEmitterControl.prototype._setBufferUpdateRanges = function(a) {
  this.attributeKeys = a;
  this.attributeCount = a.length;
  for (var d = this.attributeCount - 1; 0 <= d; --d) {
    this.bufferUpdateRanges[a[d]] = {min:Number.POSITIVE_INFINITY, max:Number.NEGATIVE_INFINITY};
  }
};
ParticleEmitterControl.prototype._calculatePPSValue = function(a) {
  var d = this.particleCount;
  this.particlesPerSecond = this.duration ? d / (a < this.duration ? a : this.duration) : d / a;
};
ParticleEmitterControl.prototype._setAttributeOffset = function(a) {
  this.activationIndex = this.attributeOffset = a;
  this.activationEnd = a + this.particleCount;
};
ParticleEmitterControl.prototype._assignValue = function(a, d) {
  switch(a) {
    case "position":
      this._assignPositionValue(d);
      break;
    case "velocity":
    case "acceleration":
      this._assignForceValue(d, a);
      break;
    case "size":
    case "opacity":
      this._assignAbsLifetimeValue(d, a);
      break;
    case "angle":
      this._assignAngleValue(d);
      break;
    case "params":
      this._assignParamsValue(d);
      break;
    case "rotation":
      this._assignRotationValue(d);
      break;
    case "color":
      this._assignColorValue(d);
  }
};
ParticleEmitterControl.prototype._assignPositionValue = function(a) {
  var d = this.position, k = this.attributes.position, b = d._value, g = d._spread;
  switch(d._distribution) {
    case ParticleDistributions.BOX:
      ShaderUtils.randomVector3(k, a, b, g, d._spreadClamp);
      break;
    case ParticleDistributions.SPHERE:
      ShaderUtils.randomVector3OnSphere(k, a, b, d._radius, d._spread.x, d._radiusScale, d._spreadClamp.x, d._distributionClamp || this.particleCount);
      break;
    case ParticleDistributions.DISC:
      ShaderUtils.randomVector3OnDisc(k, a, b, d._radius, d._spread.x, d._radiusScale, d._spreadClamp.x);
  }
};
ParticleEmitterControl.prototype._assignForceValue = function(a, d) {
  var k = this[d], b = k._value, g = k._spread;
  switch(k._distribution) {
    case ParticleDistributions.BOX:
      ShaderUtils.randomVector3(this.attributes[d], a, b, g);
      break;
    case ParticleDistributions.SPHERE:
      var f = this.attributes.position.typedArray.array;
      var e = 3 * a;
      b = f[e];
      g = f[e + 1];
      f = f[e + 2];
      ShaderUtils.randomDirectionVector3OnSphere(this.attributes[d], a, b, g, f, this.position._value, k._value.x, k._spread.x);
      break;
    case ParticleDistributions.DISC:
      f = this.attributes.position.typedArray.array, e = 3 * a, b = f[e], g = f[e + 1], f = f[e + 2], ShaderUtils.randomDirectionVector3OnDisc(this.attributes[d], a, b, g, f, this.position._value, k._value.x, k._spread.x);
  }
  "acceleration" === d && (d = ShaderUtils.clamp(ShaderUtils.randomFloat(this.drag._value, this.drag._spread), 0, 1), this.attributes.acceleration.typedArray.array[4 * a + 3] = d);
};
ParticleEmitterControl.prototype._assignAbsLifetimeValue = function(a, d) {
  var k = this.attributes[d].typedArray;
  d = this[d];
  ShaderUtils.arrayValuesAreEqual(d._value) && ShaderUtils.arrayValuesAreEqual(d._spread) ? (d = Math.abs(ShaderUtils.randomFloat(d._value[0], d._spread[0])), k.setVec4Components(a, d, d, d, d)) : k.setVec4Components(a, Math.abs(ShaderUtils.randomFloat(d._value[0], d._spread[0])), Math.abs(ShaderUtils.randomFloat(d._value[1], d._spread[1])), Math.abs(ShaderUtils.randomFloat(d._value[2], d._spread[2])), Math.abs(ShaderUtils.randomFloat(d._value[3], d._spread[3])));
};
ParticleEmitterControl.prototype._assignAngleValue = function(a) {
  var d = this.attributes.angle.typedArray, k = this.angle;
  ShaderUtils.arrayValuesAreEqual(k._value) && ShaderUtils.arrayValuesAreEqual(k._spread) ? (k = ShaderUtils.randomFloat(k._value[0], k._spread[0]), d.setVec4Components(a, k, k, k, k)) : d.setVec4Components(a, ShaderUtils.randomFloat(k._value[0], k._spread[0]), ShaderUtils.randomFloat(k._value[1], k._spread[1]), ShaderUtils.randomFloat(k._value[2], k._spread[2]), ShaderUtils.randomFloat(k._value[3], k._spread[3]));
};
ParticleEmitterControl.prototype._assignParamsValue = function(a) {
  this.attributes.params.typedArray.setVec4Components(a, this.isStatic ? 1 : 0, 0, Math.abs(ShaderUtils.randomFloat(this.maxAge._value, this.maxAge._spread)), ShaderUtils.randomFloat(this.wiggle._value, this.wiggle._spread));
};
ParticleEmitterControl.prototype._assignRotationValue = function(a) {
  this.attributes.rotation.typedArray.setVec3Components(a, ShaderUtils.getPackedRotationAxis(this.rotation._axis, this.rotation._axisSpread), ShaderUtils.randomFloat(this.rotation._angle, this.rotation._angleSpread), this.rotation._static ? 0 : 1);
  this.attributes.rotationCenter.typedArray.setVec3(a, this.rotation._center);
};
ParticleEmitterControl.prototype._assignColorValue = function(a) {
  ShaderUtils.randomColorAsHex(this.attributes.color, a, this.color._value, this.color._spread);
};
ParticleEmitterControl.prototype._resetParticle = function(a) {
  for (var d = this.resetFlags, k = this.updateFlags, b = this.updateCounts, g = this.attributeKeys, f, e, r = this.attributeCount - 1; 0 <= r; --r) {
    if (f = g[r], e = k[f], !0 === d[f] || !0 === e) {
      this._assignValue(f, a), this._updateAttributeUpdateRange(f, a), !0 === e && b[f] === this.particleCount ? (k[f] = !1, b[f] = 0) : 1 == e && ++b[f];
    }
  }
};
ParticleEmitterControl.prototype._updateAttributeUpdateRange = function(a, d) {
  a = this.bufferUpdateRanges[a];
  a.min = Math.min(d, a.min);
  a.max = Math.max(d, a.max);
};
ParticleEmitterControl.prototype._resetBufferRanges = function() {
  for (var a = this.bufferUpdateRanges, d = this.bufferUpdateKeys, k = this.bufferUpdateCount - 1; 0 <= k; --k) {
    var b = d[k];
    a[b].min = Number.POSITIVE_INFINITY;
    a[b].max = Number.NEGATIVE_INFINITY;
  }
};
ParticleEmitterControl.prototype._onRemove = function() {
  this.activeParticleCount = this.activationIndex = this.attributeOffset = this.particlesPerSecond = 0;
  this.paramsArray = this.attributes = this.group = null;
  this.age = 0;
};
ParticleEmitterControl.prototype._decrementParticleCount = function() {
  --this.activeParticleCount;
};
ParticleEmitterControl.prototype._incrementParticleCount = function() {
  ++this.activeParticleCount;
};
ParticleEmitterControl.prototype._checkParticleAges = function(a, d, k, b) {
  --d;
  for (var g, f, e, r; d >= a; --d) {
    g = 4 * d, r = k[g], 0 !== r && (e = k[g + 1], f = k[g + 2], 1 === this.direction ? (e += b, e >= f && (r = e = 0, this._decrementParticleCount())) : (e -= b, 0 >= e && (e = f, r = 0, this._decrementParticleCount())), k[g] = r, k[g + 1] = e, this._updateAttributeUpdateRange("params", d));
  }
};
ParticleEmitterControl.prototype._activateParticles = function(a, d, k, b) {
  for (var g = this.direction, f = a, e, r; f < d; ++f) {
    if (e = 4 * f, 0 == k[e] || 1 === this.particleCount) {
      this._incrementParticleCount(), k[e] = 1, this._resetParticle(f), r = b * (f - a), k[e + 1] = -1 === g ? k[e + 2] - r : r, this._updateAttributeUpdateRange("params", f);
    }
  }
};
ParticleEmitterControl.prototype.tick = function(a) {
  if (!this.isStatic) {
    null === this.paramsArray && (this.paramsArray = this.attributes.params.typedArray.array);
    var d = this.attributeOffset, k = d + this.particleCount, b = this.paramsArray, g = this.particlesPerSecond * this.activeMultiplier * a, f = this.activationIndex;
    this._resetBufferRanges();
    this._checkParticleAges(d, k, b, a);
    if (!1 === this.alive) {
      this.age = 0;
    } else {
      if (null !== this.duration && this.age > this.duration) {
        this.alive = !1, this.age = 0;
      } else {
        f = 1 === this.particleCount ? f : f | 0;
        var e = Math.min(f + g, this.activationEnd), r = e - this.activationIndex | 0;
        this._activateParticles(f, e, b, 0 < r ? a / r : 0);
        this.activationIndex += g;
        this.activationIndex > k && (this.activationIndex = d);
        this.age += a;
      }
    }
  }
};
ParticleEmitterControl.prototype.reset = function(a) {
  this.age = 0;
  this.alive = !1;
  if (!0 === a) {
    a = this.attributeOffset;
    for (var d = this.paramsArray, k = this.attributes.params.bufferAttribute, b = a + this.particleCount - 1, g; b >= a; --b) {
      g = 4 * b, d[g] = 0, d[g + 1] = 0;
    }
    k.updateRange.offset = 0;
    k.updateRange.count = -1;
    k.needsUpdate = !0;
  }
  return this;
};
ParticleEmitterControl.prototype.enable = function() {
  this.alive = !0;
  return this;
};
ParticleEmitterControl.prototype.disable = function() {
  this.alive = !1;
  return this;
};
ParticleEmitterControl.prototype.remove = function() {
  null !== this.group ? this.group.removeEmitter(this) : console.error("nunuStudio: ParticleEmitterControl does not belong to a group, cannot remove.");
  return this;
};
ParticleEmitterControl.prototype.toJSON = function(a) {
  a = {};
  a.uuid = this.uuid;
  a.type = this.type;
  a.direction = this.direction;
  a.particleCount = this.particleCount;
  a.duration = this.duration;
  a.isStatic = this.isStatic;
  a.maxAge = {};
  a.maxAge.value = this.maxAge.value;
  a.maxAge.spread = this.maxAge.spread;
  a.position = {};
  a.position.value = this.position.value.toArray();
  a.position.spread = this.position.spread.toArray();
  a.position.radius = this.position.radius;
  a.position.radiusScale = this.position.radiusScale.toArray();
  a.velocity = {};
  a.velocity.value = this.velocity.value.toArray();
  a.velocity.spread = this.velocity.spread.toArray();
  a.acceleration = {};
  a.acceleration.value = this.acceleration.value.toArray();
  a.acceleration.spread = this.acceleration.spread.toArray();
  a.wiggle = {};
  a.wiggle.value = this.wiggle.value;
  a.wiggle.spread = this.wiggle.spread;
  a.opacity = {};
  a.opacity.value = this.opacity.value.slice(0);
  a.opacity.spread = this.opacity.spread;
  a.size = {};
  a.size.value = this.size.value.slice(0);
  a.size.spread = this.size.spread;
  a.angle = {};
  a.angle.value = this.angle.value.slice(0);
  a.angle.spread = this.angle.spread;
  a.color = {};
  a.color.value = [];
  for (var d = 0; d < this.color.value.length; d++) {
    a.color.value.push(this.color.value[d].getHex());
  }
  a.color.spread = [];
  for (d = 0; d < this.color.spread.length; d++) {
    a.color.spread.push(this.color.spread[d].toArray());
  }
  return a;
};
"use strict";
function ParticleGroup(a) {
  a = ShaderUtils.ensureTypedArg(a, ShaderUtils.types.OBJECT, {});
  a.texture = ShaderUtils.ensureTypedArg(a.texture, ShaderUtils.types.OBJECT, {});
  this.uuid = THREE.Math.generateUUID();
  this.fixedTimeStep = ShaderUtils.ensureTypedArg(a.fixedTimeStep, ShaderUtils.types.NUMBER, .016);
  this.texture = ShaderUtils.ensureInstanceOf(a.texture.value, THREE.Texture, null);
  this.textureFrames = ShaderUtils.ensureInstanceOf(a.texture.frames, THREE.Vector2, new THREE.Vector2(1, 1));
  this.textureFrameCount = ShaderUtils.ensureTypedArg(a.texture.frameCount, ShaderUtils.types.NUMBER, this.textureFrames.x * this.textureFrames.y);
  this.textureLoop = ShaderUtils.ensureTypedArg(a.texture.loop, ShaderUtils.types.NUMBER, 1);
  this.textureFrames.max(new THREE.Vector2(1, 1));
  this.hasPerspective = ShaderUtils.ensureTypedArg(a.hasPerspective, ShaderUtils.types.BOOLEAN, !0);
  this.colorize = ShaderUtils.ensureTypedArg(a.colorize, ShaderUtils.types.BOOLEAN, !0);
  this.maxParticleCount = ShaderUtils.ensureTypedArg(a.maxParticleCount, ShaderUtils.types.NUMBER, null);
  this.blending = ShaderUtils.ensureTypedArg(a.blending, ShaderUtils.types.NUMBER, THREE.AdditiveBlending);
  this.transparent = ShaderUtils.ensureTypedArg(a.transparent, ShaderUtils.types.BOOLEAN, !0);
  this.alphaTest = parseFloat(ShaderUtils.ensureTypedArg(a.alphaTest, ShaderUtils.types.NUMBER, 0));
  this.depthWrite = ShaderUtils.ensureTypedArg(a.depthWrite, ShaderUtils.types.BOOLEAN, !1);
  this.depthTest = ShaderUtils.ensureTypedArg(a.depthTest, ShaderUtils.types.BOOLEAN, !0);
  this.fog = ShaderUtils.ensureTypedArg(a.fog, ShaderUtils.types.BOOLEAN, !0);
  this.scale = ShaderUtils.ensureTypedArg(a.scale, ShaderUtils.types.NUMBER, 300);
  this.emitters = [];
  this.emitterIDs = [];
  this.pool = [];
  this.poolCreationSettings = null;
  this._createNewWhenPoolEmpty = 0;
  this._attributesNeedDynamicReset = this._attributesNeedRefresh = !1;
  this.particleCount = 0;
  this.uniforms = {textureSampler:{type:"t", value:this.texture}, textureAnimation:{type:"v4", value:new THREE.Vector4(this.textureFrames.x, this.textureFrames.y, this.textureFrameCount, Math.max(Math.abs(this.textureLoop), 1))}, fogColor:{type:"c", value:null}, fogNear:{type:"f", value:10}, fogFar:{type:"f", value:200}, fogDensity:{type:"f", value:.5}, deltaTime:{type:"f", value:0}, runTime:{type:"f", value:0}, scale:{type:"f", value:this.scale}};
  this.defines = {HAS_PERSPECTIVE:this.hasPerspective, COLORIZE:this.colorize, VALUE_OVER_LIFETIME_LENGTH:ParticleEmitter.valueOverLifetimeLength, SHOULD_ROTATE_TEXTURE:!1, SHOULD_ROTATE_PARTICLES:!1, SHOULD_WIGGLE_PARTICLES:!1, SHOULD_CALCULATE_SPRITE:1 < this.textureFrames.x || 1 < this.textureFrames.y};
  this.attributes = {position:new ShaderAttribute("v3", !0), acceleration:new ShaderAttribute("v4", !0), velocity:new ShaderAttribute("v3", !0), rotation:new ShaderAttribute("v4", !0), rotationCenter:new ShaderAttribute("v3", !0), params:new ShaderAttribute("v4", !0), size:new ShaderAttribute("v4", !0), angle:new ShaderAttribute("v4", !0), color:new ShaderAttribute("v4", !0), opacity:new ShaderAttribute("v4", !0)};
  this.attributeKeys = Object.keys(this.attributes);
  this.attributeCount = this.attributeKeys.length;
  this.material = new THREE.ShaderMaterial({uniforms:this.uniforms, vertexShader:ParticleShaders.vertex, fragmentShader:ParticleShaders.fragment, blending:this.blending, transparent:this.transparent, alphaTest:this.alphaTest, depthWrite:this.depthWrite, depthTest:this.depthTest, defines:this.defines, fog:this.fog});
  this.geometry = new THREE.BufferGeometry;
  this.mesh = new THREE.Points(this.geometry, this.material);
  null === this.maxParticleCount && console.warn("nunuStudio: No maxParticleCount specified. Adding emitters after rendering will probably cause errors.");
}
ParticleGroup.constructor = ParticleGroup;
ParticleGroup.prototype._updateDefines = function() {
  for (var a = this.emitters, d, k = this.defines, b = a.length - 1; 0 <= b; --b) {
    d = a[b], k.SHOULD_CALCULATE_SPRITE || (k.SHOULD_ROTATE_TEXTURE = k.SHOULD_ROTATE_TEXTURE || !!Math.max(Math.max.apply(null, d.angle.value), Math.max.apply(null, d.angle.spread))), k.SHOULD_ROTATE_PARTICLES = k.SHOULD_ROTATE_PARTICLES || !!Math.max(d.rotation.angle, d.rotation.angleSpread), k.SHOULD_WIGGLE_PARTICLES = k.SHOULD_WIGGLE_PARTICLES || !!Math.max(d.wiggle.value, d.wiggle.spread);
  }
  this.material.needsUpdate = !0;
};
ParticleGroup.prototype._applyAttributesToGeometry = function() {
  var a = this.attributes, d = this.geometry, k = d.attributes, b, g;
  for (g in a) {
    if (a.hasOwnProperty(g)) {
      var f = a[g];
      (b = k[g]) ? b.array = f.typedArray.array : d.setAttribute(g, f.bufferAttribute);
      f.bufferAttribute.needsUpdate = !0;
    }
  }
  this.geometry.setDrawRange(0, this.particleCount);
};
ParticleGroup.prototype.addEmitter = function(a) {
  if (!1 === a instanceof ParticleEmitterControl) {
    console.error("nunuStudio: emitter argument must be instance of ParticleEmitterControl.", a);
  } else {
    if (-1 < this.emitterIDs.indexOf(a.uuid)) {
      console.error("nunuStudio: ParticleEmitterControl already exists in this group.");
    } else {
      if (null !== a.group) {
        console.error("nunuStudio: ParticleEmitterControl already belongs to another group.");
      } else {
        var d = this.attributes, k = this.particleCount, b = k + a.particleCount;
        this.particleCount = b;
        null !== this.maxParticleCount && this.particleCount > this.maxParticleCount && console.warn("nunuStudio: ParticleGroup maxParticleCount exceeded. Requesting", this.particleCount, "particles, can support only", this.maxParticleCount);
        a._calculatePPSValue(a.maxAge._value + a.maxAge._spread);
        a._setBufferUpdateRanges(this.attributeKeys);
        a._setAttributeOffset(k);
        a.group = this;
        a.attributes = this.attributes;
        for (var g in d) {
          d.hasOwnProperty(g) && d[g]._createBufferAttribute(null !== this.maxParticleCount ? this.maxParticleCount : this.particleCount);
        }
        for (d = k; d < b; ++d) {
          a._assignPositionValue(d), a._assignForceValue(d, "velocity"), a._assignForceValue(d, "acceleration"), a._assignAbsLifetimeValue(d, "opacity"), a._assignAbsLifetimeValue(d, "size"), a._assignAngleValue(d), a._assignRotationValue(d), a._assignParamsValue(d), a._assignColorValue(d);
        }
        this._applyAttributesToGeometry();
        this.emitters.push(a);
        this.emitterIDs.push(a.uuid);
        this._updateDefines(a);
        this.material.needsUpdate = !0;
        this._attributesNeedRefresh = this.geometry.needsUpdate = !0;
        return this;
      }
    }
  }
};
ParticleGroup.prototype.removeEmitter = function(a) {
  var d = this.emitterIDs.indexOf(a.uuid);
  if (!1 === a instanceof ParticleEmitterControl) {
    console.error("nunuStudio: emitter argument must be instance of ParticleEmitterControl. Was provided with:", a);
  } else {
    if (-1 === d) {
      console.error("nunuStudio: ParticleEmitterControl does not exist in this group. Will not remove.");
    } else {
      for (var k = a.attributeOffset, b = k + a.particleCount, g = this.attributes.params.typedArray, f = k; f < b; ++f) {
        g.array[4 * f] = 0, g.array[4 * f + 1] = 0;
      }
      this.emitters.splice(d, 1);
      this.emitterIDs.splice(d, 1);
      for (var e in this.attributes) {
        this.attributes.hasOwnProperty(e) && this.attributes[e].splice(k, b);
      }
      this.particleCount -= a.particleCount;
      a._onRemove();
      this._attributesNeedRefresh = !0;
    }
  }
};
ParticleGroup.prototype.getFromPool = function() {
  var a = this.pool, d = this._createNewWhenPoolEmpty;
  return a.length ? a.pop() : d ? (a = new ParticleEmitterControl(this.poolCreationSettings), this.addEmitter(a), a) : null;
};
ParticleGroup.prototype.releaseIntoPool = function(a) {
  if (!1 === a instanceof ParticleEmitterControl) {
    console.error("nunuStudio: Argument is not instanceof ParticleEmitterControl:", a);
  } else {
    return a.reset(), this.pool.unshift(a), this;
  }
};
ParticleGroup.prototype.getPool = function() {
  return this.pool;
};
ParticleGroup.prototype.addPool = function(a, d, k) {
  this.poolCreationSettings = d;
  this._createNewWhenPoolEmpty = !!k;
  for (var b = 0; b < a; ++b) {
    k = Array.isArray(d) ? new ParticleEmitterControl(d[b]) : new ParticleEmitterControl(d), this.addEmitter(k), this.releaseIntoPool(k);
  }
  return this;
};
ParticleGroup.prototype._triggerSingleEmitter = function(a) {
  var d = this.getFromPool(), k = this;
  if (null === d) {
    console.log("nunuStudio: ParticleGroup pool ran out.");
  } else {
    return a instanceof THREE.Vector3 && (d.position.value.copy(a), d.position.value = d.position.value), d.enable(), setTimeout(function() {
      d.disable();
      k.releaseIntoPool(d);
    }, 1E3 * Math.max(d.duration, d.maxAge.value + d.maxAge.spread)), this;
  }
};
ParticleGroup.prototype.triggerEmitter = function(a, d) {
  if ("number" === typeof a && 1 < a) {
    for (var k = 0; k < a; ++k) {
      this._triggerSingleEmitter(d);
    }
  } else {
    this._triggerSingleEmitter(d);
  }
  return this;
};
ParticleGroup.prototype._updateUniforms = function(a) {
  this.uniforms.runTime.value += a;
  this.uniforms.deltaTime.value = a;
};
ParticleGroup.prototype._resetBufferRanges = function() {
  for (var a = this.attributeKeys, d = this.attributeCount - 1; 0 <= d; --d) {
    this.attributes[a[d]].resetUpdateRange();
  }
};
ParticleGroup.prototype._updateBuffers = function(a) {
  var d = this.attributeKeys, k = this.attributes;
  a = a.bufferUpdateRanges;
  for (var b, g, f = this.attributeCount - 1; 0 <= f; --f) {
    b = d[f], g = a[b], b = k[b], b.setUpdateRange(g.min, g.max), b.flagUpdate();
  }
};
ParticleGroup.prototype.tick = function(a) {
  var d = this.emitters, k = d.length;
  a = a || this.fixedTimeStep;
  var b = this.attributeKeys, g = this.attributes;
  this._updateUniforms(a);
  this._resetBufferRanges();
  if (0 !== k || !1 !== this._attributesNeedRefresh || !1 !== this._attributesNeedDynamicReset) {
    var f = 0;
    for (var e; f < k; ++f) {
      e = d[f], e.tick(a), this._updateBuffers(e);
    }
    if (!0 === this._attributesNeedDynamicReset) {
      f = this.attributeCount - 1;
      for (f; 0 <= f; --f) {
        g[b[f]].resetDynamic();
      }
      this._attributesNeedDynamicReset = !1;
    }
    if (!0 === this._attributesNeedRefresh) {
      f = this.attributeCount - 1;
      for (f; 0 <= f; --f) {
        g[b[f]].forceUpdateAll();
      }
      this._attributesNeedRefresh = !1;
      this._attributesNeedDynamicReset = !0;
    }
  }
};
ParticleGroup.prototype.dispose = function() {
  this.geometry.dispose();
  this.material.dispose();
  return this;
};
ParticleGroup.prototype.toJSON = function(a) {
  a = {texture:{}};
  a.texture.value = this.texture.uuid;
  a.texture.frames = this.textureFrames.toArray();
  a.texture.frameCount = this.textureFrameCount;
  a.texture.loop = this.textureLoop;
  a.fixedTimeStep = this.fixedTimeStep;
  a.hasPerspective = this.hasPerspective;
  a.colorize = this.colorize;
  a.maxParticleCount = this.maxParticleCount;
  a.transparent = this.transparent;
  a.blending = this.blending;
  a.alphaTest = this.alphaTest;
  a.depthWrite = this.depthWrite;
  a.depthTest = this.depthTest;
  a.fog = this.fog;
  a.scale = this.scale;
  return a;
};
"use strict";
var ShaderUtils = {types:{BOOLEAN:"boolean", STRING:"string", NUMBER:"number", OBJECT:"object"}, ensureTypedArg:function(a, d, k) {
  return typeof a === d ? a : k;
}, ensureArrayTypedArg:function(a, d, k) {
  if (Array.isArray(a)) {
    for (var b = a.length - 1; 0 <= b; --b) {
      if (typeof a[b] !== d) {
        return k;
      }
    }
    return a;
  }
  return this.ensureTypedArg(a, d, k);
}, ensureInstanceOf:function(a, d, k) {
  return void 0 !== d && a instanceof d ? a : k;
}, ensureArrayInstanceOf:function(a, d, k) {
  if (Array.isArray(a)) {
    for (var b = a.length - 1; 0 <= b; --b) {
      if (void 0 !== d && !1 === a[b] instanceof d) {
        return k;
      }
    }
    return a;
  }
  return this.ensureInstanceOf(a, d, k);
}, ensureValueOverLifetimeCompliance:function(a, d, k) {
  d = d || 3;
  k = k || 3;
  !1 === Array.isArray(a._value) && (a._value = [a._value]);
  !1 === Array.isArray(a._spread) && (a._spread = [a._spread]);
  var b = this.clamp(a._value.length, d, k);
  d = this.clamp(a._spread.length, d, k);
  b = Math.max(b, d);
  a._value.length !== b && (a._value = this.interpolateArray(a._value, b));
  a._spread.length !== b && (a._spread = this.interpolateArray(a._spread, b));
}, interpolateArray:function(a, d) {
  for (var k = a.length, b = ["function" === typeof a[0].clone ? a[0].clone() : a[0]], g = (k - 1) / (d - 1), f = 1; f < d - 1; ++f) {
    var e = f * g, r = Math.floor(e);
    b[f] = this.lerpTypeAgnostic(a[r], a[Math.ceil(e)], e - r);
  }
  b.push("function" === typeof a[k - 1].clone ? a[k - 1].clone() : a[k - 1]);
  return b;
}, clamp:function(a, d, k) {
  return Math.max(d, Math.min(a, k));
}, zeroToEpsilon:function(a, d) {
  d = d ? 1E-4 * Math.random() : 1E-5;
  0 > a && -1E-5 < a && (d = -d);
  return d;
}, lerpTypeAgnostic:function(a, d, k) {
  var b = this.types;
  if (typeof a === b.NUMBER && typeof d === b.NUMBER) {
    return a + (d - a) * k;
  }
  if (a instanceof THREE.Vector2 && d instanceof THREE.Vector2) {
    return b = a.clone(), b.x = this.lerp(a.x, d.x, k), b.y = this.lerp(a.y, d.y, k), b;
  }
  if (a instanceof THREE.Vector3 && d instanceof THREE.Vector3) {
    return b = a.clone(), b.x = this.lerp(a.x, d.x, k), b.y = this.lerp(a.y, d.y, k), b.z = this.lerp(a.z, d.z, k), b;
  }
  if (a instanceof THREE.Vector4 && d instanceof THREE.Vector4) {
    return b = a.clone(), b.x = this.lerp(a.x, d.x, k), b.y = this.lerp(a.y, d.y, k), b.z = this.lerp(a.z, d.z, k), b.w = this.lerp(a.w, d.w, k), b;
  }
  if (a instanceof THREE.Color && d instanceof THREE.Color) {
    return b = a.clone(), b.r = this.lerp(a.r, d.r, k), b.g = this.lerp(a.g, d.g, k), b.b = this.lerp(a.b, d.b, k), b;
  }
  console.warn("nunuStudio: Invalid argument types, or argument types do not match.", a, d);
}, lerp:function(a, d, k) {
  return a + (d - a) * k;
}, roundToNearestMultiple:function(a, d) {
  if (0 === d) {
    return a;
  }
  var k = Math.abs(a) % d;
  return 0 === k ? a : 0 > a ? -(Math.abs(a) - k) : a + d - k;
}, arrayValuesAreEqual:function(a) {
  for (var d = 0; d < a.length - 1; ++d) {
    if (a[d] !== a[d + 1]) {
      return !1;
    }
  }
  return !0;
}, randomFloat:function(a, d) {
  return a + d * (Math.random() - .5);
}, randomVector3:function(a, d, k, b, g) {
  var f = k.x + (Math.random() * b.x - .5 * b.x), e = k.y + (Math.random() * b.y - .5 * b.y);
  k = k.z + (Math.random() * b.z - .5 * b.z);
  g && (f = .5 * -g.x + this.roundToNearestMultiple(f, g.x), e = .5 * -g.y + this.roundToNearestMultiple(e, g.y), k = .5 * -g.z + this.roundToNearestMultiple(k, g.z));
  a.typedArray.setVec3Components(d, f, e, k);
}, randomColor:function(a, d, k, b) {
  var g = k.r + Math.random() * b.x, f = k.g + Math.random() * b.y;
  k = k.b + Math.random() * b.z;
  g = this.clamp(g, 0, 1);
  f = this.clamp(f, 0, 1);
  k = this.clamp(k, 0, 1);
  a.typedArray.setVec3Components(d, g, f, k);
}, randomColorAsHex:function() {
  var a = new THREE.Color;
  return function(d, k, b, g) {
    for (var f = b.length, e = [], r = 0; r < f; ++r) {
      var q = g[r];
      a.copy(b[r]);
      a.r += Math.random() * q.x - .5 * q.x;
      a.g += Math.random() * q.y - .5 * q.y;
      a.b += Math.random() * q.z - .5 * q.z;
      a.r = this.clamp(a.r, 0, 1);
      a.g = this.clamp(a.g, 0, 1);
      a.b = this.clamp(a.b, 0, 1);
      e.push(a.getHex());
    }
    d.typedArray.setVec4Components(k, e[0], e[1], e[2], e[3]);
  };
}(), randomVector3OnSphere:function(a, d, k, b, g, f, e, r) {
  r = 2 * Math.random() - 1;
  var q = 6.2832 * Math.random(), m = Math.sqrt(1 - r * r);
  b = this.randomFloat(b, g);
  e && (b = Math.round(b / e) * e);
  e = m * Math.cos(q) * b;
  q = m * Math.sin(q) * b;
  e *= f.x;
  q *= f.y;
  f = r * b * f.z;
  e += k.x;
  q += k.y;
  f += k.z;
  a.typedArray.setVec3Components(d, e, q, f);
}, seededRandom:function(a) {
  a = 1E4 * Math.sin(a);
  return a - (a | 0);
}, randomVector3OnDisc:function(a, d, k, b, g, f, e) {
  var r = 6.2832 * Math.random();
  b = Math.abs(this.randomFloat(b, g));
  e && (b = Math.round(b / e) * e);
  e = Math.cos(r) * b;
  r = Math.sin(r) * b;
  e *= f.x;
  r *= f.y;
  e += k.x;
  r += k.y;
  a.typedArray.setVec3Components(d, e, r, 0 + k.z);
}, randomDirectionVector3OnSphere:function() {
  var a = new THREE.Vector3;
  return function(d, k, b, g, f, e, r, q) {
    a.copy(e);
    a.x -= b;
    a.y -= g;
    a.z -= f;
    a.normalize().multiplyScalar(-this.randomFloat(r, q));
    d.typedArray.setVec3Components(k, a.x, a.y, a.z);
  };
}(), randomDirectionVector3OnDisc:function() {
  var a = new THREE.Vector3;
  return function(d, k, b, g, f, e, r, q) {
    a.copy(e);
    a.x -= b;
    a.y -= g;
    a.z -= f;
    a.normalize().multiplyScalar(-this.randomFloat(r, q));
    d.typedArray.setVec3Components(k, a.x, a.y, 0);
  };
}(), getPackedRotationAxis:function() {
  var a = new THREE.Vector3, d = new THREE.Vector3, k = new THREE.Color, b = new THREE.Vector3(1, 1, 1);
  return function(g, f) {
    a.copy(g).normalize();
    d.copy(f).normalize();
    a.x += .5 * -f.x + Math.random() * f.x;
    a.y += .5 * -f.y + Math.random() * f.y;
    a.z += .5 * -f.z + Math.random() * f.z;
    a.normalize().add(b).multiplyScalar(.5);
    k.setRGB(a.x, a.y, a.z);
    return k.getHex();
  };
}()};
"use strict";
function ShaderAttribute(a, d, k) {
  this.type = "string" === typeof a && ShaderAttribute.typeSizeMap.hasOwnProperty(a) ? a : "f";
  this.componentSize = ShaderAttribute.typeSizeMap[this.type];
  this.arrayType = k || Float32Array;
  this.bufferAttribute = this.typedArray = null;
  this.dynamicBuffer = !!d;
  this.updateMax = this.updateMin = 0;
}
ShaderAttribute.constructor = ShaderAttribute;
ShaderAttribute.typeSizeMap = {f:1, v2:2, v3:3, v4:4, c:3, m3:9, m4:16};
ShaderAttribute.prototype.setUpdateRange = function(a, d) {
  this.updateMin = Math.min(a * this.componentSize, this.updateMin * this.componentSize);
  this.updateMax = Math.max(d * this.componentSize, this.updateMax * this.componentSize);
};
ShaderAttribute.prototype.flagUpdate = function() {
  var a = this.bufferAttribute.updateRange;
  a.offset = this.updateMin;
  a.count = Math.min(this.updateMax - this.updateMin + this.componentSize, this.typedArray.array.length);
  this.bufferAttribute.needsUpdate = !0;
};
ShaderAttribute.prototype.resetUpdateRange = function() {
  this.updateMax = this.updateMin = 0;
};
ShaderAttribute.prototype.resetDynamic = function() {
  this.bufferAttribute.usage = this.dynamicBuffer ? THREE.DynamicDrawUsage : THREE.StaticDrawUsage;
};
ShaderAttribute.prototype.splice = function(a, d) {
  this.typedArray.splice(a, d);
  this.forceUpdateAll();
};
ShaderAttribute.prototype.forceUpdateAll = function() {
  this.bufferAttribute.array = this.typedArray.array;
  this.bufferAttribute.updateRange.offset = 0;
  this.bufferAttribute.updateRange.count = -1;
  this.bufferAttribute.usage = THREE.StaticDrawUsage;
  this.bufferAttribute.needsUpdate = !0;
};
ShaderAttribute.prototype._ensureTypedArray = function(a) {
  if (null === this.typedArray || this.typedArray.size !== a * this.componentSize) {
    null !== this.typedArray && this.typedArray.size !== a ? this.typedArray.setSize(a) : null === this.typedArray && (this.typedArray = new TypedArrayHelper(this.arrayType, a, this.componentSize));
  }
};
ShaderAttribute.prototype._createBufferAttribute = function(a) {
  this._ensureTypedArray(a);
  null !== this.bufferAttribute ? (this.bufferAttribute.array = this.typedArray.array, this.bufferAttribute.count = this.bufferAttribute.array.length / this.bufferAttribute.itemSize, this.bufferAttribute.needsUpdate = !0) : (this.bufferAttribute = new THREE.BufferAttribute(this.typedArray.array, this.componentSize), this.bufferAttribute.usage = this.dynamicBuffer ? THREE.DynamicDrawUsage : THREE.StaticDrawUsage);
};
ShaderAttribute.prototype.getLength = function() {
  return null === this.typedArray ? 0 : this.typedArray.array.length;
};
"use strict";
function TypedArrayHelper(a, d, k, b) {
  this.componentSize = k || 1;
  this.size = d || 1;
  this.TypedArrayConstructor = a || Float32Array;
  this.array = new a(d * this.componentSize);
  this.indexOffset = b || 0;
}
TypedArrayHelper.constructor = TypedArrayHelper;
TypedArrayHelper.prototype.setSize = function(a, d) {
  var k = this.array.length;
  d || (a *= this.componentSize);
  if (a < k) {
    return this.shrink(a);
  }
  if (a > k) {
    return this.grow(a);
  }
};
TypedArrayHelper.prototype.shrink = function(a) {
  this.array = this.array.subarray(0, a);
  this.size = a;
  return this;
};
TypedArrayHelper.prototype.grow = function(a) {
  var d = this.array, k = new this.TypedArrayConstructor(a);
  k.set(d);
  this.array = k;
  this.size = a;
  return this;
};
TypedArrayHelper.prototype.splice = function(a, d) {
  a *= this.componentSize;
  d *= this.componentSize;
  for (var k = [], b = this.array, g = b.length, f = 0; f < g; ++f) {
    (f < a || f >= d) && k.push(b[f]);
  }
  this.setFromArray(0, k);
  return this;
};
TypedArrayHelper.prototype.setFromArray = function(a, d) {
  var k = a + d.length;
  k > this.array.length ? this.grow(k) : k < this.array.length && this.shrink(k);
  this.array.set(d, this.indexOffset + a);
  return this;
};
TypedArrayHelper.prototype.setVec2 = function(a, d) {
  return this.setVec2Components(a, d.x, d.y);
};
TypedArrayHelper.prototype.setVec2Components = function(a, d, k) {
  var b = this.array;
  a = this.indexOffset + a * this.componentSize;
  b[a] = d;
  b[a + 1] = k;
  return this;
};
TypedArrayHelper.prototype.setVec3 = function(a, d) {
  return this.setVec3Components(a, d.x, d.y, d.z);
};
TypedArrayHelper.prototype.setVec3Components = function(a, d, k, b) {
  var g = this.array;
  a = this.indexOffset + a * this.componentSize;
  g[a] = d;
  g[a + 1] = k;
  g[a + 2] = b;
  return this;
};
TypedArrayHelper.prototype.setVec4 = function(a, d) {
  return this.setVec4Components(a, d.x, d.y, d.z, d.w);
};
TypedArrayHelper.prototype.setVec4Components = function(a, d, k, b, g) {
  var f = this.array;
  a = this.indexOffset + a * this.componentSize;
  f[a] = d;
  f[a + 1] = k;
  f[a + 2] = b;
  f[a + 3] = g;
  return this;
};
TypedArrayHelper.prototype.setMat3 = function(a, d) {
  return this.setFromArray(this.indexOffset + a * this.componentSize, d.elements);
};
TypedArrayHelper.prototype.setMat4 = function(a, d) {
  return this.setFromArray(this.indexOffset + a * this.componentSize, d.elements);
};
TypedArrayHelper.prototype.setColor = function(a, d) {
  return this.setVec3Components(a, d.r, d.g, d.b);
};
TypedArrayHelper.prototype.setNumber = function(a, d) {
  this.array[this.indexOffset + a * this.componentSize] = d;
  return this;
};
TypedArrayHelper.prototype.getValueAtIndex = function(a) {
  return this.array[this.indexOffset + a];
};
TypedArrayHelper.prototype.getComponentValueAtIndex = function(a) {
  return this.array.subarray(this.indexOffset + a * this.componentSize);
};
"use strict";
var ParticleShaderChunks = {defines:"#define PACKED_COLOR_SIZE 256.0\n#define PACKED_COLOR_DIVISOR 255.0", uniforms:"uniform float deltaTime;\nuniform float runTime;\nuniform sampler2D textureSampler;\nuniform vec4 textureAnimation;\nuniform float scale;", attributes:"attribute vec4 acceleration;\nattribute vec3 velocity;\nattribute vec4 rotation;\nattribute vec3 rotationCenter;\nattribute vec4 params;\nattribute vec4 size;\nattribute vec4 angle;\nattribute vec4 color;\nattribute vec4 opacity;", 
varyings:"varying vec4 vColor;\n#ifdef SHOULD_ROTATE_TEXTURE\n    varying float vAngle;\n#endif\n#ifdef SHOULD_CALCULATE_SPRITE\n    varying vec4 vSpriteSheet;\n#endif", branchAvoidanceFunctions:"float when_gt(float x, float y) {\n    return max(sign(x - y), 0.0);\n}\nfloat when_lt(float x, float y) {\n    return min(max(1.0 - sign(x - y), 0.0), 1.0);\n}\nfloat when_eq(float x, float y) {\n    return 1.0 - abs(sign(x - y));\n}\nfloat when_ge(float x, float y) {\n  return 1.0 - when_lt(x, y);\n}\nfloat when_le(float x, float y) {\n  return 1.0 - when_gt(x, y);\n}\nfloat and(float a, float b) {\n    return a * b;\n}\nfloat or(float a, float b) {\n    return min(a + b, 1.0);\n}", 
unpackColor:"vec3 unpackColor(in float hex) {\n   vec3 c = vec3(0.0);\n   float r = mod((hex / PACKED_COLOR_SIZE / PACKED_COLOR_SIZE), PACKED_COLOR_SIZE);\n   float g = mod((hex / PACKED_COLOR_SIZE), PACKED_COLOR_SIZE);\n   float b = mod(hex, PACKED_COLOR_SIZE);\n   c.r = r / PACKED_COLOR_DIVISOR;\n   c.g = g / PACKED_COLOR_DIVISOR;\n   c.b = b / PACKED_COLOR_DIVISOR;\n   return c;\n}", unpackRotationAxis:"vec3 unpackRotationAxis(in float hex) {\n   vec3 c = vec3(0.0);\n   float r = mod((hex / PACKED_COLOR_SIZE / PACKED_COLOR_SIZE), PACKED_COLOR_SIZE);\n   float g = mod((hex / PACKED_COLOR_SIZE), PACKED_COLOR_SIZE);\n   float b = mod(hex, PACKED_COLOR_SIZE);\n   c.r = r / PACKED_COLOR_DIVISOR;\n   c.g = g / PACKED_COLOR_DIVISOR;\n   c.b = b / PACKED_COLOR_DIVISOR;\n   c *= vec3(2.0);\n   c -= vec3(1.0);\n   return c;\n}", 
floatOverLifetime:"float getFloatOverLifetime(in float positionInTime, in vec4 attr) {\n    highp float value = 0.0;\n    float deltaAge = positionInTime * float(VALUE_OVER_LIFETIME_LENGTH - 1);\n    float fIndex = 0.0;\n    float shouldApplyValue = 0.0;\n    value += attr[0] * when_eq(deltaAge, 0.0);\n\n    for(int i = 0; i < VALUE_OVER_LIFETIME_LENGTH - 1; ++i) {\n       fIndex = float(i);\n       shouldApplyValue = and(when_gt(deltaAge, fIndex), when_le(deltaAge, fIndex + 1.0));\n       value += shouldApplyValue * mix(attr[i], attr[i + 1], deltaAge - fIndex);\n    }\n\n    return value;\n}", 
colorOverLifetime:"vec3 getColorOverLifetime(in float positionInTime, in vec3 color1, in vec3 color2, in vec3 color3, in vec3 color4) {\n    vec3 value = vec3(0.0);\n    value.x = getFloatOverLifetime(positionInTime, vec4(color1.x, color2.x, color3.x, color4.x));\n    value.y = getFloatOverLifetime(positionInTime, vec4(color1.y, color2.y, color3.y, color4.y));\n    value.z = getFloatOverLifetime(positionInTime, vec4(color1.z, color2.z, color3.z, color4.z));\n    return value;\n}", paramFetchingFunctions:"float getAlive() {\n   return params.x;\n}\nfloat getAge() {\n   return params.y;\n}\nfloat getMaxAge() {\n   return params.z;\n}\nfloat getWiggle() {\n   return params.w;\n}", 
forceFetchingFunctions:"vec4 getPosition(in float age) {\n   return modelViewMatrix * vec4(position, 1.0);\n}\nvec3 getVelocity(in float age) {\n   return velocity * age;\n}\nvec3 getAcceleration(in float age) {\n   return acceleration.xyz * age;\n}", rotationFunctions:"#ifdef SHOULD_ROTATE_PARTICLES\n   mat4 getRotationMatrix(in vec3 axis, in float angle) {\n       axis = normalize(axis);\n       float s = sin(angle);\n       float c = cos(angle);\n       float oc = 1.0 - c;\n\n       return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\n                   oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\n                   oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\n                   0.0,                                0.0,                                0.0,                                1.0);\n   }\n\n   vec3 getRotation(in vec3 pos, in float positionInTime) {\n      if(rotation.y == 0.0) {\n           return pos;\n      }\n\n      vec3 axis = unpackRotationAxis(rotation.x);\n      vec3 center = rotationCenter;\n      vec3 translated;\n      mat4 rotationMatrix;\n      float angle = 0.0;\n      angle += when_eq(rotation.z, 0.0) * rotation.y;\n      angle += when_gt(rotation.z, 0.0) * mix(0.0, rotation.y, positionInTime);\n      translated = rotationCenter - pos;\n      rotationMatrix = getRotationMatrix(axis, angle);\n      return center - vec3(rotationMatrix * vec4(translated, 0.0));\n   }\n#endif", 
rotateTexture:"    vec2 vUv = vec2(gl_PointCoord.x, 1.0 - gl_PointCoord.y);\n\n    #ifdef SHOULD_ROTATE_TEXTURE\n       float x = gl_PointCoord.x - 0.5;\n       float y = 1.0 - gl_PointCoord.y - 0.5;\n       float c = cos(-vAngle);\n       float s = sin(-vAngle);\n       vUv = vec2(c * x + s * y + 0.5, c * y - s * x + 0.5);\n    #endif\n\n    #ifdef SHOULD_CALCULATE_SPRITE\n        float framesX = vSpriteSheet.x;\n        float framesY = vSpriteSheet.y;\n        float columnNorm = vSpriteSheet.z;\n        float rowNorm = vSpriteSheet.w;\n        vUv.x = gl_PointCoord.x * framesX + columnNorm;\n        vUv.y = 1.0 - (gl_PointCoord.y * framesY + rowNorm);\n    #endif\n\n    vec4 rotatedTexture = texture2D(textureSampler, vUv);"};
"use strict";
var ParticleShaders = {vertex:[ParticleShaderChunks.defines, ParticleShaderChunks.uniforms, ParticleShaderChunks.attributes, ParticleShaderChunks.varyings, THREE.ShaderChunk.common, THREE.ShaderChunk.logdepthbuf_pars_vertex, THREE.ShaderChunk.fog_pars_vertex, ParticleShaderChunks.branchAvoidanceFunctions, ParticleShaderChunks.unpackColor, ParticleShaderChunks.unpackRotationAxis, ParticleShaderChunks.floatOverLifetime, ParticleShaderChunks.colorOverLifetime, ParticleShaderChunks.paramFetchingFunctions, 
ParticleShaderChunks.forceFetchingFunctions, ParticleShaderChunks.rotationFunctions, "void main() {\n    highp float age = getAge();\n    highp float alive = getAlive();\n    highp float maxAge = getMaxAge();\n    highp float positionInTime = (age / maxAge);\n    highp float isAlive = when_gt(alive, 0.0);\n    #ifdef SHOULD_WIGGLE_PARTICLES\n        float wiggleAmount = positionInTime * getWiggle();\n        float wiggleSin = isAlive * sin(wiggleAmount);\n        float wiggleCos = isAlive * cos(wiggleAmount);\n    #endif\n    vec3 vel = getVelocity(age);\n    vec3 accel = getAcceleration(age);\n    vec3 force = vec3(0.0);\n    vec3 pos = vec3(position);\n    float drag = 1.0 - (positionInTime * 0.5) * acceleration.w;\n    force += vel;\n    force *= drag;\n    force += accel * age;\n    pos += force;\n    #ifdef SHOULD_WIGGLE_PARTICLES\n        pos.x += wiggleSin;\n        pos.y += wiggleCos;\n        pos.z += wiggleSin;\n    #endif\n    #ifdef SHOULD_ROTATE_PARTICLES\n        pos = getRotation(pos, positionInTime);\n    #endif\n    vec4 mvPosition = modelViewMatrix * vec4(pos, 1.0);\n    highp float pointSize = getFloatOverLifetime(positionInTime, size) * isAlive;\n    #ifdef HAS_PERSPECTIVE\n        float perspective = scale / length(mvPosition.xyz);\n    #else\n        float perspective = 1.0;\n    #endif\n    float pointSizePerspective = pointSize * perspective;\n    #ifdef COLORIZE\n       vec3 c = isAlive * getColorOverLifetime(\n           positionInTime,\n           unpackColor(color.x),\n           unpackColor(color.y),\n           unpackColor(color.z),\n           unpackColor(color.w)\n      );\n    #else\n       vec3 c = vec3(1.0);\n    #endif\n    float o = isAlive * getFloatOverLifetime(positionInTime, opacity);\n    vColor = vec4(c, o);\n    #ifdef SHOULD_ROTATE_TEXTURE\n        vAngle = isAlive * getFloatOverLifetime(positionInTime, angle);\n    #endif\n    #ifdef SHOULD_CALCULATE_SPRITE\n        float framesX = textureAnimation.x;\n        float framesY = textureAnimation.y;\n        float loopCount = textureAnimation.w;\n        float totalFrames = textureAnimation.z;\n        float frameNumber = mod((positionInTime * loopCount) * totalFrames, totalFrames);\n        float column = floor(mod(frameNumber, framesX));\n        float row = floor((frameNumber - column) / framesX);\n        float columnNorm = column / framesX;\n        float rowNorm = row / framesY;\n        vSpriteSheet.x = 1.0 / framesX;\n        vSpriteSheet.y = 1.0 / framesY;\n        vSpriteSheet.z = columnNorm;\n        vSpriteSheet.w = rowNorm;\n    #endif\n    gl_PointSize = pointSizePerspective;\n    gl_Position = projectionMatrix * mvPosition;", 
THREE.ShaderChunk.logdepthbuf_vertex, THREE.ShaderChunk.fog_vertex, "}"].join("\n"), fragment:[ParticleShaderChunks.uniforms, THREE.ShaderChunk.common, THREE.ShaderChunk.fog_pars_fragment, THREE.ShaderChunk.logdepthbuf_pars_fragment, ParticleShaderChunks.varyings, ParticleShaderChunks.branchAvoidanceFunctions, "void main() {\n    vec3 outgoingLight = vColor.xyz;\n    \n    #ifdef ALPHATEST\n       if(vColor.w < float(ALPHATEST)) discard;\n    #endif", ParticleShaderChunks.rotateTexture, THREE.ShaderChunk.logdepthbuf_fragment, 
"    outgoingLight = vColor.xyz * rotatedTexture.xyz;\n    gl_FragColor = vec4(outgoingLight.xyz, rotatedTexture.w * vColor.w);", THREE.ShaderChunk.fog_fragment, "}"].join("\n")};
"use strict";
function ParticleEmitter(a, d) {
  this.group = new ParticleGroup(void 0 !== a ? a : ParticleEmitter.defaultGroup);
  this.emitter = new ParticleEmitterControl(void 0 !== d ? d : ParticleEmitter.defaultEmitter);
  this.group.addEmitter(this.emitter);
  THREE.Points.call(this, this.group.geometry, this.group.material);
  this.type = "ParticleEmiter";
  this.name = "particle";
  this.dynamicEmitter = this.frustumCulled = !1;
  this.clock = new THREE.Clock;
  this.temp = new THREE.Vector4;
  var k = this;
  Object.defineProperties(this, {texture:{get:function() {
    return k.group.texture;
  }, set:function(a) {
    k.group.texture = a;
  }}});
}
var ParticleDistributions = {BOX:1, SPHERE:2, DISC:3};
ParticleEmitter.valueOverLifetimeLength = 4;
ParticleEmitter.prototype = Object.create(THREE.Points.prototype);
ParticleEmitter.defaultEmitter = {particleCount:200, velocity:{value:new THREE.Vector3(0, 0, 0), spread:new THREE.Vector3(3, 3, 3)}, acceleration:{value:new THREE.Vector3(0, 0, 0), spread:new THREE.Vector3(0, 0, 0)}};
ParticleEmitter.defaultGroup = {texture:{value:null}, maxParticleCount:200, blending:THREE.AdditiveBlending, fog:!1, depthWrite:!1, depthTest:!0, transparent:!0, hasPerspective:!0};
ParticleEmitter.prototype.reload = function() {
  this.dispose();
  var a = this.children;
  this.children = [];
  var d = (new ObjectLoader).parse(this.toJSON());
  this.children = a;
  this.group = d.group;
  this.emitter = d.emitter;
  this.geometry = this.group.geometry;
  this.material = this.group.material;
};
ParticleEmitter.prototype.updateMatrix = function() {
  this.dynamicEmitter ? (this.matrix.makeRotationFromQuaternion(this.quaternion), this.matrix.scale(this.scale)) : this.matrix.compose(this.position, this.quaternion, this.scale);
  this.matrixWorldNeedsUpdate = !0;
};
ParticleEmitter.prototype.onBeforeRender = function(a, d, k, b) {
  this.group.uniforms.scale.value = a.getCurrentViewport(this.temp).w;
  this.group.tick(this.clock.getDelta());
  !0 === this.dynamicEmitter && (this.emitter.position.value = this.position);
};
ParticleEmitter.prototype.dispose = function() {
  this.group.dispose();
  THREE.Object3D.prototype.dispose.call(this);
};
ParticleEmitter.prototype.toJSON = function(a) {
  var d = this.material, k = this.geometry;
  this.geometry = this.material = void 0;
  var b = this.group.texture, g = THREE.Object3D.prototype.toJSON.call(this, a, function(a, d) {
    b = b.toJSON(a);
  });
  this.material = d;
  this.geometry = k;
  g.object.group = this.group.toJSON(a);
  g.object.emitter = this.emitter.toJSON(a);
  return g;
};
"use strict";
function Sky(a, d, k, b) {
  THREE.Group.call(this);
  this.name = "sky";
  this.type = "Sky";
  this.colorTop = [new THREE.Color(7844859), new THREE.Color(30463), new THREE.Color(220086), new THREE.Color(9273)];
  this.colorBottom = [new THREE.Color(15461606), new THREE.Color(16777215), new THREE.Color(16705495), new THREE.Color(26023)];
  this.sunColor = 16777130;
  this.intensity = .3;
  this.moonColor = 5592507;
  this.hemisphere = new THREE.HemisphereLight(3310847, 16764031, .5);
  this.hemisphere.locked = !0;
  this.hemisphere.matrixAutoUpdate = !1;
  this.add(this.hemisphere);
  this.sun = new DirectionalLight(this.sunColor, this.intensity);
  this.sun.castShadow = !0;
  this.sun.locked = !0;
  this.add(this.sun);
  var g = {topColor:{type:"c", value:new THREE.Color(0, .46, 1)}, bottomColor:{type:"c", value:new THREE.Color(1, 1, 1)}, offset:{type:"f", value:20}, exponent:{type:"f", value:.2}};
  g.topColor.value.copy(this.hemisphere.color);
  var f = new THREE.SphereBufferGeometry(1500, 16, 16);
  g = new THREE.ShaderMaterial({vertexShader:Sky.VERTEX, fragmentShader:Sky.FRAGMENT, uniforms:g, side:THREE.BackSide});
  this.sky = new THREE.Mesh(f, g);
  this.sky.locked = !0;
  this.sky.matrixAutoUpdate = !1;
  this.add(this.sky);
  this.sky.raycast = function() {
    return null;
  };
  this.autoUpdate = void 0 !== a ? a : !0;
  this.sunDistance = void 0 !== k ? k : 100;
  this.dayTime = void 0 !== d ? d : 120;
  this.time = void 0 !== b ? b : 75;
  this.updateSky();
}
Sky.prototype = Object.create(THREE.Group.prototype);
Sky.VERTEX = "varying vec3 vWorldPosition;\nvoid main()\n{\n\tvec4 worldPosition = modelMatrix * vec4(position, 1.0);\n\tvWorldPosition = worldPosition.xyz;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}";
Sky.FRAGMENT = "uniform vec3 topColor;\nuniform vec3 bottomColor;\nuniform float offset;\nuniform float exponent;\nvarying vec3 vWorldPosition;\nvoid main()\n{\n\tfloat h = normalize(vWorldPosition + offset).y;\n\tgl_FragColor = vec4(mix(bottomColor, topColor, max(pow(max(h , 0.0), exponent), 0.0)), 1.0);\n}";
Sky.prototype.initialize = function() {
  this.updateSky();
  THREE.Object3D.prototype.initialize.call(this);
};
Sky.prototype.update = function(a) {
  this.autoUpdate && (this.time += a, this.time > this.dayTime && (this.time -= this.dayTime), this.updateSky());
  THREE.Object3D.prototype.update.call(this, a);
};
Sky.prototype.updateSky = function() {
  var a = this.time / this.dayTime;
  if (.25 > a) {
    this.sky.material.uniforms.topColor.value.setRGB(this.colorTop[3].r, this.colorTop[3].g, this.colorTop[3].b), this.sky.material.uniforms.bottomColor.value.setRGB(this.colorBottom[3].r, this.colorBottom[3].g, this.colorBottom[3].b);
  } else {
    if (.292 > a) {
      var d = 23.81 * (a - .25), k = 1 - d;
      this.sky.material.uniforms.topColor.value.setRGB(k * this.colorTop[3].r + d * this.colorTop[0].r, k * this.colorTop[3].g + d * this.colorTop[0].g, k * this.colorTop[3].b + d * this.colorTop[0].b);
      this.sky.material.uniforms.bottomColor.value.setRGB(k * this.colorBottom[3].r + d * this.colorBottom[0].r, k * this.colorBottom[3].g + d * this.colorBottom[0].g, k * this.colorBottom[3].b + d * this.colorBottom[0].b);
    } else {
      .4167 > a ? (this.sky.material.uniforms.topColor.value.setRGB(this.colorTop[0].r, this.colorTop[0].g, this.colorTop[0].b), this.sky.material.uniforms.bottomColor.value.setRGB(this.colorBottom[0].r, this.colorBottom[0].g, this.colorBottom[0].b)) : .5 > a ? (d = 12 * (a - .4167), k = 1 - d, this.sky.material.uniforms.topColor.value.setRGB(k * this.colorTop[0].r + d * this.colorTop[1].r, k * this.colorTop[0].g + d * this.colorTop[1].g, k * this.colorTop[0].b + d * this.colorTop[1].b), this.sky.material.uniforms.bottomColor.value.setRGB(k * 
      this.colorBottom[0].r + d * this.colorBottom[1].r, k * this.colorBottom[0].g + d * this.colorBottom[1].g, k * this.colorBottom[0].b + d * this.colorBottom[1].b)) : .708 > a ? (this.sky.material.uniforms.topColor.value.setRGB(this.colorTop[1].r, this.colorTop[1].g, this.colorTop[1].b), this.sky.material.uniforms.bottomColor.value.setRGB(this.colorBottom[1].r, this.colorBottom[1].g, this.colorBottom[1].b)) : .75 > a ? (d = 23.81 * (a - .708), k = 1 - d, this.sky.material.uniforms.topColor.value.setRGB(k * 
      this.colorTop[1].r + d * this.colorTop[2].r, k * this.colorTop[1].g + d * this.colorTop[2].g, k * this.colorTop[1].b + d * this.colorTop[2].b), this.sky.material.uniforms.bottomColor.value.setRGB(k * this.colorBottom[1].r + d * this.colorBottom[2].r, k * this.colorBottom[1].g + d * this.colorBottom[2].g, k * this.colorBottom[1].b + d * this.colorBottom[2].b)) : .8333 > a ? (d = 12.048 * (a - .75), k = 1 - d, this.sky.material.uniforms.topColor.value.setRGB(k * this.colorTop[2].r + d * this.colorTop[3].r, 
      k * this.colorTop[2].g + d * this.colorTop[3].g, k * this.colorTop[2].b + d * this.colorTop[3].b), this.sky.material.uniforms.bottomColor.value.setRGB(k * this.colorBottom[2].r + d * this.colorBottom[3].r, k * this.colorBottom[2].g + d * this.colorBottom[3].g, k * this.colorBottom[2].b + d * this.colorBottom[3].b)) : (this.sky.material.uniforms.topColor.value.setRGB(this.colorTop[3].r, this.colorTop[3].g, this.colorTop[3].b), this.sky.material.uniforms.bottomColor.value.setRGB(this.colorBottom[3].r, 
      this.colorBottom[3].g, this.colorBottom[3].b));
    }
  }
  .2 > a ? (this.sun.intensity = this.intensity, this.sun.color.setHex(this.moonColor)) : .3 > a ? (d = 10 * (a - .2), .5 > d ? (this.sun.intensity = (2 - 2 * d) * this.intensity, this.sun.color.setHex(this.moonColor)) : (this.sun.intensity = 2 * d * this.intensity, this.sun.color.setHex(this.sunColor))) : .7 > a ? (this.sun.intensity = this.intensity, this.sun.color.setHex(this.sunColor)) : .8 > a ? (d = 10 * (a - .7), .5 > d ? (this.sun.intensity = (2 - 2 * d) * this.intensity, this.sun.color.setHex(this.sunColor)) : 
  (this.sun.intensity = 2 * d * this.intensity, this.sun.color.setHex(this.moonColor))) : (this.sun.intensity = this.intensity, this.sun.color.setHex(this.moonColor));
  d = MathUtils.PI2 * a - MathUtils.PID2;
  .25 < a && .75 > a ? (this.sun.position.x = this.sunDistance * Math.cos(d), this.sun.position.y = this.sunDistance * Math.sin(d)) : (this.sun.position.x = this.sunDistance * Math.cos(d + Math.PI), this.sun.position.y = this.sunDistance * Math.sin(d + Math.PI));
};
Sky.prototype.toJSON = function(a) {
  a = THREE.Object3D.prototype.toJSON.call(this, a);
  a.object.colorTop = [];
  for (var d = 0; d < this.colorTop.length; d++) {
    a.object.colorTop.push(this.colorTop[d].toJSON());
  }
  a.object.colorBottom = [];
  for (d = 0; d < this.colorBottom.length; d++) {
    a.object.colorBottom.push(this.colorBottom[d].toJSON());
  }
  a.object.sunColor = this.sunColor;
  a.object.moonColor = this.moonColor;
  a.object.intensity = this.intensity;
  a.object.autoUpdate = this.autoUpdate;
  a.object.sunDistance = this.sunDistance;
  a.object.dayTime = this.dayTime;
  a.object.time = this.time;
  a.object.sun = {};
  a.object.sun.castShadow = this.sun.castShadow;
  a.object.sun.shadow = this.sun.shadow.toJSON();
  return a;
};
"use strict";
function Container() {
  THREE.Group.call(this);
  this.name = "container";
  this.type = "Group";
}
Container.prototype = Object.create(THREE.Group.prototype);
"use strict";
function LensFlare() {
  THREE.Mesh.call(this, THREE.Lensflare.Geometry, new THREE.MeshBasicMaterial({opacity:0, transparent:!0}));
  this.name = "lensflare";
  this.type = "LensFlare";
  this.renderOrder = Infinity;
  this.castShadow = this.receiveShadow = this.frustumCulled = !1;
  this.elements = [];
  var a = new THREE.Vector3, d = new THREE.DataTexture(new Uint8Array(768), 16, 16, THREE.RGBFormat);
  d.minFilter = THREE.NearestFilter;
  d.magFilter = THREE.NearestFilter;
  d.wrapS = THREE.ClampToEdgeWrapping;
  d.wrapT = THREE.ClampToEdgeWrapping;
  d.needsUpdate = !0;
  var k = new THREE.DataTexture(new Uint8Array(768), 16, 16, THREE.RGBFormat);
  k.minFilter = THREE.NearestFilter;
  k.magFilter = THREE.NearestFilter;
  k.wrapS = THREE.ClampToEdgeWrapping;
  k.wrapT = THREE.ClampToEdgeWrapping;
  k.needsUpdate = !0;
  var b = THREE.Lensflare.Geometry, g = THREE.Lensflare.Shader, f = new THREE.RawShaderMaterial({uniforms:{scale:{value:null}, screenPosition:{value:null}}, vertexShader:"precision highp float;\n\t\t\tuniform vec3 screenPosition;\n\t\t\tuniform vec2 scale;\n\t\t\tattribute vec3 position;\n\t\t\tvoid main()\n\t\t\t{\n\t\t\t\tgl_Position = vec4(position.xy * scale + screenPosition.xy, screenPosition.z, 1.0);\n\t\t\t}", fragmentShader:"precision highp float;\n\t\t\tvoid main()\n\t\t\t{\n\t\t\t\tgl_FragColor = vec4(1.0, 0.0, 1.0, 1.0);\n\t\t\t}", 
  depthTest:!0, depthWrite:!1, transparent:!1}), e = new THREE.RawShaderMaterial({uniforms:{map:{value:d}, scale:{value:null}, screenPosition:{value:null}}, vertexShader:"precision highp float;\n\t\t\tuniform vec3 screenPosition;\n\t\t\tuniform vec2 scale;\n\t\t\tattribute vec3 position;\n\t\t\tattribute vec2 uv;\n\t\t\tvarying vec2 vUV;\n\t\t\tvoid main()\n\t\t\t{\n\t\t\t\tvUV = uv;\n\t\t\t\tgl_Position = vec4(position.xy * scale + screenPosition.xy, screenPosition.z, 1.0);\n\t\t\t}", fragmentShader:"precision highp float;\n\t\t\tuniform sampler2D map;\n\t\t\tvarying vec2 vUV;\n\t\t\tvoid main()\n\t\t\t{\n\t\t\t\tgl_FragColor = texture2D(map, vUV);\n\t\t\t}", 
  depthTest:!1, depthWrite:!1, transparent:!1}), r = new THREE.Mesh(b, f);
  g = THREE.LensflareElement.Shader;
  var q = new THREE.RawShaderMaterial({uniforms:{map:{value:null}, occlusionMap:{value:k}, color:{value:new THREE.Color(16777215)}, scale:{value:new THREE.Vector2}, screenPosition:{value:new THREE.Vector3}}, vertexShader:g.vertexShader, fragmentShader:g.fragmentShader, blending:THREE.AdditiveBlending, transparent:!0, depthWrite:!1}), m = new THREE.Mesh(b, q), n = new THREE.Vector2, c = new THREE.Vector2, h = new THREE.Box2, t = new THREE.Vector4;
  this.onBeforeRender = function(g, y, x) {
    g.getCurrentViewport(t);
    y = t.w / t.z;
    var p = t.z / 2, v = t.w / 2, w = 16 / t.w;
    n.set(w * y, w);
    h.min.set(t.x, t.y);
    h.max.set(t.x + (t.z - 16), t.y + (t.w - 16));
    a.setFromMatrixPosition(this.matrixWorld);
    a.applyMatrix4(x.matrixWorldInverse);
    a.applyMatrix4(x.projectionMatrix);
    c.x = t.x + a.x * p + p - 8;
    c.y = t.y + a.y * v + v - 8;
    if (h.containsPoint(c)) {
      g.copyFramebufferToTexture(c, d);
      p = f.uniforms;
      p.scale.value = n;
      p.screenPosition.value = a;
      g.renderBufferDirect(x, null, b, f, r, null);
      g.copyFramebufferToTexture(c, k);
      p = e.uniforms;
      p.scale.value = n;
      p.screenPosition.value = a;
      g.renderBufferDirect(x, null, b, e, r, null);
      v = 2 * -a.x;
      for (var z = 2 * -a.y, A = 0, D = this.elements.length; A < D; A++) {
        y = this.elements[A], p = q.uniforms, p.color.value.copy(y.color), p.map.value = y.texture, p.screenPosition.value.x = a.x + v * y.distance, p.screenPosition.value.y = a.y + z * y.distance, w = y.size / t.w, y = t.w / t.z, p.scale.value.set(w * y, w), q.uniformsNeedUpdate = !0, g.renderBufferDirect(x, null, b, q, m, null);
      }
    }
  };
  this.dispose = function() {
    f.dispose();
    e.dispose();
    q.dispose();
    d.dispose();
    k.dispose();
    for (var a = 0; a < this.elements.length; a++) {
      this.elements[a].texture.dispose();
    }
  };
}
LensFlare.prototype = Object.create(THREE.Mesh.prototype);
LensFlare.prototype.addFlare = function(a, d, k, b) {
  void 0 === d && (d = -1);
  void 0 === k && (k = 0);
  void 0 === b && (b = new Color(16777215));
  k = Math.min(k, Math.max(0, k));
  this.addElement(new THREE.LensflareElement(a, d, k, b));
};
LensFlare.prototype.addElement = function(a) {
  this.elements.push(a);
};
LensFlare.prototype.toJSON = function(a) {
  var d = this, k = [];
  a = THREE.Object3D.prototype.toJSON.call(this, a, function(a, g) {
    for (g = 0; g < d.elements.length; g++) {
      var b = {};
      b.texture = d.elements[g].texture.toJSON(a).uuid;
      b.size = d.elements[g].size;
      b.distance = d.elements[g].distance;
      b.color = d.elements[g].color.getHex();
      k.push(b);
    }
  });
  a.object.elements = k;
  return a;
};
"use strict";
function HTMLView(a) {
  var d = document.createElement("iframe");
  d.style.border = "none";
  CSS3DObject.call(this, d);
  this.type = "HTMLView";
  this.name = "webview";
  var k = this, b, g;
  Object.defineProperties(this, {url:{get:function() {
    return a;
  }, set:function(b) {
    a = void 0 !== b ? HTMLView.processURL(b) : "";
    k.element.src = a;
  }}, width:{get:function() {
    return b;
  }, set:function(a) {
    b = a;
    k.element.style.width = b + "px";
  }}, height:{get:function() {
    return g;
  }, set:function(a) {
    g = a;
    k.element.style.height = g + "px";
  }}});
  this.height = this.width = 512;
  this.url = void 0 !== a ? a : "";
}
HTMLView.prototype = Object.create(CSS3DObject.prototype);
HTMLView.prototype.constructor = HTMLView;
HTMLView.processURL = function(a) {
  return a.replace("watch?v=", "embed/");
};
HTMLView.prototype.toJSON = function(a) {
  a = CSS3DObject.prototype.toJSON.call(this, a);
  a.object.height = this.height;
  a.object.width = this.width;
  a.object.url = this.url;
  return a;
};
"use strict";
function Skeleton(a, d) {
  this.uuid = THREE.Math.generateUUID();
  void 0 === a && (a = []);
  this.bones = a.slice(0);
  this.boneMatrices = new Float32Array(16 * this.bones.length);
  if (void 0 === d) {
    this.calculateInverses();
  } else {
    if (this.bones.length === d.length) {
      this.boneInverses = d.slice(0);
    } else {
      for (console.warn("nunuStudio: Skeleton boneInverses is the wrong length."), this.boneInverses = [], a = 0; a < this.bones.length; a++) {
        this.boneInverses.push(new Matrix4);
      }
    }
  }
}
THREE._Skeleton = THREE.Skeleton;
THREE.Skeleton = Skeleton;
Skeleton.prototype = Object.create(THREE._Skeleton.prototype);
Skeleton.prototype.toJSON = function(a) {
  a = {};
  for (var d = [], k = [], b = 0; b < this.bones.length; b++) {
    d.push(this.bones[b].uuid);
  }
  for (b = 0; b < this.boneInverses.length; b++) {
    k.push(this.boneInverses[b].toArray());
  }
  a.uuid = this.uuid;
  a.bones = d;
  a.boneInverses = k;
  return a;
};
"use strict";
function OrbitControls() {
  THREE.Group.call(this);
  this.name = "orbit";
  this.type = "OrbitControls";
  this.distance = 4;
  this.maxDistance = 20;
  this.minDistance = 2;
  this.sensitivity = .002;
  this.zoomSensitivity = .001;
  this.limitUp = 1.57;
  this.limitDown = -1.57;
  this.movementEnabled = this.zoomEnabled = this.needsButtonPressed = !0;
  this.center = new THREE.Vector3(0, 0, 0);
  this.vector = new THREE.Vector2(Math.PI / 2, 0);
  this.smooth = !0;
  this.friction = .8;
  this.speed = .3;
  this.invertNavigation = !1;
  this.keyboard = this.mouse = null;
  this.speedDistance = 0;
  this.speedCenter = new THREE.Vector3(0, 0, 0);
  this.speedOrientation = new THREE.Vector2(0, 0);
  this.tempVector = new THREE.Vector3;
}
OrbitControls.UP = new THREE.Vector3(0, 1, 0);
OrbitControls.ZERO = new THREE.Vector3(0, 0, 0);
OrbitControls.prototype = Object.create(THREE.Group.prototype);
OrbitControls.prototype.initialize = function() {
  for (var a = this; null !== a.parent;) {
    a = a.parent, a instanceof Program && (this.mouse = a.mouse, this.keyboard = a.keyboard);
  }
  this.center.copy(this.position);
  this.updateControls();
  THREE.Group.prototype.initialize.call(this);
};
OrbitControls.prototype.update = function(a) {
  var d = !1;
  if (!this.needsButtonPressed || this.mouse.buttonPressed(Mouse.LEFT)) {
    !0 === this.smooth ? (this.speedOrientation.y += this.speed * this.sensitivity * (this.invertNavigation ? this.mouse.delta.y : -this.mouse.delta.y), this.speedOrientation.x -= this.speed * this.sensitivity * this.mouse.delta.x) : (this.vector.y -= this.sensitivity * (this.invertNavigation ? this.mouse.delta.y : -this.mouse.delta.y), this.vector.x -= this.sensitivity * this.mouse.delta.x), d = !0;
  }
  this.zoomEnabled && (this.mouse.buttonPressed(Mouse.MIDDLE) && (!0 === this.smooth ? this.speedCenter.y += this.speed * this.sensitivity * this.mouse.delta.y * this.distance : this.center.y += this.sensitivity * this.mouse.delta.y * this.distance, d = !0), 0 !== this.mouse.wheel && (!0 === this.smooth ? this.speedDistance += this.speed * this.mouse.wheel * this.position.distanceTo(this.center) * this.sensitivity : this.distance += this.mouse.wheel * this.position.distanceTo(this.center) * this.sensitivity, 
  d = !0));
  if (this.movementEnabled && this.mouse.buttonPressed(Mouse.RIGHT)) {
    d = this.getWorldDirection(this.tempVector);
    d.y = 0;
    d.normalize();
    if (!0 === this.smooth) {
      var k = this.speed * this.mouse.delta.y * this.sensitivity * this.distance;
      this.speedCenter.x += -d.x * k;
      this.speedCenter.z += -d.z * k;
      d.applyAxisAngle(OrbitControls.UP, Math.PI / 2);
      k = this.speed * this.mouse.delta.x * this.sensitivity * this.distance;
      this.speedCenter.x -= d.x * k;
      this.speedCenter.z -= d.z * k;
    } else {
      k = this.mouse.delta.y * this.sensitivity * this.distance, this.center.x += -d.x * k, this.center.z += -d.z * k, d.applyAxisAngle(OrbitControls.UP, Math.PI / 2), k = this.mouse.delta.x * this.sensitivity * this.distance, this.center.x -= d.x * k, this.center.z -= d.z * k;
    }
    d = !0;
  }
  !0 === this.smooth ? (this.distance += this.speedDistance, this.center.add(this.speedCenter), this.vector.add(this.speedOrientation), this.speedDistance *= this.friction, this.speedOrientation.multiplyScalar(this.friction), this.speedCenter.multiplyScalar(this.friction), this.updateControls()) : (!0 === d && this.updateControls(), THREE.Object3D.prototype.update.call(this, a));
};
OrbitControls.prototype.updateControls = function() {
  this.vector.y < this.limitDown ? this.vector.y = this.limitDown : this.vector.y > this.limitUp && (this.vector.y = this.limitUp);
  this.distance < this.minDistance ? this.distance = this.minDistance : this.distance > this.maxDistance && (this.distance = this.maxDistance);
  var a = this.distance * Math.cos(this.vector.y);
  this.position.set(Math.cos(this.vector.x) * a, this.distance * Math.sin(this.vector.y), Math.sin(this.vector.x) * a);
  this.position.add(this.center);
  a = new THREE.Matrix4;
  a.lookAt(this.position, this.center, OrbitControls.UP);
  this.quaternion.setFromRotationMatrix(a);
};
OrbitControls.prototype.toJSON = function(a) {
  a = THREE.Object3D.prototype.toJSON.call(this, a);
  a.object.distance = this.distance;
  a.object.maxDistance = this.maxDistance;
  a.object.minDistance = this.minDistance;
  a.object.sensitivity = this.sensitivity;
  a.object.limitUp = this.limitUp;
  a.object.limitDown = this.limitDown;
  a.object.needsButtonPressed = this.needsButtonPressed;
  a.object.zoomEnabled = this.zoomEnabled;
  a.object.movementEnabled = this.movementEnabled;
  a.object.smooth = this.smooth;
  a.object.friction = this.friction;
  a.object.speed = this.speed;
  a.object.invertNavigation = this.invertNavigation;
  a.object.center = this.center.toArray();
  a.object.vector = this.vector.toArray();
  return a;
};
"use strict";
function FirstPersonControls() {
  THREE.Group.call(this);
  this.name = "controls";
  this.type = "FirstPersonControls";
  this.sensitivity = .005;
  this.movementEnabled = this.needsButtonPressed = !0;
  this.moveSpeed = .05;
  this.moveOnPlane = !1;
  this.moveKeys = [Keyboard.W, Keyboard.S, Keyboard.A, Keyboard.D];
  this.vector = new THREE.Vector2(0, 0);
  this.keyboard = this.mouse = null;
  this.tempVector = new THREE.Vector3;
}
FirstPersonControls.UP = new THREE.Vector3(0, 1, 0);
FirstPersonControls.prototype = Object.create(THREE.Group.prototype);
FirstPersonControls.prototype.initialize = function() {
  for (var a = this; null !== a.parent;) {
    a = a.parent, a instanceof Program && (this.mouse = a.mouse, this.keyboard = a.keyboard);
  }
  this.updateControls();
  THREE.Group.prototype.initialize.call(this);
};
FirstPersonControls.prototype.update = function(a) {
  if (!this.needsButtonPressed || this.mouse.buttonPressed(Mouse.LEFT)) {
    this.vector.y -= this.sensitivity * this.mouse.delta.y, this.vector.x -= this.sensitivity * this.mouse.delta.x, -1.57 > this.vector.y ? this.vector.y = -1.57 : 1.57 < this.vector.y && (this.vector.y = 1.57), this.updateControls();
  }
  if (this.movementEnabled) {
    if (this.keyboard.keyPressed(this.moveKeys[0])) {
      var d = this.getWorldDirection(this.tempVector);
      this.moveOnPlane && (d.y = 0);
      d.normalize();
      d.multiplyScalar(this.moveSpeed);
      this.position.sub(d);
    }
    this.keyboard.keyPressed(this.moveKeys[1]) && (d = this.getWorldDirection(this.tempVector), this.moveOnPlane && (d.y = 0), d.normalize(), d.multiplyScalar(this.moveSpeed), this.position.add(d));
    this.keyboard.keyPressed(this.moveKeys[2]) && (d = new THREE.Vector3(Math.sin(this.vector.x - 1.57), 0, Math.cos(this.vector.x - 1.57)), d.normalize(), d.multiplyScalar(this.moveSpeed), this.position.sub(d));
    this.keyboard.keyPressed(this.moveKeys[3]) && (d = new THREE.Vector3(Math.sin(this.vector.x + 1.57), 0, Math.cos(this.vector.x + 1.57)), d.normalize(), d.multiplyScalar(this.moveSpeed), this.position.sub(d));
  }
  THREE.Object3D.prototype.update.call(this, a);
};
FirstPersonControls.prototype.updateControls = function() {
  var a = Math.cos(this.vector.y);
  a = new THREE.Vector3(Math.sin(this.vector.x) * a, Math.sin(this.vector.y), Math.cos(this.vector.x) * a);
  a.add(this.position);
  var d = new THREE.Matrix4;
  d.lookAt(this.position, a, FirstPersonControls.UP);
  this.quaternion.setFromRotationMatrix(d);
};
FirstPersonControls.prototype.getDirection = function() {
  var a = this.getWorldDirection(this.tempVector);
  a.normalize();
  return a;
};
FirstPersonControls.prototype.toJSON = function(a) {
  a = THREE.Object3D.prototype.toJSON.call(this, a);
  a.object.moveSpeed = this.moveSpeed;
  a.object.sensitivity = this.sensitivity;
  a.object.needsButtonPressed = this.needsButtonPressed;
  a.object.movementEnabled = this.movementEnabled;
  a.object.moveOnPlane = this.moveOnPlane;
  a.object.moveKeys = this.moveKeys;
  return a;
};
"use strict";
function Program(a) {
  ResourceManager.call(this);
  this.type = "Program";
  this.matrixAutoUpdate = !1;
  this.app = null;
  this.name = void 0 !== a ? a : "program";
  this.author = this.description = "";
  this.version = "0.0.0";
  this.vr = this.handlePixelRatio = this.lockPointer = !1;
  this.vrScale = 1;
  this.rendererConfig = new RendererConfiguration;
  this.targetConfig = new TargetConfig;
  this.division = this.canvas = this.renderer = this.mouse = this.keyboard = this.scene = this.defaultCamera = this.defaultScene = null;
  this.manager = new EventManager;
  this.clock = new THREE.Clock;
  this.vrRunning = !1;
}
Program.prototype = Object.create(ResourceManager.prototype);
Program.prototype.initialize = function() {
  this.manager.create();
  null === this.mouse && (this.mouse = new Mouse);
  null === this.keyboard && (this.keyboard = new keyboard);
  if (null !== this.defaultScene) {
    for (var a = 0; a < this.children.length; a++) {
      if (this.children[a].uuid === this.defaultScene) {
        this.setScene(this.children[a]);
        break;
      }
    }
  } else {
    0 < this.children.length && this.setScene(this.children[0]);
  }
  this.clock.start();
};
Program.prototype.setMouseKeyboard = function(a, d) {
  this.mouse !== a && (null !== this.mouse && this.mouse.dispose(), this.mouse = a);
  this.keyboard !== d && (null !== this.keyboard && this.keyboard.dispose(), this.keyboard = d);
};
Program.prototype.setRenderer = function(a, d) {
  this.renderer = a;
  this.renderer.autoClear = !1;
  this.canvas = a.domElement;
  this.division = this.canvas.parentElement;
  d && this.updateRenderer();
};
Program.prototype.update = function() {
  var a = this.clock.getDelta();
  this.scene.update(a);
};
Program.prototype.render = function(a) {
  this.scene.render(a);
};
Program.prototype.resize = function(a, d) {
  null !== this.defaultCamera && this.defaultCamera.resize(a, d);
  this.scene.resize(a, d);
};
Program.prototype.updateRenderer = function() {
  null !== this.renderer && this.rendererConfig.apply(this.renderer);
};
Program.prototype.vrAvailable = function() {
  return this.vr && Nunu.vrAvailable();
};
Program.prototype.enterVR = function() {
  if (this.vr) {
    var a = this;
    Nunu.enterVR(this.renderer, function() {
      a.vrRunning = !0;
    });
  }
};
Program.prototype.exitVR = function() {
  this.vr && (Nunu.exitVR(this.renderer), this.vrRunning = !1);
};
Program.prototype.setScene = function(a) {
  "string" === typeof a && (a = this.getObjectByName(a));
  null !== this.scene && this.scene.dispose();
  this.scene = a;
  null !== this.scene ? (null === this.scene.defaultCamera && (this.scene.defaultCamera = this.defaultCamera), this.scene.initialize()) : console.warn("nunuStudio: Program setScene scene is null.");
};
Program.prototype.remove = function(a) {
  if (a instanceof Scene) {
    var d = this.children.indexOf(a);
    -1 < d && (this.children.splice(d, 1), a.parent = null);
    a === this.scene && (this.scene.dispose(), this.scene = null);
    0 === this.children.length && (this.scene = null);
  } else {
    console.warn("nunuStudio: Trying to remove Object3D from program, only Scene objects allowed.");
  }
};
Program.prototype.add = function(a) {
  a instanceof Scene ? (a.parent = this, this.children.push(a)) : console.warn("nunuStudio: Trying to add Object3D to program, only Scene objects allowed.");
};
Program.prototype.clone = function() {
  return (new ObjectLoader).parse(this.toJSON());
};
Program.prototype.setInitialScene = function(a) {
  this.defaultScene = a.uuid;
};
Program.prototype.dispose = function() {
  this.manager.destroy();
  null !== this.scene ? this.scene.dispose() : console.warn("nunuStudio: Program dispose() scene is null.", this);
  ResourceManager.prototype.dispose.call(this);
  THREE.Object3D.prototype.dispose.call(this);
};
Program.prototype.receiveDataApp = function(a) {
  var d = !1;
  this.traverse(function(k) {
    k instanceof Script && (k.appData(a), d = !0);
  });
  d || console.warn("nunuStudio: No script with onAppData found", a);
};
Program.prototype.sendDataApp = function(a) {
  if (null !== this.app) {
    if (void 0 !== this.app.onDataReceived) {
      this.app.onDataReceived(a);
    } else {
      console.warn("nunuStudio: Send app data communication", a);
    }
  } else {
    console.warn("nunuStudio: Data sent to app", a);
  }
};
Program.prototype.toJSON = function(a, d) {
  var k = this;
  a = THREE.Object3D.prototype.toJSON.call(this, a, function(a, g) {
    if (!1 !== d) {
      g = k.textures;
      for (var b in g) {
        var e = g[b];
        void 0 === a.textures[e.uuid] && (a.textures[e.uuid] = e.toJSON(a));
      }
      g = k.materials;
      for (b in g) {
        e = g[b], void 0 === a.materials[e.uuid] && (a.materials[e.uuid] = e.toJSON(a));
      }
      g = k.fonts;
      for (b in g) {
        e = g[b], void 0 === a.fonts[e.uuid] && (a.fonts[e.uuid] = e.toJSON(a));
      }
      g = k.audio;
      for (b in g) {
        e = g[b], void 0 === a.audio[e.uuid] && (a.audio[e.uuid] = e.toJSON(a));
      }
      g = k.resources;
      for (b in g) {
        e = g[b], void 0 === a.resources[e.uuid] && (a.resources[e.uuid] = e.toJSON(a));
      }
    }
  });
  null !== this.defaultScene && (a.object.defaultScene = this.defaultScene);
  a.object.author = this.author;
  a.object.description = this.description;
  a.object.version = this.version;
  a.object.lockPointer = this.lockPointer;
  a.object.handlePixelRatio = this.handlePixelRatio;
  a.object.vr = this.vr;
  a.object.vrScale = this.vrScale;
  a.object.rendererConfig = this.rendererConfig.toJSON();
  return a;
};
"use strict";
function Scene() {
  THREE._Scene.call(this);
  this.name = "scene";
  this.matrixAutoUpdate = !1;
  this.usePhysics = !0;
  this.world = new CANNON.World;
  this.world.defaultContactMaterial.contactEquationStiffness = 1E9;
  this.world.defaultContactMaterial.contactEquationRelaxation = 4;
  this.world.quatNormalizeSkip = 0;
  this.world.quatNormalizeFast = !1;
  this.world.gravity.set(0, -9.8, 0);
  this.world.broadphase = new CANNON.NaiveBroadphase;
  this.world.solver = new CANNON.SplitSolver(new CANNON.GSSolver);
  this.world.solver.tolerance = .05;
  this.world.solver.iterations = 7;
  this.background = new THREE.Color(0);
  this.cameras = [];
  this.defaultCamera = null;
  this.delta = 0;
  this.raycaster = new THREE.Raycaster;
  this.useOctree = !1;
  this.octree = null;
  this.octreeUpdateScheduled = !1;
  this.octreeMatches = [];
  this.canvas = this.program = null;
  this.mouse = new THREE.Vector2(0, 0);
}
THREE._Scene = THREE.Scene;
Scene.prototype = Object.create(THREE._Scene.prototype);
Scene.prototype.initialize = function() {
  this.program = this.parent;
  this.canvas = this.parent.canvas;
  THREE.Object3D.prototype.initialize.call(this);
  for (var a = 0; a < this.children.length; a++) {
    this.children[a].traverse(function(a) {
      a.initialize();
    });
  }
};
Scene.prototype.update = function(a) {
  this.mouse.set(this.program.mouse.position.x / this.canvas.width * 2 - 1, -2 * this.program.mouse.position.y / this.canvas.height + 1);
  0 < this.cameras.length && this.raycaster.setFromCamera(this.mouse, this.cameras[0]);
  this.usePhysics && this.world.step(.05 > a ? a : .05);
  for (var d = 0; d < this.children.length; d++) {
    this.children[d].traverse(function(d) {
      d.update(a);
    });
  }
};
Scene.prototype.resize = function(a, d) {
  null !== this.defaultCamera && this.defaultCamera.resize(a, d);
  for (var k = 0; k < this.cameras.length; k++) {
    this.cameras[k].resize(a, d);
  }
  for (k = 0; k < this.children.length; k++) {
    this.children[k].traverse(function(b) {
      b.resize(a, d);
    });
  }
};
Scene.prototype.dispose = function() {
  for (var a = 0; a < this.children.length; a++) {
    this.children[a].traverse(function(a) {
      a.dispose();
    });
  }
};
Scene.prototype.render = function(a) {
  a.setClearColor(this.background);
  if (0 < this.cameras.length) {
    a.setScissorTest(!0);
    for (var d = 0; d < this.cameras.length; d++) {
      this.cameras[d].setupRenderer(a), this.cameras[d].render(a, this);
    }
    a.setScissorTest(!1);
  } else {
    null !== this.defaultCamera && this.defaultCamera.render(a, this);
  }
};
Scene.prototype.getCamera = function(a, d) {
  void 0 === d && (d = this);
  if (a === d.uuid) {
    return d;
  }
  d = d.children;
  for (var k = 0; k < d.length; k++) {
    var b = this.getCamera(a, d[k]);
    if (null !== b) {
      return b;
    }
  }
  return null;
};
Scene.prototype.addCamera = function(a) {
  -1 === this.cameras.indexOf(a) && (this.cameras.push(a), this.updateCameraOrder());
};
Scene.prototype.updateCameraOrder = function() {
  this.cameras.sort(function(a, d) {
    return a.order > d.order;
  });
};
Scene.prototype.removeCamera = function(a) {
  a = this.cameras.indexOf(a);
  -1 < a && this.cameras.splice(a, 1);
};
Scene.prototype.isCameraActive = function(a) {
  return -1 < this.cameras.indexOf(a);
};
Scene.prototype.setFogMode = function(a) {
  var d = null !== this.fog ? this.fog.color.getHex() : "#FFFFFF";
  a === THREE.Fog.LINEAR ? this.fog = new THREE.Fog(d, 5, 20) : a === THREE.Fog.EXPONENTIAL ? this.fog = new THREE.FogExp2(d, .01) : a === THREE.Fog.NONE && (this.fog = null);
};
Scene.prototype.toJSON = function(a) {
  if (null == this.parent || "Program" !== this.parent.type) {
    return console.warn("nunuStudio: Scene is not on top level serializing as Group."), this.type = "Group", THREE.Object3D.prototype.toJSON.call(this, a);
  }
  var d = this.background, k = THREE.Object3D.prototype.toJSON.call(this, a, function(a, b) {
    d instanceof THREE.Color ? d = d.toJSON(a) : d instanceof THREE.Texture && (d = d.toJSON(a).uuid);
  });
  null !== d && (k.object.background = d);
  if (null !== this.defaultCamera) {
    var b = new THREE.Vector3, g = new THREE.Quaternion, f = new THREE.Vector3;
    this.defaultCamera.matrixWorld.decompose(b, g, f);
    a = this.defaultCamera.toJSON(a);
    a.object.position = b.toArray();
    a.object.quaternion = g.toArray();
    a.object.scale = f.toArray();
    k.object.defaultCamera = a;
  }
  null !== this.fog && (k.object.fog = this.fog.toJSON());
  k.object.usePhysics = this.usePhysics;
  k.object.cameras = [];
  for (b = 0; b < this.cameras.length; b++) {
    k.object.cameras.push(this.cameras[b].uuid);
  }
  k.object.world = {};
  k.object.world.gravity = this.world.gravity;
  k.object.world.quatNormalizeSkip = this.world.quatNormalizeSkip;
  k.object.world.quatNormalizeFast = this.world.quatNormalizeFast;
  k.object.world.solver = {};
  k.object.world.solver.tolerance = this.world.solver.tolerance;
  k.object.world.solver.iterations = this.world.solver.iterations;
  return k;
};
"use strict";
function Base64Utils() {
}
Base64Utils.encoding = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
Base64Utils.isBase64 = function(a) {
  if ("string" !== typeof a) {
    return !1;
  }
  if (a.startsWith("data:")) {
    return !0;
  }
  for (var d = 0; d < a.length; d++) {
    if (!Base64Utils.encoding.includes(a.charAt(d))) {
      return !1;
    }
  }
  return !0;
};
Base64Utils.removeHeader = function(a) {
  return a.slice(a.search(";base64,") + 8);
};
Base64Utils.getFileFormat = function(a) {
  var d = a.indexOf("/") + 1, k = a.indexOf(";");
  return a.substr(d, k - d);
};
Base64Utils.fromArraybuffer = function(a) {
  var d = "";
  a = new Uint8Array(a);
  for (var k = a.byteLength % 3, b = a.byteLength - k, g, f, e, r, q = 0; q < b; q += 3) {
    r = a[q] << 16 | a[q + 1] << 8 | a[q + 2], g = (r & 16515072) >> 18, f = (r & 258048) >> 12, e = (r & 4032) >> 6, r &= 63, d += Base64Utils.encoding[g] + Base64Utils.encoding[f] + Base64Utils.encoding[e] + Base64Utils.encoding[r];
  }
  1 === k ? (r = a[b], d += Base64Utils.encoding[(r & 252) >> 2] + Base64Utils.encoding[(r & 3) << 4] + "==") : 2 === k && (r = a[b] << 8 | a[b + 1], d += Base64Utils.encoding[(r & 64512) >> 10] + Base64Utils.encoding[(r & 1008) >> 4] + Base64Utils.encoding[(r & 15) << 2] + "=");
  return d;
};
Base64Utils.fromBinaryString = function(a) {
  for (var d = "", k = a.length % 3, b = a.length - k, g, f, e, r = 0; r < b; r += 3) {
    g = a.charCodeAt(r) & 255, f = a.charCodeAt(r + 1), e = a.charCodeAt(r + 2), d += Base64Utils.encoding.charAt(g >> 2), d += Base64Utils.encoding.charAt((g & 3) << 4 | (f & 240) >> 4), d += Base64Utils.encoding.charAt((f & 15) << 2 | (e & 192) >> 6), d += Base64Utils.encoding.charAt(e & 63);
  }
  1 === k ? (g = a.charCodeAt(r) & 255, d += Base64Utils.encoding.charAt(g >> 2), d += Base64Utils.encoding.charAt((g & 3) << 4), d += "==") : 2 === k && (g = a.charCodeAt(r) & 255, f = a.charCodeAt(r + 1), d += Base64Utils.encoding.charAt(g >> 2), d += Base64Utils.encoding.charAt((g & 3) << 4 | (f & 240) >> 4), d += Base64Utils.encoding.charAt((f & 15) << 2), d += "=");
  return d;
};
"use strict";
function ArraybufferUtils() {
}
ArraybufferUtils.fromBinaryString = function(a) {
  for (var d = a.length, k = new ArrayBuffer(d), b = new Uint8Array(k), g = 0; g < d; g++) {
    b[g] = a.charCodeAt(g);
  }
  return k;
};
ArraybufferUtils.fromBase64 = function(a) {
  for (var d = a.length / 4 * 3, k = new ArrayBuffer(d), b = new Uint8Array(k), g, f, e, r, q = 0, m = 0; q < d; q += 3) {
    g = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".indexOf(a.charAt(m++)), f = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".indexOf(a.charAt(m++)), e = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".indexOf(a.charAt(m++)), r = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".indexOf(a.charAt(m++)), b[q] = g << 2 | f >> 4, 64 !== e && (b[q + 1] = (f & 15) << 4 | e >> 2), 64 !== r && (b[q + 2] = (e & 3) << 6 | r);
  }
  return k;
};
ArraybufferUtils.fromBuffer = function(a) {
  for (var d = new ArrayBuffer(a.length), k = new Uint8Array(d), b = 0; b < a.length; b++) {
    k[b] = a[b];
  }
  return d;
};
"use strict";
function BufferUtils() {
}
BufferUtils.fromArrayBuffer = function(a) {
  var d = new Buffer(a.byteLength);
  a = new Uint8Array(a);
  for (var k = 0; k < d.length; k++) {
    d[k] = a[k];
  }
  return d;
};
"use strict";
function Timer(a, d) {
  this.callback = a;
  this.time = d;
  this.running = !1;
  this.id = -1;
}
Timer.prototype.start = function() {
  function a() {
    d.callback();
    d.running && (d.id = setTimeout(a, d.time));
  }
  if (!this.running) {
    this.running = !0;
    var d = this;
    a();
  }
};
Timer.prototype.stop = function() {
  this.running = !1;
  clearTimeout(self.id);
};
"use strict";
function AnimationTimer(a) {
  this.callback = a;
  this.running = !1;
  this.id = -1;
}
AnimationTimer.prototype.start = function() {
  function a() {
    d.callback();
    d.running && (d.id = requestAnimationFrame(a));
  }
  if (!this.running) {
    this.running = !0;
    var d = this;
    a();
  }
};
AnimationTimer.prototype.stop = function() {
  this.running = !1;
  cancelAnimationFrame(this.id);
};
"use strict";
function LocalStorage() {
}
LocalStorage.set = function(a, d) {
  "object" === typeof d ? window.localStorage.setItem(a, JSON.stringify(d)) : window.localStorage.setItem(a, d);
};
LocalStorage.get = function(a) {
  a = window.localStorage.getItem(a);
  try {
    return JSON.parse(a);
  } catch (d) {
    return a;
  }
};
LocalStorage.exists = function(a) {
  return null !== window.localStorage.getItem(a);
};
LocalStorage.delete = function(a) {
  return window.localStorage.removeItem(a);
};
"use strict";
function EventManager() {
  this.events = [];
}
EventManager.prototype.add = function(a, d, k) {
  this.events.push([a, d, k, !1]);
};
EventManager.prototype.clear = function() {
  this.destroy();
  this.events = [];
};
EventManager.prototype.create = function() {
  for (var a = 0; a < this.events.length; a++) {
    var d = this.events[a];
    d[0].addEventListener(d[1], d[2]);
    d[3] = !0;
  }
};
EventManager.prototype.destroy = function() {
  for (var a = 0; a < this.events.length; a++) {
    var d = this.events[a];
    d[0].removeEventListener(d[1], d[2]);
    d[3] = !1;
  }
};
EventManager.prototype.addScrollEvent = function(a, d) {
  void 0 !== window.onmousewheel ? this.add(a, "mousewheel", d) : void 0 !== window.addEventListener ? this.add(a, "DOMMouseScroll", function(a) {
    a.deltaY = 30 * a.detail;
    d(a);
  }) : this.add(a, "wheel", d);
};
"use strict";
function MathUtils() {
}
MathUtils.PI2 = 2 * Math.PI;
MathUtils.PID3 = Math.PI / 3;
MathUtils.PID2 = Math.PI / 2;
MathUtils.randomColor = function() {
  for (var a = "#", d = 0; 6 > d; d++) {
    a += "0123456789ABCDEF"[Math.floor(16 * Math.random())];
  }
  return a;
};
"use strict";
function ObjectUtils() {
}
ObjectUtils.getRoot = function(a) {
  for (; null !== a.parent;) {
    a = a.parent;
  }
  return a;
};
ObjectUtils.scaleAndCenterObject = function(a) {
  var d = ObjectUtils.calculateBoundingBox(a);
  if (null !== d) {
    var k = new THREE.Vector3;
    d.getSize(k);
    k = 1 / (k.x > k.y ? k.x > k.z ? k.x : k.z : k.y > k.z ? k.y : k.z);
    var b = new THREE.Vector3;
    d.getCenter(b);
    b.multiplyScalar(k);
    a.scale.set(k, k, k);
    a.position.set(-b.x, -k * d.min.y, -b.z);
  }
};
ObjectUtils.calculateBoundingBox = function(a) {
  var d = null;
  a.traverse(function(a) {
    void 0 !== a.geometry && (a.geometry.computeBoundingBox(), a = a.geometry.boundingBox, null === d ? d = a.clone() : (a.min.x < d.min.x && (d.min.x = a.min.x), a.max.x > d.max.x && (d.max.x = a.max.x), a.min.y < d.min.y && (d.min.y = a.min.y), a.max.y > d.max.y && (d.max.y = a.max.y), a.min.z < d.min.z && (d.min.z = a.min.z), a.max.z > d.max.z && (d.max.z = a.max.z)));
  });
  return d;
};
ObjectUtils.centerGeometryOrigin = function(a) {
  a.traverse(function(a) {
    if (void 0 !== a.geometry) {
      a.geometry.computeBoundingBox();
      var d = a.geometry.boundingBox.clone().getCenter(new THREE.Vector3), b = new THREE.Matrix4;
      b.makeTranslation(-d.x, -d.y, -d.z);
      a.geometry.applyMatrix4(b);
      a.position.add(d);
    }
  });
};
ObjectUtils.convertToBufferGeometry = function(a) {
  a.traverse(function(a) {
    void 0 !== a.geometry && !0 === a.geometry.isGeometry && (a.geometry = (new THREE.BufferGeometry).fromGeometry(a.geometry));
  });
};
"use strict";
function PhysicsGenerator() {
}
PhysicsGenerator.Type = {BOX:"Box", CYLINDER:"Cylinder", SPHERE:"Sphere", HULL:"ConvexPolyhedron"};
PhysicsGenerator.createShape = function(a, d) {
  if (void 0 !== d) {
    return d === PhysicsGenerator.Type.BOX ? PhysicsGenerator.createBoundingBoxShape(a) : d === PhysicsGenerator.Type.CYLINDER ? PhysicsGenerator.createBoundingCylinderShape(a) : d === PhysicsGenerator.Type.SPHERE ? PhysicsGenerator.createBoundingSphereShape(a) : d === PhysicsGenerator.Type.HULL ? PhysicsGenerator.createConvexPolyhedron(a) : null;
  }
  d = PhysicsGenerator.getGeometry(a);
  if (!d) {
    return null;
  }
  switch(d.type) {
    case "BoxGeometry":
    case "BoxBufferGeometry":
      return PhysicsGenerator.createBoxShape(d);
    case "CylinderGeometry":
    case "CylinderBufferGeometry":
      return PhysicsGenerator.createCylinderShape(d);
    case "PlaneGeometry":
    case "PlaneBufferGeometry":
      return PhysicsGenerator.createPlaneShape(d);
    case "SphereGeometry":
    case "SphereBufferGeometry":
      return PhysicsGenerator.createSphereShape(d);
    case "TubeGeometry":
      return PhysicsGenerator.createTubeShape(d);
    case "Geometry":
    case "BufferGeometry":
      return PhysicsGenerator.createConvexPolyhedron(a);
    default:
      return PhysicsGenerator.createBoxShape(d);
  }
};
PhysicsGenerator.createBoxShape = function(a) {
  if (!PhysicsGenerator.getVertices(a).length) {
    return null;
  }
  a.computeBoundingBox();
  a = a.boundingBox;
  return new CANNON.Box(new CANNON.Vec3((a.max.x - a.min.x) / 2, (a.max.y - a.min.y) / 2, (a.max.z - a.min.z) / 2));
};
PhysicsGenerator.createBoundingBoxShape = function(a) {
  var d = new Box3;
  d.setFromObject(a);
  if (!isFinite(d.min.lengthSq())) {
    return null;
  }
  d = new CANNON.Box(new CANNON.Vec3((d.max.x - d.min.x) / 2, (d.max.y - d.min.y) / 2, (d.max.z - d.min.z) / 2));
  a.updateMatrixWorld();
  (new THREE.Vector3).setFromMatrixPosition(a.matrixWorld);
  return d;
};
PhysicsGenerator.createConvexPolyhedron = function(a) {
  var d = new THREE.QuickHull;
  d.setFromObject(a);
  a = [];
  for (var k = [], b = [], g = 0; g < d.faces.length; g++) {
    var f = d.faces[g], e = f.edge;
    do {
      var r = e.head().point;
      a.push(new CANNON.Vec3(r.x, r.y, r.z));
      e = e.next;
    } while (e !== f.edge);
    k.push([a.length - 3, a.length - 2, a.length - 1]);
    b.push(new CANNON.Vec3(f.normal.x, f.normal.y, f.normal.z));
  }
  return new CANNON.ConvexPolyhedron(a, k, b);
};
PhysicsGenerator.createCylinderShape = function(a) {
  a = a.parameters;
  a = new CANNON.Cylinder(a.radiusTop, a.radiusBottom, a.height, a.radialSegments);
  a.orientation = new CANNON.Quaternion;
  a.orientation.setFromEuler(0, 0, 0, "XYZ").normalize();
  return a;
};
PhysicsGenerator.createBoundingCylinderShape = function(a) {
  var d = ["x", "y", "z"];
  d = d.splice(d.indexOf("y"), 1) && d;
  a = PhysicsGenerator.getGeometry(a);
  a.computeBoundingBox();
  a.computeBoundingSphere();
  d = .5 * Math.max(a.boundingBox.max[d[0]] - a.boundingBox.min[d[0]], a.boundingBox.max[d[1]] - a.boundingBox.min[d[1]]);
  a = new CANNON.Cylinder(d, d, a.boundingBox.max.y - a.boundingBox.min.y, 12);
  a.orientation = new CANNON.Quaternion;
  a.orientation.setFromEuler(Math.PI / 2, 0, 0, "XYZ").normalize();
  return a;
};
PhysicsGenerator.createPlaneShape = function(a) {
  a.computeBoundingBox();
  a = a.boundingBox;
  return new CANNON.Box(new CANNON.Vec3((a.max.x - a.min.x) / 2, (a.max.y - a.min.y) / 2, (a.max.z - a.min.z) / 2));
};
PhysicsGenerator.createSphereShape = function(a) {
  return new CANNON.Sphere(a.parameters.radius);
};
PhysicsGenerator.createBoundingSphereShape = function(a) {
  a = PhysicsGenerator.getGeometry(a);
  a.computeBoundingSphere();
  return new CANNON.Sphere(a.boundingSphere.radius);
};
PhysicsGenerator.createTubeShape = function(a) {
  var d = new THREE.BufferGeometry;
  d.fromGeometry(a);
  return createTrimeshShape(d);
};
PhysicsGenerator.createTrimeshShape = function(a) {
  var d = PhysicsGenerator.getVertices(a);
  if (!d.length) {
    return null;
  }
  a = Object.keys(d).map(Number);
  return new CANNON.Trimesh(d, a);
};
PhysicsGenerator.getGeometry = function(a) {
  var d = PhysicsGenerator.getMeshes(a);
  if (0 === d.length) {
    return null;
  }
  var k = new THREE.Geometry;
  if (1 === d.length) {
    a = new THREE.Vector3;
    var b = new THREE.Quaternion, g = new THREE.Vector3(1, 1, 1);
    k = d[0].geometry.clone();
    d[0].updateMatrixWorld();
    d[0].matrixWorld.decompose(a, b, g);
    return k.scale(g.x, g.y, g.z);
  }
  for (b = new THREE.Geometry; g = d.pop();) {
    g.updateMatrixWorld(), g.geometry instanceof THREE.BufferGeometry ? (k.fromBufferGeometry(g.geometry), b.merge(k, g.matrixWorld)) : b.merge(g.geometry, g.matrixWorld);
  }
  d = new THREE.Matrix4;
  d.scale(a.scale);
  b.applyMatrix4(d);
  return b;
};
PhysicsGenerator.getVertices = function(a) {
  a.attributes || (a = (new THREE.BufferGeometry).fromGeometry(a));
  return a.attributes.position.array;
};
PhysicsGenerator.getMeshes = function(a) {
  var d = [];
  a.traverse(function(a) {
    a instanceof THREE.Mesh && d.push(a);
  });
  return d;
};
"use strict";
function UnitConverter() {
}
UnitConverter.scales = new Map([["Y", 1E24], ["Z", 1E21], ["E", 1E18], ["P", 1E15], ["T", 1E12], ["G", 1E9], ["M", 1E6], ["k", 1E3], ["m", .001], ["u", 1E-6], ["n", 1E-9], ["p", 1E-12], ["f", 1E-15], ["a", 1E-18], ["z", 1E-21], ["y", 1E-24]]);
UnitConverter.units = new Map([["m", new Map([["i", function(a) {
  return a / 39.3701;
}]])], ["i", new Map([["m", function(a) {
  return 39.3701 * a;
}]])], ["g", null], ["s", null], ["c", new Map([["k", function(a) {
  return a - 273.15;
}], ["f", function(a) {
  return (a - 32) / 1.8;
}]])], ["k", new Map([["c", function(a) {
  return a + 273.15;
}], ["f", function(a) {
  return (a - 32) / 1.8 + 273.15;
}]])], ["f", new Map([["c", function(a) {
  return 1.8 * a + 32;
}], ["k", function(a) {
  return 1.8 * a - 459.67;
}]])], ["d", new Map([["r", function(a) {
  return 180 / Math.PI * a;
}]])], ["r", new Map([["d", function(a) {
  return a / (180 / Math.PI);
}]])]]);
UnitConverter.convert = function(a, d, k) {
  1 < d.length && (a *= UnitConverter.scales.get(d.charAt(0)), d = d.slice(1));
  var b = 1;
  1 < k.length && (b = UnitConverter.scales.get(k.charAt(0)), k = k.slice(1));
  return d === k ? a / b : UnitConverter.units.get(k).get(d)(a) / b;
};

