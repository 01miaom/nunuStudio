/*


 opentype.js:
   license: MIT (http://opensource.org/licenses/MIT)
   author: Frederik De Bleser <frederik@debleser.be>
   version: 0.6.5

 tiny-inflate:
   license: MIT (http://opensource.org/licenses/MIT)
   author: Devon Govett <devongovett@gmail.com>
   maintainers: devongovett <devongovett@gmail.com>
   homepage: https://github.com/devongovett/tiny-inflate
   version: 1.0.2

 This header is generated by licensify (https://github.com/twada/licensify)
 Determine if an object is a Buffer

 @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 @license  MIT
 LeapJS v0.6.4                                                  
 http://github.com/leapmotion/leapjs/                                        

 Copyright 2013 LeapMotion, Inc. and other contributors                      
 Released under the Apache-2.0 license                                     
 http://github.com/leapmotion/leapjs/blob/master/LICENSE.txt                 
*/
var $jscomp = $jscomp || {};
$jscomp.scope = {};
$jscomp.checkStringArgs = function(a, c, k) {
  if (null == a) {
    throw new TypeError("The 'this' value for String.prototype." + k + " must not be null or undefined");
  }
  if (c instanceof RegExp) {
    throw new TypeError("First argument to String.prototype." + k + " must not be a regular expression");
  }
  return a + "";
};
$jscomp.ASSUME_ES5 = !1;
$jscomp.ASSUME_NO_NATIVE_MAP = !1;
$jscomp.ASSUME_NO_NATIVE_SET = !1;
$jscomp.defineProperty = $jscomp.ASSUME_ES5 || "function" == typeof Object.defineProperties ? Object.defineProperty : function(a, c, k) {
  a != Array.prototype && a != Object.prototype && (a[c] = k.value);
};
$jscomp.getGlobal = function(a) {
  return "undefined" != typeof window && window === a ? a : "undefined" != typeof global && null != global ? global : a;
};
$jscomp.global = $jscomp.getGlobal(this);
$jscomp.polyfill = function(a, c, k, b) {
  if (c) {
    k = $jscomp.global;
    a = a.split(".");
    for (b = 0; b < a.length - 1; b++) {
      var f = a[b];
      f in k || (k[f] = {});
      k = k[f];
    }
    a = a[a.length - 1];
    b = k[a];
    c = c(b);
    c != b && null != c && $jscomp.defineProperty(k, a, {configurable:!0, writable:!0, value:c});
  }
};
$jscomp.polyfill("String.prototype.endsWith", function(a) {
  return a ? a : function(a, k) {
    var b = $jscomp.checkStringArgs(this, a, "endsWith");
    a += "";
    void 0 === k && (k = b.length);
    k = Math.max(0, Math.min(k | 0, b.length));
    for (var c = a.length; 0 < c && 0 < k;) {
      if (b[--k] != a[--c]) {
        return !1;
      }
    }
    return 0 >= c;
  };
}, "es6", "es3");
$jscomp.checkEs6ConformanceViaProxy = function() {
  try {
    var a = {}, c = Object.create(new $jscomp.global.Proxy(a, {get:function(k, b, f) {
      return k == a && "q" == b && f == c;
    }}));
    return !0 === c.q;
  } catch (k) {
    return !1;
  }
};
$jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS = !1;
$jscomp.ES6_CONFORMANCE = $jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS && $jscomp.checkEs6ConformanceViaProxy();
$jscomp.SYMBOL_PREFIX = "jscomp_symbol_";
$jscomp.initSymbol = function() {
  $jscomp.initSymbol = function() {
  };
  $jscomp.global.Symbol || ($jscomp.global.Symbol = $jscomp.Symbol);
};
$jscomp.Symbol = function() {
  var a = 0;
  return function(c) {
    return $jscomp.SYMBOL_PREFIX + (c || "") + a++;
  };
}();
$jscomp.initSymbolIterator = function() {
  $jscomp.initSymbol();
  var a = $jscomp.global.Symbol.iterator;
  a || (a = $jscomp.global.Symbol.iterator = $jscomp.global.Symbol("iterator"));
  "function" != typeof Array.prototype[a] && $jscomp.defineProperty(Array.prototype, a, {configurable:!0, writable:!0, value:function() {
    return $jscomp.arrayIterator(this);
  }});
  $jscomp.initSymbolIterator = function() {
  };
};
$jscomp.initSymbolAsyncIterator = function() {
  $jscomp.initSymbol();
  var a = $jscomp.global.Symbol.asyncIterator;
  a || (a = $jscomp.global.Symbol.asyncIterator = $jscomp.global.Symbol("asyncIterator"));
  $jscomp.initSymbolAsyncIterator = function() {
  };
};
$jscomp.arrayIterator = function(a) {
  var c = 0;
  return $jscomp.iteratorPrototype(function() {
    return c < a.length ? {done:!1, value:a[c++]} : {done:!0};
  });
};
$jscomp.iteratorPrototype = function(a) {
  $jscomp.initSymbolIterator();
  a = {next:a};
  a[$jscomp.global.Symbol.iterator] = function() {
    return this;
  };
  return a;
};
$jscomp.makeIterator = function(a) {
  $jscomp.initSymbolIterator();
  var c = a[Symbol.iterator];
  return c ? c.call(a) : $jscomp.arrayIterator(a);
};
$jscomp.owns = function(a, c) {
  return Object.prototype.hasOwnProperty.call(a, c);
};
$jscomp.polyfill("WeakMap", function(a) {
  function c() {
    if (!a || !Object.seal) {
      return !1;
    }
    try {
      var b = Object.seal({}), d = Object.seal({}), c = new a([[b, 2], [d, 3]]);
      if (2 != c.get(b) || 3 != c.get(d)) {
        return !1;
      }
      c.delete(b);
      c.set(d, 4);
      return !c.has(b) && 4 == c.get(d);
    } catch (t) {
      return !1;
    }
  }
  function k(a) {
    $jscomp.owns(a, f) || $jscomp.defineProperty(a, f, {value:{}});
  }
  function b(a) {
    var b = Object[a];
    b && (Object[a] = function(a) {
      k(a);
      return b(a);
    });
  }
  if ($jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS) {
    if (a && $jscomp.ES6_CONFORMANCE) {
      return a;
    }
  } else {
    if (c()) {
      return a;
    }
  }
  var f = "$jscomp_hidden_" + Math.random();
  b("freeze");
  b("preventExtensions");
  b("seal");
  var d = 0, h = function(a) {
    this.id_ = (d += Math.random() + 1).toString();
    if (a) {
      $jscomp.initSymbol();
      $jscomp.initSymbolIterator();
      a = $jscomp.makeIterator(a);
      for (var b; !(b = a.next()).done;) {
        b = b.value, this.set(b[0], b[1]);
      }
    }
  };
  h.prototype.set = function(a, b) {
    k(a);
    if (!$jscomp.owns(a, f)) {
      throw Error("WeakMap key fail: " + a);
    }
    a[f][this.id_] = b;
    return this;
  };
  h.prototype.get = function(a) {
    return $jscomp.owns(a, f) ? a[f][this.id_] : void 0;
  };
  h.prototype.has = function(a) {
    return $jscomp.owns(a, f) && $jscomp.owns(a[f], this.id_);
  };
  h.prototype.delete = function(a) {
    return $jscomp.owns(a, f) && $jscomp.owns(a[f], this.id_) ? delete a[f][this.id_] : !1;
  };
  return h;
}, "es6", "es3");
$jscomp.polyfill("String.prototype.startsWith", function(a) {
  return a ? a : function(a, k) {
    var b = $jscomp.checkStringArgs(this, a, "startsWith");
    a += "";
    var c = b.length, d = a.length;
    k = Math.max(0, Math.min(k | 0, b.length));
    for (var h = 0; h < d && k < c;) {
      if (b[k++] != a[h++]) {
        return !1;
      }
    }
    return h >= d;
  };
}, "es6", "es3");
$jscomp.polyfill("Number.EPSILON", function(a) {
  return Math.pow(2, -52);
}, "es6", "es3");
$jscomp.polyfill("Math.sign", function(a) {
  return a ? a : function(a) {
    a = Number(a);
    return 0 === a || isNaN(a) ? a : 0 < a ? 1 : -1;
  };
}, "es6", "es3");
$jscomp.iteratorFromArray = function(a, c) {
  $jscomp.initSymbolIterator();
  a instanceof String && (a += "");
  var k = 0, b = {next:function() {
    if (k < a.length) {
      var f = k++;
      return {value:c(f, a[f]), done:!1};
    }
    b.next = function() {
      return {done:!0, value:void 0};
    };
    return b.next();
  }};
  b[Symbol.iterator] = function() {
    return b;
  };
  return b;
};
$jscomp.polyfill("Array.prototype.keys", function(a) {
  return a ? a : function() {
    return $jscomp.iteratorFromArray(this, function(a) {
      return a;
    });
  };
}, "es6", "es3");
$jscomp.polyfill("Array.prototype.values", function(a) {
  return a ? a : function() {
    return $jscomp.iteratorFromArray(this, function(a, k) {
      return k;
    });
  };
}, "es8", "es3");
$jscomp.assign = "function" == typeof Object.assign ? Object.assign : function(a, c) {
  for (var k = 1; k < arguments.length; k++) {
    var b = arguments[k];
    if (b) {
      for (var f in b) {
        $jscomp.owns(b, f) && (a[f] = b[f]);
      }
    }
  }
  return a;
};
$jscomp.polyfill("Object.assign", function(a) {
  return a || $jscomp.assign;
}, "es6", "es3");
$jscomp.polyfill("String.prototype.repeat", function(a) {
  return a ? a : function(a) {
    var c = $jscomp.checkStringArgs(this, null, "repeat");
    if (0 > a || 1342177279 < a) {
      throw new RangeError("Invalid count value");
    }
    a |= 0;
    for (var b = ""; a;) {
      if (a & 1 && (b += c), a >>>= 1) {
        c += c;
      }
    }
    return b;
  };
}, "es6", "es3");
$jscomp.polyfill("Number.isFinite", function(a) {
  return a ? a : function(a) {
    return "number" !== typeof a ? !1 : !isNaN(a) && Infinity !== a && -Infinity !== a;
  };
}, "es6", "es3");
$jscomp.polyfill("Number.isInteger", function(a) {
  return a ? a : function(a) {
    return Number.isFinite(a) ? a === Math.floor(a) : !1;
  };
}, "es6", "es3");
$jscomp.polyfill("Array.prototype.fill", function(a) {
  return a ? a : function(a, k, b) {
    var c = this.length || 0;
    0 > k && (k = Math.max(0, c + k));
    if (null == b || b > c) {
      b = c;
    }
    b = Number(b);
    0 > b && (b = Math.max(0, c + b));
    for (k = Number(k || 0); k < b; k++) {
      this[k] = a;
    }
    return this;
  };
}, "es6", "es3");
$jscomp.FORCE_POLYFILL_PROMISE = !1;
$jscomp.polyfill("Promise", function(a) {
  function c() {
    this.batch_ = null;
  }
  function k(a) {
    return a instanceof f ? a : new f(function(b, d) {
      b(a);
    });
  }
  if (a && !$jscomp.FORCE_POLYFILL_PROMISE) {
    return a;
  }
  c.prototype.asyncExecute = function(a) {
    null == this.batch_ && (this.batch_ = [], this.asyncExecuteBatch_());
    this.batch_.push(a);
    return this;
  };
  c.prototype.asyncExecuteBatch_ = function() {
    var a = this;
    this.asyncExecuteFunction(function() {
      a.executeBatch_();
    });
  };
  var b = $jscomp.global.setTimeout;
  c.prototype.asyncExecuteFunction = function(a) {
    b(a, 0);
  };
  c.prototype.executeBatch_ = function() {
    for (; this.batch_ && this.batch_.length;) {
      var a = this.batch_;
      this.batch_ = [];
      for (var b = 0; b < a.length; ++b) {
        var d = a[b];
        a[b] = null;
        try {
          d();
        } catch (m) {
          this.asyncThrow_(m);
        }
      }
    }
    this.batch_ = null;
  };
  c.prototype.asyncThrow_ = function(a) {
    this.asyncExecuteFunction(function() {
      throw a;
    });
  };
  var f = function(a) {
    this.state_ = 0;
    this.result_ = void 0;
    this.onSettledCallbacks_ = [];
    var b = this.createResolveAndReject_();
    try {
      a(b.resolve, b.reject);
    } catch (q) {
      b.reject(q);
    }
  };
  f.prototype.createResolveAndReject_ = function() {
    function a(a) {
      return function(c) {
        d || (d = !0, a.call(b, c));
      };
    }
    var b = this, d = !1;
    return {resolve:a(this.resolveTo_), reject:a(this.reject_)};
  };
  f.prototype.resolveTo_ = function(a) {
    if (a === this) {
      this.reject_(new TypeError("A Promise cannot resolve to itself"));
    } else {
      if (a instanceof f) {
        this.settleSameAsPromise_(a);
      } else {
        a: {
          switch(typeof a) {
            case "object":
              var b = null != a;
              break a;
            case "function":
              b = !0;
              break a;
            default:
              b = !1;
          }
        }
        b ? this.resolveToNonPromiseObj_(a) : this.fulfill_(a);
      }
    }
  };
  f.prototype.resolveToNonPromiseObj_ = function(a) {
    var b = void 0;
    try {
      b = a.then;
    } catch (q) {
      this.reject_(q);
      return;
    }
    "function" == typeof b ? this.settleSameAsThenable_(b, a) : this.fulfill_(a);
  };
  f.prototype.reject_ = function(a) {
    this.settle_(2, a);
  };
  f.prototype.fulfill_ = function(a) {
    this.settle_(1, a);
  };
  f.prototype.settle_ = function(a, b) {
    if (0 != this.state_) {
      throw Error("Cannot settle(" + a + ", " + b + "): Promise already settled in state" + this.state_);
    }
    this.state_ = a;
    this.result_ = b;
    this.executeOnSettledCallbacks_();
  };
  f.prototype.executeOnSettledCallbacks_ = function() {
    if (null != this.onSettledCallbacks_) {
      for (var a = 0; a < this.onSettledCallbacks_.length; ++a) {
        d.asyncExecute(this.onSettledCallbacks_[a]);
      }
      this.onSettledCallbacks_ = null;
    }
  };
  var d = new c;
  f.prototype.settleSameAsPromise_ = function(a) {
    var b = this.createResolveAndReject_();
    a.callWhenSettled_(b.resolve, b.reject);
  };
  f.prototype.settleSameAsThenable_ = function(a, b) {
    var d = this.createResolveAndReject_();
    try {
      a.call(b, d.resolve, d.reject);
    } catch (m) {
      d.reject(m);
    }
  };
  f.prototype.then = function(a, b) {
    function d(a, b) {
      return "function" == typeof a ? function(b) {
        try {
          c(a(b));
        } catch (y) {
          h(y);
        }
      } : b;
    }
    var c, h, e = new f(function(a, b) {
      c = a;
      h = b;
    });
    this.callWhenSettled_(d(a, c), d(b, h));
    return e;
  };
  f.prototype.catch = function(a) {
    return this.then(void 0, a);
  };
  f.prototype.callWhenSettled_ = function(a, b) {
    function c() {
      switch(f.state_) {
        case 1:
          a(f.result_);
          break;
        case 2:
          b(f.result_);
          break;
        default:
          throw Error("Unexpected state: " + f.state_);
      }
    }
    var f = this;
    null == this.onSettledCallbacks_ ? d.asyncExecute(c) : this.onSettledCallbacks_.push(c);
  };
  f.resolve = k;
  f.reject = function(a) {
    return new f(function(b, d) {
      d(a);
    });
  };
  f.race = function(a) {
    return new f(function(b, d) {
      for (var c = $jscomp.makeIterator(a), f = c.next(); !f.done; f = c.next()) {
        k(f.value).callWhenSettled_(b, d);
      }
    });
  };
  f.all = function(a) {
    var b = $jscomp.makeIterator(a), d = b.next();
    return d.done ? k([]) : new f(function(a, c) {
      function e(b) {
        return function(e) {
          f[b] = e;
          h--;
          0 == h && a(f);
        };
      }
      var f = [], h = 0;
      do {
        f.push(void 0), h++, k(d.value).callWhenSettled_(e(f.length - 1), c), d = b.next();
      } while (!d.done);
    });
  };
  return f;
}, "es6", "es3");
$jscomp.polyfill("Object.is", function(a) {
  return a ? a : function(a, k) {
    return a === k ? 0 !== a || 1 / a === 1 / k : a !== a && k !== k;
  };
}, "es6", "es3");
$jscomp.polyfill("Array.prototype.includes", function(a) {
  return a ? a : function(a, k) {
    var b = this;
    b instanceof String && (b = String(b));
    var c = b.length;
    k = k || 0;
    for (0 > k && (k = Math.max(k + c, 0)); k < c; k++) {
      var d = b[k];
      if (d === a || Object.is(d, a)) {
        return !0;
      }
    }
    return !1;
  };
}, "es7", "es3");
$jscomp.polyfill("String.prototype.includes", function(a) {
  return a ? a : function(a, k) {
    return -1 !== $jscomp.checkStringArgs(this, a, "includes").indexOf(a, k || 0);
  };
}, "es6", "es3");
function NunuApp(a) {
  this.renderer = this.program = null;
  this.canvasFitWindow = this.running = !1;
  this.canvas = a;
  this.events = new EventManager;
  void 0 === a && (this.canvas = document.createElement("canvas"), this.canvas.style.position = "absolute", this.canvas.style.left = "0px", this.canvas.style.top = "0px", this.canvasFitWindow = !0, document.body.appendChild(this.canvas));
}
NunuApp.loadApp = function(a, c) {
  "string" === typeof c && (c = document.getElementById(c));
  var k = new NunuApp(c);
  k.loadRunProgram(a);
  window.addEventListener("resize", function() {
    Nunu.isFullscreen() ? (k.canvas.width = window.innerWidth, k.canvas.height = window.innerHeight) : (k.canvas.width = nunuApps[i].canvas.parentElement.offsetWidth, k.canvas.height = nunuApps[i].canvas.parentElement.offsetWidth);
    k.resize();
  });
};
NunuApp.prototype.run = function() {
  if (null === this.program) {
    console.warn("nunuStudio: no program is loaded [app.loadPogram(fname)]");
  } else {
    this.renderer = this.program.rendererConfig.createRenderer(this.canvas);
    this.keyboard = new Keyboard;
    this.mouse = new Mouse;
    this.mouse.setCanvas(this.canvas);
    this.program.app = this;
    this.program.defaultCamera = new PerspectiveCamera(60, 1, .1, 1E5);
    this.program.defaultCamera.position.set(0, 5, -5);
    this.program.setRenderer(this.renderer);
    this.program.setMouseKeyboard(this.mouse, this.keyboard);
    this.program.initialize();
    if (this.program.lockPointer) {
      var a = this.canvas;
      a.requestPointerLock = a.requestPointerLock || a.mozRequestPointerLock || a.webkitRequestPointerLock;
      this.events.add(a, "click", function() {
        a.requestPointerLock && a.requestPointerLock();
      });
    }
    var c = this;
    this.events.add(window, "beforeunload", function() {
      c.exit();
    });
    this.events.create();
    this.resize();
    this.resume();
  }
};
NunuApp.prototype.loadRunProgram = function(a, c, k) {
  this.loadProgramAsync(a, function(a) {
    a.run();
    void 0 !== c && c(a);
  }, k);
};
NunuApp.prototype.loadProgram = function(a) {
  if (a.endsWith(".isp")) {
    var c = new ObjectLoader;
    a = FileSystem.readFile(a);
    this.program = c.parse(JSON.parse(a));
  } else {
    if (a.endsWith(".nsp")) {
      c = new ObjectLoader;
      a = FileSystem.readFileArrayBuffer(a);
      var k = new dcodeIO.PSON.StaticPair;
      this.program = c.parse(k.decode(a));
    }
  }
};
NunuApp.prototype.loadProgramAsync = function(a, c, k) {
  var b = this;
  a.endsWith(".isp") ? FileSystem.readFile(a, !1, function(a) {
    var d = new ObjectLoader;
    b.program = d.parse(JSON.parse(a));
    void 0 !== c && c(b);
  }, k) : a.endsWith(".nsp") && FileSystem.readFileArrayBuffer(a, !1, function(a) {
    var d = new ObjectLoader, f = new dcodeIO.PSON.StaticPair;
    b.program = d.parse(f.decode(a));
    void 0 !== c && c(b);
  }, k);
};
NunuApp.prototype.update = function() {
  this.mouse.update();
  this.keyboard.update();
  this.program.update();
  this.program.render(this.renderer);
};
NunuApp.prototype.exit = function() {
  this.events.destroy();
  null !== this.program && (this.program.dispose(), this.program = null);
  null !== this.renderer && (this.renderer.dispose(), this.renderer = null);
  null !== this.mouse && (this.mouse.dispose(), this.mouse = null);
  null !== this.keyboard && (this.keyboard.dispose(), this.keyboard = null);
  if (void 0 !== this.onExit) {
    this.onExit();
  }
};
NunuApp.prototype.resume = function() {
  if (null !== this.program && !this.running) {
    var a = this, c = function() {
      a.running && (a.update(), a.program.useVR ? a.program.display.requestAnimationFrame(c) : requestAnimationFrame(c));
    };
    this.running = !0;
    c();
  }
};
NunuApp.prototype.pause = function() {
  this.running = !1;
};
NunuApp.prototype.setCanvas = function(a) {
  this.canvas = a;
  this.canvasFitWindow = !1;
};
NunuApp.prototype.resize = function() {
  if (null !== this.canvas && null !== this.program && null !== this.renderer) {
    if (this.canvasFitWindow) {
      this.canvas.style.width = window.innerWidth + "px";
      this.canvas.style.height = window.innerHeight + "px";
      var a = window.innerWidth;
      var c = window.innerHeight;
    } else {
      a = this.canvas.offsetWidth, c = this.canvas.offsetHeight;
    }
    this.program.handlePixelRatio && (a *= window.devicePixelRatio, c *= window.devicePixelRatio);
    this.renderer.setSize(a, c, !1);
    this.program.resize(a, c);
  }
};
NunuApp.prototype.sendData = function(a) {
  null !== this.program && this.program.receiveDataApp(a);
};
NunuApp.prototype.setOnDataReceived = function(a) {
  this.onDataReceived = a;
};
NunuApp.prototype.setOnExit = function(a) {
  this.onExit = a;
};
NunuApp.prototype.vrAvailable = function() {
  return null !== this.program && this.program.vr && Nunu.webvrAvailable();
};
NunuApp.prototype.toggleVR = function() {
  this.vrAvailable() ? this.program.useVR ? this.program.exitVR() : this.program.displayVR() : console.warn("nunuStudio: loaded program is not VR enabled");
};
NunuApp.prototype.toggleFullscreen = function(a) {
  var c = Nunu.isFullscreen();
  void 0 === a && (a = this.canvas);
  Nunu.setFullscreen(!c, a);
};
(function(a, c) {
  "object" === typeof exports && "undefined" !== typeof module ? c(exports) : "function" === typeof define && define.amd ? define(["exports"], c) : (a = a || self, c(a.THREE = {}));
})(this, function(a) {
  function c() {
  }
  function k(g, a) {
    this.x = g || 0;
    this.y = a || 0;
  }
  function b() {
    this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
    0 < arguments.length && console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.");
  }
  function f(g, a, b, e) {
    this._x = g || 0;
    this._y = a || 0;
    this._z = b || 0;
    this._w = void 0 !== e ? e : 1;
  }
  function d(g, a, b) {
    this.x = g || 0;
    this.y = a || 0;
    this.z = b || 0;
  }
  function h() {
    this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1];
    0 < arguments.length && console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.");
  }
  function n(g, a, b, e, d, c, f, l, p, m) {
    Object.defineProperty(this, "id", {value:Xf++});
    this.uuid = ia.generateUUID();
    this.name = "";
    this.image = void 0 !== g ? g : n.DEFAULT_IMAGE;
    this.mipmaps = [];
    this.mapping = void 0 !== a ? a : n.DEFAULT_MAPPING;
    this.wrapS = void 0 !== b ? b : 1001;
    this.wrapT = void 0 !== e ? e : 1001;
    this.magFilter = void 0 !== d ? d : 1006;
    this.minFilter = void 0 !== c ? c : 1008;
    this.anisotropy = void 0 !== p ? p : 1;
    this.format = void 0 !== f ? f : 1023;
    this.type = void 0 !== l ? l : 1009;
    this.offset = new k(0, 0);
    this.repeat = new k(1, 1);
    this.center = new k(0, 0);
    this.rotation = 0;
    this.matrixAutoUpdate = !0;
    this.matrix = new h;
    this.generateMipmaps = !0;
    this.premultiplyAlpha = !1;
    this.flipY = !0;
    this.unpackAlignment = 4;
    this.encoding = void 0 !== m ? m : 3E3;
    this.version = 0;
    this.onUpdate = null;
  }
  function q(g, a, b, e) {
    this.x = g || 0;
    this.y = a || 0;
    this.z = b || 0;
    this.w = void 0 !== e ? e : 1;
  }
  function m(g, a, b) {
    this.width = g;
    this.height = a;
    this.scissor = new q(0, 0, g, a);
    this.scissorTest = !1;
    this.viewport = new q(0, 0, g, a);
    b = b || {};
    this.texture = new n(void 0, void 0, b.wrapS, b.wrapT, b.magFilter, b.minFilter, b.format, b.type, b.anisotropy, b.encoding);
    this.texture.generateMipmaps = void 0 !== b.generateMipmaps ? b.generateMipmaps : !1;
    this.texture.minFilter = void 0 !== b.minFilter ? b.minFilter : 1006;
    this.depthBuffer = void 0 !== b.depthBuffer ? b.depthBuffer : !0;
    this.stencilBuffer = void 0 !== b.stencilBuffer ? b.stencilBuffer : !0;
    this.depthTexture = void 0 !== b.depthTexture ? b.depthTexture : null;
  }
  function t(g, a, b) {
    m.call(this, g, a, b);
    this.samples = 4;
  }
  function e(g, a, b) {
    m.call(this, g, a, b);
  }
  function l(g, a, b, e, d, c, f, l, h, p, k, m) {
    n.call(this, null, c, f, l, h, p, e, d, k, m);
    this.image = {data:g, width:a, height:b};
    this.magFilter = void 0 !== h ? h : 1003;
    this.minFilter = void 0 !== p ? p : 1003;
    this.flipY = this.generateMipmaps = !1;
    this.unpackAlignment = 1;
  }
  function u(g, a) {
    this.min = void 0 !== g ? g : new d(Infinity, Infinity, Infinity);
    this.max = void 0 !== a ? a : new d(-Infinity, -Infinity, -Infinity);
  }
  function w(g, a) {
    this.center = void 0 !== g ? g : new d;
    this.radius = void 0 !== a ? a : 0;
  }
  function y(g, a) {
    this.normal = void 0 !== g ? g : new d(1, 0, 0);
    this.constant = void 0 !== a ? a : 0;
  }
  function x(g, a, b, e, d, c) {
    this.planes = [void 0 !== g ? g : new y, void 0 !== a ? a : new y, void 0 !== b ? b : new y, void 0 !== e ? e : new y, void 0 !== d ? d : new y, void 0 !== c ? c : new y];
  }
  function p(g) {
    var a = {}, b;
    for (b in g) {
      a[b] = {};
      for (var e in g[b]) {
        var d = g[b][e];
        d && (d.isColor || d.isMatrix3 || d.isMatrix4 || d.isVector2 || d.isVector3 || d.isVector4 || d.isTexture) ? a[b][e] = d.clone() : Array.isArray(d) ? a[b][e] = d.slice() : a[b][e] = d;
      }
    }
    return a;
  }
  function v(g) {
    for (var a = {}, b = 0; b < g.length; b++) {
      var e = p(g[b]), d;
      for (d in e) {
        a[d] = e[d];
      }
    }
    return a;
  }
  function z(g, a, b) {
    return void 0 === a && void 0 === b ? this.set(g) : this.setRGB(g, a, b);
  }
  function C() {
    function g(r, d) {
      !1 !== b && (e(r, d), a.requestAnimationFrame(g));
    }
    var a = null, b = !1, e = null;
    return {start:function() {
      !0 !== b && null !== e && (a.requestAnimationFrame(g), b = !0);
    }, stop:function() {
      b = !1;
    }, setAnimationLoop:function(g) {
      e = g;
    }, setContext:function(g) {
      a = g;
    }};
  }
  function A(g) {
    function a(a, r) {
      var b = a.array, e = a.dynamic ? 35048 : 35044, d = g.createBuffer();
      g.bindBuffer(r, d);
      g.bufferData(r, b, e);
      a.onUploadCallback();
      r = 5126;
      b instanceof Float32Array ? r = 5126 : b instanceof Float64Array ? console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.") : b instanceof Uint16Array ? r = 5123 : b instanceof Int16Array ? r = 5122 : b instanceof Uint32Array ? r = 5125 : b instanceof Int32Array ? r = 5124 : b instanceof Int8Array ? r = 5120 : b instanceof Uint8Array && (r = 5121);
      return {buffer:d, type:r, bytesPerElement:b.BYTES_PER_ELEMENT, version:a.version};
    }
    var b = new WeakMap;
    return {get:function(g) {
      g.isInterleavedBufferAttribute && (g = g.data);
      return b.get(g);
    }, remove:function(a) {
      a.isInterleavedBufferAttribute && (a = a.data);
      var r = b.get(a);
      r && (g.deleteBuffer(r.buffer), b.delete(a));
    }, update:function(r, e) {
      r.isInterleavedBufferAttribute && (r = r.data);
      var d = b.get(r);
      if (void 0 === d) {
        b.set(r, a(r, e));
      } else {
        if (d.version < r.version) {
          var F = r, c = F.array, f = F.updateRange;
          g.bindBuffer(e, d.buffer);
          !1 === F.dynamic ? g.bufferData(e, c, 35044) : -1 === f.count ? g.bufferSubData(e, 0, c) : 0 === f.count ? console.error("THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.") : (g.bufferSubData(e, f.offset * c.BYTES_PER_ELEMENT, c.subarray(f.offset, f.offset + f.count)), f.count = -1);
          d.version = r.version;
        }
      }
    }};
  }
  function D(g, a, b, e, c, f) {
    this.a = g;
    this.b = a;
    this.c = b;
    this.normal = e && e.isVector3 ? e : new d;
    this.vertexNormals = Array.isArray(e) ? e : [];
    this.color = c && c.isColor ? c : new z;
    this.vertexColors = Array.isArray(c) ? c : [];
    this.materialIndex = void 0 !== f ? f : 0;
  }
  function E(g, a, b, e) {
    this._x = g || 0;
    this._y = a || 0;
    this._z = b || 0;
    this._order = e || E.DefaultOrder;
  }
  function B() {
    this.mask = 1;
  }
  function G() {
    Object.defineProperty(this, "id", {value:Yf++});
    this.uuid = ia.generateUUID();
    this.name = "";
    this.type = "Object3D";
    this.parent = null;
    this.children = [];
    this.up = G.DefaultUp.clone();
    var g = new d, a = new E, e = new f, c = new d(1, 1, 1);
    a.onChange(function() {
      e.setFromEuler(a, !1);
    });
    e.onChange(function() {
      a.setFromQuaternion(e, void 0, !1);
    });
    Object.defineProperties(this, {position:{configurable:!0, enumerable:!0, value:g}, rotation:{configurable:!0, enumerable:!0, value:a}, quaternion:{configurable:!0, enumerable:!0, value:e}, scale:{configurable:!0, enumerable:!0, value:c}, modelViewMatrix:{value:new b}, normalMatrix:{value:new h}});
    this.matrix = new b;
    this.matrixWorld = new b;
    this.matrixAutoUpdate = G.DefaultMatrixAutoUpdate;
    this.matrixWorldNeedsUpdate = !1;
    this.layers = new B;
    this.visible = !0;
    this.receiveShadow = this.castShadow = !1;
    this.frustumCulled = !0;
    this.renderOrder = 0;
    this.userData = {};
  }
  function H() {
    Object.defineProperty(this, "id", {value:Zf += 2});
    this.uuid = ia.generateUUID();
    this.name = "";
    this.type = "Geometry";
    this.vertices = [];
    this.colors = [];
    this.faces = [];
    this.faceVertexUvs = [[]];
    this.morphTargets = [];
    this.morphNormals = [];
    this.skinWeights = [];
    this.skinIndices = [];
    this.lineDistances = [];
    this.boundingSphere = this.boundingBox = null;
    this.groupsNeedUpdate = this.lineDistancesNeedUpdate = this.colorsNeedUpdate = this.normalsNeedUpdate = this.uvsNeedUpdate = this.verticesNeedUpdate = this.elementsNeedUpdate = !1;
  }
  function K(g, a, b) {
    if (Array.isArray(g)) {
      throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
    }
    this.name = "";
    this.array = g;
    this.itemSize = a;
    this.count = void 0 !== g ? g.length / a : 0;
    this.normalized = !0 === b;
    this.dynamic = !1;
    this.updateRange = {offset:0, count:-1};
    this.version = 0;
  }
  function I(g, a, b) {
    K.call(this, new Int8Array(g), a, b);
  }
  function L(g, a, b) {
    K.call(this, new Uint8Array(g), a, b);
  }
  function R(g, a, b) {
    K.call(this, new Uint8ClampedArray(g), a, b);
  }
  function J(g, a, b) {
    K.call(this, new Int16Array(g), a, b);
  }
  function Q(g, a, b) {
    K.call(this, new Uint16Array(g), a, b);
  }
  function aa(g, a, b) {
    K.call(this, new Int32Array(g), a, b);
  }
  function V(g, a, b) {
    K.call(this, new Uint32Array(g), a, b);
  }
  function N(g, a, b) {
    K.call(this, new Float32Array(g), a, b);
  }
  function S(g, a, b) {
    K.call(this, new Float64Array(g), a, b);
  }
  function W() {
    this.vertices = [];
    this.normals = [];
    this.colors = [];
    this.uvs = [];
    this.uvs2 = [];
    this.groups = [];
    this.morphTargets = {};
    this.skinWeights = [];
    this.skinIndices = [];
    this.boundingSphere = this.boundingBox = null;
    this.groupsNeedUpdate = this.uvsNeedUpdate = this.colorsNeedUpdate = this.normalsNeedUpdate = this.verticesNeedUpdate = !1;
  }
  function M(g) {
    if (0 === g.length) {
      return -Infinity;
    }
    for (var a = g[0], b = 1, e = g.length; b < e; ++b) {
      g[b] > a && (a = g[b]);
    }
    return a;
  }
  function O() {
    Object.defineProperty(this, "id", {value:$f += 2});
    this.uuid = ia.generateUUID();
    this.name = "";
    this.type = "BufferGeometry";
    this.index = null;
    this.attributes = {};
    this.morphAttributes = {};
    this.groups = [];
    this.boundingSphere = this.boundingBox = null;
    this.drawRange = {start:0, count:Infinity};
    this.userData = {};
  }
  function P(g, a, b, e, d, c) {
    H.call(this);
    this.type = "BoxGeometry";
    this.parameters = {width:g, height:a, depth:b, widthSegments:e, heightSegments:d, depthSegments:c};
    this.fromBufferGeometry(new ka(g, a, b, e, d, c));
    this.mergeVertices();
  }
  function ka(g, a, b, e, c, f) {
    function r(g, a, r, b, e, c, f, m, t, q, u) {
      var v = c / t, Y = f / q, w = c / 2, U = f / 2, z = m / 2;
      f = t + 1;
      var y = q + 1, Ba = c = 0, x, sa, D = new d;
      for (sa = 0; sa < y; sa++) {
        var C = sa * Y - U;
        for (x = 0; x < f; x++) {
          D[g] = (x * v - w) * b, D[a] = C * e, D[r] = z, h.push(D.x, D.y, D.z), D[g] = 0, D[a] = 0, D[r] = 0 < m ? 1 : -1, p.push(D.x, D.y, D.z), k.push(x / t), k.push(1 - sa / q), c += 1;
        }
      }
      for (sa = 0; sa < q; sa++) {
        for (x = 0; x < t; x++) {
          g = T + x + f * (sa + 1), a = T + (x + 1) + f * (sa + 1), r = T + (x + 1) + f * sa, l.push(T + x + f * sa, g, r), l.push(g, a, r), Ba += 6;
        }
      }
      F.addGroup(n, Ba, u);
      n += Ba;
      T += c;
    }
    O.call(this);
    this.type = "BoxBufferGeometry";
    this.parameters = {width:g, height:a, depth:b, widthSegments:e, heightSegments:c, depthSegments:f};
    var F = this;
    g = g || 1;
    a = a || 1;
    b = b || 1;
    e = Math.floor(e) || 1;
    c = Math.floor(c) || 1;
    f = Math.floor(f) || 1;
    var l = [], h = [], p = [], k = [], T = 0, n = 0;
    r("z", "y", "x", -1, -1, b, a, g, f, c, 0);
    r("z", "y", "x", 1, -1, b, a, -g, f, c, 1);
    r("x", "z", "y", 1, 1, g, b, a, e, f, 2);
    r("x", "z", "y", 1, -1, g, b, -a, e, f, 3);
    r("x", "y", "z", 1, -1, g, a, b, e, c, 4);
    r("x", "y", "z", -1, -1, g, a, -b, e, c, 5);
    this.setIndex(l);
    this.addAttribute("position", new N(h, 3));
    this.addAttribute("normal", new N(p, 3));
    this.addAttribute("uv", new N(k, 2));
  }
  function ha(g, a, b, e) {
    H.call(this);
    this.type = "PlaneGeometry";
    this.parameters = {width:g, height:a, widthSegments:b, heightSegments:e};
    this.fromBufferGeometry(new ja(g, a, b, e));
    this.mergeVertices();
  }
  function ja(g, a, b, e) {
    O.call(this);
    this.type = "PlaneBufferGeometry";
    this.parameters = {width:g, height:a, widthSegments:b, heightSegments:e};
    g = g || 1;
    a = a || 1;
    var r = g / 2, d = a / 2;
    b = Math.floor(b) || 1;
    e = Math.floor(e) || 1;
    var F = b + 1, c = e + 1, f = g / b, l = a / e, h = [], p = [], k = [], T = [];
    for (g = 0; g < c; g++) {
      var n = g * l - d;
      for (a = 0; a < F; a++) {
        p.push(a * f - r, -n, 0), k.push(0, 0, 1), T.push(a / b), T.push(1 - g / e);
      }
    }
    for (g = 0; g < e; g++) {
      for (a = 0; a < b; a++) {
        r = a + F * (g + 1), d = a + 1 + F * (g + 1), c = a + 1 + F * g, h.push(a + F * g, r, c), h.push(r, d, c);
      }
    }
    this.setIndex(h);
    this.addAttribute("position", new N(p, 3));
    this.addAttribute("normal", new N(k, 3));
    this.addAttribute("uv", new N(T, 2));
  }
  function X() {
    Object.defineProperty(this, "id", {value:bg++});
    this.uuid = ia.generateUUID();
    this.name = "";
    this.type = "Material";
    this.lights = this.fog = !0;
    this.blending = 1;
    this.side = 0;
    this.vertexTangents = this.flatShading = !1;
    this.vertexColors = 0;
    this.opacity = 1;
    this.transparent = !1;
    this.blendSrc = 204;
    this.blendDst = 205;
    this.blendEquation = 100;
    this.blendEquationAlpha = this.blendDstAlpha = this.blendSrcAlpha = null;
    this.depthFunc = 3;
    this.depthWrite = this.depthTest = !0;
    this.clippingPlanes = null;
    this.clipShadows = this.clipIntersection = !1;
    this.shadowSide = null;
    this.colorWrite = !0;
    this.precision = null;
    this.polygonOffset = !1;
    this.polygonOffsetUnits = this.polygonOffsetFactor = 0;
    this.dithering = !1;
    this.alphaTest = 0;
    this.premultipliedAlpha = !1;
    this.visible = !0;
    this.userData = {};
    this.needsUpdate = !0;
  }
  function fa(g) {
    X.call(this);
    this.type = "ShaderMaterial";
    this.defines = {};
    this.uniforms = {};
    this.vertexShader = "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";
    this.fragmentShader = "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";
    this.linewidth = 1;
    this.wireframe = !1;
    this.wireframeLinewidth = 1;
    this.morphNormals = this.morphTargets = this.skinning = this.clipping = this.lights = this.fog = !1;
    this.extensions = {derivatives:!1, fragDepth:!1, drawBuffers:!1, shaderTextureLOD:!1};
    this.defaultAttributeValues = {color:[1, 1, 1], uv:[0, 0], uv2:[0, 0]};
    this.index0AttributeName = void 0;
    this.uniformsNeedUpdate = !1;
    void 0 !== g && (void 0 !== g.attributes && console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."), this.setValues(g));
  }
  function ba(g, a) {
    this.origin = void 0 !== g ? g : new d;
    this.direction = void 0 !== a ? a : new d;
  }
  function la(g, a, b) {
    this.a = void 0 !== g ? g : new d;
    this.b = void 0 !== a ? a : new d;
    this.c = void 0 !== b ? b : new d;
  }
  function ma(g) {
    X.call(this);
    this.type = "MeshBasicMaterial";
    this.color = new z(16777215);
    this.lightMap = this.map = null;
    this.lightMapIntensity = 1;
    this.aoMap = null;
    this.aoMapIntensity = 1;
    this.envMap = this.alphaMap = this.specularMap = null;
    this.combine = 0;
    this.reflectivity = 1;
    this.refractionRatio = .98;
    this.wireframe = !1;
    this.wireframeLinewidth = 1;
    this.wireframeLinejoin = this.wireframeLinecap = "round";
    this.lights = this.morphTargets = this.skinning = !1;
    this.setValues(g);
  }
  function ca(g, a) {
    G.call(this);
    this.type = "Mesh";
    this.geometry = void 0 !== g ? g : new O;
    this.material = void 0 !== a ? a : new ma({color:16777215 * Math.random()});
    this.drawMode = 0;
    this.updateMorphTargets();
  }
  function Ta(g, a, b, e) {
    function r(g, r) {
      a.buffers.color.setClear(g.r, g.g, g.b, r, e);
    }
    var d = new z(0), F = 0, c, f, l = null, h = 0;
    return {getClearColor:function() {
      return d;
    }, setClearColor:function(g, a) {
      d.set(g);
      F = void 0 !== a ? a : 1;
      r(d, F);
    }, getClearAlpha:function() {
      return F;
    }, setClearAlpha:function(g) {
      F = g;
      r(d, F);
    }, render:function(a, e, k, T) {
      e = e.background;
      k = g.vr;
      (k = k.getSession && k.getSession()) && "additive" === k.environmentBlendMode && (e = null);
      null === e ? (r(d, F), l = null, h = 0) : e && e.isColor && (r(e, 1), T = !0, l = null, h = 0);
      (g.autoClear || T) && g.clear(g.autoClearColor, g.autoClearDepth, g.autoClearStencil);
      if (e && (e.isCubeTexture || e.isWebGLRenderTargetCube)) {
        void 0 === f && (f = new ca(new ka(1, 1, 1), new fa({type:"BackgroundCubeMaterial", uniforms:p(eb.cube.uniforms), vertexShader:eb.cube.vertexShader, fragmentShader:eb.cube.fragmentShader, side:1, depthTest:!1, depthWrite:!1, fog:!1})), f.geometry.removeAttribute("normal"), f.geometry.removeAttribute("uv"), f.onBeforeRender = function(g, a, r) {
          this.matrixWorld.copyPosition(r.matrixWorld);
        }, Object.defineProperty(f.material, "map", {get:function() {
          return this.uniforms.tCube.value;
        }}), b.update(f));
        T = e.isWebGLRenderTargetCube ? e.texture : e;
        f.material.uniforms.tCube.value = T;
        f.material.uniforms.tFlip.value = e.isWebGLRenderTargetCube ? 1 : -1;
        if (l !== e || h !== T.version) {
          f.material.needsUpdate = !0, l = e, h = T.version;
        }
        a.unshift(f, f.geometry, f.material, 0, 0, null);
      } else {
        if (e && e.isTexture) {
          void 0 === c && (c = new ca(new ja(2, 2), new fa({type:"BackgroundMaterial", uniforms:p(eb.background.uniforms), vertexShader:eb.background.vertexShader, fragmentShader:eb.background.fragmentShader, side:0, depthTest:!1, depthWrite:!1, fog:!1})), c.geometry.removeAttribute("normal"), Object.defineProperty(c.material, "map", {get:function() {
            return this.uniforms.t2D.value;
          }}), b.update(c));
          c.material.uniforms.t2D.value = e;
          !0 === e.matrixAutoUpdate && e.updateMatrix();
          c.material.uniforms.uvTransform.value.copy(e.matrix);
          if (l !== e || h !== e.version) {
            c.material.needsUpdate = !0, l = e, h = e.version;
          }
          a.unshift(c, c.geometry, c.material, 0, 0, null);
        }
      }
    }};
  }
  function nb(g, a, b, e) {
    var r;
    this.setMode = function(g) {
      r = g;
    };
    this.render = function(a, e) {
      g.drawArrays(r, a, e);
      b.update(e, r);
    };
    this.renderInstances = function(d, c, F) {
      if (e.isWebGL2) {
        var f = g;
      } else {
        if (f = a.get("ANGLE_instanced_arrays"), null === f) {
          console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
          return;
        }
      }
      f[e.isWebGL2 ? "drawArraysInstanced" : "drawArraysInstancedANGLE"](r, c, F, d.maxInstancedCount);
      b.update(F, r, d.maxInstancedCount);
    };
  }
  function ob(g, a, b) {
    function r(a) {
      if ("highp" === a) {
        if (0 < g.getShaderPrecisionFormat(35633, 36338).precision && 0 < g.getShaderPrecisionFormat(35632, 36338).precision) {
          return "highp";
        }
        a = "mediump";
      }
      return "mediump" === a && 0 < g.getShaderPrecisionFormat(35633, 36337).precision && 0 < g.getShaderPrecisionFormat(35632, 36337).precision ? "mediump" : "lowp";
    }
    var e, d = "undefined" !== typeof WebGL2RenderingContext && g instanceof WebGL2RenderingContext, c = void 0 !== b.precision ? b.precision : "highp", F = r(c);
    F !== c && (console.warn("THREE.WebGLRenderer:", c, "not supported, using", F, "instead."), c = F);
    b = !0 === b.logarithmicDepthBuffer;
    F = g.getParameter(34930);
    var f = g.getParameter(35660), l = g.getParameter(3379), h = g.getParameter(34076), p = g.getParameter(34921), k = g.getParameter(36347), n = g.getParameter(36348), m = g.getParameter(36349), t = 0 < f, q = d || !!a.get("OES_texture_float"), u = t && q, v = d ? g.getParameter(36183) : 0;
    return {isWebGL2:d, getMaxAnisotropy:function() {
      if (void 0 !== e) {
        return e;
      }
      var r = a.get("EXT_texture_filter_anisotropic");
      return e = null !== r ? g.getParameter(r.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 0;
    }, getMaxPrecision:r, precision:c, logarithmicDepthBuffer:b, maxTextures:F, maxVertexTextures:f, maxTextureSize:l, maxCubemapSize:h, maxAttributes:p, maxVertexUniforms:k, maxVaryings:n, maxFragmentUniforms:m, vertexTextures:t, floatFragmentTextures:q, floatVertexTextures:u, maxSamples:v};
  }
  function pb() {
    function g() {
      k.value !== e && (k.value = e, k.needsUpdate = 0 < d);
      b.numPlanes = d;
      b.numIntersection = 0;
    }
    function a(g, a, r, e) {
      var d = null !== g ? g.length : 0, c = null;
      if (0 !== d) {
        c = k.value;
        if (!0 !== e || null === c) {
          e = r + 4 * d;
          a = a.matrixWorldInverse;
          p.getNormalMatrix(a);
          if (null === c || c.length < e) {
            c = new Float32Array(e);
          }
          for (e = 0; e !== d; ++e, r += 4) {
            l.copy(g[e]).applyMatrix4(a, p), l.normal.toArray(c, r), c[r + 3] = l.constant;
          }
        }
        k.value = c;
        k.needsUpdate = !0;
      }
      b.numPlanes = d;
      return c;
    }
    var b = this, e = null, d = 0, c = !1, f = !1, l = new y, p = new h, k = {value:null, needsUpdate:!1};
    this.uniform = k;
    this.numIntersection = this.numPlanes = 0;
    this.init = function(g, r, b) {
      var F = 0 !== g.length || r || 0 !== d || c;
      c = r;
      e = a(g, b, 0);
      d = g.length;
      return F;
    };
    this.beginShadows = function() {
      f = !0;
      a(null);
    };
    this.endShadows = function() {
      f = !1;
      g();
    };
    this.setState = function(r, b, F, l, h, p) {
      if (!c || null === r || 0 === r.length || f && !F) {
        f ? a(null) : g();
      } else {
        F = f ? 0 : d;
        var T = 4 * F, n = h.clippingState || null;
        k.value = n;
        n = a(r, l, T, p);
        for (r = 0; r !== T; ++r) {
          n[r] = e[r];
        }
        h.clippingState = n;
        this.numIntersection = b ? this.numPlanes : 0;
        this.numPlanes += F;
      }
    };
  }
  function qb(g) {
    var a = {};
    return {get:function(r) {
      if (void 0 !== a[r]) {
        return a[r];
      }
      switch(r) {
        case "WEBGL_depth_texture":
          var b = g.getExtension("WEBGL_depth_texture") || g.getExtension("MOZ_WEBGL_depth_texture") || g.getExtension("WEBKIT_WEBGL_depth_texture");
          break;
        case "EXT_texture_filter_anisotropic":
          b = g.getExtension("EXT_texture_filter_anisotropic") || g.getExtension("MOZ_EXT_texture_filter_anisotropic") || g.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
          break;
        case "WEBGL_compressed_texture_s3tc":
          b = g.getExtension("WEBGL_compressed_texture_s3tc") || g.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || g.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
          break;
        case "WEBGL_compressed_texture_pvrtc":
          b = g.getExtension("WEBGL_compressed_texture_pvrtc") || g.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
          break;
        default:
          b = g.getExtension(r);
      }
      null === b && console.warn("THREE.WebGLRenderer: " + r + " extension not supported.");
      return a[r] = b;
    }};
  }
  function ne(g, a, b) {
    function r(g) {
      var c = g.target;
      g = e[c.id];
      null !== g.index && a.remove(g.index);
      for (var F in g.attributes) {
        a.remove(g.attributes[F]);
      }
      c.removeEventListener("dispose", r);
      delete e[c.id];
      if (F = d[g.id]) {
        a.remove(F), delete d[g.id];
      }
      b.memory.geometries--;
    }
    var e = {}, d = {};
    return {get:function(g, a) {
      var d = e[a.id];
      if (d) {
        return d;
      }
      a.addEventListener("dispose", r);
      a.isBufferGeometry ? d = a : a.isGeometry && (void 0 === a._bufferGeometry && (a._bufferGeometry = (new O).setFromObject(g)), d = a._bufferGeometry);
      e[a.id] = d;
      b.memory.geometries++;
      return d;
    }, update:function(g) {
      var r = g.index, b = g.attributes;
      null !== r && a.update(r, 34963);
      for (var e in b) {
        a.update(b[e], 34962);
      }
      g = g.morphAttributes;
      for (e in g) {
        r = g[e];
        b = 0;
        for (var d = r.length; b < d; b++) {
          a.update(r[b], 34962);
        }
      }
    }, getWireframeAttribute:function(g) {
      var r = d[g.id];
      if (r) {
        return r;
      }
      r = [];
      var b = g.index, e = g.attributes;
      if (null !== b) {
        b = b.array;
        e = 0;
        for (var c = b.length; e < c; e += 3) {
          var F = b[e + 0], f = b[e + 1], l = b[e + 2];
          r.push(F, f, f, l, l, F);
        }
      } else {
        for (b = e.position.array, e = 0, c = b.length / 3 - 1; e < c; e += 3) {
          F = e + 0, f = e + 1, l = e + 2, r.push(F, f, f, l, l, F);
        }
      }
      r = new (65535 < M(r) ? V : Q)(r, 1);
      a.update(r, 34963);
      return d[g.id] = r;
    }};
  }
  function oe(g, a, b, e) {
    var r, d, c;
    this.setMode = function(g) {
      r = g;
    };
    this.setIndex = function(g) {
      d = g.type;
      c = g.bytesPerElement;
    };
    this.render = function(a, e) {
      g.drawElements(r, e, d, a * c);
      b.update(e, r);
    };
    this.renderInstances = function(F, f, l) {
      if (e.isWebGL2) {
        var h = g;
      } else {
        if (h = a.get("ANGLE_instanced_arrays"), null === h) {
          console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
          return;
        }
      }
      h[e.isWebGL2 ? "drawElementsInstanced" : "drawElementsInstancedANGLE"](r, l, d, f * c, F.maxInstancedCount);
      b.update(l, r, F.maxInstancedCount);
    };
  }
  function pe(g) {
    var a = {frame:0, calls:0, triangles:0, points:0, lines:0};
    return {memory:{geometries:0, textures:0}, render:a, programs:null, autoReset:!0, reset:function() {
      a.frame++;
      a.calls = 0;
      a.triangles = 0;
      a.points = 0;
      a.lines = 0;
    }, update:function(g, r, b) {
      b = b || 1;
      a.calls++;
      switch(r) {
        case 4:
          a.triangles += g / 3 * b;
          break;
        case 5:
        case 6:
          a.triangles += b * (g - 2);
          break;
        case 1:
          a.lines += g / 2 * b;
          break;
        case 3:
          a.lines += b * (g - 1);
          break;
        case 2:
          a.lines += b * g;
          break;
        case 0:
          a.points += b * g;
          break;
        default:
          console.error("THREE.WebGLInfo: Unknown draw mode:", r);
      }
    }};
  }
  function qe(g, a) {
    return Math.abs(a[1]) - Math.abs(g[1]);
  }
  function re(g) {
    var a = {}, b = new Float32Array(8);
    return {update:function(r, e, d, c) {
      var F = r.morphTargetInfluences, f = F.length;
      r = a[e.id];
      if (void 0 === r) {
        r = [];
        for (var l = 0; l < f; l++) {
          r[l] = [l, 0];
        }
        a[e.id] = r;
      }
      var h = d.morphTargets && e.morphAttributes.position;
      d = d.morphNormals && e.morphAttributes.normal;
      for (l = 0; l < f; l++) {
        var p = r[l];
        0 !== p[1] && (h && e.removeAttribute("morphTarget" + l), d && e.removeAttribute("morphNormal" + l));
      }
      for (l = 0; l < f; l++) {
        p = r[l], p[0] = l, p[1] = F[l];
      }
      r.sort(qe);
      for (l = 0; 8 > l; l++) {
        if (p = r[l]) {
          if (F = p[0], f = p[1]) {
            h && e.addAttribute("morphTarget" + l, h[F]);
            d && e.addAttribute("morphNormal" + l, d[F]);
            b[l] = f;
            continue;
          }
        }
        b[l] = 0;
      }
      c.getUniforms().setValue(g, "morphTargetInfluences", b);
    }};
  }
  function se(g, a) {
    var r = {};
    return {update:function(b) {
      var e = a.render.frame, d = b.geometry, c = g.get(b, d);
      r[c.id] !== e && (d.isGeometry && c.updateFromObject(b), g.update(c), r[c.id] = e);
      return c;
    }, dispose:function() {
      r = {};
    }};
  }
  function ya(g, a, b, e, d, c, f, l, h, p) {
    g = void 0 !== g ? g : [];
    n.call(this, g, void 0 !== a ? a : 301, b, e, d, c, void 0 !== f ? f : 1022, l, h, p);
    this.flipY = !1;
  }
  function Ja(g, a, b, e) {
    n.call(this, null);
    this.image = {data:g, width:a, height:b, depth:e};
    this.minFilter = this.magFilter = 1003;
    this.wrapR = 1001;
    this.flipY = this.generateMipmaps = !1;
  }
  function fb(g, a, b, e) {
    n.call(this, null);
    this.image = {data:g, width:a, height:b, depth:e};
    this.minFilter = this.magFilter = 1003;
    this.wrapR = 1001;
    this.flipY = this.generateMipmaps = !1;
  }
  function Ab(g, a, b) {
    var r = g[0];
    if (0 >= r || 0 < r) {
      return g;
    }
    var e = a * b, d = ef[e];
    void 0 === d && (d = new Float32Array(e), ef[e] = d);
    if (0 !== a) {
      for (r.toArray(d, 0), r = 1, e = 0; r !== a; ++r) {
        e += b, g[r].toArray(d, e);
      }
    }
    return d;
  }
  function oa(g, a) {
    if (g.length !== a.length) {
      return !1;
    }
    for (var r = 0, b = g.length; r < b; r++) {
      if (g[r] !== a[r]) {
        return !1;
      }
    }
    return !0;
  }
  function ua(g, a) {
    for (var r = 0, b = a.length; r < b; r++) {
      g[r] = a[r];
    }
  }
  function gb(g, a) {
    var r = ff[a];
    void 0 === r && (r = new Int32Array(a), ff[a] = r);
    for (var b = 0; b !== a; ++b) {
      r[b] = g.allocTextureUnit();
    }
    return r;
  }
  function Jd(g, a) {
    var r = this.cache;
    r[0] !== a && (g.uniform1f(this.addr, a), r[0] = a);
  }
  function hc(g, a) {
    var r = this.cache;
    r[0] !== a && (g.uniform1i(this.addr, a), r[0] = a);
  }
  function Bb(g, a) {
    var r = this.cache;
    if (void 0 !== a.x) {
      if (r[0] !== a.x || r[1] !== a.y) {
        g.uniform2f(this.addr, a.x, a.y), r[0] = a.x, r[1] = a.y;
      }
    } else {
      oa(r, a) || (g.uniform2fv(this.addr, a), ua(r, a));
    }
  }
  function Kd(g, a) {
    var r = this.cache;
    if (void 0 !== a.x) {
      if (r[0] !== a.x || r[1] !== a.y || r[2] !== a.z) {
        g.uniform3f(this.addr, a.x, a.y, a.z), r[0] = a.x, r[1] = a.y, r[2] = a.z;
      }
    } else {
      if (void 0 !== a.r) {
        if (r[0] !== a.r || r[1] !== a.g || r[2] !== a.b) {
          g.uniform3f(this.addr, a.r, a.g, a.b), r[0] = a.r, r[1] = a.g, r[2] = a.b;
        }
      } else {
        oa(r, a) || (g.uniform3fv(this.addr, a), ua(r, a));
      }
    }
  }
  function Cb(g, a) {
    var r = this.cache;
    if (void 0 !== a.x) {
      if (r[0] !== a.x || r[1] !== a.y || r[2] !== a.z || r[3] !== a.w) {
        g.uniform4f(this.addr, a.x, a.y, a.z, a.w), r[0] = a.x, r[1] = a.y, r[2] = a.z, r[3] = a.w;
      }
    } else {
      oa(r, a) || (g.uniform4fv(this.addr, a), ua(r, a));
    }
  }
  function Nc(g, a) {
    var r = this.cache, b = a.elements;
    void 0 === b ? oa(r, a) || (g.uniformMatrix2fv(this.addr, !1, a), ua(r, a)) : oa(r, b) || (gf.set(b), g.uniformMatrix2fv(this.addr, !1, gf), ua(r, b));
  }
  function Ld(g, a) {
    var r = this.cache, b = a.elements;
    void 0 === b ? oa(r, a) || (g.uniformMatrix3fv(this.addr, !1, a), ua(r, a)) : oa(r, b) || (hf.set(b), g.uniformMatrix3fv(this.addr, !1, hf), ua(r, b));
  }
  function Db(g, a) {
    var r = this.cache, b = a.elements;
    void 0 === b ? oa(r, a) || (g.uniformMatrix4fv(this.addr, !1, a), ua(r, a)) : oa(r, b) || (jf.set(b), g.uniformMatrix4fv(this.addr, !1, jf), ua(r, b));
  }
  function rb(g, a, b) {
    var r = this.cache, e = b.allocTextureUnit();
    r[0] !== e && (g.uniform1i(this.addr, e), r[0] = e);
    b.setTexture2D(a || kf, e);
  }
  function Eb(g, a, b) {
    var r = this.cache, e = b.allocTextureUnit();
    r[0] !== e && (g.uniform1i(this.addr, e), r[0] = e);
    b.setTexture2DArray(a || cg, e);
  }
  function Md(g, a, b) {
    var r = this.cache, e = b.allocTextureUnit();
    r[0] !== e && (g.uniform1i(this.addr, e), r[0] = e);
    b.setTexture3D(a || dg, e);
  }
  function sb(g, a, b) {
    var r = this.cache, e = b.allocTextureUnit();
    r[0] !== e && (g.uniform1i(this.addr, e), r[0] = e);
    b.setTextureCube(a || lf, e);
  }
  function tb(g, a) {
    var r = this.cache;
    oa(r, a) || (g.uniform2iv(this.addr, a), ua(r, a));
  }
  function Fb(g, a) {
    var r = this.cache;
    oa(r, a) || (g.uniform3iv(this.addr, a), ua(r, a));
  }
  function ic(g, a) {
    var r = this.cache;
    oa(r, a) || (g.uniform4iv(this.addr, a), ua(r, a));
  }
  function Gb(g) {
    switch(g) {
      case 5126:
        return Jd;
      case 35664:
        return Bb;
      case 35665:
        return Kd;
      case 35666:
        return Cb;
      case 35674:
        return Nc;
      case 35675:
        return Ld;
      case 35676:
        return Db;
      case 35678:
      case 36198:
        return rb;
      case 35679:
        return Md;
      case 35680:
        return sb;
      case 36289:
        return Eb;
      case 5124:
      case 35670:
        return hc;
      case 35667:
      case 35671:
        return tb;
      case 35668:
      case 35672:
        return Fb;
      case 35669:
      case 35673:
        return ic;
    }
  }
  function Oc(g, a) {
    var r = this.cache;
    oa(r, a) || (g.uniform1fv(this.addr, a), ua(r, a));
  }
  function Qa(g, a) {
    var r = this.cache;
    oa(r, a) || (g.uniform1iv(this.addr, a), ua(r, a));
  }
  function za(g, a) {
    var r = this.cache;
    a = Ab(a, this.size, 2);
    oa(r, a) || (g.uniform2fv(this.addr, a), this.updateCache(a));
  }
  function Pc(g, a) {
    var r = this.cache;
    a = Ab(a, this.size, 3);
    oa(r, a) || (g.uniform3fv(this.addr, a), this.updateCache(a));
  }
  function hb(g, a) {
    var r = this.cache;
    a = Ab(a, this.size, 4);
    oa(r, a) || (g.uniform4fv(this.addr, a), this.updateCache(a));
  }
  function jc(g, a) {
    var r = this.cache;
    a = Ab(a, this.size, 4);
    oa(r, a) || (g.uniformMatrix2fv(this.addr, !1, a), this.updateCache(a));
  }
  function Hb(g, a) {
    var r = this.cache;
    a = Ab(a, this.size, 9);
    oa(r, a) || (g.uniformMatrix3fv(this.addr, !1, a), this.updateCache(a));
  }
  function Ua(g, a) {
    var r = this.cache;
    a = Ab(a, this.size, 16);
    oa(r, a) || (g.uniformMatrix4fv(this.addr, !1, a), this.updateCache(a));
  }
  function ta(g, a, b) {
    var r = this.cache, e = a.length, d = gb(b, e);
    !1 === oa(r, d) && (g.uniform1iv(this.addr, d), ua(r, d));
    for (g = 0; g !== e; ++g) {
      b.setTexture2D(a[g] || kf, d[g]);
    }
  }
  function Qc(g, a, b) {
    var r = this.cache, e = a.length, d = gb(b, e);
    !1 === oa(r, d) && (g.uniform1iv(this.addr, d), ua(r, d));
    for (g = 0; g !== e; ++g) {
      b.setTextureCube(a[g] || lf, d[g]);
    }
  }
  function Ca(g) {
    switch(g) {
      case 5126:
        return Oc;
      case 35664:
        return za;
      case 35665:
        return Pc;
      case 35666:
        return hb;
      case 35674:
        return jc;
      case 35675:
        return Hb;
      case 35676:
        return Ua;
      case 35678:
        return ta;
      case 35680:
        return Qc;
      case 5124:
      case 35670:
        return Qa;
      case 35667:
      case 35671:
        return tb;
      case 35668:
      case 35672:
        return Fb;
      case 35669:
      case 35673:
        return ic;
    }
  }
  function Ra(g, a, b) {
    this.id = g;
    this.addr = b;
    this.cache = [];
    this.setValue = Gb(a.type);
  }
  function ub(g, a, b) {
    this.id = g;
    this.addr = b;
    this.cache = [];
    this.size = a.size;
    this.setValue = Ca(a.type);
  }
  function Ob(g) {
    this.id = g;
    this.seq = [];
    this.map = {};
  }
  function Ib(g, a, b) {
    this.seq = [];
    this.map = {};
    this.renderer = b;
    b = g.getProgramParameter(a, 35718);
    for (var r = 0; r < b; ++r) {
      var e = g.getActiveUniform(a, r), d = g.getUniformLocation(a, e.name), c = this, f = e.name, F = f.length;
      for (te.lastIndex = 0;;) {
        var l = te.exec(f), h = te.lastIndex, p = l[1], k = l[3];
        "]" === l[2] && (p |= 0);
        if (void 0 === k || "[" === k && h + 2 === F) {
          f = c;
          e = void 0 === k ? new Ra(p, e, d) : new ub(p, e, d);
          f.seq.push(e);
          f.map[e.id] = e;
          break;
        } else {
          k = c.map[p], void 0 === k && (k = new Ob(p), p = c, c = k, p.seq.push(c), p.map[c.id] = c), c = k;
        }
      }
    }
  }
  function Aa(g) {
    g = g.split("\n");
    for (var a = 0; a < g.length; a++) {
      g[a] = a + 1 + ": " + g[a];
    }
    return g.join("\n");
  }
  function Va(g, a, b) {
    var r = g.createShader(a);
    g.shaderSource(r, b);
    g.compileShader(r);
    !1 === g.getShaderParameter(r, 35713) && console.error("THREE.WebGLShader: Shader couldn't compile.");
    "" !== g.getShaderInfoLog(r) && console.warn("THREE.WebGLShader: gl.getShaderInfoLog()", 35633 === a ? "vertex" : "fragment", g.getShaderInfoLog(r), Aa(b));
    return r;
  }
  function Na(g) {
    switch(g) {
      case 3E3:
        return ["Linear", "( value )"];
      case 3001:
        return ["sRGB", "( value )"];
      case 3002:
        return ["RGBE", "( value )"];
      case 3004:
        return ["RGBM", "( value, 7.0 )"];
      case 3005:
        return ["RGBM", "( value, 16.0 )"];
      case 3006:
        return ["RGBD", "( value, 256.0 )"];
      case 3007:
        return ["Gamma", "( value, float( GAMMA_FACTOR ) )"];
      default:
        throw Error("unsupported encoding: " + g);
    }
  }
  function Pb(g, a) {
    a = Na(a);
    return "vec4 " + g + "( vec4 value ) { return " + a[0] + "ToLinear" + a[1] + "; }";
  }
  function eg(g, a) {
    a = Na(a);
    return "vec4 " + g + "( vec4 value ) { return LinearTo" + a[0] + a[1] + "; }";
  }
  function fg(g, a) {
    switch(a) {
      case 1:
        a = "Linear";
        break;
      case 2:
        a = "Reinhard";
        break;
      case 3:
        a = "Uncharted2";
        break;
      case 4:
        a = "OptimizedCineon";
        break;
      case 5:
        a = "ACESFilmic";
        break;
      default:
        throw Error("unsupported toneMapping: " + a);
    }
    return "vec3 " + g + "( vec3 color ) { return " + a + "ToneMapping( color ); }";
  }
  function gg(g, a, b) {
    g = g || {};
    return [g.derivatives || a.envMapCubeUV || a.bumpMap || a.normalMap && !a.objectSpaceNormalMap || a.flatShading ? "#extension GL_OES_standard_derivatives : enable" : "", (g.fragDepth || a.logarithmicDepthBuffer) && b.get("EXT_frag_depth") ? "#extension GL_EXT_frag_depth : enable" : "", g.drawBuffers && b.get("WEBGL_draw_buffers") ? "#extension GL_EXT_draw_buffers : require" : "", (g.shaderTextureLOD || a.envMap) && b.get("EXT_shader_texture_lod") ? "#extension GL_EXT_shader_texture_lod : enable" : 
    ""].filter(Rc).join("\n");
  }
  function hg(g) {
    var a = [], b;
    for (b in g) {
      var e = g[b];
      !1 !== e && a.push("#define " + b + " " + e);
    }
    return a.join("\n");
  }
  function Rc(g) {
    return "" !== g;
  }
  function mf(g, a) {
    return g.replace(/NUM_DIR_LIGHTS/g, a.numDirLights).replace(/NUM_SPOT_LIGHTS/g, a.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g, a.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, a.numPointLights).replace(/NUM_HEMI_LIGHTS/g, a.numHemiLights);
  }
  function nf(g, a) {
    return g.replace(/NUM_CLIPPING_PLANES/g, a.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, a.numClippingPlanes - a.numClipIntersection);
  }
  function ue(g) {
    return g.replace(/^[ \t]*#include +<([\w\d./]+)>/gm, function(g, a) {
      g = na[a];
      if (void 0 === g) {
        throw Error("Can not resolve #include <" + a + ">");
      }
      return ue(g);
    });
  }
  function of(g) {
    return g.replace(/#pragma unroll_loop[\s]+?for \( int i = (\d+); i < (\d+); i \+\+ \) \{([\s\S]+?)(?=\})\}/g, function(g, a, b, e) {
      g = "";
      for (a = parseInt(a); a < parseInt(b); a++) {
        g += e.replace(/\[ i \]/g, "[ " + a + " ]");
      }
      return g;
    });
  }
  function ig(g, a, b, e, d, c, f) {
    var r = g.context, F = e.defines, l = d.vertexShader, h = d.fragmentShader, p = "SHADOWMAP_TYPE_BASIC";
    1 === c.shadowMapType ? p = "SHADOWMAP_TYPE_PCF" : 2 === c.shadowMapType && (p = "SHADOWMAP_TYPE_PCF_SOFT");
    var k = "ENVMAP_TYPE_CUBE", n = "ENVMAP_MODE_REFLECTION", T = "ENVMAP_BLENDING_MULTIPLY";
    if (c.envMap) {
      switch(e.envMap.mapping) {
        case 301:
        case 302:
          k = "ENVMAP_TYPE_CUBE";
          break;
        case 306:
        case 307:
          k = "ENVMAP_TYPE_CUBE_UV";
          break;
        case 303:
        case 304:
          k = "ENVMAP_TYPE_EQUIREC";
          break;
        case 305:
          k = "ENVMAP_TYPE_SPHERE";
      }
      switch(e.envMap.mapping) {
        case 302:
        case 304:
          n = "ENVMAP_MODE_REFRACTION";
      }
      switch(e.combine) {
        case 0:
          T = "ENVMAP_BLENDING_MULTIPLY";
          break;
        case 1:
          T = "ENVMAP_BLENDING_MIX";
          break;
        case 2:
          T = "ENVMAP_BLENDING_ADD";
      }
    }
    var m = 0 < g.gammaFactor ? g.gammaFactor : 1, t = f.isWebGL2 ? "" : gg(e.extensions, c, a), q = hg(F), u = r.createProgram();
    e.isRawShaderMaterial ? (F = [q].filter(Rc).join("\n"), 0 < F.length && (F += "\n"), a = [t, q].filter(Rc).join("\n"), 0 < a.length && (a += "\n")) : (F = ["precision " + c.precision + " float;", "precision " + c.precision + " int;", "#define SHADER_NAME " + d.name, q, c.supportsVertexTextures ? "#define VERTEX_TEXTURES" : "", "#define GAMMA_FACTOR " + m, "#define MAX_BONES " + c.maxBones, c.useFog && c.fog ? "#define USE_FOG" : "", c.useFog && c.fogExp ? "#define FOG_EXP2" : "", c.map ? "#define USE_MAP" : 
    "", c.envMap ? "#define USE_ENVMAP" : "", c.envMap ? "#define " + n : "", c.lightMap ? "#define USE_LIGHTMAP" : "", c.aoMap ? "#define USE_AOMAP" : "", c.emissiveMap ? "#define USE_EMISSIVEMAP" : "", c.bumpMap ? "#define USE_BUMPMAP" : "", c.normalMap ? "#define USE_NORMALMAP" : "", c.normalMap && c.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "", c.displacementMap && c.supportsVertexTextures ? "#define USE_DISPLACEMENTMAP" : "", c.specularMap ? "#define USE_SPECULARMAP" : "", c.roughnessMap ? 
    "#define USE_ROUGHNESSMAP" : "", c.metalnessMap ? "#define USE_METALNESSMAP" : "", c.alphaMap ? "#define USE_ALPHAMAP" : "", c.vertexTangents ? "#define USE_TANGENT" : "", c.vertexColors ? "#define USE_COLOR" : "", c.flatShading ? "#define FLAT_SHADED" : "", c.skinning ? "#define USE_SKINNING" : "", c.useVertexTexture ? "#define BONE_TEXTURE" : "", c.morphTargets ? "#define USE_MORPHTARGETS" : "", c.morphNormals && !1 === c.flatShading ? "#define USE_MORPHNORMALS" : "", c.doubleSided ? "#define DOUBLE_SIDED" : 
    "", c.flipSided ? "#define FLIP_SIDED" : "", c.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", c.shadowMapEnabled ? "#define " + p : "", c.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "", c.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", c.logarithmicDepthBuffer && (f.isWebGL2 || a.get("EXT_frag_depth")) ? "#define USE_LOGDEPTHBUF_EXT" : "", "uniform mat4 modelMatrix;", "uniform mat4 modelViewMatrix;", "uniform mat4 projectionMatrix;", "uniform mat4 viewMatrix;", "uniform mat3 normalMatrix;", 
    "uniform vec3 cameraPosition;", "attribute vec3 position;", "attribute vec3 normal;", "attribute vec2 uv;", "#ifdef USE_TANGENT", "\tattribute vec4 tangent;", "#endif", "#ifdef USE_COLOR", "\tattribute vec3 color;", "#endif", "#ifdef USE_MORPHTARGETS", "\tattribute vec3 morphTarget0;", "\tattribute vec3 morphTarget1;", "\tattribute vec3 morphTarget2;", "\tattribute vec3 morphTarget3;", "\t#ifdef USE_MORPHNORMALS", "\t\tattribute vec3 morphNormal0;", "\t\tattribute vec3 morphNormal1;", "\t\tattribute vec3 morphNormal2;", 
    "\t\tattribute vec3 morphNormal3;", "\t#else", "\t\tattribute vec3 morphTarget4;", "\t\tattribute vec3 morphTarget5;", "\t\tattribute vec3 morphTarget6;", "\t\tattribute vec3 morphTarget7;", "\t#endif", "#endif", "#ifdef USE_SKINNING", "\tattribute vec4 skinIndex;", "\tattribute vec4 skinWeight;", "#endif", "\n"].filter(Rc).join("\n"), a = [t, "precision " + c.precision + " float;", "precision " + c.precision + " int;", "#define SHADER_NAME " + d.name, q, c.alphaTest ? "#define ALPHATEST " + 
    c.alphaTest + (c.alphaTest % 1 ? "" : ".0") : "", "#define GAMMA_FACTOR " + m, c.useFog && c.fog ? "#define USE_FOG" : "", c.useFog && c.fogExp ? "#define FOG_EXP2" : "", c.map ? "#define USE_MAP" : "", c.matcap ? "#define USE_MATCAP" : "", c.envMap ? "#define USE_ENVMAP" : "", c.envMap ? "#define " + k : "", c.envMap ? "#define " + n : "", c.envMap ? "#define " + T : "", c.lightMap ? "#define USE_LIGHTMAP" : "", c.aoMap ? "#define USE_AOMAP" : "", c.emissiveMap ? "#define USE_EMISSIVEMAP" : 
    "", c.bumpMap ? "#define USE_BUMPMAP" : "", c.normalMap ? "#define USE_NORMALMAP" : "", c.normalMap && c.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "", c.specularMap ? "#define USE_SPECULARMAP" : "", c.roughnessMap ? "#define USE_ROUGHNESSMAP" : "", c.metalnessMap ? "#define USE_METALNESSMAP" : "", c.alphaMap ? "#define USE_ALPHAMAP" : "", c.vertexTangents ? "#define USE_TANGENT" : "", c.vertexColors ? "#define USE_COLOR" : "", c.gradientMap ? "#define USE_GRADIENTMAP" : "", c.flatShading ? 
    "#define FLAT_SHADED" : "", c.doubleSided ? "#define DOUBLE_SIDED" : "", c.flipSided ? "#define FLIP_SIDED" : "", c.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", c.shadowMapEnabled ? "#define " + p : "", c.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "", c.physicallyCorrectLights ? "#define PHYSICALLY_CORRECT_LIGHTS" : "", c.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", c.logarithmicDepthBuffer && (f.isWebGL2 || a.get("EXT_frag_depth")) ? "#define USE_LOGDEPTHBUF_EXT" : 
    "", c.envMap && (f.isWebGL2 || a.get("EXT_shader_texture_lod")) ? "#define TEXTURE_LOD_EXT" : "", "uniform mat4 viewMatrix;", "uniform vec3 cameraPosition;", 0 !== c.toneMapping ? "#define TONE_MAPPING" : "", 0 !== c.toneMapping ? na.tonemapping_pars_fragment : "", 0 !== c.toneMapping ? fg("toneMapping", c.toneMapping) : "", c.dithering ? "#define DITHERING" : "", c.outputEncoding || c.mapEncoding || c.matcapEncoding || c.envMapEncoding || c.emissiveMapEncoding ? na.encodings_pars_fragment : 
    "", c.mapEncoding ? Pb("mapTexelToLinear", c.mapEncoding) : "", c.matcapEncoding ? Pb("matcapTexelToLinear", c.matcapEncoding) : "", c.envMapEncoding ? Pb("envMapTexelToLinear", c.envMapEncoding) : "", c.emissiveMapEncoding ? Pb("emissiveMapTexelToLinear", c.emissiveMapEncoding) : "", c.outputEncoding ? eg("linearToOutputTexel", c.outputEncoding) : "", c.depthPacking ? "#define DEPTH_PACKING " + e.depthPacking : "", "\n"].filter(Rc).join("\n"));
    l = ue(l);
    l = mf(l, c);
    l = nf(l, c);
    h = ue(h);
    h = mf(h, c);
    h = nf(h, c);
    l = of(l);
    h = of(h);
    f.isWebGL2 && !e.isRawShaderMaterial && (f = !1, p = /^\s*#version\s+300\s+es\s*\n/, e.isShaderMaterial && null !== l.match(p) && null !== h.match(p) && (f = !0, l = l.replace(p, ""), h = h.replace(p, "")), F = "#version 300 es\n\n#define attribute in\n#define varying out\n#define texture2D texture\n" + F, a = ["#version 300 es\n\n#define varying in", f ? "" : "out highp vec4 pc_fragColor;", f ? "" : "#define gl_FragColor pc_fragColor", "#define gl_FragDepthEXT gl_FragDepth\n#define texture2D texture\n#define textureCube texture\n#define texture2DProj textureProj\n#define texture2DLodEXT textureLod\n#define texture2DProjLodEXT textureProjLod\n#define textureCubeLodEXT textureLod\n#define texture2DGradEXT textureGrad\n#define texture2DProjGradEXT textureProjGrad\n#define textureCubeGradEXT textureGrad"].join("\n") + 
    "\n" + a);
    h = a + h;
    l = Va(r, 35633, F + l);
    h = Va(r, 35632, h);
    r.attachShader(u, l);
    r.attachShader(u, h);
    void 0 !== e.index0AttributeName ? r.bindAttribLocation(u, 0, e.index0AttributeName) : !0 === c.morphTargets && r.bindAttribLocation(u, 0, "position");
    r.linkProgram(u);
    c = r.getProgramInfoLog(u).trim();
    f = r.getShaderInfoLog(l).trim();
    p = r.getShaderInfoLog(h).trim();
    n = k = !0;
    if (!1 === r.getProgramParameter(u, 35714)) {
      k = !1, console.error("THREE.WebGLProgram: shader error: ", r.getError(), "35715", r.getProgramParameter(u, 35715), "gl.getProgramInfoLog", c, f, p);
    } else {
      if ("" !== c) {
        console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()", c);
      } else {
        if ("" === f || "" === p) {
          n = !1;
        }
      }
    }
    n && (this.diagnostics = {runnable:k, material:e, programLog:c, vertexShader:{log:f, prefix:F}, fragmentShader:{log:p, prefix:a}});
    r.deleteShader(l);
    r.deleteShader(h);
    var v;
    this.getUniforms = function() {
      void 0 === v && (v = new Ib(r, u, g));
      return v;
    };
    var Y;
    this.getAttributes = function() {
      if (void 0 === Y) {
        for (var g = {}, a = r.getProgramParameter(u, 35721), b = 0; b < a; b++) {
          var e = r.getActiveAttrib(u, b).name;
          g[e] = r.getAttribLocation(u, e);
        }
        Y = g;
      }
      return Y;
    };
    this.destroy = function() {
      r.deleteProgram(u);
      this.program = void 0;
    };
    Object.defineProperties(this, {uniforms:{get:function() {
      console.warn("THREE.WebGLProgram: .uniforms is now .getUniforms().");
      return this.getUniforms();
    }}, attributes:{get:function() {
      console.warn("THREE.WebGLProgram: .attributes is now .getAttributes().");
      return this.getAttributes();
    }}});
    this.name = d.name;
    this.id = jg++;
    this.code = b;
    this.usedTimes = 1;
    this.program = u;
    this.vertexShader = l;
    this.fragmentShader = h;
    return this;
  }
  function kg(g, a, b) {
    function r(g, a) {
      if (g) {
        g.isTexture ? r = g.encoding : g.isWebGLRenderTarget && (console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."), r = g.texture.encoding);
      } else {
        var r = 3E3;
      }
      3E3 === r && a && (r = 3007);
      return r;
    }
    var e = [], d = {MeshDepthMaterial:"depth", MeshDistanceMaterial:"distanceRGBA", MeshNormalMaterial:"normal", MeshBasicMaterial:"basic", MeshLambertMaterial:"lambert", MeshPhongMaterial:"phong", MeshToonMaterial:"phong", MeshStandardMaterial:"physical", MeshPhysicalMaterial:"physical", MeshMatcapMaterial:"matcap", LineBasicMaterial:"basic", LineDashedMaterial:"dashed", PointsMaterial:"points", ShadowMaterial:"shadow", SpriteMaterial:"sprite"}, c = "precision supportsVertexTextures map mapEncoding matcap matcapEncoding envMap envMapMode envMapEncoding lightMap aoMap emissiveMap emissiveMapEncoding bumpMap normalMap objectSpaceNormalMap displacementMap specularMap roughnessMap metalnessMap gradientMap alphaMap combine vertexColors vertexTangents fog useFog fogExp flatShading sizeAttenuation logarithmicDepthBuffer skinning maxBones useVertexTexture morphTargets morphNormals maxMorphTargets maxMorphNormals premultipliedAlpha numDirLights numPointLights numSpotLights numHemiLights numRectAreaLights shadowMapEnabled shadowMapType toneMapping physicallyCorrectLights alphaTest doubleSided flipSided numClippingPlanes numClipIntersection depthPacking dithering".split(" ");
    this.getParameters = function(a, e, c, f, l, F, h) {
      var p = d[a.type];
      if (h.isSkinnedMesh) {
        var k = h.skeleton.bones;
        if (b.floatVertexTextures) {
          k = 1024;
        } else {
          var n = Math.min(Math.floor((b.maxVertexUniforms - 20) / 4), k.length);
          n < k.length ? (console.warn("THREE.WebGLRenderer: Skeleton has " + k.length + " bones. This GPU supports " + n + "."), k = 0) : k = n;
        }
      } else {
        k = 0;
      }
      n = b.precision;
      null !== a.precision && (n = b.getMaxPrecision(a.precision), n !== a.precision && console.warn("THREE.WebGLProgram.getParameters:", a.precision, "not supported, using", n, "instead."));
      var T = g.getRenderTarget();
      return {shaderID:p, precision:n, supportsVertexTextures:b.vertexTextures, outputEncoding:r(T ? T.texture : null, g.gammaOutput), map:!!a.map, mapEncoding:r(a.map, g.gammaInput), matcap:!!a.matcap, matcapEncoding:r(a.matcap, g.gammaInput), envMap:!!a.envMap, envMapMode:a.envMap && a.envMap.mapping, envMapEncoding:r(a.envMap, g.gammaInput), envMapCubeUV:!!a.envMap && (306 === a.envMap.mapping || 307 === a.envMap.mapping), lightMap:!!a.lightMap, aoMap:!!a.aoMap, emissiveMap:!!a.emissiveMap, emissiveMapEncoding:r(a.emissiveMap, 
      g.gammaInput), bumpMap:!!a.bumpMap, normalMap:!!a.normalMap, objectSpaceNormalMap:1 === a.normalMapType, displacementMap:!!a.displacementMap, roughnessMap:!!a.roughnessMap, metalnessMap:!!a.metalnessMap, specularMap:!!a.specularMap, alphaMap:!!a.alphaMap, gradientMap:!!a.gradientMap, combine:a.combine, vertexTangents:a.normalMap && a.vertexTangents, vertexColors:a.vertexColors, fog:!!f, useFog:a.fog, fogExp:f && f.isFogExp2, flatShading:a.flatShading, sizeAttenuation:a.sizeAttenuation, logarithmicDepthBuffer:b.logarithmicDepthBuffer, 
      skinning:a.skinning && 0 < k, maxBones:k, useVertexTexture:b.floatVertexTextures, morphTargets:a.morphTargets, morphNormals:a.morphNormals, maxMorphTargets:g.maxMorphTargets, maxMorphNormals:g.maxMorphNormals, numDirLights:e.directional.length, numPointLights:e.point.length, numSpotLights:e.spot.length, numRectAreaLights:e.rectArea.length, numHemiLights:e.hemi.length, numClippingPlanes:l, numClipIntersection:F, dithering:a.dithering, shadowMapEnabled:g.shadowMap.enabled && h.receiveShadow && 
      0 < c.length, shadowMapType:g.shadowMap.type, toneMapping:g.toneMapping, physicallyCorrectLights:g.physicallyCorrectLights, premultipliedAlpha:a.premultipliedAlpha, alphaTest:a.alphaTest, doubleSided:2 === a.side, flipSided:1 === a.side, depthPacking:void 0 !== a.depthPacking ? a.depthPacking : !1};
    };
    this.getProgramCode = function(a, r) {
      var b = [];
      r.shaderID ? b.push(r.shaderID) : (b.push(a.fragmentShader), b.push(a.vertexShader));
      if (void 0 !== a.defines) {
        for (var e in a.defines) {
          b.push(e), b.push(a.defines[e]);
        }
      }
      for (e = 0; e < c.length; e++) {
        b.push(r[c[e]]);
      }
      b.push(a.onBeforeCompile.toString());
      b.push(g.gammaOutput);
      b.push(g.gammaFactor);
      return b.join();
    };
    this.acquireProgram = function(r, d, c, f) {
      for (var l, F = 0, h = e.length; F < h; F++) {
        var p = e[F];
        if (p.code === f) {
          l = p;
          ++l.usedTimes;
          break;
        }
      }
      void 0 === l && (l = new ig(g, a, f, r, d, c, b), e.push(l));
      return l;
    };
    this.releaseProgram = function(g) {
      if (0 === --g.usedTimes) {
        var a = e.indexOf(g);
        e[a] = e[e.length - 1];
        e.pop();
        g.destroy();
      }
    };
    this.programs = e;
  }
  function lg() {
    var g = new WeakMap;
    return {get:function(a) {
      var r = g.get(a);
      void 0 === r && (r = {}, g.set(a, r));
      return r;
    }, remove:function(a) {
      g.delete(a);
    }, update:function(a, b, e) {
      g.get(a)[b] = e;
    }, dispose:function() {
      g = new WeakMap;
    }};
  }
  function mg(g, a) {
    return g.groupOrder !== a.groupOrder ? g.groupOrder - a.groupOrder : g.renderOrder !== a.renderOrder ? g.renderOrder - a.renderOrder : g.program && a.program && g.program !== a.program ? g.program.id - a.program.id : g.material.id !== a.material.id ? g.material.id - a.material.id : g.z !== a.z ? g.z - a.z : g.id - a.id;
  }
  function ng(g, a) {
    return g.groupOrder !== a.groupOrder ? g.groupOrder - a.groupOrder : g.renderOrder !== a.renderOrder ? g.renderOrder - a.renderOrder : g.z !== a.z ? a.z - g.z : g.id - a.id;
  }
  function pf() {
    function g(g, r, e, d, c, f) {
      var l = a[b];
      void 0 === l ? (l = {id:g.id, object:g, geometry:r, material:e, program:e.program, groupOrder:d, renderOrder:g.renderOrder, z:c, group:f}, a[b] = l) : (l.id = g.id, l.object = g, l.geometry = r, l.material = e, l.program = e.program, l.groupOrder = d, l.renderOrder = g.renderOrder, l.z = c, l.group = f);
      b++;
      return l;
    }
    var a = [], b = 0, e = [], d = [];
    return {opaque:e, transparent:d, init:function() {
      b = 0;
      e.length = 0;
      d.length = 0;
    }, push:function(a, r, b, c, f, l) {
      a = g(a, r, b, c, f, l);
      (!0 === b.transparent ? d : e).push(a);
    }, unshift:function(a, r, b, c, f, l) {
      a = g(a, r, b, c, f, l);
      (!0 === b.transparent ? d : e).unshift(a);
    }, sort:function() {
      1 < e.length && e.sort(mg);
      1 < d.length && d.sort(ng);
    }};
  }
  function og() {
    function g(r) {
      r = r.target;
      r.removeEventListener("dispose", g);
      delete a[r.id];
    }
    var a = {};
    return {get:function(r, b) {
      var e = a[r.id];
      if (void 0 === e) {
        var d = new pf;
        a[r.id] = {};
        a[r.id][b.id] = d;
        r.addEventListener("dispose", g);
      } else {
        d = e[b.id], void 0 === d && (d = new pf, e[b.id] = d);
      }
      return d;
    }, dispose:function() {
      a = {};
    }};
  }
  function pg() {
    var g = {};
    return {get:function(a) {
      if (void 0 !== g[a.id]) {
        return g[a.id];
      }
      switch(a.type) {
        case "DirectionalLight":
          var r = {direction:new d, color:new z, shadow:!1, shadowBias:0, shadowRadius:1, shadowMapSize:new k};
          break;
        case "SpotLight":
          r = {position:new d, direction:new d, color:new z, distance:0, coneCos:0, penumbraCos:0, decay:0, shadow:!1, shadowBias:0, shadowRadius:1, shadowMapSize:new k};
          break;
        case "PointLight":
          r = {position:new d, color:new z, distance:0, decay:0, shadow:!1, shadowBias:0, shadowRadius:1, shadowMapSize:new k, shadowCameraNear:1, shadowCameraFar:1E3};
          break;
        case "HemisphereLight":
          r = {direction:new d, skyColor:new z, groundColor:new z};
          break;
        case "RectAreaLight":
          r = {color:new z, position:new d, halfWidth:new d, halfHeight:new d};
      }
      return g[a.id] = r;
    }};
  }
  function qg() {
    var g = new pg, a = {id:rg++, hash:{stateID:-1, directionalLength:-1, pointLength:-1, spotLength:-1, rectAreaLength:-1, hemiLength:-1, shadowsLength:-1}, ambient:[0, 0, 0], directional:[], directionalShadowMap:[], directionalShadowMatrix:[], spot:[], spotShadowMap:[], spotShadowMatrix:[], rectArea:[], point:[], pointShadowMap:[], pointShadowMatrix:[], hemi:[]}, e = new d, c = new b, f = new b;
    return {setup:function(r, b, d) {
      var l = 0, h = 0, F = 0, p = 0, k = 0, n = 0, T = 0, m = 0;
      d = d.matrixWorldInverse;
      for (var t = 0, q = r.length; t < q; t++) {
        var u = r[t], v = u.color, w = u.intensity, Y = u.distance, z = u.shadow && u.shadow.map ? u.shadow.map.texture : null;
        if (u.isAmbientLight) {
          l += v.r * w, h += v.g * w, F += v.b * w;
        } else {
          if (u.isDirectionalLight) {
            var U = g.get(u);
            U.color.copy(u.color).multiplyScalar(u.intensity);
            U.direction.setFromMatrixPosition(u.matrixWorld);
            e.setFromMatrixPosition(u.target.matrixWorld);
            U.direction.sub(e);
            U.direction.transformDirection(d);
            if (U.shadow = u.castShadow) {
              v = u.shadow, U.shadowBias = v.bias, U.shadowRadius = v.radius, U.shadowMapSize = v.mapSize;
            }
            a.directionalShadowMap[p] = z;
            a.directionalShadowMatrix[p] = u.shadow.matrix;
            a.directional[p] = U;
            p++;
          } else {
            if (u.isSpotLight) {
              U = g.get(u);
              U.position.setFromMatrixPosition(u.matrixWorld);
              U.position.applyMatrix4(d);
              U.color.copy(v).multiplyScalar(w);
              U.distance = Y;
              U.direction.setFromMatrixPosition(u.matrixWorld);
              e.setFromMatrixPosition(u.target.matrixWorld);
              U.direction.sub(e);
              U.direction.transformDirection(d);
              U.coneCos = Math.cos(u.angle);
              U.penumbraCos = Math.cos(u.angle * (1 - u.penumbra));
              U.decay = u.decay;
              if (U.shadow = u.castShadow) {
                v = u.shadow, U.shadowBias = v.bias, U.shadowRadius = v.radius, U.shadowMapSize = v.mapSize;
              }
              a.spotShadowMap[n] = z;
              a.spotShadowMatrix[n] = u.shadow.matrix;
              a.spot[n] = U;
              n++;
            } else {
              if (u.isRectAreaLight) {
                U = g.get(u), U.color.copy(v).multiplyScalar(w), U.position.setFromMatrixPosition(u.matrixWorld), U.position.applyMatrix4(d), f.identity(), c.copy(u.matrixWorld), c.premultiply(d), f.extractRotation(c), U.halfWidth.set(.5 * u.width, 0, 0), U.halfHeight.set(0, .5 * u.height, 0), U.halfWidth.applyMatrix4(f), U.halfHeight.applyMatrix4(f), a.rectArea[T] = U, T++;
              } else {
                if (u.isPointLight) {
                  U = g.get(u);
                  U.position.setFromMatrixPosition(u.matrixWorld);
                  U.position.applyMatrix4(d);
                  U.color.copy(u.color).multiplyScalar(u.intensity);
                  U.distance = u.distance;
                  U.decay = u.decay;
                  if (U.shadow = u.castShadow) {
                    v = u.shadow, U.shadowBias = v.bias, U.shadowRadius = v.radius, U.shadowMapSize = v.mapSize, U.shadowCameraNear = v.camera.near, U.shadowCameraFar = v.camera.far;
                  }
                  a.pointShadowMap[k] = z;
                  a.pointShadowMatrix[k] = u.shadow.matrix;
                  a.point[k] = U;
                  k++;
                } else {
                  u.isHemisphereLight && (U = g.get(u), U.direction.setFromMatrixPosition(u.matrixWorld), U.direction.transformDirection(d), U.direction.normalize(), U.skyColor.copy(u.color).multiplyScalar(w), U.groundColor.copy(u.groundColor).multiplyScalar(w), a.hemi[m] = U, m++);
                }
              }
            }
          }
        }
      }
      a.ambient[0] = l;
      a.ambient[1] = h;
      a.ambient[2] = F;
      a.directional.length = p;
      a.spot.length = n;
      a.rectArea.length = T;
      a.point.length = k;
      a.hemi.length = m;
      a.hash.stateID = a.id;
      a.hash.directionalLength = p;
      a.hash.pointLength = k;
      a.hash.spotLength = n;
      a.hash.rectAreaLength = T;
      a.hash.hemiLength = m;
      a.hash.shadowsLength = b.length;
    }, state:a};
  }
  function qf() {
    var g = new qg, a = [], b = [];
    return {init:function() {
      a.length = 0;
      b.length = 0;
    }, state:{lightsArray:a, shadowsArray:b, lights:g}, setupLights:function(r) {
      g.setup(a, b, r);
    }, pushLight:function(g) {
      a.push(g);
    }, pushShadow:function(g) {
      b.push(g);
    }};
  }
  function sg() {
    function g(r) {
      r = r.target;
      r.removeEventListener("dispose", g);
      delete a[r.id];
    }
    var a = {};
    return {get:function(r, b) {
      if (void 0 === a[r.id]) {
        var e = new qf;
        a[r.id] = {};
        a[r.id][b.id] = e;
        r.addEventListener("dispose", g);
      } else {
        void 0 === a[r.id][b.id] ? (e = new qf, a[r.id][b.id] = e) : e = a[r.id][b.id];
      }
      return e;
    }, dispose:function() {
      a = {};
    }};
  }
  function Jb(g) {
    X.call(this);
    this.type = "MeshDepthMaterial";
    this.depthPacking = 3200;
    this.morphTargets = this.skinning = !1;
    this.displacementMap = this.alphaMap = this.map = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.wireframe = !1;
    this.wireframeLinewidth = 1;
    this.lights = this.fog = !1;
    this.setValues(g);
  }
  function Kb(g) {
    X.call(this);
    this.type = "MeshDistanceMaterial";
    this.referencePosition = new d;
    this.nearDistance = 1;
    this.farDistance = 1E3;
    this.morphTargets = this.skinning = !1;
    this.displacementMap = this.alphaMap = this.map = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.lights = this.fog = !1;
    this.setValues(g);
  }
  function rf(g, a, e) {
    function r(a, r, b, e, d, c) {
      var f = a.geometry, l = t, h = a.customDepthMaterial;
      b && (l = u, h = a.customDistanceMaterial);
      h ? l = h : (h = !1, r.morphTargets && (f && f.isBufferGeometry ? h = f.morphAttributes && f.morphAttributes.position && 0 < f.morphAttributes.position.length : f && f.isGeometry && (h = f.morphTargets && 0 < f.morphTargets.length)), a.isSkinnedMesh && !1 === r.skinning && console.warn("THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:", a), a = a.isSkinnedMesh && r.skinning, f = 0, h && (f |= 1), a && (f |= 2), l = l[f]);
      g.localClippingEnabled && !0 === r.clipShadows && 0 !== r.clippingPlanes.length && (f = l.uuid, h = r.uuid, a = v[f], void 0 === a && (a = {}, v[f] = a), f = a[h], void 0 === f && (f = l.clone(), a[h] = f), l = f);
      l.visible = r.visible;
      l.wireframe = r.wireframe;
      l.side = null != r.shadowSide ? r.shadowSide : w[r.side];
      l.clipShadows = r.clipShadows;
      l.clippingPlanes = r.clippingPlanes;
      l.clipIntersection = r.clipIntersection;
      l.wireframeLinewidth = r.wireframeLinewidth;
      l.linewidth = r.linewidth;
      b && l.isMeshDistanceMaterial && (l.referencePosition.copy(e), l.nearDistance = d, l.farDistance = c);
      return l;
    }
    function c(b, e, d, l) {
      if (!1 !== b.visible) {
        if (b.layers.test(e.layers) && (b.isMesh || b.isLine || b.isPoints) && b.castShadow && (!b.frustumCulled || f.intersectsObject(b))) {
          b.modelViewMatrix.multiplyMatrices(d.matrixWorldInverse, b.matrixWorld);
          var h = a.update(b), F = b.material;
          if (Array.isArray(F)) {
            for (var p = h.groups, k = 0, T = p.length; k < T; k++) {
              var m = p[k], t = F[m.materialIndex];
              t && t.visible && (t = r(b, t, l, n, d.near, d.far), g.renderBufferDirect(d, null, h, t, b, m));
            }
          } else {
            F.visible && (t = r(b, F, l, n, d.near, d.far), g.renderBufferDirect(d, null, h, t, b, null));
          }
        }
        b = b.children;
        h = 0;
        for (F = b.length; h < F; h++) {
          c(b[h], e, d, l);
        }
      }
    }
    var f = new x, l = new b, h = new k, F = new k(e, e), p = new d, n = new d, t = Array(4), u = Array(4), v = {}, w = {0:1, 1:0, 2:2}, z = [new d(1, 0, 0), new d(-1, 0, 0), new d(0, 0, 1), new d(0, 0, -1), new d(0, 1, 0), new d(0, -1, 0)], y = [new d(0, 1, 0), new d(0, 1, 0), new d(0, 1, 0), new d(0, 1, 0), new d(0, 0, 1), new d(0, 0, -1)], D = [new q, new q, new q, new q, new q, new q];
    for (e = 0; 4 !== e; ++e) {
      var C = 0 !== (e & 1), B = 0 !== (e & 2), A = new Jb({depthPacking:3201, morphTargets:C, skinning:B});
      t[e] = A;
      C = new Kb({morphTargets:C, skinning:B});
      u[e] = C;
    }
    var E = this;
    this.enabled = !1;
    this.autoUpdate = !0;
    this.needsUpdate = !1;
    this.type = 1;
    this.render = function(a, r, b) {
      if (!1 !== E.enabled && (!1 !== E.autoUpdate || !1 !== E.needsUpdate) && 0 !== a.length) {
        var e = g.getRenderTarget(), d = g.state;
        d.setBlending(0);
        d.buffers.color.setClear(1, 1, 1, 1);
        d.buffers.depth.setTest(!0);
        d.setScissorTest(!1);
        for (var k, T = 0, t = a.length; T < t; T++) {
          var u = a[T];
          k = u.shadow;
          var q = u && u.isPointLight;
          if (void 0 === k) {
            console.warn("THREE.WebGLShadowMap:", u, "has no shadow.");
          } else {
            var v = k.camera;
            h.copy(k.mapSize);
            h.min(F);
            if (q) {
              var w = h.x, Y = h.y;
              D[0].set(2 * w, Y, w, Y);
              D[1].set(0, Y, w, Y);
              D[2].set(3 * w, Y, w, Y);
              D[3].set(w, Y, w, Y);
              D[4].set(3 * w, 0, w, Y);
              D[5].set(w, 0, w, Y);
              h.x *= 4;
              h.y *= 2;
            }
            null === k.map && (k.map = new m(h.x, h.y, {minFilter:1003, magFilter:1003, format:1023}), k.map.texture.name = u.name + ".shadowMap", v.updateProjectionMatrix());
            k.isSpotLightShadow && k.update(u);
            w = k.map;
            Y = k.matrix;
            n.setFromMatrixPosition(u.matrixWorld);
            v.position.copy(n);
            q ? (k = 6, Y.makeTranslation(-n.x, -n.y, -n.z)) : (k = 1, p.setFromMatrixPosition(u.target.matrixWorld), v.lookAt(p), v.updateMatrixWorld(), Y.set(.5, 0, 0, .5, 0, .5, 0, .5, 0, 0, .5, .5, 0, 0, 0, 1), Y.multiply(v.projectionMatrix), Y.multiply(v.matrixWorldInverse));
            g.setRenderTarget(w);
            g.clear();
            for (u = 0; u < k; u++) {
              q && (p.copy(v.position), p.add(z[u]), v.up.copy(y[u]), v.lookAt(p), v.updateMatrixWorld(), d.viewport(D[u])), l.multiplyMatrices(v.projectionMatrix, v.matrixWorldInverse), f.setFromMatrix(l), c(r, b, v, q);
            }
          }
        }
        E.needsUpdate = !1;
        g.setRenderTarget(e);
      }
    };
  }
  function tg(g, a, b, e) {
    function r(a, r, b) {
      var e = new Uint8Array(4), d = g.createTexture();
      g.bindTexture(a, d);
      g.texParameteri(a, 10241, 9728);
      g.texParameteri(a, 10240, 9728);
      for (a = 0; a < b; a++) {
        g.texImage2D(r + a, 0, 6408, 1, 1, 0, 6408, 5121, e);
      }
      return d;
    }
    function d(r, b) {
      u[r] = 1;
      0 === v[r] && (g.enableVertexAttribArray(r), v[r] = 1);
      w[r] !== b && ((e.isWebGL2 ? g : a.get("ANGLE_instanced_arrays"))[e.isWebGL2 ? "vertexAttribDivisor" : "vertexAttribDivisorANGLE"](r, b), w[r] = b);
    }
    function c(a) {
      !0 !== z[a] && (g.enable(a), z[a] = !0);
    }
    function f(a) {
      !1 !== z[a] && (g.disable(a), z[a] = !1);
    }
    function l(a, r, e, d, l, h, F, p) {
      if (0 === a) {
        D && (f(3042), D = !1);
      } else {
        if (D || (c(3042), D = !0), 5 !== a) {
          if (a !== C || p !== O) {
            if (100 !== B || 100 !== G) {
              g.blendEquation(32774), G = B = 100;
            }
            if (p) {
              switch(a) {
                case 1:
                  g.blendFuncSeparate(1, 771, 1, 771);
                  break;
                case 2:
                  g.blendFunc(1, 1);
                  break;
                case 3:
                  g.blendFuncSeparate(0, 0, 769, 771);
                  break;
                case 4:
                  g.blendFuncSeparate(0, 768, 0, 770);
                  break;
                default:
                  console.error("THREE.WebGLState: Invalid blending: ", a);
              }
            } else {
              switch(a) {
                case 1:
                  g.blendFuncSeparate(770, 771, 1, 771);
                  break;
                case 2:
                  g.blendFunc(770, 1);
                  break;
                case 3:
                  g.blendFunc(0, 769);
                  break;
                case 4:
                  g.blendFunc(0, 768);
                  break;
                default:
                  console.error("THREE.WebGLState: Invalid blending: ", a);
              }
            }
            H = M = E = A = null;
            C = a;
            O = p;
          }
        } else {
          l = l || r;
          h = h || e;
          F = F || d;
          if (r !== B || l !== G) {
            g.blendEquationSeparate(b.convert(r), b.convert(l)), B = r, G = l;
          }
          if (e !== A || d !== E || h !== M || F !== H) {
            g.blendFuncSeparate(b.convert(e), b.convert(d), b.convert(h), b.convert(F)), A = e, E = d, M = h, H = F;
          }
          C = a;
          O = null;
        }
      }
    }
    function h(a) {
      P !== a && (a ? g.frontFace(2304) : g.frontFace(2305), P = a);
    }
    function F(a) {
      0 !== a ? (c(2884), a !== J && (1 === a ? g.cullFace(1029) : 2 === a ? g.cullFace(1028) : g.cullFace(1032))) : f(2884);
      J = a;
    }
    function p(a, r, b) {
      if (a) {
        if (c(32823), N !== r || I !== b) {
          g.polygonOffset(r, b), N = r, I = b;
        }
      } else {
        f(32823);
      }
    }
    function k(a) {
      void 0 === a && (a = 33984 + K - 1);
      L !== a && (g.activeTexture(a), L = a);
    }
    var n = new function() {
      var a = !1, r = new q, b = null, e = new q(0, 0, 0, 0);
      return {setMask:function(r) {
        b === r || a || (g.colorMask(r, r, r, r), b = r);
      }, setLocked:function(g) {
        a = g;
      }, setClear:function(a, b, d, c, f) {
        !0 === f && (a *= c, b *= c, d *= c);
        r.set(a, b, d, c);
        !1 === e.equals(r) && (g.clearColor(a, b, d, c), e.copy(r));
      }, reset:function() {
        a = !1;
        b = null;
        e.set(-1, 0, 0, 0);
      }};
    }, T = new function() {
      var a = !1, r = null, b = null, e = null;
      return {setTest:function(g) {
        g ? c(2929) : f(2929);
      }, setMask:function(b) {
        r === b || a || (g.depthMask(b), r = b);
      }, setFunc:function(a) {
        if (b !== a) {
          if (a) {
            switch(a) {
              case 0:
                g.depthFunc(512);
                break;
              case 1:
                g.depthFunc(519);
                break;
              case 2:
                g.depthFunc(513);
                break;
              case 3:
                g.depthFunc(515);
                break;
              case 4:
                g.depthFunc(514);
                break;
              case 5:
                g.depthFunc(518);
                break;
              case 6:
                g.depthFunc(516);
                break;
              case 7:
                g.depthFunc(517);
                break;
              default:
                g.depthFunc(515);
            }
          } else {
            g.depthFunc(515);
          }
          b = a;
        }
      }, setLocked:function(g) {
        a = g;
      }, setClear:function(a) {
        e !== a && (g.clearDepth(a), e = a);
      }, reset:function() {
        a = !1;
        e = b = r = null;
      }};
    }, t = new function() {
      var a = !1, r = null, b = null, e = null, d = null, l = null, h = null, F = null, p = null;
      return {setTest:function(g) {
        g ? c(2960) : f(2960);
      }, setMask:function(b) {
        r === b || a || (g.stencilMask(b), r = b);
      }, setFunc:function(a, r, c) {
        if (b !== a || e !== r || d !== c) {
          g.stencilFunc(a, r, c), b = a, e = r, d = c;
        }
      }, setOp:function(a, r, b) {
        if (l !== a || h !== r || F !== b) {
          g.stencilOp(a, r, b), l = a, h = r, F = b;
        }
      }, setLocked:function(g) {
        a = g;
      }, setClear:function(a) {
        p !== a && (g.clearStencil(a), p = a);
      }, reset:function() {
        a = !1;
        p = F = h = l = d = e = b = r = null;
      }};
    }, m = g.getParameter(34921), u = new Uint8Array(m), v = new Uint8Array(m), w = new Uint8Array(m), z = {}, y = null, x = null, D = null, C = null, B = null, A = null, E = null, G = null, M = null, H = null, O = !1, P = null, J = null, V = null, N = null, I = null, K = g.getParameter(35661), Q = !1;
    m = 0;
    m = g.getParameter(7938);
    -1 !== m.indexOf("WebGL") ? (m = parseFloat(/^WebGL ([0-9])/.exec(m)[1]), Q = 1 <= m) : -1 !== m.indexOf("OpenGL ES") && (m = parseFloat(/^OpenGL ES ([0-9])/.exec(m)[1]), Q = 2 <= m);
    var L = null, aa = {}, S = new q, W = new q, R = {};
    R[3553] = r(3553, 3553, 1);
    R[34067] = r(34067, 34069, 6);
    n.setClear(0, 0, 0, 1);
    T.setClear(1);
    t.setClear(0);
    c(2929);
    T.setFunc(3);
    h(!1);
    F(1);
    c(2884);
    l(0);
    return {buffers:{color:n, depth:T, stencil:t}, initAttributes:function() {
      for (var g = 0, a = u.length; g < a; g++) {
        u[g] = 0;
      }
    }, enableAttribute:function(g) {
      d(g, 0);
    }, enableAttributeAndDivisor:d, disableUnusedAttributes:function() {
      for (var a = 0, r = v.length; a !== r; ++a) {
        v[a] !== u[a] && (g.disableVertexAttribArray(a), v[a] = 0);
      }
    }, enable:c, disable:f, getCompressedTextureFormats:function() {
      if (null === y && (y = [], a.get("WEBGL_compressed_texture_pvrtc") || a.get("WEBGL_compressed_texture_s3tc") || a.get("WEBGL_compressed_texture_etc1") || a.get("WEBGL_compressed_texture_astc"))) {
        for (var r = g.getParameter(34467), b = 0; b < r.length; b++) {
          y.push(r[b]);
        }
      }
      return y;
    }, useProgram:function(a) {
      return x !== a ? (g.useProgram(a), x = a, !0) : !1;
    }, setBlending:l, setMaterial:function(g, a) {
      2 === g.side ? f(2884) : c(2884);
      var r = 1 === g.side;
      a && (r = !r);
      h(r);
      1 === g.blending && !1 === g.transparent ? l(0) : l(g.blending, g.blendEquation, g.blendSrc, g.blendDst, g.blendEquationAlpha, g.blendSrcAlpha, g.blendDstAlpha, g.premultipliedAlpha);
      T.setFunc(g.depthFunc);
      T.setTest(g.depthTest);
      T.setMask(g.depthWrite);
      n.setMask(g.colorWrite);
      p(g.polygonOffset, g.polygonOffsetFactor, g.polygonOffsetUnits);
    }, setFlipSided:h, setCullFace:F, setLineWidth:function(a) {
      a !== V && (Q && g.lineWidth(a), V = a);
    }, setPolygonOffset:p, setScissorTest:function(g) {
      g ? c(3089) : f(3089);
    }, activeTexture:k, bindTexture:function(a, r) {
      null === L && k();
      var b = aa[L];
      void 0 === b && (b = {type:void 0, texture:void 0}, aa[L] = b);
      if (b.type !== a || b.texture !== r) {
        g.bindTexture(a, r || R[a]), b.type = a, b.texture = r;
      }
    }, compressedTexImage2D:function() {
      try {
        g.compressedTexImage2D.apply(g, arguments);
      } catch (Sc) {
        console.error("THREE.WebGLState:", Sc);
      }
    }, texImage2D:function() {
      try {
        g.texImage2D.apply(g, arguments);
      } catch (Sc) {
        console.error("THREE.WebGLState:", Sc);
      }
    }, texImage3D:function() {
      try {
        g.texImage3D.apply(g, arguments);
      } catch (Sc) {
        console.error("THREE.WebGLState:", Sc);
      }
    }, scissor:function(a) {
      !1 === S.equals(a) && (g.scissor(a.x, a.y, a.z, a.w), S.copy(a));
    }, viewport:function(a) {
      !1 === W.equals(a) && (g.viewport(a.x, a.y, a.z, a.w), W.copy(a));
    }, reset:function() {
      for (var a = 0; a < v.length; a++) {
        1 === v[a] && (g.disableVertexAttribArray(a), v[a] = 0);
      }
      z = {};
      L = y = null;
      aa = {};
      J = P = C = x = null;
      n.reset();
      T.reset();
      t.reset();
    }};
  }
  function ug(g, a, b, e, d, c, f) {
    function r(g, a) {
      return x ? new OffscreenCanvas(g, a) : document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
    }
    function l(g, a, b, e) {
      var d = 1;
      if (g.width > e || g.height > e) {
        d = e / Math.max(g.width, g.height);
      }
      if (1 > d || !0 === a) {
        if ("undefined" !== typeof HTMLImageElement && g instanceof HTMLImageElement || "undefined" !== typeof HTMLCanvasElement && g instanceof HTMLCanvasElement || "undefined" !== typeof ImageBitmap && g instanceof ImageBitmap) {
          return e = a ? ia.floorPowerOfTwo : Math.floor, a = e(d * g.width), d = e(d * g.height), void 0 === y && (y = r(a, d)), b = b ? r(a, d) : y, b.width = a, b.height = d, b.getContext("2d").drawImage(g, 0, 0, a, d), console.warn("THREE.WebGLRenderer: Texture has been resized from (" + g.width + "x" + g.height + ") to (" + a + "x" + d + ")."), b;
        }
        "data" in g && console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + g.width + "x" + g.height + ").");
      }
      return g;
    }
    function h(g) {
      return ia.isPowerOfTwo(g.width) && ia.isPowerOfTwo(g.height);
    }
    function F(g, a) {
      return g.generateMipmaps && a && 1003 !== g.minFilter && 1006 !== g.minFilter;
    }
    function p(a, r, b, d) {
      g.generateMipmap(a);
      e.get(r).__maxMipLevel = Math.log(Math.max(b, d)) * Math.LOG2E;
    }
    function k(g, r) {
      if (!d.isWebGL2) {
        return g;
      }
      var b = g;
      6403 === g && (5126 === r && (b = 33326), 5131 === r && (b = 33325), 5121 === r && (b = 33321));
      6407 === g && (5126 === r && (b = 34837), 5131 === r && (b = 34843), 5121 === r && (b = 32849));
      6408 === g && (5126 === r && (b = 34836), 5131 === r && (b = 34842), 5121 === r && (b = 32856));
      33325 === b || 33326 === b || 34842 === b || 34836 === b ? a.get("EXT_color_buffer_float") : (34843 === b || 34837 === b) && console.warn("THREE.WebGLRenderer: Floating point textures with RGB format not supported. Please use RGBA instead.");
      return b;
    }
    function n(g) {
      return 1003 === g || 1004 === g || 1005 === g ? 9728 : 9729;
    }
    function m(a) {
      a = a.target;
      a.removeEventListener("dispose", m);
      var r = e.get(a);
      void 0 !== r.__webglInit && (g.deleteTexture(r.__webglTexture), e.remove(a));
      a.isVideoTexture && delete z[a.id];
      f.memory.textures--;
    }
    function t(a) {
      a = a.target;
      a.removeEventListener("dispose", t);
      var r = e.get(a), b = e.get(a.texture);
      if (a) {
        void 0 !== b.__webglTexture && g.deleteTexture(b.__webglTexture);
        a.depthTexture && a.depthTexture.dispose();
        if (a.isWebGLRenderTargetCube) {
          for (b = 0; 6 > b; b++) {
            g.deleteFramebuffer(r.__webglFramebuffer[b]), r.__webglDepthbuffer && g.deleteRenderbuffer(r.__webglDepthbuffer[b]);
          }
        } else {
          g.deleteFramebuffer(r.__webglFramebuffer), r.__webglDepthbuffer && g.deleteRenderbuffer(r.__webglDepthbuffer);
        }
        e.remove(a.texture);
        e.remove(a);
      }
      f.memory.textures--;
    }
    function T(g, a) {
      var r = e.get(g);
      if (g.isVideoTexture) {
        var d = g.id, c = f.render.frame;
        z[d] !== c && (z[d] = c, g.update());
      }
      if (0 < g.version && r.__version !== g.version) {
        if (d = g.image, void 0 === d) {
          console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");
        } else {
          if (!1 === d.complete) {
            console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");
          } else {
            v(r, g, a);
            return;
          }
        }
      }
      b.activeTexture(33984 + a);
      b.bindTexture(3553, r.__webglTexture);
    }
    function u(r, b, f) {
      f ? (g.texParameteri(r, 10242, c.convert(b.wrapS)), g.texParameteri(r, 10243, c.convert(b.wrapT)), 32879 !== r && 35866 !== r || g.texParameteri(r, 32882, c.convert(b.wrapR)), g.texParameteri(r, 10240, c.convert(b.magFilter)), g.texParameteri(r, 10241, c.convert(b.minFilter))) : (g.texParameteri(r, 10242, 33071), g.texParameteri(r, 10243, 33071), 32879 !== r && 35866 !== r || g.texParameteri(r, 32882, 33071), 1001 === b.wrapS && 1001 === b.wrapT || console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."), 
      g.texParameteri(r, 10240, n(b.magFilter)), g.texParameteri(r, 10241, n(b.minFilter)), 1003 !== b.minFilter && 1006 !== b.minFilter && console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter."));
      !(f = a.get("EXT_texture_filter_anisotropic")) || 1015 === b.type && null === a.get("OES_texture_float_linear") || 1016 === b.type && null === (d.isWebGL2 || a.get("OES_texture_half_float_linear")) || !(1 < b.anisotropy || e.get(b).__currentAnisotropy) || (g.texParameterf(r, f.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(b.anisotropy, d.getMaxAnisotropy())), e.get(b).__currentAnisotropy = b.anisotropy);
    }
    function q(a, r) {
      void 0 === a.__webglInit && (a.__webglInit = !0, r.addEventListener("dispose", m), a.__webglTexture = g.createTexture(), f.memory.textures++);
    }
    function v(a, r, e) {
      var f = 3553;
      r.isDataTexture2DArray && (f = 35866);
      r.isDataTexture3D && (f = 32879);
      q(a, r);
      b.activeTexture(33984 + e);
      b.bindTexture(f, a.__webglTexture);
      g.pixelStorei(37440, r.flipY);
      g.pixelStorei(37441, r.premultiplyAlpha);
      g.pixelStorei(3317, r.unpackAlignment);
      e = (e = d.isWebGL2 ? !1 : 1001 !== r.wrapS || 1001 !== r.wrapT || 1003 !== r.minFilter && 1006 !== r.minFilter) && !1 === h(r.image);
      e = l(r.image, e, !1, d.maxTextureSize);
      var n = h(e) || d.isWebGL2, m = c.convert(r.format), t = c.convert(r.type), T = k(m, t);
      u(f, r, n);
      var v = r.mipmaps;
      if (r.isDepthTexture) {
        T = 6402;
        if (1015 === r.type) {
          if (!d.isWebGL2) {
            throw Error("Float Depth Texture only supported in WebGL2.0");
          }
          T = 36012;
        } else {
          d.isWebGL2 && (T = 33189);
        }
        1026 === r.format && 6402 === T && 1012 !== r.type && 1014 !== r.type && (console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."), r.type = 1012, t = c.convert(r.type));
        1027 === r.format && (T = 34041, 1020 !== r.type && (console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."), r.type = 1020, t = c.convert(r.type)));
        b.texImage2D(3553, 0, T, e.width, e.height, 0, m, t, null);
      } else {
        if (r.isDataTexture) {
          if (0 < v.length && n) {
            for (var w = 0, Y = v.length; w < Y; w++) {
              f = v[w], b.texImage2D(3553, w, T, f.width, f.height, 0, m, t, f.data);
            }
            r.generateMipmaps = !1;
            a.__maxMipLevel = v.length - 1;
          } else {
            b.texImage2D(3553, 0, T, e.width, e.height, 0, m, t, e.data), a.__maxMipLevel = 0;
          }
        } else {
          if (r.isCompressedTexture) {
            w = 0;
            for (Y = v.length; w < Y; w++) {
              f = v[w], 1023 !== r.format && 1022 !== r.format ? -1 < b.getCompressedTextureFormats().indexOf(m) ? b.compressedTexImage2D(3553, w, T, f.width, f.height, 0, f.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : b.texImage2D(3553, w, T, f.width, f.height, 0, m, t, f.data);
            }
            a.__maxMipLevel = v.length - 1;
          } else {
            if (r.isDataTexture2DArray) {
              b.texImage3D(35866, 0, T, e.width, e.height, e.depth, 0, m, t, e.data), a.__maxMipLevel = 0;
            } else {
              if (r.isDataTexture3D) {
                b.texImage3D(32879, 0, T, e.width, e.height, e.depth, 0, m, t, e.data), a.__maxMipLevel = 0;
              } else {
                if (0 < v.length && n) {
                  w = 0;
                  for (Y = v.length; w < Y; w++) {
                    f = v[w], b.texImage2D(3553, w, T, m, t, f);
                  }
                  r.generateMipmaps = !1;
                  a.__maxMipLevel = v.length - 1;
                } else {
                  b.texImage2D(3553, 0, T, m, t, e), a.__maxMipLevel = 0;
                }
              }
            }
          }
        }
      }
      F(r, n) && p(3553, r, e.width, e.height);
      a.__version = r.version;
      if (r.onUpdate) {
        r.onUpdate(r);
      }
    }
    function w(a, r, d, f) {
      var l = c.convert(r.texture.format), h = c.convert(r.texture.type), F = k(l, h);
      b.texImage2D(f, 0, F, r.width, r.height, 0, l, h, null);
      g.bindFramebuffer(36160, a);
      g.framebufferTexture2D(36160, d, f, e.get(r.texture).__webglTexture, 0);
      g.bindFramebuffer(36160, null);
    }
    function Y(a, r, b) {
      g.bindRenderbuffer(36161, a);
      if (r.depthBuffer && !r.stencilBuffer) {
        b ? (b = U(r), g.renderbufferStorageMultisample(36161, b, 33189, r.width, r.height)) : g.renderbufferStorage(36161, 33189, r.width, r.height), g.framebufferRenderbuffer(36160, 36096, 36161, a);
      } else {
        if (r.depthBuffer && r.stencilBuffer) {
          b ? (b = U(r), g.renderbufferStorageMultisample(36161, b, 34041, r.width, r.height)) : g.renderbufferStorage(36161, 34041, r.width, r.height), g.framebufferRenderbuffer(36160, 33306, 36161, a);
        } else {
          a = c.convert(r.texture.format);
          var e = c.convert(r.texture.type);
          a = k(a, e);
          b ? (b = U(r), g.renderbufferStorageMultisample(36161, b, a, r.width, r.height)) : g.renderbufferStorage(36161, a, r.width, r.height);
        }
      }
      g.bindRenderbuffer(36161, null);
    }
    function U(g) {
      return d.isWebGL2 && g.isWebGLMultisampleRenderTarget ? Math.min(d.maxSamples, g.samples) : 0;
    }
    var z = {}, y, x = "undefined" !== typeof OffscreenCanvas;
    this.setTexture2D = T;
    this.setTexture2DArray = function(g, a) {
      var r = e.get(g);
      0 < g.version && r.__version !== g.version ? v(r, g, a) : (b.activeTexture(33984 + a), b.bindTexture(35866, r.__webglTexture));
    };
    this.setTexture3D = function(g, a) {
      var r = e.get(g);
      0 < g.version && r.__version !== g.version ? v(r, g, a) : (b.activeTexture(33984 + a), b.bindTexture(32879, r.__webglTexture));
    };
    this.setTextureCube = function(a, r) {
      var f = e.get(a);
      if (6 === a.image.length) {
        if (0 < a.version && f.__version !== a.version) {
          q(f, a);
          b.activeTexture(33984 + r);
          b.bindTexture(34067, f.__webglTexture);
          g.pixelStorei(37440, a.flipY);
          r = a && a.isCompressedTexture;
          for (var n = a.image[0] && a.image[0].isDataTexture, m = [], t = 0; 6 > t; t++) {
            m[t] = r || n ? n ? a.image[t].image : a.image[t] : l(a.image[t], !1, !0, d.maxCubemapSize);
          }
          var T = m[0], v = h(T) || d.isWebGL2, w = c.convert(a.format), Y = c.convert(a.type), U = k(w, Y);
          u(34067, a, v);
          for (t = 0; 6 > t; t++) {
            if (r) {
              for (var z, y = m[t].mipmaps, x = 0, Ba = y.length; x < Ba; x++) {
                z = y[x], 1023 !== a.format && 1022 !== a.format ? -1 < b.getCompressedTextureFormats().indexOf(w) ? b.compressedTexImage2D(34069 + t, x, U, z.width, z.height, 0, z.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()") : b.texImage2D(34069 + t, x, U, z.width, z.height, 0, w, Y, z.data);
              }
            } else {
              n ? b.texImage2D(34069 + t, 0, U, m[t].width, m[t].height, 0, w, Y, m[t].data) : b.texImage2D(34069 + t, 0, U, w, Y, m[t]);
            }
          }
          f.__maxMipLevel = r ? y.length - 1 : 0;
          F(a, v) && p(34067, a, T.width, T.height);
          f.__version = a.version;
          if (a.onUpdate) {
            a.onUpdate(a);
          }
        } else {
          b.activeTexture(33984 + r), b.bindTexture(34067, f.__webglTexture);
        }
      }
    };
    this.setTextureCubeDynamic = function(g, a) {
      b.activeTexture(33984 + a);
      b.bindTexture(34067, e.get(g).__webglTexture);
    };
    this.setupRenderTarget = function(a) {
      var r = e.get(a), l = e.get(a.texture);
      a.addEventListener("dispose", t);
      l.__webglTexture = g.createTexture();
      f.memory.textures++;
      var n = !0 === a.isWebGLRenderTargetCube, m = !0 === a.isWebGLMultisampleRenderTarget, q = h(a) || d.isWebGL2;
      if (n) {
        for (r.__webglFramebuffer = [], m = 0; 6 > m; m++) {
          r.__webglFramebuffer[m] = g.createFramebuffer();
        }
      } else {
        if (r.__webglFramebuffer = g.createFramebuffer(), m) {
          if (d.isWebGL2) {
            r.__webglMultisampledFramebuffer = g.createFramebuffer();
            r.__webglColorRenderbuffer = g.createRenderbuffer();
            g.bindRenderbuffer(36161, r.__webglColorRenderbuffer);
            m = c.convert(a.texture.format);
            var v = c.convert(a.texture.type);
            m = k(m, v);
            v = U(a);
            g.renderbufferStorageMultisample(36161, v, m, a.width, a.height);
            g.bindFramebuffer(36160, r.__webglMultisampledFramebuffer);
            g.framebufferRenderbuffer(36160, 36064, 36161, r.__webglColorRenderbuffer);
            g.bindRenderbuffer(36161, null);
            a.depthBuffer && (r.__webglDepthRenderbuffer = g.createRenderbuffer(), Y(r.__webglDepthRenderbuffer, a, !0));
            g.bindFramebuffer(36160, null);
          } else {
            console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");
          }
        }
      }
      if (n) {
        b.bindTexture(34067, l.__webglTexture);
        u(34067, a.texture, q);
        for (m = 0; 6 > m; m++) {
          w(r.__webglFramebuffer[m], a, 36064, 34069 + m);
        }
        F(a.texture, q) && p(34067, a.texture, a.width, a.height);
        b.bindTexture(34067, null);
      } else {
        b.bindTexture(3553, l.__webglTexture), u(3553, a.texture, q), w(r.__webglFramebuffer, a, 36064, 3553), F(a.texture, q) && p(3553, a.texture, a.width, a.height), b.bindTexture(3553, null);
      }
      if (a.depthBuffer) {
        r = e.get(a);
        l = !0 === a.isWebGLRenderTargetCube;
        if (a.depthTexture) {
          if (l) {
            throw Error("target.depthTexture not supported in Cube render targets");
          }
          if (a && a.isWebGLRenderTargetCube) {
            throw Error("Depth Texture with cube render targets is not supported");
          }
          g.bindFramebuffer(36160, r.__webglFramebuffer);
          if (!a.depthTexture || !a.depthTexture.isDepthTexture) {
            throw Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
          }
          e.get(a.depthTexture).__webglTexture && a.depthTexture.image.width === a.width && a.depthTexture.image.height === a.height || (a.depthTexture.image.width = a.width, a.depthTexture.image.height = a.height, a.depthTexture.needsUpdate = !0);
          T(a.depthTexture, 0);
          r = e.get(a.depthTexture).__webglTexture;
          if (1026 === a.depthTexture.format) {
            g.framebufferTexture2D(36160, 36096, 3553, r, 0);
          } else {
            if (1027 === a.depthTexture.format) {
              g.framebufferTexture2D(36160, 33306, 3553, r, 0);
            } else {
              throw Error("Unknown depthTexture format");
            }
          }
        } else {
          if (l) {
            for (r.__webglDepthbuffer = [], l = 0; 6 > l; l++) {
              g.bindFramebuffer(36160, r.__webglFramebuffer[l]), r.__webglDepthbuffer[l] = g.createRenderbuffer(), Y(r.__webglDepthbuffer[l], a);
            }
          } else {
            g.bindFramebuffer(36160, r.__webglFramebuffer), r.__webglDepthbuffer = g.createRenderbuffer(), Y(r.__webglDepthbuffer, a);
          }
        }
        g.bindFramebuffer(36160, null);
      }
    };
    this.updateRenderTargetMipmap = function(g) {
      var a = g.texture, r = h(g) || d.isWebGL2;
      if (F(a, r)) {
        r = g.isWebGLRenderTargetCube ? 34067 : 3553;
        var c = e.get(a).__webglTexture;
        b.bindTexture(r, c);
        p(r, a, g.width, g.height);
        b.bindTexture(r, null);
      }
    };
    this.updateMultisampleRenderTarget = function(a) {
      if (a.isWebGLMultisampleRenderTarget) {
        if (d.isWebGL2) {
          var r = e.get(a);
          g.bindFramebuffer(36008, r.__webglMultisampledFramebuffer);
          g.bindFramebuffer(36009, r.__webglFramebuffer);
          r = a.width;
          var b = a.height, c = 16384;
          a.depthBuffer && (c |= 256);
          a.stencilBuffer && (c |= 1024);
          g.blitFramebuffer(0, 0, r, b, 0, 0, r, b, c, 9728);
        } else {
          console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");
        }
      }
    };
  }
  function sf(g, a, b) {
    return {convert:function(g) {
      if (1E3 === g) {
        return 10497;
      }
      if (1001 === g) {
        return 33071;
      }
      if (1002 === g) {
        return 33648;
      }
      if (1003 === g) {
        return 9728;
      }
      if (1004 === g) {
        return 9984;
      }
      if (1005 === g) {
        return 9986;
      }
      if (1006 === g) {
        return 9729;
      }
      if (1007 === g) {
        return 9985;
      }
      if (1008 === g) {
        return 9987;
      }
      if (1009 === g) {
        return 5121;
      }
      if (1017 === g) {
        return 32819;
      }
      if (1018 === g) {
        return 32820;
      }
      if (1019 === g) {
        return 33635;
      }
      if (1010 === g) {
        return 5120;
      }
      if (1011 === g) {
        return 5122;
      }
      if (1012 === g) {
        return 5123;
      }
      if (1013 === g) {
        return 5124;
      }
      if (1014 === g) {
        return 5125;
      }
      if (1015 === g) {
        return 5126;
      }
      if (1016 === g) {
        if (b.isWebGL2) {
          return 5131;
        }
        var r = a.get("OES_texture_half_float");
        if (null !== r) {
          return r.HALF_FLOAT_OES;
        }
      }
      if (1021 === g) {
        return 6406;
      }
      if (1022 === g) {
        return 6407;
      }
      if (1023 === g) {
        return 6408;
      }
      if (1024 === g) {
        return 6409;
      }
      if (1025 === g) {
        return 6410;
      }
      if (1026 === g) {
        return 6402;
      }
      if (1027 === g) {
        return 34041;
      }
      if (1028 === g) {
        return 6403;
      }
      if (100 === g) {
        return 32774;
      }
      if (101 === g) {
        return 32778;
      }
      if (102 === g) {
        return 32779;
      }
      if (200 === g) {
        return 0;
      }
      if (201 === g) {
        return 1;
      }
      if (202 === g) {
        return 768;
      }
      if (203 === g) {
        return 769;
      }
      if (204 === g) {
        return 770;
      }
      if (205 === g) {
        return 771;
      }
      if (206 === g) {
        return 772;
      }
      if (207 === g) {
        return 773;
      }
      if (208 === g) {
        return 774;
      }
      if (209 === g) {
        return 775;
      }
      if (210 === g) {
        return 776;
      }
      if (33776 === g || 33777 === g || 33778 === g || 33779 === g) {
        if (r = a.get("WEBGL_compressed_texture_s3tc"), null !== r) {
          if (33776 === g) {
            return r.COMPRESSED_RGB_S3TC_DXT1_EXT;
          }
          if (33777 === g) {
            return r.COMPRESSED_RGBA_S3TC_DXT1_EXT;
          }
          if (33778 === g) {
            return r.COMPRESSED_RGBA_S3TC_DXT3_EXT;
          }
          if (33779 === g) {
            return r.COMPRESSED_RGBA_S3TC_DXT5_EXT;
          }
        }
      }
      if (35840 === g || 35841 === g || 35842 === g || 35843 === g) {
        if (r = a.get("WEBGL_compressed_texture_pvrtc"), null !== r) {
          if (35840 === g) {
            return r.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
          }
          if (35841 === g) {
            return r.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
          }
          if (35842 === g) {
            return r.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
          }
          if (35843 === g) {
            return r.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
          }
        }
      }
      if (36196 === g && (r = a.get("WEBGL_compressed_texture_etc1"), null !== r)) {
        return r.COMPRESSED_RGB_ETC1_WEBGL;
      }
      if (37808 === g || 37809 === g || 37810 === g || 37811 === g || 37812 === g || 37813 === g || 37814 === g || 37815 === g || 37816 === g || 37817 === g || 37818 === g || 37819 === g || 37820 === g || 37821 === g) {
        if (r = a.get("WEBGL_compressed_texture_astc"), null !== r) {
          return g;
        }
      }
      if (103 === g || 104 === g) {
        if (b.isWebGL2) {
          if (103 === g) {
            return 32775;
          }
          if (104 === g) {
            return 32776;
          }
        }
        r = a.get("EXT_blend_minmax");
        if (null !== r) {
          if (103 === g) {
            return r.MIN_EXT;
          }
          if (104 === g) {
            return r.MAX_EXT;
          }
        }
      }
      if (1020 === g) {
        if (b.isWebGL2) {
          return 34042;
        }
        r = a.get("WEBGL_depth_texture");
        if (null !== r) {
          return r.UNSIGNED_INT_24_8_WEBGL;
        }
      }
      return 0;
    }};
  }
  function kc() {
    G.call(this);
    this.type = "Group";
  }
  function ib() {
    G.call(this);
    this.type = "Camera";
    this.matrixWorldInverse = new b;
    this.projectionMatrix = new b;
    this.projectionMatrixInverse = new b;
  }
  function ra(g, a, b, e) {
    ib.call(this);
    this.type = "PerspectiveCamera";
    this.fov = void 0 !== g ? g : 50;
    this.zoom = 1;
    this.near = void 0 !== b ? b : .1;
    this.far = void 0 !== e ? e : 2E3;
    this.focus = 10;
    this.aspect = void 0 !== a ? a : 1;
    this.view = null;
    this.filmGauge = 35;
    this.filmOffset = 0;
    this.updateProjectionMatrix();
  }
  function Tc(g) {
    ra.call(this);
    this.cameras = g || [];
  }
  function tf(g, a, b) {
    uf.setFromMatrixPosition(a.matrixWorld);
    vf.setFromMatrixPosition(b.matrixWorld);
    var r = uf.distanceTo(vf), e = a.projectionMatrix.elements, d = b.projectionMatrix.elements, c = e[14] / (e[10] - 1);
    b = e[14] / (e[10] + 1);
    var f = (e[9] + 1) / e[5], l = (e[9] - 1) / e[5], h = (e[8] - 1) / e[0], F = (d[8] + 1) / d[0];
    e = c * h;
    d = c * F;
    F = r / (-h + F);
    h = F * -h;
    a.matrixWorld.decompose(g.position, g.quaternion, g.scale);
    g.translateX(h);
    g.translateZ(F);
    g.matrixWorld.compose(g.position, g.quaternion, g.scale);
    g.matrixWorldInverse.getInverse(g.matrixWorld);
    a = c + F;
    c = b + F;
    g.projectionMatrix.makePerspective(e - h, d + (r - h), f * b / c * a, l * b / c * a, a, c);
  }
  function wf(g) {
    function a() {
      return null !== l && !0 === l.isPresenting;
    }
    function e() {
      if (a()) {
        var r = l.getEyeParameters("left"), b = r.renderWidth * u;
        r = r.renderHeight * u;
        E = g.getPixelRatio();
        g.getSize(A);
        g.setDrawingBufferSize(2 * b, r, 1);
        M.start();
      } else {
        c.enabled && g.setDrawingBufferSize(A.width, A.height, E), M.stop();
      }
    }
    var c = this, l = null, h = null, p = null, n = [], m = new b, t = new b, u = 1, v = "stage";
    "undefined" !== typeof window && "VRFrameData" in window && (h = new window.VRFrameData, window.addEventListener("vrdisplaypresentchange", e, !1));
    var w = new b, z = new f, y = new d, x = new ra;
    x.bounds = new q(0, 0, .5, 1);
    x.layers.enable(1);
    var D = new ra;
    D.bounds = new q(.5, 0, .5, 1);
    D.layers.enable(2);
    var B = new Tc([x, D]);
    B.layers.enable(1);
    B.layers.enable(2);
    var A = new k, E, G = [];
    this.enabled = !1;
    this.getController = function(g) {
      var a = n[g];
      void 0 === a && (a = new kc, a.matrixAutoUpdate = !1, a.visible = !1, n[g] = a);
      return a;
    };
    this.getDevice = function() {
      return l;
    };
    this.setDevice = function(g) {
      void 0 !== g && (l = g);
      M.setContext(g);
    };
    this.setFramebufferScaleFactor = function(g) {
      u = g;
    };
    this.setFrameOfReferenceType = function(g) {
      v = g;
    };
    this.setPoseTarget = function(g) {
      void 0 !== g && (p = g);
    };
    this.getCamera = function(g) {
      var r = "stage" === v ? 1.6 : 0;
      if (!1 === a()) {
        return g.position.set(0, r, 0), g.rotation.set(0, 0, 0), g;
      }
      l.depthNear = g.near;
      l.depthFar = g.far;
      l.getFrameData(h);
      if ("stage" === v) {
        var b = l.stageParameters;
        b ? m.fromArray(b.sittingToStandingTransform) : m.makeTranslation(0, r, 0);
      }
      r = h.pose;
      b = null !== p ? p : g;
      b.matrix.copy(m);
      b.matrix.decompose(b.position, b.quaternion, b.scale);
      null !== r.orientation && (z.fromArray(r.orientation), b.quaternion.multiply(z));
      null !== r.position && (z.setFromRotationMatrix(m), y.fromArray(r.position), y.applyQuaternion(z), b.position.add(y));
      b.updateMatrixWorld();
      x.near = g.near;
      D.near = g.near;
      x.far = g.far;
      D.far = g.far;
      x.matrixWorldInverse.fromArray(h.leftViewMatrix);
      D.matrixWorldInverse.fromArray(h.rightViewMatrix);
      t.getInverse(m);
      "stage" === v && (x.matrixWorldInverse.multiply(t), D.matrixWorldInverse.multiply(t));
      g = b.parent;
      null !== g && (w.getInverse(g.matrixWorld), x.matrixWorldInverse.multiply(w), D.matrixWorldInverse.multiply(w));
      x.matrixWorld.getInverse(x.matrixWorldInverse);
      D.matrixWorld.getInverse(D.matrixWorldInverse);
      x.projectionMatrix.fromArray(h.leftProjectionMatrix);
      D.projectionMatrix.fromArray(h.rightProjectionMatrix);
      tf(B, x, D);
      g = l.getLayers();
      g.length && (g = g[0], null !== g.leftBounds && 4 === g.leftBounds.length && x.bounds.fromArray(g.leftBounds), null !== g.rightBounds && 4 === g.rightBounds.length && D.bounds.fromArray(g.rightBounds));
      g = 0;
      a: for (; g < n.length; g++) {
        r = n[g];
        b: {
          b = g;
          for (var e = navigator.getGamepads && navigator.getGamepads(), d = 0, c = 0, f = e.length; d < f; d++) {
            var F = e[d];
            if (F && ("Daydream Controller" === F.id || "Gear VR Controller" === F.id || "Oculus Go Controller" === F.id || "OpenVR Gamepad" === F.id || F.id.startsWith("Oculus Touch") || F.id.startsWith("Spatial Controller"))) {
              if (c === b) {
                b = F;
                break b;
              }
              c++;
            }
          }
          b = void 0;
        }
        if (void 0 !== b && void 0 !== b.pose) {
          if (null === b.pose) {
            break a;
          }
          e = b.pose;
          !1 === e.hasPosition && r.position.set(.2, -.6, -.05);
          null !== e.position && r.position.fromArray(e.position);
          null !== e.orientation && r.quaternion.fromArray(e.orientation);
          r.matrix.compose(r.position, r.quaternion, r.scale);
          r.matrix.premultiply(m);
          r.matrix.decompose(r.position, r.quaternion, r.scale);
          r.matrixWorldNeedsUpdate = !0;
          r.visible = !0;
          e = "Daydream Controller" === b.id ? 0 : 1;
          G[g] !== b.buttons[e].pressed && (G[g] = b.buttons[e].pressed, !0 === G[g] ? r.dispatchEvent({type:"selectstart"}) : (r.dispatchEvent({type:"selectend"}), r.dispatchEvent({type:"select"})));
        } else {
          r.visible = !1;
        }
      }
      return B;
    };
    this.getStandingMatrix = function() {
      return m;
    };
    this.isPresenting = a;
    var M = new C;
    this.setAnimationLoop = function(g) {
      M.setAnimationLoop(g);
    };
    this.submitFrame = function() {
      a() && l.submitFrame();
    };
    this.dispose = function() {
      "undefined" !== typeof window && window.removeEventListener("vrdisplaypresentchange", e);
    };
  }
  function vg(g) {
    function a() {
      return null !== h && null !== k;
    }
    function e(g) {
      var a = t[u.indexOf(g.inputSource)];
      a && a.dispatchEvent({type:g.type});
    }
    function d() {
      g.setFramebuffer(null);
      g.setRenderTarget(g.getRenderTarget());
      x.stop();
    }
    function c(g, a) {
      null === a ? g.matrixWorld.copy(g.matrix) : g.matrixWorld.multiplyMatrices(a.matrixWorld, g.matrix);
      g.matrixWorldInverse.getInverse(g.matrixWorld);
    }
    var f = g.context, l = null, h = null, p = 1, k = null, n = "stage", m = null, t = [], u = [], v = new ra;
    v.layers.enable(1);
    v.viewport = new q;
    var w = new ra;
    w.layers.enable(2);
    w.viewport = new q;
    var z = new Tc([v, w]);
    z.layers.enable(1);
    z.layers.enable(2);
    this.enabled = !1;
    this.getController = function(g) {
      var a = t[g];
      void 0 === a && (a = new kc, a.matrixAutoUpdate = !1, a.visible = !1, t[g] = a);
      return a;
    };
    this.getDevice = function() {
      return l;
    };
    this.setDevice = function(g) {
      void 0 !== g && (l = g);
      g instanceof XRDevice && f.setCompatibleXRDevice(g);
    };
    this.setFramebufferScaleFactor = function(g) {
      p = g;
    };
    this.setFrameOfReferenceType = function(g) {
      n = g;
    };
    this.setSession = function(a) {
      h = a;
      null !== h && (h.addEventListener("select", e), h.addEventListener("selectstart", e), h.addEventListener("selectend", e), h.addEventListener("end", d), h.baseLayer = new XRWebGLLayer(h, f, {framebufferScaleFactor:p}), h.requestFrameOfReference(n).then(function(a) {
        k = a;
        g.setFramebuffer(h.baseLayer.framebuffer);
        x.setContext(h);
        x.start();
      }), u = h.getInputSources(), h.addEventListener("inputsourceschange", function() {
        u = h.getInputSources();
        console.log(u);
        for (var g = 0; g < t.length; g++) {
          t[g].userData.inputSource = u[g];
        }
      }));
    };
    this.getCamera = function(g) {
      if (a()) {
        var r = g.parent, b = z.cameras;
        c(z, r);
        for (var e = 0; e < b.length; e++) {
          c(b[e], r);
        }
        g.matrixWorld.copy(z.matrixWorld);
        g = g.children;
        e = 0;
        for (r = g.length; e < r; e++) {
          g[e].updateMatrixWorld(!0);
        }
        tf(z, v, w);
        return z;
      }
      return g;
    };
    this.isPresenting = a;
    var y = null, x = new C;
    x.setAnimationLoop(function(g, a) {
      m = a.getDevicePose(k);
      if (null !== m) {
        for (var r = h.baseLayer, b = a.views, e = 0; e < b.length; e++) {
          var d = b[e], c = r.getViewport(d), f = m.getViewMatrix(d), l = z.cameras[e];
          l.matrix.fromArray(f).getInverse(l.matrix);
          l.projectionMatrix.fromArray(d.projectionMatrix);
          l.viewport.set(c.x, c.y, c.width, c.height);
          0 === e && z.matrix.copy(l.matrix);
        }
      }
      for (e = 0; e < t.length; e++) {
        r = t[e];
        if (b = u[e]) {
          if (b = a.getInputPose(b, k), null !== b) {
            "targetRay" in b ? r.matrix.elements = b.targetRay.transformMatrix : "pointerMatrix" in b && (r.matrix.elements = b.pointerMatrix);
            r.matrix.decompose(r.position, r.rotation, r.scale);
            r.visible = !0;
            continue;
          }
        }
        r.visible = !1;
      }
      y && y(g);
    });
    this.setAnimationLoop = function(g) {
      y = g;
    };
    this.dispose = function() {
    };
    this.getStandingMatrix = function() {
      console.warn("THREE.WebXRManager: getStandingMatrix() is no longer needed.");
      return new b;
    };
    this.submitFrame = function() {
    };
  }
  function ve(g) {
    function a() {
      ta = new qb(Z);
      Aa = new ob(Z, ta, g);
      Aa.isWebGL2 || (ta.get("WEBGL_depth_texture"), ta.get("OES_texture_float"), ta.get("OES_texture_half_float"), ta.get("OES_texture_half_float_linear"), ta.get("OES_standard_derivatives"), ta.get("OES_element_index_uint"), ta.get("ANGLE_instanced_arrays"));
      ta.get("OES_texture_float_linear");
      ra = new sf(Z, ta, Aa);
      ca = new tg(Z, ta, ra, Aa);
      ca.scissor(Fb.copy(Hb).multiplyScalar(za));
      ca.viewport(fa.copy(Gb).multiplyScalar(za));
      da = new pe(Z);
      Ca = new lg;
      Ra = new ug(Z, ta, ca, Ca, Aa, ra, da);
      na = new A(Z);
      pa = new ne(Z, na, da);
      ub = new se(pa, da);
      ua = new re(Z);
      oa = new kg(Q, ta, Aa);
      Ob = new og;
      qa = new sg;
      Va = new Ta(Q, ca, ub, J);
      Pb = new nb(Z, ta, da, Aa);
      va = new oe(Z, ta, da, Aa);
      da.programs = oa.programs;
      Q.context = Z;
      Q.capabilities = Aa;
      Q.extensions = ta;
      Q.properties = Ca;
      Q.renderLists = Ob;
      Q.state = ca;
      Q.info = da;
    }
    function e(g) {
      g.preventDefault();
      console.log("THREE.WebGLRenderer: Context Lost.");
      L = !0;
    }
    function c() {
      console.log("THREE.WebGLRenderer: Context Restored.");
      L = !1;
      a();
    }
    function f(g) {
      g = g.target;
      g.removeEventListener("dispose", f);
      h(g);
      Ca.remove(g);
    }
    function h(g) {
      var a = Ca.get(g).program;
      g.program = void 0;
      void 0 !== a && oa.releaseProgram(a);
    }
    function n(g, a) {
      g.render(function(g) {
        Q.renderBufferImmediate(g, a);
      });
    }
    function m(g, a, r, b) {
      if (!1 !== g.visible) {
        if (g.layers.test(a.layers)) {
          if (g.isGroup) {
            r = g.renderOrder;
          } else {
            if (g.isLight) {
              K.pushLight(g), g.castShadow && K.pushShadow(g);
            } else {
              if (g.isSprite) {
                if (!g.frustumCulled || Pc.intersectsSprite(g)) {
                  b && hb.setFromMatrixPosition(g.matrixWorld).applyMatrix4(la);
                  var e = ub.update(g), d = g.material;
                  d.visible && I.push(g, e, d, r, hb.z, null);
                }
              } else {
                if (g.isImmediateRenderObject) {
                  b && hb.setFromMatrixPosition(g.matrixWorld).applyMatrix4(la), I.push(g, null, g.material, r, hb.z, null);
                } else {
                  if (g.isMesh || g.isLine || g.isPoints) {
                    if (g.isSkinnedMesh && g.skeleton.update(), !g.frustumCulled || Pc.intersectsObject(g)) {
                      if (b && hb.setFromMatrixPosition(g.matrixWorld).applyMatrix4(la), e = ub.update(g), d = g.material, Array.isArray(d)) {
                        for (var c = e.groups, f = 0, l = c.length; f < l; f++) {
                          var h = c[f], F = d[h.materialIndex];
                          F && F.visible && I.push(g, e, F, r, hb.z, h);
                        }
                      } else {
                        d.visible && I.push(g, e, d, r, hb.z, null);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        g = g.children;
        f = 0;
        for (l = g.length; f < l; f++) {
          m(g[f], a, r, b);
        }
      }
    }
    function t(g, a, r, b) {
      for (var e = 0, d = g.length; e < d; e++) {
        var c = g[e], f = c.object, l = c.geometry, h = void 0 === b ? c.material : b;
        c = c.group;
        if (r.isArrayCamera) {
          X = r;
          for (var F = r.cameras, p = 0, k = F.length; p < k; p++) {
            var n = F[p];
            if (f.layers.test(n.layers)) {
              if ("viewport" in n) {
                ca.viewport(fa.copy(n.viewport));
              } else {
                var m = n.bounds;
                ca.viewport(fa.set(m.x * Ua, m.y * Qa, m.z * Ua, m.w * Qa).multiplyScalar(za));
              }
              K.setupLights(n);
              u(f, a, n, l, h, c);
            }
          }
        } else {
          X = null, u(f, a, r, l, h, c);
        }
      }
    }
    function u(g, a, r, b, e, d) {
      g.onBeforeRender(Q, a, r, b, e, d);
      K = qa.get(a, X || r);
      g.modelViewMatrix.multiplyMatrices(r.matrixWorldInverse, g.matrixWorld);
      g.normalMatrix.getNormalMatrix(g.modelViewMatrix);
      if (g.isImmediateRenderObject) {
        ca.setMaterial(e);
        var c = w(r, a.fog, e, g);
        ka = B = null;
        ha = !1;
        n(g, c);
      } else {
        Q.renderBufferDirect(r, a.fog, b, e, g, d);
      }
      g.onAfterRender(Q, a, r, b, e, d);
      K = qa.get(a, X || r);
    }
    function v(g, a, r) {
      var b = Ca.get(g), e = K.state.lights, d = b.lightsHash, c = e.state.hash;
      r = oa.getParameters(g, e.state, K.state.shadowsArray, a, ma.numPlanes, ma.numIntersection, r);
      var l = oa.getProgramCode(g, r), F = b.program, k = !0;
      if (void 0 === F) {
        g.addEventListener("dispose", f);
      } else {
        if (F.code !== l) {
          h(g);
        } else {
          if (d.stateID !== c.stateID || d.directionalLength !== c.directionalLength || d.pointLength !== c.pointLength || d.spotLength !== c.spotLength || d.rectAreaLength !== c.rectAreaLength || d.hemiLength !== c.hemiLength || d.shadowsLength !== c.shadowsLength) {
            d.stateID = c.stateID, d.directionalLength = c.directionalLength, d.pointLength = c.pointLength, d.spotLength = c.spotLength, d.rectAreaLength = c.rectAreaLength, d.hemiLength = c.hemiLength, d.shadowsLength = c.shadowsLength;
          } else {
            if (void 0 !== r.shaderID) {
              return;
            }
          }
          k = !1;
        }
      }
      k && (r.shaderID ? (l = eb[r.shaderID], b.shader = {name:g.type, uniforms:p(l.uniforms), vertexShader:l.vertexShader, fragmentShader:l.fragmentShader}) : b.shader = {name:g.type, uniforms:g.uniforms, vertexShader:g.vertexShader, fragmentShader:g.fragmentShader}, g.onBeforeCompile(b.shader, Q), l = oa.getProgramCode(g, r), F = oa.acquireProgram(g, b.shader, r, l), b.program = F, g.program = F);
      r = F.getAttributes();
      if (g.morphTargets) {
        for (l = g.numSupportedMorphTargets = 0; l < Q.maxMorphTargets; l++) {
          0 <= r["morphTarget" + l] && g.numSupportedMorphTargets++;
        }
      }
      if (g.morphNormals) {
        for (l = g.numSupportedMorphNormals = 0; l < Q.maxMorphNormals; l++) {
          0 <= r["morphNormal" + l] && g.numSupportedMorphNormals++;
        }
      }
      r = b.shader.uniforms;
      if (!g.isShaderMaterial && !g.isRawShaderMaterial || !0 === g.clipping) {
        b.numClippingPlanes = ma.numPlanes, b.numIntersection = ma.numIntersection, r.clippingPlanes = ma.uniform;
      }
      b.fog = a;
      void 0 === d && (b.lightsHash = d = {});
      d.stateID = c.stateID;
      d.directionalLength = c.directionalLength;
      d.pointLength = c.pointLength;
      d.spotLength = c.spotLength;
      d.rectAreaLength = c.rectAreaLength;
      d.hemiLength = c.hemiLength;
      d.shadowsLength = c.shadowsLength;
      g.lights && (r.ambientLightColor.value = e.state.ambient, r.directionalLights.value = e.state.directional, r.spotLights.value = e.state.spot, r.rectAreaLights.value = e.state.rectArea, r.pointLights.value = e.state.point, r.hemisphereLights.value = e.state.hemi, r.directionalShadowMap.value = e.state.directionalShadowMap, r.directionalShadowMatrix.value = e.state.directionalShadowMatrix, r.spotShadowMap.value = e.state.spotShadowMap, r.spotShadowMatrix.value = e.state.spotShadowMatrix, r.pointShadowMap.value = 
      e.state.pointShadowMap, r.pointShadowMatrix.value = e.state.pointShadowMatrix);
      g = b.program.getUniforms();
      g = Ib.seqWithValue(g.seq, r);
      b.uniformsList = g;
    }
    function w(g, a, r, b) {
      ic = 0;
      var e = Ca.get(r), d = e.lightsHash, c = K.state.lights.state.hash;
      jc && (Qc || g !== ja) && ma.setState(r.clippingPlanes, r.clipIntersection, r.clipShadows, g, e, g === ja && r.id === R);
      !1 === r.needsUpdate && (void 0 === e.program ? r.needsUpdate = !0 : r.fog && e.fog !== a ? r.needsUpdate = !0 : !r.lights || d.stateID === c.stateID && d.directionalLength === c.directionalLength && d.pointLength === c.pointLength && d.spotLength === c.spotLength && d.rectAreaLength === c.rectAreaLength && d.hemiLength === c.hemiLength && d.shadowsLength === c.shadowsLength ? void 0 === e.numClippingPlanes || e.numClippingPlanes === ma.numPlanes && e.numIntersection === ma.numIntersection || 
      (r.needsUpdate = !0) : r.needsUpdate = !0);
      r.needsUpdate && (v(r, a, b), r.needsUpdate = !1);
      var f = !1, h = !1, F = !1;
      d = e.program;
      c = d.getUniforms();
      var p = e.shader.uniforms;
      ca.useProgram(d.program) && (F = h = f = !0);
      r.id !== R && (R = r.id, h = !0);
      if (f || ja !== g) {
        c.setValue(Z, "projectionMatrix", g.projectionMatrix);
        Aa.logarithmicDepthBuffer && c.setValue(Z, "logDepthBufFC", 2 / (Math.log(g.far + 1) / Math.LN2));
        ja !== g && (ja = g, F = h = !0);
        if (r.isShaderMaterial || r.isMeshPhongMaterial || r.isMeshStandardMaterial || r.envMap) {
          f = c.map.cameraPosition, void 0 !== f && f.setValue(Z, hb.setFromMatrixPosition(g.matrixWorld));
        }
        (r.isMeshPhongMaterial || r.isMeshLambertMaterial || r.isMeshBasicMaterial || r.isMeshStandardMaterial || r.isShaderMaterial || r.skinning) && c.setValue(Z, "viewMatrix", g.matrixWorldInverse);
      }
      if (r.skinning && (c.setOptional(Z, b, "bindMatrix"), c.setOptional(Z, b, "bindMatrixInverse"), g = b.skeleton)) {
        if (f = g.bones, Aa.floatVertexTextures) {
          if (void 0 === g.boneTexture) {
            f = Math.sqrt(4 * f.length);
            f = ia.ceilPowerOfTwo(f);
            f = Math.max(f, 4);
            var k = new Float32Array(f * f * 4);
            k.set(g.boneMatrices);
            var n = new l(k, f, f, 1023, 1015);
            n.needsUpdate = !0;
            g.boneMatrices = k;
            g.boneTexture = n;
            g.boneTextureSize = f;
          }
          c.setValue(Z, "boneTexture", g.boneTexture);
          c.setValue(Z, "boneTextureSize", g.boneTextureSize);
        } else {
          c.setOptional(Z, g, "boneMatrices");
        }
      }
      h && (c.setValue(Z, "toneMappingExposure", Q.toneMappingExposure), c.setValue(Z, "toneMappingWhitePoint", Q.toneMappingWhitePoint), r.lights && (h = F, p.ambientLightColor.needsUpdate = h, p.directionalLights.needsUpdate = h, p.pointLights.needsUpdate = h, p.spotLights.needsUpdate = h, p.rectAreaLights.needsUpdate = h, p.hemisphereLights.needsUpdate = h), a && r.fog && (p.fogColor.value = a.color, a.isFog ? (p.fogNear.value = a.near, p.fogFar.value = a.far) : a.isFogExp2 && (p.fogDensity.value = 
      a.density)), r.isMeshBasicMaterial ? z(p, r) : r.isMeshLambertMaterial ? (z(p, r), r.emissiveMap && (p.emissiveMap.value = r.emissiveMap)) : r.isMeshPhongMaterial ? (z(p, r), r.isMeshToonMaterial ? (y(p, r), r.gradientMap && (p.gradientMap.value = r.gradientMap)) : y(p, r)) : r.isMeshStandardMaterial ? (z(p, r), r.isMeshPhysicalMaterial ? (D(p, r), p.reflectivity.value = r.reflectivity, p.clearCoat.value = r.clearCoat, p.clearCoatRoughness.value = r.clearCoatRoughness) : D(p, r)) : r.isMeshMatcapMaterial ? 
      (z(p, r), r.matcap && (p.matcap.value = r.matcap), r.bumpMap && (p.bumpMap.value = r.bumpMap, p.bumpScale.value = r.bumpScale, 1 === r.side && (p.bumpScale.value *= -1)), r.normalMap && (p.normalMap.value = r.normalMap, p.normalScale.value.copy(r.normalScale), 1 === r.side && p.normalScale.value.negate()), r.displacementMap && (p.displacementMap.value = r.displacementMap, p.displacementScale.value = r.displacementScale, p.displacementBias.value = r.displacementBias)) : r.isMeshDepthMaterial ? 
      (z(p, r), r.displacementMap && (p.displacementMap.value = r.displacementMap, p.displacementScale.value = r.displacementScale, p.displacementBias.value = r.displacementBias)) : r.isMeshDistanceMaterial ? (z(p, r), r.displacementMap && (p.displacementMap.value = r.displacementMap, p.displacementScale.value = r.displacementScale, p.displacementBias.value = r.displacementBias), p.referencePosition.value.copy(r.referencePosition), p.nearDistance.value = r.nearDistance, p.farDistance.value = r.farDistance) : 
      r.isMeshNormalMaterial ? (z(p, r), r.bumpMap && (p.bumpMap.value = r.bumpMap, p.bumpScale.value = r.bumpScale, 1 === r.side && (p.bumpScale.value *= -1)), r.normalMap && (p.normalMap.value = r.normalMap, p.normalScale.value.copy(r.normalScale), 1 === r.side && p.normalScale.value.negate()), r.displacementMap && (p.displacementMap.value = r.displacementMap, p.displacementScale.value = r.displacementScale, p.displacementBias.value = r.displacementBias)) : r.isLineBasicMaterial ? (p.diffuse.value = 
      r.color, p.opacity.value = r.opacity, r.isLineDashedMaterial && (p.dashSize.value = r.dashSize, p.totalSize.value = r.dashSize + r.gapSize, p.scale.value = r.scale)) : r.isPointsMaterial ? (p.diffuse.value = r.color, p.opacity.value = r.opacity, p.size.value = r.size * za, p.scale.value = .5 * Qa, p.map.value = r.map, null !== r.map && (!0 === r.map.matrixAutoUpdate && r.map.updateMatrix(), p.uvTransform.value.copy(r.map.matrix))) : r.isSpriteMaterial ? (p.diffuse.value = r.color, p.opacity.value = 
      r.opacity, p.rotation.value = r.rotation, p.map.value = r.map, null !== r.map && (!0 === r.map.matrixAutoUpdate && r.map.updateMatrix(), p.uvTransform.value.copy(r.map.matrix))) : r.isShadowMaterial && (p.color.value = r.color, p.opacity.value = r.opacity), void 0 !== p.ltc_1 && (p.ltc_1.value = ea.LTC_1), void 0 !== p.ltc_2 && (p.ltc_2.value = ea.LTC_2), Ib.upload(Z, e.uniformsList, p, Q));
      r.isShaderMaterial && !0 === r.uniformsNeedUpdate && (Ib.upload(Z, e.uniformsList, p, Q), r.uniformsNeedUpdate = !1);
      r.isSpriteMaterial && c.setValue(Z, "center", b.center);
      c.setValue(Z, "modelViewMatrix", b.modelViewMatrix);
      c.setValue(Z, "normalMatrix", b.normalMatrix);
      c.setValue(Z, "modelMatrix", b.matrixWorld);
      return d;
    }
    function z(g, a) {
      g.opacity.value = a.opacity;
      a.color && (g.diffuse.value = a.color);
      a.emissive && g.emissive.value.copy(a.emissive).multiplyScalar(a.emissiveIntensity);
      a.map && (g.map.value = a.map);
      a.alphaMap && (g.alphaMap.value = a.alphaMap);
      a.specularMap && (g.specularMap.value = a.specularMap);
      a.envMap && (g.envMap.value = a.envMap, g.flipEnvMap.value = a.envMap.isCubeTexture ? -1 : 1, g.reflectivity.value = a.reflectivity, g.refractionRatio.value = a.refractionRatio, g.maxMipLevel.value = Ca.get(a.envMap).__maxMipLevel);
      a.lightMap && (g.lightMap.value = a.lightMap, g.lightMapIntensity.value = a.lightMapIntensity);
      a.aoMap && (g.aoMap.value = a.aoMap, g.aoMapIntensity.value = a.aoMapIntensity);
      if (a.map) {
        var r = a.map;
      } else {
        a.specularMap ? r = a.specularMap : a.displacementMap ? r = a.displacementMap : a.normalMap ? r = a.normalMap : a.bumpMap ? r = a.bumpMap : a.roughnessMap ? r = a.roughnessMap : a.metalnessMap ? r = a.metalnessMap : a.alphaMap ? r = a.alphaMap : a.emissiveMap && (r = a.emissiveMap);
      }
      void 0 !== r && (r.isWebGLRenderTarget && (r = r.texture), !0 === r.matrixAutoUpdate && r.updateMatrix(), g.uvTransform.value.copy(r.matrix));
    }
    function y(g, a) {
      g.specular.value = a.specular;
      g.shininess.value = Math.max(a.shininess, 1E-4);
      a.emissiveMap && (g.emissiveMap.value = a.emissiveMap);
      a.bumpMap && (g.bumpMap.value = a.bumpMap, g.bumpScale.value = a.bumpScale, 1 === a.side && (g.bumpScale.value *= -1));
      a.normalMap && (g.normalMap.value = a.normalMap, g.normalScale.value.copy(a.normalScale), 1 === a.side && g.normalScale.value.negate());
      a.displacementMap && (g.displacementMap.value = a.displacementMap, g.displacementScale.value = a.displacementScale, g.displacementBias.value = a.displacementBias);
    }
    function D(g, a) {
      g.roughness.value = a.roughness;
      g.metalness.value = a.metalness;
      a.roughnessMap && (g.roughnessMap.value = a.roughnessMap);
      a.metalnessMap && (g.metalnessMap.value = a.metalnessMap);
      a.emissiveMap && (g.emissiveMap.value = a.emissiveMap);
      a.bumpMap && (g.bumpMap.value = a.bumpMap, g.bumpScale.value = a.bumpScale, 1 === a.side && (g.bumpScale.value *= -1));
      a.normalMap && (g.normalMap.value = a.normalMap, g.normalScale.value.copy(a.normalScale), 1 === a.side && g.normalScale.value.negate());
      a.displacementMap && (g.displacementMap.value = a.displacementMap, g.displacementScale.value = a.displacementScale, g.displacementBias.value = a.displacementBias);
      a.envMap && (g.envMapIntensity.value = a.envMapIntensity);
    }
    var B;
    console.log("THREE.WebGLRenderer", "103dev");
    g = g || {};
    var E = void 0 !== g.canvas ? g.canvas : document.createElementNS("http://www.w3.org/1999/xhtml", "canvas"), G = void 0 !== g.context ? g.context : null, M = void 0 !== g.alpha ? g.alpha : !1, H = void 0 !== g.depth ? g.depth : !0, O = void 0 !== g.stencil ? g.stencil : !0, P = void 0 !== g.antialias ? g.antialias : !1, J = void 0 !== g.premultipliedAlpha ? g.premultipliedAlpha : !0, V = void 0 !== g.preserveDrawingBuffer ? g.preserveDrawingBuffer : !1, N = void 0 !== g.powerPreference ? g.powerPreference : 
    "default", I = null, K = null;
    this.domElement = E;
    this.context = null;
    this.sortObjects = this.autoClearStencil = this.autoClearDepth = this.autoClearColor = this.autoClear = !0;
    this.clippingPlanes = [];
    this.localClippingEnabled = !1;
    this.gammaFactor = 2;
    this.physicallyCorrectLights = this.gammaOutput = this.gammaInput = !1;
    this.toneMappingWhitePoint = this.toneMappingExposure = this.toneMapping = 1;
    this.maxMorphTargets = 8;
    this.maxMorphNormals = 4;
    var Q = this, L = !1, aa = null, S = null, W = null, R = -1, ka = B = null, ha = !1, ja = null, X = null, fa = new q, Fb = new q, ba = null, ic = 0, Ua = E.width, Qa = E.height, za = 1, Gb = new q(0, 0, Ua, Qa), Hb = new q(0, 0, Ua, Qa), Oc = !1, Pc = new x, ma = new pb, jc = !1, Qc = !1, la = new b, hb = new d;
    try {
      M = {alpha:M, depth:H, stencil:O, antialias:P, premultipliedAlpha:J, preserveDrawingBuffer:V, powerPreference:N};
      E.addEventListener("webglcontextlost", e, !1);
      E.addEventListener("webglcontextrestored", c, !1);
      var Z = G || E.getContext("webgl", M) || E.getContext("experimental-webgl", M);
      if (null === Z) {
        if (null !== E.getContext("webgl")) {
          throw Error("Error creating WebGL context with your selected attributes.");
        }
        throw Error("Error creating WebGL context.");
      }
      void 0 === Z.getShaderPrecisionFormat && (Z.getShaderPrecisionFormat = function() {
        return {rangeMin:1, rangeMax:1, precision:1};
      });
    } catch (xf) {
      throw console.error("THREE.WebGLRenderer: " + xf.message), xf;
    }
    var ta, Aa, ca, da, Ca, Ra, na, pa, ub, oa, Ob, qa, Va, ua, Pb, va, ra;
    a();
    var Na = null;
    "undefined" !== typeof navigator && (Na = "xr" in navigator ? new vg(Q) : new wf(Q));
    this.vr = Na;
    var ya = new rf(Q, ub, Aa.maxTextureSize);
    this.shadowMap = ya;
    this.getContext = function() {
      return Z;
    };
    this.getContextAttributes = function() {
      return Z.getContextAttributes();
    };
    this.forceContextLoss = function() {
      var g = ta.get("WEBGL_lose_context");
      g && g.loseContext();
    };
    this.forceContextRestore = function() {
      var g = ta.get("WEBGL_lose_context");
      g && g.restoreContext();
    };
    this.getPixelRatio = function() {
      return za;
    };
    this.setPixelRatio = function(g) {
      void 0 !== g && (za = g, this.setSize(Ua, Qa, !1));
    };
    this.getSize = function(g) {
      void 0 === g && (console.warn("WebGLRenderer: .getsize() now requires a Vector2 as an argument"), g = new k);
      return g.set(Ua, Qa);
    };
    this.setSize = function(g, a, r) {
      Na.isPresenting() ? console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.") : (Ua = g, Qa = a, E.width = g * za, E.height = a * za, !1 !== r && (E.style.width = g + "px", E.style.height = a + "px"), this.setViewport(0, 0, g, a));
    };
    this.getDrawingBufferSize = function(g) {
      void 0 === g && (console.warn("WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument"), g = new k);
      return g.set(Ua * za, Qa * za);
    };
    this.setDrawingBufferSize = function(g, a, r) {
      Ua = g;
      Qa = a;
      za = r;
      E.width = g * r;
      E.height = a * r;
      this.setViewport(0, 0, g, a);
    };
    this.getCurrentViewport = function(g) {
      void 0 === g && (console.warn("WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument"), g = new q);
      return g.copy(fa);
    };
    this.getViewport = function(g) {
      return g.copy(Gb);
    };
    this.setViewport = function(g, a, r, b) {
      g.isVector4 ? Gb.set(g.x, g.y, g.z, g.w) : Gb.set(g, a, r, b);
      ca.viewport(fa.copy(Gb).multiplyScalar(za));
    };
    this.getScissor = function(g) {
      return g.copy(Hb);
    };
    this.setScissor = function(g, a, r, b) {
      g.isVector4 ? Hb.set(g.x, g.y, g.z, g.w) : Hb.set(g, a, r, b);
      ca.scissor(Fb.copy(Hb).multiplyScalar(za));
    };
    this.getScissorTest = function() {
      return Oc;
    };
    this.setScissorTest = function(g) {
      ca.setScissorTest(Oc = g);
    };
    this.getClearColor = function() {
      return Va.getClearColor();
    };
    this.setClearColor = function() {
      Va.setClearColor.apply(Va, arguments);
    };
    this.getClearAlpha = function() {
      return Va.getClearAlpha();
    };
    this.setClearAlpha = function() {
      Va.setClearAlpha.apply(Va, arguments);
    };
    this.clear = function(g, a, r) {
      var b = 0;
      if (void 0 === g || g) {
        b |= 16384;
      }
      if (void 0 === a || a) {
        b |= 256;
      }
      if (void 0 === r || r) {
        b |= 1024;
      }
      Z.clear(b);
    };
    this.clearColor = function() {
      this.clear(!0, !1, !1);
    };
    this.clearDepth = function() {
      this.clear(!1, !0, !1);
    };
    this.clearStencil = function() {
      this.clear(!1, !1, !0);
    };
    this.dispose = function() {
      E.removeEventListener("webglcontextlost", e, !1);
      E.removeEventListener("webglcontextrestored", c, !1);
      Ob.dispose();
      qa.dispose();
      Ca.dispose();
      ub.dispose();
      Na.dispose();
      wa.stop();
    };
    this.renderBufferImmediate = function(g, a) {
      ca.initAttributes();
      var r = Ca.get(g);
      g.hasPositions && !r.position && (r.position = Z.createBuffer());
      g.hasNormals && !r.normal && (r.normal = Z.createBuffer());
      g.hasUvs && !r.uv && (r.uv = Z.createBuffer());
      g.hasColors && !r.color && (r.color = Z.createBuffer());
      a = a.getAttributes();
      g.hasPositions && (Z.bindBuffer(34962, r.position), Z.bufferData(34962, g.positionArray, 35048), ca.enableAttribute(a.position), Z.vertexAttribPointer(a.position, 3, 5126, !1, 0, 0));
      g.hasNormals && (Z.bindBuffer(34962, r.normal), Z.bufferData(34962, g.normalArray, 35048), ca.enableAttribute(a.normal), Z.vertexAttribPointer(a.normal, 3, 5126, !1, 0, 0));
      g.hasUvs && (Z.bindBuffer(34962, r.uv), Z.bufferData(34962, g.uvArray, 35048), ca.enableAttribute(a.uv), Z.vertexAttribPointer(a.uv, 2, 5126, !1, 0, 0));
      g.hasColors && (Z.bindBuffer(34962, r.color), Z.bufferData(34962, g.colorArray, 35048), ca.enableAttribute(a.color), Z.vertexAttribPointer(a.color, 3, 5126, !1, 0, 0));
      ca.disableUnusedAttributes();
      Z.drawArrays(4, 0, g.count);
      g.count = 0;
    };
    this.renderBufferDirect = function(g, a, r, b, e, d) {
      var c = e.isMesh && 0 > e.matrixWorld.determinant();
      ca.setMaterial(b, c);
      var f = w(g, a, b, e), l = !1;
      if (B !== r.id || ka !== f.id || ha !== (!0 === b.wireframe)) {
        B = r.id, ka = f.id, ha = !0 === b.wireframe, l = !0;
      }
      e.morphTargetInfluences && (ua.update(e, r, b, f), l = !0);
      c = r.index;
      var h = r.attributes.position;
      a = 1;
      !0 === b.wireframe && (c = pa.getWireframeAttribute(r), a = 2);
      g = Pb;
      if (null !== c) {
        var F = na.get(c);
        g = va;
        g.setIndex(F);
      }
      if (l) {
        if (r && r.isInstancedBufferGeometry && !Aa.isWebGL2 && null === ta.get("ANGLE_instanced_arrays")) {
          console.error("THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
        } else {
          ca.initAttributes();
          l = r.attributes;
          f = f.getAttributes();
          var p = b.defaultAttributeValues;
          for (z in f) {
            var k = f[z];
            if (0 <= k) {
              var n = l[z];
              if (void 0 !== n) {
                var m = n.normalized, t = n.itemSize, u = na.get(n);
                if (void 0 !== u) {
                  var q = u.buffer, T = u.type;
                  u = u.bytesPerElement;
                  if (n.isInterleavedBufferAttribute) {
                    var v = n.data, Y = v.stride;
                    n = n.offset;
                    v && v.isInstancedInterleavedBuffer ? (ca.enableAttributeAndDivisor(k, v.meshPerAttribute), void 0 === r.maxInstancedCount && (r.maxInstancedCount = v.meshPerAttribute * v.count)) : ca.enableAttribute(k);
                    Z.bindBuffer(34962, q);
                    Z.vertexAttribPointer(k, t, T, m, Y * u, n * u);
                  } else {
                    n.isInstancedBufferAttribute ? (ca.enableAttributeAndDivisor(k, n.meshPerAttribute), void 0 === r.maxInstancedCount && (r.maxInstancedCount = n.meshPerAttribute * n.count)) : ca.enableAttribute(k), Z.bindBuffer(34962, q), Z.vertexAttribPointer(k, t, T, m, 0, 0);
                  }
                }
              } else {
                if (void 0 !== p && (m = p[z], void 0 !== m)) {
                  switch(m.length) {
                    case 2:
                      Z.vertexAttrib2fv(k, m);
                      break;
                    case 3:
                      Z.vertexAttrib3fv(k, m);
                      break;
                    case 4:
                      Z.vertexAttrib4fv(k, m);
                      break;
                    default:
                      Z.vertexAttrib1fv(k, m);
                  }
                }
              }
            }
          }
          ca.disableUnusedAttributes();
        }
        null !== c && Z.bindBuffer(34963, F.buffer);
      }
      F = Infinity;
      null !== c ? F = c.count : void 0 !== h && (F = h.count);
      c = r.drawRange.start * a;
      h = null !== d ? d.start * a : 0;
      var z = Math.max(c, h);
      d = Math.max(0, Math.min(F, c + r.drawRange.count * a, h + (null !== d ? d.count * a : Infinity)) - 1 - z + 1);
      if (0 !== d) {
        if (e.isMesh) {
          if (!0 === b.wireframe) {
            ca.setLineWidth(b.wireframeLinewidth * (null === S ? za : 1)), g.setMode(1);
          } else {
            switch(e.drawMode) {
              case 0:
                g.setMode(4);
                break;
              case 1:
                g.setMode(5);
                break;
              case 2:
                g.setMode(6);
            }
          }
        } else {
          e.isLine ? (b = b.linewidth, void 0 === b && (b = 1), ca.setLineWidth(b * (null === S ? za : 1)), e.isLineSegments ? g.setMode(1) : e.isLineLoop ? g.setMode(2) : g.setMode(3)) : e.isPoints ? g.setMode(0) : e.isSprite && g.setMode(4);
        }
        r && r.isInstancedBufferGeometry ? 0 < r.maxInstancedCount && g.renderInstances(r, z, d) : g.render(z, d);
      }
    };
    this.compile = function(g, a) {
      K = qa.get(g, a);
      K.init();
      g.traverse(function(g) {
        g.isLight && (K.pushLight(g), g.castShadow && K.pushShadow(g));
      });
      K.setupLights(a);
      g.traverse(function(a) {
        if (a.material) {
          if (Array.isArray(a.material)) {
            for (var r = 0; r < a.material.length; r++) {
              v(a.material[r], g.fog, a);
            }
          } else {
            v(a.material, g.fog, a);
          }
        }
      });
    };
    var xa = null, wa = new C;
    wa.setAnimationLoop(function(g) {
      Na.isPresenting() || xa && xa(g);
    });
    "undefined" !== typeof window && wa.setContext(window);
    this.setAnimationLoop = function(g) {
      xa = g;
      Na.setAnimationLoop(g);
      wa.start();
    };
    this.render = function(g, a, r, b) {
      if (void 0 !== r) {
        console.warn("THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.");
        var e = r;
      }
      if (void 0 !== b) {
        console.warn("THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.");
        var d = b;
      }
      a && a.isCamera ? L || (ka = B = null, ha = !1, R = -1, ja = null, !0 === g.autoUpdate && g.updateMatrixWorld(), null === a.parent && a.updateMatrixWorld(), Na.enabled && (a = Na.getCamera(a)), K = qa.get(g, a), K.init(), g.onBeforeRender(Q, g, a, e || S), la.multiplyMatrices(a.projectionMatrix, a.matrixWorldInverse), Pc.setFromMatrix(la), Qc = this.localClippingEnabled, jc = ma.init(this.clippingPlanes, Qc, a), I = Ob.get(g, a), I.init(), m(g, a, 0, Q.sortObjects), !0 === Q.sortObjects && 
      I.sort(), jc && ma.beginShadows(), ya.render(K.state.shadowsArray, g, a), K.setupLights(a), jc && ma.endShadows(), this.info.autoReset && this.info.reset(), void 0 !== e && this.setRenderTarget(e), Va.render(I, g, a, d), r = I.opaque, b = I.transparent, g.overrideMaterial ? (e = g.overrideMaterial, r.length && t(r, g, a, e), b.length && t(b, g, a, e)) : (r.length && t(r, g, a), b.length && t(b, g, a)), null !== S && (Ra.updateRenderTargetMipmap(S), Ra.updateMultisampleRenderTarget(S)), ca.buffers.depth.setTest(!0), 
      ca.buffers.depth.setMask(!0), ca.buffers.color.setMask(!0), ca.setPolygonOffset(!1), g.onAfterRender(Q, g, a), Na.enabled && Na.submitFrame(), K = I = null) : console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
    };
    this.allocTextureUnit = function() {
      var g = ic;
      g >= Aa.maxTextures && console.warn("THREE.WebGLRenderer: Trying to use " + g + " texture units while this GPU supports only " + Aa.maxTextures);
      ic += 1;
      return g;
    };
    this.setTexture2D = function() {
      var g = !1;
      return function(a, r) {
        a && a.isWebGLRenderTarget && (g || (console.warn("THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead."), g = !0), a = a.texture);
        Ra.setTexture2D(a, r);
      };
    }();
    this.setTexture2DArray = function(g, a) {
      Ra.setTexture2DArray(g, a);
    };
    this.setTexture3D = function(g, a) {
      Ra.setTexture3D(g, a);
    };
    this.setTexture = function() {
      var g = !1;
      return function(a, r) {
        g || (console.warn("THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead."), g = !0);
        Ra.setTexture2D(a, r);
      };
    }();
    this.setTextureCube = function() {
      var g = !1;
      return function(a, r) {
        a && a.isWebGLRenderTargetCube && (g || (console.warn("THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead."), g = !0), a = a.texture);
        a && a.isCubeTexture || Array.isArray(a.image) && 6 === a.image.length ? Ra.setTextureCube(a, r) : Ra.setTextureCubeDynamic(a, r);
      };
    }();
    this.setFramebuffer = function(g) {
      aa = g;
    };
    this.getRenderTarget = function() {
      return S;
    };
    this.setRenderTarget = function(g, a, r) {
      (S = g) && void 0 === Ca.get(g).__webglFramebuffer && Ra.setupRenderTarget(g);
      var b = aa, e = !1;
      g ? (b = Ca.get(g).__webglFramebuffer, g.isWebGLRenderTargetCube ? (b = b[a || 0], e = !0) : b = g.isWebGLMultisampleRenderTarget ? Ca.get(g).__webglMultisampledFramebuffer : b, fa.copy(g.viewport), Fb.copy(g.scissor), ba = g.scissorTest) : (fa.copy(Gb).multiplyScalar(za), Fb.copy(Hb).multiplyScalar(za), ba = Oc);
      W !== b && (Z.bindFramebuffer(36160, b), W = b);
      ca.viewport(fa);
      ca.scissor(Fb);
      ca.setScissorTest(ba);
      e && (g = Ca.get(g.texture), Z.framebufferTexture2D(36160, 36064, 34069 + (a || 0), g.__webglTexture, r || 0));
    };
    this.readRenderTargetPixels = function(g, a, r, b, e, d) {
      if (g && g.isWebGLRenderTarget) {
        var c = Ca.get(g).__webglFramebuffer;
        if (c) {
          var f = !1;
          c !== W && (Z.bindFramebuffer(36160, c), f = !0);
          try {
            var l = g.texture, h = l.format, F = l.type;
            1023 !== h && ra.convert(h) !== Z.getParameter(35739) ? console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.") : 1009 === F || ra.convert(F) === Z.getParameter(35738) || 1015 === F && (Aa.isWebGL2 || ta.get("OES_texture_float") || ta.get("WEBGL_color_buffer_float")) || 1016 === F && (Aa.isWebGL2 ? ta.get("EXT_color_buffer_float") : ta.get("EXT_color_buffer_half_float")) ? 36053 === Z.checkFramebufferStatus(36160) ? 0 <= 
            a && a <= g.width - b && 0 <= r && r <= g.height - e && Z.readPixels(a, r, b, e, ra.convert(h), ra.convert(F), d) : console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.") : console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
          } finally {
            f && Z.bindFramebuffer(36160, W);
          }
        }
      } else {
        console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
      }
    };
    this.copyFramebufferToTexture = function(g, a, r) {
      var b = a.image.width, e = a.image.height, d = ra.convert(a.format);
      this.setTexture2D(a, 0);
      Z.copyTexImage2D(3553, r || 0, d, g.x, g.y, b, e, 0);
    };
    this.copyTextureToTexture = function(g, a, r, b) {
      var e = a.image.width, d = a.image.height, c = ra.convert(r.format), f = ra.convert(r.type);
      this.setTexture2D(r, 0);
      a.isDataTexture ? Z.texSubImage2D(3553, b || 0, g.x, g.y, e, d, c, f, a.image.data) : Z.texSubImage2D(3553, b || 0, g.x, g.y, c, f, a.image);
    };
  }
  function Nd(g, a) {
    this.name = "";
    this.color = new z(g);
    this.density = void 0 !== a ? a : 2.5E-4;
  }
  function Od(g, a, b) {
    this.name = "";
    this.color = new z(g);
    this.near = void 0 !== a ? a : 1;
    this.far = void 0 !== b ? b : 1E3;
  }
  function Pd() {
    G.call(this);
    this.type = "Scene";
    this.overrideMaterial = this.fog = this.background = null;
    this.autoUpdate = !0;
  }
  function Qb(g, a) {
    this.array = g;
    this.stride = a;
    this.count = void 0 !== g ? g.length / a : 0;
    this.dynamic = !1;
    this.updateRange = {offset:0, count:-1};
    this.version = 0;
  }
  function Uc(g, a, b, e) {
    this.data = g;
    this.itemSize = a;
    this.offset = b;
    this.normalized = !0 === e;
  }
  function Lb(g) {
    X.call(this);
    this.type = "SpriteMaterial";
    this.color = new z(16777215);
    this.map = null;
    this.rotation = 0;
    this.sizeAttenuation = !0;
    this.lights = !1;
    this.transparent = !0;
    this.setValues(g);
  }
  function Vc(g) {
    G.call(this);
    this.type = "Sprite";
    if (void 0 === lc) {
      lc = new O;
      var a = new Float32Array([-.5, -.5, 0, 0, 0, .5, -.5, 0, 1, 0, .5, .5, 0, 1, 1, -.5, .5, 0, 0, 1]);
      a = new Qb(a, 5);
      lc.setIndex([0, 1, 2, 0, 2, 3]);
      lc.addAttribute("position", new Uc(a, 3, 0, !1));
      lc.addAttribute("uv", new Uc(a, 2, 3, !1));
    }
    this.geometry = lc;
    this.material = void 0 !== g ? g : new Lb;
    this.center = new k(.5, .5);
  }
  function Wc() {
    G.call(this);
    this.type = "LOD";
    Object.defineProperties(this, {levels:{enumerable:!0, value:[]}});
  }
  function Xc(g, a) {
    g && g.isGeometry && console.error("THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
    ca.call(this, g, a);
    this.type = "SkinnedMesh";
    this.bindMode = "attached";
    this.bindMatrix = new b;
    this.bindMatrixInverse = new b;
  }
  function Qd(g, a) {
    g = g || [];
    this.bones = g.slice(0);
    this.boneMatrices = new Float32Array(16 * this.bones.length);
    if (void 0 === a) {
      this.calculateInverses();
    } else {
      if (this.bones.length === a.length) {
        this.boneInverses = a.slice(0);
      } else {
        for (console.warn("THREE.Skeleton boneInverses is the wrong length."), this.boneInverses = [], g = 0, a = this.bones.length; g < a; g++) {
          this.boneInverses.push(new b);
        }
      }
    }
  }
  function we() {
    G.call(this);
    this.type = "Bone";
  }
  function pa(g) {
    X.call(this);
    this.type = "LineBasicMaterial";
    this.color = new z(16777215);
    this.linewidth = 1;
    this.linejoin = this.linecap = "round";
    this.lights = !1;
    this.setValues(g);
  }
  function wa(g, a, b) {
    1 === b && console.error("THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead.");
    G.call(this);
    this.type = "Line";
    this.geometry = void 0 !== g ? g : new O;
    this.material = void 0 !== a ? a : new pa({color:16777215 * Math.random()});
  }
  function qa(g, a) {
    wa.call(this, g, a);
    this.type = "LineSegments";
  }
  function Rd(g, a) {
    wa.call(this, g, a);
    this.type = "LineLoop";
  }
  function Wa(g) {
    X.call(this);
    this.type = "PointsMaterial";
    this.color = new z(16777215);
    this.map = null;
    this.size = 1;
    this.sizeAttenuation = !0;
    this.lights = this.morphTargets = !1;
    this.setValues(g);
  }
  function mc(g, a) {
    G.call(this);
    this.type = "Points";
    this.geometry = void 0 !== g ? g : new O;
    this.material = void 0 !== a ? a : new Wa({color:16777215 * Math.random()});
  }
  function xe(g, a, b, e, d, c, f, l, h) {
    n.call(this, g, a, b, e, d, c, f, l, h);
    this.format = void 0 !== f ? f : 1022;
    this.minFilter = void 0 !== c ? c : 1006;
    this.magFilter = void 0 !== d ? d : 1006;
    this.generateMipmaps = !1;
  }
  function nc(g, a, b, e, d, c, f, l, h, p, k, m) {
    n.call(this, null, c, f, l, h, p, e, d, k, m);
    this.image = {width:a, height:b};
    this.mipmaps = g;
    this.generateMipmaps = this.flipY = !1;
  }
  function Yc(g, a, b, e, d, c, f, l, h) {
    n.call(this, g, a, b, e, d, c, f, l, h);
    this.needsUpdate = !0;
  }
  function Zc(g, a, b, e, d, c, f, l, h, p) {
    p = void 0 !== p ? p : 1026;
    if (1026 !== p && 1027 !== p) {
      throw Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
    }
    void 0 === b && 1026 === p && (b = 1012);
    void 0 === b && 1027 === p && (b = 1020);
    n.call(this, null, e, d, c, f, l, p, b, h);
    this.image = {width:g, height:a};
    this.magFilter = void 0 !== f ? f : 1003;
    this.minFilter = void 0 !== l ? l : 1003;
    this.generateMipmaps = this.flipY = !1;
  }
  function oc(g) {
    O.call(this);
    this.type = "WireframeGeometry";
    var a = [], b, e, c, f = [0, 0], l = {}, h = ["a", "b", "c"];
    if (g && g.isGeometry) {
      var p = g.faces, k = 0;
      for (e = p.length; k < e; k++) {
        var n = p[k];
        for (b = 0; 3 > b; b++) {
          var m = n[h[b]], t = n[h[(b + 1) % 3]];
          f[0] = Math.min(m, t);
          f[1] = Math.max(m, t);
          m = f[0] + "," + f[1];
          void 0 === l[m] && (l[m] = {index1:f[0], index2:f[1]});
        }
      }
      for (m in l) {
        k = l[m], h = g.vertices[k.index1], a.push(h.x, h.y, h.z), h = g.vertices[k.index2], a.push(h.x, h.y, h.z);
      }
    } else {
      if (g && g.isBufferGeometry) {
        if (h = new d, null !== g.index) {
          p = g.attributes.position;
          n = g.index;
          var u = g.groups;
          0 === u.length && (u = [{start:0, count:n.count, materialIndex:0}]);
          g = 0;
          for (c = u.length; g < c; ++g) {
            for (k = u[g], b = k.start, e = k.count, k = b, e = b + e; k < e; k += 3) {
              for (b = 0; 3 > b; b++) {
                m = n.getX(k + b), t = n.getX(k + (b + 1) % 3), f[0] = Math.min(m, t), f[1] = Math.max(m, t), m = f[0] + "," + f[1], void 0 === l[m] && (l[m] = {index1:f[0], index2:f[1]});
              }
            }
          }
          for (m in l) {
            k = l[m], h.fromBufferAttribute(p, k.index1), a.push(h.x, h.y, h.z), h.fromBufferAttribute(p, k.index2), a.push(h.x, h.y, h.z);
          }
        } else {
          for (p = g.attributes.position, k = 0, e = p.count / 3; k < e; k++) {
            for (b = 0; 3 > b; b++) {
              l = 3 * k + b, h.fromBufferAttribute(p, l), a.push(h.x, h.y, h.z), l = 3 * k + (b + 1) % 3, h.fromBufferAttribute(p, l), a.push(h.x, h.y, h.z);
            }
          }
        }
      }
    }
    this.addAttribute("position", new N(a, 3));
  }
  function $c(g, a, b) {
    H.call(this);
    this.type = "ParametricGeometry";
    this.parameters = {func:g, slices:a, stacks:b};
    this.fromBufferGeometry(new pc(g, a, b));
    this.mergeVertices();
  }
  function pc(g, a, b) {
    O.call(this);
    this.type = "ParametricBufferGeometry";
    this.parameters = {func:g, slices:a, stacks:b};
    var r = [], e = [], c = [], f = [], l = new d, h = new d, F = new d, p = new d, k = new d, n, m;
    3 > g.length && console.error("THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.");
    var t = a + 1;
    for (n = 0; n <= b; n++) {
      var u = n / b;
      for (m = 0; m <= a; m++) {
        var q = m / a;
        g(q, u, h);
        e.push(h.x, h.y, h.z);
        0 <= q - 1E-5 ? (g(q - 1E-5, u, F), p.subVectors(h, F)) : (g(q + 1E-5, u, F), p.subVectors(F, h));
        0 <= u - 1E-5 ? (g(q, u - 1E-5, F), k.subVectors(h, F)) : (g(q, u + 1E-5, F), k.subVectors(F, h));
        l.crossVectors(p, k).normalize();
        c.push(l.x, l.y, l.z);
        f.push(q, u);
      }
    }
    for (n = 0; n < b; n++) {
      for (m = 0; m < a; m++) {
        g = n * t + m + 1, l = (n + 1) * t + m + 1, h = (n + 1) * t + m, r.push(n * t + m, g, h), r.push(g, l, h);
      }
    }
    this.setIndex(r);
    this.addAttribute("position", new N(e, 3));
    this.addAttribute("normal", new N(c, 3));
    this.addAttribute("uv", new N(f, 2));
  }
  function ad(g, a, b, e) {
    H.call(this);
    this.type = "PolyhedronGeometry";
    this.parameters = {vertices:g, indices:a, radius:b, detail:e};
    this.fromBufferGeometry(new Ka(g, a, b, e));
    this.mergeVertices();
  }
  function Ka(g, a, b, e) {
    function r(g) {
      l.push(g.x, g.y, g.z);
    }
    function c(a, r) {
      a *= 3;
      r.x = g[a + 0];
      r.y = g[a + 1];
      r.z = g[a + 2];
    }
    function f(g, a, r, b) {
      0 > b && 1 === g.x && (h[a] = g.x - 1);
      0 === r.x && 0 === r.z && (h[a] = b / 2 / Math.PI + .5);
    }
    O.call(this);
    this.type = "PolyhedronBufferGeometry";
    this.parameters = {vertices:g, indices:a, radius:b, detail:e};
    b = b || 1;
    e = e || 0;
    var l = [], h = [];
    (function(g) {
      for (var b = new d, e = new d, f = new d, l = 0; l < a.length; l += 3) {
        c(a[l + 0], b);
        c(a[l + 1], e);
        c(a[l + 2], f);
        var h, F, p = b, k = e, n = f, m = Math.pow(2, g), t = [];
        for (F = 0; F <= m; F++) {
          t[F] = [];
          var u = p.clone().lerp(n, F / m), q = k.clone().lerp(n, F / m), v = m - F;
          for (h = 0; h <= v; h++) {
            t[F][h] = 0 === h && F === m ? u : u.clone().lerp(q, h / v);
          }
        }
        for (F = 0; F < m; F++) {
          for (h = 0; h < 2 * (m - F) - 1; h++) {
            p = Math.floor(h / 2), 0 === h % 2 ? (r(t[F][p + 1]), r(t[F + 1][p]), r(t[F][p])) : (r(t[F][p + 1]), r(t[F + 1][p + 1]), r(t[F + 1][p]));
          }
        }
      }
    })(e);
    (function(g) {
      for (var a = new d, r = 0; r < l.length; r += 3) {
        a.x = l[r + 0], a.y = l[r + 1], a.z = l[r + 2], a.normalize().multiplyScalar(g), l[r + 0] = a.x, l[r + 1] = a.y, l[r + 2] = a.z;
      }
    })(b);
    (function() {
      for (var g = new d, a = 0; a < l.length; a += 3) {
        g.x = l[a + 0], g.y = l[a + 1], g.z = l[a + 2], h.push(Math.atan2(g.z, -g.x) / 2 / Math.PI + .5, 1 - (Math.atan2(-g.y, Math.sqrt(g.x * g.x + g.z * g.z)) / Math.PI + .5));
      }
      g = new d;
      a = new d;
      for (var r = new d, b = new d, e = new k, c = new k, F = new k, p = 0, n = 0; p < l.length; p += 9, n += 6) {
        g.set(l[p + 0], l[p + 1], l[p + 2]);
        a.set(l[p + 3], l[p + 4], l[p + 5]);
        r.set(l[p + 6], l[p + 7], l[p + 8]);
        e.set(h[n + 0], h[n + 1]);
        c.set(h[n + 2], h[n + 3]);
        F.set(h[n + 4], h[n + 5]);
        b.copy(g).add(a).add(r).divideScalar(3);
        var m = Math.atan2(b.z, -b.x);
        f(e, n + 0, g, m);
        f(c, n + 2, a, m);
        f(F, n + 4, r, m);
      }
      for (g = 0; g < h.length; g += 6) {
        a = h[g + 0], r = h[g + 2], b = h[g + 4], e = Math.min(a, r, b), .9 < Math.max(a, r, b) && .1 > e && (.2 > a && (h[g + 0] += 1), .2 > r && (h[g + 2] += 1), .2 > b && (h[g + 4] += 1));
      }
    })();
    this.addAttribute("position", new N(l, 3));
    this.addAttribute("normal", new N(l.slice(), 3));
    this.addAttribute("uv", new N(h, 2));
    0 === e ? this.computeVertexNormals() : this.normalizeNormals();
  }
  function bd(g, a) {
    H.call(this);
    this.type = "TetrahedronGeometry";
    this.parameters = {radius:g, detail:a};
    this.fromBufferGeometry(new qc(g, a));
    this.mergeVertices();
  }
  function qc(g, a) {
    Ka.call(this, [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1], [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1], g, a);
    this.type = "TetrahedronBufferGeometry";
    this.parameters = {radius:g, detail:a};
  }
  function cd(g, a) {
    H.call(this);
    this.type = "OctahedronGeometry";
    this.parameters = {radius:g, detail:a};
    this.fromBufferGeometry(new Rb(g, a));
    this.mergeVertices();
  }
  function Rb(g, a) {
    Ka.call(this, [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1], [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2], g, a);
    this.type = "OctahedronBufferGeometry";
    this.parameters = {radius:g, detail:a};
  }
  function dd(g, a) {
    H.call(this);
    this.type = "IcosahedronGeometry";
    this.parameters = {radius:g, detail:a};
    this.fromBufferGeometry(new rc(g, a));
    this.mergeVertices();
  }
  function rc(g, a) {
    var r = (1 + Math.sqrt(5)) / 2;
    Ka.call(this, [-1, r, 0, 1, r, 0, -1, -r, 0, 1, -r, 0, 0, -1, r, 0, 1, r, 0, -1, -r, 0, 1, -r, r, 0, -1, r, 0, 1, -r, 0, -1, -r, 0, 1], [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1], g, a);
    this.type = "IcosahedronBufferGeometry";
    this.parameters = {radius:g, detail:a};
  }
  function ed(g, a) {
    H.call(this);
    this.type = "DodecahedronGeometry";
    this.parameters = {radius:g, detail:a};
    this.fromBufferGeometry(new sc(g, a));
    this.mergeVertices();
  }
  function sc(g, a) {
    var r = (1 + Math.sqrt(5)) / 2, b = 1 / r;
    Ka.call(this, [-1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, 0, -b, -r, 0, -b, r, 0, b, -r, 0, b, r, -b, -r, 0, -b, r, 0, b, -r, 0, b, r, 0, -r, 0, -b, r, 0, -b, -r, 0, b, r, 0, b], [3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8, 17, 8, 10, 17, 10, 6, 8, 0, 16, 8, 16, 2, 8, 2, 10, 0, 12, 1, 0, 1, 18, 0, 18, 16, 6, 10, 2, 6, 2, 13, 6, 13, 15, 2, 16, 18, 2, 18, 3, 2, 3, 13, 18, 1, 9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4, 0, 
    8, 11, 9, 5, 11, 5, 19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19, 4, 17, 1, 12, 14, 1, 14, 5, 1, 5, 9], g, a);
    this.type = "DodecahedronBufferGeometry";
    this.parameters = {radius:g, detail:a};
  }
  function fd(g, a, b, e, d, c) {
    H.call(this);
    this.type = "TubeGeometry";
    this.parameters = {path:g, tubularSegments:a, radius:b, radialSegments:e, closed:d};
    void 0 !== c && console.warn("THREE.TubeGeometry: taper has been removed.");
    g = new Sb(g, a, b, e, d);
    this.tangents = g.tangents;
    this.normals = g.normals;
    this.binormals = g.binormals;
    this.fromBufferGeometry(g);
    this.mergeVertices();
  }
  function Sb(g, a, b, e, c) {
    function r(r) {
      F = g.getPointAt(r / a, F);
      var d = f.normals[r];
      r = f.binormals[r];
      for (m = 0; m <= e; m++) {
        var c = m / e * Math.PI * 2, p = Math.sin(c);
        c = -Math.cos(c);
        h.x = c * d.x + p * r.x;
        h.y = c * d.y + p * r.y;
        h.z = c * d.z + p * r.z;
        h.normalize();
        u.push(h.x, h.y, h.z);
        l.x = F.x + b * h.x;
        l.y = F.y + b * h.y;
        l.z = F.z + b * h.z;
        t.push(l.x, l.y, l.z);
      }
    }
    O.call(this);
    this.type = "TubeBufferGeometry";
    this.parameters = {path:g, tubularSegments:a, radius:b, radialSegments:e, closed:c};
    a = a || 64;
    b = b || 1;
    e = e || 8;
    c = c || !1;
    var f = g.computeFrenetFrames(a, c);
    this.tangents = f.tangents;
    this.normals = f.normals;
    this.binormals = f.binormals;
    var l = new d, h = new d, p = new k, F = new d, n, m, t = [], u = [], q = [], v = [];
    for (n = 0; n < a; n++) {
      r(n);
    }
    r(!1 === c ? a : 0);
    for (n = 0; n <= a; n++) {
      for (m = 0; m <= e; m++) {
        p.x = n / a, p.y = m / e, q.push(p.x, p.y);
      }
    }
    (function() {
      for (m = 1; m <= a; m++) {
        for (n = 1; n <= e; n++) {
          var g = (e + 1) * m + (n - 1), r = (e + 1) * m + n, b = (e + 1) * (m - 1) + n;
          v.push((e + 1) * (m - 1) + (n - 1), g, b);
          v.push(g, r, b);
        }
      }
    })();
    this.setIndex(v);
    this.addAttribute("position", new N(t, 3));
    this.addAttribute("normal", new N(u, 3));
    this.addAttribute("uv", new N(q, 2));
  }
  function gd(g, a, b, e, d, c, f) {
    H.call(this);
    this.type = "TorusKnotGeometry";
    this.parameters = {radius:g, tube:a, tubularSegments:b, radialSegments:e, p:d, q:c};
    void 0 !== f && console.warn("THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.");
    this.fromBufferGeometry(new tc(g, a, b, e, d, c));
    this.mergeVertices();
  }
  function tc(g, a, b, e, c, f) {
    function r(g, a, r, b, e) {
      var d = Math.sin(g);
      a = r / a * g;
      r = Math.cos(a);
      e.x = b * (2 + r) * .5 * Math.cos(g);
      e.y = b * (2 + r) * d * .5;
      e.z = b * Math.sin(a) * .5;
    }
    O.call(this);
    this.type = "TorusKnotBufferGeometry";
    this.parameters = {radius:g, tube:a, tubularSegments:b, radialSegments:e, p:c, q:f};
    g = g || 1;
    a = a || .4;
    b = Math.floor(b) || 64;
    e = Math.floor(e) || 8;
    c = c || 2;
    f = f || 3;
    var l = [], h = [], p = [], F = [], k, n = new d, m = new d, t = new d, u = new d, q = new d, v = new d, T = new d;
    for (k = 0; k <= b; ++k) {
      var w = k / b * c * Math.PI * 2;
      r(w, c, f, g, t);
      r(w + .01, c, f, g, u);
      v.subVectors(u, t);
      T.addVectors(u, t);
      q.crossVectors(v, T);
      T.crossVectors(q, v);
      q.normalize();
      T.normalize();
      for (w = 0; w <= e; ++w) {
        var Y = w / e * Math.PI * 2, z = -a * Math.cos(Y);
        Y = a * Math.sin(Y);
        n.x = t.x + (z * T.x + Y * q.x);
        n.y = t.y + (z * T.y + Y * q.y);
        n.z = t.z + (z * T.z + Y * q.z);
        h.push(n.x, n.y, n.z);
        m.subVectors(n, t).normalize();
        p.push(m.x, m.y, m.z);
        F.push(k / b);
        F.push(w / e);
      }
    }
    for (w = 1; w <= b; w++) {
      for (k = 1; k <= e; k++) {
        g = (e + 1) * w + (k - 1), a = (e + 1) * w + k, c = (e + 1) * (w - 1) + k, l.push((e + 1) * (w - 1) + (k - 1), g, c), l.push(g, a, c);
      }
    }
    this.setIndex(l);
    this.addAttribute("position", new N(h, 3));
    this.addAttribute("normal", new N(p, 3));
    this.addAttribute("uv", new N(F, 2));
  }
  function hd(g, a, b, e, d) {
    H.call(this);
    this.type = "TorusGeometry";
    this.parameters = {radius:g, tube:a, radialSegments:b, tubularSegments:e, arc:d};
    this.fromBufferGeometry(new uc(g, a, b, e, d));
    this.mergeVertices();
  }
  function uc(g, a, b, e, c) {
    O.call(this);
    this.type = "TorusBufferGeometry";
    this.parameters = {radius:g, tube:a, radialSegments:b, tubularSegments:e, arc:c};
    g = g || 1;
    a = a || .4;
    b = Math.floor(b) || 8;
    e = Math.floor(e) || 6;
    c = c || 2 * Math.PI;
    var r = [], f = [], l = [], h = [], p = new d, F = new d, k = new d, n, m;
    for (n = 0; n <= b; n++) {
      for (m = 0; m <= e; m++) {
        var t = m / e * c, u = n / b * Math.PI * 2;
        F.x = (g + a * Math.cos(u)) * Math.cos(t);
        F.y = (g + a * Math.cos(u)) * Math.sin(t);
        F.z = a * Math.sin(u);
        f.push(F.x, F.y, F.z);
        p.x = g * Math.cos(t);
        p.y = g * Math.sin(t);
        k.subVectors(F, p).normalize();
        l.push(k.x, k.y, k.z);
        h.push(m / e);
        h.push(n / b);
      }
    }
    for (n = 1; n <= b; n++) {
      for (m = 1; m <= e; m++) {
        g = (e + 1) * (n - 1) + m - 1, a = (e + 1) * (n - 1) + m, c = (e + 1) * n + m, r.push((e + 1) * n + m - 1, g, c), r.push(g, a, c);
      }
    }
    this.setIndex(r);
    this.addAttribute("position", new N(f, 3));
    this.addAttribute("normal", new N(l, 3));
    this.addAttribute("uv", new N(h, 2));
  }
  function yf(g, a, b, e, d) {
    for (var r, c = 0, f = a, l = b - e; f < b; f += e) {
      c += (g[l] - g[f]) * (g[f + 1] + g[l + 1]), l = f;
    }
    if (d === 0 < c) {
      for (d = a; d < b; d += e) {
        r = zf(d, g[d], g[d + 1], r);
      }
    } else {
      for (d = b - e; d >= a; d -= e) {
        r = zf(d, g[d], g[d + 1], r);
      }
    }
    r && Tb(r, r.next) && (id(r), r = r.next);
    return r;
  }
  function jd(g, a) {
    if (!g) {
      return g;
    }
    a || (a = g);
    do {
      var r = !1;
      if (g.steiner || !Tb(g, g.next) && 0 !== Ga(g.prev, g, g.next)) {
        g = g.next;
      } else {
        id(g);
        g = a = g.prev;
        if (g === g.next) {
          break;
        }
        r = !0;
      }
    } while (r || g !== a);
    return a;
  }
  function kd(g, a, b, e, d, c, f) {
    if (g) {
      if (!f && c) {
        var r = g, l = r;
        do {
          null === l.z && (l.z = ye(l.x, l.y, e, d, c)), l.prevZ = l.prev, l = l.nextZ = l.next;
        } while (l !== r);
        l.prevZ.nextZ = null;
        l.prevZ = null;
        r = l;
        var h, p, F, k, n = 1;
        do {
          l = r;
          var m = r = null;
          for (p = 0; l;) {
            p++;
            var t = l;
            for (h = F = 0; h < n && (F++, t = t.nextZ, t); h++) {
            }
            for (k = n; 0 < F || 0 < k && t;) {
              0 !== F && (0 === k || !t || l.z <= t.z) ? (h = l, l = l.nextZ, F--) : (h = t, t = t.nextZ, k--), m ? m.nextZ = h : r = h, h.prevZ = m, m = h;
            }
            l = t;
          }
          m.nextZ = null;
          n *= 2;
        } while (1 < p);
      }
      for (r = g; g.prev !== g.next;) {
        l = g.prev;
        t = g.next;
        if (c) {
          a: {
            m = g;
            k = e;
            var u = d, q = c;
            p = m.prev;
            F = m;
            n = m.next;
            if (0 <= Ga(p, F, n)) {
              m = !1;
            } else {
              var v = p.x > F.x ? p.x > n.x ? p.x : n.x : F.x > n.x ? F.x : n.x, T = p.y > F.y ? p.y > n.y ? p.y : n.y : F.y > n.y ? F.y : n.y;
              h = ye(p.x < F.x ? p.x < n.x ? p.x : n.x : F.x < n.x ? F.x : n.x, p.y < F.y ? p.y < n.y ? p.y : n.y : F.y < n.y ? F.y : n.y, k, u, q);
              k = ye(v, T, k, u, q);
              for (u = m.nextZ; u && u.z <= k;) {
                if (u !== m.prev && u !== m.next && Sd(p.x, p.y, F.x, F.y, n.x, n.y, u.x, u.y) && 0 <= Ga(u.prev, u, u.next)) {
                  m = !1;
                  break a;
                }
                u = u.nextZ;
              }
              for (u = m.prevZ; u && u.z >= h;) {
                if (u !== m.prev && u !== m.next && Sd(p.x, p.y, F.x, F.y, n.x, n.y, u.x, u.y) && 0 <= Ga(u.prev, u, u.next)) {
                  m = !1;
                  break a;
                }
                u = u.prevZ;
              }
              m = !0;
            }
          }
        } else {
          a: {
            if (m = g, p = m.prev, F = m, n = m.next, 0 <= Ga(p, F, n)) {
              m = !1;
            } else {
              for (h = m.next.next; h !== m.prev;) {
                if (Sd(p.x, p.y, F.x, F.y, n.x, n.y, h.x, h.y) && 0 <= Ga(h.prev, h, h.next)) {
                  m = !1;
                  break a;
                }
                h = h.next;
              }
              m = !0;
            }
          }
        }
        if (m) {
          a.push(l.i / b), a.push(g.i / b), a.push(t.i / b), id(g), r = g = t.next;
        } else {
          if (g = t, g === r) {
            if (!f) {
              kd(jd(g), a, b, e, d, c, 1);
            } else {
              if (1 === f) {
                f = a;
                r = b;
                l = g;
                do {
                  t = l.prev, m = l.next.next, !Tb(t, m) && Af(t, l, l.next, m) && ld(t, m) && ld(m, t) && (f.push(t.i / r), f.push(l.i / r), f.push(m.i / r), id(l), id(l.next), l = g = m), l = l.next;
                } while (l !== g);
                g = l;
                kd(g, a, b, e, d, c, 2);
              } else {
                if (2 === f) {
                  a: {
                    f = g;
                    do {
                      for (r = f.next.next; r !== f.prev;) {
                        if (l = f.i !== r.i) {
                          l = f;
                          t = r;
                          if (m = l.next.i !== t.i && l.prev.i !== t.i) {
                            b: {
                              m = l;
                              do {
                                if (m.i !== l.i && m.next.i !== l.i && m.i !== t.i && m.next.i !== t.i && Af(m, m.next, l, t)) {
                                  m = !0;
                                  break b;
                                }
                                m = m.next;
                              } while (m !== l);
                              m = !1;
                            }
                            m = !m;
                          }
                          if (m = m && ld(l, t) && ld(t, l)) {
                            m = l;
                            p = !1;
                            F = (l.x + t.x) / 2;
                            t = (l.y + t.y) / 2;
                            do {
                              m.y > t !== m.next.y > t && m.next.y !== m.y && F < (m.next.x - m.x) * (t - m.y) / (m.next.y - m.y) + m.x && (p = !p), m = m.next;
                            } while (m !== l);
                            m = p;
                          }
                          l = m;
                        }
                        if (l) {
                          g = Bf(f, r);
                          f = jd(f, f.next);
                          g = jd(g, g.next);
                          kd(f, a, b, e, d, c);
                          kd(g, a, b, e, d, c);
                          break a;
                        }
                        r = r.next;
                      }
                      f = f.next;
                    } while (f !== g);
                  }
                }
              }
            }
            break;
          }
        }
      }
    }
  }
  function wg(g, a) {
    return g.x - a.x;
  }
  function xg(g, a) {
    var r = a, b = g.x, e = g.y, d = -Infinity;
    do {
      if (e <= r.y && e >= r.next.y && r.next.y !== r.y) {
        var c = r.x + (e - r.y) * (r.next.x - r.x) / (r.next.y - r.y);
        if (c <= b && c > d) {
          d = c;
          if (c === b) {
            if (e === r.y) {
              return r;
            }
            if (e === r.next.y) {
              return r.next;
            }
          }
          var l = r.x < r.next.x ? r : r.next;
        }
      }
      r = r.next;
    } while (r !== a);
    if (!l) {
      return null;
    }
    if (b === d) {
      return l.prev;
    }
    a = l;
    c = l.x;
    var f = l.y, h = Infinity;
    for (r = l.next; r !== a;) {
      if (b >= r.x && r.x >= c && b !== r.x && Sd(e < f ? b : d, e, c, f, e < f ? d : b, e, r.x, r.y)) {
        var p = Math.abs(e - r.y) / (b - r.x);
        (p < h || p === h && r.x > l.x) && ld(r, g) && (l = r, h = p);
      }
      r = r.next;
    }
    return l;
  }
  function ye(g, a, b, e, d) {
    g = 32767 * (g - b) * d;
    a = 32767 * (a - e) * d;
    g = (g | g << 8) & 16711935;
    g = (g | g << 4) & 252645135;
    g = (g | g << 2) & 858993459;
    a = (a | a << 8) & 16711935;
    a = (a | a << 4) & 252645135;
    a = (a | a << 2) & 858993459;
    return (g | g << 1) & 1431655765 | ((a | a << 1) & 1431655765) << 1;
  }
  function yg(g) {
    var a = g, b = g;
    do {
      a.x < b.x && (b = a), a = a.next;
    } while (a !== g);
    return b;
  }
  function Sd(g, a, b, e, d, c, l, f) {
    return 0 <= (d - l) * (a - f) - (g - l) * (c - f) && 0 <= (g - l) * (e - f) - (b - l) * (a - f) && 0 <= (b - l) * (c - f) - (d - l) * (e - f);
  }
  function Ga(g, a, b) {
    return (a.y - g.y) * (b.x - a.x) - (a.x - g.x) * (b.y - a.y);
  }
  function Tb(g, a) {
    return g.x === a.x && g.y === a.y;
  }
  function Af(g, a, b, e) {
    return Tb(g, a) && Tb(b, e) || Tb(g, e) && Tb(b, a) ? !0 : 0 < Ga(g, a, b) !== 0 < Ga(g, a, e) && 0 < Ga(b, e, g) !== 0 < Ga(b, e, a);
  }
  function ld(g, a) {
    return 0 > Ga(g.prev, g, g.next) ? 0 <= Ga(g, a, g.next) && 0 <= Ga(g, g.prev, a) : 0 > Ga(g, a, g.prev) || 0 > Ga(g, g.next, a);
  }
  function Bf(g, a) {
    var r = new ze(g.i, g.x, g.y), b = new ze(a.i, a.x, a.y), e = g.next, d = a.prev;
    g.next = a;
    a.prev = g;
    r.next = e;
    e.prev = r;
    b.next = r;
    r.prev = b;
    d.next = b;
    b.prev = d;
    return b;
  }
  function zf(g, a, b, e) {
    g = new ze(g, a, b);
    e ? (g.next = e.next, g.prev = e, e.next.prev = g, e.next = g) : (g.prev = g, g.next = g);
    return g;
  }
  function id(g) {
    g.next.prev = g.prev;
    g.prev.next = g.next;
    g.prevZ && (g.prevZ.nextZ = g.nextZ);
    g.nextZ && (g.nextZ.prevZ = g.prevZ);
  }
  function ze(g, a, b) {
    this.i = g;
    this.x = a;
    this.y = b;
    this.nextZ = this.prevZ = this.z = this.next = this.prev = null;
    this.steiner = !1;
  }
  function Cf(g) {
    var a = g.length;
    2 < a && g[a - 1].equals(g[0]) && g.pop();
  }
  function Df(g, a) {
    for (var r = 0; r < a.length; r++) {
      g.push(a[r].x), g.push(a[r].y);
    }
  }
  function Ub(g, a) {
    H.call(this);
    this.type = "ExtrudeGeometry";
    this.parameters = {shapes:g, options:a};
    this.fromBufferGeometry(new jb(g, a));
    this.mergeVertices();
  }
  function jb(g, a) {
    function r(g) {
      function r(g, a, r) {
        a || console.error("THREE.ExtrudeGeometry: vec does not exist");
        return a.clone().multiplyScalar(r).add(g);
      }
      function l(g, a, r) {
        var b = g.x - a.x, e = g.y - a.y, d = r.x - g.x, c = r.y - g.y, l = b * b + e * e;
        if (Math.abs(b * c - e * d) > Number.EPSILON) {
          var f = Math.sqrt(l), h = Math.sqrt(d * d + c * c);
          l = a.x - e / f;
          a = a.y + b / f;
          c = ((r.x - c / h - l) * c - (r.y + d / h - a) * d) / (b * c - e * d);
          d = l + b * c - g.x;
          b = a + e * c - g.y;
          e = d * d + b * b;
          if (2 >= e) {
            return new k(d, b);
          }
          e = Math.sqrt(e / 2);
        } else {
          g = !1, b > Number.EPSILON ? d > Number.EPSILON && (g = !0) : b < -Number.EPSILON ? d < -Number.EPSILON && (g = !0) : Math.sign(e) === Math.sign(c) && (g = !0), g ? (d = -e, e = Math.sqrt(l)) : (d = b, b = e, e = Math.sqrt(l / 2));
        }
        return new k(d / e, b / e);
      }
      function f(g, a) {
        for (I = g.length; 0 <= --I;) {
          var r = I, d = I - 1;
          0 > d && (d = g.length - 1);
          var c, l = u + 2 * Y;
          for (c = 0; c < l; c++) {
            var f = O * c, h = O * (c + 1), p = a + d + f, k = a + d + h;
            h = a + r + h;
            F(a + r + f);
            F(p);
            F(h);
            F(p);
            F(k);
            F(h);
            f = e.length / 3;
            f = y.generateSideWallUV(b, e, f - 6, f - 3, f - 2, f - 1);
            m(f[0]);
            m(f[1]);
            m(f[3]);
            m(f[1]);
            m(f[2]);
            m(f[3]);
          }
        }
      }
      function h(g, a, r) {
        n.push(g);
        n.push(a);
        n.push(r);
      }
      function p(g, a, r) {
        F(g);
        F(a);
        F(r);
        g = e.length / 3;
        g = y.generateTopUV(b, e, g - 3, g - 2, g - 1);
        m(g[0]);
        m(g[1]);
        m(g[2]);
      }
      function F(g) {
        e.push(n[3 * g]);
        e.push(n[3 * g + 1]);
        e.push(n[3 * g + 2]);
      }
      function m(g) {
        c.push(g.x);
        c.push(g.y);
      }
      var n = [], t = void 0 !== a.curveSegments ? a.curveSegments : 12, u = void 0 !== a.steps ? a.steps : 1, q = void 0 !== a.depth ? a.depth : 100, v = void 0 !== a.bevelEnabled ? a.bevelEnabled : !0, T = void 0 !== a.bevelThickness ? a.bevelThickness : 6, w = void 0 !== a.bevelSize ? a.bevelSize : T - 2, Y = void 0 !== a.bevelSegments ? a.bevelSegments : 3, z = a.extrudePath, y = void 0 !== a.UVGenerator ? a.UVGenerator : zg;
      void 0 !== a.amount && (console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth."), q = a.amount);
      var U = !1;
      if (z) {
        var x = z.getSpacedPoints(u);
        U = !0;
        v = !1;
        var Ba = z.computeFrenetFrames(u, !1), D = new d, C = new d, B = new d;
      }
      v || (w = T = Y = 0);
      var E;
      t = g.extractPoints(t);
      g = t.shape;
      var sa = t.holes;
      if (!vb.isClockWise(g)) {
        g = g.reverse();
        var A = 0;
        for (E = sa.length; A < E; A++) {
          var G = sa[A];
          vb.isClockWise(G) && (sa[A] = G.reverse());
        }
      }
      var M = vb.triangulateShape(g, sa), Ia = g;
      A = 0;
      for (E = sa.length; A < E; A++) {
        G = sa[A], g = g.concat(G);
      }
      var H, O = g.length, P, J = M.length;
      t = [];
      var I = 0, V = Ia.length, N = V - 1;
      for (H = I + 1; I < V; I++, N++, H++) {
        N === V && (N = 0), H === V && (H = 0), t[I] = l(Ia[I], Ia[N], Ia[H]);
      }
      z = [];
      var K = t.concat();
      A = 0;
      for (E = sa.length; A < E; A++) {
        G = sa[A];
        var Q = [];
        I = 0;
        V = G.length;
        N = V - 1;
        for (H = I + 1; I < V; I++, N++, H++) {
          N === V && (N = 0), H === V && (H = 0), Q[I] = l(G[I], G[N], G[H]);
        }
        z.push(Q);
        K = K.concat(Q);
      }
      for (N = 0; N < Y; N++) {
        V = N / Y;
        var L = T * Math.cos(V * Math.PI / 2);
        H = w * Math.sin(V * Math.PI / 2);
        I = 0;
        for (V = Ia.length; I < V; I++) {
          var S = r(Ia[I], t[I], H);
          h(S.x, S.y, -L);
        }
        A = 0;
        for (E = sa.length; A < E; A++) {
          for (G = sa[A], Q = z[A], I = 0, V = G.length; I < V; I++) {
            S = r(G[I], Q[I], H), h(S.x, S.y, -L);
          }
        }
      }
      H = w;
      for (I = 0; I < O; I++) {
        S = v ? r(g[I], K[I], H) : g[I], U ? (C.copy(Ba.normals[0]).multiplyScalar(S.x), D.copy(Ba.binormals[0]).multiplyScalar(S.y), B.copy(x[0]).add(C).add(D), h(B.x, B.y, B.z)) : h(S.x, S.y, 0);
      }
      for (V = 1; V <= u; V++) {
        for (I = 0; I < O; I++) {
          S = v ? r(g[I], K[I], H) : g[I], U ? (C.copy(Ba.normals[V]).multiplyScalar(S.x), D.copy(Ba.binormals[V]).multiplyScalar(S.y), B.copy(x[V]).add(C).add(D), h(B.x, B.y, B.z)) : h(S.x, S.y, q / u * V);
        }
      }
      for (N = Y - 1; 0 <= N; N--) {
        V = N / Y;
        L = T * Math.cos(V * Math.PI / 2);
        H = w * Math.sin(V * Math.PI / 2);
        I = 0;
        for (V = Ia.length; I < V; I++) {
          S = r(Ia[I], t[I], H), h(S.x, S.y, q + L);
        }
        A = 0;
        for (E = sa.length; A < E; A++) {
          for (G = sa[A], Q = z[A], I = 0, V = G.length; I < V; I++) {
            S = r(G[I], Q[I], H), U ? h(S.x, S.y + x[u - 1].y, x[u - 1].x + L) : h(S.x, S.y, q + L);
          }
        }
      }
      (function() {
        var g = e.length / 3;
        if (v) {
          var a = 0 * O;
          for (I = 0; I < J; I++) {
            P = M[I], p(P[2] + a, P[1] + a, P[0] + a);
          }
          a = O * (u + 2 * Y);
          for (I = 0; I < J; I++) {
            P = M[I], p(P[0] + a, P[1] + a, P[2] + a);
          }
        } else {
          for (I = 0; I < J; I++) {
            P = M[I], p(P[2], P[1], P[0]);
          }
          for (I = 0; I < J; I++) {
            P = M[I], p(P[0] + O * u, P[1] + O * u, P[2] + O * u);
          }
        }
        b.addGroup(g, e.length / 3 - g, 0);
      })();
      (function() {
        var g = e.length / 3, a = 0;
        f(Ia, a);
        a += Ia.length;
        A = 0;
        for (E = sa.length; A < E; A++) {
          G = sa[A], f(G, a), a += G.length;
        }
        b.addGroup(g, e.length / 3 - g, 1);
      })();
    }
    O.call(this);
    this.type = "ExtrudeBufferGeometry";
    this.parameters = {shapes:g, options:a};
    g = Array.isArray(g) ? g : [g];
    for (var b = this, e = [], c = [], l = 0, f = g.length; l < f; l++) {
      r(g[l]);
    }
    this.addAttribute("position", new N(e, 3));
    this.addAttribute("uv", new N(c, 2));
    this.computeVertexNormals();
  }
  function Ef(g, a, b) {
    b.shapes = [];
    if (Array.isArray(g)) {
      for (var r = 0, e = g.length; r < e; r++) {
        b.shapes.push(g[r].uuid);
      }
    } else {
      b.shapes.push(g.uuid);
    }
    void 0 !== a.extrudePath && (b.options.extrudePath = a.extrudePath.toJSON());
    return b;
  }
  function md(g, a) {
    H.call(this);
    this.type = "TextGeometry";
    this.parameters = {text:g, parameters:a};
    this.fromBufferGeometry(new vc(g, a));
    this.mergeVertices();
  }
  function vc(g, a) {
    a = a || {};
    var r = a.font;
    if (!r || !r.isFont) {
      return console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font."), new H;
    }
    g = r.generateShapes(g, a.size);
    a.depth = void 0 !== a.height ? a.height : 50;
    void 0 === a.bevelThickness && (a.bevelThickness = 10);
    void 0 === a.bevelSize && (a.bevelSize = 8);
    void 0 === a.bevelEnabled && (a.bevelEnabled = !1);
    jb.call(this, g, a);
    this.type = "TextBufferGeometry";
  }
  function nd(g, a, b, e, d, c, l) {
    H.call(this);
    this.type = "SphereGeometry";
    this.parameters = {radius:g, widthSegments:a, heightSegments:b, phiStart:e, phiLength:d, thetaStart:c, thetaLength:l};
    this.fromBufferGeometry(new Vb(g, a, b, e, d, c, l));
    this.mergeVertices();
  }
  function Vb(g, a, b, e, c, l, f) {
    O.call(this);
    this.type = "SphereBufferGeometry";
    this.parameters = {radius:g, widthSegments:a, heightSegments:b, phiStart:e, phiLength:c, thetaStart:l, thetaLength:f};
    g = g || 1;
    a = Math.max(3, Math.floor(a) || 8);
    b = Math.max(2, Math.floor(b) || 6);
    e = void 0 !== e ? e : 0;
    c = void 0 !== c ? c : 2 * Math.PI;
    l = void 0 !== l ? l : 0;
    f = void 0 !== f ? f : Math.PI;
    var r = l + f, h, p, k = 0, F = [], m = new d, n = new d, t = [], u = [], q = [], v = [];
    for (p = 0; p <= b; p++) {
      var T = [], w = p / b;
      for (h = 0; h <= a; h++) {
        var Y = h / a;
        m.x = -g * Math.cos(e + Y * c) * Math.sin(l + w * f);
        m.y = g * Math.cos(l + w * f);
        m.z = g * Math.sin(e + Y * c) * Math.sin(l + w * f);
        u.push(m.x, m.y, m.z);
        n.set(m.x, m.y, m.z).normalize();
        q.push(n.x, n.y, n.z);
        v.push(Y, 1 - w);
        T.push(k++);
      }
      F.push(T);
    }
    for (p = 0; p < b; p++) {
      for (h = 0; h < a; h++) {
        g = F[p][h + 1], e = F[p][h], c = F[p + 1][h], f = F[p + 1][h + 1], (0 !== p || 0 < l) && t.push(g, e, f), (p !== b - 1 || r < Math.PI) && t.push(e, c, f);
      }
    }
    this.setIndex(t);
    this.addAttribute("position", new N(u, 3));
    this.addAttribute("normal", new N(q, 3));
    this.addAttribute("uv", new N(v, 2));
  }
  function od(g, a, b, e, d, c) {
    H.call(this);
    this.type = "RingGeometry";
    this.parameters = {innerRadius:g, outerRadius:a, thetaSegments:b, phiSegments:e, thetaStart:d, thetaLength:c};
    this.fromBufferGeometry(new wc(g, a, b, e, d, c));
    this.mergeVertices();
  }
  function wc(g, a, b, e, c, l) {
    O.call(this);
    this.type = "RingBufferGeometry";
    this.parameters = {innerRadius:g, outerRadius:a, thetaSegments:b, phiSegments:e, thetaStart:c, thetaLength:l};
    g = g || .5;
    a = a || 1;
    c = void 0 !== c ? c : 0;
    l = void 0 !== l ? l : 2 * Math.PI;
    b = void 0 !== b ? Math.max(3, b) : 8;
    e = void 0 !== e ? Math.max(1, e) : 1;
    var r = [], f = [], h = [], p = [], F = g, m = (a - g) / e, n = new d, t = new k, u, q;
    for (u = 0; u <= e; u++) {
      for (q = 0; q <= b; q++) {
        g = c + q / b * l, n.x = F * Math.cos(g), n.y = F * Math.sin(g), f.push(n.x, n.y, n.z), h.push(0, 0, 1), t.x = (n.x / a + 1) / 2, t.y = (n.y / a + 1) / 2, p.push(t.x, t.y);
      }
      F += m;
    }
    for (u = 0; u < e; u++) {
      for (a = u * (b + 1), q = 0; q < b; q++) {
        g = q + a, c = g + b + 1, l = g + b + 2, F = g + 1, r.push(g, c, F), r.push(c, l, F);
      }
    }
    this.setIndex(r);
    this.addAttribute("position", new N(f, 3));
    this.addAttribute("normal", new N(h, 3));
    this.addAttribute("uv", new N(p, 2));
  }
  function pd(g, a, b, e) {
    H.call(this);
    this.type = "LatheGeometry";
    this.parameters = {points:g, segments:a, phiStart:b, phiLength:e};
    this.fromBufferGeometry(new xc(g, a, b, e));
    this.mergeVertices();
  }
  function xc(g, a, b, e) {
    O.call(this);
    this.type = "LatheBufferGeometry";
    this.parameters = {points:g, segments:a, phiStart:b, phiLength:e};
    a = Math.floor(a) || 12;
    b = b || 0;
    e = e || 2 * Math.PI;
    e = ia.clamp(e, 0, 2 * Math.PI);
    var r = [], c = [], l = [], f = 1 / a, h = new d, p = new k, F;
    for (F = 0; F <= a; F++) {
      var m = b + F * f * e, n = Math.sin(m), t = Math.cos(m);
      for (m = 0; m <= g.length - 1; m++) {
        h.x = g[m].x * n, h.y = g[m].y, h.z = g[m].x * t, c.push(h.x, h.y, h.z), p.x = F / a, p.y = m / (g.length - 1), l.push(p.x, p.y);
      }
    }
    for (F = 0; F < a; F++) {
      for (m = 0; m < g.length - 1; m++) {
        b = m + F * g.length, f = b + g.length, h = b + g.length + 1, p = b + 1, r.push(b, f, p), r.push(f, h, p);
      }
    }
    this.setIndex(r);
    this.addAttribute("position", new N(c, 3));
    this.addAttribute("uv", new N(l, 2));
    this.computeVertexNormals();
    if (e === 2 * Math.PI) {
      for (e = this.attributes.normal.array, r = new d, c = new d, l = new d, b = a * g.length * 3, m = F = 0; F < g.length; F++, m += 3) {
        r.x = e[m + 0], r.y = e[m + 1], r.z = e[m + 2], c.x = e[b + m + 0], c.y = e[b + m + 1], c.z = e[b + m + 2], l.addVectors(r, c).normalize(), e[m + 0] = e[b + m + 0] = l.x, e[m + 1] = e[b + m + 1] = l.y, e[m + 2] = e[b + m + 2] = l.z;
      }
    }
  }
  function Wb(g, a) {
    H.call(this);
    this.type = "ShapeGeometry";
    "object" === typeof a && (console.warn("THREE.ShapeGeometry: Options parameter has been removed."), a = a.curveSegments);
    this.parameters = {shapes:g, curveSegments:a};
    this.fromBufferGeometry(new Xb(g, a));
    this.mergeVertices();
  }
  function Xb(g, a) {
    function r(g) {
      var r, l = e.length / 3;
      g = g.extractPoints(a);
      var h = g.shape, p = g.holes;
      !1 === vb.isClockWise(h) && (h = h.reverse());
      g = 0;
      for (r = p.length; g < r; g++) {
        var k = p[g];
        !0 === vb.isClockWise(k) && (p[g] = k.reverse());
      }
      var F = vb.triangulateShape(h, p);
      g = 0;
      for (r = p.length; g < r; g++) {
        k = p[g], h = h.concat(k);
      }
      g = 0;
      for (r = h.length; g < r; g++) {
        k = h[g], e.push(k.x, k.y, 0), d.push(0, 0, 1), c.push(k.x, k.y);
      }
      g = 0;
      for (r = F.length; g < r; g++) {
        h = F[g], b.push(h[0] + l, h[1] + l, h[2] + l), f += 3;
      }
    }
    O.call(this);
    this.type = "ShapeBufferGeometry";
    this.parameters = {shapes:g, curveSegments:a};
    a = a || 12;
    var b = [], e = [], d = [], c = [], l = 0, f = 0;
    if (!1 === Array.isArray(g)) {
      r(g);
    } else {
      for (var h = 0; h < g.length; h++) {
        r(g[h]), this.addGroup(l, f, h), l += f, f = 0;
      }
    }
    this.setIndex(b);
    this.addAttribute("position", new N(e, 3));
    this.addAttribute("normal", new N(d, 3));
    this.addAttribute("uv", new N(c, 2));
  }
  function Ff(g, a) {
    a.shapes = [];
    if (Array.isArray(g)) {
      for (var r = 0, b = g.length; r < b; r++) {
        a.shapes.push(g[r].uuid);
      }
    } else {
      a.shapes.push(g.uuid);
    }
    return a;
  }
  function yc(g, a) {
    O.call(this);
    this.type = "EdgesGeometry";
    this.parameters = {thresholdAngle:a};
    var r = [];
    a = Math.cos(ia.DEG2RAD * (void 0 !== a ? a : 1));
    var b = [0, 0], e = {}, d = ["a", "b", "c"];
    if (g.isBufferGeometry) {
      var c = new H;
      c.fromBufferGeometry(g);
    } else {
      c = g.clone();
    }
    c.mergeVertices();
    c.computeFaceNormals();
    g = c.vertices;
    c = c.faces;
    for (var l = 0, f = c.length; l < f; l++) {
      for (var h = c[l], p = 0; 3 > p; p++) {
        var k = h[d[p]], m = h[d[(p + 1) % 3]];
        b[0] = Math.min(k, m);
        b[1] = Math.max(k, m);
        k = b[0] + "," + b[1];
        void 0 === e[k] ? e[k] = {index1:b[0], index2:b[1], face1:l, face2:void 0} : e[k].face2 = l;
      }
    }
    for (k in e) {
      if (b = e[k], void 0 === b.face2 || c[b.face1].normal.dot(c[b.face2].normal) <= a) {
        d = g[b.index1], r.push(d.x, d.y, d.z), d = g[b.index2], r.push(d.x, d.y, d.z);
      }
    }
    this.addAttribute("position", new N(r, 3));
  }
  function Yb(g, a, b, e, d, c, l, f) {
    H.call(this);
    this.type = "CylinderGeometry";
    this.parameters = {radiusTop:g, radiusBottom:a, height:b, radialSegments:e, heightSegments:d, openEnded:c, thetaStart:l, thetaLength:f};
    this.fromBufferGeometry(new wb(g, a, b, e, d, c, l, f));
    this.mergeVertices();
  }
  function wb(g, a, b, e, c, l, f, h) {
    function r(r) {
      var b, c = new k, l = new d, q = 0, w = !0 === r ? g : a, z = !0 === r ? 1 : -1, Y = u;
      for (b = 1; b <= e; b++) {
        m.push(0, v * z, 0), n.push(0, z, 0), t.push(.5, .5), u++;
      }
      var y = u;
      for (b = 0; b <= e; b++) {
        var x = b / e * h + f, U = Math.cos(x);
        x = Math.sin(x);
        l.x = w * x;
        l.y = v * z;
        l.z = w * U;
        m.push(l.x, l.y, l.z);
        n.push(0, z, 0);
        c.x = .5 * U + .5;
        c.y = .5 * x * z + .5;
        t.push(c.x, c.y);
        u++;
      }
      for (b = 0; b < e; b++) {
        c = Y + b, l = y + b, !0 === r ? F.push(l, l + 1, c) : F.push(l + 1, l, c), q += 3;
      }
      p.addGroup(T, q, !0 === r ? 1 : 2);
      T += q;
    }
    O.call(this);
    this.type = "CylinderBufferGeometry";
    this.parameters = {radiusTop:g, radiusBottom:a, height:b, radialSegments:e, heightSegments:c, openEnded:l, thetaStart:f, thetaLength:h};
    var p = this;
    g = void 0 !== g ? g : 1;
    a = void 0 !== a ? a : 1;
    b = b || 1;
    e = Math.floor(e) || 8;
    c = Math.floor(c) || 1;
    l = void 0 !== l ? l : !1;
    f = void 0 !== f ? f : 0;
    h = void 0 !== h ? h : 2 * Math.PI;
    var F = [], m = [], n = [], t = [], u = 0, q = [], v = b / 2, T = 0;
    (function() {
      var r, l, k = new d, w = new d, z = 0, Y = (a - g) / b;
      for (l = 0; l <= c; l++) {
        var y = [], x = l / c, U = x * (a - g) + g;
        for (r = 0; r <= e; r++) {
          var Ba = r / e, D = Ba * h + f, C = Math.sin(D);
          D = Math.cos(D);
          w.x = U * C;
          w.y = -x * b + v;
          w.z = U * D;
          m.push(w.x, w.y, w.z);
          k.set(C, Y, D).normalize();
          n.push(k.x, k.y, k.z);
          t.push(Ba, 1 - x);
          y.push(u++);
        }
        q.push(y);
      }
      for (r = 0; r < e; r++) {
        for (l = 0; l < c; l++) {
          k = q[l + 1][r], w = q[l + 1][r + 1], Y = q[l][r + 1], F.push(q[l][r], k, Y), F.push(k, w, Y), z += 6;
        }
      }
      p.addGroup(T, z, 0);
      T += z;
    })();
    !1 === l && (0 < g && r(!0), 0 < a && r(!1));
    this.setIndex(F);
    this.addAttribute("position", new N(m, 3));
    this.addAttribute("normal", new N(n, 3));
    this.addAttribute("uv", new N(t, 2));
  }
  function qd(g, a, b, e, c, d, l) {
    Yb.call(this, 0, g, a, b, e, c, d, l);
    this.type = "ConeGeometry";
    this.parameters = {radius:g, height:a, radialSegments:b, heightSegments:e, openEnded:c, thetaStart:d, thetaLength:l};
  }
  function rd(g, a, b, e, c, d, l) {
    wb.call(this, 0, g, a, b, e, c, d, l);
    this.type = "ConeBufferGeometry";
    this.parameters = {radius:g, height:a, radialSegments:b, heightSegments:e, openEnded:c, thetaStart:d, thetaLength:l};
  }
  function sd(g, a, b, e) {
    H.call(this);
    this.type = "CircleGeometry";
    this.parameters = {radius:g, segments:a, thetaStart:b, thetaLength:e};
    this.fromBufferGeometry(new zc(g, a, b, e));
    this.mergeVertices();
  }
  function zc(g, a, b, e) {
    O.call(this);
    this.type = "CircleBufferGeometry";
    this.parameters = {radius:g, segments:a, thetaStart:b, thetaLength:e};
    g = g || 1;
    a = void 0 !== a ? Math.max(3, a) : 8;
    b = void 0 !== b ? b : 0;
    e = void 0 !== e ? e : 2 * Math.PI;
    var r = [], c = [], l = [], f = [], h, p = new d, F = new k;
    c.push(0, 0, 0);
    l.push(0, 0, 1);
    f.push(.5, .5);
    var m = 0;
    for (h = 3; m <= a; m++, h += 3) {
      var n = b + m / a * e;
      p.x = g * Math.cos(n);
      p.y = g * Math.sin(n);
      c.push(p.x, p.y, p.z);
      l.push(0, 0, 1);
      F.x = (c[h] / g + 1) / 2;
      F.y = (c[h + 1] / g + 1) / 2;
      f.push(F.x, F.y);
    }
    for (h = 1; h <= a; h++) {
      r.push(h, h + 1, 0);
    }
    this.setIndex(r);
    this.addAttribute("position", new N(c, 3));
    this.addAttribute("normal", new N(l, 3));
    this.addAttribute("uv", new N(f, 2));
  }
  function Zb(g) {
    X.call(this);
    this.type = "ShadowMaterial";
    this.color = new z(0);
    this.transparent = !0;
    this.setValues(g);
  }
  function Ac(g) {
    fa.call(this, g);
    this.type = "RawShaderMaterial";
  }
  function kb(g) {
    X.call(this);
    this.defines = {STANDARD:""};
    this.type = "MeshStandardMaterial";
    this.color = new z(16777215);
    this.metalness = this.roughness = .5;
    this.lightMap = this.map = null;
    this.lightMapIntensity = 1;
    this.aoMap = null;
    this.aoMapIntensity = 1;
    this.emissive = new z(0);
    this.emissiveIntensity = 1;
    this.bumpMap = this.emissiveMap = null;
    this.bumpScale = 1;
    this.normalMap = null;
    this.normalMapType = 0;
    this.normalScale = new k(1, 1);
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.envMap = this.alphaMap = this.metalnessMap = this.roughnessMap = null;
    this.envMapIntensity = 1;
    this.refractionRatio = .98;
    this.wireframe = !1;
    this.wireframeLinewidth = 1;
    this.wireframeLinejoin = this.wireframeLinecap = "round";
    this.morphNormals = this.morphTargets = this.skinning = !1;
    this.setValues(g);
  }
  function $b(g) {
    kb.call(this);
    this.defines = {PHYSICAL:""};
    this.type = "MeshPhysicalMaterial";
    this.reflectivity = .5;
    this.clearCoatRoughness = this.clearCoat = 0;
    this.setValues(g);
  }
  function Xa(g) {
    X.call(this);
    this.type = "MeshPhongMaterial";
    this.color = new z(16777215);
    this.specular = new z(1118481);
    this.shininess = 30;
    this.lightMap = this.map = null;
    this.lightMapIntensity = 1;
    this.aoMap = null;
    this.aoMapIntensity = 1;
    this.emissive = new z(0);
    this.emissiveIntensity = 1;
    this.bumpMap = this.emissiveMap = null;
    this.bumpScale = 1;
    this.normalMap = null;
    this.normalMapType = 0;
    this.normalScale = new k(1, 1);
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.envMap = this.alphaMap = this.specularMap = null;
    this.combine = 0;
    this.reflectivity = 1;
    this.refractionRatio = .98;
    this.wireframe = !1;
    this.wireframeLinewidth = 1;
    this.wireframeLinejoin = this.wireframeLinecap = "round";
    this.morphNormals = this.morphTargets = this.skinning = !1;
    this.setValues(g);
  }
  function ac(g) {
    Xa.call(this);
    this.defines = {TOON:""};
    this.type = "MeshToonMaterial";
    this.gradientMap = null;
    this.setValues(g);
  }
  function bc(g) {
    X.call(this);
    this.type = "MeshNormalMaterial";
    this.bumpMap = null;
    this.bumpScale = 1;
    this.normalMap = null;
    this.normalMapType = 0;
    this.normalScale = new k(1, 1);
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.wireframe = !1;
    this.wireframeLinewidth = 1;
    this.morphNormals = this.morphTargets = this.skinning = this.lights = this.fog = !1;
    this.setValues(g);
  }
  function cc(g) {
    X.call(this);
    this.type = "MeshLambertMaterial";
    this.color = new z(16777215);
    this.lightMap = this.map = null;
    this.lightMapIntensity = 1;
    this.aoMap = null;
    this.aoMapIntensity = 1;
    this.emissive = new z(0);
    this.emissiveIntensity = 1;
    this.envMap = this.alphaMap = this.specularMap = this.emissiveMap = null;
    this.combine = 0;
    this.reflectivity = 1;
    this.refractionRatio = .98;
    this.wireframe = !1;
    this.wireframeLinewidth = 1;
    this.wireframeLinejoin = this.wireframeLinecap = "round";
    this.morphNormals = this.morphTargets = this.skinning = !1;
    this.setValues(g);
  }
  function dc(g) {
    X.call(this);
    this.defines = {MATCAP:""};
    this.type = "MeshMatcapMaterial";
    this.color = new z(16777215);
    this.bumpMap = this.map = this.matcap = null;
    this.bumpScale = 1;
    this.normalMap = null;
    this.normalMapType = 0;
    this.normalScale = new k(1, 1);
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.alphaMap = null;
    this.lights = this.morphNormals = this.morphTargets = this.skinning = !1;
    this.setValues(g);
  }
  function ec(g) {
    pa.call(this);
    this.type = "LineDashedMaterial";
    this.scale = 1;
    this.dashSize = 3;
    this.gapSize = 1;
    this.setValues(g);
  }
  function Oa(g, a, b, e) {
    this.parameterPositions = g;
    this._cachedIndex = 0;
    this.resultBuffer = void 0 !== e ? e : new a.constructor(b);
    this.sampleValues = a;
    this.valueSize = b;
  }
  function Td(g, a, b, e) {
    Oa.call(this, g, a, b, e);
    this._offsetNext = this._weightNext = this._offsetPrev = this._weightPrev = -0;
  }
  function td(g, a, b, e) {
    Oa.call(this, g, a, b, e);
  }
  function Ud(g, a, b, e) {
    Oa.call(this, g, a, b, e);
  }
  function Da(g, a, b, e) {
    if (void 0 === g) {
      throw Error("THREE.KeyframeTrack: track name is undefined");
    }
    if (void 0 === a || 0 === a.length) {
      throw Error("THREE.KeyframeTrack: no keyframes in track named " + g);
    }
    this.name = g;
    this.times = xa.convertArray(a, this.TimeBufferType);
    this.values = xa.convertArray(b, this.ValueBufferType);
    this.setInterpolation(e || this.DefaultInterpolation);
  }
  function Vd(g, a, b) {
    Da.call(this, g, a, b);
  }
  function Wd(g, a, b, e) {
    Da.call(this, g, a, b, e);
  }
  function Bc(g, a, b, e) {
    Da.call(this, g, a, b, e);
  }
  function Xd(g, a, b, e) {
    Oa.call(this, g, a, b, e);
  }
  function ud(g, a, b, e) {
    Da.call(this, g, a, b, e);
  }
  function Yd(g, a, b, e) {
    Da.call(this, g, a, b, e);
  }
  function Cc(g, a, b, e) {
    Da.call(this, g, a, b, e);
  }
  function Sa(g, a, b) {
    this.name = g;
    this.tracks = b;
    this.duration = void 0 !== a ? a : -1;
    this.uuid = ia.generateUUID();
    0 > this.duration && this.resetDuration();
  }
  function Ag(g) {
    switch(g.toLowerCase()) {
      case "scalar":
      case "double":
      case "float":
      case "number":
      case "integer":
        return Bc;
      case "vector":
      case "vector2":
      case "vector3":
      case "vector4":
        return Cc;
      case "color":
        return Wd;
      case "quaternion":
        return ud;
      case "bool":
      case "boolean":
        return Vd;
      case "string":
        return Yd;
    }
    throw Error("THREE.KeyframeTrack: Unsupported typeName: " + g);
  }
  function Bg(g) {
    if (void 0 === g.type) {
      throw Error("THREE.KeyframeTrack: track type undefined, can not parse");
    }
    var a = Ag(g.type);
    if (void 0 === g.times) {
      var b = [], e = [];
      xa.flattenJSON(g.keys, b, e, "value");
      g.times = b;
      g.values = e;
    }
    return void 0 !== a.parse ? a.parse(g) : new a(g.name, g.times, g.values, g.interpolation);
  }
  function Ae(g, a, b) {
    var r = this, e = !1, c = 0, d = 0, l = void 0;
    this.onStart = void 0;
    this.onLoad = g;
    this.onProgress = a;
    this.onError = b;
    this.itemStart = function(g) {
      d++;
      if (!1 === e && void 0 !== r.onStart) {
        r.onStart(g, c, d);
      }
      e = !0;
    };
    this.itemEnd = function(g) {
      c++;
      if (void 0 !== r.onProgress) {
        r.onProgress(g, c, d);
      }
      if (c === d && (e = !1, void 0 !== r.onLoad)) {
        r.onLoad();
      }
    };
    this.itemError = function(g) {
      if (void 0 !== r.onError) {
        r.onError(g);
      }
    };
    this.resolveURL = function(g) {
      return l ? l(g) : g;
    };
    this.setURLModifier = function(g) {
      l = g;
      return this;
    };
  }
  function Ya(g) {
    this.manager = void 0 !== g ? g : La;
  }
  function Gf(g) {
    this.manager = void 0 !== g ? g : La;
  }
  function Hf(g) {
    this.manager = void 0 !== g ? g : La;
    this._parser = null;
  }
  function Be(g) {
    this.manager = void 0 !== g ? g : La;
    this._parser = null;
  }
  function vd(g) {
    this.manager = void 0 !== g ? g : La;
  }
  function Ce(g) {
    this.manager = void 0 !== g ? g : La;
  }
  function Zd(g) {
    this.manager = void 0 !== g ? g : La;
  }
  function da() {
    this.type = "Curve";
    this.arcLengthDivisions = 200;
  }
  function Pa(g, a, b, e, c, d, l, f) {
    da.call(this);
    this.type = "EllipseCurve";
    this.aX = g || 0;
    this.aY = a || 0;
    this.xRadius = b || 1;
    this.yRadius = e || 1;
    this.aStartAngle = c || 0;
    this.aEndAngle = d || 2 * Math.PI;
    this.aClockwise = l || !1;
    this.aRotation = f || 0;
  }
  function Dc(g, a, b, e, c, d) {
    Pa.call(this, g, a, b, b, e, c, d);
    this.type = "ArcCurve";
  }
  function De() {
    var g = 0, a = 0, b = 0, e = 0;
    return {initCatmullRom:function(r, c, d, l, f) {
      r = f * (d - r);
      l = f * (l - c);
      g = c;
      a = r;
      b = -3 * c + 3 * d - 2 * r - l;
      e = 2 * c - 2 * d + r + l;
    }, initNonuniformCatmullRom:function(r, c, d, l, f, h, p) {
      r = ((c - r) / f - (d - r) / (f + h) + (d - c) / h) * h;
      l = ((d - c) / h - (l - c) / (h + p) + (l - d) / p) * h;
      g = c;
      a = r;
      b = -3 * c + 3 * d - 2 * r - l;
      e = 2 * c - 2 * d + r + l;
    }, calc:function(r) {
      var c = r * r;
      return g + a * r + b * c + e * c * r;
    }};
  }
  function Ea(g, a, b, e) {
    da.call(this);
    this.type = "CatmullRomCurve3";
    this.points = g || [];
    this.closed = a || !1;
    this.curveType = b || "centripetal";
    this.tension = e || .5;
  }
  function If(g, a, b, e, c) {
    a = .5 * (e - a);
    c = .5 * (c - b);
    var r = g * g;
    return (2 * b - 2 * e + a + c) * g * r + (-3 * b + 3 * e - 2 * a - c) * r + a * g + b;
  }
  function wd(g, a, b, e) {
    var r = 1 - g;
    return r * r * a + 2 * (1 - g) * g * b + g * g * e;
  }
  function xd(g, a, b, e, c) {
    var r = 1 - g, d = 1 - g;
    return r * r * r * a + 3 * d * d * g * b + 3 * (1 - g) * g * g * e + g * g * g * c;
  }
  function Za(g, a, b, e) {
    da.call(this);
    this.type = "CubicBezierCurve";
    this.v0 = g || new k;
    this.v1 = a || new k;
    this.v2 = b || new k;
    this.v3 = e || new k;
  }
  function lb(g, a, b, e) {
    da.call(this);
    this.type = "CubicBezierCurve3";
    this.v0 = g || new d;
    this.v1 = a || new d;
    this.v2 = b || new d;
    this.v3 = e || new d;
  }
  function Ma(g, a) {
    da.call(this);
    this.type = "LineCurve";
    this.v1 = g || new k;
    this.v2 = a || new k;
  }
  function $a(g, a) {
    da.call(this);
    this.type = "LineCurve3";
    this.v1 = g || new d;
    this.v2 = a || new d;
  }
  function ab(g, a, b) {
    da.call(this);
    this.type = "QuadraticBezierCurve";
    this.v0 = g || new k;
    this.v1 = a || new k;
    this.v2 = b || new k;
  }
  function mb(g, a, b) {
    da.call(this);
    this.type = "QuadraticBezierCurve3";
    this.v0 = g || new d;
    this.v1 = a || new d;
    this.v2 = b || new d;
  }
  function bb(g) {
    da.call(this);
    this.type = "SplineCurve";
    this.points = g || [];
  }
  function xb() {
    da.call(this);
    this.type = "CurvePath";
    this.curves = [];
    this.autoClose = !1;
  }
  function cb(g) {
    xb.call(this);
    this.type = "Path";
    this.currentPoint = new k;
    g && this.setFromPoints(g);
  }
  function Mb(g) {
    cb.call(this, g);
    this.uuid = ia.generateUUID();
    this.type = "Shape";
    this.holes = [];
  }
  function va(g, a) {
    G.call(this);
    this.type = "Light";
    this.color = new z(g);
    this.intensity = void 0 !== a ? a : 1;
    this.receiveShadow = void 0;
  }
  function $d(g, a, b) {
    va.call(this, g, b);
    this.type = "HemisphereLight";
    this.castShadow = void 0;
    this.position.copy(G.DefaultUp);
    this.updateMatrix();
    this.groundColor = new z(a);
  }
  function fc(g) {
    this.camera = g;
    this.bias = 0;
    this.radius = 1;
    this.mapSize = new k(512, 512);
    this.map = null;
    this.matrix = new b;
  }
  function ae() {
    fc.call(this, new ra(50, 1, .5, 500));
  }
  function be(g, a, b, e, c, d) {
    va.call(this, g, a);
    this.type = "SpotLight";
    this.position.copy(G.DefaultUp);
    this.updateMatrix();
    this.target = new G;
    Object.defineProperty(this, "power", {get:function() {
      return this.intensity * Math.PI;
    }, set:function(g) {
      this.intensity = g / Math.PI;
    }});
    this.distance = void 0 !== b ? b : 0;
    this.angle = void 0 !== e ? e : Math.PI / 3;
    this.penumbra = void 0 !== c ? c : 0;
    this.decay = void 0 !== d ? d : 1;
    this.shadow = new ae;
  }
  function ce(g, a, b, e) {
    va.call(this, g, a);
    this.type = "PointLight";
    Object.defineProperty(this, "power", {get:function() {
      return 4 * this.intensity * Math.PI;
    }, set:function(g) {
      this.intensity = g / (4 * Math.PI);
    }});
    this.distance = void 0 !== b ? b : 0;
    this.decay = void 0 !== e ? e : 1;
    this.shadow = new fc(new ra(90, 1, .5, 500));
  }
  function yd(g, a, b, e, c, d) {
    ib.call(this);
    this.type = "OrthographicCamera";
    this.zoom = 1;
    this.view = null;
    this.left = void 0 !== g ? g : -1;
    this.right = void 0 !== a ? a : 1;
    this.top = void 0 !== b ? b : 1;
    this.bottom = void 0 !== e ? e : -1;
    this.near = void 0 !== c ? c : .1;
    this.far = void 0 !== d ? d : 2E3;
    this.updateProjectionMatrix();
  }
  function de() {
    fc.call(this, new yd(-5, 5, 5, -5, .5, 500));
  }
  function ee(g, a) {
    va.call(this, g, a);
    this.type = "DirectionalLight";
    this.position.copy(G.DefaultUp);
    this.updateMatrix();
    this.target = new G;
    this.shadow = new de;
  }
  function fe(g, a) {
    va.call(this, g, a);
    this.type = "AmbientLight";
    this.castShadow = void 0;
  }
  function ge(g, a, b, e) {
    va.call(this, g, a);
    this.type = "RectAreaLight";
    this.width = void 0 !== b ? b : 10;
    this.height = void 0 !== e ? e : 10;
  }
  function he(g) {
    this.manager = void 0 !== g ? g : La;
    this.textures = {};
  }
  function Ee(g) {
    this.manager = void 0 !== g ? g : La;
  }
  function Fe(g) {
    this.manager = void 0 !== g ? g : La;
    this.resourcePath = "";
  }
  function Ge(g) {
    "undefined" === typeof createImageBitmap && console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported.");
    "undefined" === typeof fetch && console.warn("THREE.ImageBitmapLoader: fetch() not supported.");
    this.manager = void 0 !== g ? g : La;
    this.options = void 0;
  }
  function He() {
    this.type = "ShapePath";
    this.color = new z;
    this.subPaths = [];
    this.currentPath = null;
  }
  function Ie(g) {
    this.type = "Font";
    this.data = g;
  }
  function Jf(g) {
    this.manager = void 0 !== g ? g : La;
  }
  function zd() {
  }
  function Je(g) {
    this.manager = void 0 !== g ? g : La;
  }
  function Kf() {
    this.type = "StereoCamera";
    this.aspect = 1;
    this.eyeSep = .064;
    this.cameraL = new ra;
    this.cameraL.layers.enable(1);
    this.cameraL.matrixAutoUpdate = !1;
    this.cameraR = new ra;
    this.cameraR.layers.enable(2);
    this.cameraR.matrixAutoUpdate = !1;
  }
  function Ad(g, a, b, c) {
    G.call(this);
    this.type = "CubeCamera";
    var r = new ra(90, 1, g, a);
    r.up.set(0, -1, 0);
    r.lookAt(new d(1, 0, 0));
    this.add(r);
    var l = new ra(90, 1, g, a);
    l.up.set(0, -1, 0);
    l.lookAt(new d(-1, 0, 0));
    this.add(l);
    var f = new ra(90, 1, g, a);
    f.up.set(0, 0, 1);
    f.lookAt(new d(0, 1, 0));
    this.add(f);
    var h = new ra(90, 1, g, a);
    h.up.set(0, 0, -1);
    h.lookAt(new d(0, -1, 0));
    this.add(h);
    var p = new ra(90, 1, g, a);
    p.up.set(0, -1, 0);
    p.lookAt(new d(0, 0, 1));
    this.add(p);
    var k = new ra(90, 1, g, a);
    k.up.set(0, -1, 0);
    k.lookAt(new d(0, 0, -1));
    this.add(k);
    c = c || {format:1022, magFilter:1006, minFilter:1006};
    this.renderTarget = new e(b, b, c);
    this.renderTarget.texture.name = "CubeCamera";
    this.update = function(g, a) {
      null === this.parent && this.updateMatrixWorld();
      var b = g.getRenderTarget(), e = this.renderTarget, c = e.texture.generateMipmaps;
      e.texture.generateMipmaps = !1;
      g.setRenderTarget(e, 0);
      g.render(a, r);
      g.setRenderTarget(e, 1);
      g.render(a, l);
      g.setRenderTarget(e, 2);
      g.render(a, f);
      g.setRenderTarget(e, 3);
      g.render(a, h);
      g.setRenderTarget(e, 4);
      g.render(a, p);
      e.texture.generateMipmaps = c;
      g.setRenderTarget(e, 5);
      g.render(a, k);
      g.setRenderTarget(b);
    };
    this.clear = function(g, a, b, r) {
      for (var e = g.getRenderTarget(), c = this.renderTarget, d = 0; 6 > d; d++) {
        g.setRenderTarget(c, d), g.clear(a, b, r);
      }
      g.setRenderTarget(e);
    };
  }
  function Ke(g) {
    this.autoStart = void 0 !== g ? g : !0;
    this.elapsedTime = this.oldTime = this.startTime = 0;
    this.running = !1;
  }
  function Le() {
    G.call(this);
    this.type = "AudioListener";
    this.context = Me.getContext();
    this.gain = this.context.createGain();
    this.gain.connect(this.context.destination);
    this.filter = null;
    this.timeDelta = 0;
  }
  function Ec(g) {
    G.call(this);
    this.type = "Audio";
    this.listener = g;
    this.context = g.context;
    this.gain = this.context.createGain();
    this.gain.connect(g.getInput());
    this.autoplay = !1;
    this.buffer = null;
    this.detune = 0;
    this.loop = !1;
    this.offset = this.startTime = 0;
    this.playbackRate = 1;
    this.isPlaying = !1;
    this.hasPlaybackControl = !0;
    this.sourceType = "empty";
    this.filters = [];
  }
  function Ne(g) {
    Ec.call(this, g);
    this.panner = this.context.createPanner();
    this.panner.connect(this.gain);
  }
  function Oe(g, a) {
    this.analyser = g.context.createAnalyser();
    this.analyser.fftSize = void 0 !== a ? a : 2048;
    this.data = new Uint8Array(this.analyser.frequencyBinCount);
    g.getOutput().connect(this.analyser);
  }
  function Pe(g, a, b) {
    this.binding = g;
    this.valueSize = b;
    g = Float64Array;
    switch(a) {
      case "quaternion":
        a = this._slerp;
        break;
      case "string":
      case "bool":
        g = Array;
        a = this._select;
        break;
      default:
        a = this._lerp;
    }
    this.buffer = new g(4 * b);
    this._mixBufferRegion = a;
    this.referenceCount = this.useCount = this.cumulativeWeight = 0;
  }
  function Lf(g, a, b) {
    b = b || Fa.parseTrackName(a);
    this._targetGroup = g;
    this._bindings = g.subscribe_(a, b);
  }
  function Fa(g, a, b) {
    this.path = a;
    this.parsedPath = b || Fa.parseTrackName(a);
    this.node = Fa.findNode(g, this.parsedPath.nodeName) || g;
    this.rootNode = g;
  }
  function Mf() {
    this.uuid = ia.generateUUID();
    this._objects = Array.prototype.slice.call(arguments);
    this.nCachedObjects_ = 0;
    var g = {};
    this._indicesByUUID = g;
    for (var a = 0, b = arguments.length; a !== b; ++a) {
      g[arguments[a].uuid] = a;
    }
    this._paths = [];
    this._parsedPaths = [];
    this._bindings = [];
    this._bindingsIndicesByPath = {};
    var e = this;
    this.stats = {objects:{get total() {
      return e._objects.length;
    }, get inUse() {
      return this.total - e.nCachedObjects_;
    }}, get bindingsPerObject() {
      return e._bindings.length;
    }};
  }
  function Nf(g, a, b) {
    this._mixer = g;
    this._clip = a;
    this._localRoot = b || null;
    g = a.tracks;
    a = g.length;
    b = Array(a);
    for (var r = {endingStart:2400, endingEnd:2400}, e = 0; e !== a; ++e) {
      var c = g[e].createInterpolant(null);
      b[e] = c;
      c.settings = r;
    }
    this._interpolantSettings = r;
    this._interpolants = b;
    this._propertyBindings = Array(a);
    this._weightInterpolant = this._timeScaleInterpolant = this._byClipCacheIndex = this._cacheIndex = null;
    this.loop = 2201;
    this._loopCount = -1;
    this._startTime = null;
    this.time = 0;
    this._effectiveWeight = this.weight = this._effectiveTimeScale = this.timeScale = 1;
    this.repetitions = Infinity;
    this.paused = !1;
    this.enabled = !0;
    this.clampWhenFinished = !1;
    this.zeroSlopeAtEnd = this.zeroSlopeAtStart = !0;
  }
  function Qe(g) {
    this._root = g;
    this._initMemoryManager();
    this.time = this._accuIndex = 0;
    this.timeScale = 1;
  }
  function ie(g, a) {
    "string" === typeof g && (console.warn("THREE.Uniform: Type parameter is no longer needed."), g = a);
    this.value = g;
  }
  function Re() {
    O.call(this);
    this.type = "InstancedBufferGeometry";
    this.maxInstancedCount = void 0;
  }
  function Se(g, a, b) {
    Qb.call(this, g, a);
    this.meshPerAttribute = b || 1;
  }
  function Te(g, a, b, e) {
    "number" === typeof b && (e = b, b = !1, console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument."));
    K.call(this, g, a, b);
    this.meshPerAttribute = e || 1;
  }
  function Of(g, a, b, e) {
    this.ray = new ba(g, a);
    this.near = b || 0;
    this.far = e || Infinity;
    this.params = {Mesh:{}, Line:{}, LOD:{}, Points:{threshold:1}, Sprite:{}};
    Object.defineProperties(this.params, {PointCloud:{get:function() {
      console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points.");
      return this.Points;
    }}});
  }
  function Pf(g, a) {
    return g.distance - a.distance;
  }
  function Ue(g, a, b, e) {
    if (!1 !== g.visible && (g.raycast(a, b), !0 === e)) {
      g = g.children;
      e = 0;
      for (var r = g.length; e < r; e++) {
        Ue(g[e], a, b, !0);
      }
    }
  }
  function Qf(g, a, b) {
    this.radius = void 0 !== g ? g : 1;
    this.phi = void 0 !== a ? a : 0;
    this.theta = void 0 !== b ? b : 0;
    return this;
  }
  function Rf(g, a, b) {
    this.radius = void 0 !== g ? g : 1;
    this.theta = void 0 !== a ? a : 0;
    this.y = void 0 !== b ? b : 0;
    return this;
  }
  function Ve(g, a) {
    this.min = void 0 !== g ? g : new k(Infinity, Infinity);
    this.max = void 0 !== a ? a : new k(-Infinity, -Infinity);
  }
  function We(g, a) {
    this.start = void 0 !== g ? g : new d;
    this.end = void 0 !== a ? a : new d;
  }
  function Bd(g) {
    G.call(this);
    this.material = g;
    this.render = function() {
    };
  }
  function Cd(g, a, b, e) {
    this.object = g;
    this.size = void 0 !== a ? a : 1;
    g = void 0 !== b ? b : 16711680;
    e = void 0 !== e ? e : 1;
    a = 0;
    (b = this.object.geometry) && b.isGeometry ? a = 3 * b.faces.length : b && b.isBufferGeometry && (a = b.attributes.normal.count);
    b = new O;
    a = new N(6 * a, 3);
    b.addAttribute("position", a);
    qa.call(this, b, new pa({color:g, linewidth:e}));
    this.matrixAutoUpdate = !1;
    this.update();
  }
  function Fc(g, a) {
    G.call(this);
    this.light = g;
    this.light.updateMatrixWorld();
    this.matrix = g.matrixWorld;
    this.matrixAutoUpdate = !1;
    this.color = a;
    g = new O;
    a = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1];
    for (var b = 0, r = 1; 32 > b; b++, r++) {
      var e = b / 32 * Math.PI * 2, c = r / 32 * Math.PI * 2;
      a.push(Math.cos(e), Math.sin(e), 1, Math.cos(c), Math.sin(c), 1);
    }
    g.addAttribute("position", new N(a, 3));
    a = new pa({fog:!1});
    this.cone = new qa(g, a);
    this.add(this.cone);
    this.update();
  }
  function Sf(g) {
    var a = [];
    g && g.isBone && a.push(g);
    for (var b = 0; b < g.children.length; b++) {
      a.push.apply(a, Sf(g.children[b]));
    }
    return a;
  }
  function Gc(g) {
    for (var a = Sf(g), b = new O, e = [], c = [], d = new z(0, 0, 1), l = new z(0, 1, 0), f = 0; f < a.length; f++) {
      var h = a[f];
      h.parent && h.parent.isBone && (e.push(0, 0, 0), e.push(0, 0, 0), c.push(d.r, d.g, d.b), c.push(l.r, l.g, l.b));
    }
    b.addAttribute("position", new N(e, 3));
    b.addAttribute("color", new N(c, 3));
    e = new pa({vertexColors:2, depthTest:!1, depthWrite:!1, transparent:!0});
    qa.call(this, b, e);
    this.root = g;
    this.bones = a;
    this.matrix = g.matrixWorld;
    this.matrixAutoUpdate = !1;
  }
  function Hc(g, a, b) {
    this.light = g;
    this.light.updateMatrixWorld();
    this.color = b;
    g = new Vb(a, 4, 2);
    a = new ma({wireframe:!0, fog:!1});
    ca.call(this, g, a);
    this.matrix = this.light.matrixWorld;
    this.matrixAutoUpdate = !1;
    this.update();
  }
  function Ic(g, a) {
    this.type = "RectAreaLightHelper";
    this.light = g;
    this.color = a;
    g = new O;
    g.addAttribute("position", new N([1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0, 1, 1, 0], 3));
    g.computeBoundingSphere();
    a = new pa({fog:!1});
    wa.call(this, g, a);
    g = new O;
    g.addAttribute("position", new N([1, 1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0], 3));
    g.computeBoundingSphere();
    this.add(new ca(g, new ma({side:1, fog:!1})));
    this.update();
  }
  function Jc(g, a, b) {
    G.call(this);
    this.light = g;
    this.light.updateMatrixWorld();
    this.matrix = g.matrixWorld;
    this.matrixAutoUpdate = !1;
    this.color = b;
    g = new Rb(a);
    g.rotateY(.5 * Math.PI);
    this.material = new ma({wireframe:!0, fog:!1});
    void 0 === this.color && (this.material.vertexColors = 2);
    a = g.getAttribute("position");
    a = new Float32Array(3 * a.count);
    g.addAttribute("color", new K(a, 3));
    this.add(new ca(g, this.material));
    this.update();
  }
  function Dd(g, a, b, e) {
    g = g || 10;
    a = a || 10;
    b = new z(void 0 !== b ? b : 4473924);
    e = new z(void 0 !== e ? e : 8947848);
    var r = a / 2, c = g / a, d = g / 2;
    g = [];
    for (var l = [], f = 0, h = 0, p = -d; f <= a; f++, p += c) {
      g.push(-d, 0, p, d, 0, p);
      g.push(p, 0, -d, p, 0, d);
      var k = f === r ? b : e;
      k.toArray(l, h);
      h += 3;
      k.toArray(l, h);
      h += 3;
      k.toArray(l, h);
      h += 3;
      k.toArray(l, h);
      h += 3;
    }
    a = new O;
    a.addAttribute("position", new N(g, 3));
    a.addAttribute("color", new N(l, 3));
    b = new pa({vertexColors:2});
    qa.call(this, a, b);
  }
  function je(g, a, b, e, c, d) {
    g = g || 10;
    a = a || 16;
    b = b || 8;
    e = e || 64;
    c = new z(void 0 !== c ? c : 4473924);
    d = new z(void 0 !== d ? d : 8947848);
    var r = [], l = [], f;
    for (f = 0; f <= a; f++) {
      var h = f / a * 2 * Math.PI, p = Math.sin(h) * g;
      h = Math.cos(h) * g;
      r.push(0, 0, 0);
      r.push(p, 0, h);
      var k = f & 1 ? c : d;
      l.push(k.r, k.g, k.b);
      l.push(k.r, k.g, k.b);
    }
    for (f = 0; f <= b; f++) {
      k = f & 1 ? c : d;
      var m = g - g / b * f;
      for (a = 0; a < e; a++) {
        h = a / e * 2 * Math.PI, p = Math.sin(h) * m, h = Math.cos(h) * m, r.push(p, 0, h), l.push(k.r, k.g, k.b), h = (a + 1) / e * 2 * Math.PI, p = Math.sin(h) * m, h = Math.cos(h) * m, r.push(p, 0, h), l.push(k.r, k.g, k.b);
      }
    }
    g = new O;
    g.addAttribute("position", new N(r, 3));
    g.addAttribute("color", new N(l, 3));
    r = new pa({vertexColors:2});
    qa.call(this, g, r);
  }
  function Kc(g, a, b, e) {
    this.audio = g;
    this.range = a || 1;
    this.divisionsInnerAngle = b || 16;
    this.divisionsOuterAngle = e || 2;
    g = new O;
    a = new Float32Array(3 * (3 * (this.divisionsInnerAngle + 2 * this.divisionsOuterAngle) + 3));
    g.addAttribute("position", new K(a, 3));
    a = new pa({color:65280});
    b = new pa({color:16776960});
    wa.call(this, g, [b, a]);
    this.update();
  }
  function Ed(g, a, b, e) {
    this.object = g;
    this.size = void 0 !== a ? a : 1;
    g = void 0 !== b ? b : 16776960;
    e = void 0 !== e ? e : 1;
    a = 0;
    (b = this.object.geometry) && b.isGeometry ? a = b.faces.length : console.warn("THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.");
    b = new O;
    a = new N(6 * a, 3);
    b.addAttribute("position", a);
    qa.call(this, b, new pa({color:g, linewidth:e}));
    this.matrixAutoUpdate = !1;
    this.update();
  }
  function Lc(g, a, b) {
    G.call(this);
    this.light = g;
    this.light.updateMatrixWorld();
    this.matrix = g.matrixWorld;
    this.matrixAutoUpdate = !1;
    this.color = b;
    void 0 === a && (a = 1);
    g = new O;
    g.addAttribute("position", new N([-a, a, 0, a, a, 0, a, -a, 0, -a, -a, 0, -a, a, 0], 3));
    a = new pa({fog:!1});
    this.lightPlane = new wa(g, a);
    this.add(this.lightPlane);
    g = new O;
    g.addAttribute("position", new N([0, 0, 0, 0, 0, 1], 3));
    this.targetLine = new wa(g, a);
    this.add(this.targetLine);
    this.update();
  }
  function Fd(g) {
    function a(g, a, r) {
      b(g, r);
      b(a, r);
    }
    function b(g, a) {
      d.push(0, 0, 0);
      l.push(a.r, a.g, a.b);
      void 0 === f[g] && (f[g] = []);
      f[g].push(d.length / 3 - 1);
    }
    var e = new O, c = new pa({color:16777215, vertexColors:1}), d = [], l = [], f = {}, h = new z(16755200), p = new z(16711680), k = new z(43775), m = new z(16777215), n = new z(3355443);
    a("n1", "n2", h);
    a("n2", "n4", h);
    a("n4", "n3", h);
    a("n3", "n1", h);
    a("f1", "f2", h);
    a("f2", "f4", h);
    a("f4", "f3", h);
    a("f3", "f1", h);
    a("n1", "f1", h);
    a("n2", "f2", h);
    a("n3", "f3", h);
    a("n4", "f4", h);
    a("p", "n1", p);
    a("p", "n2", p);
    a("p", "n3", p);
    a("p", "n4", p);
    a("u1", "u2", k);
    a("u2", "u3", k);
    a("u3", "u1", k);
    a("c", "t", m);
    a("p", "c", n);
    a("cn1", "cn2", n);
    a("cn3", "cn4", n);
    a("cf1", "cf2", n);
    a("cf3", "cf4", n);
    e.addAttribute("position", new N(d, 3));
    e.addAttribute("color", new N(l, 3));
    qa.call(this, e, c);
    this.camera = g;
    this.camera.updateProjectionMatrix && this.camera.updateProjectionMatrix();
    this.matrix = g.matrixWorld;
    this.matrixAutoUpdate = !1;
    this.pointMap = f;
    this.update();
  }
  function yb(g, a) {
    this.object = g;
    void 0 === a && (a = 16776960);
    g = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);
    var b = new Float32Array(24), r = new O;
    r.setIndex(new K(g, 1));
    r.addAttribute("position", new K(b, 3));
    qa.call(this, r, new pa({color:a}));
    this.matrixAutoUpdate = !1;
    this.update();
  }
  function Gd(g, a) {
    this.type = "Box3Helper";
    this.box = g;
    g = void 0 !== a ? a : 16776960;
    a = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);
    var b = new O;
    b.setIndex(new K(a, 1));
    b.addAttribute("position", new N([1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1], 3));
    qa.call(this, b, new pa({color:g}));
    this.geometry.computeBoundingSphere();
  }
  function Hd(g, a, b) {
    this.type = "PlaneHelper";
    this.plane = g;
    this.size = void 0 === a ? 1 : a;
    g = void 0 !== b ? b : 16776960;
    a = new O;
    a.addAttribute("position", new N([1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0], 3));
    a.computeBoundingSphere();
    wa.call(this, a, new pa({color:g}));
    a = new O;
    a.addAttribute("position", new N([1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1], 3));
    a.computeBoundingSphere();
    this.add(new ca(a, new ma({color:g, opacity:.2, transparent:!0, depthWrite:!1})));
  }
  function zb(g, a, b, e, c, l) {
    G.call(this);
    void 0 === g && (g = new d(0, 0, 1));
    void 0 === a && (a = new d(0, 0, 0));
    void 0 === b && (b = 1);
    void 0 === e && (e = 16776960);
    void 0 === c && (c = .2 * b);
    void 0 === l && (l = .2 * c);
    void 0 === ke && (ke = new O, ke.addAttribute("position", new N([0, 0, 0, 0, 1, 0], 3)), Xe = new wb(0, .5, 1, 5, 1), Xe.translate(0, -.5, 0));
    this.position.copy(a);
    this.line = new wa(ke, new pa({color:e}));
    this.line.matrixAutoUpdate = !1;
    this.add(this.line);
    this.cone = new ca(Xe, new ma({color:e}));
    this.cone.matrixAutoUpdate = !1;
    this.add(this.cone);
    this.setDirection(g);
    this.setLength(b, c, l);
  }
  function Id(g) {
    g = g || 1;
    var a = [0, 0, 0, g, 0, 0, 0, 0, 0, 0, g, 0, 0, 0, 0, 0, 0, g];
    g = new O;
    g.addAttribute("position", new N(a, 3));
    g.addAttribute("color", new N([1, 0, 0, 1, .6, 0, 0, 1, 0, .6, 1, 0, 0, 0, 1, 0, .6, 1], 3));
    a = new pa({vertexColors:2});
    qa.call(this, g, a);
  }
  function Tf(g) {
    console.warn("THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.");
    Ea.call(this, g);
    this.type = "catmullrom";
    this.closed = !0;
  }
  function Uf(g) {
    console.warn("THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.");
    Ea.call(this, g);
    this.type = "catmullrom";
  }
  function Ye(g) {
    console.warn("THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.");
    Ea.call(this, g);
    this.type = "catmullrom";
  }
  void 0 === Number.EPSILON && (Number.EPSILON = Math.pow(2, -52));
  void 0 === Number.isInteger && (Number.isInteger = function(g) {
    return "number" === typeof g && isFinite(g) && Math.floor(g) === g;
  });
  void 0 === Math.sign && (Math.sign = function(g) {
    return 0 > g ? -1 : 0 < g ? 1 : +g;
  });
  !1 === "name" in Function.prototype && Object.defineProperty(Function.prototype, "name", {get:function() {
    return this.toString().match(/^\s*function\s*([^\(\s]*)/)[1];
  }});
  void 0 === Object.assign && function() {
    Object.assign = function(g) {
      if (void 0 === g || null === g) {
        throw new TypeError("Cannot convert undefined or null to object");
      }
      for (var a = Object(g), b = 1; b < arguments.length; b++) {
        var e = arguments[b];
        if (void 0 !== e && null !== e) {
          for (var c in e) {
            Object.prototype.hasOwnProperty.call(e, c) && (a[c] = e[c]);
          }
        }
      }
      return a;
    };
  }();
  Object.assign(c.prototype, {addEventListener:function(g, a) {
    void 0 === this._listeners && (this._listeners = {});
    var b = this._listeners;
    void 0 === b[g] && (b[g] = []);
    -1 === b[g].indexOf(a) && b[g].push(a);
  }, hasEventListener:function(g, a) {
    if (void 0 === this._listeners) {
      return !1;
    }
    var b = this._listeners;
    return void 0 !== b[g] && -1 !== b[g].indexOf(a);
  }, removeEventListener:function(g, a) {
    void 0 !== this._listeners && (g = this._listeners[g], void 0 !== g && (a = g.indexOf(a), -1 !== a && g.splice(a, 1)));
  }, dispatchEvent:function(g) {
    if (void 0 !== this._listeners) {
      var a = this._listeners[g.type];
      if (void 0 !== a) {
        g.target = this;
        a = a.slice(0);
        for (var b = 0, e = a.length; b < e; b++) {
          a[b].call(this, g);
        }
      }
    }
  }});
  var ia = {DEG2RAD:Math.PI / 180, RAD2DEG:180 / Math.PI, generateUUID:function() {
    for (var a = [], b = 0; 256 > b; b++) {
      a[b] = (16 > b ? "0" : "") + b.toString(16);
    }
    return function() {
      var g = 4294967295 * Math.random() | 0, b = 4294967295 * Math.random() | 0, r = 4294967295 * Math.random() | 0, e = 4294967295 * Math.random() | 0;
      return (a[g & 255] + a[g >> 8 & 255] + a[g >> 16 & 255] + a[g >> 24 & 255] + "-" + a[b & 255] + a[b >> 8 & 255] + "-" + a[b >> 16 & 15 | 64] + a[b >> 24 & 255] + "-" + a[r & 63 | 128] + a[r >> 8 & 255] + "-" + a[r >> 16 & 255] + a[r >> 24 & 255] + a[e & 255] + a[e >> 8 & 255] + a[e >> 16 & 255] + a[e >> 24 & 255]).toUpperCase();
    };
  }(), clamp:function(a, b, e) {
    return Math.max(b, Math.min(e, a));
  }, euclideanModulo:function(a, b) {
    return (a % b + b) % b;
  }, mapLinear:function(a, b, e, c, d) {
    return c + (a - b) * (d - c) / (e - b);
  }, lerp:function(a, b, e) {
    return (1 - e) * a + e * b;
  }, smoothstep:function(a, b, e) {
    if (a <= b) {
      return 0;
    }
    if (a >= e) {
      return 1;
    }
    a = (a - b) / (e - b);
    return a * a * (3 - 2 * a);
  }, smootherstep:function(a, b, e) {
    if (a <= b) {
      return 0;
    }
    if (a >= e) {
      return 1;
    }
    a = (a - b) / (e - b);
    return a * a * a * (a * (6 * a - 15) + 10);
  }, randInt:function(a, b) {
    return a + Math.floor(Math.random() * (b - a + 1));
  }, randFloat:function(a, b) {
    return a + Math.random() * (b - a);
  }, randFloatSpread:function(a) {
    return a * (.5 - Math.random());
  }, degToRad:function(a) {
    return a * ia.DEG2RAD;
  }, radToDeg:function(a) {
    return a * ia.RAD2DEG;
  }, isPowerOfTwo:function(a) {
    return 0 === (a & a - 1) && 0 !== a;
  }, ceilPowerOfTwo:function(a) {
    return Math.pow(2, Math.ceil(Math.log(a) / Math.LN2));
  }, floorPowerOfTwo:function(a) {
    return Math.pow(2, Math.floor(Math.log(a) / Math.LN2));
  }};
  Object.defineProperties(k.prototype, {width:{get:function() {
    return this.x;
  }, set:function(a) {
    this.x = a;
  }}, height:{get:function() {
    return this.y;
  }, set:function(a) {
    this.y = a;
  }}});
  Object.assign(k.prototype, {isVector2:!0, set:function(a, b) {
    this.x = a;
    this.y = b;
    return this;
  }, setScalar:function(a) {
    this.y = this.x = a;
    return this;
  }, setX:function(a) {
    this.x = a;
    return this;
  }, setY:function(a) {
    this.y = a;
    return this;
  }, setComponent:function(a, b) {
    switch(a) {
      case 0:
        this.x = b;
        break;
      case 1:
        this.y = b;
        break;
      default:
        throw Error("index is out of range: " + a);
    }
    return this;
  }, getComponent:function(a) {
    switch(a) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      default:
        throw Error("index is out of range: " + a);
    }
  }, clone:function() {
    return new this.constructor(this.x, this.y);
  }, copy:function(a) {
    this.x = a.x;
    this.y = a.y;
    return this;
  }, add:function(a, b) {
    if (void 0 !== b) {
      return console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(a, b);
    }
    this.x += a.x;
    this.y += a.y;
    return this;
  }, addScalar:function(a) {
    this.x += a;
    this.y += a;
    return this;
  }, addVectors:function(a, b) {
    this.x = a.x + b.x;
    this.y = a.y + b.y;
    return this;
  }, addScaledVector:function(a, b) {
    this.x += a.x * b;
    this.y += a.y * b;
    return this;
  }, sub:function(a, b) {
    if (void 0 !== b) {
      return console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(a, b);
    }
    this.x -= a.x;
    this.y -= a.y;
    return this;
  }, subScalar:function(a) {
    this.x -= a;
    this.y -= a;
    return this;
  }, subVectors:function(a, b) {
    this.x = a.x - b.x;
    this.y = a.y - b.y;
    return this;
  }, multiply:function(a) {
    this.x *= a.x;
    this.y *= a.y;
    return this;
  }, multiplyScalar:function(a) {
    this.x *= a;
    this.y *= a;
    return this;
  }, divide:function(a) {
    this.x /= a.x;
    this.y /= a.y;
    return this;
  }, divideScalar:function(a) {
    return this.multiplyScalar(1 / a);
  }, applyMatrix3:function(a) {
    var g = this.x, b = this.y;
    a = a.elements;
    this.x = a[0] * g + a[3] * b + a[6];
    this.y = a[1] * g + a[4] * b + a[7];
    return this;
  }, min:function(a) {
    this.x = Math.min(this.x, a.x);
    this.y = Math.min(this.y, a.y);
    return this;
  }, max:function(a) {
    this.x = Math.max(this.x, a.x);
    this.y = Math.max(this.y, a.y);
    return this;
  }, clamp:function(a, b) {
    this.x = Math.max(a.x, Math.min(b.x, this.x));
    this.y = Math.max(a.y, Math.min(b.y, this.y));
    return this;
  }, clampScalar:function() {
    var a = new k, b = new k;
    return function(g, r) {
      a.set(g, g);
      b.set(r, r);
      return this.clamp(a, b);
    };
  }(), clampLength:function(a, b) {
    var g = this.length();
    return this.divideScalar(g || 1).multiplyScalar(Math.max(a, Math.min(b, g)));
  }, floor:function() {
    this.x = Math.floor(this.x);
    this.y = Math.floor(this.y);
    return this;
  }, ceil:function() {
    this.x = Math.ceil(this.x);
    this.y = Math.ceil(this.y);
    return this;
  }, round:function() {
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    return this;
  }, roundToZero:function() {
    this.x = 0 > this.x ? Math.ceil(this.x) : Math.floor(this.x);
    this.y = 0 > this.y ? Math.ceil(this.y) : Math.floor(this.y);
    return this;
  }, negate:function() {
    this.x = -this.x;
    this.y = -this.y;
    return this;
  }, dot:function(a) {
    return this.x * a.x + this.y * a.y;
  }, cross:function(a) {
    return this.x * a.y - this.y * a.x;
  }, lengthSq:function() {
    return this.x * this.x + this.y * this.y;
  }, length:function() {
    return Math.sqrt(this.x * this.x + this.y * this.y);
  }, manhattanLength:function() {
    return Math.abs(this.x) + Math.abs(this.y);
  }, normalize:function() {
    return this.divideScalar(this.length() || 1);
  }, angle:function() {
    var a = Math.atan2(this.y, this.x);
    0 > a && (a += 2 * Math.PI);
    return a;
  }, distanceTo:function(a) {
    return Math.sqrt(this.distanceToSquared(a));
  }, distanceToSquared:function(a) {
    var g = this.x - a.x;
    a = this.y - a.y;
    return g * g + a * a;
  }, manhattanDistanceTo:function(a) {
    return Math.abs(this.x - a.x) + Math.abs(this.y - a.y);
  }, setLength:function(a) {
    return this.normalize().multiplyScalar(a);
  }, lerp:function(a, b) {
    this.x += (a.x - this.x) * b;
    this.y += (a.y - this.y) * b;
    return this;
  }, lerpVectors:function(a, b, e) {
    return this.subVectors(b, a).multiplyScalar(e).add(a);
  }, equals:function(a) {
    return a.x === this.x && a.y === this.y;
  }, fromArray:function(a, b) {
    void 0 === b && (b = 0);
    this.x = a[b];
    this.y = a[b + 1];
    return this;
  }, toArray:function(a, b) {
    void 0 === a && (a = []);
    void 0 === b && (b = 0);
    a[b] = this.x;
    a[b + 1] = this.y;
    return a;
  }, fromBufferAttribute:function(a, b, e) {
    void 0 !== e && console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute().");
    this.x = a.getX(b);
    this.y = a.getY(b);
    return this;
  }, rotateAround:function(a, b) {
    var g = Math.cos(b);
    b = Math.sin(b);
    var r = this.x - a.x, e = this.y - a.y;
    this.x = r * g - e * b + a.x;
    this.y = r * b + e * g + a.y;
    return this;
  }});
  Object.assign(b.prototype, {isMatrix4:!0, set:function(a, b, e, c, d, l, f, h, p, k, m, n, t, u, q, v) {
    var g = this.elements;
    g[0] = a;
    g[4] = b;
    g[8] = e;
    g[12] = c;
    g[1] = d;
    g[5] = l;
    g[9] = f;
    g[13] = h;
    g[2] = p;
    g[6] = k;
    g[10] = m;
    g[14] = n;
    g[3] = t;
    g[7] = u;
    g[11] = q;
    g[15] = v;
    return this;
  }, identity:function() {
    this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    return this;
  }, clone:function() {
    return (new b).fromArray(this.elements);
  }, copy:function(a) {
    var g = this.elements;
    a = a.elements;
    g[0] = a[0];
    g[1] = a[1];
    g[2] = a[2];
    g[3] = a[3];
    g[4] = a[4];
    g[5] = a[5];
    g[6] = a[6];
    g[7] = a[7];
    g[8] = a[8];
    g[9] = a[9];
    g[10] = a[10];
    g[11] = a[11];
    g[12] = a[12];
    g[13] = a[13];
    g[14] = a[14];
    g[15] = a[15];
    return this;
  }, copyPosition:function(a) {
    var g = this.elements;
    a = a.elements;
    g[12] = a[12];
    g[13] = a[13];
    g[14] = a[14];
    return this;
  }, extractBasis:function(a, b, e) {
    a.setFromMatrixColumn(this, 0);
    b.setFromMatrixColumn(this, 1);
    e.setFromMatrixColumn(this, 2);
    return this;
  }, makeBasis:function(a, b, e) {
    this.set(a.x, b.x, e.x, 0, a.y, b.y, e.y, 0, a.z, b.z, e.z, 0, 0, 0, 0, 1);
    return this;
  }, extractRotation:function() {
    var a = new d;
    return function(g) {
      var b = this.elements, r = g.elements, e = 1 / a.setFromMatrixColumn(g, 0).length(), c = 1 / a.setFromMatrixColumn(g, 1).length();
      g = 1 / a.setFromMatrixColumn(g, 2).length();
      b[0] = r[0] * e;
      b[1] = r[1] * e;
      b[2] = r[2] * e;
      b[3] = 0;
      b[4] = r[4] * c;
      b[5] = r[5] * c;
      b[6] = r[6] * c;
      b[7] = 0;
      b[8] = r[8] * g;
      b[9] = r[9] * g;
      b[10] = r[10] * g;
      b[11] = 0;
      b[12] = 0;
      b[13] = 0;
      b[14] = 0;
      b[15] = 1;
      return this;
    };
  }(), makeRotationFromEuler:function(a) {
    a && a.isEuler || console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");
    var g = this.elements, b = a.x, e = a.y, c = a.z, d = Math.cos(b);
    b = Math.sin(b);
    var l = Math.cos(e);
    e = Math.sin(e);
    var f = Math.cos(c);
    c = Math.sin(c);
    if ("XYZ" === a.order) {
      a = d * f;
      var h = d * c, p = b * f, k = b * c;
      g[0] = l * f;
      g[4] = -l * c;
      g[8] = e;
      g[1] = h + p * e;
      g[5] = a - k * e;
      g[9] = -b * l;
      g[2] = k - a * e;
      g[6] = p + h * e;
      g[10] = d * l;
    } else {
      "YXZ" === a.order ? (a = l * f, h = l * c, p = e * f, k = e * c, g[0] = a + k * b, g[4] = p * b - h, g[8] = d * e, g[1] = d * c, g[5] = d * f, g[9] = -b, g[2] = h * b - p, g[6] = k + a * b, g[10] = d * l) : "ZXY" === a.order ? (a = l * f, h = l * c, p = e * f, k = e * c, g[0] = a - k * b, g[4] = -d * c, g[8] = p + h * b, g[1] = h + p * b, g[5] = d * f, g[9] = k - a * b, g[2] = -d * e, g[6] = b, g[10] = d * l) : "ZYX" === a.order ? (a = d * f, h = d * c, p = b * f, k = b * c, g[0] = l * f, g[4] = 
      p * e - h, g[8] = a * e + k, g[1] = l * c, g[5] = k * e + a, g[9] = h * e - p, g[2] = -e, g[6] = b * l, g[10] = d * l) : "YZX" === a.order ? (a = d * l, h = d * e, p = b * l, k = b * e, g[0] = l * f, g[4] = k - a * c, g[8] = p * c + h, g[1] = c, g[5] = d * f, g[9] = -b * f, g[2] = -e * f, g[6] = h * c + p, g[10] = a - k * c) : "XZY" === a.order && (a = d * l, h = d * e, p = b * l, k = b * e, g[0] = l * f, g[4] = -c, g[8] = e * f, g[1] = a * c + k, g[5] = d * f, g[9] = h * c - p, g[2] = p * 
      c - h, g[6] = b * f, g[10] = k * c + a);
    }
    g[3] = 0;
    g[7] = 0;
    g[11] = 0;
    g[12] = 0;
    g[13] = 0;
    g[14] = 0;
    g[15] = 1;
    return this;
  }, makeRotationFromQuaternion:function() {
    var a = new d(0, 0, 0), b = new d(1, 1, 1);
    return function(g) {
      return this.compose(a, g, b);
    };
  }(), lookAt:function() {
    var a = new d, b = new d, e = new d;
    return function(g, r, c) {
      var d = this.elements;
      e.subVectors(g, r);
      0 === e.lengthSq() && (e.z = 1);
      e.normalize();
      a.crossVectors(c, e);
      0 === a.lengthSq() && (1 === Math.abs(c.z) ? e.x += 1E-4 : e.z += 1E-4, e.normalize(), a.crossVectors(c, e));
      a.normalize();
      b.crossVectors(e, a);
      d[0] = a.x;
      d[4] = b.x;
      d[8] = e.x;
      d[1] = a.y;
      d[5] = b.y;
      d[9] = e.y;
      d[2] = a.z;
      d[6] = b.z;
      d[10] = e.z;
      return this;
    };
  }(), multiply:function(a, b) {
    return void 0 !== b ? (console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."), this.multiplyMatrices(a, b)) : this.multiplyMatrices(this, a);
  }, premultiply:function(a) {
    return this.multiplyMatrices(a, this);
  }, multiplyMatrices:function(a, b) {
    var g = a.elements, e = b.elements;
    b = this.elements;
    a = g[0];
    var r = g[4], c = g[8], d = g[12], l = g[1], f = g[5], h = g[9], p = g[13], k = g[2], m = g[6], n = g[10], t = g[14], u = g[3], q = g[7], v = g[11];
    g = g[15];
    var w = e[0], z = e[4], y = e[8], x = e[12], D = e[1], C = e[5], B = e[9], E = e[13], A = e[2], G = e[6], M = e[10], H = e[14], O = e[3], I = e[7], P = e[11];
    e = e[15];
    b[0] = a * w + r * D + c * A + d * O;
    b[4] = a * z + r * C + c * G + d * I;
    b[8] = a * y + r * B + c * M + d * P;
    b[12] = a * x + r * E + c * H + d * e;
    b[1] = l * w + f * D + h * A + p * O;
    b[5] = l * z + f * C + h * G + p * I;
    b[9] = l * y + f * B + h * M + p * P;
    b[13] = l * x + f * E + h * H + p * e;
    b[2] = k * w + m * D + n * A + t * O;
    b[6] = k * z + m * C + n * G + t * I;
    b[10] = k * y + m * B + n * M + t * P;
    b[14] = k * x + m * E + n * H + t * e;
    b[3] = u * w + q * D + v * A + g * O;
    b[7] = u * z + q * C + v * G + g * I;
    b[11] = u * y + q * B + v * M + g * P;
    b[15] = u * x + q * E + v * H + g * e;
    return this;
  }, multiplyScalar:function(a) {
    var g = this.elements;
    g[0] *= a;
    g[4] *= a;
    g[8] *= a;
    g[12] *= a;
    g[1] *= a;
    g[5] *= a;
    g[9] *= a;
    g[13] *= a;
    g[2] *= a;
    g[6] *= a;
    g[10] *= a;
    g[14] *= a;
    g[3] *= a;
    g[7] *= a;
    g[11] *= a;
    g[15] *= a;
    return this;
  }, applyToBufferAttribute:function() {
    var a = new d;
    return function(g) {
      for (var b = 0, e = g.count; b < e; b++) {
        a.x = g.getX(b), a.y = g.getY(b), a.z = g.getZ(b), a.applyMatrix4(this), g.setXYZ(b, a.x, a.y, a.z);
      }
      return g;
    };
  }(), determinant:function() {
    var a = this.elements, b = a[0], e = a[4], c = a[8], d = a[12], l = a[1], f = a[5], h = a[9], p = a[13], k = a[2], m = a[6], n = a[10], t = a[14];
    return a[3] * (+d * h * m - c * p * m - d * f * n + e * p * n + c * f * t - e * h * t) + a[7] * (+b * h * t - b * p * n + d * l * n - c * l * t + c * p * k - d * h * k) + a[11] * (+b * p * m - b * f * t - d * l * m + e * l * t + d * f * k - e * p * k) + a[15] * (-c * f * k - b * h * m + b * f * n + c * l * m - e * l * n + e * h * k);
  }, transpose:function() {
    var a = this.elements, b = a[1];
    a[1] = a[4];
    a[4] = b;
    b = a[2];
    a[2] = a[8];
    a[8] = b;
    b = a[6];
    a[6] = a[9];
    a[9] = b;
    b = a[3];
    a[3] = a[12];
    a[12] = b;
    b = a[7];
    a[7] = a[13];
    a[13] = b;
    b = a[11];
    a[11] = a[14];
    a[14] = b;
    return this;
  }, setPosition:function(a) {
    var g = this.elements;
    g[12] = a.x;
    g[13] = a.y;
    g[14] = a.z;
    return this;
  }, getInverse:function(a, b) {
    var g = this.elements, e = a.elements;
    a = e[0];
    var r = e[1], c = e[2], d = e[3], l = e[4], f = e[5], h = e[6], p = e[7], k = e[8], m = e[9], n = e[10], t = e[11], u = e[12], q = e[13], v = e[14];
    e = e[15];
    var w = m * v * p - q * n * p + q * h * t - f * v * t - m * h * e + f * n * e, z = u * n * p - k * v * p - u * h * t + l * v * t + k * h * e - l * n * e, y = k * q * p - u * m * p + u * f * t - l * q * t - k * f * e + l * m * e, x = u * m * h - k * q * h - u * f * n + l * q * n + k * f * v - l * m * v, D = a * w + r * z + c * y + d * x;
    if (0 === D) {
      if (!0 === b) {
        throw Error("THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0");
      }
      console.warn("THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0");
      return this.identity();
    }
    b = 1 / D;
    g[0] = w * b;
    g[1] = (q * n * d - m * v * d - q * c * t + r * v * t + m * c * e - r * n * e) * b;
    g[2] = (f * v * d - q * h * d + q * c * p - r * v * p - f * c * e + r * h * e) * b;
    g[3] = (m * h * d - f * n * d - m * c * p + r * n * p + f * c * t - r * h * t) * b;
    g[4] = z * b;
    g[5] = (k * v * d - u * n * d + u * c * t - a * v * t - k * c * e + a * n * e) * b;
    g[6] = (u * h * d - l * v * d - u * c * p + a * v * p + l * c * e - a * h * e) * b;
    g[7] = (l * n * d - k * h * d + k * c * p - a * n * p - l * c * t + a * h * t) * b;
    g[8] = y * b;
    g[9] = (u * m * d - k * q * d - u * r * t + a * q * t + k * r * e - a * m * e) * b;
    g[10] = (l * q * d - u * f * d + u * r * p - a * q * p - l * r * e + a * f * e) * b;
    g[11] = (k * f * d - l * m * d - k * r * p + a * m * p + l * r * t - a * f * t) * b;
    g[12] = x * b;
    g[13] = (k * q * c - u * m * c + u * r * n - a * q * n - k * r * v + a * m * v) * b;
    g[14] = (u * f * c - l * q * c - u * r * h + a * q * h + l * r * v - a * f * v) * b;
    g[15] = (l * m * c - k * f * c + k * r * h - a * m * h - l * r * n + a * f * n) * b;
    return this;
  }, scale:function(a) {
    var g = this.elements, b = a.x, e = a.y;
    a = a.z;
    g[0] *= b;
    g[4] *= e;
    g[8] *= a;
    g[1] *= b;
    g[5] *= e;
    g[9] *= a;
    g[2] *= b;
    g[6] *= e;
    g[10] *= a;
    g[3] *= b;
    g[7] *= e;
    g[11] *= a;
    return this;
  }, getMaxScaleOnAxis:function() {
    var a = this.elements;
    return Math.sqrt(Math.max(a[0] * a[0] + a[1] * a[1] + a[2] * a[2], a[4] * a[4] + a[5] * a[5] + a[6] * a[6], a[8] * a[8] + a[9] * a[9] + a[10] * a[10]));
  }, makeTranslation:function(a, b, e) {
    this.set(1, 0, 0, a, 0, 1, 0, b, 0, 0, 1, e, 0, 0, 0, 1);
    return this;
  }, makeRotationX:function(a) {
    var g = Math.cos(a);
    a = Math.sin(a);
    this.set(1, 0, 0, 0, 0, g, -a, 0, 0, a, g, 0, 0, 0, 0, 1);
    return this;
  }, makeRotationY:function(a) {
    var g = Math.cos(a);
    a = Math.sin(a);
    this.set(g, 0, a, 0, 0, 1, 0, 0, -a, 0, g, 0, 0, 0, 0, 1);
    return this;
  }, makeRotationZ:function(a) {
    var g = Math.cos(a);
    a = Math.sin(a);
    this.set(g, -a, 0, 0, a, g, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    return this;
  }, makeRotationAxis:function(a, b) {
    var g = Math.cos(b);
    b = Math.sin(b);
    var e = 1 - g, r = a.x, c = a.y;
    a = a.z;
    var d = e * r, l = e * c;
    this.set(d * r + g, d * c - b * a, d * a + b * c, 0, d * c + b * a, l * c + g, l * a - b * r, 0, d * a - b * c, l * a + b * r, e * a * a + g, 0, 0, 0, 0, 1);
    return this;
  }, makeScale:function(a, b, e) {
    this.set(a, 0, 0, 0, 0, b, 0, 0, 0, 0, e, 0, 0, 0, 0, 1);
    return this;
  }, makeShear:function(a, b, e) {
    this.set(1, b, e, 0, a, 1, e, 0, a, b, 1, 0, 0, 0, 0, 1);
    return this;
  }, compose:function(a, b, e) {
    var g = this.elements, r = b._x, c = b._y, d = b._z, l = b._w, f = r + r, h = c + c, p = d + d;
    b = r * f;
    var k = r * h;
    r *= p;
    var m = c * h;
    c *= p;
    d *= p;
    f *= l;
    h *= l;
    l *= p;
    p = e.x;
    var n = e.y;
    e = e.z;
    g[0] = (1 - (m + d)) * p;
    g[1] = (k + l) * p;
    g[2] = (r - h) * p;
    g[3] = 0;
    g[4] = (k - l) * n;
    g[5] = (1 - (b + d)) * n;
    g[6] = (c + f) * n;
    g[7] = 0;
    g[8] = (r + h) * e;
    g[9] = (c - f) * e;
    g[10] = (1 - (b + m)) * e;
    g[11] = 0;
    g[12] = a.x;
    g[13] = a.y;
    g[14] = a.z;
    g[15] = 1;
    return this;
  }, decompose:function() {
    var a = new d, e = new b;
    return function(g, b, r) {
      var c = this.elements, d = a.set(c[0], c[1], c[2]).length(), l = a.set(c[4], c[5], c[6]).length(), f = a.set(c[8], c[9], c[10]).length();
      0 > this.determinant() && (d = -d);
      g.x = c[12];
      g.y = c[13];
      g.z = c[14];
      e.copy(this);
      g = 1 / d;
      c = 1 / l;
      var h = 1 / f;
      e.elements[0] *= g;
      e.elements[1] *= g;
      e.elements[2] *= g;
      e.elements[4] *= c;
      e.elements[5] *= c;
      e.elements[6] *= c;
      e.elements[8] *= h;
      e.elements[9] *= h;
      e.elements[10] *= h;
      b.setFromRotationMatrix(e);
      r.x = d;
      r.y = l;
      r.z = f;
      return this;
    };
  }(), makePerspective:function(a, b, e, c, d, l) {
    void 0 === l && console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");
    var g = this.elements;
    g[0] = 2 * d / (b - a);
    g[4] = 0;
    g[8] = (b + a) / (b - a);
    g[12] = 0;
    g[1] = 0;
    g[5] = 2 * d / (e - c);
    g[9] = (e + c) / (e - c);
    g[13] = 0;
    g[2] = 0;
    g[6] = 0;
    g[10] = -(l + d) / (l - d);
    g[14] = -2 * l * d / (l - d);
    g[3] = 0;
    g[7] = 0;
    g[11] = -1;
    g[15] = 0;
    return this;
  }, makeOrthographic:function(a, b, e, c, d, l) {
    var g = this.elements, r = 1 / (b - a), f = 1 / (e - c), h = 1 / (l - d);
    g[0] = 2 * r;
    g[4] = 0;
    g[8] = 0;
    g[12] = -((b + a) * r);
    g[1] = 0;
    g[5] = 2 * f;
    g[9] = 0;
    g[13] = -((e + c) * f);
    g[2] = 0;
    g[6] = 0;
    g[10] = -2 * h;
    g[14] = -((l + d) * h);
    g[3] = 0;
    g[7] = 0;
    g[11] = 0;
    g[15] = 1;
    return this;
  }, equals:function(a) {
    var g = this.elements;
    a = a.elements;
    for (var b = 0; 16 > b; b++) {
      if (g[b] !== a[b]) {
        return !1;
      }
    }
    return !0;
  }, fromArray:function(a, b) {
    void 0 === b && (b = 0);
    for (var g = 0; 16 > g; g++) {
      this.elements[g] = a[g + b];
    }
    return this;
  }, toArray:function(a, b) {
    void 0 === a && (a = []);
    void 0 === b && (b = 0);
    var g = this.elements;
    a[b] = g[0];
    a[b + 1] = g[1];
    a[b + 2] = g[2];
    a[b + 3] = g[3];
    a[b + 4] = g[4];
    a[b + 5] = g[5];
    a[b + 6] = g[6];
    a[b + 7] = g[7];
    a[b + 8] = g[8];
    a[b + 9] = g[9];
    a[b + 10] = g[10];
    a[b + 11] = g[11];
    a[b + 12] = g[12];
    a[b + 13] = g[13];
    a[b + 14] = g[14];
    a[b + 15] = g[15];
    return a;
  }});
  Object.assign(f, {slerp:function(a, b, e, c) {
    return e.copy(a).slerp(b, c);
  }, slerpFlat:function(a, b, e, c, d, l, f) {
    var g = e[c + 0], r = e[c + 1], h = e[c + 2];
    e = e[c + 3];
    c = d[l + 0];
    var p = d[l + 1], k = d[l + 2];
    d = d[l + 3];
    if (e !== d || g !== c || r !== p || h !== k) {
      l = 1 - f;
      var m = g * c + r * p + h * k + e * d, n = 0 <= m ? 1 : -1, t = 1 - m * m;
      t > Number.EPSILON && (t = Math.sqrt(t), m = Math.atan2(t, m * n), l = Math.sin(l * m) / t, f = Math.sin(f * m) / t);
      n *= f;
      g = g * l + c * n;
      r = r * l + p * n;
      h = h * l + k * n;
      e = e * l + d * n;
      l === 1 - f && (f = 1 / Math.sqrt(g * g + r * r + h * h + e * e), g *= f, r *= f, h *= f, e *= f);
    }
    a[b] = g;
    a[b + 1] = r;
    a[b + 2] = h;
    a[b + 3] = e;
  }});
  Object.defineProperties(f.prototype, {x:{get:function() {
    return this._x;
  }, set:function(a) {
    this._x = a;
    this.onChangeCallback();
  }}, y:{get:function() {
    return this._y;
  }, set:function(a) {
    this._y = a;
    this.onChangeCallback();
  }}, z:{get:function() {
    return this._z;
  }, set:function(a) {
    this._z = a;
    this.onChangeCallback();
  }}, w:{get:function() {
    return this._w;
  }, set:function(a) {
    this._w = a;
    this.onChangeCallback();
  }}});
  Object.assign(f.prototype, {isQuaternion:!0, set:function(a, b, e, c) {
    this._x = a;
    this._y = b;
    this._z = e;
    this._w = c;
    this.onChangeCallback();
    return this;
  }, clone:function() {
    return new this.constructor(this._x, this._y, this._z, this._w);
  }, copy:function(a) {
    this._x = a.x;
    this._y = a.y;
    this._z = a.z;
    this._w = a.w;
    this.onChangeCallback();
    return this;
  }, setFromEuler:function(a, b) {
    if (!a || !a.isEuler) {
      throw Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");
    }
    var g = a._x, e = a._y, r = a._z;
    a = a.order;
    var c = Math.cos, d = Math.sin, l = c(g / 2), f = c(e / 2);
    c = c(r / 2);
    g = d(g / 2);
    e = d(e / 2);
    r = d(r / 2);
    "XYZ" === a ? (this._x = g * f * c + l * e * r, this._y = l * e * c - g * f * r, this._z = l * f * r + g * e * c, this._w = l * f * c - g * e * r) : "YXZ" === a ? (this._x = g * f * c + l * e * r, this._y = l * e * c - g * f * r, this._z = l * f * r - g * e * c, this._w = l * f * c + g * e * r) : "ZXY" === a ? (this._x = g * f * c - l * e * r, this._y = l * e * c + g * f * r, this._z = l * f * r + g * e * c, this._w = l * f * c - g * e * r) : "ZYX" === a ? (this._x = g * f * c - l * e * r, this._y = 
    l * e * c + g * f * r, this._z = l * f * r - g * e * c, this._w = l * f * c + g * e * r) : "YZX" === a ? (this._x = g * f * c + l * e * r, this._y = l * e * c + g * f * r, this._z = l * f * r - g * e * c, this._w = l * f * c - g * e * r) : "XZY" === a && (this._x = g * f * c - l * e * r, this._y = l * e * c - g * f * r, this._z = l * f * r + g * e * c, this._w = l * f * c + g * e * r);
    if (!1 !== b) {
      this.onChangeCallback();
    }
    return this;
  }, setFromAxisAngle:function(a, b) {
    b /= 2;
    var g = Math.sin(b);
    this._x = a.x * g;
    this._y = a.y * g;
    this._z = a.z * g;
    this._w = Math.cos(b);
    this.onChangeCallback();
    return this;
  }, setFromRotationMatrix:function(a) {
    var g = a.elements, b = g[0];
    a = g[4];
    var e = g[8], c = g[1], d = g[5], l = g[9], f = g[2], h = g[6];
    g = g[10];
    var p = b + d + g;
    0 < p ? (b = .5 / Math.sqrt(p + 1), this._w = .25 / b, this._x = (h - l) * b, this._y = (e - f) * b, this._z = (c - a) * b) : b > d && b > g ? (b = 2 * Math.sqrt(1 + b - d - g), this._w = (h - l) / b, this._x = .25 * b, this._y = (a + c) / b, this._z = (e + f) / b) : d > g ? (b = 2 * Math.sqrt(1 + d - b - g), this._w = (e - f) / b, this._x = (a + c) / b, this._y = .25 * b, this._z = (l + h) / b) : (b = 2 * Math.sqrt(1 + g - b - d), this._w = (c - a) / b, this._x = (e + f) / b, this._y = (l + 
    h) / b, this._z = .25 * b);
    this.onChangeCallback();
    return this;
  }, setFromUnitVectors:function() {
    var a = new d, b;
    return function(g, e) {
      void 0 === a && (a = new d);
      b = g.dot(e) + 1;
      1E-6 > b ? (b = 0, Math.abs(g.x) > Math.abs(g.z) ? a.set(-g.y, g.x, 0) : a.set(0, -g.z, g.y)) : a.crossVectors(g, e);
      this._x = a.x;
      this._y = a.y;
      this._z = a.z;
      this._w = b;
      return this.normalize();
    };
  }(), angleTo:function(a) {
    return 2 * Math.acos(Math.abs(ia.clamp(this.dot(a), -1, 1)));
  }, rotateTowards:function(a, b) {
    var g = this.angleTo(a);
    if (0 === g) {
      return this;
    }
    this.slerp(a, Math.min(1, b / g));
    return this;
  }, inverse:function() {
    return this.conjugate();
  }, conjugate:function() {
    this._x *= -1;
    this._y *= -1;
    this._z *= -1;
    this.onChangeCallback();
    return this;
  }, dot:function(a) {
    return this._x * a._x + this._y * a._y + this._z * a._z + this._w * a._w;
  }, lengthSq:function() {
    return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
  }, length:function() {
    return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
  }, normalize:function() {
    var a = this.length();
    0 === a ? (this._z = this._y = this._x = 0, this._w = 1) : (a = 1 / a, this._x *= a, this._y *= a, this._z *= a, this._w *= a);
    this.onChangeCallback();
    return this;
  }, multiply:function(a, b) {
    return void 0 !== b ? (console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."), this.multiplyQuaternions(a, b)) : this.multiplyQuaternions(this, a);
  }, premultiply:function(a) {
    return this.multiplyQuaternions(a, this);
  }, multiplyQuaternions:function(a, b) {
    var g = a._x, e = a._y, r = a._z;
    a = a._w;
    var c = b._x, d = b._y, l = b._z;
    b = b._w;
    this._x = g * b + a * c + e * l - r * d;
    this._y = e * b + a * d + r * c - g * l;
    this._z = r * b + a * l + g * d - e * c;
    this._w = a * b - g * c - e * d - r * l;
    this.onChangeCallback();
    return this;
  }, slerp:function(a, b) {
    if (0 === b) {
      return this;
    }
    if (1 === b) {
      return this.copy(a);
    }
    var g = this._x, e = this._y, r = this._z, c = this._w, d = c * a._w + g * a._x + e * a._y + r * a._z;
    0 > d ? (this._w = -a._w, this._x = -a._x, this._y = -a._y, this._z = -a._z, d = -d) : this.copy(a);
    if (1 <= d) {
      return this._w = c, this._x = g, this._y = e, this._z = r, this;
    }
    a = 1 - d * d;
    if (a <= Number.EPSILON) {
      return d = 1 - b, this._w = d * c + b * this._w, this._x = d * g + b * this._x, this._y = d * e + b * this._y, this._z = d * r + b * this._z, this.normalize();
    }
    a = Math.sqrt(a);
    var l = Math.atan2(a, d);
    d = Math.sin((1 - b) * l) / a;
    b = Math.sin(b * l) / a;
    this._w = c * d + this._w * b;
    this._x = g * d + this._x * b;
    this._y = e * d + this._y * b;
    this._z = r * d + this._z * b;
    this.onChangeCallback();
    return this;
  }, equals:function(a) {
    return a._x === this._x && a._y === this._y && a._z === this._z && a._w === this._w;
  }, fromArray:function(a, b) {
    void 0 === b && (b = 0);
    this._x = a[b];
    this._y = a[b + 1];
    this._z = a[b + 2];
    this._w = a[b + 3];
    this.onChangeCallback();
    return this;
  }, toArray:function(a, b) {
    void 0 === a && (a = []);
    void 0 === b && (b = 0);
    a[b] = this._x;
    a[b + 1] = this._y;
    a[b + 2] = this._z;
    a[b + 3] = this._w;
    return a;
  }, onChange:function(a) {
    this.onChangeCallback = a;
    return this;
  }, onChangeCallback:function() {
  }});
  Object.assign(d.prototype, {isVector3:!0, set:function(a, b, e) {
    this.x = a;
    this.y = b;
    this.z = e;
    return this;
  }, setScalar:function(a) {
    this.z = this.y = this.x = a;
    return this;
  }, setX:function(a) {
    this.x = a;
    return this;
  }, setY:function(a) {
    this.y = a;
    return this;
  }, setZ:function(a) {
    this.z = a;
    return this;
  }, setComponent:function(a, b) {
    switch(a) {
      case 0:
        this.x = b;
        break;
      case 1:
        this.y = b;
        break;
      case 2:
        this.z = b;
        break;
      default:
        throw Error("index is out of range: " + a);
    }
    return this;
  }, getComponent:function(a) {
    switch(a) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      default:
        throw Error("index is out of range: " + a);
    }
  }, clone:function() {
    return new this.constructor(this.x, this.y, this.z);
  }, copy:function(a) {
    this.x = a.x;
    this.y = a.y;
    this.z = a.z;
    return this;
  }, add:function(a, b) {
    if (void 0 !== b) {
      return console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(a, b);
    }
    this.x += a.x;
    this.y += a.y;
    this.z += a.z;
    return this;
  }, addScalar:function(a) {
    this.x += a;
    this.y += a;
    this.z += a;
    return this;
  }, addVectors:function(a, b) {
    this.x = a.x + b.x;
    this.y = a.y + b.y;
    this.z = a.z + b.z;
    return this;
  }, addScaledVector:function(a, b) {
    this.x += a.x * b;
    this.y += a.y * b;
    this.z += a.z * b;
    return this;
  }, sub:function(a, b) {
    if (void 0 !== b) {
      return console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(a, b);
    }
    this.x -= a.x;
    this.y -= a.y;
    this.z -= a.z;
    return this;
  }, subScalar:function(a) {
    this.x -= a;
    this.y -= a;
    this.z -= a;
    return this;
  }, subVectors:function(a, b) {
    this.x = a.x - b.x;
    this.y = a.y - b.y;
    this.z = a.z - b.z;
    return this;
  }, multiply:function(a, b) {
    if (void 0 !== b) {
      return console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."), this.multiplyVectors(a, b);
    }
    this.x *= a.x;
    this.y *= a.y;
    this.z *= a.z;
    return this;
  }, multiplyScalar:function(a) {
    this.x *= a;
    this.y *= a;
    this.z *= a;
    return this;
  }, multiplyVectors:function(a, b) {
    this.x = a.x * b.x;
    this.y = a.y * b.y;
    this.z = a.z * b.z;
    return this;
  }, applyEuler:function() {
    var a = new f;
    return function(g) {
      g && g.isEuler || console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.");
      return this.applyQuaternion(a.setFromEuler(g));
    };
  }(), applyAxisAngle:function() {
    var a = new f;
    return function(g, b) {
      return this.applyQuaternion(a.setFromAxisAngle(g, b));
    };
  }(), applyMatrix3:function(a) {
    var g = this.x, b = this.y, e = this.z;
    a = a.elements;
    this.x = a[0] * g + a[3] * b + a[6] * e;
    this.y = a[1] * g + a[4] * b + a[7] * e;
    this.z = a[2] * g + a[5] * b + a[8] * e;
    return this;
  }, applyMatrix4:function(a) {
    var g = this.x, b = this.y, e = this.z;
    a = a.elements;
    var c = 1 / (a[3] * g + a[7] * b + a[11] * e + a[15]);
    this.x = (a[0] * g + a[4] * b + a[8] * e + a[12]) * c;
    this.y = (a[1] * g + a[5] * b + a[9] * e + a[13]) * c;
    this.z = (a[2] * g + a[6] * b + a[10] * e + a[14]) * c;
    return this;
  }, applyQuaternion:function(a) {
    var g = this.x, b = this.y, e = this.z, c = a.x, d = a.y, l = a.z;
    a = a.w;
    var f = a * g + d * e - l * b, h = a * b + l * g - c * e, p = a * e + c * b - d * g;
    g = -c * g - d * b - l * e;
    this.x = f * a + g * -c + h * -l - p * -d;
    this.y = h * a + g * -d + p * -c - f * -l;
    this.z = p * a + g * -l + f * -d - h * -c;
    return this;
  }, project:function(a) {
    return this.applyMatrix4(a.matrixWorldInverse).applyMatrix4(a.projectionMatrix);
  }, unproject:function() {
    var a = new b;
    return function(g) {
      return this.applyMatrix4(a.getInverse(g.projectionMatrix)).applyMatrix4(g.matrixWorld);
    };
  }(), transformDirection:function(a) {
    var g = this.x, b = this.y, e = this.z;
    a = a.elements;
    this.x = a[0] * g + a[4] * b + a[8] * e;
    this.y = a[1] * g + a[5] * b + a[9] * e;
    this.z = a[2] * g + a[6] * b + a[10] * e;
    return this.normalize();
  }, divide:function(a) {
    this.x /= a.x;
    this.y /= a.y;
    this.z /= a.z;
    return this;
  }, divideScalar:function(a) {
    return this.multiplyScalar(1 / a);
  }, min:function(a) {
    this.x = Math.min(this.x, a.x);
    this.y = Math.min(this.y, a.y);
    this.z = Math.min(this.z, a.z);
    return this;
  }, max:function(a) {
    this.x = Math.max(this.x, a.x);
    this.y = Math.max(this.y, a.y);
    this.z = Math.max(this.z, a.z);
    return this;
  }, clamp:function(a, b) {
    this.x = Math.max(a.x, Math.min(b.x, this.x));
    this.y = Math.max(a.y, Math.min(b.y, this.y));
    this.z = Math.max(a.z, Math.min(b.z, this.z));
    return this;
  }, clampScalar:function() {
    var a = new d, b = new d;
    return function(g, e) {
      a.set(g, g, g);
      b.set(e, e, e);
      return this.clamp(a, b);
    };
  }(), clampLength:function(a, b) {
    var g = this.length();
    return this.divideScalar(g || 1).multiplyScalar(Math.max(a, Math.min(b, g)));
  }, floor:function() {
    this.x = Math.floor(this.x);
    this.y = Math.floor(this.y);
    this.z = Math.floor(this.z);
    return this;
  }, ceil:function() {
    this.x = Math.ceil(this.x);
    this.y = Math.ceil(this.y);
    this.z = Math.ceil(this.z);
    return this;
  }, round:function() {
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    this.z = Math.round(this.z);
    return this;
  }, roundToZero:function() {
    this.x = 0 > this.x ? Math.ceil(this.x) : Math.floor(this.x);
    this.y = 0 > this.y ? Math.ceil(this.y) : Math.floor(this.y);
    this.z = 0 > this.z ? Math.ceil(this.z) : Math.floor(this.z);
    return this;
  }, negate:function() {
    this.x = -this.x;
    this.y = -this.y;
    this.z = -this.z;
    return this;
  }, dot:function(a) {
    return this.x * a.x + this.y * a.y + this.z * a.z;
  }, lengthSq:function() {
    return this.x * this.x + this.y * this.y + this.z * this.z;
  }, length:function() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
  }, manhattanLength:function() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
  }, normalize:function() {
    return this.divideScalar(this.length() || 1);
  }, setLength:function(a) {
    return this.normalize().multiplyScalar(a);
  }, lerp:function(a, b) {
    this.x += (a.x - this.x) * b;
    this.y += (a.y - this.y) * b;
    this.z += (a.z - this.z) * b;
    return this;
  }, lerpVectors:function(a, b, e) {
    return this.subVectors(b, a).multiplyScalar(e).add(a);
  }, cross:function(a, b) {
    return void 0 !== b ? (console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."), this.crossVectors(a, b)) : this.crossVectors(this, a);
  }, crossVectors:function(a, b) {
    var g = a.x, e = a.y;
    a = a.z;
    var c = b.x, r = b.y;
    b = b.z;
    this.x = e * b - a * r;
    this.y = a * c - g * b;
    this.z = g * r - e * c;
    return this;
  }, projectOnVector:function(a) {
    var g = a.dot(this) / a.lengthSq();
    return this.copy(a).multiplyScalar(g);
  }, projectOnPlane:function() {
    var a = new d;
    return function(g) {
      a.copy(this).projectOnVector(g);
      return this.sub(a);
    };
  }(), reflect:function() {
    var a = new d;
    return function(g) {
      return this.sub(a.copy(g).multiplyScalar(2 * this.dot(g)));
    };
  }(), angleTo:function(a) {
    a = this.dot(a) / Math.sqrt(this.lengthSq() * a.lengthSq());
    return Math.acos(ia.clamp(a, -1, 1));
  }, distanceTo:function(a) {
    return Math.sqrt(this.distanceToSquared(a));
  }, distanceToSquared:function(a) {
    var g = this.x - a.x, b = this.y - a.y;
    a = this.z - a.z;
    return g * g + b * b + a * a;
  }, manhattanDistanceTo:function(a) {
    return Math.abs(this.x - a.x) + Math.abs(this.y - a.y) + Math.abs(this.z - a.z);
  }, setFromSpherical:function(a) {
    return this.setFromSphericalCoords(a.radius, a.phi, a.theta);
  }, setFromSphericalCoords:function(a, b, e) {
    var g = Math.sin(b) * a;
    this.x = g * Math.sin(e);
    this.y = Math.cos(b) * a;
    this.z = g * Math.cos(e);
    return this;
  }, setFromCylindrical:function(a) {
    return this.setFromCylindricalCoords(a.radius, a.theta, a.y);
  }, setFromCylindricalCoords:function(a, b, e) {
    this.x = a * Math.sin(b);
    this.y = e;
    this.z = a * Math.cos(b);
    return this;
  }, setFromMatrixPosition:function(a) {
    a = a.elements;
    this.x = a[12];
    this.y = a[13];
    this.z = a[14];
    return this;
  }, setFromMatrixScale:function(a) {
    var g = this.setFromMatrixColumn(a, 0).length(), b = this.setFromMatrixColumn(a, 1).length();
    a = this.setFromMatrixColumn(a, 2).length();
    this.x = g;
    this.y = b;
    this.z = a;
    return this;
  }, setFromMatrixColumn:function(a, b) {
    return this.fromArray(a.elements, 4 * b);
  }, equals:function(a) {
    return a.x === this.x && a.y === this.y && a.z === this.z;
  }, fromArray:function(a, b) {
    void 0 === b && (b = 0);
    this.x = a[b];
    this.y = a[b + 1];
    this.z = a[b + 2];
    return this;
  }, toArray:function(a, b) {
    void 0 === a && (a = []);
    void 0 === b && (b = 0);
    a[b] = this.x;
    a[b + 1] = this.y;
    a[b + 2] = this.z;
    return a;
  }, fromBufferAttribute:function(a, b, e) {
    void 0 !== e && console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute().");
    this.x = a.getX(b);
    this.y = a.getY(b);
    this.z = a.getZ(b);
    return this;
  }});
  Object.assign(h.prototype, {isMatrix3:!0, set:function(a, b, e, c, d, l, f, h, p) {
    var g = this.elements;
    g[0] = a;
    g[1] = c;
    g[2] = f;
    g[3] = b;
    g[4] = d;
    g[5] = h;
    g[6] = e;
    g[7] = l;
    g[8] = p;
    return this;
  }, identity:function() {
    this.set(1, 0, 0, 0, 1, 0, 0, 0, 1);
    return this;
  }, clone:function() {
    return (new this.constructor).fromArray(this.elements);
  }, copy:function(a) {
    var g = this.elements;
    a = a.elements;
    g[0] = a[0];
    g[1] = a[1];
    g[2] = a[2];
    g[3] = a[3];
    g[4] = a[4];
    g[5] = a[5];
    g[6] = a[6];
    g[7] = a[7];
    g[8] = a[8];
    return this;
  }, setFromMatrix4:function(a) {
    a = a.elements;
    this.set(a[0], a[4], a[8], a[1], a[5], a[9], a[2], a[6], a[10]);
    return this;
  }, applyToBufferAttribute:function() {
    var a = new d;
    return function(g) {
      for (var b = 0, e = g.count; b < e; b++) {
        a.x = g.getX(b), a.y = g.getY(b), a.z = g.getZ(b), a.applyMatrix3(this), g.setXYZ(b, a.x, a.y, a.z);
      }
      return g;
    };
  }(), multiply:function(a) {
    return this.multiplyMatrices(this, a);
  }, premultiply:function(a) {
    return this.multiplyMatrices(a, this);
  }, multiplyMatrices:function(a, b) {
    var g = a.elements, e = b.elements;
    b = this.elements;
    a = g[0];
    var c = g[3], d = g[6], r = g[1], l = g[4], f = g[7], h = g[2], p = g[5];
    g = g[8];
    var k = e[0], m = e[3], n = e[6], t = e[1], u = e[4], q = e[7], v = e[2], w = e[5];
    e = e[8];
    b[0] = a * k + c * t + d * v;
    b[3] = a * m + c * u + d * w;
    b[6] = a * n + c * q + d * e;
    b[1] = r * k + l * t + f * v;
    b[4] = r * m + l * u + f * w;
    b[7] = r * n + l * q + f * e;
    b[2] = h * k + p * t + g * v;
    b[5] = h * m + p * u + g * w;
    b[8] = h * n + p * q + g * e;
    return this;
  }, multiplyScalar:function(a) {
    var g = this.elements;
    g[0] *= a;
    g[3] *= a;
    g[6] *= a;
    g[1] *= a;
    g[4] *= a;
    g[7] *= a;
    g[2] *= a;
    g[5] *= a;
    g[8] *= a;
    return this;
  }, determinant:function() {
    var a = this.elements, b = a[0], e = a[1], c = a[2], d = a[3], l = a[4], f = a[5], h = a[6], p = a[7];
    a = a[8];
    return b * l * a - b * f * p - e * d * a + e * f * h + c * d * p - c * l * h;
  }, getInverse:function(a, b) {
    a && a.isMatrix4 && console.error("THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.");
    var g = a.elements;
    a = this.elements;
    var e = g[0], c = g[1], d = g[2], r = g[3], l = g[4], f = g[5], h = g[6], p = g[7];
    g = g[8];
    var k = g * l - f * p, m = f * h - g * r, n = p * r - l * h, t = e * k + c * m + d * n;
    if (0 === t) {
      if (!0 === b) {
        throw Error("THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0");
      }
      console.warn("THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0");
      return this.identity();
    }
    b = 1 / t;
    a[0] = k * b;
    a[1] = (d * p - g * c) * b;
    a[2] = (f * c - d * l) * b;
    a[3] = m * b;
    a[4] = (g * e - d * h) * b;
    a[5] = (d * r - f * e) * b;
    a[6] = n * b;
    a[7] = (c * h - p * e) * b;
    a[8] = (l * e - c * r) * b;
    return this;
  }, transpose:function() {
    var a = this.elements, b = a[1];
    a[1] = a[3];
    a[3] = b;
    b = a[2];
    a[2] = a[6];
    a[6] = b;
    b = a[5];
    a[5] = a[7];
    a[7] = b;
    return this;
  }, getNormalMatrix:function(a) {
    return this.setFromMatrix4(a).getInverse(this).transpose();
  }, transposeIntoArray:function(a) {
    var g = this.elements;
    a[0] = g[0];
    a[1] = g[3];
    a[2] = g[6];
    a[3] = g[1];
    a[4] = g[4];
    a[5] = g[7];
    a[6] = g[2];
    a[7] = g[5];
    a[8] = g[8];
    return this;
  }, setUvTransform:function(a, b, e, c, d, l, f) {
    var g = Math.cos(d);
    d = Math.sin(d);
    this.set(e * g, e * d, -e * (g * l + d * f) + l + a, -c * d, c * g, -c * (-d * l + g * f) + f + b, 0, 0, 1);
  }, scale:function(a, b) {
    var g = this.elements;
    g[0] *= a;
    g[3] *= a;
    g[6] *= a;
    g[1] *= b;
    g[4] *= b;
    g[7] *= b;
    return this;
  }, rotate:function(a) {
    var g = Math.cos(a);
    a = Math.sin(a);
    var b = this.elements, e = b[0], c = b[3], d = b[6], l = b[1], f = b[4], h = b[7];
    b[0] = g * e + a * l;
    b[3] = g * c + a * f;
    b[6] = g * d + a * h;
    b[1] = -a * e + g * l;
    b[4] = -a * c + g * f;
    b[7] = -a * d + g * h;
    return this;
  }, translate:function(a, b) {
    var g = this.elements;
    g[0] += a * g[2];
    g[3] += a * g[5];
    g[6] += a * g[8];
    g[1] += b * g[2];
    g[4] += b * g[5];
    g[7] += b * g[8];
    return this;
  }, equals:function(a) {
    var g = this.elements;
    a = a.elements;
    for (var b = 0; 9 > b; b++) {
      if (g[b] !== a[b]) {
        return !1;
      }
    }
    return !0;
  }, fromArray:function(a, b) {
    void 0 === b && (b = 0);
    for (var g = 0; 9 > g; g++) {
      this.elements[g] = a[g + b];
    }
    return this;
  }, toArray:function(a, b) {
    void 0 === a && (a = []);
    void 0 === b && (b = 0);
    var g = this.elements;
    a[b] = g[0];
    a[b + 1] = g[1];
    a[b + 2] = g[2];
    a[b + 3] = g[3];
    a[b + 4] = g[4];
    a[b + 5] = g[5];
    a[b + 6] = g[6];
    a[b + 7] = g[7];
    a[b + 8] = g[8];
    return a;
  }});
  var Mc, Nb = {getDataURL:function(a) {
    if ("undefined" == typeof HTMLCanvasElement) {
      return a.src;
    }
    if (!(a instanceof HTMLCanvasElement)) {
      void 0 === Mc && (Mc = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas"));
      Mc.width = a.width;
      Mc.height = a.height;
      var g = Mc.getContext("2d");
      a instanceof ImageData ? g.putImageData(a, 0, 0) : g.drawImage(a, 0, 0, a.width, a.height);
      a = Mc;
    }
    return 2048 < a.width || 2048 < a.height ? a.toDataURL("image/jpeg", .6) : a.toDataURL("image/png");
  }}, Xf = 0;
  n.DEFAULT_IMAGE = void 0;
  n.DEFAULT_MAPPING = 300;
  n.prototype = Object.assign(Object.create(c.prototype), {constructor:n, isTexture:!0, updateMatrix:function() {
    this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(a) {
    this.name = a.name;
    this.image = a.image;
    this.mipmaps = a.mipmaps.slice(0);
    this.mapping = a.mapping;
    this.wrapS = a.wrapS;
    this.wrapT = a.wrapT;
    this.magFilter = a.magFilter;
    this.minFilter = a.minFilter;
    this.anisotropy = a.anisotropy;
    this.format = a.format;
    this.type = a.type;
    this.offset.copy(a.offset);
    this.repeat.copy(a.repeat);
    this.center.copy(a.center);
    this.rotation = a.rotation;
    this.matrixAutoUpdate = a.matrixAutoUpdate;
    this.matrix.copy(a.matrix);
    this.generateMipmaps = a.generateMipmaps;
    this.premultiplyAlpha = a.premultiplyAlpha;
    this.flipY = a.flipY;
    this.unpackAlignment = a.unpackAlignment;
    this.encoding = a.encoding;
    return this;
  }, toJSON:function(a) {
    var g = void 0 === a || "string" === typeof a;
    if (!g && void 0 !== a.textures[this.uuid]) {
      return a.textures[this.uuid];
    }
    var b = {metadata:{version:4.5, type:"Texture", generator:"Texture.toJSON"}, uuid:this.uuid, name:this.name, mapping:this.mapping, repeat:[this.repeat.x, this.repeat.y], offset:[this.offset.x, this.offset.y], center:[this.center.x, this.center.y], rotation:this.rotation, wrap:[this.wrapS, this.wrapT], format:this.format, type:this.type, encoding:this.encoding, minFilter:this.minFilter, magFilter:this.magFilter, anisotropy:this.anisotropy, flipY:this.flipY, premultiplyAlpha:this.premultiplyAlpha, 
    unpackAlignment:this.unpackAlignment};
    if (void 0 !== this.image) {
      var e = this.image;
      void 0 === e.uuid && (e.uuid = ia.generateUUID());
      if (!g && void 0 === a.images[e.uuid]) {
        if (Array.isArray(e)) {
          for (var c = [], d = 0, l = e.length; d < l; d++) {
            c.push(Nb.getDataURL(e[d]));
          }
        } else {
          c = Nb.getDataURL(e);
        }
        a.images[e.uuid] = {uuid:e.uuid, url:c};
      }
      b.image = e.uuid;
    }
    g || (a.textures[this.uuid] = b);
    return b;
  }, dispose:function() {
    this.dispatchEvent({type:"dispose"});
  }, transformUv:function(a) {
    if (300 !== this.mapping) {
      return a;
    }
    a.applyMatrix3(this.matrix);
    if (0 > a.x || 1 < a.x) {
      switch(this.wrapS) {
        case 1E3:
          a.x -= Math.floor(a.x);
          break;
        case 1001:
          a.x = 0 > a.x ? 0 : 1;
          break;
        case 1002:
          a.x = 1 === Math.abs(Math.floor(a.x) % 2) ? Math.ceil(a.x) - a.x : a.x - Math.floor(a.x);
      }
    }
    if (0 > a.y || 1 < a.y) {
      switch(this.wrapT) {
        case 1E3:
          a.y -= Math.floor(a.y);
          break;
        case 1001:
          a.y = 0 > a.y ? 0 : 1;
          break;
        case 1002:
          a.y = 1 === Math.abs(Math.floor(a.y) % 2) ? Math.ceil(a.y) - a.y : a.y - Math.floor(a.y);
      }
    }
    this.flipY && (a.y = 1 - a.y);
    return a;
  }});
  Object.defineProperty(n.prototype, "needsUpdate", {set:function(a) {
    !0 === a && this.version++;
  }});
  Object.assign(q.prototype, {isVector4:!0, set:function(a, b, e, c) {
    this.x = a;
    this.y = b;
    this.z = e;
    this.w = c;
    return this;
  }, setScalar:function(a) {
    this.w = this.z = this.y = this.x = a;
    return this;
  }, setX:function(a) {
    this.x = a;
    return this;
  }, setY:function(a) {
    this.y = a;
    return this;
  }, setZ:function(a) {
    this.z = a;
    return this;
  }, setW:function(a) {
    this.w = a;
    return this;
  }, setComponent:function(a, b) {
    switch(a) {
      case 0:
        this.x = b;
        break;
      case 1:
        this.y = b;
        break;
      case 2:
        this.z = b;
        break;
      case 3:
        this.w = b;
        break;
      default:
        throw Error("index is out of range: " + a);
    }
    return this;
  }, getComponent:function(a) {
    switch(a) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      case 3:
        return this.w;
      default:
        throw Error("index is out of range: " + a);
    }
  }, clone:function() {
    return new this.constructor(this.x, this.y, this.z, this.w);
  }, copy:function(a) {
    this.x = a.x;
    this.y = a.y;
    this.z = a.z;
    this.w = void 0 !== a.w ? a.w : 1;
    return this;
  }, add:function(a, b) {
    if (void 0 !== b) {
      return console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(a, b);
    }
    this.x += a.x;
    this.y += a.y;
    this.z += a.z;
    this.w += a.w;
    return this;
  }, addScalar:function(a) {
    this.x += a;
    this.y += a;
    this.z += a;
    this.w += a;
    return this;
  }, addVectors:function(a, b) {
    this.x = a.x + b.x;
    this.y = a.y + b.y;
    this.z = a.z + b.z;
    this.w = a.w + b.w;
    return this;
  }, addScaledVector:function(a, b) {
    this.x += a.x * b;
    this.y += a.y * b;
    this.z += a.z * b;
    this.w += a.w * b;
    return this;
  }, sub:function(a, b) {
    if (void 0 !== b) {
      return console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(a, b);
    }
    this.x -= a.x;
    this.y -= a.y;
    this.z -= a.z;
    this.w -= a.w;
    return this;
  }, subScalar:function(a) {
    this.x -= a;
    this.y -= a;
    this.z -= a;
    this.w -= a;
    return this;
  }, subVectors:function(a, b) {
    this.x = a.x - b.x;
    this.y = a.y - b.y;
    this.z = a.z - b.z;
    this.w = a.w - b.w;
    return this;
  }, multiplyScalar:function(a) {
    this.x *= a;
    this.y *= a;
    this.z *= a;
    this.w *= a;
    return this;
  }, applyMatrix4:function(a) {
    var g = this.x, b = this.y, e = this.z, c = this.w;
    a = a.elements;
    this.x = a[0] * g + a[4] * b + a[8] * e + a[12] * c;
    this.y = a[1] * g + a[5] * b + a[9] * e + a[13] * c;
    this.z = a[2] * g + a[6] * b + a[10] * e + a[14] * c;
    this.w = a[3] * g + a[7] * b + a[11] * e + a[15] * c;
    return this;
  }, divideScalar:function(a) {
    return this.multiplyScalar(1 / a);
  }, setAxisAngleFromQuaternion:function(a) {
    this.w = 2 * Math.acos(a.w);
    var g = Math.sqrt(1 - a.w * a.w);
    1E-4 > g ? (this.x = 1, this.z = this.y = 0) : (this.x = a.x / g, this.y = a.y / g, this.z = a.z / g);
    return this;
  }, setAxisAngleFromRotationMatrix:function(a) {
    a = a.elements;
    var g = a[0], b = a[4], e = a[8], c = a[1], d = a[5], l = a[9], f = a[2], h = a[6], p = a[10];
    if (.01 > Math.abs(b - c) && .01 > Math.abs(e - f) && .01 > Math.abs(l - h)) {
      if (.1 > Math.abs(b + c) && .1 > Math.abs(e + f) && .1 > Math.abs(l + h) && .1 > Math.abs(g + d + p - 3)) {
        return this.set(1, 0, 0, 0), this;
      }
      a = Math.PI;
      g = (g + 1) / 2;
      d = (d + 1) / 2;
      p = (p + 1) / 2;
      b = (b + c) / 4;
      e = (e + f) / 4;
      l = (l + h) / 4;
      g > d && g > p ? .01 > g ? (h = 0, b = f = .707106781) : (h = Math.sqrt(g), f = b / h, b = e / h) : d > p ? .01 > d ? (h = .707106781, f = 0, b = .707106781) : (f = Math.sqrt(d), h = b / f, b = l / f) : .01 > p ? (f = h = .707106781, b = 0) : (b = Math.sqrt(p), h = e / b, f = l / b);
      this.set(h, f, b, a);
      return this;
    }
    a = Math.sqrt((h - l) * (h - l) + (e - f) * (e - f) + (c - b) * (c - b));
    .001 > Math.abs(a) && (a = 1);
    this.x = (h - l) / a;
    this.y = (e - f) / a;
    this.z = (c - b) / a;
    this.w = Math.acos((g + d + p - 1) / 2);
    return this;
  }, min:function(a) {
    this.x = Math.min(this.x, a.x);
    this.y = Math.min(this.y, a.y);
    this.z = Math.min(this.z, a.z);
    this.w = Math.min(this.w, a.w);
    return this;
  }, max:function(a) {
    this.x = Math.max(this.x, a.x);
    this.y = Math.max(this.y, a.y);
    this.z = Math.max(this.z, a.z);
    this.w = Math.max(this.w, a.w);
    return this;
  }, clamp:function(a, b) {
    this.x = Math.max(a.x, Math.min(b.x, this.x));
    this.y = Math.max(a.y, Math.min(b.y, this.y));
    this.z = Math.max(a.z, Math.min(b.z, this.z));
    this.w = Math.max(a.w, Math.min(b.w, this.w));
    return this;
  }, clampScalar:function() {
    var a, b;
    return function(g, e) {
      void 0 === a && (a = new q, b = new q);
      a.set(g, g, g, g);
      b.set(e, e, e, e);
      return this.clamp(a, b);
    };
  }(), clampLength:function(a, b) {
    var g = this.length();
    return this.divideScalar(g || 1).multiplyScalar(Math.max(a, Math.min(b, g)));
  }, floor:function() {
    this.x = Math.floor(this.x);
    this.y = Math.floor(this.y);
    this.z = Math.floor(this.z);
    this.w = Math.floor(this.w);
    return this;
  }, ceil:function() {
    this.x = Math.ceil(this.x);
    this.y = Math.ceil(this.y);
    this.z = Math.ceil(this.z);
    this.w = Math.ceil(this.w);
    return this;
  }, round:function() {
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    this.z = Math.round(this.z);
    this.w = Math.round(this.w);
    return this;
  }, roundToZero:function() {
    this.x = 0 > this.x ? Math.ceil(this.x) : Math.floor(this.x);
    this.y = 0 > this.y ? Math.ceil(this.y) : Math.floor(this.y);
    this.z = 0 > this.z ? Math.ceil(this.z) : Math.floor(this.z);
    this.w = 0 > this.w ? Math.ceil(this.w) : Math.floor(this.w);
    return this;
  }, negate:function() {
    this.x = -this.x;
    this.y = -this.y;
    this.z = -this.z;
    this.w = -this.w;
    return this;
  }, dot:function(a) {
    return this.x * a.x + this.y * a.y + this.z * a.z + this.w * a.w;
  }, lengthSq:function() {
    return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
  }, length:function() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
  }, manhattanLength:function() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
  }, normalize:function() {
    return this.divideScalar(this.length() || 1);
  }, setLength:function(a) {
    return this.normalize().multiplyScalar(a);
  }, lerp:function(a, b) {
    this.x += (a.x - this.x) * b;
    this.y += (a.y - this.y) * b;
    this.z += (a.z - this.z) * b;
    this.w += (a.w - this.w) * b;
    return this;
  }, lerpVectors:function(a, b, e) {
    return this.subVectors(b, a).multiplyScalar(e).add(a);
  }, equals:function(a) {
    return a.x === this.x && a.y === this.y && a.z === this.z && a.w === this.w;
  }, fromArray:function(a, b) {
    void 0 === b && (b = 0);
    this.x = a[b];
    this.y = a[b + 1];
    this.z = a[b + 2];
    this.w = a[b + 3];
    return this;
  }, toArray:function(a, b) {
    void 0 === a && (a = []);
    void 0 === b && (b = 0);
    a[b] = this.x;
    a[b + 1] = this.y;
    a[b + 2] = this.z;
    a[b + 3] = this.w;
    return a;
  }, fromBufferAttribute:function(a, b, e) {
    void 0 !== e && console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute().");
    this.x = a.getX(b);
    this.y = a.getY(b);
    this.z = a.getZ(b);
    this.w = a.getW(b);
    return this;
  }});
  m.prototype = Object.assign(Object.create(c.prototype), {constructor:m, isWebGLRenderTarget:!0, setSize:function(a, b) {
    if (this.width !== a || this.height !== b) {
      this.width = a, this.height = b, this.dispose();
    }
    this.viewport.set(0, 0, a, b);
    this.scissor.set(0, 0, a, b);
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(a) {
    this.width = a.width;
    this.height = a.height;
    this.viewport.copy(a.viewport);
    this.texture = a.texture.clone();
    this.depthBuffer = a.depthBuffer;
    this.stencilBuffer = a.stencilBuffer;
    this.depthTexture = a.depthTexture;
    return this;
  }, dispose:function() {
    this.dispatchEvent({type:"dispose"});
  }});
  t.prototype = Object.assign(Object.create(m.prototype), {constructor:t, isWebGLMultisampleRenderTarget:!0, copy:function(a) {
    m.prototype.copy.call(this, a);
    this.samples = a.samples;
    return this;
  }});
  e.prototype = Object.create(m.prototype);
  e.prototype.constructor = e;
  e.prototype.isWebGLRenderTargetCube = !0;
  l.prototype = Object.create(n.prototype);
  l.prototype.constructor = l;
  l.prototype.isDataTexture = !0;
  Object.assign(u.prototype, {isBox3:!0, set:function(a, b) {
    this.min.copy(a);
    this.max.copy(b);
    return this;
  }, setFromArray:function(a) {
    for (var g = Infinity, b = Infinity, e = Infinity, c = -Infinity, d = -Infinity, l = -Infinity, f = 0, h = a.length; f < h; f += 3) {
      var p = a[f], k = a[f + 1], m = a[f + 2];
      p < g && (g = p);
      k < b && (b = k);
      m < e && (e = m);
      p > c && (c = p);
      k > d && (d = k);
      m > l && (l = m);
    }
    this.min.set(g, b, e);
    this.max.set(c, d, l);
    return this;
  }, setFromBufferAttribute:function(a) {
    for (var g = Infinity, b = Infinity, e = Infinity, c = -Infinity, d = -Infinity, l = -Infinity, f = 0, h = a.count; f < h; f++) {
      var p = a.getX(f), k = a.getY(f), m = a.getZ(f);
      p < g && (g = p);
      k < b && (b = k);
      m < e && (e = m);
      p > c && (c = p);
      k > d && (d = k);
      m > l && (l = m);
    }
    this.min.set(g, b, e);
    this.max.set(c, d, l);
    return this;
  }, setFromPoints:function(a) {
    this.makeEmpty();
    for (var g = 0, b = a.length; g < b; g++) {
      this.expandByPoint(a[g]);
    }
    return this;
  }, setFromCenterAndSize:function() {
    var a = new d;
    return function(g, b) {
      b = a.copy(b).multiplyScalar(.5);
      this.min.copy(g).sub(b);
      this.max.copy(g).add(b);
      return this;
    };
  }(), setFromObject:function(a) {
    this.makeEmpty();
    return this.expandByObject(a);
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(a) {
    this.min.copy(a.min);
    this.max.copy(a.max);
    return this;
  }, makeEmpty:function() {
    this.min.x = this.min.y = this.min.z = Infinity;
    this.max.x = this.max.y = this.max.z = -Infinity;
    return this;
  }, isEmpty:function() {
    return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
  }, getCenter:function(a) {
    void 0 === a && (console.warn("THREE.Box3: .getCenter() target is now required"), a = new d);
    return this.isEmpty() ? a.set(0, 0, 0) : a.addVectors(this.min, this.max).multiplyScalar(.5);
  }, getSize:function(a) {
    void 0 === a && (console.warn("THREE.Box3: .getSize() target is now required"), a = new d);
    return this.isEmpty() ? a.set(0, 0, 0) : a.subVectors(this.max, this.min);
  }, expandByPoint:function(a) {
    this.min.min(a);
    this.max.max(a);
    return this;
  }, expandByVector:function(a) {
    this.min.sub(a);
    this.max.add(a);
    return this;
  }, expandByScalar:function(a) {
    this.min.addScalar(-a);
    this.max.addScalar(a);
    return this;
  }, expandByObject:function() {
    function a(a) {
      var g = a.geometry;
      if (void 0 !== g) {
        if (g.isGeometry) {
          for (g = g.vertices, e = 0, c = g.length; e < c; e++) {
            l.copy(g[e]), l.applyMatrix4(a.matrixWorld), b.expandByPoint(l);
          }
        } else {
          if (g.isBufferGeometry && (g = g.attributes.position, void 0 !== g)) {
            for (e = 0, c = g.count; e < c; e++) {
              l.fromBufferAttribute(g, e).applyMatrix4(a.matrixWorld), b.expandByPoint(l);
            }
          }
        }
      }
    }
    var b, e, c, l = new d;
    return function(g) {
      b = this;
      g.updateMatrixWorld(!0);
      g.traverse(a);
      return this;
    };
  }(), containsPoint:function(a) {
    return a.x < this.min.x || a.x > this.max.x || a.y < this.min.y || a.y > this.max.y || a.z < this.min.z || a.z > this.max.z ? !1 : !0;
  }, containsBox:function(a) {
    return this.min.x <= a.min.x && a.max.x <= this.max.x && this.min.y <= a.min.y && a.max.y <= this.max.y && this.min.z <= a.min.z && a.max.z <= this.max.z;
  }, getParameter:function(a, b) {
    void 0 === b && (console.warn("THREE.Box3: .getParameter() target is now required"), b = new d);
    return b.set((a.x - this.min.x) / (this.max.x - this.min.x), (a.y - this.min.y) / (this.max.y - this.min.y), (a.z - this.min.z) / (this.max.z - this.min.z));
  }, intersectsBox:function(a) {
    return a.max.x < this.min.x || a.min.x > this.max.x || a.max.y < this.min.y || a.min.y > this.max.y || a.max.z < this.min.z || a.min.z > this.max.z ? !1 : !0;
  }, intersectsSphere:function() {
    var a = new d;
    return function(g) {
      this.clampPoint(g.center, a);
      return a.distanceToSquared(g.center) <= g.radius * g.radius;
    };
  }(), intersectsPlane:function(a) {
    if (0 < a.normal.x) {
      var g = a.normal.x * this.min.x, b = a.normal.x * this.max.x;
    } else {
      g = a.normal.x * this.max.x, b = a.normal.x * this.min.x;
    }
    0 < a.normal.y ? (g += a.normal.y * this.min.y, b += a.normal.y * this.max.y) : (g += a.normal.y * this.max.y, b += a.normal.y * this.min.y);
    0 < a.normal.z ? (g += a.normal.z * this.min.z, b += a.normal.z * this.max.z) : (g += a.normal.z * this.max.z, b += a.normal.z * this.min.z);
    return g <= -a.constant && b >= -a.constant;
  }, intersectsTriangle:function() {
    function a(a) {
      var g, d = 0;
      for (g = a.length - 3; d <= g; d += 3) {
        p.fromArray(a, d);
        var l = m.x * Math.abs(p.x) + m.y * Math.abs(p.y) + m.z * Math.abs(p.z), r = b.dot(p), f = e.dot(p), h = c.dot(p);
        if (Math.max(-Math.max(r, f, h), Math.min(r, f, h)) > l) {
          return !1;
        }
      }
      return !0;
    }
    var b = new d, e = new d, c = new d, l = new d, f = new d, h = new d, p = new d, k = new d, m = new d, n = new d;
    return function(g) {
      if (this.isEmpty()) {
        return !1;
      }
      this.getCenter(k);
      m.subVectors(this.max, k);
      b.subVectors(g.a, k);
      e.subVectors(g.b, k);
      c.subVectors(g.c, k);
      l.subVectors(e, b);
      f.subVectors(c, e);
      h.subVectors(b, c);
      g = [0, -l.z, l.y, 0, -f.z, f.y, 0, -h.z, h.y, l.z, 0, -l.x, f.z, 0, -f.x, h.z, 0, -h.x, -l.y, l.x, 0, -f.y, f.x, 0, -h.y, h.x, 0];
      if (!a(g)) {
        return !1;
      }
      g = [1, 0, 0, 0, 1, 0, 0, 0, 1];
      if (!a(g)) {
        return !1;
      }
      n.crossVectors(l, f);
      g = [n.x, n.y, n.z];
      return a(g);
    };
  }(), clampPoint:function(a, b) {
    void 0 === b && (console.warn("THREE.Box3: .clampPoint() target is now required"), b = new d);
    return b.copy(a).clamp(this.min, this.max);
  }, distanceToPoint:function() {
    var a = new d;
    return function(g) {
      return a.copy(g).clamp(this.min, this.max).sub(g).length();
    };
  }(), getBoundingSphere:function() {
    var a = new d;
    return function(g) {
      void 0 === g && (console.warn("THREE.Box3: .getBoundingSphere() target is now required"), g = new w);
      this.getCenter(g.center);
      g.radius = .5 * this.getSize(a).length();
      return g;
    };
  }(), intersect:function(a) {
    this.min.max(a.min);
    this.max.min(a.max);
    this.isEmpty() && this.makeEmpty();
    return this;
  }, union:function(a) {
    this.min.min(a.min);
    this.max.max(a.max);
    return this;
  }, applyMatrix4:function() {
    var a = [new d, new d, new d, new d, new d, new d, new d, new d];
    return function(g) {
      if (this.isEmpty()) {
        return this;
      }
      a[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(g);
      a[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(g);
      a[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(g);
      a[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(g);
      a[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(g);
      a[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(g);
      a[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(g);
      a[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(g);
      this.setFromPoints(a);
      return this;
    };
  }(), translate:function(a) {
    this.min.add(a);
    this.max.add(a);
    return this;
  }, equals:function(a) {
    return a.min.equals(this.min) && a.max.equals(this.max);
  }});
  Object.assign(w.prototype, {set:function(a, b) {
    this.center.copy(a);
    this.radius = b;
    return this;
  }, setFromPoints:function() {
    var a = new u;
    return function(g, b) {
      var e = this.center;
      void 0 !== b ? e.copy(b) : a.setFromPoints(g).getCenter(e);
      for (var c = b = 0, d = g.length; c < d; c++) {
        b = Math.max(b, e.distanceToSquared(g[c]));
      }
      this.radius = Math.sqrt(b);
      return this;
    };
  }(), clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(a) {
    this.center.copy(a.center);
    this.radius = a.radius;
    return this;
  }, empty:function() {
    return 0 >= this.radius;
  }, containsPoint:function(a) {
    return a.distanceToSquared(this.center) <= this.radius * this.radius;
  }, distanceToPoint:function(a) {
    return a.distanceTo(this.center) - this.radius;
  }, intersectsSphere:function(a) {
    var g = this.radius + a.radius;
    return a.center.distanceToSquared(this.center) <= g * g;
  }, intersectsBox:function(a) {
    return a.intersectsSphere(this);
  }, intersectsPlane:function(a) {
    return Math.abs(a.distanceToPoint(this.center)) <= this.radius;
  }, clampPoint:function(a, b) {
    var g = this.center.distanceToSquared(a);
    void 0 === b && (console.warn("THREE.Sphere: .clampPoint() target is now required"), b = new d);
    b.copy(a);
    g > this.radius * this.radius && (b.sub(this.center).normalize(), b.multiplyScalar(this.radius).add(this.center));
    return b;
  }, getBoundingBox:function(a) {
    void 0 === a && (console.warn("THREE.Sphere: .getBoundingBox() target is now required"), a = new u);
    a.set(this.center, this.center);
    a.expandByScalar(this.radius);
    return a;
  }, applyMatrix4:function(a) {
    this.center.applyMatrix4(a);
    this.radius *= a.getMaxScaleOnAxis();
    return this;
  }, translate:function(a) {
    this.center.add(a);
    return this;
  }, equals:function(a) {
    return a.center.equals(this.center) && a.radius === this.radius;
  }});
  Object.assign(y.prototype, {set:function(a, b) {
    this.normal.copy(a);
    this.constant = b;
    return this;
  }, setComponents:function(a, b, e, c) {
    this.normal.set(a, b, e);
    this.constant = c;
    return this;
  }, setFromNormalAndCoplanarPoint:function(a, b) {
    this.normal.copy(a);
    this.constant = -b.dot(this.normal);
    return this;
  }, setFromCoplanarPoints:function() {
    var a = new d, b = new d;
    return function(g, e, c) {
      e = a.subVectors(c, e).cross(b.subVectors(g, e)).normalize();
      this.setFromNormalAndCoplanarPoint(e, g);
      return this;
    };
  }(), clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(a) {
    this.normal.copy(a.normal);
    this.constant = a.constant;
    return this;
  }, normalize:function() {
    var a = 1 / this.normal.length();
    this.normal.multiplyScalar(a);
    this.constant *= a;
    return this;
  }, negate:function() {
    this.constant *= -1;
    this.normal.negate();
    return this;
  }, distanceToPoint:function(a) {
    return this.normal.dot(a) + this.constant;
  }, distanceToSphere:function(a) {
    return this.distanceToPoint(a.center) - a.radius;
  }, projectPoint:function(a, b) {
    void 0 === b && (console.warn("THREE.Plane: .projectPoint() target is now required"), b = new d);
    return b.copy(this.normal).multiplyScalar(-this.distanceToPoint(a)).add(a);
  }, intersectLine:function() {
    var a = new d;
    return function(g, b) {
      void 0 === b && (console.warn("THREE.Plane: .intersectLine() target is now required"), b = new d);
      var e = g.delta(a), c = this.normal.dot(e);
      if (0 === c) {
        if (0 === this.distanceToPoint(g.start)) {
          return b.copy(g.start);
        }
      } else {
        if (c = -(g.start.dot(this.normal) + this.constant) / c, !(0 > c || 1 < c)) {
          return b.copy(e).multiplyScalar(c).add(g.start);
        }
      }
    };
  }(), intersectsLine:function(a) {
    var g = this.distanceToPoint(a.start);
    a = this.distanceToPoint(a.end);
    return 0 > g && 0 < a || 0 > a && 0 < g;
  }, intersectsBox:function(a) {
    return a.intersectsPlane(this);
  }, intersectsSphere:function(a) {
    return a.intersectsPlane(this);
  }, coplanarPoint:function(a) {
    void 0 === a && (console.warn("THREE.Plane: .coplanarPoint() target is now required"), a = new d);
    return a.copy(this.normal).multiplyScalar(-this.constant);
  }, applyMatrix4:function() {
    var a = new d, b = new h;
    return function(g, e) {
      e = e || b.getNormalMatrix(g);
      g = this.coplanarPoint(a).applyMatrix4(g);
      e = this.normal.applyMatrix3(e).normalize();
      this.constant = -g.dot(e);
      return this;
    };
  }(), translate:function(a) {
    this.constant -= a.dot(this.normal);
    return this;
  }, equals:function(a) {
    return a.normal.equals(this.normal) && a.constant === this.constant;
  }});
  Object.assign(x.prototype, {set:function(a, b, e, c, d, l) {
    var g = this.planes;
    g[0].copy(a);
    g[1].copy(b);
    g[2].copy(e);
    g[3].copy(c);
    g[4].copy(d);
    g[5].copy(l);
    return this;
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(a) {
    for (var g = this.planes, b = 0; 6 > b; b++) {
      g[b].copy(a.planes[b]);
    }
    return this;
  }, setFromMatrix:function(a) {
    var g = this.planes, b = a.elements;
    a = b[0];
    var e = b[1], c = b[2], d = b[3], l = b[4], f = b[5], h = b[6], p = b[7], k = b[8], m = b[9], n = b[10], t = b[11], u = b[12], q = b[13], v = b[14];
    b = b[15];
    g[0].setComponents(d - a, p - l, t - k, b - u).normalize();
    g[1].setComponents(d + a, p + l, t + k, b + u).normalize();
    g[2].setComponents(d + e, p + f, t + m, b + q).normalize();
    g[3].setComponents(d - e, p - f, t - m, b - q).normalize();
    g[4].setComponents(d - c, p - h, t - n, b - v).normalize();
    g[5].setComponents(d + c, p + h, t + n, b + v).normalize();
    return this;
  }, intersectsObject:function() {
    var a = new w;
    return function(g) {
      var b = g.geometry;
      null === b.boundingSphere && b.computeBoundingSphere();
      a.copy(b.boundingSphere).applyMatrix4(g.matrixWorld);
      return this.intersectsSphere(a);
    };
  }(), intersectsSprite:function() {
    var a = new w;
    return function(g) {
      a.center.set(0, 0, 0);
      a.radius = .7071067811865476;
      a.applyMatrix4(g.matrixWorld);
      return this.intersectsSphere(a);
    };
  }(), intersectsSphere:function(a) {
    var g = this.planes, b = a.center;
    a = -a.radius;
    for (var e = 0; 6 > e; e++) {
      if (g[e].distanceToPoint(b) < a) {
        return !1;
      }
    }
    return !0;
  }, intersectsBox:function() {
    var a = new d;
    return function(g) {
      for (var b = this.planes, e = 0; 6 > e; e++) {
        var c = b[e];
        a.x = 0 < c.normal.x ? g.max.x : g.min.x;
        a.y = 0 < c.normal.y ? g.max.y : g.min.y;
        a.z = 0 < c.normal.z ? g.max.z : g.min.z;
        if (0 > c.distanceToPoint(a)) {
          return !1;
        }
      }
      return !0;
    };
  }(), containsPoint:function(a) {
    for (var g = this.planes, b = 0; 6 > b; b++) {
      if (0 > g[b].distanceToPoint(a)) {
        return !1;
      }
    }
    return !0;
  }});
  var na = {alphamap_fragment:"#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif", alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif", alphatest_fragment:"#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif", aomap_fragment:"#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif", 
  aomap_pars_fragment:"#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif", begin_vertex:"vec3 transformed = vec3( position );", beginnormal_vertex:"vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif", bsdfs:"vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n#else\n\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t}\n\treturn 1.0;\n#endif\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\treturn specularColor * brdf.x + brdf.y;\n}\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tvec3 F = F_Schlick( specularColor, dotNV );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\tvec3 FssEss = F * brdf.x + brdf.y;\n\tfloat Ess = brdf.x + brdf.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}", 
  bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif", 
  clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\tif ( clipped ) discard;\n\t#endif\n#endif", 
  clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG ) && ! defined( MATCAP )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif", clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG ) && ! defined( MATCAP )\n\tvarying vec3 vViewPosition;\n#endif", clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG ) && ! defined( MATCAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif", 
  color_fragment:"#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif", color_pars_fragment:"#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif", color_pars_vertex:"#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif", color_vertex:"#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif", common:"#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}", 
  cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\tfloat rcpPowScale = 1.0 / powScale;\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV( sampler2D envMap, vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result = mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif", 
  defaultnormal_vertex:"vec3 transformedNormal = normalMatrix * objectNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = normalMatrix * objectTangent;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif", displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif", displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif", 
  emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif", emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif", encodings_fragment:"gl_FragColor = linearToOutputTexel( gl_FragColor );", encodings_pars_fragment:"\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat D = max( maxRange / maxRGB, 1.0 );\n\tD = min( floor( D ) / 255.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract( Le );\n\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n\treturn vec4( max( vRGB, 0.0 ), 1.0 );\n}", 
  envmap_fragment:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\treflectVec = normalize( reflectVec );\n\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\treflectVec = normalize( reflectVec );\n\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\tenvColor = envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif", 
  envmap_pars_fragment:"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\n\tuniform float reflectivity;\n\tuniform float envMapIntensity;\n#endif\n#ifdef USE_ENVMAP\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\n\t\tvarying vec3 vWorldPosition;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif", 
  envmap_pars_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif", envmap_physical_pars_fragment:"#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent ));\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif", 
  envmap_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif", 
  fog_vertex:"#ifdef USE_FOG\n\tfogDepth = -mvPosition.z;\n#endif", fog_pars_vertex:"#ifdef USE_FOG\n\tvarying float fogDepth;\n#endif", fog_fragment:"#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif", fog_pars_fragment:"#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif", 
  gradientmap_pars_fragment:"#ifdef TOON\n\tuniform sampler2D gradientMap;\n\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\t\tfloat dotNL = dot( normal, lightDirection );\n\t\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t\t#ifdef USE_GRADIENTMAP\n\t\t\treturn texture2D( gradientMap, coord ).rgb;\n\t\t#else\n\t\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t\t#endif\n\t}\n#endif", lightmap_fragment:"#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif", 
  lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif", lights_lambert_vertex:"vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif", 
  lights_pars_begin:"uniform vec3 ambientLightColor;\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t\tfloat shadowCameraNear;\n\t\tfloat shadowCameraFar;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif", 
  lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;", lights_phong_pars_fragment:"varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifdef TOON\n\t\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#else\n\t\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\t\tvec3 irradiance = dotNL * directLight.color;\n\t#endif\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)", 
  lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef STANDARD\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.clearCoat = saturate( clearCoat );\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\n#endif", 
  lights_physical_pars_fragment:"struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n\t#ifndef STANDARD\n\t\tfloat clearCoat;\n\t\tfloat clearCoatRoughness;\n\t#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifndef STANDARD\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t#ifndef STANDARD\n\t\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifndef ENVMAP_TYPE_CUBE_UV\n\t\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t#endif\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifndef STANDARD\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\tfloat dotNL = dotNV;\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\tfloat clearCoatInv = 1.0 - clearCoatDHR;\n\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec3 singleScattering = vec3( 0.0 );\n\t\tvec3 multiScattering = vec3( 0.0 );\n\t\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\t\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\n\t\tvec3 diffuse = material.diffuseColor;\n\t\treflectedLight.indirectSpecular += clearCoatInv * radiance * singleScattering;\n\t\treflectedLight.indirectDiffuse += multiScattering * cosineWeightedIrradiance;\n\t\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n\t#else\n\t\treflectedLight.indirectSpecular += clearCoatInv * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n\t#endif\n\t#ifndef STANDARD\n\t\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}", 
  lights_fragment_begin:"\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearCoatRadiance = vec3( 0.0 );\n#endif", 
  lights_fragment_maps:"#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tirradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), maxMipLevel );\n\t#ifndef STANDARD\n\t\tclearCoatRadiance += getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), maxMipLevel );\n\t#endif\n#endif", 
  lights_fragment_end:"#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, irradiance, clearCoatRadiance, geometry, material, reflectedLight );\n#endif", logdepthbuf_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif", logdepthbuf_pars_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n#endif", 
  logdepthbuf_pars_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif", logdepthbuf_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t#else\n\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\tgl_Position.z *= gl_Position.w;\n\t#endif\n#endif", map_fragment:"#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif", 
  map_pars_fragment:"#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif", map_particle_fragment:"#ifdef USE_MAP\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif", map_particle_pars_fragment:"#ifdef USE_MAP\n\tuniform mat3 uvTransform;\n\tuniform sampler2D map;\n#endif", metalnessmap_fragment:"float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif", 
  metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif", morphnormal_vertex:"#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif", morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif", 
  morphtarget_vertex:"#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif", 
  normal_fragment_begin:"#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t\tbitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t#endif\n#endif", 
  normal_fragment_maps:"#ifdef USE_NORMALMAP\n\t#ifdef OBJECTSPACE_NORMALMAP\n\t\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\t#ifdef FLIP_SIDED\n\t\t\tnormal = - normal;\n\t\t#endif\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t\tnormal = normalize( normalMatrix * normal );\n\t#else\n\t\t#ifdef USE_TANGENT\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\t\tmapN.xy = normalScale * mapN.xy;\n\t\t\tnormal = normalize( vTBN * mapN );\n\t\t#else\n\t\t\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n\t\t#endif\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif", 
  normalmap_pars_fragment:"#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\t#ifdef OBJECTSPACE_NORMALMAP\n\t\tuniform mat3 normalMatrix;\n\t#else\n\t\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\t\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\t\tvec2 st0 = dFdx( vUv.st );\n\t\t\tvec2 st1 = dFdy( vUv.st );\n\t\t\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\n\t\t\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n\t\t\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n\t\t\tvec3 N = normalize( surf_norm );\n\t\t\tmat3 tsn = mat3( S, T, N );\n\t\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\t\tmapN.xy *= normalScale;\n\t\t\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t\treturn normalize( tsn * mapN );\n\t\t}\n\t#endif\n#endif", 
  packing:"vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}", 
  premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif", project_vertex:"vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\ngl_Position = projectionMatrix * mvPosition;", dithering_fragment:"#if defined( DITHERING )\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif", dithering_pars_fragment:"#if defined( DITHERING )\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif", 
  roughnessmap_fragment:"float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif", roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif", shadowmap_pars_fragment:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif", 
  shadowmap_pars_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n#endif", 
  shadowmap_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif", 
  shadowmask_pars_fragment:"float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}", 
  skinbase_vertex:"#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif", skinning_pars_vertex:"#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif", 
  skinning_vertex:"#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif", skinnormal_vertex:"#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif", 
  specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif", specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif", tonemapping_fragment:"#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif", tonemapping_pars_fragment:"#ifndef saturate\n\t#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( ( color * ( 2.51 * color + 0.03 ) ) / ( color * ( 2.43 * color + 0.59 ) + 0.14 ) );\n}", 
  uv_pars_fragment:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n#endif", uv_pars_vertex:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif", 
  uv_vertex:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif", uv2_pars_fragment:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif", uv2_pars_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif", 
  uv2_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif", worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n#endif", background_frag:"uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}", background_vert:"varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}", 
  cube_frag:"uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}", cube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}", 
  depth_frag:"#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}", 
  depth_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}", 
  distanceRGBA_frag:"#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}", 
  distanceRGBA_vert:"#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}", 
  equirect_frag:"uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV;\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tvec4 texColor = texture2D( tEquirect, sampleUV );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}", 
  equirect_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}", linedashed_frag:"uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}", 
  linedashed_vert:"uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}", 
  meshbasic_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}", 
  meshbasic_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}", 
  meshlambert_frag:"uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}", 
  meshlambert_vert:"#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}", 
  meshmatcap_frag:"#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t\tmatcapColor = matcapTexelToLinear( matcapColor );\n\t#else\n\t\tvec4 matcapColor = vec4( 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}", 
  meshmatcap_vert:"#define MATCAP\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#ifndef FLAT_SHADED\n\t\tvNormal = normalize( transformedNormal );\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}", 
  meshphong_frag:"#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}", 
  meshphong_vert:"#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}", 
  meshphysical_frag:"#define PHYSICAL\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifndef STANDARD\n\tuniform float clearCoat;\n\tuniform float clearCoatRoughness;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}", 
  meshphysical_vert:"#define PHYSICAL\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}", 
  normal_frag:"#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}", 
  normal_vert:"#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}", 
  points_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}", 
  points_vert:"uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}", 
  shadow_frag:"uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <fog_fragment>\n}", shadow_vert:"#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}", 
  sprite_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}", 
  sprite_vert:"uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}"}, 
  Cg = {clone:p, merge:v}, Dg = {aliceblue:15792383, antiquewhite:16444375, aqua:65535, aquamarine:8388564, azure:15794175, beige:16119260, bisque:16770244, black:0, blanchedalmond:16772045, blue:255, blueviolet:9055202, brown:10824234, burlywood:14596231, cadetblue:6266528, chartreuse:8388352, chocolate:13789470, coral:16744272, cornflowerblue:6591981, cornsilk:16775388, crimson:14423100, cyan:65535, darkblue:139, darkcyan:35723, darkgoldenrod:12092939, darkgray:11119017, darkgreen:25600, darkgrey:11119017, 
  darkkhaki:12433259, darkmagenta:9109643, darkolivegreen:5597999, darkorange:16747520, darkorchid:10040012, darkred:9109504, darksalmon:15308410, darkseagreen:9419919, darkslateblue:4734347, darkslategray:3100495, darkslategrey:3100495, darkturquoise:52945, darkviolet:9699539, deeppink:16716947, deepskyblue:49151, dimgray:6908265, dimgrey:6908265, dodgerblue:2003199, firebrick:11674146, floralwhite:16775920, forestgreen:2263842, fuchsia:16711935, gainsboro:14474460, ghostwhite:16316671, gold:16766720, 
  goldenrod:14329120, gray:8421504, green:32768, greenyellow:11403055, grey:8421504, honeydew:15794160, hotpink:16738740, indianred:13458524, indigo:4915330, ivory:16777200, khaki:15787660, lavender:15132410, lavenderblush:16773365, lawngreen:8190976, lemonchiffon:16775885, lightblue:11393254, lightcoral:15761536, lightcyan:14745599, lightgoldenrodyellow:16448210, lightgray:13882323, lightgreen:9498256, lightgrey:13882323, lightpink:16758465, lightsalmon:16752762, lightseagreen:2142890, lightskyblue:8900346, 
  lightslategray:7833753, lightslategrey:7833753, lightsteelblue:11584734, lightyellow:16777184, lime:65280, limegreen:3329330, linen:16445670, magenta:16711935, maroon:8388608, mediumaquamarine:6737322, mediumblue:205, mediumorchid:12211667, mediumpurple:9662683, mediumseagreen:3978097, mediumslateblue:8087790, mediumspringgreen:64154, mediumturquoise:4772300, mediumvioletred:13047173, midnightblue:1644912, mintcream:16121850, mistyrose:16770273, moccasin:16770229, navajowhite:16768685, navy:128, 
  oldlace:16643558, olive:8421376, olivedrab:7048739, orange:16753920, orangered:16729344, orchid:14315734, palegoldenrod:15657130, palegreen:10025880, paleturquoise:11529966, palevioletred:14381203, papayawhip:16773077, peachpuff:16767673, peru:13468991, pink:16761035, plum:14524637, powderblue:11591910, purple:8388736, rebeccapurple:6697881, red:16711680, rosybrown:12357519, royalblue:4286945, saddlebrown:9127187, salmon:16416882, sandybrown:16032864, seagreen:3050327, seashell:16774638, sienna:10506797, 
  silver:12632256, skyblue:8900331, slateblue:6970061, slategray:7372944, slategrey:7372944, snow:16775930, springgreen:65407, steelblue:4620980, tan:13808780, teal:32896, thistle:14204888, tomato:16737095, turquoise:4251856, violet:15631086, wheat:16113331, white:16777215, whitesmoke:16119285, yellow:16776960, yellowgreen:10145074};
  Object.assign(z.prototype, {isColor:!0, r:1, g:1, b:1, set:function(a) {
    a && a.isColor ? this.copy(a) : "number" === typeof a ? this.setHex(a) : "string" === typeof a && this.setStyle(a);
    return this;
  }, setScalar:function(a) {
    this.b = this.g = this.r = a;
    return this;
  }, setHex:function(a) {
    a = Math.floor(a);
    this.r = (a >> 16 & 255) / 255;
    this.g = (a >> 8 & 255) / 255;
    this.b = (a & 255) / 255;
    return this;
  }, setRGB:function(a, b, e) {
    this.r = a;
    this.g = b;
    this.b = e;
    return this;
  }, setHSL:function() {
    function a(a, g, b) {
      0 > b && (b += 1);
      1 < b && --b;
      return b < 1 / 6 ? a + 6 * (g - a) * b : .5 > b ? g : b < 2 / 3 ? a + 6 * (g - a) * (2 / 3 - b) : a;
    }
    return function(g, b, e) {
      g = ia.euclideanModulo(g, 1);
      b = ia.clamp(b, 0, 1);
      e = ia.clamp(e, 0, 1);
      0 === b ? this.r = this.g = this.b = e : (b = .5 >= e ? e * (1 + b) : e + b - e * b, e = 2 * e - b, this.r = a(e, b, g + 1 / 3), this.g = a(e, b, g), this.b = a(e, b, g - 1 / 3));
      return this;
    };
  }(), setStyle:function(a) {
    function g(g) {
      void 0 !== g && 1 > parseFloat(g) && console.warn("THREE.Color: Alpha component of " + a + " will be ignored.");
    }
    var b;
    if (b = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(a)) {
      var e = b[2];
      switch(b[1]) {
        case "rgb":
        case "rgba":
          if (b = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(e)) {
            return this.r = Math.min(255, parseInt(b[1], 10)) / 255, this.g = Math.min(255, parseInt(b[2], 10)) / 255, this.b = Math.min(255, parseInt(b[3], 10)) / 255, g(b[5]), this;
          }
          if (b = /^(\d+)%\s*,\s*(\d+)%\s*,\s*(\d+)%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(e)) {
            return this.r = Math.min(100, parseInt(b[1], 10)) / 100, this.g = Math.min(100, parseInt(b[2], 10)) / 100, this.b = Math.min(100, parseInt(b[3], 10)) / 100, g(b[5]), this;
          }
          break;
        case "hsl":
        case "hsla":
          if (b = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)%\s*,\s*(\d+)%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(e)) {
            e = parseFloat(b[1]) / 360;
            var c = parseInt(b[2], 10) / 100, d = parseInt(b[3], 10) / 100;
            g(b[5]);
            return this.setHSL(e, c, d);
          }
      }
    } else {
      if (b = /^#([A-Fa-f0-9]+)$/.exec(a)) {
        b = b[1];
        e = b.length;
        if (3 === e) {
          return this.r = parseInt(b.charAt(0) + b.charAt(0), 16) / 255, this.g = parseInt(b.charAt(1) + b.charAt(1), 16) / 255, this.b = parseInt(b.charAt(2) + b.charAt(2), 16) / 255, this;
        }
        if (6 === e) {
          return this.r = parseInt(b.charAt(0) + b.charAt(1), 16) / 255, this.g = parseInt(b.charAt(2) + b.charAt(3), 16) / 255, this.b = parseInt(b.charAt(4) + b.charAt(5), 16) / 255, this;
        }
      }
    }
    a && 0 < a.length && (b = Dg[a], void 0 !== b ? this.setHex(b) : console.warn("THREE.Color: Unknown color " + a));
    return this;
  }, clone:function() {
    return new this.constructor(this.r, this.g, this.b);
  }, copy:function(a) {
    this.r = a.r;
    this.g = a.g;
    this.b = a.b;
    return this;
  }, copyGammaToLinear:function(a, b) {
    void 0 === b && (b = 2);
    this.r = Math.pow(a.r, b);
    this.g = Math.pow(a.g, b);
    this.b = Math.pow(a.b, b);
    return this;
  }, copyLinearToGamma:function(a, b) {
    void 0 === b && (b = 2);
    b = 0 < b ? 1 / b : 1;
    this.r = Math.pow(a.r, b);
    this.g = Math.pow(a.g, b);
    this.b = Math.pow(a.b, b);
    return this;
  }, convertGammaToLinear:function(a) {
    this.copyGammaToLinear(this, a);
    return this;
  }, convertLinearToGamma:function(a) {
    this.copyLinearToGamma(this, a);
    return this;
  }, copySRGBToLinear:function() {
    function a(a) {
      return .04045 > a ? .0773993808 * a : Math.pow(.9478672986 * a + .0521327014, 2.4);
    }
    return function(g) {
      this.r = a(g.r);
      this.g = a(g.g);
      this.b = a(g.b);
      return this;
    };
  }(), copyLinearToSRGB:function() {
    function a(a) {
      return .0031308 > a ? 12.92 * a : 1.055 * Math.pow(a, .41666) - .055;
    }
    return function(g) {
      this.r = a(g.r);
      this.g = a(g.g);
      this.b = a(g.b);
      return this;
    };
  }(), convertSRGBToLinear:function() {
    this.copySRGBToLinear(this);
    return this;
  }, convertLinearToSRGB:function() {
    this.copyLinearToSRGB(this);
    return this;
  }, getHex:function() {
    return 255 * this.r << 16 ^ 255 * this.g << 8 ^ 255 * this.b << 0;
  }, getHexString:function() {
    return ("000000" + this.getHex().toString(16)).slice(-6);
  }, getHSL:function(a) {
    void 0 === a && (console.warn("THREE.Color: .getHSL() target is now required"), a = {h:0, s:0, l:0});
    var g = this.r, b = this.g, e = this.b, c = Math.max(g, b, e), d = Math.min(g, b, e), l, f = (d + c) / 2;
    if (d === c) {
      d = l = 0;
    } else {
      var h = c - d;
      d = .5 >= f ? h / (c + d) : h / (2 - c - d);
      switch(c) {
        case g:
          l = (b - e) / h + (b < e ? 6 : 0);
          break;
        case b:
          l = (e - g) / h + 2;
          break;
        case e:
          l = (g - b) / h + 4;
      }
      l /= 6;
    }
    a.h = l;
    a.s = d;
    a.l = f;
    return a;
  }, getStyle:function() {
    return "rgb(" + (255 * this.r | 0) + "," + (255 * this.g | 0) + "," + (255 * this.b | 0) + ")";
  }, offsetHSL:function() {
    var a = {};
    return function(g, b, e) {
      this.getHSL(a);
      a.h += g;
      a.s += b;
      a.l += e;
      this.setHSL(a.h, a.s, a.l);
      return this;
    };
  }(), add:function(a) {
    this.r += a.r;
    this.g += a.g;
    this.b += a.b;
    return this;
  }, addColors:function(a, b) {
    this.r = a.r + b.r;
    this.g = a.g + b.g;
    this.b = a.b + b.b;
    return this;
  }, addScalar:function(a) {
    this.r += a;
    this.g += a;
    this.b += a;
    return this;
  }, sub:function(a) {
    this.r = Math.max(0, this.r - a.r);
    this.g = Math.max(0, this.g - a.g);
    this.b = Math.max(0, this.b - a.b);
    return this;
  }, multiply:function(a) {
    this.r *= a.r;
    this.g *= a.g;
    this.b *= a.b;
    return this;
  }, multiplyScalar:function(a) {
    this.r *= a;
    this.g *= a;
    this.b *= a;
    return this;
  }, lerp:function(a, b) {
    this.r += (a.r - this.r) * b;
    this.g += (a.g - this.g) * b;
    this.b += (a.b - this.b) * b;
    return this;
  }, lerpHSL:function() {
    var a = {h:0, s:0, l:0}, b = {h:0, s:0, l:0};
    return function(g, e) {
      this.getHSL(a);
      g.getHSL(b);
      g = ia.lerp(a.h, b.h, e);
      var c = ia.lerp(a.s, b.s, e);
      e = ia.lerp(a.l, b.l, e);
      this.setHSL(g, c, e);
      return this;
    };
  }(), equals:function(a) {
    return a.r === this.r && a.g === this.g && a.b === this.b;
  }, fromArray:function(a, b) {
    void 0 === b && (b = 0);
    this.r = a[b];
    this.g = a[b + 1];
    this.b = a[b + 2];
    return this;
  }, toArray:function(a, b) {
    void 0 === a && (a = []);
    void 0 === b && (b = 0);
    a[b] = this.r;
    a[b + 1] = this.g;
    a[b + 2] = this.b;
    return a;
  }, toJSON:function() {
    return this.getHex();
  }});
  var ea = {common:{diffuse:{value:new z(15658734)}, opacity:{value:1}, map:{value:null}, uvTransform:{value:new h}, alphaMap:{value:null}}, specularmap:{specularMap:{value:null}}, envmap:{envMap:{value:null}, flipEnvMap:{value:-1}, reflectivity:{value:1}, refractionRatio:{value:.98}, maxMipLevel:{value:0}}, aomap:{aoMap:{value:null}, aoMapIntensity:{value:1}}, lightmap:{lightMap:{value:null}, lightMapIntensity:{value:1}}, emissivemap:{emissiveMap:{value:null}}, bumpmap:{bumpMap:{value:null}, bumpScale:{value:1}}, 
  normalmap:{normalMap:{value:null}, normalScale:{value:new k(1, 1)}}, displacementmap:{displacementMap:{value:null}, displacementScale:{value:1}, displacementBias:{value:0}}, roughnessmap:{roughnessMap:{value:null}}, metalnessmap:{metalnessMap:{value:null}}, gradientmap:{gradientMap:{value:null}}, fog:{fogDensity:{value:2.5E-4}, fogNear:{value:1}, fogFar:{value:2E3}, fogColor:{value:new z(16777215)}}, lights:{ambientLightColor:{value:[]}, directionalLights:{value:[], properties:{direction:{}, color:{}, 
  shadow:{}, shadowBias:{}, shadowRadius:{}, shadowMapSize:{}}}, directionalShadowMap:{value:[]}, directionalShadowMatrix:{value:[]}, spotLights:{value:[], properties:{color:{}, position:{}, direction:{}, distance:{}, coneCos:{}, penumbraCos:{}, decay:{}, shadow:{}, shadowBias:{}, shadowRadius:{}, shadowMapSize:{}}}, spotShadowMap:{value:[]}, spotShadowMatrix:{value:[]}, pointLights:{value:[], properties:{color:{}, position:{}, decay:{}, distance:{}, shadow:{}, shadowBias:{}, shadowRadius:{}, shadowMapSize:{}, 
  shadowCameraNear:{}, shadowCameraFar:{}}}, pointShadowMap:{value:[]}, pointShadowMatrix:{value:[]}, hemisphereLights:{value:[], properties:{direction:{}, skyColor:{}, groundColor:{}}}, rectAreaLights:{value:[], properties:{color:{}, position:{}, width:{}, height:{}}}}, points:{diffuse:{value:new z(15658734)}, opacity:{value:1}, size:{value:1}, scale:{value:1}, map:{value:null}, uvTransform:{value:new h}}, sprite:{diffuse:{value:new z(15658734)}, opacity:{value:1}, center:{value:new k(.5, .5)}, 
  rotation:{value:0}, map:{value:null}, uvTransform:{value:new h}}}, eb = {basic:{uniforms:v([ea.common, ea.specularmap, ea.envmap, ea.aomap, ea.lightmap, ea.fog]), vertexShader:na.meshbasic_vert, fragmentShader:na.meshbasic_frag}, lambert:{uniforms:v([ea.common, ea.specularmap, ea.envmap, ea.aomap, ea.lightmap, ea.emissivemap, ea.fog, ea.lights, {emissive:{value:new z(0)}}]), vertexShader:na.meshlambert_vert, fragmentShader:na.meshlambert_frag}, phong:{uniforms:v([ea.common, ea.specularmap, ea.envmap, 
  ea.aomap, ea.lightmap, ea.emissivemap, ea.bumpmap, ea.normalmap, ea.displacementmap, ea.gradientmap, ea.fog, ea.lights, {emissive:{value:new z(0)}, specular:{value:new z(1118481)}, shininess:{value:30}}]), vertexShader:na.meshphong_vert, fragmentShader:na.meshphong_frag}, standard:{uniforms:v([ea.common, ea.envmap, ea.aomap, ea.lightmap, ea.emissivemap, ea.bumpmap, ea.normalmap, ea.displacementmap, ea.roughnessmap, ea.metalnessmap, ea.fog, ea.lights, {emissive:{value:new z(0)}, roughness:{value:.5}, 
  metalness:{value:.5}, envMapIntensity:{value:1}}]), vertexShader:na.meshphysical_vert, fragmentShader:na.meshphysical_frag}, matcap:{uniforms:v([ea.common, ea.bumpmap, ea.normalmap, ea.displacementmap, ea.fog, {matcap:{value:null}}]), vertexShader:na.meshmatcap_vert, fragmentShader:na.meshmatcap_frag}, points:{uniforms:v([ea.points, ea.fog]), vertexShader:na.points_vert, fragmentShader:na.points_frag}, dashed:{uniforms:v([ea.common, ea.fog, {scale:{value:1}, dashSize:{value:1}, totalSize:{value:2}}]), 
  vertexShader:na.linedashed_vert, fragmentShader:na.linedashed_frag}, depth:{uniforms:v([ea.common, ea.displacementmap]), vertexShader:na.depth_vert, fragmentShader:na.depth_frag}, normal:{uniforms:v([ea.common, ea.bumpmap, ea.normalmap, ea.displacementmap, {opacity:{value:1}}]), vertexShader:na.normal_vert, fragmentShader:na.normal_frag}, sprite:{uniforms:v([ea.sprite, ea.fog]), vertexShader:na.sprite_vert, fragmentShader:na.sprite_frag}, background:{uniforms:{uvTransform:{value:new h}, t2D:{value:null}}, 
  vertexShader:na.background_vert, fragmentShader:na.background_frag}, cube:{uniforms:{tCube:{value:null}, tFlip:{value:-1}, opacity:{value:1}}, vertexShader:na.cube_vert, fragmentShader:na.cube_frag}, equirect:{uniforms:{tEquirect:{value:null}}, vertexShader:na.equirect_vert, fragmentShader:na.equirect_frag}, distanceRGBA:{uniforms:v([ea.common, ea.displacementmap, {referencePosition:{value:new d}, nearDistance:{value:1}, farDistance:{value:1E3}}]), vertexShader:na.distanceRGBA_vert, fragmentShader:na.distanceRGBA_frag}, 
  shadow:{uniforms:v([ea.lights, ea.fog, {color:{value:new z(0)}, opacity:{value:1}}]), vertexShader:na.shadow_vert, fragmentShader:na.shadow_frag}};
  eb.physical = {uniforms:v([eb.standard.uniforms, {clearCoat:{value:0}, clearCoatRoughness:{value:0}}]), vertexShader:na.meshphysical_vert, fragmentShader:na.meshphysical_frag};
  Object.assign(D.prototype, {clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(a) {
    this.a = a.a;
    this.b = a.b;
    this.c = a.c;
    this.normal.copy(a.normal);
    this.color.copy(a.color);
    this.materialIndex = a.materialIndex;
    for (var g = 0, b = a.vertexNormals.length; g < b; g++) {
      this.vertexNormals[g] = a.vertexNormals[g].clone();
    }
    g = 0;
    for (b = a.vertexColors.length; g < b; g++) {
      this.vertexColors[g] = a.vertexColors[g].clone();
    }
    return this;
  }});
  E.RotationOrders = "XYZ YZX ZXY XZY YXZ ZYX".split(" ");
  E.DefaultOrder = "XYZ";
  Object.defineProperties(E.prototype, {x:{get:function() {
    return this._x;
  }, set:function(a) {
    this._x = a;
    this.onChangeCallback();
  }}, y:{get:function() {
    return this._y;
  }, set:function(a) {
    this._y = a;
    this.onChangeCallback();
  }}, z:{get:function() {
    return this._z;
  }, set:function(a) {
    this._z = a;
    this.onChangeCallback();
  }}, order:{get:function() {
    return this._order;
  }, set:function(a) {
    this._order = a;
    this.onChangeCallback();
  }}});
  Object.assign(E.prototype, {isEuler:!0, set:function(a, b, e, c) {
    this._x = a;
    this._y = b;
    this._z = e;
    this._order = c || this._order;
    this.onChangeCallback();
    return this;
  }, clone:function() {
    return new this.constructor(this._x, this._y, this._z, this._order);
  }, copy:function(a) {
    this._x = a._x;
    this._y = a._y;
    this._z = a._z;
    this._order = a._order;
    this.onChangeCallback();
    return this;
  }, setFromRotationMatrix:function(a, b, e) {
    var g = ia.clamp, c = a.elements;
    a = c[0];
    var d = c[4], l = c[8], f = c[1], h = c[5], r = c[9], p = c[2], k = c[6];
    c = c[10];
    b = b || this._order;
    "XYZ" === b ? (this._y = Math.asin(g(l, -1, 1)), .99999 > Math.abs(l) ? (this._x = Math.atan2(-r, c), this._z = Math.atan2(-d, a)) : (this._x = Math.atan2(k, h), this._z = 0)) : "YXZ" === b ? (this._x = Math.asin(-g(r, -1, 1)), .99999 > Math.abs(r) ? (this._y = Math.atan2(l, c), this._z = Math.atan2(f, h)) : (this._y = Math.atan2(-p, a), this._z = 0)) : "ZXY" === b ? (this._x = Math.asin(g(k, -1, 1)), .99999 > Math.abs(k) ? (this._y = Math.atan2(-p, c), this._z = Math.atan2(-d, h)) : (this._y = 
    0, this._z = Math.atan2(f, a))) : "ZYX" === b ? (this._y = Math.asin(-g(p, -1, 1)), .99999 > Math.abs(p) ? (this._x = Math.atan2(k, c), this._z = Math.atan2(f, a)) : (this._x = 0, this._z = Math.atan2(-d, h))) : "YZX" === b ? (this._z = Math.asin(g(f, -1, 1)), .99999 > Math.abs(f) ? (this._x = Math.atan2(-r, h), this._y = Math.atan2(-p, a)) : (this._x = 0, this._y = Math.atan2(l, c))) : "XZY" === b ? (this._z = Math.asin(-g(d, -1, 1)), .99999 > Math.abs(d) ? (this._x = Math.atan2(k, h), this._y = 
    Math.atan2(l, a)) : (this._x = Math.atan2(-r, c), this._y = 0)) : console.warn("THREE.Euler: .setFromRotationMatrix() given unsupported order: " + b);
    this._order = b;
    if (!1 !== e) {
      this.onChangeCallback();
    }
    return this;
  }, setFromQuaternion:function() {
    var a = new b;
    return function(g, b, e) {
      a.makeRotationFromQuaternion(g);
      return this.setFromRotationMatrix(a, b, e);
    };
  }(), setFromVector3:function(a, b) {
    return this.set(a.x, a.y, a.z, b || this._order);
  }, reorder:function() {
    var a = new f;
    return function(g) {
      a.setFromEuler(this);
      return this.setFromQuaternion(a, g);
    };
  }(), equals:function(a) {
    return a._x === this._x && a._y === this._y && a._z === this._z && a._order === this._order;
  }, fromArray:function(a) {
    this._x = a[0];
    this._y = a[1];
    this._z = a[2];
    void 0 !== a[3] && (this._order = a[3]);
    this.onChangeCallback();
    return this;
  }, toArray:function(a, b) {
    void 0 === a && (a = []);
    void 0 === b && (b = 0);
    a[b] = this._x;
    a[b + 1] = this._y;
    a[b + 2] = this._z;
    a[b + 3] = this._order;
    return a;
  }, toVector3:function(a) {
    return a ? a.set(this._x, this._y, this._z) : new d(this._x, this._y, this._z);
  }, onChange:function(a) {
    this.onChangeCallback = a;
    return this;
  }, onChangeCallback:function() {
  }});
  Object.assign(B.prototype, {set:function(a) {
    this.mask = 1 << a | 0;
  }, enable:function(a) {
    this.mask = this.mask | 1 << a | 0;
  }, toggle:function(a) {
    this.mask ^= 1 << a | 0;
  }, disable:function(a) {
    this.mask &= ~(1 << a | 0);
  }, test:function(a) {
    return 0 !== (this.mask & a.mask);
  }});
  var Yf = 0;
  G.DefaultUp = new d(0, 1, 0);
  G.DefaultMatrixAutoUpdate = !0;
  G.prototype = Object.assign(Object.create(c.prototype), {constructor:G, isObject3D:!0, onBeforeRender:function() {
  }, onAfterRender:function() {
  }, applyMatrix:function(a) {
    this.matrix.multiplyMatrices(a, this.matrix);
    this.matrix.decompose(this.position, this.quaternion, this.scale);
  }, applyQuaternion:function(a) {
    this.quaternion.premultiply(a);
    return this;
  }, setRotationFromAxisAngle:function(a, b) {
    this.quaternion.setFromAxisAngle(a, b);
  }, setRotationFromEuler:function(a) {
    this.quaternion.setFromEuler(a, !0);
  }, setRotationFromMatrix:function(a) {
    this.quaternion.setFromRotationMatrix(a);
  }, setRotationFromQuaternion:function(a) {
    this.quaternion.copy(a);
  }, rotateOnAxis:function() {
    var a = new f;
    return function(g, b) {
      a.setFromAxisAngle(g, b);
      this.quaternion.multiply(a);
      return this;
    };
  }(), rotateOnWorldAxis:function() {
    var a = new f;
    return function(g, b) {
      a.setFromAxisAngle(g, b);
      this.quaternion.premultiply(a);
      return this;
    };
  }(), rotateX:function() {
    var a = new d(1, 0, 0);
    return function(g) {
      return this.rotateOnAxis(a, g);
    };
  }(), rotateY:function() {
    var a = new d(0, 1, 0);
    return function(g) {
      return this.rotateOnAxis(a, g);
    };
  }(), rotateZ:function() {
    var a = new d(0, 0, 1);
    return function(g) {
      return this.rotateOnAxis(a, g);
    };
  }(), translateOnAxis:function() {
    var a = new d;
    return function(g, b) {
      a.copy(g).applyQuaternion(this.quaternion);
      this.position.add(a.multiplyScalar(b));
      return this;
    };
  }(), translateX:function() {
    var a = new d(1, 0, 0);
    return function(g) {
      return this.translateOnAxis(a, g);
    };
  }(), translateY:function() {
    var a = new d(0, 1, 0);
    return function(g) {
      return this.translateOnAxis(a, g);
    };
  }(), translateZ:function() {
    var a = new d(0, 0, 1);
    return function(g) {
      return this.translateOnAxis(a, g);
    };
  }(), localToWorld:function(a) {
    return a.applyMatrix4(this.matrixWorld);
  }, worldToLocal:function() {
    var a = new b;
    return function(g) {
      return g.applyMatrix4(a.getInverse(this.matrixWorld));
    };
  }(), lookAt:function() {
    var a = new f, e = new b, c = new d, l = new d;
    return function(g, b, d) {
      g.isVector3 ? c.copy(g) : c.set(g, b, d);
      g = this.parent;
      this.updateWorldMatrix(!0, !1);
      l.setFromMatrixPosition(this.matrixWorld);
      this.isCamera || this.isLight ? e.lookAt(l, c, this.up) : e.lookAt(c, l, this.up);
      this.quaternion.setFromRotationMatrix(e);
      g && (e.extractRotation(g.matrixWorld), a.setFromRotationMatrix(e), this.quaternion.premultiply(a.inverse()));
    };
  }(), add:function(a) {
    if (1 < arguments.length) {
      for (var g = 0; g < arguments.length; g++) {
        this.add(arguments[g]);
      }
      return this;
    }
    if (a === this) {
      return console.error("THREE.Object3D.add: object can't be added as a child of itself.", a), this;
    }
    a && a.isObject3D ? (null !== a.parent && a.parent.remove(a), a.parent = this, a.dispatchEvent({type:"added"}), this.children.push(a)) : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", a);
    return this;
  }, remove:function(a) {
    if (1 < arguments.length) {
      for (var g = 0; g < arguments.length; g++) {
        this.remove(arguments[g]);
      }
      return this;
    }
    g = this.children.indexOf(a);
    -1 !== g && (a.parent = null, a.dispatchEvent({type:"removed"}), this.children.splice(g, 1));
    return this;
  }, getObjectById:function(a) {
    return this.getObjectByProperty("id", a);
  }, getObjectByName:function(a) {
    return this.getObjectByProperty("name", a);
  }, getObjectByProperty:function(a, b) {
    if (this[a] === b) {
      return this;
    }
    for (var g = 0, e = this.children.length; g < e; g++) {
      var c = this.children[g].getObjectByProperty(a, b);
      if (void 0 !== c) {
        return c;
      }
    }
  }, getWorldPosition:function(a) {
    void 0 === a && (console.warn("THREE.Object3D: .getWorldPosition() target is now required"), a = new d);
    this.updateMatrixWorld(!0);
    return a.setFromMatrixPosition(this.matrixWorld);
  }, getWorldQuaternion:function() {
    var a = new d, b = new d;
    return function(g) {
      void 0 === g && (console.warn("THREE.Object3D: .getWorldQuaternion() target is now required"), g = new f);
      this.updateMatrixWorld(!0);
      this.matrixWorld.decompose(a, g, b);
      return g;
    };
  }(), getWorldScale:function() {
    var a = new d, b = new f;
    return function(g) {
      void 0 === g && (console.warn("THREE.Object3D: .getWorldScale() target is now required"), g = new d);
      this.updateMatrixWorld(!0);
      this.matrixWorld.decompose(a, b, g);
      return g;
    };
  }(), getWorldDirection:function(a) {
    void 0 === a && (console.warn("THREE.Object3D: .getWorldDirection() target is now required"), a = new d);
    this.updateMatrixWorld(!0);
    var g = this.matrixWorld.elements;
    return a.set(g[8], g[9], g[10]).normalize();
  }, raycast:function() {
  }, traverse:function(a) {
    a(this);
    for (var g = this.children, b = 0, e = g.length; b < e; b++) {
      g[b].traverse(a);
    }
  }, traverseVisible:function(a) {
    if (!1 !== this.visible) {
      a(this);
      for (var g = this.children, b = 0, e = g.length; b < e; b++) {
        g[b].traverseVisible(a);
      }
    }
  }, traverseAncestors:function(a) {
    var g = this.parent;
    null !== g && (a(g), g.traverseAncestors(a));
  }, updateMatrix:function() {
    this.matrix.compose(this.position, this.quaternion, this.scale);
    this.matrixWorldNeedsUpdate = !0;
  }, updateMatrixWorld:function(a) {
    this.matrixAutoUpdate && this.updateMatrix();
    if (this.matrixWorldNeedsUpdate || a) {
      null === this.parent ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), this.matrixWorldNeedsUpdate = !1, a = !0;
    }
    for (var g = this.children, b = 0, e = g.length; b < e; b++) {
      g[b].updateMatrixWorld(a);
    }
  }, updateWorldMatrix:function(a, b) {
    var g = this.parent;
    !0 === a && null !== g && g.updateWorldMatrix(!0, !1);
    this.matrixAutoUpdate && this.updateMatrix();
    null === this.parent ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
    if (!0 === b) {
      for (a = this.children, b = 0, g = a.length; b < g; b++) {
        a[b].updateWorldMatrix(!1, !0);
      }
    }
  }, toJSON:function(a) {
    function g(g, b) {
      void 0 === g[b.uuid] && (g[b.uuid] = b.toJSON(a));
      return b.uuid;
    }
    function b(a) {
      var g = [], b;
      for (b in a) {
        var e = a[b];
        delete e.metadata;
        g.push(e);
      }
      return g;
    }
    var e = void 0 === a || "string" === typeof a, c = {};
    e && (a = {geometries:{}, materials:{}, textures:{}, images:{}, shapes:{}}, c.metadata = {version:4.5, type:"Object", generator:"Object3D.toJSON"});
    var d = {};
    d.uuid = this.uuid;
    d.type = this.type;
    "" !== this.name && (d.name = this.name);
    !0 === this.castShadow && (d.castShadow = !0);
    !0 === this.receiveShadow && (d.receiveShadow = !0);
    !1 === this.visible && (d.visible = !1);
    !1 === this.frustumCulled && (d.frustumCulled = !1);
    0 !== this.renderOrder && (d.renderOrder = this.renderOrder);
    "{}" !== JSON.stringify(this.userData) && (d.userData = this.userData);
    d.layers = this.layers.mask;
    d.matrix = this.matrix.toArray();
    !1 === this.matrixAutoUpdate && (d.matrixAutoUpdate = !1);
    this.isMesh && 0 !== this.drawMode && (d.drawMode = this.drawMode);
    if (this.isMesh || this.isLine || this.isPoints) {
      d.geometry = g(a.geometries, this.geometry);
      var l = this.geometry.parameters;
      if (void 0 !== l && void 0 !== l.shapes) {
        if (l = l.shapes, Array.isArray(l)) {
          for (var f = 0, h = l.length; f < h; f++) {
            g(a.shapes, l[f]);
          }
        } else {
          g(a.shapes, l);
        }
      }
    }
    if (void 0 !== this.material) {
      if (Array.isArray(this.material)) {
        l = [];
        f = 0;
        for (h = this.material.length; f < h; f++) {
          l.push(g(a.materials, this.material[f]));
        }
        d.material = l;
      } else {
        d.material = g(a.materials, this.material);
      }
    }
    if (0 < this.children.length) {
      for (d.children = [], f = 0; f < this.children.length; f++) {
        d.children.push(this.children[f].toJSON(a).object);
      }
    }
    if (e) {
      e = b(a.geometries);
      f = b(a.materials);
      h = b(a.textures);
      var p = b(a.images);
      l = b(a.shapes);
      0 < e.length && (c.geometries = e);
      0 < f.length && (c.materials = f);
      0 < h.length && (c.textures = h);
      0 < p.length && (c.images = p);
      0 < l.length && (c.shapes = l);
    }
    c.object = d;
    return c;
  }, clone:function(a) {
    return (new this.constructor).copy(this, a);
  }, copy:function(a, b) {
    void 0 === b && (b = !0);
    this.name = a.name;
    this.up.copy(a.up);
    this.position.copy(a.position);
    this.quaternion.copy(a.quaternion);
    this.scale.copy(a.scale);
    this.matrix.copy(a.matrix);
    this.matrixWorld.copy(a.matrixWorld);
    this.matrixAutoUpdate = a.matrixAutoUpdate;
    this.matrixWorldNeedsUpdate = a.matrixWorldNeedsUpdate;
    this.layers.mask = a.layers.mask;
    this.visible = a.visible;
    this.castShadow = a.castShadow;
    this.receiveShadow = a.receiveShadow;
    this.frustumCulled = a.frustumCulled;
    this.renderOrder = a.renderOrder;
    this.userData = JSON.parse(JSON.stringify(a.userData));
    if (!0 === b) {
      for (b = 0; b < a.children.length; b++) {
        this.add(a.children[b].clone());
      }
    }
    return this;
  }});
  var Zf = 0;
  H.prototype = Object.assign(Object.create(c.prototype), {constructor:H, isGeometry:!0, applyMatrix:function(a) {
    for (var g = (new h).getNormalMatrix(a), b = 0, e = this.vertices.length; b < e; b++) {
      this.vertices[b].applyMatrix4(a);
    }
    b = 0;
    for (e = this.faces.length; b < e; b++) {
      a = this.faces[b];
      a.normal.applyMatrix3(g).normalize();
      for (var c = 0, d = a.vertexNormals.length; c < d; c++) {
        a.vertexNormals[c].applyMatrix3(g).normalize();
      }
    }
    null !== this.boundingBox && this.computeBoundingBox();
    null !== this.boundingSphere && this.computeBoundingSphere();
    this.normalsNeedUpdate = this.verticesNeedUpdate = !0;
    return this;
  }, rotateX:function() {
    var a = new b;
    return function(g) {
      a.makeRotationX(g);
      this.applyMatrix(a);
      return this;
    };
  }(), rotateY:function() {
    var a = new b;
    return function(g) {
      a.makeRotationY(g);
      this.applyMatrix(a);
      return this;
    };
  }(), rotateZ:function() {
    var a = new b;
    return function(g) {
      a.makeRotationZ(g);
      this.applyMatrix(a);
      return this;
    };
  }(), translate:function() {
    var a = new b;
    return function(g, b, e) {
      a.makeTranslation(g, b, e);
      this.applyMatrix(a);
      return this;
    };
  }(), scale:function() {
    var a = new b;
    return function(g, b, e) {
      a.makeScale(g, b, e);
      this.applyMatrix(a);
      return this;
    };
  }(), lookAt:function() {
    var a = new G;
    return function(g) {
      a.lookAt(g);
      a.updateMatrix();
      this.applyMatrix(a.matrix);
    };
  }(), fromBufferGeometry:function(a) {
    function g(a, g, e, c) {
      var l = void 0 === h ? [] : [b.colors[a].clone(), b.colors[g].clone(), b.colors[e].clone()], r = void 0 === f ? [] : [(new d).fromArray(f, 3 * a), (new d).fromArray(f, 3 * g), (new d).fromArray(f, 3 * e)];
      c = new D(a, g, e, r, l, c);
      b.faces.push(c);
      void 0 !== p && b.faceVertexUvs[0].push([(new k).fromArray(p, 2 * a), (new k).fromArray(p, 2 * g), (new k).fromArray(p, 2 * e)]);
      void 0 !== m && b.faceVertexUvs[1].push([(new k).fromArray(m, 2 * a), (new k).fromArray(m, 2 * g), (new k).fromArray(m, 2 * e)]);
    }
    var b = this, e = null !== a.index ? a.index.array : void 0, c = a.attributes, l = c.position.array, f = void 0 !== c.normal ? c.normal.array : void 0, h = void 0 !== c.color ? c.color.array : void 0, p = void 0 !== c.uv ? c.uv.array : void 0, m = void 0 !== c.uv2 ? c.uv2.array : void 0;
    void 0 !== m && (this.faceVertexUvs[1] = []);
    for (var n = c = 0; c < l.length; c += 3, n += 2) {
      b.vertices.push((new d).fromArray(l, c)), void 0 !== h && b.colors.push((new z).fromArray(h, c));
    }
    var t = a.groups;
    if (0 < t.length) {
      for (c = 0; c < t.length; c++) {
        l = t[c];
        var u = l.start, q = l.count;
        n = u;
        for (u += q; n < u; n += 3) {
          void 0 !== e ? g(e[n], e[n + 1], e[n + 2], l.materialIndex) : g(n, n + 1, n + 2, l.materialIndex);
        }
      }
    } else {
      if (void 0 !== e) {
        for (c = 0; c < e.length; c += 3) {
          g(e[c], e[c + 1], e[c + 2]);
        }
      } else {
        for (c = 0; c < l.length / 3; c += 3) {
          g(c, c + 1, c + 2);
        }
      }
    }
    this.computeFaceNormals();
    null !== a.boundingBox && (this.boundingBox = a.boundingBox.clone());
    null !== a.boundingSphere && (this.boundingSphere = a.boundingSphere.clone());
    return this;
  }, center:function() {
    var a = new d;
    return function() {
      this.computeBoundingBox();
      this.boundingBox.getCenter(a).negate();
      this.translate(a.x, a.y, a.z);
      return this;
    };
  }(), normalize:function() {
    this.computeBoundingSphere();
    var a = this.boundingSphere.center, e = this.boundingSphere.radius;
    e = 0 === e ? 1 : 1 / e;
    var c = new b;
    c.set(e, 0, 0, -e * a.x, 0, e, 0, -e * a.y, 0, 0, e, -e * a.z, 0, 0, 0, 1);
    this.applyMatrix(c);
    return this;
  }, computeFaceNormals:function() {
    for (var a = new d, b = new d, e = 0, c = this.faces.length; e < c; e++) {
      var l = this.faces[e], f = this.vertices[l.a], h = this.vertices[l.b];
      a.subVectors(this.vertices[l.c], h);
      b.subVectors(f, h);
      a.cross(b);
      a.normalize();
      l.normal.copy(a);
    }
  }, computeVertexNormals:function(a) {
    void 0 === a && (a = !0);
    var g, b = Array(this.vertices.length), e = 0;
    for (g = this.vertices.length; e < g; e++) {
      b[e] = new d;
    }
    if (a) {
      var c = new d, l = new d;
      a = 0;
      for (e = this.faces.length; a < e; a++) {
        g = this.faces[a];
        var f = this.vertices[g.a], h = this.vertices[g.b];
        c.subVectors(this.vertices[g.c], h);
        l.subVectors(f, h);
        c.cross(l);
        b[g.a].add(c);
        b[g.b].add(c);
        b[g.c].add(c);
      }
    } else {
      for (this.computeFaceNormals(), a = 0, e = this.faces.length; a < e; a++) {
        g = this.faces[a], b[g.a].add(g.normal), b[g.b].add(g.normal), b[g.c].add(g.normal);
      }
    }
    e = 0;
    for (g = this.vertices.length; e < g; e++) {
      b[e].normalize();
    }
    a = 0;
    for (e = this.faces.length; a < e; a++) {
      g = this.faces[a], f = g.vertexNormals, 3 === f.length ? (f[0].copy(b[g.a]), f[1].copy(b[g.b]), f[2].copy(b[g.c])) : (f[0] = b[g.a].clone(), f[1] = b[g.b].clone(), f[2] = b[g.c].clone());
    }
    0 < this.faces.length && (this.normalsNeedUpdate = !0);
  }, computeFlatVertexNormals:function() {
    var a;
    this.computeFaceNormals();
    var b = 0;
    for (a = this.faces.length; b < a; b++) {
      var e = this.faces[b], c = e.vertexNormals;
      3 === c.length ? (c[0].copy(e.normal), c[1].copy(e.normal), c[2].copy(e.normal)) : (c[0] = e.normal.clone(), c[1] = e.normal.clone(), c[2] = e.normal.clone());
    }
    0 < this.faces.length && (this.normalsNeedUpdate = !0);
  }, computeMorphNormals:function() {
    var a, b, e = 0;
    for (b = this.faces.length; e < b; e++) {
      var c = this.faces[e];
      c.__originalFaceNormal ? c.__originalFaceNormal.copy(c.normal) : c.__originalFaceNormal = c.normal.clone();
      c.__originalVertexNormals || (c.__originalVertexNormals = []);
      var l = 0;
      for (a = c.vertexNormals.length; l < a; l++) {
        c.__originalVertexNormals[l] ? c.__originalVertexNormals[l].copy(c.vertexNormals[l]) : c.__originalVertexNormals[l] = c.vertexNormals[l].clone();
      }
    }
    var f = new H;
    f.faces = this.faces;
    l = 0;
    for (a = this.morphTargets.length; l < a; l++) {
      if (!this.morphNormals[l]) {
        this.morphNormals[l] = {};
        this.morphNormals[l].faceNormals = [];
        this.morphNormals[l].vertexNormals = [];
        c = this.morphNormals[l].faceNormals;
        var h = this.morphNormals[l].vertexNormals;
        e = 0;
        for (b = this.faces.length; e < b; e++) {
          var p = new d, k = {a:new d, b:new d, c:new d};
          c.push(p);
          h.push(k);
        }
      }
      h = this.morphNormals[l];
      f.vertices = this.morphTargets[l].vertices;
      f.computeFaceNormals();
      f.computeVertexNormals();
      e = 0;
      for (b = this.faces.length; e < b; e++) {
        c = this.faces[e], p = h.faceNormals[e], k = h.vertexNormals[e], p.copy(c.normal), k.a.copy(c.vertexNormals[0]), k.b.copy(c.vertexNormals[1]), k.c.copy(c.vertexNormals[2]);
      }
    }
    e = 0;
    for (b = this.faces.length; e < b; e++) {
      c = this.faces[e], c.normal = c.__originalFaceNormal, c.vertexNormals = c.__originalVertexNormals;
    }
  }, computeBoundingBox:function() {
    null === this.boundingBox && (this.boundingBox = new u);
    this.boundingBox.setFromPoints(this.vertices);
  }, computeBoundingSphere:function() {
    null === this.boundingSphere && (this.boundingSphere = new w);
    this.boundingSphere.setFromPoints(this.vertices);
  }, merge:function(a, b, e) {
    if (a && a.isGeometry) {
      var g, c = this.vertices.length, d = this.vertices, l = a.vertices, f = this.faces, r = a.faces, p = this.faceVertexUvs[0], k = a.faceVertexUvs[0], m = this.colors, n = a.colors;
      void 0 === e && (e = 0);
      void 0 !== b && (g = (new h).getNormalMatrix(b));
      a = 0;
      for (var t = l.length; a < t; a++) {
        var u = l[a].clone();
        void 0 !== b && u.applyMatrix4(b);
        d.push(u);
      }
      a = 0;
      for (t = n.length; a < t; a++) {
        m.push(n[a].clone());
      }
      a = 0;
      for (t = r.length; a < t; a++) {
        l = r[a];
        var q = l.vertexNormals;
        n = l.vertexColors;
        m = new D(l.a + c, l.b + c, l.c + c);
        m.normal.copy(l.normal);
        void 0 !== g && m.normal.applyMatrix3(g).normalize();
        b = 0;
        for (d = q.length; b < d; b++) {
          u = q[b].clone(), void 0 !== g && u.applyMatrix3(g).normalize(), m.vertexNormals.push(u);
        }
        m.color.copy(l.color);
        b = 0;
        for (d = n.length; b < d; b++) {
          u = n[b], m.vertexColors.push(u.clone());
        }
        m.materialIndex = l.materialIndex + e;
        f.push(m);
      }
      a = 0;
      for (t = k.length; a < t; a++) {
        if (e = k[a], g = [], void 0 !== e) {
          b = 0;
          for (d = e.length; b < d; b++) {
            g.push(e[b].clone());
          }
          p.push(g);
        }
      }
    } else {
      console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.", a);
    }
  }, mergeMesh:function(a) {
    a && a.isMesh ? (a.matrixAutoUpdate && a.updateMatrix(), this.merge(a.geometry, a.matrix)) : console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.", a);
  }, mergeVertices:function() {
    var a = {}, b = [], e = [], c = Math.pow(10, 4), d, l = 0;
    for (d = this.vertices.length; l < d; l++) {
      var f = this.vertices[l];
      f = Math.round(f.x * c) + "_" + Math.round(f.y * c) + "_" + Math.round(f.z * c);
      void 0 === a[f] ? (a[f] = l, b.push(this.vertices[l]), e[l] = b.length - 1) : e[l] = e[a[f]];
    }
    a = [];
    l = 0;
    for (d = this.faces.length; l < d; l++) {
      for (c = this.faces[l], c.a = e[c.a], c.b = e[c.b], c.c = e[c.c], c = [c.a, c.b, c.c], f = 0; 3 > f; f++) {
        if (c[f] === c[(f + 1) % 3]) {
          a.push(l);
          break;
        }
      }
    }
    for (l = a.length - 1; 0 <= l; l--) {
      for (c = a[l], this.faces.splice(c, 1), e = 0, d = this.faceVertexUvs.length; e < d; e++) {
        this.faceVertexUvs[e].splice(c, 1);
      }
    }
    l = this.vertices.length - b.length;
    this.vertices = b;
    return l;
  }, setFromPoints:function(a) {
    this.vertices = [];
    for (var g = 0, b = a.length; g < b; g++) {
      var e = a[g];
      this.vertices.push(new d(e.x, e.y, e.z || 0));
    }
    return this;
  }, sortFacesByMaterialIndex:function() {
    for (var a = this.faces, b = a.length, e = 0; e < b; e++) {
      a[e]._id = e;
    }
    a.sort(function(a, g) {
      return a.materialIndex - g.materialIndex;
    });
    var c = this.faceVertexUvs[0], d = this.faceVertexUvs[1], l, f;
    c && c.length === b && (l = []);
    d && d.length === b && (f = []);
    for (e = 0; e < b; e++) {
      var h = a[e]._id;
      l && l.push(c[h]);
      f && f.push(d[h]);
    }
    l && (this.faceVertexUvs[0] = l);
    f && (this.faceVertexUvs[1] = f);
  }, toJSON:function() {
    function a(a, g, b) {
      return b ? a | 1 << g : a & ~(1 << g);
    }
    function b(a) {
      var g = a.x.toString() + a.y.toString() + a.z.toString();
      if (void 0 !== k[g]) {
        return k[g];
      }
      k[g] = p.length / 3;
      p.push(a.x, a.y, a.z);
      return k[g];
    }
    function e(a) {
      var g = a.r.toString() + a.g.toString() + a.b.toString();
      if (void 0 !== n[g]) {
        return n[g];
      }
      n[g] = m.length;
      m.push(a.getHex());
      return n[g];
    }
    function c(a) {
      var g = a.x.toString() + a.y.toString();
      if (void 0 !== u[g]) {
        return u[g];
      }
      u[g] = t.length / 2;
      t.push(a.x, a.y);
      return u[g];
    }
    var d = {metadata:{version:4.5, type:"Geometry", generator:"Geometry.toJSON"}};
    d.uuid = this.uuid;
    d.type = this.type;
    "" !== this.name && (d.name = this.name);
    if (void 0 !== this.parameters) {
      var l = this.parameters, f;
      for (f in l) {
        void 0 !== l[f] && (d[f] = l[f]);
      }
      return d;
    }
    l = [];
    for (f = 0; f < this.vertices.length; f++) {
      var h = this.vertices[f];
      l.push(h.x, h.y, h.z);
    }
    h = [];
    var p = [], k = {}, m = [], n = {}, t = [], u = {};
    for (f = 0; f < this.faces.length; f++) {
      var q = this.faces[f], v = void 0 !== this.faceVertexUvs[0][f], w = 0 < q.normal.length(), z = 0 < q.vertexNormals.length, y = 1 !== q.color.r || 1 !== q.color.g || 1 !== q.color.b, x = 0 < q.vertexColors.length, D = 0;
      D = a(D, 0, 0);
      D = a(D, 1, !0);
      D = a(D, 2, !1);
      D = a(D, 3, v);
      D = a(D, 4, w);
      D = a(D, 5, z);
      D = a(D, 6, y);
      D = a(D, 7, x);
      h.push(D);
      h.push(q.a, q.b, q.c);
      h.push(q.materialIndex);
      v && (v = this.faceVertexUvs[0][f], h.push(c(v[0]), c(v[1]), c(v[2])));
      w && h.push(b(q.normal));
      z && (w = q.vertexNormals, h.push(b(w[0]), b(w[1]), b(w[2])));
      y && h.push(e(q.color));
      x && (q = q.vertexColors, h.push(e(q[0]), e(q[1]), e(q[2])));
    }
    d.data = {};
    d.data.vertices = l;
    d.data.normals = p;
    0 < m.length && (d.data.colors = m);
    0 < t.length && (d.data.uvs = [t]);
    d.data.faces = h;
    return d;
  }, clone:function() {
    return (new H).copy(this);
  }, copy:function(a) {
    var g, b, e;
    this.vertices = [];
    this.colors = [];
    this.faces = [];
    this.faceVertexUvs = [[]];
    this.morphTargets = [];
    this.morphNormals = [];
    this.skinWeights = [];
    this.skinIndices = [];
    this.lineDistances = [];
    this.boundingSphere = this.boundingBox = null;
    this.name = a.name;
    var c = a.vertices, d = 0;
    for (g = c.length; d < g; d++) {
      this.vertices.push(c[d].clone());
    }
    c = a.colors;
    d = 0;
    for (g = c.length; d < g; d++) {
      this.colors.push(c[d].clone());
    }
    c = a.faces;
    d = 0;
    for (g = c.length; d < g; d++) {
      this.faces.push(c[d].clone());
    }
    d = 0;
    for (g = a.faceVertexUvs.length; d < g; d++) {
      var l = a.faceVertexUvs[d];
      void 0 === this.faceVertexUvs[d] && (this.faceVertexUvs[d] = []);
      c = 0;
      for (b = l.length; c < b; c++) {
        var f = l[c], h = [], p = 0;
        for (e = f.length; p < e; p++) {
          h.push(f[p].clone());
        }
        this.faceVertexUvs[d].push(h);
      }
    }
    p = a.morphTargets;
    d = 0;
    for (g = p.length; d < g; d++) {
      e = {};
      e.name = p[d].name;
      if (void 0 !== p[d].vertices) {
        for (e.vertices = [], c = 0, b = p[d].vertices.length; c < b; c++) {
          e.vertices.push(p[d].vertices[c].clone());
        }
      }
      if (void 0 !== p[d].normals) {
        for (e.normals = [], c = 0, b = p[d].normals.length; c < b; c++) {
          e.normals.push(p[d].normals[c].clone());
        }
      }
      this.morphTargets.push(e);
    }
    p = a.morphNormals;
    d = 0;
    for (g = p.length; d < g; d++) {
      e = {};
      if (void 0 !== p[d].vertexNormals) {
        for (e.vertexNormals = [], c = 0, b = p[d].vertexNormals.length; c < b; c++) {
          l = p[d].vertexNormals[c], f = {}, f.a = l.a.clone(), f.b = l.b.clone(), f.c = l.c.clone(), e.vertexNormals.push(f);
        }
      }
      if (void 0 !== p[d].faceNormals) {
        for (e.faceNormals = [], c = 0, b = p[d].faceNormals.length; c < b; c++) {
          e.faceNormals.push(p[d].faceNormals[c].clone());
        }
      }
      this.morphNormals.push(e);
    }
    c = a.skinWeights;
    d = 0;
    for (g = c.length; d < g; d++) {
      this.skinWeights.push(c[d].clone());
    }
    c = a.skinIndices;
    d = 0;
    for (g = c.length; d < g; d++) {
      this.skinIndices.push(c[d].clone());
    }
    c = a.lineDistances;
    d = 0;
    for (g = c.length; d < g; d++) {
      this.lineDistances.push(c[d]);
    }
    d = a.boundingBox;
    null !== d && (this.boundingBox = d.clone());
    d = a.boundingSphere;
    null !== d && (this.boundingSphere = d.clone());
    this.elementsNeedUpdate = a.elementsNeedUpdate;
    this.verticesNeedUpdate = a.verticesNeedUpdate;
    this.uvsNeedUpdate = a.uvsNeedUpdate;
    this.normalsNeedUpdate = a.normalsNeedUpdate;
    this.colorsNeedUpdate = a.colorsNeedUpdate;
    this.lineDistancesNeedUpdate = a.lineDistancesNeedUpdate;
    this.groupsNeedUpdate = a.groupsNeedUpdate;
    return this;
  }, dispose:function() {
    this.dispatchEvent({type:"dispose"});
  }});
  Object.defineProperty(K.prototype, "needsUpdate", {set:function(a) {
    !0 === a && this.version++;
  }});
  Object.assign(K.prototype, {isBufferAttribute:!0, onUploadCallback:function() {
  }, setArray:function(a) {
    if (Array.isArray(a)) {
      throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
    }
    this.count = void 0 !== a ? a.length / this.itemSize : 0;
    this.array = a;
    return this;
  }, setDynamic:function(a) {
    this.dynamic = a;
    return this;
  }, copy:function(a) {
    this.name = a.name;
    this.array = new a.array.constructor(a.array);
    this.itemSize = a.itemSize;
    this.count = a.count;
    this.normalized = a.normalized;
    this.dynamic = a.dynamic;
    return this;
  }, copyAt:function(a, b, e) {
    a *= this.itemSize;
    e *= b.itemSize;
    for (var g = 0, c = this.itemSize; g < c; g++) {
      this.array[a + g] = b.array[e + g];
    }
    return this;
  }, copyArray:function(a) {
    this.array.set(a);
    return this;
  }, copyColorsArray:function(a) {
    for (var g = this.array, b = 0, e = 0, c = a.length; e < c; e++) {
      var d = a[e];
      void 0 === d && (console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined", e), d = new z);
      g[b++] = d.r;
      g[b++] = d.g;
      g[b++] = d.b;
    }
    return this;
  }, copyVector2sArray:function(a) {
    for (var g = this.array, b = 0, e = 0, c = a.length; e < c; e++) {
      var d = a[e];
      void 0 === d && (console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined", e), d = new k);
      g[b++] = d.x;
      g[b++] = d.y;
    }
    return this;
  }, copyVector3sArray:function(a) {
    for (var g = this.array, b = 0, e = 0, c = a.length; e < c; e++) {
      var l = a[e];
      void 0 === l && (console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined", e), l = new d);
      g[b++] = l.x;
      g[b++] = l.y;
      g[b++] = l.z;
    }
    return this;
  }, copyVector4sArray:function(a) {
    for (var g = this.array, b = 0, e = 0, c = a.length; e < c; e++) {
      var d = a[e];
      void 0 === d && (console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined", e), d = new q);
      g[b++] = d.x;
      g[b++] = d.y;
      g[b++] = d.z;
      g[b++] = d.w;
    }
    return this;
  }, set:function(a, b) {
    void 0 === b && (b = 0);
    this.array.set(a, b);
    return this;
  }, getX:function(a) {
    return this.array[a * this.itemSize];
  }, setX:function(a, b) {
    this.array[a * this.itemSize] = b;
    return this;
  }, getY:function(a) {
    return this.array[a * this.itemSize + 1];
  }, setY:function(a, b) {
    this.array[a * this.itemSize + 1] = b;
    return this;
  }, getZ:function(a) {
    return this.array[a * this.itemSize + 2];
  }, setZ:function(a, b) {
    this.array[a * this.itemSize + 2] = b;
    return this;
  }, getW:function(a) {
    return this.array[a * this.itemSize + 3];
  }, setW:function(a, b) {
    this.array[a * this.itemSize + 3] = b;
    return this;
  }, setXY:function(a, b, e) {
    a *= this.itemSize;
    this.array[a + 0] = b;
    this.array[a + 1] = e;
    return this;
  }, setXYZ:function(a, b, e, c) {
    a *= this.itemSize;
    this.array[a + 0] = b;
    this.array[a + 1] = e;
    this.array[a + 2] = c;
    return this;
  }, setXYZW:function(a, b, e, c, d) {
    a *= this.itemSize;
    this.array[a + 0] = b;
    this.array[a + 1] = e;
    this.array[a + 2] = c;
    this.array[a + 3] = d;
    return this;
  }, onUpload:function(a) {
    this.onUploadCallback = a;
    return this;
  }, clone:function() {
    return (new this.constructor(this.array, this.itemSize)).copy(this);
  }});
  I.prototype = Object.create(K.prototype);
  I.prototype.constructor = I;
  L.prototype = Object.create(K.prototype);
  L.prototype.constructor = L;
  R.prototype = Object.create(K.prototype);
  R.prototype.constructor = R;
  J.prototype = Object.create(K.prototype);
  J.prototype.constructor = J;
  Q.prototype = Object.create(K.prototype);
  Q.prototype.constructor = Q;
  aa.prototype = Object.create(K.prototype);
  aa.prototype.constructor = aa;
  V.prototype = Object.create(K.prototype);
  V.prototype.constructor = V;
  N.prototype = Object.create(K.prototype);
  N.prototype.constructor = N;
  S.prototype = Object.create(K.prototype);
  S.prototype.constructor = S;
  Object.assign(W.prototype, {computeGroups:function(a) {
    var g = [], b = void 0;
    a = a.faces;
    for (var e = 0; e < a.length; e++) {
      var c = a[e];
      if (c.materialIndex !== b) {
        b = c.materialIndex;
        void 0 !== d && (d.count = 3 * e - d.start, g.push(d));
        var d = {start:3 * e, materialIndex:b};
      }
    }
    void 0 !== d && (d.count = 3 * e - d.start, g.push(d));
    this.groups = g;
  }, fromGeometry:function(a) {
    var g = a.faces, b = a.vertices, e = a.faceVertexUvs, c = e[0] && 0 < e[0].length, d = e[1] && 0 < e[1].length, l = a.morphTargets, f = l.length;
    if (0 < f) {
      for (var h = [], p = 0; p < f; p++) {
        h[p] = {name:l[p].name, data:[]};
      }
      this.morphTargets.position = h;
    }
    var m = a.morphNormals, n = m.length;
    if (0 < n) {
      var t = [];
      for (p = 0; p < n; p++) {
        t[p] = {name:m[p].name, data:[]};
      }
      this.morphTargets.normal = t;
    }
    var u = a.skinIndices, q = a.skinWeights, v = u.length === b.length, w = q.length === b.length;
    0 < b.length && 0 === g.length && console.error("THREE.DirectGeometry: Faceless geometries are not supported.");
    for (p = 0; p < g.length; p++) {
      var z = g[p];
      this.vertices.push(b[z.a], b[z.b], b[z.c]);
      var y = z.vertexNormals;
      3 === y.length ? this.normals.push(y[0], y[1], y[2]) : (y = z.normal, this.normals.push(y, y, y));
      y = z.vertexColors;
      3 === y.length ? this.colors.push(y[0], y[1], y[2]) : (y = z.color, this.colors.push(y, y, y));
      !0 === c && (y = e[0][p], void 0 !== y ? this.uvs.push(y[0], y[1], y[2]) : (console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ", p), this.uvs.push(new k, new k, new k)));
      !0 === d && (y = e[1][p], void 0 !== y ? this.uvs2.push(y[0], y[1], y[2]) : (console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ", p), this.uvs2.push(new k, new k, new k)));
      for (y = 0; y < f; y++) {
        var x = l[y].vertices;
        h[y].data.push(x[z.a], x[z.b], x[z.c]);
      }
      for (y = 0; y < n; y++) {
        x = m[y].vertexNormals[p], t[y].data.push(x.a, x.b, x.c);
      }
      v && this.skinIndices.push(u[z.a], u[z.b], u[z.c]);
      w && this.skinWeights.push(q[z.a], q[z.b], q[z.c]);
    }
    this.computeGroups(a);
    this.verticesNeedUpdate = a.verticesNeedUpdate;
    this.normalsNeedUpdate = a.normalsNeedUpdate;
    this.colorsNeedUpdate = a.colorsNeedUpdate;
    this.uvsNeedUpdate = a.uvsNeedUpdate;
    this.groupsNeedUpdate = a.groupsNeedUpdate;
    return this;
  }});
  var $f = 1;
  O.prototype = Object.assign(Object.create(c.prototype), {constructor:O, isBufferGeometry:!0, getIndex:function() {
    return this.index;
  }, setIndex:function(a) {
    Array.isArray(a) ? this.index = new (65535 < M(a) ? V : Q)(a, 1) : this.index = a;
  }, addAttribute:function(a, b, e) {
    if (!(b && b.isBufferAttribute || b && b.isInterleavedBufferAttribute)) {
      return console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."), this.addAttribute(a, new K(b, e));
    }
    if ("index" === a) {
      return console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."), this.setIndex(b), this;
    }
    this.attributes[a] = b;
    return this;
  }, getAttribute:function(a) {
    return this.attributes[a];
  }, removeAttribute:function(a) {
    delete this.attributes[a];
    return this;
  }, addGroup:function(a, b, e) {
    this.groups.push({start:a, count:b, materialIndex:void 0 !== e ? e : 0});
  }, clearGroups:function() {
    this.groups = [];
  }, setDrawRange:function(a, b) {
    this.drawRange.start = a;
    this.drawRange.count = b;
  }, applyMatrix:function(a) {
    var g = this.attributes.position;
    void 0 !== g && (a.applyToBufferAttribute(g), g.needsUpdate = !0);
    var b = this.attributes.normal;
    void 0 !== b && (g = (new h).getNormalMatrix(a), g.applyToBufferAttribute(b), b.needsUpdate = !0);
    b = this.attributes.tangent;
    void 0 !== b && (g = (new h).getNormalMatrix(a), g.applyToBufferAttribute(b), b.needsUpdate = !0);
    null !== this.boundingBox && this.computeBoundingBox();
    null !== this.boundingSphere && this.computeBoundingSphere();
    return this;
  }, rotateX:function() {
    var a = new b;
    return function(g) {
      a.makeRotationX(g);
      this.applyMatrix(a);
      return this;
    };
  }(), rotateY:function() {
    var a = new b;
    return function(g) {
      a.makeRotationY(g);
      this.applyMatrix(a);
      return this;
    };
  }(), rotateZ:function() {
    var a = new b;
    return function(g) {
      a.makeRotationZ(g);
      this.applyMatrix(a);
      return this;
    };
  }(), translate:function() {
    var a = new b;
    return function(g, b, e) {
      a.makeTranslation(g, b, e);
      this.applyMatrix(a);
      return this;
    };
  }(), scale:function() {
    var a = new b;
    return function(g, b, e) {
      a.makeScale(g, b, e);
      this.applyMatrix(a);
      return this;
    };
  }(), lookAt:function() {
    var a = new G;
    return function(g) {
      a.lookAt(g);
      a.updateMatrix();
      this.applyMatrix(a.matrix);
    };
  }(), center:function() {
    var a = new d;
    return function() {
      this.computeBoundingBox();
      this.boundingBox.getCenter(a).negate();
      this.translate(a.x, a.y, a.z);
      return this;
    };
  }(), setFromObject:function(a) {
    var g = a.geometry;
    if (a.isPoints || a.isLine) {
      a = new N(3 * g.vertices.length, 3);
      var b = new N(3 * g.colors.length, 3);
      this.addAttribute("position", a.copyVector3sArray(g.vertices));
      this.addAttribute("color", b.copyColorsArray(g.colors));
      g.lineDistances && g.lineDistances.length === g.vertices.length && (a = new N(g.lineDistances.length, 1), this.addAttribute("lineDistance", a.copyArray(g.lineDistances)));
      null !== g.boundingSphere && (this.boundingSphere = g.boundingSphere.clone());
      null !== g.boundingBox && (this.boundingBox = g.boundingBox.clone());
    } else {
      a.isMesh && g && g.isGeometry && this.fromGeometry(g);
    }
    return this;
  }, setFromPoints:function(a) {
    for (var g = [], b = 0, e = a.length; b < e; b++) {
      var c = a[b];
      g.push(c.x, c.y, c.z || 0);
    }
    this.addAttribute("position", new N(g, 3));
    return this;
  }, updateFromObject:function(a) {
    var g = a.geometry;
    if (a.isMesh) {
      var b = g.__directGeometry;
      !0 === g.elementsNeedUpdate && (b = void 0, g.elementsNeedUpdate = !1);
      if (void 0 === b) {
        return this.fromGeometry(g);
      }
      b.verticesNeedUpdate = g.verticesNeedUpdate;
      b.normalsNeedUpdate = g.normalsNeedUpdate;
      b.colorsNeedUpdate = g.colorsNeedUpdate;
      b.uvsNeedUpdate = g.uvsNeedUpdate;
      b.groupsNeedUpdate = g.groupsNeedUpdate;
      g.verticesNeedUpdate = !1;
      g.normalsNeedUpdate = !1;
      g.colorsNeedUpdate = !1;
      g.uvsNeedUpdate = !1;
      g.groupsNeedUpdate = !1;
      g = b;
    }
    !0 === g.verticesNeedUpdate && (b = this.attributes.position, void 0 !== b && (b.copyVector3sArray(g.vertices), b.needsUpdate = !0), g.verticesNeedUpdate = !1);
    !0 === g.normalsNeedUpdate && (b = this.attributes.normal, void 0 !== b && (b.copyVector3sArray(g.normals), b.needsUpdate = !0), g.normalsNeedUpdate = !1);
    !0 === g.colorsNeedUpdate && (b = this.attributes.color, void 0 !== b && (b.copyColorsArray(g.colors), b.needsUpdate = !0), g.colorsNeedUpdate = !1);
    g.uvsNeedUpdate && (b = this.attributes.uv, void 0 !== b && (b.copyVector2sArray(g.uvs), b.needsUpdate = !0), g.uvsNeedUpdate = !1);
    g.lineDistancesNeedUpdate && (b = this.attributes.lineDistance, void 0 !== b && (b.copyArray(g.lineDistances), b.needsUpdate = !0), g.lineDistancesNeedUpdate = !1);
    g.groupsNeedUpdate && (g.computeGroups(a.geometry), this.groups = g.groups, g.groupsNeedUpdate = !1);
    return this;
  }, fromGeometry:function(a) {
    a.__directGeometry = (new W).fromGeometry(a);
    return this.fromDirectGeometry(a.__directGeometry);
  }, fromDirectGeometry:function(a) {
    var g = new Float32Array(3 * a.vertices.length);
    this.addAttribute("position", (new K(g, 3)).copyVector3sArray(a.vertices));
    0 < a.normals.length && (g = new Float32Array(3 * a.normals.length), this.addAttribute("normal", (new K(g, 3)).copyVector3sArray(a.normals)));
    0 < a.colors.length && (g = new Float32Array(3 * a.colors.length), this.addAttribute("color", (new K(g, 3)).copyColorsArray(a.colors)));
    0 < a.uvs.length && (g = new Float32Array(2 * a.uvs.length), this.addAttribute("uv", (new K(g, 2)).copyVector2sArray(a.uvs)));
    0 < a.uvs2.length && (g = new Float32Array(2 * a.uvs2.length), this.addAttribute("uv2", (new K(g, 2)).copyVector2sArray(a.uvs2)));
    this.groups = a.groups;
    for (var b in a.morphTargets) {
      g = [];
      for (var e = a.morphTargets[b], c = 0, d = e.length; c < d; c++) {
        var l = e[c], f = new N(3 * l.data.length, 3);
        f.name = l.name;
        g.push(f.copyVector3sArray(l.data));
      }
      this.morphAttributes[b] = g;
    }
    0 < a.skinIndices.length && (b = new N(4 * a.skinIndices.length, 4), this.addAttribute("skinIndex", b.copyVector4sArray(a.skinIndices)));
    0 < a.skinWeights.length && (b = new N(4 * a.skinWeights.length, 4), this.addAttribute("skinWeight", b.copyVector4sArray(a.skinWeights)));
    null !== a.boundingSphere && (this.boundingSphere = a.boundingSphere.clone());
    null !== a.boundingBox && (this.boundingBox = a.boundingBox.clone());
    return this;
  }, computeBoundingBox:function() {
    var a = new u;
    return function() {
      null === this.boundingBox && (this.boundingBox = new u);
      var g = this.attributes.position, b = this.morphAttributes.position;
      if (void 0 !== g) {
        if (this.boundingBox.setFromBufferAttribute(g), b) {
          g = 0;
          for (var e = b.length; g < e; g++) {
            a.setFromBufferAttribute(b[g]), this.boundingBox.expandByPoint(a.min), this.boundingBox.expandByPoint(a.max);
          }
        }
      } else {
        this.boundingBox.makeEmpty();
      }
      (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) && console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
    };
  }(), computeBoundingSphere:function() {
    var a = new u, b = new u, e = new d;
    return function() {
      null === this.boundingSphere && (this.boundingSphere = new w);
      var g = this.attributes.position, c = this.morphAttributes.position;
      if (g) {
        var d = this.boundingSphere.center;
        a.setFromBufferAttribute(g);
        if (c) {
          for (var l = 0, f = c.length; l < f; l++) {
            var h = c[l];
            b.setFromBufferAttribute(h);
            a.expandByPoint(b.min);
            a.expandByPoint(b.max);
          }
        }
        a.getCenter(d);
        var p = 0;
        l = 0;
        for (f = g.count; l < f; l++) {
          e.fromBufferAttribute(g, l), p = Math.max(p, d.distanceToSquared(e));
        }
        if (c) {
          for (l = 0, f = c.length; l < f; l++) {
            h = c[l];
            g = 0;
            for (var r = h.count; g < r; g++) {
              e.fromBufferAttribute(h, l), p = Math.max(p, d.distanceToSquared(e));
            }
          }
        }
        this.boundingSphere.radius = Math.sqrt(p);
        isNaN(this.boundingSphere.radius) && console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
      }
    };
  }(), computeFaceNormals:function() {
  }, computeVertexNormals:function() {
    var a = this.index, b = this.attributes;
    if (b.position) {
      var e = b.position.array;
      if (void 0 === b.normal) {
        this.addAttribute("normal", new K(new Float32Array(e.length), 3));
      } else {
        for (var c = b.normal.array, l = 0, f = c.length; l < f; l++) {
          c[l] = 0;
        }
      }
      c = b.normal.array;
      var h = new d, p = new d, k = new d, m = new d, n = new d;
      if (a) {
        var t = a.array;
        l = 0;
        for (f = a.count; l < f; l += 3) {
          a = 3 * t[l + 0];
          var u = 3 * t[l + 1], q = 3 * t[l + 2];
          h.fromArray(e, a);
          p.fromArray(e, u);
          k.fromArray(e, q);
          m.subVectors(k, p);
          n.subVectors(h, p);
          m.cross(n);
          c[a] += m.x;
          c[a + 1] += m.y;
          c[a + 2] += m.z;
          c[u] += m.x;
          c[u + 1] += m.y;
          c[u + 2] += m.z;
          c[q] += m.x;
          c[q + 1] += m.y;
          c[q + 2] += m.z;
        }
      } else {
        for (l = 0, f = e.length; l < f; l += 9) {
          h.fromArray(e, l), p.fromArray(e, l + 3), k.fromArray(e, l + 6), m.subVectors(k, p), n.subVectors(h, p), m.cross(n), c[l] = m.x, c[l + 1] = m.y, c[l + 2] = m.z, c[l + 3] = m.x, c[l + 4] = m.y, c[l + 5] = m.z, c[l + 6] = m.x, c[l + 7] = m.y, c[l + 8] = m.z;
        }
      }
      this.normalizeNormals();
      b.normal.needsUpdate = !0;
    }
  }, merge:function(a, b) {
    if (a && a.isBufferGeometry) {
      void 0 === b && (b = 0, console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));
      var g = this.attributes, e;
      for (e in g) {
        if (void 0 !== a.attributes[e]) {
          var c = g[e].array, d = a.attributes[e], l = d.array, f = 0;
          for (d = d.itemSize * b; f < l.length; f++, d++) {
            c[d] = l[f];
          }
        }
      }
      return this;
    }
    console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.", a);
  }, normalizeNormals:function() {
    var a = new d;
    return function() {
      for (var g = this.attributes.normal, b = 0, e = g.count; b < e; b++) {
        a.x = g.getX(b), a.y = g.getY(b), a.z = g.getZ(b), a.normalize(), g.setXYZ(b, a.x, a.y, a.z);
      }
    };
  }(), toNonIndexed:function() {
    function a(a, g) {
      var b = a.array;
      a = a.itemSize;
      for (var e = new b.constructor(g.length * a), c, d = 0, l = 0, f = g.length; l < f; l++) {
        c = g[l] * a;
        for (var h = 0; h < a; h++) {
          e[d++] = b[c++];
        }
      }
      return new K(e, a);
    }
    if (null === this.index) {
      return console.warn("THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed."), this;
    }
    var b = new O, e = this.index.array, c = this.attributes, d;
    for (d in c) {
      var l = c[d];
      l = a(l, e);
      b.addAttribute(d, l);
    }
    var f = this.morphAttributes;
    for (d in f) {
      var h = [], p = f[d];
      c = 0;
      for (var k = p.length; c < k; c++) {
        l = p[c], l = a(l, e), h.push(l);
      }
      b.morphAttributes[d] = h;
    }
    e = this.groups;
    c = 0;
    for (d = e.length; c < d; c++) {
      l = e[c], b.addGroup(l.start, l.count, l.materialIndex);
    }
    return b;
  }, toJSON:function() {
    var a = {metadata:{version:4.5, type:"BufferGeometry", generator:"BufferGeometry.toJSON"}};
    a.uuid = this.uuid;
    a.type = this.type;
    "" !== this.name && (a.name = this.name);
    0 < Object.keys(this.userData).length && (a.userData = this.userData);
    if (void 0 !== this.parameters) {
      var b = this.parameters;
      for (k in b) {
        void 0 !== b[k] && (a[k] = b[k]);
      }
      return a;
    }
    a.data = {attributes:{}};
    b = this.index;
    null !== b && (a.data.index = {type:b.array.constructor.name, array:Array.prototype.slice.call(b.array)});
    var e = this.attributes;
    for (k in e) {
      b = e[k];
      var c = {itemSize:b.itemSize, type:b.array.constructor.name, array:Array.prototype.slice.call(b.array), normalized:b.normalized};
      "" !== b.name && (c.name = b.name);
      a.data.attributes[k] = c;
    }
    e = {};
    var d = !1;
    for (k in this.morphAttributes) {
      for (var l = this.morphAttributes[k], f = [], h = 0, p = l.length; h < p; h++) {
        b = l[h], c = {itemSize:b.itemSize, type:b.array.constructor.name, array:Array.prototype.slice.call(b.array), normalized:b.normalized}, "" !== b.name && (c.name = b.name), f.push(c);
      }
      0 < f.length && (e[k] = f, d = !0);
    }
    d && (a.data.morphAttributes = e);
    var k = this.groups;
    0 < k.length && (a.data.groups = JSON.parse(JSON.stringify(k)));
    k = this.boundingSphere;
    null !== k && (a.data.boundingSphere = {center:k.center.toArray(), radius:k.radius});
    return a;
  }, clone:function() {
    return (new O).copy(this);
  }, copy:function(a) {
    var g;
    this.index = null;
    this.attributes = {};
    this.morphAttributes = {};
    this.groups = [];
    this.boundingSphere = this.boundingBox = null;
    this.name = a.name;
    var b = a.index;
    null !== b && this.setIndex(b.clone());
    b = a.attributes;
    for (l in b) {
      this.addAttribute(l, b[l].clone());
    }
    var e = a.morphAttributes;
    for (l in e) {
      var c = [], d = e[l];
      b = 0;
      for (g = d.length; b < g; b++) {
        c.push(d[b].clone());
      }
      this.morphAttributes[l] = c;
    }
    var l = a.groups;
    b = 0;
    for (g = l.length; b < g; b++) {
      e = l[b], this.addGroup(e.start, e.count, e.materialIndex);
    }
    l = a.boundingBox;
    null !== l && (this.boundingBox = l.clone());
    l = a.boundingSphere;
    null !== l && (this.boundingSphere = l.clone());
    this.drawRange.start = a.drawRange.start;
    this.drawRange.count = a.drawRange.count;
    this.userData = a.userData;
    return this;
  }, dispose:function() {
    this.dispatchEvent({type:"dispose"});
  }});
  P.prototype = Object.create(H.prototype);
  P.prototype.constructor = P;
  ka.prototype = Object.create(O.prototype);
  ka.prototype.constructor = ka;
  ha.prototype = Object.create(H.prototype);
  ha.prototype.constructor = ha;
  ja.prototype = Object.create(O.prototype);
  ja.prototype.constructor = ja;
  var bg = 0;
  X.prototype = Object.assign(Object.create(c.prototype), {constructor:X, isMaterial:!0, onBeforeCompile:function() {
  }, setValues:function(a) {
    if (void 0 !== a) {
      for (var g in a) {
        var b = a[g];
        if (void 0 === b) {
          console.warn("THREE.Material: '" + g + "' parameter is undefined.");
        } else {
          if ("shading" === g) {
            console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead."), this.flatShading = 1 === b ? !0 : !1;
          } else {
            var e = this[g];
            void 0 === e ? console.warn("THREE." + this.type + ": '" + g + "' is not a property of this material.") : e && e.isColor ? e.set(b) : e && e.isVector3 && b && b.isVector3 ? e.copy(b) : this[g] = b;
          }
        }
      }
    }
  }, toJSON:function(a) {
    function g(a) {
      var g = [], b;
      for (b in a) {
        var e = a[b];
        delete e.metadata;
        g.push(e);
      }
      return g;
    }
    var b = void 0 === a || "string" === typeof a;
    b && (a = {textures:{}, images:{}});
    var e = {metadata:{version:4.5, type:"Material", generator:"Material.toJSON"}};
    e.uuid = this.uuid;
    e.type = this.type;
    "" !== this.name && (e.name = this.name);
    this.color && this.color.isColor && (e.color = this.color.getHex());
    void 0 !== this.roughness && (e.roughness = this.roughness);
    void 0 !== this.metalness && (e.metalness = this.metalness);
    this.emissive && this.emissive.isColor && (e.emissive = this.emissive.getHex());
    1 !== this.emissiveIntensity && (e.emissiveIntensity = this.emissiveIntensity);
    this.specular && this.specular.isColor && (e.specular = this.specular.getHex());
    void 0 !== this.shininess && (e.shininess = this.shininess);
    void 0 !== this.clearCoat && (e.clearCoat = this.clearCoat);
    void 0 !== this.clearCoatRoughness && (e.clearCoatRoughness = this.clearCoatRoughness);
    this.map && this.map.isTexture && (e.map = this.map.toJSON(a).uuid);
    this.alphaMap && this.alphaMap.isTexture && (e.alphaMap = this.alphaMap.toJSON(a).uuid);
    this.lightMap && this.lightMap.isTexture && (e.lightMap = this.lightMap.toJSON(a).uuid);
    this.aoMap && this.aoMap.isTexture && (e.aoMap = this.aoMap.toJSON(a).uuid, e.aoMapIntensity = this.aoMapIntensity);
    this.bumpMap && this.bumpMap.isTexture && (e.bumpMap = this.bumpMap.toJSON(a).uuid, e.bumpScale = this.bumpScale);
    this.normalMap && this.normalMap.isTexture && (e.normalMap = this.normalMap.toJSON(a).uuid, e.normalMapType = this.normalMapType, e.normalScale = this.normalScale.toArray());
    this.displacementMap && this.displacementMap.isTexture && (e.displacementMap = this.displacementMap.toJSON(a).uuid, e.displacementScale = this.displacementScale, e.displacementBias = this.displacementBias);
    this.roughnessMap && this.roughnessMap.isTexture && (e.roughnessMap = this.roughnessMap.toJSON(a).uuid);
    this.metalnessMap && this.metalnessMap.isTexture && (e.metalnessMap = this.metalnessMap.toJSON(a).uuid);
    this.emissiveMap && this.emissiveMap.isTexture && (e.emissiveMap = this.emissiveMap.toJSON(a).uuid);
    this.specularMap && this.specularMap.isTexture && (e.specularMap = this.specularMap.toJSON(a).uuid);
    this.envMap && this.envMap.isTexture && (e.envMap = this.envMap.toJSON(a).uuid, e.reflectivity = this.reflectivity, void 0 !== this.combine && (e.combine = this.combine), void 0 !== this.envMapIntensity && (e.envMapIntensity = this.envMapIntensity));
    this.gradientMap && this.gradientMap.isTexture && (e.gradientMap = this.gradientMap.toJSON(a).uuid);
    void 0 !== this.size && (e.size = this.size);
    void 0 !== this.sizeAttenuation && (e.sizeAttenuation = this.sizeAttenuation);
    1 !== this.blending && (e.blending = this.blending);
    !0 === this.flatShading && (e.flatShading = this.flatShading);
    0 !== this.side && (e.side = this.side);
    0 !== this.vertexColors && (e.vertexColors = this.vertexColors);
    1 > this.opacity && (e.opacity = this.opacity);
    !0 === this.transparent && (e.transparent = this.transparent);
    e.depthFunc = this.depthFunc;
    e.depthTest = this.depthTest;
    e.depthWrite = this.depthWrite;
    0 !== this.rotation && (e.rotation = this.rotation);
    !0 === this.polygonOffset && (e.polygonOffset = !0);
    0 !== this.polygonOffsetFactor && (e.polygonOffsetFactor = this.polygonOffsetFactor);
    0 !== this.polygonOffsetUnits && (e.polygonOffsetUnits = this.polygonOffsetUnits);
    1 !== this.linewidth && (e.linewidth = this.linewidth);
    void 0 !== this.dashSize && (e.dashSize = this.dashSize);
    void 0 !== this.gapSize && (e.gapSize = this.gapSize);
    void 0 !== this.scale && (e.scale = this.scale);
    !0 === this.dithering && (e.dithering = !0);
    0 < this.alphaTest && (e.alphaTest = this.alphaTest);
    !0 === this.premultipliedAlpha && (e.premultipliedAlpha = this.premultipliedAlpha);
    !0 === this.wireframe && (e.wireframe = this.wireframe);
    1 < this.wireframeLinewidth && (e.wireframeLinewidth = this.wireframeLinewidth);
    "round" !== this.wireframeLinecap && (e.wireframeLinecap = this.wireframeLinecap);
    "round" !== this.wireframeLinejoin && (e.wireframeLinejoin = this.wireframeLinejoin);
    !0 === this.morphTargets && (e.morphTargets = !0);
    !0 === this.skinning && (e.skinning = !0);
    !1 === this.visible && (e.visible = !1);
    "{}" !== JSON.stringify(this.userData) && (e.userData = this.userData);
    b && (b = g(a.textures), a = g(a.images), 0 < b.length && (e.textures = b), 0 < a.length && (e.images = a));
    return e;
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(a) {
    this.name = a.name;
    this.fog = a.fog;
    this.lights = a.lights;
    this.blending = a.blending;
    this.side = a.side;
    this.flatShading = a.flatShading;
    this.vertexColors = a.vertexColors;
    this.opacity = a.opacity;
    this.transparent = a.transparent;
    this.blendSrc = a.blendSrc;
    this.blendDst = a.blendDst;
    this.blendEquation = a.blendEquation;
    this.blendSrcAlpha = a.blendSrcAlpha;
    this.blendDstAlpha = a.blendDstAlpha;
    this.blendEquationAlpha = a.blendEquationAlpha;
    this.depthFunc = a.depthFunc;
    this.depthTest = a.depthTest;
    this.depthWrite = a.depthWrite;
    this.colorWrite = a.colorWrite;
    this.precision = a.precision;
    this.polygonOffset = a.polygonOffset;
    this.polygonOffsetFactor = a.polygonOffsetFactor;
    this.polygonOffsetUnits = a.polygonOffsetUnits;
    this.dithering = a.dithering;
    this.alphaTest = a.alphaTest;
    this.premultipliedAlpha = a.premultipliedAlpha;
    this.visible = a.visible;
    this.userData = JSON.parse(JSON.stringify(a.userData));
    this.clipShadows = a.clipShadows;
    this.clipIntersection = a.clipIntersection;
    var g = a.clippingPlanes, b = null;
    if (null !== g) {
      var e = g.length;
      b = Array(e);
      for (var c = 0; c !== e; ++c) {
        b[c] = g[c].clone();
      }
    }
    this.clippingPlanes = b;
    this.shadowSide = a.shadowSide;
    return this;
  }, dispose:function() {
    this.dispatchEvent({type:"dispose"});
  }});
  fa.prototype = Object.create(X.prototype);
  fa.prototype.constructor = fa;
  fa.prototype.isShaderMaterial = !0;
  fa.prototype.copy = function(a) {
    X.prototype.copy.call(this, a);
    this.fragmentShader = a.fragmentShader;
    this.vertexShader = a.vertexShader;
    this.uniforms = p(a.uniforms);
    this.defines = Object.assign({}, a.defines);
    this.wireframe = a.wireframe;
    this.wireframeLinewidth = a.wireframeLinewidth;
    this.lights = a.lights;
    this.clipping = a.clipping;
    this.skinning = a.skinning;
    this.morphTargets = a.morphTargets;
    this.morphNormals = a.morphNormals;
    this.extensions = a.extensions;
    return this;
  };
  fa.prototype.toJSON = function(a) {
    var g = X.prototype.toJSON.call(this, a);
    g.uniforms = {};
    for (var b in this.uniforms) {
      var e = this.uniforms[b].value;
      g.uniforms[b] = e && e.isTexture ? {type:"t", value:e.toJSON(a).uuid} : e && e.isColor ? {type:"c", value:e.getHex()} : e && e.isVector2 ? {type:"v2", value:e.toArray()} : e && e.isVector3 ? {type:"v3", value:e.toArray()} : e && e.isVector4 ? {type:"v4", value:e.toArray()} : e && e.isMatrix3 ? {type:"m3", value:e.toArray()} : e && e.isMatrix4 ? {type:"m4", value:e.toArray()} : {value:e};
    }
    0 < Object.keys(this.defines).length && (g.defines = this.defines);
    g.vertexShader = this.vertexShader;
    g.fragmentShader = this.fragmentShader;
    a = {};
    for (var c in this.extensions) {
      !0 === this.extensions[c] && (a[c] = !0);
    }
    0 < Object.keys(a).length && (g.extensions = a);
    return g;
  };
  Object.assign(ba.prototype, {set:function(a, b) {
    this.origin.copy(a);
    this.direction.copy(b);
    return this;
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(a) {
    this.origin.copy(a.origin);
    this.direction.copy(a.direction);
    return this;
  }, at:function(a, b) {
    void 0 === b && (console.warn("THREE.Ray: .at() target is now required"), b = new d);
    return b.copy(this.direction).multiplyScalar(a).add(this.origin);
  }, lookAt:function(a) {
    this.direction.copy(a).sub(this.origin).normalize();
    return this;
  }, recast:function() {
    var a = new d;
    return function(g) {
      this.origin.copy(this.at(g, a));
      return this;
    };
  }(), closestPointToPoint:function(a, b) {
    void 0 === b && (console.warn("THREE.Ray: .closestPointToPoint() target is now required"), b = new d);
    b.subVectors(a, this.origin);
    a = b.dot(this.direction);
    return 0 > a ? b.copy(this.origin) : b.copy(this.direction).multiplyScalar(a).add(this.origin);
  }, distanceToPoint:function(a) {
    return Math.sqrt(this.distanceSqToPoint(a));
  }, distanceSqToPoint:function() {
    var a = new d;
    return function(g) {
      var b = a.subVectors(g, this.origin).dot(this.direction);
      if (0 > b) {
        return this.origin.distanceToSquared(g);
      }
      a.copy(this.direction).multiplyScalar(b).add(this.origin);
      return a.distanceToSquared(g);
    };
  }(), distanceSqToSegment:function() {
    var a = new d, b = new d, e = new d;
    return function(g, c, d, l) {
      a.copy(g).add(c).multiplyScalar(.5);
      b.copy(c).sub(g).normalize();
      e.copy(this.origin).sub(a);
      var f = .5 * g.distanceTo(c), h = -this.direction.dot(b), p = e.dot(this.direction), k = -e.dot(b), r = e.lengthSq(), m = Math.abs(1 - h * h);
      if (0 < m) {
        g = h * k - p;
        c = h * p - k;
        var n = f * m;
        0 <= g ? c >= -n ? c <= n ? (f = 1 / m, g *= f, c *= f, h = g * (g + h * c + 2 * p) + c * (h * g + c + 2 * k) + r) : (c = f, g = Math.max(0, -(h * c + p)), h = -g * g + c * (c + 2 * k) + r) : (c = -f, g = Math.max(0, -(h * c + p)), h = -g * g + c * (c + 2 * k) + r) : c <= -n ? (g = Math.max(0, -(-h * f + p)), c = 0 < g ? -f : Math.min(Math.max(-f, -k), f), h = -g * g + c * (c + 2 * k) + r) : c <= n ? (g = 0, c = Math.min(Math.max(-f, -k), f), h = c * (c + 2 * k) + r) : (g = Math.max(0, -(h * 
        f + p)), c = 0 < g ? f : Math.min(Math.max(-f, -k), f), h = -g * g + c * (c + 2 * k) + r);
      } else {
        c = 0 < h ? -f : f, g = Math.max(0, -(h * c + p)), h = -g * g + c * (c + 2 * k) + r;
      }
      d && d.copy(this.direction).multiplyScalar(g).add(this.origin);
      l && l.copy(b).multiplyScalar(c).add(a);
      return h;
    };
  }(), intersectSphere:function() {
    var a = new d;
    return function(g, b) {
      a.subVectors(g.center, this.origin);
      var e = a.dot(this.direction), c = a.dot(a) - e * e;
      g = g.radius * g.radius;
      if (c > g) {
        return null;
      }
      g = Math.sqrt(g - c);
      c = e - g;
      e += g;
      return 0 > c && 0 > e ? null : 0 > c ? this.at(e, b) : this.at(c, b);
    };
  }(), intersectsSphere:function(a) {
    return this.distanceSqToPoint(a.center) <= a.radius * a.radius;
  }, distanceToPlane:function(a) {
    var g = a.normal.dot(this.direction);
    if (0 === g) {
      return 0 === a.distanceToPoint(this.origin) ? 0 : null;
    }
    a = -(this.origin.dot(a.normal) + a.constant) / g;
    return 0 <= a ? a : null;
  }, intersectPlane:function(a, b) {
    a = this.distanceToPlane(a);
    return null === a ? null : this.at(a, b);
  }, intersectsPlane:function(a) {
    var g = a.distanceToPoint(this.origin);
    return 0 === g || 0 > a.normal.dot(this.direction) * g ? !0 : !1;
  }, intersectBox:function(a, b) {
    var g = 1 / this.direction.x, e = 1 / this.direction.y, c = 1 / this.direction.z, d = this.origin;
    if (0 <= g) {
      var l = (a.min.x - d.x) * g;
      g *= a.max.x - d.x;
    } else {
      l = (a.max.x - d.x) * g, g *= a.min.x - d.x;
    }
    if (0 <= e) {
      var f = (a.min.y - d.y) * e;
      e *= a.max.y - d.y;
    } else {
      f = (a.max.y - d.y) * e, e *= a.min.y - d.y;
    }
    if (l > e || f > g) {
      return null;
    }
    if (f > l || l !== l) {
      l = f;
    }
    if (e < g || g !== g) {
      g = e;
    }
    0 <= c ? (f = (a.min.z - d.z) * c, a = (a.max.z - d.z) * c) : (f = (a.max.z - d.z) * c, a = (a.min.z - d.z) * c);
    if (l > a || f > g) {
      return null;
    }
    if (f > l || l !== l) {
      l = f;
    }
    if (a < g || g !== g) {
      g = a;
    }
    return 0 > g ? null : this.at(0 <= l ? l : g, b);
  }, intersectsBox:function() {
    var a = new d;
    return function(g) {
      return null !== this.intersectBox(g, a);
    };
  }(), intersectTriangle:function() {
    var a = new d, b = new d, e = new d, c = new d;
    return function(g, d, l, f, h) {
      b.subVectors(d, g);
      e.subVectors(l, g);
      c.crossVectors(b, e);
      d = this.direction.dot(c);
      if (0 < d) {
        if (f) {
          return null;
        }
        f = 1;
      } else {
        if (0 > d) {
          f = -1, d = -d;
        } else {
          return null;
        }
      }
      a.subVectors(this.origin, g);
      g = f * this.direction.dot(e.crossVectors(a, e));
      if (0 > g) {
        return null;
      }
      l = f * this.direction.dot(b.cross(a));
      if (0 > l || g + l > d) {
        return null;
      }
      g = -f * a.dot(c);
      return 0 > g ? null : this.at(g / d, h);
    };
  }(), applyMatrix4:function(a) {
    this.origin.applyMatrix4(a);
    this.direction.transformDirection(a);
    return this;
  }, equals:function(a) {
    return a.origin.equals(this.origin) && a.direction.equals(this.direction);
  }});
  Object.assign(la, {getNormal:function() {
    var a = new d;
    return function(g, b, e, c) {
      void 0 === c && (console.warn("THREE.Triangle: .getNormal() target is now required"), c = new d);
      c.subVectors(e, b);
      a.subVectors(g, b);
      c.cross(a);
      g = c.lengthSq();
      return 0 < g ? c.multiplyScalar(1 / Math.sqrt(g)) : c.set(0, 0, 0);
    };
  }(), getBarycoord:function() {
    var a = new d, b = new d, e = new d;
    return function(g, c, l, f, h) {
      a.subVectors(f, c);
      b.subVectors(l, c);
      e.subVectors(g, c);
      g = a.dot(a);
      c = a.dot(b);
      l = a.dot(e);
      var p = b.dot(b);
      f = b.dot(e);
      var k = g * p - c * c;
      void 0 === h && (console.warn("THREE.Triangle: .getBarycoord() target is now required"), h = new d);
      if (0 === k) {
        return h.set(-2, -1, -1);
      }
      k = 1 / k;
      p = (p * l - c * f) * k;
      g = (g * f - c * l) * k;
      return h.set(1 - p - g, g, p);
    };
  }(), containsPoint:function() {
    var a = new d;
    return function(g, b, e, c) {
      la.getBarycoord(g, b, e, c, a);
      return 0 <= a.x && 0 <= a.y && 1 >= a.x + a.y;
    };
  }(), getUV:function() {
    var a = new d;
    return function(g, b, e, c, d, l, f, h) {
      this.getBarycoord(g, b, e, c, a);
      h.set(0, 0);
      h.addScaledVector(d, a.x);
      h.addScaledVector(l, a.y);
      h.addScaledVector(f, a.z);
      return h;
    };
  }()});
  Object.assign(la.prototype, {set:function(a, b, e) {
    this.a.copy(a);
    this.b.copy(b);
    this.c.copy(e);
    return this;
  }, setFromPointsAndIndices:function(a, b, e, c) {
    this.a.copy(a[b]);
    this.b.copy(a[e]);
    this.c.copy(a[c]);
    return this;
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(a) {
    this.a.copy(a.a);
    this.b.copy(a.b);
    this.c.copy(a.c);
    return this;
  }, getArea:function() {
    var a = new d, b = new d;
    return function() {
      a.subVectors(this.c, this.b);
      b.subVectors(this.a, this.b);
      return .5 * a.cross(b).length();
    };
  }(), getMidpoint:function(a) {
    void 0 === a && (console.warn("THREE.Triangle: .getMidpoint() target is now required"), a = new d);
    return a.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
  }, getNormal:function(a) {
    return la.getNormal(this.a, this.b, this.c, a);
  }, getPlane:function(a) {
    void 0 === a && (console.warn("THREE.Triangle: .getPlane() target is now required"), a = new d);
    return a.setFromCoplanarPoints(this.a, this.b, this.c);
  }, getBarycoord:function(a, b) {
    return la.getBarycoord(a, this.a, this.b, this.c, b);
  }, containsPoint:function(a) {
    return la.containsPoint(a, this.a, this.b, this.c);
  }, getUV:function(a, b, e, c, d) {
    return la.getUV(a, this.a, this.b, this.c, b, e, c, d);
  }, intersectsBox:function(a) {
    return a.intersectsTriangle(this);
  }, closestPointToPoint:function() {
    var a = new d, b = new d, e = new d, c = new d, l = new d, f = new d;
    return function(g, h) {
      void 0 === h && (console.warn("THREE.Triangle: .closestPointToPoint() target is now required"), h = new d);
      var p = this.a, k = this.b, r = this.c;
      a.subVectors(k, p);
      b.subVectors(r, p);
      c.subVectors(g, p);
      var m = a.dot(c), n = b.dot(c);
      if (0 >= m && 0 >= n) {
        return h.copy(p);
      }
      l.subVectors(g, k);
      var t = a.dot(l), u = b.dot(l);
      if (0 <= t && u <= t) {
        return h.copy(k);
      }
      var q = m * u - t * n;
      if (0 >= q && 0 <= m && 0 >= t) {
        return k = m / (m - t), h.copy(p).addScaledVector(a, k);
      }
      f.subVectors(g, r);
      g = a.dot(f);
      var v = b.dot(f);
      if (0 <= v && g <= v) {
        return h.copy(r);
      }
      m = g * n - m * v;
      if (0 >= m && 0 <= n && 0 >= v) {
        return q = n / (n - v), h.copy(p).addScaledVector(b, q);
      }
      n = t * v - g * u;
      if (0 >= n && 0 <= u - t && 0 <= g - v) {
        return e.subVectors(r, k), q = (u - t) / (u - t + (g - v)), h.copy(k).addScaledVector(e, q);
      }
      r = 1 / (n + m + q);
      k = m * r;
      q *= r;
      return h.copy(p).addScaledVector(a, k).addScaledVector(b, q);
    };
  }(), equals:function(a) {
    return a.a.equals(this.a) && a.b.equals(this.b) && a.c.equals(this.c);
  }});
  ma.prototype = Object.create(X.prototype);
  ma.prototype.constructor = ma;
  ma.prototype.isMeshBasicMaterial = !0;
  ma.prototype.copy = function(a) {
    X.prototype.copy.call(this, a);
    this.color.copy(a.color);
    this.map = a.map;
    this.lightMap = a.lightMap;
    this.lightMapIntensity = a.lightMapIntensity;
    this.aoMap = a.aoMap;
    this.aoMapIntensity = a.aoMapIntensity;
    this.specularMap = a.specularMap;
    this.alphaMap = a.alphaMap;
    this.envMap = a.envMap;
    this.combine = a.combine;
    this.reflectivity = a.reflectivity;
    this.refractionRatio = a.refractionRatio;
    this.wireframe = a.wireframe;
    this.wireframeLinewidth = a.wireframeLinewidth;
    this.wireframeLinecap = a.wireframeLinecap;
    this.wireframeLinejoin = a.wireframeLinejoin;
    this.skinning = a.skinning;
    this.morphTargets = a.morphTargets;
    return this;
  };
  ca.prototype = Object.assign(Object.create(G.prototype), {constructor:ca, isMesh:!0, setDrawMode:function(a) {
    this.drawMode = a;
  }, copy:function(a) {
    G.prototype.copy.call(this, a);
    this.drawMode = a.drawMode;
    void 0 !== a.morphTargetInfluences && (this.morphTargetInfluences = a.morphTargetInfluences.slice());
    void 0 !== a.morphTargetDictionary && (this.morphTargetDictionary = Object.assign({}, a.morphTargetDictionary));
    return this;
  }, updateMorphTargets:function() {
    var a = this.geometry;
    if (a.isBufferGeometry) {
      a = a.morphAttributes;
      var b = Object.keys(a);
      if (0 < b.length) {
        var e = a[b[0]];
        if (void 0 !== e) {
          for (this.morphTargetInfluences = [], this.morphTargetDictionary = {}, a = 0, b = e.length; a < b; a++) {
            var c = e[a].name || String(a);
            this.morphTargetInfluences.push(0);
            this.morphTargetDictionary[c] = a;
          }
        }
      }
    } else {
      a = a.morphTargets, void 0 !== a && 0 < a.length && console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
    }
  }, raycast:function() {
    function a(a, g, b, e, c, d, l, f) {
      if (null === (1 === g.side ? e.intersectTriangle(l, d, c, !0, f) : e.intersectTriangle(c, d, l, 2 !== g.side, f))) {
        return null;
      }
      x.copy(f);
      x.applyMatrix4(a.matrixWorld);
      g = b.ray.origin.distanceTo(x);
      return g < b.near || g > b.far ? null : {distance:g, point:x.clone(), object:a};
    }
    function e(g, b, e, c, d, l, f, r, n) {
      h.fromBufferAttribute(d, f);
      p.fromBufferAttribute(d, r);
      m.fromBufferAttribute(d, n);
      if (g = a(g, b, e, c, h, p, m, y)) {
        l && (q.fromBufferAttribute(l, f), v.fromBufferAttribute(l, r), z.fromBufferAttribute(l, n), g.uv = la.getUV(y, h, p, m, q, v, z, new k)), l = new D(f, r, n), la.getNormal(h, p, m, l.normal), g.face = l;
      }
      return g;
    }
    var c = new b, l = new ba, f = new w, h = new d, p = new d, m = new d, n = new d, t = new d, u = new d, q = new k, v = new k, z = new k, y = new d, x = new d;
    return function(g, b) {
      var d = this.geometry, r = this.material, w = this.matrixWorld;
      if (void 0 !== r && (null === d.boundingSphere && d.computeBoundingSphere(), f.copy(d.boundingSphere), f.applyMatrix4(w), !1 !== g.ray.intersectsSphere(f) && (c.getInverse(w), l.copy(g.ray).applyMatrix4(c), null === d.boundingBox || !1 !== l.intersectsBox(d.boundingBox)))) {
        if (d.isBufferGeometry) {
          var x = d.index, F = d.attributes.position, D = d.attributes.uv, C = d.groups;
          d = d.drawRange;
          var T, B;
          if (null !== x) {
            if (Array.isArray(r)) {
              var E = 0;
              for (T = C.length; E < T; E++) {
                var A = C[E], Y = r[A.materialIndex], G = Math.max(A.start, d.start);
                for (B = Math.min(A.start + A.count, d.start + d.count); G < B; G += 3) {
                  w = x.getX(G);
                  var U = x.getX(G + 1), M = x.getX(G + 2);
                  if (w = e(this, Y, g, l, F, D, w, U, M)) {
                    w.faceIndex = Math.floor(G / 3), w.face.materialIndex = A.materialIndex, b.push(w);
                  }
                }
              }
            } else {
              for (G = Math.max(0, d.start), w = Math.min(x.count, d.start + d.count), E = G, T = w; E < T; E += 3) {
                if (w = x.getX(E), U = x.getX(E + 1), M = x.getX(E + 2), w = e(this, r, g, l, F, D, w, U, M)) {
                  w.faceIndex = Math.floor(E / 3), b.push(w);
                }
              }
            }
          } else {
            if (void 0 !== F) {
              if (Array.isArray(r)) {
                for (E = 0, T = C.length; E < T; E++) {
                  for (A = C[E], Y = r[A.materialIndex], G = Math.max(A.start, d.start), B = w = Math.min(A.start + A.count, d.start + d.count); G < B; G += 3) {
                    if (w = G, U = G + 1, M = G + 2, w = e(this, Y, g, l, F, D, w, U, M)) {
                      w.faceIndex = Math.floor(G / 3), w.face.materialIndex = A.materialIndex, b.push(w);
                    }
                  }
                }
              } else {
                for (G = Math.max(0, d.start), w = Math.min(F.count, d.start + d.count), E = G, T = w; E < T; E += 3) {
                  if (w = E, U = E + 1, M = E + 2, w = e(this, r, g, l, F, D, w, U, M)) {
                    w.faceIndex = Math.floor(E / 3), b.push(w);
                  }
                }
              }
            }
          }
        } else {
          if (d.isGeometry) {
            for (F = Array.isArray(r), D = d.vertices, C = d.faces, w = d.faceVertexUvs[0], 0 < w.length && (x = w), Y = 0, G = C.length; Y < G; Y++) {
              if (B = C[Y], w = F ? r[B.materialIndex] : r, void 0 !== w) {
                E = D[B.a];
                T = D[B.b];
                A = D[B.c];
                if (!0 === w.morphTargets) {
                  U = d.morphTargets;
                  M = this.morphTargetInfluences;
                  h.set(0, 0, 0);
                  p.set(0, 0, 0);
                  m.set(0, 0, 0);
                  for (var H = 0, O = U.length; H < O; H++) {
                    var I = M[H];
                    if (0 !== I) {
                      var Ba = U[H].vertices;
                      h.addScaledVector(n.subVectors(Ba[B.a], E), I);
                      p.addScaledVector(t.subVectors(Ba[B.b], T), I);
                      m.addScaledVector(u.subVectors(Ba[B.c], A), I);
                    }
                  }
                  h.add(E);
                  p.add(T);
                  m.add(A);
                  E = h;
                  T = p;
                  A = m;
                }
                if (w = a(this, w, g, l, E, T, A, y)) {
                  x && x[Y] && (U = x[Y], q.copy(U[0]), v.copy(U[1]), z.copy(U[2]), w.uv = la.getUV(y, E, T, A, q, v, z, new k)), w.face = B, w.faceIndex = Y, b.push(w);
                }
              }
            }
          }
        }
      }
    };
  }(), clone:function() {
    return (new this.constructor(this.geometry, this.material)).copy(this);
  }});
  ya.prototype = Object.create(n.prototype);
  ya.prototype.constructor = ya;
  ya.prototype.isCubeTexture = !0;
  Object.defineProperty(ya.prototype, "images", {get:function() {
    return this.image;
  }, set:function(a) {
    this.image = a;
  }});
  Ja.prototype = Object.create(n.prototype);
  Ja.prototype.constructor = Ja;
  Ja.prototype.isDataTexture2DArray = !0;
  fb.prototype = Object.create(n.prototype);
  fb.prototype.constructor = fb;
  fb.prototype.isDataTexture3D = !0;
  var kf = new n, cg = new Ja, dg = new fb, lf = new ya, ef = [], ff = [], jf = new Float32Array(16), hf = new Float32Array(9), gf = new Float32Array(4);
  ub.prototype.updateCache = function(a) {
    var g = this.cache;
    a instanceof Float32Array && g.length !== a.length && (this.cache = new Float32Array(a.length));
    ua(g, a);
  };
  Ob.prototype.setValue = function(a, b, e) {
    for (var g = this.seq, c = 0, d = g.length; c !== d; ++c) {
      var l = g[c];
      l.setValue(a, b[l.id], e);
    }
  };
  var te = /([\w\d_]+)(\])?(\[|\.)?/g;
  Ib.prototype.setValue = function(a, b, e) {
    b = this.map[b];
    void 0 !== b && b.setValue(a, e, this.renderer);
  };
  Ib.prototype.setOptional = function(a, b, e) {
    b = b[e];
    void 0 !== b && this.setValue(a, e, b);
  };
  Ib.upload = function(a, b, e, c) {
    for (var g = 0, d = b.length; g !== d; ++g) {
      var l = b[g], f = e[l.id];
      !1 !== f.needsUpdate && l.setValue(a, f.value, c);
    }
  };
  Ib.seqWithValue = function(a, b) {
    for (var g = [], e = 0, c = a.length; e !== c; ++e) {
      var d = a[e];
      d.id in b && g.push(d);
    }
    return g;
  };
  var jg = 0, rg = 0;
  Jb.prototype = Object.create(X.prototype);
  Jb.prototype.constructor = Jb;
  Jb.prototype.isMeshDepthMaterial = !0;
  Jb.prototype.copy = function(a) {
    X.prototype.copy.call(this, a);
    this.depthPacking = a.depthPacking;
    this.skinning = a.skinning;
    this.morphTargets = a.morphTargets;
    this.map = a.map;
    this.alphaMap = a.alphaMap;
    this.displacementMap = a.displacementMap;
    this.displacementScale = a.displacementScale;
    this.displacementBias = a.displacementBias;
    this.wireframe = a.wireframe;
    this.wireframeLinewidth = a.wireframeLinewidth;
    return this;
  };
  Kb.prototype = Object.create(X.prototype);
  Kb.prototype.constructor = Kb;
  Kb.prototype.isMeshDistanceMaterial = !0;
  Kb.prototype.copy = function(a) {
    X.prototype.copy.call(this, a);
    this.referencePosition.copy(a.referencePosition);
    this.nearDistance = a.nearDistance;
    this.farDistance = a.farDistance;
    this.skinning = a.skinning;
    this.morphTargets = a.morphTargets;
    this.map = a.map;
    this.alphaMap = a.alphaMap;
    this.displacementMap = a.displacementMap;
    this.displacementScale = a.displacementScale;
    this.displacementBias = a.displacementBias;
    return this;
  };
  kc.prototype = Object.assign(Object.create(G.prototype), {constructor:kc, isGroup:!0});
  ib.prototype = Object.assign(Object.create(G.prototype), {constructor:ib, isCamera:!0, copy:function(a, b) {
    G.prototype.copy.call(this, a, b);
    this.matrixWorldInverse.copy(a.matrixWorldInverse);
    this.projectionMatrix.copy(a.projectionMatrix);
    this.projectionMatrixInverse.copy(a.projectionMatrixInverse);
    return this;
  }, getWorldDirection:function(a) {
    void 0 === a && (console.warn("THREE.Camera: .getWorldDirection() target is now required"), a = new d);
    this.updateMatrixWorld(!0);
    var g = this.matrixWorld.elements;
    return a.set(-g[8], -g[9], -g[10]).normalize();
  }, updateMatrixWorld:function(a) {
    G.prototype.updateMatrixWorld.call(this, a);
    this.matrixWorldInverse.getInverse(this.matrixWorld);
  }, clone:function() {
    return (new this.constructor).copy(this);
  }});
  ra.prototype = Object.assign(Object.create(ib.prototype), {constructor:ra, isPerspectiveCamera:!0, copy:function(a, b) {
    ib.prototype.copy.call(this, a, b);
    this.fov = a.fov;
    this.zoom = a.zoom;
    this.near = a.near;
    this.far = a.far;
    this.focus = a.focus;
    this.aspect = a.aspect;
    this.view = null === a.view ? null : Object.assign({}, a.view);
    this.filmGauge = a.filmGauge;
    this.filmOffset = a.filmOffset;
    return this;
  }, setFocalLength:function(a) {
    a = .5 * this.getFilmHeight() / a;
    this.fov = 2 * ia.RAD2DEG * Math.atan(a);
    this.updateProjectionMatrix();
  }, getFocalLength:function() {
    var a = Math.tan(.5 * ia.DEG2RAD * this.fov);
    return .5 * this.getFilmHeight() / a;
  }, getEffectiveFOV:function() {
    return 2 * ia.RAD2DEG * Math.atan(Math.tan(.5 * ia.DEG2RAD * this.fov) / this.zoom);
  }, getFilmWidth:function() {
    return this.filmGauge * Math.min(this.aspect, 1);
  }, getFilmHeight:function() {
    return this.filmGauge / Math.max(this.aspect, 1);
  }, setViewOffset:function(a, b, e, c, d, l) {
    this.aspect = a / b;
    null === this.view && (this.view = {enabled:!0, fullWidth:1, fullHeight:1, offsetX:0, offsetY:0, width:1, height:1});
    this.view.enabled = !0;
    this.view.fullWidth = a;
    this.view.fullHeight = b;
    this.view.offsetX = e;
    this.view.offsetY = c;
    this.view.width = d;
    this.view.height = l;
    this.updateProjectionMatrix();
  }, clearViewOffset:function() {
    null !== this.view && (this.view.enabled = !1);
    this.updateProjectionMatrix();
  }, updateProjectionMatrix:function() {
    var a = this.near, b = a * Math.tan(.5 * ia.DEG2RAD * this.fov) / this.zoom, e = 2 * b, c = this.aspect * e, d = -.5 * c, l = this.view;
    if (null !== this.view && this.view.enabled) {
      var f = l.fullWidth, h = l.fullHeight;
      d += l.offsetX * c / f;
      b -= l.offsetY * e / h;
      c *= l.width / f;
      e *= l.height / h;
    }
    l = this.filmOffset;
    0 !== l && (d += a * l / this.getFilmWidth());
    this.projectionMatrix.makePerspective(d, d + c, b, b - e, a, this.far);
    this.projectionMatrixInverse.getInverse(this.projectionMatrix);
  }, toJSON:function(a) {
    a = G.prototype.toJSON.call(this, a);
    a.object.fov = this.fov;
    a.object.zoom = this.zoom;
    a.object.near = this.near;
    a.object.far = this.far;
    a.object.focus = this.focus;
    a.object.aspect = this.aspect;
    null !== this.view && (a.object.view = Object.assign({}, this.view));
    a.object.filmGauge = this.filmGauge;
    a.object.filmOffset = this.filmOffset;
    return a;
  }});
  Tc.prototype = Object.assign(Object.create(ra.prototype), {constructor:Tc, isArrayCamera:!0});
  var uf = new d, vf = new d;
  Object.assign(Nd.prototype, {isFogExp2:!0, clone:function() {
    return new Nd(this.color, this.density);
  }, toJSON:function() {
    return {type:"FogExp2", color:this.color.getHex(), density:this.density};
  }});
  Object.assign(Od.prototype, {isFog:!0, clone:function() {
    return new Od(this.color, this.near, this.far);
  }, toJSON:function() {
    return {type:"Fog", color:this.color.getHex(), near:this.near, far:this.far};
  }});
  Pd.prototype = Object.assign(Object.create(G.prototype), {constructor:Pd, isScene:!0, copy:function(a, b) {
    G.prototype.copy.call(this, a, b);
    null !== a.background && (this.background = a.background.clone());
    null !== a.fog && (this.fog = a.fog.clone());
    null !== a.overrideMaterial && (this.overrideMaterial = a.overrideMaterial.clone());
    this.autoUpdate = a.autoUpdate;
    this.matrixAutoUpdate = a.matrixAutoUpdate;
    return this;
  }, toJSON:function(a) {
    var g = G.prototype.toJSON.call(this, a);
    null !== this.background && (g.object.background = this.background.toJSON(a));
    null !== this.fog && (g.object.fog = this.fog.toJSON());
    return g;
  }, dispose:function() {
    this.dispatchEvent({type:"dispose"});
  }});
  Object.defineProperty(Qb.prototype, "needsUpdate", {set:function(a) {
    !0 === a && this.version++;
  }});
  Object.assign(Qb.prototype, {isInterleavedBuffer:!0, onUploadCallback:function() {
  }, setArray:function(a) {
    if (Array.isArray(a)) {
      throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
    }
    this.count = void 0 !== a ? a.length / this.stride : 0;
    this.array = a;
    return this;
  }, setDynamic:function(a) {
    this.dynamic = a;
    return this;
  }, copy:function(a) {
    this.array = new a.array.constructor(a.array);
    this.count = a.count;
    this.stride = a.stride;
    this.dynamic = a.dynamic;
    return this;
  }, copyAt:function(a, b, e) {
    a *= this.stride;
    e *= b.stride;
    for (var g = 0, c = this.stride; g < c; g++) {
      this.array[a + g] = b.array[e + g];
    }
    return this;
  }, set:function(a, b) {
    void 0 === b && (b = 0);
    this.array.set(a, b);
    return this;
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, onUpload:function(a) {
    this.onUploadCallback = a;
    return this;
  }});
  Object.defineProperties(Uc.prototype, {count:{get:function() {
    return this.data.count;
  }}, array:{get:function() {
    return this.data.array;
  }}});
  Object.assign(Uc.prototype, {isInterleavedBufferAttribute:!0, setX:function(a, b) {
    this.data.array[a * this.data.stride + this.offset] = b;
    return this;
  }, setY:function(a, b) {
    this.data.array[a * this.data.stride + this.offset + 1] = b;
    return this;
  }, setZ:function(a, b) {
    this.data.array[a * this.data.stride + this.offset + 2] = b;
    return this;
  }, setW:function(a, b) {
    this.data.array[a * this.data.stride + this.offset + 3] = b;
    return this;
  }, getX:function(a) {
    return this.data.array[a * this.data.stride + this.offset];
  }, getY:function(a) {
    return this.data.array[a * this.data.stride + this.offset + 1];
  }, getZ:function(a) {
    return this.data.array[a * this.data.stride + this.offset + 2];
  }, getW:function(a) {
    return this.data.array[a * this.data.stride + this.offset + 3];
  }, setXY:function(a, b, e) {
    a = a * this.data.stride + this.offset;
    this.data.array[a + 0] = b;
    this.data.array[a + 1] = e;
    return this;
  }, setXYZ:function(a, b, e, c) {
    a = a * this.data.stride + this.offset;
    this.data.array[a + 0] = b;
    this.data.array[a + 1] = e;
    this.data.array[a + 2] = c;
    return this;
  }, setXYZW:function(a, b, e, c, d) {
    a = a * this.data.stride + this.offset;
    this.data.array[a + 0] = b;
    this.data.array[a + 1] = e;
    this.data.array[a + 2] = c;
    this.data.array[a + 3] = d;
    return this;
  }});
  Lb.prototype = Object.create(X.prototype);
  Lb.prototype.constructor = Lb;
  Lb.prototype.isSpriteMaterial = !0;
  Lb.prototype.copy = function(a) {
    X.prototype.copy.call(this, a);
    this.color.copy(a.color);
    this.map = a.map;
    this.rotation = a.rotation;
    this.sizeAttenuation = a.sizeAttenuation;
    return this;
  };
  var lc;
  Vc.prototype = Object.assign(Object.create(G.prototype), {constructor:Vc, isSprite:!0, raycast:function() {
    function a(a, g, b, e, c, d) {
      f.subVectors(a, b).addScalar(.5).multiply(e);
      void 0 !== c ? (h.x = d * f.x - c * f.y, h.y = c * f.x + d * f.y) : h.copy(f);
      a.copy(g);
      a.x += h.x;
      a.y += h.y;
      a.applyMatrix4(p);
    }
    var e = new d, c = new d, l = new d, f = new k, h = new k, p = new b, m = new d, n = new d, t = new d, u = new k, q = new k, v = new k;
    return function(g, b) {
      c.setFromMatrixScale(this.matrixWorld);
      p.getInverse(this.modelViewMatrix).premultiply(this.matrixWorld);
      l.setFromMatrixPosition(this.modelViewMatrix);
      var d = this.material.rotation;
      if (0 !== d) {
        var f = Math.cos(d), h = Math.sin(d);
      }
      d = this.center;
      a(m.set(-.5, -.5, 0), l, d, c, h, f);
      a(n.set(.5, -.5, 0), l, d, c, h, f);
      a(t.set(.5, .5, 0), l, d, c, h, f);
      u.set(0, 0);
      q.set(1, 0);
      v.set(1, 1);
      var r = g.ray.intersectTriangle(m, n, t, !1, e);
      if (null !== r || (a(n.set(-.5, .5, 0), l, d, c, h, f), q.set(0, 1), r = g.ray.intersectTriangle(m, t, n, !1, e), null !== r)) {
        h = g.ray.origin.distanceTo(e), h < g.near || h > g.far || b.push({distance:h, point:e.clone(), uv:la.getUV(e, m, n, t, u, q, v, new k), face:null, object:this});
      }
    };
  }(), clone:function() {
    return (new this.constructor(this.material)).copy(this);
  }, copy:function(a) {
    G.prototype.copy.call(this, a);
    void 0 !== a.center && this.center.copy(a.center);
    return this;
  }});
  Wc.prototype = Object.assign(Object.create(G.prototype), {constructor:Wc, copy:function(a) {
    G.prototype.copy.call(this, a, !1);
    a = a.levels;
    for (var g = 0, b = a.length; g < b; g++) {
      var e = a[g];
      this.addLevel(e.object.clone(), e.distance);
    }
    return this;
  }, addLevel:function(a, b) {
    void 0 === b && (b = 0);
    b = Math.abs(b);
    for (var g = this.levels, e = 0; e < g.length && !(b < g[e].distance); e++) {
    }
    g.splice(e, 0, {distance:b, object:a});
    this.add(a);
  }, getObjectForDistance:function(a) {
    for (var g = this.levels, b = 1, e = g.length; b < e && !(a < g[b].distance); b++) {
    }
    return g[b - 1].object;
  }, raycast:function() {
    var a = new d;
    return function(g, b) {
      a.setFromMatrixPosition(this.matrixWorld);
      var e = g.ray.origin.distanceTo(a);
      this.getObjectForDistance(e).raycast(g, b);
    };
  }(), update:function() {
    var a = new d, b = new d;
    return function(g) {
      var e = this.levels;
      if (1 < e.length) {
        a.setFromMatrixPosition(g.matrixWorld);
        b.setFromMatrixPosition(this.matrixWorld);
        g = a.distanceTo(b);
        e[0].object.visible = !0;
        for (var c = 1, d = e.length; c < d; c++) {
          if (g >= e[c].distance) {
            e[c - 1].object.visible = !1, e[c].object.visible = !0;
          } else {
            break;
          }
        }
        for (; c < d; c++) {
          e[c].object.visible = !1;
        }
      }
    };
  }(), toJSON:function(a) {
    a = G.prototype.toJSON.call(this, a);
    a.object.levels = [];
    for (var g = this.levels, b = 0, e = g.length; b < e; b++) {
      var c = g[b];
      a.object.levels.push({object:c.object.uuid, distance:c.distance});
    }
    return a;
  }});
  Xc.prototype = Object.assign(Object.create(ca.prototype), {constructor:Xc, isSkinnedMesh:!0, bind:function(a, b) {
    this.skeleton = a;
    void 0 === b && (this.updateMatrixWorld(!0), this.skeleton.calculateInverses(), b = this.matrixWorld);
    this.bindMatrix.copy(b);
    this.bindMatrixInverse.getInverse(b);
  }, pose:function() {
    this.skeleton.pose();
  }, normalizeSkinWeights:function() {
    for (var a = new q, b = this.geometry.attributes.skinWeight, e = 0, c = b.count; e < c; e++) {
      a.x = b.getX(e);
      a.y = b.getY(e);
      a.z = b.getZ(e);
      a.w = b.getW(e);
      var d = 1 / a.manhattanLength();
      Infinity !== d ? a.multiplyScalar(d) : a.set(1, 0, 0, 0);
      b.setXYZW(e, a.x, a.y, a.z, a.w);
    }
  }, updateMatrixWorld:function(a) {
    ca.prototype.updateMatrixWorld.call(this, a);
    "attached" === this.bindMode ? this.bindMatrixInverse.getInverse(this.matrixWorld) : "detached" === this.bindMode ? this.bindMatrixInverse.getInverse(this.bindMatrix) : console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode);
  }, clone:function() {
    return (new this.constructor(this.geometry, this.material)).copy(this);
  }});
  Object.assign(Qd.prototype, {calculateInverses:function() {
    this.boneInverses = [];
    for (var a = 0, e = this.bones.length; a < e; a++) {
      var c = new b;
      this.bones[a] && c.getInverse(this.bones[a].matrixWorld);
      this.boneInverses.push(c);
    }
  }, pose:function() {
    var a, b, e = 0;
    for (b = this.bones.length; e < b; e++) {
      (a = this.bones[e]) && a.matrixWorld.getInverse(this.boneInverses[e]);
    }
    e = 0;
    for (b = this.bones.length; e < b; e++) {
      if (a = this.bones[e]) {
        a.parent && a.parent.isBone ? (a.matrix.getInverse(a.parent.matrixWorld), a.matrix.multiply(a.matrixWorld)) : a.matrix.copy(a.matrixWorld), a.matrix.decompose(a.position, a.quaternion, a.scale);
      }
    }
  }, update:function() {
    var a = new b, e = new b;
    return function() {
      for (var g = this.bones, b = this.boneInverses, c = this.boneMatrices, d = this.boneTexture, l = 0, f = g.length; l < f; l++) {
        a.multiplyMatrices(g[l] ? g[l].matrixWorld : e, b[l]), a.toArray(c, 16 * l);
      }
      void 0 !== d && (d.needsUpdate = !0);
    };
  }(), clone:function() {
    return new Qd(this.bones, this.boneInverses);
  }, getBoneByName:function(a) {
    for (var g = 0, b = this.bones.length; g < b; g++) {
      var e = this.bones[g];
      if (e.name === a) {
        return e;
      }
    }
  }});
  we.prototype = Object.assign(Object.create(G.prototype), {constructor:we, isBone:!0});
  pa.prototype = Object.create(X.prototype);
  pa.prototype.constructor = pa;
  pa.prototype.isLineBasicMaterial = !0;
  pa.prototype.copy = function(a) {
    X.prototype.copy.call(this, a);
    this.color.copy(a.color);
    this.linewidth = a.linewidth;
    this.linecap = a.linecap;
    this.linejoin = a.linejoin;
    return this;
  };
  wa.prototype = Object.assign(Object.create(G.prototype), {constructor:wa, isLine:!0, computeLineDistances:function() {
    var a = new d, b = new d;
    return function() {
      var g = this.geometry;
      if (g.isBufferGeometry) {
        if (null === g.index) {
          for (var e = g.attributes.position, c = [0], d = 1, l = e.count; d < l; d++) {
            a.fromBufferAttribute(e, d - 1), b.fromBufferAttribute(e, d), c[d] = c[d - 1], c[d] += a.distanceTo(b);
          }
          g.addAttribute("lineDistance", new N(c, 1));
        } else {
          console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
        }
      } else {
        if (g.isGeometry) {
          for (e = g.vertices, c = g.lineDistances, c[0] = 0, d = 1, l = e.length; d < l; d++) {
            c[d] = c[d - 1], c[d] += e[d - 1].distanceTo(e[d]);
          }
        }
      }
      return this;
    };
  }(), raycast:function() {
    var a = new b, e = new ba, c = new w;
    return function(g, b) {
      var l = g.linePrecision, f = this.geometry, h = this.matrixWorld;
      null === f.boundingSphere && f.computeBoundingSphere();
      c.copy(f.boundingSphere);
      c.applyMatrix4(h);
      c.radius += l;
      if (!1 !== g.ray.intersectsSphere(c)) {
        a.getInverse(h);
        e.copy(g.ray).applyMatrix4(a);
        l /= (this.scale.x + this.scale.y + this.scale.z) / 3;
        l *= l;
        var p = new d, k = new d;
        h = new d;
        var m = new d, n = this && this.isLineSegments ? 2 : 1;
        if (f.isBufferGeometry) {
          var r = f.index, t = f.attributes.position.array;
          if (null !== r) {
            r = r.array;
            f = 0;
            for (var u = r.length - 1; f < u; f += n) {
              var q = r[f + 1];
              p.fromArray(t, 3 * r[f]);
              k.fromArray(t, 3 * q);
              q = e.distanceSqToSegment(p, k, m, h);
              q > l || (m.applyMatrix4(this.matrixWorld), q = g.ray.origin.distanceTo(m), q < g.near || q > g.far || b.push({distance:q, point:h.clone().applyMatrix4(this.matrixWorld), index:f, face:null, faceIndex:null, object:this}));
            }
          } else {
            for (f = 0, u = t.length / 3 - 1; f < u; f += n) {
              p.fromArray(t, 3 * f), k.fromArray(t, 3 * f + 3), q = e.distanceSqToSegment(p, k, m, h), q > l || (m.applyMatrix4(this.matrixWorld), q = g.ray.origin.distanceTo(m), q < g.near || q > g.far || b.push({distance:q, point:h.clone().applyMatrix4(this.matrixWorld), index:f, face:null, faceIndex:null, object:this}));
            }
          }
        } else {
          if (f.isGeometry) {
            for (p = f.vertices, k = p.length, f = 0; f < k - 1; f += n) {
              q = e.distanceSqToSegment(p[f], p[f + 1], m, h), q > l || (m.applyMatrix4(this.matrixWorld), q = g.ray.origin.distanceTo(m), q < g.near || q > g.far || b.push({distance:q, point:h.clone().applyMatrix4(this.matrixWorld), index:f, face:null, faceIndex:null, object:this}));
            }
          }
        }
      }
    };
  }(), clone:function() {
    return (new this.constructor(this.geometry, this.material)).copy(this);
  }});
  qa.prototype = Object.assign(Object.create(wa.prototype), {constructor:qa, isLineSegments:!0, computeLineDistances:function() {
    var a = new d, b = new d;
    return function() {
      var g = this.geometry;
      if (g.isBufferGeometry) {
        if (null === g.index) {
          for (var e = g.attributes.position, c = [], d = 0, l = e.count; d < l; d += 2) {
            a.fromBufferAttribute(e, d), b.fromBufferAttribute(e, d + 1), c[d] = 0 === d ? 0 : c[d - 1], c[d + 1] = c[d] + a.distanceTo(b);
          }
          g.addAttribute("lineDistance", new N(c, 1));
        } else {
          console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
        }
      } else {
        if (g.isGeometry) {
          for (e = g.vertices, c = g.lineDistances, d = 0, l = e.length; d < l; d += 2) {
            a.copy(e[d]), b.copy(e[d + 1]), c[d] = 0 === d ? 0 : c[d - 1], c[d + 1] = c[d] + a.distanceTo(b);
          }
        }
      }
      return this;
    };
  }()});
  Rd.prototype = Object.assign(Object.create(wa.prototype), {constructor:Rd, isLineLoop:!0});
  Wa.prototype = Object.create(X.prototype);
  Wa.prototype.constructor = Wa;
  Wa.prototype.isPointsMaterial = !0;
  Wa.prototype.copy = function(a) {
    X.prototype.copy.call(this, a);
    this.color.copy(a.color);
    this.map = a.map;
    this.size = a.size;
    this.sizeAttenuation = a.sizeAttenuation;
    this.morphTargets = a.morphTargets;
    return this;
  };
  mc.prototype = Object.assign(Object.create(G.prototype), {constructor:mc, isPoints:!0, raycast:function() {
    var a = new b, e = new ba, c = new w;
    return function(g, b) {
      function l(a, c) {
        var d = e.distanceSqToPoint(a);
        d < m && (e.closestPointToPoint(a, n), n.applyMatrix4(p), a = g.ray.origin.distanceTo(n), a < g.near || a > g.far || b.push({distance:a, distanceToRay:Math.sqrt(d), point:n.clone(), index:c, face:null, object:f}));
      }
      var f = this, h = this.geometry, p = this.matrixWorld, k = g.params.Points.threshold;
      null === h.boundingSphere && h.computeBoundingSphere();
      c.copy(h.boundingSphere);
      c.applyMatrix4(p);
      c.radius += k;
      if (!1 !== g.ray.intersectsSphere(c)) {
        a.getInverse(p);
        e.copy(g.ray).applyMatrix4(a);
        k /= (this.scale.x + this.scale.y + this.scale.z) / 3;
        var m = k * k;
        k = new d;
        var n = new d;
        if (h.isBufferGeometry) {
          var r = h.index;
          h = h.attributes.position.array;
          if (null !== r) {
            var t = r.array;
            r = 0;
            for (var u = t.length; r < u; r++) {
              var q = t[r];
              k.fromArray(h, 3 * q);
              l(k, q);
            }
          } else {
            for (r = 0, t = h.length / 3; r < t; r++) {
              k.fromArray(h, 3 * r), l(k, r);
            }
          }
        } else {
          for (k = h.vertices, r = 0, t = k.length; r < t; r++) {
            l(k[r], r);
          }
        }
      }
    };
  }(), clone:function() {
    return (new this.constructor(this.geometry, this.material)).copy(this);
  }});
  xe.prototype = Object.assign(Object.create(n.prototype), {constructor:xe, isVideoTexture:!0, update:function() {
    var a = this.image;
    a.readyState >= a.HAVE_CURRENT_DATA && (this.needsUpdate = !0);
  }});
  nc.prototype = Object.create(n.prototype);
  nc.prototype.constructor = nc;
  nc.prototype.isCompressedTexture = !0;
  Yc.prototype = Object.create(n.prototype);
  Yc.prototype.constructor = Yc;
  Yc.prototype.isCanvasTexture = !0;
  Zc.prototype = Object.create(n.prototype);
  Zc.prototype.constructor = Zc;
  Zc.prototype.isDepthTexture = !0;
  oc.prototype = Object.create(O.prototype);
  oc.prototype.constructor = oc;
  $c.prototype = Object.create(H.prototype);
  $c.prototype.constructor = $c;
  pc.prototype = Object.create(O.prototype);
  pc.prototype.constructor = pc;
  ad.prototype = Object.create(H.prototype);
  ad.prototype.constructor = ad;
  Ka.prototype = Object.create(O.prototype);
  Ka.prototype.constructor = Ka;
  bd.prototype = Object.create(H.prototype);
  bd.prototype.constructor = bd;
  qc.prototype = Object.create(Ka.prototype);
  qc.prototype.constructor = qc;
  cd.prototype = Object.create(H.prototype);
  cd.prototype.constructor = cd;
  Rb.prototype = Object.create(Ka.prototype);
  Rb.prototype.constructor = Rb;
  dd.prototype = Object.create(H.prototype);
  dd.prototype.constructor = dd;
  rc.prototype = Object.create(Ka.prototype);
  rc.prototype.constructor = rc;
  ed.prototype = Object.create(H.prototype);
  ed.prototype.constructor = ed;
  sc.prototype = Object.create(Ka.prototype);
  sc.prototype.constructor = sc;
  fd.prototype = Object.create(H.prototype);
  fd.prototype.constructor = fd;
  Sb.prototype = Object.create(O.prototype);
  Sb.prototype.constructor = Sb;
  Sb.prototype.toJSON = function() {
    var a = O.prototype.toJSON.call(this);
    a.path = this.parameters.path.toJSON();
    return a;
  };
  gd.prototype = Object.create(H.prototype);
  gd.prototype.constructor = gd;
  tc.prototype = Object.create(O.prototype);
  tc.prototype.constructor = tc;
  hd.prototype = Object.create(H.prototype);
  hd.prototype.constructor = hd;
  uc.prototype = Object.create(O.prototype);
  uc.prototype.constructor = uc;
  var Eg = {triangulate:function(a, b, e) {
    e = e || 2;
    var g = b && b.length, c = g ? b[0] * e : a.length, d = yf(a, 0, c, e, !0), l = [];
    if (!d) {
      return l;
    }
    var f;
    if (g) {
      var h = e;
      g = [];
      var p, k = 0;
      for (p = b.length; k < p; k++) {
        var m = b[k] * h;
        m = yf(a, m, k < p - 1 ? b[k + 1] * h : a.length, h, !1);
        m === m.next && (m.steiner = !0);
        g.push(yg(m));
      }
      g.sort(wg);
      for (k = 0; k < g.length; k++) {
        b = g[k];
        h = d;
        if (h = xg(b, h)) {
          b = Bf(h, b), jd(b, b.next);
        }
        d = jd(d, d.next);
      }
    }
    if (a.length > 80 * e) {
      var n = f = a[0], r = g = a[1];
      for (h = e; h < c; h += e) {
        k = a[h], b = a[h + 1], k < n && (n = k), b < r && (r = b), k > f && (f = k), b > g && (g = b);
      }
      f = Math.max(f - n, g - r);
      f = 0 !== f ? 1 / f : 0;
    }
    kd(d, l, e, n, r, f);
    return l;
  }}, vb = {area:function(a) {
    for (var g = a.length, b = 0, e = g - 1, c = 0; c < g; e = c++) {
      b += a[e].x * a[c].y - a[c].x * a[e].y;
    }
    return .5 * b;
  }, isClockWise:function(a) {
    return 0 > vb.area(a);
  }, triangulateShape:function(a, b) {
    var g = [], e = [], c = [];
    Cf(a);
    Df(g, a);
    var d = a.length;
    b.forEach(Cf);
    for (a = 0; a < b.length; a++) {
      e.push(d), d += b[a].length, Df(g, b[a]);
    }
    b = Eg.triangulate(g, e);
    for (a = 0; a < b.length; a += 3) {
      c.push(b.slice(a, a + 3));
    }
    return c;
  }};
  Ub.prototype = Object.create(H.prototype);
  Ub.prototype.constructor = Ub;
  Ub.prototype.toJSON = function() {
    var a = H.prototype.toJSON.call(this);
    return Ef(this.parameters.shapes, this.parameters.options, a);
  };
  jb.prototype = Object.create(O.prototype);
  jb.prototype.constructor = jb;
  jb.prototype.toJSON = function() {
    var a = O.prototype.toJSON.call(this);
    return Ef(this.parameters.shapes, this.parameters.options, a);
  };
  var zg = {generateTopUV:function(a, b, e, c, d) {
    a = b[3 * c];
    c = b[3 * c + 1];
    var g = b[3 * d];
    d = b[3 * d + 1];
    return [new k(b[3 * e], b[3 * e + 1]), new k(a, c), new k(g, d)];
  }, generateSideWallUV:function(a, b, e, c, d, l) {
    a = b[3 * e];
    var g = b[3 * e + 1];
    e = b[3 * e + 2];
    var f = b[3 * c], h = b[3 * c + 1];
    c = b[3 * c + 2];
    var p = b[3 * d], m = b[3 * d + 1];
    d = b[3 * d + 2];
    var n = b[3 * l], r = b[3 * l + 1];
    b = b[3 * l + 2];
    return .01 > Math.abs(g - h) ? [new k(a, 1 - e), new k(f, 1 - c), new k(p, 1 - d), new k(n, 1 - b)] : [new k(g, 1 - e), new k(h, 1 - c), new k(m, 1 - d), new k(r, 1 - b)];
  }};
  md.prototype = Object.create(H.prototype);
  md.prototype.constructor = md;
  vc.prototype = Object.create(jb.prototype);
  vc.prototype.constructor = vc;
  nd.prototype = Object.create(H.prototype);
  nd.prototype.constructor = nd;
  Vb.prototype = Object.create(O.prototype);
  Vb.prototype.constructor = Vb;
  od.prototype = Object.create(H.prototype);
  od.prototype.constructor = od;
  wc.prototype = Object.create(O.prototype);
  wc.prototype.constructor = wc;
  pd.prototype = Object.create(H.prototype);
  pd.prototype.constructor = pd;
  xc.prototype = Object.create(O.prototype);
  xc.prototype.constructor = xc;
  Wb.prototype = Object.create(H.prototype);
  Wb.prototype.constructor = Wb;
  Wb.prototype.toJSON = function() {
    var a = H.prototype.toJSON.call(this);
    return Ff(this.parameters.shapes, a);
  };
  Xb.prototype = Object.create(O.prototype);
  Xb.prototype.constructor = Xb;
  Xb.prototype.toJSON = function() {
    var a = O.prototype.toJSON.call(this);
    return Ff(this.parameters.shapes, a);
  };
  yc.prototype = Object.create(O.prototype);
  yc.prototype.constructor = yc;
  Yb.prototype = Object.create(H.prototype);
  Yb.prototype.constructor = Yb;
  wb.prototype = Object.create(O.prototype);
  wb.prototype.constructor = wb;
  qd.prototype = Object.create(Yb.prototype);
  qd.prototype.constructor = qd;
  rd.prototype = Object.create(wb.prototype);
  rd.prototype.constructor = rd;
  sd.prototype = Object.create(H.prototype);
  sd.prototype.constructor = sd;
  zc.prototype = Object.create(O.prototype);
  zc.prototype.constructor = zc;
  var Ha = Object.freeze({WireframeGeometry:oc, ParametricGeometry:$c, ParametricBufferGeometry:pc, TetrahedronGeometry:bd, TetrahedronBufferGeometry:qc, OctahedronGeometry:cd, OctahedronBufferGeometry:Rb, IcosahedronGeometry:dd, IcosahedronBufferGeometry:rc, DodecahedronGeometry:ed, DodecahedronBufferGeometry:sc, PolyhedronGeometry:ad, PolyhedronBufferGeometry:Ka, TubeGeometry:fd, TubeBufferGeometry:Sb, TorusKnotGeometry:gd, TorusKnotBufferGeometry:tc, TorusGeometry:hd, TorusBufferGeometry:uc, TextGeometry:md, 
  TextBufferGeometry:vc, SphereGeometry:nd, SphereBufferGeometry:Vb, RingGeometry:od, RingBufferGeometry:wc, PlaneGeometry:ha, PlaneBufferGeometry:ja, LatheGeometry:pd, LatheBufferGeometry:xc, ShapeGeometry:Wb, ShapeBufferGeometry:Xb, ExtrudeGeometry:Ub, ExtrudeBufferGeometry:jb, EdgesGeometry:yc, ConeGeometry:qd, ConeBufferGeometry:rd, CylinderGeometry:Yb, CylinderBufferGeometry:wb, CircleGeometry:sd, CircleBufferGeometry:zc, BoxGeometry:P, BoxBufferGeometry:ka});
  Zb.prototype = Object.create(X.prototype);
  Zb.prototype.constructor = Zb;
  Zb.prototype.isShadowMaterial = !0;
  Zb.prototype.copy = function(a) {
    X.prototype.copy.call(this, a);
    this.color.copy(a.color);
    return this;
  };
  Ac.prototype = Object.create(fa.prototype);
  Ac.prototype.constructor = Ac;
  Ac.prototype.isRawShaderMaterial = !0;
  kb.prototype = Object.create(X.prototype);
  kb.prototype.constructor = kb;
  kb.prototype.isMeshStandardMaterial = !0;
  kb.prototype.copy = function(a) {
    X.prototype.copy.call(this, a);
    this.defines = {STANDARD:""};
    this.color.copy(a.color);
    this.roughness = a.roughness;
    this.metalness = a.metalness;
    this.map = a.map;
    this.lightMap = a.lightMap;
    this.lightMapIntensity = a.lightMapIntensity;
    this.aoMap = a.aoMap;
    this.aoMapIntensity = a.aoMapIntensity;
    this.emissive.copy(a.emissive);
    this.emissiveMap = a.emissiveMap;
    this.emissiveIntensity = a.emissiveIntensity;
    this.bumpMap = a.bumpMap;
    this.bumpScale = a.bumpScale;
    this.normalMap = a.normalMap;
    this.normalMapType = a.normalMapType;
    this.normalScale.copy(a.normalScale);
    this.displacementMap = a.displacementMap;
    this.displacementScale = a.displacementScale;
    this.displacementBias = a.displacementBias;
    this.roughnessMap = a.roughnessMap;
    this.metalnessMap = a.metalnessMap;
    this.alphaMap = a.alphaMap;
    this.envMap = a.envMap;
    this.envMapIntensity = a.envMapIntensity;
    this.refractionRatio = a.refractionRatio;
    this.wireframe = a.wireframe;
    this.wireframeLinewidth = a.wireframeLinewidth;
    this.wireframeLinecap = a.wireframeLinecap;
    this.wireframeLinejoin = a.wireframeLinejoin;
    this.skinning = a.skinning;
    this.morphTargets = a.morphTargets;
    this.morphNormals = a.morphNormals;
    return this;
  };
  $b.prototype = Object.create(kb.prototype);
  $b.prototype.constructor = $b;
  $b.prototype.isMeshPhysicalMaterial = !0;
  $b.prototype.copy = function(a) {
    kb.prototype.copy.call(this, a);
    this.defines = {PHYSICAL:""};
    this.reflectivity = a.reflectivity;
    this.clearCoat = a.clearCoat;
    this.clearCoatRoughness = a.clearCoatRoughness;
    return this;
  };
  Xa.prototype = Object.create(X.prototype);
  Xa.prototype.constructor = Xa;
  Xa.prototype.isMeshPhongMaterial = !0;
  Xa.prototype.copy = function(a) {
    X.prototype.copy.call(this, a);
    this.color.copy(a.color);
    this.specular.copy(a.specular);
    this.shininess = a.shininess;
    this.map = a.map;
    this.lightMap = a.lightMap;
    this.lightMapIntensity = a.lightMapIntensity;
    this.aoMap = a.aoMap;
    this.aoMapIntensity = a.aoMapIntensity;
    this.emissive.copy(a.emissive);
    this.emissiveMap = a.emissiveMap;
    this.emissiveIntensity = a.emissiveIntensity;
    this.bumpMap = a.bumpMap;
    this.bumpScale = a.bumpScale;
    this.normalMap = a.normalMap;
    this.normalMapType = a.normalMapType;
    this.normalScale.copy(a.normalScale);
    this.displacementMap = a.displacementMap;
    this.displacementScale = a.displacementScale;
    this.displacementBias = a.displacementBias;
    this.specularMap = a.specularMap;
    this.alphaMap = a.alphaMap;
    this.envMap = a.envMap;
    this.combine = a.combine;
    this.reflectivity = a.reflectivity;
    this.refractionRatio = a.refractionRatio;
    this.wireframe = a.wireframe;
    this.wireframeLinewidth = a.wireframeLinewidth;
    this.wireframeLinecap = a.wireframeLinecap;
    this.wireframeLinejoin = a.wireframeLinejoin;
    this.skinning = a.skinning;
    this.morphTargets = a.morphTargets;
    this.morphNormals = a.morphNormals;
    return this;
  };
  ac.prototype = Object.create(Xa.prototype);
  ac.prototype.constructor = ac;
  ac.prototype.isMeshToonMaterial = !0;
  ac.prototype.copy = function(a) {
    Xa.prototype.copy.call(this, a);
    this.gradientMap = a.gradientMap;
    return this;
  };
  bc.prototype = Object.create(X.prototype);
  bc.prototype.constructor = bc;
  bc.prototype.isMeshNormalMaterial = !0;
  bc.prototype.copy = function(a) {
    X.prototype.copy.call(this, a);
    this.bumpMap = a.bumpMap;
    this.bumpScale = a.bumpScale;
    this.normalMap = a.normalMap;
    this.normalMapType = a.normalMapType;
    this.normalScale.copy(a.normalScale);
    this.displacementMap = a.displacementMap;
    this.displacementScale = a.displacementScale;
    this.displacementBias = a.displacementBias;
    this.wireframe = a.wireframe;
    this.wireframeLinewidth = a.wireframeLinewidth;
    this.skinning = a.skinning;
    this.morphTargets = a.morphTargets;
    this.morphNormals = a.morphNormals;
    return this;
  };
  cc.prototype = Object.create(X.prototype);
  cc.prototype.constructor = cc;
  cc.prototype.isMeshLambertMaterial = !0;
  cc.prototype.copy = function(a) {
    X.prototype.copy.call(this, a);
    this.color.copy(a.color);
    this.map = a.map;
    this.lightMap = a.lightMap;
    this.lightMapIntensity = a.lightMapIntensity;
    this.aoMap = a.aoMap;
    this.aoMapIntensity = a.aoMapIntensity;
    this.emissive.copy(a.emissive);
    this.emissiveMap = a.emissiveMap;
    this.emissiveIntensity = a.emissiveIntensity;
    this.specularMap = a.specularMap;
    this.alphaMap = a.alphaMap;
    this.envMap = a.envMap;
    this.combine = a.combine;
    this.reflectivity = a.reflectivity;
    this.refractionRatio = a.refractionRatio;
    this.wireframe = a.wireframe;
    this.wireframeLinewidth = a.wireframeLinewidth;
    this.wireframeLinecap = a.wireframeLinecap;
    this.wireframeLinejoin = a.wireframeLinejoin;
    this.skinning = a.skinning;
    this.morphTargets = a.morphTargets;
    this.morphNormals = a.morphNormals;
    return this;
  };
  dc.prototype = Object.create(X.prototype);
  dc.prototype.constructor = dc;
  dc.prototype.isMeshMatcapMaterial = !0;
  dc.prototype.copy = function(a) {
    X.prototype.copy.call(this, a);
    this.defines = {MATCAP:""};
    this.color.copy(a.color);
    this.matcap = a.matcap;
    this.map = a.map;
    this.bumpMap = a.bumpMap;
    this.bumpScale = a.bumpScale;
    this.normalMap = a.normalMap;
    this.normalMapType = a.normalMapType;
    this.normalScale.copy(a.normalScale);
    this.displacementMap = a.displacementMap;
    this.displacementScale = a.displacementScale;
    this.displacementBias = a.displacementBias;
    this.alphaMap = a.alphaMap;
    this.skinning = a.skinning;
    this.morphTargets = a.morphTargets;
    this.morphNormals = a.morphNormals;
    return this;
  };
  ec.prototype = Object.create(pa.prototype);
  ec.prototype.constructor = ec;
  ec.prototype.isLineDashedMaterial = !0;
  ec.prototype.copy = function(a) {
    pa.prototype.copy.call(this, a);
    this.scale = a.scale;
    this.dashSize = a.dashSize;
    this.gapSize = a.gapSize;
    return this;
  };
  var Fg = Object.freeze({ShadowMaterial:Zb, SpriteMaterial:Lb, RawShaderMaterial:Ac, ShaderMaterial:fa, PointsMaterial:Wa, MeshPhysicalMaterial:$b, MeshStandardMaterial:kb, MeshPhongMaterial:Xa, MeshToonMaterial:ac, MeshNormalMaterial:bc, MeshLambertMaterial:cc, MeshDepthMaterial:Jb, MeshDistanceMaterial:Kb, MeshBasicMaterial:ma, MeshMatcapMaterial:dc, LineDashedMaterial:ec, LineBasicMaterial:pa, Material:X}), xa = {arraySlice:function(a, b, e) {
    return xa.isTypedArray(a) ? new a.constructor(a.subarray(b, void 0 !== e ? e : a.length)) : a.slice(b, e);
  }, convertArray:function(a, b, e) {
    return !a || !e && a.constructor === b ? a : "number" === typeof b.BYTES_PER_ELEMENT ? new b(a) : Array.prototype.slice.call(a);
  }, isTypedArray:function(a) {
    return ArrayBuffer.isView(a) && !(a instanceof DataView);
  }, getKeyframeOrder:function(a) {
    for (var b = a.length, g = Array(b), e = 0; e !== b; ++e) {
      g[e] = e;
    }
    g.sort(function(b, g) {
      return a[b] - a[g];
    });
    return g;
  }, sortedArray:function(a, b, e) {
    for (var g = a.length, c = new a.constructor(g), d = 0, l = 0; l !== g; ++d) {
      for (var f = e[d] * b, h = 0; h !== b; ++h) {
        c[l++] = a[f + h];
      }
    }
    return c;
  }, flattenJSON:function(a, b, e, c) {
    for (var g = 1, d = a[0]; void 0 !== d && void 0 === d[c];) {
      d = a[g++];
    }
    if (void 0 !== d) {
      var l = d[c];
      if (void 0 !== l) {
        if (Array.isArray(l)) {
          do {
            l = d[c], void 0 !== l && (b.push(d.time), e.push.apply(e, l)), d = a[g++];
          } while (void 0 !== d);
        } else {
          if (void 0 !== l.toArray) {
            do {
              l = d[c], void 0 !== l && (b.push(d.time), l.toArray(e, e.length)), d = a[g++];
            } while (void 0 !== d);
          } else {
            do {
              l = d[c], void 0 !== l && (b.push(d.time), e.push(l)), d = a[g++];
            } while (void 0 !== d);
          }
        }
      }
    }
  }};
  Object.assign(Oa.prototype, {evaluate:function(a) {
    var b = this.parameterPositions, g = this._cachedIndex, e = b[g], c = b[g - 1];
    a: {
      b: {
        c: {
          d: {
            if (!(a < e)) {
              for (var d = g + 2;;) {
                if (void 0 === e) {
                  if (a < c) {
                    break d;
                  }
                  this._cachedIndex = g = b.length;
                  return this.afterEnd_(g - 1, a, c);
                }
                if (g === d) {
                  break;
                }
                c = e;
                e = b[++g];
                if (a < e) {
                  break b;
                }
              }
              e = b.length;
              break c;
            }
          }
          if (a >= c) {
            break a;
          } else {
            d = b[1];
            a < d && (g = 2, c = d);
            for (d = g - 2;;) {
              if (void 0 === c) {
                return this._cachedIndex = 0, this.beforeStart_(0, a, e);
              }
              if (g === d) {
                break;
              }
              e = c;
              c = b[--g - 1];
              if (a >= c) {
                break b;
              }
            }
            e = g;
            g = 0;
          }
        }
        for (; g < e;) {
          c = g + e >>> 1, a < b[c] ? e = c : g = c + 1;
        }
        e = b[g];
        c = b[g - 1];
        if (void 0 === c) {
          return this._cachedIndex = 0, this.beforeStart_(0, a, e);
        }
        if (void 0 === e) {
          return this._cachedIndex = g = b.length, this.afterEnd_(g - 1, c, a);
        }
      }
      this._cachedIndex = g;
      this.intervalChanged_(g, c, e);
    }
    return this.interpolate_(g, c, a, e);
  }, settings:null, DefaultSettings_:{}, getSettings_:function() {
    return this.settings || this.DefaultSettings_;
  }, copySampleValue_:function(a) {
    var b = this.resultBuffer, g = this.sampleValues, e = this.valueSize;
    a *= e;
    for (var c = 0; c !== e; ++c) {
      b[c] = g[a + c];
    }
    return b;
  }, interpolate_:function() {
    throw Error("call to abstract method");
  }, intervalChanged_:function() {
  }});
  Object.assign(Oa.prototype, {beforeStart_:Oa.prototype.copySampleValue_, afterEnd_:Oa.prototype.copySampleValue_});
  Td.prototype = Object.assign(Object.create(Oa.prototype), {constructor:Td, DefaultSettings_:{endingStart:2400, endingEnd:2400}, intervalChanged_:function(a, b, e) {
    var g = this.parameterPositions, c = a - 2, d = a + 1, l = g[c], f = g[d];
    if (void 0 === l) {
      switch(this.getSettings_().endingStart) {
        case 2401:
          c = a;
          l = 2 * b - e;
          break;
        case 2402:
          c = g.length - 2;
          l = b + g[c] - g[c + 1];
          break;
        default:
          c = a, l = e;
      }
    }
    if (void 0 === f) {
      switch(this.getSettings_().endingEnd) {
        case 2401:
          d = a;
          f = 2 * e - b;
          break;
        case 2402:
          d = 1;
          f = e + g[1] - g[0];
          break;
        default:
          d = a - 1, f = b;
      }
    }
    a = .5 * (e - b);
    g = this.valueSize;
    this._weightPrev = a / (b - l);
    this._weightNext = a / (f - e);
    this._offsetPrev = c * g;
    this._offsetNext = d * g;
  }, interpolate_:function(a, b, e, c) {
    var g = this.resultBuffer, d = this.sampleValues, l = this.valueSize;
    a *= l;
    var f = a - l, h = this._offsetPrev, p = this._offsetNext, k = this._weightPrev, m = this._weightNext, n = (e - b) / (c - b);
    e = n * n;
    c = e * n;
    b = -k * c + 2 * k * e - k * n;
    k = (1 + k) * c + (-1.5 - 2 * k) * e + (-.5 + k) * n + 1;
    n = (-1 - m) * c + (1.5 + m) * e + .5 * n;
    m = m * c - m * e;
    for (e = 0; e !== l; ++e) {
      g[e] = b * d[h + e] + k * d[f + e] + n * d[a + e] + m * d[p + e];
    }
    return g;
  }});
  td.prototype = Object.assign(Object.create(Oa.prototype), {constructor:td, interpolate_:function(a, b, e, c) {
    var g = this.resultBuffer, d = this.sampleValues, l = this.valueSize;
    a *= l;
    var f = a - l;
    b = (e - b) / (c - b);
    e = 1 - b;
    for (c = 0; c !== l; ++c) {
      g[c] = d[f + c] * e + d[a + c] * b;
    }
    return g;
  }});
  Ud.prototype = Object.assign(Object.create(Oa.prototype), {constructor:Ud, interpolate_:function(a) {
    return this.copySampleValue_(a - 1);
  }});
  Object.assign(Da, {toJSON:function(a) {
    var b = a.constructor;
    if (void 0 !== b.toJSON) {
      b = b.toJSON(a);
    } else {
      b = {name:a.name, times:xa.convertArray(a.times, Array), values:xa.convertArray(a.values, Array)};
      var g = a.getInterpolation();
      g !== a.DefaultInterpolation && (b.interpolation = g);
    }
    b.type = a.ValueTypeName;
    return b;
  }});
  Object.assign(Da.prototype, {constructor:Da, TimeBufferType:Float32Array, ValueBufferType:Float32Array, DefaultInterpolation:2301, InterpolantFactoryMethodDiscrete:function(a) {
    return new Ud(this.times, this.values, this.getValueSize(), a);
  }, InterpolantFactoryMethodLinear:function(a) {
    return new td(this.times, this.values, this.getValueSize(), a);
  }, InterpolantFactoryMethodSmooth:function(a) {
    return new Td(this.times, this.values, this.getValueSize(), a);
  }, setInterpolation:function(a) {
    switch(a) {
      case 2300:
        var b = this.InterpolantFactoryMethodDiscrete;
        break;
      case 2301:
        b = this.InterpolantFactoryMethodLinear;
        break;
      case 2302:
        b = this.InterpolantFactoryMethodSmooth;
    }
    if (void 0 === b) {
      b = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
      if (void 0 === this.createInterpolant) {
        if (a !== this.DefaultInterpolation) {
          this.setInterpolation(this.DefaultInterpolation);
        } else {
          throw Error(b);
        }
      }
      console.warn("THREE.KeyframeTrack:", b);
      return this;
    }
    this.createInterpolant = b;
    return this;
  }, getInterpolation:function() {
    switch(this.createInterpolant) {
      case this.InterpolantFactoryMethodDiscrete:
        return 2300;
      case this.InterpolantFactoryMethodLinear:
        return 2301;
      case this.InterpolantFactoryMethodSmooth:
        return 2302;
    }
  }, getValueSize:function() {
    return this.values.length / this.times.length;
  }, shift:function(a) {
    if (0 !== a) {
      for (var b = this.times, g = 0, e = b.length; g !== e; ++g) {
        b[g] += a;
      }
    }
    return this;
  }, scale:function(a) {
    if (1 !== a) {
      for (var b = this.times, g = 0, e = b.length; g !== e; ++g) {
        b[g] *= a;
      }
    }
    return this;
  }, trim:function(a, b) {
    for (var g = this.times, e = g.length, c = 0, d = e - 1; c !== e && g[c] < a;) {
      ++c;
    }
    for (; -1 !== d && g[d] > b;) {
      --d;
    }
    ++d;
    if (0 !== c || d !== e) {
      c >= d && (d = Math.max(d, 1), c = d - 1), a = this.getValueSize(), this.times = xa.arraySlice(g, c, d), this.values = xa.arraySlice(this.values, c * a, d * a);
    }
    return this;
  }, validate:function() {
    var a = !0, b = this.getValueSize();
    0 !== b - Math.floor(b) && (console.error("THREE.KeyframeTrack: Invalid value size in track.", this), a = !1);
    var e = this.times;
    b = this.values;
    var c = e.length;
    0 === c && (console.error("THREE.KeyframeTrack: Track is empty.", this), a = !1);
    for (var d = null, l = 0; l !== c; l++) {
      var f = e[l];
      if ("number" === typeof f && isNaN(f)) {
        console.error("THREE.KeyframeTrack: Time is not a valid number.", this, l, f);
        a = !1;
        break;
      }
      if (null !== d && d > f) {
        console.error("THREE.KeyframeTrack: Out of order keys.", this, l, f, d);
        a = !1;
        break;
      }
      d = f;
    }
    if (void 0 !== b && xa.isTypedArray(b)) {
      for (l = 0, e = b.length; l !== e; ++l) {
        if (c = b[l], isNaN(c)) {
          console.error("THREE.KeyframeTrack: Value is not a valid number.", this, l, c);
          a = !1;
          break;
        }
      }
    }
    return a;
  }, optimize:function() {
    for (var a = this.times, b = this.values, e = this.getValueSize(), c = 2302 === this.getInterpolation(), d = 1, l = a.length - 1, f = 1; f < l; ++f) {
      var h = !1, p = a[f];
      if (p !== a[f + 1] && (1 !== f || p !== p[0])) {
        if (c) {
          h = !0;
        } else {
          var k = f * e, m = k - e, n = k + e;
          for (p = 0; p !== e; ++p) {
            var t = b[k + p];
            if (t !== b[m + p] || t !== b[n + p]) {
              h = !0;
              break;
            }
          }
        }
      }
      if (h) {
        if (f !== d) {
          for (a[d] = a[f], h = f * e, k = d * e, p = 0; p !== e; ++p) {
            b[k + p] = b[h + p];
          }
        }
        ++d;
      }
    }
    if (0 < l) {
      a[d] = a[l];
      h = l * e;
      k = d * e;
      for (p = 0; p !== e; ++p) {
        b[k + p] = b[h + p];
      }
      ++d;
    }
    d !== a.length && (this.times = xa.arraySlice(a, 0, d), this.values = xa.arraySlice(b, 0, d * e));
    return this;
  }, clone:function() {
    var a = xa.arraySlice(this.times, 0), b = xa.arraySlice(this.values, 0);
    a = new this.constructor(this.name, a, b);
    a.createInterpolant = this.createInterpolant;
    return a;
  }});
  Vd.prototype = Object.assign(Object.create(Da.prototype), {constructor:Vd, ValueTypeName:"bool", ValueBufferType:Array, DefaultInterpolation:2300, InterpolantFactoryMethodLinear:void 0, InterpolantFactoryMethodSmooth:void 0});
  Wd.prototype = Object.assign(Object.create(Da.prototype), {constructor:Wd, ValueTypeName:"color"});
  Bc.prototype = Object.assign(Object.create(Da.prototype), {constructor:Bc, ValueTypeName:"number"});
  Xd.prototype = Object.assign(Object.create(Oa.prototype), {constructor:Xd, interpolate_:function(a, b, e, c) {
    var g = this.resultBuffer, d = this.sampleValues, l = this.valueSize;
    a *= l;
    b = (e - b) / (c - b);
    for (e = a + l; a !== e; a += 4) {
      f.slerpFlat(g, 0, d, a - l, d, a, b);
    }
    return g;
  }});
  ud.prototype = Object.assign(Object.create(Da.prototype), {constructor:ud, ValueTypeName:"quaternion", DefaultInterpolation:2301, InterpolantFactoryMethodLinear:function(a) {
    return new Xd(this.times, this.values, this.getValueSize(), a);
  }, InterpolantFactoryMethodSmooth:void 0});
  Yd.prototype = Object.assign(Object.create(Da.prototype), {constructor:Yd, ValueTypeName:"string", ValueBufferType:Array, DefaultInterpolation:2300, InterpolantFactoryMethodLinear:void 0, InterpolantFactoryMethodSmooth:void 0});
  Cc.prototype = Object.assign(Object.create(Da.prototype), {constructor:Cc, ValueTypeName:"vector"});
  Object.assign(Sa, {parse:function(a) {
    for (var b = [], g = a.tracks, e = 1 / (a.fps || 1), c = 0, d = g.length; c !== d; ++c) {
      b.push(Bg(g[c]).scale(e));
    }
    return new Sa(a.name, a.duration, b);
  }, toJSON:function(a) {
    var b = [], g = a.tracks;
    a = {name:a.name, duration:a.duration, tracks:b, uuid:a.uuid};
    for (var e = 0, c = g.length; e !== c; ++e) {
      b.push(Da.toJSON(g[e]));
    }
    return a;
  }, CreateFromMorphTargetSequence:function(a, b, e, c) {
    for (var g = b.length, d = [], l = 0; l < g; l++) {
      var f = [], h = [];
      f.push((l + g - 1) % g, l, (l + 1) % g);
      h.push(0, 1, 0);
      var p = xa.getKeyframeOrder(f);
      f = xa.sortedArray(f, 1, p);
      h = xa.sortedArray(h, 1, p);
      c || 0 !== f[0] || (f.push(g), h.push(h[0]));
      d.push((new Bc(".morphTargetInfluences[" + b[l].name + "]", f, h)).scale(1 / e));
    }
    return new Sa(a, -1, d);
  }, findByName:function(a, b) {
    var g = a;
    Array.isArray(a) || (g = a.geometry && a.geometry.animations || a.animations);
    for (a = 0; a < g.length; a++) {
      if (g[a].name === b) {
        return g[a];
      }
    }
    return null;
  }, CreateClipsFromMorphTargetSequences:function(a, b, e) {
    for (var g = {}, c = /^([\w-]*?)([\d]+)$/, d = 0, l = a.length; d < l; d++) {
      var f = a[d], h = f.name.match(c);
      if (h && 1 < h.length) {
        var p = h[1];
        (h = g[p]) || (g[p] = h = []);
        h.push(f);
      }
    }
    a = [];
    for (p in g) {
      a.push(Sa.CreateFromMorphTargetSequence(p, g[p], b, e));
    }
    return a;
  }, parseAnimation:function(a, b) {
    if (!a) {
      return console.error("THREE.AnimationClip: No animation in JSONLoader data."), null;
    }
    var g = function(a, b, g, e, c) {
      if (0 !== g.length) {
        var d = [], l = [];
        xa.flattenJSON(g, d, l, e);
        0 !== d.length && c.push(new a(b, d, l));
      }
    }, e = [], c = a.name || "default", d = a.length || -1, l = a.fps || 30;
    a = a.hierarchy || [];
    for (var f = 0; f < a.length; f++) {
      var h = a[f].keys;
      if (h && 0 !== h.length) {
        if (h[0].morphTargets) {
          d = {};
          for (var p = 0; p < h.length; p++) {
            if (h[p].morphTargets) {
              for (var k = 0; k < h[p].morphTargets.length; k++) {
                d[h[p].morphTargets[k]] = -1;
              }
            }
          }
          for (var m in d) {
            var n = [], t = [];
            for (k = 0; k !== h[p].morphTargets.length; ++k) {
              var u = h[p];
              n.push(u.time);
              t.push(u.morphTarget === m ? 1 : 0);
            }
            e.push(new Bc(".morphTargetInfluence[" + m + "]", n, t));
          }
          d = d.length * (l || 1);
        } else {
          p = ".bones[" + b[f].name + "]", g(Cc, p + ".position", h, "pos", e), g(ud, p + ".quaternion", h, "rot", e), g(Cc, p + ".scale", h, "scl", e);
        }
      }
    }
    return 0 === e.length ? null : new Sa(c, d, e);
  }});
  Object.assign(Sa.prototype, {resetDuration:function() {
    for (var a = 0, b = 0, e = this.tracks.length; b !== e; ++b) {
      var c = this.tracks[b];
      a = Math.max(a, c.times[c.times.length - 1]);
    }
    this.duration = a;
    return this;
  }, trim:function() {
    for (var a = 0; a < this.tracks.length; a++) {
      this.tracks[a].trim(0, this.duration);
    }
    return this;
  }, validate:function() {
    for (var a = !0, b = 0; b < this.tracks.length; b++) {
      a = a && this.tracks[b].validate();
    }
    return a;
  }, optimize:function() {
    for (var a = 0; a < this.tracks.length; a++) {
      this.tracks[a].optimize();
    }
    return this;
  }, clone:function() {
    for (var a = [], b = 0; b < this.tracks.length; b++) {
      a.push(this.tracks[b].clone());
    }
    return new Sa(this.name, this.duration, a);
  }});
  var gc = {enabled:!1, files:{}, add:function(a, b) {
    !1 !== this.enabled && (this.files[a] = b);
  }, get:function(a) {
    if (!1 !== this.enabled) {
      return this.files[a];
    }
  }, remove:function(a) {
    delete this.files[a];
  }, clear:function() {
    this.files = {};
  }}, La = new Ae, db = {};
  Object.assign(Ya.prototype, {load:function(a, b, e, c) {
    void 0 === a && (a = "");
    void 0 !== this.path && (a = this.path + a);
    a = this.manager.resolveURL(a);
    var g = this, d = gc.get(a);
    if (void 0 !== d) {
      return g.manager.itemStart(a), setTimeout(function() {
        b && b(d);
        g.manager.itemEnd(a);
      }, 0), d;
    }
    if (void 0 !== db[a]) {
      db[a].push({onLoad:b, onProgress:e, onError:c});
    } else {
      var l = a.match(/^data:(.*?)(;base64)?,(.*)$/);
      if (l) {
        e = l[1];
        var f = !!l[2];
        l = l[3];
        l = decodeURIComponent(l);
        f && (l = atob(l));
        try {
          var h = (this.responseType || "").toLowerCase();
          switch(h) {
            case "arraybuffer":
            case "blob":
              var p = new Uint8Array(l.length);
              for (f = 0; f < l.length; f++) {
                p[f] = l.charCodeAt(f);
              }
              var k = "blob" === h ? new Blob([p.buffer], {type:e}) : p.buffer;
              break;
            case "document":
              k = (new DOMParser).parseFromString(l, e);
              break;
            case "json":
              k = JSON.parse(l);
              break;
            default:
              k = l;
          }
          setTimeout(function() {
            b && b(k);
            g.manager.itemEnd(a);
          }, 0);
        } catch (ag) {
          setTimeout(function() {
            c && c(ag);
            g.manager.itemError(a);
            g.manager.itemEnd(a);
          }, 0);
        }
      } else {
        db[a] = [];
        db[a].push({onLoad:b, onProgress:e, onError:c});
        var m = new XMLHttpRequest;
        m.open("GET", a, !0);
        m.addEventListener("load", function(b) {
          var e = this.response;
          gc.add(a, e);
          var c = db[a];
          delete db[a];
          if (200 === this.status || 0 === this.status) {
            0 === this.status && console.warn("THREE.FileLoader: HTTP Status 0 received.");
            for (var d = 0, l = c.length; d < l; d++) {
              var f = c[d];
              if (f.onLoad) {
                f.onLoad(e);
              }
            }
          } else {
            d = 0;
            for (l = c.length; d < l; d++) {
              if (f = c[d], f.onError) {
                f.onError(b);
              }
            }
            g.manager.itemError(a);
          }
          g.manager.itemEnd(a);
        }, !1);
        m.addEventListener("progress", function(b) {
          for (var g = db[a], e = 0, c = g.length; e < c; e++) {
            var d = g[e];
            if (d.onProgress) {
              d.onProgress(b);
            }
          }
        }, !1);
        m.addEventListener("error", function(b) {
          var e = db[a];
          delete db[a];
          for (var c = 0, d = e.length; c < d; c++) {
            var l = e[c];
            if (l.onError) {
              l.onError(b);
            }
          }
          g.manager.itemError(a);
          g.manager.itemEnd(a);
        }, !1);
        m.addEventListener("abort", function(b) {
          var e = db[a];
          delete db[a];
          for (var c = 0, d = e.length; c < d; c++) {
            var l = e[c];
            if (l.onError) {
              l.onError(b);
            }
          }
          g.manager.itemError(a);
          g.manager.itemEnd(a);
        }, !1);
        void 0 !== this.responseType && (m.responseType = this.responseType);
        void 0 !== this.withCredentials && (m.withCredentials = this.withCredentials);
        m.overrideMimeType && m.overrideMimeType(void 0 !== this.mimeType ? this.mimeType : "text/plain");
        for (f in this.requestHeader) {
          m.setRequestHeader(f, this.requestHeader[f]);
        }
        m.send(null);
      }
      g.manager.itemStart(a);
      return m;
    }
  }, setPath:function(a) {
    this.path = a;
    return this;
  }, setResponseType:function(a) {
    this.responseType = a;
    return this;
  }, setWithCredentials:function(a) {
    this.withCredentials = a;
    return this;
  }, setMimeType:function(a) {
    this.mimeType = a;
    return this;
  }, setRequestHeader:function(a) {
    this.requestHeader = a;
    return this;
  }});
  Object.assign(Gf.prototype, {load:function(a, b, e, c) {
    var g = this, d = new Ya(g.manager);
    d.setPath(g.path);
    d.load(a, function(a) {
      b(g.parse(JSON.parse(a)));
    }, e, c);
  }, parse:function(a) {
    for (var b = [], g = 0; g < a.length; g++) {
      var e = Sa.parse(a[g]);
      b.push(e);
    }
    return b;
  }, setPath:function(a) {
    this.path = a;
    return this;
  }});
  Object.assign(Hf.prototype, {load:function(a, b, e, c) {
    function g(g) {
      h.load(a[g], function(a) {
        a = d._parser(a, !0);
        l[g] = {width:a.width, height:a.height, format:a.format, mipmaps:a.mipmaps};
        p += 1;
        6 === p && (1 === a.mipmapCount && (f.minFilter = 1006), f.format = a.format, f.needsUpdate = !0, b && b(f));
      }, e, c);
    }
    var d = this, l = [], f = new nc;
    f.image = l;
    var h = new Ya(this.manager);
    h.setPath(this.path);
    h.setResponseType("arraybuffer");
    if (Array.isArray(a)) {
      for (var p = 0, k = 0, m = a.length; k < m; ++k) {
        g(k);
      }
    } else {
      h.load(a, function(a) {
        a = d._parser(a, !0);
        if (a.isCubemap) {
          for (var g = a.mipmaps.length / a.mipmapCount, e = 0; e < g; e++) {
            l[e] = {mipmaps:[]};
            for (var c = 0; c < a.mipmapCount; c++) {
              l[e].mipmaps.push(a.mipmaps[e * a.mipmapCount + c]), l[e].format = a.format, l[e].width = a.width, l[e].height = a.height;
            }
          }
        } else {
          f.image.width = a.width, f.image.height = a.height, f.mipmaps = a.mipmaps;
        }
        1 === a.mipmapCount && (f.minFilter = 1006);
        f.format = a.format;
        f.needsUpdate = !0;
        b && b(f);
      }, e, c);
    }
    return f;
  }, setPath:function(a) {
    this.path = a;
    return this;
  }});
  Object.assign(Be.prototype, {load:function(a, b, e, c) {
    var g = this, d = new l, f = new Ya(this.manager);
    f.setResponseType("arraybuffer");
    f.setPath(this.path);
    f.load(a, function(a) {
      if (a = g._parser(a)) {
        void 0 !== a.image ? d.image = a.image : void 0 !== a.data && (d.image.width = a.width, d.image.height = a.height, d.image.data = a.data), d.wrapS = void 0 !== a.wrapS ? a.wrapS : 1001, d.wrapT = void 0 !== a.wrapT ? a.wrapT : 1001, d.magFilter = void 0 !== a.magFilter ? a.magFilter : 1006, d.minFilter = void 0 !== a.minFilter ? a.minFilter : 1008, d.anisotropy = void 0 !== a.anisotropy ? a.anisotropy : 1, void 0 !== a.format && (d.format = a.format), void 0 !== a.type && (d.type = a.type), 
        void 0 !== a.mipmaps && (d.mipmaps = a.mipmaps), 1 === a.mipmapCount && (d.minFilter = 1006), d.needsUpdate = !0, b && b(d, a);
      }
    }, e, c);
    return d;
  }, setPath:function(a) {
    this.path = a;
    return this;
  }});
  Object.assign(vd.prototype, {crossOrigin:"anonymous", load:function(a, b, e, c) {
    function g() {
      h.removeEventListener("load", g, !1);
      h.removeEventListener("error", d, !1);
      gc.add(a, this);
      b && b(this);
      l.manager.itemEnd(a);
    }
    function d(b) {
      h.removeEventListener("load", g, !1);
      h.removeEventListener("error", d, !1);
      c && c(b);
      l.manager.itemError(a);
      l.manager.itemEnd(a);
    }
    void 0 === a && (a = "");
    void 0 !== this.path && (a = this.path + a);
    a = this.manager.resolveURL(a);
    var l = this, f = gc.get(a);
    if (void 0 !== f) {
      return l.manager.itemStart(a), setTimeout(function() {
        b && b(f);
        l.manager.itemEnd(a);
      }, 0), f;
    }
    var h = document.createElementNS("http://www.w3.org/1999/xhtml", "img");
    h.addEventListener("load", g, !1);
    h.addEventListener("error", d, !1);
    "data:" !== a.substr(0, 5) && void 0 !== this.crossOrigin && (h.crossOrigin = this.crossOrigin);
    l.manager.itemStart(a);
    h.src = a;
    return h;
  }, setCrossOrigin:function(a) {
    this.crossOrigin = a;
    return this;
  }, setPath:function(a) {
    this.path = a;
    return this;
  }});
  Object.assign(Ce.prototype, {crossOrigin:"anonymous", load:function(a, b, e, c) {
    function g(g) {
      l.load(a[g], function(a) {
        d.images[g] = a;
        f++;
        6 === f && (d.needsUpdate = !0, b && b(d));
      }, void 0, c);
    }
    var d = new ya, l = new vd(this.manager);
    l.setCrossOrigin(this.crossOrigin);
    l.setPath(this.path);
    var f = 0;
    for (e = 0; e < a.length; ++e) {
      g(e);
    }
    return d;
  }, setCrossOrigin:function(a) {
    this.crossOrigin = a;
    return this;
  }, setPath:function(a) {
    this.path = a;
    return this;
  }});
  Object.assign(Zd.prototype, {crossOrigin:"anonymous", load:function(a, b, e, c) {
    var g = new n, d = new vd(this.manager);
    d.setCrossOrigin(this.crossOrigin);
    d.setPath(this.path);
    d.load(a, function(e) {
      g.image = e;
      e = 0 < a.search(/\.jpe?g($|\?)/i) || 0 === a.search(/^data:image\/jpeg/);
      g.format = e ? 1022 : 1023;
      g.needsUpdate = !0;
      void 0 !== b && b(g);
    }, e, c);
    return g;
  }, setCrossOrigin:function(a) {
    this.crossOrigin = a;
    return this;
  }, setPath:function(a) {
    this.path = a;
    return this;
  }});
  Object.assign(da.prototype, {getPoint:function() {
    console.warn("THREE.Curve: .getPoint() not implemented.");
    return null;
  }, getPointAt:function(a, b) {
    a = this.getUtoTmapping(a);
    return this.getPoint(a, b);
  }, getPoints:function(a) {
    void 0 === a && (a = 5);
    for (var b = [], g = 0; g <= a; g++) {
      b.push(this.getPoint(g / a));
    }
    return b;
  }, getSpacedPoints:function(a) {
    void 0 === a && (a = 5);
    for (var b = [], g = 0; g <= a; g++) {
      b.push(this.getPointAt(g / a));
    }
    return b;
  }, getLength:function() {
    var a = this.getLengths();
    return a[a.length - 1];
  }, getLengths:function(a) {
    void 0 === a && (a = this.arcLengthDivisions);
    if (this.cacheArcLengths && this.cacheArcLengths.length === a + 1 && !this.needsUpdate) {
      return this.cacheArcLengths;
    }
    this.needsUpdate = !1;
    var b = [], g = this.getPoint(0), e, c = 0;
    b.push(0);
    for (e = 1; e <= a; e++) {
      var d = this.getPoint(e / a);
      c += d.distanceTo(g);
      b.push(c);
      g = d;
    }
    return this.cacheArcLengths = b;
  }, updateArcLengths:function() {
    this.needsUpdate = !0;
    this.getLengths();
  }, getUtoTmapping:function(a, b) {
    var g = this.getLengths(), e = g.length;
    b = b ? b : a * g[e - 1];
    for (var c = 0, d = e - 1, l; c <= d;) {
      if (a = Math.floor(c + (d - c) / 2), l = g[a] - b, 0 > l) {
        c = a + 1;
      } else {
        if (0 < l) {
          d = a - 1;
        } else {
          d = a;
          break;
        }
      }
    }
    a = d;
    if (g[a] === b) {
      return a / (e - 1);
    }
    c = g[a];
    return (a + (b - c) / (g[a + 1] - c)) / (e - 1);
  }, getTangent:function(a) {
    var b = a - 1E-4;
    a += 1E-4;
    0 > b && (b = 0);
    1 < a && (a = 1);
    b = this.getPoint(b);
    return this.getPoint(a).clone().sub(b).normalize();
  }, getTangentAt:function(a) {
    a = this.getUtoTmapping(a);
    return this.getTangent(a);
  }, computeFrenetFrames:function(a, e) {
    var g = new d, c = [], l = [], f = [], h = new d, p = new b, k;
    for (k = 0; k <= a; k++) {
      var m = k / a;
      c[k] = this.getTangentAt(m);
      c[k].normalize();
    }
    l[0] = new d;
    f[0] = new d;
    k = Number.MAX_VALUE;
    m = Math.abs(c[0].x);
    var n = Math.abs(c[0].y), t = Math.abs(c[0].z);
    m <= k && (k = m, g.set(1, 0, 0));
    n <= k && (k = n, g.set(0, 1, 0));
    t <= k && g.set(0, 0, 1);
    h.crossVectors(c[0], g).normalize();
    l[0].crossVectors(c[0], h);
    f[0].crossVectors(c[0], l[0]);
    for (k = 1; k <= a; k++) {
      l[k] = l[k - 1].clone(), f[k] = f[k - 1].clone(), h.crossVectors(c[k - 1], c[k]), h.length() > Number.EPSILON && (h.normalize(), g = Math.acos(ia.clamp(c[k - 1].dot(c[k]), -1, 1)), l[k].applyMatrix4(p.makeRotationAxis(h, g))), f[k].crossVectors(c[k], l[k]);
    }
    if (!0 === e) {
      for (g = Math.acos(ia.clamp(l[0].dot(l[a]), -1, 1)), g /= a, 0 < c[0].dot(h.crossVectors(l[0], l[a])) && (g = -g), k = 1; k <= a; k++) {
        l[k].applyMatrix4(p.makeRotationAxis(c[k], g * k)), f[k].crossVectors(c[k], l[k]);
      }
    }
    return {tangents:c, normals:l, binormals:f};
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(a) {
    this.arcLengthDivisions = a.arcLengthDivisions;
    return this;
  }, toJSON:function() {
    var a = {metadata:{version:4.5, type:"Curve", generator:"Curve.toJSON"}};
    a.arcLengthDivisions = this.arcLengthDivisions;
    a.type = this.type;
    return a;
  }, fromJSON:function(a) {
    this.arcLengthDivisions = a.arcLengthDivisions;
    return this;
  }});
  Pa.prototype = Object.create(da.prototype);
  Pa.prototype.constructor = Pa;
  Pa.prototype.isEllipseCurve = !0;
  Pa.prototype.getPoint = function(a, b) {
    b = b || new k;
    for (var g = 2 * Math.PI, e = this.aEndAngle - this.aStartAngle, c = Math.abs(e) < Number.EPSILON; 0 > e;) {
      e += g;
    }
    for (; e > g;) {
      e -= g;
    }
    e < Number.EPSILON && (e = c ? 0 : g);
    !0 !== this.aClockwise || c || (e = e === g ? -g : e - g);
    g = this.aStartAngle + a * e;
    a = this.aX + this.xRadius * Math.cos(g);
    var d = this.aY + this.yRadius * Math.sin(g);
    0 !== this.aRotation && (g = Math.cos(this.aRotation), e = Math.sin(this.aRotation), c = a - this.aX, d -= this.aY, a = c * g - d * e + this.aX, d = c * e + d * g + this.aY);
    return b.set(a, d);
  };
  Pa.prototype.copy = function(a) {
    da.prototype.copy.call(this, a);
    this.aX = a.aX;
    this.aY = a.aY;
    this.xRadius = a.xRadius;
    this.yRadius = a.yRadius;
    this.aStartAngle = a.aStartAngle;
    this.aEndAngle = a.aEndAngle;
    this.aClockwise = a.aClockwise;
    this.aRotation = a.aRotation;
    return this;
  };
  Pa.prototype.toJSON = function() {
    var a = da.prototype.toJSON.call(this);
    a.aX = this.aX;
    a.aY = this.aY;
    a.xRadius = this.xRadius;
    a.yRadius = this.yRadius;
    a.aStartAngle = this.aStartAngle;
    a.aEndAngle = this.aEndAngle;
    a.aClockwise = this.aClockwise;
    a.aRotation = this.aRotation;
    return a;
  };
  Pa.prototype.fromJSON = function(a) {
    da.prototype.fromJSON.call(this, a);
    this.aX = a.aX;
    this.aY = a.aY;
    this.xRadius = a.xRadius;
    this.yRadius = a.yRadius;
    this.aStartAngle = a.aStartAngle;
    this.aEndAngle = a.aEndAngle;
    this.aClockwise = a.aClockwise;
    this.aRotation = a.aRotation;
    return this;
  };
  Dc.prototype = Object.create(Pa.prototype);
  Dc.prototype.constructor = Dc;
  Dc.prototype.isArcCurve = !0;
  var le = new d, Ze = new De, $e = new De, af = new De;
  Ea.prototype = Object.create(da.prototype);
  Ea.prototype.constructor = Ea;
  Ea.prototype.isCatmullRomCurve3 = !0;
  Ea.prototype.getPoint = function(a, b) {
    b = b || new d;
    var g = this.points, e = g.length;
    a *= e - (this.closed ? 0 : 1);
    var c = Math.floor(a);
    a -= c;
    this.closed ? c += 0 < c ? 0 : (Math.floor(Math.abs(c) / e) + 1) * e : 0 === a && c === e - 1 && (c = e - 2, a = 1);
    if (this.closed || 0 < c) {
      var l = g[(c - 1) % e];
    } else {
      le.subVectors(g[0], g[1]).add(g[0]), l = le;
    }
    var f = g[c % e], h = g[(c + 1) % e];
    this.closed || c + 2 < e ? g = g[(c + 2) % e] : (le.subVectors(g[e - 1], g[e - 2]).add(g[e - 1]), g = le);
    if ("centripetal" === this.curveType || "chordal" === this.curveType) {
      var p = "chordal" === this.curveType ? .5 : .25;
      e = Math.pow(l.distanceToSquared(f), p);
      c = Math.pow(f.distanceToSquared(h), p);
      p = Math.pow(h.distanceToSquared(g), p);
      1E-4 > c && (c = 1);
      1E-4 > e && (e = c);
      1E-4 > p && (p = c);
      Ze.initNonuniformCatmullRom(l.x, f.x, h.x, g.x, e, c, p);
      $e.initNonuniformCatmullRom(l.y, f.y, h.y, g.y, e, c, p);
      af.initNonuniformCatmullRom(l.z, f.z, h.z, g.z, e, c, p);
    } else {
      "catmullrom" === this.curveType && (Ze.initCatmullRom(l.x, f.x, h.x, g.x, this.tension), $e.initCatmullRom(l.y, f.y, h.y, g.y, this.tension), af.initCatmullRom(l.z, f.z, h.z, g.z, this.tension));
    }
    b.set(Ze.calc(a), $e.calc(a), af.calc(a));
    return b;
  };
  Ea.prototype.copy = function(a) {
    da.prototype.copy.call(this, a);
    this.points = [];
    for (var b = 0, g = a.points.length; b < g; b++) {
      this.points.push(a.points[b].clone());
    }
    this.closed = a.closed;
    this.curveType = a.curveType;
    this.tension = a.tension;
    return this;
  };
  Ea.prototype.toJSON = function() {
    var a = da.prototype.toJSON.call(this);
    a.points = [];
    for (var b = 0, e = this.points.length; b < e; b++) {
      a.points.push(this.points[b].toArray());
    }
    a.closed = this.closed;
    a.curveType = this.curveType;
    a.tension = this.tension;
    return a;
  };
  Ea.prototype.fromJSON = function(a) {
    da.prototype.fromJSON.call(this, a);
    this.points = [];
    for (var b = 0, g = a.points.length; b < g; b++) {
      var e = a.points[b];
      this.points.push((new d).fromArray(e));
    }
    this.closed = a.closed;
    this.curveType = a.curveType;
    this.tension = a.tension;
    return this;
  };
  Za.prototype = Object.create(da.prototype);
  Za.prototype.constructor = Za;
  Za.prototype.isCubicBezierCurve = !0;
  Za.prototype.getPoint = function(a, b) {
    b = b || new k;
    var g = this.v0, e = this.v1, c = this.v2, d = this.v3;
    b.set(xd(a, g.x, e.x, c.x, d.x), xd(a, g.y, e.y, c.y, d.y));
    return b;
  };
  Za.prototype.copy = function(a) {
    da.prototype.copy.call(this, a);
    this.v0.copy(a.v0);
    this.v1.copy(a.v1);
    this.v2.copy(a.v2);
    this.v3.copy(a.v3);
    return this;
  };
  Za.prototype.toJSON = function() {
    var a = da.prototype.toJSON.call(this);
    a.v0 = this.v0.toArray();
    a.v1 = this.v1.toArray();
    a.v2 = this.v2.toArray();
    a.v3 = this.v3.toArray();
    return a;
  };
  Za.prototype.fromJSON = function(a) {
    da.prototype.fromJSON.call(this, a);
    this.v0.fromArray(a.v0);
    this.v1.fromArray(a.v1);
    this.v2.fromArray(a.v2);
    this.v3.fromArray(a.v3);
    return this;
  };
  lb.prototype = Object.create(da.prototype);
  lb.prototype.constructor = lb;
  lb.prototype.isCubicBezierCurve3 = !0;
  lb.prototype.getPoint = function(a, b) {
    b = b || new d;
    var g = this.v0, e = this.v1, c = this.v2, l = this.v3;
    b.set(xd(a, g.x, e.x, c.x, l.x), xd(a, g.y, e.y, c.y, l.y), xd(a, g.z, e.z, c.z, l.z));
    return b;
  };
  lb.prototype.copy = function(a) {
    da.prototype.copy.call(this, a);
    this.v0.copy(a.v0);
    this.v1.copy(a.v1);
    this.v2.copy(a.v2);
    this.v3.copy(a.v3);
    return this;
  };
  lb.prototype.toJSON = function() {
    var a = da.prototype.toJSON.call(this);
    a.v0 = this.v0.toArray();
    a.v1 = this.v1.toArray();
    a.v2 = this.v2.toArray();
    a.v3 = this.v3.toArray();
    return a;
  };
  lb.prototype.fromJSON = function(a) {
    da.prototype.fromJSON.call(this, a);
    this.v0.fromArray(a.v0);
    this.v1.fromArray(a.v1);
    this.v2.fromArray(a.v2);
    this.v3.fromArray(a.v3);
    return this;
  };
  Ma.prototype = Object.create(da.prototype);
  Ma.prototype.constructor = Ma;
  Ma.prototype.isLineCurve = !0;
  Ma.prototype.getPoint = function(a, b) {
    b = b || new k;
    1 === a ? b.copy(this.v2) : (b.copy(this.v2).sub(this.v1), b.multiplyScalar(a).add(this.v1));
    return b;
  };
  Ma.prototype.getPointAt = function(a, b) {
    return this.getPoint(a, b);
  };
  Ma.prototype.getTangent = function() {
    return this.v2.clone().sub(this.v1).normalize();
  };
  Ma.prototype.copy = function(a) {
    da.prototype.copy.call(this, a);
    this.v1.copy(a.v1);
    this.v2.copy(a.v2);
    return this;
  };
  Ma.prototype.toJSON = function() {
    var a = da.prototype.toJSON.call(this);
    a.v1 = this.v1.toArray();
    a.v2 = this.v2.toArray();
    return a;
  };
  Ma.prototype.fromJSON = function(a) {
    da.prototype.fromJSON.call(this, a);
    this.v1.fromArray(a.v1);
    this.v2.fromArray(a.v2);
    return this;
  };
  $a.prototype = Object.create(da.prototype);
  $a.prototype.constructor = $a;
  $a.prototype.isLineCurve3 = !0;
  $a.prototype.getPoint = function(a, b) {
    b = b || new d;
    1 === a ? b.copy(this.v2) : (b.copy(this.v2).sub(this.v1), b.multiplyScalar(a).add(this.v1));
    return b;
  };
  $a.prototype.getPointAt = function(a, b) {
    return this.getPoint(a, b);
  };
  $a.prototype.copy = function(a) {
    da.prototype.copy.call(this, a);
    this.v1.copy(a.v1);
    this.v2.copy(a.v2);
    return this;
  };
  $a.prototype.toJSON = function() {
    var a = da.prototype.toJSON.call(this);
    a.v1 = this.v1.toArray();
    a.v2 = this.v2.toArray();
    return a;
  };
  $a.prototype.fromJSON = function(a) {
    da.prototype.fromJSON.call(this, a);
    this.v1.fromArray(a.v1);
    this.v2.fromArray(a.v2);
    return this;
  };
  ab.prototype = Object.create(da.prototype);
  ab.prototype.constructor = ab;
  ab.prototype.isQuadraticBezierCurve = !0;
  ab.prototype.getPoint = function(a, b) {
    b = b || new k;
    var g = this.v0, e = this.v1, c = this.v2;
    b.set(wd(a, g.x, e.x, c.x), wd(a, g.y, e.y, c.y));
    return b;
  };
  ab.prototype.copy = function(a) {
    da.prototype.copy.call(this, a);
    this.v0.copy(a.v0);
    this.v1.copy(a.v1);
    this.v2.copy(a.v2);
    return this;
  };
  ab.prototype.toJSON = function() {
    var a = da.prototype.toJSON.call(this);
    a.v0 = this.v0.toArray();
    a.v1 = this.v1.toArray();
    a.v2 = this.v2.toArray();
    return a;
  };
  ab.prototype.fromJSON = function(a) {
    da.prototype.fromJSON.call(this, a);
    this.v0.fromArray(a.v0);
    this.v1.fromArray(a.v1);
    this.v2.fromArray(a.v2);
    return this;
  };
  mb.prototype = Object.create(da.prototype);
  mb.prototype.constructor = mb;
  mb.prototype.isQuadraticBezierCurve3 = !0;
  mb.prototype.getPoint = function(a, b) {
    b = b || new d;
    var g = this.v0, e = this.v1, c = this.v2;
    b.set(wd(a, g.x, e.x, c.x), wd(a, g.y, e.y, c.y), wd(a, g.z, e.z, c.z));
    return b;
  };
  mb.prototype.copy = function(a) {
    da.prototype.copy.call(this, a);
    this.v0.copy(a.v0);
    this.v1.copy(a.v1);
    this.v2.copy(a.v2);
    return this;
  };
  mb.prototype.toJSON = function() {
    var a = da.prototype.toJSON.call(this);
    a.v0 = this.v0.toArray();
    a.v1 = this.v1.toArray();
    a.v2 = this.v2.toArray();
    return a;
  };
  mb.prototype.fromJSON = function(a) {
    da.prototype.fromJSON.call(this, a);
    this.v0.fromArray(a.v0);
    this.v1.fromArray(a.v1);
    this.v2.fromArray(a.v2);
    return this;
  };
  bb.prototype = Object.create(da.prototype);
  bb.prototype.constructor = bb;
  bb.prototype.isSplineCurve = !0;
  bb.prototype.getPoint = function(a, b) {
    b = b || new k;
    var g = this.points, e = (g.length - 1) * a;
    a = Math.floor(e);
    e -= a;
    var c = g[0 === a ? a : a - 1], d = g[a], l = g[a > g.length - 2 ? g.length - 1 : a + 1];
    g = g[a > g.length - 3 ? g.length - 1 : a + 2];
    b.set(If(e, c.x, d.x, l.x, g.x), If(e, c.y, d.y, l.y, g.y));
    return b;
  };
  bb.prototype.copy = function(a) {
    da.prototype.copy.call(this, a);
    this.points = [];
    for (var b = 0, g = a.points.length; b < g; b++) {
      this.points.push(a.points[b].clone());
    }
    return this;
  };
  bb.prototype.toJSON = function() {
    var a = da.prototype.toJSON.call(this);
    a.points = [];
    for (var b = 0, e = this.points.length; b < e; b++) {
      a.points.push(this.points[b].toArray());
    }
    return a;
  };
  bb.prototype.fromJSON = function(a) {
    da.prototype.fromJSON.call(this, a);
    this.points = [];
    for (var b = 0, g = a.points.length; b < g; b++) {
      var e = a.points[b];
      this.points.push((new k).fromArray(e));
    }
    return this;
  };
  var bf = Object.freeze({ArcCurve:Dc, CatmullRomCurve3:Ea, CubicBezierCurve:Za, CubicBezierCurve3:lb, EllipseCurve:Pa, LineCurve:Ma, LineCurve3:$a, QuadraticBezierCurve:ab, QuadraticBezierCurve3:mb, SplineCurve:bb});
  xb.prototype = Object.assign(Object.create(da.prototype), {constructor:xb, add:function(a) {
    this.curves.push(a);
  }, closePath:function() {
    var a = this.curves[0].getPoint(0), b = this.curves[this.curves.length - 1].getPoint(1);
    a.equals(b) || this.curves.push(new Ma(b, a));
  }, getPoint:function(a) {
    var b = a * this.getLength(), g = this.getCurveLengths();
    for (a = 0; a < g.length;) {
      if (g[a] >= b) {
        return b = g[a] - b, a = this.curves[a], g = a.getLength(), a.getPointAt(0 === g ? 0 : 1 - b / g);
      }
      a++;
    }
    return null;
  }, getLength:function() {
    var a = this.getCurveLengths();
    return a[a.length - 1];
  }, updateArcLengths:function() {
    this.needsUpdate = !0;
    this.cacheLengths = null;
    this.getCurveLengths();
  }, getCurveLengths:function() {
    if (this.cacheLengths && this.cacheLengths.length === this.curves.length) {
      return this.cacheLengths;
    }
    for (var a = [], b = 0, e = 0, c = this.curves.length; e < c; e++) {
      b += this.curves[e].getLength(), a.push(b);
    }
    return this.cacheLengths = a;
  }, getSpacedPoints:function(a) {
    void 0 === a && (a = 40);
    for (var b = [], g = 0; g <= a; g++) {
      b.push(this.getPoint(g / a));
    }
    this.autoClose && b.push(b[0]);
    return b;
  }, getPoints:function(a) {
    a = a || 12;
    for (var b = [], g, e = 0, c = this.curves; e < c.length; e++) {
      var d = c[e];
      d = d.getPoints(d && d.isEllipseCurve ? 2 * a : d && (d.isLineCurve || d.isLineCurve3) ? 1 : d && d.isSplineCurve ? a * d.points.length : a);
      for (var l = 0; l < d.length; l++) {
        var f = d[l];
        g && g.equals(f) || (b.push(f), g = f);
      }
    }
    this.autoClose && 1 < b.length && !b[b.length - 1].equals(b[0]) && b.push(b[0]);
    return b;
  }, copy:function(a) {
    da.prototype.copy.call(this, a);
    this.curves = [];
    for (var b = 0, g = a.curves.length; b < g; b++) {
      this.curves.push(a.curves[b].clone());
    }
    this.autoClose = a.autoClose;
    return this;
  }, toJSON:function() {
    var a = da.prototype.toJSON.call(this);
    a.autoClose = this.autoClose;
    a.curves = [];
    for (var b = 0, e = this.curves.length; b < e; b++) {
      a.curves.push(this.curves[b].toJSON());
    }
    return a;
  }, fromJSON:function(a) {
    da.prototype.fromJSON.call(this, a);
    this.autoClose = a.autoClose;
    this.curves = [];
    for (var b = 0, g = a.curves.length; b < g; b++) {
      var e = a.curves[b];
      this.curves.push((new bf[e.type]).fromJSON(e));
    }
    return this;
  }});
  cb.prototype = Object.assign(Object.create(xb.prototype), {constructor:cb, setFromPoints:function(a) {
    this.moveTo(a[0].x, a[0].y);
    for (var b = 1, g = a.length; b < g; b++) {
      this.lineTo(a[b].x, a[b].y);
    }
  }, moveTo:function(a, b) {
    this.currentPoint.set(a, b);
  }, lineTo:function(a, b) {
    var g = new Ma(this.currentPoint.clone(), new k(a, b));
    this.curves.push(g);
    this.currentPoint.set(a, b);
  }, quadraticCurveTo:function(a, b, e, c) {
    a = new ab(this.currentPoint.clone(), new k(a, b), new k(e, c));
    this.curves.push(a);
    this.currentPoint.set(e, c);
  }, bezierCurveTo:function(a, b, e, c, d, l) {
    a = new Za(this.currentPoint.clone(), new k(a, b), new k(e, c), new k(d, l));
    this.curves.push(a);
    this.currentPoint.set(d, l);
  }, splineThru:function(a) {
    var b = [this.currentPoint.clone()].concat(a);
    b = new bb(b);
    this.curves.push(b);
    this.currentPoint.copy(a[a.length - 1]);
  }, arc:function(a, b, e, c, d, l) {
    this.absarc(a + this.currentPoint.x, b + this.currentPoint.y, e, c, d, l);
  }, absarc:function(a, b, e, c, d, l) {
    this.absellipse(a, b, e, e, c, d, l);
  }, ellipse:function(a, b, e, c, d, l, f, h) {
    this.absellipse(a + this.currentPoint.x, b + this.currentPoint.y, e, c, d, l, f, h);
  }, absellipse:function(a, b, e, c, d, l, f, h) {
    a = new Pa(a, b, e, c, d, l, f, h);
    0 < this.curves.length && (b = a.getPoint(0), b.equals(this.currentPoint) || this.lineTo(b.x, b.y));
    this.curves.push(a);
    a = a.getPoint(1);
    this.currentPoint.copy(a);
  }, copy:function(a) {
    xb.prototype.copy.call(this, a);
    this.currentPoint.copy(a.currentPoint);
    return this;
  }, toJSON:function() {
    var a = xb.prototype.toJSON.call(this);
    a.currentPoint = this.currentPoint.toArray();
    return a;
  }, fromJSON:function(a) {
    xb.prototype.fromJSON.call(this, a);
    this.currentPoint.fromArray(a.currentPoint);
    return this;
  }});
  Mb.prototype = Object.assign(Object.create(cb.prototype), {constructor:Mb, getPointsHoles:function(a) {
    for (var b = [], g = 0, e = this.holes.length; g < e; g++) {
      b[g] = this.holes[g].getPoints(a);
    }
    return b;
  }, extractPoints:function(a) {
    return {shape:this.getPoints(a), holes:this.getPointsHoles(a)};
  }, copy:function(a) {
    cb.prototype.copy.call(this, a);
    this.holes = [];
    for (var b = 0, g = a.holes.length; b < g; b++) {
      this.holes.push(a.holes[b].clone());
    }
    return this;
  }, toJSON:function() {
    var a = cb.prototype.toJSON.call(this);
    a.uuid = this.uuid;
    a.holes = [];
    for (var b = 0, e = this.holes.length; b < e; b++) {
      a.holes.push(this.holes[b].toJSON());
    }
    return a;
  }, fromJSON:function(a) {
    cb.prototype.fromJSON.call(this, a);
    this.uuid = a.uuid;
    this.holes = [];
    for (var b = 0, g = a.holes.length; b < g; b++) {
      var e = a.holes[b];
      this.holes.push((new cb).fromJSON(e));
    }
    return this;
  }});
  va.prototype = Object.assign(Object.create(G.prototype), {constructor:va, isLight:!0, copy:function(a) {
    G.prototype.copy.call(this, a);
    this.color.copy(a.color);
    this.intensity = a.intensity;
    return this;
  }, toJSON:function(a) {
    a = G.prototype.toJSON.call(this, a);
    a.object.color = this.color.getHex();
    a.object.intensity = this.intensity;
    void 0 !== this.groundColor && (a.object.groundColor = this.groundColor.getHex());
    void 0 !== this.distance && (a.object.distance = this.distance);
    void 0 !== this.angle && (a.object.angle = this.angle);
    void 0 !== this.decay && (a.object.decay = this.decay);
    void 0 !== this.penumbra && (a.object.penumbra = this.penumbra);
    void 0 !== this.shadow && (a.object.shadow = this.shadow.toJSON());
    return a;
  }});
  $d.prototype = Object.assign(Object.create(va.prototype), {constructor:$d, isHemisphereLight:!0, copy:function(a) {
    va.prototype.copy.call(this, a);
    this.groundColor.copy(a.groundColor);
    return this;
  }});
  Object.assign(fc.prototype, {copy:function(a) {
    this.camera = a.camera.clone();
    this.bias = a.bias;
    this.radius = a.radius;
    this.mapSize.copy(a.mapSize);
    return this;
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, toJSON:function() {
    var a = {};
    0 !== this.bias && (a.bias = this.bias);
    1 !== this.radius && (a.radius = this.radius);
    if (512 !== this.mapSize.x || 512 !== this.mapSize.y) {
      a.mapSize = this.mapSize.toArray();
    }
    a.camera = this.camera.toJSON(!1).object;
    delete a.camera.matrix;
    return a;
  }});
  ae.prototype = Object.assign(Object.create(fc.prototype), {constructor:ae, isSpotLightShadow:!0, update:function(a) {
    var b = this.camera, g = 2 * ia.RAD2DEG * a.angle, e = this.mapSize.width / this.mapSize.height;
    a = a.distance || b.far;
    if (g !== b.fov || e !== b.aspect || a !== b.far) {
      b.fov = g, b.aspect = e, b.far = a, b.updateProjectionMatrix();
    }
  }});
  be.prototype = Object.assign(Object.create(va.prototype), {constructor:be, isSpotLight:!0, copy:function(a) {
    va.prototype.copy.call(this, a);
    this.distance = a.distance;
    this.angle = a.angle;
    this.penumbra = a.penumbra;
    this.decay = a.decay;
    this.target = a.target.clone();
    this.shadow = a.shadow.clone();
    return this;
  }});
  ce.prototype = Object.assign(Object.create(va.prototype), {constructor:ce, isPointLight:!0, copy:function(a) {
    va.prototype.copy.call(this, a);
    this.distance = a.distance;
    this.decay = a.decay;
    this.shadow = a.shadow.clone();
    return this;
  }});
  yd.prototype = Object.assign(Object.create(ib.prototype), {constructor:yd, isOrthographicCamera:!0, copy:function(a, b) {
    ib.prototype.copy.call(this, a, b);
    this.left = a.left;
    this.right = a.right;
    this.top = a.top;
    this.bottom = a.bottom;
    this.near = a.near;
    this.far = a.far;
    this.zoom = a.zoom;
    this.view = null === a.view ? null : Object.assign({}, a.view);
    return this;
  }, setViewOffset:function(a, b, e, c, d, l) {
    null === this.view && (this.view = {enabled:!0, fullWidth:1, fullHeight:1, offsetX:0, offsetY:0, width:1, height:1});
    this.view.enabled = !0;
    this.view.fullWidth = a;
    this.view.fullHeight = b;
    this.view.offsetX = e;
    this.view.offsetY = c;
    this.view.width = d;
    this.view.height = l;
    this.updateProjectionMatrix();
  }, clearViewOffset:function() {
    null !== this.view && (this.view.enabled = !1);
    this.updateProjectionMatrix();
  }, updateProjectionMatrix:function() {
    var a = (this.right - this.left) / (2 * this.zoom), b = (this.top - this.bottom) / (2 * this.zoom), e = (this.right + this.left) / 2, c = (this.top + this.bottom) / 2, d = e - a;
    e += a;
    a = c + b;
    b = c - b;
    if (null !== this.view && this.view.enabled) {
      e = this.zoom / (this.view.width / this.view.fullWidth);
      b = this.zoom / (this.view.height / this.view.fullHeight);
      var l = (this.right - this.left) / this.view.width;
      c = (this.top - this.bottom) / this.view.height;
      d += this.view.offsetX / e * l;
      e = d + this.view.width / e * l;
      a -= this.view.offsetY / b * c;
      b = a - this.view.height / b * c;
    }
    this.projectionMatrix.makeOrthographic(d, e, a, b, this.near, this.far);
    this.projectionMatrixInverse.getInverse(this.projectionMatrix);
  }, toJSON:function(a) {
    a = G.prototype.toJSON.call(this, a);
    a.object.zoom = this.zoom;
    a.object.left = this.left;
    a.object.right = this.right;
    a.object.top = this.top;
    a.object.bottom = this.bottom;
    a.object.near = this.near;
    a.object.far = this.far;
    null !== this.view && (a.object.view = Object.assign({}, this.view));
    return a;
  }});
  de.prototype = Object.assign(Object.create(fc.prototype), {constructor:de});
  ee.prototype = Object.assign(Object.create(va.prototype), {constructor:ee, isDirectionalLight:!0, copy:function(a) {
    va.prototype.copy.call(this, a);
    this.target = a.target.clone();
    this.shadow = a.shadow.clone();
    return this;
  }});
  fe.prototype = Object.assign(Object.create(va.prototype), {constructor:fe, isAmbientLight:!0});
  ge.prototype = Object.assign(Object.create(va.prototype), {constructor:ge, isRectAreaLight:!0, copy:function(a) {
    va.prototype.copy.call(this, a);
    this.width = a.width;
    this.height = a.height;
    return this;
  }, toJSON:function(a) {
    a = va.prototype.toJSON.call(this, a);
    a.object.width = this.width;
    a.object.height = this.height;
    return a;
  }});
  Object.assign(he.prototype, {load:function(a, b, e, c) {
    var g = this, d = new Ya(g.manager);
    d.setPath(g.path);
    d.load(a, function(a) {
      b(g.parse(JSON.parse(a)));
    }, e, c);
  }, parse:function(a) {
    function g(a) {
      void 0 === e[a] && console.warn("THREE.MaterialLoader: Undefined texture", a);
      return e[a];
    }
    var e = this.textures, c = new Fg[a.type];
    void 0 !== a.uuid && (c.uuid = a.uuid);
    void 0 !== a.name && (c.name = a.name);
    void 0 !== a.color && c.color.setHex(a.color);
    void 0 !== a.roughness && (c.roughness = a.roughness);
    void 0 !== a.metalness && (c.metalness = a.metalness);
    void 0 !== a.emissive && c.emissive.setHex(a.emissive);
    void 0 !== a.specular && c.specular.setHex(a.specular);
    void 0 !== a.shininess && (c.shininess = a.shininess);
    void 0 !== a.clearCoat && (c.clearCoat = a.clearCoat);
    void 0 !== a.clearCoatRoughness && (c.clearCoatRoughness = a.clearCoatRoughness);
    void 0 !== a.vertexColors && (c.vertexColors = a.vertexColors);
    void 0 !== a.fog && (c.fog = a.fog);
    void 0 !== a.flatShading && (c.flatShading = a.flatShading);
    void 0 !== a.blending && (c.blending = a.blending);
    void 0 !== a.combine && (c.combine = a.combine);
    void 0 !== a.side && (c.side = a.side);
    void 0 !== a.opacity && (c.opacity = a.opacity);
    void 0 !== a.transparent && (c.transparent = a.transparent);
    void 0 !== a.alphaTest && (c.alphaTest = a.alphaTest);
    void 0 !== a.depthTest && (c.depthTest = a.depthTest);
    void 0 !== a.depthWrite && (c.depthWrite = a.depthWrite);
    void 0 !== a.colorWrite && (c.colorWrite = a.colorWrite);
    void 0 !== a.wireframe && (c.wireframe = a.wireframe);
    void 0 !== a.wireframeLinewidth && (c.wireframeLinewidth = a.wireframeLinewidth);
    void 0 !== a.wireframeLinecap && (c.wireframeLinecap = a.wireframeLinecap);
    void 0 !== a.wireframeLinejoin && (c.wireframeLinejoin = a.wireframeLinejoin);
    void 0 !== a.rotation && (c.rotation = a.rotation);
    1 !== a.linewidth && (c.linewidth = a.linewidth);
    void 0 !== a.dashSize && (c.dashSize = a.dashSize);
    void 0 !== a.gapSize && (c.gapSize = a.gapSize);
    void 0 !== a.scale && (c.scale = a.scale);
    void 0 !== a.polygonOffset && (c.polygonOffset = a.polygonOffset);
    void 0 !== a.polygonOffsetFactor && (c.polygonOffsetFactor = a.polygonOffsetFactor);
    void 0 !== a.polygonOffsetUnits && (c.polygonOffsetUnits = a.polygonOffsetUnits);
    void 0 !== a.skinning && (c.skinning = a.skinning);
    void 0 !== a.morphTargets && (c.morphTargets = a.morphTargets);
    void 0 !== a.dithering && (c.dithering = a.dithering);
    void 0 !== a.visible && (c.visible = a.visible);
    void 0 !== a.userData && (c.userData = a.userData);
    if (void 0 !== a.uniforms) {
      for (var l in a.uniforms) {
        var f = a.uniforms[l];
        c.uniforms[l] = {};
        switch(f.type) {
          case "t":
            c.uniforms[l].value = g(f.value);
            break;
          case "c":
            c.uniforms[l].value = (new z).setHex(f.value);
            break;
          case "v2":
            c.uniforms[l].value = (new k).fromArray(f.value);
            break;
          case "v3":
            c.uniforms[l].value = (new d).fromArray(f.value);
            break;
          case "v4":
            c.uniforms[l].value = (new q).fromArray(f.value);
            break;
          case "m3":
            c.uniforms[l].value = (new h).fromArray(f.value);
          case "m4":
            c.uniforms[l].value = (new b).fromArray(f.value);
            break;
          default:
            c.uniforms[l].value = f.value;
        }
      }
    }
    void 0 !== a.defines && (c.defines = a.defines);
    void 0 !== a.vertexShader && (c.vertexShader = a.vertexShader);
    void 0 !== a.fragmentShader && (c.fragmentShader = a.fragmentShader);
    if (void 0 !== a.extensions) {
      for (var p in a.extensions) {
        c.extensions[p] = a.extensions[p];
      }
    }
    void 0 !== a.shading && (c.flatShading = 1 === a.shading);
    void 0 !== a.size && (c.size = a.size);
    void 0 !== a.sizeAttenuation && (c.sizeAttenuation = a.sizeAttenuation);
    void 0 !== a.map && (c.map = g(a.map));
    void 0 !== a.alphaMap && (c.alphaMap = g(a.alphaMap), c.transparent = !0);
    void 0 !== a.bumpMap && (c.bumpMap = g(a.bumpMap));
    void 0 !== a.bumpScale && (c.bumpScale = a.bumpScale);
    void 0 !== a.normalMap && (c.normalMap = g(a.normalMap));
    void 0 !== a.normalMapType && (c.normalMapType = a.normalMapType);
    void 0 !== a.normalScale && (l = a.normalScale, !1 === Array.isArray(l) && (l = [l, l]), c.normalScale = (new k).fromArray(l));
    void 0 !== a.displacementMap && (c.displacementMap = g(a.displacementMap));
    void 0 !== a.displacementScale && (c.displacementScale = a.displacementScale);
    void 0 !== a.displacementBias && (c.displacementBias = a.displacementBias);
    void 0 !== a.roughnessMap && (c.roughnessMap = g(a.roughnessMap));
    void 0 !== a.metalnessMap && (c.metalnessMap = g(a.metalnessMap));
    void 0 !== a.emissiveMap && (c.emissiveMap = g(a.emissiveMap));
    void 0 !== a.emissiveIntensity && (c.emissiveIntensity = a.emissiveIntensity);
    void 0 !== a.specularMap && (c.specularMap = g(a.specularMap));
    void 0 !== a.envMap && (c.envMap = g(a.envMap));
    void 0 !== a.envMapIntensity && (c.envMapIntensity = a.envMapIntensity);
    void 0 !== a.reflectivity && (c.reflectivity = a.reflectivity);
    void 0 !== a.lightMap && (c.lightMap = g(a.lightMap));
    void 0 !== a.lightMapIntensity && (c.lightMapIntensity = a.lightMapIntensity);
    void 0 !== a.aoMap && (c.aoMap = g(a.aoMap));
    void 0 !== a.aoMapIntensity && (c.aoMapIntensity = a.aoMapIntensity);
    void 0 !== a.gradientMap && (c.gradientMap = g(a.gradientMap));
    return c;
  }, setPath:function(a) {
    this.path = a;
    return this;
  }, setTextures:function(a) {
    this.textures = a;
    return this;
  }});
  var cf = {decodeText:function(a) {
    if ("undefined" !== typeof TextDecoder) {
      return (new TextDecoder).decode(a);
    }
    for (var b = "", g = 0, e = a.length; g < e; g++) {
      b += String.fromCharCode(a[g]);
    }
    return decodeURIComponent(escape(b));
  }, extractUrlBase:function(a) {
    var b = a.lastIndexOf("/");
    return -1 === b ? "./" : a.substr(0, b + 1);
  }};
  Object.assign(Ee.prototype, {load:function(a, b, e, c) {
    var g = this, d = new Ya(g.manager);
    d.setPath(g.path);
    d.load(a, function(a) {
      b(g.parse(JSON.parse(a)));
    }, e, c);
  }, parse:function(a) {
    var b = new O, g = a.data.index;
    if (void 0 !== g) {
      var e = new df[g.type](g.array);
      b.setIndex(new K(e, 1));
    }
    g = a.data.attributes;
    for (var c in g) {
      var l = g[c];
      e = new df[l.type](l.array);
      e = new K(e, l.itemSize, l.normalized);
      void 0 !== l.name && (e.name = l.name);
      b.addAttribute(c, e);
    }
    var f = a.data.morphAttributes;
    if (f) {
      for (c in f) {
        var h = f[c], p = [];
        g = 0;
        for (var k = h.length; g < k; g++) {
          l = h[g], e = new df[l.type](l.array), e = new K(e, l.itemSize, l.normalized), void 0 !== l.name && (e.name = l.name), p.push(e);
        }
        b.morphAttributes[c] = p;
      }
    }
    c = a.data.groups || a.data.drawcalls || a.data.offsets;
    if (void 0 !== c) {
      for (g = 0, l = c.length; g !== l; ++g) {
        e = c[g], b.addGroup(e.start, e.count, e.materialIndex);
      }
    }
    g = a.data.boundingSphere;
    void 0 !== g && (c = new d, void 0 !== g.center && c.fromArray(g.center), b.boundingSphere = new w(c, g.radius));
    a.name && (b.name = a.name);
    a.userData && (b.userData = a.userData);
    return b;
  }, setPath:function(a) {
    this.path = a;
    return this;
  }});
  var df = {Int8Array:Int8Array, Uint8Array:Uint8Array, Uint8ClampedArray:"undefined" !== typeof Uint8ClampedArray ? Uint8ClampedArray : Uint8Array, Int16Array:Int16Array, Uint16Array:Uint16Array, Int32Array:Int32Array, Uint32Array:Uint32Array, Float32Array:Float32Array, Float64Array:Float64Array};
  Object.assign(Fe.prototype, {crossOrigin:"anonymous", load:function(a, b, e, c) {
    var g = this, d = void 0 === this.path ? cf.extractUrlBase(a) : this.path;
    this.resourcePath = this.resourcePath || d;
    d = new Ya(g.manager);
    d.setPath(this.path);
    d.load(a, function(e) {
      var d = null;
      try {
        d = JSON.parse(e);
      } catch (Ia) {
        void 0 !== c && c(Ia);
        console.error("THREE:ObjectLoader: Can't parse " + a + ".", Ia.message);
        return;
      }
      e = d.metadata;
      void 0 === e || void 0 === e.type || "geometry" === e.type.toLowerCase() ? console.error("THREE.ObjectLoader: Can't load " + a) : g.parse(d, b);
    }, e, c);
  }, setPath:function(a) {
    this.path = a;
    return this;
  }, setResourcePath:function(a) {
    this.resourcePath = a;
    return this;
  }, setCrossOrigin:function(a) {
    this.crossOrigin = a;
    return this;
  }, parse:function(a, b) {
    var e = this.parseShape(a.shapes);
    e = this.parseGeometries(a.geometries, e);
    var g = this.parseImages(a.images, function() {
      void 0 !== b && b(c);
    });
    g = this.parseTextures(a.textures, g);
    g = this.parseMaterials(a.materials, g);
    var c = this.parseObject(a.object, e, g);
    a.animations && (c.animations = this.parseAnimations(a.animations));
    void 0 !== a.images && 0 !== a.images.length || void 0 === b || b(c);
    return c;
  }, parseShape:function(a) {
    var b = {};
    if (void 0 !== a) {
      for (var e = 0, g = a.length; e < g; e++) {
        var c = (new Mb).fromJSON(a[e]);
        b[c.uuid] = c;
      }
    }
    return b;
  }, parseGeometries:function(a, b) {
    var e = {};
    if (void 0 !== a) {
      for (var g = new Ee, c = 0, d = a.length; c < d; c++) {
        var l = a[c];
        switch(l.type) {
          case "PlaneGeometry":
          case "PlaneBufferGeometry":
            var f = new Ha[l.type](l.width, l.height, l.widthSegments, l.heightSegments);
            break;
          case "BoxGeometry":
          case "BoxBufferGeometry":
          case "CubeGeometry":
            f = new Ha[l.type](l.width, l.height, l.depth, l.widthSegments, l.heightSegments, l.depthSegments);
            break;
          case "CircleGeometry":
          case "CircleBufferGeometry":
            f = new Ha[l.type](l.radius, l.segments, l.thetaStart, l.thetaLength);
            break;
          case "CylinderGeometry":
          case "CylinderBufferGeometry":
            f = new Ha[l.type](l.radiusTop, l.radiusBottom, l.height, l.radialSegments, l.heightSegments, l.openEnded, l.thetaStart, l.thetaLength);
            break;
          case "ConeGeometry":
          case "ConeBufferGeometry":
            f = new Ha[l.type](l.radius, l.height, l.radialSegments, l.heightSegments, l.openEnded, l.thetaStart, l.thetaLength);
            break;
          case "SphereGeometry":
          case "SphereBufferGeometry":
            f = new Ha[l.type](l.radius, l.widthSegments, l.heightSegments, l.phiStart, l.phiLength, l.thetaStart, l.thetaLength);
            break;
          case "DodecahedronGeometry":
          case "DodecahedronBufferGeometry":
          case "IcosahedronGeometry":
          case "IcosahedronBufferGeometry":
          case "OctahedronGeometry":
          case "OctahedronBufferGeometry":
          case "TetrahedronGeometry":
          case "TetrahedronBufferGeometry":
            f = new Ha[l.type](l.radius, l.detail);
            break;
          case "RingGeometry":
          case "RingBufferGeometry":
            f = new Ha[l.type](l.innerRadius, l.outerRadius, l.thetaSegments, l.phiSegments, l.thetaStart, l.thetaLength);
            break;
          case "TorusGeometry":
          case "TorusBufferGeometry":
            f = new Ha[l.type](l.radius, l.tube, l.radialSegments, l.tubularSegments, l.arc);
            break;
          case "TorusKnotGeometry":
          case "TorusKnotBufferGeometry":
            f = new Ha[l.type](l.radius, l.tube, l.tubularSegments, l.radialSegments, l.p, l.q);
            break;
          case "TubeGeometry":
          case "TubeBufferGeometry":
            f = new Ha[l.type]((new bf[l.path.type]).fromJSON(l.path), l.tubularSegments, l.radius, l.radialSegments, l.closed);
            break;
          case "LatheGeometry":
          case "LatheBufferGeometry":
            f = new Ha[l.type](l.points, l.segments, l.phiStart, l.phiLength);
            break;
          case "PolyhedronGeometry":
          case "PolyhedronBufferGeometry":
            f = new Ha[l.type](l.vertices, l.indices, l.radius, l.details);
            break;
          case "ShapeGeometry":
          case "ShapeBufferGeometry":
            f = [];
            for (var h = 0, p = l.shapes.length; h < p; h++) {
              var k = b[l.shapes[h]];
              f.push(k);
            }
            f = new Ha[l.type](f, l.curveSegments);
            break;
          case "ExtrudeGeometry":
          case "ExtrudeBufferGeometry":
            f = [];
            h = 0;
            for (p = l.shapes.length; h < p; h++) {
              k = b[l.shapes[h]], f.push(k);
            }
            h = l.options.extrudePath;
            void 0 !== h && (l.options.extrudePath = (new bf[h.type]).fromJSON(h));
            f = new Ha[l.type](f, l.options);
            break;
          case "BufferGeometry":
            f = g.parse(l);
            break;
          case "Geometry":
            "THREE" in window && "LegacyJSONLoader" in THREE ? f = (new THREE.LegacyJSONLoader).parse(l, this.resourcePath).geometry : console.error('THREE.ObjectLoader: You have to import LegacyJSONLoader in order load geometry data of type "Geometry".');
            break;
          default:
            console.warn('THREE.ObjectLoader: Unsupported geometry type "' + l.type + '"');
            continue;
        }
        f.uuid = l.uuid;
        void 0 !== l.name && (f.name = l.name);
        !0 === f.isBufferGeometry && void 0 !== l.userData && (f.userData = l.userData);
        e[l.uuid] = f;
      }
    }
    return e;
  }, parseMaterials:function(a, b) {
    var e = {}, g = {};
    if (void 0 !== a) {
      var c = new he;
      c.setTextures(b);
      b = 0;
      for (var d = a.length; b < d; b++) {
        var l = a[b];
        if ("MultiMaterial" === l.type) {
          for (var f = [], h = 0; h < l.materials.length; h++) {
            var p = l.materials[h];
            void 0 === e[p.uuid] && (e[p.uuid] = c.parse(p));
            f.push(e[p.uuid]);
          }
          g[l.uuid] = f;
        } else {
          void 0 === e[l.uuid] && (e[l.uuid] = c.parse(l)), g[l.uuid] = e[l.uuid];
        }
      }
    }
    return g;
  }, parseAnimations:function(a) {
    for (var b = [], e = 0; e < a.length; e++) {
      var g = a[e], c = Sa.parse(g);
      void 0 !== g.uuid && (c.uuid = g.uuid);
      b.push(c);
    }
    return b;
  }, parseImages:function(a, b) {
    function e(a) {
      g.manager.itemStart(a);
      return d.load(a, function() {
        g.manager.itemEnd(a);
      }, void 0, function() {
        g.manager.itemError(a);
        g.manager.itemEnd(a);
      });
    }
    var g = this, c = {};
    if (void 0 !== a && 0 < a.length) {
      b = new Ae(b);
      var d = new vd(b);
      d.setCrossOrigin(this.crossOrigin);
      b = 0;
      for (var l = a.length; b < l; b++) {
        var f = a[b], h = f.url;
        if (Array.isArray(h)) {
          c[f.uuid] = [];
          for (var p = 0, k = h.length; p < k; p++) {
            var m = h[p];
            m = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(m) ? m : g.resourcePath + m;
            c[f.uuid].push(e(m));
          }
        } else {
          m = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(f.url) ? f.url : g.resourcePath + f.url, c[f.uuid] = e(m);
        }
      }
    }
    return c;
  }, parseTextures:function(a, b) {
    function e(a, b) {
      if ("number" === typeof a) {
        return a;
      }
      console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.", a);
      return b[a];
    }
    var g = {};
    if (void 0 !== a) {
      for (var c = 0, d = a.length; c < d; c++) {
        var l = a[c];
        void 0 === l.image && console.warn('THREE.ObjectLoader: No "image" specified for', l.uuid);
        void 0 === b[l.image] && console.warn("THREE.ObjectLoader: Undefined image", l.image);
        var f = Array.isArray(b[l.image]) ? new ya(b[l.image]) : new n(b[l.image]);
        f.needsUpdate = !0;
        f.uuid = l.uuid;
        void 0 !== l.name && (f.name = l.name);
        void 0 !== l.mapping && (f.mapping = e(l.mapping, Gg));
        void 0 !== l.offset && f.offset.fromArray(l.offset);
        void 0 !== l.repeat && f.repeat.fromArray(l.repeat);
        void 0 !== l.center && f.center.fromArray(l.center);
        void 0 !== l.rotation && (f.rotation = l.rotation);
        void 0 !== l.wrap && (f.wrapS = e(l.wrap[0], Vf), f.wrapT = e(l.wrap[1], Vf));
        void 0 !== l.format && (f.format = l.format);
        void 0 !== l.type && (f.type = l.type);
        void 0 !== l.encoding && (f.encoding = l.encoding);
        void 0 !== l.minFilter && (f.minFilter = e(l.minFilter, Wf));
        void 0 !== l.magFilter && (f.magFilter = e(l.magFilter, Wf));
        void 0 !== l.anisotropy && (f.anisotropy = l.anisotropy);
        void 0 !== l.flipY && (f.flipY = l.flipY);
        void 0 !== l.premultiplyAlpha && (f.premultiplyAlpha = l.premultiplyAlpha);
        void 0 !== l.unpackAlignment && (f.unpackAlignment = l.unpackAlignment);
        g[l.uuid] = f;
      }
    }
    return g;
  }, parseObject:function(a, b, e) {
    function g(a) {
      void 0 === b[a] && console.warn("THREE.ObjectLoader: Undefined geometry", a);
      return b[a];
    }
    function c(a) {
      if (void 0 !== a) {
        if (Array.isArray(a)) {
          for (var b = [], g = 0, c = a.length; g < c; g++) {
            var d = a[g];
            void 0 === e[d] && console.warn("THREE.ObjectLoader: Undefined material", d);
            b.push(e[d]);
          }
          return b;
        }
        void 0 === e[a] && console.warn("THREE.ObjectLoader: Undefined material", a);
        return e[a];
      }
    }
    switch(a.type) {
      case "Scene":
        var d = new Pd;
        void 0 !== a.background && Number.isInteger(a.background) && (d.background = new z(a.background));
        void 0 !== a.fog && ("Fog" === a.fog.type ? d.fog = new Od(a.fog.color, a.fog.near, a.fog.far) : "FogExp2" === a.fog.type && (d.fog = new Nd(a.fog.color, a.fog.density)));
        break;
      case "PerspectiveCamera":
        d = new ra(a.fov, a.aspect, a.near, a.far);
        void 0 !== a.focus && (d.focus = a.focus);
        void 0 !== a.zoom && (d.zoom = a.zoom);
        void 0 !== a.filmGauge && (d.filmGauge = a.filmGauge);
        void 0 !== a.filmOffset && (d.filmOffset = a.filmOffset);
        void 0 !== a.view && (d.view = Object.assign({}, a.view));
        break;
      case "OrthographicCamera":
        d = new yd(a.left, a.right, a.top, a.bottom, a.near, a.far);
        void 0 !== a.zoom && (d.zoom = a.zoom);
        void 0 !== a.view && (d.view = Object.assign({}, a.view));
        break;
      case "AmbientLight":
        d = new fe(a.color, a.intensity);
        break;
      case "DirectionalLight":
        d = new ee(a.color, a.intensity);
        break;
      case "PointLight":
        d = new ce(a.color, a.intensity, a.distance, a.decay);
        break;
      case "RectAreaLight":
        d = new ge(a.color, a.intensity, a.width, a.height);
        break;
      case "SpotLight":
        d = new be(a.color, a.intensity, a.distance, a.angle, a.penumbra, a.decay);
        break;
      case "HemisphereLight":
        d = new $d(a.color, a.groundColor, a.intensity);
        break;
      case "SkinnedMesh":
        console.warn("THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.");
      case "Mesh":
        d = g(a.geometry);
        var l = c(a.material);
        d = d.bones && 0 < d.bones.length ? new Xc(d, l) : new ca(d, l);
        void 0 !== a.drawMode && d.setDrawMode(a.drawMode);
        break;
      case "LOD":
        d = new Wc;
        break;
      case "Line":
        d = new wa(g(a.geometry), c(a.material), a.mode);
        break;
      case "LineLoop":
        d = new Rd(g(a.geometry), c(a.material));
        break;
      case "LineSegments":
        d = new qa(g(a.geometry), c(a.material));
        break;
      case "PointCloud":
      case "Points":
        d = new mc(g(a.geometry), c(a.material));
        break;
      case "Sprite":
        d = new Vc(c(a.material));
        break;
      case "Group":
        d = new kc;
        break;
      default:
        d = new G;
    }
    d.uuid = a.uuid;
    void 0 !== a.name && (d.name = a.name);
    void 0 !== a.matrix ? (d.matrix.fromArray(a.matrix), void 0 !== a.matrixAutoUpdate && (d.matrixAutoUpdate = a.matrixAutoUpdate), d.matrixAutoUpdate && d.matrix.decompose(d.position, d.quaternion, d.scale)) : (void 0 !== a.position && d.position.fromArray(a.position), void 0 !== a.rotation && d.rotation.fromArray(a.rotation), void 0 !== a.quaternion && d.quaternion.fromArray(a.quaternion), void 0 !== a.scale && d.scale.fromArray(a.scale));
    void 0 !== a.castShadow && (d.castShadow = a.castShadow);
    void 0 !== a.receiveShadow && (d.receiveShadow = a.receiveShadow);
    a.shadow && (void 0 !== a.shadow.bias && (d.shadow.bias = a.shadow.bias), void 0 !== a.shadow.radius && (d.shadow.radius = a.shadow.radius), void 0 !== a.shadow.mapSize && d.shadow.mapSize.fromArray(a.shadow.mapSize), void 0 !== a.shadow.camera && (d.shadow.camera = this.parseObject(a.shadow.camera)));
    void 0 !== a.visible && (d.visible = a.visible);
    void 0 !== a.frustumCulled && (d.frustumCulled = a.frustumCulled);
    void 0 !== a.renderOrder && (d.renderOrder = a.renderOrder);
    void 0 !== a.userData && (d.userData = a.userData);
    void 0 !== a.layers && (d.layers.mask = a.layers);
    if (void 0 !== a.children) {
      l = a.children;
      for (var f = 0; f < l.length; f++) {
        d.add(this.parseObject(l[f], b, e));
      }
    }
    if ("LOD" === a.type) {
      for (a = a.levels, l = 0; l < a.length; l++) {
        f = a[l];
        var h = d.getObjectByProperty("uuid", f.object);
        void 0 !== h && d.addLevel(h, f.distance);
      }
    }
    return d;
  }});
  var Gg = {UVMapping:300, CubeReflectionMapping:301, CubeRefractionMapping:302, EquirectangularReflectionMapping:303, EquirectangularRefractionMapping:304, SphericalReflectionMapping:305, CubeUVReflectionMapping:306, CubeUVRefractionMapping:307}, Vf = {RepeatWrapping:1E3, ClampToEdgeWrapping:1001, MirroredRepeatWrapping:1002}, Wf = {NearestFilter:1003, NearestMipMapNearestFilter:1004, NearestMipMapLinearFilter:1005, LinearFilter:1006, LinearMipMapNearestFilter:1007, LinearMipMapLinearFilter:1008};
  Ge.prototype = {constructor:Ge, setOptions:function(a) {
    this.options = a;
    return this;
  }, load:function(a, b, e, c) {
    void 0 === a && (a = "");
    void 0 !== this.path && (a = this.path + a);
    a = this.manager.resolveURL(a);
    var g = this, d = gc.get(a);
    if (void 0 !== d) {
      return g.manager.itemStart(a), setTimeout(function() {
        b && b(d);
        g.manager.itemEnd(a);
      }, 0), d;
    }
    fetch(a).then(function(a) {
      return a.blob();
    }).then(function(a) {
      return void 0 === g.options ? createImageBitmap(a) : createImageBitmap(a, g.options);
    }).then(function(e) {
      gc.add(a, e);
      b && b(e);
      g.manager.itemEnd(a);
    }).catch(function(b) {
      c && c(b);
      g.manager.itemError(a);
      g.manager.itemEnd(a);
    });
    g.manager.itemStart(a);
  }, setCrossOrigin:function() {
    return this;
  }, setPath:function(a) {
    this.path = a;
    return this;
  }};
  Object.assign(He.prototype, {moveTo:function(a, b) {
    this.currentPath = new cb;
    this.subPaths.push(this.currentPath);
    this.currentPath.moveTo(a, b);
  }, lineTo:function(a, b) {
    this.currentPath.lineTo(a, b);
  }, quadraticCurveTo:function(a, b, e, c) {
    this.currentPath.quadraticCurveTo(a, b, e, c);
  }, bezierCurveTo:function(a, b, e, c, d, l) {
    this.currentPath.bezierCurveTo(a, b, e, c, d, l);
  }, splineThru:function(a) {
    this.currentPath.splineThru(a);
  }, toShapes:function(a, b) {
    function e(a) {
      for (var b = [], e = 0, g = a.length; e < g; e++) {
        var c = a[e], d = new Mb;
        d.curves = c.curves;
        b.push(d);
      }
      return b;
    }
    function g(a, b) {
      for (var e = b.length, g = !1, c = e - 1, d = 0; d < e; c = d++) {
        var l = b[c], f = b[d], h = f.x - l.x, p = f.y - l.y;
        if (Math.abs(p) > Number.EPSILON) {
          if (0 > p && (l = b[d], h = -h, f = b[c], p = -p), !(a.y < l.y || a.y > f.y)) {
            if (a.y === l.y) {
              if (a.x === l.x) {
                return !0;
              }
            } else {
              c = p * (a.x - l.x) - h * (a.y - l.y);
              if (0 === c) {
                return !0;
              }
              0 > c || (g = !g);
            }
          }
        } else {
          if (a.y === l.y && (f.x <= a.x && a.x <= l.x || l.x <= a.x && a.x <= f.x)) {
            return !0;
          }
        }
      }
      return g;
    }
    var c = vb.isClockWise, d = this.subPaths;
    if (0 === d.length) {
      return [];
    }
    if (!0 === b) {
      return e(d);
    }
    b = [];
    if (1 === d.length) {
      var l = d[0], f = new Mb;
      f.curves = l.curves;
      b.push(f);
      return b;
    }
    var h = !c(d[0].getPoints());
    h = a ? !h : h;
    f = [];
    var p = [], k = [], m = 0;
    p[m] = void 0;
    k[m] = [];
    for (var n = 0, t = d.length; n < t; n++) {
      l = d[n];
      var u = l.getPoints(), q = c(u);
      (q = a ? !q : q) ? (!h && p[m] && m++, p[m] = {s:new Mb, p:u}, p[m].s.curves = l.curves, h && m++, k[m] = []) : k[m].push({h:l, p:u[0]});
    }
    if (!p[0]) {
      return e(d);
    }
    if (1 < p.length) {
      n = !1;
      a = [];
      c = 0;
      for (d = p.length; c < d; c++) {
        f[c] = [];
      }
      c = 0;
      for (d = p.length; c < d; c++) {
        for (l = k[c], q = 0; q < l.length; q++) {
          h = l[q];
          m = !0;
          for (u = 0; u < p.length; u++) {
            g(h.p, p[u].p) && (c !== u && a.push({froms:c, tos:u, hole:q}), m ? (m = !1, f[u].push(h)) : n = !0);
          }
          m && f[c].push(h);
        }
      }
      0 < a.length && (n || (k = f));
    }
    n = 0;
    for (c = p.length; n < c; n++) {
      for (f = p[n].s, b.push(f), a = k[n], d = 0, l = a.length; d < l; d++) {
        f.holes.push(a[d].h);
      }
    }
    return b;
  }});
  Object.assign(Ie.prototype, {isFont:!0, generateShapes:function(a, b) {
    void 0 === b && (b = 100);
    var e = [], g = b;
    b = this.data;
    var c = Array.from ? Array.from(a) : String(a).split("");
    g /= b.resolution;
    var d = (b.boundingBox.yMax - b.boundingBox.yMin + b.underlineThickness) * g;
    a = [];
    for (var l = 0, f = 0, h = 0; h < c.length; h++) {
      var p = c[h];
      if ("\n" === p) {
        l = 0, f -= d;
      } else {
        var k = g, m = l, n = f;
        if (p = b.glyphs[p] || b.glyphs["?"]) {
          var t = new He;
          if (p.o) {
            for (var u = p._cachedOutline || (p._cachedOutline = p.o.split(" ")), q = 0, v = u.length; q < v;) {
              switch(u[q++]) {
                case "m":
                  var r = u[q++] * k + m, w = u[q++] * k + n;
                  t.moveTo(r, w);
                  break;
                case "l":
                  r = u[q++] * k + m;
                  w = u[q++] * k + n;
                  t.lineTo(r, w);
                  break;
                case "q":
                  var z = u[q++] * k + m, y = u[q++] * k + n, x = u[q++] * k + m, D = u[q++] * k + n;
                  t.quadraticCurveTo(x, D, z, y);
                  break;
                case "b":
                  z = u[q++] * k + m, y = u[q++] * k + n, x = u[q++] * k + m, D = u[q++] * k + n, r = u[q++] * k + m, w = u[q++] * k + n, t.bezierCurveTo(x, D, r, w, z, y);
              }
            }
          }
          k = {offsetX:p.ha * k, path:t};
        } else {
          k = void 0;
        }
        l += k.offsetX;
        a.push(k.path);
      }
    }
    b = 0;
    for (c = a.length; b < c; b++) {
      Array.prototype.push.apply(e, a[b].toShapes());
    }
    return e;
  }});
  Object.assign(Jf.prototype, {load:function(a, b, e, c) {
    var g = this, d = new Ya(this.manager);
    d.setPath(this.path);
    d.load(a, function(a) {
      try {
        var e = JSON.parse(a);
      } catch (Ia) {
        console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead."), e = JSON.parse(a.substring(65, a.length - 2));
      }
      a = g.parse(e);
      b && b(a);
    }, e, c);
  }, parse:function(a) {
    return new Ie(a);
  }, setPath:function(a) {
    this.path = a;
    return this;
  }});
  zd.Handlers = {handlers:[], add:function(a, b) {
    this.handlers.push(a, b);
  }, get:function(a) {
    for (var b = this.handlers, e = 0, g = b.length; e < g; e += 2) {
      var c = b[e + 1];
      if (b[e].test(a)) {
        return c;
      }
    }
    return null;
  }};
  Object.assign(zd.prototype, {crossOrigin:"anonymous", onLoadStart:function() {
  }, onLoadProgress:function() {
  }, onLoadComplete:function() {
  }, initMaterials:function(a, b, e) {
    for (var g = [], c = 0; c < a.length; ++c) {
      g[c] = this.createMaterial(a[c], b, e);
    }
    return g;
  }, createMaterial:function() {
    var a = {NoBlending:0, NormalBlending:1, AdditiveBlending:2, SubtractiveBlending:3, MultiplyBlending:4, CustomBlending:5}, b = new z, e = new Zd, c = new he;
    return function(g, d, l) {
      function f(a, b, g, c, f) {
        a = d + a;
        var p = zd.Handlers.get(a);
        null !== p ? a = p.load(a) : (e.setCrossOrigin(l), a = e.load(a));
        void 0 !== b && (a.repeat.fromArray(b), 1 !== b[0] && (a.wrapS = 1E3), 1 !== b[1] && (a.wrapT = 1E3));
        void 0 !== g && a.offset.fromArray(g);
        void 0 !== c && ("repeat" === c[0] && (a.wrapS = 1E3), "mirror" === c[0] && (a.wrapS = 1002), "repeat" === c[1] && (a.wrapT = 1E3), "mirror" === c[1] && (a.wrapT = 1002));
        void 0 !== f && (a.anisotropy = f);
        b = ia.generateUUID();
        h[b] = a;
        return b;
      }
      var h = {}, p = {uuid:ia.generateUUID(), type:"MeshLambertMaterial"}, k;
      for (k in g) {
        var m = g[k];
        switch(k) {
          case "DbgColor":
          case "DbgIndex":
          case "opticalDensity":
          case "illumination":
            break;
          case "DbgName":
            p.name = m;
            break;
          case "blending":
            p.blending = a[m];
            break;
          case "colorAmbient":
          case "mapAmbient":
            console.warn("THREE.Loader.createMaterial:", k, "is no longer supported.");
            break;
          case "colorDiffuse":
            p.color = b.fromArray(m).getHex();
            break;
          case "colorSpecular":
            p.specular = b.fromArray(m).getHex();
            break;
          case "colorEmissive":
            p.emissive = b.fromArray(m).getHex();
            break;
          case "specularCoef":
            p.shininess = m;
            break;
          case "shading":
            "basic" === m.toLowerCase() && (p.type = "MeshBasicMaterial");
            "phong" === m.toLowerCase() && (p.type = "MeshPhongMaterial");
            "standard" === m.toLowerCase() && (p.type = "MeshStandardMaterial");
            break;
          case "mapDiffuse":
            p.map = f(m, g.mapDiffuseRepeat, g.mapDiffuseOffset, g.mapDiffuseWrap, g.mapDiffuseAnisotropy);
            break;
          case "mapDiffuseRepeat":
          case "mapDiffuseOffset":
          case "mapDiffuseWrap":
          case "mapDiffuseAnisotropy":
            break;
          case "mapEmissive":
            p.emissiveMap = f(m, g.mapEmissiveRepeat, g.mapEmissiveOffset, g.mapEmissiveWrap, g.mapEmissiveAnisotropy);
            break;
          case "mapEmissiveRepeat":
          case "mapEmissiveOffset":
          case "mapEmissiveWrap":
          case "mapEmissiveAnisotropy":
            break;
          case "mapLight":
            p.lightMap = f(m, g.mapLightRepeat, g.mapLightOffset, g.mapLightWrap, g.mapLightAnisotropy);
            break;
          case "mapLightRepeat":
          case "mapLightOffset":
          case "mapLightWrap":
          case "mapLightAnisotropy":
            break;
          case "mapAO":
            p.aoMap = f(m, g.mapAORepeat, g.mapAOOffset, g.mapAOWrap, g.mapAOAnisotropy);
            break;
          case "mapAORepeat":
          case "mapAOOffset":
          case "mapAOWrap":
          case "mapAOAnisotropy":
            break;
          case "mapBump":
            p.bumpMap = f(m, g.mapBumpRepeat, g.mapBumpOffset, g.mapBumpWrap, g.mapBumpAnisotropy);
            break;
          case "mapBumpScale":
            p.bumpScale = m;
            break;
          case "mapBumpRepeat":
          case "mapBumpOffset":
          case "mapBumpWrap":
          case "mapBumpAnisotropy":
            break;
          case "mapNormal":
            p.normalMap = f(m, g.mapNormalRepeat, g.mapNormalOffset, g.mapNormalWrap, g.mapNormalAnisotropy);
            break;
          case "mapNormalFactor":
            p.normalScale = m;
            break;
          case "mapNormalRepeat":
          case "mapNormalOffset":
          case "mapNormalWrap":
          case "mapNormalAnisotropy":
            break;
          case "mapSpecular":
            p.specularMap = f(m, g.mapSpecularRepeat, g.mapSpecularOffset, g.mapSpecularWrap, g.mapSpecularAnisotropy);
            break;
          case "mapSpecularRepeat":
          case "mapSpecularOffset":
          case "mapSpecularWrap":
          case "mapSpecularAnisotropy":
            break;
          case "mapMetalness":
            p.metalnessMap = f(m, g.mapMetalnessRepeat, g.mapMetalnessOffset, g.mapMetalnessWrap, g.mapMetalnessAnisotropy);
            break;
          case "mapMetalnessRepeat":
          case "mapMetalnessOffset":
          case "mapMetalnessWrap":
          case "mapMetalnessAnisotropy":
            break;
          case "mapRoughness":
            p.roughnessMap = f(m, g.mapRoughnessRepeat, g.mapRoughnessOffset, g.mapRoughnessWrap, g.mapRoughnessAnisotropy);
            break;
          case "mapRoughnessRepeat":
          case "mapRoughnessOffset":
          case "mapRoughnessWrap":
          case "mapRoughnessAnisotropy":
            break;
          case "mapAlpha":
            p.alphaMap = f(m, g.mapAlphaRepeat, g.mapAlphaOffset, g.mapAlphaWrap, g.mapAlphaAnisotropy);
            break;
          case "mapAlphaRepeat":
          case "mapAlphaOffset":
          case "mapAlphaWrap":
          case "mapAlphaAnisotropy":
            break;
          case "flipSided":
            p.side = 1;
            break;
          case "doubleSided":
            p.side = 2;
            break;
          case "transparency":
            console.warn("THREE.Loader.createMaterial: transparency has been renamed to opacity");
            p.opacity = m;
            break;
          case "depthTest":
          case "depthWrite":
          case "colorWrite":
          case "opacity":
          case "reflectivity":
          case "transparent":
          case "visible":
          case "wireframe":
            p[k] = m;
            break;
          case "vertexColors":
            !0 === m && (p.vertexColors = 2);
            "face" === m && (p.vertexColors = 1);
            break;
          default:
            console.error("THREE.Loader.createMaterial: Unsupported", k, m);
        }
      }
      "MeshBasicMaterial" === p.type && delete p.emissive;
      "MeshPhongMaterial" !== p.type && delete p.specular;
      1 > p.opacity && (p.transparent = !0);
      c.setTextures(h);
      return c.parse(p);
    };
  }()});
  var me, Me = {getContext:function() {
    void 0 === me && (me = new (window.AudioContext || window.webkitAudioContext));
    return me;
  }, setContext:function(a) {
    me = a;
  }};
  Object.assign(Je.prototype, {load:function(a, b, e, c) {
    var g = new Ya(this.manager);
    g.setResponseType("arraybuffer");
    g.setPath(this.path);
    g.load(a, function(a) {
      a = a.slice(0);
      Me.getContext().decodeAudioData(a, function(a) {
        b(a);
      });
    }, e, c);
  }, setPath:function(a) {
    this.path = a;
    return this;
  }});
  Object.assign(Kf.prototype, {update:function() {
    var a, e, c, d, l, f, h, p, k = new b, m = new b;
    return function(b) {
      if (a !== this || e !== b.focus || c !== b.fov || d !== b.aspect * this.aspect || l !== b.near || f !== b.far || h !== b.zoom || p !== this.eyeSep) {
        a = this;
        e = b.focus;
        c = b.fov;
        d = b.aspect * this.aspect;
        l = b.near;
        f = b.far;
        h = b.zoom;
        var g = b.projectionMatrix.clone();
        p = this.eyeSep / 2;
        var n = p * l / e, t = l * Math.tan(ia.DEG2RAD * c * .5) / h;
        m.elements[12] = -p;
        k.elements[12] = p;
        var u = -t * d + n, q = t * d + n;
        g.elements[0] = 2 * l / (q - u);
        g.elements[8] = (q + u) / (q - u);
        this.cameraL.projectionMatrix.copy(g);
        u = -t * d - n;
        q = t * d - n;
        g.elements[0] = 2 * l / (q - u);
        g.elements[8] = (q + u) / (q - u);
        this.cameraR.projectionMatrix.copy(g);
      }
      this.cameraL.matrixWorld.copy(b.matrixWorld).multiply(m);
      this.cameraR.matrixWorld.copy(b.matrixWorld).multiply(k);
    };
  }()});
  Ad.prototype = Object.create(G.prototype);
  Ad.prototype.constructor = Ad;
  Object.assign(Ke.prototype, {start:function() {
    this.oldTime = this.startTime = ("undefined" === typeof performance ? Date : performance).now();
    this.elapsedTime = 0;
    this.running = !0;
  }, stop:function() {
    this.getElapsedTime();
    this.autoStart = this.running = !1;
  }, getElapsedTime:function() {
    this.getDelta();
    return this.elapsedTime;
  }, getDelta:function() {
    var a = 0;
    if (this.autoStart && !this.running) {
      return this.start(), 0;
    }
    if (this.running) {
      var b = ("undefined" === typeof performance ? Date : performance).now();
      a = (b - this.oldTime) / 1E3;
      this.oldTime = b;
      this.elapsedTime += a;
    }
    return a;
  }});
  Le.prototype = Object.assign(Object.create(G.prototype), {constructor:Le, getInput:function() {
    return this.gain;
  }, removeFilter:function() {
    null !== this.filter && (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination), this.gain.connect(this.context.destination), this.filter = null);
    return this;
  }, getFilter:function() {
    return this.filter;
  }, setFilter:function(a) {
    null !== this.filter ? (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination)) : this.gain.disconnect(this.context.destination);
    this.filter = a;
    this.gain.connect(this.filter);
    this.filter.connect(this.context.destination);
    return this;
  }, getMasterVolume:function() {
    return this.gain.gain.value;
  }, setMasterVolume:function(a) {
    this.gain.gain.setTargetAtTime(a, this.context.currentTime, .01);
    return this;
  }, updateMatrixWorld:function() {
    var a = new d, b = new f, e = new d, c = new d, l = new Ke;
    return function(g) {
      G.prototype.updateMatrixWorld.call(this, g);
      g = this.context.listener;
      var d = this.up;
      this.timeDelta = l.getDelta();
      this.matrixWorld.decompose(a, b, e);
      c.set(0, 0, -1).applyQuaternion(b);
      if (g.positionX) {
        var f = this.context.currentTime + this.timeDelta;
        g.positionX.linearRampToValueAtTime(a.x, f);
        g.positionY.linearRampToValueAtTime(a.y, f);
        g.positionZ.linearRampToValueAtTime(a.z, f);
        g.forwardX.linearRampToValueAtTime(c.x, f);
        g.forwardY.linearRampToValueAtTime(c.y, f);
        g.forwardZ.linearRampToValueAtTime(c.z, f);
        g.upX.linearRampToValueAtTime(d.x, f);
        g.upY.linearRampToValueAtTime(d.y, f);
        g.upZ.linearRampToValueAtTime(d.z, f);
      } else {
        g.setPosition(a.x, a.y, a.z), g.setOrientation(c.x, c.y, c.z, d.x, d.y, d.z);
      }
    };
  }()});
  Ec.prototype = Object.assign(Object.create(G.prototype), {constructor:Ec, getOutput:function() {
    return this.gain;
  }, setNodeSource:function(a) {
    this.hasPlaybackControl = !1;
    this.sourceType = "audioNode";
    this.source = a;
    this.connect();
    return this;
  }, setMediaElementSource:function(a) {
    this.hasPlaybackControl = !1;
    this.sourceType = "mediaNode";
    this.source = this.context.createMediaElementSource(a);
    this.connect();
    return this;
  }, setBuffer:function(a) {
    this.buffer = a;
    this.sourceType = "buffer";
    this.autoplay && this.play();
    return this;
  }, play:function() {
    if (!0 === this.isPlaying) {
      console.warn("THREE.Audio: Audio is already playing.");
    } else {
      if (!1 === this.hasPlaybackControl) {
        console.warn("THREE.Audio: this Audio has no playback control.");
      } else {
        var a = this.context.createBufferSource();
        a.buffer = this.buffer;
        a.loop = this.loop;
        a.onended = this.onEnded.bind(this);
        this.startTime = this.context.currentTime;
        a.start(this.startTime, this.offset);
        this.isPlaying = !0;
        this.source = a;
        this.setDetune(this.detune);
        this.setPlaybackRate(this.playbackRate);
        return this.connect();
      }
    }
  }, pause:function() {
    if (!1 === this.hasPlaybackControl) {
      console.warn("THREE.Audio: this Audio has no playback control.");
    } else {
      return !0 === this.isPlaying && (this.source.stop(), this.source.onended = null, this.offset += (this.context.currentTime - this.startTime) * this.playbackRate, this.isPlaying = !1), this;
    }
  }, stop:function() {
    if (!1 === this.hasPlaybackControl) {
      console.warn("THREE.Audio: this Audio has no playback control.");
    } else {
      return this.source.stop(), this.source.onended = null, this.offset = 0, this.isPlaying = !1, this;
    }
  }, connect:function() {
    if (0 < this.filters.length) {
      this.source.connect(this.filters[0]);
      for (var a = 1, b = this.filters.length; a < b; a++) {
        this.filters[a - 1].connect(this.filters[a]);
      }
      this.filters[this.filters.length - 1].connect(this.getOutput());
    } else {
      this.source.connect(this.getOutput());
    }
    return this;
  }, disconnect:function() {
    if (0 < this.filters.length) {
      this.source.disconnect(this.filters[0]);
      for (var a = 1, b = this.filters.length; a < b; a++) {
        this.filters[a - 1].disconnect(this.filters[a]);
      }
      this.filters[this.filters.length - 1].disconnect(this.getOutput());
    } else {
      this.source.disconnect(this.getOutput());
    }
    return this;
  }, getFilters:function() {
    return this.filters;
  }, setFilters:function(a) {
    a || (a = []);
    !0 === this.isPlaying ? (this.disconnect(), this.filters = a, this.connect()) : this.filters = a;
    return this;
  }, setDetune:function(a) {
    this.detune = a;
    if (void 0 !== this.source.detune) {
      return !0 === this.isPlaying && this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, .01), this;
    }
  }, getDetune:function() {
    return this.detune;
  }, getFilter:function() {
    return this.getFilters()[0];
  }, setFilter:function(a) {
    return this.setFilters(a ? [a] : []);
  }, setPlaybackRate:function(a) {
    if (!1 === this.hasPlaybackControl) {
      console.warn("THREE.Audio: this Audio has no playback control.");
    } else {
      return this.playbackRate = a, !0 === this.isPlaying && this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, .01), this;
    }
  }, getPlaybackRate:function() {
    return this.playbackRate;
  }, onEnded:function() {
    this.isPlaying = !1;
  }, getLoop:function() {
    return !1 === this.hasPlaybackControl ? (console.warn("THREE.Audio: this Audio has no playback control."), !1) : this.loop;
  }, setLoop:function(a) {
    if (!1 === this.hasPlaybackControl) {
      console.warn("THREE.Audio: this Audio has no playback control.");
    } else {
      return this.loop = a, !0 === this.isPlaying && (this.source.loop = this.loop), this;
    }
  }, getVolume:function() {
    return this.gain.gain.value;
  }, setVolume:function(a) {
    this.gain.gain.setTargetAtTime(a, this.context.currentTime, .01);
    return this;
  }});
  Ne.prototype = Object.assign(Object.create(Ec.prototype), {constructor:Ne, getOutput:function() {
    return this.panner;
  }, getRefDistance:function() {
    return this.panner.refDistance;
  }, setRefDistance:function(a) {
    this.panner.refDistance = a;
    return this;
  }, getRolloffFactor:function() {
    return this.panner.rolloffFactor;
  }, setRolloffFactor:function(a) {
    this.panner.rolloffFactor = a;
    return this;
  }, getDistanceModel:function() {
    return this.panner.distanceModel;
  }, setDistanceModel:function(a) {
    this.panner.distanceModel = a;
    return this;
  }, getMaxDistance:function() {
    return this.panner.maxDistance;
  }, setMaxDistance:function(a) {
    this.panner.maxDistance = a;
    return this;
  }, setDirectionalCone:function(a, b, e) {
    this.panner.coneInnerAngle = a;
    this.panner.coneOuterAngle = b;
    this.panner.coneOuterGain = e;
    return this;
  }, updateMatrixWorld:function() {
    var a = new d, b = new f, e = new d, c = new d;
    return function(g) {
      G.prototype.updateMatrixWorld.call(this, g);
      if (!0 !== this.hasPlaybackControl || !1 !== this.isPlaying) {
        if (this.matrixWorld.decompose(a, b, e), c.set(0, 0, 1).applyQuaternion(b), g = this.panner, g.positionX) {
          var d = this.context.currentTime + this.listener.timeDelta;
          g.positionX.linearRampToValueAtTime(a.x, d);
          g.positionY.linearRampToValueAtTime(a.y, d);
          g.positionZ.linearRampToValueAtTime(a.z, d);
          g.orientationX.linearRampToValueAtTime(c.x, d);
          g.orientationY.linearRampToValueAtTime(c.y, d);
          g.orientationZ.linearRampToValueAtTime(c.z, d);
        } else {
          g.setPosition(a.x, a.y, a.z), g.setOrientation(c.x, c.y, c.z);
        }
      }
    };
  }()});
  Object.assign(Oe.prototype, {getFrequencyData:function() {
    this.analyser.getByteFrequencyData(this.data);
    return this.data;
  }, getAverageFrequency:function() {
    for (var a = 0, b = this.getFrequencyData(), e = 0; e < b.length; e++) {
      a += b[e];
    }
    return a / b.length;
  }});
  Object.assign(Pe.prototype, {accumulate:function(a, b) {
    var e = this.buffer, g = this.valueSize;
    a = a * g + g;
    var c = this.cumulativeWeight;
    if (0 === c) {
      for (c = 0; c !== g; ++c) {
        e[a + c] = e[c];
      }
      c = b;
    } else {
      c += b, this._mixBufferRegion(e, a, 0, b / c, g);
    }
    this.cumulativeWeight = c;
  }, apply:function(a) {
    var b = this.valueSize, e = this.buffer;
    a = a * b + b;
    var g = this.cumulativeWeight, c = this.binding;
    this.cumulativeWeight = 0;
    1 > g && this._mixBufferRegion(e, a, 3 * b, 1 - g, b);
    g = b;
    for (var d = b + b; g !== d; ++g) {
      if (e[g] !== e[g + b]) {
        c.setValue(e, a);
        break;
      }
    }
  }, saveOriginalState:function() {
    var a = this.buffer, b = this.valueSize, e = 3 * b;
    this.binding.getValue(a, e);
    for (var c = b; c !== e; ++c) {
      a[c] = a[e + c % b];
    }
    this.cumulativeWeight = 0;
  }, restoreOriginalState:function() {
    this.binding.setValue(this.buffer, 3 * this.valueSize);
  }, _select:function(a, b, e, c, d) {
    if (.5 <= c) {
      for (c = 0; c !== d; ++c) {
        a[b + c] = a[e + c];
      }
    }
  }, _slerp:function(a, b, e, c) {
    f.slerpFlat(a, b, a, b, a, e, c);
  }, _lerp:function(a, b, e, c, d) {
    for (var g = 1 - c, l = 0; l !== d; ++l) {
      var f = b + l;
      a[f] = a[f] * g + a[e + l] * c;
    }
  }});
  Object.assign(Lf.prototype, {getValue:function(a, b) {
    this.bind();
    var e = this._bindings[this._targetGroup.nCachedObjects_];
    void 0 !== e && e.getValue(a, b);
  }, setValue:function(a, b) {
    for (var e = this._bindings, g = this._targetGroup.nCachedObjects_, c = e.length; g !== c; ++g) {
      e[g].setValue(a, b);
    }
  }, bind:function() {
    for (var a = this._bindings, b = this._targetGroup.nCachedObjects_, e = a.length; b !== e; ++b) {
      a[b].bind();
    }
  }, unbind:function() {
    for (var a = this._bindings, b = this._targetGroup.nCachedObjects_, e = a.length; b !== e; ++b) {
      a[b].unbind();
    }
  }});
  Object.assign(Fa, {Composite:Lf, create:function(a, b, e) {
    return a && a.isAnimationObjectGroup ? new Fa.Composite(a, b, e) : new Fa(a, b, e);
  }, sanitizeNodeName:function() {
    var a = /[\[\]\.:\/]/g;
    return function(b) {
      return b.replace(/\s/g, "_").replace(a, "");
    };
  }(), parseTrackName:function() {
    var a = "[^" + "\\[\\]\\.:\\/".replace("\\.", "") + "]", b = /((?:WC+[\/:])*)/.source.replace("WC", "[^\\[\\]\\.:\\/]");
    a = /(WCOD+)?/.source.replace("WCOD", a);
    var e = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", "[^\\[\\]\\.:\\/]"), c = /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", "[^\\[\\]\\.:\\/]"), d = new RegExp("^" + b + a + e + c + "$"), l = ["material", "materials", "bones"];
    return function(a) {
      var b = d.exec(a);
      if (!b) {
        throw Error("PropertyBinding: Cannot parse trackName: " + a);
      }
      b = {nodeName:b[2], objectName:b[3], objectIndex:b[4], propertyName:b[5], propertyIndex:b[6]};
      var e = b.nodeName && b.nodeName.lastIndexOf(".");
      if (void 0 !== e && -1 !== e) {
        var g = b.nodeName.substring(e + 1);
        -1 !== l.indexOf(g) && (b.nodeName = b.nodeName.substring(0, e), b.objectName = g);
      }
      if (null === b.propertyName || 0 === b.propertyName.length) {
        throw Error("PropertyBinding: can not parse propertyName from trackName: " + a);
      }
      return b;
    };
  }(), findNode:function(a, b) {
    if (!b || "" === b || "root" === b || "." === b || -1 === b || b === a.name || b === a.uuid) {
      return a;
    }
    if (a.skeleton) {
      var e = a.skeleton.getBoneByName(b);
      if (void 0 !== e) {
        return e;
      }
    }
    if (a.children) {
      var g = function(a) {
        for (var e = 0; e < a.length; e++) {
          var c = a[e];
          if (c.name === b || c.uuid === b || (c = g(c.children))) {
            return c;
          }
        }
        return null;
      };
      if (a = g(a.children)) {
        return a;
      }
    }
    return null;
  }});
  Object.assign(Fa.prototype, {_getValue_unavailable:function() {
  }, _setValue_unavailable:function() {
  }, BindingType:{Direct:0, EntireArray:1, ArrayElement:2, HasFromToArray:3}, Versioning:{None:0, NeedsUpdate:1, MatrixWorldNeedsUpdate:2}, GetterByBindingType:[function(a, b) {
    a[b] = this.node[this.propertyName];
  }, function(a, b) {
    for (var e = this.resolvedProperty, g = 0, c = e.length; g !== c; ++g) {
      a[b++] = e[g];
    }
  }, function(a, b) {
    a[b] = this.resolvedProperty[this.propertyIndex];
  }, function(a, b) {
    this.resolvedProperty.toArray(a, b);
  }], SetterByBindingTypeAndVersioning:[[function(a, b) {
    this.targetObject[this.propertyName] = a[b];
  }, function(a, b) {
    this.targetObject[this.propertyName] = a[b];
    this.targetObject.needsUpdate = !0;
  }, function(a, b) {
    this.targetObject[this.propertyName] = a[b];
    this.targetObject.matrixWorldNeedsUpdate = !0;
  }], [function(a, b) {
    for (var e = this.resolvedProperty, g = 0, c = e.length; g !== c; ++g) {
      e[g] = a[b++];
    }
  }, function(a, b) {
    for (var e = this.resolvedProperty, g = 0, c = e.length; g !== c; ++g) {
      e[g] = a[b++];
    }
    this.targetObject.needsUpdate = !0;
  }, function(a, b) {
    for (var e = this.resolvedProperty, g = 0, c = e.length; g !== c; ++g) {
      e[g] = a[b++];
    }
    this.targetObject.matrixWorldNeedsUpdate = !0;
  }], [function(a, b) {
    this.resolvedProperty[this.propertyIndex] = a[b];
  }, function(a, b) {
    this.resolvedProperty[this.propertyIndex] = a[b];
    this.targetObject.needsUpdate = !0;
  }, function(a, b) {
    this.resolvedProperty[this.propertyIndex] = a[b];
    this.targetObject.matrixWorldNeedsUpdate = !0;
  }], [function(a, b) {
    this.resolvedProperty.fromArray(a, b);
  }, function(a, b) {
    this.resolvedProperty.fromArray(a, b);
    this.targetObject.needsUpdate = !0;
  }, function(a, b) {
    this.resolvedProperty.fromArray(a, b);
    this.targetObject.matrixWorldNeedsUpdate = !0;
  }]], getValue:function(a, b) {
    this.bind();
    this.getValue(a, b);
  }, setValue:function(a, b) {
    this.bind();
    this.setValue(a, b);
  }, bind:function() {
    var a = this.node, b = this.parsedPath, e = b.objectName, c = b.propertyName, d = b.propertyIndex;
    a || (this.node = a = Fa.findNode(this.rootNode, b.nodeName) || this.rootNode);
    this.getValue = this._getValue_unavailable;
    this.setValue = this._setValue_unavailable;
    if (a) {
      if (e) {
        var l = b.objectIndex;
        switch(e) {
          case "materials":
            if (!a.material) {
              console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
              return;
            }
            if (!a.material.materials) {
              console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
              return;
            }
            a = a.material.materials;
            break;
          case "bones":
            if (!a.skeleton) {
              console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
              return;
            }
            a = a.skeleton.bones;
            for (e = 0; e < a.length; e++) {
              if (a[e].name === l) {
                l = e;
                break;
              }
            }
            break;
          default:
            if (void 0 === a[e]) {
              console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
              return;
            }
            a = a[e];
        }
        if (void 0 !== l) {
          if (void 0 === a[l]) {
            console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, a);
            return;
          }
          a = a[l];
        }
      }
      l = a[c];
      if (void 0 === l) {
        console.error("THREE.PropertyBinding: Trying to update property for track: " + b.nodeName + "." + c + " but it wasn't found.", a);
      } else {
        b = this.Versioning.None;
        this.targetObject = a;
        void 0 !== a.needsUpdate ? b = this.Versioning.NeedsUpdate : void 0 !== a.matrixWorldNeedsUpdate && (b = this.Versioning.MatrixWorldNeedsUpdate);
        e = this.BindingType.Direct;
        if (void 0 !== d) {
          if ("morphTargetInfluences" === c) {
            if (!a.geometry) {
              console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
              return;
            }
            if (a.geometry.isBufferGeometry) {
              if (!a.geometry.morphAttributes) {
                console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
                return;
              }
              for (e = 0; e < this.node.geometry.morphAttributes.position.length; e++) {
                if (a.geometry.morphAttributes.position[e].name === d) {
                  d = e;
                  break;
                }
              }
            } else {
              if (!a.geometry.morphTargets) {
                console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.", this);
                return;
              }
              for (e = 0; e < this.node.geometry.morphTargets.length; e++) {
                if (a.geometry.morphTargets[e].name === d) {
                  d = e;
                  break;
                }
              }
            }
          }
          e = this.BindingType.ArrayElement;
          this.resolvedProperty = l;
          this.propertyIndex = d;
        } else {
          void 0 !== l.fromArray && void 0 !== l.toArray ? (e = this.BindingType.HasFromToArray, this.resolvedProperty = l) : Array.isArray(l) ? (e = this.BindingType.EntireArray, this.resolvedProperty = l) : this.propertyName = c;
        }
        this.getValue = this.GetterByBindingType[e];
        this.setValue = this.SetterByBindingTypeAndVersioning[e][b];
      }
    } else {
      console.error("THREE.PropertyBinding: Trying to update node for track: " + this.path + " but it wasn't found.");
    }
  }, unbind:function() {
    this.node = null;
    this.getValue = this._getValue_unbound;
    this.setValue = this._setValue_unbound;
  }});
  Object.assign(Fa.prototype, {_getValue_unbound:Fa.prototype.getValue, _setValue_unbound:Fa.prototype.setValue});
  Object.assign(Mf.prototype, {isAnimationObjectGroup:!0, add:function() {
    for (var a = this._objects, b = a.length, e = this.nCachedObjects_, c = this._indicesByUUID, d = this._paths, l = this._parsedPaths, f = this._bindings, h = f.length, p = void 0, k = 0, m = arguments.length; k !== m; ++k) {
      var n = arguments[k], t = n.uuid, u = c[t];
      if (void 0 === u) {
        u = b++;
        c[t] = u;
        a.push(n);
        t = 0;
        for (var q = h; t !== q; ++t) {
          f[t].push(new Fa(n, d[t], l[t]));
        }
      } else {
        if (u < e) {
          p = a[u];
          var v = --e;
          q = a[v];
          c[q.uuid] = u;
          a[u] = q;
          c[t] = v;
          a[v] = n;
          t = 0;
          for (q = h; t !== q; ++t) {
            var w = f[t], z = w[u];
            w[u] = w[v];
            void 0 === z && (z = new Fa(n, d[t], l[t]));
            w[v] = z;
          }
        } else {
          a[u] !== p && console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.");
        }
      }
    }
    this.nCachedObjects_ = e;
  }, remove:function() {
    for (var a = this._objects, b = this.nCachedObjects_, e = this._indicesByUUID, c = this._bindings, d = c.length, l = 0, f = arguments.length; l !== f; ++l) {
      var h = arguments[l], p = h.uuid, k = e[p];
      if (void 0 !== k && k >= b) {
        var m = b++, n = a[m];
        e[n.uuid] = k;
        a[k] = n;
        e[p] = m;
        a[m] = h;
        h = 0;
        for (p = d; h !== p; ++h) {
          n = c[h];
          var t = n[k];
          n[k] = n[m];
          n[m] = t;
        }
      }
    }
    this.nCachedObjects_ = b;
  }, uncache:function() {
    for (var a = this._objects, b = a.length, e = this.nCachedObjects_, c = this._indicesByUUID, d = this._bindings, l = d.length, f = 0, h = arguments.length; f !== h; ++f) {
      var p = arguments[f].uuid, k = c[p];
      if (void 0 !== k) {
        if (delete c[p], k < e) {
          p = --e;
          var m = a[p], n = --b, t = a[n];
          c[m.uuid] = k;
          a[k] = m;
          c[t.uuid] = p;
          a[p] = t;
          a.pop();
          m = 0;
          for (t = l; m !== t; ++m) {
            var u = d[m], q = u[n];
            u[k] = u[p];
            u[p] = q;
            u.pop();
          }
        } else {
          for (n = --b, t = a[n], c[t.uuid] = k, a[k] = t, a.pop(), m = 0, t = l; m !== t; ++m) {
            u = d[m], u[k] = u[n], u.pop();
          }
        }
      }
    }
    this.nCachedObjects_ = e;
  }, subscribe_:function(a, b) {
    var e = this._bindingsIndicesByPath, g = e[a], c = this._bindings;
    if (void 0 !== g) {
      return c[g];
    }
    var d = this._paths, l = this._parsedPaths, f = this._objects, h = this.nCachedObjects_, p = Array(f.length);
    g = c.length;
    e[a] = g;
    d.push(a);
    l.push(b);
    c.push(p);
    e = h;
    for (g = f.length; e !== g; ++e) {
      p[e] = new Fa(f[e], a, b);
    }
    return p;
  }, unsubscribe_:function(a) {
    var b = this._bindingsIndicesByPath, e = b[a];
    if (void 0 !== e) {
      var g = this._paths, c = this._parsedPaths, d = this._bindings, l = d.length - 1, f = d[l];
      b[a[l]] = e;
      d[e] = f;
      d.pop();
      c[e] = c[l];
      c.pop();
      g[e] = g[l];
      g.pop();
    }
  }});
  Object.assign(Nf.prototype, {play:function() {
    this._mixer._activateAction(this);
    return this;
  }, stop:function() {
    this._mixer._deactivateAction(this);
    return this.reset();
  }, reset:function() {
    this.paused = !1;
    this.enabled = !0;
    this.time = 0;
    this._loopCount = -1;
    this._startTime = null;
    return this.stopFading().stopWarping();
  }, isRunning:function() {
    return this.enabled && !this.paused && 0 !== this.timeScale && null === this._startTime && this._mixer._isActiveAction(this);
  }, isScheduled:function() {
    return this._mixer._isActiveAction(this);
  }, startAt:function(a) {
    this._startTime = a;
    return this;
  }, setLoop:function(a, b) {
    this.loop = a;
    this.repetitions = b;
    return this;
  }, setEffectiveWeight:function(a) {
    this.weight = a;
    this._effectiveWeight = this.enabled ? a : 0;
    return this.stopFading();
  }, getEffectiveWeight:function() {
    return this._effectiveWeight;
  }, fadeIn:function(a) {
    return this._scheduleFading(a, 0, 1);
  }, fadeOut:function(a) {
    return this._scheduleFading(a, 1, 0);
  }, crossFadeFrom:function(a, b, e) {
    a.fadeOut(b);
    this.fadeIn(b);
    if (e) {
      e = this._clip.duration;
      var g = a._clip.duration, c = e / g;
      a.warp(1, g / e, b);
      this.warp(c, 1, b);
    }
    return this;
  }, crossFadeTo:function(a, b, e) {
    return a.crossFadeFrom(this, b, e);
  }, stopFading:function() {
    var a = this._weightInterpolant;
    null !== a && (this._weightInterpolant = null, this._mixer._takeBackControlInterpolant(a));
    return this;
  }, setEffectiveTimeScale:function(a) {
    this.timeScale = a;
    this._effectiveTimeScale = this.paused ? 0 : a;
    return this.stopWarping();
  }, getEffectiveTimeScale:function() {
    return this._effectiveTimeScale;
  }, setDuration:function(a) {
    this.timeScale = this._clip.duration / a;
    return this.stopWarping();
  }, syncWith:function(a) {
    this.time = a.time;
    this.timeScale = a.timeScale;
    return this.stopWarping();
  }, halt:function(a) {
    return this.warp(this._effectiveTimeScale, 0, a);
  }, warp:function(a, b, e) {
    var g = this._mixer, c = g.time, d = this._timeScaleInterpolant, l = this.timeScale;
    null === d && (this._timeScaleInterpolant = d = g._lendControlInterpolant());
    g = d.parameterPositions;
    d = d.sampleValues;
    g[0] = c;
    g[1] = c + e;
    d[0] = a / l;
    d[1] = b / l;
    return this;
  }, stopWarping:function() {
    var a = this._timeScaleInterpolant;
    null !== a && (this._timeScaleInterpolant = null, this._mixer._takeBackControlInterpolant(a));
    return this;
  }, getMixer:function() {
    return this._mixer;
  }, getClip:function() {
    return this._clip;
  }, getRoot:function() {
    return this._localRoot || this._mixer._root;
  }, _update:function(a, b, e, c) {
    if (this.enabled) {
      var g = this._startTime;
      if (null !== g) {
        b = (a - g) * e;
        if (0 > b || 0 === e) {
          return;
        }
        this._startTime = null;
        b *= e;
      }
      b *= this._updateTimeScale(a);
      e = this._updateTime(b);
      a = this._updateWeight(a);
      if (0 < a) {
        b = this._interpolants;
        g = this._propertyBindings;
        for (var d = 0, l = b.length; d !== l; ++d) {
          b[d].evaluate(e), g[d].accumulate(c, a);
        }
      }
    } else {
      this._updateWeight(a);
    }
  }, _updateWeight:function(a) {
    var b = 0;
    if (this.enabled) {
      b = this.weight;
      var e = this._weightInterpolant;
      if (null !== e) {
        var g = e.evaluate(a)[0];
        b *= g;
        a > e.parameterPositions[1] && (this.stopFading(), 0 === g && (this.enabled = !1));
      }
    }
    return this._effectiveWeight = b;
  }, _updateTimeScale:function(a) {
    var b = 0;
    if (!this.paused) {
      b = this.timeScale;
      var e = this._timeScaleInterpolant;
      if (null !== e) {
        var g = e.evaluate(a)[0];
        b *= g;
        a > e.parameterPositions[1] && (this.stopWarping(), 0 === b ? this.paused = !0 : this.timeScale = b);
      }
    }
    return this._effectiveTimeScale = b;
  }, _updateTime:function(a) {
    var b = this.time + a, e = this._clip.duration, g = this.loop, c = this._loopCount, d = 2202 === g;
    if (0 === a) {
      return -1 === c ? b : d && 1 === (c & 1) ? e - b : b;
    }
    if (2200 === g) {
      a: {
        if (-1 === c && (this._loopCount = 0, this._setEndings(!0, !0, !1)), b >= e) {
          b = e;
        } else {
          if (0 > b) {
            b = 0;
          } else {
            break a;
          }
        }
        this.clampWhenFinished ? this.paused = !0 : this.enabled = !1;
        this._mixer.dispatchEvent({type:"finished", action:this, direction:0 > a ? -1 : 1});
      }
    } else {
      -1 === c && (0 <= a ? (c = 0, this._setEndings(!0, 0 === this.repetitions, d)) : this._setEndings(0 === this.repetitions, !0, d));
      if (b >= e || 0 > b) {
        g = Math.floor(b / e);
        b -= e * g;
        c += Math.abs(g);
        var l = this.repetitions - c;
        0 >= l ? (this.clampWhenFinished ? this.paused = !0 : this.enabled = !1, b = 0 < a ? e : 0, this._mixer.dispatchEvent({type:"finished", action:this, direction:0 < a ? 1 : -1})) : (1 === l ? (a = 0 > a, this._setEndings(a, !a, d)) : this._setEndings(!1, !1, d), this._loopCount = c, this._mixer.dispatchEvent({type:"loop", action:this, loopDelta:g}));
      }
      if (d && 1 === (c & 1)) {
        return this.time = b, e - b;
      }
    }
    return this.time = b;
  }, _setEndings:function(a, b, e) {
    var g = this._interpolantSettings;
    e ? (g.endingStart = 2401, g.endingEnd = 2401) : (g.endingStart = a ? this.zeroSlopeAtStart ? 2401 : 2400 : 2402, g.endingEnd = b ? this.zeroSlopeAtEnd ? 2401 : 2400 : 2402);
  }, _scheduleFading:function(a, b, e) {
    var g = this._mixer, c = g.time, d = this._weightInterpolant;
    null === d && (this._weightInterpolant = d = g._lendControlInterpolant());
    g = d.parameterPositions;
    d = d.sampleValues;
    g[0] = c;
    d[0] = b;
    g[1] = c + a;
    d[1] = e;
    return this;
  }});
  Qe.prototype = Object.assign(Object.create(c.prototype), {constructor:Qe, _bindAction:function(a, b) {
    var e = a._localRoot || this._root, g = a._clip.tracks, c = g.length, d = a._propertyBindings;
    a = a._interpolants;
    var l = e.uuid, f = this._bindingsByRootAndName, h = f[l];
    void 0 === h && (h = {}, f[l] = h);
    for (f = 0; f !== c; ++f) {
      var p = g[f], k = p.name, m = h[k];
      if (void 0 === m) {
        m = d[f];
        if (void 0 !== m) {
          null === m._cacheIndex && (++m.referenceCount, this._addInactiveBinding(m, l, k));
          continue;
        }
        m = new Pe(Fa.create(e, k, b && b._propertyBindings[f].binding.parsedPath), p.ValueTypeName, p.getValueSize());
        ++m.referenceCount;
        this._addInactiveBinding(m, l, k);
      }
      d[f] = m;
      a[f].resultBuffer = m.buffer;
    }
  }, _activateAction:function(a) {
    if (!this._isActiveAction(a)) {
      if (null === a._cacheIndex) {
        var b = (a._localRoot || this._root).uuid, e = a._clip.uuid, g = this._actionsByClip[e];
        this._bindAction(a, g && g.knownActions[0]);
        this._addInactiveAction(a, e, b);
      }
      b = a._propertyBindings;
      e = 0;
      for (g = b.length; e !== g; ++e) {
        var c = b[e];
        0 === c.useCount++ && (this._lendBinding(c), c.saveOriginalState());
      }
      this._lendAction(a);
    }
  }, _deactivateAction:function(a) {
    if (this._isActiveAction(a)) {
      for (var b = a._propertyBindings, e = 0, g = b.length; e !== g; ++e) {
        var c = b[e];
        0 === --c.useCount && (c.restoreOriginalState(), this._takeBackBinding(c));
      }
      this._takeBackAction(a);
    }
  }, _initMemoryManager:function() {
    this._actions = [];
    this._nActiveActions = 0;
    this._actionsByClip = {};
    this._bindings = [];
    this._nActiveBindings = 0;
    this._bindingsByRootAndName = {};
    this._controlInterpolants = [];
    this._nActiveControlInterpolants = 0;
    var a = this;
    this.stats = {actions:{get total() {
      return a._actions.length;
    }, get inUse() {
      return a._nActiveActions;
    }}, bindings:{get total() {
      return a._bindings.length;
    }, get inUse() {
      return a._nActiveBindings;
    }}, controlInterpolants:{get total() {
      return a._controlInterpolants.length;
    }, get inUse() {
      return a._nActiveControlInterpolants;
    }}};
  }, _isActiveAction:function(a) {
    a = a._cacheIndex;
    return null !== a && a < this._nActiveActions;
  }, _addInactiveAction:function(a, b, e) {
    var g = this._actions, c = this._actionsByClip, d = c[b];
    void 0 === d ? (d = {knownActions:[a], actionByRoot:{}}, a._byClipCacheIndex = 0, c[b] = d) : (b = d.knownActions, a._byClipCacheIndex = b.length, b.push(a));
    a._cacheIndex = g.length;
    g.push(a);
    d.actionByRoot[e] = a;
  }, _removeInactiveAction:function(a) {
    var b = this._actions, e = b[b.length - 1], g = a._cacheIndex;
    e._cacheIndex = g;
    b[g] = e;
    b.pop();
    a._cacheIndex = null;
    b = a._clip.uuid;
    e = this._actionsByClip;
    g = e[b];
    var c = g.knownActions, d = c[c.length - 1], l = a._byClipCacheIndex;
    d._byClipCacheIndex = l;
    c[l] = d;
    c.pop();
    a._byClipCacheIndex = null;
    delete g.actionByRoot[(a._localRoot || this._root).uuid];
    0 === c.length && delete e[b];
    this._removeInactiveBindingsForAction(a);
  }, _removeInactiveBindingsForAction:function(a) {
    a = a._propertyBindings;
    for (var b = 0, e = a.length; b !== e; ++b) {
      var g = a[b];
      0 === --g.referenceCount && this._removeInactiveBinding(g);
    }
  }, _lendAction:function(a) {
    var b = this._actions, e = a._cacheIndex, g = this._nActiveActions++, c = b[g];
    a._cacheIndex = g;
    b[g] = a;
    c._cacheIndex = e;
    b[e] = c;
  }, _takeBackAction:function(a) {
    var b = this._actions, e = a._cacheIndex, g = --this._nActiveActions, c = b[g];
    a._cacheIndex = g;
    b[g] = a;
    c._cacheIndex = e;
    b[e] = c;
  }, _addInactiveBinding:function(a, b, e) {
    var g = this._bindingsByRootAndName, c = g[b], d = this._bindings;
    void 0 === c && (c = {}, g[b] = c);
    c[e] = a;
    a._cacheIndex = d.length;
    d.push(a);
  }, _removeInactiveBinding:function(a) {
    var b = this._bindings, e = a.binding, g = e.rootNode.uuid;
    e = e.path;
    var c = this._bindingsByRootAndName, d = c[g], l = b[b.length - 1];
    a = a._cacheIndex;
    l._cacheIndex = a;
    b[a] = l;
    b.pop();
    delete d[e];
    a: {
      for (var f in d) {
        break a;
      }
      delete c[g];
    }
  }, _lendBinding:function(a) {
    var b = this._bindings, e = a._cacheIndex, g = this._nActiveBindings++, c = b[g];
    a._cacheIndex = g;
    b[g] = a;
    c._cacheIndex = e;
    b[e] = c;
  }, _takeBackBinding:function(a) {
    var b = this._bindings, e = a._cacheIndex, g = --this._nActiveBindings, c = b[g];
    a._cacheIndex = g;
    b[g] = a;
    c._cacheIndex = e;
    b[e] = c;
  }, _lendControlInterpolant:function() {
    var a = this._controlInterpolants, b = this._nActiveControlInterpolants++, e = a[b];
    void 0 === e && (e = new td(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer), e.__cacheIndex = b, a[b] = e);
    return e;
  }, _takeBackControlInterpolant:function(a) {
    var b = this._controlInterpolants, e = a.__cacheIndex, g = --this._nActiveControlInterpolants, c = b[g];
    a.__cacheIndex = g;
    b[g] = a;
    c.__cacheIndex = e;
    b[e] = c;
  }, _controlInterpolantsResultBuffer:new Float32Array(1), clipAction:function(a, b) {
    var e = b || this._root, g = e.uuid;
    e = "string" === typeof a ? Sa.findByName(e, a) : a;
    a = null !== e ? e.uuid : a;
    var c = this._actionsByClip[a], d = null;
    if (void 0 !== c) {
      d = c.actionByRoot[g];
      if (void 0 !== d) {
        return d;
      }
      d = c.knownActions[0];
      null === e && (e = d._clip);
    }
    if (null === e) {
      return null;
    }
    b = new Nf(this, e, b);
    this._bindAction(b, d);
    this._addInactiveAction(b, a, g);
    return b;
  }, existingAction:function(a, b) {
    var e = b || this._root;
    b = e.uuid;
    e = "string" === typeof a ? Sa.findByName(e, a) : a;
    a = this._actionsByClip[e ? e.uuid : a];
    return void 0 !== a ? a.actionByRoot[b] || null : null;
  }, stopAllAction:function() {
    for (var a = this._actions, b = this._nActiveActions, e = this._bindings, c = this._nActiveBindings, d = this._nActiveBindings = this._nActiveActions = 0; d !== b; ++d) {
      a[d].reset();
    }
    for (d = 0; d !== c; ++d) {
      e[d].useCount = 0;
    }
    return this;
  }, update:function(a) {
    a *= this.timeScale;
    for (var b = this._actions, e = this._nActiveActions, g = this.time += a, c = Math.sign(a), d = this._accuIndex ^= 1, l = 0; l !== e; ++l) {
      b[l]._update(g, a, c, d);
    }
    a = this._bindings;
    b = this._nActiveBindings;
    for (l = 0; l !== b; ++l) {
      a[l].apply(d);
    }
    return this;
  }, getRoot:function() {
    return this._root;
  }, uncacheClip:function(a) {
    var b = this._actions;
    a = a.uuid;
    var e = this._actionsByClip, g = e[a];
    if (void 0 !== g) {
      g = g.knownActions;
      for (var c = 0, d = g.length; c !== d; ++c) {
        var l = g[c];
        this._deactivateAction(l);
        var f = l._cacheIndex, h = b[b.length - 1];
        l._cacheIndex = null;
        l._byClipCacheIndex = null;
        h._cacheIndex = f;
        b[f] = h;
        b.pop();
        this._removeInactiveBindingsForAction(l);
      }
      delete e[a];
    }
  }, uncacheRoot:function(a) {
    a = a.uuid;
    var b = this._actionsByClip;
    for (g in b) {
      var e = b[g].actionByRoot[a];
      void 0 !== e && (this._deactivateAction(e), this._removeInactiveAction(e));
    }
    var g = this._bindingsByRootAndName[a];
    if (void 0 !== g) {
      for (var c in g) {
        a = g[c], a.restoreOriginalState(), this._removeInactiveBinding(a);
      }
    }
  }, uncacheAction:function(a, b) {
    a = this.existingAction(a, b);
    null !== a && (this._deactivateAction(a), this._removeInactiveAction(a));
  }});
  ie.prototype.clone = function() {
    return new ie(void 0 === this.value.clone ? this.value : this.value.clone());
  };
  Re.prototype = Object.assign(Object.create(O.prototype), {constructor:Re, isInstancedBufferGeometry:!0, copy:function(a) {
    O.prototype.copy.call(this, a);
    this.maxInstancedCount = a.maxInstancedCount;
    return this;
  }, clone:function() {
    return (new this.constructor).copy(this);
  }});
  Se.prototype = Object.assign(Object.create(Qb.prototype), {constructor:Se, isInstancedInterleavedBuffer:!0, copy:function(a) {
    Qb.prototype.copy.call(this, a);
    this.meshPerAttribute = a.meshPerAttribute;
    return this;
  }});
  Te.prototype = Object.assign(Object.create(K.prototype), {constructor:Te, isInstancedBufferAttribute:!0, copy:function(a) {
    K.prototype.copy.call(this, a);
    this.meshPerAttribute = a.meshPerAttribute;
    return this;
  }});
  Object.assign(Of.prototype, {linePrecision:1, set:function(a, b) {
    this.ray.set(a, b);
  }, setFromCamera:function(a, b) {
    b && b.isPerspectiveCamera ? (this.ray.origin.setFromMatrixPosition(b.matrixWorld), this.ray.direction.set(a.x, a.y, .5).unproject(b).sub(this.ray.origin).normalize()) : b && b.isOrthographicCamera ? (this.ray.origin.set(a.x, a.y, (b.near + b.far) / (b.near - b.far)).unproject(b), this.ray.direction.set(0, 0, -1).transformDirection(b.matrixWorld)) : console.error("THREE.Raycaster: Unsupported camera type.");
  }, intersectObject:function(a, b, e) {
    e = e || [];
    Ue(a, this, e, b);
    e.sort(Pf);
    return e;
  }, intersectObjects:function(a, b, e) {
    e = e || [];
    if (!1 === Array.isArray(a)) {
      return console.warn("THREE.Raycaster.intersectObjects: objects is not an Array."), e;
    }
    for (var g = 0, c = a.length; g < c; g++) {
      Ue(a[g], this, e, b);
    }
    e.sort(Pf);
    return e;
  }});
  Object.assign(Qf.prototype, {set:function(a, b, e) {
    this.radius = a;
    this.phi = b;
    this.theta = e;
    return this;
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(a) {
    this.radius = a.radius;
    this.phi = a.phi;
    this.theta = a.theta;
    return this;
  }, makeSafe:function() {
    this.phi = Math.max(1E-6, Math.min(Math.PI - 1E-6, this.phi));
    return this;
  }, setFromVector3:function(a) {
    return this.setFromCartesianCoords(a.x, a.y, a.z);
  }, setFromCartesianCoords:function(a, b, e) {
    this.radius = Math.sqrt(a * a + b * b + e * e);
    0 === this.radius ? this.phi = this.theta = 0 : (this.theta = Math.atan2(a, e), this.phi = Math.acos(ia.clamp(b / this.radius, -1, 1)));
    return this;
  }});
  Object.assign(Rf.prototype, {set:function(a, b, e) {
    this.radius = a;
    this.theta = b;
    this.y = e;
    return this;
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(a) {
    this.radius = a.radius;
    this.theta = a.theta;
    this.y = a.y;
    return this;
  }, setFromVector3:function(a) {
    return this.setFromCartesianCoords(a.x, a.y, a.z);
  }, setFromCartesianCoords:function(a, b, e) {
    this.radius = Math.sqrt(a * a + e * e);
    this.theta = Math.atan2(a, e);
    this.y = b;
    return this;
  }});
  Object.assign(Ve.prototype, {set:function(a, b) {
    this.min.copy(a);
    this.max.copy(b);
    return this;
  }, setFromPoints:function(a) {
    this.makeEmpty();
    for (var b = 0, e = a.length; b < e; b++) {
      this.expandByPoint(a[b]);
    }
    return this;
  }, setFromCenterAndSize:function() {
    var a = new k;
    return function(b, e) {
      e = a.copy(e).multiplyScalar(.5);
      this.min.copy(b).sub(e);
      this.max.copy(b).add(e);
      return this;
    };
  }(), clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(a) {
    this.min.copy(a.min);
    this.max.copy(a.max);
    return this;
  }, makeEmpty:function() {
    this.min.x = this.min.y = Infinity;
    this.max.x = this.max.y = -Infinity;
    return this;
  }, isEmpty:function() {
    return this.max.x < this.min.x || this.max.y < this.min.y;
  }, getCenter:function(a) {
    void 0 === a && (console.warn("THREE.Box2: .getCenter() target is now required"), a = new k);
    return this.isEmpty() ? a.set(0, 0) : a.addVectors(this.min, this.max).multiplyScalar(.5);
  }, getSize:function(a) {
    void 0 === a && (console.warn("THREE.Box2: .getSize() target is now required"), a = new k);
    return this.isEmpty() ? a.set(0, 0) : a.subVectors(this.max, this.min);
  }, expandByPoint:function(a) {
    this.min.min(a);
    this.max.max(a);
    return this;
  }, expandByVector:function(a) {
    this.min.sub(a);
    this.max.add(a);
    return this;
  }, expandByScalar:function(a) {
    this.min.addScalar(-a);
    this.max.addScalar(a);
    return this;
  }, containsPoint:function(a) {
    return a.x < this.min.x || a.x > this.max.x || a.y < this.min.y || a.y > this.max.y ? !1 : !0;
  }, containsBox:function(a) {
    return this.min.x <= a.min.x && a.max.x <= this.max.x && this.min.y <= a.min.y && a.max.y <= this.max.y;
  }, getParameter:function(a, b) {
    void 0 === b && (console.warn("THREE.Box2: .getParameter() target is now required"), b = new k);
    return b.set((a.x - this.min.x) / (this.max.x - this.min.x), (a.y - this.min.y) / (this.max.y - this.min.y));
  }, intersectsBox:function(a) {
    return a.max.x < this.min.x || a.min.x > this.max.x || a.max.y < this.min.y || a.min.y > this.max.y ? !1 : !0;
  }, clampPoint:function(a, b) {
    void 0 === b && (console.warn("THREE.Box2: .clampPoint() target is now required"), b = new k);
    return b.copy(a).clamp(this.min, this.max);
  }, distanceToPoint:function() {
    var a = new k;
    return function(b) {
      return a.copy(b).clamp(this.min, this.max).sub(b).length();
    };
  }(), intersect:function(a) {
    this.min.max(a.min);
    this.max.min(a.max);
    return this;
  }, union:function(a) {
    this.min.min(a.min);
    this.max.max(a.max);
    return this;
  }, translate:function(a) {
    this.min.add(a);
    this.max.add(a);
    return this;
  }, equals:function(a) {
    return a.min.equals(this.min) && a.max.equals(this.max);
  }});
  Object.assign(We.prototype, {set:function(a, b) {
    this.start.copy(a);
    this.end.copy(b);
    return this;
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(a) {
    this.start.copy(a.start);
    this.end.copy(a.end);
    return this;
  }, getCenter:function(a) {
    void 0 === a && (console.warn("THREE.Line3: .getCenter() target is now required"), a = new d);
    return a.addVectors(this.start, this.end).multiplyScalar(.5);
  }, delta:function(a) {
    void 0 === a && (console.warn("THREE.Line3: .delta() target is now required"), a = new d);
    return a.subVectors(this.end, this.start);
  }, distanceSq:function() {
    return this.start.distanceToSquared(this.end);
  }, distance:function() {
    return this.start.distanceTo(this.end);
  }, at:function(a, b) {
    void 0 === b && (console.warn("THREE.Line3: .at() target is now required"), b = new d);
    return this.delta(b).multiplyScalar(a).add(this.start);
  }, closestPointToPointParameter:function() {
    var a = new d, b = new d;
    return function(e, c) {
      a.subVectors(e, this.start);
      b.subVectors(this.end, this.start);
      e = b.dot(b);
      e = b.dot(a) / e;
      c && (e = ia.clamp(e, 0, 1));
      return e;
    };
  }(), closestPointToPoint:function(a, b, e) {
    a = this.closestPointToPointParameter(a, b);
    void 0 === e && (console.warn("THREE.Line3: .closestPointToPoint() target is now required"), e = new d);
    return this.delta(e).multiplyScalar(a).add(this.start);
  }, applyMatrix4:function(a) {
    this.start.applyMatrix4(a);
    this.end.applyMatrix4(a);
    return this;
  }, equals:function(a) {
    return a.start.equals(this.start) && a.end.equals(this.end);
  }});
  Bd.prototype = Object.create(G.prototype);
  Bd.prototype.constructor = Bd;
  Bd.prototype.isImmediateRenderObject = !0;
  Cd.prototype = Object.create(qa.prototype);
  Cd.prototype.constructor = Cd;
  Cd.prototype.update = function() {
    var a = new d, b = new d, e = new h;
    return function() {
      var c = ["a", "b", "c"];
      this.object.updateMatrixWorld(!0);
      e.getNormalMatrix(this.object.matrixWorld);
      var g = this.object.matrixWorld, d = this.geometry.attributes.position, l = this.object.geometry;
      if (l && l.isGeometry) {
        for (var f = l.vertices, h = l.faces, p = l = 0, k = h.length; p < k; p++) {
          for (var m = h[p], n = 0, t = m.vertexNormals.length; n < t; n++) {
            var u = m.vertexNormals[n];
            a.copy(f[m[c[n]]]).applyMatrix4(g);
            b.copy(u).applyMatrix3(e).normalize().multiplyScalar(this.size).add(a);
            d.setXYZ(l, a.x, a.y, a.z);
            l += 1;
            d.setXYZ(l, b.x, b.y, b.z);
            l += 1;
          }
        }
      } else {
        if (l && l.isBufferGeometry) {
          for (c = l.attributes.position, f = l.attributes.normal, n = l = 0, t = c.count; n < t; n++) {
            a.set(c.getX(n), c.getY(n), c.getZ(n)).applyMatrix4(g), b.set(f.getX(n), f.getY(n), f.getZ(n)), b.applyMatrix3(e).normalize().multiplyScalar(this.size).add(a), d.setXYZ(l, a.x, a.y, a.z), l += 1, d.setXYZ(l, b.x, b.y, b.z), l += 1;
          }
        }
      }
      d.needsUpdate = !0;
    };
  }();
  Fc.prototype = Object.create(G.prototype);
  Fc.prototype.constructor = Fc;
  Fc.prototype.dispose = function() {
    this.cone.geometry.dispose();
    this.cone.material.dispose();
  };
  Fc.prototype.update = function() {
    var a = new d;
    return function() {
      this.light.updateMatrixWorld();
      var b = this.light.distance ? this.light.distance : 1E3, e = b * Math.tan(this.light.angle);
      this.cone.scale.set(e, e, b);
      a.setFromMatrixPosition(this.light.target.matrixWorld);
      this.cone.lookAt(a);
      void 0 !== this.color ? this.cone.material.color.set(this.color) : this.cone.material.color.copy(this.light.color);
    };
  }();
  Gc.prototype = Object.create(qa.prototype);
  Gc.prototype.constructor = Gc;
  Gc.prototype.updateMatrixWorld = function() {
    var a = new d, e = new b, c = new b;
    return function(b) {
      var g = this.bones, d = this.geometry, l = d.getAttribute("position");
      c.getInverse(this.root.matrixWorld);
      for (var f = 0, h = 0; f < g.length; f++) {
        var p = g[f];
        p.parent && p.parent.isBone && (e.multiplyMatrices(c, p.matrixWorld), a.setFromMatrixPosition(e), l.setXYZ(h, a.x, a.y, a.z), e.multiplyMatrices(c, p.parent.matrixWorld), a.setFromMatrixPosition(e), l.setXYZ(h + 1, a.x, a.y, a.z), h += 2);
      }
      d.getAttribute("position").needsUpdate = !0;
      G.prototype.updateMatrixWorld.call(this, b);
    };
  }();
  Hc.prototype = Object.create(ca.prototype);
  Hc.prototype.constructor = Hc;
  Hc.prototype.dispose = function() {
    this.geometry.dispose();
    this.material.dispose();
  };
  Hc.prototype.update = function() {
    void 0 !== this.color ? this.material.color.set(this.color) : this.material.color.copy(this.light.color);
  };
  Ic.prototype = Object.create(wa.prototype);
  Ic.prototype.constructor = Ic;
  Ic.prototype.update = function() {
    this.scale.set(.5 * this.light.width, .5 * this.light.height, 1);
    if (void 0 !== this.color) {
      this.material.color.set(this.color), this.children[0].material.color.set(this.color);
    } else {
      this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);
      var a = this.material.color, b = Math.max(a.r, a.g, a.b);
      1 < b && a.multiplyScalar(1 / b);
      this.children[0].material.color.copy(this.material.color);
    }
  };
  Ic.prototype.dispose = function() {
    this.geometry.dispose();
    this.material.dispose();
    this.children[0].geometry.dispose();
    this.children[0].material.dispose();
  };
  Jc.prototype = Object.create(G.prototype);
  Jc.prototype.constructor = Jc;
  Jc.prototype.dispose = function() {
    this.children[0].geometry.dispose();
    this.children[0].material.dispose();
  };
  Jc.prototype.update = function() {
    var a = new d, b = new z, e = new z;
    return function() {
      var c = this.children[0];
      if (void 0 !== this.color) {
        this.material.color.set(this.color);
      } else {
        var g = c.geometry.getAttribute("color");
        b.copy(this.light.color);
        e.copy(this.light.groundColor);
        for (var d = 0, l = g.count; d < l; d++) {
          var f = d < l / 2 ? b : e;
          g.setXYZ(d, f.r, f.g, f.b);
        }
        g.needsUpdate = !0;
      }
      c.lookAt(a.setFromMatrixPosition(this.light.matrixWorld).negate());
    };
  }();
  Dd.prototype = Object.create(qa.prototype);
  Dd.prototype.constructor = Dd;
  je.prototype = Object.create(qa.prototype);
  je.prototype.constructor = je;
  Kc.prototype = Object.create(wa.prototype);
  Kc.prototype.constructor = Kc;
  Kc.prototype.update = function() {
    function a(a, b, c, g) {
      c = (b - a) / c;
      u.setXYZ(p, 0, 0, 0);
      k++;
      for (m = a; m < b; m += c) {
        n = p + k, u.setXYZ(n, Math.sin(m) * e, 0, Math.cos(m) * e), u.setXYZ(n + 1, Math.sin(Math.min(m + c, b)) * e, 0, Math.cos(Math.min(m + c, b)) * e), u.setXYZ(n + 2, 0, 0, 0), k += 3;
      }
      t.addGroup(p, k, g);
      p += k;
      k = 0;
    }
    var b = this.audio, e = this.range, c = this.divisionsInnerAngle, d = this.divisionsOuterAngle, l = ia.degToRad(b.panner.coneInnerAngle);
    b = ia.degToRad(b.panner.coneOuterAngle);
    var f = l / 2, h = b / 2, p = 0, k = 0, m, n, t = this.geometry, u = t.attributes.position;
    t.clearGroups();
    a(-h, -f, d, 0);
    a(-f, f, c, 1);
    a(f, h, d, 0);
    u.needsUpdate = !0;
    l === b && (this.material[0].visible = !1);
  };
  Kc.prototype.dispose = function() {
    this.geometry.dispose();
    this.material[0].dispose();
    this.material[1].dispose();
  };
  Ed.prototype = Object.create(qa.prototype);
  Ed.prototype.constructor = Ed;
  Ed.prototype.update = function() {
    var a = new d, b = new d, e = new h;
    return function() {
      this.object.updateMatrixWorld(!0);
      e.getNormalMatrix(this.object.matrixWorld);
      var c = this.object.matrixWorld, g = this.geometry.attributes.position, d = this.object.geometry, l = d.vertices;
      d = d.faces;
      for (var f = 0, h = 0, p = d.length; h < p; h++) {
        var k = d[h], m = k.normal;
        a.copy(l[k.a]).add(l[k.b]).add(l[k.c]).divideScalar(3).applyMatrix4(c);
        b.copy(m).applyMatrix3(e).normalize().multiplyScalar(this.size).add(a);
        g.setXYZ(f, a.x, a.y, a.z);
        f += 1;
        g.setXYZ(f, b.x, b.y, b.z);
        f += 1;
      }
      g.needsUpdate = !0;
    };
  }();
  Lc.prototype = Object.create(G.prototype);
  Lc.prototype.constructor = Lc;
  Lc.prototype.dispose = function() {
    this.lightPlane.geometry.dispose();
    this.lightPlane.material.dispose();
    this.targetLine.geometry.dispose();
    this.targetLine.material.dispose();
  };
  Lc.prototype.update = function() {
    var a = new d, b = new d, e = new d;
    return function() {
      a.setFromMatrixPosition(this.light.matrixWorld);
      b.setFromMatrixPosition(this.light.target.matrixWorld);
      e.subVectors(b, a);
      this.lightPlane.lookAt(b);
      void 0 !== this.color ? (this.lightPlane.material.color.set(this.color), this.targetLine.material.color.set(this.color)) : (this.lightPlane.material.color.copy(this.light.color), this.targetLine.material.color.copy(this.light.color));
      this.targetLine.lookAt(b);
      this.targetLine.scale.z = e.length();
    };
  }();
  Fd.prototype = Object.create(qa.prototype);
  Fd.prototype.constructor = Fd;
  Fd.prototype.update = function() {
    function a(a, g, d, f) {
      c.set(g, d, f).unproject(l);
      a = e[a];
      if (void 0 !== a) {
        for (g = b.getAttribute("position"), d = 0, f = a.length; d < f; d++) {
          g.setXYZ(a[d], c.x, c.y, c.z);
        }
      }
    }
    var b, e, c = new d, l = new ib;
    return function() {
      b = this.geometry;
      e = this.pointMap;
      l.projectionMatrix.copy(this.camera.projectionMatrix);
      a("c", 0, 0, -1);
      a("t", 0, 0, 1);
      a("n1", -1, -1, -1);
      a("n2", 1, -1, -1);
      a("n3", -1, 1, -1);
      a("n4", 1, 1, -1);
      a("f1", -1, -1, 1);
      a("f2", 1, -1, 1);
      a("f3", -1, 1, 1);
      a("f4", 1, 1, 1);
      a("u1", .7, 1.1, -1);
      a("u2", -.7, 1.1, -1);
      a("u3", 0, 2, -1);
      a("cf1", -1, 0, 1);
      a("cf2", 1, 0, 1);
      a("cf3", 0, -1, 1);
      a("cf4", 0, 1, 1);
      a("cn1", -1, 0, -1);
      a("cn2", 1, 0, -1);
      a("cn3", 0, -1, -1);
      a("cn4", 0, 1, -1);
      b.getAttribute("position").needsUpdate = !0;
    };
  }();
  yb.prototype = Object.create(qa.prototype);
  yb.prototype.constructor = yb;
  yb.prototype.update = function() {
    var a = new u;
    return function(b) {
      void 0 !== b && console.warn("THREE.BoxHelper: .update() has no longer arguments.");
      void 0 !== this.object && a.setFromObject(this.object);
      if (!a.isEmpty()) {
        b = a.min;
        var e = a.max, c = this.geometry.attributes.position, g = c.array;
        g[0] = e.x;
        g[1] = e.y;
        g[2] = e.z;
        g[3] = b.x;
        g[4] = e.y;
        g[5] = e.z;
        g[6] = b.x;
        g[7] = b.y;
        g[8] = e.z;
        g[9] = e.x;
        g[10] = b.y;
        g[11] = e.z;
        g[12] = e.x;
        g[13] = e.y;
        g[14] = b.z;
        g[15] = b.x;
        g[16] = e.y;
        g[17] = b.z;
        g[18] = b.x;
        g[19] = b.y;
        g[20] = b.z;
        g[21] = e.x;
        g[22] = b.y;
        g[23] = b.z;
        c.needsUpdate = !0;
        this.geometry.computeBoundingSphere();
      }
    };
  }();
  yb.prototype.setFromObject = function(a) {
    this.object = a;
    this.update();
    return this;
  };
  yb.prototype.copy = function(a) {
    qa.prototype.copy.call(this, a);
    this.object = a.object;
    return this;
  };
  yb.prototype.clone = function() {
    return (new this.constructor).copy(this);
  };
  Gd.prototype = Object.create(qa.prototype);
  Gd.prototype.constructor = Gd;
  Gd.prototype.updateMatrixWorld = function(a) {
    var b = this.box;
    b.isEmpty() || (b.getCenter(this.position), b.getSize(this.scale), this.scale.multiplyScalar(.5), G.prototype.updateMatrixWorld.call(this, a));
  };
  Hd.prototype = Object.create(wa.prototype);
  Hd.prototype.constructor = Hd;
  Hd.prototype.updateMatrixWorld = function(a) {
    var b = -this.plane.constant;
    1E-8 > Math.abs(b) && (b = 1E-8);
    this.scale.set(.5 * this.size, .5 * this.size, b);
    this.children[0].material.side = 0 > b ? 1 : 0;
    this.lookAt(this.plane.normal);
    G.prototype.updateMatrixWorld.call(this, a);
  };
  var ke, Xe;
  zb.prototype = Object.create(G.prototype);
  zb.prototype.constructor = zb;
  zb.prototype.setDirection = function() {
    var a = new d, b;
    return function(e) {
      .99999 < e.y ? this.quaternion.set(0, 0, 0, 1) : -.99999 > e.y ? this.quaternion.set(1, 0, 0, 0) : (a.set(e.z, 0, -e.x).normalize(), b = Math.acos(e.y), this.quaternion.setFromAxisAngle(a, b));
    };
  }();
  zb.prototype.setLength = function(a, b, e) {
    void 0 === b && (b = .2 * a);
    void 0 === e && (e = .2 * b);
    this.line.scale.set(1, Math.max(0, a - b), 1);
    this.line.updateMatrix();
    this.cone.scale.set(e, b, e);
    this.cone.position.y = a;
    this.cone.updateMatrix();
  };
  zb.prototype.setColor = function(a) {
    this.line.material.color.copy(a);
    this.cone.material.color.copy(a);
  };
  zb.prototype.copy = function(a) {
    G.prototype.copy.call(this, a, !1);
    this.line.copy(a.line);
    this.cone.copy(a.cone);
    return this;
  };
  zb.prototype.clone = function() {
    return (new this.constructor).copy(this);
  };
  Id.prototype = Object.create(qa.prototype);
  Id.prototype.constructor = Id;
  da.create = function(a, b) {
    console.log("THREE.Curve.create() has been deprecated");
    a.prototype = Object.create(da.prototype);
    a.prototype.constructor = a;
    a.prototype.getPoint = b;
    return a;
  };
  Object.assign(xb.prototype, {createPointsGeometry:function(a) {
    console.warn("THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
    a = this.getPoints(a);
    return this.createGeometry(a);
  }, createSpacedPointsGeometry:function(a) {
    console.warn("THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
    a = this.getSpacedPoints(a);
    return this.createGeometry(a);
  }, createGeometry:function(a) {
    console.warn("THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
    for (var b = new H, e = 0, c = a.length; e < c; e++) {
      var g = a[e];
      b.vertices.push(new d(g.x, g.y, g.z || 0));
    }
    return b;
  }});
  Object.assign(cb.prototype, {fromPoints:function(a) {
    console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints().");
    this.setFromPoints(a);
  }});
  Tf.prototype = Object.create(Ea.prototype);
  Uf.prototype = Object.create(Ea.prototype);
  Ye.prototype = Object.create(Ea.prototype);
  Object.assign(Ye.prototype, {initFromArray:function() {
    console.error("THREE.Spline: .initFromArray() has been removed.");
  }, getControlPointsArray:function() {
    console.error("THREE.Spline: .getControlPointsArray() has been removed.");
  }, reparametrizeByArcLength:function() {
    console.error("THREE.Spline: .reparametrizeByArcLength() has been removed.");
  }});
  Dd.prototype.setColors = function() {
    console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.");
  };
  Gc.prototype.update = function() {
    console.error("THREE.SkeletonHelper: update() no longer needs to be called.");
  };
  Object.assign(zd.prototype, {extractUrlBase:function(a) {
    console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.");
    return cf.extractUrlBase(a);
  }});
  Object.assign(Fe.prototype, {setTexturePath:function(a) {
    console.warn("THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().");
    return this.setResourcePath(a);
  }});
  Object.assign(Ve.prototype, {center:function(a) {
    console.warn("THREE.Box2: .center() has been renamed to .getCenter().");
    return this.getCenter(a);
  }, empty:function() {
    console.warn("THREE.Box2: .empty() has been renamed to .isEmpty().");
    return this.isEmpty();
  }, isIntersectionBox:function(a) {
    console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().");
    return this.intersectsBox(a);
  }, size:function(a) {
    console.warn("THREE.Box2: .size() has been renamed to .getSize().");
    return this.getSize(a);
  }});
  Object.assign(u.prototype, {center:function(a) {
    console.warn("THREE.Box3: .center() has been renamed to .getCenter().");
    return this.getCenter(a);
  }, empty:function() {
    console.warn("THREE.Box3: .empty() has been renamed to .isEmpty().");
    return this.isEmpty();
  }, isIntersectionBox:function(a) {
    console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().");
    return this.intersectsBox(a);
  }, isIntersectionSphere:function(a) {
    console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().");
    return this.intersectsSphere(a);
  }, size:function(a) {
    console.warn("THREE.Box3: .size() has been renamed to .getSize().");
    return this.getSize(a);
  }});
  We.prototype.center = function(a) {
    console.warn("THREE.Line3: .center() has been renamed to .getCenter().");
    return this.getCenter(a);
  };
  Object.assign(ia, {random16:function() {
    console.warn("THREE.Math: .random16() has been deprecated. Use Math.random() instead.");
    return Math.random();
  }, nearestPowerOfTwo:function(a) {
    console.warn("THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().");
    return ia.floorPowerOfTwo(a);
  }, nextPowerOfTwo:function(a) {
    console.warn("THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().");
    return ia.ceilPowerOfTwo(a);
  }});
  Object.assign(h.prototype, {flattenToArrayOffset:function(a, b) {
    console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");
    return this.toArray(a, b);
  }, multiplyVector3:function(a) {
    console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.");
    return a.applyMatrix3(this);
  }, multiplyVector3Array:function() {
    console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.");
  }, applyToBuffer:function(a) {
    console.warn("THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.");
    return this.applyToBufferAttribute(a);
  }, applyToVector3Array:function() {
    console.error("THREE.Matrix3: .applyToVector3Array() has been removed.");
  }});
  Object.assign(b.prototype, {extractPosition:function(a) {
    console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().");
    return this.copyPosition(a);
  }, flattenToArrayOffset:function(a, b) {
    console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");
    return this.toArray(a, b);
  }, getPosition:function() {
    var a;
    return function() {
      void 0 === a && (a = new d);
      console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.");
      return a.setFromMatrixColumn(this, 3);
    };
  }(), setRotationFromQuaternion:function(a) {
    console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().");
    return this.makeRotationFromQuaternion(a);
  }, multiplyToArray:function() {
    console.warn("THREE.Matrix4: .multiplyToArray() has been removed.");
  }, multiplyVector3:function(a) {
    console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.");
    return a.applyMatrix4(this);
  }, multiplyVector4:function(a) {
    console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.");
    return a.applyMatrix4(this);
  }, multiplyVector3Array:function() {
    console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.");
  }, rotateAxis:function(a) {
    console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.");
    a.transformDirection(this);
  }, crossVector:function(a) {
    console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.");
    return a.applyMatrix4(this);
  }, translate:function() {
    console.error("THREE.Matrix4: .translate() has been removed.");
  }, rotateX:function() {
    console.error("THREE.Matrix4: .rotateX() has been removed.");
  }, rotateY:function() {
    console.error("THREE.Matrix4: .rotateY() has been removed.");
  }, rotateZ:function() {
    console.error("THREE.Matrix4: .rotateZ() has been removed.");
  }, rotateByAxis:function() {
    console.error("THREE.Matrix4: .rotateByAxis() has been removed.");
  }, applyToBuffer:function(a) {
    console.warn("THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.");
    return this.applyToBufferAttribute(a);
  }, applyToVector3Array:function() {
    console.error("THREE.Matrix4: .applyToVector3Array() has been removed.");
  }, makeFrustum:function(a, b, e, c, d, l) {
    console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.");
    return this.makePerspective(a, b, c, e, d, l);
  }});
  y.prototype.isIntersectionLine = function(a) {
    console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().");
    return this.intersectsLine(a);
  };
  f.prototype.multiplyVector3 = function(a) {
    console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.");
    return a.applyQuaternion(this);
  };
  Object.assign(ba.prototype, {isIntersectionBox:function(a) {
    console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().");
    return this.intersectsBox(a);
  }, isIntersectionPlane:function(a) {
    console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().");
    return this.intersectsPlane(a);
  }, isIntersectionSphere:function(a) {
    console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().");
    return this.intersectsSphere(a);
  }});
  Object.assign(la.prototype, {area:function() {
    console.warn("THREE.Triangle: .area() has been renamed to .getArea().");
    return this.getArea();
  }, barycoordFromPoint:function(a, b) {
    console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().");
    return this.getBarycoord(a, b);
  }, midpoint:function(a) {
    console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint().");
    return this.getMidpoint(a);
  }, normal:function(a) {
    console.warn("THREE.Triangle: .normal() has been renamed to .getNormal().");
    return this.getNormal(a);
  }, plane:function(a) {
    console.warn("THREE.Triangle: .plane() has been renamed to .getPlane().");
    return this.getPlane(a);
  }});
  Object.assign(la, {barycoordFromPoint:function(a, b, e, c, d) {
    console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().");
    return la.getBarycoord(a, b, e, c, d);
  }, normal:function(a, b, e, c) {
    console.warn("THREE.Triangle: .normal() has been renamed to .getNormal().");
    return la.getNormal(a, b, e, c);
  }});
  Object.assign(Mb.prototype, {extractAllPoints:function(a) {
    console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.");
    return this.extractPoints(a);
  }, extrude:function(a) {
    console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.");
    return new Ub(this, a);
  }, makeGeometry:function(a) {
    console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.");
    return new Wb(this, a);
  }});
  Object.assign(k.prototype, {fromAttribute:function(a, b, e) {
    console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().");
    return this.fromBufferAttribute(a, b, e);
  }, distanceToManhattan:function(a) {
    console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().");
    return this.manhattanDistanceTo(a);
  }, lengthManhattan:function() {
    console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().");
    return this.manhattanLength();
  }});
  Object.assign(d.prototype, {setEulerFromRotationMatrix:function() {
    console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.");
  }, setEulerFromQuaternion:function() {
    console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.");
  }, getPositionFromMatrix:function(a) {
    console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().");
    return this.setFromMatrixPosition(a);
  }, getScaleFromMatrix:function(a) {
    console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().");
    return this.setFromMatrixScale(a);
  }, getColumnFromMatrix:function(a, b) {
    console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().");
    return this.setFromMatrixColumn(b, a);
  }, applyProjection:function(a) {
    console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.");
    return this.applyMatrix4(a);
  }, fromAttribute:function(a, b, e) {
    console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().");
    return this.fromBufferAttribute(a, b, e);
  }, distanceToManhattan:function(a) {
    console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().");
    return this.manhattanDistanceTo(a);
  }, lengthManhattan:function() {
    console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().");
    return this.manhattanLength();
  }});
  Object.assign(q.prototype, {fromAttribute:function(a, b, e) {
    console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().");
    return this.fromBufferAttribute(a, b, e);
  }, lengthManhattan:function() {
    console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().");
    return this.manhattanLength();
  }});
  Object.assign(H.prototype, {computeTangents:function() {
    console.error("THREE.Geometry: .computeTangents() has been removed.");
  }, computeLineDistances:function() {
    console.error("THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.");
  }});
  Object.assign(G.prototype, {getChildByName:function(a) {
    console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().");
    return this.getObjectByName(a);
  }, renderDepth:function() {
    console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.");
  }, translate:function(a, b) {
    console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.");
    return this.translateOnAxis(b, a);
  }, getWorldRotation:function() {
    console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.");
  }});
  Object.defineProperties(G.prototype, {eulerOrder:{get:function() {
    console.warn("THREE.Object3D: .eulerOrder is now .rotation.order.");
    return this.rotation.order;
  }, set:function(a) {
    console.warn("THREE.Object3D: .eulerOrder is now .rotation.order.");
    this.rotation.order = a;
  }}, useQuaternion:{get:function() {
    console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
  }, set:function() {
    console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
  }}});
  Object.defineProperties(Wc.prototype, {objects:{get:function() {
    console.warn("THREE.LOD: .objects has been renamed to .levels.");
    return this.levels;
  }}});
  Object.defineProperty(Qd.prototype, "useVertexTexture", {get:function() {
    console.warn("THREE.Skeleton: useVertexTexture has been removed.");
  }, set:function() {
    console.warn("THREE.Skeleton: useVertexTexture has been removed.");
  }});
  Xc.prototype.initBones = function() {
    console.error("THREE.SkinnedMesh: initBones() has been removed.");
  };
  Object.defineProperty(da.prototype, "__arcLengthDivisions", {get:function() {
    console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.");
    return this.arcLengthDivisions;
  }, set:function(a) {
    console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.");
    this.arcLengthDivisions = a;
  }});
  ra.prototype.setLens = function(a, b) {
    console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup.");
    void 0 !== b && (this.filmGauge = b);
    this.setFocalLength(a);
  };
  Object.defineProperties(va.prototype, {onlyShadow:{set:function() {
    console.warn("THREE.Light: .onlyShadow has been removed.");
  }}, shadowCameraFov:{set:function(a) {
    console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov.");
    this.shadow.camera.fov = a;
  }}, shadowCameraLeft:{set:function(a) {
    console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left.");
    this.shadow.camera.left = a;
  }}, shadowCameraRight:{set:function(a) {
    console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right.");
    this.shadow.camera.right = a;
  }}, shadowCameraTop:{set:function(a) {
    console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top.");
    this.shadow.camera.top = a;
  }}, shadowCameraBottom:{set:function(a) {
    console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.");
    this.shadow.camera.bottom = a;
  }}, shadowCameraNear:{set:function(a) {
    console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near.");
    this.shadow.camera.near = a;
  }}, shadowCameraFar:{set:function(a) {
    console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far.");
    this.shadow.camera.far = a;
  }}, shadowCameraVisible:{set:function() {
    console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.");
  }}, shadowBias:{set:function(a) {
    console.warn("THREE.Light: .shadowBias is now .shadow.bias.");
    this.shadow.bias = a;
  }}, shadowDarkness:{set:function() {
    console.warn("THREE.Light: .shadowDarkness has been removed.");
  }}, shadowMapWidth:{set:function(a) {
    console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.");
    this.shadow.mapSize.width = a;
  }}, shadowMapHeight:{set:function(a) {
    console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.");
    this.shadow.mapSize.height = a;
  }}});
  Object.defineProperties(K.prototype, {length:{get:function() {
    console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead.");
    return this.array.length;
  }}, copyIndicesArray:function() {
    console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.");
  }});
  Object.assign(O.prototype, {addIndex:function(a) {
    console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().");
    this.setIndex(a);
  }, addDrawCall:function(a, b, e) {
    void 0 !== e && console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.");
    console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup().");
    this.addGroup(a, b);
  }, clearDrawCalls:function() {
    console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().");
    this.clearGroups();
  }, computeTangents:function() {
    console.warn("THREE.BufferGeometry: .computeTangents() has been removed.");
  }, computeOffsets:function() {
    console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.");
  }});
  Object.defineProperties(O.prototype, {drawcalls:{get:function() {
    console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups.");
    return this.groups;
  }}, offsets:{get:function() {
    console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups.");
    return this.groups;
  }}});
  Object.assign(jb.prototype, {getArrays:function() {
    console.error("THREE.ExtrudeBufferGeometry: .getArrays() has been removed.");
  }, addShapeList:function() {
    console.error("THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.");
  }, addShape:function() {
    console.error("THREE.ExtrudeBufferGeometry: .addShape() has been removed.");
  }});
  Object.defineProperties(ie.prototype, {dynamic:{set:function() {
    console.warn("THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.");
  }}, onUpdate:{value:function() {
    console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.");
    return this;
  }}});
  Object.defineProperties(X.prototype, {wrapAround:{get:function() {
    console.warn("THREE.Material: .wrapAround has been removed.");
  }, set:function() {
    console.warn("THREE.Material: .wrapAround has been removed.");
  }}, overdraw:{get:function() {
    console.warn("THREE.Material: .overdraw has been removed.");
  }, set:function() {
    console.warn("THREE.Material: .overdraw has been removed.");
  }}, wrapRGB:{get:function() {
    console.warn("THREE.Material: .wrapRGB has been removed.");
    return new z;
  }}, shading:{get:function() {
    console.error("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead.");
  }, set:function(a) {
    console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead.");
    this.flatShading = 1 === a;
  }}});
  Object.defineProperties(Xa.prototype, {metal:{get:function() {
    console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.");
    return !1;
  }, set:function() {
    console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead");
  }}});
  Object.defineProperties(fa.prototype, {derivatives:{get:function() {
    console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.");
    return this.extensions.derivatives;
  }, set:function(a) {
    console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.");
    this.extensions.derivatives = a;
  }}});
  Object.assign(ve.prototype, {clearTarget:function(a, b, e, c) {
    console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.");
    this.setRenderTarget(a);
    this.clear(b, e, c);
  }, animate:function(a) {
    console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop().");
    this.setAnimationLoop(a);
  }, getCurrentRenderTarget:function() {
    console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().");
    return this.getRenderTarget();
  }, getMaxAnisotropy:function() {
    console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().");
    return this.capabilities.getMaxAnisotropy();
  }, getPrecision:function() {
    console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.");
    return this.capabilities.precision;
  }, resetGLState:function() {
    console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset().");
    return this.state.reset();
  }, supportsFloatTextures:function() {
    console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' ).");
    return this.extensions.get("OES_texture_float");
  }, supportsHalfFloatTextures:function() {
    console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' ).");
    return this.extensions.get("OES_texture_half_float");
  }, supportsStandardDerivatives:function() {
    console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' ).");
    return this.extensions.get("OES_standard_derivatives");
  }, supportsCompressedTextureS3TC:function() {
    console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' ).");
    return this.extensions.get("WEBGL_compressed_texture_s3tc");
  }, supportsCompressedTexturePVRTC:function() {
    console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' ).");
    return this.extensions.get("WEBGL_compressed_texture_pvrtc");
  }, supportsBlendMinMax:function() {
    console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' ).");
    return this.extensions.get("EXT_blend_minmax");
  }, supportsVertexTextures:function() {
    console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.");
    return this.capabilities.vertexTextures;
  }, supportsInstancedArrays:function() {
    console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' ).");
    return this.extensions.get("ANGLE_instanced_arrays");
  }, enableScissorTest:function(a) {
    console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().");
    this.setScissorTest(a);
  }, initMaterial:function() {
    console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.");
  }, addPrePlugin:function() {
    console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.");
  }, addPostPlugin:function() {
    console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.");
  }, updateShadowMap:function() {
    console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.");
  }, setFaceCulling:function() {
    console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.");
  }});
  Object.defineProperties(ve.prototype, {shadowMapEnabled:{get:function() {
    return this.shadowMap.enabled;
  }, set:function(a) {
    console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.");
    this.shadowMap.enabled = a;
  }}, shadowMapType:{get:function() {
    return this.shadowMap.type;
  }, set:function(a) {
    console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.");
    this.shadowMap.type = a;
  }}, shadowMapCullFace:{get:function() {
    console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.");
  }, set:function() {
    console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.");
  }}});
  Object.defineProperties(rf.prototype, {cullFace:{get:function() {
    console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.");
  }, set:function() {
    console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.");
  }}, renderReverseSided:{get:function() {
    console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.");
  }, set:function() {
    console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.");
  }}, renderSingleSided:{get:function() {
    console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.");
  }, set:function() {
    console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.");
  }}});
  Object.defineProperties(e.prototype, {activeCubeFace:{set:function() {
    console.warn("THREE.WebGLRenderTargetCube: .activeCubeFace has been removed. It is now the second parameter of WebGLRenderer.setRenderTarget().");
  }}, activeMipMapLevel:{set:function() {
    console.warn("THREE.WebGLRenderTargetCube: .activeMipMapLevel has been removed. It is now the third parameter of WebGLRenderer.setRenderTarget().");
  }}});
  Object.defineProperties(m.prototype, {wrapS:{get:function() {
    console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.");
    return this.texture.wrapS;
  }, set:function(a) {
    console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.");
    this.texture.wrapS = a;
  }}, wrapT:{get:function() {
    console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.");
    return this.texture.wrapT;
  }, set:function(a) {
    console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.");
    this.texture.wrapT = a;
  }}, magFilter:{get:function() {
    console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.");
    return this.texture.magFilter;
  }, set:function(a) {
    console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.");
    this.texture.magFilter = a;
  }}, minFilter:{get:function() {
    console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.");
    return this.texture.minFilter;
  }, set:function(a) {
    console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.");
    this.texture.minFilter = a;
  }}, anisotropy:{get:function() {
    console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.");
    return this.texture.anisotropy;
  }, set:function(a) {
    console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.");
    this.texture.anisotropy = a;
  }}, offset:{get:function() {
    console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset.");
    return this.texture.offset;
  }, set:function(a) {
    console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset.");
    this.texture.offset = a;
  }}, repeat:{get:function() {
    console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat.");
    return this.texture.repeat;
  }, set:function(a) {
    console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat.");
    this.texture.repeat = a;
  }}, format:{get:function() {
    console.warn("THREE.WebGLRenderTarget: .format is now .texture.format.");
    return this.texture.format;
  }, set:function(a) {
    console.warn("THREE.WebGLRenderTarget: .format is now .texture.format.");
    this.texture.format = a;
  }}, type:{get:function() {
    console.warn("THREE.WebGLRenderTarget: .type is now .texture.type.");
    return this.texture.type;
  }, set:function(a) {
    console.warn("THREE.WebGLRenderTarget: .type is now .texture.type.");
    this.texture.type = a;
  }}, generateMipmaps:{get:function() {
    console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.");
    return this.texture.generateMipmaps;
  }, set:function(a) {
    console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.");
    this.texture.generateMipmaps = a;
  }}});
  Object.defineProperties(wf.prototype, {standing:{set:function() {
    console.warn("THREE.WebVRManager: .standing has been removed.");
  }}, userHeight:{set:function() {
    console.warn("THREE.WebVRManager: .userHeight has been removed.");
  }}});
  Ec.prototype.load = function(a) {
    console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");
    var b = this;
    (new Je).load(a, function(a) {
      b.setBuffer(a);
    });
    return this;
  };
  Oe.prototype.getData = function() {
    console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData().");
    return this.getFrequencyData();
  };
  Ad.prototype.updateCubeMap = function(a, b) {
    console.warn("THREE.CubeCamera: .updateCubeMap() is now .update().");
    return this.update(a, b);
  };
  Nb.crossOrigin = void 0;
  Nb.loadTexture = function(a, b, e, c) {
    console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");
    var g = new Zd;
    g.setCrossOrigin(this.crossOrigin);
    a = g.load(a, e, void 0, c);
    b && (a.mapping = b);
    return a;
  };
  Nb.loadTextureCube = function(a, b, e, c) {
    console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");
    var g = new Ce;
    g.setCrossOrigin(this.crossOrigin);
    a = g.load(a, e, void 0, c);
    b && (a.mapping = b);
    return a;
  };
  Nb.loadCompressedTexture = function() {
    console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.");
  };
  Nb.loadCompressedTextureCube = function() {
    console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.");
  };
  a.WebGLMultisampleRenderTarget = t;
  a.WebGLRenderTargetCube = e;
  a.WebGLRenderTarget = m;
  a.WebGLRenderer = ve;
  a.ShaderLib = eb;
  a.UniformsLib = ea;
  a.UniformsUtils = Cg;
  a.ShaderChunk = na;
  a.FogExp2 = Nd;
  a.Fog = Od;
  a.Scene = Pd;
  a.Sprite = Vc;
  a.LOD = Wc;
  a.SkinnedMesh = Xc;
  a.Skeleton = Qd;
  a.Bone = we;
  a.Mesh = ca;
  a.LineSegments = qa;
  a.LineLoop = Rd;
  a.Line = wa;
  a.Points = mc;
  a.Group = kc;
  a.VideoTexture = xe;
  a.DataTexture = l;
  a.DataTexture2DArray = Ja;
  a.DataTexture3D = fb;
  a.CompressedTexture = nc;
  a.CubeTexture = ya;
  a.CanvasTexture = Yc;
  a.DepthTexture = Zc;
  a.Texture = n;
  a.AnimationLoader = Gf;
  a.CompressedTextureLoader = Hf;
  a.DataTextureLoader = Be;
  a.CubeTextureLoader = Ce;
  a.TextureLoader = Zd;
  a.ObjectLoader = Fe;
  a.MaterialLoader = he;
  a.BufferGeometryLoader = Ee;
  a.DefaultLoadingManager = La;
  a.LoadingManager = Ae;
  a.ImageLoader = vd;
  a.ImageBitmapLoader = Ge;
  a.FontLoader = Jf;
  a.FileLoader = Ya;
  a.Loader = zd;
  a.LoaderUtils = cf;
  a.Cache = gc;
  a.AudioLoader = Je;
  a.SpotLightShadow = ae;
  a.SpotLight = be;
  a.PointLight = ce;
  a.RectAreaLight = ge;
  a.HemisphereLight = $d;
  a.DirectionalLightShadow = de;
  a.DirectionalLight = ee;
  a.AmbientLight = fe;
  a.LightShadow = fc;
  a.Light = va;
  a.StereoCamera = Kf;
  a.PerspectiveCamera = ra;
  a.OrthographicCamera = yd;
  a.CubeCamera = Ad;
  a.ArrayCamera = Tc;
  a.Camera = ib;
  a.AudioListener = Le;
  a.PositionalAudio = Ne;
  a.AudioContext = Me;
  a.AudioAnalyser = Oe;
  a.Audio = Ec;
  a.VectorKeyframeTrack = Cc;
  a.StringKeyframeTrack = Yd;
  a.QuaternionKeyframeTrack = ud;
  a.NumberKeyframeTrack = Bc;
  a.ColorKeyframeTrack = Wd;
  a.BooleanKeyframeTrack = Vd;
  a.PropertyMixer = Pe;
  a.PropertyBinding = Fa;
  a.KeyframeTrack = Da;
  a.AnimationUtils = xa;
  a.AnimationObjectGroup = Mf;
  a.AnimationMixer = Qe;
  a.AnimationClip = Sa;
  a.Uniform = ie;
  a.InstancedBufferGeometry = Re;
  a.BufferGeometry = O;
  a.Geometry = H;
  a.InterleavedBufferAttribute = Uc;
  a.InstancedInterleavedBuffer = Se;
  a.InterleavedBuffer = Qb;
  a.InstancedBufferAttribute = Te;
  a.Face3 = D;
  a.Object3D = G;
  a.Raycaster = Of;
  a.Layers = B;
  a.EventDispatcher = c;
  a.Clock = Ke;
  a.QuaternionLinearInterpolant = Xd;
  a.LinearInterpolant = td;
  a.DiscreteInterpolant = Ud;
  a.CubicInterpolant = Td;
  a.Interpolant = Oa;
  a.Triangle = la;
  a.Math = ia;
  a.Spherical = Qf;
  a.Cylindrical = Rf;
  a.Plane = y;
  a.Frustum = x;
  a.Sphere = w;
  a.Ray = ba;
  a.Matrix4 = b;
  a.Matrix3 = h;
  a.Box3 = u;
  a.Box2 = Ve;
  a.Line3 = We;
  a.Euler = E;
  a.Vector4 = q;
  a.Vector3 = d;
  a.Vector2 = k;
  a.Quaternion = f;
  a.Color = z;
  a.ImmediateRenderObject = Bd;
  a.VertexNormalsHelper = Cd;
  a.SpotLightHelper = Fc;
  a.SkeletonHelper = Gc;
  a.PointLightHelper = Hc;
  a.RectAreaLightHelper = Ic;
  a.HemisphereLightHelper = Jc;
  a.GridHelper = Dd;
  a.PolarGridHelper = je;
  a.PositionalAudioHelper = Kc;
  a.FaceNormalsHelper = Ed;
  a.DirectionalLightHelper = Lc;
  a.CameraHelper = Fd;
  a.BoxHelper = yb;
  a.Box3Helper = Gd;
  a.PlaneHelper = Hd;
  a.ArrowHelper = zb;
  a.AxesHelper = Id;
  a.Shape = Mb;
  a.Path = cb;
  a.ShapePath = He;
  a.Font = Ie;
  a.CurvePath = xb;
  a.Curve = da;
  a.ImageUtils = Nb;
  a.ShapeUtils = vb;
  a.WebGLUtils = sf;
  a.WireframeGeometry = oc;
  a.ParametricGeometry = $c;
  a.ParametricBufferGeometry = pc;
  a.TetrahedronGeometry = bd;
  a.TetrahedronBufferGeometry = qc;
  a.OctahedronGeometry = cd;
  a.OctahedronBufferGeometry = Rb;
  a.IcosahedronGeometry = dd;
  a.IcosahedronBufferGeometry = rc;
  a.DodecahedronGeometry = ed;
  a.DodecahedronBufferGeometry = sc;
  a.PolyhedronGeometry = ad;
  a.PolyhedronBufferGeometry = Ka;
  a.TubeGeometry = fd;
  a.TubeBufferGeometry = Sb;
  a.TorusKnotGeometry = gd;
  a.TorusKnotBufferGeometry = tc;
  a.TorusGeometry = hd;
  a.TorusBufferGeometry = uc;
  a.TextGeometry = md;
  a.TextBufferGeometry = vc;
  a.SphereGeometry = nd;
  a.SphereBufferGeometry = Vb;
  a.RingGeometry = od;
  a.RingBufferGeometry = wc;
  a.PlaneGeometry = ha;
  a.PlaneBufferGeometry = ja;
  a.LatheGeometry = pd;
  a.LatheBufferGeometry = xc;
  a.ShapeGeometry = Wb;
  a.ShapeBufferGeometry = Xb;
  a.ExtrudeGeometry = Ub;
  a.ExtrudeBufferGeometry = jb;
  a.EdgesGeometry = yc;
  a.ConeGeometry = qd;
  a.ConeBufferGeometry = rd;
  a.CylinderGeometry = Yb;
  a.CylinderBufferGeometry = wb;
  a.CircleGeometry = sd;
  a.CircleBufferGeometry = zc;
  a.BoxGeometry = P;
  a.CubeGeometry = P;
  a.BoxBufferGeometry = ka;
  a.ShadowMaterial = Zb;
  a.SpriteMaterial = Lb;
  a.RawShaderMaterial = Ac;
  a.ShaderMaterial = fa;
  a.PointsMaterial = Wa;
  a.MeshPhysicalMaterial = $b;
  a.MeshStandardMaterial = kb;
  a.MeshPhongMaterial = Xa;
  a.MeshToonMaterial = ac;
  a.MeshNormalMaterial = bc;
  a.MeshLambertMaterial = cc;
  a.MeshDepthMaterial = Jb;
  a.MeshDistanceMaterial = Kb;
  a.MeshBasicMaterial = ma;
  a.MeshMatcapMaterial = dc;
  a.LineDashedMaterial = ec;
  a.LineBasicMaterial = pa;
  a.Material = X;
  a.Float64BufferAttribute = S;
  a.Float32BufferAttribute = N;
  a.Uint32BufferAttribute = V;
  a.Int32BufferAttribute = aa;
  a.Uint16BufferAttribute = Q;
  a.Int16BufferAttribute = J;
  a.Uint8ClampedBufferAttribute = R;
  a.Uint8BufferAttribute = L;
  a.Int8BufferAttribute = I;
  a.BufferAttribute = K;
  a.ArcCurve = Dc;
  a.CatmullRomCurve3 = Ea;
  a.CubicBezierCurve = Za;
  a.CubicBezierCurve3 = lb;
  a.EllipseCurve = Pa;
  a.LineCurve = Ma;
  a.LineCurve3 = $a;
  a.QuadraticBezierCurve = ab;
  a.QuadraticBezierCurve3 = mb;
  a.SplineCurve = bb;
  a.REVISION = "103dev";
  a.MOUSE = {LEFT:0, MIDDLE:1, RIGHT:2};
  a.CullFaceNone = 0;
  a.CullFaceBack = 1;
  a.CullFaceFront = 2;
  a.CullFaceFrontBack = 3;
  a.FrontFaceDirectionCW = 0;
  a.FrontFaceDirectionCCW = 1;
  a.BasicShadowMap = 0;
  a.PCFShadowMap = 1;
  a.PCFSoftShadowMap = 2;
  a.FrontSide = 0;
  a.BackSide = 1;
  a.DoubleSide = 2;
  a.FlatShading = 1;
  a.SmoothShading = 2;
  a.NoColors = 0;
  a.FaceColors = 1;
  a.VertexColors = 2;
  a.NoBlending = 0;
  a.NormalBlending = 1;
  a.AdditiveBlending = 2;
  a.SubtractiveBlending = 3;
  a.MultiplyBlending = 4;
  a.CustomBlending = 5;
  a.AddEquation = 100;
  a.SubtractEquation = 101;
  a.ReverseSubtractEquation = 102;
  a.MinEquation = 103;
  a.MaxEquation = 104;
  a.ZeroFactor = 200;
  a.OneFactor = 201;
  a.SrcColorFactor = 202;
  a.OneMinusSrcColorFactor = 203;
  a.SrcAlphaFactor = 204;
  a.OneMinusSrcAlphaFactor = 205;
  a.DstAlphaFactor = 206;
  a.OneMinusDstAlphaFactor = 207;
  a.DstColorFactor = 208;
  a.OneMinusDstColorFactor = 209;
  a.SrcAlphaSaturateFactor = 210;
  a.NeverDepth = 0;
  a.AlwaysDepth = 1;
  a.LessDepth = 2;
  a.LessEqualDepth = 3;
  a.EqualDepth = 4;
  a.GreaterEqualDepth = 5;
  a.GreaterDepth = 6;
  a.NotEqualDepth = 7;
  a.MultiplyOperation = 0;
  a.MixOperation = 1;
  a.AddOperation = 2;
  a.NoToneMapping = 0;
  a.LinearToneMapping = 1;
  a.ReinhardToneMapping = 2;
  a.Uncharted2ToneMapping = 3;
  a.CineonToneMapping = 4;
  a.ACESFilmicToneMapping = 5;
  a.UVMapping = 300;
  a.CubeReflectionMapping = 301;
  a.CubeRefractionMapping = 302;
  a.EquirectangularReflectionMapping = 303;
  a.EquirectangularRefractionMapping = 304;
  a.SphericalReflectionMapping = 305;
  a.CubeUVReflectionMapping = 306;
  a.CubeUVRefractionMapping = 307;
  a.RepeatWrapping = 1E3;
  a.ClampToEdgeWrapping = 1001;
  a.MirroredRepeatWrapping = 1002;
  a.NearestFilter = 1003;
  a.NearestMipMapNearestFilter = 1004;
  a.NearestMipMapLinearFilter = 1005;
  a.LinearFilter = 1006;
  a.LinearMipMapNearestFilter = 1007;
  a.LinearMipMapLinearFilter = 1008;
  a.UnsignedByteType = 1009;
  a.ByteType = 1010;
  a.ShortType = 1011;
  a.UnsignedShortType = 1012;
  a.IntType = 1013;
  a.UnsignedIntType = 1014;
  a.FloatType = 1015;
  a.HalfFloatType = 1016;
  a.UnsignedShort4444Type = 1017;
  a.UnsignedShort5551Type = 1018;
  a.UnsignedShort565Type = 1019;
  a.UnsignedInt248Type = 1020;
  a.AlphaFormat = 1021;
  a.RGBFormat = 1022;
  a.RGBAFormat = 1023;
  a.LuminanceFormat = 1024;
  a.LuminanceAlphaFormat = 1025;
  a.RGBEFormat = 1023;
  a.DepthFormat = 1026;
  a.DepthStencilFormat = 1027;
  a.RedFormat = 1028;
  a.RGB_S3TC_DXT1_Format = 33776;
  a.RGBA_S3TC_DXT1_Format = 33777;
  a.RGBA_S3TC_DXT3_Format = 33778;
  a.RGBA_S3TC_DXT5_Format = 33779;
  a.RGB_PVRTC_4BPPV1_Format = 35840;
  a.RGB_PVRTC_2BPPV1_Format = 35841;
  a.RGBA_PVRTC_4BPPV1_Format = 35842;
  a.RGBA_PVRTC_2BPPV1_Format = 35843;
  a.RGB_ETC1_Format = 36196;
  a.RGBA_ASTC_4x4_Format = 37808;
  a.RGBA_ASTC_5x4_Format = 37809;
  a.RGBA_ASTC_5x5_Format = 37810;
  a.RGBA_ASTC_6x5_Format = 37811;
  a.RGBA_ASTC_6x6_Format = 37812;
  a.RGBA_ASTC_8x5_Format = 37813;
  a.RGBA_ASTC_8x6_Format = 37814;
  a.RGBA_ASTC_8x8_Format = 37815;
  a.RGBA_ASTC_10x5_Format = 37816;
  a.RGBA_ASTC_10x6_Format = 37817;
  a.RGBA_ASTC_10x8_Format = 37818;
  a.RGBA_ASTC_10x10_Format = 37819;
  a.RGBA_ASTC_12x10_Format = 37820;
  a.RGBA_ASTC_12x12_Format = 37821;
  a.LoopOnce = 2200;
  a.LoopRepeat = 2201;
  a.LoopPingPong = 2202;
  a.InterpolateDiscrete = 2300;
  a.InterpolateLinear = 2301;
  a.InterpolateSmooth = 2302;
  a.ZeroCurvatureEnding = 2400;
  a.ZeroSlopeEnding = 2401;
  a.WrapAroundEnding = 2402;
  a.TrianglesDrawMode = 0;
  a.TriangleStripDrawMode = 1;
  a.TriangleFanDrawMode = 2;
  a.LinearEncoding = 3E3;
  a.sRGBEncoding = 3001;
  a.GammaEncoding = 3007;
  a.RGBEEncoding = 3002;
  a.LogLuvEncoding = 3003;
  a.RGBM7Encoding = 3004;
  a.RGBM16Encoding = 3005;
  a.RGBDEncoding = 3006;
  a.BasicDepthPacking = 3200;
  a.RGBADepthPacking = 3201;
  a.TangentSpaceNormalMap = 0;
  a.ObjectSpaceNormalMap = 1;
  a.Face4 = function(a, b, e, c, d, l, f) {
    console.warn("THREE.Face4 has been removed. A THREE.Face3 will be created instead.");
    return new D(a, b, e, d, l, f);
  };
  a.LineStrip = 0;
  a.LinePieces = 1;
  a.MeshFaceMaterial = function(a) {
    console.warn("THREE.MeshFaceMaterial has been removed. Use an Array instead.");
    return a;
  };
  a.MultiMaterial = function(a) {
    void 0 === a && (a = []);
    console.warn("THREE.MultiMaterial has been removed. Use an Array instead.");
    a.isMultiMaterial = !0;
    a.materials = a;
    a.clone = function() {
      return a.slice();
    };
    return a;
  };
  a.PointCloud = function(a, b) {
    console.warn("THREE.PointCloud has been renamed to THREE.Points.");
    return new mc(a, b);
  };
  a.Particle = function(a) {
    console.warn("THREE.Particle has been renamed to THREE.Sprite.");
    return new Vc(a);
  };
  a.ParticleSystem = function(a, b) {
    console.warn("THREE.ParticleSystem has been renamed to THREE.Points.");
    return new mc(a, b);
  };
  a.PointCloudMaterial = function(a) {
    console.warn("THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.");
    return new Wa(a);
  };
  a.ParticleBasicMaterial = function(a) {
    console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.");
    return new Wa(a);
  };
  a.ParticleSystemMaterial = function(a) {
    console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.");
    return new Wa(a);
  };
  a.Vertex = function(a, b, e) {
    console.warn("THREE.Vertex has been removed. Use THREE.Vector3 instead.");
    return new d(a, b, e);
  };
  a.DynamicBufferAttribute = function(a, b) {
    console.warn("THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.");
    return (new K(a, b)).setDynamic(!0);
  };
  a.Int8Attribute = function(a, b) {
    console.warn("THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.");
    return new I(a, b);
  };
  a.Uint8Attribute = function(a, b) {
    console.warn("THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.");
    return new L(a, b);
  };
  a.Uint8ClampedAttribute = function(a, b) {
    console.warn("THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.");
    return new R(a, b);
  };
  a.Int16Attribute = function(a, b) {
    console.warn("THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.");
    return new J(a, b);
  };
  a.Uint16Attribute = function(a, b) {
    console.warn("THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.");
    return new Q(a, b);
  };
  a.Int32Attribute = function(a, b) {
    console.warn("THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.");
    return new aa(a, b);
  };
  a.Uint32Attribute = function(a, b) {
    console.warn("THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.");
    return new V(a, b);
  };
  a.Float32Attribute = function(a, b) {
    console.warn("THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.");
    return new N(a, b);
  };
  a.Float64Attribute = function(a, b) {
    console.warn("THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.");
    return new S(a, b);
  };
  a.ClosedSplineCurve3 = Tf;
  a.SplineCurve3 = Uf;
  a.Spline = Ye;
  a.AxisHelper = function(a) {
    console.warn("THREE.AxisHelper has been renamed to THREE.AxesHelper.");
    return new Id(a);
  };
  a.BoundingBoxHelper = function(a, b) {
    console.warn("THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.");
    return new yb(a, b);
  };
  a.EdgesHelper = function(a, b) {
    console.warn("THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.");
    return new qa(new yc(a.geometry), new pa({color:void 0 !== b ? b : 16777215}));
  };
  a.WireframeHelper = function(a, b) {
    console.warn("THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.");
    return new qa(new oc(a.geometry), new pa({color:void 0 !== b ? b : 16777215}));
  };
  a.XHRLoader = function(a) {
    console.warn("THREE.XHRLoader has been renamed to THREE.FileLoader.");
    return new Ya(a);
  };
  a.BinaryTextureLoader = function(a) {
    console.warn("THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.");
    return new Be(a);
  };
  a.GeometryUtils = {merge:function(a, b, e) {
    console.warn("THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.");
    if (b.isMesh) {
      b.matrixAutoUpdate && b.updateMatrix();
      var c = b.matrix;
      b = b.geometry;
    }
    a.merge(b, c, e);
  }, center:function(a) {
    console.warn("THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.");
    return a.center();
  }};
  a.Projector = function() {
    console.error("THREE.Projector has been moved to /examples/js/renderers/Projector.js.");
    this.projectVector = function(a, b) {
      console.warn("THREE.Projector: .projectVector() is now vector.project().");
      a.project(b);
    };
    this.unprojectVector = function(a, b) {
      console.warn("THREE.Projector: .unprojectVector() is now vector.unproject().");
      a.unproject(b);
    };
    this.pickingRay = function() {
      console.error("THREE.Projector: .pickingRay() is now raycaster.setFromCamera().");
    };
  };
  a.CanvasRenderer = function() {
    console.error("THREE.CanvasRenderer has been removed");
  };
  a.JSONLoader = function() {
    console.error("THREE.JSONLoader has been removed.");
  };
  a.SceneUtils = {createMultiMaterialObject:function() {
    console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js");
  }, detach:function() {
    console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js");
  }, attach:function() {
    console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js");
  }};
  a.LensFlare = function() {
    console.error("THREE.LensFlare has been moved to /examples/js/objects/Lensflare.js");
  };
  Object.defineProperty(a, "__esModule", {value:!0});
});
(function() {
  function a() {
    this.tolerance = -1;
    this.faces = [];
    this.newFaces = [];
    this.assigned = new f;
    this.unassigned = new f;
    this.vertices = [];
  }
  function c() {
    this.normal = new THREE.Vector3;
    this.midpoint = new THREE.Vector3;
    this.constant = this.area = 0;
    this.outside = null;
    this.mark = 0;
    this.edge = null;
  }
  function k(a, b) {
    this.vertex = a;
    this.twin = this.next = this.prev = null;
    this.face = b;
  }
  function b(a) {
    this.point = a;
    this.face = this.next = this.prev = null;
  }
  function f() {
    this.tail = this.head = null;
  }
  Object.assign(a.prototype, {setFromPoints:function(a) {
    !0 !== Array.isArray(a) && console.error("THREE.QuickHull: Points parameter is not an array.");
    4 > a.length && console.error("THREE.QuickHull: The algorithm needs at least four points.");
    this.makeEmpty();
    for (var c = 0, d = a.length; c < d; c++) {
      this.vertices.push(new b(a[c]));
    }
    this.compute();
    return this;
  }, setFromObject:function(a) {
    var b = [];
    a.updateMatrixWorld(!0);
    a.traverse(function(a) {
      var c;
      var d = a.geometry;
      if (void 0 !== d) {
        if (d.isGeometry) {
          var f = d.vertices;
          d = 0;
          for (c = f.length; d < c; d++) {
            var e = f[d].clone();
            e.applyMatrix4(a.matrixWorld);
            b.push(e);
          }
        } else {
          if (d.isBufferGeometry && (f = d.attributes.position, void 0 !== f)) {
            for (d = 0, c = f.count; d < c; d++) {
              e = new THREE.Vector3, e.fromBufferAttribute(f, d).applyMatrix4(a.matrixWorld), b.push(e);
            }
          }
        }
      }
    });
    return this.setFromPoints(b);
  }, makeEmpty:function() {
    this.faces = [];
    this.vertices = [];
    return this;
  }, addVertexToFace:function(a, b) {
    a.face = b;
    null === b.outside ? this.assigned.append(a) : this.assigned.insertBefore(b.outside, a);
    b.outside = a;
    return this;
  }, removeVertexFromFace:function(a, b) {
    a === b.outside && (b.outside = null !== a.next && a.next.face === b ? a.next : null);
    this.assigned.remove(a);
    return this;
  }, removeAllVerticesFromFace:function(a) {
    if (null !== a.outside) {
      for (var b = a.outside, c = a.outside; null !== c.next && c.next.face === a;) {
        c = c.next;
      }
      this.assigned.removeSubList(b, c);
      b.prev = c.next = null;
      a.outside = null;
      return b;
    }
  }, deleteFaceVertices:function(a, b) {
    a = this.removeAllVerticesFromFace(a);
    if (void 0 !== a) {
      if (void 0 === b) {
        this.unassigned.appendChain(a);
      } else {
        do {
          var c = a.next;
          b.distanceToPoint(a.point) > this.tolerance ? this.addVertexToFace(a, b) : this.unassigned.append(a);
          a = c;
        } while (null !== a);
      }
    }
    return this;
  }, resolveUnassignedPoints:function(a) {
    if (!1 === this.unassigned.isEmpty()) {
      var b = this.unassigned.first();
      do {
        for (var c = b.next, d = this.tolerance, f = null, k = 0; k < a.length; k++) {
          var e = a[k];
          if (0 === e.mark) {
            var l = e.distanceToPoint(b.point);
            l > d && (d = l, f = e);
            if (d > 1E3 * this.tolerance) {
              break;
            }
          }
        }
        null !== f && this.addVertexToFace(b, f);
        b = c;
      } while (null !== b);
    }
    return this;
  }, computeExtremes:function() {
    var a = new THREE.Vector3, b = new THREE.Vector3, c = [], f = [], k, t, e;
    for (k = 0; 3 > k; k++) {
      c[k] = f[k] = this.vertices[0];
    }
    a.copy(this.vertices[0].point);
    b.copy(this.vertices[0].point);
    k = 0;
    for (t = this.vertices.length; k < t; k++) {
      var l = this.vertices[k], u = l.point;
      for (e = 0; 3 > e; e++) {
        u.getComponent(e) < a.getComponent(e) && (a.setComponent(e, u.getComponent(e)), c[e] = l);
      }
      for (e = 0; 3 > e; e++) {
        u.getComponent(e) > b.getComponent(e) && (b.setComponent(e, u.getComponent(e)), f[e] = l);
      }
    }
    this.tolerance = 3 * Number.EPSILON * (Math.max(Math.abs(a.x), Math.abs(b.x)) + Math.max(Math.abs(a.y), Math.abs(b.y)) + Math.max(Math.abs(a.z), Math.abs(b.z)));
    return {min:c, max:f};
  }, computeInitialHull:function() {
    var a, b, f;
    return function() {
      void 0 === a && (a = new THREE.Line3, b = new THREE.Plane, f = new THREE.Vector3);
      var d = this.vertices, h = this.computeExtremes(), k = h.min, e = h.max, l, n, w = 0;
      for (h = n = 0; 3 > h; h++) {
        var y = e[h].point.getComponent(h) - k[h].point.getComponent(h);
        y > w && (w = y, n = h);
      }
      k = k[n];
      e = e[n];
      w = 0;
      a.set(k.point, e.point);
      h = 0;
      for (l = this.vertices.length; h < l; h++) {
        var x = d[h];
        if (x !== k && x !== e && (a.closestPointToPoint(x.point, !0, f), y = f.distanceToSquared(x.point), y > w)) {
          w = y;
          var p = x;
        }
      }
      w = -1;
      b.setFromCoplanarPoints(k.point, e.point, p.point);
      h = 0;
      for (l = this.vertices.length; h < l; h++) {
        if (x = d[h], x !== k && x !== e && x !== p && (y = Math.abs(b.distanceToPoint(x.point)), y > w)) {
          w = y;
          var v = x;
        }
      }
      y = [];
      if (0 > b.distanceToPoint(v.point)) {
        for (y.push(c.create(k, e, p), c.create(v, e, k), c.create(v, p, e), c.create(v, k, p)), h = 0; 3 > h; h++) {
          n = (h + 1) % 3, y[h + 1].getEdge(2).setTwin(y[0].getEdge(n)), y[h + 1].getEdge(1).setTwin(y[n + 1].getEdge(0));
        }
      } else {
        for (y.push(c.create(k, p, e), c.create(v, k, e), c.create(v, e, p), c.create(v, p, k)), h = 0; 3 > h; h++) {
          n = (h + 1) % 3, y[h + 1].getEdge(2).setTwin(y[0].getEdge((3 - h) % 3)), y[h + 1].getEdge(0).setTwin(y[n + 1].getEdge(1));
        }
      }
      for (h = 0; 4 > h; h++) {
        this.faces.push(y[h]);
      }
      h = 0;
      for (l = d.length; h < l; h++) {
        if (x = d[h], x !== k && x !== e && x !== p && x !== v) {
          w = this.tolerance;
          var z = null;
          for (n = 0; 4 > n; n++) {
            y = this.faces[n].distanceToPoint(x.point), y > w && (w = y, z = this.faces[n]);
          }
          null !== z && this.addVertexToFace(x, z);
        }
      }
      return this;
    };
  }(), reindexFaces:function() {
    for (var a = [], b = 0; b < this.faces.length; b++) {
      var c = this.faces[b];
      0 === c.mark && a.push(c);
    }
    this.faces = a;
    return this;
  }, nextVertexToAdd:function() {
    if (!1 === this.assigned.isEmpty()) {
      var a = 0, b = this.assigned.first().face, c = b.outside;
      do {
        var f = b.distanceToPoint(c.point);
        if (f > a) {
          a = f;
          var k = c;
        }
        c = c.next;
      } while (null !== c && c.face === b);
      return k;
    }
  }, computeHorizon:function(a, b, c, f) {
    this.deleteFaceVertices(c);
    c.mark = 1;
    c = null === b ? b = c.getEdge(0) : b.next;
    do {
      var d = c.twin, h = d.face;
      0 === h.mark && (h.distanceToPoint(a) > this.tolerance ? this.computeHorizon(a, d, h, f) : f.push(c));
      c = c.next;
    } while (c !== b);
    return this;
  }, addAdjoiningFace:function(a, b) {
    a = c.create(a, b.tail(), b.head());
    this.faces.push(a);
    a.getEdge(-1).setTwin(b.twin);
    return a.getEdge(0);
  }, addNewFaces:function(a, b) {
    this.newFaces = [];
    for (var c = null, d = null, f = 0; f < b.length; f++) {
      var h = this.addAdjoiningFace(a, b[f]);
      null === c ? c = h : h.next.setTwin(d);
      this.newFaces.push(h.face);
      d = h;
    }
    c.next.setTwin(d);
    return this;
  }, addVertexToHull:function(a) {
    var b = [];
    this.unassigned.clear();
    this.removeVertexFromFace(a, a.face);
    this.computeHorizon(a.point, null, a.face, b);
    this.addNewFaces(a, b);
    this.resolveUnassignedPoints(this.newFaces);
    return this;
  }, cleanup:function() {
    this.assigned.clear();
    this.unassigned.clear();
    this.newFaces = [];
    return this;
  }, compute:function() {
    var a;
    for (this.computeInitialHull(); void 0 !== (a = this.nextVertexToAdd());) {
      this.addVertexToHull(a);
    }
    this.reindexFaces();
    this.cleanup();
    return this;
  }});
  Object.assign(c, {create:function(a, b, f) {
    var d = new c;
    a = new k(a, d);
    b = new k(b, d);
    f = new k(f, d);
    a.next = f.prev = b;
    b.next = a.prev = f;
    f.next = b.prev = a;
    d.edge = a;
    return d.compute();
  }});
  Object.assign(c.prototype, {getEdge:function(a) {
    for (var b = this.edge; 0 < a;) {
      b = b.next, a--;
    }
    for (; 0 > a;) {
      b = b.prev, a++;
    }
    return b;
  }, compute:function() {
    var a;
    return function() {
      void 0 === a && (a = new THREE.Triangle);
      var b = this.edge.tail(), c = this.edge.head(), d = this.edge.next.head();
      a.set(b.point, c.point, d.point);
      a.getNormal(this.normal);
      a.getMidpoint(this.midpoint);
      this.area = a.getArea();
      this.constant = this.normal.dot(this.midpoint);
      return this;
    };
  }(), distanceToPoint:function(a) {
    return this.normal.dot(a) - this.constant;
  }});
  Object.assign(k.prototype, {head:function() {
    return this.vertex;
  }, tail:function() {
    return this.prev ? this.prev.vertex : null;
  }, length:function() {
    var a = this.head(), b = this.tail();
    return null !== b ? b.point.distanceTo(a.point) : -1;
  }, lengthSquared:function() {
    var a = this.head(), b = this.tail();
    return null !== b ? b.point.distanceToSquared(a.point) : -1;
  }, setTwin:function(a) {
    this.twin = a;
    a.twin = this;
    return this;
  }});
  Object.assign(f.prototype, {first:function() {
    return this.head;
  }, last:function() {
    return this.tail;
  }, clear:function() {
    this.head = this.tail = null;
    return this;
  }, insertBefore:function(a, b) {
    b.prev = a.prev;
    b.next = a;
    null === b.prev ? this.head = b : b.prev.next = b;
    a.prev = b;
    return this;
  }, insertAfter:function(a, b) {
    b.prev = a;
    b.next = a.next;
    null === b.next ? this.tail = b : b.next.prev = b;
    a.next = b;
    return this;
  }, append:function(a) {
    null === this.head ? this.head = a : this.tail.next = a;
    a.prev = this.tail;
    a.next = null;
    this.tail = a;
    return this;
  }, appendChain:function(a) {
    null === this.head ? this.head = a : this.tail.next = a;
    for (a.prev = this.tail; null !== a.next;) {
      a = a.next;
    }
    this.tail = a;
    return this;
  }, remove:function(a) {
    null === a.prev ? this.head = a.next : a.prev.next = a.next;
    null === a.next ? this.tail = a.prev : a.next.prev = a.prev;
    return this;
  }, removeSubList:function(a, b) {
    null === a.prev ? this.head = b.next : a.prev.next = b.next;
    null === b.next ? this.tail = a.prev : b.next.prev = a.prev;
    return this;
  }, isEmpty:function() {
    return null === this.head;
  }});
  THREE.QuickHull = a;
})();
var SimplexNoise = function(a) {
  void 0 == a && (a = Math);
  this.grad3 = [[1, 1, 0], [-1, 1, 0], [1, -1, 0], [-1, -1, 0], [1, 0, 1], [-1, 0, 1], [1, 0, -1], [-1, 0, -1], [0, 1, 1], [0, -1, 1], [0, 1, -1], [0, -1, -1]];
  this.grad4 = [[0, 1, 1, 1], [0, 1, 1, -1], [0, 1, -1, 1], [0, 1, -1, -1], [0, -1, 1, 1], [0, -1, 1, -1], [0, -1, -1, 1], [0, -1, -1, -1], [1, 0, 1, 1], [1, 0, 1, -1], [1, 0, -1, 1], [1, 0, -1, -1], [-1, 0, 1, 1], [-1, 0, 1, -1], [-1, 0, -1, 1], [-1, 0, -1, -1], [1, 1, 0, 1], [1, 1, 0, -1], [1, -1, 0, 1], [1, -1, 0, -1], [-1, 1, 0, 1], [-1, 1, 0, -1], [-1, -1, 0, 1], [-1, -1, 0, -1], [1, 1, 1, 0], [1, 1, -1, 0], [1, -1, 1, 0], [1, -1, -1, 0], [-1, 1, 1, 0], [-1, 1, -1, 0], [-1, -1, 1, 0], [-1, -1, 
  -1, 0]];
  this.p = [];
  for (var c = 0; 256 > c; c++) {
    this.p[c] = Math.floor(256 * a.random());
  }
  this.perm = [];
  for (c = 0; 512 > c; c++) {
    this.perm[c] = this.p[c & 255];
  }
  this.simplex = [[0, 1, 2, 3], [0, 1, 3, 2], [0, 0, 0, 0], [0, 2, 3, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 2, 3, 0], [0, 2, 1, 3], [0, 0, 0, 0], [0, 3, 1, 2], [0, 3, 2, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 3, 2, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 2, 0, 3], [0, 0, 0, 0], [1, 3, 0, 2], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 3, 0, 1], [2, 3, 1, 0], [1, 0, 2, 3], [1, 0, 3, 2], [0, 0, 
  0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 0, 3, 1], [0, 0, 0, 0], [2, 1, 3, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 0, 1, 3], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [3, 0, 1, 2], [3, 0, 2, 1], [0, 0, 0, 0], [3, 1, 2, 0], [2, 1, 0, 3], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [3, 1, 0, 2], [0, 0, 0, 0], [3, 2, 0, 1], [3, 2, 1, 0]];
};
SimplexNoise.prototype.dot = function(a, c, k) {
  return a[0] * c + a[1] * k;
};
SimplexNoise.prototype.dot3 = function(a, c, k, b) {
  return a[0] * c + a[1] * k + a[2] * b;
};
SimplexNoise.prototype.dot4 = function(a, c, k, b, f) {
  return a[0] * c + a[1] * k + a[2] * b + a[3] * f;
};
SimplexNoise.prototype.noise = function(a, c) {
  var k = .5 * (a + c) * (Math.sqrt(3) - 1), b = Math.floor(a + k), f = Math.floor(c + k);
  k = (3 - Math.sqrt(3)) / 6;
  var d = (b + f) * k;
  a -= b - d;
  var h = c - (f - d);
  if (a > h) {
    var n = 1;
    var q = 0;
  } else {
    n = 0, q = 1;
  }
  d = a - n + k;
  var m = h - q + k;
  c = a - 1 + 2 * k;
  k = h - 1 + 2 * k;
  var t = b & 255, e = f & 255;
  b = this.perm[t + this.perm[e]] % 12;
  f = this.perm[t + n + this.perm[e + q]] % 12;
  n = this.perm[t + 1 + this.perm[e + 1]] % 12;
  q = .5 - a * a - h * h;
  0 > q ? a = 0 : (q *= q, a = q * q * this.dot(this.grad3[b], a, h));
  h = .5 - d * d - m * m;
  0 > h ? d = 0 : (h *= h, d = h * h * this.dot(this.grad3[f], d, m));
  m = .5 - c * c - k * k;
  0 > m ? c = 0 : (m *= m, c = m * m * this.dot(this.grad3[n], c, k));
  return 70 * (a + d + c);
};
SimplexNoise.prototype.noise3d = function(a, c, k) {
  var b = 1 / 3 * (a + c + k), f = Math.floor(a + b), d = Math.floor(c + b), h = Math.floor(k + b);
  b = 1 / 6;
  var n = (f + d + h) * b;
  var q = a - (f - n);
  var m = c - (d - n);
  var t = k - (h - n), e, l;
  if (q >= m) {
    if (m >= t) {
      var u = 1;
      var w = e = 0;
      var y = l = 1;
      var x = 0;
    } else {
      q >= t ? (u = 1, w = e = 0) : (e = u = 0, w = 1), l = 1, y = 0, x = 1;
    }
  } else {
    m < t ? (e = u = 0, w = 1, l = 0, x = y = 1) : q < t ? (u = 0, e = 1, l = w = 0, x = y = 1) : (u = 0, e = 1, w = 0, y = l = 1, x = 0);
  }
  var p = q - u + b, v = m - e + b, z = t - w + b;
  n = q - l + 2 * b;
  a = m - y + 2 * b;
  var C = t - x + 2 * b;
  k = q - 1 + 3 * b;
  c = m - 1 + 3 * b;
  b = t - 1 + 3 * b;
  f &= 255;
  var A = d & 255, D = h & 255;
  d = this.perm[f + this.perm[A + this.perm[D]]] % 12;
  h = this.perm[f + u + this.perm[A + e + this.perm[D + w]]] % 12;
  l = this.perm[f + l + this.perm[A + y + this.perm[D + x]]] % 12;
  f = this.perm[f + 1 + this.perm[A + 1 + this.perm[D + 1]]] % 12;
  y = .6 - q * q - m * m - t * t;
  0 > y ? q = 0 : (y *= y, q = y * y * this.dot3(this.grad3[d], q, m, t));
  m = .6 - p * p - v * v - z * z;
  0 > m ? m = 0 : (m *= m, m = m * m * this.dot3(this.grad3[h], p, v, z));
  p = .6 - n * n - a * a - C * C;
  0 > p ? n = 0 : (p *= p, n = p * p * this.dot3(this.grad3[l], n, a, C));
  a = .6 - k * k - c * c - b * b;
  0 > a ? k = 0 : (a *= a, k = a * a * this.dot3(this.grad3[f], k, c, b));
  return 32 * (q + m + n + k);
};
SimplexNoise.prototype.noise4d = function(a, c, k, b) {
  var f = this.grad4, d = this.simplex, h = this.perm, n = (5 - Math.sqrt(5)) / 20;
  var q = (Math.sqrt(5) - 1) / 4 * (a + c + k + b);
  var m = Math.floor(a + q), t = Math.floor(c + q), e = Math.floor(k + q), l = Math.floor(b + q);
  q = (m + t + e + l) * n;
  a -= m - q;
  var u = c - (t - q);
  var w = k - (e - q);
  var y = b - (l - q);
  b = (a > u ? 32 : 0) + (a > w ? 16 : 0) + (u > w ? 8 : 0) + (a > y ? 4 : 0) + (u > y ? 2 : 0) + (w > y ? 1 : 0);
  var x = 3 <= d[b][0] ? 1 : 0;
  var p = 3 <= d[b][1] ? 1 : 0;
  var v = 3 <= d[b][2] ? 1 : 0;
  var z = 3 <= d[b][3] ? 1 : 0;
  var C = 2 <= d[b][0] ? 1 : 0;
  var A = 2 <= d[b][1] ? 1 : 0;
  var D = 2 <= d[b][2] ? 1 : 0;
  var E = 2 <= d[b][3] ? 1 : 0;
  var B = 1 <= d[b][0] ? 1 : 0;
  var G = 1 <= d[b][1] ? 1 : 0;
  var H = 1 <= d[b][2] ? 1 : 0;
  var K = 1 <= d[b][3] ? 1 : 0;
  var I = a - x + n, L = u - p + n, R = w - v + n, J = y - z + n, Q = a - C + 2 * n, aa = u - A + 2 * n, V = w - D + 2 * n, N = y - E + 2 * n;
  q = a - B + 3 * n;
  c = u - G + 3 * n;
  var S = w - H + 3 * n, W = y - K + 3 * n;
  d = a - 1 + 4 * n;
  b = u - 1 + 4 * n;
  k = w - 1 + 4 * n;
  n = y - 1 + 4 * n;
  m &= 255;
  t &= 255;
  var M = e & 255;
  l &= 255;
  e = h[m + h[t + h[M + h[l]]]] % 32;
  x = h[m + x + h[t + p + h[M + v + h[l + z]]]] % 32;
  C = h[m + C + h[t + A + h[M + D + h[l + E]]]] % 32;
  B = h[m + B + h[t + G + h[M + H + h[l + K]]]] % 32;
  h = h[m + 1 + h[t + 1 + h[M + 1 + h[l + 1]]]] % 32;
  l = .6 - a * a - u * u - w * w - y * y;
  0 > l ? a = 0 : (l *= l, a = l * l * this.dot4(f[e], a, u, w, y));
  u = .6 - I * I - L * L - R * R - J * J;
  0 > u ? u = 0 : (u *= u, u = u * u * this.dot4(f[x], I, L, R, J));
  w = .6 - Q * Q - aa * aa - V * V - N * N;
  0 > w ? w = 0 : (w *= w, w = w * w * this.dot4(f[C], Q, aa, V, N));
  Q = .6 - q * q - c * c - S * S - W * W;
  0 > Q ? q = 0 : (Q *= Q, q = Q * Q * this.dot4(f[B], q, c, S, W));
  c = .6 - d * d - b * b - k * k - n * n;
  0 > c ? f = 0 : (c *= c, f = c * c * this.dot4(f[h], d, b, k, n));
  return 27 * (a + u + w + q + f);
};
THREE.CopyShader = {uniforms:{tDiffuse:{value:null}, opacity:{value:1}}, vertexShader:"varying vec2 vUv;\nvoid main() {\nvUv = uv;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"uniform float opacity;\nuniform sampler2D tDiffuse;\nvarying vec2 vUv;\nvoid main() {\nvec4 texel = texture2D( tDiffuse, vUv );\ngl_FragColor = opacity * texel;\n}"};
THREE.BokehShader = {defines:{DEPTH_PACKING:1, PERSPECTIVE_CAMERA:1}, uniforms:{tColor:{value:null}, tDepth:{value:null}, focus:{value:1}, aspect:{value:1}, aperture:{value:.025}, maxblur:{value:1}, nearClip:{value:1}, farClip:{value:1E3}}, vertexShader:"varying vec2 vUv;\nvoid main() {\nvUv = uv;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"#include <common>\nvarying vec2 vUv;\nuniform sampler2D tColor;\nuniform sampler2D tDepth;\nuniform float maxblur;\nuniform float aperture;\nuniform float nearClip;\nuniform float farClip;\nuniform float focus;\nuniform float aspect;\n#include <packing>\nfloat getDepth( const in vec2 screenPosition ) {\n\t#if DEPTH_PACKING == 1\n\treturn unpackRGBAToDepth( texture2D( tDepth, screenPosition ) );\n\t#else\n\treturn texture2D( tDepth, screenPosition ).x;\n\t#endif\n}\nfloat getViewZ( const in float depth ) {\n\t#if PERSPECTIVE_CAMERA == 1\n\treturn perspectiveDepthToViewZ( depth, nearClip, farClip );\n\t#else\n\treturn orthographicDepthToViewZ( depth, nearClip, farClip );\n\t#endif\n}\nvoid main() {\nvec2 aspectcorrect = vec2( 1.0, aspect );\nfloat viewZ = getViewZ( getDepth( vUv ) );\nfloat factor = ( focus + viewZ );\nvec2 dofblur = vec2 ( clamp( factor * aperture, -maxblur, maxblur ) );\nvec2 dofblur9 = dofblur * 0.9;\nvec2 dofblur7 = dofblur * 0.7;\nvec2 dofblur4 = dofblur * 0.4;\nvec4 col = vec4( 0.0 );\ncol += texture2D( tColor, vUv.xy );\ncol += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur );\ncol += texture2D( tColor, vUv.xy + ( vec2(  0.15,  0.37 ) * aspectcorrect ) * dofblur );\ncol += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur );\ncol += texture2D( tColor, vUv.xy + ( vec2( -0.37,  0.15 ) * aspectcorrect ) * dofblur );\ncol += texture2D( tColor, vUv.xy + ( vec2(  0.40,  0.0  ) * aspectcorrect ) * dofblur );\ncol += texture2D( tColor, vUv.xy + ( vec2(  0.37, -0.15 ) * aspectcorrect ) * dofblur );\ncol += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur );\ncol += texture2D( tColor, vUv.xy + ( vec2( -0.15, -0.37 ) * aspectcorrect ) * dofblur );\ncol += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur );\ncol += texture2D( tColor, vUv.xy + ( vec2( -0.15,  0.37 ) * aspectcorrect ) * dofblur );\ncol += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur );\ncol += texture2D( tColor, vUv.xy + ( vec2(  0.37,  0.15 ) * aspectcorrect ) * dofblur );\ncol += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur );\ncol += texture2D( tColor, vUv.xy + ( vec2( -0.37, -0.15 ) * aspectcorrect ) * dofblur );\ncol += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur );\ncol += texture2D( tColor, vUv.xy + ( vec2(  0.15, -0.37 ) * aspectcorrect ) * dofblur );\ncol += texture2D( tColor, vUv.xy + ( vec2(  0.15,  0.37 ) * aspectcorrect ) * dofblur9 );\ncol += texture2D( tColor, vUv.xy + ( vec2( -0.37,  0.15 ) * aspectcorrect ) * dofblur9 );\ncol += texture2D( tColor, vUv.xy + ( vec2(  0.37, -0.15 ) * aspectcorrect ) * dofblur9 );\ncol += texture2D( tColor, vUv.xy + ( vec2( -0.15, -0.37 ) * aspectcorrect ) * dofblur9 );\ncol += texture2D( tColor, vUv.xy + ( vec2( -0.15,  0.37 ) * aspectcorrect ) * dofblur9 );\ncol += texture2D( tColor, vUv.xy + ( vec2(  0.37,  0.15 ) * aspectcorrect ) * dofblur9 );\ncol += texture2D( tColor, vUv.xy + ( vec2( -0.37, -0.15 ) * aspectcorrect ) * dofblur9 );\ncol += texture2D( tColor, vUv.xy + ( vec2(  0.15, -0.37 ) * aspectcorrect ) * dofblur9 );\ncol += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur7 );\ncol += texture2D( tColor, vUv.xy + ( vec2(  0.40,  0.0  ) * aspectcorrect ) * dofblur7 );\ncol += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur7 );\ncol += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur7 );\ncol += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur7 );\ncol += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur7 );\ncol += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur7 );\ncol += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur7 );\ncol += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur4 );\ncol += texture2D( tColor, vUv.xy + ( vec2(  0.4,   0.0  ) * aspectcorrect ) * dofblur4 );\ncol += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur4 );\ncol += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur4 );\ncol += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur4 );\ncol += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur4 );\ncol += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur4 );\ncol += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur4 );\ngl_FragColor = col / 41.0;\ngl_FragColor.a = 1.0;\n}"};
THREE.SAOShader = {defines:{NUM_SAMPLES:7, NUM_RINGS:4, NORMAL_TEXTURE:0, DIFFUSE_TEXTURE:0, DEPTH_PACKING:1, PERSPECTIVE_CAMERA:1}, uniforms:{tDepth:{type:"t", value:null}, tDiffuse:{type:"t", value:null}, tNormal:{type:"t", value:null}, size:{type:"v2", value:new THREE.Vector2(512, 512)}, cameraNear:{type:"f", value:1}, cameraFar:{type:"f", value:100}, cameraProjectionMatrix:{type:"m4", value:new THREE.Matrix4}, cameraInverseProjectionMatrix:{type:"m4", value:new THREE.Matrix4}, scale:{type:"f", 
value:1}, intensity:{type:"f", value:.1}, bias:{type:"f", value:.5}, minResolution:{type:"f", value:0}, kernelRadius:{type:"f", value:100}, randomSeed:{type:"f", value:0}}, vertexShader:"varying vec2 vUv;\nvoid main() {\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"#include <common>\nvarying vec2 vUv;\n#if DIFFUSE_TEXTURE == 1\nuniform sampler2D tDiffuse;\n#endif\nuniform sampler2D tDepth;\n#if NORMAL_TEXTURE == 1\nuniform sampler2D tNormal;\n#endif\nuniform float cameraNear;\nuniform float cameraFar;\nuniform mat4 cameraProjectionMatrix;\nuniform mat4 cameraInverseProjectionMatrix;\nuniform float scale;\nuniform float intensity;\nuniform float bias;\nuniform float kernelRadius;\nuniform float minResolution;\nuniform vec2 size;\nuniform float randomSeed;\n// RGBA depth\n#include <packing>\nvec4 getDefaultColor( const in vec2 screenPosition ) {\n\t#if DIFFUSE_TEXTURE == 1\n\treturn texture2D( tDiffuse, vUv );\n\t#else\n\treturn vec4( 1.0 );\n\t#endif\n}\nfloat getDepth( const in vec2 screenPosition ) {\n\t#if DEPTH_PACKING == 1\n\treturn unpackRGBAToDepth( texture2D( tDepth, screenPosition ) );\n\t#else\n\treturn texture2D( tDepth, screenPosition ).x;\n\t#endif\n}\nfloat getViewZ( const in float depth ) {\n\t#if PERSPECTIVE_CAMERA == 1\n\treturn perspectiveDepthToViewZ( depth, cameraNear, cameraFar );\n\t#else\n\treturn orthographicDepthToViewZ( depth, cameraNear, cameraFar );\n\t#endif\n}\nvec3 getViewPosition( const in vec2 screenPosition, const in float depth, const in float viewZ ) {\n\tfloat clipW = cameraProjectionMatrix[2][3] * viewZ + cameraProjectionMatrix[3][3];\n\tvec4 clipPosition = vec4( ( vec3( screenPosition, depth ) - 0.5 ) * 2.0, 1.0 );\n\tclipPosition *= clipW; // unprojection.\n\treturn ( cameraInverseProjectionMatrix * clipPosition ).xyz;\n}\nvec3 getViewNormal( const in vec3 viewPosition, const in vec2 screenPosition ) {\n\t#if NORMAL_TEXTURE == 1\n\treturn unpackRGBToNormal( texture2D( tNormal, screenPosition ).xyz );\n\t#else\n\treturn normalize( cross( dFdx( viewPosition ), dFdy( viewPosition ) ) );\n\t#endif\n}\nfloat scaleDividedByCameraFar;\nfloat minResolutionMultipliedByCameraFar;\nfloat getOcclusion( const in vec3 centerViewPosition, const in vec3 centerViewNormal, const in vec3 sampleViewPosition ) {\n\tvec3 viewDelta = sampleViewPosition - centerViewPosition;\n\tfloat viewDistance = length( viewDelta );\n\tfloat scaledScreenDistance = scaleDividedByCameraFar * viewDistance;\n\treturn max(0.0, (dot(centerViewNormal, viewDelta) - minResolutionMultipliedByCameraFar) / scaledScreenDistance - bias) / (1.0 + pow2( scaledScreenDistance ) );\n}\n// moving costly divides into consts\nconst float ANGLE_STEP = PI2 * float( NUM_RINGS ) / float( NUM_SAMPLES );\nconst float INV_NUM_SAMPLES = 1.0 / float( NUM_SAMPLES );\nfloat getAmbientOcclusion( const in vec3 centerViewPosition ) {\n\t// precompute some variables require in getOcclusion.\n\tscaleDividedByCameraFar = scale / cameraFar;\n\tminResolutionMultipliedByCameraFar = minResolution * cameraFar;\n\tvec3 centerViewNormal = getViewNormal( centerViewPosition, vUv );\n\t// jsfiddle that shows sample pattern: https://jsfiddle.net/a16ff1p7/\n\tfloat angle = rand( vUv + randomSeed ) * PI2;\n\tvec2 radius = vec2( kernelRadius * INV_NUM_SAMPLES ) / size;\n\tvec2 radiusStep = radius;\n\tfloat occlusionSum = 0.0;\n\tfloat weightSum = 0.0;\n\tfor( int i = 0; i < NUM_SAMPLES; i ++ ) {\n\t\tvec2 sampleUv = vUv + vec2( cos( angle ), sin( angle ) ) * radius;\n\t\tradius += radiusStep;\n\t\tangle += ANGLE_STEP;\n\t\tfloat sampleDepth = getDepth( sampleUv );\n\t\tif( sampleDepth >= ( 1.0 - EPSILON ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\tfloat sampleViewZ = getViewZ( sampleDepth );\n\t\tvec3 sampleViewPosition = getViewPosition( sampleUv, sampleDepth, sampleViewZ );\n\t\tocclusionSum += getOcclusion( centerViewPosition, centerViewNormal, sampleViewPosition );\n\t\tweightSum += 1.0;\n\t}\n\tif( weightSum == 0.0 ) discard;\n\treturn occlusionSum * ( intensity / weightSum );\n}\nvoid main() {\n\tfloat centerDepth = getDepth( vUv );\n\tif( centerDepth >= ( 1.0 - EPSILON ) ) {\n\t\tdiscard;\n\t}\n\tfloat centerViewZ = getViewZ( centerDepth );\n\tvec3 viewPosition = getViewPosition( vUv, centerDepth, centerViewZ );\n\tfloat ambientOcclusion = getAmbientOcclusion( viewPosition );\n\tgl_FragColor = getDefaultColor( vUv );\n\tgl_FragColor.xyz *=  1.0 - ambientOcclusion;\n}"};
THREE.DepthLimitedBlurShader = {defines:{KERNEL_RADIUS:4, DEPTH_PACKING:1, PERSPECTIVE_CAMERA:1}, uniforms:{tDiffuse:{type:"t", value:null}, size:{type:"v2", value:new THREE.Vector2(512, 512)}, sampleUvOffsets:{type:"v2v", value:[new THREE.Vector2(0, 0)]}, sampleWeights:{type:"1fv", value:[1]}, tDepth:{type:"t", value:null}, cameraNear:{type:"f", value:10}, cameraFar:{type:"f", value:1E3}, depthCutoff:{type:"f", value:10}}, vertexShader:"#include <common>\nuniform vec2 size;\nvarying vec2 vUv;\nvarying vec2 vInvSize;\nvoid main() {\n\tvUv = uv;\n\tvInvSize = 1.0 / size;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", 
fragmentShader:"#include <common>\n#include <packing>\nuniform sampler2D tDiffuse;\nuniform sampler2D tDepth;\nuniform float cameraNear;\nuniform float cameraFar;\nuniform float depthCutoff;\nuniform vec2 sampleUvOffsets[ KERNEL_RADIUS + 1 ];\nuniform float sampleWeights[ KERNEL_RADIUS + 1 ];\nvarying vec2 vUv;\nvarying vec2 vInvSize;\nfloat getDepth( const in vec2 screenPosition ) {\n\t#if DEPTH_PACKING == 1\n\treturn unpackRGBAToDepth( texture2D( tDepth, screenPosition ) );\n\t#else\n\treturn texture2D( tDepth, screenPosition ).x;\n\t#endif\n}\nfloat getViewZ( const in float depth ) {\n\t#if PERSPECTIVE_CAMERA == 1\n\treturn perspectiveDepthToViewZ( depth, cameraNear, cameraFar );\n\t#else\n\treturn orthographicDepthToViewZ( depth, cameraNear, cameraFar );\n\t#endif\n}\nvoid main() {\n\tfloat depth = getDepth( vUv );\n\tif( depth >= ( 1.0 - EPSILON ) ) {\n\t\tdiscard;\n\t}\n\tfloat centerViewZ = -getViewZ( depth );\n\tbool rBreak = false, lBreak = false;\n\tfloat weightSum = sampleWeights[0];\n\tvec4 diffuseSum = texture2D( tDiffuse, vUv ) * weightSum;\n\tfor( int i = 1; i <= KERNEL_RADIUS; i ++ ) {\n\t\tfloat sampleWeight = sampleWeights[i];\n\t\tvec2 sampleUvOffset = sampleUvOffsets[i] * vInvSize;\n\t\tvec2 sampleUv = vUv + sampleUvOffset;\n\t\tfloat viewZ = -getViewZ( getDepth( sampleUv ) );\n\t\tif( abs( viewZ - centerViewZ ) > depthCutoff ) rBreak = true;\n\t\tif( ! rBreak ) {\n\t\t\tdiffuseSum += texture2D( tDiffuse, sampleUv ) * sampleWeight;\n\t\t\tweightSum += sampleWeight;\n\t\t}\n\t\tsampleUv = vUv - sampleUvOffset;\n\t\tviewZ = -getViewZ( getDepth( sampleUv ) );\n\t\tif( abs( viewZ - centerViewZ ) > depthCutoff ) lBreak = true;\n\t\tif( ! lBreak ) {\n\t\t\tdiffuseSum += texture2D( tDiffuse, sampleUv ) * sampleWeight;\n\t\t\tweightSum += sampleWeight;\n\t\t}\n\t}\n\tgl_FragColor = diffuseSum / weightSum;\n}"};
THREE.BlurShaderUtils = {createSampleWeights:function(a, c) {
  for (var k = [], b = 0; b <= a; b++) {
    k.push(Math.exp(-(b * b) / (2 * c * c)) / (Math.sqrt(2 * Math.PI) * c));
  }
  return k;
}, createSampleOffsets:function(a, c) {
  for (var k = [], b = 0; b <= a; b++) {
    k.push(c.clone().multiplyScalar(b));
  }
  return k;
}, configure:function(a, c, k, b) {
  a.defines.KERNEL_RADIUS = c;
  a.uniforms.sampleUvOffsets.value = THREE.BlurShaderUtils.createSampleOffsets(c, b);
  a.uniforms.sampleWeights.value = THREE.BlurShaderUtils.createSampleWeights(c, k);
  a.needsUpdate = !0;
}};
THREE.UnpackDepthRGBAShader = {uniforms:{tDiffuse:{value:null}, opacity:{value:1}}, vertexShader:"varying vec2 vUv;\nvoid main() {\nvUv = uv;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"uniform float opacity;\nuniform sampler2D tDiffuse;\nvarying vec2 vUv;\n#include <packing>\nvoid main() {\nfloat depth = 1.0 - unpackRGBAToDepth( texture2D( tDiffuse, vUv ) );\ngl_FragColor = vec4( vec3( depth ), opacity );\n}"};
THREE.ConvolutionShader = {defines:{KERNEL_SIZE_FLOAT:"25.0", KERNEL_SIZE_INT:"25"}, uniforms:{tDiffuse:{value:null}, uImageIncrement:{value:new THREE.Vector2(.001953125, 0)}, cKernel:{value:[]}}, vertexShader:"uniform vec2 uImageIncrement;\nvarying vec2 vUv;\nvoid main() {\nvUv = uv - ( ( KERNEL_SIZE_FLOAT - 1.0 ) / 2.0 ) * uImageIncrement;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"uniform float cKernel[ KERNEL_SIZE_INT ];\nuniform sampler2D tDiffuse;\nuniform vec2 uImageIncrement;\nvarying vec2 vUv;\nvoid main() {\nvec2 imageCoord = vUv;\nvec4 sum = vec4( 0.0, 0.0, 0.0, 0.0 );\nfor( int i = 0; i < KERNEL_SIZE_INT; i ++ ) {\nsum += texture2D( tDiffuse, imageCoord ) * cKernel[ i ];\nimageCoord += uImageIncrement;\n}\ngl_FragColor = sum;\n}", 
buildKernel:function(a) {
  var c, k, b = 2 * Math.ceil(3 * a) + 1;
  25 < b && (b = 25);
  var f = .5 * (b - 1);
  var d = Array(b);
  for (c = k = 0; c < b; ++c) {
    var h = c - f;
    d[c] = Math.exp(-(h * h) / ( 2. * a * a));
    k += d[c];
  }
  for (c = 0; c < b; ++c) {
    d[c] /= k;
  }
  return d;
}};
THREE.LuminosityHighPassShader = {shaderID:"luminosityHighPass", uniforms:{tDiffuse:{type:"t", value:null}, luminosityThreshold:{type:"f", value:1}, smoothWidth:{type:"f", value:1}, defaultColor:{type:"c", value:new THREE.Color(0)}, defaultOpacity:{type:"f", value:0}}, vertexShader:"varying vec2 vUv;\nvoid main() {\nvUv = uv;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"uniform sampler2D tDiffuse;\nuniform vec3 defaultColor;\nuniform float defaultOpacity;\nuniform float luminosityThreshold;\nuniform float smoothWidth;\nvarying vec2 vUv;\nvoid main() {\nvec4 texel = texture2D( tDiffuse, vUv );\nvec3 luma = vec3( 0.299, 0.587, 0.114 );\nfloat v = dot( texel.xyz, luma );\nvec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );\nfloat alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );\ngl_FragColor = mix( outputColor, texel, alpha );\n}"};
THREE.FXAAShader = {uniforms:{tDiffuse:{value:null}, resolution:{value:new THREE.Vector2(1 / 1024, 1 / 512)}}, vertexShader:"varying vec2 vUv;\nvoid main() {\nvUv = uv;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:'precision highp float;\n\nuniform sampler2D tDiffuse;\n\nuniform vec2 resolution;\n\nvarying vec2 vUv;\n\n// FXAA 3.11 implementation by NVIDIA, ported to WebGL by Agost Biro (biro@archilogic.com)\n\n//----------------------------------------------------------------------------------\n// File:        es3-keplerFXAAassetsshaders/FXAA_DefaultES.frag\n// SDK Version: v3.00\n// Email:       gameworks@nvidia.com\n// Site:        http://developer.nvidia.com/\n//\n// Copyright (c) 2014-2015, NVIDIA CORPORATION. All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions\n// are met:\n//  * Redistributions of source code must retain the above copyright\n//    notice, this list of conditions and the following disclaimer.\n//  * Redistributions in binary form must reproduce the above copyright\n//    notice, this list of conditions and the following disclaimer in the\n//    documentation and/or other materials provided with the distribution.\n//  * Neither the name of NVIDIA CORPORATION nor the names of its\n//    contributors may be used to endorse or promote products derived\n//    from this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS\'\' AND ANY\n// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n// PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n//----------------------------------------------------------------------------------\n\n#define FXAA_PC 1\n#define FXAA_GLSL_100 1\n#define FXAA_QUALITY_PRESET 12\n\n#define FXAA_GREEN_AS_LUMA 1\n\n/*--------------------------------------------------------------------------*/\n#ifndef FXAA_PC_CONSOLE\n    //\n    // The console algorithm for PC is included\n    // for developers targeting really low spec machines.\n    // Likely better to just run FXAA_PC, and use a really low preset.\n    //\n    #define FXAA_PC_CONSOLE 0\n#endif\n/*--------------------------------------------------------------------------*/\n#ifndef FXAA_GLSL_120\n    #define FXAA_GLSL_120 0\n#endif\n/*--------------------------------------------------------------------------*/\n#ifndef FXAA_GLSL_130\n    #define FXAA_GLSL_130 0\n#endif\n/*--------------------------------------------------------------------------*/\n#ifndef FXAA_HLSL_3\n    #define FXAA_HLSL_3 0\n#endif\n/*--------------------------------------------------------------------------*/\n#ifndef FXAA_HLSL_4\n    #define FXAA_HLSL_4 0\n#endif\n/*--------------------------------------------------------------------------*/\n#ifndef FXAA_HLSL_5\n    #define FXAA_HLSL_5 0\n#endif\n/*==========================================================================*/\n#ifndef FXAA_GREEN_AS_LUMA\n    //\n    // For those using non-linear color,\n    // and either not able to get luma in alpha, or not wanting to,\n    // this enables FXAA to run using green as a proxy for luma.\n    // So with this enabled, no need to pack luma in alpha.\n    //\n    // This will turn off AA on anything which lacks some amount of green.\n    // Pure red and blue or combination of only R and B, will get no AA.\n    //\n    // Might want to lower the settings for both,\n    //    fxaaConsoleEdgeThresholdMin\n    //    fxaaQualityEdgeThresholdMin\n    // In order to insure AA does not get turned off on colors\n    // which contain a minor amount of green.\n    //\n    // 1 = On.\n    // 0 = Off.\n    //\n    #define FXAA_GREEN_AS_LUMA 0\n#endif\n/*--------------------------------------------------------------------------*/\n#ifndef FXAA_EARLY_EXIT\n    //\n    // Controls algorithm\'s early exit path.\n    // On PS3 turning this ON adds 2 cycles to the shader.\n    // On 360 turning this OFF adds 10ths of a millisecond to the shader.\n    // Turning this off on console will result in a more blurry image.\n    // So this defaults to on.\n    //\n    // 1 = On.\n    // 0 = Off.\n    //\n    #define FXAA_EARLY_EXIT 1\n#endif\n/*--------------------------------------------------------------------------*/\n#ifndef FXAA_DISCARD\n    //\n    // Only valid for PC OpenGL currently.\n    // Probably will not work when FXAA_GREEN_AS_LUMA = 1.\n    //\n    // 1 = Use discard on pixels which don\'t need AA.\n    //     For APIs which enable concurrent TEX+ROP from same surface.\n    // 0 = Return unchanged color on pixels which don\'t need AA.\n    //\n    #define FXAA_DISCARD 0\n#endif\n/*--------------------------------------------------------------------------*/\n#ifndef FXAA_FAST_PIXEL_OFFSET\n    //\n    // Used for GLSL 120 only.\n    //\n    // 1 = GL API supports fast pixel offsets\n    // 0 = do not use fast pixel offsets\n    //\n    #ifdef GL_EXT_gpu_shader4\n        #define FXAA_FAST_PIXEL_OFFSET 1\n    #endif\n    #ifdef GL_NV_gpu_shader5\n        #define FXAA_FAST_PIXEL_OFFSET 1\n    #endif\n    #ifdef GL_ARB_gpu_shader5\n        #define FXAA_FAST_PIXEL_OFFSET 1\n    #endif\n    #ifndef FXAA_FAST_PIXEL_OFFSET\n        #define FXAA_FAST_PIXEL_OFFSET 0\n    #endif\n#endif\n/*--------------------------------------------------------------------------*/\n#ifndef FXAA_GATHER4_ALPHA\n    //\n    // 1 = API supports gather4 on alpha channel.\n    // 0 = API does not support gather4 on alpha channel.\n    //\n    #if (FXAA_HLSL_5 == 1)\n        #define FXAA_GATHER4_ALPHA 1\n    #endif\n    #ifdef GL_ARB_gpu_shader5\n        #define FXAA_GATHER4_ALPHA 1\n    #endif\n    #ifdef GL_NV_gpu_shader5\n        #define FXAA_GATHER4_ALPHA 1\n    #endif\n    #ifndef FXAA_GATHER4_ALPHA\n        #define FXAA_GATHER4_ALPHA 0\n    #endif\n#endif\n\n\n/*============================================================================\n                        FXAA QUALITY - TUNING KNOBS\n------------------------------------------------------------------------------\nNOTE the other tuning knobs are now in the shader function inputs!\n============================================================================*/\n#ifndef FXAA_QUALITY_PRESET\n    //\n    // Choose the quality preset.\n    // This needs to be compiled into the shader as it effects code.\n    // Best option to include multiple presets is to\n    // in each shader define the preset, then include this file.\n    //\n    // OPTIONS\n    // -----------------------------------------------------------------------\n    // 10 to 15 - default medium dither (10=fastest, 15=highest quality)\n    // 20 to 29 - less dither, more expensive (20=fastest, 29=highest quality)\n    // 39       - no dither, very expensive\n    //\n    // NOTES\n    // -----------------------------------------------------------------------\n    // 12 = slightly faster then FXAA 3.9 and higher edge quality (default)\n    // 13 = about same speed as FXAA 3.9 and better than 12\n    // 23 = closest to FXAA 3.9 visually and performance wise\n    //  _ = the lowest digit is directly related to performance\n    // _  = the highest digit is directly related to style\n    //\n    #define FXAA_QUALITY_PRESET 12\n#endif\n\n\n/*============================================================================\n\n                           FXAA QUALITY - PRESETS\n\n============================================================================*/\n\n/*============================================================================\n                     FXAA QUALITY - MEDIUM DITHER PRESETS\n============================================================================*/\n#if (FXAA_QUALITY_PRESET == 10)\n    #define FXAA_QUALITY_PS 3\n    #define FXAA_QUALITY_P0 1.5\n    #define FXAA_QUALITY_P1 3.0\n    #define FXAA_QUALITY_P2 12.0\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_QUALITY_PRESET == 11)\n    #define FXAA_QUALITY_PS 4\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 3.0\n    #define FXAA_QUALITY_P3 12.0\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_QUALITY_PRESET == 12)\n    #define FXAA_QUALITY_PS 5\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 4.0\n    #define FXAA_QUALITY_P4 12.0\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_QUALITY_PRESET == 13)\n    #define FXAA_QUALITY_PS 6\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 4.0\n    #define FXAA_QUALITY_P5 12.0\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_QUALITY_PRESET == 14)\n    #define FXAA_QUALITY_PS 7\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 2.0\n    #define FXAA_QUALITY_P5 4.0\n    #define FXAA_QUALITY_P6 12.0\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_QUALITY_PRESET == 15)\n    #define FXAA_QUALITY_PS 8\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 2.0\n    #define FXAA_QUALITY_P5 2.0\n    #define FXAA_QUALITY_P6 4.0\n    #define FXAA_QUALITY_P7 12.0\n#endif\n\n/*============================================================================\n                     FXAA QUALITY - LOW DITHER PRESETS\n============================================================================*/\n#if (FXAA_QUALITY_PRESET == 20)\n    #define FXAA_QUALITY_PS 3\n    #define FXAA_QUALITY_P0 1.5\n    #define FXAA_QUALITY_P1 2.0\n    #define FXAA_QUALITY_P2 8.0\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_QUALITY_PRESET == 21)\n    #define FXAA_QUALITY_PS 4\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 8.0\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_QUALITY_PRESET == 22)\n    #define FXAA_QUALITY_PS 5\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 8.0\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_QUALITY_PRESET == 23)\n    #define FXAA_QUALITY_PS 6\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 2.0\n    #define FXAA_QUALITY_P5 8.0\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_QUALITY_PRESET == 24)\n    #define FXAA_QUALITY_PS 7\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 2.0\n    #define FXAA_QUALITY_P5 3.0\n    #define FXAA_QUALITY_P6 8.0\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_QUALITY_PRESET == 25)\n    #define FXAA_QUALITY_PS 8\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 2.0\n    #define FXAA_QUALITY_P5 2.0\n    #define FXAA_QUALITY_P6 4.0\n    #define FXAA_QUALITY_P7 8.0\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_QUALITY_PRESET == 26)\n    #define FXAA_QUALITY_PS 9\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 2.0\n    #define FXAA_QUALITY_P5 2.0\n    #define FXAA_QUALITY_P6 2.0\n    #define FXAA_QUALITY_P7 4.0\n    #define FXAA_QUALITY_P8 8.0\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_QUALITY_PRESET == 27)\n    #define FXAA_QUALITY_PS 10\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 2.0\n    #define FXAA_QUALITY_P5 2.0\n    #define FXAA_QUALITY_P6 2.0\n    #define FXAA_QUALITY_P7 2.0\n    #define FXAA_QUALITY_P8 4.0\n    #define FXAA_QUALITY_P9 8.0\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_QUALITY_PRESET == 28)\n    #define FXAA_QUALITY_PS 11\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 2.0\n    #define FXAA_QUALITY_P5 2.0\n    #define FXAA_QUALITY_P6 2.0\n    #define FXAA_QUALITY_P7 2.0\n    #define FXAA_QUALITY_P8 2.0\n    #define FXAA_QUALITY_P9 4.0\n    #define FXAA_QUALITY_P10 8.0\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_QUALITY_PRESET == 29)\n    #define FXAA_QUALITY_PS 12\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 2.0\n    #define FXAA_QUALITY_P5 2.0\n    #define FXAA_QUALITY_P6 2.0\n    #define FXAA_QUALITY_P7 2.0\n    #define FXAA_QUALITY_P8 2.0\n    #define FXAA_QUALITY_P9 2.0\n    #define FXAA_QUALITY_P10 4.0\n    #define FXAA_QUALITY_P11 8.0\n#endif\n\n/*============================================================================\n                     FXAA QUALITY - EXTREME QUALITY\n============================================================================*/\n#if (FXAA_QUALITY_PRESET == 39)\n    #define FXAA_QUALITY_PS 12\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.0\n    #define FXAA_QUALITY_P2 1.0\n    #define FXAA_QUALITY_P3 1.0\n    #define FXAA_QUALITY_P4 1.0\n    #define FXAA_QUALITY_P5 1.5\n    #define FXAA_QUALITY_P6 2.0\n    #define FXAA_QUALITY_P7 2.0\n    #define FXAA_QUALITY_P8 2.0\n    #define FXAA_QUALITY_P9 2.0\n    #define FXAA_QUALITY_P10 4.0\n    #define FXAA_QUALITY_P11 8.0\n#endif\n\n\n\n/*============================================================================\n\n                                API PORTING\n\n============================================================================*/\n#if (FXAA_GLSL_100 == 1) || (FXAA_GLSL_120 == 1) || (FXAA_GLSL_130 == 1)\n    #define FxaaBool bool\n    #define FxaaDiscard discard\n    #define FxaaFloat float\n    #define FxaaFloat2 vec2\n    #define FxaaFloat3 vec3\n    #define FxaaFloat4 vec4\n    #define FxaaHalf float\n    #define FxaaHalf2 vec2\n    #define FxaaHalf3 vec3\n    #define FxaaHalf4 vec4\n    #define FxaaInt2 ivec2\n    #define FxaaSat(x) clamp(x, 0.0, 1.0)\n    #define FxaaTex sampler2D\n#else\n    #define FxaaBool bool\n    #define FxaaDiscard clip(-1)\n    #define FxaaFloat float\n    #define FxaaFloat2 float2\n    #define FxaaFloat3 float3\n    #define FxaaFloat4 float4\n    #define FxaaHalf half\n    #define FxaaHalf2 half2\n    #define FxaaHalf3 half3\n    #define FxaaHalf4 half4\n    #define FxaaSat(x) saturate(x)\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_GLSL_100 == 1)\n  #define FxaaTexTop(t, p) texture2D(t, p, 0.0)\n  #define FxaaTexOff(t, p, o, r) texture2D(t, p + (o * r), 0.0)\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_GLSL_120 == 1)\n    // Requires,\n    //  #version 120\n    // And at least,\n    //  #extension GL_EXT_gpu_shader4 : enable\n    //  (or set FXAA_FAST_PIXEL_OFFSET 1 to work like DX9)\n    #define FxaaTexTop(t, p) texture2DLod(t, p, 0.0)\n    #if (FXAA_FAST_PIXEL_OFFSET == 1)\n        #define FxaaTexOff(t, p, o, r) texture2DLodOffset(t, p, 0.0, o)\n    #else\n        #define FxaaTexOff(t, p, o, r) texture2DLod(t, p + (o * r), 0.0)\n    #endif\n    #if (FXAA_GATHER4_ALPHA == 1)\n        // use #extension GL_ARB_gpu_shader5 : enable\n        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)\n        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)\n        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)\n        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)\n    #endif\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_GLSL_130 == 1)\n    // Requires "#version 130" or better\n    #define FxaaTexTop(t, p) textureLod(t, p, 0.0)\n    #define FxaaTexOff(t, p, o, r) textureLodOffset(t, p, 0.0, o)\n    #if (FXAA_GATHER4_ALPHA == 1)\n        // use #extension GL_ARB_gpu_shader5 : enable\n        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)\n        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)\n        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)\n        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)\n    #endif\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_HLSL_3 == 1)\n    #define FxaaInt2 float2\n    #define FxaaTex sampler2D\n    #define FxaaTexTop(t, p) tex2Dlod(t, float4(p, 0.0, 0.0))\n    #define FxaaTexOff(t, p, o, r) tex2Dlod(t, float4(p + (o * r), 0, 0))\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_HLSL_4 == 1)\n    #define FxaaInt2 int2\n    struct FxaaTex { SamplerState smpl; Texture2D tex; };\n    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)\n    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)\n#endif\n/*--------------------------------------------------------------------------*/\n#if (FXAA_HLSL_5 == 1)\n    #define FxaaInt2 int2\n    struct FxaaTex { SamplerState smpl; Texture2D tex; };\n    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)\n    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)\n    #define FxaaTexAlpha4(t, p) t.tex.GatherAlpha(t.smpl, p)\n    #define FxaaTexOffAlpha4(t, p, o) t.tex.GatherAlpha(t.smpl, p, o)\n    #define FxaaTexGreen4(t, p) t.tex.GatherGreen(t.smpl, p)\n    #define FxaaTexOffGreen4(t, p, o) t.tex.GatherGreen(t.smpl, p, o)\n#endif\n\n\n/*============================================================================\n                   GREEN AS LUMA OPTION SUPPORT FUNCTION\n============================================================================*/\n#if (FXAA_GREEN_AS_LUMA == 0)\n    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.w; }\n#else\n    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.y; }\n#endif\n\n\n\n\n/*============================================================================\n\n                             FXAA3 QUALITY - PC\n\n============================================================================*/\n#if (FXAA_PC == 1)\n/*--------------------------------------------------------------------------*/\nFxaaFloat4 FxaaPixelShader(\n    //\n    // Use noperspective interpolation here (turn off perspective interpolation).\n    // {xy} = center of pixel\n    FxaaFloat2 pos,\n    //\n    // Used only for FXAA Console, and not used on the 360 version.\n    // Use noperspective interpolation here (turn off perspective interpolation).\n    // {xy_} = upper left of pixel\n    // {_zw} = lower right of pixel\n    FxaaFloat4 fxaaConsolePosPos,\n    //\n    // Input color texture.\n    // {rgb_} = color in linear or perceptual color space\n    // if (FXAA_GREEN_AS_LUMA == 0)\n    //     {__a} = luma in perceptual color space (not linear)\n    FxaaTex tex,\n    //\n    // Only used on the optimized 360 version of FXAA Console.\n    // For everything but 360, just use the same input here as for "tex".\n    // For 360, same texture, just alias with a 2nd sampler.\n    // This sampler needs to have an exponent bias of -1.\n    FxaaTex fxaaConsole360TexExpBiasNegOne,\n    //\n    // Only used on the optimized 360 version of FXAA Console.\n    // For everything but 360, just use the same input here as for "tex".\n    // For 360, same texture, just alias with a 3nd sampler.\n    // This sampler needs to have an exponent bias of -2.\n    FxaaTex fxaaConsole360TexExpBiasNegTwo,\n    //\n    // Only used on FXAA Quality.\n    // This must be from a constant/uniform.\n    // {x_} = 1.0/screenWidthInPixels\n    // {_y} = 1.0/screenHeightInPixels\n    FxaaFloat2 fxaaQualityRcpFrame,\n    //\n    // Only used on FXAA Console.\n    // This must be from a constant/uniform.\n    // This effects sub-pixel AA quality and inversely sharpness.\n    //   Where N ranges between,\n    //     N = 0.50 (default)\n    //     N = 0.33 (sharper)\n    // {x__} = -N/screenWidthInPixels\n    // {_y_} = -N/screenHeightInPixels\n    // {_z_} =  N/screenWidthInPixels\n    // {__w} =  N/screenHeightInPixels\n    FxaaFloat4 fxaaConsoleRcpFrameOpt,\n    //\n    // Only used on FXAA Console.\n    // Not used on 360, but used on PS3 and PC.\n    // This must be from a constant/uniform.\n    // {x__} = -2.0/screenWidthInPixels\n    // {_y_} = -2.0/screenHeightInPixels\n    // {_z_} =  2.0/screenWidthInPixels\n    // {__w} =  2.0/screenHeightInPixels\n    FxaaFloat4 fxaaConsoleRcpFrameOpt2,\n    //\n    // Only used on FXAA Console.\n    // Only used on 360 in place of fxaaConsoleRcpFrameOpt2.\n    // This must be from a constant/uniform.\n    // {x__} =  8.0/screenWidthInPixels\n    // {_y_} =  8.0/screenHeightInPixels\n    // {_z_} = -4.0/screenWidthInPixels\n    // {__w} = -4.0/screenHeightInPixels\n    FxaaFloat4 fxaaConsole360RcpFrameOpt2,\n    //\n    // Only used on FXAA Quality.\n    // This used to be the FXAA_QUALITY_SUBPIX define.\n    // It is here now to allow easier tuning.\n    // Choose the amount of sub-pixel aliasing removal.\n    // This can effect sharpness.\n    //   1.00 - upper limit (softer)\n    //   0.75 - default amount of filtering\n    //   0.50 - lower limit (sharper, less sub-pixel aliasing removal)\n    //   0.25 - almost off\n    //   0.00 - completely off\n    FxaaFloat fxaaQualitySubpix,\n    //\n    // Only used on FXAA Quality.\n    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD define.\n    // It is here now to allow easier tuning.\n    // The minimum amount of local contrast required to apply algorithm.\n    //   0.333 - too little (faster)\n    //   0.250 - low quality\n    //   0.166 - default\n    //   0.125 - high quality\n    //   0.063 - overkill (slower)\n    FxaaFloat fxaaQualityEdgeThreshold,\n    //\n    // Only used on FXAA Quality.\n    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD_MIN define.\n    // It is here now to allow easier tuning.\n    // Trims the algorithm from processing darks.\n    //   0.0833 - upper limit (default, the start of visible unfiltered edges)\n    //   0.0625 - high quality (faster)\n    //   0.0312 - visible limit (slower)\n    // Special notes when using FXAA_GREEN_AS_LUMA,\n    //   Likely want to set this to zero.\n    //   As colors that are mostly not-green\n    //   will appear very dark in the green channel!\n    //   Tune by looking at mostly non-green content,\n    //   then start at zero and increase until aliasing is a problem.\n    FxaaFloat fxaaQualityEdgeThresholdMin,\n    //\n    // Only used on FXAA Console.\n    // This used to be the FXAA_CONSOLE_EDGE_SHARPNESS define.\n    // It is here now to allow easier tuning.\n    // This does not effect PS3, as this needs to be compiled in.\n    //   Use FXAA_CONSOLE_PS3_EDGE_SHARPNESS for PS3.\n    //   Due to the PS3 being ALU bound,\n    //   there are only three safe values here: 2 and 4 and 8.\n    //   These options use the shaders ability to a free *|/ by 2|4|8.\n    // For all other platforms can be a non-power of two.\n    //   8.0 is sharper (default!!!)\n    //   4.0 is softer\n    //   2.0 is really soft (good only for vector graphics inputs)\n    FxaaFloat fxaaConsoleEdgeSharpness,\n    //\n    // Only used on FXAA Console.\n    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD define.\n    // It is here now to allow easier tuning.\n    // This does not effect PS3, as this needs to be compiled in.\n    //   Use FXAA_CONSOLE_PS3_EDGE_THRESHOLD for PS3.\n    //   Due to the PS3 being ALU bound,\n    //   there are only two safe values here: 1/4 and 1/8.\n    //   These options use the shaders ability to a free *|/ by 2|4|8.\n    // The console setting has a different mapping than the quality setting.\n    // Other platforms can use other values.\n    //   0.125 leaves less aliasing, but is softer (default!!!)\n    //   0.25 leaves more aliasing, and is sharper\n    FxaaFloat fxaaConsoleEdgeThreshold,\n    //\n    // Only used on FXAA Console.\n    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD_MIN define.\n    // It is here now to allow easier tuning.\n    // Trims the algorithm from processing darks.\n    // The console setting has a different mapping than the quality setting.\n    // This only applies when FXAA_EARLY_EXIT is 1.\n    // This does not apply to PS3,\n    // PS3 was simplified to avoid more shader instructions.\n    //   0.06 - faster but more aliasing in darks\n    //   0.05 - default\n    //   0.04 - slower and less aliasing in darks\n    // Special notes when using FXAA_GREEN_AS_LUMA,\n    //   Likely want to set this to zero.\n    //   As colors that are mostly not-green\n    //   will appear very dark in the green channel!\n    //   Tune by looking at mostly non-green content,\n    //   then start at zero and increase until aliasing is a problem.\n    FxaaFloat fxaaConsoleEdgeThresholdMin,\n    //\n    // Extra constants for 360 FXAA Console only.\n    // Use zeros or anything else for other platforms.\n    // These must be in physical constant registers and NOT immediates.\n    // Immediates will result in compiler un-optimizing.\n    // {xyzw} = float4(1.0, -1.0, 0.25, -0.25)\n    FxaaFloat4 fxaaConsole360ConstDir\n) {\n/*--------------------------------------------------------------------------*/\n    FxaaFloat2 posM;\n    posM.x = pos.x;\n    posM.y = pos.y;\n    #if (FXAA_GATHER4_ALPHA == 1)\n        #if (FXAA_DISCARD == 0)\n            FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);\n            #if (FXAA_GREEN_AS_LUMA == 0)\n                #define lumaM rgbyM.w\n            #else\n                #define lumaM rgbyM.y\n            #endif\n        #endif\n        #if (FXAA_GREEN_AS_LUMA == 0)\n            FxaaFloat4 luma4A = FxaaTexAlpha4(tex, posM);\n            FxaaFloat4 luma4B = FxaaTexOffAlpha4(tex, posM, FxaaInt2(-1, -1));\n        #else\n            FxaaFloat4 luma4A = FxaaTexGreen4(tex, posM);\n            FxaaFloat4 luma4B = FxaaTexOffGreen4(tex, posM, FxaaInt2(-1, -1));\n        #endif\n        #if (FXAA_DISCARD == 1)\n            #define lumaM luma4A.w\n        #endif\n        #define lumaE luma4A.z\n        #define lumaS luma4A.x\n        #define lumaSE luma4A.y\n        #define lumaNW luma4B.w\n        #define lumaN luma4B.z\n        #define lumaW luma4B.x\n    #else\n        FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);\n        #if (FXAA_GREEN_AS_LUMA == 0)\n            #define lumaM rgbyM.w\n        #else\n            #define lumaM rgbyM.y\n        #endif\n        #if (FXAA_GLSL_100 == 1)\n          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0, 1.0), fxaaQualityRcpFrame.xy));\n          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 0.0), fxaaQualityRcpFrame.xy));\n          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0,-1.0), fxaaQualityRcpFrame.xy));\n          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 0.0), fxaaQualityRcpFrame.xy));\n        #else\n          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0, 1), fxaaQualityRcpFrame.xy));\n          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 0), fxaaQualityRcpFrame.xy));\n          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0,-1), fxaaQualityRcpFrame.xy));\n          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 0), fxaaQualityRcpFrame.xy));\n        #endif\n    #endif\n/*--------------------------------------------------------------------------*/\n    FxaaFloat maxSM = max(lumaS, lumaM);\n    FxaaFloat minSM = min(lumaS, lumaM);\n    FxaaFloat maxESM = max(lumaE, maxSM);\n    FxaaFloat minESM = min(lumaE, minSM);\n    FxaaFloat maxWN = max(lumaN, lumaW);\n    FxaaFloat minWN = min(lumaN, lumaW);\n    FxaaFloat rangeMax = max(maxWN, maxESM);\n    FxaaFloat rangeMin = min(minWN, minESM);\n    FxaaFloat rangeMaxScaled = rangeMax * fxaaQualityEdgeThreshold;\n    FxaaFloat range = rangeMax - rangeMin;\n    FxaaFloat rangeMaxClamped = max(fxaaQualityEdgeThresholdMin, rangeMaxScaled);\n    FxaaBool earlyExit = range < rangeMaxClamped;\n/*--------------------------------------------------------------------------*/\n    if(earlyExit)\n        #if (FXAA_DISCARD == 1)\n            FxaaDiscard;\n        #else\n            return rgbyM;\n        #endif\n/*--------------------------------------------------------------------------*/\n    #if (FXAA_GATHER4_ALPHA == 0)\n        #if (FXAA_GLSL_100 == 1)\n          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0,-1.0), fxaaQualityRcpFrame.xy));\n          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 1.0), fxaaQualityRcpFrame.xy));\n          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0,-1.0), fxaaQualityRcpFrame.xy));\n          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 1.0), fxaaQualityRcpFrame.xy));\n        #else\n          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1,-1), fxaaQualityRcpFrame.xy));\n          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 1), fxaaQualityRcpFrame.xy));\n          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1,-1), fxaaQualityRcpFrame.xy));\n          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));\n        #endif\n    #else\n        FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(1, -1), fxaaQualityRcpFrame.xy));\n        FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));\n    #endif\n/*--------------------------------------------------------------------------*/\n    FxaaFloat lumaNS = lumaN + lumaS;\n    FxaaFloat lumaWE = lumaW + lumaE;\n    FxaaFloat subpixRcpRange = 1.0/range;\n    FxaaFloat subpixNSWE = lumaNS + lumaWE;\n    FxaaFloat edgeHorz1 = (-2.0 * lumaM) + lumaNS;\n    FxaaFloat edgeVert1 = (-2.0 * lumaM) + lumaWE;\n/*--------------------------------------------------------------------------*/\n    FxaaFloat lumaNESE = lumaNE + lumaSE;\n    FxaaFloat lumaNWNE = lumaNW + lumaNE;\n    FxaaFloat edgeHorz2 = (-2.0 * lumaE) + lumaNESE;\n    FxaaFloat edgeVert2 = (-2.0 * lumaN) + lumaNWNE;\n/*--------------------------------------------------------------------------*/\n    FxaaFloat lumaNWSW = lumaNW + lumaSW;\n    FxaaFloat lumaSWSE = lumaSW + lumaSE;\n    FxaaFloat edgeHorz4 = (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);\n    FxaaFloat edgeVert4 = (abs(edgeVert1) * 2.0) + abs(edgeVert2);\n    FxaaFloat edgeHorz3 = (-2.0 * lumaW) + lumaNWSW;\n    FxaaFloat edgeVert3 = (-2.0 * lumaS) + lumaSWSE;\n    FxaaFloat edgeHorz = abs(edgeHorz3) + edgeHorz4;\n    FxaaFloat edgeVert = abs(edgeVert3) + edgeVert4;\n/*--------------------------------------------------------------------------*/\n    FxaaFloat subpixNWSWNESE = lumaNWSW + lumaNESE;\n    FxaaFloat lengthSign = fxaaQualityRcpFrame.x;\n    FxaaBool horzSpan = edgeHorz >= edgeVert;\n    FxaaFloat subpixA = subpixNSWE * 2.0 + subpixNWSWNESE;\n/*--------------------------------------------------------------------------*/\n    if(!horzSpan) lumaN = lumaW;\n    if(!horzSpan) lumaS = lumaE;\n    if(horzSpan) lengthSign = fxaaQualityRcpFrame.y;\n    FxaaFloat subpixB = (subpixA * (1.0/12.0)) - lumaM;\n/*--------------------------------------------------------------------------*/\n    FxaaFloat gradientN = lumaN - lumaM;\n    FxaaFloat gradientS = lumaS - lumaM;\n    FxaaFloat lumaNN = lumaN + lumaM;\n    FxaaFloat lumaSS = lumaS + lumaM;\n    FxaaBool pairN = abs(gradientN) >= abs(gradientS);\n    FxaaFloat gradient = max(abs(gradientN), abs(gradientS));\n    if(pairN) lengthSign = -lengthSign;\n    FxaaFloat subpixC = FxaaSat(abs(subpixB) * subpixRcpRange);\n/*--------------------------------------------------------------------------*/\n    FxaaFloat2 posB;\n    posB.x = posM.x;\n    posB.y = posM.y;\n    FxaaFloat2 offNP;\n    offNP.x = (!horzSpan) ? 0.0 : fxaaQualityRcpFrame.x;\n    offNP.y = ( horzSpan) ? 0.0 : fxaaQualityRcpFrame.y;\n    if(!horzSpan) posB.x += lengthSign * 0.5;\n    if( horzSpan) posB.y += lengthSign * 0.5;\n/*--------------------------------------------------------------------------*/\n    FxaaFloat2 posN;\n    posN.x = posB.x - offNP.x * FXAA_QUALITY_P0;\n    posN.y = posB.y - offNP.y * FXAA_QUALITY_P0;\n    FxaaFloat2 posP;\n    posP.x = posB.x + offNP.x * FXAA_QUALITY_P0;\n    posP.y = posB.y + offNP.y * FXAA_QUALITY_P0;\n    FxaaFloat subpixD = ((-2.0)*subpixC) + 3.0;\n    FxaaFloat lumaEndN = FxaaLuma(FxaaTexTop(tex, posN));\n    FxaaFloat subpixE = subpixC * subpixC;\n    FxaaFloat lumaEndP = FxaaLuma(FxaaTexTop(tex, posP));\n/*--------------------------------------------------------------------------*/\n    if(!pairN) lumaNN = lumaSS;\n    FxaaFloat gradientScaled = gradient * 1.0/4.0;\n    FxaaFloat lumaMM = lumaM - lumaNN * 0.5;\n    FxaaFloat subpixF = subpixD * subpixE;\n    FxaaBool lumaMLTZero = lumaMM < 0.0;\n/*--------------------------------------------------------------------------*/\n    lumaEndN -= lumaNN * 0.5;\n    lumaEndP -= lumaNN * 0.5;\n    FxaaBool doneN = abs(lumaEndN) >= gradientScaled;\n    FxaaBool doneP = abs(lumaEndP) >= gradientScaled;\n    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P1;\n    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P1;\n    FxaaBool doneNP = (!doneN) || (!doneP);\n    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P1;\n    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P1;\n/*--------------------------------------------------------------------------*/\n    if(doneNP) {\n        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n        doneN = abs(lumaEndN) >= gradientScaled;\n        doneP = abs(lumaEndP) >= gradientScaled;\n        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P2;\n        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P2;\n        doneNP = (!doneN) || (!doneP);\n        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P2;\n        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P2;\n/*--------------------------------------------------------------------------*/\n        #if (FXAA_QUALITY_PS > 3)\n        if(doneNP) {\n            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n            doneN = abs(lumaEndN) >= gradientScaled;\n            doneP = abs(lumaEndP) >= gradientScaled;\n            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P3;\n            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P3;\n            doneNP = (!doneN) || (!doneP);\n            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P3;\n            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P3;\n/*--------------------------------------------------------------------------*/\n            #if (FXAA_QUALITY_PS > 4)\n            if(doneNP) {\n                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n                doneN = abs(lumaEndN) >= gradientScaled;\n                doneP = abs(lumaEndP) >= gradientScaled;\n                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P4;\n                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P4;\n                doneNP = (!doneN) || (!doneP);\n                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P4;\n                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P4;\n/*--------------------------------------------------------------------------*/\n                #if (FXAA_QUALITY_PS > 5)\n                if(doneNP) {\n                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n                    doneN = abs(lumaEndN) >= gradientScaled;\n                    doneP = abs(lumaEndP) >= gradientScaled;\n                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P5;\n                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P5;\n                    doneNP = (!doneN) || (!doneP);\n                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P5;\n                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P5;\n/*--------------------------------------------------------------------------*/\n                    #if (FXAA_QUALITY_PS > 6)\n                    if(doneNP) {\n                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n                        doneN = abs(lumaEndN) >= gradientScaled;\n                        doneP = abs(lumaEndP) >= gradientScaled;\n                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P6;\n                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P6;\n                        doneNP = (!doneN) || (!doneP);\n                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P6;\n                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P6;\n/*--------------------------------------------------------------------------*/\n                        #if (FXAA_QUALITY_PS > 7)\n                        if(doneNP) {\n                            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n                            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n                            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n                            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n                            doneN = abs(lumaEndN) >= gradientScaled;\n                            doneP = abs(lumaEndP) >= gradientScaled;\n                            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P7;\n                            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P7;\n                            doneNP = (!doneN) || (!doneP);\n                            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P7;\n                            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P7;\n/*--------------------------------------------------------------------------*/\n    #if (FXAA_QUALITY_PS > 8)\n    if(doneNP) {\n        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n        doneN = abs(lumaEndN) >= gradientScaled;\n        doneP = abs(lumaEndP) >= gradientScaled;\n        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P8;\n        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P8;\n        doneNP = (!doneN) || (!doneP);\n        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P8;\n        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P8;\n/*--------------------------------------------------------------------------*/\n        #if (FXAA_QUALITY_PS > 9)\n        if(doneNP) {\n            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n            doneN = abs(lumaEndN) >= gradientScaled;\n            doneP = abs(lumaEndP) >= gradientScaled;\n            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P9;\n            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P9;\n            doneNP = (!doneN) || (!doneP);\n            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P9;\n            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P9;\n/*--------------------------------------------------------------------------*/\n            #if (FXAA_QUALITY_PS > 10)\n            if(doneNP) {\n                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n                doneN = abs(lumaEndN) >= gradientScaled;\n                doneP = abs(lumaEndP) >= gradientScaled;\n                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P10;\n                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P10;\n                doneNP = (!doneN) || (!doneP);\n                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P10;\n                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P10;\n/*--------------------------------------------------------------------------*/\n                #if (FXAA_QUALITY_PS > 11)\n                if(doneNP) {\n                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n                    doneN = abs(lumaEndN) >= gradientScaled;\n                    doneP = abs(lumaEndP) >= gradientScaled;\n                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P11;\n                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P11;\n                    doneNP = (!doneN) || (!doneP);\n                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P11;\n                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P11;\n/*--------------------------------------------------------------------------*/\n                    #if (FXAA_QUALITY_PS > 12)\n                    if(doneNP) {\n                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n                        doneN = abs(lumaEndN) >= gradientScaled;\n                        doneP = abs(lumaEndP) >= gradientScaled;\n                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P12;\n                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P12;\n                        doneNP = (!doneN) || (!doneP);\n                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P12;\n                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P12;\n/*--------------------------------------------------------------------------*/\n                    }\n                    #endif\n/*--------------------------------------------------------------------------*/\n                }\n                #endif\n/*--------------------------------------------------------------------------*/\n            }\n            #endif\n/*--------------------------------------------------------------------------*/\n        }\n        #endif\n/*--------------------------------------------------------------------------*/\n    }\n    #endif\n/*--------------------------------------------------------------------------*/\n                        }\n                        #endif\n/*--------------------------------------------------------------------------*/\n                    }\n                    #endif\n/*--------------------------------------------------------------------------*/\n                }\n                #endif\n/*--------------------------------------------------------------------------*/\n            }\n            #endif\n/*--------------------------------------------------------------------------*/\n        }\n        #endif\n/*--------------------------------------------------------------------------*/\n    }\n/*--------------------------------------------------------------------------*/\n    FxaaFloat dstN = posM.x - posN.x;\n    FxaaFloat dstP = posP.x - posM.x;\n    if(!horzSpan) dstN = posM.y - posN.y;\n    if(!horzSpan) dstP = posP.y - posM.y;\n/*--------------------------------------------------------------------------*/\n    FxaaBool goodSpanN = (lumaEndN < 0.0) != lumaMLTZero;\n    FxaaFloat spanLength = (dstP + dstN);\n    FxaaBool goodSpanP = (lumaEndP < 0.0) != lumaMLTZero;\n    FxaaFloat spanLengthRcp = 1.0/spanLength;\n/*--------------------------------------------------------------------------*/\n    FxaaBool directionN = dstN < dstP;\n    FxaaFloat dst = min(dstN, dstP);\n    FxaaBool goodSpan = directionN ? goodSpanN : goodSpanP;\n    FxaaFloat subpixG = subpixF * subpixF;\n    FxaaFloat pixelOffset = (dst * (-spanLengthRcp)) + 0.5;\n    FxaaFloat subpixH = subpixG * fxaaQualitySubpix;\n/*--------------------------------------------------------------------------*/\n    FxaaFloat pixelOffsetGood = goodSpan ? pixelOffset : 0.0;\n    FxaaFloat pixelOffsetSubpix = max(pixelOffsetGood, subpixH);\n    if(!horzSpan) posM.x += pixelOffsetSubpix * lengthSign;\n    if( horzSpan) posM.y += pixelOffsetSubpix * lengthSign;\n    #if (FXAA_DISCARD == 1)\n        return FxaaTexTop(tex, posM);\n    #else\n        return FxaaFloat4(FxaaTexTop(tex, posM).xyz, lumaM);\n    #endif\n}\n/*==========================================================================*/\n#endif\n\nvoid main() {\n  gl_FragColor = FxaaPixelShader(\n    vUv,\n    vec4(0.0),\n    tDiffuse,\n    tDiffuse,\n    tDiffuse,\n    resolution,\n    vec4(0.0),\n    vec4(0.0),\n    vec4(0.0),\n    0.75,\n    0.166,\n    0.0833,\n    0.0,\n    0.0,\n    0.0,\n    vec4(0.0)\n  );\n\n  // TODO avoid querying texture twice for same texel\n  gl_FragColor.a = texture2D(tDiffuse, vUv).a;\n}'};
THREE.SSAOShader = {defines:{PERSPECTIVE_CAMERA:1, KERNEL_SIZE:32}, uniforms:{tDiffuse:{value:null}, tNormal:{value:null}, tDepth:{value:null}, tNoise:{value:null}, kernel:{value:null}, cameraNear:{value:null}, cameraFar:{value:null}, resolution:{value:new THREE.Vector2}, cameraProjectionMatrix:{value:new THREE.Matrix4}, cameraInverseProjectionMatrix:{value:new THREE.Matrix4}, kernelRadius:{value:8}, minDistance:{value:.005}, maxDistance:{value:.05}}, vertexShader:"varying vec2 vUv;\nvoid main() {\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", 
fragmentShader:"uniform sampler2D tDiffuse;\nuniform sampler2D tNormal;\nuniform sampler2D tDepth;\nuniform sampler2D tNoise;\nuniform vec3 kernel[ KERNEL_SIZE ];\nuniform vec2 resolution;\nuniform float cameraNear;\nuniform float cameraFar;\nuniform mat4 cameraProjectionMatrix;\nuniform mat4 cameraInverseProjectionMatrix;\nuniform float kernelRadius;\nuniform float minDistance;\nuniform float maxDistance;\nvarying vec2 vUv;\n#include <packing>\nfloat getDepth( const in vec2 screenPosition ) {\n\treturn texture2D( tDepth, screenPosition ).x;\n}\nfloat getLinearDepth( const in vec2 screenPosition ) {\n\t#if PERSPECTIVE_CAMERA == 1\n\t\tfloat fragCoordZ = texture2D( tDepth, screenPosition ).x;\n\t\tfloat viewZ = perspectiveDepthToViewZ( fragCoordZ, cameraNear, cameraFar );\n\t\treturn viewZToOrthographicDepth( viewZ, cameraNear, cameraFar );\n\t#else\n\t\treturn texture2D( depthSampler, coord ).x;\n\t#endif\n}\nfloat getViewZ( const in float depth ) {\n\t#if PERSPECTIVE_CAMERA == 1\n\t\treturn perspectiveDepthToViewZ( depth, cameraNear, cameraFar );\n\t#else\n\t\treturn orthographicDepthToViewZ( depth, cameraNear, cameraFar );\n\t#endif\n}\nvec3 getViewPosition( const in vec2 screenPosition, const in float depth, const in float viewZ ) {\n\tfloat clipW = cameraProjectionMatrix[2][3] * viewZ + cameraProjectionMatrix[3][3];\n\tvec4 clipPosition = vec4( ( vec3( screenPosition, depth ) - 0.5 ) * 2.0, 1.0 );\n\tclipPosition *= clipW; // unprojection.\n\treturn ( cameraInverseProjectionMatrix * clipPosition ).xyz;\n}\nvec3 getViewNormal( const in vec2 screenPosition ) {\n\treturn unpackRGBToNormal( texture2D( tNormal, screenPosition ).xyz );\n}\nvoid main() {\n\tfloat depth = getDepth( vUv );\n\tfloat viewZ = getViewZ( depth );\n\tvec3 viewPosition = getViewPosition( vUv, depth, viewZ );\n\tvec3 viewNormal = getViewNormal( vUv );\n vec2 noiseScale = vec2( resolution.x / 4.0, resolution.y / 4.0 );\n\tvec3 random = texture2D( tNoise, vUv * noiseScale ).xyz;\n\tvec3 tangent = normalize( random - viewNormal * dot( random, viewNormal ) );\n\tvec3 bitangent = cross( viewNormal, tangent );\n\tmat3 kernelMatrix = mat3( tangent, bitangent, viewNormal );\n float occlusion = 0.0;\n for ( int i = 0; i < KERNEL_SIZE; i ++ ) {\n\t\tvec3 sampleVector = kernelMatrix * kernel[ i ];\n\t\tvec3 samplePoint = viewPosition + ( sampleVector * kernelRadius );\n\t\tvec4 samplePointNDC = cameraProjectionMatrix * vec4( samplePoint, 1.0 );\n\t\tsamplePointNDC /= samplePointNDC.w;\n\t\tvec2 samplePointUv = samplePointNDC.xy * 0.5 + 0.5;\n\t\tfloat realDepth = getLinearDepth( samplePointUv );\n\t\tfloat sampleDepth = viewZToOrthographicDepth( samplePoint.z, cameraNear, cameraFar );\n\t\tfloat delta = sampleDepth - realDepth;\n\t\tif ( delta > minDistance && delta < maxDistance ) {\n\t\t\tocclusion += 1.0;\n\t\t}\n\t}\n\tocclusion = clamp( occlusion / float( KERNEL_SIZE ), 0.0, 1.0 );\n\tgl_FragColor = vec4( vec3( 1.0 - occlusion ), 1.0 );\n}"};
THREE.SSAODepthShader = {defines:{PERSPECTIVE_CAMERA:1}, uniforms:{tDepth:{value:null}, cameraNear:{value:null}, cameraFar:{value:null}}, vertexShader:"varying vec2 vUv;\nvoid main() {\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"uniform sampler2D tDepth;\nuniform float cameraNear;\nuniform float cameraFar;\nvarying vec2 vUv;\n#include <packing>\nfloat getLinearDepth( const in vec2 screenPosition ) {\n\t#if PERSPECTIVE_CAMERA == 1\n\t\tfloat fragCoordZ = texture2D( tDepth, screenPosition ).x;\n\t\tfloat viewZ = perspectiveDepthToViewZ( fragCoordZ, cameraNear, cameraFar );\n\t\treturn viewZToOrthographicDepth( viewZ, cameraNear, cameraFar );\n\t#else\n\t\treturn texture2D( depthSampler, coord ).x;\n\t#endif\n}\nvoid main() {\n\tfloat depth = getLinearDepth( vUv );\n\tgl_FragColor = vec4( vec3( 1.0 - depth ), 1.0 );\n}"};
THREE.SSAOBlurShader = {uniforms:{tDiffuse:{value:null}, resolution:{value:new THREE.Vector2}}, vertexShader:"varying vec2 vUv;\nvoid main() {\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"uniform sampler2D tDiffuse;\nuniform vec2 resolution;\nvarying vec2 vUv;\nvoid main() {\n\tvec2 texelSize = ( 1.0 / resolution );\n\tfloat result = 0.0;\n\tfor ( int i = - 2; i <= 2; i ++ ) {\n\t\tfor ( int j = - 2; j <= 2; j ++ ) {\n\t\t\tvec2 offset = ( vec2( float( i ), float( j ) ) ) * texelSize;\n\t\t\tresult += texture2D( tDiffuse, vUv + offset ).r;\n\t\t}\n\t}\n\tgl_FragColor = vec4( vec3( result / ( 5.0 * 5.0 ) ), 1.0 );\n}"};
THREE.FilmShader = {uniforms:{tDiffuse:{value:null}, time:{value:0}, nIntensity:{value:.5}, sIntensity:{value:.05}, sCount:{value:4096}, grayscale:{value:1}}, vertexShader:"varying vec2 vUv;\nvoid main() {\nvUv = uv;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"#include <common>\nuniform float time;\nuniform bool grayscale;\nuniform float nIntensity;\nuniform float sIntensity;\nuniform float sCount;\nuniform sampler2D tDiffuse;\nvarying vec2 vUv;\nvoid main() {\nvec4 cTextureScreen = texture2D( tDiffuse, vUv );\nfloat dx = rand( vUv + time );\nvec3 cResult = cTextureScreen.rgb + cTextureScreen.rgb * clamp( 0.1 + dx, 0.0, 1.0 );\nvec2 sc = vec2( sin( vUv.y * sCount ), cos( vUv.y * sCount ) );\ncResult += cTextureScreen.rgb * vec3( sc.x, sc.y, sc.x ) * sIntensity;\ncResult = cTextureScreen.rgb + clamp( nIntensity, 0.0,1.0 ) * ( cResult - cTextureScreen.rgb );\nif( grayscale ) {\ncResult = vec3( cResult.r * 0.3 + cResult.g * 0.59 + cResult.b * 0.11 );\n}\ngl_FragColor =  vec4( cResult, cTextureScreen.a );\n}"};
THREE.DotScreenShader = {uniforms:{tDiffuse:{value:null}, tSize:{value:new THREE.Vector2(256, 256)}, center:{value:new THREE.Vector2(.5, .5)}, angle:{value:1.57}, scale:{value:1}}, vertexShader:"varying vec2 vUv;\nvoid main() {\nvUv = uv;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"uniform vec2 center;\nuniform float angle;\nuniform float scale;\nuniform vec2 tSize;\nuniform sampler2D tDiffuse;\nvarying vec2 vUv;\nfloat pattern() {\nfloat s = sin( angle ), c = cos( angle );\nvec2 tex = vUv * tSize - center;\nvec2 point = vec2( c * tex.x - s * tex.y, s * tex.x + c * tex.y ) * scale;\nreturn ( sin( point.x ) * sin( point.y ) ) * 4.0;\n}\nvoid main() {\nvec4 color = texture2D( tDiffuse, vUv );\nfloat average = ( color.r + color.g + color.b ) / 3.0;\ngl_FragColor = vec4( vec3( average * 10.0 - 5.0 + pattern() ), color.a );\n}"};
THREE.LuminosityShader = {uniforms:{tDiffuse:{value:null}}, vertexShader:"varying vec2 vUv;\nvoid main() {\nvUv = uv;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"#include <common>\nuniform sampler2D tDiffuse;\nvarying vec2 vUv;\nvoid main() {\nvec4 texel = texture2D( tDiffuse, vUv );\nfloat l = linearToRelativeLuminance( texel.rgb );\ngl_FragColor = vec4( l, l, l, texel.w );\n}"};
THREE.SobelOperatorShader = {uniforms:{tDiffuse:{value:null}, resolution:{value:new THREE.Vector2}}, vertexShader:"varying vec2 vUv;\nvoid main() {\nvUv = uv;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"uniform sampler2D tDiffuse;\nuniform vec2 resolution;\nvarying vec2 vUv;\nvoid main() {\nvec2 texel = vec2( 1.0 / resolution.x, 1.0 / resolution.y );\nconst mat3 Gx = mat3( -1, -2, -1, 0, 0, 0, 1, 2, 1 );\nconst mat3 Gy = mat3( -1, 0, 1, -2, 0, 2, -1, 0, 1 );\nfloat tx0y0 = texture2D( tDiffuse, vUv + texel * vec2( -1, -1 ) ).r;\nfloat tx0y1 = texture2D( tDiffuse, vUv + texel * vec2( -1,  0 ) ).r;\nfloat tx0y2 = texture2D( tDiffuse, vUv + texel * vec2( -1,  1 ) ).r;\nfloat tx1y0 = texture2D( tDiffuse, vUv + texel * vec2(  0, -1 ) ).r;\nfloat tx1y1 = texture2D( tDiffuse, vUv + texel * vec2(  0,  0 ) ).r;\nfloat tx1y2 = texture2D( tDiffuse, vUv + texel * vec2(  0,  1 ) ).r;\nfloat tx2y0 = texture2D( tDiffuse, vUv + texel * vec2(  1, -1 ) ).r;\nfloat tx2y1 = texture2D( tDiffuse, vUv + texel * vec2(  1,  0 ) ).r;\nfloat tx2y2 = texture2D( tDiffuse, vUv + texel * vec2(  1,  1 ) ).r;\nfloat valueGx = Gx[0][0] * tx0y0 + Gx[1][0] * tx1y0 + Gx[2][0] * tx2y0 + \nGx[0][1] * tx0y1 + Gx[1][1] * tx1y1 + Gx[2][1] * tx2y1 + \nGx[0][2] * tx0y2 + Gx[1][2] * tx1y2 + Gx[2][2] * tx2y2; \nfloat valueGy = Gy[0][0] * tx0y0 + Gy[1][0] * tx1y0 + Gy[2][0] * tx2y0 + \nGy[0][1] * tx0y1 + Gy[1][1] * tx1y1 + Gy[2][1] * tx2y1 + \nGy[0][2] * tx0y2 + Gy[1][2] * tx1y2 + Gy[2][2] * tx2y2; \nfloat G = sqrt( ( valueGx * valueGx ) + ( valueGy * valueGy ) );\ngl_FragColor = vec4( vec3( G ), 1 );\n}"};
THREE.ColorifyShader = {uniforms:{tDiffuse:{value:null}, color:{value:new THREE.Color(16777215)}}, vertexShader:"varying vec2 vUv;\nvoid main() {\nvUv = uv;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"uniform vec3 color;\nuniform sampler2D tDiffuse;\nvarying vec2 vUv;\nvoid main() {\nvec4 texel = texture2D( tDiffuse, vUv );\nvec3 luma = vec3( 0.299, 0.587, 0.114 );\nfloat v = dot( texel.xyz, luma );\ngl_FragColor = vec4( v * color, texel.w );\n}"};
THREE.ToneMapShader = {uniforms:{tDiffuse:{value:null}, averageLuminance:{value:1}, luminanceMap:{value:null}, maxLuminance:{value:16}, minLuminance:{value:.01}, middleGrey:{value:.6}}, vertexShader:"varying vec2 vUv;\nvoid main() {\nvUv = uv;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"#include <common>\nuniform sampler2D tDiffuse;\nvarying vec2 vUv;\nuniform float middleGrey;\nuniform float minLuminance;\nuniform float maxLuminance;\n#ifdef ADAPTED_LUMINANCE\nuniform sampler2D luminanceMap;\n#else\nuniform float averageLuminance;\n#endif\nvec3 ToneMap( vec3 vColor ) {\n#ifdef ADAPTED_LUMINANCE\nfloat fLumAvg = texture2D(luminanceMap, vec2(0.5, 0.5)).r;\n#else\nfloat fLumAvg = averageLuminance;\n#endif\nfloat fLumPixel = linearToRelativeLuminance( vColor );\nfloat fLumScaled = (fLumPixel * middleGrey) / max( minLuminance, fLumAvg );\nfloat fLumCompressed = (fLumScaled * (1.0 + (fLumScaled / (maxLuminance * maxLuminance)))) / (1.0 + fLumScaled);\nreturn fLumCompressed * vColor;\n}\nvoid main() {\nvec4 texel = texture2D( tDiffuse, vUv );\ngl_FragColor = vec4( ToneMap( texel.xyz ), texel.w );\n}"};
THREE.TechnicolorShader = {uniforms:{tDiffuse:{value:null}}, vertexShader:"varying vec2 vUv;\nvoid main() {\nvUv = uv;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"uniform sampler2D tDiffuse;\nvarying vec2 vUv;\nvoid main() {\nvec4 tex = texture2D( tDiffuse, vec2( vUv.x, vUv.y ) );\nvec4 newTex = vec4(tex.r, (tex.g + tex.b) * .5, (tex.g + tex.b) * .5, 1.0);\ngl_FragColor = newTex;\n}"};
THREE.HueSaturationShader = {uniforms:{tDiffuse:{value:null}, hue:{value:0}, saturation:{value:0}}, vertexShader:"varying vec2 vUv;\nvoid main() {\nvUv = uv;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"uniform sampler2D tDiffuse;\nuniform float hue;\nuniform float saturation;\nvarying vec2 vUv;\nvoid main() {\ngl_FragColor = texture2D( tDiffuse, vUv );\nfloat angle = hue * 3.14159265;\nfloat s = sin(angle), c = cos(angle);\nvec3 weights = (vec3(2.0 * c, -sqrt(3.0) * s - c, sqrt(3.0) * s - c) + 1.0) / 3.0;\nfloat len = length(gl_FragColor.rgb);\ngl_FragColor.rgb = vec3(\ndot(gl_FragColor.rgb, weights.xyz),\ndot(gl_FragColor.rgb, weights.zxy),\ndot(gl_FragColor.rgb, weights.yzx)\n);\nfloat average = (gl_FragColor.r + gl_FragColor.g + gl_FragColor.b) / 3.0;\nif (saturation > 0.0) {\ngl_FragColor.rgb += (average - gl_FragColor.rgb) * (1.0 - 1.0 / (1.001 - saturation));\n} else {\ngl_FragColor.rgb += (average - gl_FragColor.rgb) * (-saturation);\n}\n}"};
THREE.EffectComposer = function(a, c) {
  this.renderer = a;
  void 0 === c && (c = {minFilter:THREE.LinearFilter, magFilter:THREE.LinearFilter, format:THREE.RGBAFormat, stencilBuffer:!1}, a = a.getDrawingBufferSize(new THREE.Vector2), c = new THREE.WebGLRenderTarget(a.width, a.height, c), c.texture.name = "EffectComposer.rt1");
  this.renderTarget1 = c;
  this.renderTarget2 = c.clone();
  this.renderTarget2.texture.name = "EffectComposer.rt2";
  this.writeBuffer = this.renderTarget1;
  this.readBuffer = this.renderTarget2;
  this.renderToScreen = !0;
  this.passes = [];
  void 0 === THREE.CopyShader && console.error("THREE.EffectComposer relies on THREE.CopyShader");
  void 0 === THREE.ShaderPass && console.error("THREE.EffectComposer relies on THREE.ShaderPass");
  this.copyPass = new THREE.ShaderPass(THREE.CopyShader);
  this._previousFrameTime = Date.now();
};
Object.assign(THREE.EffectComposer.prototype, {swapBuffers:function() {
  var a = this.readBuffer;
  this.readBuffer = this.writeBuffer;
  this.writeBuffer = a;
}, addPass:function(a) {
  this.passes.push(a);
  var c = this.renderer.getDrawingBufferSize(new THREE.Vector2);
  a.setSize(c.width, c.height);
}, insertPass:function(a, c) {
  this.passes.splice(c, 0, a);
}, isLastEnabledPass:function(a) {
  for (a += 1; a < this.passes.length; a++) {
    if (this.passes[a].enabled) {
      return !1;
    }
  }
  return !0;
}, render:function(a) {
  void 0 === a && (a = .001 * (Date.now() - this._previousFrameTime));
  this._previousFrameTime = Date.now();
  var c = this.renderer.getRenderTarget(), k = !1, b, f = this.passes.length;
  for (b = 0; b < f; b++) {
    var d = this.passes[b];
    if (!1 !== d.enabled) {
      d.renderToScreen = this.renderToScreen && this.isLastEnabledPass(b);
      d.render(this.renderer, this.writeBuffer, this.readBuffer, a, k);
      if (d.needsSwap) {
        if (k) {
          var h = this.renderer.context;
          h.stencilFunc(h.NOTEQUAL, 1, 4294967295);
          this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, a);
          h.stencilFunc(h.EQUAL, 1, 4294967295);
        }
        this.swapBuffers();
      }
      void 0 !== THREE.MaskPass && (d instanceof THREE.MaskPass ? k = !0 : d instanceof THREE.ClearMaskPass && (k = !1));
    }
  }
  this.renderer.setRenderTarget(c);
}, reset:function(a) {
  if (void 0 === a) {
    var c = this.renderer.getDrawingBufferSize(new THREE.Vector2);
    a = this.renderTarget1.clone();
    a.setSize(c.width, c.height);
  }
  this.renderTarget1.dispose();
  this.renderTarget2.dispose();
  this.renderTarget1 = a;
  this.renderTarget2 = a.clone();
  this.writeBuffer = this.renderTarget1;
  this.readBuffer = this.renderTarget2;
}, setSize:function(a, c) {
  this.renderTarget1.setSize(a, c);
  this.renderTarget2.setSize(a, c);
  for (var k = 0; k < this.passes.length; k++) {
    this.passes[k].setSize(a, c);
  }
}});
THREE.Pass = function() {
  this.needsSwap = this.enabled = !0;
  this.renderToScreen = this.clear = !1;
};
Object.assign(THREE.Pass.prototype, {setSize:function(a, c) {
}, render:function(a, c, k, b, f) {
  console.error("THREE.Pass: .render() must be implemented in derived pass.");
}});
THREE.Pass.FullScreenQuad = function() {
  var a = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1), c = new THREE.PlaneBufferGeometry(2, 2), k = function(a) {
    this._mesh = new THREE.Mesh(c, a);
  };
  Object.defineProperty(k.prototype, "material", {get:function() {
    return this._mesh.material;
  }, set:function(a) {
    this._mesh.material = a;
  }});
  Object.assign(k.prototype, {render:function(b) {
    b.render(this._mesh, a);
  }});
  return k;
}();
THREE.RenderPass = function(a, c, k, b, f) {
  THREE.Pass.call(this);
  this.scene = a;
  this.camera = c;
  this.overrideMaterial = k;
  this.clearColor = b;
  this.clearAlpha = void 0 !== f ? f : 0;
  this.clear = !0;
  this.needsSwap = this.clearDepth = !1;
};
THREE.RenderPass.prototype = Object.assign(Object.create(THREE.Pass.prototype), {constructor:THREE.RenderPass, render:function(a, c, k, b, f) {
  c = a.autoClear;
  a.autoClear = !1;
  this.scene.overrideMaterial = this.overrideMaterial;
  if (this.clearColor) {
    var d = a.getClearColor().getHex();
    var h = a.getClearAlpha();
    a.setClearColor(this.clearColor, this.clearAlpha);
  }
  this.clearDepth && a.clearDepth();
  a.setRenderTarget(this.renderToScreen ? null : k);
  this.clear && a.clear(a.autoClearColor, a.autoClearDepth, a.autoClearStencil);
  a.render(this.scene, this.camera);
  this.clearColor && a.setClearColor(d, h);
  this.scene.overrideMaterial = null;
  a.autoClear = c;
}});
THREE.ShaderPass = function(a, c) {
  THREE.Pass.call(this);
  this.textureID = void 0 !== c ? c : "tDiffuse";
  a instanceof THREE.ShaderMaterial ? (this.uniforms = a.uniforms, this.material = a) : a && (this.uniforms = THREE.UniformsUtils.clone(a.uniforms), this.material = new THREE.ShaderMaterial({defines:Object.assign({}, a.defines), uniforms:this.uniforms, vertexShader:a.vertexShader, fragmentShader:a.fragmentShader}));
  this.fsQuad = new THREE.Pass.FullScreenQuad(this.material);
};
THREE.ShaderPass.prototype = Object.assign(Object.create(THREE.Pass.prototype), {constructor:THREE.ShaderPass, render:function(a, c, k, b, f) {
  this.uniforms[this.textureID] && (this.uniforms[this.textureID].value = k.texture);
  this.fsQuad.material = this.material;
  this.renderToScreen ? a.setRenderTarget(null) : (a.setRenderTarget(c), this.clear && a.clear(a.autoClearColor, a.autoClearDepth, a.autoClearStencil));
  this.fsQuad.render(a);
}});
THREE.MaskPass = function(a, c) {
  THREE.Pass.call(this);
  this.scene = a;
  this.camera = c;
  this.clear = !0;
  this.inverse = this.needsSwap = !1;
};
THREE.MaskPass.prototype = Object.assign(Object.create(THREE.Pass.prototype), {constructor:THREE.MaskPass, render:function(a, c, k, b, f) {
  b = a.context;
  f = a.state;
  f.buffers.color.setMask(!1);
  f.buffers.depth.setMask(!1);
  f.buffers.color.setLocked(!0);
  f.buffers.depth.setLocked(!0);
  if (this.inverse) {
    var d = 0;
    var h = 1;
  } else {
    d = 1, h = 0;
  }
  f.buffers.stencil.setTest(!0);
  f.buffers.stencil.setOp(b.REPLACE, b.REPLACE, b.REPLACE);
  f.buffers.stencil.setFunc(b.ALWAYS, d, 4294967295);
  f.buffers.stencil.setClear(h);
  a.setRenderTarget(k);
  this.clear && a.clear();
  a.render(this.scene, this.camera);
  a.setRenderTarget(c);
  this.clear && a.clear();
  a.render(this.scene, this.camera);
  f.buffers.color.setLocked(!1);
  f.buffers.depth.setLocked(!1);
  f.buffers.stencil.setFunc(b.EQUAL, 1, 4294967295);
  f.buffers.stencil.setOp(b.KEEP, b.KEEP, b.KEEP);
}});
THREE.ClearMaskPass = function() {
  THREE.Pass.call(this);
  this.needsSwap = !1;
};
THREE.ClearMaskPass.prototype = Object.create(THREE.Pass.prototype);
Object.assign(THREE.ClearMaskPass.prototype, {render:function(a, c, k, b, f) {
  a.state.buffers.stencil.setTest(!1);
}});
THREE.NURBSCurve = function(a, c, k, b, f) {
  THREE.Curve.call(this);
  this.degree = a;
  this.knots = c;
  this.controlPoints = [];
  this.startKnot = b || 0;
  this.endKnot = f || this.knots.length - 1;
  for (a = 0; a < k.length; ++a) {
    c = k[a], this.controlPoints[a] = new THREE.Vector4(c.x, c.y, c.z, c.w);
  }
};
THREE.NURBSCurve.prototype = Object.create(THREE.Curve.prototype);
THREE.NURBSCurve.prototype.constructor = THREE.NURBSCurve;
THREE.NURBSCurve.prototype.getPoint = function(a) {
  a = THREE.NURBSUtils.calcBSplinePoint(this.degree, this.knots, this.controlPoints, this.knots[this.startKnot] + a * (this.knots[this.endKnot] - this.knots[this.startKnot]));
  1 != a.w && a.divideScalar(a.w);
  return new THREE.Vector3(a.x, a.y, a.z);
};
THREE.NURBSCurve.prototype.getTangent = function(a) {
  a = THREE.NURBSUtils.calcNURBSDerivatives(this.degree, this.knots, this.controlPoints, this.knots[0] + a * (this.knots[this.knots.length - 1] - this.knots[0]), 1)[1].clone();
  a.normalize();
  return a;
};
THREE.NURBSSurface = function(a, c, k, b, f) {
  this.degree1 = a;
  this.degree2 = c;
  this.knots1 = k;
  this.knots2 = b;
  this.controlPoints = [];
  a = k.length - a - 1;
  c = b.length - c - 1;
  for (b = 0; b < a; ++b) {
    for (this.controlPoints[b] = [], k = 0; k < c; ++k) {
      var d = f[b][k];
      this.controlPoints[b][k] = new THREE.Vector4(d.x, d.y, d.z, d.w);
    }
  }
};
THREE.NURBSSurface.prototype = {constructor:THREE.NURBSSurface, getPoint:function(a, c, k) {
  THREE.NURBSUtils.calcSurfacePoint(this.degree1, this.degree2, this.knots1, this.knots2, this.controlPoints, this.knots1[0] + a * (this.knots1[this.knots1.length - 1] - this.knots1[0]), this.knots2[0] + c * (this.knots2[this.knots2.length - 1] - this.knots2[0]), k);
}};
THREE.NURBSUtils = {findSpan:function(a, c, k) {
  var b = k.length - a - 1;
  if (c >= k[b]) {
    return b - 1;
  }
  if (c <= k[a]) {
    return a;
  }
  for (var f = Math.floor((a + b) / 2); c < k[f] || c >= k[f + 1];) {
    c < k[f] ? b = f : a = f, f = Math.floor((a + b) / 2);
  }
  return f;
}, calcBasisFunctions:function(a, c, k, b) {
  for (var f = [], d = [], h = [], n = f[0] = 1; n <= k; ++n) {
    d[n] = c - b[a + 1 - n];
    h[n] = b[a + n] - c;
    for (var q = 0, m = 0; m < n; ++m) {
      var t = h[m + 1], e = d[n - m], l = f[m] / (t + e);
      f[m] = q + t * l;
      q = e * l;
    }
    f[n] = q;
  }
  return f;
}, calcBSplinePoint:function(a, c, k, b) {
  var f = this.findSpan(a, b, c);
  c = this.calcBasisFunctions(f, b, a, c);
  b = new THREE.Vector4(0, 0, 0, 0);
  for (var d = 0; d <= a; ++d) {
    var h = k[f - a + d], n = c[d], q = h.w * n;
    b.x += h.x * q;
    b.y += h.y * q;
    b.z += h.z * q;
    b.w += h.w * n;
  }
  return b;
}, calcBasisFunctionDerivatives:function(a, c, k, b, f) {
  for (var d = [], h = 0; h <= k; ++h) {
    d[h] = 0;
  }
  var n = [];
  for (h = 0; h <= b; ++h) {
    n[h] = d.slice(0);
  }
  var q = [];
  for (h = 0; h <= k; ++h) {
    q[h] = d.slice(0);
  }
  q[0][0] = 1;
  var m = d.slice(0), t = d.slice(0);
  for (h = 1; h <= k; ++h) {
    m[h] = c - f[a + 1 - h];
    t[h] = f[a + h] - c;
    for (var e = 0, l = 0; l < h; ++l) {
      var u = t[l + 1], w = m[h - l];
      q[h][l] = u + w;
      var y = q[l][h - 1] / q[h][l];
      q[l][h] = e + u * y;
      e = w * y;
    }
    q[h][h] = e;
  }
  for (h = 0; h <= k; ++h) {
    n[0][h] = q[h][k];
  }
  for (l = 0; l <= k; ++l) {
    a = 0;
    c = 1;
    f = [];
    for (h = 0; h <= k; ++h) {
      f[h] = d.slice(0);
    }
    for (m = f[0][0] = 1; m <= b; ++m) {
      t = 0;
      e = l - m;
      u = k - m;
      l >= m && (f[c][0] = f[a][0] / q[u + 1][e], t = f[c][0] * q[e][u]);
      w = l - 1 <= u ? m - 1 : k - l;
      for (h = -1 <= e ? 1 : -e; h <= w; ++h) {
        f[c][h] = (f[a][h] - f[a][h - 1]) / q[u + 1][e + h], t += f[c][h] * q[e + h][u];
      }
      l <= u && (f[c][m] = -f[a][m - 1] / q[u + 1][l], t += f[c][m] * q[l][u]);
      n[m][l] = t;
      h = a;
      a = c;
      c = h;
    }
  }
  l = k;
  for (m = 1; m <= b; ++m) {
    for (h = 0; h <= k; ++h) {
      n[m][h] *= l;
    }
    l *= k - m;
  }
  return n;
}, calcBSplineDerivatives:function(a, c, k, b, f) {
  var d = f < a ? f : a, h = [], n = this.findSpan(a, b, c);
  c = this.calcBasisFunctionDerivatives(n, b, a, d, c);
  b = [];
  for (var q = 0; q < k.length; ++q) {
    var m = k[q].clone(), t = m.w;
    m.x *= t;
    m.y *= t;
    m.z *= t;
    b[q] = m;
  }
  for (k = 0; k <= d; ++k) {
    m = b[n - a].clone().multiplyScalar(c[k][0]);
    for (q = 1; q <= a; ++q) {
      m.add(b[n - a + q].clone().multiplyScalar(c[k][q]));
    }
    h[k] = m;
  }
  for (k = d + 1; k <= f + 1; ++k) {
    h[k] = new THREE.Vector4(0, 0, 0);
  }
  return h;
}, calcKoverI:function(a, c) {
  for (var k = 1, b = 2; b <= a; ++b) {
    k *= b;
  }
  var f = 1;
  for (b = 2; b <= c; ++b) {
    f *= b;
  }
  for (b = 2; b <= a - c; ++b) {
    f *= b;
  }
  return k / f;
}, calcRationalCurveDerivatives:function(a) {
  for (var c = a.length, k = [], b = [], f = 0; f < c; ++f) {
    var d = a[f];
    k[f] = new THREE.Vector3(d.x, d.y, d.z);
    b[f] = d.w;
  }
  a = [];
  for (d = 0; d < c; ++d) {
    var h = k[d].clone();
    for (f = 1; f <= d; ++f) {
      h.sub(a[d - f].clone().multiplyScalar(this.calcKoverI(d, f) * b[f]));
    }
    a[d] = h.divideScalar(b[0]);
  }
  return a;
}, calcNURBSDerivatives:function(a, c, k, b, f) {
  a = this.calcBSplineDerivatives(a, c, k, b, f);
  return this.calcRationalCurveDerivatives(a);
}, calcSurfacePoint:function(a, c, k, b, f, d, h, n) {
  var q = this.findSpan(a, d, k), m = this.findSpan(c, h, b);
  k = this.calcBasisFunctions(q, d, a, k);
  b = this.calcBasisFunctions(m, h, c, b);
  h = [];
  for (d = 0; d <= c; ++d) {
    h[d] = new THREE.Vector4(0, 0, 0, 0);
    for (var t = 0; t <= a; ++t) {
      var e = f[q - a + t][m - c + d].clone(), l = e.w;
      e.x *= l;
      e.y *= l;
      e.z *= l;
      h[d].add(e.multiplyScalar(k[t]));
    }
  }
  a = new THREE.Vector4(0, 0, 0, 0);
  for (d = 0; d <= c; ++d) {
    a.add(h[d].multiplyScalar(b[d]));
  }
  a.divideScalar(a.w);
  n.set(a.x, a.y, a.z);
}};
THREE.Lensflare = function() {
  THREE.Mesh.call(this, THREE.Lensflare.Geometry, new THREE.MeshBasicMaterial({opacity:0, transparent:!0}));
  this.type = "Lensflare";
  this.frustumCulled = !1;
  this.renderOrder = Infinity;
  var a = new THREE.Vector3, c = new THREE.DataTexture(new Uint8Array(768), 16, 16, THREE.RGBFormat);
  c.minFilter = THREE.NearestFilter;
  c.magFilter = THREE.NearestFilter;
  c.wrapS = THREE.ClampToEdgeWrapping;
  c.wrapT = THREE.ClampToEdgeWrapping;
  c.needsUpdate = !0;
  var k = new THREE.DataTexture(new Uint8Array(768), 16, 16, THREE.RGBFormat);
  k.minFilter = THREE.NearestFilter;
  k.magFilter = THREE.NearestFilter;
  k.wrapS = THREE.ClampToEdgeWrapping;
  k.wrapT = THREE.ClampToEdgeWrapping;
  k.needsUpdate = !0;
  var b = THREE.Lensflare.Geometry, f = new THREE.RawShaderMaterial({uniforms:{scale:{value:null}, screenPosition:{value:null}}, vertexShader:"precision highp float;\nuniform vec3 screenPosition;\nuniform vec2 scale;\nattribute vec3 position;\nvoid main() {\n\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );\n}", fragmentShader:"precision highp float;\nvoid main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 1.0, 1.0 );\n}", depthTest:!0, depthWrite:!1, transparent:!1}), 
  d = new THREE.RawShaderMaterial({uniforms:{map:{value:c}, scale:{value:null}, screenPosition:{value:null}}, vertexShader:"precision highp float;\nuniform vec3 screenPosition;\nuniform vec2 scale;\nattribute vec3 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\n\tvUV = uv;\n\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );\n}", fragmentShader:"precision highp float;\nuniform sampler2D map;\nvarying vec2 vUV;\nvoid main() {\n\tgl_FragColor = texture2D( map, vUV );\n}", 
  depthTest:!1, depthWrite:!1, transparent:!1}), h = new THREE.Mesh(b, f), n = [], q = THREE.LensflareElement.Shader, m = new THREE.RawShaderMaterial({uniforms:{map:{value:null}, occlusionMap:{value:k}, color:{value:new THREE.Color(16777215)}, scale:{value:new THREE.Vector2}, screenPosition:{value:new THREE.Vector3}}, vertexShader:q.vertexShader, fragmentShader:q.fragmentShader, blending:THREE.AdditiveBlending, transparent:!0, depthWrite:!1}), t = new THREE.Mesh(b, m);
  this.addElement = function(a) {
    n.push(a);
  };
  var e = new THREE.Vector2, l = new THREE.Vector2, u = new THREE.Box2, w = new THREE.Vector4;
  this.onBeforeRender = function(q, x, p) {
    w.copy(q.getCurrentViewport());
    x = w.w / w.z;
    var v = w.z / 2, z = w.w / 2, y = 16 / w.w;
    e.set(y * x, y);
    u.min.set(w.x, w.y);
    u.max.set(w.x + (w.z - 16), w.y + (w.w - 16));
    a.setFromMatrixPosition(this.matrixWorld);
    a.applyMatrix4(p.matrixWorldInverse);
    a.applyMatrix4(p.projectionMatrix);
    l.x = w.x + a.x * v + v - 8;
    l.y = w.y + a.y * z + z - 8;
    if (u.containsPoint(l)) {
      q.copyFramebufferToTexture(l, c);
      v = f.uniforms;
      v.scale.value = e;
      v.screenPosition.value = a;
      q.renderBufferDirect(p, null, b, f, h, null);
      q.copyFramebufferToTexture(l, k);
      v = d.uniforms;
      v.scale.value = e;
      v.screenPosition.value = a;
      q.renderBufferDirect(p, null, b, d, h, null);
      z = 2 * -a.x;
      for (var A = 2 * -a.y, D = 0, E = n.length; D < E; D++) {
        x = n[D], v = m.uniforms, v.color.value.copy(x.color), v.map.value = x.texture, v.screenPosition.value.x = a.x + z * x.distance, v.screenPosition.value.y = a.y + A * x.distance, y = x.size / w.w, x = w.w / w.z, v.scale.value.set(y * x, y), m.uniformsNeedUpdate = !0, q.renderBufferDirect(p, null, b, m, t, null);
      }
    }
  };
  this.dispose = function() {
    f.dispose();
    d.dispose();
    m.dispose();
    c.dispose();
    k.dispose();
    for (var a = 0, b = n.length; a < b; a++) {
      n[a].texture.dispose();
    }
  };
};
THREE.Lensflare.prototype = Object.create(THREE.Mesh.prototype);
THREE.Lensflare.prototype.constructor = THREE.Lensflare;
THREE.Lensflare.prototype.isLensflare = !0;
THREE.LensflareElement = function(a, c, k, b) {
  this.texture = a;
  this.size = c || 1;
  this.distance = k || 0;
  this.color = b || new THREE.Color(16777215);
};
THREE.LensflareElement.Shader = {uniforms:{map:{value:null}, occlusionMap:{value:null}, color:{value:null}, scale:{value:null}, screenPosition:{value:null}}, vertexShader:"precision highp float;\nuniform vec3 screenPosition;\nuniform vec2 scale;\nuniform sampler2D occlusionMap;\nattribute vec3 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\n\tvUV = uv;\n\tvec2 pos = position.xy;\n\tvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\n\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\n\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\n\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\n\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\n\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\n\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\n\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\n\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\n\tvVisibility =        visibility.r / 9.0;\n\tvVisibility *= 1.0 - visibility.g / 9.0;\n\tvVisibility *=       visibility.b / 9.0;\n\tgl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}", 
fragmentShader:"precision highp float;\nuniform sampler2D map;\nuniform vec3 color;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\n\tvec4 texture = texture2D( map, vUV );\n\ttexture.a *= vVisibility;\n\tgl_FragColor = texture;\n\tgl_FragColor.rgb *= color;\n}"};
THREE.Lensflare.Geometry = function() {
  var a = new THREE.BufferGeometry, c = new Float32Array([-1, -1, 0, 0, 0, 1, -1, 0, 1, 0, 1, 1, 0, 1, 1, -1, 1, 0, 0, 1]);
  c = new THREE.InterleavedBuffer(c, 5);
  a.setIndex([0, 1, 2, 0, 2, 3]);
  a.addAttribute("position", new THREE.InterleavedBufferAttribute(c, 3, 0, !1));
  a.addAttribute("uv", new THREE.InterleavedBufferAttribute(c, 2, 3, !1));
  return a;
}();
THREE.Reflector = function(a, c) {
  THREE.Mesh.call(this, a);
  this.type = "Reflector";
  var k = this;
  c = c || {};
  a = void 0 !== c.color ? new THREE.Color(c.color) : new THREE.Color(8355711);
  var b = c.textureWidth || 512, f = c.textureHeight || 512, d = c.clipBias || 0, h = c.shader || THREE.Reflector.ReflectorShader, n = void 0 !== c.recursion ? c.recursion : 0, q = new THREE.Plane, m = new THREE.Vector3, t = new THREE.Vector3, e = new THREE.Vector3, l = new THREE.Matrix4, u = new THREE.Vector3(0, 0, -1), w = new THREE.Vector4, y = new THREE.Vector4, x = new THREE.Vector3, p = new THREE.Vector3, v = new THREE.Vector4, z = new THREE.Vector2, C = new THREE.Matrix4, A = new THREE.PerspectiveCamera, 
  D = new THREE.WebGLRenderTarget(b, f, {minFilter:THREE.LinearFilter, magFilter:THREE.LinearFilter, format:THREE.RGBFormat, stencilBuffer:!1});
  THREE.Math.isPowerOfTwo(b) && THREE.Math.isPowerOfTwo(f) || (D.texture.generateMipmaps = !1);
  c = new THREE.ShaderMaterial({uniforms:THREE.UniformsUtils.clone(h.uniforms), fragmentShader:h.fragmentShader, vertexShader:h.vertexShader});
  c.uniforms.tDiffuse.value = D.texture;
  c.uniforms.color.value = a;
  c.uniforms.textureMatrix.value = C;
  this.material = c;
  this.onBeforeRender = function(a, b, c) {
    if ("recursion" in c.userData) {
      if (c.userData.recursion === n) {
        return;
      }
      c.userData.recursion++;
    }
    t.setFromMatrixPosition(k.matrixWorld);
    e.setFromMatrixPosition(c.matrixWorld);
    l.extractRotation(k.matrixWorld);
    m.set(0, 0, 1);
    m.applyMatrix4(l);
    x.subVectors(t, e);
    if (!(0 < x.dot(m))) {
      x.reflect(m).negate();
      x.add(t);
      l.extractRotation(c.matrixWorld);
      u.set(0, 0, -1);
      u.applyMatrix4(l);
      u.add(e);
      p.subVectors(t, u);
      p.reflect(m).negate();
      p.add(t);
      A.position.copy(x);
      A.up.set(0, 1, 0);
      A.up.applyMatrix4(l);
      A.up.reflect(m);
      A.lookAt(p);
      A.far = c.far;
      A.updateMatrixWorld();
      A.projectionMatrix.copy(c.projectionMatrix);
      A.userData.recursion = 0;
      C.set(.5, 0, 0, .5, 0, .5, 0, .5, 0, 0, .5, .5, 0, 0, 0, 1);
      C.multiply(A.projectionMatrix);
      C.multiply(A.matrixWorldInverse);
      C.multiply(k.matrixWorld);
      q.setFromNormalAndCoplanarPoint(m, t);
      q.applyMatrix4(A.matrixWorldInverse);
      w.set(q.normal.x, q.normal.y, q.normal.z, q.constant);
      var f = A.projectionMatrix;
      v.x = (Math.sign(w.x) + f.elements[8]) / f.elements[0];
      v.y = (Math.sign(w.y) + f.elements[9]) / f.elements[5];
      v.z = -1;
      v.w = (1 + f.elements[10]) / f.elements[14];
      w.multiplyScalar(2 / w.dot(v));
      f.elements[2] = w.x;
      f.elements[6] = w.y;
      f.elements[10] = w.z + 1 - d;
      f.elements[14] = w.w;
      k.visible = !1;
      f = a.getRenderTarget();
      var h = a.vr.enabled, B = a.shadowMap.autoUpdate;
      a.vr.enabled = !1;
      a.shadowMap.autoUpdate = !1;
      a.setRenderTarget(D);
      a.clear();
      a.render(b, A);
      a.vr.enabled = h;
      a.shadowMap.autoUpdate = B;
      a.setRenderTarget(f);
      b = c.bounds;
      void 0 !== b && (a.getSize(z), c = a.getPixelRatio(), y.x = b.x * z.width * c, y.y = b.y * z.height * c, y.z = b.z * z.width * c, y.w = b.w * z.height * c, a.state.viewport(y));
      k.visible = !0;
    }
  };
  this.getRenderTarget = function() {
    return D;
  };
};
THREE.Reflector.prototype = Object.create(THREE.Mesh.prototype);
THREE.Reflector.prototype.constructor = THREE.Reflector;
THREE.Reflector.ReflectorShader = {uniforms:{color:{type:"c", value:null}, tDiffuse:{type:"t", value:null}, textureMatrix:{type:"m4", value:null}}, vertexShader:"uniform mat4 textureMatrix;\nvarying vec4 vUv;\nvoid main() {\n\tvUv = textureMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"uniform vec3 color;\nuniform sampler2D tDiffuse;\nvarying vec4 vUv;\nfloat blendOverlay( float base, float blend ) {\n\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );\n}\nvec3 blendOverlay( vec3 base, vec3 blend ) {\n\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ) );\n}\nvoid main() {\n\tvec4 base = texture2DProj( tDiffuse, vUv );\n\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );\n}"};
THREE.Refractor = function(a, c) {
  THREE.Mesh.call(this, a);
  this.type = "Refractor";
  var k = this;
  c = c || {};
  a = void 0 !== c.color ? new THREE.Color(c.color) : new THREE.Color(8355711);
  var b = c.textureWidth || 512, f = c.textureHeight || 512, d = c.clipBias || 0;
  c = c.shader || THREE.Refractor.RefractorShader;
  var h = new THREE.PerspectiveCamera;
  h.matrixAutoUpdate = !1;
  h.userData.refractor = !0;
  var n = new THREE.Plane, q = new THREE.Matrix4, m = new THREE.WebGLRenderTarget(b, f, {minFilter:THREE.LinearFilter, magFilter:THREE.LinearFilter, format:THREE.RGBFormat, stencilBuffer:!1});
  THREE.Math.isPowerOfTwo(b) && THREE.Math.isPowerOfTwo(f) || (m.texture.generateMipmaps = !1);
  this.material = new THREE.ShaderMaterial({uniforms:THREE.UniformsUtils.clone(c.uniforms), vertexShader:c.vertexShader, fragmentShader:c.fragmentShader, transparent:!0});
  this.material.uniforms.color.value = a;
  this.material.uniforms.tDiffuse.value = m.texture;
  this.material.uniforms.textureMatrix.value = q;
  var t = function() {
    var a = new THREE.Vector3, b = new THREE.Vector3, e = new THREE.Matrix4, c = new THREE.Vector3, d = new THREE.Vector3;
    return function(l) {
      a.setFromMatrixPosition(k.matrixWorld);
      b.setFromMatrixPosition(l.matrixWorld);
      c.subVectors(a, b);
      e.extractRotation(k.matrixWorld);
      d.set(0, 0, 1);
      d.applyMatrix4(e);
      return 0 > c.dot(d);
    };
  }(), e = function() {
    var a = new THREE.Vector3, b = new THREE.Vector3, e = new THREE.Quaternion, c = new THREE.Vector3;
    return function() {
      k.matrixWorld.decompose(b, e, c);
      a.set(0, 0, 1).applyQuaternion(e).normalize();
      a.negate();
      n.setFromNormalAndCoplanarPoint(a, b);
    };
  }(), l = function() {
    var a = new THREE.Plane, b = new THREE.Vector4, e = new THREE.Vector4;
    return function(c) {
      h.matrixWorld.copy(c.matrixWorld);
      h.matrixWorldInverse.getInverse(h.matrixWorld);
      h.projectionMatrix.copy(c.projectionMatrix);
      h.far = c.far;
      a.copy(n);
      a.applyMatrix4(h.matrixWorldInverse);
      b.set(a.normal.x, a.normal.y, a.normal.z, a.constant);
      c = h.projectionMatrix;
      e.x = (Math.sign(b.x) + c.elements[8]) / c.elements[0];
      e.y = (Math.sign(b.y) + c.elements[9]) / c.elements[5];
      e.z = -1;
      e.w = (1 + c.elements[10]) / c.elements[14];
      b.multiplyScalar(2 / b.dot(e));
      c.elements[2] = b.x;
      c.elements[6] = b.y;
      c.elements[10] = b.z + 1 - d;
      c.elements[14] = b.w;
    };
  }(), u = function() {
    var a = new THREE.Vector4, b = new THREE.Vector2;
    return function(e, c, d) {
      k.visible = !1;
      var l = e.getRenderTarget(), f = e.vr.enabled, p = e.shadowMap.autoUpdate;
      e.vr.enabled = !1;
      e.shadowMap.autoUpdate = !1;
      e.setRenderTarget(m);
      e.clear();
      e.render(c, h);
      e.vr.enabled = f;
      e.shadowMap.autoUpdate = p;
      e.setRenderTarget(l);
      c = d.bounds;
      void 0 !== c && (e.getSize(b), d = e.getPixelRatio(), a.x = c.x * b.width * d, a.y = c.y * b.height * d, a.z = c.z * b.width * d, a.w = c.w * b.height * d, e.state.viewport(a));
      k.visible = !0;
    };
  }();
  this.onBeforeRender = function(a, b, c) {
    !0 !== c.userData.refractor && !0 !== !t(c) && (e(), q.set(.5, 0, 0, .5, 0, .5, 0, .5, 0, 0, .5, .5, 0, 0, 0, 1), q.multiply(c.projectionMatrix), q.multiply(c.matrixWorldInverse), q.multiply(k.matrixWorld), l(c), u(a, b, c));
  };
  this.getRenderTarget = function() {
    return m;
  };
};
THREE.Refractor.prototype = Object.create(THREE.Mesh.prototype);
THREE.Refractor.prototype.constructor = THREE.Refractor;
THREE.Refractor.RefractorShader = {uniforms:{color:{type:"c", value:null}, tDiffuse:{type:"t", value:null}, textureMatrix:{type:"m4", value:null}}, vertexShader:"uniform mat4 textureMatrix;\nvarying vec4 vUv;\nvoid main() {\n\tvUv = textureMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", fragmentShader:"uniform vec3 color;\nuniform sampler2D tDiffuse;\nvarying vec4 vUv;\nfloat blendOverlay( float base, float blend ) {\n\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );\n}\nvec3 blendOverlay( vec3 base, vec3 blend ) {\n\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ) );\n}\nvoid main() {\n\tvec4 base = texture2DProj( tDiffuse, vUv );\n\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );\n}"};
THREE.TTFLoader = function(a) {
  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
  this.reversed = !1;
};
THREE.TTFLoader.prototype = {constructor:THREE.TTFLoader, load:function(a, c, k, b) {
  var f = this, d = new THREE.FileLoader(this.manager);
  d.setPath(this.path);
  d.setResponseType("arraybuffer");
  d.load(a, function(a) {
    c(f.parse(a));
  }, k, b);
}, setPath:function(a) {
  this.path = a;
  return this;
}, parse:function(a) {
  function c(a) {
    var b = [], c;
    a.forEach(function(a) {
      "m" === a.type.toLowerCase() ? (c = [a], b.push(c)) : "z" !== a.type.toLowerCase() && c.push(a);
    });
    var d = [];
    b.forEach(function(a) {
      var b = {type:"m", x:a[a.length - 1].x, y:a[a.length - 1].y};
      d.push(b);
      for (var c = a.length - 1; 0 < c; c--) {
        var f = a[c];
        b = {type:f.type};
        void 0 !== f.x2 && void 0 !== f.y2 ? (b.x1 = f.x2, b.y1 = f.y2, b.x2 = f.x1, b.y2 = f.y1) : void 0 !== f.x1 && void 0 !== f.y1 && (b.x1 = f.x1, b.y1 = f.y1);
        b.x = a[c - 1].x;
        b.y = a[c - 1].y;
        d.push(b);
      }
    });
    return d;
  }
  return "undefined" === typeof opentype ? (console.warn("THREE.TTFLoader: The loader requires opentype.js. Make sure it's included before using the loader."), null) : function(a, b) {
    for (var f = Math.round, d = {}, h = 1E5 / (72 * (a.unitsPerEm || 2048)), k = 0; k < a.glyphs.length; k++) {
      var q = a.glyphs.glyphs[k];
      if (void 0 !== q.unicode) {
        var m = {ha:f(q.advanceWidth * h), x_min:f(q.xMin * h), x_max:f(q.xMax * h), o:""};
        b && (q.path.commands = c(q.path.commands));
        q.path.commands.forEach(function(a, b) {
          "c" === a.type.toLowerCase() && (a.type = "b");
          m.o += a.type.toLowerCase() + " ";
          void 0 !== a.x && void 0 !== a.y && (m.o += f(a.x * h) + " " + f(a.y * h) + " ");
          void 0 !== a.x1 && void 0 !== a.y1 && (m.o += f(a.x1 * h) + " " + f(a.y1 * h) + " ");
          void 0 !== a.x2 && void 0 !== a.y2 && (m.o += f(a.x2 * h) + " " + f(a.y2 * h) + " ");
        });
        d[String.fromCharCode(q.unicode)] = m;
      }
    }
    return {glyphs:d, familyName:a.familyName, ascender:f(a.ascender * h), descender:f(a.descender * h), underlinePosition:a.tables.post.underlinePosition, underlineThickness:a.tables.post.underlineThickness, boundingBox:{xMin:a.tables.head.xMin, xMax:a.tables.head.xMax, yMin:a.tables.head.yMin, yMax:a.tables.head.yMax}, resolution:1E3, original_font_information:a.tables.name};
  }(opentype.parse(a), this.reversed);
}};
(function(a, c) {
  if ("function" === typeof define && define.amd) {
    define(["long"], c);
  } else {
    if ("function" === typeof require && "object" === typeof module && module && module.exports) {
      a = module;
      try {
        var k = require("long");
      } catch (b) {
      }
      k = c(k);
      a.exports = k;
    } else {
      (a.dcodeIO = a.dcodeIO || {}).ByteBuffer = c(a.dcodeIO.Long);
    }
  }
})(this, function(a) {
  function c(a) {
    var b = 0;
    return function() {
      return b < a.length ? a.charCodeAt(b++) : null;
    };
  }
  function k() {
    var a = [], b = [];
    return function() {
      if (0 === arguments.length) {
        return b.join("") + q.apply(String, a);
      }
      1024 < a.length + arguments.length && (b.push(q.apply(String, a)), a.length = 0);
      Array.prototype.push.apply(a, arguments);
    };
  }
  function b(a, b, c, d, f) {
    var e = 8 * f - d - 1;
    var l = (1 << e) - 1, h = l >> 1, k = -7;
    f = c ? f - 1 : 0;
    var m = c ? -1 : 1, n = a[b + f];
    f += m;
    c = n & (1 << -k) - 1;
    n >>= -k;
    for (k += e; 0 < k; c = 256 * c + a[b + f], f += m, k -= 8) {
    }
    e = c & (1 << -k) - 1;
    c >>= -k;
    for (k += d; 0 < k; e = 256 * e + a[b + f], f += m, k -= 8) {
    }
    if (0 === c) {
      c = 1 - h;
    } else {
      if (c === l) {
        return e ? NaN : Infinity * (n ? -1 : 1);
      }
      e += Math.pow(2, d);
      c -= h;
    }
    return (n ? -1 : 1) * e * Math.pow(2, c - d);
  }
  function f(a, b, c, d, f, h) {
    var e, l = 8 * h - f - 1, k = (1 << l) - 1, m = k >> 1, n = 23 === f ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    h = d ? 0 : h - 1;
    var t = d ? 1 : -1, u = 0 > b || 0 === b && 0 > 1 / b ? 1 : 0;
    b = Math.abs(b);
    for (isNaN(b) || Infinity === b ? (b = isNaN(b) ? 1 : 0, d = k) : (d = Math.floor(Math.log(b) / Math.LN2), 1 > b * (e = Math.pow(2, -d)) && (d--, e *= 2), b = 1 <= d + m ? b + n / e : b + n * Math.pow(2, 1 - m), 2 <= b * e && (d++, e /= 2), d + m >= k ? (b = 0, d = k) : 1 <= d + m ? (b = (b * e - 1) * Math.pow(2, f), d += m) : (b = b * Math.pow(2, m - 1) * Math.pow(2, f), d = 0)); 8 <= f; a[c + h] = b & 255, h += t, b /= 256, f -= 8) {
    }
    d = d << f | b;
    for (l += f; 0 < l; a[c + h] = d & 255, h += t, d /= 256, l -= 8) {
    }
    a[c + h - t] |= 128 * u;
  }
  var d = function(a, b, c) {
    "undefined" === typeof a && (a = d.DEFAULT_CAPACITY);
    "undefined" === typeof b && (b = d.DEFAULT_ENDIAN);
    "undefined" === typeof c && (c = d.DEFAULT_NOASSERT);
    if (!c) {
      a |= 0;
      if (0 > a) {
        throw RangeError("Illegal capacity");
      }
      b = !!b;
      c = !!c;
    }
    this.buffer = 0 === a ? n : new ArrayBuffer(a);
    this.view = 0 === a ? null : new Uint8Array(this.buffer);
    this.offset = 0;
    this.markedOffset = -1;
    this.limit = a;
    this.littleEndian = b;
    this.noAssert = c;
  };
  d.VERSION = "5.0.1";
  d.LITTLE_ENDIAN = !0;
  d.BIG_ENDIAN = !1;
  d.DEFAULT_CAPACITY = 16;
  d.DEFAULT_ENDIAN = d.BIG_ENDIAN;
  d.DEFAULT_NOASSERT = !1;
  d.Long = a || null;
  var h = d.prototype;
  Object.defineProperty(h, "__isByteBuffer__", {value:!0, enumerable:!1, configurable:!1});
  var n = new ArrayBuffer(0), q = String.fromCharCode;
  d.accessor = function() {
    return Uint8Array;
  };
  d.allocate = function(a, b, c) {
    return new d(a, b, c);
  };
  d.concat = function(a, b, c, f) {
    if ("boolean" === typeof b || "string" !== typeof b) {
      f = c, c = b, b = void 0;
    }
    for (var e = 0, l = 0, h = a.length, k; l < h; ++l) {
      d.isByteBuffer(a[l]) || (a[l] = d.wrap(a[l], b)), k = a[l].limit - a[l].offset, 0 < k && (e += k);
    }
    if (0 === e) {
      return new d(0, c, f);
    }
    b = new d(e, c, f);
    for (l = 0; l < h;) {
      c = a[l++], k = c.limit - c.offset, 0 >= k || (b.view.set(c.view.subarray(c.offset, c.limit), b.offset), b.offset += k);
    }
    b.limit = b.offset;
    b.offset = 0;
    return b;
  };
  d.isByteBuffer = function(a) {
    return !0 === (a && a.__isByteBuffer__);
  };
  d.type = function() {
    return ArrayBuffer;
  };
  d.wrap = function(a, b, c, f) {
    "string" !== typeof b && (f = c, c = b, b = void 0);
    if ("string" === typeof a) {
      switch("undefined" === typeof b && (b = "utf8"), b) {
        case "base64":
          return d.fromBase64(a, c);
        case "hex":
          return d.fromHex(a, c);
        case "binary":
          return d.fromBinary(a, c);
        case "utf8":
          return d.fromUTF8(a, c);
        case "debug":
          return d.fromDebug(a, c);
        default:
          throw Error("Unsupported encoding: " + b);
      }
    }
    if (null === a || "object" !== typeof a) {
      throw TypeError("Illegal buffer");
    }
    if (d.isByteBuffer(a)) {
      return b = h.clone.call(a), b.markedOffset = -1, b;
    }
    if (a instanceof Uint8Array) {
      b = new d(0, c, f), 0 < a.length && (b.buffer = a.buffer, b.offset = a.byteOffset, b.limit = a.byteOffset + a.byteLength, b.view = new Uint8Array(a.buffer));
    } else {
      if (a instanceof ArrayBuffer) {
        b = new d(0, c, f), 0 < a.byteLength && (b.buffer = a, b.offset = 0, b.limit = a.byteLength, b.view = 0 < a.byteLength ? new Uint8Array(a) : null);
      } else {
        if ("[object Array]" === Object.prototype.toString.call(a)) {
          for (b = new d(a.length, c, f), b.limit = a.length, c = 0; c < a.length; ++c) {
            b.view[c] = a[c];
          }
        } else {
          throw TypeError("Illegal buffer");
        }
      }
    }
    return b;
  };
  h.writeBitSet = function(a, b) {
    var e = "undefined" === typeof b;
    e && (b = this.offset);
    if (!this.noAssert) {
      if (!(a instanceof Array)) {
        throw TypeError("Illegal BitSet: Not an array");
      }
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+0) <= " + this.buffer.byteLength);
      }
    }
    var c = b, d = a.length, l = d >> 3, f = 0;
    for (b += this.writeVarint32(d, b); l--;) {
      var h = !!a[f++] & 1 | (!!a[f++] & 1) << 1 | (!!a[f++] & 1) << 2 | (!!a[f++] & 1) << 3 | (!!a[f++] & 1) << 4 | (!!a[f++] & 1) << 5 | (!!a[f++] & 1) << 6 | (!!a[f++] & 1) << 7;
      this.writeByte(h, b++);
    }
    if (f < d) {
      for (h = l = 0; f < d;) {
        h |= (!!a[f++] & 1) << l++;
      }
      this.writeByte(h, b++);
    }
    return e ? (this.offset = b, this) : b - c;
  };
  h.readBitSet = function(a) {
    var b = "undefined" === typeof a;
    b && (a = this.offset);
    var e = this.readVarint32(a), c = e.value, d = c >> 3, f = 0, h = [];
    for (a += e.length; d--;) {
      e = this.readByte(a++), h[f++] = !!(e & 1), h[f++] = !!(e & 2), h[f++] = !!(e & 4), h[f++] = !!(e & 8), h[f++] = !!(e & 16), h[f++] = !!(e & 32), h[f++] = !!(e & 64), h[f++] = !!(e & 128);
    }
    if (f < c) {
      for (d = 0, e = this.readByte(a++); f < c;) {
        h[f++] = !!(e >> d++ & 1);
      }
    }
    b && (this.offset = a);
    return h;
  };
  h.readBytes = function(a, b) {
    var e = "undefined" === typeof b;
    e && (b = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + a > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+" + a + ") <= " + this.buffer.byteLength);
      }
    }
    b = this.slice(b, b + a);
    e && (this.offset += a);
    return b;
  };
  h.writeBytes = h.append;
  h.writeInt8 = function(a, b) {
    var e = "undefined" === typeof b;
    e && (b = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal value: " + a + " (not an integer)");
      }
      a |= 0;
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+0) <= " + this.buffer.byteLength);
      }
    }
    b += 1;
    var c = this.buffer.byteLength;
    b > c && this.resize((c *= 2) > b ? c : b);
    this.view[b - 1] = a;
    e && (this.offset += 1);
    return this;
  };
  h.writeByte = h.writeInt8;
  h.readInt8 = function(a) {
    var b = "undefined" === typeof a;
    b && (a = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal offset: " + a + " (not an integer)");
      }
      a >>>= 0;
      if (0 > a || a + 1 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + a + " (+1) <= " + this.buffer.byteLength);
      }
    }
    a = this.view[a];
    128 === (a & 128) && (a = -(255 - a + 1));
    b && (this.offset += 1);
    return a;
  };
  h.readByte = h.readInt8;
  h.writeUint8 = function(a, b) {
    var e = "undefined" === typeof b;
    e && (b = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal value: " + a + " (not an integer)");
      }
      a >>>= 0;
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+0) <= " + this.buffer.byteLength);
      }
    }
    b += 1;
    var c = this.buffer.byteLength;
    b > c && this.resize((c *= 2) > b ? c : b);
    this.view[b - 1] = a;
    e && (this.offset += 1);
    return this;
  };
  h.writeUInt8 = h.writeUint8;
  h.readUint8 = function(a) {
    var b = "undefined" === typeof a;
    b && (a = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal offset: " + a + " (not an integer)");
      }
      a >>>= 0;
      if (0 > a || a + 1 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + a + " (+1) <= " + this.buffer.byteLength);
      }
    }
    a = this.view[a];
    b && (this.offset += 1);
    return a;
  };
  h.readUInt8 = h.readUint8;
  h.writeInt16 = function(a, b) {
    var e = "undefined" === typeof b;
    e && (b = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal value: " + a + " (not an integer)");
      }
      a |= 0;
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+0) <= " + this.buffer.byteLength);
      }
    }
    b += 2;
    var c = this.buffer.byteLength;
    b > c && this.resize((c *= 2) > b ? c : b);
    b -= 2;
    this.littleEndian ? (this.view[b + 1] = (a & 65280) >>> 8, this.view[b] = a & 255) : (this.view[b] = (a & 65280) >>> 8, this.view[b + 1] = a & 255);
    e && (this.offset += 2);
    return this;
  };
  h.writeShort = h.writeInt16;
  h.readInt16 = function(a) {
    var b = "undefined" === typeof a;
    b && (a = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal offset: " + a + " (not an integer)");
      }
      a >>>= 0;
      if (0 > a || a + 2 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + a + " (+2) <= " + this.buffer.byteLength);
      }
    }
    var e = 0;
    this.littleEndian ? (e = this.view[a], e |= this.view[a + 1] << 8) : (e = this.view[a] << 8, e |= this.view[a + 1]);
    32768 === (e & 32768) && (e = -(65535 - e + 1));
    b && (this.offset += 2);
    return e;
  };
  h.readShort = h.readInt16;
  h.writeUint16 = function(a, b) {
    var e = "undefined" === typeof b;
    e && (b = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal value: " + a + " (not an integer)");
      }
      a >>>= 0;
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+0) <= " + this.buffer.byteLength);
      }
    }
    b += 2;
    var c = this.buffer.byteLength;
    b > c && this.resize((c *= 2) > b ? c : b);
    b -= 2;
    this.littleEndian ? (this.view[b + 1] = (a & 65280) >>> 8, this.view[b] = a & 255) : (this.view[b] = (a & 65280) >>> 8, this.view[b + 1] = a & 255);
    e && (this.offset += 2);
    return this;
  };
  h.writeUInt16 = h.writeUint16;
  h.readUint16 = function(a) {
    var b = "undefined" === typeof a;
    b && (a = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal offset: " + a + " (not an integer)");
      }
      a >>>= 0;
      if (0 > a || a + 2 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + a + " (+2) <= " + this.buffer.byteLength);
      }
    }
    var e = 0;
    this.littleEndian ? (e = this.view[a], e |= this.view[a + 1] << 8) : (e = this.view[a] << 8, e |= this.view[a + 1]);
    b && (this.offset += 2);
    return e;
  };
  h.readUInt16 = h.readUint16;
  h.writeInt32 = function(a, b) {
    var e = "undefined" === typeof b;
    e && (b = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal value: " + a + " (not an integer)");
      }
      a |= 0;
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+0) <= " + this.buffer.byteLength);
      }
    }
    b += 4;
    var c = this.buffer.byteLength;
    b > c && this.resize((c *= 2) > b ? c : b);
    b -= 4;
    this.littleEndian ? (this.view[b + 3] = a >>> 24 & 255, this.view[b + 2] = a >>> 16 & 255, this.view[b + 1] = a >>> 8 & 255, this.view[b] = a & 255) : (this.view[b] = a >>> 24 & 255, this.view[b + 1] = a >>> 16 & 255, this.view[b + 2] = a >>> 8 & 255, this.view[b + 3] = a & 255);
    e && (this.offset += 4);
    return this;
  };
  h.writeInt = h.writeInt32;
  h.readInt32 = function(a) {
    var b = "undefined" === typeof a;
    b && (a = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal offset: " + a + " (not an integer)");
      }
      a >>>= 0;
      if (0 > a || a + 4 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + a + " (+4) <= " + this.buffer.byteLength);
      }
    }
    var e = 0;
    this.littleEndian ? (e = this.view[a + 2] << 16, e |= this.view[a + 1] << 8, e |= this.view[a], e += this.view[a + 3] << 24 >>> 0) : (e = this.view[a + 1] << 16, e |= this.view[a + 2] << 8, e |= this.view[a + 3], e += this.view[a] << 24 >>> 0);
    b && (this.offset += 4);
    return e | 0;
  };
  h.readInt = h.readInt32;
  h.writeUint32 = function(a, b) {
    var e = "undefined" === typeof b;
    e && (b = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal value: " + a + " (not an integer)");
      }
      a >>>= 0;
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+0) <= " + this.buffer.byteLength);
      }
    }
    b += 4;
    var c = this.buffer.byteLength;
    b > c && this.resize((c *= 2) > b ? c : b);
    b -= 4;
    this.littleEndian ? (this.view[b + 3] = a >>> 24 & 255, this.view[b + 2] = a >>> 16 & 255, this.view[b + 1] = a >>> 8 & 255, this.view[b] = a & 255) : (this.view[b] = a >>> 24 & 255, this.view[b + 1] = a >>> 16 & 255, this.view[b + 2] = a >>> 8 & 255, this.view[b + 3] = a & 255);
    e && (this.offset += 4);
    return this;
  };
  h.writeUInt32 = h.writeUint32;
  h.readUint32 = function(a) {
    var b = "undefined" === typeof a;
    b && (a = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal offset: " + a + " (not an integer)");
      }
      a >>>= 0;
      if (0 > a || a + 4 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + a + " (+4) <= " + this.buffer.byteLength);
      }
    }
    var e = 0;
    this.littleEndian ? (e = this.view[a + 2] << 16, e |= this.view[a + 1] << 8, e |= this.view[a], e += this.view[a + 3] << 24 >>> 0) : (e = this.view[a + 1] << 16, e |= this.view[a + 2] << 8, e |= this.view[a + 3], e += this.view[a] << 24 >>> 0);
    b && (this.offset += 4);
    return e;
  };
  h.readUInt32 = h.readUint32;
  a && (h.writeInt64 = function(b, c) {
    var e = "undefined" === typeof c;
    e && (c = this.offset);
    if (!this.noAssert) {
      if ("number" === typeof b) {
        b = a.fromNumber(b);
      } else {
        if ("string" === typeof b) {
          b = a.fromString(b);
        } else {
          if (!(b && b instanceof a)) {
            throw TypeError("Illegal value: " + b + " (not an integer or Long)");
          }
        }
      }
      if ("number" !== typeof c || 0 !== c % 1) {
        throw TypeError("Illegal offset: " + c + " (not an integer)");
      }
      c >>>= 0;
      if (0 > c || c + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + c + " (+0) <= " + this.buffer.byteLength);
      }
    }
    "number" === typeof b ? b = a.fromNumber(b) : "string" === typeof b && (b = a.fromString(b));
    c += 8;
    var d = this.buffer.byteLength;
    c > d && this.resize((d *= 2) > c ? d : c);
    c -= 8;
    d = b.low;
    b = b.high;
    this.littleEndian ? (this.view[c + 3] = d >>> 24 & 255, this.view[c + 2] = d >>> 16 & 255, this.view[c + 1] = d >>> 8 & 255, this.view[c] = d & 255, c += 4, this.view[c + 3] = b >>> 24 & 255, this.view[c + 2] = b >>> 16 & 255, this.view[c + 1] = b >>> 8 & 255, this.view[c] = b & 255) : (this.view[c] = b >>> 24 & 255, this.view[c + 1] = b >>> 16 & 255, this.view[c + 2] = b >>> 8 & 255, this.view[c + 3] = b & 255, c += 4, this.view[c] = d >>> 24 & 255, this.view[c + 1] = d >>> 16 & 255, this.view[c + 
    2] = d >>> 8 & 255, this.view[c + 3] = d & 255);
    e && (this.offset += 8);
    return this;
  }, h.writeLong = h.writeInt64, h.readInt64 = function(b) {
    var e = "undefined" === typeof b;
    e && (b = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + 8 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+8) <= " + this.buffer.byteLength);
      }
    }
    var c = 0, d = 0;
    this.littleEndian ? (c = this.view[b + 2] << 16, c |= this.view[b + 1] << 8, c |= this.view[b], c += this.view[b + 3] << 24 >>> 0, b += 4, d = this.view[b + 2] << 16, d |= this.view[b + 1] << 8, d |= this.view[b], d += this.view[b + 3] << 24 >>> 0) : (d = this.view[b + 1] << 16, d |= this.view[b + 2] << 8, d |= this.view[b + 3], d += this.view[b] << 24 >>> 0, b += 4, c = this.view[b + 1] << 16, c |= this.view[b + 2] << 8, c |= this.view[b + 3], c += this.view[b] << 24 >>> 0);
    b = new a(c, d, !1);
    e && (this.offset += 8);
    return b;
  }, h.readLong = h.readInt64, h.writeUint64 = function(b, c) {
    var e = "undefined" === typeof c;
    e && (c = this.offset);
    if (!this.noAssert) {
      if ("number" === typeof b) {
        b = a.fromNumber(b);
      } else {
        if ("string" === typeof b) {
          b = a.fromString(b);
        } else {
          if (!(b && b instanceof a)) {
            throw TypeError("Illegal value: " + b + " (not an integer or Long)");
          }
        }
      }
      if ("number" !== typeof c || 0 !== c % 1) {
        throw TypeError("Illegal offset: " + c + " (not an integer)");
      }
      c >>>= 0;
      if (0 > c || c + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + c + " (+0) <= " + this.buffer.byteLength);
      }
    }
    "number" === typeof b ? b = a.fromNumber(b) : "string" === typeof b && (b = a.fromString(b));
    c += 8;
    var d = this.buffer.byteLength;
    c > d && this.resize((d *= 2) > c ? d : c);
    c -= 8;
    d = b.low;
    b = b.high;
    this.littleEndian ? (this.view[c + 3] = d >>> 24 & 255, this.view[c + 2] = d >>> 16 & 255, this.view[c + 1] = d >>> 8 & 255, this.view[c] = d & 255, c += 4, this.view[c + 3] = b >>> 24 & 255, this.view[c + 2] = b >>> 16 & 255, this.view[c + 1] = b >>> 8 & 255, this.view[c] = b & 255) : (this.view[c] = b >>> 24 & 255, this.view[c + 1] = b >>> 16 & 255, this.view[c + 2] = b >>> 8 & 255, this.view[c + 3] = b & 255, c += 4, this.view[c] = d >>> 24 & 255, this.view[c + 1] = d >>> 16 & 255, this.view[c + 
    2] = d >>> 8 & 255, this.view[c + 3] = d & 255);
    e && (this.offset += 8);
    return this;
  }, h.writeUInt64 = h.writeUint64, h.readUint64 = function(b) {
    var e = "undefined" === typeof b;
    e && (b = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + 8 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+8) <= " + this.buffer.byteLength);
      }
    }
    var c = 0, d = 0;
    this.littleEndian ? (c = this.view[b + 2] << 16, c |= this.view[b + 1] << 8, c |= this.view[b], c += this.view[b + 3] << 24 >>> 0, b += 4, d = this.view[b + 2] << 16, d |= this.view[b + 1] << 8, d |= this.view[b], d += this.view[b + 3] << 24 >>> 0) : (d = this.view[b + 1] << 16, d |= this.view[b + 2] << 8, d |= this.view[b + 3], d += this.view[b] << 24 >>> 0, b += 4, c = this.view[b + 1] << 16, c |= this.view[b + 2] << 8, c |= this.view[b + 3], c += this.view[b] << 24 >>> 0);
    b = new a(c, d, !0);
    e && (this.offset += 8);
    return b;
  }, h.readUInt64 = h.readUint64);
  h.writeFloat32 = function(a, b) {
    var e = "undefined" === typeof b;
    e && (b = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a) {
        throw TypeError("Illegal value: " + a + " (not a number)");
      }
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+0) <= " + this.buffer.byteLength);
      }
    }
    b += 4;
    var c = this.buffer.byteLength;
    b > c && this.resize((c *= 2) > b ? c : b);
    f(this.view, a, b - 4, this.littleEndian, 23, 4);
    e && (this.offset += 4);
    return this;
  };
  h.writeFloat = h.writeFloat32;
  h.readFloat32 = function(a) {
    var e = "undefined" === typeof a;
    e && (a = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal offset: " + a + " (not an integer)");
      }
      a >>>= 0;
      if (0 > a || a + 4 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + a + " (+4) <= " + this.buffer.byteLength);
      }
    }
    a = b(this.view, a, this.littleEndian, 23, 4);
    e && (this.offset += 4);
    return a;
  };
  h.readFloat = h.readFloat32;
  h.writeFloat64 = function(a, b) {
    var e = "undefined" === typeof b;
    e && (b = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a) {
        throw TypeError("Illegal value: " + a + " (not a number)");
      }
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+0) <= " + this.buffer.byteLength);
      }
    }
    b += 8;
    var c = this.buffer.byteLength;
    b > c && this.resize((c *= 2) > b ? c : b);
    f(this.view, a, b - 8, this.littleEndian, 52, 8);
    e && (this.offset += 8);
    return this;
  };
  h.writeDouble = h.writeFloat64;
  h.readFloat64 = function(a) {
    var e = "undefined" === typeof a;
    e && (a = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal offset: " + a + " (not an integer)");
      }
      a >>>= 0;
      if (0 > a || a + 8 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + a + " (+8) <= " + this.buffer.byteLength);
      }
    }
    a = b(this.view, a, this.littleEndian, 52, 8);
    e && (this.offset += 8);
    return a;
  };
  h.readDouble = h.readFloat64;
  d.MAX_VARINT32_BYTES = 5;
  d.calculateVarint32 = function(a) {
    a >>>= 0;
    return 128 > a ? 1 : 16384 > a ? 2 : 2097152 > a ? 3 : 268435456 > a ? 4 : 5;
  };
  d.zigZagEncode32 = function(a) {
    return ((a |= 0) << 1 ^ a >> 31) >>> 0;
  };
  d.zigZagDecode32 = function(a) {
    return a >>> 1 ^ -(a & 1) | 0;
  };
  h.writeVarint32 = function(a, b) {
    var e = "undefined" === typeof b;
    e && (b = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal value: " + a + " (not an integer)");
      }
      a |= 0;
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+0) <= " + this.buffer.byteLength);
      }
    }
    var c = d.calculateVarint32(a);
    b += c;
    var f = this.buffer.byteLength;
    b > f && this.resize((f *= 2) > b ? f : b);
    b -= c;
    for (a >>>= 0; 128 <= a;) {
      f = a & 127 | 128, this.view[b++] = f, a >>>= 7;
    }
    this.view[b++] = a;
    return e ? (this.offset = b, this) : c;
  };
  h.writeVarint32ZigZag = function(a, b) {
    return this.writeVarint32(d.zigZagEncode32(a), b);
  };
  h.readVarint32 = function(a) {
    var b = "undefined" === typeof a;
    b && (a = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal offset: " + a + " (not an integer)");
      }
      a >>>= 0;
      if (0 > a || a + 1 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + a + " (+1) <= " + this.buffer.byteLength);
      }
    }
    var e = 0, c = 0;
    do {
      if (!this.noAssert && a > this.limit) {
        throw a = Error("Truncated"), a.truncated = !0, a;
      }
      var d = this.view[a++];
      5 > e && (c |= (d & 127) << 7 * e);
      ++e;
    } while (0 !== (d & 128));
    c |= 0;
    return b ? (this.offset = a, c) : {value:c, length:e};
  };
  h.readVarint32ZigZag = function(a) {
    a = this.readVarint32(a);
    "object" === typeof a ? a.value = d.zigZagDecode32(a.value) : a = d.zigZagDecode32(a);
    return a;
  };
  a && (d.MAX_VARINT64_BYTES = 10, d.calculateVarint64 = function(b) {
    "number" === typeof b ? b = a.fromNumber(b) : "string" === typeof b && (b = a.fromString(b));
    var e = b.toInt() >>> 0, c = b.shiftRightUnsigned(28).toInt() >>> 0;
    b = b.shiftRightUnsigned(56).toInt() >>> 0;
    return 0 == b ? 0 == c ? 16384 > e ? 128 > e ? 1 : 2 : 2097152 > e ? 3 : 4 : 16384 > c ? 128 > c ? 5 : 6 : 2097152 > c ? 7 : 8 : 128 > b ? 9 : 10;
  }, d.zigZagEncode64 = function(b) {
    "number" === typeof b ? b = a.fromNumber(b, !1) : "string" === typeof b ? b = a.fromString(b, !1) : !1 !== b.unsigned && (b = b.toSigned());
    return b.shiftLeft(1).xor(b.shiftRight(63)).toUnsigned();
  }, d.zigZagDecode64 = function(b) {
    "number" === typeof b ? b = a.fromNumber(b, !1) : "string" === typeof b ? b = a.fromString(b, !1) : !1 !== b.unsigned && (b = b.toSigned());
    return b.shiftRightUnsigned(1).xor(b.and(a.ONE).toSigned().negate()).toSigned();
  }, h.writeVarint64 = function(b, c) {
    var e = "undefined" === typeof c;
    e && (c = this.offset);
    if (!this.noAssert) {
      if ("number" === typeof b) {
        b = a.fromNumber(b);
      } else {
        if ("string" === typeof b) {
          b = a.fromString(b);
        } else {
          if (!(b && b instanceof a)) {
            throw TypeError("Illegal value: " + b + " (not an integer or Long)");
          }
        }
      }
      if ("number" !== typeof c || 0 !== c % 1) {
        throw TypeError("Illegal offset: " + c + " (not an integer)");
      }
      c >>>= 0;
      if (0 > c || c + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + c + " (+0) <= " + this.buffer.byteLength);
      }
    }
    "number" === typeof b ? b = a.fromNumber(b, !1) : "string" === typeof b ? b = a.fromString(b, !1) : !1 !== b.unsigned && (b = b.toSigned());
    var f = d.calculateVarint64(b), l = b.toInt() >>> 0, h = b.shiftRightUnsigned(28).toInt() >>> 0;
    b = b.shiftRightUnsigned(56).toInt() >>> 0;
    c += f;
    var p = this.buffer.byteLength;
    c > p && this.resize((p *= 2) > c ? p : c);
    c -= f;
    switch(f) {
      case 10:
        this.view[c + 9] = b >>> 7 & 1;
      case 9:
        this.view[c + 8] = 9 !== f ? b | 128 : b & 127;
      case 8:
        this.view[c + 7] = 8 !== f ? h >>> 21 | 128 : h >>> 21 & 127;
      case 7:
        this.view[c + 6] = 7 !== f ? h >>> 14 | 128 : h >>> 14 & 127;
      case 6:
        this.view[c + 5] = 6 !== f ? h >>> 7 | 128 : h >>> 7 & 127;
      case 5:
        this.view[c + 4] = 5 !== f ? h | 128 : h & 127;
      case 4:
        this.view[c + 3] = 4 !== f ? l >>> 21 | 128 : l >>> 21 & 127;
      case 3:
        this.view[c + 2] = 3 !== f ? l >>> 14 | 128 : l >>> 14 & 127;
      case 2:
        this.view[c + 1] = 2 !== f ? l >>> 7 | 128 : l >>> 7 & 127;
      case 1:
        this.view[c] = 1 !== f ? l | 128 : l & 127;
    }
    return e ? (this.offset += f, this) : f;
  }, h.writeVarint64ZigZag = function(a, b) {
    return this.writeVarint64(d.zigZagEncode64(a), b);
  }, h.readVarint64 = function(b) {
    var e = "undefined" === typeof b;
    e && (b = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + 1 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+1) <= " + this.buffer.byteLength);
      }
    }
    var c = b, d = 0, f = 0;
    var h = this.view[b++];
    var p = h & 127;
    if (h & 128 && (h = this.view[b++], p |= (h & 127) << 7, h & 128 || this.noAssert && "undefined" === typeof h) && (h = this.view[b++], p |= (h & 127) << 14, h & 128 || this.noAssert && "undefined" === typeof h) && (h = this.view[b++], p |= (h & 127) << 21, h & 128 || this.noAssert && "undefined" === typeof h) && (h = this.view[b++], d = h & 127, h & 128 || this.noAssert && "undefined" === typeof h) && (h = this.view[b++], d |= (h & 127) << 7, h & 128 || this.noAssert && "undefined" === typeof h) && 
    (h = this.view[b++], d |= (h & 127) << 14, h & 128 || this.noAssert && "undefined" === typeof h) && (h = this.view[b++], d |= (h & 127) << 21, h & 128 || this.noAssert && "undefined" === typeof h) && (h = this.view[b++], f = h & 127, h & 128 || this.noAssert && "undefined" === typeof h) && (h = this.view[b++], f |= (h & 127) << 7, h & 128 || this.noAssert && "undefined" === typeof h)) {
      throw Error("Buffer overrun");
    }
    p = a.fromBits(p | d << 28, d >>> 4 | f << 24, !1);
    return e ? (this.offset = b, p) : {value:p, length:b - c};
  }, h.readVarint64ZigZag = function(b) {
    (b = this.readVarint64(b)) && b.value instanceof a ? b.value = d.zigZagDecode64(b.value) : b = d.zigZagDecode64(b);
    return b;
  });
  h.writeCString = function(a, b) {
    var e = "undefined" === typeof b;
    e && (b = this.offset);
    var d, f = a.length;
    if (!this.noAssert) {
      if ("string" !== typeof a) {
        throw TypeError("Illegal str: Not a string");
      }
      for (d = 0; d < f; ++d) {
        if (0 === a.charCodeAt(d)) {
          throw RangeError("Illegal str: Contains NULL-characters");
        }
      }
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+0) <= " + this.buffer.byteLength);
      }
    }
    f = t.calculateUTF16asUTF8(c(a))[1];
    b += f + 1;
    d = this.buffer.byteLength;
    b > d && this.resize((d *= 2) > b ? d : b);
    b -= f + 1;
    t.encodeUTF16toUTF8(c(a), function(a) {
      this.view[b++] = a;
    }.bind(this));
    this.view[b++] = 0;
    return e ? (this.offset = b, this) : f;
  };
  h.readCString = function(a) {
    var b = "undefined" === typeof a;
    b && (a = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal offset: " + a + " (not an integer)");
      }
      a >>>= 0;
      if (0 > a || a + 1 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + a + " (+1) <= " + this.buffer.byteLength);
      }
    }
    var e = a, c, d = -1;
    t.decodeUTF8toUTF16(function() {
      if (0 === d) {
        return null;
      }
      if (a >= this.limit) {
        throw RangeError("Illegal range: Truncated data, " + a + " < " + this.limit);
      }
      d = this.view[a++];
      return 0 === d ? null : d;
    }.bind(this), c = k(), !0);
    return b ? (this.offset = a, c()) : {string:c(), length:a - e};
  };
  h.writeIString = function(a, b) {
    var e = "undefined" === typeof b;
    e && (b = this.offset);
    if (!this.noAssert) {
      if ("string" !== typeof a) {
        throw TypeError("Illegal str: Not a string");
      }
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+0) <= " + this.buffer.byteLength);
      }
    }
    var d = b;
    var f = t.calculateUTF16asUTF8(c(a), this.noAssert)[1];
    b += 4 + f;
    var l = this.buffer.byteLength;
    b > l && this.resize((l *= 2) > b ? l : b);
    b -= 4 + f;
    this.littleEndian ? (this.view[b + 3] = f >>> 24 & 255, this.view[b + 2] = f >>> 16 & 255, this.view[b + 1] = f >>> 8 & 255, this.view[b] = f & 255) : (this.view[b] = f >>> 24 & 255, this.view[b + 1] = f >>> 16 & 255, this.view[b + 2] = f >>> 8 & 255, this.view[b + 3] = f & 255);
    b += 4;
    t.encodeUTF16toUTF8(c(a), function(a) {
      this.view[b++] = a;
    }.bind(this));
    if (b !== d + 4 + f) {
      throw RangeError("Illegal range: Truncated data, " + b + " == " + (b + 4 + f));
    }
    return e ? (this.offset = b, this) : b - d;
  };
  h.readIString = function(a) {
    var b = "undefined" === typeof a;
    b && (a = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal offset: " + a + " (not an integer)");
      }
      a >>>= 0;
      if (0 > a || a + 4 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + a + " (+4) <= " + this.buffer.byteLength);
      }
    }
    var e = a, c = this.readUint32(a);
    c = this.readUTF8String(c, d.METRICS_BYTES, a += 4);
    a += c.length;
    return b ? (this.offset = a, c.string) : {string:c.string, length:a - e};
  };
  d.METRICS_CHARS = "c";
  d.METRICS_BYTES = "b";
  h.writeUTF8String = function(a, b) {
    var e = "undefined" === typeof b;
    e && (b = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+0) <= " + this.buffer.byteLength);
      }
    }
    var d = b;
    var f = t.calculateUTF16asUTF8(c(a))[1];
    b += f;
    var l = this.buffer.byteLength;
    b > l && this.resize((l *= 2) > b ? l : b);
    b -= f;
    t.encodeUTF16toUTF8(c(a), function(a) {
      this.view[b++] = a;
    }.bind(this));
    return e ? (this.offset = b, this) : b - d;
  };
  h.writeString = h.writeUTF8String;
  d.calculateUTF8Chars = function(a) {
    return t.calculateUTF16asUTF8(c(a))[0];
  };
  d.calculateUTF8Bytes = function(a) {
    return t.calculateUTF16asUTF8(c(a))[1];
  };
  d.calculateString = d.calculateUTF8Bytes;
  h.readUTF8String = function(a, b, c) {
    "number" === typeof b && (c = b, b = void 0);
    var e = "undefined" === typeof c;
    e && (c = this.offset);
    "undefined" === typeof b && (b = d.METRICS_CHARS);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal length: " + a + " (not an integer)");
      }
      a |= 0;
      if ("number" !== typeof c || 0 !== c % 1) {
        throw TypeError("Illegal offset: " + c + " (not an integer)");
      }
      c >>>= 0;
      if (0 > c || c + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + c + " (+0) <= " + this.buffer.byteLength);
      }
    }
    var f = 0, l = c;
    if (b === d.METRICS_CHARS) {
      var h = k();
      t.decodeUTF8(function() {
        return f < a && c < this.limit ? this.view[c++] : null;
      }.bind(this), function(a) {
        ++f;
        t.UTF8toUTF16(a, h);
      });
      if (f !== a) {
        throw RangeError("Illegal range: Truncated data, " + f + " == " + a);
      }
      return e ? (this.offset = c, h()) : {string:h(), length:c - l};
    }
    if (b === d.METRICS_BYTES) {
      if (!this.noAssert) {
        if ("number" !== typeof c || 0 !== c % 1) {
          throw TypeError("Illegal offset: " + c + " (not an integer)");
        }
        c >>>= 0;
        if (0 > c || c + a > this.buffer.byteLength) {
          throw RangeError("Illegal offset: 0 <= " + c + " (+" + a + ") <= " + this.buffer.byteLength);
        }
      }
      var m = c + a;
      t.decodeUTF8toUTF16(function() {
        return c < m ? this.view[c++] : null;
      }.bind(this), h = k(), this.noAssert);
      if (c !== m) {
        throw RangeError("Illegal range: Truncated data, " + c + " == " + m);
      }
      return e ? (this.offset = c, h()) : {string:h(), length:c - l};
    }
    throw TypeError("Unsupported metrics: " + b);
  };
  h.readString = h.readUTF8String;
  h.writeVString = function(a, b) {
    var e = "undefined" === typeof b;
    e && (b = this.offset);
    if (!this.noAssert) {
      if ("string" !== typeof a) {
        throw TypeError("Illegal str: Not a string");
      }
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: " + b + " (not an integer)");
      }
      b >>>= 0;
      if (0 > b || b + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + b + " (+0) <= " + this.buffer.byteLength);
      }
    }
    var f = b;
    var l = t.calculateUTF16asUTF8(c(a), this.noAssert)[1];
    var h = d.calculateVarint32(l);
    b += h + l;
    var p = this.buffer.byteLength;
    b > p && this.resize((p *= 2) > b ? p : b);
    b -= h + l;
    b += this.writeVarint32(l, b);
    t.encodeUTF16toUTF8(c(a), function(a) {
      this.view[b++] = a;
    }.bind(this));
    if (b !== f + l + h) {
      throw RangeError("Illegal range: Truncated data, " + b + " == " + (b + l + h));
    }
    return e ? (this.offset = b, this) : b - f;
  };
  h.readVString = function(a) {
    var b = "undefined" === typeof a;
    b && (a = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal offset: " + a + " (not an integer)");
      }
      a >>>= 0;
      if (0 > a || a + 1 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + a + " (+1) <= " + this.buffer.byteLength);
      }
    }
    var c = a, e = this.readVarint32(a);
    e = this.readUTF8String(e.value, d.METRICS_BYTES, a += e.length);
    a += e.length;
    return b ? (this.offset = a, e.string) : {string:e.string, length:a - c};
  };
  h.append = function(a, b, c) {
    if ("number" === typeof b || "string" !== typeof b) {
      c = b, b = void 0;
    }
    var e = "undefined" === typeof c;
    e && (c = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof c || 0 !== c % 1) {
        throw TypeError("Illegal offset: " + c + " (not an integer)");
      }
      c >>>= 0;
      if (0 > c || c + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + c + " (+0) <= " + this.buffer.byteLength);
      }
    }
    a instanceof d || (a = d.wrap(a, b));
    b = a.limit - a.offset;
    if (0 >= b) {
      return this;
    }
    c += b;
    var f = this.buffer.byteLength;
    c > f && this.resize((f *= 2) > c ? f : c);
    c -= b;
    this.view.set(a.view.subarray(a.offset, a.limit), c);
    a.offset += b;
    e && (this.offset += b);
    return this;
  };
  h.appendTo = function(a, b) {
    a.append(this, b);
    return this;
  };
  h.assert = function(a) {
    this.noAssert = !a;
    return this;
  };
  h.capacity = function() {
    return this.buffer.byteLength;
  };
  h.clear = function() {
    this.offset = 0;
    this.limit = this.buffer.byteLength;
    this.markedOffset = -1;
    return this;
  };
  h.clone = function(a) {
    var b = new d(0, this.littleEndian, this.noAssert);
    a ? (b.buffer = new ArrayBuffer(this.buffer.byteLength), b.view = new Uint8Array(b.buffer)) : (b.buffer = this.buffer, b.view = this.view);
    b.offset = this.offset;
    b.markedOffset = this.markedOffset;
    b.limit = this.limit;
    return b;
  };
  h.compact = function(a, b) {
    "undefined" === typeof a && (a = this.offset);
    "undefined" === typeof b && (b = this.limit);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal begin: Not an integer");
      }
      a >>>= 0;
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal end: Not an integer");
      }
      b >>>= 0;
      if (0 > a || a > b || b > this.buffer.byteLength) {
        throw RangeError("Illegal range: 0 <= " + a + " <= " + b + " <= " + this.buffer.byteLength);
      }
    }
    if (0 === a && b === this.buffer.byteLength) {
      return this;
    }
    var c = b - a;
    if (0 === c) {
      return this.buffer = n, this.view = null, 0 <= this.markedOffset && (this.markedOffset -= a), this.limit = this.offset = 0, this;
    }
    var e = new ArrayBuffer(c), d = new Uint8Array(e);
    d.set(this.view.subarray(a, b));
    this.buffer = e;
    this.view = d;
    0 <= this.markedOffset && (this.markedOffset -= a);
    this.offset = 0;
    this.limit = c;
    return this;
  };
  h.copy = function(a, b) {
    "undefined" === typeof a && (a = this.offset);
    "undefined" === typeof b && (b = this.limit);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal begin: Not an integer");
      }
      a >>>= 0;
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal end: Not an integer");
      }
      b >>>= 0;
      if (0 > a || a > b || b > this.buffer.byteLength) {
        throw RangeError("Illegal range: 0 <= " + a + " <= " + b + " <= " + this.buffer.byteLength);
      }
    }
    if (a === b) {
      return new d(0, this.littleEndian, this.noAssert);
    }
    var c = b - a, e = new d(c, this.littleEndian, this.noAssert);
    e.offset = 0;
    e.limit = c;
    0 <= e.markedOffset && (e.markedOffset -= a);
    this.copyTo(e, 0, a, b);
    return e;
  };
  h.copyTo = function(a, b, c, f) {
    var e, l;
    if (!this.noAssert && !d.isByteBuffer(a)) {
      throw TypeError("Illegal target: Not a ByteBuffer");
    }
    b = (l = "undefined" === typeof b) ? a.offset : b | 0;
    c = (e = "undefined" === typeof c) ? this.offset : c | 0;
    f = "undefined" === typeof f ? this.limit : f | 0;
    if (0 > b || b > a.buffer.byteLength) {
      throw RangeError("Illegal target range: 0 <= " + b + " <= " + a.buffer.byteLength);
    }
    if (0 > c || f > this.buffer.byteLength) {
      throw RangeError("Illegal source range: 0 <= " + c + " <= " + this.buffer.byteLength);
    }
    var h = f - c;
    if (0 === h) {
      return a;
    }
    a.ensureCapacity(b + h);
    a.view.set(this.view.subarray(c, f), b);
    e && (this.offset += h);
    l && (a.offset += h);
    return this;
  };
  h.ensureCapacity = function(a) {
    var b = this.buffer.byteLength;
    return b < a ? this.resize((b *= 2) > a ? b : a) : this;
  };
  h.fill = function(a, b, c) {
    var e = "undefined" === typeof b;
    e && (b = this.offset);
    "string" === typeof a && 0 < a.length && (a = a.charCodeAt(0));
    "undefined" === typeof b && (b = this.offset);
    "undefined" === typeof c && (c = this.limit);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal value: " + a + " (not an integer)");
      }
      a |= 0;
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal begin: Not an integer");
      }
      b >>>= 0;
      if ("number" !== typeof c || 0 !== c % 1) {
        throw TypeError("Illegal end: Not an integer");
      }
      c >>>= 0;
      if (0 > b || b > c || c > this.buffer.byteLength) {
        throw RangeError("Illegal range: 0 <= " + b + " <= " + c + " <= " + this.buffer.byteLength);
      }
    }
    if (b >= c) {
      return this;
    }
    for (; b < c;) {
      this.view[b++] = a;
    }
    e && (this.offset = b);
    return this;
  };
  h.flip = function() {
    this.limit = this.offset;
    this.offset = 0;
    return this;
  };
  h.mark = function(a) {
    a = "undefined" === typeof a ? this.offset : a;
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal offset: " + a + " (not an integer)");
      }
      a >>>= 0;
      if (0 > a || a + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + a + " (+0) <= " + this.buffer.byteLength);
      }
    }
    this.markedOffset = a;
    return this;
  };
  h.order = function(a) {
    if (!this.noAssert && "boolean" !== typeof a) {
      throw TypeError("Illegal littleEndian: Not a boolean");
    }
    this.littleEndian = !!a;
    return this;
  };
  h.LE = function(a) {
    this.littleEndian = "undefined" !== typeof a ? !!a : !0;
    return this;
  };
  h.BE = function(a) {
    this.littleEndian = "undefined" !== typeof a ? !a : !1;
    return this;
  };
  h.prepend = function(a, b, c) {
    if ("number" === typeof b || "string" !== typeof b) {
      c = b, b = void 0;
    }
    var e = "undefined" === typeof c;
    e && (c = this.offset);
    if (!this.noAssert) {
      if ("number" !== typeof c || 0 !== c % 1) {
        throw TypeError("Illegal offset: " + c + " (not an integer)");
      }
      c >>>= 0;
      if (0 > c || c + 0 > this.buffer.byteLength) {
        throw RangeError("Illegal offset: 0 <= " + c + " (+0) <= " + this.buffer.byteLength);
      }
    }
    a instanceof d || (a = d.wrap(a, b));
    b = a.limit - a.offset;
    if (0 >= b) {
      return this;
    }
    var f = b - c;
    if (0 < f) {
      var l = new ArrayBuffer(this.buffer.byteLength + f), h = new Uint8Array(l);
      h.set(this.view.subarray(c, this.buffer.byteLength), b);
      this.buffer = l;
      this.view = h;
      this.offset += f;
      0 <= this.markedOffset && (this.markedOffset += f);
      this.limit += f;
      c += f;
    } else {
      new Uint8Array(this.buffer);
    }
    this.view.set(a.view.subarray(a.offset, a.limit), c - b);
    a.offset = a.limit;
    e && (this.offset -= b);
    return this;
  };
  h.prependTo = function(a, b) {
    a.prepend(this, b);
    return this;
  };
  h.printDebug = function(a) {
    "function" !== typeof a && (a = console.log.bind(console));
    a(this.toString() + "\n-------------------------------------------------------------------\n" + this.toDebug(!0));
  };
  h.remaining = function() {
    return this.limit - this.offset;
  };
  h.reset = function() {
    0 <= this.markedOffset ? (this.offset = this.markedOffset, this.markedOffset = -1) : this.offset = 0;
    return this;
  };
  h.resize = function(a) {
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal capacity: " + a + " (not an integer)");
      }
      a |= 0;
      if (0 > a) {
        throw RangeError("Illegal capacity: 0 <= " + a);
      }
    }
    if (this.buffer.byteLength < a) {
      a = new ArrayBuffer(a);
      var b = new Uint8Array(a);
      b.set(this.view);
      this.buffer = a;
      this.view = b;
    }
    return this;
  };
  h.reverse = function(a, b) {
    "undefined" === typeof a && (a = this.offset);
    "undefined" === typeof b && (b = this.limit);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal begin: Not an integer");
      }
      a >>>= 0;
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal end: Not an integer");
      }
      b >>>= 0;
      if (0 > a || a > b || b > this.buffer.byteLength) {
        throw RangeError("Illegal range: 0 <= " + a + " <= " + b + " <= " + this.buffer.byteLength);
      }
    }
    if (a === b) {
      return this;
    }
    Array.prototype.reverse.call(this.view.subarray(a, b));
    return this;
  };
  h.skip = function(a) {
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal length: " + a + " (not an integer)");
      }
      a |= 0;
    }
    var b = this.offset + a;
    if (!this.noAssert && (0 > b || b > this.buffer.byteLength)) {
      throw RangeError("Illegal length: 0 <= " + this.offset + " + " + a + " <= " + this.buffer.byteLength);
    }
    this.offset = b;
    return this;
  };
  h.slice = function(a, b) {
    "undefined" === typeof a && (a = this.offset);
    "undefined" === typeof b && (b = this.limit);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal begin: Not an integer");
      }
      a >>>= 0;
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal end: Not an integer");
      }
      b >>>= 0;
      if (0 > a || a > b || b > this.buffer.byteLength) {
        throw RangeError("Illegal range: 0 <= " + a + " <= " + b + " <= " + this.buffer.byteLength);
      }
    }
    var c = this.clone();
    c.offset = a;
    c.limit = b;
    return c;
  };
  h.toBuffer = function(a) {
    var b = this.offset, c = this.limit;
    if (!this.noAssert) {
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal offset: Not an integer");
      }
      b >>>= 0;
      if ("number" !== typeof c || 0 !== c % 1) {
        throw TypeError("Illegal limit: Not an integer");
      }
      c >>>= 0;
      if (0 > b || b > c || c > this.buffer.byteLength) {
        throw RangeError("Illegal range: 0 <= " + b + " <= " + c + " <= " + this.buffer.byteLength);
      }
    }
    if (!a && 0 === b && c === this.buffer.byteLength) {
      return this.buffer;
    }
    if (b === c) {
      return n;
    }
    a = new ArrayBuffer(c - b);
    (new Uint8Array(a)).set((new Uint8Array(this.buffer)).subarray(b, c), 0);
    return a;
  };
  h.toArrayBuffer = h.toBuffer;
  h.toString = function(a, b, c) {
    if ("undefined" === typeof a) {
      return "ByteBufferAB(offset=" + this.offset + ",markedOffset=" + this.markedOffset + ",limit=" + this.limit + ",capacity=" + this.capacity() + ")";
    }
    "number" === typeof a && (c = b = a = "utf8");
    switch(a) {
      case "utf8":
        return this.toUTF8(b, c);
      case "base64":
        return this.toBase64(b, c);
      case "hex":
        return this.toHex(b, c);
      case "binary":
        return this.toBinary(b, c);
      case "debug":
        return this.toDebug();
      case "columns":
        return this.toColumns();
      default:
        throw Error("Unsupported encoding: " + a);
    }
  };
  var m = function() {
    for (var a = {}, b = [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 43, 47], c = [], d = 0, f = b.length; d < f; ++d) {
      c[b[d]] = d;
    }
    a.encode = function(a, c) {
      for (var e, d; null !== (e = a());) {
        c(b[e >> 2 & 63]), d = (e & 3) << 4, null !== (e = a()) ? (d |= e >> 4 & 15, c(b[(d | e >> 4 & 15) & 63]), d = (e & 15) << 2, null !== (e = a()) ? (c(b[(d | e >> 6 & 3) & 63]), c(b[e & 63])) : (c(b[d & 63]), c(61))) : (c(b[d & 63]), c(61), c(61));
      }
    };
    a.decode = function(a, b) {
      function e(a) {
        throw Error("Illegal character code: " + a);
      }
      for (var d, f, l; null !== (d = a());) {
        if (f = c[d], "undefined" === typeof f && e(d), null !== (d = a()) && (l = c[d], "undefined" === typeof l && e(d), b(f << 2 >>> 0 | (l & 48) >> 4), null !== (d = a()))) {
          f = c[d];
          if ("undefined" === typeof f) {
            if (61 === d) {
              break;
            } else {
              e(d);
            }
          }
          b((l & 15) << 4 >>> 0 | (f & 60) >> 2);
          if (null !== (d = a())) {
            l = c[d];
            if ("undefined" === typeof l) {
              if (61 === d) {
                break;
              } else {
                e(d);
              }
            }
            b((f & 3) << 6 >>> 0 | l);
          }
        }
      }
    };
    a.test = function(a) {
      return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(a);
    };
    return a;
  }();
  h.toBase64 = function(a, b) {
    "undefined" === typeof a && (a = this.offset);
    "undefined" === typeof b && (b = this.limit);
    a |= 0;
    b |= 0;
    if (0 > a || b > this.capacity || a > b) {
      throw RangeError("begin, end");
    }
    var c;
    m.encode(function() {
      return a < b ? this.view[a++] : null;
    }.bind(this), c = k());
    return c();
  };
  d.fromBase64 = function(a, b) {
    if ("string" !== typeof a) {
      throw TypeError("str");
    }
    var e = new d(a.length / 4 * 3, b), f = 0;
    m.decode(c(a), function(a) {
      e.view[f++] = a;
    });
    e.limit = f;
    return e;
  };
  d.btoa = function(a) {
    return d.fromBinary(a).toBase64();
  };
  d.atob = function(a) {
    return d.fromBase64(a).toBinary();
  };
  h.toBinary = function(a, b) {
    "undefined" === typeof a && (a = this.offset);
    "undefined" === typeof b && (b = this.limit);
    a |= 0;
    b |= 0;
    if (0 > a || b > this.capacity() || a > b) {
      throw RangeError("begin, end");
    }
    if (a === b) {
      return "";
    }
    for (var c = [], e = []; a < b;) {
      c.push(this.view[a++]), 1024 <= c.length && (e.push(String.fromCharCode.apply(String, c)), c = []);
    }
    return e.join("") + String.fromCharCode.apply(String, c);
  };
  d.fromBinary = function(a, b) {
    if ("string" !== typeof a) {
      throw TypeError("str");
    }
    for (var c = 0, e = a.length, f = new d(e, b); c < e;) {
      b = a.charCodeAt(c);
      if (255 < b) {
        throw RangeError("illegal char code: " + b);
      }
      f.view[c++] = b;
    }
    f.limit = e;
    return f;
  };
  h.toDebug = function(a) {
    for (var b = -1, c = this.buffer.byteLength, e, d = "", f = "", h = ""; b < c;) {
      -1 !== b && (e = this.view[b], d = 16 > e ? d + ("0" + e.toString(16).toUpperCase()) : d + e.toString(16).toUpperCase(), a && (f += 32 < e && 127 > e ? String.fromCharCode(e) : "."));
      ++b;
      if (a && 0 < b && 0 === b % 16 && b !== c) {
        for (; 51 > d.length;) {
          d += " ";
        }
        h += d + f + "\n";
        d = f = "";
      }
      d = b === this.offset && b === this.limit ? d + (b === this.markedOffset ? "!" : "|") : b === this.offset ? d + (b === this.markedOffset ? "[" : "<") : b === this.limit ? d + (b === this.markedOffset ? "]" : ">") : d + (b === this.markedOffset ? "'" : a || 0 !== b && b !== c ? " " : "");
    }
    if (a && " " !== d) {
      for (; 51 > d.length;) {
        d += " ";
      }
      h += d + f + "\n";
    }
    return a ? h : d;
  };
  d.fromDebug = function(a, b, c) {
    var e = a.length;
    b = new d((e + 1) / 3 | 0, b, c);
    for (var f = 0, h = 0, l, k = !1, m = !1, n = !1, t = !1, q = !1; f < e;) {
      switch(l = a.charAt(f++)) {
        case "!":
          if (!c) {
            if (m || n || t) {
              q = ! 0;
              break;
            }
            m = n = t = !0;
          }
          b.offset = b.markedOffset = b.limit = h;
          k = !1;
          break;
        case "|":
          if (!c) {
            if (m || t) {
              q = !0;
              break;
            }
            m = t = !0;
          }
          b.offset = b.limit = h;
          k = !1;
          break;
        case "[":
          if (!c) {
            if (m || n) {
              q = !0;
              break;
            }
            m = n = !0;
          }
          b.offset = b.markedOffset = h;
          k = !1;
          break;
        case "<":
          if (!c) {
            if (m) {
              q = !0;
              break;
            }
            m = !0;
          }
          b.offset = h;
          k = !1;
          break;
        case "]":
          if (!c) {
            if (t || n) {
              q = !0;
              break;
            }
            t = n = !0;
          }
          b.limit = b.markedOffset = h;
          k = !1;
          break;
        case ">":
          if (!c) {
            if (t) {
              q = !0;
              break;
            }
            t = !0;
          }
          b.limit = h;
          k = !1;
          break;
        case "'":
          if (!c) {
            if (n) {
              q = !0;
              break;
            }
            n = !0;
          }
          b.markedOffset = h;
          k = !1;
          break;
        case " ":
          k = !1;
          break;
        default:
          if (!c && k) {
            q = !0;
          } else {
            l = parseInt(l + a.charAt(f++), 16);
            if (!c && (isNaN(l) || 0 > l || 255 < l)) {
              throw TypeError("Illegal str: Not a debug encoded string");
            }
            b.view[h++] = l;
            k = !0;
          }
      }
      if (q) {
        throw TypeError("Illegal str: Invalid symbol at " + f);
      }
    }
    if (!c) {
      if (!m || !t) {
        throw TypeError("Illegal str: Missing offset or limit");
      }
      if (h < b.buffer.byteLength) {
        throw TypeError("Illegal str: Not a debug encoded string (is it hex?) " + h + " < " + e);
      }
    }
    return b;
  };
  h.toHex = function(a, b) {
    a = "undefined" === typeof a ? this.offset : a;
    b = "undefined" === typeof b ? this.limit : b;
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal begin: Not an integer");
      }
      a >>>= 0;
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal end: Not an integer");
      }
      b >>>= 0;
      if (0 > a || a > b || b > this.buffer.byteLength) {
        throw RangeError("Illegal range: 0 <= " + a + " <= " + b + " <= " + this.buffer.byteLength);
      }
    }
    for (var c = Array(b - a), e; a < b;) {
      e = this.view[a++], 16 > e ? c.push("0", e.toString(16)) : c.push(e.toString(16));
    }
    return c.join("");
  };
  d.fromHex = function(a, b, c) {
    if (!c) {
      if ("string" !== typeof a) {
        throw TypeError("Illegal str: Not a string");
      }
      if (0 !== a.length % 2) {
        throw TypeError("Illegal str: Length not a multiple of 2");
      }
    }
    var e = a.length;
    b = new d(e / 2 | 0, b);
    for (var f, h = 0, l = 0; h < e; h += 2) {
      f = parseInt(a.substring(h, h + 2), 16);
      if (!c && (!isFinite(f) || 0 > f || 255 < f)) {
        throw TypeError("Illegal str: Contains non-hex characters");
      }
      b.view[l++] = f;
    }
    b.limit = l;
    return b;
  };
  var t = function() {
    var a = {MAX_CODEPOINT:1114111, encodeUTF8:function(a, b) {
      var c = null;
      for ("number" === typeof a && (c = a, a = function() {
        return null;
      }); null !== c || null !== (c = a());) {
        128 > c ? b(c & 127) : (2048 > c ? b(c >> 6 & 31 | 192) : (65536 > c ? b(c >> 12 & 15 | 224) : (b(c >> 18 & 7 | 240), b(c >> 12 & 63 | 128)), b(c >> 6 & 63 | 128)), b(c & 63 | 128)), c = null;
      }
    }, decodeUTF8:function(a, b) {
      for (var c, e, d, f, h = function(a) {
        a = a.slice(0, a.indexOf(null));
        var b = Error(a.toString());
        b.name = "TruncatedError";
        b.bytes = a;
        throw b;
      }; null !== (c = a());) {
        if (0 === (c & 128)) {
          b(c);
        } else {
          if (192 === (c & 224)) {
            null === (e = a()) && h([c, e]), b((c & 31) << 6 | e & 63);
          } else {
            if (224 === (c & 240)) {
              null !== (e = a()) && null !== (d = a()) || h([c, e, d]), b((c & 15) << 12 | (e & 63) << 6 | d & 63);
            } else {
              if (240 === (c & 248)) {
                null !== (e = a()) && null !== (d = a()) && null !== (f = a()) || h([c, e, d, f]), b((c & 7) << 18 | (e & 63) << 12 | (d & 63) << 6 | f & 63);
              } else {
                throw RangeError("Illegal starting byte: " + c);
              }
            }
          }
        }
      }
    }, UTF16toUTF8:function(a, b) {
      for (var c, e = null; null !== (c = null !== e ? e : a());) {
        55296 <= c && 57343 >= c && null !== (e = a()) && 56320 <= e && 57343 >= e ? (b(1024 * (c - 55296) + e - 56320 + 65536), e = null) : b(c);
      }
      null !== e && b(e);
    }, UTF8toUTF16:function(a, b) {
      var c = null;
      for ("number" === typeof a && (c = a, a = function() {
        return null;
      }); null !== c || null !== (c = a());) {
        65535 >= c ? b(c) : (c -= 65536, b((c >> 10) + 55296), b(c % 1024 + 56320)), c = null;
      }
    }, encodeUTF16toUTF8:function(b, c) {
      a.UTF16toUTF8(b, function(b) {
        a.encodeUTF8(b, c);
      });
    }, decodeUTF8toUTF16:function(b, c) {
      a.decodeUTF8(b, function(b) {
        a.UTF8toUTF16(b, c);
      });
    }, calculateCodePoint:function(a) {
      return 128 > a ? 1 : 2048 > a ? 2 : 65536 > a ? 3 : 4;
    }, calculateUTF8:function(a) {
      for (var b, c = 0; null !== (b = a());) {
        c += 128 > b ? 1 : 2048 > b ? 2 : 65536 > b ? 3 : 4;
      }
      return c;
    }, calculateUTF16asUTF8:function(b) {
      var c = 0, e = 0;
      a.UTF16toUTF8(b, function(a) {
        ++c;
        e += 128 > a ? 1 : 2048 > a ? 2 : 65536 > a ? 3 : 4;
      });
      return [c, e];
    }};
    return a;
  }();
  h.toUTF8 = function(a, b) {
    "undefined" === typeof a && (a = this.offset);
    "undefined" === typeof b && (b = this.limit);
    if (!this.noAssert) {
      if ("number" !== typeof a || 0 !== a % 1) {
        throw TypeError("Illegal begin: Not an integer");
      }
      a >>>= 0;
      if ("number" !== typeof b || 0 !== b % 1) {
        throw TypeError("Illegal end: Not an integer");
      }
      b >>>= 0;
      if (0 > a || a > b || b > this.buffer.byteLength) {
        throw RangeError("Illegal range: 0 <= " + a + " <= " + b + " <= " + this.buffer.byteLength);
      }
    }
    var c;
    try {
      t.decodeUTF8toUTF16(function() {
        return a < b ? this.view[a++] : null;
      }.bind(this), c = k());
    } catch (w) {
      if (a !== b) {
        throw RangeError("Illegal range: Truncated data, " + a + " != " + b);
      }
    }
    return c();
  };
  d.fromUTF8 = function(a, b, f) {
    if (!f && "string" !== typeof a) {
      throw TypeError("Illegal str: Not a string");
    }
    var e = new d(t.calculateUTF16asUTF8(c(a), !0)[1], b, f), h = 0;
    t.encodeUTF16toUTF8(c(a), function(a) {
      e.view[h++] = a;
    });
    e.limit = h;
    return e;
  };
  return d;
});
(function(a, c) {
  "function" === typeof define && define.amd ? define([], c) : "function" === typeof require && "object" === typeof module && module && module.exports ? module.exports = c() : (a.dcodeIO = a.dcodeIO || {}).Long = c();
})(this, function() {
  function a(a, b, c) {
    this.low = a | 0;
    this.high = b | 0;
    this.unsigned = !!c;
  }
  function c(a) {
    return !0 === (a && a.__isLong__);
  }
  function k(a, b) {
    var c;
    if (b) {
      a >>>= 0;
      if (c = 0 <= a && 256 > a) {
        if (b = q[a]) {
          return b;
        }
      }
      b = f(a, 0 > (a | 0) ? -1 : 0, !0);
      c && (q[a] = b);
    } else {
      a |= 0;
      if (c = -128 <= a && 128 > a) {
        if (b = n[a]) {
          return b;
        }
      }
      b = f(a, 0 > a ? -1 : 0, !1);
      c && (n[a] = b);
    }
    return b;
  }
  function b(a, c) {
    if (isNaN(a) || !isFinite(a)) {
      return c ? w : u;
    }
    if (c) {
      if (0 > a) {
        return w;
      }
      if (a >= t) {
        return z;
      }
    } else {
      if (a <= -e) {
        return C;
      }
      if (a + 1 >= e) {
        return v;
      }
    }
    return 0 > a ? b(-a, c).neg() : f(a % 4294967296 | 0, a / 4294967296 | 0, c);
  }
  function f(b, c, e) {
    return new a(b, c, e);
  }
  function d(a, c, e) {
    if (0 === a.length) {
      throw Error("empty string");
    }
    if ("NaN" === a || "Infinity" === a || "+Infinity" === a || "-Infinity" === a) {
      return u;
    }
    "number" === typeof c ? (e = c, c = !1) : c = !!c;
    e = e || 10;
    if (2 > e || 36 < e) {
      throw RangeError("radix");
    }
    var f;
    if (0 < (f = a.indexOf("-"))) {
      throw Error("interior hyphen");
    }
    if (0 === f) {
      return d(a.substring(1), c, e).neg();
    }
    f = b(m(e, 8));
    for (var h = u, l = 0; l < a.length; l += 8) {
      var p = Math.min(8, a.length - l), k = parseInt(a.substring(l, l + p), e);
      8 > p ? (p = b(m(e, p)), h = h.mul(p).add(b(k))) : (h = h.mul(f), h = h.add(b(k)));
    }
    h.unsigned = c;
    return h;
  }
  function h(c) {
    return c instanceof a ? c : "number" === typeof c ? b(c) : "string" === typeof c ? d(c) : f(c.low, c.high, c.unsigned);
  }
  Object.defineProperty(a.prototype, "__isLong__", {value:!0, enumerable:!1, configurable:!1});
  a.isLong = c;
  var n = {}, q = {};
  a.fromInt = k;
  a.fromNumber = b;
  a.fromBits = f;
  var m = Math.pow;
  a.fromString = d;
  a.fromValue = h;
  var t = 4294967296 * 4294967296, e = t / 2, l = k(16777216), u = k(0);
  a.ZERO = u;
  var w = k(0, !0);
  a.UZERO = w;
  var y = k(1);
  a.ONE = y;
  var x = k(1, !0);
  a.UONE = x;
  var p = k(-1);
  a.NEG_ONE = p;
  var v = f(-1, 2147483647, !1);
  a.MAX_VALUE = v;
  var z = f(-1, -1, !0);
  a.MAX_UNSIGNED_VALUE = z;
  var C = f(0, -2147483648, !1);
  a.MIN_VALUE = C;
  var A = a.prototype;
  A.toInt = function() {
    return this.unsigned ? this.low >>> 0 : this.low;
  };
  A.toNumber = function() {
    return this.unsigned ? 4294967296 * (this.high >>> 0) + (this.low >>> 0) : 4294967296 * this.high + (this.low >>> 0);
  };
  A.toString = function(a) {
    a = a || 10;
    if (2 > a || 36 < a) {
      throw RangeError("radix");
    }
    if (this.isZero()) {
      return "0";
    }
    if (this.isNegative()) {
      if (this.eq(C)) {
        var c = b(a), e = this.div(c);
        c = e.mul(c).sub(this);
        return e.toString(a) + c.toInt().toString(a);
      }
      return "-" + this.neg().toString(a);
    }
    e = b(m(a, 6), this.unsigned);
    c = this;
    for (var d = "";;) {
      var f = c.div(e), h = (c.sub(f.mul(e)).toInt() >>> 0).toString(a);
      c = f;
      if (c.isZero()) {
        return h + d;
      }
      for (; 6 > h.length;) {
        h = "0" + h;
      }
      d = "" + h + d;
    }
  };
  A.getHighBits = function() {
    return this.high;
  };
  A.getHighBitsUnsigned = function() {
    return this.high >>> 0;
  };
  A.getLowBits = function() {
    return this.low;
  };
  A.getLowBitsUnsigned = function() {
    return this.low >>> 0;
  };
  A.getNumBitsAbs = function() {
    if (this.isNegative()) {
      return this.eq(C) ? 64 : this.neg().getNumBitsAbs();
    }
    for (var a = 0 != this.high ? this.high : this.low, b = 31; 0 < b && 0 == (a & 1 << b); b--) {
    }
    return 0 != this.high ? b + 33 : b + 1;
  };
  A.isZero = function() {
    return 0 === this.high && 0 === this.low;
  };
  A.isNegative = function() {
    return !this.unsigned && 0 > this.high;
  };
  A.isPositive = function() {
    return this.unsigned || 0 <= this.high;
  };
  A.isOdd = function() {
    return 1 === (this.low & 1);
  };
  A.isEven = function() {
    return 0 === (this.low & 1);
  };
  A.equals = function(a) {
    c(a) || (a = h(a));
    return this.unsigned !== a.unsigned && 1 === this.high >>> 31 && 1 === a.high >>> 31 ? !1 : this.high === a.high && this.low === a.low;
  };
  A.eq = A.equals;
  A.notEquals = function(a) {
    return !this.eq(a);
  };
  A.neq = A.notEquals;
  A.lessThan = function(a) {
    return 0 > this.comp(a);
  };
  A.lt = A.lessThan;
  A.lessThanOrEqual = function(a) {
    return 0 >= this.comp(a);
  };
  A.lte = A.lessThanOrEqual;
  A.greaterThan = function(a) {
    return 0 < this.comp(a);
  };
  A.gt = A.greaterThan;
  A.greaterThanOrEqual = function(a) {
    return 0 <= this.comp(a);
  };
  A.gte = A.greaterThanOrEqual;
  A.compare = function(a) {
    c(a) || (a = h(a));
    if (this.eq(a)) {
      return 0;
    }
    var b = this.isNegative(), e = a.isNegative();
    return b && !e ? -1 : !b && e ? 1 : this.unsigned ? a.high >>> 0 > this.high >>> 0 || a.high === this.high && a.low >>> 0 > this.low >>> 0 ? -1 : 1 : this.sub(a).isNegative() ? -1 : 1;
  };
  A.comp = A.compare;
  A.negate = function() {
    return !this.unsigned && this.eq(C) ? C : this.not().add(y);
  };
  A.neg = A.negate;
  A.add = function(a) {
    c(a) || (a = h(a));
    var b = this.high >>> 16, e = this.high & 65535, d = this.low >>> 16, l = a.high >>> 16, p = a.high & 65535, k = a.low >>> 16;
    var m = (this.low & 65535) + (a.low & 65535);
    a = (m >>> 16) + (d + k);
    d = (a >>> 16) + (e + p);
    e = (d >>> 16) + (b + l) & 65535;
    return f((a & 65535) << 16 | m & 65535, e << 16 | d & 65535, this.unsigned);
  };
  A.subtract = function(a) {
    c(a) || (a = h(a));
    return this.add(a.neg());
  };
  A.sub = A.subtract;
  A.multiply = function(a) {
    if (this.isZero()) {
      return u;
    }
    c(a) || (a = h(a));
    if (a.isZero()) {
      return u;
    }
    if (this.eq(C)) {
      return a.isOdd() ? C : u;
    }
    if (a.eq(C)) {
      return this.isOdd() ? C : u;
    }
    if (this.isNegative()) {
      return a.isNegative() ? this.neg().mul(a.neg()) : this.neg().mul(a).neg();
    }
    if (a.isNegative()) {
      return this.mul(a.neg()).neg();
    }
    if (this.lt(l) && a.lt(l)) {
      return b(this.toNumber() * a.toNumber(), this.unsigned);
    }
    var e = this.high >>> 16, d = this.high & 65535, p = this.low >>> 16, k = this.low & 65535, m = a.high >>> 16, n = a.high & 65535, t = a.low >>> 16;
    a = a.low & 65535;
    var q = k * a;
    var v = (q >>> 16) + p * a;
    var w = v >>> 16;
    v = (v & 65535) + k * t;
    w += v >>> 16;
    w += d * a;
    var z = w >>> 16;
    w = (w & 65535) + p * t;
    z += w >>> 16;
    w = (w & 65535) + k * n;
    return f((v & 65535) << 16 | q & 65535, (z + (w >>> 16) + (e * a + d * t + p * n + k * m) & 65535) << 16 | w & 65535, this.unsigned);
  };
  A.mul = A.multiply;
  A.divide = function(a) {
    c(a) || (a = h(a));
    if (a.isZero()) {
      throw Error("division by zero");
    }
    if (this.isZero()) {
      return this.unsigned ? w : u;
    }
    if (this.unsigned) {
      a.unsigned || (a = a.toUnsigned());
      if (a.gt(this)) {
        return w;
      }
      if (a.gt(this.shru(1))) {
        return x;
      }
      var e = w;
    } else {
      if (this.eq(C)) {
        if (a.eq(y) || a.eq(p)) {
          return C;
        }
        if (a.eq(C)) {
          return y;
        }
        var d = this.shr(1).div(a).shl(1);
        if (d.eq(u)) {
          return a.isNegative() ? y : p;
        }
        var f = this.sub(a.mul(d));
        return d.add(f.div(a));
      }
      if (a.eq(C)) {
        return this.unsigned ? w : u;
      }
      if (this.isNegative()) {
        return a.isNegative() ? this.neg().div(a.neg()) : this.neg().div(a).neg();
      }
      if (a.isNegative()) {
        return this.div(a.neg()).neg();
      }
      e = u;
    }
    for (f = this; f.gte(a);) {
      d = Math.max(1, Math.floor(f.toNumber() / a.toNumber()));
      var l = Math.ceil(Math.log(d) / Math.LN2);
      l = 48 >= l ? 1 : m(2, l - 48);
      for (var k = b(d), n = k.mul(a); n.isNegative() || n.gt(f);) {
        d -= l, k = b(d, this.unsigned), n = k.mul(a);
      }
      k.isZero() && (k = y);
      e = e.add(k);
      f = f.sub(n);
    }
    return e;
  };
  A.div = A.divide;
  A.modulo = function(a) {
    c(a) || (a = h(a));
    return this.sub(this.div(a).mul(a));
  };
  A.mod = A.modulo;
  A.not = function() {
    return f(~this.low, ~this.high, this.unsigned);
  };
  A.and = function(a) {
    c(a) || (a = h(a));
    return f(this.low & a.low, this.high & a.high, this.unsigned);
  };
  A.or = function(a) {
    c(a) || (a = h(a));
    return f(this.low | a.low, this.high | a.high, this.unsigned);
  };
  A.xor = function(a) {
    c(a) || (a = h(a));
    return f(this.low ^ a.low, this.high ^ a.high, this.unsigned);
  };
  A.shiftLeft = function(a) {
    c(a) && (a = a.toInt());
    return 0 === (a &= 63) ? this : 32 > a ? f(this.low << a, this.high << a | this.low >>> 32 - a, this.unsigned) : f(0, this.low << a - 32, this.unsigned);
  };
  A.shl = A.shiftLeft;
  A.shiftRight = function(a) {
    c(a) && (a = a.toInt());
    return 0 === (a &= 63) ? this : 32 > a ? f(this.low >>> a | this.high << 32 - a, this.high >> a, this.unsigned) : f(this.high >> a - 32, 0 <= this.high ? 0 : -1, this.unsigned);
  };
  A.shr = A.shiftRight;
  A.shiftRightUnsigned = function(a) {
    c(a) && (a = a.toInt());
    a &= 63;
    if (0 === a) {
      return this;
    }
    var b = this.high;
    return 32 > a ? f(this.low >>> a | b << 32 - a, b >>> a, this.unsigned) : 32 === a ? f(b, 0, this.unsigned) : f(b >>> a - 32, 0, this.unsigned);
  };
  A.shru = A.shiftRightUnsigned;
  A.toSigned = function() {
    return this.unsigned ? f(this.low, this.high, !1) : this;
  };
  A.toUnsigned = function() {
    return this.unsigned ? this : f(this.low, this.high, !0);
  };
  A.toBytes = function(a) {
    return a ? this.toBytesLE() : this.toBytesBE();
  };
  A.toBytesLE = function() {
    var a = this.high, b = this.low;
    return [b & 255, b >>> 8 & 255, b >>> 16 & 255, b >>> 24 & 255, a & 255, a >>> 8 & 255, a >>> 16 & 255, a >>> 24 & 255];
  };
  A.toBytesBE = function() {
    var a = this.high, b = this.low;
    return [a >>> 24 & 255, a >>> 16 & 255, a >>> 8 & 255, a & 255, b >>> 24 & 255, b >>> 16 & 255, b >>> 8 & 255, b & 255];
  };
  return a;
});
(function(a) {
  function c(a) {
    if (!a) {
      throw Error("PSON requires ByteBuffer.js: Get it at https://github.com/dcodeIO/ByteBuffer.js");
    }
    var b = {T:{ZERO:0, MAX:239, NULL:240, TRUE:241, FALSE:242, EOBJECT:243, EARRAY:244, ESTRING:245, OBJECT:246, ARRAY:247, INTEGER:248, LONG:249, FLOAT:250, DOUBLE:251, STRING:252, STRING_ADD:253, STRING_GET:254, BINARY:255}};
    b.Encoder = function(a, b) {
      var c = new a(4);
      c.length = 4;
      var d = a.Long, f = function(a, b, c) {
        this.dict = {};
        this.next = 0;
        if (a && Array.isArray(a)) {
          for (; this.next < a.length;) {
            this.dict[a[this.next]] = this.next++;
          }
        }
        this.progressive = !!b;
        this.options = c || {};
      };
      f.prototype.encode = function(b, c) {
        var e = !1;
        c || (c = new a, e = !0);
        var d = c.littleEndian;
        try {
          return this._encodeValue(b, c.LE()), c.littleEndian = d, e ? c.flip() : c;
        } catch (u) {
          throw c.littleEndian = d, u;
        }
      };
      f.prototype._encodeValue = function(f, h, e) {
        if (null === f) {
          h.writeUint8(b.NULL);
        } else {
          switch(typeof f) {
            case "function":
              f = f.toString();
            case "string":
              0 === f.length ? h.writeUint8(b.ESTRING) : this.dict.hasOwnProperty(f) ? (h.writeUint8(b.STRING_GET), h.writeVarint32(this.dict[f])) : (h.writeUint8(b.STRING), h.writeVString(f));
              break;
            case "number":
              e = parseInt(f);
              f === e ? (e = a.zigZagEncode32(f), e <= b.MAX ? h.writeUint8(e) : (h.writeUint8(b.INTEGER), h.writeVarint32ZigZag(f))) : (c.writeFloat32(f, 0), f === c.readFloat32(0) ? (h.writeUint8(b.FLOAT), h.writeFloat32(f)) : (h.writeUint8(b.DOUBLE), h.writeFloat64(f)));
              break;
            case "boolean":
              h.writeUint8(f ? b.TRUE : b.FALSE);
              break;
            case "object":
              var l;
              if (Array.isArray(f)) {
                if (0 === f.length) {
                  h.writeUint8(b.EARRAY);
                } else {
                  for (h.writeUint8(b.ARRAY), h.writeVarint32(f.length), l = 0; l < f.length; l++) {
                    this._encodeValue(f[l], h);
                  }
                }
              } else {
                if (d && f instanceof d) {
                  h.writeUint8(b.LONG), h.writeVarint64ZigZag(f);
                } else {
                  try {
                    f = a.wrap(f), h.writeUint8(b.BINARY), h.writeVarint32(f.remaining()), h.append(f);
                  } catch (y) {
                    var k = Object.keys(f), m = 0;
                    for (l = 0; l < k.length; l++) {
                      "undefined" !== typeof f[k[l]] && m++;
                    }
                    if (0 === m) {
                      h.writeUint8(b.EOBJECT);
                    } else {
                      for (h.writeUint8(b.OBJECT), h.writeVarint32(m), e || (e = !!f._PSON_EXCL_), l = 0; l < k.length; l++) {
                        m = k[l], "undefined" !== typeof f[m] && (this.dict.hasOwnProperty(m) ? (h.writeUint8(b.STRING_GET), h.writeVarint32(this.dict[m])) : (this.progressive && !e ? (this.dict[m] = this.next++, h.writeUint8(b.STRING_ADD)) : h.writeUint8(b.STRING), h.writeVString(m)), this._encodeValue(f[m], h));
                      }
                    }
                  }
                }
              }
              break;
            case "undefined":
              h.writeUint8(b.NULL);
          }
        }
      };
      return f;
    }(a, b.T);
    b.Decoder = function(a, b) {
      var c = a.Long, d = function(a, b, c) {
        this.dict = a && Array.isArray(a) ? a : [];
        this.progressive = !!b;
        this.options = c || {};
      };
      d.prototype.decode = function(b) {
        b instanceof a || (b = a.wrap(b));
        var c = b.littleEndian;
        try {
          var d = this._decodeValue(b.LE());
          b.littleEndian = c;
          return d;
        } catch (e) {
          throw b.littleEndian = c, e;
        }
      };
      d.prototype._decodeValue = function(d) {
        var f = d.readUint8();
        if (f <= b.MAX) {
          return a.zigZagDecode32(f);
        }
        switch(f) {
          case b.NULL:
            return null;
          case b.TRUE:
            return !0;
          case b.FALSE:
            return !1;
          case b.EOBJECT:
            return {};
          case b.EARRAY:
            return [];
          case b.ESTRING:
            return "";
          case b.OBJECT:
            f = d.readVarint32();
            for (var h = {}; 0 <= --f;) {
              h[this._decodeValue(d)] = this._decodeValue(d);
            }
            return h;
          case b.ARRAY:
            f = d.readVarint32();
            for (h = []; 0 <= --f;) {
              h.push(this._decodeValue(d));
            }
            return h;
          case b.INTEGER:
            return d.readVarint32ZigZag();
          case b.LONG:
            return c ? d.readVarint64ZigZag() : d.readVarint32ZigZag();
          case b.FLOAT:
            return d.readFloat32();
          case b.DOUBLE:
            return d.readFloat64();
          case b.STRING:
            return d.readVString();
          case b.STRING_ADD:
            return d = d.readVString(), this.dict.push(d), d;
          case b.STRING_GET:
            return this.dict[d.readVarint32()];
          case b.BINARY:
            return f = d.readVarint32(), h = d.slice(d.offset, d.offset + f), d.offset += f, h;
          default:
            throw Error("Illegal type at " + d.offset + ": " + f);
        }
      };
      return d;
    }(a, b.T);
    b.Pair = function() {
      var a = function() {
      };
      a.prototype.encode = function(a) {
        return this.encoder.encode(a);
      };
      a.prototype.toArrayBuffer = function(a) {
        return this.encoder.encode(a).toArrayBuffer();
      };
      a.prototype.toBuffer = function(a) {
        return this.encoder.encode(a).toBuffer();
      };
      a.prototype.decode = function(a) {
        return this.decoder.decode(a);
      };
      return a;
    }();
    b.StaticPair = function(a, b, c) {
      var d = function(d, f) {
        a.call(this);
        this.encoder = new b(d, !1, f);
        this.decoder = new c(d, !1, f);
      };
      d.prototype = Object.create(a.prototype);
      return d;
    }(b.Pair, b.Encoder, b.Decoder);
    b.ProgressivePair = function(a, c, h) {
      var d = function(b, d) {
        a.call(this);
        this.encoder = new c(b, !0, d);
        this.decoder = new h(b, !0, d);
      };
      d.prototype = Object.create(a.prototype);
      d.prototype.exclude = function(a) {
        b.exclude(a);
      };
      d.prototype.include = function(a) {
        b.include(a);
      };
      return d;
    }(b.Pair, b.Encoder, b.Decoder);
    b.exclude = function(a) {
      "object" === typeof a && Object.defineProperty(a, "_PSON_EXCL_", {value:!0, enumerable:!1, configurable:!0});
    };
    b.include = function(a) {
      "object" === typeof a && delete a._PSON_EXCL_;
    };
    return b;
  }
  "undefined" != typeof module && module.exports ? module.exports = c(require("bytebuffer")) : "undefined" != typeof define && define.amd ? define("PSON", ["ByteBuffer"], c) : (a.dcodeIO || (a.dcodeIO = {}), a.dcodeIO.PSON = c(a.dcodeIO.ByteBuffer));
})(this);
(function e$jscomp$0(a, c, k) {
  function f(h, q) {
    if (!c[h]) {
      if (!a[h]) {
        var m = "function" == typeof require && require;
        if (!q && m) {
          return m(h, !0);
        }
        if (d) {
          return d(h, !0);
        }
        q = Error("Cannot find module '" + h + "'");
        throw q.code = "MODULE_NOT_FOUND", q;
      }
      q = c[h] = {exports:{}};
      a[h][0].call(q.exports, function(c) {
        var e = a[h][1][c];
        return f(e ? e : c);
      }, q, q.exports, e$jscomp$0, a, c, k);
    }
    return c[h].exports;
  }
  for (var d = "function" == typeof require && require, h = 0; h < k.length; h++) {
    f(k[h]);
  }
  return f;
})({1:[function(a, c, k) {
  var b = Object.prototype.toString;
  c.exports = function(a) {
    return a.BYTES_PER_ELEMENT && "[object ArrayBuffer]" === b.call(a.buffer) || Array.isArray(a);
  };
}, {}], 2:[function(a, c, k) {
  c.exports = function(a, c) {
    return "number" === typeof a ? a : "number" === typeof c ? c : 0;
  };
}, {}], 3:[function(a, c, k) {
  c.exports = function(a) {
    switch(a) {
      case "int8":
        return Int8Array;
      case "int16":
        return Int16Array;
      case "int32":
        return Int32Array;
      case "uint8":
        return Uint8Array;
      case "uint16":
        return Uint16Array;
      case "uint32":
        return Uint32Array;
      case "float32":
        return Float32Array;
      case "float64":
        return Float64Array;
      case "array":
        return Array;
      case "uint8_clamped":
        return Uint8ClampedArray;
    }
  };
}, {}], 4:[function(a, c, k) {
  var b = a("dtype");
  c.exports = function(a, c, h) {
    if (!a) {
      throw new TypeError("must specify data as first parameter");
    }
    h = +(h || 0) | 0;
    if (Array.isArray(a) && Array.isArray(a[0])) {
      var d = a[0].length, f = a.length * d;
      c && "string" !== typeof c || (c = new (b(c || "float32"))(f + h));
      var k = c.length - h;
      if (f !== k) {
        throw Error("source length " + f + " (" + d + "x" + a.length + ") does not match destination length " + k);
      }
      for (f = 0; f < a.length; f++) {
        for (k = 0; k < d; k++) {
          c[h++] = a[f][k];
        }
      }
    } else {
      c && "string" !== typeof c ? c.set(a, h) : (c = b(c || "float32"), 0 === h ? c = new c(a) : (c = new c(a.length + h), c.set(a, h)));
    }
    return c;
  };
}, {dtype:3}], 5:[function(a, c, k) {
  c.exports = function(a) {
    if (!a || "string" !== typeof a) {
      throw Error("must specify property for indexof search");
    }
    return new Function("array", "value", "start", ["start = start || 0\nfor (var i=start; i<array.length; i++)", '  if (array[i]["' + a + '"] === value)', "      return i\nreturn -1"].join("\n"));
  };
}, {}], 6:[function(a, c, k) {
  c.exports = "function" === typeof Object.create ? function(a, c) {
    a.super_ = c;
    a.prototype = Object.create(c.prototype, {constructor:{value:a, enumerable:!1, writable:!0, configurable:!0}});
  } : function(a, c) {
    a.super_ = c;
    var b = function() {
    };
    b.prototype = c.prototype;
    a.prototype = new b;
    a.prototype.constructor = a;
  };
}, {}], 7:[function(a, c, k) {
  function b(a) {
    return !!a.constructor && "function" === typeof a.constructor.isBuffer && a.constructor.isBuffer(a);
  }
  c.exports = function(a) {
    return null != a && (b(a) || "function" === typeof a.readFloatLE && "function" === typeof a.slice && b(a.slice(0, 0)) || !!a._isBuffer);
  };
}, {}], 8:[function(a, c, k) {
  function b(a) {
    this.glyphs = [];
    this._measure = this.computeMetrics.bind(this);
    this.update(a);
  }
  function f(a, b) {
    if (!a.chars || 0 === a.chars.length) {
      return null;
    }
    b = e(a.chars, b);
    return 0 <= b ? a.chars[b] : null;
  }
  function d(a) {
    for (var b = 0; b < u.length; b++) {
      var c = u[b].charCodeAt(0);
      c = e(a.chars, c);
      if (0 <= c) {
        return a.chars[c].height;
      }
    }
    return 0;
  }
  function h(a) {
    for (var b = 0; b < y.length; b++) {
      var c = y[b].charCodeAt(0);
      c = e(a.chars, c);
      if (0 <= c) {
        return a.chars[c].height;
      }
    }
    return 0;
  }
  function n(a, b, c) {
    if (!a.kernings || 0 === a.kernings.length) {
      return 0;
    }
    a = a.kernings;
    for (var e = 0; e < a.length; e++) {
      var d = a[e];
      if (d.first === b && d.second === c) {
        return d.amount;
      }
    }
    return 0;
  }
  function q(a) {
    return "center" === a ? 1 : "right" === a ? 2 : 0;
  }
  var m = a("word-wrapper"), t = a("xtend"), e = a("indexof-property")("id"), l = a("as-number"), u = "xeaonsrcumvwz".split(""), w = ["m", "w"], y = "HINEFKLTUVWXYZ".split("");
  c.exports = function(a) {
    return new b(a);
  };
  b.prototype.update = function(a) {
    this._opt = a = t({measure:this._measure}, a);
    this._opt.tabSize = l(this._opt.tabSize, 4);
    if (!a.font) {
      throw Error("must provide a valid bitmap font");
    }
    var b = this.glyphs, c = a.text || "", e = a.font;
    this._setupSpaceGlyphs(e);
    var f = m.lines(c, a), k = a.width || 0;
    b.length = 0;
    var u = f.reduce(function(a, b) {
      return Math.max(a, b.width, k);
    }, 0), w = 0, y = 0, x = l(a.lineHeight, e.common.lineHeight), H = e.common.base, K = x - H, I = a.letterSpacing || 0;
    a = x * f.length - K;
    var L = q(this._opt.align);
    y -= a;
    this._width = u;
    this._height = a;
    this._descender = x - H;
    this._baseline = H;
    this._xHeight = d(e);
    this._capHeight = h(e);
    this._lineHeight = x;
    this._ascender = x - K - this._xHeight;
    var R = this;
    f.forEach(function(a, d) {
      var f = a.end, h = a.width;
      for (a = a.start; a < f; a++) {
        var l = c.charCodeAt(a);
        if (l = R.getGlyph(e, l)) {
          p && (w += n(e, p.id, l.id));
          var p = w;
          1 === L ? p += (u - h) / 2 : 2 === L && (p += u - h);
          b.push({position:[p, y], data:l, index:a, line:d});
          w += l.xadvance + I;
          p = l;
        }
      }
      y += x;
      w = 0;
    });
    this._linesTotal = f.length;
  };
  b.prototype._setupSpaceGlyphs = function(a) {
    this._fallbackTabGlyph = this._fallbackSpaceGlyph = null;
    if (a.chars && 0 !== a.chars.length) {
      var b;
      if (!(b = f(a, 32))) {
        a: {
          for (b = 0; b < w.length; b++) {
            var c = w[b].charCodeAt(0);
            c = e(a.chars, c);
            if (0 <= c) {
              b = a.chars[c];
              break a;
            }
          }
          b = 0;
        }
      }
      a = b || a.chars[0];
      b = this._opt.tabSize * a.xadvance;
      this._fallbackSpaceGlyph = a;
      this._fallbackTabGlyph = t(a, {x:0, y:0, xadvance:b, id:9, xoffset:0, yoffset:0, width:0, height:0});
    }
  };
  b.prototype.getGlyph = function(a, b) {
    return (a = f(a, b)) ? a : 9 === b ? this._fallbackTabGlyph : 32 === b ? this._fallbackSpaceGlyph : null;
  };
  b.prototype.computeMetrics = function(a, b, c, e) {
    var d = this._opt.letterSpacing || 0, f = this._opt.font, h = 0, l = 0, p = 0;
    if (!f.chars || 0 === f.chars.length) {
      return {start:b, end:b, width:0};
    }
    c = Math.min(a.length, c);
    for (var k = b; k < c; k++) {
      var m = a.charCodeAt(k);
      if (m = this.getGlyph(f, m)) {
        var t = v ? n(f, v.id, m.id) : 0;
        h += t;
        t = h + m.xadvance + d;
        var q = h + m.width;
        if (q >= e || t >= e) {
          break;
        }
        h = t;
        l = q;
        var v = m;
      }
      p++;
    }
    v && (l += v.xoffset);
    return {start:b, end:b + p, width:l};
  };
  "width height descender ascender xHeight baseline capHeight lineHeight".split(" ").forEach(function(a) {
    Object.defineProperty(b.prototype, a, {get:(new Function(["return function " + a + "() {", "  return this._" + a, "}"].join("\n")))(), configurable:!0});
  });
}, {"as-number":2, "indexof-property":5, "word-wrapper":15, xtend:16}], 9:[function(a, c, k) {
  var b = Object.prototype.hasOwnProperty, f = Object.prototype.propertyIsEnumerable;
  c.exports = function() {
    try {
      if (!Object.assign) {
        return !1;
      }
      var a = new String("abc");
      a[5] = "de";
      if ("5" === Object.getOwnPropertyNames(a)[0]) {
        return !1;
      }
      var b = {};
      for (a = 0; 10 > a; a++) {
        b["_" + String.fromCharCode(a)] = a;
      }
      if ("0123456789" !== Object.getOwnPropertyNames(b).map(function(a) {
        return b[a];
      }).join("")) {
        return !1;
      }
      var c = {};
      "abcdefghijklmnopqrst".split("").forEach(function(a) {
        c[a] = a;
      });
      return "abcdefghijklmnopqrst" !== Object.keys(Object.assign({}, c)).join("") ? !1 : !0;
    } catch (q) {
      return !1;
    }
  }() ? Object.assign : function(a, c) {
    if (null === a || void 0 === a) {
      throw new TypeError("Object.assign cannot be called with null or undefined");
    }
    var d = Object(a);
    for (var h, k = 1; k < arguments.length; k++) {
      var t = Object(arguments[k]);
      for (var e in t) {
        b.call(t, e) && (d[e] = t[e]);
      }
      if (Object.getOwnPropertySymbols) {
        h = Object.getOwnPropertySymbols(t);
        for (var l = 0; l < h.length; l++) {
          f.call(t, h[l]) && (d[h[l]] = t[h[l]]);
        }
      }
    }
    return d;
  };
}, {}], 10:[function(a, c, k) {
  var b = a("dtype"), f = a("an-array"), d = a("is-buffer"), h = [0, 2, 3], n = [2, 1, 3];
  c.exports = function(a, c) {
    a && (f(a) || d(a)) || (c = a || {}, a = null);
    c = "number" === typeof c ? {count:c} : c || {};
    var k = "string" === typeof c.type ? c.type : "uint16", e = c.start || 0, l = !1 !== c.clockwise ? h : n, m = l[0], q = l[1];
    l = l[2];
    c = 6 * ("number" === typeof c.count ? c.count : 1);
    a = a || new (b(k))(c);
    for (var y = k = 0; k < c; k += 6, y += 4) {
      var x = k + e;
      a[x + 0] = y + 0;
      a[x + 1] = y + 1;
      a[x + 2] = y + 2;
      a[x + 3] = y + m;
      a[x + 4] = y + q;
      a[x + 5] = y + l;
    }
    return a;
  };
}, {"an-array":1, dtype:3, "is-buffer":7}], 11:[function(a, c, k) {
  function b(a) {
    t.call(this);
    "string" === typeof a && (a = {text:a});
    this._opt = n({}, a);
    a && this.update(a);
  }
  var f = a("layout-bmfont-text");
  k = a("inherits");
  var d = a("quad-indices"), h = a("three-buffer-vertex-data"), n = a("object-assign"), q = a("./lib/vertices"), m = a("./lib/utils"), t = THREE.BufferGeometry;
  c.exports = function(a) {
    return new b(a);
  };
  k(b, t);
  b.prototype.update = function(a) {
    "string" === typeof a && (a = {text:a});
    a = n({}, this._opt, a);
    if (!a.font) {
      throw new TypeError("must specify a { font } in options");
    }
    this.layout = f(a);
    var b = !1 !== a.flipY, c = a.font, e = c.common.scaleW, k = c.common.scaleH;
    this.visibleGlyphs = c = this.layout.glyphs.filter(function(a) {
      a = a.data;
      return 0 < a.width * a.height;
    });
    var m = q.positions(c);
    b = q.uvs(c, e, k, b);
    e = d({clockwise:!0, type:"uint16", count:c.length});
    h.index(this, e, 1, "uint16");
    h.attr(this, "position", m, 2);
    h.attr(this, "uv", b, 2);
    !a.multipage && "page" in this.attributes ? this.removeAttribute("page") : a.multipage && (a = q.pages(c), h.attr(this, "page", a, 1));
  };
  b.prototype.computeBoundingSphere = function() {
    null === this.boundingSphere && (this.boundingSphere = new THREE.Sphere);
    var a = this.attributes.position.array, b = this.attributes.position.itemSize;
    !a || !b || 2 > a.length ? (this.boundingSphere.radius = 0, this.boundingSphere.center.set(0, 0, 0)) : (m.computeSphere(a, this.boundingSphere), isNaN(this.boundingSphere.radius) && console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.'));
  };
  b.prototype.computeBoundingBox = function() {
    null === this.boundingBox && (this.boundingBox = new THREE.Box3);
    var a = this.boundingBox, b = this.attributes.position.array, c = this.attributes.position.itemSize;
    !b || !c || 2 > b.length ? a.makeEmpty() : m.computeBox(b, a);
  };
}, {"./lib/utils":12, "./lib/vertices":13, inherits:6, "layout-bmfont-text":8, "object-assign":9, "quad-indices":10, "three-buffer-vertex-data":14}], 12:[function(a, c, k) {
  function b(a) {
    var b = a.length / 2;
    f.min[0] = a[0];
    f.min[1] = a[1];
    f.max[0] = a[0];
    f.max[1] = a[1];
    for (var c = 0; c < b; c++) {
      var d = a[2 * c], k = a[2 * c + 1];
      f.min[0] = Math.min(d, f.min[0]);
      f.min[1] = Math.min(k, f.min[1]);
      f.max[0] = Math.max(d, f.max[0]);
      f.max[1] = Math.max(k, f.max[1]);
    }
  }
  var f = {min:[0, 0], max:[0, 0]};
  c.exports.computeBox = function(a, c) {
    b(a);
    c.min.set(f.min[0], f.min[1], 0);
    c.max.set(f.max[0], f.max[1], 0);
  };
  c.exports.computeSphere = function(a, c) {
    b(a);
    a = f.min[0];
    var d = f.min[1], h = f.max[0] - a, k = f.max[1] - d, t = Math.sqrt(h * h + k * k);
    c.center.set(a + h / 2, d + k / 2, 0);
    c.radius = t / 2;
  };
}, {}], 13:[function(a, c, k) {
  c.exports.pages = function(a) {
    var b = new Float32Array(4 * a.length), c = 0;
    a.forEach(function(a) {
      a = a.data.page || 0;
      b[c++] = a;
      b[c++] = a;
      b[c++] = a;
      b[c++] = a;
    });
    return b;
  };
  c.exports.uvs = function(a, c, d, h) {
    var b = new Float32Array(8 * a.length), f = 0;
    a.forEach(function(a) {
      a = a.data;
      var k = a.y + a.height, e = a.x / c, l = a.y / d, m = (a.x + a.width) / c, n = k / d;
      h && (l = (d - a.y) / d, n = (d - k) / d);
      b[f++] = e;
      b[f++] = l;
      b[f++] = e;
      b[f++] = n;
      b[f++] = m;
      b[f++] = n;
      b[f++] = m;
      b[f++] = l;
    });
    return b;
  };
  c.exports.positions = function(a) {
    var b = new Float32Array(8 * a.length), c = 0;
    a.forEach(function(a) {
      var d = a.data, f = a.position[0] + d.xoffset;
      a = a.position[1] + d.yoffset;
      var h = d.width;
      d = d.height;
      b[c++] = f;
      b[c++] = a;
      b[c++] = f;
      b[c++] = a + d;
      b[c++] = f + h;
      b[c++] = a + d;
      b[c++] = f + h;
      b[c++] = a;
    });
    return b;
  };
}, {}], 14:[function(a, c, k) {
  function b(a, b, c, k) {
    b = b || [];
    var d;
    if (!(d = !a)) {
      if (d = b, a.itemSize === c && a.array) {
        var h = a.array.length;
        d = Array.isArray(d) && Array.isArray(d[0]) ? h !== d.length * c : h !== d.length;
      } else {
        d = !0;
      }
    }
    if (d) {
      return b = f(b, k), a = new THREE.BufferAttribute(b, c), a.needsUpdate = !0, a;
    }
    f(b, a.array);
    a.needsUpdate = !0;
    return null;
  }
  var f = a("flatten-vertex-data");
  c.exports.attr = function(a, c, f, k, m) {
    "number" !== typeof k && (k = 3);
    "string" !== typeof m && (m = "float32");
    if (Array.isArray(f) && Array.isArray(f[0]) && f[0].length !== k) {
      throw Error("Nested vertex array has unexpected size; expected " + k + " but found " + f[0].length);
    }
    var d = a.getAttribute(c);
    (f = b(d, f, k, m)) && a.addAttribute(c, f);
  };
  c.exports.index = function(a, c, f, k) {
    "number" !== typeof f && (f = 1);
    "string" !== typeof k && (k = "uint16");
    var d = !a.index && "function" !== typeof a.setIndex, h = d ? a.getAttribute("index") : a.index;
    if (c = b(h, c, f, k)) {
      d ? a.addAttribute("index", c) : a.index = c;
    }
  };
}, {"flatten-vertex-data":4}], 15:[function(a, c, k) {
  function b(a, b, c, d) {
    return {start:b, end:b + Math.min(d, c - b)};
  }
  var f = /\n/, d = /\s/;
  c.exports = function(a, b) {
    return c.exports.lines(a, b).map(function(b) {
      return a.substring(b.start, b.end);
    }).join("\n");
  };
  c.exports.lines = function(a, c) {
    c = c || {};
    if (0 === c.width && "nowrap" !== c.mode) {
      return [];
    }
    a = a || "";
    var h = "number" === typeof c.width ? c.width : Number.MAX_VALUE, k = Math.max(0, c.start || 0), n = "number" === typeof c.end ? c.end : a.length, e = c.mode;
    c = c.measure || b;
    if ("pre" === e) {
      var l = [];
      for (e = k; k < n && k < a.length; k++) {
        var u = a.charAt(k);
        if ((u = f.test(u)) || k === n - 1) {
          e = c(a, e, u ? k : k + 1, h), l.push(e), e = k + 1;
        }
      }
      return l;
    }
    l = k;
    k = [];
    "nowrap" === e && (h = Number.MAX_VALUE);
    for (; l < n && l < a.length;) {
      e = n;
      u = a.indexOf("\n", l);
      for (e = -1 === u || u > e ? e : u; l < e && d.test(a.charAt(l));) {
        l++;
      }
      u = c(a, l, e, h);
      var w = l + (u.end - u.start);
      u = w + 1;
      if (w < e) {
        for (; w > l && !d.test(a.charAt(w));) {
          w--;
        }
        if (w === l) {
          u > l + 1 && u--, w = u;
        } else {
          for (u = w; w > l && d.test(a.charAt(w - 1));) {
            w--;
          }
        }
      }
      w >= l && (l = c(a, l, w, h), k.push(l));
      l = u;
    }
    return k;
  };
}, {}], 16:[function(a, c, k) {
  c.exports = function() {
    for (var a = {}, c = 0; c < arguments.length; c++) {
      var h = arguments[c], k;
      for (k in h) {
        b.call(h, k) && (a[k] = h[k]);
      }
    }
    return a;
  };
  var b = Object.prototype.hasOwnProperty;
}, {}], 17:[function(a, c, k) {
  window.createGeometry = a("three-bmfont-text");
}, {"three-bmfont-text":11}]}, {}, [17]);
!function(a) {
  if ("object" == typeof exports && "undefined" != typeof module) {
    module.exports = a();
  } else {
    var c;
    "undefined" != typeof window ? c = window : "undefined" != typeof global ? c = global : "undefined" != typeof self && (c = self);
    c.CANNON = a();
  }
}(function() {
  return function f(c, k, b) {
    function d(n, m) {
      if (!k[n]) {
        if (!c[n]) {
          var t = "function" == typeof require && require;
          if (!m && t) {
            return t(n, !0);
          }
          if (h) {
            return h(n, !0);
          }
          throw Error("Cannot find module '" + n + "'");
        }
        m = k[n] = {exports:{}};
        c[n][0].call(m.exports, function(b) {
          var e = c[n][1][b];
          return d(e ? e : b);
        }, m, m.exports, f, c, k, b);
      }
      return k[n].exports;
    }
    for (var h = "function" == typeof require && require, n = 0; n < b.length; n++) {
      d(b[n]);
    }
    return d;
  }({1:[function(c, k) {
    k.exports = {name:"cannon", version:"0.6.2", description:"A lightweight 3D physics engine written in JavaScript.", homepage:"https://github.com/schteppe/cannon.js", author:"Stefan Hedman <schteppe@gmail.com> (http://steffe.se)", keywords:["cannon.js", "cannon", "physics", "engine", "3d"], main:"./build/cannon.js", engines:{node:"*"}, repository:{type:"git", url:"https://github.com/schteppe/cannon.js.git"}, bugs:{url:"https://github.com/schteppe/cannon.js/issues"}, licenses:[{type:"MIT"}], devDependencies:{jshint:"latest", 
    "uglify-js":"latest", nodeunit:"^0.9.0", grunt:"~0.4.0", "grunt-contrib-jshint":"~0.1.1", "grunt-contrib-nodeunit":"^0.4.1", "grunt-contrib-concat":"~0.1.3", "grunt-contrib-uglify":"^0.5.1", "grunt-browserify":"^2.1.4", "grunt-contrib-yuidoc":"^0.5.2", browserify:"*"}, dependencies:{}};
  }, {}], 2:[function(c, k) {
    k.exports = {version:c("../package.json").version, AABB:c("./collision/AABB"), ArrayCollisionMatrix:c("./collision/ArrayCollisionMatrix"), Body:c("./objects/Body"), Box:c("./shapes/Box"), Broadphase:c("./collision/Broadphase"), Constraint:c("./constraints/Constraint"), ContactEquation:c("./equations/ContactEquation"), Narrowphase:c("./world/Narrowphase"), ConeTwistConstraint:c("./constraints/ConeTwistConstraint"), ContactMaterial:c("./material/ContactMaterial"), ConvexPolyhedron:c("./shapes/ConvexPolyhedron"), 
    Cylinder:c("./shapes/Cylinder"), DistanceConstraint:c("./constraints/DistanceConstraint"), Equation:c("./equations/Equation"), EventTarget:c("./utils/EventTarget"), FrictionEquation:c("./equations/FrictionEquation"), GSSolver:c("./solver/GSSolver"), GridBroadphase:c("./collision/GridBroadphase"), Heightfield:c("./shapes/Heightfield"), HingeConstraint:c("./constraints/HingeConstraint"), LockConstraint:c("./constraints/LockConstraint"), Mat3:c("./math/Mat3"), Material:c("./material/Material"), 
    NaiveBroadphase:c("./collision/NaiveBroadphase"), ObjectCollisionMatrix:c("./collision/ObjectCollisionMatrix"), Pool:c("./utils/Pool"), Particle:c("./shapes/Particle"), Plane:c("./shapes/Plane"), PointToPointConstraint:c("./constraints/PointToPointConstraint"), Quaternion:c("./math/Quaternion"), Ray:c("./collision/Ray"), RaycastVehicle:c("./objects/RaycastVehicle"), RaycastResult:c("./collision/RaycastResult"), RigidVehicle:c("./objects/RigidVehicle"), RotationalEquation:c("./equations/RotationalEquation"), 
    RotationalMotorEquation:c("./equations/RotationalMotorEquation"), SAPBroadphase:c("./collision/SAPBroadphase"), SPHSystem:c("./objects/SPHSystem"), Shape:c("./shapes/Shape"), Solver:c("./solver/Solver"), Sphere:c("./shapes/Sphere"), SplitSolver:c("./solver/SplitSolver"), Spring:c("./objects/Spring"), Trimesh:c("./shapes/Trimesh"), Vec3:c("./math/Vec3"), Vec3Pool:c("./utils/Vec3Pool"), World:c("./world/World")};
  }, {"../package.json":1, "./collision/AABB":3, "./collision/ArrayCollisionMatrix":4, "./collision/Broadphase":5, "./collision/GridBroadphase":6, "./collision/NaiveBroadphase":7, "./collision/ObjectCollisionMatrix":8, "./collision/Ray":9, "./collision/RaycastResult":10, "./collision/SAPBroadphase":11, "./constraints/ConeTwistConstraint":12, "./constraints/Constraint":13, "./constraints/DistanceConstraint":14, "./constraints/HingeConstraint":15, "./constraints/LockConstraint":16, "./constraints/PointToPointConstraint":17, 
  "./equations/ContactEquation":19, "./equations/Equation":20, "./equations/FrictionEquation":21, "./equations/RotationalEquation":22, "./equations/RotationalMotorEquation":23, "./material/ContactMaterial":24, "./material/Material":25, "./math/Mat3":27, "./math/Quaternion":28, "./math/Vec3":30, "./objects/Body":31, "./objects/RaycastVehicle":32, "./objects/RigidVehicle":33, "./objects/SPHSystem":34, "./objects/Spring":35, "./shapes/Box":37, "./shapes/ConvexPolyhedron":38, "./shapes/Cylinder":39, 
  "./shapes/Heightfield":40, "./shapes/Particle":41, "./shapes/Plane":42, "./shapes/Shape":43, "./shapes/Sphere":44, "./shapes/Trimesh":45, "./solver/GSSolver":46, "./solver/Solver":47, "./solver/SplitSolver":48, "./utils/EventTarget":49, "./utils/Pool":51, "./utils/Vec3Pool":54, "./world/Narrowphase":55, "./world/World":56}], 3:[function(c, k) {
    function b(b) {
      b = b || {};
      this.lowerBound = new f;
      b.lowerBound && this.lowerBound.copy(b.lowerBound);
      this.upperBound = new f;
      b.upperBound && this.upperBound.copy(b.upperBound);
    }
    var f = c("../math/Vec3");
    c("../utils/Utils");
    k.exports = b;
    var d = new f;
    b.prototype.setFromPoints = function(b, c, f, h) {
      var e = this.lowerBound, l = this.upperBound;
      e.copy(b[0]);
      f && f.vmult(e, e);
      l.copy(e);
      for (var k = 1; k < b.length; k++) {
        var m = b[k];
        f && (f.vmult(m, d), m = d);
        m.x > l.x && (l.x = m.x);
        m.x < e.x && (e.x = m.x);
        m.y > l.y && (l.y = m.y);
        m.y < e.y && (e.y = m.y);
        m.z > l.z && (l.z = m.z);
        m.z < e.z && (e.z = m.z);
      }
      return c && (c.vadd(e, e), c.vadd(l, l)), h && (e.x -= h, e.y -= h, e.z -= h, l.x += h, l.y += h, l.z += h), this;
    };
    b.prototype.copy = function(b) {
      return this.lowerBound.copy(b.lowerBound), this.upperBound.copy(b.upperBound), this;
    };
    b.prototype.clone = function() {
      return (new b).copy(this);
    };
    b.prototype.extend = function(b) {
      var c = b.lowerBound.x;
      this.lowerBound.x > c && (this.lowerBound.x = c);
      c = b.upperBound.x;
      this.upperBound.x < c && (this.upperBound.x = c);
      c = b.lowerBound.y;
      this.lowerBound.y > c && (this.lowerBound.y = c);
      c = b.upperBound.y;
      this.upperBound.y < c && (this.upperBound.y = c);
      c = b.lowerBound.z;
      this.lowerBound.z > c && (this.lowerBound.z = c);
      c = b.upperBound.z;
      this.upperBound.z < c && (this.upperBound.z = c);
    };
    b.prototype.overlaps = function(b) {
      var c = this.lowerBound, d = this.upperBound, f = b.lowerBound;
      b = b.upperBound;
      return (f.x <= d.x && d.x <= b.x || c.x <= b.x && b.x <= d.x) && (f.y <= d.y && d.y <= b.y || c.y <= b.y && b.y <= d.y) && (f.z <= d.z && d.z <= b.z || c.z <= b.z && b.z <= d.z);
    };
    b.prototype.contains = function(b) {
      var c = this.lowerBound, d = this.upperBound, f = b.lowerBound;
      b = b.upperBound;
      return c.x <= f.x && d.x >= b.x && c.y <= f.y && d.y >= b.y && c.z <= f.z && d.z >= b.z;
    };
    b.prototype.getCorners = function(b, c, d, f, e, h, k, w) {
      var l = this.lowerBound, m = this.upperBound;
      b.copy(l);
      c.set(m.x, l.y, l.z);
      d.set(m.x, m.y, l.z);
      f.set(l.x, m.y, m.z);
      e.set(m.x, l.y, l.z);
      h.set(l.x, m.y, l.z);
      k.set(l.x, l.y, m.z);
      w.copy(m);
    };
    var h = [new f, new f, new f, new f, new f, new f, new f, new f];
    b.prototype.toLocalFrame = function(b, c) {
      this.getCorners(h[0], h[1], h[2], h[3], h[4], h[5], h[6], h[7]);
      for (var d = 0; 8 !== d; d++) {
        var f = h[d];
        b.pointToLocal(f, f);
      }
      return c.setFromPoints(h);
    };
    b.prototype.toWorldFrame = function(b, c) {
      this.getCorners(h[0], h[1], h[2], h[3], h[4], h[5], h[6], h[7]);
      for (var d = 0; 8 !== d; d++) {
        var f = h[d];
        b.pointToWorld(f, f);
      }
      return c.setFromPoints(h);
    };
  }, {"../math/Vec3":30, "../utils/Utils":53}], 4:[function(c, k) {
    function b() {
      this.matrix = [];
    }
    k.exports = b;
    b.prototype.get = function(b, c) {
      if (b = b.index, c = c.index, c > b) {
        var d = c;
        c = b;
        b = d;
      }
      return this.matrix[(b * (b + 1) >> 1) + c - 1];
    };
    b.prototype.set = function(b, c, h) {
      if (b = b.index, c = c.index, c > b) {
        var d = c;
        c = b;
        b = d;
      }
      this.matrix[(b * (b + 1) >> 1) + c - 1] = h ? 1 : 0;
    };
    b.prototype.reset = function() {
      for (var b = 0, c = this.matrix.length; b !== c; b++) {
        this.matrix[b] = 0;
      }
    };
    b.prototype.setNumObjects = function(b) {
      this.matrix.length = b * (b - 1) >> 1;
    };
  }, {}], 5:[function(c, k) {
    function b() {
      this.world = null;
      this.useBoundingBoxes = !1;
      this.dirty = !0;
    }
    var f = c("../objects/Body"), d = c("../math/Vec3"), h = c("../math/Quaternion");
    c("../shapes/Shape");
    c("../shapes/Plane");
    k.exports = b;
    b.prototype.collisionPairs = function() {
      throw Error("collisionPairs not implemented for this BroadPhase class!");
    };
    var n = f.STATIC | f.KINEMATIC;
    b.prototype.needBroadphaseCollision = function(b, c) {
      return 0 === (b.collisionFilterGroup & c.collisionFilterMask) || 0 === (c.collisionFilterGroup & b.collisionFilterMask) ? !1 : 0 === (b.type & n) && b.sleepState !== f.SLEEPING || 0 === (c.type & n) && c.sleepState !== f.SLEEPING ? !0 : !1;
    };
    b.prototype.intersectionTest = function(b, c, e, d) {
      this.useBoundingBoxes ? this.doBoundingBoxBroadphase(b, c, e, d) : this.doBoundingSphereBroadphase(b, c, e, d);
    };
    var q = new d;
    new d;
    new h;
    new d;
    b.prototype.doBoundingSphereBroadphase = function(b, c, e, d) {
      c.position.vsub(b.position, q);
      var f = Math.pow(b.boundingRadius + c.boundingRadius, 2), h = q.norm2();
      f > h && (e.push(b), d.push(c));
    };
    b.prototype.doBoundingBoxBroadphase = function(b, c, e, d) {
      b.aabbNeedsUpdate && b.computeAABB();
      c.aabbNeedsUpdate && c.computeAABB();
      b.aabb.overlaps(c.aabb) && (e.push(b), d.push(c));
    };
    var m = {keys:[]}, t = [], e = [];
    b.prototype.makePairsUnique = function(b, c) {
      for (var d = b.length, f = 0; f !== d; f++) {
        t[f] = b[f], e[f] = c[f];
      }
      b.length = 0;
      for (f = c.length = 0; f !== d; f++) {
        var h = t[f].id, l = e[f].id;
        h = l > h ? h + "," + l : l + "," + h;
        m[h] = f;
        m.keys.push(h);
      }
      for (f = 0; f !== m.keys.length; f++) {
        h = m.keys.pop(), d = m[h], b.push(t[d]), c.push(e[d]), delete m[h];
      }
    };
    b.prototype.setWorld = function() {
    };
    var l = new d;
    b.boundingSphereCheck = function(b, c) {
      return b.position.vsub(c.position, l), Math.pow(b.shape.boundingSphereRadius + c.shape.boundingSphereRadius, 2) > l.norm2();
    };
    b.prototype.aabbQuery = function() {
      return console.warn(".aabbQuery is not implemented in this Broadphase subclass."), [];
    };
  }, {"../math/Quaternion":28, "../math/Vec3":30, "../objects/Body":31, "../shapes/Plane":42, "../shapes/Shape":43}], 6:[function(c, k) {
    function b(b, c, h, e, l) {
      f.apply(this);
      this.nx = h || 10;
      this.ny = e || 10;
      this.nz = l || 10;
      this.aabbMin = b || new d(100, 100, 100);
      this.aabbMax = c || new d(-100, -100, -100);
      b = this.nx * this.ny * this.nz;
      if (0 >= b) {
        throw "GridBroadphase: Each dimension's n must be >0";
      }
      this.bins = [];
      this.binLengths = [];
      this.bins.length = b;
      this.binLengths.length = b;
      for (c = 0; b > c; c++) {
        this.bins[c] = [], this.binLengths[c] = 0;
      }
    }
    k.exports = b;
    var f = c("./Broadphase"), d = c("../math/Vec3"), h = c("../shapes/Shape");
    b.prototype = new f;
    b.prototype.constructor = b;
    var n = new d;
    new d;
    b.prototype.collisionPairs = function(b, c, d) {
      function e(b, c, e, d, f, h, l) {
        b = (b - B) * K | 0;
        c = (c - G) * I | 0;
        e = (e - H) * L | 0;
        d = S((d - B) * K);
        f = S((f - G) * I);
        h = S((h - H) * L);
        0 > b ? b = 0 : b >= t && (b = t - 1);
        0 > c ? c = 0 : c >= q && (c = q - 1);
        0 > e ? e = 0 : e >= p && (e = p - 1);
        0 > d ? d = 0 : d >= t && (d = t - 1);
        0 > f ? f = 0 : f >= q && (f = q - 1);
        0 > h ? h = 0 : h >= p && (h = p - 1);
        b *= v;
        c *= z;
        e *= C;
        d *= v;
        f *= z;
        for (h *= C; d >= b; b += v) {
          for (var k = c; f >= k; k += z) {
            for (var m = e; h >= m; m += C) {
              var n = b + k + m;
              V[n][N[n]++] = l;
            }
          }
        }
      }
      var f = b.numObjects();
      b = b.bodies;
      var k = this.aabbMax, m = this.aabbMin, t = this.nx, q = this.ny, p = this.nz, v = q * p, z = p, C = 1, A = k.x, D = k.y, E = k.z, B = m.x, G = m.y, H = m.z, K = t / (A - B), I = q / (D - G), L = p / (E - H);
      A = (A - B) / t;
      var R = (D - G) / q;
      E = (E - H) / p;
      var J = .5 * Math.sqrt(A * A + R * R + E * E);
      D = h.types;
      var Q = D.SPHERE, aa = D.PLANE, V = (D.BOX, D.COMPOUND, D.CONVEXPOLYHEDRON, this.bins), N = this.binLengths;
      D = this.bins.length;
      for (m = 0; m !== D; m++) {
        N[m] = 0;
      }
      var S = Math.ceil;
      m = Math.min;
      k = Math.max;
      for (m = 0; m !== f; m++) {
        k = b[m];
        var W = k.shape;
        switch(W.type) {
          case Q:
            var M = k.position.x, O = k.position.y, P = k.position.z;
            W = W.radius;
            e(M - W, O - W, P - W, M + W, O + W, P + W, k);
            break;
          case aa:
            W.worldNormalNeedsUpdate && W.computeWorldNormal(k.quaternion);
            P = W.worldNormal;
            W = G + .5 * R - k.position.y;
            var ka = H + .5 * E - k.position.z, ha = n;
            ha.set(B + .5 * A - k.position.x, W, ka);
            for (var ja = M = 0; M !== t; M++, ja += v, ha.y = W, ha.x += A) {
              for (var X = O = 0; O !== q; O++, X += z, ha.z = ka, ha.y += R) {
                for (var fa = 0, ba = 0; fa !== p; fa++, ba += C, ha.z += E) {
                  if (ha.dot(P) < J) {
                    var la = ja + X + ba;
                    V[la][N[la]++] = k;
                  }
                }
              }
            }
            break;
          default:
            k.aabbNeedsUpdate && k.computeAABB(), e(k.aabb.lowerBound.x, k.aabb.lowerBound.y, k.aabb.lowerBound.z, k.aabb.upperBound.x, k.aabb.upperBound.y, k.aabb.upperBound.z, k);
        }
      }
      for (m = 0; m !== D; m++) {
        if (f = N[m], 1 < f) {
          for (b = V[m], M = 0; M !== f; M++) {
            for (k = b[M], O = 0; O !== M; O++) {
              A = b[O], this.needBroadphaseCollision(k, A) && this.intersectionTest(k, A, c, d);
            }
          }
        }
      }
      this.makePairsUnique(c, d);
    };
  }, {"../math/Vec3":30, "../shapes/Shape":43, "./Broadphase":5}], 7:[function(c, k) {
    function b() {
      f.apply(this);
    }
    k.exports = b;
    var f = c("./Broadphase");
    c = c("./AABB");
    b.prototype = new f;
    b.prototype.constructor = b;
    b.prototype.collisionPairs = function(b, c, f) {
      var d, h = b.bodies, k = h.length;
      for (b = 0; b !== k; b++) {
        for (d = 0; d !== b; d++) {
          var e = h[b];
          var l = h[d];
          this.needBroadphaseCollision(e, l) && this.intersectionTest(e, l, c, f);
        }
      }
    };
    new c;
    b.prototype.aabbQuery = function(b, c, f) {
      f = f || [];
      for (var d = 0; d < b.bodies.length; d++) {
        var h = b.bodies[d];
        h.aabbNeedsUpdate && h.computeAABB();
        h.aabb.overlaps(c) && f.push(h);
      }
      return f;
    };
  }, {"./AABB":3, "./Broadphase":5}], 8:[function(c, k) {
    function b() {
      this.matrix = {};
    }
    k.exports = b;
    b.prototype.get = function(b, c) {
      if (b = b.id, c = c.id, c > b) {
        var d = c;
        c = b;
        b = d;
      }
      return b + "-" + c in this.matrix;
    };
    b.prototype.set = function(b, c, h) {
      if (b = b.id, c = c.id, c > b) {
        var d = c;
        c = b;
        b = d;
      }
      h ? this.matrix[b + "-" + c] = !0 : delete this.matrix[b + "-" + c];
    };
    b.prototype.reset = function() {
      this.matrix = {};
    };
    b.prototype.setNumObjects = function() {
    };
  }, {}], 9:[function(c, k) {
    function b(c, e) {
      this.from = c ? c.clone() : new d;
      this.to = e ? e.clone() : new d;
      this._direction = new d;
      this.precision = 1E-4;
      this.checkCollisionResponse = !0;
      this.skipBackfaces = !1;
      this.collisionFilterGroup = this.collisionFilterMask = -1;
      this.mode = b.ANY;
      this.result = new n;
      this.hasHit = !1;
      this.callback = function() {
      };
    }
    function f(b, c, d, f) {
      f.vsub(c, Q);
      d.vsub(c, e);
      b.vsub(c, l);
      var h, k;
      b = Q.dot(Q);
      c = Q.dot(e);
      d = Q.dot(l);
      f = e.dot(e);
      var p = e.dot(l);
      return 0 <= (h = f * d - c * p) && 0 <= (k = b * p - c * d) && b * f - c * c > h + k;
    }
    k.exports = b;
    var d = c("../math/Vec3");
    k = c("../math/Quaternion");
    var h = c("../math/Transform"), n = (c("../shapes/ConvexPolyhedron"), c("../shapes/Box"), c("../collision/RaycastResult")), q = c("../shapes/Shape");
    c = c("../collision/AABB");
    b.prototype.constructor = b;
    b.CLOSEST = 1;
    b.ANY = 2;
    b.ALL = 4;
    var m = new c, t = [];
    b.prototype.intersectWorld = function(c, e) {
      return this.mode = e.mode || b.ANY, this.result = e.result || new n, this.skipBackfaces = !!e.skipBackfaces, this.collisionFilterMask = "undefined" != typeof e.collisionFilterMask ? e.collisionFilterMask : -1, this.collisionFilterGroup = "undefined" != typeof e.collisionFilterGroup ? e.collisionFilterGroup : -1, e.from && this.from.copy(e.from), e.to && this.to.copy(e.to), this.callback = e.callback || function() {
      }, this.hasHit = !1, this.result.reset(), this._updateDirection(), this.getAABB(m), t.length = 0, c.broadphase.aabbQuery(c, m, t), this.intersectBodies(t), this.hasHit;
    };
    var e = new d, l = new d;
    b.pointInTriangle = f;
    var u = new d, w = new k;
    b.prototype.intersectBody = function(b, c) {
      c && (this.result = c, this._updateDirection());
      c = this.checkCollisionResponse;
      if ((!c || b.collisionResponse) && 0 !== (this.collisionFilterGroup & b.collisionFilterMask) && 0 !== (b.collisionFilterGroup & this.collisionFilterMask)) {
        for (var e = 0, d = b.shapes.length; d > e; e++) {
          var f = b.shapes[e];
          if ((!c || f.collisionResponse) && (b.quaternion.mult(b.shapeOrientations[e], w), b.quaternion.vmult(b.shapeOffsets[e], u), u.vadd(b.position, u), this.intersectShape(f, w, u, b), this.result._shouldStop)) {
            break;
          }
        }
      }
    };
    b.prototype.intersectBodies = function(b, c) {
      c && (this.result = c, this._updateDirection());
      c = 0;
      for (var e = b.length; !this.result._shouldStop && e > c; c++) {
        this.intersectBody(b[c]);
      }
    };
    b.prototype._updateDirection = function() {
      this.to.vsub(this.from, this._direction);
      this._direction.normalize();
    };
    b.prototype.intersectShape = function(b, c, e, d) {
      var f = this.from, h = this._direction;
      e.vsub(f, Q);
      var l = Q.dot(h);
      h.mult(l, aa);
      aa.vadd(f, aa);
      e.distanceTo(aa) > b.boundingSphereRadius || (f = this[b.type]) && f.call(this, b, c, e, d);
    };
    var y = (new d, new d, new d), x = new d, p = new d, v = new d;
    new d;
    new n;
    b.prototype.intersectBox = function(b, c, e, d) {
      return this.intersectConvex(b.convexPolyhedronRepresentation, c, e, d);
    };
    b.prototype[q.types.BOX] = b.prototype.intersectBox;
    b.prototype.intersectPlane = function(b, c, e, f) {
      var h = this.from, l = this.to, k = this._direction, p = new d(0, 0, 1);
      c.vmult(p, p);
      var m = new d;
      h.vsub(e, m);
      c = m.dot(p);
      l.vsub(e, m);
      m = m.dot(p);
      if (!(0 < c * m || h.distanceTo(l) < c || (m = p.dot(k), Math.abs(m) < this.precision))) {
        var n = new d;
        l = new d;
        c = new d;
        h.vsub(e, n);
        e = -p.dot(n) / m;
        k.scale(e, l);
        h.vadd(l, c);
        this.reportIntersection(p, c, b, f, -1);
      }
    };
    b.prototype[q.types.PLANE] = b.prototype.intersectPlane;
    b.prototype.getAABB = function(b) {
      var c = this.to, e = this.from;
      b.lowerBound.x = Math.min(c.x, e.x);
      b.lowerBound.y = Math.min(c.y, e.y);
      b.lowerBound.z = Math.min(c.z, e.z);
      b.upperBound.x = Math.max(c.x, e.x);
      b.upperBound.y = Math.max(c.y, e.y);
      b.upperBound.z = Math.max(c.z, e.z);
    };
    var z = {faceList:[0]};
    b.prototype.intersectHeightfield = function(c, e, f, l) {
      var k = (c.data, c.elementSize, new d), p = new b(this.from, this.to);
      h.pointToLocalFrame(f, e, p.from, p.from);
      h.pointToLocalFrame(f, e, p.to, p.to);
      var m = [], n = null, t = null, q = null, v = null, u = c.getIndexOfPosition(p.from.x, p.from.y, m, !1);
      if (u && (n = m[0], t = m[1], q = m[0], v = m[1]), u = c.getIndexOfPosition(p.to.x, p.to.y, m, !1), u && ((null === n || m[0] < n) && (n = m[0]), (null === q || m[0] > q) && (q = m[0]), (null === t || m[1] < t) && (t = m[1]), (null === v || m[1] > v) && (v = m[1])), null !== n) {
        for (p = [], c.getRectMinMax(n, t, q, v, p), n = (p[0], p[1], n); q >= n; n++) {
          for (p = t; v >= p; p++) {
            if (this.result._shouldStop || (c.getConvexTrianglePillar(n, p, !1), h.pointToWorldFrame(f, e, c.pillarOffset, k), this.intersectConvex(c.pillarConvex, e, k, l, z), this.result._shouldStop)) {
              return;
            }
            c.getConvexTrianglePillar(n, p, !0);
            h.pointToWorldFrame(f, e, c.pillarOffset, k);
            this.intersectConvex(c.pillarConvex, e, k, l, z);
          }
        }
      }
    };
    b.prototype[q.types.HEIGHTFIELD] = b.prototype.intersectHeightfield;
    var C = new d, A = new d;
    b.prototype.intersectSphere = function(b, c, e, d) {
      c = this.from;
      var f = this.to, h = Math.pow(f.x - c.x, 2) + Math.pow(f.y - c.y, 2) + Math.pow(f.z - c.z, 2), l = 2 * ((f.x - c.x) * (c.x - e.x) + (f.y - c.y) * (c.y - e.y) + (f.z - c.z) * (c.z - e.z)), k = Math.pow(l, 2) - 4 * h * (Math.pow(c.x - e.x, 2) + Math.pow(c.y - e.y, 2) + Math.pow(c.z - e.z, 2) - Math.pow(b.radius, 2));
      if (!(0 > k)) {
        if (0 === k) {
          c.lerp(f, k, C), C.vsub(e, A), A.normalize(), this.reportIntersection(A, C, b, d, -1);
        } else {
          var p = (-l - Math.sqrt(k)) / (2 * h);
          h = (-l + Math.sqrt(k)) / (2 * h);
          (0 <= p && 1 >= p && (c.lerp(f, p, C), C.vsub(e, A), A.normalize(), this.reportIntersection(A, C, b, d, -1)), this.result._shouldStop) || 0 <= h && 1 >= h && (c.lerp(f, h, C), C.vsub(e, A), A.normalize(), this.reportIntersection(A, C, b, d, -1));
        }
      }
    };
    b.prototype[q.types.SPHERE] = b.prototype.intersectSphere;
    var D = new d, E = (new d, new d, new d);
    b.prototype.intersectConvex = function(b, c, e, d, h) {
      h = h && h.faceList || null;
      for (var l = b.faces, k = b.vertices, m = b.faceNormals, n = this._direction, t = this.from, q = t.distanceTo(this.to), u = h ? h.length : l.length, w = this.result, z = 0; !w._shouldStop && u > z; z++) {
        var C = h ? h[z] : z, B = l[C], A = m[C], G = c, M = e;
        E.copy(k[B[0]]);
        G.vmult(E, E);
        E.vadd(M, E);
        E.vsub(t, E);
        G.vmult(A, D);
        A = n.dot(D);
        if (!(Math.abs(A) < this.precision || (A = D.dot(E) / A, 0 > A))) {
          for (n.mult(A, y), y.vadd(t, y), x.copy(k[B[0]]), G.vmult(x, x), M.vadd(x, x), A = 1; !w._shouldStop && A < B.length - 1; A++) {
            p.copy(k[B[A]]);
            v.copy(k[B[A + 1]]);
            G.vmult(p, p);
            G.vmult(v, v);
            M.vadd(p, p);
            M.vadd(v, v);
            var H = y.distanceTo(t);
            !f(y, x, p, v) && !f(y, p, x, v) || H > q || this.reportIntersection(D, y, b, d, C);
          }
        }
      }
    };
    b.prototype[q.types.CONVEXPOLYHEDRON] = b.prototype.intersectConvex;
    var B = new d, G = new d, H = new d, K = new d, I = new d, L = new d, R = (new c, []), J = new h;
    b.prototype.intersectTrimesh = function(b, c, e, d, l) {
      l = (l && l.faceList || null, b.indices);
      var k = (b.vertices, b.faceNormals, this.from), m = this.to, n = this._direction;
      J.position.copy(e);
      J.quaternion.copy(c);
      h.vectorToLocalFrame(e, c, n, G);
      h.pointToLocalFrame(e, c, k, H);
      h.pointToLocalFrame(e, c, m, K);
      k = H.distanceSquared(K);
      b.tree.rayQuery(this, J, R);
      m = 0;
      for (n = R.length; !this.result._shouldStop && m !== n; m++) {
        var t = R[m];
        b.getNormal(t, B);
        b.getVertex(l[3 * t], x);
        x.vsub(H, E);
        var q = G.dot(B);
        q = B.dot(E) / q;
        0 > q || (G.scale(q, y), y.vadd(H, y), b.getVertex(l[3 * t + 1], p), b.getVertex(l[3 * t + 2], v), q = y.distanceSquared(H), !f(y, p, x, v) && !f(y, x, p, v) || q > k || (h.vectorToWorldFrame(c, B, I), h.pointToWorldFrame(e, c, y, L), this.reportIntersection(I, L, b, d, t)));
      }
      R.length = 0;
    };
    b.prototype[q.types.TRIMESH] = b.prototype.intersectTrimesh;
    b.prototype.reportIntersection = function(c, e, d, f, h) {
      var l = this.from, k = this.to, p = l.distanceTo(e), m = this.result;
      if (!(this.skipBackfaces && 0 < c.dot(this._direction))) {
        switch(m.hitFaceIndex = "undefined" != typeof h ? h : -1, this.mode) {
          case b.ALL:
            this.hasHit = !0;
            m.set(l, k, c, e, d, f, p);
            m.hasHit = !0;
            this.callback(m);
            break;
          case b.CLOSEST:
            (p < m.distance || !m.hasHit) && (this.hasHit = !0, m.hasHit = !0, m.set(l, k, c, e, d, f, p));
            break;
          case b.ANY:
            this.hasHit = !0, m.hasHit = !0, m.set(l, k, c, e, d, f, p), m._shouldStop = !0;
        }
      }
    };
    var Q = new d, aa = new d;
  }, {"../collision/AABB":3, "../collision/RaycastResult":10, "../math/Quaternion":28, "../math/Transform":29, "../math/Vec3":30, "../shapes/Box":37, "../shapes/ConvexPolyhedron":38, "../shapes/Shape":43}], 10:[function(c, k) {
    function b() {
      this.rayFromWorld = new f;
      this.rayToWorld = new f;
      this.hitNormalWorld = new f;
      this.hitPointWorld = new f;
      this.hasHit = !1;
      this.body = this.shape = null;
      this.distance = this.hitFaceIndex = -1;
      this._shouldStop = !1;
    }
    var f = c("../math/Vec3");
    k.exports = b;
    b.prototype.reset = function() {
      this.rayFromWorld.setZero();
      this.rayToWorld.setZero();
      this.hitNormalWorld.setZero();
      this.hitPointWorld.setZero();
      this.hasHit = !1;
      this.body = this.shape = null;
      this.distance = this.hitFaceIndex = -1;
      this._shouldStop = !1;
    };
    b.prototype.abort = function() {
      this._shouldStop = !0;
    };
    b.prototype.set = function(b, c, f, k, m, t, e) {
      this.rayFromWorld.copy(b);
      this.rayToWorld.copy(c);
      this.hitNormalWorld.copy(f);
      this.hitPointWorld.copy(k);
      this.shape = m;
      this.body = t;
      this.distance = e;
    };
  }, {"../math/Vec3":30}], 11:[function(c, k) {
    function b(b) {
      f.apply(this);
      this.axisList = [];
      this.world = null;
      this.axisIndex = 0;
      var c = this.axisList;
      this._addBodyHandler = function(b) {
        c.push(b.body);
      };
      this._removeBodyHandler = function(b) {
        b = c.indexOf(b.body);
        -1 !== b && c.splice(b, 1);
      };
      b && this.setWorld(b);
    }
    var f = (c("../shapes/Shape"), c("../collision/Broadphase"));
    k.exports = b;
    b.prototype = new f;
    b.prototype.setWorld = function(b) {
      for (var c = this.axisList.length = 0; c < b.bodies.length; c++) {
        this.axisList.push(b.bodies[c]);
      }
      b.removeEventListener("addBody", this._addBodyHandler);
      b.removeEventListener("removeBody", this._removeBodyHandler);
      b.addEventListener("addBody", this._addBodyHandler);
      b.addEventListener("removeBody", this._removeBodyHandler);
      this.world = b;
      this.dirty = !0;
    };
    b.insertionSortX = function(b) {
      for (var c = 1, d = b.length; d > c; c++) {
        for (var f = b[c], k = c - 1; 0 <= k && !(b[k].aabb.lowerBound.x <= f.aabb.lowerBound.x); k--) {
          b[k + 1] = b[k];
        }
        b[k + 1] = f;
      }
      return b;
    };
    b.insertionSortY = function(b) {
      for (var c = 1, d = b.length; d > c; c++) {
        for (var f = b[c], k = c - 1; 0 <= k && !(b[k].aabb.lowerBound.y <= f.aabb.lowerBound.y); k--) {
          b[k + 1] = b[k];
        }
        b[k + 1] = f;
      }
      return b;
    };
    b.insertionSortZ = function(b) {
      for (var c = 1, d = b.length; d > c; c++) {
        for (var f = b[c], k = c - 1; 0 <= k && !(b[k].aabb.lowerBound.z <= f.aabb.lowerBound.z); k--) {
          b[k + 1] = b[k];
        }
        b[k + 1] = f;
      }
      return b;
    };
    b.prototype.collisionPairs = function(c, f, k) {
      var d, h = this.axisList, n = h.length, e = this.axisIndex;
      this.dirty && (this.sortList(), this.dirty = !1);
      for (c = 0; c !== n; c++) {
        var l = h[c];
        for (d = c + 1; n > d; d++) {
          var u = h[d];
          if (this.needBroadphaseCollision(l, u)) {
            if (!b.checkBounds(l, u, e)) {
              break;
            }
            this.intersectionTest(l, u, f, k);
          }
        }
      }
    };
    b.prototype.sortList = function() {
      for (var c = this.axisList, f = this.axisIndex, k = c.length, q = 0; q !== k; q++) {
        var m = c[q];
        m.aabbNeedsUpdate && m.computeAABB();
      }
      0 === f ? b.insertionSortX(c) : 1 === f ? b.insertionSortY(c) : 2 === f && b.insertionSortZ(c);
    };
    b.checkBounds = function(b, c, f) {
      var d, h;
      0 === f ? (d = b.position.x, h = c.position.x) : 1 === f ? (d = b.position.y, h = c.position.y) : 2 === f && (d = b.position.z, h = c.position.z);
      return d + b.boundingRadius > h - c.boundingRadius;
    };
    b.prototype.autoDetectAxis = function() {
      for (var b = 0, c = 0, f = 0, k = 0, m = 0, t = 0, e = this.axisList, l = e.length, u = 1 / l, w = 0; w !== l; w++) {
        var y = e[w], x = y.position.x;
        b += x;
        c += x * x;
        x = y.position.y;
        f += x;
        k += x * x;
        y = y.position.z;
        m += y;
        t += y * y;
      }
      b = c - b * b * u;
      f = k - f * f * u;
      m = t - m * m * u;
      this.axisIndex = b > f ? b > m ? 0 : 2 : f > m ? 1 : 2;
    };
    b.prototype.aabbQuery = function(b, c, f) {
      f = f || [];
      this.dirty && (this.sortList(), this.dirty = !1);
      b = this.axisIndex;
      var d = "x";
      1 === b && (d = "y");
      2 === b && (d = "z");
      b = this.axisList;
      for (d = (c.lowerBound[d], c.upperBound[d], 0); d < b.length; d++) {
        var h = b[d];
        h.aabbNeedsUpdate && h.computeAABB();
        h.aabb.overlaps(c) && f.push(h);
      }
      return f;
    };
  }, {"../collision/Broadphase":5, "../shapes/Shape":43}], 12:[function(c, k) {
    function b(b, c, k) {
      k = k || {};
      var e = "undefined" != typeof k.maxForce ? k.maxForce : 1E6, l = k.pivotA ? k.pivotA.clone() : new n, m = k.pivotB ? k.pivotB.clone() : new n;
      this.axisA = k.axisA ? k.axisA.clone() : new n;
      this.axisB = k.axisB ? k.axisB.clone() : new n;
      f.call(this, b, l, c, m, e);
      this.collideConnected = !!k.collideConnected;
      this.angle = "undefined" != typeof k.angle ? k.angle : 0;
      l = this.coneEquation = new d(b, c, k);
      b = this.twistEquation = new h(b, c, k);
      this.twistAngle = "undefined" != typeof k.twistAngle ? k.twistAngle : 0;
      l.maxForce = 0;
      l.minForce = -e;
      b.maxForce = 0;
      b.minForce = -e;
      this.equations.push(l, b);
    }
    k.exports = b;
    var f = (c("./Constraint"), c("./PointToPointConstraint")), d = c("../equations/ConeEquation"), h = c("../equations/RotationalEquation"), n = (c("../equations/ContactEquation"), c("../math/Vec3"));
    b.prototype = new f;
    b.constructor = b;
    new n;
    new n;
    b.prototype.update = function() {
      var b = this.bodyA, c = this.bodyB, d = this.coneEquation, e = this.twistEquation;
      f.prototype.update.call(this);
      b.vectorToWorldFrame(this.axisA, d.axisA);
      c.vectorToWorldFrame(this.axisB, d.axisB);
      this.axisA.tangents(e.axisA, e.axisA);
      b.vectorToWorldFrame(e.axisA, e.axisA);
      this.axisB.tangents(e.axisB, e.axisB);
      c.vectorToWorldFrame(e.axisB, e.axisB);
      d.angle = this.angle;
      e.maxAngle = this.twistAngle;
    };
  }, {"../equations/ConeEquation":18, "../equations/ContactEquation":19, "../equations/RotationalEquation":22, "../math/Vec3":30, "./Constraint":13, "./PointToPointConstraint":17}], 13:[function(c, k) {
    function b(c, h, k) {
      k = f.defaults(k, {collideConnected:!0, wakeUpBodies:!0});
      this.equations = [];
      this.bodyA = c;
      this.bodyB = h;
      this.id = b.idCounter++;
      this.collideConnected = k.collideConnected;
      k.wakeUpBodies && (c && c.wakeUp(), h && h.wakeUp());
    }
    k.exports = b;
    var f = c("../utils/Utils");
    b.prototype.update = function() {
      throw Error("method update() not implmemented in this Constraint subclass!");
    };
    b.prototype.enable = function() {
      for (var b = this.equations, c = 0; c < b.length; c++) {
        b[c].enabled = !0;
      }
    };
    b.prototype.disable = function() {
      for (var b = this.equations, c = 0; c < b.length; c++) {
        b[c].enabled = !1;
      }
    };
    b.idCounter = 0;
  }, {"../utils/Utils":53}], 14:[function(c, k) {
    function b(b, c, k, m) {
      f.call(this, b, c);
      "undefined" == typeof k && (k = b.position.distanceTo(c.position));
      "undefined" == typeof m && (m = 1E6);
      this.distance = k;
      b = this.distanceEquation = new d(b, c);
      this.equations.push(b);
      b.minForce = -m;
      b.maxForce = m;
    }
    k.exports = b;
    var f = c("./Constraint"), d = c("../equations/ContactEquation");
    b.prototype = new f;
    b.prototype.update = function() {
      var b = this.distanceEquation, c = .5 * this.distance, d = b.ni;
      this.bodyB.position.vsub(this.bodyA.position, d);
      d.normalize();
      d.mult(c, b.ri);
      d.mult(-c, b.rj);
    };
  }, {"../equations/ContactEquation":19, "./Constraint":13}], 15:[function(c, k) {
    function b(b, c, l) {
      l = l || {};
      var e = "undefined" != typeof l.maxForce ? l.maxForce : 1E6, k = l.pivotA ? l.pivotA.clone() : new n, m = l.pivotB ? l.pivotB.clone() : new n;
      f.call(this, b, k, c, m, e);
      (this.axisA = l.axisA ? l.axisA.clone() : new n(1, 0, 0)).normalize();
      (this.axisB = l.axisB ? l.axisB.clone() : new n(1, 0, 0)).normalize();
      k = this.rotationalEquation1 = new d(b, c, l);
      l = this.rotationalEquation2 = new d(b, c, l);
      b = this.motorEquation = new h(b, c, e);
      b.enabled = !1;
      this.equations.push(k, l, b);
    }
    k.exports = b;
    var f = (c("./Constraint"), c("./PointToPointConstraint")), d = c("../equations/RotationalEquation"), h = c("../equations/RotationalMotorEquation"), n = (c("../equations/ContactEquation"), c("../math/Vec3"));
    b.prototype = new f;
    b.constructor = b;
    b.prototype.enableMotor = function() {
      this.motorEquation.enabled = !0;
    };
    b.prototype.disableMotor = function() {
      this.motorEquation.enabled = !1;
    };
    b.prototype.setMotorSpeed = function(b) {
      this.motorEquation.targetVelocity = b;
    };
    b.prototype.setMotorMaxForce = function(b) {
      this.motorEquation.maxForce = b;
      this.motorEquation.minForce = -b;
    };
    var q = new n, m = new n;
    b.prototype.update = function() {
      var b = this.bodyA, c = this.bodyB, d = this.motorEquation, h = this.rotationalEquation1, k = this.rotationalEquation2, n = this.axisA, x = this.axisB;
      f.prototype.update.call(this);
      b.quaternion.vmult(n, q);
      c.quaternion.vmult(x, m);
      q.tangents(h.axisA, k.axisA);
      h.axisB.copy(m);
      k.axisB.copy(m);
      this.motorEquation.enabled && (b.quaternion.vmult(this.axisA, d.axisA), c.quaternion.vmult(this.axisB, d.axisB));
    };
  }, {"../equations/ContactEquation":19, "../equations/RotationalEquation":22, "../equations/RotationalMotorEquation":23, "../math/Vec3":30, "./Constraint":13, "./PointToPointConstraint":17}], 16:[function(c, k) {
    function b(b, c, k) {
      k = k || {};
      var m = "undefined" != typeof k.maxForce ? k.maxForce : 1E6, e = new h, l = new h, n = new h;
      b.position.vadd(c.position, n);
      n.scale(.5, n);
      c.pointToLocalFrame(n, l);
      b.pointToLocalFrame(n, e);
      f.call(this, b, e, c, l, m);
      m = this.rotationalEquation1 = new d(b, c, k);
      e = this.rotationalEquation2 = new d(b, c, k);
      b = this.rotationalEquation3 = new d(b, c, k);
      this.equations.push(m, e, b);
    }
    k.exports = b;
    var f = (c("./Constraint"), c("./PointToPointConstraint")), d = c("../equations/RotationalEquation"), h = (c("../equations/RotationalMotorEquation"), c("../equations/ContactEquation"), c("../math/Vec3"));
    b.prototype = new f;
    b.constructor = b;
    new h;
    new h;
    b.prototype.update = function() {
      var b = this.bodyA, c = this.bodyB, d = (this.motorEquation, this.rotationalEquation1), k = this.rotationalEquation2, e = this.rotationalEquation3;
      f.prototype.update.call(this);
      b.vectorToWorldFrame(h.UNIT_X, d.axisA);
      c.vectorToWorldFrame(h.UNIT_Y, d.axisB);
      b.vectorToWorldFrame(h.UNIT_Y, k.axisA);
      c.vectorToWorldFrame(h.UNIT_Z, k.axisB);
      b.vectorToWorldFrame(h.UNIT_Z, e.axisA);
      c.vectorToWorldFrame(h.UNIT_X, e.axisB);
    };
  }, {"../equations/ContactEquation":19, "../equations/RotationalEquation":22, "../equations/RotationalMotorEquation":23, "../math/Vec3":30, "./Constraint":13, "./PointToPointConstraint":17}], 17:[function(c, k) {
    function b(b, c, k, t, e) {
      f.call(this, b, k);
      e = "undefined" != typeof e ? e : 1E6;
      this.pivotA = c ? c.clone() : new h;
      this.pivotB = t ? t.clone() : new h;
      c = this.equationX = new d(b, k);
      t = this.equationY = new d(b, k);
      b = this.equationZ = new d(b, k);
      this.equations.push(c, t, b);
      c.minForce = t.minForce = b.minForce = -e;
      c.maxForce = t.maxForce = b.maxForce = e;
      c.ni.set(1, 0, 0);
      t.ni.set(0, 1, 0);
      b.ni.set(0, 0, 1);
    }
    k.exports = b;
    var f = c("./Constraint"), d = c("../equations/ContactEquation"), h = c("../math/Vec3");
    b.prototype = new f;
    b.prototype.update = function() {
      var b = this.bodyB, c = this.equationX, d = this.equationY, f = this.equationZ;
      this.bodyA.quaternion.vmult(this.pivotA, c.ri);
      b.quaternion.vmult(this.pivotB, c.rj);
      d.ri.copy(c.ri);
      d.rj.copy(c.rj);
      f.ri.copy(c.ri);
      f.rj.copy(c.rj);
    };
  }, {"../equations/ContactEquation":19, "../math/Vec3":30, "./Constraint":13}], 18:[function(c, k) {
    function b(b, c, h) {
      h = h || {};
      var e = "undefined" != typeof h.maxForce ? h.maxForce : 1E6;
      d.call(this, b, c, -e, e);
      this.axisA = h.axisA ? h.axisA.clone() : new f(1, 0, 0);
      this.axisB = h.axisB ? h.axisB.clone() : new f(0, 1, 0);
      this.angle = "undefined" != typeof h.angle ? h.angle : 0;
    }
    k.exports = b;
    var f = c("../math/Vec3"), d = (c("../math/Mat3"), c("./Equation"));
    b.prototype = new d;
    b.prototype.constructor = b;
    var h = new f, n = new f;
    b.prototype.computeB = function(b) {
      var c = this.a, d = this.b, e = this.axisA, f = this.axisB, k = this.jacobianElementA, q = this.jacobianElementB;
      e.cross(f, h);
      f.cross(e, n);
      k.rotational.copy(n);
      q.rotational.copy(h);
      e = Math.cos(this.angle) - e.dot(f);
      f = this.computeGW();
      k = this.computeGiMf();
      return -e * c - f * d - b * k;
    };
  }, {"../math/Mat3":27, "../math/Vec3":30, "./Equation":20}], 19:[function(c, k) {
    function b(b, c, e) {
      f.call(this, b, c, 0, "undefined" != typeof e ? e : 1E6);
      this.restitution = 0;
      this.ri = new d;
      this.rj = new d;
      this.ni = new d;
    }
    k.exports = b;
    var f = c("./Equation"), d = c("../math/Vec3");
    c("../math/Mat3");
    b.prototype = new f;
    b.prototype.constructor = b;
    var h = new d, n = new d, q = new d;
    b.prototype.computeB = function(b) {
      var c = this.a, e = this.b, d = this.bi, f = this.bj, l = this.ri, k = this.rj, m = d.velocity, t = d.angularVelocity, u = (d.force, d.torque, f.velocity), w = f.angularVelocity, G = (f.force, f.torque, q), H = this.jacobianElementA, K = this.jacobianElementB, I = this.ni;
      l.cross(I, h);
      k.cross(I, n);
      I.negate(H.spatial);
      h.negate(H.rotational);
      K.spatial.copy(I);
      K.rotational.copy(n);
      G.copy(f.position);
      G.vadd(k, G);
      G.vsub(d.position, G);
      G.vsub(l, G);
      d = I.dot(G);
      f = this.restitution + 1;
      m = f * u.dot(I) - f * m.dot(I) + w.dot(n) - t.dot(h);
      t = this.computeGiMf();
      return -d * c - m * e - b * t;
    };
    var m = new d, t = new d, e = new d, l = new d, u = new d;
    b.prototype.getImpactVelocityAlongNormal = function() {
      return this.bi.position.vadd(this.ri, e), this.bj.position.vadd(this.rj, l), this.bi.getVelocityAtWorldPoint(e, m), this.bj.getVelocityAtWorldPoint(l, t), m.vsub(t, u), this.ni.dot(u);
    };
  }, {"../math/Mat3":27, "../math/Vec3":30, "./Equation":20}], 20:[function(c, k) {
    function b(c, e, d, h) {
      this.id = b.id++;
      this.minForce = "undefined" == typeof d ? -1E6 : d;
      this.maxForce = "undefined" == typeof h ? 1E6 : h;
      this.bi = c;
      this.bj = e;
      this.eps = this.b = this.a = 0;
      this.jacobianElementA = new f;
      this.jacobianElementB = new f;
      this.enabled = !0;
      this.setSpookParams(1E7, 4, 1 / 60);
    }
    k.exports = b;
    var f = c("../math/JacobianElement");
    c = c("../math/Vec3");
    b.prototype.constructor = b;
    b.id = 0;
    b.prototype.setSpookParams = function(b, c, e) {
      this.a = 4 / (e * (1 + 4 * c));
      this.b = 4 * c / (1 + 4 * c);
      this.eps = 4 / (e * e * b * (1 + 4 * c));
    };
    b.prototype.computeB = function(b, c, e) {
      var d = this.computeGW(), f = this.computeGq(), h = this.computeGiMf();
      return -f * b - d * c - h * e;
    };
    b.prototype.computeGq = function() {
      var b = this.jacobianElementB, c = this.bj.position;
      return this.jacobianElementA.spatial.dot(this.bi.position) + b.spatial.dot(c);
    };
    var d = new c;
    b.prototype.computeGW = function() {
      var b = this.jacobianElementB, c = this.bi, e = this.bj, f = e.velocity;
      e = e.angularVelocity || d;
      return this.jacobianElementA.multiplyVectors(c.velocity, c.angularVelocity || d) + b.multiplyVectors(f, e);
    };
    b.prototype.computeGWlambda = function() {
      var b = this.jacobianElementB, c = this.bi, e = this.bj, f = e.vlambda;
      e = e.wlambda || d;
      return this.jacobianElementA.multiplyVectors(c.vlambda, c.wlambda || d) + b.multiplyVectors(f, e);
    };
    var h = new c, n = new c, q = new c, m = new c;
    b.prototype.computeGiMf = function() {
      var b = this.jacobianElementA, c = this.jacobianElementB, e = this.bi, d = this.bj, f = e.force, k = e.torque, t = d.force, z = d.torque, C = e.invMassSolve, A = d.invMassSolve;
      return e.invInertiaWorldSolve ? e.invInertiaWorldSolve.vmult(k, q) : q.set(0, 0, 0), d.invInertiaWorldSolve ? d.invInertiaWorldSolve.vmult(z, m) : m.set(0, 0, 0), f.mult(C, h), t.mult(A, n), b.multiplyVectors(h, q) + c.multiplyVectors(n, m);
    };
    var t = new c;
    b.prototype.computeGiMGt = function() {
      var b = this.jacobianElementA, c = this.jacobianElementB, e = this.bi, d = this.bj, f = e.invInertiaWorldSolve, h = d.invInertiaWorldSolve;
      e = e.invMassSolve + d.invMassSolve;
      return f && (f.vmult(b.rotational, t), e += t.dot(b.rotational)), h && (h.vmult(c.rotational, t), e += t.dot(c.rotational)), e;
    };
    var e = new c;
    new c;
    new c;
    new c;
    new c;
    new c;
    b.prototype.addToWlambda = function(b) {
      var c = this.jacobianElementA, d = this.jacobianElementB, f = this.bi, h = this.bj;
      c.spatial.mult(f.invMassSolve * b, e);
      f.vlambda.vadd(e, f.vlambda);
      d.spatial.mult(h.invMassSolve * b, e);
      h.vlambda.vadd(e, h.vlambda);
      f.invInertiaWorldSolve && (f.invInertiaWorldSolve.vmult(c.rotational, e), e.mult(b, e), f.wlambda.vadd(e, f.wlambda));
      h.invInertiaWorldSolve && (h.invInertiaWorldSolve.vmult(d.rotational, e), e.mult(b, e), h.wlambda.vadd(e, h.wlambda));
    };
    b.prototype.computeC = function() {
      return this.computeGiMGt() + this.eps;
    };
  }, {"../math/JacobianElement":26, "../math/Vec3":30}], 21:[function(c, k) {
    function b(b, c, h) {
      f.call(this, b, c, -h, h);
      this.ri = new d;
      this.rj = new d;
      this.t = new d;
    }
    k.exports = b;
    var f = c("./Equation"), d = c("../math/Vec3");
    c("../math/Mat3");
    b.prototype = new f;
    b.prototype.constructor = b;
    var h = new d, n = new d;
    b.prototype.computeB = function(b) {
      var c = (this.a, this.b), d = (this.bi, this.bj, this.ri), e = this.rj, f = this.t;
      d.cross(f, h);
      e.cross(f, n);
      d = this.jacobianElementA;
      e = this.jacobianElementB;
      f.negate(d.spatial);
      h.negate(d.rotational);
      e.spatial.copy(f);
      e.rotational.copy(n);
      f = this.computeGW();
      d = this.computeGiMf();
      return -f * c - b * d;
    };
  }, {"../math/Mat3":27, "../math/Vec3":30, "./Equation":20}], 22:[function(c, k) {
    function b(b, c, h) {
      h = h || {};
      var e = "undefined" != typeof h.maxForce ? h.maxForce : 1E6;
      d.call(this, b, c, -e, e);
      this.axisA = h.axisA ? h.axisA.clone() : new f(1, 0, 0);
      this.axisB = h.axisB ? h.axisB.clone() : new f(0, 1, 0);
      this.maxAngle = Math.PI / 2;
    }
    k.exports = b;
    var f = c("../math/Vec3"), d = (c("../math/Mat3"), c("./Equation"));
    b.prototype = new d;
    b.prototype.constructor = b;
    var h = new f, n = new f;
    b.prototype.computeB = function(b) {
      var c = this.a, d = this.b, e = this.axisA, f = this.axisB, k = this.jacobianElementA, q = this.jacobianElementB;
      e.cross(f, h);
      f.cross(e, n);
      k.rotational.copy(n);
      q.rotational.copy(h);
      e = Math.cos(this.maxAngle) - e.dot(f);
      f = this.computeGW();
      k = this.computeGiMf();
      return -e * c - f * d - b * k;
    };
  }, {"../math/Mat3":27, "../math/Vec3":30, "./Equation":20}], 23:[function(c, k) {
    function b(b, c, k) {
      k = "undefined" != typeof k ? k : 1E6;
      d.call(this, b, c, -k, k);
      this.axisA = new f;
      this.axisB = new f;
      this.targetVelocity = 0;
    }
    k.exports = b;
    var f = c("../math/Vec3"), d = (c("../math/Mat3"), c("./Equation"));
    b.prototype = new d;
    b.prototype.constructor = b;
    b.prototype.computeB = function(b) {
      var c = (this.a, this.b), d = (this.bi, this.bj, this.axisA), f = this.axisB, h = this.jacobianElementB;
      this.jacobianElementA.rotational.copy(d);
      f.negate(h.rotational);
      d = this.computeGW() - this.targetVelocity;
      f = this.computeGiMf();
      return -d * c - b * f;
    };
  }, {"../math/Mat3":27, "../math/Vec3":30, "./Equation":20}], 24:[function(c, k) {
    function b(c, h, k) {
      k = f.defaults(k, {friction:.3, restitution:.3, contactEquationStiffness:1E7, contactEquationRelaxation:3, frictionEquationStiffness:1E7, frictionEquationRelaxation:3});
      this.id = b.idCounter++;
      this.materials = [c, h];
      this.friction = k.friction;
      this.restitution = k.restitution;
      this.contactEquationStiffness = k.contactEquationStiffness;
      this.contactEquationRelaxation = k.contactEquationRelaxation;
      this.frictionEquationStiffness = k.frictionEquationStiffness;
      this.frictionEquationRelaxation = k.frictionEquationRelaxation;
    }
    var f = c("../utils/Utils");
    k.exports = b;
    b.idCounter = 0;
  }, {"../utils/Utils":53}], 25:[function(c, k) {
    function b(c) {
      var d = "";
      c = c || {};
      "string" == typeof c ? (d = c, c = {}) : "object" == typeof c && (d = "");
      this.name = d;
      this.id = b.idCounter++;
      this.friction = "undefined" != typeof c.friction ? c.friction : -1;
      this.restitution = "undefined" != typeof c.restitution ? c.restitution : -1;
    }
    k.exports = b;
    b.idCounter = 0;
  }, {}], 26:[function(c, k) {
    function b() {
      this.spatial = new f;
      this.rotational = new f;
    }
    k.exports = b;
    var f = c("./Vec3");
    b.prototype.multiplyElement = function(b) {
      return b.spatial.dot(this.spatial) + b.rotational.dot(this.rotational);
    };
    b.prototype.multiplyVectors = function(b, c) {
      return b.dot(this.spatial) + c.dot(this.rotational);
    };
  }, {"./Vec3":30}], 27:[function(c, k) {
    function b(b) {
      this.elements = b ? b : [0, 0, 0, 0, 0, 0, 0, 0, 0];
    }
    k.exports = b;
    var f = c("./Vec3");
    b.prototype.identity = function() {
      var b = this.elements;
      b[0] = 1;
      b[1] = 0;
      b[2] = 0;
      b[3] = 0;
      b[4] = 1;
      b[5] = 0;
      b[6] = 0;
      b[7] = 0;
      b[8] = 1;
    };
    b.prototype.setZero = function() {
      var b = this.elements;
      b[0] = 0;
      b[1] = 0;
      b[2] = 0;
      b[3] = 0;
      b[4] = 0;
      b[5] = 0;
      b[6] = 0;
      b[7] = 0;
      b[8] = 0;
    };
    b.prototype.setTrace = function(b) {
      var c = this.elements;
      c[0] = b.x;
      c[4] = b.y;
      c[8] = b.z;
    };
    b.prototype.getTrace = function(b) {
      b = b || new f;
      var c = this.elements;
      b.x = c[0];
      b.y = c[4];
      b.z = c[8];
    };
    b.prototype.vmult = function(b, c) {
      c = c || new f;
      var d = this.elements, h = b.x, k = b.y;
      b = b.z;
      return c.x = d[0] * h + d[1] * k + d[2] * b, c.y = d[3] * h + d[4] * k + d[5] * b, c.z = d[6] * h + d[7] * k + d[8] * b, c;
    };
    b.prototype.smult = function(b) {
      for (var c = 0; c < this.elements.length; c++) {
        this.elements[c] *= b;
      }
    };
    b.prototype.mmult = function(c, f) {
      f = f || new b;
      for (var d = 0; 3 > d; d++) {
        for (var h = 0; 3 > h; h++) {
          for (var k = 0, t = 0; 3 > t; t++) {
            k += c.elements[d + 3 * t] * this.elements[t + 3 * h];
          }
          f.elements[d + 3 * h] = k;
        }
      }
      return f;
    };
    b.prototype.scale = function(c, f) {
      f = f || new b;
      for (var d = this.elements, h = f.elements, k = 0; 3 !== k; k++) {
        h[3 * k] = c.x * d[3 * k], h[3 * k + 1] = c.y * d[3 * k + 1], h[3 * k + 2] = c.z * d[3 * k + 2];
      }
      return f;
    };
    b.prototype.solve = function(b, c) {
      c = c || new f;
      for (var d = [], h = 0; 12 > h; h++) {
        d.push(0);
      }
      var k;
      for (h = 0; 3 > h; h++) {
        for (k = 0; 3 > k; k++) {
          d[h + 4 * k] = this.elements[h + 3 * k];
        }
      }
      d[3] = b.x;
      d[7] = b.y;
      d[11] = b.z;
      var t = 3, e = t;
      do {
        if (h = e - t, 0 === d[h + 4 * h]) {
          for (k = h + 1; e > k; k++) {
            if (0 !== d[h + 4 * k]) {
              var l = 4;
              do {
                var u = 4 - l;
                d[u + 4 * h] += d[u + 4 * k];
              } while (--l);
              break;
            }
          }
        }
        if (0 !== d[h + 4 * h]) {
          for (k = h + 1; e > k; k++) {
            var w = d[h + 4 * k] / d[h + 4 * h];
            l = 4;
            do {
              u = 4 - l, d[u + 4 * k] = h >= u ? 0 : d[u + 4 * k] - d[u + 4 * h] * w;
            } while (--l);
          }
        }
      } while (--t);
      if (c.z = d[11] / d[10], c.y = (d[7] - d[6] * c.z) / d[5], c.x = (d[3] - d[2] * c.z - d[1] * c.y) / d[0], isNaN(c.x) || isNaN(c.y) || isNaN(c.z) || 1 / 0 === c.x || 1 / 0 === c.y || 1 / 0 === c.z) {
        throw "Could not solve equation! Got x=[" + c.toString() + "], b=[" + b.toString() + "], A=[" + this.toString() + "]";
      }
      return c;
    };
    b.prototype.e = function(b, c, f) {
      return void 0 === f ? this.elements[c + 3 * b] : void(this.elements[c + 3 * b] = f);
    };
    b.prototype.copy = function(b) {
      for (var c = 0; c < b.elements.length; c++) {
        this.elements[c] = b.elements[c];
      }
      return this;
    };
    b.prototype.toString = function() {
      for (var b = "", c = 0; 9 > c; c++) {
        b += this.elements[c] + ",";
      }
      return b;
    };
    b.prototype.reverse = function(c) {
      c = c || new b;
      for (var d = [], f = 0; 18 > f; f++) {
        d.push(0);
      }
      var k;
      for (f = 0; 3 > f; f++) {
        for (k = 0; 3 > k; k++) {
          d[f + 6 * k] = this.elements[f + 3 * k];
        }
      }
      d[3] = 1;
      d[9] = 0;
      d[15] = 0;
      d[4] = 0;
      d[10] = 1;
      d[16] = 0;
      d[5] = 0;
      d[11] = 0;
      d[17] = 1;
      var m = 3, t = m;
      do {
        if (f = t - m, 0 === d[f + 6 * f]) {
          for (k = f + 1; t > k; k++) {
            if (0 !== d[f + 6 * k]) {
              var e = 6;
              do {
                var l = 6 - e;
                d[l + 6 * f] += d[l + 6 * k];
              } while (--e);
              break;
            }
          }
        }
        if (0 !== d[f + 6 * f]) {
          for (k = f + 1; t > k; k++) {
            var u = d[f + 6 * k] / d[f + 6 * f];
            e = 6;
            do {
              l = 6 - e, d[l + 6 * k] = f >= l ? 0 : d[l + 6 * k] - d[l + 6 * f] * u;
            } while (--e);
          }
        }
      } while (--m);
      f = 2;
      do {
        k = f - 1;
        do {
          u = d[f + 6 * k] / d[f + 6 * f];
          e = 6;
          do {
            l = 6 - e, d[l + 6 * k] -= d[l + 6 * f] * u;
          } while (--e);
        } while (k--);
      } while (--f);
      f = 2;
      do {
        u = 1 / d[f + 6 * f];
        e = 6;
        do {
          l = 6 - e, d[l + 6 * f] *= u;
        } while (--e);
      } while (f--);
      f = 2;
      do {
        k = 2;
        do {
          if (l = d[3 + k + 6 * f], isNaN(l) || 1 / 0 === l) {
            throw "Could not reverse! A=[" + this.toString() + "]";
          }
          c.e(f, k, l);
        } while (k--);
      } while (f--);
      return c;
    };
    b.prototype.setRotationFromQuaternion = function(b) {
      var c = b.x, d = b.y, f = b.z, k = b.w, t = c + c, e = d + d, l = f + f;
      b = c * t;
      var u = c * e;
      c *= l;
      var w = d * e;
      d *= l;
      f *= l;
      t *= k;
      e *= k;
      k *= l;
      l = this.elements;
      return l[0] = 1 - (w + f), l[1] = u - k, l[2] = c + e, l[3] = u + k, l[4] = 1 - (b + f), l[5] = d - t, l[6] = c - e, l[7] = d + t, l[8] = 1 - (b + w), this;
    };
    b.prototype.transpose = function(c) {
      c = c || new b;
      for (var d = c.elements, f = this.elements, k = 0; 3 !== k; k++) {
        for (var m = 0; 3 !== m; m++) {
          d[3 * k + m] = f[3 * m + k];
        }
      }
      return c;
    };
  }, {"./Vec3":30}], 28:[function(c, k) {
    function b(b, c, d, f) {
      this.x = void 0 !== b ? b : 0;
      this.y = void 0 !== c ? c : 0;
      this.z = void 0 !== d ? d : 0;
      this.w = void 0 !== f ? f : 1;
    }
    k.exports = b;
    var f = c("./Vec3");
    b.prototype.set = function(b, c, d, f) {
      this.x = b;
      this.y = c;
      this.z = d;
      this.w = f;
    };
    b.prototype.toString = function() {
      return this.x + "," + this.y + "," + this.z + "," + this.w;
    };
    b.prototype.toArray = function() {
      return [this.x, this.y, this.z, this.w];
    };
    b.prototype.setFromAxisAngle = function(b, c) {
      var e = Math.sin(.5 * c);
      this.x = b.x * e;
      this.y = b.y * e;
      this.z = b.z * e;
      this.w = Math.cos(.5 * c);
    };
    b.prototype.toAxisAngle = function(b) {
      b = b || new f;
      this.normalize();
      var c = 2 * Math.acos(this.w), d = Math.sqrt(1 - this.w * this.w);
      return .001 > d ? (b.x = this.x, b.y = this.y, b.z = this.z) : (b.x = this.x / d, b.y = this.y / d, b.z = this.z / d), [b, c];
    };
    var d = new f, h = new f;
    b.prototype.setFromVectors = function(b, c) {
      if (b.isAntiparallelTo(c)) {
        b.tangents(d, h), this.setFromAxisAngle(d, Math.PI);
      } else {
        var e = b.cross(c);
        this.x = e.x;
        this.y = e.y;
        this.z = e.z;
        this.w = Math.sqrt(Math.pow(b.norm(), 2) * Math.pow(c.norm(), 2)) + b.dot(c);
        this.normalize();
      }
    };
    var n = new f, q = new f, m = new f;
    b.prototype.mult = function(c, e) {
      e = e || new b;
      var d = this.w;
      return n.set(this.x, this.y, this.z), q.set(c.x, c.y, c.z), e.w = d * c.w - n.dot(q), n.cross(q, m), e.x = d * q.x + c.w * n.x + m.x, e.y = d * q.y + c.w * n.y + m.y, e.z = d * q.z + c.w * n.z + m.z, e;
    };
    b.prototype.inverse = function(c) {
      var e = this.x, d = this.y, f = this.z, h = this.w;
      c = c || new b;
      this.conjugate(c);
      e = 1 / (e * e + d * d + f * f + h * h);
      return c.x *= e, c.y *= e, c.z *= e, c.w *= e, c;
    };
    b.prototype.conjugate = function(c) {
      return c = c || new b, c.x = -this.x, c.y = -this.y, c.z = -this.z, c.w = this.w, c;
    };
    b.prototype.normalize = function() {
      var b = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
      0 === b ? (this.x = 0, this.y = 0, this.z = 0, this.w = 0) : (b = 1 / b, this.x *= b, this.y *= b, this.z *= b, this.w *= b);
    };
    b.prototype.normalizeFast = function() {
      var b = (3 - (this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w)) / 2;
      0 === b ? (this.x = 0, this.y = 0, this.z = 0, this.w = 0) : (this.x *= b, this.y *= b, this.z *= b, this.w *= b);
    };
    b.prototype.vmult = function(b, c) {
      c = c || new f;
      var e = b.x, d = b.y, h = b.z;
      b = this.x;
      var k = this.y, m = this.z, p = this.w, n = p * e + k * h - m * d, t = p * d + m * e - b * h, q = p * h + b * d - k * e;
      e = -b * e - k * d - m * h;
      return c.x = n * p + e * -b + t * -m - q * -k, c.y = t * p + e * -k + q * -b - n * -m, c.z = q * p + e * -m + n * -k - t * -b, c;
    };
    b.prototype.copy = function(b) {
      return this.x = b.x, this.y = b.y, this.z = b.z, this.w = b.w, this;
    };
    b.prototype.toEuler = function(b, c) {
      c = c || "YZX";
      var e, d, f, h = this.x, k = this.y, p = this.z, m = this.w;
      switch(c) {
        case "YZX":
          c = h * k + p * m;
          if (.499 < c && (e = 2 * Math.atan2(h, m), d = Math.PI / 2, f = 0), -.499 > c && (e = -2 * Math.atan2(h, m), d = -Math.PI / 2, f = 0), isNaN(e)) {
            f = p * p, e = Math.atan2(2 * k * m - 2 * h * p, 1 - 2 * k * k - 2 * f), d = Math.asin(2 * c), f = Math.atan2(2 * h * m - 2 * k * p, 1 - 2 * h * h - 2 * f);
          }
          break;
        default:
          throw Error("Euler order " + c + " not supported yet.");
      }
      b.y = e;
      b.z = d;
      b.x = f;
    };
    b.prototype.setFromEuler = function(b, c, d, f) {
      f = f || "XYZ";
      var e = Math.cos(b / 2), h = Math.cos(c / 2), l = Math.cos(d / 2);
      b = Math.sin(b / 2);
      c = Math.sin(c / 2);
      d = Math.sin(d / 2);
      return "XYZ" === f ? (this.x = b * h * l + e * c * d, this.y = e * c * l - b * h * d, this.z = e * h * d + b * c * l, this.w = e * h * l - b * c * d) : "YXZ" === f ? (this.x = b * h * l + e * c * d, this.y = e * c * l - b * h * d, this.z = e * h * d - b * c * l, this.w = e * h * l + b * c * d) : "ZXY" === f ? (this.x = b * h * l - e * c * d, this.y = e * c * l + b * h * d, this.z = e * h * d + b * c * l, this.w = e * h * l - b * c * d) : "ZYX" === f ? (this.x = b * h * l - e * c * d, this.y = 
      e * c * l + b * h * d, this.z = e * h * d - b * c * l, this.w = e * h * l + b * c * d) : "YZX" === f ? (this.x = b * h * l + e * c * d, this.y = e * c * l + b * h * d, this.z = e * h * d - b * c * l, this.w = e * h * l - b * c * d) : "XZY" === f && (this.x = b * h * l - e * c * d, this.y = e * c * l - b * h * d, this.z = e * h * d + b * c * l, this.w = e * h * l + b * c * d), this;
    };
    b.prototype.clone = function() {
      return new b(this.x, this.y, this.z, this.w);
    };
  }, {"./Vec3":30}], 29:[function(c, k) {
    function b(b) {
      b = b || {};
      this.position = new f;
      b.position && this.position.copy(b.position);
      this.quaternion = new d;
      b.quaternion && this.quaternion.copy(b.quaternion);
    }
    var f = c("./Vec3"), d = c("./Quaternion");
    k.exports = b;
    var h = new d;
    b.pointToLocalFrame = function(b, c, d, k) {
      k = k || new f;
      return d.vsub(b, k), c.conjugate(h), h.vmult(k, k), k;
    };
    b.prototype.pointToLocal = function(c, d) {
      return b.pointToLocalFrame(this.position, this.quaternion, c, d);
    };
    b.pointToWorldFrame = function(b, c, d, h) {
      h = h || new f;
      return c.vmult(d, h), h.vadd(b, h), h;
    };
    b.prototype.pointToWorld = function(c, d) {
      return b.pointToWorldFrame(this.position, this.quaternion, c, d);
    };
    b.prototype.vectorToWorldFrame = function(b, c) {
      c = c || new f;
      return this.quaternion.vmult(b, c), c;
    };
    b.vectorToWorldFrame = function(b, c, d) {
      return b.vmult(c, d), d;
    };
    b.vectorToLocalFrame = function(b, c, d, h) {
      h = h || new f;
      return c.w *= -1, c.vmult(d, h), c.w *= -1, h;
    };
  }, {"./Quaternion":28, "./Vec3":30}], 30:[function(c, k) {
    function b(b, c, d) {
      this.x = b || 0;
      this.y = c || 0;
      this.z = d || 0;
    }
    k.exports = b;
    var f = c("./Mat3");
    b.ZERO = new b(0, 0, 0);
    b.UNIT_X = new b(1, 0, 0);
    b.UNIT_Y = new b(0, 1, 0);
    b.UNIT_Z = new b(0, 0, 1);
    b.prototype.cross = function(c, d) {
      var f = c.x, e = c.y;
      c = c.z;
      var h = this.x, k = this.y, m = this.z;
      return d = d || new b, d.x = k * c - m * e, d.y = m * f - h * c, d.z = h * e - k * f, d;
    };
    b.prototype.set = function(b, c, d) {
      return this.x = b, this.y = c, this.z = d, this;
    };
    b.prototype.setZero = function() {
      this.x = this.y = this.z = 0;
    };
    b.prototype.vadd = function(c, d) {
      return d ? (d.x = c.x + this.x, d.y = c.y + this.y, d.z = c.z + this.z, void 0) : new b(this.x + c.x, this.y + c.y, this.z + c.z);
    };
    b.prototype.vsub = function(c, d) {
      return d ? (d.x = this.x - c.x, d.y = this.y - c.y, d.z = this.z - c.z, void 0) : new b(this.x - c.x, this.y - c.y, this.z - c.z);
    };
    b.prototype.crossmat = function() {
      return new f([0, -this.z, this.y, this.z, 0, -this.x, -this.y, this.x, 0]);
    };
    b.prototype.normalize = function() {
      var b = this.x, c = this.y, d = this.z;
      b = Math.sqrt(b * b + c * c + d * d);
      0 < b ? (c = 1 / b, this.x *= c, this.y *= c, this.z *= c) : this.z = this.y = this.x = 0;
      return b;
    };
    b.prototype.unit = function(c) {
      c = c || new b;
      var d = this.x, f = this.y, e = this.z, h = Math.sqrt(d * d + f * f + e * e);
      return 0 < h ? (h = 1 / h, c.x = d * h, c.y = f * h, c.z = e * h) : (c.x = 1, c.y = 0, c.z = 0), c;
    };
    b.prototype.norm = function() {
      var b = this.x, c = this.y, d = this.z;
      return Math.sqrt(b * b + c * c + d * d);
    };
    b.prototype.length = b.prototype.norm;
    b.prototype.norm2 = function() {
      return this.dot(this);
    };
    b.prototype.lengthSquared = b.prototype.norm2;
    b.prototype.distanceTo = function(b) {
      var c = this.x, d = this.y, e = this.z, f = b.x, h = b.y;
      b = b.z;
      return Math.sqrt((f - c) * (f - c) + (h - d) * (h - d) + (b - e) * (b - e));
    };
    b.prototype.distanceSquared = function(b) {
      var c = this.x, d = this.y, e = this.z, f = b.x, h = b.y;
      b = b.z;
      return (f - c) * (f - c) + (h - d) * (h - d) + (b - e) * (b - e);
    };
    b.prototype.mult = function(c, d) {
      d = d || new b;
      var f = this.y, e = this.z;
      return d.x = c * this.x, d.y = c * f, d.z = c * e, d;
    };
    b.prototype.scale = b.prototype.mult;
    b.prototype.dot = function(b) {
      return this.x * b.x + this.y * b.y + this.z * b.z;
    };
    b.prototype.isZero = function() {
      return 0 === this.x && 0 === this.y && 0 === this.z;
    };
    b.prototype.negate = function(c) {
      return c = c || new b, c.x = -this.x, c.y = -this.y, c.z = -this.z, c;
    };
    var d = new b, h = new b;
    b.prototype.tangents = function(b, c) {
      var f = this.norm();
      0 < f ? (f = 1 / f, d.set(this.x * f, this.y * f, this.z * f), .9 > Math.abs(d.x) ? (h.set(1, 0, 0), d.cross(h, b)) : (h.set(0, 1, 0), d.cross(h, b)), d.cross(b, c)) : (b.set(1, 0, 0), c.set(0, 1, 0));
    };
    b.prototype.toString = function() {
      return this.x + "," + this.y + "," + this.z;
    };
    b.prototype.toArray = function() {
      return [this.x, this.y, this.z];
    };
    b.prototype.copy = function(b) {
      return this.x = b.x, this.y = b.y, this.z = b.z, this;
    };
    b.prototype.lerp = function(b, c, d) {
      var e = this.x, f = this.y, h = this.z;
      d.x = e + (b.x - e) * c;
      d.y = f + (b.y - f) * c;
      d.z = h + (b.z - h) * c;
    };
    b.prototype.almostEquals = function(b, c) {
      return void 0 === c && (c = 1E-6), Math.abs(this.x - b.x) > c || Math.abs(this.y - b.y) > c || Math.abs(this.z - b.z) > c ? !1 : !0;
    };
    b.prototype.almostZero = function(b) {
      return void 0 === b && (b = 1E-6), Math.abs(this.x) > b || Math.abs(this.y) > b || Math.abs(this.z) > b ? !1 : !0;
    };
    var n = new b;
    b.prototype.isAntiparallelTo = function(b, c) {
      return this.negate(n), n.almostEquals(b, c);
    };
    b.prototype.clone = function() {
      return new b(this.x, this.y, this.z);
    };
  }, {"./Mat3":27}], 31:[function(c, k) {
    function b(c) {
      c = c || {};
      f.apply(this);
      this.id = b.idCounter++;
      this.postStep = this.preStep = this.world = null;
      this.vlambda = new d;
      this.collisionFilterGroup = "number" == typeof c.collisionFilterGroup ? c.collisionFilterGroup : 1;
      this.collisionFilterMask = "number" == typeof c.collisionFilterMask ? c.collisionFilterMask : 1;
      this.collisionResponse = !0;
      this.position = new d;
      c.position && this.position.copy(c.position);
      this.previousPosition = new d;
      this.initPosition = new d;
      this.velocity = new d;
      c.velocity && this.velocity.copy(c.velocity);
      this.initVelocity = new d;
      this.force = new d;
      var e = "number" == typeof c.mass ? c.mass : 0;
      this.mass = e;
      this.invMass = 0 < e ? 1 / e : 0;
      this.material = c.material || null;
      this.linearDamping = "number" == typeof c.linearDamping ? c.linearDamping : .01;
      this.type = 0 >= e ? b.STATIC : b.DYNAMIC;
      typeof c.type == typeof b.STATIC && (this.type = c.type);
      this.allowSleep = "undefined" != typeof c.allowSleep ? c.allowSleep : !0;
      this.sleepState = 0;
      this.sleepSpeedLimit = "undefined" != typeof c.sleepSpeedLimit ? c.sleepSpeedLimit : .1;
      this.sleepTimeLimit = "undefined" != typeof c.sleepTimeLimit ? c.sleepTimeLimit : 1;
      this.timeLastSleepy = 0;
      this._wakeUpAfterNarrowphase = !1;
      this.torque = new d;
      this.quaternion = new n;
      c.quaternion && this.quaternion.copy(c.quaternion);
      this.initQuaternion = new n;
      this.angularVelocity = new d;
      c.angularVelocity && this.angularVelocity.copy(c.angularVelocity);
      this.initAngularVelocity = new d;
      this.interpolatedPosition = new d;
      this.interpolatedQuaternion = new n;
      this.shapes = [];
      this.shapeOffsets = [];
      this.shapeOrientations = [];
      this.inertia = new d;
      this.invInertia = new d;
      this.invInertiaWorld = new h;
      this.invMassSolve = 0;
      this.invInertiaSolve = new d;
      this.invInertiaWorldSolve = new h;
      this.fixedRotation = "undefined" != typeof c.fixedRotation ? c.fixedRotation : !1;
      this.angularDamping = "undefined" != typeof c.angularDamping ? c.angularDamping : .01;
      this.aabb = new q;
      this.aabbNeedsUpdate = !0;
      this.wlambda = new d;
      c.shape && this.addShape(c.shape);
      this.updateMassProperties();
    }
    k.exports = b;
    var f = c("../utils/EventTarget"), d = (c("../shapes/Shape"), c("../math/Vec3")), h = c("../math/Mat3"), n = c("../math/Quaternion"), q = (c("../material/Material"), c("../collision/AABB")), m = c("../shapes/Box");
    b.prototype = new f;
    b.prototype.constructor = b;
    b.DYNAMIC = 1;
    b.STATIC = 2;
    b.KINEMATIC = 4;
    b.AWAKE = 0;
    b.SLEEPY = 1;
    b.SLEEPING = 2;
    b.idCounter = 0;
    b.prototype.wakeUp = function() {
      var c = this.sleepState;
      this.sleepState = 0;
      c === b.SLEEPING && this.dispatchEvent({type:"wakeup"});
    };
    b.prototype.sleep = function() {
      this.sleepState = b.SLEEPING;
      this.velocity.set(0, 0, 0);
      this.angularVelocity.set(0, 0, 0);
    };
    b.sleepyEvent = {type:"sleepy"};
    b.sleepEvent = {type:"sleep"};
    b.prototype.sleepTick = function(c) {
      if (this.allowSleep) {
        var e = this.sleepState, d = this.velocity.norm2() + this.angularVelocity.norm2(), f = Math.pow(this.sleepSpeedLimit, 2);
        e === b.AWAKE && f > d ? (this.sleepState = b.SLEEPY, this.timeLastSleepy = c, this.dispatchEvent(b.sleepyEvent)) : e === b.SLEEPY && d > f ? this.wakeUp() : e === b.SLEEPY && c - this.timeLastSleepy > this.sleepTimeLimit && (this.sleep(), this.dispatchEvent(b.sleepEvent));
      }
    };
    b.prototype.updateSolveMassProperties = function() {
      this.sleepState === b.SLEEPING || this.type === b.KINEMATIC ? (this.invMassSolve = 0, this.invInertiaSolve.setZero(), this.invInertiaWorldSolve.setZero()) : (this.invMassSolve = this.invMass, this.invInertiaSolve.copy(this.invInertia), this.invInertiaWorldSolve.copy(this.invInertiaWorld));
    };
    b.prototype.pointToLocalFrame = function(b, c) {
      c = c || new d;
      return b.vsub(this.position, c), this.quaternion.conjugate().vmult(c, c), c;
    };
    b.prototype.vectorToLocalFrame = function(b, c) {
      c = c || new d;
      return this.quaternion.conjugate().vmult(b, c), c;
    };
    b.prototype.pointToWorldFrame = function(b, c) {
      c = c || new d;
      return this.quaternion.vmult(b, c), c.vadd(this.position, c), c;
    };
    b.prototype.vectorToWorldFrame = function(b, c) {
      c = c || new d;
      return this.quaternion.vmult(b, c), c;
    };
    var t = new d, e = new n;
    b.prototype.addShape = function(b, c, e) {
      var f = new d, h = new n;
      return c && f.copy(c), e && h.copy(e), this.shapes.push(b), this.shapeOffsets.push(f), this.shapeOrientations.push(h), this.updateMassProperties(), this.updateBoundingRadius(), this.aabbNeedsUpdate = !0, this;
    };
    b.prototype.updateBoundingRadius = function() {
      for (var b = this.shapes, c = this.shapeOffsets, e = b.length, d = 0, f = 0; f !== e; f++) {
        var h = b[f];
        h.updateBoundingSphereRadius();
        var l = c[f].norm();
        h = h.boundingSphereRadius;
        l + h > d && (d = l + h);
      }
      this.boundingRadius = d;
    };
    var l = new q;
    b.prototype.computeAABB = function() {
      for (var b = this.shapes, c = this.shapeOffsets, d = this.shapeOrientations, f = b.length, h = this.quaternion, k = this.aabb, p = 0; p !== f; p++) {
        var m = b[p];
        d[p].mult(h, e);
        e.vmult(c[p], t);
        t.vadd(this.position, t);
        m.calculateWorldAABB(t, e, l.lowerBound, l.upperBound);
        0 === p ? k.copy(l) : k.extend(l);
      }
      this.aabbNeedsUpdate = !1;
    };
    var u = new h, w = new h;
    new h;
    b.prototype.updateInertiaWorld = function(b) {
      var c = this.invInertia;
      if (c.x !== c.y || c.y !== c.z || b) {
        u.setRotationFromQuaternion(this.quaternion), u.transpose(w), u.scale(c, u), u.mmult(w, this.invInertiaWorld);
      }
    };
    var y = new d, x = new d;
    b.prototype.applyForce = function(c, e) {
      this.type === b.DYNAMIC && (e.vsub(this.position, y), y.cross(c, x), this.force.vadd(c, this.force), this.torque.vadd(x, this.torque));
    };
    var p = new d, v = new d;
    b.prototype.applyLocalForce = function(c, e) {
      this.type === b.DYNAMIC && (this.vectorToWorldFrame(c, p), this.pointToWorldFrame(e, v), this.applyForce(p, v));
    };
    var z = new d, C = new d, A = new d;
    b.prototype.applyImpulse = function(c, e) {
      this.type === b.DYNAMIC && (e.vsub(this.position, z), C.copy(c), C.mult(this.invMass, C), this.velocity.vadd(C, this.velocity), z.cross(c, A), this.invInertiaWorld.vmult(A, A), this.angularVelocity.vadd(A, this.angularVelocity));
    };
    var D = new d, E = new d;
    b.prototype.applyLocalImpulse = function(c, e) {
      this.type === b.DYNAMIC && (this.vectorToWorldFrame(c, D), this.pointToWorldFrame(e, E), this.applyImpulse(D, E));
    };
    var B = new d;
    b.prototype.updateMassProperties = function() {
      this.invMass = 0 < this.mass ? 1 / this.mass : 0;
      var b = this.inertia, c = this.fixedRotation;
      this.computeAABB();
      B.set((this.aabb.upperBound.x - this.aabb.lowerBound.x) / 2, (this.aabb.upperBound.y - this.aabb.lowerBound.y) / 2, (this.aabb.upperBound.z - this.aabb.lowerBound.z) / 2);
      m.calculateInertia(B, this.mass, b);
      this.invInertia.set(0 < b.x && !c ? 1 / b.x : 0, 0 < b.y && !c ? 1 / b.y : 0, 0 < b.z && !c ? 1 / b.z : 0);
      this.updateInertiaWorld(!0);
    };
    b.prototype.getVelocityAtWorldPoint = function(b, c) {
      var e = new d;
      return b.vsub(this.position, e), this.angularVelocity.cross(e, c), this.velocity.vadd(c, c), c;
    };
  }, {"../collision/AABB":3, "../material/Material":25, "../math/Mat3":27, "../math/Quaternion":28, "../math/Vec3":30, "../shapes/Box":37, "../shapes/Shape":43, "../utils/EventTarget":49}], 32:[function(c, k) {
    function b(b) {
      this.chassisBody = b.chassisBody;
      this.wheelInfos = [];
      this.sliding = !1;
      this.world = null;
      this.indexRightAxis = "undefined" != typeof b.indexRightAxis ? b.indexRightAxis : 1;
      this.indexForwardAxis = "undefined" != typeof b.indexForwardAxis ? b.indexForwardAxis : 0;
      this.indexUpAxis = "undefined" != typeof b.indexUpAxis ? b.indexUpAxis : 2;
    }
    function f(b, c, e) {
      var d = A, f = D, h = E, l = B;
      return c.vsub(b.position, d), d.cross(e, f), b.invInertiaWorld.vmult(f, l), l.cross(d, h), b.invMass + e.dot(h);
    }
    var d = (c("./Body"), c("../math/Vec3")), h = c("../math/Quaternion"), n = (c("../collision/RaycastResult"), c("../collision/Ray")), q = c("../objects/WheelInfo");
    k.exports = b;
    var m = (new d, new d, new d, new d), t = new d, e = new d;
    new n;
    b.prototype.addWheel = function(b) {
      b = b || {};
      b = new q(b);
      var c = this.wheelInfos.length;
      return this.wheelInfos.push(b), c;
    };
    b.prototype.setSteeringValue = function(b, c) {
      this.wheelInfos[c].steering = b;
    };
    new d;
    b.prototype.applyEngineForce = function(b, c) {
      this.wheelInfos[c].engineForce = b;
    };
    b.prototype.setBrake = function(b, c) {
      this.wheelInfos[c].brake = b;
    };
    b.prototype.addToWorld = function(b) {
      this.constraints;
      b.add(this.chassisBody);
      var c = this;
      this.preStepCallback = function() {
        c.updateVehicle(b.dt);
      };
      b.addEventListener("preStep", this.preStepCallback);
      this.world = b;
    };
    b.prototype.getVehicleAxisWorld = function(b, c) {
      c.set(0 === b ? 1 : 0, 1 === b ? 1 : 0, 2 === b ? 1 : 0);
      this.chassisBody.vectorToWorldFrame(c, c);
    };
    b.prototype.updateVehicle = function(b) {
      for (var c = this.wheelInfos, e = c.length, f = this.chassisBody, h = 0; e > h; h++) {
        this.updateWheelTransform(h);
      }
      this.currentVehicleSpeedKmHour = 3.6 * f.velocity.norm();
      h = new d;
      this.getVehicleAxisWorld(this.indexForwardAxis, h);
      0 > h.dot(f.velocity) && (this.currentVehicleSpeedKmHour *= -1);
      for (h = 0; e > h; h++) {
        this.castRay(c[h]);
      }
      this.updateSuspension(b);
      var l = new d, k = new d;
      for (h = 0; e > h; h++) {
        var p = c[h], m = p.suspensionForce;
        m > p.maxSuspensionForce && (m = p.maxSuspensionForce);
        p.raycastResult.hitNormalWorld.scale(m * b, l);
        p.raycastResult.hitPointWorld.vsub(f.position, k);
        f.applyImpulse(l, p.raycastResult.hitPointWorld);
      }
      this.updateFriction(b);
      l = new d;
      k = new d;
      m = new d;
      for (h = 0; e > h; h++) {
        p = c[h];
        f.getVelocityAtWorldPoint(p.chassisConnectionPointWorld, m);
        var n = 1;
        switch(this.indexUpAxis) {
          case 1:
            n = -1;
        }
        if (p.isInContact) {
          this.getVehicleAxisWorld(this.indexForwardAxis, k);
          var t = k.dot(p.raycastResult.hitNormalWorld);
          p.raycastResult.hitNormalWorld.scale(t, l);
          k.vsub(l, k);
          t = k.dot(m);
          p.deltaRotation = n * t * b / p.radius;
        }
        !p.sliding && p.isInContact || 0 === p.engineForce || !p.useCustomSlidingRotationalSpeed || (p.deltaRotation = (0 < p.engineForce ? 1 : -1) * p.customSlidingRotationalSpeed * b);
        Math.abs(p.brake) > Math.abs(p.engineForce) && (p.deltaRotation = 0);
        p.rotation += p.deltaRotation;
        p.deltaRotation *= .99;
      }
    };
    b.prototype.updateSuspension = function() {
      for (var b = this.chassisBody.mass, c = this.wheelInfos, e = c.length, d = 0; e > d; d++) {
        var f = c[d];
        if (f.isInContact) {
          var h = f.suspensionStiffness * (f.suspensionRestLength - f.suspensionLength) * f.clippedInvContactDotSuspension;
          var l = f.suspensionRelativeVelocity;
          h -= (0 > l ? f.dampingCompression : f.dampingRelaxation) * l;
          f.suspensionForce = h * b;
          0 > f.suspensionForce && (f.suspensionForce = 0);
        } else {
          f.suspensionForce = 0;
        }
      }
    };
    b.prototype.removeFromWorld = function(b) {
      this.constraints;
      b.remove(this.chassisBody);
      b.removeEventListener("preStep", this.preStepCallback);
      this.world = null;
    };
    var l = new d, u = new d;
    b.prototype.castRay = function(b) {
      this.updateWheelTransformWorld(b);
      var c = this.chassisBody, e = -1;
      b.directionWorld.scale(b.suspensionRestLength + b.radius, l);
      var f = b.chassisConnectionPointWorld;
      f.vadd(l, u);
      var h = b.raycastResult;
      h.reset();
      var k = c.collisionResponse;
      c.collisionResponse = !1;
      this.world.rayTest(f, u, h);
      c.collisionResponse = k;
      f = h.body;
      (b.raycastResult.groundObject = 0, f) ? (e = h.distance, b.raycastResult.hitNormalWorld = h.hitNormalWorld, b.isInContact = !0, b.suspensionLength = h.distance - b.radius, h = b.suspensionRestLength - b.maxSuspensionTravel, f = b.suspensionRestLength + b.maxSuspensionTravel, b.suspensionLength < h && (b.suspensionLength = h), b.suspensionLength > f && (b.suspensionLength = f, b.raycastResult.reset()), h = b.raycastResult.hitNormalWorld.dot(b.directionWorld), f = new d, c.getVelocityAtWorldPoint(b.raycastResult.hitPointWorld, 
      f), c = b.raycastResult.hitNormalWorld.dot(f), -.1 <= h ? (b.suspensionRelativeVelocity = 0, b.clippedInvContactDotSuspension = 10) : (h = -1 / h, b.suspensionRelativeVelocity = c * h, b.clippedInvContactDotSuspension = h)) : (b.suspensionLength = b.suspensionRestLength + 0 * b.maxSuspensionTravel, b.suspensionRelativeVelocity = 0, b.directionWorld.scale(-1, b.raycastResult.hitNormalWorld), b.clippedInvContactDotSuspension = 1);
      return e;
    };
    b.prototype.updateWheelTransformWorld = function(b) {
      b.isInContact = !1;
      var c = this.chassisBody;
      c.pointToWorldFrame(b.chassisConnectionPointLocal, b.chassisConnectionPointWorld);
      c.vectorToWorldFrame(b.directionLocal, b.directionWorld);
      c.vectorToWorldFrame(b.axleLocal, b.axleWorld);
    };
    b.prototype.updateWheelTransform = function(b) {
      b = this.wheelInfos[b];
      this.updateWheelTransformWorld(b);
      b.directionLocal.scale(-1, m);
      t.copy(b.axleLocal);
      m.cross(t, e);
      e.normalize();
      t.normalize();
      var c = b.steering, d = new h;
      d.setFromAxisAngle(m, c);
      c = new h;
      c.setFromAxisAngle(t, b.rotation);
      var f = b.worldTransform.quaternion;
      this.chassisBody.quaternion.mult(d, f);
      f.mult(c, f);
      f.normalize();
      d = b.worldTransform.position;
      d.copy(b.directionWorld);
      d.scale(b.suspensionLength, d);
      d.vadd(b.chassisConnectionPointWorld, d);
    };
    var w = [new d(1, 0, 0), new d(0, 1, 0), new d(0, 0, 1)];
    b.prototype.getWheelTransformWorld = function(b) {
      return this.wheelInfos[b].worldTransform;
    };
    var y = new d, x = [], p = [];
    b.prototype.updateFriction = function(b) {
      for (var c = this.wheelInfos, e = c.length, h = this.chassisBody, l = 0, k = 0; e > k; k++) {
        var m = c[k], n = m.raycastResult.body;
        n && l++;
        m.sideImpulse = 0;
        m.forwardImpulse = 0;
        p[k] || (p[k] = new d);
        x[k] || (x[k] = new d);
      }
      for (k = 0; e > k; k++) {
        if (m = c[k], n = m.raycastResult.body) {
          var t = x[k];
          this.getWheelTransformWorld(k).vectorToWorldFrame(w[this.indexRightAxis], t);
          l = m.raycastResult.hitNormalWorld;
          var q = t.dot(l);
          l.scale(q, y);
          t.vsub(y, t);
          t.normalize();
          l.cross(t, p[k]);
          p[k].normalize();
          l = m;
          q = h;
          var u = m.raycastResult.hitPointWorld, D = m.raycastResult.hitPointWorld;
          if (1.1 < t.norm2()) {
            n = 0;
          } else {
            var B = G, A = H, E = K;
            q.getVelocityAtWorldPoint(u, B);
            n.getVelocityAtWorldPoint(D, A);
            B.vsub(A, E);
            n = -.2 * t.dot(E) * (1 / (q.invMass + n.invMass));
          }
          l.sideImpulse = n;
          m.sideImpulse *= 1;
        }
      }
      this.sliding = !1;
      for (k = 0; e > k; k++) {
        m = c[k];
        n = m.raycastResult.body;
        u = 0;
        if (m.slipInfo = 1, n) {
          l = m.brake ? m.brake : 0;
          A = h;
          D = n;
          t = m.raycastResult.hitPointWorld;
          B = p[k];
          u = l;
          q = 0;
          E = t;
          var I = v, X = z, fa = C;
          A.getVelocityAtWorldPoint(E, I);
          D.getVelocityAtWorldPoint(E, X);
          I.vsub(X, fa);
          E = B.dot(fa);
          A = f(A, t, B);
          D = f(D, t, B);
          u = (q = 1 / (A + D) * -E, q > u && (q = u), -u > q && (q = -u), q);
          u += m.engineForce * b;
          l /= u;
          m.slipInfo *= l;
        }
        if (m.forwardImpulse = 0, m.skidInfo = 1, n) {
          if (m.skidInfo = 1, n = m.suspensionForce * b * m.frictionSlip, l = n * n, m.forwardImpulse = u, q = .5 * m.forwardImpulse, u = 1 * m.sideImpulse, q = q * q + u * u, m.sliding = !1, q > l) {
            this.sliding = !0, m.sliding = !0, l = n / Math.sqrt(q), m.skidInfo *= l;
          }
        }
      }
      if (this.sliding) {
        for (k = 0; e > k; k++) {
          m = c[k], 0 !== m.sideImpulse && 1 > m.skidInfo && (m.forwardImpulse *= m.skidInfo, m.sideImpulse *= m.skidInfo);
        }
      }
      for (k = 0; e > k; k++) {
        m = c[k];
        b = new d;
        if (b.copy(m.raycastResult.hitPointWorld), 0 !== m.forwardImpulse) {
          n = new d, p[k].scale(m.forwardImpulse, n), h.applyImpulse(n, b);
        }
        0 !== m.sideImpulse && (n = m.raycastResult.body, l = new d, l.copy(m.raycastResult.hitPointWorld), q = new d, x[k].scale(m.sideImpulse, q), h.pointToLocalFrame(b, b), b["xyz"[this.indexUpAxis]] *= m.rollInfluence, h.pointToWorldFrame(b, b), h.applyImpulse(q, b), q.scale(-1, q), n.applyImpulse(q, l));
      }
    };
    var v = new d, z = new d, C = new d, A = new d, D = new d, E = new d, B = new d, G = new d, H = new d, K = new d;
  }, {"../collision/Ray":9, "../collision/RaycastResult":10, "../math/Quaternion":28, "../math/Vec3":30, "../objects/WheelInfo":36, "./Body":31}], 33:[function(c, k) {
    function b(b) {
      (this.wheelBodies = [], this.coordinateSystem = "undefined" == typeof b.coordinateSystem ? new n(1, 2, 3) : b.coordinateSystem.clone(), this.chassisBody = b.chassisBody, this.chassisBody) || (b = new h(new n(5, 2, .5)), this.chassisBody = new f(1, b));
      this.constraints = [];
      this.wheelAxes = [];
      this.wheelForces = [];
    }
    var f = c("./Body"), d = c("../shapes/Sphere"), h = c("../shapes/Box"), n = c("../math/Vec3"), q = c("../constraints/HingeConstraint");
    k.exports = b;
    b.prototype.addWheel = function(b) {
      b = b || {};
      var c = b.body;
      c || (c = new f(1, new d(1.2)));
      this.wheelBodies.push(c);
      this.wheelForces.push(0);
      var e = (new n, "undefined" != typeof b.position ? b.position.clone() : new n), h = new n;
      this.chassisBody.pointToWorldFrame(e, h);
      c.position.set(h.x, h.y, h.z);
      b = "undefined" != typeof b.axis ? b.axis.clone() : new n(0, 1, 0);
      this.wheelAxes.push(b);
      c = new q(this.chassisBody, c, {pivotA:e, axisA:b, pivotB:n.ZERO, axisB:b, collideConnected:!1});
      return this.constraints.push(c), this.wheelBodies.length - 1;
    };
    b.prototype.setSteeringValue = function(b, c) {
      var e = this.wheelAxes[c], d = Math.cos(b);
      b = Math.sin(b);
      var f = e.x;
      e = e.y;
      this.constraints[c].axisA.set(d * f - b * e, b * f + d * e, 0);
    };
    b.prototype.setMotorSpeed = function(b, c) {
      c = this.constraints[c];
      c.enableMotor();
      c.motorTargetVelocity = b;
    };
    b.prototype.disableMotor = function(b) {
      this.constraints[b].disableMotor();
    };
    var m = new n;
    b.prototype.setWheelForce = function(b, c) {
      this.wheelForces[c] = b;
    };
    b.prototype.applyWheelForce = function(b, c) {
      var e = this.wheelBodies[c], d = e.torque;
      this.wheelAxes[c].scale(b, m);
      e.vectorToWorldFrame(m, m);
      d.vadd(m, d);
    };
    b.prototype.addToWorld = function(b) {
      for (var c = this.constraints, e = this.wheelBodies.concat([this.chassisBody]), d = 0; d < e.length; d++) {
        b.add(e[d]);
      }
      for (d = 0; d < c.length; d++) {
        b.addConstraint(c[d]);
      }
      b.addEventListener("preStep", this._update.bind(this));
    };
    b.prototype._update = function() {
      for (var b = this.wheelForces, c = 0; c < b.length; c++) {
        this.applyWheelForce(b[c], c);
      }
    };
    b.prototype.removeFromWorld = function(b) {
      for (var c = this.constraints, e = this.wheelBodies.concat([this.chassisBody]), d = 0; d < e.length; d++) {
        b.remove(e[d]);
      }
      for (d = 0; d < c.length; d++) {
        b.removeConstraint(c[d]);
      }
    };
    var t = new n;
    b.prototype.getWheelSpeed = function(b) {
      var c = this.wheelBodies[b].angularVelocity;
      return this.chassisBody.vectorToWorldFrame(this.wheelAxes[b], t), c.dot(t);
    };
  }, {"../constraints/HingeConstraint":15, "../math/Vec3":30, "../shapes/Box":37, "../shapes/Sphere":44, "./Body":31}], 34:[function(c, k) {
    function b() {
      this.particles = [];
      this.speedOfSound = this.smoothingRadius = this.density = 1;
      this.viscosity = .01;
      this.eps = 1E-6;
      this.pressures = [];
      this.densities = [];
      this.neighbors = [];
    }
    k.exports = b;
    k = (c("../shapes/Shape"), c("../math/Vec3"));
    c("../math/Quaternion");
    c("../shapes/Particle");
    c("../objects/Body");
    c("../material/Material");
    b.prototype.add = function(b) {
      this.particles.push(b);
      this.neighbors.length < this.particles.length && this.neighbors.push([]);
    };
    b.prototype.remove = function(b) {
      b = this.particles.indexOf(b);
      -1 !== b && (this.particles.splice(b, 1), this.neighbors.length > this.particles.length && this.neighbors.pop());
    };
    var f = new k;
    b.prototype.getNeighbors = function(b, c) {
      for (var e = this.particles.length, d = b.id, h = this.smoothingRadius * this.smoothingRadius, l = 0; l !== e; l++) {
        var k = this.particles[l];
        k.position.vsub(b.position, f);
        d !== k.id && f.norm2() < h && c.push(k);
      }
    };
    var d = new k, h = new k, n = new k, q = new k, m = new k, t = new k;
    b.prototype.update = function() {
      for (var b = this.particles.length, c = this.speedOfSound, f = this.eps, k = 0; k !== b; k++) {
        var y = this.particles[k], x = this.neighbors[k];
        x.length = 0;
        this.getNeighbors(y, x);
        x.push(this.particles[k]);
        for (var p = x.length, v = 0, z = 0; z !== p; z++) {
          y.position.vsub(x[z].position, d);
          var C = d.norm();
          C = this.w(C);
          v += x[z].mass * C;
        }
        this.densities[k] = v;
        this.pressures[k] = c * c * (this.densities[k] - this.density);
      }
      for (k = 0; k !== b; k++) {
        c = this.particles[k];
        h.set(0, 0, 0);
        n.set(0, 0, 0);
        x = this.neighbors[k];
        p = x.length;
        for (z = 0; z !== p; z++) {
          v = x[z], c.position.vsub(v.position, m), C = m.norm(), y = -v.mass * (this.pressures[k] / (this.densities[k] * this.densities[k] + f) + this.pressures[z] / (this.densities[z] * this.densities[z] + f)), this.gradw(m, q), q.mult(y, q), h.vadd(q, h), v.velocity.vsub(c.velocity, t), t.mult(1 / (1E-4 + this.densities[k] * this.densities[z]) * this.viscosity * v.mass, t), y = this.nablaw(C), t.mult(y, t), n.vadd(t, n);
        }
        n.mult(c.mass, n);
        h.mult(c.mass, h);
        c.force.vadd(n, c.force);
        c.force.vadd(h, c.force);
      }
    };
    b.prototype.w = function(b) {
      var c = this.smoothingRadius;
      return 315 / (64 * Math.PI * Math.pow(c, 9)) * Math.pow(c * c - b * b, 3);
    };
    b.prototype.gradw = function(b, c) {
      var e = b.norm(), d = this.smoothingRadius;
      b.mult(945 / (32 * Math.PI * Math.pow(d, 9)) * Math.pow(d * d - e * e, 2), c);
    };
    b.prototype.nablaw = function(b) {
      var c = this.smoothingRadius;
      return 945 / (32 * Math.PI * Math.pow(c, 9)) * (c * c - b * b) * (7 * b * b - 3 * c * c);
    };
  }, {"../material/Material":25, "../math/Quaternion":28, "../math/Vec3":30, "../objects/Body":31, "../shapes/Particle":41, "../shapes/Shape":43}], 35:[function(c, k) {
    function b(b, c, e) {
      e = e || {};
      this.restLength = "number" == typeof e.restLength ? e.restLength : 1;
      this.stiffness = e.stiffness || 100;
      this.damping = e.damping || 1;
      this.bodyA = b;
      this.bodyB = c;
      this.localAnchorA = new f;
      this.localAnchorB = new f;
      e.localAnchorA && this.localAnchorA.copy(e.localAnchorA);
      e.localAnchorB && this.localAnchorB.copy(e.localAnchorB);
      e.worldAnchorA && this.setWorldAnchorA(e.worldAnchorA);
      e.worldAnchorB && this.setWorldAnchorB(e.worldAnchorB);
    }
    var f = c("../math/Vec3");
    k.exports = b;
    b.prototype.setWorldAnchorA = function(b) {
      this.bodyA.pointToLocalFrame(b, this.localAnchorA);
    };
    b.prototype.setWorldAnchorB = function(b) {
      this.bodyB.pointToLocalFrame(b, this.localAnchorB);
    };
    b.prototype.getWorldAnchorA = function(b) {
      this.bodyA.pointToWorldFrame(this.localAnchorA, b);
    };
    b.prototype.getWorldAnchorB = function(b) {
      this.bodyB.pointToWorldFrame(this.localAnchorB, b);
    };
    var d = new f, h = new f, n = new f, q = new f, m = new f, t = new f, e = new f, l = new f, u = new f, w = new f, y = new f;
    b.prototype.applyForce = function() {
      var b = this.stiffness, c = this.damping, f = this.restLength, k = this.bodyA, C = this.bodyB;
      this.getWorldAnchorA(m);
      this.getWorldAnchorB(t);
      m.vsub(k.position, e);
      t.vsub(C.position, l);
      t.vsub(m, d);
      var A = d.norm();
      h.copy(d);
      h.normalize();
      C.velocity.vsub(k.velocity, n);
      C.angularVelocity.cross(l, y);
      n.vadd(y, n);
      k.angularVelocity.cross(e, y);
      n.vsub(y, n);
      h.mult(-b * (A - f) - c * n.dot(h), q);
      k.force.vsub(q, k.force);
      C.force.vadd(q, C.force);
      e.cross(q, u);
      l.cross(q, w);
      k.torque.vsub(u, k.torque);
      C.torque.vadd(w, C.torque);
    };
  }, {"../math/Vec3":30}], 36:[function(c, k) {
    function b(b) {
      b = n.defaults(b, {chassisConnectionPointLocal:new f, chassisConnectionPointWorld:new f, directionLocal:new f, directionWorld:new f, axleLocal:new f, axleWorld:new f, suspensionRestLength:1, suspensionMaxLength:2, radius:1, suspensionStiffness:100, dampingCompression:10, dampingRelaxation:10, frictionSlip:1E4, steering:0, rotation:0, deltaRotation:0, rollInfluence:.01, maxSuspensionForce:Number.MAX_VALUE, isFrontWheel:!0, clippedInvContactDotSuspension:1, suspensionRelativeVelocity:0, suspensionForce:0, 
      skidInfo:0, suspensionLength:0, maxSuspensionTravel:1, useCustomSlidingRotationalSpeed:!1, customSlidingRotationalSpeed:-.1});
      this.maxSuspensionTravel = b.maxSuspensionTravel;
      this.customSlidingRotationalSpeed = b.customSlidingRotationalSpeed;
      this.useCustomSlidingRotationalSpeed = b.useCustomSlidingRotationalSpeed;
      this.sliding = !1;
      this.chassisConnectionPointLocal = b.chassisConnectionPointLocal.clone();
      this.chassisConnectionPointWorld = b.chassisConnectionPointWorld.clone();
      this.directionLocal = b.directionLocal.clone();
      this.directionWorld = b.directionWorld.clone();
      this.axleLocal = b.axleLocal.clone();
      this.axleWorld = b.axleWorld.clone();
      this.suspensionRestLength = b.suspensionRestLength;
      this.suspensionMaxLength = b.suspensionMaxLength;
      this.radius = b.radius;
      this.suspensionStiffness = b.suspensionStiffness;
      this.dampingCompression = b.dampingCompression;
      this.dampingRelaxation = b.dampingRelaxation;
      this.frictionSlip = b.frictionSlip;
      this.deltaRotation = this.rotation = this.steering = 0;
      this.rollInfluence = b.rollInfluence;
      this.maxSuspensionForce = b.maxSuspensionForce;
      this.brake = this.engineForce = 0;
      this.isFrontWheel = b.isFrontWheel;
      this.clippedInvContactDotSuspension = 1;
      this.forwardImpulse = this.sideImpulse = this.suspensionLength = this.skidInfo = this.suspensionForce = this.suspensionRelativeVelocity = 0;
      this.raycastResult = new h;
      this.worldTransform = new d;
      this.isInContact = !1;
    }
    var f = c("../math/Vec3"), d = c("../math/Transform"), h = c("../collision/RaycastResult"), n = c("../utils/Utils");
    k.exports = b;
    var q = new f, m = new f;
    q = new f;
    b.prototype.updateWheel = function(b) {
      var c = this.raycastResult;
      if (this.isInContact) {
        var d = c.hitNormalWorld.dot(c.directionWorld);
        c.hitPointWorld.vsub(b.position, m);
        b.getVelocityAtWorldPoint(m, q);
        b = c.hitNormalWorld.dot(q);
        -.1 <= d ? (this.suspensionRelativeVelocity = 0, this.clippedInvContactDotSuspension = 10) : (d = -1 / d, this.suspensionRelativeVelocity = b * d, this.clippedInvContactDotSuspension = d);
      } else {
        c.suspensionLength = this.suspensionRestLength, this.suspensionRelativeVelocity = 0, c.directionWorld.scale(-1, c.hitNormalWorld), this.clippedInvContactDotSuspension = 1;
      }
    };
  }, {"../collision/RaycastResult":10, "../math/Transform":29, "../math/Vec3":30, "../utils/Utils":53}], 37:[function(c, k) {
    function b(b) {
      f.call(this);
      this.type = f.types.BOX;
      this.halfExtents = b;
      this.convexPolyhedronRepresentation = null;
      this.updateConvexPolyhedronRepresentation();
      this.updateBoundingSphereRadius();
    }
    k.exports = b;
    var f = c("./Shape"), d = c("../math/Vec3"), h = c("./ConvexPolyhedron");
    b.prototype = new f;
    b.prototype.constructor = b;
    b.prototype.updateConvexPolyhedronRepresentation = function() {
      var b = this.halfExtents.x, c = this.halfExtents.y, e = this.halfExtents.z;
      b = [new d(-b, -c, -e), new d(b, -c, -e), new d(b, c, -e), new d(-b, c, -e), new d(-b, -c, e), new d(b, -c, e), new d(b, c, e), new d(-b, c, e)];
      this.convexPolyhedronRepresentation = b = (new d(0, 0, 1), new d(0, 1, 0), new d(1, 0, 0), new h(b, [[3, 2, 1, 0], [4, 5, 6, 7], [5, 4, 0, 1], [2, 3, 7, 6], [0, 4, 7, 3], [1, 2, 6, 5]]));
      b.material = this.material;
    };
    b.prototype.calculateLocalInertia = function(c, f) {
      return f = f || new d, b.calculateInertia(this.halfExtents, c, f), f;
    };
    b.calculateInertia = function(b, c, e) {
      e.x = 1 / 12 * c * (4 * b.y * b.y + 4 * b.z * b.z);
      e.y = 1 / 12 * c * (4 * b.x * b.x + 4 * b.z * b.z);
      e.z = 1 / 12 * c * (4 * b.y * b.y + 4 * b.x * b.x);
    };
    b.prototype.getSideNormals = function(b, c) {
      var e = this.halfExtents;
      if (b[0].set(e.x, 0, 0), b[1].set(0, e.y, 0), b[2].set(0, 0, e.z), b[3].set(-e.x, 0, 0), b[4].set(0, -e.y, 0), b[5].set(0, 0, -e.z), void 0 !== c) {
        for (e = 0; e !== b.length; e++) {
          c.vmult(b[e], b[e]);
        }
      }
      return b;
    };
    b.prototype.volume = function() {
      return 8 * this.halfExtents.x * this.halfExtents.y * this.halfExtents.z;
    };
    b.prototype.updateBoundingSphereRadius = function() {
      this.boundingSphereRadius = this.halfExtents.norm();
    };
    var n = new d;
    new d;
    b.prototype.forEachWorldCorner = function(b, c, e) {
      var d = this.halfExtents;
      d = [[d.x, d.y, d.z], [-d.x, d.y, d.z], [-d.x, -d.y, d.z], [-d.x, -d.y, -d.z], [d.x, -d.y, -d.z], [d.x, d.y, -d.z], [-d.x, d.y, -d.z], [d.x, -d.y, d.z]];
      for (var f = 0; f < d.length; f++) {
        n.set(d[f][0], d[f][1], d[f][2]), c.vmult(n, n), b.vadd(n, n), e(n.x, n.y, n.z);
      }
    };
    var q = [new d, new d, new d, new d, new d, new d, new d, new d];
    b.prototype.calculateWorldAABB = function(b, c, e, d) {
      var f = this.halfExtents;
      q[0].set(f.x, f.y, f.z);
      q[1].set(-f.x, f.y, f.z);
      q[2].set(-f.x, -f.y, f.z);
      q[3].set(-f.x, -f.y, -f.z);
      q[4].set(f.x, -f.y, -f.z);
      q[5].set(f.x, f.y, -f.z);
      q[6].set(-f.x, f.y, -f.z);
      q[7].set(f.x, -f.y, f.z);
      var h = q[0];
      c.vmult(h, h);
      b.vadd(h, h);
      d.copy(h);
      e.copy(h);
      for (f = 1; 8 > f; f++) {
        h = q[f];
        c.vmult(h, h);
        b.vadd(h, h);
        var k = h.x, l = h.y;
        h = h.z;
        k > d.x && (d.x = k);
        l > d.y && (d.y = l);
        h > d.z && (d.z = h);
        k < e.x && (e.x = k);
        l < e.y && (e.y = l);
        h < e.z && (e.z = h);
      }
    };
  }, {"../math/Vec3":30, "./ConvexPolyhedron":38, "./Shape":43}], 38:[function(c, k) {
    function b(b, c, e) {
      f.call(this);
      this.type = f.types.CONVEXPOLYHEDRON;
      this.vertices = b || [];
      this.worldVertices = [];
      this.worldVerticesNeedsUpdate = !0;
      this.faces = c || [];
      this.faceNormals = [];
      this.computeNormals();
      this.worldFaceNormalsNeedsUpdate = !0;
      this.worldFaceNormals = [];
      this.uniqueEdges = [];
      this.uniqueAxes = e ? e.slice() : null;
      this.computeEdges();
      this.updateBoundingSphereRadius();
    }
    k.exports = b;
    var f = c("./Shape"), d = c("../math/Vec3"), h = (c("../math/Quaternion"), c("../math/Transform"));
    b.prototype = new f;
    b.prototype.constructor = b;
    var n = new d;
    b.prototype.computeEdges = function() {
      for (var b = this.faces, c = this.vertices, e = (c.length, this.uniqueEdges), d = e.length = 0; d !== b.length; d++) {
        for (var f = b[d], h = f.length, k = 0; k !== h; k++) {
          c[f[k]].vsub(c[f[(k + 1) % h]], n);
          n.normalize();
          for (var l = !1, p = 0; p !== e.length; p++) {
            if (e[p].almostEquals(n) || e[p].almostEquals(n)) {
              l = !0;
              break;
            }
          }
          l || e.push(n.clone());
        }
      }
    };
    b.prototype.computeNormals = function() {
      this.faceNormals.length = this.faces.length;
      for (var b = 0; b < this.faces.length; b++) {
        for (var c = 0; c < this.faces[b].length; c++) {
          if (!this.vertices[this.faces[b][c]]) {
            throw Error("Vertex " + this.faces[b][c] + " not found!");
          }
        }
        c = this.faceNormals[b] || new d;
        this.getFaceNormal(b, c);
        c.negate(c);
        this.faceNormals[b] = c;
        if (0 > c.dot(this.vertices[this.faces[b][0]])) {
          for (console.error(".faceNormals[" + b + "] = Vec3(" + c.toString() + ") looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule."), c = 0; c < this.faces[b].length; c++) {
            console.warn(".vertices[" + this.faces[b][c] + "] = Vec3(" + this.vertices[this.faces[b][c]].toString() + ")");
          }
        }
      }
    };
    var q = new d, m = new d;
    b.computeNormal = function(b, c, e, d) {
      c.vsub(b, m);
      e.vsub(c, q);
      q.cross(m, d);
      d.isZero() || d.normalize();
    };
    b.prototype.getFaceNormal = function(c, e) {
      c = this.faces[c];
      return b.computeNormal(this.vertices[c[0]], this.vertices[c[1]], this.vertices[c[2]], e);
    };
    var t = new d;
    b.prototype.clipAgainstHull = function(b, c, e, f, h, k, l, p, m) {
      for (var n = -1, v = -Number.MAX_VALUE, q = 0; q < e.faces.length; q++) {
        t.copy(e.faceNormals[q]);
        h.vmult(t, t);
        var u = t.dot(k);
        u > v && (v = u, n = q);
      }
      v = [];
      q = e.faces[n];
      u = q.length;
      for (var z = 0; u > z; z++) {
        var w = e.vertices[q[z]], y = new d;
        y.copy(w);
        h.vmult(y, y);
        f.vadd(y, y);
        v.push(y);
      }
      0 <= n && this.clipFaceAgainstHull(k, b, c, v, l, p, m);
    };
    var e = new d, l = new d, u = new d, w = new d, y = new d, x = new d;
    b.prototype.findSeparatingAxis = function(b, c, d, f, h, k, p, m) {
      var n = Number.MAX_VALUE, t = 0;
      if (this.uniqueAxes) {
        for (var v = 0; v !== this.uniqueAxes.length; v++) {
          d.vmult(this.uniqueAxes[v], e);
          var q = this.testSepAxis(e, b, c, d, f, h);
          if (!1 === q) {
            return !1;
          }
          n > q && (n = q, k.copy(e));
        }
      } else {
        var z = p ? p.length : this.faces.length;
        for (v = 0; z > v; v++) {
          q = p ? p[v] : v;
          e.copy(this.faceNormals[q]);
          d.vmult(e, e);
          q = this.testSepAxis(e, b, c, d, f, h);
          if (!1 === q) {
            return !1;
          }
          n > q && (n = q, k.copy(e));
        }
      }
      if (b.uniqueAxes) {
        for (v = 0; v !== b.uniqueAxes.length; v++) {
          h.vmult(b.uniqueAxes[v], l);
          t++;
          q = this.testSepAxis(l, b, c, d, f, h);
          if (!1 === q) {
            return !1;
          }
          n > q && (n = q, k.copy(l));
        }
      } else {
        for (p = m ? m.length : b.faces.length, v = 0; p > v; v++) {
          q = m ? m[v] : v;
          l.copy(b.faceNormals[q]);
          h.vmult(l, l);
          t++;
          q = this.testSepAxis(l, b, c, d, f, h);
          if (!1 === q) {
            return !1;
          }
          n > q && (n = q, k.copy(l));
        }
      }
      for (m = 0; m !== this.uniqueEdges.length; m++) {
        for (d.vmult(this.uniqueEdges[m], w), t = 0; t !== b.uniqueEdges.length; t++) {
          if (h.vmult(b.uniqueEdges[t], y), w.cross(y, x), !x.almostZero()) {
            x.normalize();
            v = this.testSepAxis(x, b, c, d, f, h);
            if (!1 === v) {
              return !1;
            }
            n > v && (n = v, k.copy(x));
          }
        }
      }
      return f.vsub(c, u), 0 < u.dot(k) && k.negate(k), !0;
    };
    var p = [], v = [];
    b.prototype.testSepAxis = function(c, e, d, f, h, k) {
      b.project(this, c, d, f, p);
      b.project(e, c, h, k, v);
      d = p[0];
      c = p[1];
      e = v[0];
      f = v[1];
      if (f > d || c > e) {
        return !1;
      }
      d -= f;
      c = e - c;
      return c > d ? d : c;
    };
    var z = new d, C = new d;
    b.prototype.calculateLocalInertia = function(b, c) {
      this.computeLocalAABB(z, C);
      var e = C.x - z.x, d = C.y - z.y, f = C.z - z.z;
      c.x = 1 / 12 * b * (4 * d * d + 4 * f * f);
      c.y = 1 / 12 * b * (4 * e * e + 4 * f * f);
      c.z = 1 / 12 * b * (4 * d * d + 4 * e * e);
    };
    b.prototype.getPlaneConstantOfFace = function(b) {
      return -this.faceNormals[b].dot(this.vertices[this.faces[b][0]]);
    };
    var A = new d, D = new d, E = new d, B = new d, G = new d, H = new d, K = new d, I = new d;
    b.prototype.clipFaceAgainstHull = function(b, c, e, d, f, h, k) {
      for (var l = [], p = -1, m = Number.MAX_VALUE, n = 0; n < this.faces.length; n++) {
        A.copy(this.faceNormals[n]);
        e.vmult(A, A);
        var t = A.dot(b);
        m > t && (m = t, p = n);
      }
      if (!(0 > p)) {
        b = this.faces[p];
        b.connectedFaces = [];
        for (m = 0; m < this.faces.length; m++) {
          for (n = 0; n < this.faces[m].length; n++) {
            -1 !== b.indexOf(this.faces[m][n]) && m !== p && -1 === b.connectedFaces.indexOf(m) && b.connectedFaces.push(m);
          }
        }
        m = (d.length, b.length);
        for (n = 0; m > n; n++) {
          t = this.vertices[b[n]];
          t.vsub(this.vertices[b[(n + 1) % m]], D);
          E.copy(D);
          e.vmult(E, E);
          c.vadd(E, E);
          B.copy(this.faceNormals[p]);
          e.vmult(B, B);
          c.vadd(B, B);
          E.cross(B, G);
          G.negate(G);
          H.copy(t);
          e.vmult(H, H);
          c.vadd(H, H);
          t = (-H.dot(G), b.connectedFaces[n]);
          K.copy(this.faceNormals[t]);
          t = this.getPlaneConstantOfFace(t);
          I.copy(K);
          e.vmult(I, I);
          t -= I.dot(c);
          for (this.clipFaceAgainstPlane(d, l, I, t); d.length;) {
            d.shift();
          }
          for (; l.length;) {
            d.push(l.shift());
          }
        }
        K.copy(this.faceNormals[p]);
        t = this.getPlaneConstantOfFace(p);
        I.copy(K);
        e.vmult(I, I);
        t -= I.dot(c);
        for (m = 0; m < d.length; m++) {
          if (c = I.dot(d[m]) + t, f >= c && (console.log("clamped: depth=" + c + " to minDist=" + (f + "")), c = f), h >= c) {
            e = d[m], 0 >= c && k.push({point:e, normal:I, depth:c});
          }
        }
      }
    };
    b.prototype.clipFaceAgainstPlane = function(b, c, e, f) {
      var h, k = b.length;
      if (2 > k) {
        return c;
      }
      var l = b[b.length - 1], p = b[0];
      var m = e.dot(l) + f;
      for (var n = 0; k > n; n++) {
        if (p = b[n], h = e.dot(p) + f, 0 > m) {
          if (0 > h) {
            var t = new d;
            t.copy(p);
          } else {
            t = new d, l.lerp(p, m / (m - h), t);
          }
          c.push(t);
        } else {
          0 > h && (t = new d, l.lerp(p, m / (m - h), t), c.push(t), c.push(p));
        }
        l = p;
        m = h;
      }
      return c;
    };
    b.prototype.computeWorldVertices = function(b, c) {
      for (var e = this.vertices.length; this.worldVertices.length < e;) {
        this.worldVertices.push(new d);
      }
      for (var f = this.vertices, h = this.worldVertices, k = 0; k !== e; k++) {
        c.vmult(f[k], h[k]), b.vadd(h[k], h[k]);
      }
      this.worldVerticesNeedsUpdate = !1;
    };
    new d;
    b.prototype.computeLocalAABB = function(b, c) {
      var e = this.vertices.length, d = this.vertices;
      b.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);
      c.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);
      for (var f = 0; e > f; f++) {
        var h = d[f];
        h.x < b.x ? b.x = h.x : h.x > c.x && (c.x = h.x);
        h.y < b.y ? b.y = h.y : h.y > c.y && (c.y = h.y);
        h.z < b.z ? b.z = h.z : h.z > c.z && (c.z = h.z);
      }
    };
    b.prototype.computeWorldFaceNormals = function(b) {
      for (var c = this.faceNormals.length; this.worldFaceNormals.length < c;) {
        this.worldFaceNormals.push(new d);
      }
      for (var e = this.faceNormals, f = this.worldFaceNormals, h = 0; h !== c; h++) {
        b.vmult(e[h], f[h]);
      }
      this.worldFaceNormalsNeedsUpdate = !1;
    };
    b.prototype.updateBoundingSphereRadius = function() {
      for (var b = 0, c = this.vertices, e = 0, d = c.length; e !== d; e++) {
        var f = c[e].norm2();
        f > b && (b = f);
      }
      this.boundingSphereRadius = Math.sqrt(b);
    };
    var L = new d;
    b.prototype.calculateWorldAABB = function(b, c, e, d) {
      for (var f, h, k, l, p, m, n = this.vertices.length, t = this.vertices, v = 0; n > v; v++) {
        L.copy(t[v]);
        c.vmult(L, L);
        b.vadd(L, L);
        var q = L;
        q.x < f || void 0 === f ? f = q.x : (q.x > l || void 0 === l) && (l = q.x);
        q.y < h || void 0 === h ? h = q.y : (q.y > p || void 0 === p) && (p = q.y);
        q.z < k || void 0 === k ? k = q.z : (q.z > m || void 0 === m) && (m = q.z);
      }
      e.set(f, h, k);
      d.set(l, p, m);
    };
    b.prototype.volume = function() {
      return 4 * Math.PI * this.boundingSphereRadius / 3;
    };
    b.prototype.getAveragePointLocal = function(b) {
      b = b || new d;
      for (var c = this.vertices.length, e = this.vertices, f = 0; c > f; f++) {
        b.vadd(e[f], b);
      }
      return b.mult(1 / c, b), b;
    };
    b.prototype.transformAllPoints = function(b, c) {
      var e = this.vertices.length, d = this.vertices;
      if (c) {
        for (var f = 0; e > f; f++) {
          var h = d[f];
          c.vmult(h, h);
        }
        for (f = 0; f < this.faceNormals.length; f++) {
          h = this.faceNormals[f], c.vmult(h, h);
        }
      }
      if (b) {
        for (f = 0; e > f; f++) {
          h = d[f], h.vadd(b, h);
        }
      }
    };
    var R = new d, J = new d, Q = new d;
    b.prototype.pointIsInside = function(b) {
      var c = this.vertices, e = this.faces, d = this.faceNormals, f = this.faces.length;
      this.getAveragePointLocal(R);
      for (var h = 0; f > h; h++) {
        var k = (this.faces[h].length, d[h]);
        var l = c[e[h][0]], p = J;
        b.vsub(l, p);
        p = k.dot(p);
        var m = Q;
        R.vsub(l, m);
        k = k.dot(m);
        if (0 > p && 0 < k || 0 < p && 0 > k) {
          return !1;
        }
      }
      return -1;
    };
    var aa = (new d, new d), V = new d;
    b.project = function(b, c, e, d, f) {
      var k = b.vertices.length;
      b = b.vertices;
      V.setZero();
      h.vectorToLocalFrame(e, d, c, aa);
      h.pointToLocalFrame(e, d, V, V);
      d = V.dot(aa);
      e = c = b[0].dot(aa);
      for (var l = 1; k > l; l++) {
        var p = b[l].dot(aa);
        p > c && (c = p);
        e > p && (e = p);
      }
      if (e -= d, c -= d, e > c) {
        k = e, e = c, c = k;
      }
      f[0] = c;
      f[1] = e;
    };
  }, {"../math/Quaternion":28, "../math/Transform":29, "../math/Vec3":30, "./Shape":43}], 39:[function(c, k) {
    function b(b, c, k, t) {
      var e = [], l = [], m = [], n = [], q = [], x = Math.cos, p = Math.sin;
      e.push(new d(c * x(0), c * p(0), .5 * -k));
      n.push(0);
      e.push(new d(b * x(0), b * p(0), .5 * k));
      q.push(1);
      for (var v = 0; t > v; v++) {
        var z = 2 * Math.PI / t * (v + 1), C = 2 * Math.PI / t * (v + .5);
        t - 1 > v ? (e.push(new d(c * x(z), c * p(z), .5 * -k)), n.push(2 * v + 2), e.push(new d(b * x(z), b * p(z), .5 * k)), q.push(2 * v + 3), m.push([2 * v + 2, 2 * v + 3, 2 * v + 1, 2 * v])) : m.push([0, 1, 2 * v + 1, 2 * v]);
        (1 === t % 2 || t / 2 > v) && l.push(new d(x(C), p(C), 0));
      }
      m.push(q);
      l.push(new d(0, 0, 1));
      b = [];
      for (v = 0; v < n.length; v++) {
        b.push(n[n.length - v - 1]);
      }
      m.push(b);
      this.type = f.types.CONVEXPOLYHEDRON;
      h.call(this, e, m, l);
    }
    k.exports = b;
    var f = c("./Shape"), d = c("../math/Vec3"), h = (c("../math/Quaternion"), c("./ConvexPolyhedron"));
    b.prototype = new h;
  }, {"../math/Quaternion":28, "../math/Vec3":30, "./ConvexPolyhedron":38, "./Shape":43}], 40:[function(c, k) {
    function b(b, c) {
      c = n.defaults(c, {maxValue:null, minValue:null, elementSize:1});
      this.data = b;
      this.maxValue = c.maxValue;
      this.minValue = c.minValue;
      this.elementSize = c.elementSize;
      null === c.minValue && this.updateMinValue();
      null === c.maxValue && this.updateMaxValue();
      this.cacheEnabled = !0;
      f.call(this);
      this.pillarConvex = new d;
      this.pillarOffset = new h;
      this.type = f.types.HEIGHTFIELD;
      this.updateBoundingSphereRadius();
      this._cachedPillars = {};
    }
    var f = c("./Shape"), d = c("./ConvexPolyhedron"), h = c("../math/Vec3"), n = c("../utils/Utils");
    k.exports = b;
    b.prototype = new f;
    b.prototype.update = function() {
      this._cachedPillars = {};
    };
    b.prototype.updateMinValue = function() {
      for (var b = this.data, c = b[0][0], d = 0; d !== b.length; d++) {
        for (var e = 0; e !== b[d].length; e++) {
          var f = b[d][e];
          c > f && (c = f);
        }
      }
      this.minValue = c;
    };
    b.prototype.updateMaxValue = function() {
      for (var b = this.data, c = b[0][0], d = 0; d !== b.length; d++) {
        for (var e = 0; e !== b[d].length; e++) {
          var f = b[d][e];
          f > c && (c = f);
        }
      }
      this.maxValue = c;
    };
    b.prototype.setHeightValueAtIndex = function(b, c, d) {
      this.data[b][c] = d;
      this.clearCachedConvexTrianglePillar(b, c, !1);
      0 < b && (this.clearCachedConvexTrianglePillar(b - 1, c, !0), this.clearCachedConvexTrianglePillar(b - 1, c, !1));
      0 < c && (this.clearCachedConvexTrianglePillar(b, c - 1, !0), this.clearCachedConvexTrianglePillar(b, c - 1, !1));
      0 < c && 0 < b && this.clearCachedConvexTrianglePillar(b - 1, c - 1, !0);
    };
    b.prototype.getRectMinMax = function(b, c, d, e, f) {
      f = f || [];
      for (var h = this.data, k = this.minValue; d >= b; b++) {
        for (var l = c; e >= l; l++) {
          var m = h[b][l];
          m > k && (k = m);
        }
      }
      f[0] = this.minValue;
      f[1] = k;
    };
    b.prototype.getIndexOfPosition = function(b, c, d, e) {
      var f = this.elementSize, h = this.data;
      b = Math.floor(b / f);
      c = Math.floor(c / f);
      return d[0] = b, d[1] = c, e && (0 > b && (b = 0), 0 > c && (c = 0), b >= h.length - 1 && (b = h.length - 1), c >= h[0].length - 1 && (c = h[0].length - 1)), 0 > b || 0 > c || b >= h.length - 1 || c >= h[0].length - 1 ? !1 : !0;
    };
    b.prototype.getHeightAt = function(b, c, d) {
      var e = [];
      this.getIndexOfPosition(b, c, e, d);
      b = [];
      return this.getRectMinMax(e[0], e[1] + 1, e[0], e[1] + 1, b), (b[0] + b[1]) / 2;
    };
    b.prototype.getCacheConvexTrianglePillarKey = function(b, c, d) {
      return b + "_" + c + "_" + (d ? 1 : 0);
    };
    b.prototype.getCachedConvexTrianglePillar = function(b, c, d) {
      return this._cachedPillars[this.getCacheConvexTrianglePillarKey(b, c, d)];
    };
    b.prototype.setCachedConvexTrianglePillar = function(b, c, d, e, f) {
      this._cachedPillars[this.getCacheConvexTrianglePillarKey(b, c, d)] = {convex:e, offset:f};
    };
    b.prototype.clearCachedConvexTrianglePillar = function(b, c, d) {
      delete this._cachedPillars[this.getCacheConvexTrianglePillarKey(b, c, d)];
    };
    b.prototype.getConvexTrianglePillar = function(b, c, f) {
      var e = this.pillarConvex, k = this.pillarOffset;
      if (this.cacheEnabled) {
        var m = this.getCachedConvexTrianglePillar(b, c, f);
        if (m) {
          return this.pillarConvex = m.convex, void(this.pillarOffset = m.offset);
        }
        e = new d;
        k = new h;
        this.pillarConvex = e;
        this.pillarOffset = k;
      }
      m = this.data;
      var n = this.elementSize, t = e.faces;
      e.vertices.length = 6;
      for (var q = 0; 6 > q; q++) {
        e.vertices[q] || (e.vertices[q] = new h);
      }
      t.length = 5;
      for (q = 0; 5 > q; q++) {
        t[q] || (t[q] = []);
      }
      q = e.vertices;
      var p = (Math.min(m[b][c], m[b + 1][c], m[b][c + 1], m[b + 1][c + 1]) - this.minValue) / 2 + this.minValue;
      f ? (k.set((b + .75) * n, (c + .75) * n, p), q[0].set(.25 * n, .25 * n, m[b + 1][c + 1] - p), q[1].set(-.75 * n, .25 * n, m[b][c + 1] - p), q[2].set(.25 * n, -.75 * n, m[b + 1][c] - p), q[3].set(.25 * n, .25 * n, -p - 1), q[4].set(-.75 * n, .25 * n, -p - 1), q[5].set(.25 * n, -.75 * n, -p - 1), t[0][0] = 0, t[0][1] = 1, t[0][2] = 2, t[1][0] = 5, t[1][1] = 4, t[1][2] = 3, t[2][0] = 2, t[2][1] = 5, t[2][2] = 3, t[2][3] = 0, t[3][0] = 3, t[3][1] = 4, t[3][2] = 1, t[3][3] = 0, t[4][0] = 1, t[4][1] = 
      4, t[4][2] = 5, t[4][3] = 2) : (k.set((b + .25) * n, (c + .25) * n, p), q[0].set(-.25 * n, -.25 * n, m[b][c] - p), q[1].set(.75 * n, -.25 * n, m[b + 1][c] - p), q[2].set(-.25 * n, .75 * n, m[b][c + 1] - p), q[3].set(-.25 * n, -.25 * n, -p - 1), q[4].set(.75 * n, -.25 * n, -p - 1), q[5].set(-.25 * n, .75 * n, -p - 1), t[0][0] = 0, t[0][1] = 1, t[0][2] = 2, t[1][0] = 5, t[1][1] = 4, t[1][2] = 3, t[2][0] = 0, t[2][1] = 2, t[2][2] = 5, t[2][3] = 3, t[3][0] = 1, t[3][1] = 0, t[3][2] = 3, t[3][3] = 
      4, t[4][0] = 4, t[4][1] = 5, t[4][2] = 2, t[4][3] = 1);
      e.computeNormals();
      e.computeEdges();
      e.updateBoundingSphereRadius();
      this.setCachedConvexTrianglePillar(b, c, f, e, k);
    };
    b.prototype.calculateLocalInertia = function(b, c) {
      return c = c || new h, c.set(0, 0, 0), c;
    };
    b.prototype.volume = function() {
      return Number.MAX_VALUE;
    };
    b.prototype.calculateWorldAABB = function(b, c, d, e) {
      d.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);
      e.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);
    };
    b.prototype.updateBoundingSphereRadius = function() {
      var b = this.data, c = this.elementSize;
      this.boundingSphereRadius = (new h(b.length * c, b[0].length * c, Math.max(Math.abs(this.maxValue), Math.abs(this.minValue)))).norm();
    };
  }, {"../math/Vec3":30, "../utils/Utils":53, "./ConvexPolyhedron":38, "./Shape":43}], 41:[function(c, k) {
    function b() {
      f.call(this);
      this.type = f.types.PARTICLE;
    }
    k.exports = b;
    var f = c("./Shape"), d = c("../math/Vec3");
    b.prototype = new f;
    b.prototype.constructor = b;
    b.prototype.calculateLocalInertia = function(b, c) {
      return c = c || new d, c.set(0, 0, 0), c;
    };
    b.prototype.volume = function() {
      return 0;
    };
    b.prototype.updateBoundingSphereRadius = function() {
      this.boundingSphereRadius = 0;
    };
    b.prototype.calculateWorldAABB = function(b, c, d, f) {
      d.copy(b);
      f.copy(b);
    };
  }, {"../math/Vec3":30, "./Shape":43}], 42:[function(c, k) {
    function b() {
      f.call(this);
      this.type = f.types.PLANE;
      this.worldNormal = new d;
      this.worldNormalNeedsUpdate = !0;
      this.boundingSphereRadius = Number.MAX_VALUE;
    }
    k.exports = b;
    var f = c("./Shape"), d = c("../math/Vec3");
    b.prototype = new f;
    b.prototype.constructor = b;
    b.prototype.computeWorldNormal = function(b) {
      var c = this.worldNormal;
      c.set(0, 0, 1);
      b.vmult(c, c);
      this.worldNormalNeedsUpdate = !1;
    };
    b.prototype.calculateLocalInertia = function(b, c) {
      return c || new d;
    };
    b.prototype.volume = function() {
      return Number.MAX_VALUE;
    };
    var h = new d;
    b.prototype.calculateWorldAABB = function(b, c, d, f) {
      h.set(0, 0, 1);
      c.vmult(h, h);
      c = Number.MAX_VALUE;
      d.set(-c, -c, -c);
      f.set(c, c, c);
      1 === h.x && (f.x = b.x);
      1 === h.y && (f.y = b.y);
      1 === h.z && (f.z = b.z);
      -1 === h.x && (d.x = b.x);
      -1 === h.y && (d.y = b.y);
      -1 === h.z && (d.z = b.z);
    };
    b.prototype.updateBoundingSphereRadius = function() {
      this.boundingSphereRadius = Number.MAX_VALUE;
    };
  }, {"../math/Vec3":30, "./Shape":43}], 43:[function(c, k) {
    function b() {
      this.id = b.idCounter++;
      this.boundingSphereRadius = this.type = 0;
      this.collisionResponse = !0;
      this.material = null;
    }
    k.exports = b;
    b = c("./Shape");
    c("../math/Vec3");
    c("../math/Quaternion");
    c("../material/Material");
    b.prototype.constructor = b;
    b.prototype.updateBoundingSphereRadius = function() {
      throw "computeBoundingSphereRadius() not implemented for shape type " + this.type;
    };
    b.prototype.volume = function() {
      throw "volume() not implemented for shape type " + this.type;
    };
    b.prototype.calculateLocalInertia = function() {
      throw "calculateLocalInertia() not implemented for shape type " + this.type;
    };
    b.idCounter = 0;
    b.types = {SPHERE:1, PLANE:2, BOX:4, COMPOUND:8, CONVEXPOLYHEDRON:16, HEIGHTFIELD:32, PARTICLE:64, CYLINDER:128, TRIMESH:256};
  }, {"../material/Material":25, "../math/Quaternion":28, "../math/Vec3":30, "./Shape":43}], 44:[function(c, k) {
    function b(b) {
      if (f.call(this), this.radius = void 0 !== b ? Number(b) : 1, this.type = f.types.SPHERE, 0 > this.radius) {
        throw Error("The sphere radius cannot be negative.");
      }
      this.updateBoundingSphereRadius();
    }
    k.exports = b;
    var f = c("./Shape"), d = c("../math/Vec3");
    b.prototype = new f;
    b.prototype.constructor = b;
    b.prototype.calculateLocalInertia = function(b, c) {
      c = c || new d;
      b = 2 * b * this.radius * this.radius / 5;
      return c.x = b, c.y = b, c.z = b, c;
    };
    b.prototype.volume = function() {
      return 4 * Math.PI * this.radius / 3;
    };
    b.prototype.updateBoundingSphereRadius = function() {
      this.boundingSphereRadius = this.radius;
    };
    b.prototype.calculateWorldAABB = function(b, c, d, f) {
      c = this.radius;
      for (var h = ["x", "y", "z"], e = 0; e < h.length; e++) {
        var k = h[e];
        d[k] = b[k] - c;
        f[k] = b[k] + c;
      }
    };
  }, {"../math/Vec3":30, "./Shape":43}], 45:[function(c, k) {
    function b(b, c) {
      f.call(this);
      this.type = f.types.TRIMESH;
      this.vertices = new Float32Array(b);
      this.indices = new Int16Array(c);
      this.normals = new Float32Array(c.length);
      this.aabb = new n;
      this.edges = null;
      this.scale = new d(1, 1, 1);
      this.tree = new q;
      this.updateEdges();
      this.updateNormals();
      this.updateAABB();
      this.updateBoundingSphereRadius();
      this.updateTree();
    }
    k.exports = b;
    var f = c("./Shape"), d = c("../math/Vec3"), h = (c("../math/Quaternion"), c("../math/Transform")), n = c("../collision/AABB"), q = c("../utils/Octree");
    b.prototype = new f;
    b.prototype.constructor = b;
    var m = new d;
    b.prototype.updateTree = function() {
      var b = this.tree;
      b.reset();
      b.aabb.copy(this.aabb);
      var c = this.scale;
      b.aabb.lowerBound.x *= 1 / c.x;
      b.aabb.lowerBound.y *= 1 / c.y;
      b.aabb.lowerBound.z *= 1 / c.z;
      b.aabb.upperBound.x *= 1 / c.x;
      b.aabb.upperBound.y *= 1 / c.y;
      b.aabb.upperBound.z *= 1 / c.z;
      c = new n;
      for (var e = new d, f = new d, h = new d, k = [e, f, h], l = 0; l < this.indices.length / 3; l++) {
        var p = 3 * l;
        this._getUnscaledVertex(this.indices[p], e);
        this._getUnscaledVertex(this.indices[p + 1], f);
        this._getUnscaledVertex(this.indices[p + 2], h);
        c.setFromPoints(k);
        b.insert(c, l);
      }
      b.removeEmptyNodes();
    };
    var t = new n;
    b.prototype.getTrianglesInAABB = function(b, c) {
      t.copy(b);
      var e = this.scale;
      b = e.x;
      var d = e.y;
      e = e.z;
      var f = t.lowerBound, h = t.upperBound;
      return f.x /= b, f.y /= d, f.z /= e, h.x /= b, h.y /= d, h.z /= e, this.tree.aabbQuery(t, c);
    };
    b.prototype.setScale = function(b) {
      var c = b.x === b.y === b.z;
      this.scale.x === this.scale.y === this.scale.z && c || this.updateNormals();
      this.scale.copy(b);
      this.updateAABB();
      this.updateBoundingSphereRadius();
    };
    b.prototype.updateNormals = function() {
      for (var c = this.normals, e = 0; e < this.indices.length / 3; e++) {
        var d = 3 * e, f = this.indices[d + 1], h = this.indices[d + 2];
        this.getVertex(this.indices[d], y);
        this.getVertex(f, x);
        this.getVertex(h, p);
        b.computeNormal(x, y, p, m);
        c[d] = m.x;
        c[d + 1] = m.y;
        c[d + 2] = m.z;
      }
    };
    b.prototype.updateEdges = function() {
      for (var b = {}, c = function() {
        b[h > f ? f + "_" + h : h + "_" + f] = !0;
      }, e = 0; e < this.indices.length / 3; e++) {
        var d = 3 * e, f = this.indices[d], h = this.indices[d + 1];
        d = this.indices[d + 2];
        c(f, h);
        c(h, d);
        c(d, f);
      }
      c = Object.keys(b);
      this.edges = new Int16Array(2 * c.length);
      for (e = 0; e < c.length; e++) {
        d = c[e].split("_"), this.edges[2 * e] = parseInt(d[0], 10), this.edges[2 * e + 1] = parseInt(d[1], 10);
      }
    };
    b.prototype.getEdgeVertex = function(b, c, e) {
      this.getVertex(this.edges[2 * b + (c ? 1 : 0)], e);
    };
    var e = new d, l = new d;
    b.prototype.getEdgeVector = function(b, c) {
      this.getEdgeVertex(b, 0, e);
      this.getEdgeVertex(b, 1, l);
      l.vsub(e, c);
    };
    var u = new d, w = new d;
    b.computeNormal = function(b, c, e, d) {
      c.vsub(b, w);
      e.vsub(c, u);
      u.cross(w, d);
      d.isZero() || d.normalize();
    };
    var y = new d, x = new d, p = new d;
    b.prototype.getVertex = function(b, c) {
      var e = this.scale;
      return this._getUnscaledVertex(b, c), c.x *= e.x, c.y *= e.y, c.z *= e.z, c;
    };
    b.prototype._getUnscaledVertex = function(b, c) {
      b *= 3;
      var e = this.vertices;
      return c.set(e[b], e[b + 1], e[b + 2]);
    };
    b.prototype.getWorldVertex = function(b, c, e, d) {
      return this.getVertex(b, d), h.pointToWorldFrame(c, e, d, d), d;
    };
    b.prototype.getTriangleVertices = function(b, c, e, d) {
      b *= 3;
      this.getVertex(this.indices[b], c);
      this.getVertex(this.indices[b + 1], e);
      this.getVertex(this.indices[b + 2], d);
    };
    b.prototype.getNormal = function(b, c) {
      b *= 3;
      return c.set(this.normals[b], this.normals[b + 1], this.normals[b + 2]);
    };
    var v = new n;
    b.prototype.calculateLocalInertia = function(b, c) {
      this.computeLocalAABB(v);
      var e = v.upperBound.x - v.lowerBound.x, d = v.upperBound.y - v.lowerBound.y, f = v.upperBound.z - v.lowerBound.z;
      return c.set(1 / 12 * b * (4 * d * d + 4 * f * f), 1 / 12 * b * (4 * e * e + 4 * f * f), 1 / 12 * b * (4 * d * d + 4 * e * e));
    };
    var z = new d;
    b.prototype.computeLocalAABB = function(b) {
      var c = b.lowerBound;
      b = b.upperBound;
      var e = this.vertices.length, d = (this.vertices, z);
      this.getVertex(0, d);
      c.copy(d);
      b.copy(d);
      for (var f = 0; f !== e; f++) {
        this.getVertex(f, d), d.x < c.x ? c.x = d.x : d.x > b.x && (b.x = d.x), d.y < c.y ? c.y = d.y : d.y > b.y && (b.y = d.y), d.z < c.z ? c.z = d.z : d.z > b.z && (b.z = d.z);
      }
    };
    b.prototype.updateAABB = function() {
      this.computeLocalAABB(this.aabb);
    };
    b.prototype.updateBoundingSphereRadius = function() {
      var b = 0, c = this.vertices, e = new d, f = 0;
      for (c = c.length / 3; f !== c; f++) {
        this.getVertex(f, e);
        var h = e.norm2();
        h > b && (b = h);
      }
      this.boundingSphereRadius = Math.sqrt(b);
    };
    var C = (new d, new h), A = new n;
    b.prototype.calculateWorldAABB = function(b, c, e, d) {
      C.position = b;
      C.quaternion = c;
      this.aabb.toWorldFrame(C, A);
      e.copy(A.lowerBound);
      d.copy(A.upperBound);
    };
    b.prototype.volume = function() {
      return 4 * Math.PI * this.boundingSphereRadius / 3;
    };
    b.createTorus = function(c, e, d, f, h) {
      c = c || 1;
      e = e || .5;
      d = d || 8;
      f = f || 6;
      h = h || 2 * Math.PI;
      for (var k = [], l = [], p = 0; d >= p; p++) {
        for (var m = 0; f >= m; m++) {
          var n = m / f * h, t = p / d * Math.PI * 2;
          k.push((c + e * Math.cos(t)) * Math.cos(n), (c + e * Math.cos(t)) * Math.sin(n), e * Math.sin(t));
        }
      }
      for (p = 1; d >= p; p++) {
        for (m = 1; f >= m; m++) {
          c = (f + 1) * (p - 1) + m - 1, e = (f + 1) * (p - 1) + m, h = (f + 1) * p + m, l.push((f + 1) * p + m - 1, c, h), l.push(c, e, h);
        }
      }
      return new b(k, l);
    };
  }, {"../collision/AABB":3, "../math/Quaternion":28, "../math/Transform":29, "../math/Vec3":30, "../utils/Octree":50, "./Shape":43}], 46:[function(c, k) {
    function b() {
      f.call(this);
      this.iterations = 10;
      this.tolerance = 1E-7;
    }
    k.exports = b;
    var f = (c("../math/Vec3"), c("../math/Quaternion"), c("./Solver"));
    b.prototype = new f;
    var d = [], h = [], n = [];
    b.prototype.solve = function(b, c) {
      var f, e = 0, k = this.iterations, m = this.tolerance * this.tolerance, q = this.equations, y = q.length;
      c = c.bodies;
      var x = c.length;
      if (0 !== y) {
        for (f = 0; f !== x; f++) {
          c[f].updateSolveMassProperties();
        }
      }
      h.length = y;
      n.length = y;
      d.length = y;
      for (f = 0; f !== y; f++) {
        var p = q[f];
        d[f] = 0;
        n[f] = p.computeB(b);
        h[f] = 1 / p.computeC();
      }
      if (0 !== y) {
        for (f = 0; f !== x; f++) {
          p = c[f], e = p.wlambda, p.vlambda.set(0, 0, 0), e && e.set(0, 0, 0);
        }
        for (e = 0; e !== k; e++) {
          for (var v = f = 0; v !== y; v++) {
            p = q[v];
            var z = n[v];
            var C = h[v];
            b = d[v];
            var A = p.computeGWlambda();
            z = C * (z - A - p.eps * b);
            b + z < p.minForce ? z = p.minForce - b : b + z > p.maxForce && (z = p.maxForce - b);
            d[v] += z;
            f += 0 < z ? z : -z;
            p.addToWlambda(z);
          }
          if (m > f * f) {
            break;
          }
        }
        for (f = 0; f !== x; f++) {
          p = c[f], k = p.velocity, m = p.angularVelocity, k.vadd(p.vlambda, k), m && m.vadd(p.wlambda, m);
        }
      }
      return e;
    };
  }, {"../math/Quaternion":28, "../math/Vec3":30, "./Solver":47}], 47:[function(c, k) {
    function b() {
      this.equations = [];
    }
    k.exports = b;
    b.prototype.solve = function() {
      return 0;
    };
    b.prototype.addEquation = function(b) {
      b.enabled && this.equations.push(b);
    };
    b.prototype.removeEquation = function(b) {
      var c = this.equations;
      b = c.indexOf(b);
      -1 !== b && c.splice(b, 1);
    };
    b.prototype.removeAllEquations = function() {
      this.equations.length = 0;
    };
  }, {}], 48:[function(c, k) {
    function b(b) {
      n.call(this);
      this.iterations = 10;
      this.tolerance = 1E-7;
      this.subsolver = b;
      this.nodes = [];
      for (this.nodePool = []; 128 > this.nodePool.length;) {
        this.nodePool.push(this.createNode());
      }
    }
    function f(b) {
      for (var c = b.length, d = 0; d !== c; d++) {
        var f = b[d];
        if (!(f.visited || f.body.type & e)) {
          return f;
        }
      }
      return !1;
    }
    function d(b, c, e) {
      c.push(b.body);
      c = b.eqs.length;
      for (var d = 0; d !== c; d++) {
        var f = b.eqs[d];
        -1 === e.indexOf(f) && e.push(f);
      }
    }
    function h(b, c) {
      return c.id - b.id;
    }
    k.exports = b;
    var n = (c("../math/Vec3"), c("../math/Quaternion"), c("./Solver"));
    c = c("../objects/Body");
    b.prototype = new n;
    var q = [], m = [], t = {bodies:[]}, e = c.STATIC, l = [];
    b.prototype.createNode = function() {
      return {body:null, children:[], eqs:[], visited:!1};
    };
    b.prototype.solve = function(b, c) {
      var e = this.nodePool, k = c.bodies, p = this.equations, n = p.length, u = k.length;
      for (c = this.subsolver; e.length < u;) {
        e.push(this.createNode());
      }
      q.length = u;
      for (var w = 0; u > w; w++) {
        q[w] = e[w];
      }
      for (w = 0; w !== u; w++) {
        e = q[w], e.body = k[w], e.children.length = 0, e.eqs.length = 0, e.visited = !1;
      }
      for (e = 0; e !== n; e++) {
        u = p[e];
        w = k.indexOf(u.bi);
        var A = k.indexOf(u.bj);
        w = q[w];
        A = q[A];
        w.children.push(A);
        w.eqs.push(u);
        A.children.push(w);
        A.eqs.push(u);
      }
      k = 0;
      p = m;
      c.tolerance = this.tolerance;
      for (c.iterations = this.iterations; w = f(q);) {
        p.length = 0;
        t.bodies.length = 0;
        u = w;
        w = d;
        n = t.bodies;
        e = p;
        l.push(u);
        u.visited = !0;
        for (w(u, n, e); l.length;) {
          for (A = l.pop(); u = f(A.children);) {
            u.visited = !0, w(u, n, e), l.push(u);
          }
        }
        n = p.length;
        p = p.sort(h);
        for (w = 0; w !== n; w++) {
          c.addEquation(p[w]);
        }
        c.solve(b, t);
        c.removeAllEquations();
        k++;
      }
      return k;
    };
  }, {"../math/Quaternion":28, "../math/Vec3":30, "../objects/Body":31, "./Solver":47}], 49:[function(c, k) {
    c = function() {
    };
    k.exports = c;
    c.prototype = {constructor:c, addEventListener:function(b, c) {
      void 0 === this._listeners && (this._listeners = {});
      var d = this._listeners;
      return void 0 === d[b] && (d[b] = []), -1 === d[b].indexOf(c) && d[b].push(c), this;
    }, hasEventListener:function(b, c) {
      if (void 0 === this._listeners) {
        return !1;
      }
      var d = this._listeners;
      return void 0 !== d[b] && -1 !== d[b].indexOf(c) ? !0 : !1;
    }, removeEventListener:function(b, c) {
      if (void 0 === this._listeners) {
        return this;
      }
      var d = this._listeners;
      if (void 0 === d[b]) {
        return this;
      }
      c = d[b].indexOf(c);
      return -1 !== c && d[b].splice(c, 1), this;
    }, dispatchEvent:function(b) {
      if (void 0 === this._listeners) {
        return this;
      }
      var c = this._listeners[b.type];
      if (void 0 !== c) {
        b.target = this;
        for (var d = 0, h = c.length; h > d; d++) {
          c[d].call(this, b);
        }
      }
      return this;
    }};
  }, {}], 50:[function(c, k) {
    function b(b) {
      b = b || {};
      this.root = b.root || null;
      this.aabb = b.aabb ? b.aabb.clone() : new d;
      this.data = [];
      this.children = [];
    }
    function f(c, d) {
      d = d || {};
      d.root = null;
      d.aabb = c;
      b.call(this, d);
      this.maxDepth = "undefined" != typeof d.maxDepth ? d.maxDepth : 8;
    }
    var d = c("../collision/AABB"), h = c("../math/Vec3");
    k.exports = f;
    f.prototype = new b;
    b.prototype.reset = function() {
      this.children.length = this.data.length = 0;
    };
    b.prototype.insert = function(b, c, e) {
      var d = this.data;
      if (e = e || 0, !this.aabb.contains(b)) {
        return !1;
      }
      var f = this.children;
      if (e < (this.maxDepth || this.root.maxDepth)) {
        var h = !1;
        f.length || (this.subdivide(), h = !0);
        for (var k = 0; 8 !== k; k++) {
          if (f[k].insert(b, c, e + 1)) {
            return !0;
          }
        }
        h && (f.length = 0);
      }
      return d.push(c), !0;
    };
    var n = new h;
    b.prototype.subdivide = function() {
      var c = this.aabb, f = c.lowerBound, e = c.upperBound;
      c = this.children;
      c.push(new b({aabb:new d({lowerBound:new h(0, 0, 0)})}), new b({aabb:new d({lowerBound:new h(1, 0, 0)})}), new b({aabb:new d({lowerBound:new h(1, 1, 0)})}), new b({aabb:new d({lowerBound:new h(1, 1, 1)})}), new b({aabb:new d({lowerBound:new h(0, 1, 1)})}), new b({aabb:new d({lowerBound:new h(0, 0, 1)})}), new b({aabb:new d({lowerBound:new h(1, 0, 1)})}), new b({aabb:new d({lowerBound:new h(0, 1, 0)})}));
      e.vsub(f, n);
      n.scale(.5, n);
      e = this.root || this;
      for (var k = 0; 8 !== k; k++) {
        var q = c[k];
        q.root = e;
        var w = q.aabb.lowerBound;
        w.x *= n.x;
        w.y *= n.y;
        w.z *= n.z;
        w.vadd(f, w);
        w.vadd(n, q.aabb.upperBound);
      }
    };
    b.prototype.aabbQuery = function(b, c) {
      for (var e = (this.data, this.children, [this]); e.length;) {
        var d = e.pop();
        d.aabb.overlaps(b) && Array.prototype.push.apply(c, d.data);
        Array.prototype.push.apply(e, d.children);
      }
      return c;
    };
    var q = new d;
    b.prototype.rayQuery = function(b, c, e) {
      return b.getAABB(q), q.toLocalFrame(c, q), this.aabbQuery(q, e), e;
    };
    b.prototype.removeEmptyNodes = function() {
      for (var b = [this]; b.length;) {
        for (var c = b.pop(), e = c.children.length - 1; 0 <= e; e--) {
          c.children[e].data.length || c.children.splice(e, 1);
        }
        Array.prototype.push.apply(b, c.children);
      }
    };
  }, {"../collision/AABB":3, "../math/Vec3":30}], 51:[function(c, k) {
    function b() {
      this.objects = [];
      this.type = Object;
    }
    k.exports = b;
    b.prototype.release = function() {
      for (var b = arguments.length, c = 0; c !== b; c++) {
        this.objects.push(arguments[c]);
      }
    };
    b.prototype.get = function() {
      return 0 === this.objects.length ? this.constructObject() : this.objects.pop();
    };
    b.prototype.constructObject = function() {
      throw Error("constructObject() not implemented in this Pool subclass yet!");
    };
  }, {}], 52:[function(c, k) {
    function b() {
      this.data = {keys:[]};
    }
    k.exports = b;
    b.prototype.get = function(b, c) {
      if (b > c) {
        var d = c;
        c = b;
        b = d;
      }
      return this.data[b + "-" + c];
    };
    b.prototype.set = function(b, c, h) {
      if (b > c) {
        var d = c;
        c = b;
        b = d;
      }
      d = b + "-" + c;
      this.get(b, c) || this.data.keys.push(d);
      this.data[d] = h;
    };
    b.prototype.reset = function() {
      for (var b = this.data, c = b.keys; 0 < c.length;) {
        var h = c.pop();
        delete b[h];
      }
    };
  }, {}], 53:[function(c, k) {
    function b() {
    }
    k.exports = b;
    b.defaults = function(b, c) {
      b = b || {};
      for (var d in c) {
        d in b || (b[d] = c[d]);
      }
      return b;
    };
  }, {}], 54:[function(c, k) {
    function b() {
      d.call(this);
      this.type = f;
    }
    k.exports = b;
    var f = c("../math/Vec3"), d = c("./Pool");
    b.prototype = new d;
    b.prototype.constructObject = function() {
      return new f;
    };
  }, {"../math/Vec3":30, "./Pool":51}], 55:[function(c, k) {
    function b(b) {
      this.contactPointPool = [];
      this.frictionEquationPool = [];
      this.result = [];
      this.frictionResult = [];
      this.v3pool = new m;
      this.world = b;
      this.currentContactMaterial = null;
      this.enableFrictionReduction = !1;
    }
    k.exports = b;
    k = c("../collision/AABB");
    var f = c("../shapes/Shape"), d = c("../collision/Ray"), h = c("../math/Vec3"), n = c("../math/Transform"), q = (c("../shapes/ConvexPolyhedron"), c("../math/Quaternion")), m = (c("../solver/Solver"), c("../utils/Vec3Pool")), t = c("../equations/ContactEquation"), e = c("../equations/FrictionEquation");
    b.prototype.createContactEquation = function(b, c, e, d, f, h) {
      var k;
      this.contactPointPool.length ? (k = this.contactPointPool.pop(), k.bi = b, k.bj = c) : k = new t(b, c);
      k.enabled = b.collisionResponse && c.collisionResponse && e.collisionResponse && d.collisionResponse;
      var l = this.currentContactMaterial;
      k.restitution = l.restitution;
      k.setSpookParams(l.contactEquationStiffness, l.contactEquationRelaxation, this.world.dt);
      b = e.material || b.material;
      c = d.material || c.material;
      return b && c && 0 <= b.restitution && 0 <= c.restitution && (k.restitution = b.restitution * c.restitution), k.si = f || e, k.sj = h || d, k;
    };
    b.prototype.createFrictionEquationsFromContact = function(b, c) {
      var d = b.bi, f = b.bj, h = this.world, k = this.currentContactMaterial, l = k.friction, p = b.si.material || d.material, m = b.sj.material || f.material;
      if (p && m && 0 <= p.friction && 0 <= m.friction && (l = p.friction * m.friction), 0 < l) {
        l *= h.gravity.length();
        p = d.invMass + f.invMass;
        0 < p && (p = 1 / p);
        var n = this.frictionEquationPool;
        m = n.length ? n.pop() : new e(d, f, l * p);
        n = n.length ? n.pop() : new e(d, f, l * p);
        return m.bi = n.bi = d, m.bj = n.bj = f, m.minForce = n.minForce = -l * p, m.maxForce = n.maxForce = l * p, m.ri.copy(b.ri), m.rj.copy(b.rj), n.ri.copy(b.ri), n.rj.copy(b.rj), b.ni.tangents(m.t, n.t), m.setSpookParams(k.frictionEquationStiffness, k.frictionEquationRelaxation, h.dt), n.setSpookParams(k.frictionEquationStiffness, k.frictionEquationRelaxation, h.dt), m.enabled = n.enabled = b.enabled, c.push(m, n), !0;
      }
      return !1;
    };
    var l = new h, u = new h, w = new h;
    b.prototype.createFrictionFromAverage = function(b) {
      var c = this.result[this.result.length - 1];
      if (this.createFrictionEquationsFromContact(c, this.frictionResult) && 1 !== b) {
        var e = this.frictionResult[this.frictionResult.length - 2], d = this.frictionResult[this.frictionResult.length - 1];
        l.setZero();
        u.setZero();
        w.setZero();
        for (var f = c.bi, h = (c.bj, 0); h !== b; h++) {
          c = this.result[this.result.length - 1 - h], c.bodyA !== f ? (l.vadd(c.ni, l), u.vadd(c.ri, u), w.vadd(c.rj, w)) : (l.vsub(c.ni, l), u.vadd(c.rj, u), w.vadd(c.ri, w));
        }
        b = 1 / b;
        u.scale(b, e.ri);
        w.scale(b, e.rj);
        d.ri.copy(e.ri);
        d.rj.copy(e.rj);
        l.normalize();
        l.tangents(e.t, d.t);
      }
    };
    var y = new h, x = new h, p = new q, v = new q;
    b.prototype.getContacts = function(b, c, e, d, f, h, k) {
      this.contactPointPool = f;
      this.frictionEquationPool = k;
      this.result = d;
      this.frictionResult = h;
      d = 0;
      for (f = b.length; d !== f; d++) {
        h = b[d];
        k = c[d];
        var l = null;
        h.material && k.material && (l = e.getContactMaterial(h.material, k.material) || null);
        for (var m = 0; m < h.shapes.length; m++) {
          h.quaternion.mult(h.shapeOrientations[m], p);
          h.quaternion.vmult(h.shapeOffsets[m], y);
          y.vadd(h.position, y);
          for (var n = h.shapes[m], t = 0; t < k.shapes.length; t++) {
            k.quaternion.mult(k.shapeOrientations[t], v);
            k.quaternion.vmult(k.shapeOffsets[t], x);
            x.vadd(k.position, x);
            var q = k.shapes[t];
            if (!(y.distanceTo(x) > n.boundingSphereRadius + q.boundingSphereRadius)) {
              var u = null;
              n.material && q.material && (u = e.getContactMaterial(n.material, q.material) || null);
              this.currentContactMaterial = u || l || e.defaultContactMaterial;
              (u = this[n.type | q.type]) && (n.type < q.type ? u.call(this, n, q, y, x, p, v, h, k, n, q) : u.call(this, q, n, x, y, v, p, k, h, n, q));
            }
          }
        }
      }
    };
    b.prototype[f.types.BOX | f.types.BOX] = b.prototype.boxBox = function(b, c, e, d, f, h, k, l) {
      b.convexPolyhedronRepresentation.material = b.material;
      c.convexPolyhedronRepresentation.material = c.material;
      b.convexPolyhedronRepresentation.collisionResponse = b.collisionResponse;
      c.convexPolyhedronRepresentation.collisionResponse = c.collisionResponse;
      this.convexConvex(b.convexPolyhedronRepresentation, c.convexPolyhedronRepresentation, e, d, f, h, k, l, b, c);
    };
    b.prototype[f.types.BOX | f.types.CONVEXPOLYHEDRON] = b.prototype.boxConvex = function(b, c, e, d, f, h, k, l) {
      b.convexPolyhedronRepresentation.material = b.material;
      b.convexPolyhedronRepresentation.collisionResponse = b.collisionResponse;
      this.convexConvex(b.convexPolyhedronRepresentation, c, e, d, f, h, k, l, b, c);
    };
    b.prototype[f.types.BOX | f.types.PARTICLE] = b.prototype.boxParticle = function(b, c, e, d, f, h, k, l) {
      b.convexPolyhedronRepresentation.material = b.material;
      b.convexPolyhedronRepresentation.collisionResponse = b.collisionResponse;
      this.convexParticle(b.convexPolyhedronRepresentation, c, e, d, f, h, k, l, b, c);
    };
    b.prototype[f.types.SPHERE] = b.prototype.sphereSphere = function(b, c, e, d, f, h, k, l) {
      f = this.createContactEquation(k, l, b, c);
      d.vsub(e, f.ni);
      f.ni.normalize();
      f.ri.copy(f.ni);
      f.rj.copy(f.ni);
      f.ri.mult(b.radius, f.ri);
      f.rj.mult(-c.radius, f.rj);
      f.ri.vadd(e, f.ri);
      f.ri.vsub(k.position, f.ri);
      f.rj.vadd(d, f.rj);
      f.rj.vsub(l.position, f.rj);
      this.result.push(f);
      this.createFrictionEquationsFromContact(f, this.frictionResult);
    };
    var z = new h, C = new h, A = new h;
    b.prototype[f.types.PLANE | f.types.TRIMESH] = b.prototype.planeTrimesh = function(b, c, e, d, f, k, l, p) {
      var m = new h;
      z.set(0, 0, 1);
      f.vmult(z, z);
      for (f = 0; f < c.vertices.length / 3; f++) {
        c.getVertex(f, m);
        var t = new h;
        t.copy(m);
        n.pointToWorldFrame(d, k, t, m);
        t = C;
        m.vsub(e, t);
        if (0 >= z.dot(t)) {
          var v = this.createContactEquation(l, p, b, c);
          v.ni.copy(z);
          var q = A;
          z.scale(t.dot(z), q);
          m.vsub(q, q);
          v.ri.copy(q);
          v.ri.vsub(l.position, v.ri);
          v.rj.copy(m);
          v.rj.vsub(p.position, v.rj);
          this.result.push(v);
          this.createFrictionEquationsFromContact(v, this.frictionResult);
        }
      }
    };
    var D = new h, E = new h, B = (new h, new h), G = new h, H = new h, K = new h, I = new h, L = new h, R = new h, J = new h, Q = new h, aa = new h, V = new h, N = new k, S = [];
    b.prototype[f.types.SPHERE | f.types.TRIMESH] = b.prototype.sphereTrimesh = function(b, c, e, f, h, k, l, p) {
      n.pointToLocalFrame(f, k, e, R);
      h = b.radius;
      N.lowerBound.set(R.x - h, R.y - h, R.z - h);
      N.upperBound.set(R.x + h, R.y + h, R.z + h);
      c.getTrianglesInAABB(N, S);
      var m = b.radius * b.radius;
      for (h = 0; h < S.length; h++) {
        for (var t = 0; 3 > t; t++) {
          if (c.getVertex(c.indices[3 * S[h] + t], B), B.vsub(R, E), E.norm2() <= m) {
            G.copy(B);
            n.pointToWorldFrame(f, k, G, B);
            B.vsub(e, E);
            var v = this.createContactEquation(l, p, b, c);
            v.ni.copy(E);
            v.ni.normalize();
            v.ri.copy(v.ni);
            v.ri.scale(b.radius, v.ri);
            v.ri.vadd(e, v.ri);
            v.ri.vsub(l.position, v.ri);
            v.rj.copy(B);
            v.rj.vsub(p.position, v.rj);
            this.result.push(v);
            this.createFrictionEquationsFromContact(v, this.frictionResult);
          }
        }
      }
      for (h = 0; h < S.length; h++) {
        for (t = 0; 3 > t; t++) {
          c.getVertex(c.indices[3 * S[h] + t], H), c.getVertex(c.indices[3 * S[h] + (t + 1) % 3], K), K.vsub(H, I), R.vsub(K, J), e = J.dot(I), R.vsub(H, J), v = J.dot(I), 0 < v && 0 > e && (R.vsub(H, J), L.copy(I), L.normalize(), v = J.dot(L), L.scale(v, J), J.vadd(H, J), e = J.distanceTo(R), e < b.radius && (v = this.createContactEquation(l, p, b, c), J.vsub(R, v.ni), v.ni.normalize(), v.ni.scale(b.radius, v.ri), n.pointToWorldFrame(f, k, J, J), J.vsub(p.position, v.rj), n.vectorToWorldFrame(k, 
          v.ni, v.ni), n.vectorToWorldFrame(k, v.ri, v.ri), this.result.push(v), this.createFrictionEquationsFromContact(v, this.frictionResult)));
        }
      }
      h = 0;
      for (t = S.length; h !== t; h++) {
        if (c.getTriangleVertices(S[h], Q, aa, V), c.getNormal(S[h], D), R.vsub(Q, J), e = J.dot(D), D.scale(e, J), R.vsub(J, J), e = J.distanceTo(R), d.pointInTriangle(J, Q, aa, V) && e < b.radius) {
          v = this.createContactEquation(l, p, b, c), J.vsub(R, v.ni), v.ni.normalize(), v.ni.scale(b.radius, v.ri), n.pointToWorldFrame(f, k, J, J), J.vsub(p.position, v.rj), n.vectorToWorldFrame(k, v.ni, v.ni), n.vectorToWorldFrame(k, v.ri, v.ri), this.result.push(v), this.createFrictionEquationsFromContact(v, this.frictionResult);
        }
      }
      S.length = 0;
    };
    var W = new h, M = new h;
    b.prototype[f.types.SPHERE | f.types.PLANE] = b.prototype.spherePlane = function(b, c, e, d, f, h, k, l) {
      c = this.createContactEquation(k, l, b, c);
      if (c.ni.set(0, 0, 1), h.vmult(c.ni, c.ni), c.ni.negate(c.ni), c.ni.normalize(), c.ni.mult(b.radius, c.ri), e.vsub(d, W), c.ni.mult(c.ni.dot(W), M), W.vsub(M, c.rj), -W.dot(c.ni) <= b.radius) {
        b = c.ri, h = c.rj, b.vadd(e, b), b.vsub(k.position, b), h.vadd(d, h), h.vsub(l.position, h), this.result.push(c), this.createFrictionEquationsFromContact(c, this.frictionResult);
      }
    };
    var O = new h, P = new h, ka = new h, ha = new h, ja = new h, X = new h, fa = new h, ba = [new h, new h, new h, new h, new h, new h], la = new h, ma = new h, ca = new h, Ta = new h;
    b.prototype[f.types.SPHERE | f.types.BOX] = b.prototype.sphereBox = function(b, c, e, d, f, h, k, l) {
      f = this.v3pool;
      e.vsub(d, ha);
      c.getSideNormals(ba, h);
      h = b.radius;
      for (var p = !1, m = null, n = 0, v = 0, t = 0, q = null, u = 0, z = ba.length; u !== z && !1 === p; u++) {
        var w = ja;
        w.copy(ba[u]);
        var y = w.norm();
        w.normalize();
        var x = ha.dot(w);
        if (y + h > x && 0 < x) {
          var C = X, A = fa;
          C.copy(ba[(u + 1) % 3]);
          A.copy(ba[(u + 2) % 3]);
          var B = C.norm(), D = A.norm();
          C.normalize();
          A.normalize();
          var E = ha.dot(C), M = ha.dot(A);
          B > E && E > -B && D > M && M > -D && (x = Math.abs(x - y - h), (null === q || q > x) && (q = x, v = E, t = M, m = y, ma.copy(w), ca.copy(C), Ta.copy(A), n++));
        }
      }
      n && (p = !0, n = this.createContactEquation(k, l, b, c), ma.mult(-h, n.ri), n.ni.copy(ma), n.ni.negate(n.ni), ma.mult(m, ma), ca.mult(v, ca), ma.vadd(ca, ma), Ta.mult(t, Ta), ma.vadd(Ta, n.rj), n.ri.vadd(e, n.ri), n.ri.vsub(k.position, n.ri), n.rj.vadd(d, n.rj), n.rj.vsub(l.position, n.rj), this.result.push(n), this.createFrictionEquationsFromContact(n, this.frictionResult));
      x = f.get();
      for (m = 0; 2 !== m && !p; m++) {
        for (v = 0; 2 !== v && !p; v++) {
          for (t = 0; 2 !== t && !p; t++) {
            if (x.set(0, 0, 0), m ? x.vadd(ba[0], x) : x.vsub(ba[0], x), v ? x.vadd(ba[1], x) : x.vsub(ba[1], x), t ? x.vadd(ba[2], x) : x.vsub(ba[2], x), d.vadd(x, la), la.vsub(e, la), la.norm2() < h * h) {
              p = !0, n = this.createContactEquation(k, l, b, c), n.ri.copy(la), n.ri.normalize(), n.ni.copy(n.ri), n.ri.mult(h, n.ri), n.rj.copy(x), n.ri.vadd(e, n.ri), n.ri.vsub(k.position, n.ri), n.rj.vadd(d, n.rj), n.rj.vsub(l.position, n.rj), this.result.push(n), this.createFrictionEquationsFromContact(n, this.frictionResult);
            }
          }
        }
      }
      f.release(x);
      q = f.get();
      u = f.get();
      n = f.get();
      z = f.get();
      x = f.get();
      w = ba.length;
      for (m = 0; m !== w && !p; m++) {
        for (v = 0; v !== w && !p; v++) {
          if (m % 3 !== v % 3) {
            ba[v].cross(ba[m], q);
            q.normalize();
            ba[m].vadd(ba[v], u);
            n.copy(e);
            n.vsub(u, n);
            n.vsub(d, n);
            y = n.dot(q);
            q.mult(y, z);
            for (t = 0; t === m % 3 || t === v % 3;) {
              t++;
            }
            x.copy(e);
            x.vsub(z, x);
            x.vsub(u, x);
            x.vsub(d, x);
            y = Math.abs(y);
            C = x.norm();
            y < ba[t].norm() && h > C && (p = !0, t = this.createContactEquation(k, l, b, c), u.vadd(z, t.rj), t.rj.copy(t.rj), x.negate(t.ni), t.ni.normalize(), t.ri.copy(t.rj), t.ri.vadd(d, t.ri), t.ri.vsub(e, t.ri), t.ri.normalize(), t.ri.mult(h, t.ri), t.ri.vadd(e, t.ri), t.ri.vsub(k.position, t.ri), t.rj.vadd(d, t.rj), t.rj.vsub(l.position, t.rj), this.result.push(t), this.createFrictionEquationsFromContact(t, this.frictionResult));
          }
        }
      }
      f.release(q, u, n, z, x);
    };
    var nb = new h, ob = new h, pb = new h, qb = new h, ne = new h, oe = new h, pe = new h, qe = new h, re = new h, se = new h;
    b.prototype[f.types.SPHERE | f.types.CONVEXPOLYHEDRON] = b.prototype.sphereConvex = function(b, c, e, d, f, h, k, l) {
      f = this.v3pool;
      e.vsub(d, nb);
      for (var p = c.faceNormals, m = c.faces, n = c.vertices, t = b.radius, v = 0; v !== n.length; v++) {
        var q = ne;
        h.vmult(n[v], q);
        d.vadd(q, q);
        var u = qb;
        if (q.vsub(e, u), u.norm2() < t * t) {
          return b = this.createContactEquation(k, l, b, c), b.ri.copy(u), b.ri.normalize(), b.ni.copy(b.ri), b.ri.mult(t, b.ri), q.vsub(d, b.rj), b.ri.vadd(e, b.ri), b.ri.vsub(k.position, b.ri), b.rj.vadd(d, b.rj), b.rj.vsub(l.position, b.rj), this.result.push(b), void this.createFrictionEquationsFromContact(b, this.frictionResult);
        }
      }
      v = 0;
      for (q = m.length; v !== q; v++) {
        u = m[v];
        var z = oe;
        h.vmult(p[v], z);
        var w = pe;
        h.vmult(n[u[0]], w);
        w.vadd(d, w);
        var y = qe;
        z.mult(-t, y);
        e.vadd(y, y);
        var x = re;
        y.vsub(w, x);
        y = x.dot(z);
        x = se;
        if (e.vsub(w, x), 0 > y && 0 < x.dot(z)) {
          w = [];
          x = 0;
          for (var C = u.length; x !== C; x++) {
            var A = f.get();
            h.vmult(n[u[x]], A);
            d.vadd(A, A);
            w.push(A);
          }
          a: {
            x = w;
            C = z;
            A = e;
            for (var B = null, D = x.length, E = 0; E !== D; E++) {
              var M = x[E], G = O;
              x[(E + 1) % D].vsub(M, G);
              var H = P;
              G.cross(C, H);
              G = ka;
              A.vsub(M, G);
              M = H.dot(G);
              if (!(null === B || 0 < M && !0 === B || 0 >= M && !1 === B)) {
                x = !1;
                break a;
              }
              null === B && (B = 0 < M);
            }
            x = !0;
          }
          if (x) {
            b = this.createContactEquation(k, l, b, c);
            z.mult(-t, b.ri);
            z.negate(b.ni);
            c = f.get();
            z.mult(-y, c);
            h = f.get();
            z.mult(-t, h);
            e.vsub(d, b.rj);
            b.rj.vadd(h, b.rj);
            b.rj.vadd(c, b.rj);
            b.rj.vadd(d, b.rj);
            b.rj.vsub(l.position, b.rj);
            b.ri.vadd(e, b.ri);
            b.ri.vsub(k.position, b.ri);
            f.release(c);
            f.release(h);
            this.result.push(b);
            this.createFrictionEquationsFromContact(b, this.frictionResult);
            x = 0;
            for (u = w.length; x !== u; x++) {
              f.release(w[x]);
            }
            break;
          }
          for (x = 0; x !== u.length; x++) {
            z = f.get();
            y = f.get();
            h.vmult(n[u[(x + 1) % u.length]], z);
            h.vmult(n[u[(x + 2) % u.length]], y);
            d.vadd(z, z);
            d.vadd(y, y);
            D = ob;
            y.vsub(z, D);
            B = pb;
            D.unit(B);
            C = f.get();
            A = f.get();
            e.vsub(z, A);
            E = A.dot(B);
            B.mult(E, C);
            C.vadd(z, C);
            B = f.get();
            if (C.vsub(e, B), 0 < E && E * E < D.norm2() && B.norm2() < t * t) {
              b = this.createContactEquation(k, l, b, c);
              C.vsub(d, b.rj);
              C.vsub(e, b.ni);
              b.ni.normalize();
              b.ni.mult(t, b.ri);
              b.rj.vadd(d, b.rj);
              b.rj.vsub(l.position, b.rj);
              b.ri.vadd(e, b.ri);
              b.ri.vsub(k.position, b.ri);
              this.result.push(b);
              this.createFrictionEquationsFromContact(b, this.frictionResult);
              x = 0;
              for (u = w.length; x !== u; x++) {
                f.release(w[x]);
              }
              return f.release(z), f.release(y), f.release(C), f.release(B), void f.release(A);
            }
            f.release(z);
            f.release(y);
            f.release(C);
            f.release(B);
            f.release(A);
          }
          x = 0;
          for (u = w.length; x !== u; x++) {
            f.release(w[x]);
          }
        }
      }
    };
    new h;
    new h;
    b.prototype[f.types.PLANE | f.types.BOX] = b.prototype.planeBox = function(b, c, e, d, f, h, k, l) {
      c.convexPolyhedronRepresentation.material = c.material;
      c.convexPolyhedronRepresentation.collisionResponse = c.collisionResponse;
      this.planeConvex(b, c.convexPolyhedronRepresentation, e, d, f, h, k, l);
    };
    var ya = new h, Ja = new h, fb = new h, Ab = new h;
    b.prototype[f.types.PLANE | f.types.CONVEXPOLYHEDRON] = b.prototype.planeConvex = function(b, c, e, d, f, h, k, l) {
      Ja.set(0, 0, 1);
      f.vmult(Ja, Ja);
      for (var p = f = 0; p !== c.vertices.length; p++) {
        if (ya.copy(c.vertices[p]), h.vmult(ya, ya), d.vadd(ya, ya), ya.vsub(e, fb), 0 >= Ja.dot(fb)) {
          var m = this.createContactEquation(k, l, b, c), n = Ab;
          Ja.mult(Ja.dot(fb), n);
          ya.vsub(n, n);
          n.vsub(e, m.ri);
          m.ni.copy(Ja);
          ya.vsub(d, m.rj);
          m.ri.vadd(e, m.ri);
          m.ri.vsub(k.position, m.ri);
          m.rj.vadd(d, m.rj);
          m.rj.vsub(l.position, m.rj);
          this.result.push(m);
          f++;
          this.enableFrictionReduction || this.createFrictionEquationsFromContact(m, this.frictionResult);
        }
      }
      this.enableFrictionReduction && f && this.createFrictionFromAverage(f);
    };
    var oa = new h, ua = new h;
    b.prototype[f.types.CONVEXPOLYHEDRON] = b.prototype.convexConvex = function(b, c, e, d, f, h, k, l, p, m, n, t) {
      if (!(e.distanceTo(d) > b.boundingSphereRadius + c.boundingSphereRadius) && b.findSeparatingAxis(c, e, f, d, h, oa, n, t)) {
        n = [];
        b.clipAgainstHull(e, f, c, d, h, oa, -100, 100, n);
        for (h = f = 0; h !== n.length; h++) {
          t = this.createContactEquation(k, l, b, c, p, m);
          var v = t.ri, q = t.rj;
          oa.negate(t.ni);
          n[h].normal.negate(ua);
          ua.mult(n[h].depth, ua);
          n[h].point.vadd(ua, v);
          q.copy(n[h].point);
          v.vsub(e, v);
          q.vsub(d, q);
          v.vadd(e, v);
          v.vsub(k.position, v);
          q.vadd(d, q);
          q.vsub(l.position, q);
          this.result.push(t);
          f++;
          this.enableFrictionReduction || this.createFrictionEquationsFromContact(t, this.frictionResult);
        }
        this.enableFrictionReduction && f && this.createFrictionFromAverage(f);
      }
    };
    var gb = new h, Jd = new h, hc = new h;
    b.prototype[f.types.PLANE | f.types.PARTICLE] = b.prototype.planeParticle = function(b, c, e, d, f, h, k, l) {
      gb.set(0, 0, 1);
      k.quaternion.vmult(gb, gb);
      d.vsub(k.position, Jd);
      0 >= gb.dot(Jd) && (b = this.createContactEquation(l, k, c, b), b.ni.copy(gb), b.ni.negate(b.ni), b.ri.set(0, 0, 0), gb.mult(gb.dot(d), hc), d.vsub(hc, hc), b.rj.copy(hc), this.result.push(b), this.createFrictionEquationsFromContact(b, this.frictionResult));
    };
    var Bb = new h;
    b.prototype[f.types.PARTICLE | f.types.SPHERE] = b.prototype.sphereParticle = function(b, c, e, d, f, h, k, l) {
      Bb.set(0, 0, 1);
      d.vsub(e, Bb);
      Bb.norm2() <= b.radius * b.radius && (c = this.createContactEquation(l, k, c, b), Bb.normalize(), c.rj.copy(Bb), c.rj.mult(b.radius, c.rj), c.ni.copy(Bb), c.ni.negate(c.ni), c.ri.set(0, 0, 0), this.result.push(c), this.createFrictionEquationsFromContact(c, this.frictionResult));
    };
    var Kd = new q, Cb = new h, Nc = (new h, new h), Ld = new h, Db = new h;
    b.prototype[f.types.PARTICLE | f.types.CONVEXPOLYHEDRON] = b.prototype.convexParticle = function(b, c, e, d, f, h, k, l) {
      var p = -1;
      h = null;
      var m = 0;
      if (Cb.copy(d), Cb.vsub(e, Cb), f.conjugate(Kd), Kd.vmult(Cb, Cb), b.pointIsInside(Cb)) {
        b.worldVerticesNeedsUpdate && b.computeWorldVertices(e, f);
        b.worldFaceNormalsNeedsUpdate && b.computeWorldFaceNormals(f);
        f = 0;
        for (var n = b.faces.length; f !== n; f++) {
          var t = b.worldFaceNormals[f];
          d.vsub(b.worldVertices[b.faces[f][0]], Ld);
          var v = -t.dot(Ld);
          (null === h || Math.abs(v) < Math.abs(h)) && (h = v, p = f, Nc.copy(t), m++);
        }
        -1 !== p ? (b = this.createContactEquation(l, k, c, b), Nc.mult(h, Db), Db.vadd(d, Db), Db.vsub(e, Db), b.rj.copy(Db), Nc.negate(b.ni), b.ri.set(0, 0, 0), c = b.ri, h = b.rj, c.vadd(d, c), c.vsub(l.position, c), h.vadd(e, h), h.vsub(k.position, h), this.result.push(b), this.createFrictionEquationsFromContact(b, this.frictionResult)) : console.warn("Point found inside convex, but did not find penetrating face!");
      }
    };
    b.prototype[f.types.BOX | f.types.HEIGHTFIELD] = b.prototype.boxHeightfield = function(b, c, e, d, f, h, k, l) {
      b.convexPolyhedronRepresentation.material = b.material;
      b.convexPolyhedronRepresentation.collisionResponse = b.collisionResponse;
      this.convexHeightfield(b.convexPolyhedronRepresentation, c, e, d, f, h, k, l);
    };
    var rb = new h, Eb = new h, Md = [0];
    b.prototype[f.types.CONVEXPOLYHEDRON | f.types.HEIGHTFIELD] = b.prototype.convexHeightfield = function(b, c, e, d, f, h, k, l) {
      var p = c.data, m = c.elementSize, t = b.boundingSphereRadius;
      n.pointToLocalFrame(d, h, e, rb);
      var v = Math.floor((rb.x - t) / m) - 1, q = Math.ceil((rb.x + t) / m) + 1, u = Math.floor((rb.y - t) / m) - 1;
      m = Math.ceil((rb.y + t) / m) + 1;
      if (!(0 > q || 0 > m || v > p.length || u > p[0].length)) {
        0 > v && (v = 0);
        0 > q && (q = 0);
        0 > u && (u = 0);
        0 > m && (m = 0);
        v >= p.length && (v = p.length - 1);
        q >= p.length && (q = p.length - 1);
        m >= p[0].length && (m = p[0].length - 1);
        u >= p[0].length && (u = p[0].length - 1);
        p = [];
        c.getRectMinMax(v, u, q, m, p);
        var z = p[0];
        if (!(rb.z - t > p[1] || rb.z + t < z)) {
          for (t = v; q > t; t++) {
            for (v = u; m > v; v++) {
              c.getConvexTrianglePillar(t, v, !1), n.pointToWorldFrame(d, h, c.pillarOffset, Eb), e.distanceTo(Eb) < c.pillarConvex.boundingSphereRadius + b.boundingSphereRadius && this.convexConvex(b, c.pillarConvex, e, Eb, f, h, k, l, null, null, Md, null), c.getConvexTrianglePillar(t, v, !0), n.pointToWorldFrame(d, h, c.pillarOffset, Eb), e.distanceTo(Eb) < c.pillarConvex.boundingSphereRadius + b.boundingSphereRadius && this.convexConvex(b, c.pillarConvex, e, Eb, f, h, k, l, null, null, Md, null);
            }
          }
        }
      }
    };
    var sb = new h, tb = new h;
    b.prototype[f.types.SPHERE | f.types.HEIGHTFIELD] = b.prototype.sphereHeightfield = function(b, c, e, d, f, h, k, l) {
      var p = c.data, m = b.radius, t = c.elementSize;
      n.pointToLocalFrame(d, h, e, sb);
      var v = Math.floor((sb.x - m) / t) - 1, q = Math.ceil((sb.x + m) / t) + 1, u = Math.floor((sb.y - m) / t) - 1;
      t = Math.ceil((sb.y + m) / t) + 1;
      if (!(0 > q || 0 > t || v > p.length || t > p[0].length)) {
        0 > v && (v = 0);
        0 > q && (q = 0);
        0 > u && (u = 0);
        0 > t && (t = 0);
        v >= p.length && (v = p.length - 1);
        q >= p.length && (q = p.length - 1);
        t >= p[0].length && (t = p[0].length - 1);
        u >= p[0].length && (u = p[0].length - 1);
        p = [];
        c.getRectMinMax(v, u, q, t, p);
        var z = p[0];
        if (!(sb.z - m > p[1] || sb.z + m < z)) {
          for (m = this.result; q > v; v++) {
            for (p = u; t > p; p++) {
              if (z = m.length, c.getConvexTrianglePillar(v, p, !1), n.pointToWorldFrame(d, h, c.pillarOffset, tb), e.distanceTo(tb) < c.pillarConvex.boundingSphereRadius + b.boundingSphereRadius && this.sphereConvex(b, c.pillarConvex, e, tb, f, h, k, l), c.getConvexTrianglePillar(v, p, !0), n.pointToWorldFrame(d, h, c.pillarOffset, tb), e.distanceTo(tb) < c.pillarConvex.boundingSphereRadius + b.boundingSphereRadius && this.sphereConvex(b, c.pillarConvex, e, tb, f, h, k, l), 2 < m.length - z) {
                return;
              }
            }
          }
        }
      }
    };
  }, {"../collision/AABB":3, "../collision/Ray":9, "../equations/ContactEquation":19, "../equations/FrictionEquation":21, "../math/Quaternion":28, "../math/Transform":29, "../math/Vec3":30, "../shapes/ConvexPolyhedron":38, "../shapes/Shape":43, "../solver/Solver":47, "../utils/Vec3Pool":54}], 56:[function(c, k) {
    function b() {
      q.apply(this);
      this.dt = -1;
      this.allowSleep = !1;
      this.contacts = [];
      this.frictionEquations = [];
      this.quatNormalizeSkip = 0;
      this.quatNormalizeFast = !1;
      this.stepnumber = this.time = 0;
      this.default_dt = 1 / 60;
      this.nextId = 0;
      this.gravity = new d;
      this.broadphase = new p;
      this.bodies = [];
      this.solver = new h;
      this.constraints = [];
      this.narrowphase = new n(this);
      this.collisionMatrix = new m;
      this.collisionMatrixPrevious = new m;
      this.materials = [];
      this.contactmaterials = [];
      this.contactMaterialTable = new u;
      this.defaultMaterial = new t("default");
      this.defaultContactMaterial = new e(this.defaultMaterial, this.defaultMaterial, {friction:.3, restitution:0});
      this.doProfiling = !1;
      this.profile = {solve:0, makeContactConstraints:0, broadphase:0, integrate:0, narrowphase:0};
      this.subsystems = [];
      this.addBodyEvent = {type:"addBody", body:null};
      this.removeBodyEvent = {type:"removeBody", body:null};
    }
    k.exports = b;
    var f = c("../shapes/Shape"), d = c("../math/Vec3");
    k = c("../math/Quaternion");
    var h = c("../solver/GSSolver"), n = (c("../utils/Vec3Pool"), c("../equations/ContactEquation"), c("../equations/FrictionEquation"), c("./Narrowphase")), q = c("../utils/EventTarget"), m = c("../collision/ArrayCollisionMatrix"), t = c("../material/Material"), e = c("../material/ContactMaterial"), l = c("../objects/Body"), u = c("../utils/TupleDictionary"), w = c("../collision/RaycastResult"), y = c("../collision/AABB"), x = c("../collision/Ray"), p = c("../collision/NaiveBroadphase");
    b.prototype = new q;
    var v = (new y, new x);
    if (b.prototype.getContactMaterial = function(b, c) {
      return this.contactMaterialTable.get(b.id, c.id);
    }, b.prototype.numObjects = function() {
      return this.bodies.length;
    }, b.prototype.collisionMatrixTick = function() {
      var b = this.collisionMatrixPrevious;
      this.collisionMatrixPrevious = this.collisionMatrix;
      this.collisionMatrix = b;
      this.collisionMatrix.reset();
    }, b.prototype.add = b.prototype.addBody = function(b) {
      -1 === this.bodies.indexOf(b) && (b.index = this.bodies.length, this.bodies.push(b), b.world = this, b.initPosition.copy(b.position), b.initVelocity.copy(b.velocity), b.timeLastSleepy = this.time, b instanceof l && (b.initAngularVelocity.copy(b.angularVelocity), b.initQuaternion.copy(b.quaternion)), this.collisionMatrix.setNumObjects(this.bodies.length), this.addBodyEvent.body = b, this.dispatchEvent(this.addBodyEvent));
    }, b.prototype.addConstraint = function(b) {
      this.constraints.push(b);
    }, b.prototype.removeConstraint = function(b) {
      b = this.constraints.indexOf(b);
      -1 !== b && this.constraints.splice(b, 1);
    }, b.prototype.rayTest = function(b, c, e) {
      e instanceof w ? this.raycastClosest(b, c, {skipBackfaces:!0}, e) : this.raycastAll(b, c, {skipBackfaces:!0}, e);
    }, b.prototype.raycastAll = function(b, c, e, d) {
      return e.mode = x.ALL, e.from = b, e.to = c, e.callback = d, v.intersectWorld(this, e);
    }, b.prototype.raycastAny = function(b, c, e, d) {
      return e.mode = x.ANY, e.from = b, e.to = c, e.result = d, v.intersectWorld(this, e);
    }, b.prototype.raycastClosest = function(b, c, e, d) {
      return e.mode = x.CLOSEST, e.from = b, e.to = c, e.result = d, v.intersectWorld(this, e);
    }, b.prototype.remove = function(b) {
      b.world = null;
      var c = this.bodies.length - 1, e = this.bodies, d = e.indexOf(b);
      if (-1 !== d) {
        e.splice(d, 1);
        for (d = 0; d !== e.length; d++) {
          e[d].index = d;
        }
        this.collisionMatrix.setNumObjects(c);
        this.removeBodyEvent.body = b;
        this.dispatchEvent(this.removeBodyEvent);
      }
    }, b.prototype.removeBody = b.prototype.remove, b.prototype.addMaterial = function(b) {
      this.materials.push(b);
    }, b.prototype.addContactMaterial = function(b) {
      this.contactmaterials.push(b);
      this.contactMaterialTable.set(b.materials[0].id, b.materials[1].id, b);
    }, "undefined" == typeof performance && (performance = {}), !performance.now) {
      var z = Date.now();
      performance.timing && performance.timing.navigationStart && (z = performance.timing.navigationStart);
      performance.now = function() {
        return Date.now() - z;
      };
    }
    var C = new d;
    b.prototype.step = function(b, c, e) {
      if (e = e || 10, c = c || 0, 0 === c) {
        this.internalStep(b), this.time += b;
      } else {
        var d = Math.floor((this.time + c) / b) - Math.floor(this.time / b);
        d = Math.min(d, e);
        e = performance.now();
        for (var f = 0; f !== d && (this.internalStep(b), !(performance.now() - e > 1E3 * b)); f++) {
        }
        this.time += c;
        b = this.time % b / b;
        c = this.bodies;
        for (d = 0; d !== c.length; d++) {
          e = c[d], e.type !== l.STATIC && e.sleepState !== l.SLEEPING ? (e.position.vsub(e.previousPosition, C), C.scale(b, C), e.position.vadd(C, e.interpolatedPosition)) : (e.interpolatedPosition.copy(e.position), e.interpolatedQuaternion.copy(e.quaternion));
        }
      }
    };
    var A = {type:"postStep"}, D = {type:"preStep"}, E = {type:"collide", body:null, contact:null}, B = [], G = [], H = [], K = [], I = (new d, new d, new d, new d, new d, new d, new d, new d, new d, new k, new k), L = new k, R = new d;
    b.prototype.internalStep = function(b) {
      this.dt = b;
      var c, e = this.contacts, d = this.numObjects(), h = this.bodies, k = this.solver, p = this.gravity, m = this.doProfiling, n = this.profile, t = l.DYNAMIC, v = this.constraints, q = (p.norm(), p.x), u = p.y, z = p.z;
      m && (c = performance.now());
      for (p = 0; p !== d; p++) {
        var w = h[p];
        if (w.type & t) {
          var y = w.force;
          w = w.mass;
          y.x += w * q;
          y.y += w * u;
          y.z += w * z;
        }
      }
      p = 0;
      for (w = this.subsystems.length; p !== w; p++) {
        this.subsystems[p].update();
      }
      m && (c = performance.now());
      H.length = 0;
      K.length = 0;
      this.broadphase.collisionPairs(this, H, K);
      m && (n.broadphase = performance.now() - c);
      w = v.length;
      for (p = 0; p !== w; p++) {
        if (q = v[p], !q.collideConnected) {
          for (u = H.length - 1; 0 <= u; --u) {
            (q.bodyA === H[u] && q.bodyB === K[u] || q.bodyB === H[u] && q.bodyA === K[u]) && (H.splice(u, 1), K.splice(u, 1));
          }
        }
      }
      this.collisionMatrixTick();
      m && (c = performance.now());
      w = e.length;
      for (p = 0; p !== w; p++) {
        B.push(e[p]);
      }
      e.length = 0;
      w = this.frictionEquations.length;
      for (p = 0; p !== w; p++) {
        G.push(this.frictionEquations[p]);
      }
      this.frictionEquations.length = 0;
      this.narrowphase.getContacts(H, K, this, e, B, this.frictionEquations, G);
      m && (n.narrowphase = performance.now() - c);
      m && (c = performance.now());
      for (p = 0; p < this.frictionEquations.length; p++) {
        k.addEquation(this.frictionEquations[p]);
      }
      p = e.length;
      for (u = 0; u !== p; u++) {
        q = e[u], w = q.bi, z = q.bj, q.si, q.sj, w.material && z.material && this.getContactMaterial(w.material, z.material), (w.material && z.material && 0 <= w.material.restitution && 0 <= z.material.restitution && (q.restitution = w.material.restitution * z.material.restitution), k.addEquation(q), w.allowSleep && w.type === l.DYNAMIC && w.sleepState === l.SLEEPING && z.sleepState === l.AWAKE && z.type !== l.STATIC) && z.velocity.norm2() + z.angularVelocity.norm2() >= 2 * Math.pow(z.sleepSpeedLimit, 
        2) && (w._wakeUpAfterNarrowphase = !0), z.allowSleep && z.type === l.DYNAMIC && z.sleepState === l.SLEEPING && w.sleepState === l.AWAKE && w.type !== l.STATIC && w.velocity.norm2() + w.angularVelocity.norm2() >= 2 * Math.pow(w.sleepSpeedLimit, 2) && (z._wakeUpAfterNarrowphase = !0), this.collisionMatrix.set(w, z, !0), this.collisionMatrixPrevious.get(w, z) || (E.body = z, E.contact = q, w.dispatchEvent(E), E.body = w, z.dispatchEvent(E));
      }
      m && (n.makeContactConstraints = performance.now() - c, c = performance.now());
      for (p = 0; p !== d; p++) {
        w = h[p], w._wakeUpAfterNarrowphase && (w.wakeUp(), w._wakeUpAfterNarrowphase = !1);
      }
      w = v.length;
      for (p = 0; p !== w; p++) {
        for (q = v[p], q.update(), u = 0, e = q.equations.length; u !== e; u++) {
          k.addEquation(q.equations[u]);
        }
      }
      k.solve(b, this);
      m && (n.solve = performance.now() - c);
      k.removeAllEquations();
      k = Math.pow;
      for (p = 0; p !== d; p++) {
        if (w = h[p], w.type & t && (v = k(1 - w.linearDamping, b), e = w.velocity, e.mult(v, e), v = w.angularVelocity)) {
          e = k(1 - w.angularDamping, b), v.mult(e, v);
        }
      }
      this.dispatchEvent(D);
      for (p = 0; p !== d; p++) {
        w = h[p], w.preStep && w.preStep.call(w);
      }
      m && (c = performance.now());
      t = l.DYNAMIC | l.KINEMATIC;
      k = 0 === this.stepnumber % (this.quatNormalizeSkip + 1);
      v = this.quatNormalizeFast;
      e = .5 * b;
      f.types.PLANE;
      f.types.CONVEXPOLYHEDRON;
      for (p = 0; p !== d; p++) {
        if (w = h[p], q = w.force, u = w.torque, w.type & t && w.sleepState !== l.SLEEPING) {
          z = w.velocity;
          y = w.angularVelocity;
          var x = w.position, C = w.quaternion, J = w.invMass, Ta = w.invInertiaWorld;
          z.x += q.x * J * b;
          z.y += q.y * J * b;
          z.z += q.z * J * b;
          w.angularVelocity && (Ta.vmult(u, R), R.mult(b, R), R.vadd(y, y));
          x.x += z.x * b;
          x.y += z.y * b;
          x.z += z.z * b;
          w.angularVelocity && (I.set(y.x, y.y, y.z, 0), I.mult(C, L), C.x += e * L.x, C.y += e * L.y, C.z += e * L.z, C.w += e * L.w, k && (v ? C.normalizeFast() : C.normalize()));
          w.aabb && (w.aabbNeedsUpdate = !0);
          w.updateInertiaWorld && w.updateInertiaWorld();
        }
      }
      this.clearForces();
      this.broadphase.dirty = !0;
      m && (n.integrate = performance.now() - c);
      this.time += b;
      this.stepnumber += 1;
      this.dispatchEvent(A);
      for (p = 0; p !== d; p++) {
        w = h[p], (b = w.postStep) && b.call(w);
      }
      if (this.allowSleep) {
        for (p = 0; p !== d; p++) {
          h[p].sleepTick(this.time);
        }
      }
    };
    b.prototype.clearForces = function() {
      for (var b = this.bodies, c = b.length, e = 0; e !== c; e++) {
        var d = b[e];
        d.force;
        d.torque;
        d.force.set(0, 0, 0);
        d.torque.set(0, 0, 0);
      }
    };
  }, {"../collision/AABB":3, "../collision/ArrayCollisionMatrix":4, "../collision/NaiveBroadphase":7, "../collision/Ray":9, "../collision/RaycastResult":10, "../equations/ContactEquation":19, "../equations/FrictionEquation":21, "../material/ContactMaterial":24, "../material/Material":25, "../math/Quaternion":28, "../math/Vec3":30, "../objects/Body":31, "../shapes/Shape":43, "../solver/GSSolver":46, "../utils/EventTarget":49, "../utils/TupleDictionary":52, "../utils/Vec3Pool":54, "./Narrowphase":55}]}, 
  {}, [2])(2);
});
!function(a, c, k) {
  function b(d, k) {
    if (!c[d]) {
      if (!a[d]) {
        var h = "function" == typeof require && require;
        if (!k && h) {
          return h(d, !0);
        }
        if (f) {
          return f(d, !0);
        }
        throw Error("Cannot find module '" + d + "'");
      }
      k = c[d] = {exports:{}};
      a[d][0].call(k.exports, function(c) {
        var f = a[d][1][c];
        return b(f ? f : c);
      }, k, k.exports);
    }
    return c[d].exports;
  }
  for (var f = "function" == typeof require && require, d = 0; d < k.length; d++) {
    b(k[d]);
  }
  return b;
}({1:[function(a, c) {
  var k = (a("./pointable"), a("gl-matrix")), b = k.vec3, f = k.mat3, d = k.mat4;
  a = (a("underscore"), c.exports = function(a, c) {
    this.finger = a;
    this._matrix = this._center = null;
    this.type = c.type;
    this.prevJoint = c.prevJoint;
    this.nextJoint = c.nextJoint;
    this.width = c.width;
    a = Array(3);
    b.sub(a, c.nextJoint, c.prevJoint);
    this.length = b.length(a);
    this.basis = c.basis;
  });
  a.prototype.left = function() {
    return this._left ? this._left : (this._left = 0 > f.determinant(this.basis[0].concat(this.basis[1]).concat(this.basis[2])), this._left);
  };
  a.prototype.matrix = function() {
    if (this._matrix) {
      return this._matrix;
    }
    var a = this.basis, b = this._matrix = d.create();
    return b[0] = a[0][0], b[1] = a[0][1], b[2] = a[0][2], b[4] = a[1][0], b[5] = a[1][1], b[6] = a[1][2], b[8] = a[2][0], b[9] = a[2][1], b[10] = a[2][2], b[3] = this.center()[0], b[7] = this.center()[1], b[11] = this.center()[2], this.left() && (b[0] *= -1, b[1] *= -1, b[2] *= -1), this._matrix;
  };
  a.prototype.lerp = function(a, c) {
    b.lerp(a, this.prevJoint, this.nextJoint, c);
  };
  a.prototype.center = function() {
    if (this._center) {
      return this._center;
    }
    var a = b.create();
    return this.lerp(a, .5), this._center = a, a;
  };
  a.prototype.direction = function() {
    return [-1 * this.basis[2][0], -1 * this.basis[2][1], -1 * this.basis[2][2]];
  };
}, {"./pointable":14, "gl-matrix":23, underscore:24}], 2:[function(a, c) {
  a = c.exports = function(a) {
    this.pos = 0;
    this._buf = [];
    this.size = a;
  };
  a.prototype.get = function(a) {
    return void 0 == a && (a = 0), a >= this.size ? void 0 : a >= this._buf.length ? void 0 : this._buf[(this.pos - a - 1) % this.size];
  };
  a.prototype.push = function(a) {
    return this._buf[this.pos % this.size] = a, this.pos++;
  };
}, {}], 3:[function(a, c) {
  var k = a("../protocol").chooseProtocol, b = a("events").EventEmitter, f = a("underscore"), d = c.exports = function(a) {
    this.opts = f.defaults(a || {}, {host:"127.0.0.1", enableGestures:!1, scheme:this.getScheme(), port:this.getPort(), background:!1, optimizeHMD:!1, requestProtocolVersion:d.defaultProtocolVersion});
    this.host = this.opts.host;
    this.port = this.opts.port;
    this.scheme = this.opts.scheme;
    this.protocolVersionVerified = !1;
    this.optimizeHMD = this.background = null;
    this.on("ready", function() {
      this.enableGestures(this.opts.enableGestures);
      this.setBackground(this.opts.background);
      this.setOptimizeHMD(this.opts.optimizeHMD);
      console.log(this.opts.optimizeHMD ? "Optimized for head mounted display usage." : "Optimized for desktop usage.");
    });
  };
  d.defaultProtocolVersion = 6;
  d.prototype.getUrl = function() {
    return this.scheme + "//" + this.host + ":" + this.port + "/v" + this.opts.requestProtocolVersion + ".json";
  };
  d.prototype.getScheme = function() {
    return "ws:";
  };
  d.prototype.getPort = function() {
    return 6437;
  };
  d.prototype.setBackground = function(a) {
    this.opts.background = a;
    this.protocol && this.protocol.sendBackground && this.background !== this.opts.background && (this.background = this.opts.background, this.protocol.sendBackground(this, this.opts.background));
  };
  d.prototype.setOptimizeHMD = function(a) {
    this.opts.optimizeHMD = a;
    this.protocol && this.protocol.sendOptimizeHMD && this.optimizeHMD !== this.opts.optimizeHMD && (this.optimizeHMD = this.opts.optimizeHMD, this.protocol.sendOptimizeHMD(this, this.opts.optimizeHMD));
  };
  d.prototype.handleOpen = function() {
    this.connected || (this.connected = !0, this.emit("connect"));
  };
  d.prototype.enableGestures = function(a) {
    this.gesturesEnabled = a ? !0 : !1;
    this.send(this.protocol.encode({enableGestures:this.gesturesEnabled}));
  };
  d.prototype.handleClose = function(a) {
    this.connected && (this.disconnect(), 1001 === a && 1 < this.opts.requestProtocolVersion && (this.protocolVersionVerified ? this.protocolVersionVerified = !1 : this.opts.requestProtocolVersion--), this.startReconnection());
  };
  d.prototype.startReconnection = function() {
    var a = this;
    this.reconnectionTimer || (this.reconnectionTimer = setInterval(function() {
      a.reconnect();
    }, 500));
  };
  d.prototype.stopReconnection = function() {
    this.reconnectionTimer = clearInterval(this.reconnectionTimer);
  };
  d.prototype.disconnect = function(a) {
    return a || this.stopReconnection(), this.socket ? (this.socket.close(), delete this.socket, delete this.protocol, delete this.background, delete this.optimizeHMD, delete this.focusedState, this.connected && (this.connected = !1, this.emit("disconnect")), !0) : void 0;
  };
  d.prototype.reconnect = function() {
    this.connected ? this.stopReconnection() : (this.disconnect(!0), this.connect());
  };
  d.prototype.handleData = function(a) {
    var b;
    a = JSON.parse(a);
    void 0 === this.protocol ? (b = this.protocol = k(a), this.protocolVersionVerified = !0, this.emit("ready")) : b = this.protocol(a);
    this.emit(b.type, b);
  };
  d.prototype.connect = function() {
    return this.socket ? void 0 : (this.socket = this.setupSocket(), !0);
  };
  d.prototype.send = function(a) {
    this.socket.send(a);
  };
  d.prototype.reportFocus = function(a) {
    this.connected && this.focusedState !== a && (this.focusedState = a, this.emit(this.focusedState ? "focus" : "blur"), this.protocol && this.protocol.sendFocused && this.protocol.sendFocused(this, this.focusedState));
  };
  f.extend(d.prototype, b.prototype);
}, {"../protocol":15, events:21, underscore:24}], 4:[function(a, c) {
  var k = c.exports = a("./base");
  a = a("underscore");
  c = c.exports = function(a) {
    k.call(this, a);
    var b = this;
    this.on("ready", function() {
      b.startFocusLoop();
    });
    this.on("disconnect", function() {
      b.stopFocusLoop();
    });
  };
  a.extend(c.prototype, k.prototype);
  c.__proto__ = k;
  c.prototype.useSecure = function() {
    return "https:" === location.protocol;
  };
  c.prototype.getScheme = function() {
    return this.useSecure() ? "wss:" : "ws:";
  };
  c.prototype.getPort = function() {
    return this.useSecure() ? 6436 : 6437;
  };
  c.prototype.setupSocket = function() {
    var a = this, c = new WebSocket(this.getUrl());
    return c.onopen = function() {
      a.handleOpen();
    }, c.onclose = function(b) {
      a.handleClose(b.code, b.reason);
    }, c.onmessage = function(b) {
      a.handleData(b.data);
    }, c.onerror = function() {
      a.useSecure() && "wss:" === a.scheme && (a.scheme = "ws:", a.port = 6437, a.disconnect(), a.connect());
    }, c;
  };
  c.prototype.startFocusLoop = function() {
    if (!this.focusDetectorTimer) {
      var a = this, c = null;
      c = "undefined" != typeof document.hidden ? "hidden" : "undefined" != typeof document.mozHidden ? "mozHidden" : "undefined" != typeof document.msHidden ? "msHidden" : "undefined" != typeof document.webkitHidden ? "webkitHidden" : void 0;
      void 0 === a.windowVisible && (a.windowVisible = void 0 === c ? !0 : !1 === document[c]);
      var d = window.addEventListener("focus", function() {
        a.windowVisible = !0;
        k();
      }), h = window.addEventListener("blur", function() {
        a.windowVisible = !1;
        k();
      });
      this.on("disconnect", function() {
        window.removeEventListener("focus", d);
        window.removeEventListener("blur", h);
      });
      var k = function() {
        a.reportFocus((void 0 === c ? !0 : !1 === document[c]) && a.windowVisible);
      };
      k();
      this.focusDetectorTimer = setInterval(k, 100);
    }
  };
  c.prototype.stopFocusLoop = function() {
    this.focusDetectorTimer && (clearTimeout(this.focusDetectorTimer), delete this.focusDetectorTimer);
  };
}, {"./base":3, underscore:24}], 5:[function(a, c) {
  var k = a("__browserify_process"), b = a("./frame"), f = a("./hand"), d = a("./pointable"), h = a("./finger"), n = a("./circular_buffer"), q = a("./pipeline"), m = a("events").EventEmitter, t = a("./gesture").gestureListener, e = a("./dialog"), l = a("underscore"), u = c.exports = function(c) {
    var e = this;
    c = l.defaults(c || {}, {inNode:"undefined" != typeof k && k.versions && k.versions.node});
    this.inNode = c.inNode;
    c = l.defaults(c || {}, {frameEventName:this.useAnimationLoop() ? "animationFrame" : "deviceFrame", suppressAnimationLoop:!this.useAnimationLoop(), loopWhileDisconnected:!0, useAllPlugins:!1, checkVersion:!0});
    this.animationFrameRequested = !1;
    this.onAnimationFrame = function(a) {
      e.lastConnectionFrame.valid && e.emit("animationFrame", e.lastConnectionFrame);
      e.emit("frameEnd", a);
      e.loopWhileDisconnected && (!1 !== e.connection.focusedState || e.connection.opts.background) ? window.requestAnimationFrame(e.onAnimationFrame) : e.animationFrameRequested = !1;
    };
    this.suppressAnimationLoop = c.suppressAnimationLoop;
    this.loopWhileDisconnected = c.loopWhileDisconnected;
    this.frameEventName = c.frameEventName;
    this.useAllPlugins = c.useAllPlugins;
    this.history = new n(200);
    this.lastConnectionFrame = this.lastValidFrame = this.lastFrame = b.Invalid;
    this.accumulatedGestures = [];
    this.checkVersion = c.checkVersion;
    this.connectionType = void 0 === c.connectionType ? a(this.inBrowser() ? "./connection/browser" : "./connection/node") : c.connectionType;
    this.connection = new this.connectionType(c);
    this.streamingCount = 0;
    this.devices = {};
    this.plugins = {};
    this._pluginPipelineSteps = {};
    this._pluginExtendedMethods = {};
    c.useAllPlugins && this.useRegisteredPlugins();
    this.setupFrameEvents(c);
    this.setupConnectionEvents();
    this.startAnimationLoop();
  };
  u.prototype.gesture = function(a, b) {
    a = t(this, a);
    return void 0 !== b && a.stop(b), a;
  };
  u.prototype.setBackground = function(a) {
    return this.connection.setBackground(a), this;
  };
  u.prototype.setOptimizeHMD = function(a) {
    return this.connection.setOptimizeHMD(a), this;
  };
  u.prototype.inBrowser = function() {
    return !this.inNode;
  };
  u.prototype.useAnimationLoop = function() {
    return this.inBrowser() && !this.inBackgroundPage();
  };
  u.prototype.inBackgroundPage = function() {
    return "undefined" != typeof chrome && chrome.extension && chrome.extension.getBackgroundPage && chrome.extension.getBackgroundPage() === window;
  };
  u.prototype.connect = function() {
    return this.connection.connect(), this;
  };
  u.prototype.streaming = function() {
    return 0 < this.streamingCount;
  };
  u.prototype.connected = function() {
    return !!this.connection.connected;
  };
  u.prototype.startAnimationLoop = function() {
    this.suppressAnimationLoop || this.animationFrameRequested || (this.animationFrameRequested = !0, window.requestAnimationFrame(this.onAnimationFrame));
  };
  u.prototype.disconnect = function() {
    return this.connection.disconnect(), this;
  };
  u.prototype.frame = function(a) {
    return this.history.get(a) || b.Invalid;
  };
  u.prototype.loop = function(a) {
    return a && ("function" == typeof a ? this.on(this.frameEventName, a) : this.setupFrameEvents(a)), this.connect();
  };
  u.prototype.addStep = function(a) {
    this.pipeline || (this.pipeline = new q(this));
    this.pipeline.addStep(a);
  };
  u.prototype.processFrame = function(a) {
    a.gestures && (this.accumulatedGestures = this.accumulatedGestures.concat(a.gestures));
    this.lastConnectionFrame = a;
    this.startAnimationLoop();
    this.emit("deviceFrame", a);
  };
  u.prototype.processFinishedFrame = function(a) {
    if (this.lastFrame = a, a.valid && (this.lastValidFrame = a), a.controller = this, a.historyIdx = this.history.push(a), a.gestures) {
      a.gestures = this.accumulatedGestures;
      this.accumulatedGestures = [];
      for (var c = 0; c != a.gestures.length; c++) {
        this.emit("gesture", a.gestures[c], a);
      }
    }
    this.pipeline && (a = this.pipeline.run(a), a || (a = b.Invalid));
    this.emit("frame", a);
    this.emitHandEvents(a);
  };
  u.prototype.emitHandEvents = function(a) {
    for (var b = 0; b < a.hands.length; b++) {
      this.emit("hand", a.hands[b]);
    }
  };
  u.prototype.setupFrameEvents = function(a) {
    a.frame && this.on("frame", a.frame);
    a.hand && this.on("hand", a.hand);
  };
  u.prototype.setupConnectionEvents = function() {
    var a = this;
    this.connection.on("frame", function(b) {
      a.processFrame(b);
    });
    this.on(this.frameEventName, function(b) {
      a.processFinishedFrame(b);
    });
    var b = function() {
      if (5 > a.connection.opts.requestProtocolVersion && 0 == a.streamingCount) {
        a.streamingCount = 1;
        var c = {attached:!0, streaming:!0, type:"unknown", id:"Lx00000000000"};
        a.devices[c.id] = c;
        a.emit("deviceAttached", c);
        a.emit("deviceStreaming", c);
        a.emit("streamingStarted", c);
        a.connection.removeListener("frame", b);
      }
    }, c = function() {
      if (0 < a.streamingCount) {
        for (var b in a.devices) {
          a.emit("deviceStopped", a.devices[b]), a.emit("deviceRemoved", a.devices[b]);
        }
        a.emit("streamingStopped", a.devices[b]);
        a.streamingCount = 0;
        for (b in a.devices) {
          delete a.devices[b];
        }
      }
    };
    this.connection.on("focus", function() {
      a.loopWhileDisconnected && a.startAnimationLoop();
      a.emit("focus");
    });
    this.connection.on("blur", function() {
      a.emit("blur");
    });
    this.connection.on("protocol", function(b) {
      b.on("beforeFrameCreated", function(b) {
        a.emit("beforeFrameCreated", b);
      });
      b.on("afterFrameCreated", function(b, c) {
        a.emit("afterFrameCreated", b, c);
      });
      a.emit("protocol", b);
    });
    this.connection.on("ready", function() {
      a.checkVersion && !a.inNode && a.checkOutOfDate();
      a.emit("ready");
    });
    this.connection.on("connect", function() {
      a.emit("connect");
      a.connection.removeListener("frame", b);
      a.connection.on("frame", b);
    });
    this.connection.on("disconnect", function() {
      a.emit("disconnect");
      c();
    });
    this.connection.on("deviceConnect", function(e) {
      e.state ? (a.emit("deviceConnected"), a.connection.removeListener("frame", b), a.connection.on("frame", b)) : (a.emit("deviceDisconnected"), c());
    });
    this.connection.on("deviceEvent", function(b) {
      b = b.state;
      var c = a.devices[b.id], e = {}, d;
      for (d in b) {
        c && c.hasOwnProperty(d) && c[d] == b[d] || (e[d] = !0);
      }
      a.devices[b.id] = b;
      e.attached && a.emit(b.attached ? "deviceAttached" : "deviceRemoved", b);
      e.streaming && (b.streaming ? (a.streamingCount++, a.emit("deviceStreaming", b), 1 == a.streamingCount && a.emit("streamingStarted", b), e.attached || a.emit("deviceConnected")) : e.attached && b.attached || (a.streamingCount--, a.emit("deviceStopped", b), 0 == a.streamingCount && a.emit("streamingStopped", b), a.emit("deviceDisconnected")));
    });
    this.on("newListener", function(a) {
      "deviceConnected" != a && "deviceDisconnected" != a || console.warn(a + " events are depricated.  Consider using 'streamingStarted/streamingStopped' or 'deviceStreaming/deviceStopped' instead");
    });
  };
  u.prototype.checkOutOfDate = function() {
    console.assert(this.connection && this.connection.protocol);
    var a = this.connection.protocol.serviceVersion, b = this.connection.protocol.version, c = this.connectionType.defaultProtocolVersion;
    return c > b ? (console.warn("Your Protocol Version is v" + b + ", this app was designed for v" + c), e.warnOutOfDate({sV:a, pV:b}), !0) : !1;
  };
  u._pluginFactories = {};
  u.plugin = function(a, b) {
    return this._pluginFactories[a] && console.warn('Plugin "' + a + '" already registered'), this._pluginFactories[a] = b;
  };
  u.plugins = function() {
    return l.keys(this._pluginFactories);
  };
  u.prototype.use = function(a, c) {
    var e, k;
    if (e = "function" == typeof a ? a : u._pluginFactories[a], !e) {
      throw "Leap Plugin " + a + " not found.";
    }
    if (c || (c = {}), this.plugins[a]) {
      return l.extend(this.plugins[a], c), this;
    }
    this.plugins[a] = c;
    c = e.call(this, c);
    for (k in c) {
      if (e = c[k], "function" == typeof e) {
        var m = a, n = k;
        -1 != ["beforeFrameCreated", "afterFrameCreated"].indexOf(n) ? this.on(n, e) : (this.pipeline || (this.pipeline = new q(this)), this._pluginPipelineSteps[m] || (this._pluginPipelineSteps[m] = []), this._pluginPipelineSteps[m].push(this.pipeline.addWrappedStep(n, e)));
      } else {
        m = a;
        n = k;
        switch(this._pluginExtendedMethods[m] || (this._pluginExtendedMethods[m] = []), n) {
          case "frame":
            n = b;
            break;
          case "hand":
            n = f;
            break;
          case "pointable":
            n = d;
            l.extend(h.prototype, e);
            l.extend(h.Invalid, e);
            break;
          case "finger":
            n = h;
            break;
          default:
            throw m + ' specifies invalid object type "' + n + '" for prototypical extension';
        }
        l.extend(n.prototype, e);
        l.extend(n.Invalid, e);
        this._pluginExtendedMethods[m].push([n, e]);
      }
    }
    return this;
  };
  u.prototype.stopUsing = function(a) {
    var b = this._pluginPipelineSteps[a];
    var c = this._pluginExtendedMethods[a], e;
    if (this.plugins[a]) {
      if (b) {
        for (e = 0; e < b.length; e++) {
          this.pipeline.removeStep(b[e]);
        }
      }
      if (c) {
        for (e = 0; e < c.length; e++) {
          b = c[e][0];
          var d = c[e][1];
          for (var f in d) {
            delete b.prototype[f], delete b.Invalid[f];
          }
        }
      }
      return delete this.plugins[a], this;
    }
  };
  u.prototype.useRegisteredPlugins = function() {
    for (var a in u._pluginFactories) {
      this.use(a);
    }
  };
  l.extend(u.prototype, m.prototype);
}, {"./circular_buffer":2, "./connection/browser":4, "./connection/node":20, "./dialog":6, "./finger":7, "./frame":8, "./gesture":9, "./hand":10, "./pipeline":13, "./pointable":14, __browserify_process:22, events:21, underscore:24}], 6:[function(a, c) {
  var k = a("__browserify_process"), b = c.exports = function(a, b) {
    this.options = b || {};
    this.message = a;
    this.createElement();
  };
  b.prototype.createElement = function() {
    this.element = document.createElement("div");
    this.element.className = "leapjs-dialog";
    this.element.style.position = "fixed";
    this.element.style.top = "8px";
    this.element.style.left = 0;
    this.element.style.right = 0;
    this.element.style.textAlign = "center";
    this.element.style.zIndex = 1E3;
    var a = document.createElement("div");
    this.element.appendChild(a);
    a.style.className = "leapjs-dialog";
    a.style.display = "inline-block";
    a.style.margin = "auto";
    a.style.padding = "8px";
    a.style.color = "#222";
    a.style.background = "#eee";
    a.style.borderRadius = "4px";
    a.style.border = "1px solid #999";
    a.style.textAlign = "left";
    a.style.cursor = "pointer";
    a.style.whiteSpace = "nowrap";
    a.style.transition = "box-shadow 1s linear";
    a.innerHTML = this.message;
    this.options.onclick && a.addEventListener("click", this.options.onclick);
    this.options.onmouseover && a.addEventListener("mouseover", this.options.onmouseover);
    this.options.onmouseout && a.addEventListener("mouseout", this.options.onmouseout);
    this.options.onmousemove && a.addEventListener("mousemove", this.options.onmousemove);
  };
  b.prototype.show = function() {
    return document.body.appendChild(this.element), this;
  };
  b.prototype.hide = function() {
    return document.body.removeChild(this.element), this;
  };
  b.warnOutOfDate = function(a) {
    a || (a = {});
    var c = "http://developer.leapmotion.com?";
    a.returnTo = window.location.href;
    for (var f in a) {
      c += f + "=" + encodeURIComponent(a[f]) + "&";
    }
    var k;
    return k = new b("This site requires Leap Motion Tracking V2.<button id='leapjs-accept-upgrade'  style='color: #444; transition: box-shadow 100ms linear; cursor: pointer; vertical-align: baseline; margin-left: 16px;'>Upgrade</button><button id='leapjs-decline-upgrade' style='color: #444; transition: box-shadow 100ms linear; cursor: pointer; vertical-align: baseline; margin-left: 8px; '>Not Now</button>", {onclick:function(a) {
      "leapjs-decline-upgrade" != a.target.id && (a = window.open(c, "_blank", "height=800,width=1000,location=1,menubar=1,resizable=1,status=1,toolbar=1,scrollbars=1"), window.focus && a.focus());
      return k.hide(), !0;
    }, onmousemove:function(a) {
      a.target == document.getElementById("leapjs-decline-upgrade") ? (document.getElementById("leapjs-decline-upgrade").style.color = "#000", document.getElementById("leapjs-decline-upgrade").style.boxShadow = "0px 0px 2px #5daa00", document.getElementById("leapjs-accept-upgrade").style.color = "#444", document.getElementById("leapjs-accept-upgrade").style.boxShadow = "none") : (document.getElementById("leapjs-accept-upgrade").style.color = "#000", document.getElementById("leapjs-accept-upgrade").style.boxShadow = 
      "0px 0px 2px #5daa00", document.getElementById("leapjs-decline-upgrade").style.color = "#444", document.getElementById("leapjs-decline-upgrade").style.boxShadow = "none");
    }, onmouseout:function() {
      document.getElementById("leapjs-decline-upgrade").style.color = "#444";
      document.getElementById("leapjs-decline-upgrade").style.boxShadow = "none";
      document.getElementById("leapjs-accept-upgrade").style.color = "#444";
      document.getElementById("leapjs-accept-upgrade").style.boxShadow = "none";
    }}), k.show();
  };
  b.hasWarnedBones = !1;
  b.warnBones = function() {
    this.hasWarnedBones || (this.hasWarnedBones = !0, console.warn("Your Leap Service is out of date"), "undefined" != typeof k && k.versions && k.versions.node || this.warnOutOfDate({reason:"bones"}));
  };
}, {__browserify_process:22}], 7:[function(a, c) {
  var k = a("./pointable"), b = a("./bone"), f = a("./dialog");
  a = a("underscore");
  c = c.exports = function(a) {
    k.call(this, a);
    this.dipPosition = a.dipPosition;
    this.pipPosition = a.pipPosition;
    this.mcpPosition = a.mcpPosition;
    this.carpPosition = a.carpPosition;
    this.extended = a.extended;
    this.type = a.type;
    this.finger = !0;
    this.positions = [this.carpPosition, this.mcpPosition, this.pipPosition, this.dipPosition, this.tipPosition];
    a.bases ? this.addBones(a) : f.warnBones();
  };
  a.extend(c.prototype, k.prototype);
  c.prototype.addBones = function(a) {
    this.metacarpal = new b(this, {type:0, width:this.width, prevJoint:this.carpPosition, nextJoint:this.mcpPosition, basis:a.bases[0]});
    this.proximal = new b(this, {type:1, width:this.width, prevJoint:this.mcpPosition, nextJoint:this.pipPosition, basis:a.bases[1]});
    this.medial = new b(this, {type:2, width:this.width, prevJoint:this.pipPosition, nextJoint:this.dipPosition, basis:a.bases[2]});
    this.distal = new b(this, {type:3, width:this.width, prevJoint:this.dipPosition, nextJoint:a.btipPosition, basis:a.bases[3]});
    this.bones = [this.metacarpal, this.proximal, this.medial, this.distal];
  };
  c.prototype.toString = function() {
    return "Finger [ id:" + this.id + " " + this.length + "mmx | width:" + this.width + "mm | direction:" + this.direction + " ]";
  };
  c.Invalid = {valid:!1};
}, {"./bone":1, "./dialog":6, "./pointable":14, underscore:24}], 8:[function(a, c) {
  var k = a("./hand"), b = a("./pointable"), f = a("./gesture").createGesture, d = a("gl-matrix"), h = d.mat3, n = d.vec3, q = a("./interaction_box"), m = a("./finger"), t = a("underscore");
  a = c.exports = function(a) {
    if (this.valid = !0, this.id = a.id, this.timestamp = a.timestamp, this.hands = [], this.handsMap = {}, this.pointables = [], this.tools = [], this.fingers = [], a.interactionBox && (this.interactionBox = new q(a.interactionBox)), this.gestures = [], this.pointablesMap = {}, this._translation = a.t, this._rotation = t.flatten(a.r), this._scaleFactor = a.s, this.data = a, this.type = "frame", this.currentFrameRate = a.currentFrameRate, a.gestures) {
      for (var b = 0, c = a.gestures.length; b != c; b++) {
        this.gestures.push(f(a.gestures[b]));
      }
    }
    this.postprocessData(a);
  };
  a.prototype.postprocessData = function(a) {
    a || (a = this.data);
    for (var c = 0, e = a.hands.length; c != e; c++) {
      var d = new k(a.hands[c]);
      d.frame = this;
      this.hands.push(d);
      this.handsMap[d.id] = d;
    }
    a.pointables = t.sortBy(a.pointables, function(a) {
      return a.id;
    });
    c = 0;
    for (e = a.pointables.length; c != e; c++) {
      d = a.pointables[c], d = d.dipPosition ? new m(d) : new b(d), d.frame = this, this.addPointable(d);
    }
  };
  a.prototype.addPointable = function(a) {
    if (this.pointables.push(a), this.pointablesMap[a.id] = a, (a.tool ? this.tools : this.fingers).push(a), void 0 !== a.handId && this.handsMap.hasOwnProperty(a.handId)) {
      var b = this.handsMap[a.handId];
      switch(b.pointables.push(a), (a.tool ? b.tools : b.fingers).push(a), a.type) {
        case 0:
          b.thumb = a;
          break;
        case 1:
          b.indexFinger = a;
          break;
        case 2:
          b.middleFinger = a;
          break;
        case 3:
          b.ringFinger = a;
          break;
        case 4:
          b.pinky = a;
      }
    }
  };
  a.prototype.tool = function(a) {
    a = this.pointable(a);
    return a.tool ? a : b.Invalid;
  };
  a.prototype.pointable = function(a) {
    return this.pointablesMap[a] || b.Invalid;
  };
  a.prototype.finger = function(a) {
    a = this.pointable(a);
    return a.tool ? b.Invalid : a;
  };
  a.prototype.hand = function(a) {
    return this.handsMap[a] || k.Invalid;
  };
  a.prototype.rotationAngle = function(a, b) {
    if (!this.valid || !a.valid) {
      return 0;
    }
    var c = this.rotationMatrix(a);
    c = Math.acos(.5 * (c[0] + c[4] + c[8] - 1));
    if (c = isNaN(c) ? 0 : c, void 0 !== b) {
      a = this.rotationAxis(a), c *= n.dot(a, n.normalize(n.create(), b));
    }
    return c;
  };
  a.prototype.rotationAxis = function(a) {
    return this.valid && a.valid ? n.normalize(n.create(), [this._rotation[7] - a._rotation[5], this._rotation[2] - a._rotation[6], this._rotation[3] - a._rotation[1]]) : n.create();
  };
  a.prototype.rotationMatrix = function(a) {
    if (!this.valid || !a.valid) {
      return h.create();
    }
    var b = h.transpose(h.create(), this._rotation);
    return h.multiply(h.create(), a._rotation, b);
  };
  a.prototype.scaleFactor = function(a) {
    return this.valid && a.valid ? Math.exp(this._scaleFactor - a._scaleFactor) : 1;
  };
  a.prototype.translation = function(a) {
    return this.valid && a.valid ? n.subtract(n.create(), this._translation, a._translation) : n.create();
  };
  a.prototype.toString = function() {
    var a = "Frame [ id:" + this.id + " | timestamp:" + this.timestamp + " | Hand count:(" + this.hands.length + ") | Pointable count:(" + this.pointables.length + ")";
    return this.gestures && (a += " | Gesture count:(" + this.gestures.length + ")"), a + " ]";
  };
  a.prototype.dump = function() {
    var a = "Frame Info:<br/>" + this.toString();
    a += "<br/><br/>Hands:<br/>";
    for (var b = 0, c = this.hands.length; b != c; b++) {
      a += "  " + this.hands[b].toString() + "<br/>";
    }
    a += "<br/><br/>Pointables:<br/>";
    b = 0;
    for (c = this.pointables.length; b != c; b++) {
      a += "  " + this.pointables[b].toString() + "<br/>";
    }
    if (this.gestures) {
      for (a += "<br/><br/>Gestures:<br/>", b = 0, c = this.gestures.length; b != c; b++) {
        a += "  " + this.gestures[b].toString() + "<br/>";
      }
    }
    return a += "<br/><br/>Raw JSON:<br/>", a + JSON.stringify(this.data);
  };
  a.Invalid = {valid:!1, hands:[], fingers:[], tools:[], gestures:[], pointables:[], pointable:function() {
    return b.Invalid;
  }, finger:function() {
    return b.Invalid;
  }, hand:function() {
    return k.Invalid;
  }, toString:function() {
    return "invalid frame";
  }, dump:function() {
    return this.toString();
  }, rotationAngle:function() {
    return 0;
  }, rotationMatrix:function() {
    return h.create();
  }, rotationAxis:function() {
    return n.create();
  }, scaleFactor:function() {
    return 1;
  }, translation:function() {
    return n.create();
  }};
}, {"./finger":7, "./gesture":9, "./hand":10, "./interaction_box":12, "./pointable":14, "gl-matrix":23, underscore:24}], 9:[function(a, c, k) {
  var b = a("gl-matrix").vec3;
  c = a("events").EventEmitter;
  var f = a("underscore"), d = (k.createGesture = function(a) {
    switch(a.type) {
      case "circle":
        var b = new h(a);
        break;
      case "swipe":
        b = new n(a);
        break;
      case "screenTap":
        b = new q(a);
        break;
      case "keyTap":
        b = new m(a);
        break;
      default:
        throw "unknown gesture type";
    }
    return b.id = a.id, b.handIds = a.handIds.slice(), b.pointableIds = a.pointableIds.slice(), b.duration = a.duration, b.state = a.state, b.type = a.type, b;
  }, k.gestureListener = function(a, b) {
    var c = {}, e = {};
    a.on("gesture", function(a, h) {
      if (a.type == b) {
        if (("start" == a.state || "stop" == a.state) && void 0 === e[a.id]) {
          var k = new d(a, h);
          e[a.id] = k;
          f.each(c, function(a, b) {
            k.on(b, a);
          });
        }
        e[a.id].update(a, h);
        "stop" == a.state && delete e[a.id];
      }
    });
    var h = {start:function(a) {
      return c.start = a, h;
    }, stop:function(a) {
      return c.stop = a, h;
    }, complete:function(a) {
      return c.stop = a, h;
    }, update:function(a) {
      return c.update = a, h;
    }};
    return h;
  }, k.Gesture = function(a, b) {
    this.gestures = [a];
    this.frames = [b];
  });
  d.prototype.update = function(a, b) {
    this.lastGesture = a;
    this.lastFrame = b;
    this.gestures.push(a);
    this.frames.push(b);
    this.emit(a.state, this);
  };
  d.prototype.translation = function() {
    return b.subtract(b.create(), this.lastGesture.startPosition, this.lastGesture.position);
  };
  f.extend(d.prototype, c.prototype);
  var h = function(a) {
    this.center = a.center;
    this.normal = a.normal;
    this.progress = a.progress;
    this.radius = a.radius;
  };
  h.prototype.toString = function() {
    return "CircleGesture [" + JSON.stringify(this) + "]";
  };
  var n = function(a) {
    this.startPosition = a.startPosition;
    this.position = a.position;
    this.direction = a.direction;
    this.speed = a.speed;
  };
  n.prototype.toString = function() {
    return "SwipeGesture [" + JSON.stringify(this) + "]";
  };
  var q = function(a) {
    this.position = a.position;
    this.direction = a.direction;
    this.progress = a.progress;
  };
  q.prototype.toString = function() {
    return "ScreenTapGesture [" + JSON.stringify(this) + "]";
  };
  var m = function(a) {
    this.position = a.position;
    this.direction = a.direction;
    this.progress = a.progress;
  };
  m.prototype.toString = function() {
    return "KeyTapGesture [" + JSON.stringify(this) + "]";
  };
}, {events:21, "gl-matrix":23, underscore:24}], 10:[function(a, c) {
  var k = a("./pointable"), b = a("./bone"), f = a("gl-matrix"), d = f.mat3, h = f.vec3, n = a("underscore");
  a = c.exports = function(a) {
    this.id = a.id;
    this.palmPosition = a.palmPosition;
    this.direction = a.direction;
    this.palmVelocity = a.palmVelocity;
    this.palmNormal = a.palmNormal;
    this.sphereCenter = a.sphereCenter;
    this.sphereRadius = a.sphereRadius;
    this.valid = !0;
    this.pointables = [];
    this.fingers = [];
    this.arm = a.armBasis ? new b(this, {type:4, width:a.armWidth, prevJoint:a.elbow, nextJoint:a.wrist, basis:a.armBasis}) : null;
    this.tools = [];
    this._translation = a.t;
    this._rotation = n.flatten(a.r);
    this._scaleFactor = a.s;
    this.timeVisible = a.timeVisible;
    this.stabilizedPalmPosition = a.stabilizedPalmPosition;
    this.type = a.type;
    this.grabStrength = a.grabStrength;
    this.pinchStrength = a.pinchStrength;
    this.confidence = a.confidence;
  };
  a.prototype.finger = function(a) {
    return (a = this.frame.finger(a)) && a.handId == this.id ? a : k.Invalid;
  };
  a.prototype.rotationAngle = function(a, b) {
    if (!this.valid || !a.valid || !a.hand(this.id).valid) {
      return 0;
    }
    var c = this.rotationMatrix(a);
    c = Math.acos(.5 * (c[0] + c[4] + c[8] - 1));
    if (c = isNaN(c) ? 0 : c, void 0 !== b) {
      a = this.rotationAxis(a), c *= h.dot(a, h.normalize(h.create(), b));
    }
    return c;
  };
  a.prototype.rotationAxis = function(a) {
    if (!this.valid || !a.valid) {
      return h.create();
    }
    a = a.hand(this.id);
    return a.valid ? h.normalize(h.create(), [this._rotation[7] - a._rotation[5], this._rotation[2] - a._rotation[6], this._rotation[3] - a._rotation[1]]) : h.create();
  };
  a.prototype.rotationMatrix = function(a) {
    if (!this.valid || !a.valid) {
      return d.create();
    }
    a = a.hand(this.id);
    if (!a.valid) {
      return d.create();
    }
    var b = d.transpose(d.create(), this._rotation);
    return d.multiply(d.create(), a._rotation, b);
  };
  a.prototype.scaleFactor = function(a) {
    if (!this.valid || !a.valid) {
      return 1;
    }
    a = a.hand(this.id);
    return a.valid ? Math.exp(this._scaleFactor - a._scaleFactor) : 1;
  };
  a.prototype.translation = function(a) {
    if (!this.valid || !a.valid) {
      return h.create();
    }
    a = a.hand(this.id);
    return a.valid ? [this._translation[0] - a._translation[0], this._translation[1] - a._translation[1], this._translation[2] - a._translation[2]] : h.create();
  };
  a.prototype.toString = function() {
    return "Hand (" + this.type + ") [ id: " + this.id + " | palm velocity:" + this.palmVelocity + " | sphere center:" + this.sphereCenter + " ] ";
  };
  a.prototype.pitch = function() {
    return Math.atan2(this.direction[1], -this.direction[2]);
  };
  a.prototype.yaw = function() {
    return Math.atan2(this.direction[0], -this.direction[2]);
  };
  a.prototype.roll = function() {
    return Math.atan2(this.palmNormal[0], -this.palmNormal[1]);
  };
  a.Invalid = {valid:!1, fingers:[], tools:[], pointables:[], left:!1, pointable:function() {
    return k.Invalid;
  }, finger:function() {
    return k.Invalid;
  }, toString:function() {
    return "invalid frame";
  }, dump:function() {
    return this.toString();
  }, rotationAngle:function() {
    return 0;
  }, rotationMatrix:function() {
    return d.create();
  }, rotationAxis:function() {
    return h.create();
  }, scaleFactor:function() {
    return 1;
  }, translation:function() {
    return h.create();
  }};
}, {"./bone":1, "./pointable":14, "gl-matrix":23, underscore:24}], 11:[function(a, c) {
  c.exports = {Controller:a("./controller"), Frame:a("./frame"), Gesture:a("./gesture"), Hand:a("./hand"), Pointable:a("./pointable"), Finger:a("./finger"), InteractionBox:a("./interaction_box"), CircularBuffer:a("./circular_buffer"), UI:a("./ui"), JSONProtocol:a("./protocol").JSONProtocol, glMatrix:a("gl-matrix"), mat3:a("gl-matrix").mat3, vec3:a("gl-matrix").vec3, loopController:void 0, version:a("./version.js"), _:a("underscore"), EventEmitter:a("events").EventEmitter, loop:function(a, b) {
    return a && void 0 === b && "[object Function]" === {}.toString.call(a) && (b = a, a = {}), this.loopController ? a && this.loopController.setupFrameEvents(a) : this.loopController = new this.Controller(a), this.loopController.loop(b), this.loopController;
  }, plugin:function(a, b) {
    this.Controller.plugin(a, b);
  }};
}, {"./circular_buffer":2, "./controller":5, "./finger":7, "./frame":8, "./gesture":9, "./hand":10, "./interaction_box":12, "./pointable":14, "./protocol":15, "./ui":16, "./version.js":19, events:21, "gl-matrix":23, underscore:24}], 12:[function(a, c) {
  var k = a("gl-matrix").vec3;
  a = c.exports = function(a) {
    this.valid = !0;
    this.center = a.center;
    this.size = a.size;
    this.width = a.size[0];
    this.height = a.size[1];
    this.depth = a.size[2];
  };
  a.prototype.denormalizePoint = function(a) {
    return k.fromValues((a[0] - .5) * this.size[0] + this.center[0], (a[1] - .5) * this.size[1] + this.center[1], (a[2] - .5) * this.size[2] + this.center[2]);
  };
  a.prototype.normalizePoint = function(a, c) {
    a = k.fromValues((a[0] - this.center[0]) / this.size[0] + .5, (a[1] - this.center[1]) / this.size[1] + .5, (a[2] - this.center[2]) / this.size[2] + .5);
    return c && (a[0] = Math.min(Math.max(a[0], 0), 1), a[1] = Math.min(Math.max(a[1], 0), 1), a[2] = Math.min(Math.max(a[2], 0), 1)), a;
  };
  a.prototype.toString = function() {
    return "InteractionBox [ width:" + this.width + " | height:" + this.height + " | depth:" + this.depth + " ]";
  };
  a.Invalid = {valid:!1};
}, {"gl-matrix":23}], 13:[function(a, c) {
  a = c.exports = function(a) {
    this.steps = [];
    this.controller = a;
  };
  a.prototype.addStep = function(a) {
    this.steps.push(a);
  };
  a.prototype.run = function(a) {
    for (var b = this.steps.length, c = 0; c != b && a; c++) {
      a = this.steps[c](a);
    }
    return a;
  };
  a.prototype.removeStep = function(a) {
    a = this.steps.indexOf(a);
    if (-1 === a) {
      throw "Step not found in pipeline";
    }
    this.steps.splice(a, 1);
  };
  a.prototype.addWrappedStep = function(a, b) {
    var c = this.controller, d = function(d) {
      var f;
      var h = "frame" == a ? [d] : d[a + "s"] || [];
      var k = 0;
      for (f = h.length; f > k; k++) {
        b.call(c, h[k]);
      }
      return d;
    };
    return this.addStep(d), d;
  };
}, {}], 14:[function(a, c) {
  a = a("gl-matrix");
  c = (a.vec3, c.exports = function(a) {
    this.valid = !0;
    this.id = a.id;
    this.handId = a.handId;
    this.length = a.length;
    this.tool = a.tool;
    this.width = a.width;
    this.direction = a.direction;
    this.stabilizedTipPosition = a.stabilizedTipPosition;
    this.tipPosition = a.tipPosition;
    this.tipVelocity = a.tipVelocity;
    this.touchZone = a.touchZone;
    this.touchDistance = a.touchDistance;
    this.timeVisible = a.timeVisible;
  });
  c.prototype.toString = function() {
    return "Pointable [ id:" + this.id + " " + this.length + "mmx | width:" + this.width + "mm | direction:" + this.direction + " ]";
  };
  c.prototype.hand = function() {
    return this.frame.hand(this.handId);
  };
  c.Invalid = {valid:!1};
}, {"gl-matrix":23}], 15:[function(a, c, k) {
  var b = a("./frame"), f = (a("./hand"), a("./pointable"), a("./finger"), a("underscore")), d = a("events").EventEmitter, h = function(a) {
    this.type = a.type;
    this.state = a.state;
  };
  k.chooseProtocol = function(a) {
    switch(a.version) {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
        var b = n(a);
        b.sendBackground = function(a, c) {
          a.send(b.encode({background:c}));
        };
        b.sendFocused = function(a, c) {
          a.send(b.encode({focused:c}));
        };
        b.sendOptimizeHMD = function(a, c) {
          a.send(b.encode({optimizeHMD:c}));
        };
        break;
      default:
        throw "unrecognized version";
    }
    return b;
  };
  var n = k.JSONProtocol = function(a) {
    var c = function(a) {
      if (a.event) {
        return new h(a.event);
      }
      c.emit("beforeFrameCreated", a);
      var e = new b(a);
      return c.emit("afterFrameCreated", e, a), e;
    };
    return c.encode = function(a) {
      return JSON.stringify(a);
    }, c.version = a.version, c.serviceVersion = a.serviceVersion, c.versionLong = "Version " + a.version, c.type = "protocol", f.extend(c, d.prototype), c;
  };
}, {"./finger":7, "./frame":8, "./hand":10, "./pointable":14, events:21, underscore:24}], 16:[function(a, c, k) {
  k.UI = {Region:a("./ui/region"), Cursor:a("./ui/cursor")};
}, {"./ui/cursor":17, "./ui/region":18}], 17:[function(a, c) {
  c.exports = function() {
    return function(a) {
      var b = a.pointables.sort(function(a, b) {
        return a.z - b.z;
      })[0];
      return b && b.valid && (a.cursorPosition = b.tipPosition), a;
    };
  };
}, {}], 18:[function(a, c) {
  var k = a("events").EventEmitter;
  a = a("underscore");
  var b = c.exports = function(a, b) {
    this.start = new Vector(a);
    this.end = new Vector(b);
    this.enteredFrame = null;
  };
  b.prototype.hasPointables = function(a) {
    for (var b = 0; b != a.pointables.length; b++) {
      var c = a.pointables[b].tipPosition;
      if (c.x >= this.start.x && c.x <= this.end.x && c.y >= this.start.y && c.y <= this.end.y && c.z >= this.start.z && c.z <= this.end.z) {
        return !0;
      }
    }
    return !1;
  };
  b.prototype.listener = function(a) {
    var b = this;
    return a && a.nearThreshold && this.setupNearRegion(a.nearThreshold), function(a) {
      return b.updatePosition(a);
    };
  };
  b.prototype.clipper = function() {
    var a = this;
    return function(b) {
      return a.updatePosition(b), a.enteredFrame ? b : null;
    };
  };
  b.prototype.setupNearRegion = function(a) {
    a = this.nearRegion = new b([this.start.x - a, this.start.y - a, this.start.z - a], [this.end.x + a, this.end.y + a, this.end.z + a]);
    var c = this;
    a.on("enter", function(a) {
      c.emit("near", a);
    });
    a.on("exit", function(a) {
      c.emit("far", a);
    });
    c.on("exit", function(a) {
      c.emit("near", a);
    });
  };
  b.prototype.updatePosition = function(a) {
    return this.nearRegion && this.nearRegion.updatePosition(a), this.hasPointables(a) && null == this.enteredFrame ? (this.enteredFrame = a, this.emit("enter", this.enteredFrame)) : this.hasPointables(a) || null == this.enteredFrame || (this.enteredFrame = null, this.emit("exit", this.enteredFrame)), a;
  };
  b.prototype.normalize = function(a) {
    return new Vector([(a.x - this.start.x) / (this.end.x - this.start.x), (a.y - this.start.y) / (this.end.y - this.start.y), (a.z - this.start.z) / (this.end.z - this.start.z)]);
  };
  b.prototype.mapToXY = function(a, b, c) {
    a = this.normalize(a);
    var d = a.x, f = a.y;
    return 1 < d ? d = 1 : -1 > d && (d = -1), 1 < f ? f = 1 : -1 > f && (f = -1), [(d + 1) / 2 * b, (1 - f) / 2 * c, a.z];
  };
  a.extend(b.prototype, k.prototype);
}, {events:21, underscore:24}], 19:[function(a, c) {
  c.exports = {full:"0.6.4", major:0, minor:6, dot:4};
}, {}], 20:[function() {
}, {}], 21:[function(a, c, k) {
  a = a("__browserify_process");
  a.EventEmitter || (a.EventEmitter = function() {
  });
  k = k.EventEmitter = a.EventEmitter;
  var b = "function" == typeof Array.isArray ? Array.isArray : function(a) {
    return "[object Array]" === Object.prototype.toString.call(a);
  };
  k.prototype.setMaxListeners = function(a) {
    this._events || (this._events = {});
    this._events.maxListeners = a;
  };
  k.prototype.emit = function(a) {
    if ("error" === a && (!this._events || !this._events.error || b(this._events.error) && !this._events.error.length)) {
      throw arguments[1] instanceof Error ? arguments[1] : Error("Uncaught, unspecified 'error' event.");
    }
    if (!this._events) {
      return !1;
    }
    var c = this._events[a];
    if (!c) {
      return !1;
    }
    if ("function" == typeof c) {
      switch(arguments.length) {
        case 1:
          c.call(this);
          break;
        case 2:
          c.call(this, arguments[1]);
          break;
        case 3:
          c.call(this, arguments[1], arguments[2]);
          break;
        default:
          var f = Array.prototype.slice.call(arguments, 1);
          c.apply(this, f);
      }
      return !0;
    }
    if (b(c)) {
      f = Array.prototype.slice.call(arguments, 1);
      c = c.slice();
      for (var k = 0, q = c.length; q > k; k++) {
        c[k].apply(this, f);
      }
      return !0;
    }
    return !1;
  };
  k.prototype.addListener = function(a, c) {
    if ("function" != typeof c) {
      throw Error("addListener only takes instances of Function");
    }
    if (this._events || (this._events = {}), this.emit("newListener", a, c), this._events[a]) {
      if (b(this._events[a])) {
        if (!this._events[a].warned) {
          var d;
          (d = void 0 !== this._events.maxListeners ? this._events.maxListeners : 10) && 0 < d && this._events[a].length > d && (this._events[a].warned = !0, console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.", this._events[a].length), console.trace());
        }
        this._events[a].push(c);
      } else {
        this._events[a] = [this._events[a], c];
      }
    } else {
      this._events[a] = c;
    }
    return this;
  };
  k.prototype.on = k.prototype.addListener;
  k.prototype.once = function(a, b) {
    var c = this;
    return c.on(a, function q() {
      c.removeListener(a, q);
      b.apply(this, arguments);
    }), this;
  };
  k.prototype.removeListener = function(a, c) {
    if ("function" != typeof c) {
      throw Error("removeListener only takes instances of Function");
    }
    if (!this._events || !this._events[a]) {
      return this;
    }
    var d = this._events[a];
    if (b(d)) {
      a: {
        if (d.indexOf) {
          c = d.indexOf(c);
        } else {
          for (var f = 0; f < d.length; f++) {
            if (c === d[f]) {
              c = f;
              break a;
            }
          }
          c = -1;
        }
      }
      if (0 > c) {
        return this;
      }
      d.splice(c, 1);
      0 == d.length && delete this._events[a];
    } else {
      this._events[a] === c && delete this._events[a];
    }
    return this;
  };
  k.prototype.removeAllListeners = function(a) {
    return 0 === arguments.length ? (this._events = {}, this) : (a && this._events && this._events[a] && (this._events[a] = null), this);
  };
  k.prototype.listeners = function(a) {
    return this._events || (this._events = {}), this._events[a] || (this._events[a] = []), b(this._events[a]) || (this._events[a] = [this._events[a]]), this._events[a];
  };
  k.listenerCount = function(a, b) {
    return a._events && a._events[b] ? "function" == typeof a._events[b] ? 1 : a._events[b].length : 0;
  };
}, {__browserify_process:22}], 22:[function(a, c) {
  a = c.exports = {};
  a.nextTick = function() {
    if ("undefined" != typeof window && window.setImmediate) {
      return function(a) {
        return window.setImmediate(a);
      };
    }
    if ("undefined" != typeof window && window.postMessage && window.addEventListener) {
      var a = [];
      return window.addEventListener("message", function(b) {
        var c = b.source;
        (c === window || null === c) && "process-tick" === b.data && (b.stopPropagation(), 0 < a.length) && a.shift()();
      }, !0), function(b) {
        a.push(b);
        window.postMessage("process-tick", "*");
      };
    }
    return function(a) {
      setTimeout(a, 0);
    };
  }();
  a.title = "browser";
  a.browser = !0;
  a.env = {};
  a.argv = [];
  a.binding = function() {
    throw Error("process.binding is not supported");
  };
  a.cwd = function() {
    return "/";
  };
  a.chdir = function() {
    throw Error("process.chdir is not supported");
  };
}, {}], 23:[function(a, c, k) {
  !function(a) {
    var b;
    "undefined" == typeof k ? "function" == typeof define && "object" == typeof define.amd && define.amd ? (b = {}, define(function() {
      return b;
    })) : b = "undefined" != typeof window ? window : a : b = k;
    (function(a) {
      if (!b) {
        var b = 1E-6;
      }
      if (!c) {
        var c = "undefined" != typeof Float32Array ? Float32Array : Array;
      }
      if (!d) {
        var d = Math.random;
      }
      var f = {setMatrixArrayType:function(a) {
        c = a;
      }};
      "undefined" != typeof a && (a.glMatrix = f);
      var k = Math.PI / 180;
      f.toRadian = function(a) {
        return a * k;
      };
      var e = {create:function() {
        var a = new c(2);
        return a[0] = 0, a[1] = 0, a;
      }, clone:function(a) {
        var b = new c(2);
        return b[0] = a[0], b[1] = a[1], b;
      }, fromValues:function(a, b) {
        var e = new c(2);
        return e[0] = a, e[1] = b, e;
      }, copy:function(a, b) {
        return a[0] = b[0], a[1] = b[1], a;
      }, set:function(a, b, c) {
        return a[0] = b, a[1] = c, a;
      }, add:function(a, b, c) {
        return a[0] = b[0] + c[0], a[1] = b[1] + c[1], a;
      }, subtract:function(a, b, c) {
        return a[0] = b[0] - c[0], a[1] = b[1] - c[1], a;
      }};
      e.sub = e.subtract;
      e.multiply = function(a, b, c) {
        return a[0] = b[0] * c[0], a[1] = b[1] * c[1], a;
      };
      e.mul = e.multiply;
      e.divide = function(a, b, c) {
        return a[0] = b[0] / c[0], a[1] = b[1] / c[1], a;
      };
      e.div = e.divide;
      e.min = function(a, b, c) {
        return a[0] = Math.min(b[0], c[0]), a[1] = Math.min(b[1], c[1]), a;
      };
      e.max = function(a, b, c) {
        return a[0] = Math.max(b[0], c[0]), a[1] = Math.max(b[1], c[1]), a;
      };
      e.scale = function(a, b, c) {
        return a[0] = b[0] * c, a[1] = b[1] * c, a;
      };
      e.scaleAndAdd = function(a, b, c, e) {
        return a[0] = b[0] + c[0] * e, a[1] = b[1] + c[1] * e, a;
      };
      e.distance = function(a, b) {
        var c = b[0] - a[0];
        a = b[1] - a[1];
        return Math.sqrt(c * c + a * a);
      };
      e.dist = e.distance;
      e.squaredDistance = function(a, b) {
        var c = b[0] - a[0];
        a = b[1] - a[1];
        return c * c + a * a;
      };
      e.sqrDist = e.squaredDistance;
      e.length = function(a) {
        var b = a[0];
        a = a[1];
        return Math.sqrt(b * b + a * a);
      };
      e.len = e.length;
      e.squaredLength = function(a) {
        var b = a[0];
        a = a[1];
        return b * b + a * a;
      };
      e.sqrLen = e.squaredLength;
      e.negate = function(a, b) {
        return a[0] = -b[0], a[1] = -b[1], a;
      };
      e.normalize = function(a, b) {
        var c = b[0], e = b[1];
        c = c * c + e * e;
        return 0 < c && (c = 1 / Math.sqrt(c), a[0] = b[0] * c, a[1] = b[1] * c), a;
      };
      e.dot = function(a, b) {
        return a[0] * b[0] + a[1] * b[1];
      };
      e.cross = function(a, b, c) {
        b = b[0] * c[1] - b[1] * c[0];
        return a[0] = a[1] = 0, a[2] = b, a;
      };
      e.lerp = function(a, b, c, e) {
        var d = b[0];
        b = b[1];
        return a[0] = d + e * (c[0] - d), a[1] = b + e * (c[1] - b), a;
      };
      e.random = function(a, b) {
        b = b || 1;
        var c = 2 * d() * Math.PI;
        return a[0] = Math.cos(c) * b, a[1] = Math.sin(c) * b, a;
      };
      e.transformMat2 = function(a, b, c) {
        var e = b[0];
        b = b[1];
        return a[0] = c[0] * e + c[2] * b, a[1] = c[1] * e + c[3] * b, a;
      };
      e.transformMat2d = function(a, b, c) {
        var e = b[0];
        b = b[1];
        return a[0] = c[0] * e + c[2] * b + c[4], a[1] = c[1] * e + c[3] * b + c[5], a;
      };
      e.transformMat3 = function(a, b, c) {
        var e = b[0];
        b = b[1];
        return a[0] = c[0] * e + c[3] * b + c[6], a[1] = c[1] * e + c[4] * b + c[7], a;
      };
      e.transformMat4 = function(a, b, c) {
        var e = b[0];
        b = b[1];
        return a[0] = c[0] * e + c[4] * b + c[12], a[1] = c[1] * e + c[5] * b + c[13], a;
      };
      e.forEach = function() {
        var a = e.create();
        return function(b, c, e, d, f, h) {
          c || (c = 2);
          e || (e = 0);
          for (d = d ? Math.min(d * c + e, b.length) : b.length; d > e; e += c) {
            a[0] = b[e], a[1] = b[e + 1], f(a, a, h), b[e] = a[0], b[e + 1] = a[1];
          }
          return b;
        };
      }();
      e.str = function(a) {
        return "vec2(" + a[0] + ", " + a[1] + ")";
      };
      "undefined" != typeof a && (a.vec2 = e);
      var l = {create:function() {
        var a = new c(3);
        return a[0] = 0, a[1] = 0, a[2] = 0, a;
      }, clone:function(a) {
        var b = new c(3);
        return b[0] = a[0], b[1] = a[1], b[2] = a[2], b;
      }, fromValues:function(a, b, e) {
        var d = new c(3);
        return d[0] = a, d[1] = b, d[2] = e, d;
      }, copy:function(a, b) {
        return a[0] = b[0], a[1] = b[1], a[2] = b[2], a;
      }, set:function(a, b, c, e) {
        return a[0] = b, a[1] = c, a[2] = e, a;
      }, add:function(a, b, c) {
        return a[0] = b[0] + c[0], a[1] = b[1] + c[1], a[2] = b[2] + c[2], a;
      }, subtract:function(a, b, c) {
        return a[0] = b[0] - c[0], a[1] = b[1] - c[1], a[2] = b[2] - c[2], a;
      }};
      l.sub = l.subtract;
      l.multiply = function(a, b, c) {
        return a[0] = b[0] * c[0], a[1] = b[1] * c[1], a[2] = b[2] * c[2], a;
      };
      l.mul = l.multiply;
      l.divide = function(a, b, c) {
        return a[0] = b[0] / c[0], a[1] = b[1] / c[1], a[2] = b[2] / c[2], a;
      };
      l.div = l.divide;
      l.min = function(a, b, c) {
        return a[0] = Math.min(b[0], c[0]), a[1] = Math.min(b[1], c[1]), a[2] = Math.min(b[2], c[2]), a;
      };
      l.max = function(a, b, c) {
        return a[0] = Math.max(b[0], c[0]), a[1] = Math.max(b[1], c[1]), a[2] = Math.max(b[2], c[2]), a;
      };
      l.scale = function(a, b, c) {
        return a[0] = b[0] * c, a[1] = b[1] * c, a[2] = b[2] * c, a;
      };
      l.scaleAndAdd = function(a, b, c, e) {
        return a[0] = b[0] + c[0] * e, a[1] = b[1] + c[1] * e, a[2] = b[2] + c[2] * e, a;
      };
      l.distance = function(a, b) {
        var c = b[0] - a[0], e = b[1] - a[1];
        a = b[2] - a[2];
        return Math.sqrt(c * c + e * e + a * a);
      };
      l.dist = l.distance;
      l.squaredDistance = function(a, b) {
        var c = b[0] - a[0], e = b[1] - a[1];
        a = b[2] - a[2];
        return c * c + e * e + a * a;
      };
      l.sqrDist = l.squaredDistance;
      l.length = function(a) {
        var b = a[0], c = a[1];
        a = a[2];
        return Math.sqrt(b * b + c * c + a * a);
      };
      l.len = l.length;
      l.squaredLength = function(a) {
        var b = a[0], c = a[1];
        a = a[2];
        return b * b + c * c + a * a;
      };
      l.sqrLen = l.squaredLength;
      l.negate = function(a, b) {
        return a[0] = -b[0], a[1] = -b[1], a[2] = -b[2], a;
      };
      l.normalize = function(a, b) {
        var c = b[0], e = b[1], d = b[2];
        c = c * c + e * e + d * d;
        return 0 < c && (c = 1 / Math.sqrt(c), a[0] = b[0] * c, a[1] = b[1] * c, a[2] = b[2] * c), a;
      };
      l.dot = function(a, b) {
        return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
      };
      l.cross = function(a, b, c) {
        var e = b[0], d = b[1];
        b = b[2];
        var f = c[0], h = c[1];
        c = c[2];
        return a[0] = d * c - b * h, a[1] = b * f - e * c, a[2] = e * h - d * f, a;
      };
      l.lerp = function(a, b, c, e) {
        var d = b[0], f = b[1];
        b = b[2];
        return a[0] = d + e * (c[0] - d), a[1] = f + e * (c[1] - f), a[2] = b + e * (c[2] - b), a;
      };
      l.random = function(a, b) {
        b = b || 1;
        var c = 2 * d() * Math.PI, e = 2 * d() - 1, f = Math.sqrt(1 - e * e) * b;
        return a[0] = Math.cos(c) * f, a[1] = Math.sin(c) * f, a[2] = e * b, a;
      };
      l.transformMat4 = function(a, b, c) {
        var e = b[0], d = b[1];
        b = b[2];
        return a[0] = c[0] * e + c[4] * d + c[8] * b + c[12], a[1] = c[1] * e + c[5] * d + c[9] * b + c[13], a[2] = c[2] * e + c[6] * d + c[10] * b + c[14], a;
      };
      l.transformMat3 = function(a, b, c) {
        var e = b[0], d = b[1];
        b = b[2];
        return a[0] = e * c[0] + d * c[3] + b * c[6], a[1] = e * c[1] + d * c[4] + b * c[7], a[2] = e * c[2] + d * c[5] + b * c[8], a;
      };
      l.transformQuat = function(a, b, c) {
        var e = b[0], d = b[1], f = b[2];
        b = c[0];
        var h = c[1], k = c[2];
        c = c[3];
        var l = c * e + h * f - k * d, p = c * d + k * e - b * f, m = c * f + b * d - h * e;
        e = -b * e - h * d - k * f;
        return a[0] = l * c + e * -b + p * -k - m * -h, a[1] = p * c + e * -h + m * -b - l * -k, a[2] = m * c + e * -k + l * -h - p * -b, a;
      };
      l.rotateX = function(a, b, c, e) {
        var d = [], f = [];
        return d[0] = b[0] - c[0], d[1] = b[1] - c[1], d[2] = b[2] - c[2], f[0] = d[0], f[1] = d[1] * Math.cos(e) - d[2] * Math.sin(e), f[2] = d[1] * Math.sin(e) + d[2] * Math.cos(e), a[0] = f[0] + c[0], a[1] = f[1] + c[1], a[2] = f[2] + c[2], a;
      };
      l.rotateY = function(a, b, c, e) {
        var d = [], f = [];
        return d[0] = b[0] - c[0], d[1] = b[1] - c[1], d[2] = b[2] - c[2], f[0] = d[2] * Math.sin(e) + d[0] * Math.cos(e), f[1] = d[1], f[2] = d[2] * Math.cos(e) - d[0] * Math.sin(e), a[0] = f[0] + c[0], a[1] = f[1] + c[1], a[2] = f[2] + c[2], a;
      };
      l.rotateZ = function(a, b, c, e) {
        var d = [], f = [];
        return d[0] = b[0] - c[0], d[1] = b[1] - c[1], d[2] = b[2] - c[2], f[0] = d[0] * Math.cos(e) - d[1] * Math.sin(e), f[1] = d[0] * Math.sin(e) + d[1] * Math.cos(e), f[2] = d[2], a[0] = f[0] + c[0], a[1] = f[1] + c[1], a[2] = f[2] + c[2], a;
      };
      l.forEach = function() {
        var a = l.create();
        return function(b, c, e, d, f, h) {
          c || (c = 3);
          e || (e = 0);
          for (d = d ? Math.min(d * c + e, b.length) : b.length; d > e; e += c) {
            a[0] = b[e], a[1] = b[e + 1], a[2] = b[e + 2], f(a, a, h), b[e] = a[0], b[e + 1] = a[1], b[e + 2] = a[2];
          }
          return b;
        };
      }();
      l.str = function(a) {
        return "vec3(" + a[0] + ", " + a[1] + ", " + a[2] + ")";
      };
      "undefined" != typeof a && (a.vec3 = l);
      var u = {create:function() {
        var a = new c(4);
        return a[0] = 0, a[1] = 0, a[2] = 0, a[3] = 0, a;
      }, clone:function(a) {
        var b = new c(4);
        return b[0] = a[0], b[1] = a[1], b[2] = a[2], b[3] = a[3], b;
      }, fromValues:function(a, b, e, d) {
        var f = new c(4);
        return f[0] = a, f[1] = b, f[2] = e, f[3] = d, f;
      }, copy:function(a, b) {
        return a[0] = b[0], a[1] = b[1], a[2] = b[2], a[3] = b[3], a;
      }, set:function(a, b, c, e, d) {
        return a[0] = b, a[1] = c, a[2] = e, a[3] = d, a;
      }, add:function(a, b, c) {
        return a[0] = b[0] + c[0], a[1] = b[1] + c[1], a[2] = b[2] + c[2], a[3] = b[3] + c[3], a;
      }, subtract:function(a, b, c) {
        return a[0] = b[0] - c[0], a[1] = b[1] - c[1], a[2] = b[2] - c[2], a[3] = b[3] - c[3], a;
      }};
      u.sub = u.subtract;
      u.multiply = function(a, b, c) {
        return a[0] = b[0] * c[0], a[1] = b[1] * c[1], a[2] = b[2] * c[2], a[3] = b[3] * c[3], a;
      };
      u.mul = u.multiply;
      u.divide = function(a, b, c) {
        return a[0] = b[0] / c[0], a[1] = b[1] / c[1], a[2] = b[2] / c[2], a[3] = b[3] / c[3], a;
      };
      u.div = u.divide;
      u.min = function(a, b, c) {
        return a[0] = Math.min(b[0], c[0]), a[1] = Math.min(b[1], c[1]), a[2] = Math.min(b[2], c[2]), a[3] = Math.min(b[3], c[3]), a;
      };
      u.max = function(a, b, c) {
        return a[0] = Math.max(b[0], c[0]), a[1] = Math.max(b[1], c[1]), a[2] = Math.max(b[2], c[2]), a[3] = Math.max(b[3], c[3]), a;
      };
      u.scale = function(a, b, c) {
        return a[0] = b[0] * c, a[1] = b[1] * c, a[2] = b[2] * c, a[3] = b[3] * c, a;
      };
      u.scaleAndAdd = function(a, b, c, e) {
        return a[0] = b[0] + c[0] * e, a[1] = b[1] + c[1] * e, a[2] = b[2] + c[2] * e, a[3] = b[3] + c[3] * e, a;
      };
      u.distance = function(a, b) {
        var c = b[0] - a[0], e = b[1] - a[1], d = b[2] - a[2];
        a = b[3] - a[3];
        return Math.sqrt(c * c + e * e + d * d + a * a);
      };
      u.dist = u.distance;
      u.squaredDistance = function(a, b) {
        var c = b[0] - a[0], e = b[1] - a[1], d = b[2] - a[2];
        a = b[3] - a[3];
        return c * c + e * e + d * d + a * a;
      };
      u.sqrDist = u.squaredDistance;
      u.length = function(a) {
        var b = a[0], c = a[1], e = a[2];
        a = a[3];
        return Math.sqrt(b * b + c * c + e * e + a * a);
      };
      u.len = u.length;
      u.squaredLength = function(a) {
        var b = a[0], c = a[1], e = a[2];
        a = a[3];
        return b * b + c * c + e * e + a * a;
      };
      u.sqrLen = u.squaredLength;
      u.negate = function(a, b) {
        return a[0] = -b[0], a[1] = -b[1], a[2] = -b[2], a[3] = -b[3], a;
      };
      u.normalize = function(a, b) {
        var c = b[0], e = b[1], d = b[2], f = b[3];
        c = c * c + e * e + d * d + f * f;
        return 0 < c && (c = 1 / Math.sqrt(c), a[0] = b[0] * c, a[1] = b[1] * c, a[2] = b[2] * c, a[3] = b[3] * c), a;
      };
      u.dot = function(a, b) {
        return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
      };
      u.lerp = function(a, b, c, e) {
        var d = b[0], f = b[1], h = b[2];
        b = b[3];
        return a[0] = d + e * (c[0] - d), a[1] = f + e * (c[1] - f), a[2] = h + e * (c[2] - h), a[3] = b + e * (c[3] - b), a;
      };
      u.random = function(a, b) {
        return b = b || 1, a[0] = d(), a[1] = d(), a[2] = d(), a[3] = d(), u.normalize(a, a), u.scale(a, a, b), a;
      };
      u.transformMat4 = function(a, b, c) {
        var e = b[0], d = b[1], f = b[2];
        b = b[3];
        return a[0] = c[0] * e + c[4] * d + c[8] * f + c[12] * b, a[1] = c[1] * e + c[5] * d + c[9] * f + c[13] * b, a[2] = c[2] * e + c[6] * d + c[10] * f + c[14] * b, a[3] = c[3] * e + c[7] * d + c[11] * f + c[15] * b, a;
      };
      u.transformQuat = function(a, b, c) {
        var e = b[0], d = b[1], f = b[2];
        b = c[0];
        var h = c[1], k = c[2];
        c = c[3];
        var l = c * e + h * f - k * d, p = c * d + k * e - b * f, m = c * f + b * d - h * e;
        e = -b * e - h * d - k * f;
        return a[0] = l * c + e * -b + p * -k - m * -h, a[1] = p * c + e * -h + m * -b - l * -k, a[2] = m * c + e * -k + l * -h - p * -b, a;
      };
      u.forEach = function() {
        var a = u.create();
        return function(b, c, e, d, f, h) {
          c || (c = 4);
          e || (e = 0);
          for (d = d ? Math.min(d * c + e, b.length) : b.length; d > e; e += c) {
            a[0] = b[e], a[1] = b[e + 1], a[2] = b[e + 2], a[3] = b[e + 3], f(a, a, h), b[e] = a[0], b[e + 1] = a[1], b[e + 2] = a[2], b[e + 3] = a[3];
          }
          return b;
        };
      }();
      u.str = function(a) {
        return "vec4(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ")";
      };
      "undefined" != typeof a && (a.vec4 = u);
      f = {create:function() {
        var a = new c(4);
        return a[0] = 1, a[1] = 0, a[2] = 0, a[3] = 1, a;
      }, clone:function(a) {
        var b = new c(4);
        return b[0] = a[0], b[1] = a[1], b[2] = a[2], b[3] = a[3], b;
      }, copy:function(a, b) {
        return a[0] = b[0], a[1] = b[1], a[2] = b[2], a[3] = b[3], a;
      }, identity:function(a) {
        return a[0] = 1, a[1] = 0, a[2] = 0, a[3] = 1, a;
      }, transpose:function(a, b) {
        if (a === b) {
          var c = b[1];
          a[1] = b[2];
          a[2] = c;
        } else {
          a[0] = b[0], a[1] = b[2], a[2] = b[1], a[3] = b[3];
        }
        return a;
      }, invert:function(a, b) {
        var c = b[0], e = b[1], d = b[2];
        b = b[3];
        var f = c * b - d * e;
        return f ? (f = 1 / f, a[0] = b * f, a[1] = -e * f, a[2] = -d * f, a[3] = c * f, a) : null;
      }, adjoint:function(a, b) {
        var c = b[0];
        return a[0] = b[3], a[1] = -b[1], a[2] = -b[2], a[3] = c, a;
      }, determinant:function(a) {
        return a[0] * a[3] - a[2] * a[1];
      }, multiply:function(a, b, c) {
        var e = b[0], d = b[1], f = b[2];
        b = b[3];
        var h = c[0], k = c[1], l = c[2];
        c = c[3];
        return a[0] = e * h + f * k, a[1] = d * h + b * k, a[2] = e * l + f * c, a[3] = d * l + b * c, a;
      }};
      f.mul = f.multiply;
      f.rotate = function(a, b, c) {
        var e = b[0], d = b[1], f = b[2];
        b = b[3];
        var h = Math.sin(c);
        c = Math.cos(c);
        return a[0] = e * c + f * h, a[1] = d * c + b * h, a[2] = e * -h + f * c, a[3] = d * -h + b * c, a;
      };
      f.scale = function(a, b, c) {
        var e = b[1], d = b[2], f = b[3], h = c[0];
        c = c[1];
        return a[0] = b[0] * h, a[1] = e * h, a[2] = d * c, a[3] = f * c, a;
      };
      f.str = function(a) {
        return "mat2(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ")";
      };
      f.frob = function(a) {
        return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2));
      };
      f.LDU = function(a, b, c, e) {
        return a[2] = e[2] / e[0], c[0] = e[0], c[1] = e[1], c[3] = e[3] - a[2] * c[1], [a, b, c];
      };
      "undefined" != typeof a && (a.mat2 = f);
      f = {create:function() {
        var a = new c(6);
        return a[0] = 1, a[1] = 0, a[2] = 0, a[3] = 1, a[4] = 0, a[5] = 0, a;
      }, clone:function(a) {
        var b = new c(6);
        return b[0] = a[0], b[1] = a[1], b[2] = a[2], b[3] = a[3], b[4] = a[4], b[5] = a[5], b;
      }, copy:function(a, b) {
        return a[0] = b[0], a[1] = b[1], a[2] = b[2], a[3] = b[3], a[4] = b[4], a[5] = b[5], a;
      }, identity:function(a) {
        return a[0] = 1, a[1] = 0, a[2] = 0, a[3] = 1, a[4] = 0, a[5] = 0, a;
      }, invert:function(a, b) {
        var c = b[0], e = b[1], d = b[2], f = b[3], h = b[4];
        b = b[5];
        var k = c * f - e * d;
        return k ? (k = 1 / k, a[0] = f * k, a[1] = -e * k, a[2] = -d * k, a[3] = c * k, a[4] = (d * b - f * h) * k, a[5] = (e * h - c * b) * k, a) : null;
      }, determinant:function(a) {
        return a[0] * a[3] - a[1] * a[2];
      }, multiply:function(a, b, c) {
        var e = b[0], d = b[1], f = b[2], h = b[3], k = b[4];
        b = b[5];
        var l = c[0], p = c[1], m = c[2], n = c[3], t = c[4];
        c = c[5];
        return a[0] = e * l + f * p, a[1] = d * l + h * p, a[2] = e * m + f * n, a[3] = d * m + h * n, a[4] = e * t + f * c + k, a[5] = d * t + h * c + b, a;
      }};
      f.mul = f.multiply;
      f.rotate = function(a, b, c) {
        var e = b[0], d = b[1], f = b[2], h = b[3], k = b[4];
        b = b[5];
        var l = Math.sin(c);
        c = Math.cos(c);
        return a[0] = e * c + f * l, a[1] = d * c + h * l, a[2] = e * -l + f * c, a[3] = d * -l + h * c, a[4] = k, a[5] = b, a;
      };
      f.scale = function(a, b, c) {
        var e = b[1], d = b[2], f = b[3], h = b[4], k = b[5], l = c[0];
        c = c[1];
        return a[0] = b[0] * l, a[1] = e * l, a[2] = d * c, a[3] = f * c, a[4] = h, a[5] = k, a;
      };
      f.translate = function(a, b, c) {
        var e = b[0], d = b[1], f = b[2], h = b[3], k = b[4];
        b = b[5];
        var l = c[0];
        c = c[1];
        return a[0] = e, a[1] = d, a[2] = f, a[3] = h, a[4] = e * l + f * c + k, a[5] = d * l + h * c + b, a;
      };
      f.str = function(a) {
        return "mat2d(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ")";
      };
      f.frob = function(a) {
        return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1);
      };
      "undefined" != typeof a && (a.mat2d = f);
      var w = {create:function() {
        var a = new c(9);
        return a[0] = 1, a[1] = 0, a[2] = 0, a[3] = 0, a[4] = 1, a[5] = 0, a[6] = 0, a[7] = 0, a[8] = 1, a;
      }, fromMat4:function(a, b) {
        return a[0] = b[0], a[1] = b[1], a[2] = b[2], a[3] = b[4], a[4] = b[5], a[5] = b[6], a[6] = b[8], a[7] = b[9], a[8] = b[10], a;
      }, clone:function(a) {
        var b = new c(9);
        return b[0] = a[0], b[1] = a[1], b[2] = a[2], b[3] = a[3], b[4] = a[4], b[5] = a[5], b[6] = a[6], b[7] = a[7], b[8] = a[8], b;
      }, copy:function(a, b) {
        return a[0] = b[0], a[1] = b[1], a[2] = b[2], a[3] = b[3], a[4] = b[4], a[5] = b[5], a[6] = b[6], a[7] = b[7], a[8] = b[8], a;
      }, identity:function(a) {
        return a[0] = 1, a[1] = 0, a[2] = 0, a[3] = 0, a[4] = 1, a[5] = 0, a[6] = 0, a[7] = 0, a[8] = 1, a;
      }, transpose:function(a, b) {
        if (a === b) {
          var c = b[1], e = b[2], d = b[5];
          a[1] = b[3];
          a[2] = b[6];
          a[3] = c;
          a[5] = b[7];
          a[6] = e;
          a[7] = d;
        } else {
          a[0] = b[0], a[1] = b[3], a[2] = b[6], a[3] = b[1], a[4] = b[4], a[5] = b[7], a[6] = b[2], a[7] = b[5], a[8] = b[8];
        }
        return a;
      }, invert:function(a, b) {
        var c = b[0], e = b[1], d = b[2], f = b[3], h = b[4], k = b[5], l = b[6], m = b[7];
        b = b[8];
        var p = b * h - k * m, n = -b * f + k * l, t = m * f - h * l, q = c * p + e * n + d * t;
        return q ? (q = 1 / q, a[0] = p * q, a[1] = (-b * e + d * m) * q, a[2] = (k * e - d * h) * q, a[3] = n * q, a[4] = (b * c - d * l) * q, a[5] = (-k * c + d * f) * q, a[6] = t * q, a[7] = (-m * c + e * l) * q, a[8] = (h * c - e * f) * q, a) : null;
      }, adjoint:function(a, b) {
        var c = b[0], e = b[1], d = b[2], f = b[3], h = b[4], k = b[5], l = b[6], m = b[7];
        b = b[8];
        return a[0] = h * b - k * m, a[1] = d * m - e * b, a[2] = e * k - d * h, a[3] = k * l - f * b, a[4] = c * b - d * l, a[5] = d * f - c * k, a[6] = f * m - h * l, a[7] = e * l - c * m, a[8] = c * h - e * f, a;
      }, determinant:function(a) {
        var b = a[3], c = a[4], e = a[5], d = a[6], f = a[7], h = a[8];
        return a[0] * (h * c - e * f) + a[1] * (-h * b + e * d) + a[2] * (f * b - c * d);
      }, multiply:function(a, b, c) {
        var e = b[0], d = b[1], f = b[2], h = b[3], k = b[4], l = b[5], m = b[6], p = b[7];
        b = b[8];
        var n = c[0], t = c[1], q = c[2], u = c[3], v = c[4], w = c[5], y = c[6], z = c[7];
        c = c[8];
        return a[0] = n * e + t * h + q * m, a[1] = n * d + t * k + q * p, a[2] = n * f + t * l + q * b, a[3] = u * e + v * h + w * m, a[4] = u * d + v * k + w * p, a[5] = u * f + v * l + w * b, a[6] = y * e + z * h + c * m, a[7] = y * d + z * k + c * p, a[8] = y * f + z * l + c * b, a;
      }};
      w.mul = w.multiply;
      w.translate = function(a, b, c) {
        var e = b[0], d = b[1], f = b[2], h = b[3], k = b[4], l = b[5], m = b[6], p = b[7];
        b = b[8];
        var n = c[0];
        c = c[1];
        return a[0] = e, a[1] = d, a[2] = f, a[3] = h, a[4] = k, a[5] = l, a[6] = n * e + c * h + m, a[7] = n * d + c * k + p, a[8] = n * f + c * l + b, a;
      };
      w.rotate = function(a, b, c) {
        var e = b[0], d = b[1], f = b[2], h = b[3], k = b[4], l = b[5], m = b[6], p = b[7];
        b = b[8];
        var n = Math.sin(c);
        c = Math.cos(c);
        return a[0] = c * e + n * h, a[1] = c * d + n * k, a[2] = c * f + n * l, a[3] = c * h - n * e, a[4] = c * k - n * d, a[5] = c * l - n * f, a[6] = m, a[7] = p, a[8] = b, a;
      };
      w.scale = function(a, b, c) {
        var e = c[0];
        c = c[1];
        return a[0] = e * b[0], a[1] = e * b[1], a[2] = e * b[2], a[3] = c * b[3], a[4] = c * b[4], a[5] = c * b[5], a[6] = b[6], a[7] = b[7], a[8] = b[8], a;
      };
      w.fromMat2d = function(a, b) {
        return a[0] = b[0], a[1] = b[1], a[2] = 0, a[3] = b[2], a[4] = b[3], a[5] = 0, a[6] = b[4], a[7] = b[5], a[8] = 1, a;
      };
      w.fromQuat = function(a, b) {
        var c = b[0], e = b[1], d = b[2];
        b = b[3];
        var f = c + c, h = e + e, k = d + d;
        c *= f;
        var l = e * f;
        e *= h;
        var m = d * f, p = d * h;
        d *= k;
        f *= b;
        h *= b;
        b *= k;
        return a[0] = 1 - e - d, a[3] = l - b, a[6] = m + h, a[1] = l + b, a[4] = 1 - c - d, a[7] = p - f, a[2] = m - h, a[5] = p + f, a[8] = 1 - c - e, a;
      };
      w.normalFromMat4 = function(a, b) {
        var c = b[0], e = b[1], d = b[2], f = b[3], h = b[4], k = b[5], l = b[6], m = b[7], p = b[8], n = b[9], t = b[10], q = b[11], u = b[12], v = b[13], w = b[14];
        b = b[15];
        var y = c * k - e * h, x = c * l - d * h, S = c * m - f * h, W = e * l - d * k, M = e * m - f * k, O = d * m - f * l, P = p * v - n * u, ka = p * w - t * u;
        p = p * b - q * u;
        var ha = n * w - t * v;
        n = n * b - q * v;
        t = t * b - q * w;
        return (q = y * t - x * n + S * ha + W * p - M * ka + O * P) ? (q = 1 / q, a[0] = (k * t - l * n + m * ha) * q, a[1] = (l * p - h * t - m * ka) * q, a[2] = (h * n - k * p + m * P) * q, a[3] = (d * n - e * t - f * ha) * q, a[4] = (c * t - d * p + f * ka) * q, a[5] = (e * p - c * n - f * P) * q, a[6] = (v * O - w * M + b * W) * q, a[7] = (w * S - u * O - b * x) * q, a[8] = (u * M - v * S + b * y) * q, a) : null;
      };
      w.str = function(a) {
        return "mat3(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ", " + a[8] + ")";
      };
      w.frob = function(a) {
        return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2));
      };
      "undefined" != typeof a && (a.mat3 = w);
      var y = {create:function() {
        var a = new c(16);
        return a[0] = 1, a[1] = 0, a[2] = 0, a[3] = 0, a[4] = 0, a[5] = 1, a[6] = 0, a[7] = 0, a[8] = 0, a[9] = 0, a[10] = 1, a[11] = 0, a[12] = 0, a[13] = 0, a[14] = 0, a[15] = 1, a;
      }, clone:function(a) {
        var b = new c(16);
        return b[0] = a[0], b[1] = a[1], b[2] = a[2], b[3] = a[3], b[4] = a[4], b[5] = a[5], b[6] = a[6], b[7] = a[7], b[8] = a[8], b[9] = a[9], b[10] = a[10], b[11] = a[11], b[12] = a[12], b[13] = a[13], b[14] = a[14], b[15] = a[15], b;
      }, copy:function(a, b) {
        return a[0] = b[0], a[1] = b[1], a[2] = b[2], a[3] = b[3], a[4] = b[4], a[5] = b[5], a[6] = b[6], a[7] = b[7], a[8] = b[8], a[9] = b[9], a[10] = b[10], a[11] = b[11], a[12] = b[12], a[13] = b[13], a[14] = b[14], a[15] = b[15], a;
      }, identity:function(a) {
        return a[0] = 1, a[1] = 0, a[2] = 0, a[3] = 0, a[4] = 0, a[5] = 1, a[6] = 0, a[7] = 0, a[8] = 0, a[9] = 0, a[10] = 1, a[11] = 0, a[12] = 0, a[13] = 0, a[14] = 0, a[15] = 1, a;
      }, transpose:function(a, b) {
        if (a === b) {
          var c = b[1], e = b[2], d = b[3], f = b[6], h = b[7], k = b[11];
          a[1] = b[4];
          a[2] = b[8];
          a[3] = b[12];
          a[4] = c;
          a[6] = b[9];
          a[7] = b[13];
          a[8] = e;
          a[9] = f;
          a[11] = b[14];
          a[12] = d;
          a[13] = h;
          a[14] = k;
        } else {
          a[0] = b[0], a[1] = b[4], a[2] = b[8], a[3] = b[12], a[4] = b[1], a[5] = b[5], a[6] = b[9], a[7] = b[13], a[8] = b[2], a[9] = b[6], a[10] = b[10], a[11] = b[14], a[12] = b[3], a[13] = b[7], a[14] = b[11], a[15] = b[15];
        }
        return a;
      }, invert:function(a, b) {
        var c = b[0], e = b[1], d = b[2], f = b[3], h = b[4], k = b[5], l = b[6], m = b[7], n = b[8], p = b[9], t = b[10], q = b[11], u = b[12], v = b[13], w = b[14];
        b = b[15];
        var y = c * k - e * h, x = c * l - d * h, S = c * m - f * h, W = e * l - d * k, M = e * m - f * k, O = d * m - f * l, P = n * v - p * u, ka = n * w - t * u, ha = n * b - q * u, ja = p * w - t * v, X = p * b - q * v, fa = t * b - q * w, ba = y * fa - x * X + S * ja + W * ha - M * ka + O * P;
        return ba ? (ba = 1 / ba, a[0] = (k * fa - l * X + m * ja) * ba, a[1] = (d * X - e * fa - f * ja) * ba, a[2] = (v * O - w * M + b * W) * ba, a[3] = (t * M - p * O - q * W) * ba, a[4] = (l * ha - h * fa - m * ka) * ba, a[5] = (c * fa - d * ha + f * ka) * ba, a[6] = (w * S - u * O - b * x) * ba, a[7] = (n * O - t * S + q * x) * ba, a[8] = (h * X - k * ha + m * P) * ba, a[9] = (e * ha - c * X - f * P) * ba, a[10] = (u * M - v * S + b * y) * ba, a[11] = (p * S - n * M - q * y) * ba, a[12] = (k * 
        ka - h * ja - l * P) * ba, a[13] = (c * ja - e * ka + d * P) * ba, a[14] = (v * x - u * W - w * y) * ba, a[15] = (n * W - p * x + t * y) * ba, a) : null;
      }, adjoint:function(a, b) {
        var c = b[0], e = b[1], d = b[2], f = b[3], h = b[4], k = b[5], l = b[6], m = b[7], n = b[8], p = b[9], t = b[10], q = b[11], u = b[12], v = b[13], w = b[14];
        b = b[15];
        return a[0] = k * (t * b - q * w) - p * (l * b - m * w) + v * (l * q - m * t), a[1] = -(e * (t * b - q * w) - p * (d * b - f * w) + v * (d * q - f * t)), a[2] = e * (l * b - m * w) - k * (d * b - f * w) + v * (d * m - f * l), a[3] = -(e * (l * q - m * t) - k * (d * q - f * t) + p * (d * m - f * l)), a[4] = -(h * (t * b - q * w) - n * (l * b - m * w) + u * (l * q - m * t)), a[5] = c * (t * b - q * w) - n * (d * b - f * w) + u * (d * q - f * t), a[6] = -(c * (l * b - m * w) - h * (d * b - f * 
        w) + u * (d * m - f * l)), a[7] = c * (l * q - m * t) - h * (d * q - f * t) + n * (d * m - f * l), a[8] = h * (p * b - q * v) - n * (k * b - m * v) + u * (k * q - m * p), a[9] = -(c * (p * b - q * v) - n * (e * b - f * v) + u * (e * q - f * p)), a[10] = c * (k * b - m * v) - h * (e * b - f * v) + u * (e * m - f * k), a[11] = -(c * (k * q - m * p) - h * (e * q - f * p) + n * (e * m - f * k)), a[12] = -(h * (p * w - t * v) - n * (k * w - l * v) + u * (k * t - l * p)), a[13] = c * (p * w - t * 
        v) - n * (e * w - d * v) + u * (e * t - d * p), a[14] = -(c * (k * w - l * v) - h * (e * w - d * v) + u * (e * l - d * k)), a[15] = c * (k * t - l * p) - h * (e * t - d * p) + n * (e * l - d * k), a;
      }, determinant:function(a) {
        var b = a[0], c = a[1], e = a[2], d = a[3], f = a[4], h = a[5], k = a[6], l = a[7], m = a[8], n = a[9], p = a[10], t = a[11], q = a[12], u = a[13], w = a[14];
        a = a[15];
        return (b * h - c * f) * (p * a - t * w) - (b * k - e * f) * (n * a - t * u) + (b * l - d * f) * (n * w - p * u) + (c * k - e * h) * (m * a - t * q) - (c * l - d * h) * (m * w - p * q) + (e * l - d * k) * (m * u - n * q);
      }, multiply:function(a, b, c) {
        var e = b[0], d = b[1], f = b[2], h = b[3], k = b[4], l = b[5], m = b[6], n = b[7], p = b[8], t = b[9], q = b[10], u = b[11], v = b[12], w = b[13], y = b[14];
        b = b[15];
        var x = c[0], z = c[1], W = c[2], M = c[3];
        return a[0] = x * e + z * k + W * p + M * v, a[1] = x * d + z * l + W * t + M * w, a[2] = x * f + z * m + W * q + M * y, a[3] = x * h + z * n + W * u + M * b, x = c[4], z = c[5], W = c[6], M = c[7], a[4] = x * e + z * k + W * p + M * v, a[5] = x * d + z * l + W * t + M * w, a[6] = x * f + z * m + W * q + M * y, a[7] = x * h + z * n + W * u + M * b, x = c[8], z = c[9], W = c[10], M = c[11], a[8] = x * e + z * k + W * p + M * v, a[9] = x * d + z * l + W * t + M * w, a[10] = x * f + z * m + 
        W * q + M * y, a[11] = x * h + z * n + W * u + M * b, x = c[12], z = c[13], W = c[14], M = c[15], a[12] = x * e + z * k + W * p + M * v, a[13] = x * d + z * l + W * t + M * w, a[14] = x * f + z * m + W * q + M * y, a[15] = x * h + z * n + W * u + M * b, a;
      }};
      y.mul = y.multiply;
      y.translate = function(a, b, c) {
        var e, d, f, h, k, l, m, n, p, t, q, u, v = c[0], w = c[1];
        c = c[2];
        return b === a ? (a[12] = b[0] * v + b[4] * w + b[8] * c + b[12], a[13] = b[1] * v + b[5] * w + b[9] * c + b[13], a[14] = b[2] * v + b[6] * w + b[10] * c + b[14], a[15] = b[3] * v + b[7] * w + b[11] * c + b[15]) : (e = b[0], d = b[1], f = b[2], h = b[3], k = b[4], l = b[5], m = b[6], n = b[7], p = b[8], t = b[9], q = b[10], u = b[11], a[0] = e, a[1] = d, a[2] = f, a[3] = h, a[4] = k, a[5] = l, a[6] = m, a[7] = n, a[8] = p, a[9] = t, a[10] = q, a[11] = u, a[12] = e * v + k * w + p * c + b[12], 
        a[13] = d * v + l * w + t * c + b[13], a[14] = f * v + m * w + q * c + b[14], a[15] = h * v + n * w + u * c + b[15]), a;
      };
      y.scale = function(a, b, c) {
        var e = c[0], d = c[1];
        c = c[2];
        return a[0] = b[0] * e, a[1] = b[1] * e, a[2] = b[2] * e, a[3] = b[3] * e, a[4] = b[4] * d, a[5] = b[5] * d, a[6] = b[6] * d, a[7] = b[7] * d, a[8] = b[8] * c, a[9] = b[9] * c, a[10] = b[10] * c, a[11] = b[11] * c, a[12] = b[12], a[13] = b[13], a[14] = b[14], a[15] = b[15], a;
      };
      y.rotate = function(a, c, e, d) {
        var f, h, k, l, m, n, p, t, q, u, v, w, y, x, z, C, W, M, O, P, ka, ha, ja, X, fa = d[0], ba = d[1];
        d = d[2];
        var la = Math.sqrt(fa * fa + ba * ba + d * d);
        return Math.abs(la) < b ? null : (la = 1 / la, fa *= la, ba *= la, d *= la, f = Math.sin(e), h = Math.cos(e), k = 1 - h, l = c[0], m = c[1], n = c[2], p = c[3], t = c[4], q = c[5], u = c[6], v = c[7], w = c[8], y = c[9], x = c[10], z = c[11], C = fa * fa * k + h, W = ba * fa * k + d * f, M = d * fa * k - ba * f, O = fa * ba * k - d * f, P = ba * ba * k + h, ka = d * ba * k + fa * f, ha = fa * d * k + ba * f, ja = ba * d * k - fa * f, X = d * d * k + h, a[0] = l * C + t * W + w * M, a[1] = 
        m * C + q * W + y * M, a[2] = n * C + u * W + x * M, a[3] = p * C + v * W + z * M, a[4] = l * O + t * P + w * ka, a[5] = m * O + q * P + y * ka, a[6] = n * O + u * P + x * ka, a[7] = p * O + v * P + z * ka, a[8] = l * ha + t * ja + w * X, a[9] = m * ha + q * ja + y * X, a[10] = n * ha + u * ja + x * X, a[11] = p * ha + v * ja + z * X, c !== a && (a[12] = c[12], a[13] = c[13], a[14] = c[14], a[15] = c[15]), a);
      };
      y.rotateX = function(a, b, c) {
        var e = Math.sin(c);
        c = Math.cos(c);
        var d = b[4], f = b[5], h = b[6], k = b[7], l = b[8], m = b[9], n = b[10], t = b[11];
        return b !== a && (a[0] = b[0], a[1] = b[1], a[2] = b[2], a[3] = b[3], a[12] = b[12], a[13] = b[13], a[14] = b[14], a[15] = b[15]), a[4] = d * c + l * e, a[5] = f * c + m * e, a[6] = h * c + n * e, a[7] = k * c + t * e, a[8] = l * c - d * e, a[9] = m * c - f * e, a[10] = n * c - h * e, a[11] = t * c - k * e, a;
      };
      y.rotateY = function(a, b, c) {
        var e = Math.sin(c);
        c = Math.cos(c);
        var d = b[0], f = b[1], h = b[2], k = b[3], l = b[8], m = b[9], n = b[10], t = b[11];
        return b !== a && (a[4] = b[4], a[5] = b[5], a[6] = b[6], a[7] = b[7], a[12] = b[12], a[13] = b[13], a[14] = b[14], a[15] = b[15]), a[0] = d * c - l * e, a[1] = f * c - m * e, a[2] = h * c - n * e, a[3] = k * c - t * e, a[8] = d * e + l * c, a[9] = f * e + m * c, a[10] = h * e + n * c, a[11] = k * e + t * c, a;
      };
      y.rotateZ = function(a, b, c) {
        var e = Math.sin(c);
        c = Math.cos(c);
        var d = b[0], f = b[1], h = b[2], k = b[3], l = b[4], m = b[5], n = b[6], t = b[7];
        return b !== a && (a[8] = b[8], a[9] = b[9], a[10] = b[10], a[11] = b[11], a[12] = b[12], a[13] = b[13], a[14] = b[14], a[15] = b[15]), a[0] = d * c + l * e, a[1] = f * c + m * e, a[2] = h * c + n * e, a[3] = k * c + t * e, a[4] = l * c - d * e, a[5] = m * c - f * e, a[6] = n * c - h * e, a[7] = t * c - k * e, a;
      };
      y.fromRotationTranslation = function(a, b, c) {
        var e = b[0], d = b[1], f = b[2], h = b[3], k = e + e, l = d + d, m = f + f;
        b = e * k;
        var n = e * l;
        e *= m;
        var t = d * l;
        d *= m;
        f *= m;
        k *= h;
        l *= h;
        h *= m;
        return a[0] = 1 - (t + f), a[1] = n + h, a[2] = e - l, a[3] = 0, a[4] = n - h, a[5] = 1 - (b + f), a[6] = d + k, a[7] = 0, a[8] = e + l, a[9] = d - k, a[10] = 1 - (b + t), a[11] = 0, a[12] = c[0], a[13] = c[1], a[14] = c[2], a[15] = 1, a;
      };
      y.fromQuat = function(a, b) {
        var c = b[0], e = b[1], d = b[2];
        b = b[3];
        var f = c + c, h = e + e, k = d + d;
        c *= f;
        var l = e * f;
        e *= h;
        var m = d * f, n = d * h;
        d *= k;
        f *= b;
        h *= b;
        b *= k;
        return a[0] = 1 - e - d, a[1] = l + b, a[2] = m - h, a[3] = 0, a[4] = l - b, a[5] = 1 - c - d, a[6] = n + f, a[7] = 0, a[8] = m + h, a[9] = n - f, a[10] = 1 - c - e, a[11] = 0, a[12] = 0, a[13] = 0, a[14] = 0, a[15] = 1, a;
      };
      y.frustum = function(a, b, c, e, d, f, h) {
        var k = 1 / (c - b), l = 1 / (d - e), m = 1 / (f - h);
        return a[0] = 2 * f * k, a[1] = 0, a[2] = 0, a[3] = 0, a[4] = 0, a[5] = 2 * f * l, a[6] = 0, a[7] = 0, a[8] = (c + b) * k, a[9] = (d + e) * l, a[10] = (h + f) * m, a[11] = -1, a[12] = 0, a[13] = 0, a[14] = h * f * 2 * m, a[15] = 0, a;
      };
      y.perspective = function(a, b, c, e, d) {
        b = 1 / Math.tan(b / 2);
        var f = 1 / (e - d);
        return a[0] = b / c, a[1] = 0, a[2] = 0, a[3] = 0, a[4] = 0, a[5] = b, a[6] = 0, a[7] = 0, a[8] = 0, a[9] = 0, a[10] = (d + e) * f, a[11] = -1, a[12] = 0, a[13] = 0, a[14] = 2 * d * e * f, a[15] = 0, a;
      };
      y.ortho = function(a, b, c, e, d, f, h) {
        var k = 1 / (b - c), l = 1 / (e - d), m = 1 / (f - h);
        return a[0] = -2 * k, a[1] = 0, a[2] = 0, a[3] = 0, a[4] = 0, a[5] = -2 * l, a[6] = 0, a[7] = 0, a[8] = 0, a[9] = 0, a[10] = 2 * m, a[11] = 0, a[12] = (b + c) * k, a[13] = (d + e) * l, a[14] = (h + f) * m, a[15] = 1, a;
      };
      y.lookAt = function(a, c, e, d) {
        var f, h, k, l, m, n, t, p, q, u, v = c[0], w = c[1];
        c = c[2];
        var x = d[0], z = d[1];
        d = d[2];
        var C = e[0], S = e[1];
        e = e[2];
        return Math.abs(v - C) < b && Math.abs(w - S) < b && Math.abs(c - e) < b ? y.identity(a) : (t = v - C, p = w - S, q = c - e, u = 1 / Math.sqrt(t * t + p * p + q * q), t *= u, p *= u, q *= u, f = z * q - d * p, h = d * t - x * q, k = x * p - z * t, u = Math.sqrt(f * f + h * h + k * k), u ? (u = 1 / u, f *= u, h *= u, k *= u) : (f = 0, h = 0, k = 0), l = p * k - q * h, m = q * f - t * k, n = t * h - p * f, u = Math.sqrt(l * l + m * m + n * n), u ? (u = 1 / u, l *= u, m *= u, n *= u) : (l = 
        0, m = 0, n = 0), a[0] = f, a[1] = l, a[2] = t, a[3] = 0, a[4] = h, a[5] = m, a[6] = p, a[7] = 0, a[8] = k, a[9] = n, a[10] = q, a[11] = 0, a[12] = -(f * v + h * w + k * c), a[13] = -(l * v + m * w + n * c), a[14] = -(t * v + p * w + q * c), a[15] = 1, a);
      };
      y.str = function(a) {
        return "mat4(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ", " + a[8] + ", " + a[9] + ", " + a[10] + ", " + a[11] + ", " + a[12] + ", " + a[13] + ", " + a[14] + ", " + a[15] + ")";
      };
      y.frob = function(a) {
        return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2));
      };
      "undefined" != typeof a && (a.mat4 = y);
      var x = {create:function() {
        var a = new c(4);
        return a[0] = 0, a[1] = 0, a[2] = 0, a[3] = 1, a;
      }};
      x.rotationTo = function() {
        var a = l.create(), b = l.fromValues(1, 0, 0), c = l.fromValues(0, 1, 0);
        return function(e, d, f) {
          var h = l.dot(d, f);
          return -.999999 > h ? (l.cross(a, b, d), 1E-6 > l.length(a) && l.cross(a, c, d), l.normalize(a, a), x.setAxisAngle(e, a, Math.PI), e) : .999999 < h ? (e[0] = 0, e[1] = 0, e[2] = 0, e[3] = 1, e) : (l.cross(a, d, f), e[0] = a[0], e[1] = a[1], e[2] = a[2], e[3] = 1 + h, x.normalize(e, e));
        };
      }();
      x.setAxes = function() {
        var a = w.create();
        return function(b, c, e, d) {
          return a[0] = e[0], a[3] = e[1], a[6] = e[2], a[1] = d[0], a[4] = d[1], a[7] = d[2], a[2] = -c[0], a[5] = -c[1], a[8] = -c[2], x.normalize(b, x.fromMat3(b, a));
        };
      }();
      x.clone = u.clone;
      x.fromValues = u.fromValues;
      x.copy = u.copy;
      x.set = u.set;
      x.identity = function(a) {
        return a[0] = 0, a[1] = 0, a[2] = 0, a[3] = 1, a;
      };
      x.setAxisAngle = function(a, b, c) {
        c *= .5;
        var e = Math.sin(c);
        return a[0] = e * b[0], a[1] = e * b[1], a[2] = e * b[2], a[3] = Math.cos(c), a;
      };
      x.add = u.add;
      x.multiply = function(a, b, c) {
        var e = b[0], d = b[1], f = b[2];
        b = b[3];
        var h = c[0], k = c[1], l = c[2];
        c = c[3];
        return a[0] = e * c + b * h + d * l - f * k, a[1] = d * c + b * k + f * h - e * l, a[2] = f * c + b * l + e * k - d * h, a[3] = b * c - e * h - d * k - f * l, a;
      };
      x.mul = x.multiply;
      x.scale = u.scale;
      x.rotateX = function(a, b, c) {
        c *= .5;
        var e = b[0], d = b[1], f = b[2];
        b = b[3];
        var h = Math.sin(c);
        c = Math.cos(c);
        return a[0] = e * c + b * h, a[1] = d * c + f * h, a[2] = f * c - d * h, a[3] = b * c - e * h, a;
      };
      x.rotateY = function(a, b, c) {
        c *= .5;
        var e = b[0], d = b[1], f = b[2];
        b = b[3];
        var h = Math.sin(c);
        c = Math.cos(c);
        return a[0] = e * c - f * h, a[1] = d * c + b * h, a[2] = f * c + e * h, a[3] = b * c - d * h, a;
      };
      x.rotateZ = function(a, b, c) {
        c *= .5;
        var e = b[0], d = b[1], f = b[2];
        b = b[3];
        var h = Math.sin(c);
        c = Math.cos(c);
        return a[0] = e * c + d * h, a[1] = d * c - e * h, a[2] = f * c + b * h, a[3] = b * c - f * h, a;
      };
      x.calculateW = function(a, b) {
        var c = b[0], e = b[1];
        b = b[2];
        return a[0] = c, a[1] = e, a[2] = b, a[3] = -Math.sqrt(Math.abs(1 - c * c - e * e - b * b)), a;
      };
      x.dot = u.dot;
      x.lerp = u.lerp;
      x.slerp = function(a, b, c, e) {
        var d, f, h, k, l, m = b[0], n = b[1], t = b[2];
        b = b[3];
        var p = c[0], q = c[1], u = c[2];
        c = c[3];
        return f = m * p + n * q + t * u + b * c, 0 > f && (f = -f, p = -p, q = -q, u = -u, c = -c), 1E-6 < 1 - f ? (d = Math.acos(f), h = Math.sin(d), k = Math.sin((1 - e) * d) / h, l = Math.sin(e * d) / h) : (k = 1 - e, l = e), a[0] = k * m + l * p, a[1] = k * n + l * q, a[2] = k * t + l * u, a[3] = k * b + l * c, a;
      };
      x.invert = function(a, b) {
        var c = b[0], e = b[1], d = b[2];
        b = b[3];
        var f = c * c + e * e + d * d + b * b;
        f = f ? 1 / f : 0;
        return a[0] = -c * f, a[1] = -e * f, a[2] = -d * f, a[3] = b * f, a;
      };
      x.conjugate = function(a, b) {
        return a[0] = -b[0], a[1] = -b[1], a[2] = -b[2], a[3] = b[3], a;
      };
      x.length = u.length;
      x.len = x.length;
      x.squaredLength = u.squaredLength;
      x.sqrLen = x.squaredLength;
      x.normalize = u.normalize;
      x.fromMat3 = function(a, b) {
        var c = b[0] + b[4] + b[8];
        if (0 < c) {
          c = Math.sqrt(c + 1), a[3] = .5 * c, c = .5 / c, a[0] = (b[7] - b[5]) * c, a[1] = (b[2] - b[6]) * c, a[2] = (b[3] - b[1]) * c;
        } else {
          var e = 0;
          b[4] > b[0] && (e = 1);
          b[8] > b[3 * e + e] && (e = 2);
          var d = (e + 1) % 3, f = (e + 2) % 3;
          c = Math.sqrt(b[3 * e + e] - b[3 * d + d] - b[3 * f + f] + 1);
          a[e] = .5 * c;
          c = .5 / c;
          a[3] = (b[3 * f + d] - b[3 * d + f]) * c;
          a[d] = (b[3 * d + e] + b[3 * e + d]) * c;
          a[f] = (b[3 * f + e] + b[3 * e + f]) * c;
        }
        return a;
      };
      x.str = function(a) {
        return "quat(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ")";
      };
      "undefined" != typeof a && (a.quat = x);
    })(b);
  }(this);
}, {}], 24:[function(a, c, k) {
  (function() {
    var a = this, f = a._, d = {}, h = Array.prototype, n = Object.prototype, q = h.push, m = h.slice, t = h.concat, e = n.toString, l = n.hasOwnProperty, u = h.forEach, w = h.map, y = h.reduce, x = h.reduceRight, p = h.filter, v = h.every, z = h.some, C = h.indexOf, A = h.lastIndexOf;
    n = Array.isArray;
    var D = Object.keys, E = Function.prototype.bind, B = function(a) {
      return a instanceof B ? a : this instanceof B ? void(this._wrapped = a) : new B(a);
    };
    "undefined" != typeof k ? ("undefined" != typeof c && c.exports && (k = c.exports = B), k._ = B) : a._ = B;
    B.VERSION = "1.4.4";
    var G = B.each = B.forEach = function(a, b, c) {
      if (null != a) {
        if (u && a.forEach === u) {
          a.forEach(b, c);
        } else {
          if (a.length === +a.length) {
            for (var e = 0, f = a.length; f > e && b.call(c, a[e], e, a) !== d; e++) {
            }
          } else {
            for (e in a) {
              if (B.has(a, e) && b.call(c, a[e], e, a) === d) {
                break;
              }
            }
          }
        }
      }
    };
    B.map = B.collect = function(a, b, c) {
      var e = [];
      return null == a ? e : w && a.map === w ? a.map(b, c) : (G(a, function(a, d, f) {
        e[e.length] = b.call(c, a, d, f);
      }), e);
    };
    B.reduce = B.foldl = B.inject = function(a, b, c, e) {
      var d = 2 < arguments.length;
      if (null == a && (a = []), y && a.reduce === y) {
        return e && (b = B.bind(b, e)), d ? a.reduce(b, c) : a.reduce(b);
      }
      if (G(a, function(a, f, h) {
        d ? c = b.call(e, c, a, f, h) : (c = a, d = !0);
      }), !d) {
        throw new TypeError("Reduce of empty array with no initial value");
      }
      return c;
    };
    B.reduceRight = B.foldr = function(a, b, c, e) {
      var d = 2 < arguments.length;
      if (null == a && (a = []), x && a.reduceRight === x) {
        return e && (b = B.bind(b, e)), d ? a.reduceRight(b, c) : a.reduceRight(b);
      }
      var f = a.length;
      if (f !== +f) {
        var h = B.keys(a);
        f = h.length;
      }
      if (G(a, function(k, l, m) {
        l = h ? h[--f] : --f;
        d ? c = b.call(e, c, a[l], l, m) : (c = a[l], d = !0);
      }), !d) {
        throw new TypeError("Reduce of empty array with no initial value");
      }
      return c;
    };
    B.find = B.detect = function(a, b, c) {
      var e;
      return H(a, function(a, d, f) {
        return b.call(c, a, d, f) ? (e = a, !0) : void 0;
      }), e;
    };
    B.filter = B.select = function(a, b, c) {
      var e = [];
      return null == a ? e : p && a.filter === p ? a.filter(b, c) : (G(a, function(a, d, f) {
        b.call(c, a, d, f) && (e[e.length] = a);
      }), e);
    };
    B.reject = function(a, b, c) {
      return B.filter(a, function(a, e, d) {
        return !b.call(c, a, e, d);
      }, c);
    };
    B.every = B.all = function(a, b, c) {
      b || (b = B.identity);
      var e = !0;
      return null == a ? e : v && a.every === v ? a.every(b, c) : (G(a, function(a, f, h) {
        return (e = e && b.call(c, a, f, h)) ? void 0 : d;
      }), !!e);
    };
    var H = B.some = B.any = function(a, b, c) {
      b || (b = B.identity);
      var e = !1;
      return null == a ? e : z && a.some === z ? a.some(b, c) : (G(a, function(a, f, h) {
        return e || (e = b.call(c, a, f, h)) ? d : void 0;
      }), !!e);
    };
    B.contains = B.include = function(a, b) {
      return null == a ? !1 : C && a.indexOf === C ? -1 != a.indexOf(b) : H(a, function(a) {
        return a === b;
      });
    };
    B.invoke = function(a, b) {
      var c = m.call(arguments, 2), e = B.isFunction(b);
      return B.map(a, function(a) {
        return (e ? b : a[b]).apply(a, c);
      });
    };
    B.pluck = function(a, b) {
      return B.map(a, function(a) {
        return a[b];
      });
    };
    B.where = function(a, b, c) {
      return B.isEmpty(b) ? c ? null : [] : B[c ? "find" : "filter"](a, function(a) {
        for (var c in b) {
          if (b[c] !== a[c]) {
            return !1;
          }
        }
        return !0;
      });
    };
    B.findWhere = function(a, b) {
      return B.where(a, b, !0);
    };
    B.max = function(a, b, c) {
      if (!b && B.isArray(a) && a[0] === +a[0] && 65535 > a.length) {
        return Math.max.apply(Math, a);
      }
      if (!b && B.isEmpty(a)) {
        return -1 / 0;
      }
      var e = {computed:-1 / 0, value:-1 / 0};
      return G(a, function(a, d, f) {
        d = b ? b.call(c, a, d, f) : a;
        d >= e.computed && (e = {value:a, computed:d});
      }), e.value;
    };
    B.min = function(a, b, c) {
      if (!b && B.isArray(a) && a[0] === +a[0] && 65535 > a.length) {
        return Math.min.apply(Math, a);
      }
      if (!b && B.isEmpty(a)) {
        return 1 / 0;
      }
      var e = {computed:1 / 0, value:1 / 0};
      return G(a, function(a, d, f) {
        d = b ? b.call(c, a, d, f) : a;
        d < e.computed && (e = {value:a, computed:d});
      }), e.value;
    };
    B.shuffle = function(a) {
      var b, c = 0, e = [];
      return G(a, function(a) {
        b = B.random(c++);
        e[c - 1] = e[b];
        e[b] = a;
      }), e;
    };
    var K = function(a) {
      return B.isFunction(a) ? a : function(b) {
        return b[a];
      };
    };
    B.sortBy = function(a, b, c) {
      var e = K(b);
      return B.pluck(B.map(a, function(a, b, d) {
        return {value:a, index:b, criteria:e.call(c, a, b, d)};
      }).sort(function(a, b) {
        var c = a.criteria, e = b.criteria;
        if (c !== e) {
          if (c > e || void 0 === c) {
            return 1;
          }
          if (e > c || void 0 === e) {
            return -1;
          }
        }
        return a.index < b.index ? -1 : 1;
      }), "value");
    };
    var I = function(a, b, c, e) {
      var d = {}, f = K(b || B.identity);
      return G(a, function(b, h) {
        h = f.call(c, b, h, a);
        e(d, h, b);
      }), d;
    };
    B.groupBy = function(a, b, c) {
      return I(a, b, c, function(a, b, c) {
        (B.has(a, b) ? a[b] : a[b] = []).push(c);
      });
    };
    B.countBy = function(a, b, c) {
      return I(a, b, c, function(a, b) {
        B.has(a, b) || (a[b] = 0);
        a[b]++;
      });
    };
    B.sortedIndex = function(a, b, c, e) {
      c = null == c ? B.identity : K(c);
      b = c.call(e, b);
      for (var d = 0, f = a.length; f > d;) {
        var h = d + f >>> 1;
        c.call(e, a[h]) < b ? d = h + 1 : f = h;
      }
      return d;
    };
    B.toArray = function(a) {
      return a ? B.isArray(a) ? m.call(a) : a.length === +a.length ? B.map(a, B.identity) : B.values(a) : [];
    };
    B.size = function(a) {
      return null == a ? 0 : a.length === +a.length ? a.length : B.keys(a).length;
    };
    B.first = B.head = B.take = function(a, b, c) {
      return null == a ? void 0 : null == b || c ? a[0] : m.call(a, 0, b);
    };
    B.initial = function(a, b, c) {
      return m.call(a, 0, a.length - (null == b || c ? 1 : b));
    };
    B.last = function(a, b, c) {
      return null == a ? void 0 : null == b || c ? a[a.length - 1] : m.call(a, Math.max(a.length - b, 0));
    };
    B.rest = B.tail = B.drop = function(a, b, c) {
      return m.call(a, null == b || c ? 1 : b);
    };
    B.compact = function(a) {
      return B.filter(a, B.identity);
    };
    var L = function(a, b, c) {
      return G(a, function(a) {
        B.isArray(a) ? b ? q.apply(c, a) : L(a, b, c) : c.push(a);
      }), c;
    };
    B.flatten = function(a, b) {
      return L(a, b, []);
    };
    B.without = function(a) {
      return B.difference(a, m.call(arguments, 1));
    };
    B.uniq = B.unique = function(a, b, c, e) {
      B.isFunction(b) && (e = c, c = b, b = !1);
      c = c ? B.map(a, c, e) : a;
      var d = [], f = [];
      return G(c, function(c, e) {
        (b ? e && f[f.length - 1] === c : B.contains(f, c)) || (f.push(c), d.push(a[e]));
      }), d;
    };
    B.union = function() {
      return B.uniq(t.apply(h, arguments));
    };
    B.intersection = function(a) {
      var b = m.call(arguments, 1);
      return B.filter(B.uniq(a), function(a) {
        return B.every(b, function(b) {
          return 0 <= B.indexOf(b, a);
        });
      });
    };
    B.difference = function(a) {
      var b = t.apply(h, m.call(arguments, 1));
      return B.filter(a, function(a) {
        return !B.contains(b, a);
      });
    };
    B.zip = function() {
      for (var a = m.call(arguments), b = B.max(B.pluck(a, "length")), c = Array(b), e = 0; b > e; e++) {
        c[e] = B.pluck(a, "" + e);
      }
      return c;
    };
    B.object = function(a, b) {
      if (null == a) {
        return {};
      }
      for (var c = {}, e = 0, d = a.length; d > e; e++) {
        b ? c[a[e]] = b[e] : c[a[e][0]] = a[e][1];
      }
      return c;
    };
    B.indexOf = function(a, b, c) {
      if (null == a) {
        return -1;
      }
      var e = 0, d = a.length;
      if (c) {
        if ("number" != typeof c) {
          return e = B.sortedIndex(a, b), a[e] === b ? e : -1;
        }
        e = 0 > c ? Math.max(0, d + c) : c;
      }
      if (C && a.indexOf === C) {
        return a.indexOf(b, c);
      }
      for (; d > e; e++) {
        if (a[e] === b) {
          return e;
        }
      }
      return -1;
    };
    B.lastIndexOf = function(a, b, c) {
      if (null == a) {
        return -1;
      }
      var e = null != c;
      if (A && a.lastIndexOf === A) {
        return e ? a.lastIndexOf(b, c) : a.lastIndexOf(b);
      }
      for (c = e ? c : a.length; c--;) {
        if (a[c] === b) {
          return c;
        }
      }
      return -1;
    };
    B.range = function(a, b, c) {
      1 >= arguments.length && (b = a || 0, a = 0);
      c = arguments[2] || 1;
      for (var e = Math.max(Math.ceil((b - a) / c), 0), d = 0, f = Array(e); e > d;) {
        f[d++] = a, a += c;
      }
      return f;
    };
    B.bind = function(a, b) {
      if (a.bind === E && E) {
        return E.apply(a, m.call(arguments, 1));
      }
      var c = m.call(arguments, 2);
      return function() {
        return a.apply(b, c.concat(m.call(arguments)));
      };
    };
    B.partial = function(a) {
      var b = m.call(arguments, 1);
      return function() {
        return a.apply(this, b.concat(m.call(arguments)));
      };
    };
    B.bindAll = function(a) {
      var b = m.call(arguments, 1);
      return 0 === b.length && (b = B.functions(a)), G(b, function(b) {
        a[b] = B.bind(a[b], a);
      }), a;
    };
    B.memoize = function(a, b) {
      var c = {};
      return b || (b = B.identity), function() {
        var e = b.apply(this, arguments);
        return B.has(c, e) ? c[e] : c[e] = a.apply(this, arguments);
      };
    };
    B.delay = function(a, b) {
      var c = m.call(arguments, 2);
      return setTimeout(function() {
        return a.apply(null, c);
      }, b);
    };
    B.defer = function(a) {
      return B.delay.apply(B, [a, 1].concat(m.call(arguments, 1)));
    };
    B.throttle = function(a, b) {
      var c, e, d, f, h = 0, k = function() {
        h = new Date;
        d = null;
        f = a.apply(c, e);
      };
      return function() {
        var l = new Date, m = b - (l - h);
        return c = this, e = arguments, 0 >= m ? (clearTimeout(d), d = null, h = l, f = a.apply(c, e)) : d || (d = setTimeout(k, m)), f;
      };
    };
    B.debounce = function(a, b, c) {
      var e, d;
      return function() {
        var f = this, h = arguments, k = c && !e;
        return clearTimeout(e), e = setTimeout(function() {
          e = null;
          c || (d = a.apply(f, h));
        }, b), k && (d = a.apply(f, h)), d;
      };
    };
    B.once = function(a) {
      var b, c = !1;
      return function() {
        return c ? b : (c = !0, b = a.apply(this, arguments), a = null, b);
      };
    };
    B.wrap = function(a, b) {
      return function() {
        var c = [a];
        return q.apply(c, arguments), b.apply(this, c);
      };
    };
    B.compose = function() {
      var a = arguments;
      return function() {
        for (var b = arguments, c = a.length - 1; 0 <= c; c--) {
          b = [a[c].apply(this, b)];
        }
        return b[0];
      };
    };
    B.after = function(a, b) {
      return 0 >= a ? b() : function() {
        return 1 > --a ? b.apply(this, arguments) : void 0;
      };
    };
    B.keys = D || function(a) {
      if (a !== Object(a)) {
        throw new TypeError("Invalid object");
      }
      var b = [], c;
      for (c in a) {
        B.has(a, c) && (b[b.length] = c);
      }
      return b;
    };
    B.values = function(a) {
      var b = [], c;
      for (c in a) {
        B.has(a, c) && b.push(a[c]);
      }
      return b;
    };
    B.pairs = function(a) {
      var b = [], c;
      for (c in a) {
        B.has(a, c) && b.push([c, a[c]]);
      }
      return b;
    };
    B.invert = function(a) {
      var b = {}, c;
      for (c in a) {
        B.has(a, c) && (b[a[c]] = c);
      }
      return b;
    };
    B.functions = B.methods = function(a) {
      var b = [], c;
      for (c in a) {
        B.isFunction(a[c]) && b.push(c);
      }
      return b.sort();
    };
    B.extend = function(a) {
      return G(m.call(arguments, 1), function(b) {
        if (b) {
          for (var c in b) {
            a[c] = b[c];
          }
        }
      }), a;
    };
    B.pick = function(a) {
      var b = {}, c = t.apply(h, m.call(arguments, 1));
      return G(c, function(c) {
        c in a && (b[c] = a[c]);
      }), b;
    };
    B.omit = function(a) {
      var b = {}, c = t.apply(h, m.call(arguments, 1)), e;
      for (e in a) {
        B.contains(c, e) || (b[e] = a[e]);
      }
      return b;
    };
    B.defaults = function(a) {
      return G(m.call(arguments, 1), function(b) {
        if (b) {
          for (var c in b) {
            null == a[c] && (a[c] = b[c]);
          }
        }
      }), a;
    };
    B.clone = function(a) {
      return B.isObject(a) ? B.isArray(a) ? a.slice() : B.extend({}, a) : a;
    };
    B.tap = function(a, b) {
      return b(a), a;
    };
    var R = function(a, b, c, d) {
      if (a === b) {
        return 0 !== a || 1 / a == 1 / b;
      }
      if (null == a || null == b) {
        return a === b;
      }
      a instanceof B && (a = a._wrapped);
      b instanceof B && (b = b._wrapped);
      var f = e.call(a);
      if (f != e.call(b)) {
        return !1;
      }
      switch(f) {
        case "[object String]":
          return a == String(b);
        case "[object Number]":
          return a != +a ? b != +b : 0 == a ? 1 / a == 1 / b : a == +b;
        case "[object Date]":
        case "[object Boolean]":
          return +a == +b;
        case "[object RegExp]":
          return a.source == b.source && a.global == b.global && a.multiline == b.multiline && a.ignoreCase == b.ignoreCase;
      }
      if ("object" != typeof a || "object" != typeof b) {
        return !1;
      }
      for (var h = c.length; h--;) {
        if (c[h] == a) {
          return d[h] == b;
        }
      }
      c.push(a);
      d.push(b);
      h = 0;
      var k = !0;
      if ("[object Array]" == f) {
        if (h = a.length, k = h == b.length) {
          for (; h-- && (k = R(a[h], b[h], c, d));) {
          }
        }
      } else {
        f = a.constructor;
        var l = b.constructor;
        if (f !== l && !(B.isFunction(f) && f instanceof f && B.isFunction(l) && l instanceof l)) {
          return !1;
        }
        for (var m in a) {
          if (B.has(a, m) && (h++, !(k = B.has(b, m) && R(a[m], b[m], c, d)))) {
            break;
          }
        }
        if (k) {
          for (m in b) {
            if (B.has(b, m) && !h--) {
              break;
            }
          }
          k = !h;
        }
      }
      return c.pop(), d.pop(), k;
    };
    B.isEqual = function(a, b) {
      return R(a, b, [], []);
    };
    B.isEmpty = function(a) {
      if (null == a) {
        return !0;
      }
      if (B.isArray(a) || B.isString(a)) {
        return 0 === a.length;
      }
      for (var b in a) {
        if (B.has(a, b)) {
          return !1;
        }
      }
      return !0;
    };
    B.isElement = function(a) {
      return !(!a || 1 !== a.nodeType);
    };
    B.isArray = n || function(a) {
      return "[object Array]" == e.call(a);
    };
    B.isObject = function(a) {
      return a === Object(a);
    };
    G("Arguments Function String Number Date RegExp".split(" "), function(a) {
      B["is" + a] = function(b) {
        return e.call(b) == "[object " + a + "]";
      };
    });
    B.isArguments(arguments) || (B.isArguments = function(a) {
      return !(!a || !B.has(a, "callee"));
    });
    "function" != typeof/./ && (B.isFunction = function(a) {
      return "function" == typeof a;
    });
    B.isFinite = function(a) {
      return isFinite(a) && !isNaN(parseFloat(a));
    };
    B.isNaN = function(a) {
      return B.isNumber(a) && a != +a;
    };
    B.isBoolean = function(a) {
      return !0 === a || !1 === a || "[object Boolean]" == e.call(a);
    };
    B.isNull = function(a) {
      return null === a;
    };
    B.isUndefined = function(a) {
      return void 0 === a;
    };
    B.has = function(a, b) {
      return l.call(a, b);
    };
    B.noConflict = function() {
      return a._ = f, this;
    };
    B.identity = function(a) {
      return a;
    };
    B.times = function(a, b, c) {
      for (var e = Array(a), d = 0; a > d; d++) {
        e[d] = b.call(c, d);
      }
      return e;
    };
    B.random = function(a, b) {
      return null == b && (b = a, a = 0), a + Math.floor(Math.random() * (b - a + 1));
    };
    var J = {escape:{"&":"&amp;", "<":"&lt;", ">":"&gt;", '"':"&quot;", "'":"&#x27;", "/":"&#x2F;"}};
    J.unescape = B.invert(J.escape);
    var Q = {escape:new RegExp("[" + B.keys(J.escape).join("") + "]", "g"), unescape:new RegExp("(" + B.keys(J.unescape).join("|") + ")", "g")};
    B.each(["escape", "unescape"], function(a) {
      B[a] = function(b) {
        return null == b ? "" : ("" + b).replace(Q[a], function(b) {
          return J[a][b];
        });
      };
    });
    B.result = function(a, b) {
      if (null == a) {
        return null;
      }
      b = a[b];
      return B.isFunction(b) ? b.call(a) : b;
    };
    B.mixin = function(a) {
      G(B.functions(a), function(b) {
        var c = B[b] = a[b];
        B.prototype[b] = function() {
          var a = [this._wrapped];
          return q.apply(a, arguments), W.call(this, c.apply(B, a));
        };
      });
    };
    var aa = 0;
    B.uniqueId = function(a) {
      var b = ++aa + "";
      return a ? a + b : b;
    };
    B.templateSettings = {evaluate:/<%([\s\S]+?)%>/g, interpolate:/<%=([\s\S]+?)%>/g, escape:/<%-([\s\S]+?)%>/g};
    var V = /(.)^/, N = {"'":"'", "\\":"\\", "\r":"r", "\n":"n", "\t":"t", "\u2028":"u2028", "\u2029":"u2029"}, S = /\\|'|\r|\n|\t|\u2028|\u2029/g;
    B.template = function(a, b, c) {
      c = B.defaults({}, c, B.templateSettings);
      var e = new RegExp([(c.escape || V).source, (c.interpolate || V).source, (c.evaluate || V).source].join("|") + "|$", "g"), d = 0, f = "__p+='";
      a.replace(e, function(b, c, e, h, k) {
        return f += a.slice(d, k).replace(S, function(a) {
          return "\\" + N[a];
        }), c && (f += "'+\n((__t=(" + c + "))==null?'':_.escape(__t))+\n'"), e && (f += "'+\n((__t=(" + e + "))==null?'':__t)+\n'"), h && (f += "';\n" + h + "\n__p+='"), d = k + b.length, b;
      });
      f += "';\n";
      c.variable || (f = "with(obj||{}){\n" + f + "}\n");
      f = "var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n" + f + "return __p;\n";
      try {
        var h = new Function(c.variable || "obj", "_", f);
      } catch (fa) {
        throw fa.source = f, fa;
      }
      if (b) {
        return h(b, B);
      }
      b = function(a) {
        return h.call(this, a, B);
      };
      return b.source = "function(" + (c.variable || "obj") + "){\n" + f + "}", b;
    };
    B.chain = function(a) {
      return B(a).chain();
    };
    var W = function(a) {
      return this._chain ? B(a).chain() : a;
    };
    B.mixin(B);
    G("pop push reverse shift sort splice unshift".split(" "), function(a) {
      var b = h[a];
      B.prototype[a] = function() {
        var c = this._wrapped;
        return b.apply(c, arguments), "shift" != a && "splice" != a || 0 !== c.length || delete c[0], W.call(this, c);
      };
    });
    G(["concat", "join", "slice"], function(a) {
      var b = h[a];
      B.prototype[a] = function() {
        return W.call(this, b.apply(this._wrapped, arguments));
      };
    });
    B.extend(B.prototype, {chain:function() {
      return this._chain = !0, this;
    }, value:function() {
      return this._wrapped;
    }});
  }).call(this);
}, {}], 25:[function(a) {
  "undefined" != typeof window && "function" != typeof window.requestAnimationFrame && (window.requestAnimationFrame = window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(a) {
    setTimeout(a, 1E3 / 60);
  });
  Leap = a("../lib/index");
}, {"../lib/index":11}]}, {}, [25]);
var SPE = {distributions:{BOX:1, SPHERE:2, DISC:3}, valueOverLifetimeLength:4};
"function" == typeof define && define.amd ? define("spe", SPE) : "undefined" != typeof exports && "undefined" != typeof module && (module.exports = SPE);
SPE.TypedArrayHelper = function(a, c, k, b) {
  this.componentSize = k || 1;
  this.size = c || 1;
  this.TypedArrayConstructor = a || Float32Array;
  this.array = new a(c * this.componentSize);
  this.indexOffset = b || 0;
};
SPE.TypedArrayHelper.constructor = SPE.TypedArrayHelper;
SPE.TypedArrayHelper.prototype.setSize = function(a, c) {
  var k = this.array.length;
  return c || (a *= this.componentSize), k > a ? this.shrink(a) : a > k ? this.grow(a) : void console.info("TypedArray is already of size:", a + ".", "Will not resize.");
};
SPE.TypedArrayHelper.prototype.shrink = function(a) {
  return this.array = this.array.subarray(0, a), this.size = a, this;
};
SPE.TypedArrayHelper.prototype.grow = function(a) {
  var c = this.array, k = new this.TypedArrayConstructor(a);
  return k.set(c), this.array = k, this.size = a, this;
};
SPE.TypedArrayHelper.prototype.splice = function(a, c) {
  a *= this.componentSize;
  c *= this.componentSize;
  for (var k = [], b = this.array, f = b.length, d = 0; f > d; ++d) {
    (a > d || d >= c) && k.push(b[d]);
  }
  return this.setFromArray(0, k), this;
};
SPE.TypedArrayHelper.prototype.setFromArray = function(a, c) {
  var k = a + c.length;
  return k > this.array.length ? this.grow(k) : k < this.array.length && this.shrink(k), this.array.set(c, this.indexOffset + a), this;
};
SPE.TypedArrayHelper.prototype.setVec2 = function(a, c) {
  return this.setVec2Components(a, c.x, c.y);
};
SPE.TypedArrayHelper.prototype.setVec2Components = function(a, c, k) {
  var b = this.array;
  a = this.indexOffset + a * this.componentSize;
  return b[a] = c, b[a + 1] = k, this;
};
SPE.TypedArrayHelper.prototype.setVec3 = function(a, c) {
  return this.setVec3Components(a, c.x, c.y, c.z);
};
SPE.TypedArrayHelper.prototype.setVec3Components = function(a, c, k, b) {
  var f = this.array;
  a = this.indexOffset + a * this.componentSize;
  return f[a] = c, f[a + 1] = k, f[a + 2] = b, this;
};
SPE.TypedArrayHelper.prototype.setVec4 = function(a, c) {
  return this.setVec4Components(a, c.x, c.y, c.z, c.w);
};
SPE.TypedArrayHelper.prototype.setVec4Components = function(a, c, k, b, f) {
  var d = this.array;
  a = this.indexOffset + a * this.componentSize;
  return d[a] = c, d[a + 1] = k, d[a + 2] = b, d[a + 3] = f, this;
};
SPE.TypedArrayHelper.prototype.setMat3 = function(a, c) {
  return this.setFromArray(this.indexOffset + a * this.componentSize, c.elements);
};
SPE.TypedArrayHelper.prototype.setMat4 = function(a, c) {
  return this.setFromArray(this.indexOffset + a * this.componentSize, c.elements);
};
SPE.TypedArrayHelper.prototype.setColor = function(a, c) {
  return this.setVec3Components(a, c.r, c.g, c.b);
};
SPE.TypedArrayHelper.prototype.setNumber = function(a, c) {
  return this.array[this.indexOffset + a * this.componentSize] = c, this;
};
SPE.TypedArrayHelper.prototype.getValueAtIndex = function(a) {
  return this.array[this.indexOffset + a];
};
SPE.TypedArrayHelper.prototype.getComponentValueAtIndex = function(a) {
  return this.array.subarray(this.indexOffset + a * this.componentSize);
};
SPE.ShaderAttribute = function(a, c, k) {
  var b = SPE.ShaderAttribute.typeSizeMap;
  this.type = "string" == typeof a && b.hasOwnProperty(a) ? a : "f";
  this.componentSize = b[this.type];
  this.arrayType = k || Float32Array;
  this.bufferAttribute = this.typedArray = null;
  this.dynamicBuffer = !!c;
  this.updateMax = this.updateMin = 0;
};
SPE.ShaderAttribute.constructor = SPE.ShaderAttribute;
SPE.ShaderAttribute.typeSizeMap = {f:1, v2:2, v3:3, v4:4, c:3, m3:9, m4:16};
SPE.ShaderAttribute.prototype.setUpdateRange = function(a, c) {
  this.updateMin = Math.min(a * this.componentSize, this.updateMin * this.componentSize);
  this.updateMax = Math.max(c * this.componentSize, this.updateMax * this.componentSize);
};
SPE.ShaderAttribute.prototype.flagUpdate = function() {
  var a = this.bufferAttribute, c = a.updateRange;
  c.offset = this.updateMin;
  c.count = Math.min(this.updateMax - this.updateMin + this.componentSize, this.typedArray.array.length);
  a.needsUpdate = !0;
};
SPE.ShaderAttribute.prototype.resetUpdateRange = function() {
  this.updateMax = this.updateMin = 0;
};
SPE.ShaderAttribute.prototype.resetDynamic = function() {
  this.bufferAttribute.dynamic = this.dynamicBuffer;
};
SPE.ShaderAttribute.prototype.splice = function(a, c) {
  this.typedArray.splice(a, c);
  this.forceUpdateAll();
};
SPE.ShaderAttribute.prototype.forceUpdateAll = function() {
  this.bufferAttribute.array = this.typedArray.array;
  this.bufferAttribute.updateRange.offset = 0;
  this.bufferAttribute.updateRange.count = -1;
  this.bufferAttribute.dynamic = !1;
  this.bufferAttribute.needsUpdate = !0;
};
SPE.ShaderAttribute.prototype._ensureTypedArray = function(a) {
  null !== this.typedArray && this.typedArray.size === a * this.componentSize || (null !== this.typedArray && this.typedArray.size !== a ? this.typedArray.setSize(a) : null === this.typedArray && (this.typedArray = new SPE.TypedArrayHelper(this.arrayType, a, this.componentSize)));
};
SPE.ShaderAttribute.prototype._createBufferAttribute = function(a) {
  return this._ensureTypedArray(a), null !== this.bufferAttribute ? (this.bufferAttribute.array = this.typedArray.array, 81 <= parseFloat(THREE.REVISION) && (this.bufferAttribute.count = this.bufferAttribute.array.length / this.bufferAttribute.itemSize), void(this.bufferAttribute.needsUpdate = !0)) : (this.bufferAttribute = new THREE.BufferAttribute(this.typedArray.array, this.componentSize), void(this.bufferAttribute.dynamic = this.dynamicBuffer));
};
SPE.ShaderAttribute.prototype.getLength = function() {
  return null === this.typedArray ? 0 : this.typedArray.array.length;
};
SPE.shaderChunks = {defines:"#define PACKED_COLOR_SIZE 256.0\n#define PACKED_COLOR_DIVISOR 255.0", uniforms:"uniform float deltaTime;\nuniform float runTime;\nuniform sampler2D texture;\nuniform vec4 textureAnimation;\nuniform float scale;", attributes:"attribute vec4 acceleration;\nattribute vec3 velocity;\nattribute vec4 rotation;\nattribute vec3 rotationCenter;\nattribute vec4 params;\nattribute vec4 size;\nattribute vec4 angle;\nattribute vec4 color;\nattribute vec4 opacity;", varyings:"varying vec4 vColor;\n#ifdef SHOULD_ROTATE_TEXTURE\n    varying float vAngle;\n#endif\n#ifdef SHOULD_CALCULATE_SPRITE\n    varying vec4 vSpriteSheet;\n#endif", 
branchAvoidanceFunctions:"float when_gt(float x, float y) {\n    return max(sign(x - y), 0.0);\n}\nfloat when_lt(float x, float y) {\n    return min( max(1.0 - sign(x - y), 0.0), 1.0 );\n}\nfloat when_eq( float x, float y ) {\n    return 1.0 - abs( sign( x - y ) );\n}\nfloat when_ge(float x, float y) {\n  return 1.0 - when_lt(x, y);\n}\nfloat when_le(float x, float y) {\n  return 1.0 - when_gt(x, y);\n}\nfloat and(float a, float b) {\n    return a * b;\n}\nfloat or(float a, float b) {\n    return min(a + b, 1.0);\n}", 
unpackColor:"vec3 unpackColor( in float hex ) {\n   vec3 c = vec3( 0.0 );\n   float r = mod( (hex / PACKED_COLOR_SIZE / PACKED_COLOR_SIZE), PACKED_COLOR_SIZE );\n   float g = mod( (hex / PACKED_COLOR_SIZE), PACKED_COLOR_SIZE );\n   float b = mod( hex, PACKED_COLOR_SIZE );\n   c.r = r / PACKED_COLOR_DIVISOR;\n   c.g = g / PACKED_COLOR_DIVISOR;\n   c.b = b / PACKED_COLOR_DIVISOR;\n   return c;\n}", unpackRotationAxis:"vec3 unpackRotationAxis( in float hex ) {\n   vec3 c = vec3( 0.0 );\n   float r = mod( (hex / PACKED_COLOR_SIZE / PACKED_COLOR_SIZE), PACKED_COLOR_SIZE );\n   float g = mod( (hex / PACKED_COLOR_SIZE), PACKED_COLOR_SIZE );\n   float b = mod( hex, PACKED_COLOR_SIZE );\n   c.r = r / PACKED_COLOR_DIVISOR;\n   c.g = g / PACKED_COLOR_DIVISOR;\n   c.b = b / PACKED_COLOR_DIVISOR;\n   c *= vec3( 2.0 );\n   c -= vec3( 1.0 );\n   return c;\n}", 
floatOverLifetime:"float getFloatOverLifetime( in float positionInTime, in vec4 attr ) {\n    highp float value = 0.0;\n    float deltaAge = positionInTime * float( VALUE_OVER_LIFETIME_LENGTH - 1 );\n    float fIndex = 0.0;\n    float shouldApplyValue = 0.0;\n    value += attr[ 0 ] * when_eq( deltaAge, 0.0 );\n\n    for( int i = 0; i < VALUE_OVER_LIFETIME_LENGTH - 1; ++i ) {\n       fIndex = float( i );\n       shouldApplyValue = and( when_gt( deltaAge, fIndex ), when_le( deltaAge, fIndex + 1.0 ) );\n       value += shouldApplyValue * mix( attr[ i ], attr[ i + 1 ], deltaAge - fIndex );\n    }\n\n    return value;\n}", 
colorOverLifetime:"vec3 getColorOverLifetime( in float positionInTime, in vec3 color1, in vec3 color2, in vec3 color3, in vec3 color4 ) {\n    vec3 value = vec3( 0.0 );\n    value.x = getFloatOverLifetime( positionInTime, vec4( color1.x, color2.x, color3.x, color4.x ) );\n    value.y = getFloatOverLifetime( positionInTime, vec4( color1.y, color2.y, color3.y, color4.y ) );\n    value.z = getFloatOverLifetime( positionInTime, vec4( color1.z, color2.z, color3.z, color4.z ) );\n    return value;\n}", 
paramFetchingFunctions:"float getAlive() {\n   return params.x;\n}\nfloat getAge() {\n   return params.y;\n}\nfloat getMaxAge() {\n   return params.z;\n}\nfloat getWiggle() {\n   return params.w;\n}", forceFetchingFunctions:"vec4 getPosition( in float age ) {\n   return modelViewMatrix * vec4( position, 1.0 );\n}\nvec3 getVelocity( in float age ) {\n   return velocity * age;\n}\nvec3 getAcceleration( in float age ) {\n   return acceleration.xyz * age;\n}", rotationFunctions:"#ifdef SHOULD_ROTATE_PARTICLES\n   mat4 getRotationMatrix( in vec3 axis, in float angle) {\n       axis = normalize(axis);\n       float s = sin(angle);\n       float c = cos(angle);\n       float oc = 1.0 - c;\n\n       return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\n                   oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\n                   oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\n                   0.0,                                0.0,                                0.0,                                1.0);\n   }\n\n   vec3 getRotation( in vec3 pos, in float positionInTime ) {\n      if( rotation.y == 0.0 ) {\n           return pos;\n      }\n\n      vec3 axis = unpackRotationAxis( rotation.x );\n      vec3 center = rotationCenter;\n      vec3 translated;\n      mat4 rotationMatrix;\n      float angle = 0.0;\n      angle += when_eq( rotation.z, 0.0 ) * rotation.y;\n      angle += when_gt( rotation.z, 0.0 ) * mix( 0.0, rotation.y, positionInTime );\n      translated = rotationCenter - pos;\n      rotationMatrix = getRotationMatrix( axis, angle );\n      return center - vec3( rotationMatrix * vec4( translated, 0.0 ) );\n   }\n#endif", 
rotateTexture:"    vec2 vUv = vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y );\n\n    #ifdef SHOULD_ROTATE_TEXTURE\n       float x = gl_PointCoord.x - 0.5;\n       float y = 1.0 - gl_PointCoord.y - 0.5;\n       float c = cos( -vAngle );\n       float s = sin( -vAngle );\n       vUv = vec2( c * x + s * y + 0.5, c * y - s * x + 0.5 );\n    #endif\n\n    #ifdef SHOULD_CALCULATE_SPRITE\n        float framesX = vSpriteSheet.x;\n        float framesY = vSpriteSheet.y;\n        float columnNorm = vSpriteSheet.z;\n        float rowNorm = vSpriteSheet.w;\n        vUv.x = gl_PointCoord.x * framesX + columnNorm;\n        vUv.y = 1.0 - (gl_PointCoord.y * framesY + rowNorm);\n    #endif\n\n    vec4 rotatedTexture = texture2D( texture, vUv );"};
SPE.shaders = {vertex:[SPE.shaderChunks.defines, SPE.shaderChunks.uniforms, SPE.shaderChunks.attributes, SPE.shaderChunks.varyings, THREE.ShaderChunk.common, THREE.ShaderChunk.logdepthbuf_pars_vertex, THREE.ShaderChunk.fog_pars_vertex, SPE.shaderChunks.branchAvoidanceFunctions, SPE.shaderChunks.unpackColor, SPE.shaderChunks.unpackRotationAxis, SPE.shaderChunks.floatOverLifetime, SPE.shaderChunks.colorOverLifetime, SPE.shaderChunks.paramFetchingFunctions, SPE.shaderChunks.forceFetchingFunctions, SPE.shaderChunks.rotationFunctions, 
"void main() {\n    highp float age = getAge();\n    highp float alive = getAlive();\n    highp float maxAge = getMaxAge();\n    highp float positionInTime = (age / maxAge);\n    highp float isAlive = when_gt( alive, 0.0 );\n    #ifdef SHOULD_WIGGLE_PARTICLES\n        float wiggleAmount = positionInTime * getWiggle();\n        float wiggleSin = isAlive * sin( wiggleAmount );\n        float wiggleCos = isAlive * cos( wiggleAmount );\n    #endif\n    vec3 vel = getVelocity( age );\n    vec3 accel = getAcceleration( age );\n    vec3 force = vec3( 0.0 );\n    vec3 pos = vec3( position );\n    float drag = 1.0 - (positionInTime * 0.5) * acceleration.w;\n    force += vel;\n    force *= drag;\n    force += accel * age;\n    pos += force;\n    #ifdef SHOULD_WIGGLE_PARTICLES\n        pos.x += wiggleSin;\n        pos.y += wiggleCos;\n        pos.z += wiggleSin;\n    #endif\n    #ifdef SHOULD_ROTATE_PARTICLES\n        pos = getRotation( pos, positionInTime );\n    #endif\n    vec4 mvPosition = modelViewMatrix * vec4( pos, 1.0 );\n    highp float pointSize = getFloatOverLifetime( positionInTime, size ) * isAlive;\n    #ifdef HAS_PERSPECTIVE\n        float perspective = scale / length( mvPosition.xyz );\n    #else\n        float perspective = 1.0;\n    #endif\n    float pointSizePerspective = pointSize * perspective;\n    #ifdef COLORIZE\n       vec3 c = isAlive * getColorOverLifetime(\n           positionInTime,\n           unpackColor( color.x ),\n           unpackColor( color.y ),\n           unpackColor( color.z ),\n           unpackColor( color.w )\n       );\n    #else\n       vec3 c = vec3(1.0);\n    #endif\n    float o = isAlive * getFloatOverLifetime( positionInTime, opacity );\n    vColor = vec4( c, o );\n    #ifdef SHOULD_ROTATE_TEXTURE\n        vAngle = isAlive * getFloatOverLifetime( positionInTime, angle );\n    #endif\n    #ifdef SHOULD_CALCULATE_SPRITE\n        float framesX = textureAnimation.x;\n        float framesY = textureAnimation.y;\n        float loopCount = textureAnimation.w;\n        float totalFrames = textureAnimation.z;\n        float frameNumber = mod( (positionInTime * loopCount) * totalFrames, totalFrames );\n        float column = floor(mod( frameNumber, framesX ));\n        float row = floor( (frameNumber - column) / framesX );\n        float columnNorm = column / framesX;\n        float rowNorm = row / framesY;\n        vSpriteSheet.x = 1.0 / framesX;\n        vSpriteSheet.y = 1.0 / framesY;\n        vSpriteSheet.z = columnNorm;\n        vSpriteSheet.w = rowNorm;\n    #endif\n    gl_PointSize = pointSizePerspective;\n    gl_Position = projectionMatrix * mvPosition;", 
THREE.ShaderChunk.logdepthbuf_vertex, THREE.ShaderChunk.fog_vertex, "}"].join("\n"), fragment:[SPE.shaderChunks.uniforms, THREE.ShaderChunk.common, THREE.ShaderChunk.fog_pars_fragment, THREE.ShaderChunk.logdepthbuf_pars_fragment, SPE.shaderChunks.varyings, SPE.shaderChunks.branchAvoidanceFunctions, "void main() {\n    vec3 outgoingLight = vColor.xyz;\n    \n    #ifdef ALPHATEST\n       if ( vColor.w < float(ALPHATEST) ) discard;\n    #endif", SPE.shaderChunks.rotateTexture, THREE.ShaderChunk.logdepthbuf_fragment, 
"    outgoingLight = vColor.xyz * rotatedTexture.xyz;\n    gl_FragColor = vec4( outgoingLight.xyz, rotatedTexture.w * vColor.w );", THREE.ShaderChunk.fog_fragment, "}"].join("\n")};
SPE.utils = {types:{BOOLEAN:"boolean", STRING:"string", NUMBER:"number", OBJECT:"object"}, ensureTypedArg:function(a, c, k) {
  return typeof a === c ? a : k;
}, ensureArrayTypedArg:function(a, c, k) {
  if (Array.isArray(a)) {
    for (var b = a.length - 1; 0 <= b; --b) {
      if (typeof a[b] !== c) {
        return k;
      }
    }
    return a;
  }
  return this.ensureTypedArg(a, c, k);
}, ensureInstanceOf:function(a, c, k) {
  return void 0 !== c && a instanceof c ? a : k;
}, ensureArrayInstanceOf:function(a, c, k) {
  if (Array.isArray(a)) {
    for (var b = a.length - 1; 0 <= b; --b) {
      if (void 0 !== c && 0 == a[b] instanceof c) {
        return k;
      }
    }
    return a;
  }
  return this.ensureInstanceOf(a, c, k);
}, ensureValueOverLifetimeCompliance:function(a, c, k) {
  c = c || 3;
  k = k || 3;
  !1 === Array.isArray(a._value) && (a._value = [a._value]);
  !1 === Array.isArray(a._spread) && (a._spread = [a._spread]);
  var b = this.clamp(a._value.length, c, k);
  c = this.clamp(a._spread.length, c, k);
  b = Math.max(b, c);
  a._value.length !== b && (a._value = this.interpolateArray(a._value, b));
  a._spread.length !== b && (a._spread = this.interpolateArray(a._spread, b));
}, interpolateArray:function(a, c) {
  for (var k = a.length, b = ["function" == typeof a[0].clone ? a[0].clone() : a[0]], f = (k - 1) / (c - 1), d = 1; c - 1 > d; ++d) {
    var h = d * f, n = Math.floor(h);
    b[d] = this.lerpTypeAgnostic(a[n], a[Math.ceil(h)], h - n);
  }
  return b.push("function" == typeof a[k - 1].clone ? a[k - 1].clone() : a[k - 1]), b;
}, clamp:function(a, c, k) {
  return Math.max(c, Math.min(a, k));
}, zeroToEpsilon:function(a, c) {
  var k = a;
  return k = c ? 1E-4 * Math.random() : 1E-5, 0 > a && -1E-5 < a && (k = -k), k;
}, lerpTypeAgnostic:function(a, c, k) {
  var b, f = this.types;
  return typeof a === f.NUMBER && typeof c === f.NUMBER ? a + (c - a) * k : a instanceof THREE.Vector2 && c instanceof THREE.Vector2 ? (b = a.clone(), b.x = this.lerp(a.x, c.x, k), b.y = this.lerp(a.y, c.y, k), b) : a instanceof THREE.Vector3 && c instanceof THREE.Vector3 ? (b = a.clone(), b.x = this.lerp(a.x, c.x, k), b.y = this.lerp(a.y, c.y, k), b.z = this.lerp(a.z, c.z, k), b) : a instanceof THREE.Vector4 && c instanceof THREE.Vector4 ? (b = a.clone(), b.x = this.lerp(a.x, c.x, k), b.y = this.lerp(a.y, 
  c.y, k), b.z = this.lerp(a.z, c.z, k), b.w = this.lerp(a.w, c.w, k), b) : a instanceof THREE.Color && c instanceof THREE.Color ? (b = a.clone(), b.r = this.lerp(a.r, c.r, k), b.g = this.lerp(a.g, c.g, k), b.b = this.lerp(a.b, c.b, k), b) : void console.warn("Invalid argument types, or argument types do not match:", a, c);
}, lerp:function(a, c, k) {
  return a + (c - a) * k;
}, roundToNearestMultiple:function(a, c) {
  var k = 0;
  return 0 === c ? a : (k = Math.abs(a) % c, 0 === k ? a : 0 > a ? -(Math.abs(a) - k) : a + c - k);
}, arrayValuesAreEqual:function(a) {
  for (var c = 0; c < a.length - 1; ++c) {
    if (a[c] !== a[c + 1]) {
      return !1;
    }
  }
  return !0;
}, randomFloat:function(a, c) {
  return a + c * (Math.random() - .5);
}, randomVector3:function(a, c, k, b, f) {
  var d = k.x + (Math.random() * b.x - .5 * b.x), h = k.y + (Math.random() * b.y - .5 * b.y);
  k = k.z + (Math.random() * b.z - .5 * b.z);
  f && (d = .5 * -f.x + this.roundToNearestMultiple(d, f.x), h = .5 * -f.y + this.roundToNearestMultiple(h, f.y), k = .5 * -f.z + this.roundToNearestMultiple(k, f.z));
  a.typedArray.setVec3Components(c, d, h, k);
}, randomColor:function(a, c, k, b) {
  var f = k.r + Math.random() * b.x, d = k.g + Math.random() * b.y;
  k = k.b + Math.random() * b.z;
  f = this.clamp(f, 0, 1);
  d = this.clamp(d, 0, 1);
  k = this.clamp(k, 0, 1);
  a.typedArray.setVec3Components(c, f, d, k);
}, randomColorAsHex:function() {
  var a = new THREE.Color;
  return function(c, k, b, f) {
    for (var d = b.length, h = [], n = 0; d > n; ++n) {
      var q = f[n];
      a.copy(b[n]);
      a.r += Math.random() * q.x - .5 * q.x;
      a.g += Math.random() * q.y - .5 * q.y;
      a.b += Math.random() * q.z - .5 * q.z;
      a.r = this.clamp(a.r, 0, 1);
      a.g = this.clamp(a.g, 0, 1);
      a.b = this.clamp(a.b, 0, 1);
      h.push(a.getHex());
    }
    c.typedArray.setVec4Components(k, h[0], h[1], h[2], h[3]);
  };
}(), randomVector3OnSphere:function(a, c, k, b, f, d, h, n) {
  n = 2 * Math.random() - 1;
  var q = 6.2832 * Math.random(), m = Math.sqrt(1 - n * n);
  b = this.randomFloat(b, f);
  h && (b = Math.round(b / h) * h);
  h = m * Math.cos(q) * b;
  q = m * Math.sin(q) * b;
  h *= d.x;
  q *= d.y;
  d = n * b * d.z;
  h += k.x;
  q += k.y;
  d += k.z;
  a.typedArray.setVec3Components(c, h, q, d);
}, seededRandom:function(a) {
  a = 1E4 * Math.sin(a);
  return a - (0 | a);
}, randomVector3OnDisc:function(a, c, k, b, f, d, h) {
  var n = 6.2832 * Math.random();
  b = Math.abs(this.randomFloat(b, f));
  h && (b = Math.round(b / h) * h);
  h = Math.cos(n) * b;
  n = Math.sin(n) * b;
  h *= d.x;
  n *= d.y;
  h += k.x;
  n += k.y;
  k = 0 + k.z;
  a.typedArray.setVec3Components(c, h, n, k);
}, randomDirectionVector3OnSphere:function() {
  var a = new THREE.Vector3;
  return function(c, k, b, f, d, h, n, q) {
    a.copy(h);
    a.x -= b;
    a.y -= f;
    a.z -= d;
    a.normalize().multiplyScalar(-this.randomFloat(n, q));
    c.typedArray.setVec3Components(k, a.x, a.y, a.z);
  };
}(), randomDirectionVector3OnDisc:function() {
  var a = new THREE.Vector3;
  return function(c, k, b, f, d, h, n, q) {
    a.copy(h);
    a.x -= b;
    a.y -= f;
    a.z -= d;
    a.normalize().multiplyScalar(-this.randomFloat(n, q));
    c.typedArray.setVec3Components(k, a.x, a.y, 0);
  };
}(), getPackedRotationAxis:function() {
  var a = new THREE.Vector3, c = new THREE.Vector3, k = new THREE.Color, b = new THREE.Vector3(1, 1, 1);
  return function(f, d) {
    return a.copy(f).normalize(), c.copy(d).normalize(), a.x += .5 * -d.x + Math.random() * d.x, a.y += .5 * -d.y + Math.random() * d.y, a.z += .5 * -d.z + Math.random() * d.z, a.normalize().add(b).multiplyScalar(.5), k.setRGB(a.x, a.y, a.z), k.getHex();
  };
}()};
SPE.Group = function(a) {
  var c = SPE.utils, k = c.types;
  a = c.ensureTypedArg(a, k.OBJECT, {});
  a.texture = c.ensureTypedArg(a.texture, k.OBJECT, {});
  this.uuid = THREE.Math.generateUUID();
  this.fixedTimeStep = c.ensureTypedArg(a.fixedTimeStep, k.NUMBER, .016);
  this.texture = c.ensureInstanceOf(a.texture.value, THREE.Texture, null);
  this.textureFrames = c.ensureInstanceOf(a.texture.frames, THREE.Vector2, new THREE.Vector2(1, 1));
  this.textureFrameCount = c.ensureTypedArg(a.texture.frameCount, k.NUMBER, this.textureFrames.x * this.textureFrames.y);
  this.textureLoop = c.ensureTypedArg(a.texture.loop, k.NUMBER, 1);
  this.textureFrames.max(new THREE.Vector2(1, 1));
  this.hasPerspective = c.ensureTypedArg(a.hasPerspective, k.BOOLEAN, !0);
  this.colorize = c.ensureTypedArg(a.colorize, k.BOOLEAN, !0);
  this.maxParticleCount = c.ensureTypedArg(a.maxParticleCount, k.NUMBER, null);
  this.blending = c.ensureTypedArg(a.blending, k.NUMBER, THREE.AdditiveBlending);
  this.transparent = c.ensureTypedArg(a.transparent, k.BOOLEAN, !0);
  this.alphaTest = parseFloat(c.ensureTypedArg(a.alphaTest, k.NUMBER, 0));
  this.depthWrite = c.ensureTypedArg(a.depthWrite, k.BOOLEAN, !1);
  this.depthTest = c.ensureTypedArg(a.depthTest, k.BOOLEAN, !0);
  this.fog = c.ensureTypedArg(a.fog, k.BOOLEAN, !0);
  this.scale = c.ensureTypedArg(a.scale, k.NUMBER, 300);
  this.emitters = [];
  this.emitterIDs = [];
  this._pool = [];
  this._poolCreationSettings = null;
  this._createNewWhenPoolEmpty = 0;
  this._attributesNeedDynamicReset = this._attributesNeedRefresh = !1;
  this.particleCount = 0;
  this.uniforms = {texture:{type:"t", value:this.texture}, textureAnimation:{type:"v4", value:new THREE.Vector4(this.textureFrames.x, this.textureFrames.y, this.textureFrameCount, Math.max(Math.abs(this.textureLoop), 1))}, fogColor:{type:"c", value:null}, fogNear:{type:"f", value:10}, fogFar:{type:"f", value:200}, fogDensity:{type:"f", value:.5}, deltaTime:{type:"f", value:0}, runTime:{type:"f", value:0}, scale:{type:"f", value:this.scale}};
  this.defines = {HAS_PERSPECTIVE:this.hasPerspective, COLORIZE:this.colorize, VALUE_OVER_LIFETIME_LENGTH:SPE.valueOverLifetimeLength, SHOULD_ROTATE_TEXTURE:!1, SHOULD_ROTATE_PARTICLES:!1, SHOULD_WIGGLE_PARTICLES:!1, SHOULD_CALCULATE_SPRITE:1 < this.textureFrames.x || 1 < this.textureFrames.y};
  this.attributes = {position:new SPE.ShaderAttribute("v3", !0), acceleration:new SPE.ShaderAttribute("v4", !0), velocity:new SPE.ShaderAttribute("v3", !0), rotation:new SPE.ShaderAttribute("v4", !0), rotationCenter:new SPE.ShaderAttribute("v3", !0), params:new SPE.ShaderAttribute("v4", !0), size:new SPE.ShaderAttribute("v4", !0), angle:new SPE.ShaderAttribute("v4", !0), color:new SPE.ShaderAttribute("v4", !0), opacity:new SPE.ShaderAttribute("v4", !0)};
  this.attributeKeys = Object.keys(this.attributes);
  this.attributeCount = this.attributeKeys.length;
  this.material = new THREE.ShaderMaterial({uniforms:this.uniforms, vertexShader:SPE.shaders.vertex, fragmentShader:SPE.shaders.fragment, blending:this.blending, transparent:this.transparent, alphaTest:this.alphaTest, depthWrite:this.depthWrite, depthTest:this.depthTest, defines:this.defines, fog:this.fog});
  this.geometry = new THREE.BufferGeometry;
  this.mesh = new THREE.Points(this.geometry, this.material);
  null === this.maxParticleCount && console.warn("SPE.Group: No maxParticleCount specified. Adding emitters after rendering will probably cause errors.");
};
SPE.Group.constructor = SPE.Group;
SPE.Group.prototype._updateDefines = function() {
  var a = this.emitters, c = a.length - 1, k = this.defines;
  for (c; 0 <= c; --c) {
    var b = a[c];
    k.SHOULD_CALCULATE_SPRITE || (k.SHOULD_ROTATE_TEXTURE = k.SHOULD_ROTATE_TEXTURE || !!Math.max(Math.max.apply(null, b.angle.value), Math.max.apply(null, b.angle.spread)));
    k.SHOULD_ROTATE_PARTICLES = k.SHOULD_ROTATE_PARTICLES || !!Math.max(b.rotation.angle, b.rotation.angleSpread);
    k.SHOULD_WIGGLE_PARTICLES = k.SHOULD_WIGGLE_PARTICLES || !!Math.max(b.wiggle.value, b.wiggle.spread);
  }
  this.material.needsUpdate = !0;
};
SPE.Group.prototype._applyAttributesToGeometry = function() {
  var a, c, k = this.attributes, b = this.geometry, f = b.attributes, d;
  for (d in k) {
    k.hasOwnProperty(d) && (a = k[d], c = f[d], c ? c.array = a.typedArray.array : b.addAttribute(d, a.bufferAttribute), a.bufferAttribute.needsUpdate = !0);
  }
  this.geometry.setDrawRange(0, this.particleCount);
};
SPE.Group.prototype.addEmitter = function(a) {
  if (0 == a instanceof SPE.Emitter) {
    return void console.error("`emitter` argument must be instance of SPE.Emitter. Was provided with:", a);
  }
  if (-1 < this.emitterIDs.indexOf(a.uuid)) {
    return void console.error("Emitter already exists in this group. Will not add again.");
  }
  if (null !== a.group) {
    return void console.error("Emitter already belongs to another group. Will not add to requested group.");
  }
  var c = this.attributes, k = this.particleCount, b = k + a.particleCount;
  this.particleCount = b;
  null !== this.maxParticleCount && this.particleCount > this.maxParticleCount && console.warn("SPE.Group: maxParticleCount exceeded. Requesting", this.particleCount, "particles, can support only", this.maxParticleCount);
  a._calculatePPSValue(a.maxAge._value + a.maxAge._spread);
  a._setBufferUpdateRanges(this.attributeKeys);
  a._setAttributeOffset(k);
  a.group = this;
  a.attributes = this.attributes;
  for (var f in c) {
    c.hasOwnProperty(f) && c[f]._createBufferAttribute(null !== this.maxParticleCount ? this.maxParticleCount : this.particleCount);
  }
  for (c = k; b > c; ++c) {
    a._assignPositionValue(c), a._assignForceValue(c, "velocity"), a._assignForceValue(c, "acceleration"), a._assignAbsLifetimeValue(c, "opacity"), a._assignAbsLifetimeValue(c, "size"), a._assignAngleValue(c), a._assignRotationValue(c), a._assignParamsValue(c), a._assignColorValue(c);
  }
  return this._applyAttributesToGeometry(), this.emitters.push(a), this.emitterIDs.push(a.uuid), this._updateDefines(a), this.material.needsUpdate = !0, this.geometry.needsUpdate = !0, this._attributesNeedRefresh = !0, this;
};
SPE.Group.prototype.removeEmitter = function(a) {
  var c = this.emitterIDs.indexOf(a.uuid);
  if (0 == a instanceof SPE.Emitter) {
    return void console.error("`emitter` argument must be instance of SPE.Emitter. Was provided with:", a);
  }
  if (-1 === c) {
    return void console.error("Emitter does not exist in this group. Will not remove.");
  }
  for (var k = a.attributeOffset, b = k + a.particleCount, f = this.attributes.params.typedArray, d = k; b > d; ++d) {
    f.array[4 * d] = 0, f.array[4 * d + 1] = 0;
  }
  this.emitters.splice(c, 1);
  this.emitterIDs.splice(c, 1);
  for (var h in this.attributes) {
    this.attributes.hasOwnProperty(h) && this.attributes[h].splice(k, b);
  }
  this.particleCount -= a.particleCount;
  a._onRemove();
  this._attributesNeedRefresh = !0;
};
SPE.Group.prototype.getFromPool = function() {
  var a = this._pool, c = this._createNewWhenPoolEmpty;
  return a.length ? a.pop() : c ? (a = new SPE.Emitter(this._poolCreationSettings), this.addEmitter(a), a) : null;
};
SPE.Group.prototype.releaseIntoPool = function(a) {
  return 0 == a instanceof SPE.Emitter ? void console.error("Argument is not instanceof SPE.Emitter:", a) : (a.reset(), this._pool.unshift(a), this);
};
SPE.Group.prototype.getPool = function() {
  return this._pool;
};
SPE.Group.prototype.addPool = function(a, c, k) {
  this._poolCreationSettings = c;
  this._createNewWhenPoolEmpty = !!k;
  for (var b = 0; a > b; ++b) {
    k = Array.isArray(c) ? new SPE.Emitter(c[b]) : new SPE.Emitter(c), this.addEmitter(k), this.releaseIntoPool(k);
  }
  return this;
};
SPE.Group.prototype._triggerSingleEmitter = function(a) {
  var c = this.getFromPool(), k = this;
  return null === c ? void console.log("SPE.Group pool ran out.") : (a instanceof THREE.Vector3 && (c.position.value.copy(a), c.position.value = c.position.value), c.enable(), setTimeout(function() {
    c.disable();
    k.releaseIntoPool(c);
  }, 1E3 * Math.max(c.duration, c.maxAge.value + c.maxAge.spread)), this);
};
SPE.Group.prototype.triggerPoolEmitter = function(a, c) {
  if ("number" == typeof a && 1 < a) {
    for (var k = 0; a > k; ++k) {
      this._triggerSingleEmitter(c);
    }
  } else {
    this._triggerSingleEmitter(c);
  }
  return this;
};
SPE.Group.prototype._updateUniforms = function(a) {
  this.uniforms.runTime.value += a;
  this.uniforms.deltaTime.value = a;
};
SPE.Group.prototype._resetBufferRanges = function() {
  var a = this.attributeKeys, c = this.attributeCount - 1, k = this.attributes;
  for (c; 0 <= c; --c) {
    k[a[c]].resetUpdateRange();
  }
};
SPE.Group.prototype._updateBuffers = function(a) {
  var c = this.attributeKeys, k = this.attributeCount - 1, b = this.attributes, f = a.bufferUpdateRanges;
  for (k; 0 <= k; --k) {
    var d = c[k];
    a = f[d];
    d = b[d];
    d.setUpdateRange(a.min, a.max);
    d.flagUpdate();
  }
};
SPE.Group.prototype.tick = function(a) {
  var c = this.emitters, k = c.length, b = a || this.fixedTimeStep, f = this.attributeKeys, d = this.attributes;
  if (this._updateUniforms(b), this._resetBufferRanges(), 0 !== k || !1 !== this._attributesNeedRefresh || !1 !== this._attributesNeedDynamicReset) {
    for (a = 0; k > a; ++a) {
      var h = c[a];
      h.tick(b);
      this._updateBuffers(h);
    }
    if (!0 === this._attributesNeedDynamicReset) {
      for (a = this.attributeCount - 1; 0 <= a; --a) {
        d[f[a]].resetDynamic();
      }
      this._attributesNeedDynamicReset = !1;
    }
    if (!0 === this._attributesNeedRefresh) {
      for (a = this.attributeCount - 1; 0 <= a; --a) {
        d[f[a]].forceUpdateAll();
      }
      this._attributesNeedRefresh = !1;
      this._attributesNeedDynamicReset = !0;
    }
  }
};
SPE.Group.prototype.dispose = function() {
  return this.geometry.dispose(), this.material.dispose(), this;
};
SPE.Emitter = function(a) {
  var c = SPE.utils, k = c.types, b = SPE.valueOverLifetimeLength;
  a = c.ensureTypedArg(a, k.OBJECT, {});
  a.position = c.ensureTypedArg(a.position, k.OBJECT, {});
  a.velocity = c.ensureTypedArg(a.velocity, k.OBJECT, {});
  a.acceleration = c.ensureTypedArg(a.acceleration, k.OBJECT, {});
  a.radius = c.ensureTypedArg(a.radius, k.OBJECT, {});
  a.drag = c.ensureTypedArg(a.drag, k.OBJECT, {});
  a.rotation = c.ensureTypedArg(a.rotation, k.OBJECT, {});
  a.color = c.ensureTypedArg(a.color, k.OBJECT, {});
  a.opacity = c.ensureTypedArg(a.opacity, k.OBJECT, {});
  a.size = c.ensureTypedArg(a.size, k.OBJECT, {});
  a.angle = c.ensureTypedArg(a.angle, k.OBJECT, {});
  a.wiggle = c.ensureTypedArg(a.wiggle, k.OBJECT, {});
  a.maxAge = c.ensureTypedArg(a.maxAge, k.OBJECT, {});
  a.onParticleSpawn && console.warn("onParticleSpawn has been removed. Please set properties directly to alter values at runtime.");
  this.uuid = THREE.Math.generateUUID();
  this.type = c.ensureTypedArg(a.type, k.NUMBER, SPE.distributions.BOX);
  this.position = {_value:c.ensureInstanceOf(a.position.value, THREE.Vector3, new THREE.Vector3), _spread:c.ensureInstanceOf(a.position.spread, THREE.Vector3, new THREE.Vector3), _spreadClamp:c.ensureInstanceOf(a.position.spreadClamp, THREE.Vector3, new THREE.Vector3), _distribution:c.ensureTypedArg(a.position.distribution, k.NUMBER, this.type), _randomise:c.ensureTypedArg(a.position.randomise, k.BOOLEAN, !1), _radius:c.ensureTypedArg(a.position.radius, k.NUMBER, 10), _radiusScale:c.ensureInstanceOf(a.position.radiusScale, 
  THREE.Vector3, new THREE.Vector3(1, 1, 1)), _distributionClamp:c.ensureTypedArg(a.position.distributionClamp, k.NUMBER, 0)};
  this.velocity = {_value:c.ensureInstanceOf(a.velocity.value, THREE.Vector3, new THREE.Vector3), _spread:c.ensureInstanceOf(a.velocity.spread, THREE.Vector3, new THREE.Vector3), _distribution:c.ensureTypedArg(a.velocity.distribution, k.NUMBER, this.type), _randomise:c.ensureTypedArg(a.position.randomise, k.BOOLEAN, !1)};
  this.acceleration = {_value:c.ensureInstanceOf(a.acceleration.value, THREE.Vector3, new THREE.Vector3), _spread:c.ensureInstanceOf(a.acceleration.spread, THREE.Vector3, new THREE.Vector3), _distribution:c.ensureTypedArg(a.acceleration.distribution, k.NUMBER, this.type), _randomise:c.ensureTypedArg(a.position.randomise, k.BOOLEAN, !1)};
  this.drag = {_value:c.ensureTypedArg(a.drag.value, k.NUMBER, 0), _spread:c.ensureTypedArg(a.drag.spread, k.NUMBER, 0), _randomise:c.ensureTypedArg(a.position.randomise, k.BOOLEAN, !1)};
  this.wiggle = {_value:c.ensureTypedArg(a.wiggle.value, k.NUMBER, 0), _spread:c.ensureTypedArg(a.wiggle.spread, k.NUMBER, 0)};
  this.rotation = {_axis:c.ensureInstanceOf(a.rotation.axis, THREE.Vector3, new THREE.Vector3(0, 1, 0)), _axisSpread:c.ensureInstanceOf(a.rotation.axisSpread, THREE.Vector3, new THREE.Vector3), _angle:c.ensureTypedArg(a.rotation.angle, k.NUMBER, 0), _angleSpread:c.ensureTypedArg(a.rotation.angleSpread, k.NUMBER, 0), _static:c.ensureTypedArg(a.rotation["static"], k.BOOLEAN, !1), _center:c.ensureInstanceOf(a.rotation.center, THREE.Vector3, this.position._value.clone()), _randomise:c.ensureTypedArg(a.position.randomise, 
  k.BOOLEAN, !1)};
  this.maxAge = {_value:c.ensureTypedArg(a.maxAge.value, k.NUMBER, 2), _spread:c.ensureTypedArg(a.maxAge.spread, k.NUMBER, 0)};
  this.color = {_value:c.ensureArrayInstanceOf(a.color.value, THREE.Color, new THREE.Color), _spread:c.ensureArrayInstanceOf(a.color.spread, THREE.Vector3, new THREE.Vector3), _randomise:c.ensureTypedArg(a.position.randomise, k.BOOLEAN, !1)};
  this.opacity = {_value:c.ensureArrayTypedArg(a.opacity.value, k.NUMBER, 1), _spread:c.ensureArrayTypedArg(a.opacity.spread, k.NUMBER, 0), _randomise:c.ensureTypedArg(a.position.randomise, k.BOOLEAN, !1)};
  this.size = {_value:c.ensureArrayTypedArg(a.size.value, k.NUMBER, 1), _spread:c.ensureArrayTypedArg(a.size.spread, k.NUMBER, 0), _randomise:c.ensureTypedArg(a.position.randomise, k.BOOLEAN, !1)};
  this.angle = {_value:c.ensureArrayTypedArg(a.angle.value, k.NUMBER, 0), _spread:c.ensureArrayTypedArg(a.angle.spread, k.NUMBER, 0), _randomise:c.ensureTypedArg(a.position.randomise, k.BOOLEAN, !1)};
  this.particleCount = c.ensureTypedArg(a.particleCount, k.NUMBER, 100);
  this.duration = c.ensureTypedArg(a.duration, k.NUMBER, null);
  this.isStatic = c.ensureTypedArg(a.isStatic, k.BOOLEAN, !1);
  this.activeMultiplier = c.ensureTypedArg(a.activeMultiplier, k.NUMBER, 1);
  this.direction = c.ensureTypedArg(a.direction, k.NUMBER, 1);
  this.alive = c.ensureTypedArg(a.alive, k.BOOLEAN, !0);
  this.activeParticleCount = this.age = this.attributeEnd = this.attributeOffset = this.activationIndex = this.particlesPerSecond = 0;
  this.paramsArray = this.attributes = this.group = null;
  this.resetFlags = {position:c.ensureTypedArg(a.position.randomise, k.BOOLEAN, !1) || c.ensureTypedArg(a.radius.randomise, k.BOOLEAN, !1), velocity:c.ensureTypedArg(a.velocity.randomise, k.BOOLEAN, !1), acceleration:c.ensureTypedArg(a.acceleration.randomise, k.BOOLEAN, !1) || c.ensureTypedArg(a.drag.randomise, k.BOOLEAN, !1), rotation:c.ensureTypedArg(a.rotation.randomise, k.BOOLEAN, !1), rotationCenter:c.ensureTypedArg(a.rotation.randomise, k.BOOLEAN, !1), size:c.ensureTypedArg(a.size.randomise, 
  k.BOOLEAN, !1), color:c.ensureTypedArg(a.color.randomise, k.BOOLEAN, !1), opacity:c.ensureTypedArg(a.opacity.randomise, k.BOOLEAN, !1), angle:c.ensureTypedArg(a.angle.randomise, k.BOOLEAN, !1)};
  this.updateFlags = {};
  this.updateCounts = {};
  this.updateMap = {maxAge:"params", position:"position", velocity:"velocity", acceleration:"acceleration", drag:"acceleration", wiggle:"params", rotation:"rotation", size:"size", color:"color", opacity:"opacity", angle:"angle"};
  for (var f in this.updateMap) {
    this.updateMap.hasOwnProperty(f) && (this.updateCounts[this.updateMap[f]] = 0, this.updateFlags[this.updateMap[f]] = !1, this._createGetterSetters(this[f], f));
  }
  this.bufferUpdateRanges = {};
  this.attributeKeys = null;
  this.attributeCount = 0;
  c.ensureValueOverLifetimeCompliance(this.color, b, b);
  c.ensureValueOverLifetimeCompliance(this.opacity, b, b);
  c.ensureValueOverLifetimeCompliance(this.size, b, b);
  c.ensureValueOverLifetimeCompliance(this.angle, b, b);
};
SPE.Emitter.constructor = SPE.Emitter;
SPE.Emitter.prototype._createGetterSetters = function(a, c) {
  var k = this, b;
  for (b in a) {
    if (a.hasOwnProperty(b)) {
      var f = b.replace("_", "");
      Object.defineProperty(a, f, {get:function(a) {
        return function() {
          return this[a];
        };
      }(b), set:function(a) {
        return function(b) {
          var d = k.updateMap[c], f = this[a], h = SPE.valueOverLifetimeLength;
          "_rotationCenter" === a ? (k.updateFlags.rotationCenter = !0, k.updateCounts.rotationCenter = 0) : "_randomise" === a ? k.resetFlags[d] = b : (k.updateFlags[d] = !0, k.updateCounts[d] = 0);
          k.group._updateDefines();
          this[a] = b;
          Array.isArray(f) && SPE.utils.ensureValueOverLifetimeCompliance(k[c], h, h);
        };
      }(b)});
    }
  }
};
SPE.Emitter.prototype._setBufferUpdateRanges = function(a) {
  this.attributeKeys = a;
  this.attributeCount = a.length;
  for (var c = this.attributeCount - 1; 0 <= c; --c) {
    this.bufferUpdateRanges[a[c]] = {min:Number.POSITIVE_INFINITY, max:Number.NEGATIVE_INFINITY};
  }
};
SPE.Emitter.prototype._calculatePPSValue = function(a) {
  var c = this.particleCount;
  this.duration ? this.particlesPerSecond = c / (a < this.duration ? a : this.duration) : this.particlesPerSecond = c / a;
};
SPE.Emitter.prototype._setAttributeOffset = function(a) {
  this.activationIndex = this.attributeOffset = a;
  this.activationEnd = a + this.particleCount;
};
SPE.Emitter.prototype._assignValue = function(a, c) {
  switch(a) {
    case "position":
      this._assignPositionValue(c);
      break;
    case "velocity":
    case "acceleration":
      this._assignForceValue(c, a);
      break;
    case "size":
    case "opacity":
      this._assignAbsLifetimeValue(c, a);
      break;
    case "angle":
      this._assignAngleValue(c);
      break;
    case "params":
      this._assignParamsValue(c);
      break;
    case "rotation":
      this._assignRotationValue(c);
      break;
    case "color":
      this._assignColorValue(c);
  }
};
SPE.Emitter.prototype._assignPositionValue = function(a) {
  var c = SPE.distributions, k = SPE.utils, b = this.position, f = this.attributes.position, d = b._value, h = b._spread;
  switch(b._distribution) {
    case c.BOX:
      k.randomVector3(f, a, d, h, b._spreadClamp);
      break;
    case c.SPHERE:
      k.randomVector3OnSphere(f, a, d, b._radius, b._spread.x, b._radiusScale, b._spreadClamp.x, b._distributionClamp || this.particleCount);
      break;
    case c.DISC:
      k.randomVector3OnDisc(f, a, d, b._radius, b._spread.x, b._radiusScale, b._spreadClamp.x);
  }
};
SPE.Emitter.prototype._assignForceValue = function(a, c) {
  var k = SPE.distributions;
  var b = SPE.utils, f = this[c];
  var d = f._value;
  var h = f._spread;
  switch(f._distribution) {
    case k.BOX:
      b.randomVector3(this.attributes[c], a, d, h);
      break;
    case k.SPHERE:
      h = this.attributes.position.typedArray.array;
      var n = 3 * a;
      k = h[n];
      d = h[n + 1];
      h = h[n + 2];
      b.randomDirectionVector3OnSphere(this.attributes[c], a, k, d, h, this.position._value, f._value.x, f._spread.x);
      break;
    case k.DISC:
      h = this.attributes.position.typedArray.array, n = 3 * a, k = h[n], d = h[n + 1], h = h[n + 2], b.randomDirectionVector3OnDisc(this.attributes[c], a, k, d, h, this.position._value, f._value.x, f._spread.x);
  }
  "acceleration" === c && (c = b.clamp(b.randomFloat(this.drag._value, this.drag._spread), 0, 1), this.attributes.acceleration.typedArray.array[4 * a + 3] = c);
};
SPE.Emitter.prototype._assignAbsLifetimeValue = function(a, c) {
  var k, b = this.attributes[c].typedArray;
  c = this[c];
  var f = SPE.utils;
  f.arrayValuesAreEqual(c._value) && f.arrayValuesAreEqual(c._spread) ? (k = Math.abs(f.randomFloat(c._value[0], c._spread[0])), b.setVec4Components(a, k, k, k, k)) : b.setVec4Components(a, Math.abs(f.randomFloat(c._value[0], c._spread[0])), Math.abs(f.randomFloat(c._value[1], c._spread[1])), Math.abs(f.randomFloat(c._value[2], c._spread[2])), Math.abs(f.randomFloat(c._value[3], c._spread[3])));
};
SPE.Emitter.prototype._assignAngleValue = function(a) {
  var c, k = this.attributes.angle.typedArray, b = this.angle, f = SPE.utils;
  f.arrayValuesAreEqual(b._value) && f.arrayValuesAreEqual(b._spread) ? (c = f.randomFloat(b._value[0], b._spread[0]), k.setVec4Components(a, c, c, c, c)) : k.setVec4Components(a, f.randomFloat(b._value[0], b._spread[0]), f.randomFloat(b._value[1], b._spread[1]), f.randomFloat(b._value[2], b._spread[2]), f.randomFloat(b._value[3], b._spread[3]));
};
SPE.Emitter.prototype._assignParamsValue = function(a) {
  this.attributes.params.typedArray.setVec4Components(a, this.isStatic ? 1 : 0, 0, Math.abs(SPE.utils.randomFloat(this.maxAge._value, this.maxAge._spread)), SPE.utils.randomFloat(this.wiggle._value, this.wiggle._spread));
};
SPE.Emitter.prototype._assignRotationValue = function(a) {
  this.attributes.rotation.typedArray.setVec3Components(a, SPE.utils.getPackedRotationAxis(this.rotation._axis, this.rotation._axisSpread), SPE.utils.randomFloat(this.rotation._angle, this.rotation._angleSpread), this.rotation._static ? 0 : 1);
  this.attributes.rotationCenter.typedArray.setVec3(a, this.rotation._center);
};
SPE.Emitter.prototype._assignColorValue = function(a) {
  SPE.utils.randomColorAsHex(this.attributes.color, a, this.color._value, this.color._spread);
};
SPE.Emitter.prototype._resetParticle = function(a) {
  for (var c, k, b = this.resetFlags, f = this.updateFlags, d = this.updateCounts, h = this.attributeKeys, n = this.attributeCount - 1; 0 <= n; --n) {
    c = h[n], k = f[c], !0 !== b[c] && !0 !== k || (this._assignValue(c, a), this._updateAttributeUpdateRange(c, a), !0 === k && d[c] === this.particleCount ? (f[c] = !1, d[c] = 0) : 1 == k && ++d[c]);
  }
};
SPE.Emitter.prototype._updateAttributeUpdateRange = function(a, c) {
  a = this.bufferUpdateRanges[a];
  a.min = Math.min(c, a.min);
  a.max = Math.max(c, a.max);
};
SPE.Emitter.prototype._resetBufferRanges = function() {
  var a = this.bufferUpdateRanges, c = this.bufferUpdateKeys, k = this.bufferUpdateCount - 1;
  for (k; 0 <= k; --k) {
    var b = c[k];
    a[b].min = Number.POSITIVE_INFINITY;
    a[b].max = Number.NEGATIVE_INFINITY;
  }
};
SPE.Emitter.prototype._onRemove = function() {
  this.activeParticleCount = this.activationIndex = this.attributeOffset = this.particlesPerSecond = 0;
  this.paramsArray = this.attributes = this.group = null;
  this.age = 0;
};
SPE.Emitter.prototype._decrementParticleCount = function() {
  --this.activeParticleCount;
};
SPE.Emitter.prototype._incrementParticleCount = function() {
  ++this.activeParticleCount;
};
SPE.Emitter.prototype._checkParticleAges = function(a, c, k, b) {
  for (var f, d, h, n = c - 1; n >= a; --n) {
    c = 4 * n, h = k[c], 0 !== h && (d = k[c + 1], f = k[c + 2], 1 === this.direction ? (d += b, d >= f && (d = 0, h = 0, this._decrementParticleCount())) : (d -= b, 0 >= d && (d = f, h = 0, this._decrementParticleCount())), k[c] = h, k[c + 1] = d, this._updateAttributeUpdateRange("params", n));
  }
};
SPE.Emitter.prototype._activateParticles = function(a, c, k, b) {
  for (var f, d, h = this.direction, n = a; c > n; ++n) {
    f = 4 * n, 0 != k[f] && 1 !== this.particleCount || (this._incrementParticleCount(), k[f] = 1, this._resetParticle(n), d = b * (n - a), k[f + 1] = -1 === h ? k[f + 2] - d : d, this._updateAttributeUpdateRange("params", n));
  }
};
SPE.Emitter.prototype.tick = function(a) {
  if (!this.isStatic) {
    null === this.paramsArray && (this.paramsArray = this.attributes.params.typedArray.array);
    var c = this.attributeOffset, k = c + this.particleCount, b = this.paramsArray, f = this.particlesPerSecond * this.activeMultiplier * a, d = this.activationIndex;
    if (this._resetBufferRanges(), this._checkParticleAges(c, k, b, a), !1 === this.alive) {
      return void(this.age = 0);
    }
    if (null !== this.duration && this.age > this.duration) {
      return this.alive = !1, void(this.age = 0);
    }
    d = 1 === this.particleCount ? d : 0 | d;
    var h = Math.min(d + f, this.activationEnd), n = h - this.activationIndex | 0;
    this._activateParticles(d, h, b, 0 < n ? a / n : 0);
    this.activationIndex += f;
    this.activationIndex > k && (this.activationIndex = c);
    this.age += a;
  }
};
SPE.Emitter.prototype.reset = function(a) {
  if (this.age = 0, this.alive = !1, !0 === a) {
    for (var c = this.attributeOffset, k = this.paramsArray, b = this.attributes.params.bufferAttribute, f = c + this.particleCount - 1; f >= c; --f) {
      a = 4 * f, k[a] = 0, k[a + 1] = 0;
    }
    b.updateRange.offset = 0;
    b.updateRange.count = -1;
    b.needsUpdate = !0;
  }
  return this;
};
SPE.Emitter.prototype.enable = function() {
  return this.alive = !0, this;
};
SPE.Emitter.prototype.disable = function() {
  return this.alive = !1, this;
};
SPE.Emitter.prototype.remove = function() {
  return null !== this.group ? this.group.removeEmitter(this) : console.error("Emitter does not belong to a group, cannot remove."), this;
};
var __extends = this && this.__extends || function(a, c) {
  function k() {
    this.constructor = a;
  }
  for (var b in c) {
    c.hasOwnProperty(b) && (a[b] = c[b]);
  }
  a.prototype = null === c ? Object.create(c) : (k.prototype = c.prototype, new k);
}, spine;
(function(a) {
  var c = function() {
    function a(a, b, c) {
      if (null == a) {
        throw Error("name cannot be null.");
      }
      if (null == b) {
        throw Error("timelines cannot be null.");
      }
      this.name = a;
      this.timelines = b;
      this.duration = c;
    }
    a.prototype.apply = function(a, b, c, d, f, h, k, m) {
      if (null == a) {
        throw Error("skeleton cannot be null.");
      }
      d && 0 != this.duration && (c %= this.duration, 0 < b && (b %= this.duration));
      d = this.timelines;
      for (var e = 0, l = d.length; e < l; e++) {
        d[e].apply(a, b, c, f, h, k, m);
      }
    };
    a.binarySearch = function(a, b, c) {
      void 0 === c && (c = 1);
      var e = 0, d = a.length / c - 2;
      if (0 == d) {
        return c;
      }
      for (var f = d >>> 1;;) {
        a[(f + 1) * c] <= b ? e = f + 1 : d = f;
        if (e == d) {
          return (e + 1) * c;
        }
        f = e + d >>> 1;
      }
    };
    a.linearSearch = function(a, b, c) {
      for (var e = 0, d = a.length - c; e <= d; e += c) {
        if (a[e] > b) {
          return e;
        }
      }
      return -1;
    };
    return a;
  }();
  a.Animation = c;
  (function(a) {
    a[a.setup = 0] = "setup";
    a[a.current = 1] = "current";
    a[a.currentLayered = 2] = "currentLayered";
  })(a.MixPose || (a.MixPose = {}));
  var k = a.MixPose;
  (function(a) {
    a[a["in"] = 0] = "in";
    a[a.out = 1] = "out";
  })(a.MixDirection || (a.MixDirection = {}));
  var b = a.MixDirection;
  (function(a) {
    a[a.rotate = 0] = "rotate";
    a[a.translate = 1] = "translate";
    a[a.scale = 2] = "scale";
    a[a.shear = 3] = "shear";
    a[a.attachment = 4] = "attachment";
    a[a.color = 5] = "color";
    a[a.deform = 6] = "deform";
    a[a.event = 7] = "event";
    a[a.drawOrder = 8] = "drawOrder";
    a[a.ikConstraint = 9] = "ikConstraint";
    a[a.transformConstraint = 10] = "transformConstraint";
    a[a.pathConstraintPosition = 11] = "pathConstraintPosition";
    a[a.pathConstraintSpacing = 12] = "pathConstraintSpacing";
    a[a.pathConstraintMix = 13] = "pathConstraintMix";
    a[a.twoColor = 14] = "twoColor";
  })(a.TimelineType || (a.TimelineType = {}));
  var f = a.TimelineType, d = function() {
    function b(c) {
      if (0 >= c) {
        throw Error("frameCount must be > 0: " + c);
      }
      this.curves = a.Utils.newFloatArray((c - 1) * b.BEZIER_SIZE);
    }
    b.prototype.getFrameCount = function() {
      return this.curves.length / b.BEZIER_SIZE + 1;
    };
    b.prototype.setLinear = function(a) {
      this.curves[a * b.BEZIER_SIZE] = b.LINEAR;
    };
    b.prototype.setStepped = function(a) {
      this.curves[a * b.BEZIER_SIZE] = b.STEPPED;
    };
    b.prototype.getCurveType = function(a) {
      a *= b.BEZIER_SIZE;
      if (a == this.curves.length) {
        return b.LINEAR;
      }
      a = this.curves[a];
      return a == b.LINEAR ? b.LINEAR : a == b.STEPPED ? b.STEPPED : b.BEZIER;
    };
    b.prototype.setCurve = function(a, c, d, f, h) {
      var e = .03 * (2 * -c + f), k = .03 * (2 * -d + h);
      f = .006 * (3 * (c - f) + 1);
      h = .006 * (3 * (d - h) + 1);
      var l = 2 * e + f, m = 2 * k + h;
      c = .3 * c + e + .16666667 * f;
      d = .3 * d + k + .16666667 * h;
      a *= b.BEZIER_SIZE;
      k = this.curves;
      k[a++] = b.BEZIER;
      e = c;
      for (var n = d, t = a + b.BEZIER_SIZE - 1; a < t; a += 2) {
        k[a] = e, k[a + 1] = n, c += l, d += m, l += f, m += h, e += c, n += d;
      }
    };
    b.prototype.getCurvePercent = function(c, e) {
      e = a.MathUtils.clamp(e, 0, 1);
      var d = this.curves;
      c *= b.BEZIER_SIZE;
      var f = d[c];
      if (f == b.LINEAR) {
        return e;
      }
      if (f == b.STEPPED) {
        return 0;
      }
      c++;
      f = 0;
      for (var h = c, k = c + b.BEZIER_SIZE - 1; c < k; c += 2) {
        if (f = d[c], f >= e) {
          return c == h ? k = h = 0 : (h = d[c - 2], k = d[c - 1]), k + (d[c + 1] - k) * (e - h) / (f - h);
        }
      }
      d = d[c - 1];
      return d + (1 - d) * (e - f) / (1 - f);
    };
    b.LINEAR = 0;
    b.STEPPED = 1;
    b.BEZIER = 2;
    b.BEZIER_SIZE = 19;
    return b;
  }();
  a.CurveTimeline = d;
  var h = function(b) {
    function d(c) {
      b.call(this, c);
      this.frames = a.Utils.newFloatArray(c << 1);
    }
    __extends(d, b);
    d.prototype.getPropertyId = function() {
      return (f.rotate << 24) + this.boneIndex;
    };
    d.prototype.setFrame = function(a, b, c) {
      a <<= 1;
      this.frames[a] = b;
      this.frames[a + d.ROTATION] = c;
    };
    d.prototype.apply = function(a, b, f, h, m, n, t) {
      b = this.frames;
      a = a.bones[this.boneIndex];
      if (f < b[0]) {
        switch(n) {
          case k.setup:
            a.rotation = a.data.rotation;
            break;
          case k.current:
            n = a.data.rotation - a.rotation, a.rotation += (n - 360 * (16384 - (16384.499999999996 - n / 360 | 0))) * m;
        }
      } else {
        if (f >= b[b.length - d.ENTRIES]) {
          n == k.setup ? a.rotation = a.data.rotation + b[b.length + d.PREV_ROTATION] * m : (n = a.data.rotation + b[b.length + d.PREV_ROTATION] - a.rotation, a.rotation += (n - 360 * (16384 - (16384.499999999996 - n / 360 | 0))) * m);
        } else {
          t = c.binarySearch(b, f, d.ENTRIES);
          h = b[t + d.PREV_ROTATION];
          var e = b[t];
          f = this.getCurvePercent((t >> 1) - 1, 1 - (f - e) / (b[t + d.PREV_TIME] - e));
          b = b[t + d.ROTATION] - h;
          b = h + (b - 360 * (16384 - (16384.499999999996 - b / 360 | 0))) * f;
          n == k.setup ? a.rotation = a.data.rotation + (b - 360 * (16384 - (16384.499999999996 - b / 360 | 0))) * m : (b = a.data.rotation + b - a.rotation, a.rotation += (b - 360 * (16384 - (16384.499999999996 - b / 360 | 0))) * m);
        }
      }
    };
    d.ENTRIES = 2;
    d.PREV_TIME = -2;
    d.PREV_ROTATION = -1;
    d.ROTATION = 1;
    return d;
  }(d);
  a.RotateTimeline = h;
  h = function(b) {
    function d(c) {
      b.call(this, c);
      this.frames = a.Utils.newFloatArray(c * d.ENTRIES);
    }
    __extends(d, b);
    d.prototype.getPropertyId = function() {
      return (f.translate << 24) + this.boneIndex;
    };
    d.prototype.setFrame = function(a, b, c, f) {
      a *= d.ENTRIES;
      this.frames[a] = b;
      this.frames[a + d.X] = c;
      this.frames[a + d.Y] = f;
    };
    d.prototype.apply = function(a, b, f, h, m, n, t) {
      b = this.frames;
      a = a.bones[this.boneIndex];
      if (f < b[0]) {
        switch(n) {
          case k.setup:
            a.x = a.data.x;
            a.y = a.data.y;
            break;
          case k.current:
            a.x += (a.data.x - a.x) * m, a.y += (a.data.y - a.y) * m;
        }
      } else {
        if (f >= b[b.length - d.ENTRIES]) {
          h = b[b.length + d.PREV_X], t = b[b.length + d.PREV_Y];
        } else {
          var e = c.binarySearch(b, f, d.ENTRIES);
          h = b[e + d.PREV_X];
          t = b[e + d.PREV_Y];
          var l = b[e];
          f = this.getCurvePercent(e / d.ENTRIES - 1, 1 - (f - l) / (b[e + d.PREV_TIME] - l));
          h += (b[e + d.X] - h) * f;
          t += (b[e + d.Y] - t) * f;
        }
        n == k.setup ? (a.x = a.data.x + h * m, a.y = a.data.y + t * m) : (a.x += (a.data.x + h - a.x) * m, a.y += (a.data.y + t - a.y) * m);
      }
    };
    d.ENTRIES = 3;
    d.PREV_TIME = -3;
    d.PREV_X = -2;
    d.PREV_Y = -1;
    d.X = 1;
    d.Y = 2;
    return d;
  }(d);
  a.TranslateTimeline = h;
  var n = function(d) {
    function h(a) {
      d.call(this, a);
    }
    __extends(h, d);
    h.prototype.getPropertyId = function() {
      return (f.scale << 24) + this.boneIndex;
    };
    h.prototype.apply = function(e, d, f, m, n, t, q) {
      var l = this.frames;
      e = e.bones[this.boneIndex];
      if (f < l[0]) {
        switch(t) {
          case k.setup:
            e.scaleX = e.data.scaleX;
            e.scaleY = e.data.scaleY;
            break;
          case k.current:
            e.scaleX += (e.data.scaleX - e.scaleX) * n, e.scaleY += (e.data.scaleY - e.scaleY) * n;
        }
      } else {
        if (f >= l[l.length - h.ENTRIES]) {
          d = l[l.length + h.PREV_X] * e.data.scaleX, m = l[l.length + h.PREV_Y] * e.data.scaleY;
        } else {
          var p = c.binarySearch(l, f, h.ENTRIES);
          d = l[p + h.PREV_X];
          m = l[p + h.PREV_Y];
          var u = l[p];
          f = this.getCurvePercent(p / h.ENTRIES - 1, 1 - (f - u) / (l[p + h.PREV_TIME] - u));
          d = (d + (l[p + h.X] - d) * f) * e.data.scaleX;
          m = (m + (l[p + h.Y] - m) * f) * e.data.scaleY;
        }
        1 == n ? (e.scaleX = d, e.scaleY = m) : (t == k.setup ? (t = e.data.scaleX, f = e.data.scaleY) : (t = e.scaleX, f = e.scaleY), q == b.out ? (d = Math.abs(d) * a.MathUtils.signum(t), m = Math.abs(m) * a.MathUtils.signum(f)) : (t = Math.abs(t) * a.MathUtils.signum(d), f = Math.abs(f) * a.MathUtils.signum(m)), e.scaleX = t + (d - t) * n, e.scaleY = f + (m - f) * n);
      }
    };
    return h;
  }(h);
  a.ScaleTimeline = n;
  h = function(a) {
    function b(b) {
      a.call(this, b);
    }
    __extends(b, a);
    b.prototype.getPropertyId = function() {
      return (f.shear << 24) + this.boneIndex;
    };
    b.prototype.apply = function(a, d, f, h, m, n, t) {
      d = this.frames;
      a = a.bones[this.boneIndex];
      if (f < d[0]) {
        switch(n) {
          case k.setup:
            a.shearX = a.data.shearX;
            a.shearY = a.data.shearY;
            break;
          case k.current:
            a.shearX += (a.data.shearX - a.shearX) * m, a.shearY += (a.data.shearY - a.shearY) * m;
        }
      } else {
        if (f >= d[d.length - b.ENTRIES]) {
          h = d[d.length + b.PREV_X], t = d[d.length + b.PREV_Y];
        } else {
          var e = c.binarySearch(d, f, b.ENTRIES);
          h = d[e + b.PREV_X];
          t = d[e + b.PREV_Y];
          var l = d[e];
          f = this.getCurvePercent(e / b.ENTRIES - 1, 1 - (f - l) / (d[e + b.PREV_TIME] - l));
          h += (d[e + b.X] - h) * f;
          t += (d[e + b.Y] - t) * f;
        }
        n == k.setup ? (a.shearX = a.data.shearX + h * m, a.shearY = a.data.shearY + t * m) : (a.shearX += (a.data.shearX + h - a.shearX) * m, a.shearY += (a.data.shearY + t - a.shearY) * m);
      }
    };
    return b;
  }(h);
  a.ShearTimeline = h;
  h = function(b) {
    function d(c) {
      b.call(this, c);
      this.frames = a.Utils.newFloatArray(c * d.ENTRIES);
    }
    __extends(d, b);
    d.prototype.getPropertyId = function() {
      return (f.color << 24) + this.slotIndex;
    };
    d.prototype.setFrame = function(a, b, c, f, h, k) {
      a *= d.ENTRIES;
      this.frames[a] = b;
      this.frames[a + d.R] = c;
      this.frames[a + d.G] = f;
      this.frames[a + d.B] = h;
      this.frames[a + d.A] = k;
    };
    d.prototype.apply = function(a, b, f, h, m, n, t) {
      a = a.slots[this.slotIndex];
      var e = this.frames;
      if (f < e[0]) {
        switch(n) {
          case k.setup:
            a.color.setFromColor(a.data.color);
            break;
          case k.current:
            f = a.color, n = a.data.color, f.add((n.r - f.r) * m, (n.g - f.g) * m, (n.b - f.b) * m, (n.a - f.a) * m);
        }
      } else {
        if (f >= e[e.length - d.ENTRIES]) {
          f = e.length;
          b = e[f + d.PREV_R];
          h = e[f + d.PREV_G];
          t = e[f + d.PREV_B];
          var l = e[f + d.PREV_A];
        } else {
          var q = c.binarySearch(e, f, d.ENTRIES);
          b = e[q + d.PREV_R];
          h = e[q + d.PREV_G];
          t = e[q + d.PREV_B];
          l = e[q + d.PREV_A];
          var p = e[q];
          f = this.getCurvePercent(q / d.ENTRIES - 1, 1 - (f - p) / (e[q + d.PREV_TIME] - p));
          b += (e[q + d.R] - b) * f;
          h += (e[q + d.G] - h) * f;
          t += (e[q + d.B] - t) * f;
          l += (e[q + d.A] - l) * f;
        }
        1 == m ? a.color.set(b, h, t, l) : (f = a.color, n == k.setup && f.setFromColor(a.data.color), f.add((b - f.r) * m, (h - f.g) * m, (t - f.b) * m, (l - f.a) * m));
      }
    };
    d.ENTRIES = 5;
    d.PREV_TIME = -5;
    d.PREV_R = -4;
    d.PREV_G = -3;
    d.PREV_B = -2;
    d.PREV_A = -1;
    d.R = 1;
    d.G = 2;
    d.B = 3;
    d.A = 4;
    return d;
  }(d);
  a.ColorTimeline = h;
  h = function(b) {
    function d(c) {
      b.call(this, c);
      this.frames = a.Utils.newFloatArray(c * d.ENTRIES);
    }
    __extends(d, b);
    d.prototype.getPropertyId = function() {
      return (f.twoColor << 24) + this.slotIndex;
    };
    d.prototype.setFrame = function(a, b, c, f, h, k, m, n, t) {
      a *= d.ENTRIES;
      this.frames[a] = b;
      this.frames[a + d.R] = c;
      this.frames[a + d.G] = f;
      this.frames[a + d.B] = h;
      this.frames[a + d.A] = k;
      this.frames[a + d.R2] = m;
      this.frames[a + d.G2] = n;
      this.frames[a + d.B2] = t;
    };
    d.prototype.apply = function(a, b, f, h, m, n, t) {
      a = a.slots[this.slotIndex];
      var e = this.frames;
      if (f < e[0]) {
        switch(n) {
          case k.setup:
            a.color.setFromColor(a.data.color);
            a.darkColor.setFromColor(a.data.darkColor);
            break;
          case k.current:
            f = a.color, e = a.darkColor, n = a.data.color, a = a.data.darkColor, f.add((n.r - f.r) * m, (n.g - f.g) * m, (n.b - f.b) * m, (n.a - f.a) * m), e.add((a.r - e.r) * m, (a.g - e.g) * m, (a.b - e.b) * m, 0);
        }
      } else {
        if (f >= e[e.length - d.ENTRIES]) {
          f = e.length;
          b = e[f + d.PREV_R];
          h = e[f + d.PREV_G];
          t = e[f + d.PREV_B];
          var l = e[f + d.PREV_A];
          var q = e[f + d.PREV_R2];
          var p = e[f + d.PREV_G2];
          var u = e[f + d.PREV_B2];
        } else {
          var w = c.binarySearch(e, f, d.ENTRIES);
          b = e[w + d.PREV_R];
          h = e[w + d.PREV_G];
          t = e[w + d.PREV_B];
          l = e[w + d.PREV_A];
          q = e[w + d.PREV_R2];
          p = e[w + d.PREV_G2];
          u = e[w + d.PREV_B2];
          var y = e[w];
          f = this.getCurvePercent(w / d.ENTRIES - 1, 1 - (f - y) / (e[w + d.PREV_TIME] - y));
          b += (e[w + d.R] - b) * f;
          h += (e[w + d.G] - h) * f;
          t += (e[w + d.B] - t) * f;
          l += (e[w + d.A] - l) * f;
          q += (e[w + d.R2] - q) * f;
          p += (e[w + d.G2] - p) * f;
          u += (e[w + d.B2] - u) * f;
        }
        1 == m ? (a.color.set(b, h, t, l), a.darkColor.set(q, p, u, 1)) : (f = a.color, e = a.darkColor, n == k.setup && (f.setFromColor(a.data.color), e.setFromColor(a.data.darkColor)), f.add((b - f.r) * m, (h - f.g) * m, (t - f.b) * m, (l - f.a) * m), e.add((q - e.r) * m, (p - e.g) * m, (u - e.b) * m, 0));
      }
    };
    d.ENTRIES = 8;
    d.PREV_TIME = -8;
    d.PREV_R = -7;
    d.PREV_G = -6;
    d.PREV_B = -5;
    d.PREV_A = -4;
    d.PREV_R2 = -3;
    d.PREV_G2 = -2;
    d.PREV_B2 = -1;
    d.R = 1;
    d.G = 2;
    d.B = 3;
    d.A = 4;
    d.R2 = 5;
    d.G2 = 6;
    d.B2 = 7;
    return d;
  }(d);
  a.TwoColorTimeline = h;
  h = function() {
    function d(b) {
      this.frames = a.Utils.newFloatArray(b);
      this.attachmentNames = Array(b);
    }
    d.prototype.getPropertyId = function() {
      return (f.attachment << 24) + this.slotIndex;
    };
    d.prototype.getFrameCount = function() {
      return this.frames.length;
    };
    d.prototype.setFrame = function(a, b, c) {
      this.frames[a] = b;
      this.attachmentNames[a] = c;
    };
    d.prototype.apply = function(a, e, d, f, h, m, n) {
      e = a.slots[this.slotIndex];
      n == b.out && m == k.setup ? (d = e.data.attachmentName, e.setAttachment(null == d ? null : a.getAttachment(this.slotIndex, d))) : (n = this.frames, d < n[0] ? m == k.setup && (d = e.data.attachmentName, e.setAttachment(null == d ? null : a.getAttachment(this.slotIndex, d))) : (d = d >= n[n.length - 1] ? n.length - 1 : c.binarySearch(n, d, 1) - 1, d = this.attachmentNames[d], a.slots[this.slotIndex].setAttachment(null == d ? null : a.getAttachment(this.slotIndex, d))));
    };
    return d;
  }();
  a.AttachmentTimeline = h;
  var q = null;
  h = function(b) {
    function d(c) {
      b.call(this, c);
      this.frames = a.Utils.newFloatArray(c);
      this.frameVertices = Array(c);
      null == q && (q = a.Utils.newFloatArray(64));
    }
    __extends(d, b);
    d.prototype.getPropertyId = function() {
      return (f.deform << 27) + +this.attachment.id + this.slotIndex;
    };
    d.prototype.setFrame = function(a, b, c) {
      this.frames[a] = b;
      this.frameVertices[a] = c;
    };
    d.prototype.apply = function(b, d, f, h, m, n, t) {
      b = b.slots[this.slotIndex];
      var e = b.getAttachment();
      if (e instanceof a.VertexAttachment && e.applyDeform(this.attachment)) {
        d = b.attachmentVertices;
        0 == d.length && (m = 1);
        t = this.frameVertices;
        b = t[0].length;
        var l = this.frames;
        if (f < l[0]) {
          switch(n) {
            case k.setup:
              d.length = 0;
              break;
            case k.current:
              if (1 == m) {
                d.length = 0;
              } else {
                if (d = a.Utils.setArraySize(d, b), null == e.bones) {
                  for (n = e.vertices, h = 0; h < b; h++) {
                    d[h] += (n[h] - d[h]) * m;
                  }
                } else {
                  for (m = 1 - m, h = 0; h < b; h++) {
                    d[h] *= m;
                  }
                }
              }
          }
        } else {
          if (d = a.Utils.setArraySize(d, b), f >= l[l.length - 1]) {
            if (h = t[l.length - 1], 1 == m) {
              a.Utils.arrayCopy(h, 0, d, 0, b);
            } else {
              if (n == k.setup) {
                if (null == e.bones) {
                  for (t = e.vertices, f = 0; f < b; f++) {
                    n = t[f], d[f] = n + (h[f] - n) * m;
                  }
                } else {
                  for (n = 0; n < b; n++) {
                    d[n] = h[n] * m;
                  }
                }
              } else {
                for (n = 0; n < b; n++) {
                  d[n] += (h[n] - d[n]) * m;
                }
              }
            }
          } else {
            var q = c.binarySearch(l, f);
            h = t[q - 1];
            t = t[q];
            var p = l[q];
            f = this.getCurvePercent(q - 1, 1 - (f - p) / (l[q - 1] - p));
            if (1 == m) {
              for (m = 0; m < b; m++) {
                e = h[m], d[m] = e + (t[m] - e) * f;
              }
            } else {
              if (n == k.setup) {
                if (null == e.bones) {
                  for (l = e.vertices, q = 0; q < b; q++) {
                    e = h[q], n = l[q], d[q] = n + (e + (t[q] - e) * f - n) * m;
                  }
                } else {
                  for (n = 0; n < b; n++) {
                    e = h[n], d[n] = (e + (t[n] - e) * f) * m;
                  }
                }
              } else {
                for (n = 0; n < b; n++) {
                  e = h[n], d[n] += (e + (t[n] - e) * f - d[n]) * m;
                }
              }
            }
          }
        }
      }
    };
    return d;
  }(d);
  a.DeformTimeline = h;
  h = function() {
    function b(b) {
      this.frames = a.Utils.newFloatArray(b);
      this.events = Array(b);
    }
    b.prototype.getPropertyId = function() {
      return f.event << 24;
    };
    b.prototype.getFrameCount = function() {
      return this.frames.length;
    };
    b.prototype.setFrame = function(a, b) {
      this.frames[a] = b.time;
      this.events[a] = b;
    };
    b.prototype.apply = function(a, b, d, f, h, k, m) {
      if (null != f) {
        var e = this.frames, l = this.frames.length;
        if (b > d) {
          this.apply(a, b, Number.MAX_VALUE, f, h, k, m), b = -1;
        } else {
          if (b >= e[l - 1]) {
            return;
          }
        }
        if (!(d < e[0])) {
          if (b < e[0]) {
            a = 0;
          } else {
            for (a = c.binarySearch(e, b), b = e[a]; 0 < a && e[a - 1] == b;) {
              a--;
            }
          }
          for (; a < l && d >= e[a]; a++) {
            f.push(this.events[a]);
          }
        }
      }
    };
    return b;
  }();
  a.EventTimeline = h;
  h = function() {
    function d(b) {
      this.frames = a.Utils.newFloatArray(b);
      this.drawOrders = Array(b);
    }
    d.prototype.getPropertyId = function() {
      return f.drawOrder << 24;
    };
    d.prototype.getFrameCount = function() {
      return this.frames.length;
    };
    d.prototype.setFrame = function(a, b, c) {
      this.frames[a] = b;
      this.drawOrders[a] = c;
    };
    d.prototype.apply = function(d, e, f, h, m, n, q) {
      e = d.drawOrder;
      h = d.slots;
      if (q == b.out && n == k.setup) {
        a.Utils.arrayCopy(d.slots, 0, d.drawOrder, 0, d.slots.length);
      } else {
        if (q = this.frames, f < q[0]) {
          n == k.setup && a.Utils.arrayCopy(d.slots, 0, d.drawOrder, 0, d.slots.length);
        } else {
          if (d = f >= q[q.length - 1] ? q.length - 1 : c.binarySearch(q, f) - 1, d = this.drawOrders[d], null == d) {
            a.Utils.arrayCopy(h, 0, e, 0, h.length);
          } else {
            for (f = 0, n = d.length; f < n; f++) {
              e[f] = h[d[f]];
            }
          }
        }
      }
    };
    return d;
  }();
  a.DrawOrderTimeline = h;
  h = function(d) {
    function h(b) {
      d.call(this, b);
      this.frames = a.Utils.newFloatArray(b * h.ENTRIES);
    }
    __extends(h, d);
    h.prototype.getPropertyId = function() {
      return (f.ikConstraint << 24) + this.ikConstraintIndex;
    };
    h.prototype.setFrame = function(a, b, c, d) {
      a *= h.ENTRIES;
      this.frames[a] = b;
      this.frames[a + h.MIX] = c;
      this.frames[a + h.BEND_DIRECTION] = d;
    };
    h.prototype.apply = function(a, d, f, m, n, q, t) {
      d = this.frames;
      a = a.ikConstraints[this.ikConstraintIndex];
      if (f < d[0]) {
        switch(q) {
          case k.setup:
            a.mix = a.data.mix;
            a.bendDirection = a.data.bendDirection;
            break;
          case k.current:
            a.mix += (a.data.mix - a.mix) * n, a.bendDirection = a.data.bendDirection;
        }
      } else {
        if (f >= d[d.length - h.ENTRIES]) {
          q == k.setup ? (a.mix = a.data.mix + (d[d.length + h.PREV_MIX] - a.data.mix) * n, a.bendDirection = t == b.out ? a.data.bendDirection : d[d.length + h.PREV_BEND_DIRECTION]) : (a.mix += (d[d.length + h.PREV_MIX] - a.mix) * n, t == b.in && (a.bendDirection = d[d.length + h.PREV_BEND_DIRECTION]));
        } else {
          m = c.binarySearch(d, f, h.ENTRIES);
          var e = d[m + h.PREV_MIX], l = d[m];
          f = this.getCurvePercent(m / h.ENTRIES - 1, 1 - (f - l) / (d[m + h.PREV_TIME] - l));
          q == k.setup ? (a.mix = a.data.mix + (e + (d[m + h.MIX] - e) * f - a.data.mix) * n, a.bendDirection = t == b.out ? a.data.bendDirection : d[m + h.PREV_BEND_DIRECTION]) : (a.mix += (e + (d[m + h.MIX] - e) * f - a.mix) * n, t == b.in && (a.bendDirection = d[m + h.PREV_BEND_DIRECTION]));
        }
      }
    };
    h.ENTRIES = 3;
    h.PREV_TIME = -3;
    h.PREV_MIX = -2;
    h.PREV_BEND_DIRECTION = -1;
    h.MIX = 1;
    h.BEND_DIRECTION = 2;
    return h;
  }(d);
  a.IkConstraintTimeline = h;
  h = function(b) {
    function d(c) {
      b.call(this, c);
      this.frames = a.Utils.newFloatArray(c * d.ENTRIES);
    }
    __extends(d, b);
    d.prototype.getPropertyId = function() {
      return (f.transformConstraint << 24) + this.transformConstraintIndex;
    };
    d.prototype.setFrame = function(a, b, c, f, h, k) {
      a *= d.ENTRIES;
      this.frames[a] = b;
      this.frames[a + d.ROTATE] = c;
      this.frames[a + d.TRANSLATE] = f;
      this.frames[a + d.SCALE] = h;
      this.frames[a + d.SHEAR] = k;
    };
    d.prototype.apply = function(a, b, f, h, m, n, q) {
      b = this.frames;
      a = a.transformConstraints[this.transformConstraintIndex];
      if (f < b[0]) {
        switch(f = a.data, n) {
          case k.setup:
            a.rotateMix = f.rotateMix;
            a.translateMix = f.translateMix;
            a.scaleMix = f.scaleMix;
            a.shearMix = f.shearMix;
            break;
          case k.current:
            a.rotateMix += (f.rotateMix - a.rotateMix) * m, a.translateMix += (f.translateMix - a.translateMix) * m, a.scaleMix += (f.scaleMix - a.scaleMix) * m, a.shearMix += (f.shearMix - a.shearMix) * m;
        }
      } else {
        if (f >= b[b.length - d.ENTRIES]) {
          f = b.length;
          h = b[f + d.PREV_ROTATE];
          q = b[f + d.PREV_TRANSLATE];
          var e = b[f + d.PREV_SCALE];
          var l = b[f + d.PREV_SHEAR];
        } else {
          var t = c.binarySearch(b, f, d.ENTRIES);
          h = b[t + d.PREV_ROTATE];
          q = b[t + d.PREV_TRANSLATE];
          e = b[t + d.PREV_SCALE];
          l = b[t + d.PREV_SHEAR];
          var p = b[t];
          f = this.getCurvePercent(t / d.ENTRIES - 1, 1 - (f - p) / (b[t + d.PREV_TIME] - p));
          h += (b[t + d.ROTATE] - h) * f;
          q += (b[t + d.TRANSLATE] - q) * f;
          e += (b[t + d.SCALE] - e) * f;
          l += (b[t + d.SHEAR] - l) * f;
        }
        n == k.setup ? (f = a.data, a.rotateMix = f.rotateMix + (h - f.rotateMix) * m, a.translateMix = f.translateMix + (q - f.translateMix) * m, a.scaleMix = f.scaleMix + (e - f.scaleMix) * m, a.shearMix = f.shearMix + (l - f.shearMix) * m) : (a.rotateMix += (h - a.rotateMix) * m, a.translateMix += (q - a.translateMix) * m, a.scaleMix += (e - a.scaleMix) * m, a.shearMix += (l - a.shearMix) * m);
      }
    };
    d.ENTRIES = 5;
    d.PREV_TIME = -5;
    d.PREV_ROTATE = -4;
    d.PREV_TRANSLATE = -3;
    d.PREV_SCALE = -2;
    d.PREV_SHEAR = -1;
    d.ROTATE = 1;
    d.TRANSLATE = 2;
    d.SCALE = 3;
    d.SHEAR = 4;
    return d;
  }(d);
  a.TransformConstraintTimeline = h;
  h = function(b) {
    function d(c) {
      b.call(this, c);
      this.frames = a.Utils.newFloatArray(c * d.ENTRIES);
    }
    __extends(d, b);
    d.prototype.getPropertyId = function() {
      return (f.pathConstraintPosition << 24) + this.pathConstraintIndex;
    };
    d.prototype.setFrame = function(a, b, c) {
      a *= d.ENTRIES;
      this.frames[a] = b;
      this.frames[a + d.VALUE] = c;
    };
    d.prototype.apply = function(a, b, f, h, m, n, q) {
      b = this.frames;
      a = a.pathConstraints[this.pathConstraintIndex];
      if (f < b[0]) {
        switch(n) {
          case k.setup:
            a.position = a.data.position;
            break;
          case k.current:
            a.position += (a.data.position - a.position) * m;
        }
      } else {
        if (f >= b[b.length - d.ENTRIES]) {
          h = b[b.length + d.PREV_VALUE];
        } else {
          q = c.binarySearch(b, f, d.ENTRIES);
          h = b[q + d.PREV_VALUE];
          var e = b[q];
          f = this.getCurvePercent(q / d.ENTRIES - 1, 1 - (f - e) / (b[q + d.PREV_TIME] - e));
          h += (b[q + d.VALUE] - h) * f;
        }
        a.position = n == k.setup ? a.data.position + (h - a.data.position) * m : a.position + (h - a.position) * m;
      }
    };
    d.ENTRIES = 2;
    d.PREV_TIME = -2;
    d.PREV_VALUE = -1;
    d.VALUE = 1;
    return d;
  }(d);
  a.PathConstraintPositionTimeline = h;
  h = function(a) {
    function b(b) {
      a.call(this, b);
    }
    __extends(b, a);
    b.prototype.getPropertyId = function() {
      return (f.pathConstraintSpacing << 24) + this.pathConstraintIndex;
    };
    b.prototype.apply = function(a, d, f, h, m, n, q) {
      d = this.frames;
      a = a.pathConstraints[this.pathConstraintIndex];
      if (f < d[0]) {
        switch(n) {
          case k.setup:
            a.spacing = a.data.spacing;
            break;
          case k.current:
            a.spacing += (a.data.spacing - a.spacing) * m;
        }
      } else {
        if (f >= d[d.length - b.ENTRIES]) {
          h = d[d.length + b.PREV_VALUE];
        } else {
          q = c.binarySearch(d, f, b.ENTRIES);
          h = d[q + b.PREV_VALUE];
          var e = d[q];
          f = this.getCurvePercent(q / b.ENTRIES - 1, 1 - (f - e) / (d[q + b.PREV_TIME] - e));
          h += (d[q + b.VALUE] - h) * f;
        }
        a.spacing = n == k.setup ? a.data.spacing + (h - a.data.spacing) * m : a.spacing + (h - a.spacing) * m;
      }
    };
    return b;
  }(h);
  a.PathConstraintSpacingTimeline = h;
  d = function(b) {
    function d(c) {
      b.call(this, c);
      this.frames = a.Utils.newFloatArray(c * d.ENTRIES);
    }
    __extends(d, b);
    d.prototype.getPropertyId = function() {
      return (f.pathConstraintMix << 24) + this.pathConstraintIndex;
    };
    d.prototype.setFrame = function(a, b, c, f) {
      a *= d.ENTRIES;
      this.frames[a] = b;
      this.frames[a + d.ROTATE] = c;
      this.frames[a + d.TRANSLATE] = f;
    };
    d.prototype.apply = function(a, b, f, h, m, n, q) {
      b = this.frames;
      a = a.pathConstraints[this.pathConstraintIndex];
      if (f < b[0]) {
        switch(n) {
          case k.setup:
            a.rotateMix = a.data.rotateMix;
            a.translateMix = a.data.translateMix;
            break;
          case k.current:
            a.rotateMix += (a.data.rotateMix - a.rotateMix) * m, a.translateMix += (a.data.translateMix - a.translateMix) * m;
        }
      } else {
        if (f >= b[b.length - d.ENTRIES]) {
          h = b[b.length + d.PREV_ROTATE], q = b[b.length + d.PREV_TRANSLATE];
        } else {
          var e = c.binarySearch(b, f, d.ENTRIES);
          h = b[e + d.PREV_ROTATE];
          q = b[e + d.PREV_TRANSLATE];
          var l = b[e];
          f = this.getCurvePercent(e / d.ENTRIES - 1, 1 - (f - l) / (b[e + d.PREV_TIME] - l));
          h += (b[e + d.ROTATE] - h) * f;
          q += (b[e + d.TRANSLATE] - q) * f;
        }
        n == k.setup ? (a.rotateMix = a.data.rotateMix + (h - a.data.rotateMix) * m, a.translateMix = a.data.translateMix + (q - a.data.translateMix) * m) : (a.rotateMix += (h - a.rotateMix) * m, a.translateMix += (q - a.translateMix) * m);
      }
    };
    d.ENTRIES = 3;
    d.PREV_TIME = -3;
    d.PREV_ROTATE = -2;
    d.PREV_TRANSLATE = -1;
    d.ROTATE = 1;
    d.TRANSLATE = 2;
    return d;
  }(d);
  a.PathConstraintMixTimeline = d;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    function c(c) {
      this.tracks = [];
      this.events = [];
      this.listeners = [];
      this.queue = new b(this);
      this.propertyIDs = new a.IntSet;
      this.mixingTo = [];
      this.animationsChanged = !1;
      this.timeScale = 1;
      this.trackEntryPool = new a.Pool(function() {
        return new k;
      });
      this.data = c;
    }
    c.prototype.update = function(a) {
      a *= this.timeScale;
      for (var b = this.tracks, c = 0, d = b.length; c < d; c++) {
        var e = b[c];
        if (null != e) {
          e.animationLast = e.nextAnimationLast;
          e.trackLast = e.nextTrackLast;
          var f = a * e.timeScale;
          if (0 < e.delay) {
            e.delay -= f;
            if (0 < e.delay) {
              continue;
            }
            f = -e.delay;
            e.delay = 0;
          }
          var h = e.next;
          if (null != h) {
            var k = e.trackLast - h.delay;
            if (0 <= k) {
              h.delay = 0;
              h.trackTime = k + a * h.timeScale;
              e.trackTime += f;
              for (this.setCurrent(c, h, !0); null != h.mixingFrom;) {
                h.mixTime += f, h = h.mixingFrom;
              }
              continue;
            }
          } else {
            if (e.trackLast >= e.trackEnd && null == e.mixingFrom) {
              b[c] = null;
              this.queue.end(e);
              this.disposeNext(e);
              continue;
            }
          }
          if (null != e.mixingFrom && this.updateMixingFrom(e, a)) {
            for (h = e.mixingFrom, e.mixingFrom = null; null != h;) {
              this.queue.end(h), h = h.mixingFrom;
            }
          }
          e.trackTime += f;
        }
      }
      this.queue.drain();
    };
    c.prototype.updateMixingFrom = function(a, b) {
      var c = a.mixingFrom;
      if (null == c) {
        return !0;
      }
      var d = this.updateMixingFrom(c, b);
      if (0 < a.mixTime && (a.mixTime >= a.mixDuration || 0 == a.timeScale)) {
        if (0 == c.totalAlpha || 0 == a.mixDuration) {
          a.mixingFrom = c.mixingFrom, a.interruptAlpha = c.interruptAlpha, this.queue.end(c);
        }
        return d;
      }
      c.animationLast = c.nextAnimationLast;
      c.trackLast = c.nextTrackLast;
      c.trackTime += b * c.timeScale;
      a.mixTime += b * a.timeScale;
      return !1;
    };
    c.prototype.apply = function(b) {
      if (null == b) {
        throw Error("skeleton cannot be null.");
      }
      this.animationsChanged && this._animationsChanged();
      for (var d = this.events, f = this.tracks, h = !1, e = 0, k = f.length; e < k; e++) {
        var n = f[e];
        if (!(null == n || 0 < n.delay)) {
          h = !0;
          var w = 0 == e ? a.MixPose.current : a.MixPose.currentLayered, y = n.alpha;
          null != n.mixingFrom ? y *= this.applyMixingFrom(n, b, w) : n.trackTime >= n.trackEnd && null == n.next && (y = 0);
          var x = n.animationLast, p = n.getAnimationTime(), v = n.animation.timelines.length, z = n.animation.timelines;
          if (1 == y) {
            for (var C = 0; C < v; C++) {
              z[C].apply(b, x, p, d, 1, a.MixPose.setup, a.MixDirection.in);
            }
          } else {
            var A = n.timelineData, D = 0 == n.timelinesRotation.length;
            D && a.Utils.setArraySize(n.timelinesRotation, v << 1, null);
            var E = n.timelinesRotation;
            for (C = 0; C < v; C++) {
              var B = z[C], G = A[C] >= c.FIRST ? a.MixPose.setup : w;
              B instanceof a.RotateTimeline ? this.applyRotateTimeline(B, b, p, y, G, E, C << 1, D) : B.apply(b, x, p, d, y, G, a.MixDirection.in);
            }
          }
          this.queueEvents(n, p);
          d.length = 0;
          n.nextAnimationLast = p;
          n.nextTrackLast = n.trackTime;
        }
      }
      this.queue.drain();
      return h;
    };
    c.prototype.applyMixingFrom = function(b, d, f) {
      var h = b.mixingFrom;
      null != h.mixingFrom && this.applyMixingFrom(h, d, f);
      if (0 == b.mixDuration) {
        var e = 1;
      } else {
        e = b.mixTime / b.mixDuration, 1 < e && (e = 1);
      }
      var k = e < h.eventThreshold ? this.events : null, m = e < h.attachmentThreshold, n = e < h.drawOrderThreshold, q = h.animationLast, x = h.getAnimationTime(), p = h.animation.timelines.length, v = h.animation.timelines, z = h.timelineData, C = h.timelineDipMix, A = 0 == h.timelinesRotation.length;
      A && a.Utils.setArraySize(h.timelinesRotation, p << 1, null);
      for (var D = h.timelinesRotation, E, B = h.alpha * b.interruptAlpha, G = B * (1 - e), H, K = h.totalAlpha = 0; K < p; K++) {
        var I = v[K];
        switch(z[K]) {
          case c.SUBSEQUENT:
            if (!m && I instanceof a.AttachmentTimeline) {
              continue;
            }
            if (!n && I instanceof a.DrawOrderTimeline) {
              continue;
            }
            E = f;
            H = G;
            break;
          case c.FIRST:
            E = a.MixPose.setup;
            H = G;
            break;
          case c.DIP:
            E = a.MixPose.setup;
            H = B;
            break;
          default:
            E = a.MixPose.setup;
            H = B;
            var L = C[K];
            H *= Math.max(0, 1 - L.mixTime / L.mixDuration);
        }
        h.totalAlpha += H;
        I instanceof a.RotateTimeline ? this.applyRotateTimeline(I, d, x, H, E, D, K << 1, A) : I.apply(d, q, x, k, H, E, a.MixDirection.out);
      }
      0 < b.mixDuration && this.queueEvents(h, x);
      this.events.length = 0;
      h.nextAnimationLast = x;
      h.nextTrackLast = h.trackTime;
      return e;
    };
    c.prototype.applyRotateTimeline = function(b, c, d, f, e, h, k, w) {
      w && (h[k] = 0);
      if (1 == f) {
        b.apply(c, 0, d, null, 1, e, a.MixDirection.in);
      } else {
        var l = b.frames;
        c = c.bones[b.boneIndex];
        if (d < l[0]) {
          e == a.MixPose.setup && (c.rotation = c.data.rotation);
        } else {
          if (d >= l[l.length - a.RotateTimeline.ENTRIES]) {
            l = c.data.rotation + l[l.length + a.RotateTimeline.PREV_ROTATION];
          } else {
            var m = a.Animation.binarySearch(l, d, a.RotateTimeline.ENTRIES), n = l[m + a.RotateTimeline.PREV_ROTATION], q = l[m];
            b = b.getCurvePercent((m >> 1) - 1, 1 - (d - q) / (l[m + a.RotateTimeline.PREV_TIME] - q));
            l = l[m + a.RotateTimeline.ROTATION] - n;
            l = n + (l - 360 * (16384 - (16384.499999999996 - l / 360 | 0))) * b + c.data.rotation;
            l -= 360 * (16384 - (16384.499999999996 - l / 360 | 0));
          }
          e = e == a.MixPose.setup ? c.data.rotation : c.rotation;
          l -= e;
          0 == l ? d = h[k] : (l -= 360 * (16384 - (16384.499999999996 - l / 360 | 0)), w ? (w = 0, d = l) : (w = h[k], d = h[k + 1]), n = 0 < l, b = 0 <= w, a.MathUtils.signum(d) != a.MathUtils.signum(l) && 90 >= Math.abs(d) && (180 < Math.abs(w) && (w += 360 * a.MathUtils.signum(w)), b = n), d = l + w - w % 360, b != n && (d += 360 * a.MathUtils.signum(w)), h[k] = d);
          h[k + 1] = l;
          e += d * f;
          c.rotation = e - 360 * (16384 - (16384.499999999996 - e / 360 | 0));
        }
      }
    };
    c.prototype.queueEvents = function(a, b) {
      for (var c = a.animationStart, d = a.animationEnd, e = d - c, f = a.trackLast % e, h = this.events, k = 0, n = h.length; k < n; k++) {
        var q = h[k];
        if (q.time < f) {
          break;
        }
        q.time > d || this.queue.event(a, q);
      }
      for ((a.loop ? f > a.trackTime % e : b >= d && a.animationLast < d) && this.queue.complete(a); k < n; k++) {
        h[k].time < c || this.queue.event(a, h[k]);
      }
    };
    c.prototype.clearTracks = function() {
      var a = this.queue.drainDisabled;
      this.queue.drainDisabled = !0;
      for (var b = 0, c = this.tracks.length; b < c; b++) {
        this.clearTrack(b);
      }
      this.tracks.length = 0;
      this.queue.drainDisabled = a;
      this.queue.drain();
    };
    c.prototype.clearTrack = function(a) {
      if (!(a >= this.tracks.length) && (a = this.tracks[a], null != a)) {
        this.queue.end(a);
        this.disposeNext(a);
        for (var b = a;;) {
          var c = b.mixingFrom;
          if (null == c) {
            break;
          }
          this.queue.end(c);
          b.mixingFrom = null;
          b = c;
        }
        this.tracks[a.trackIndex] = null;
        this.queue.drain();
      }
    };
    c.prototype.setCurrent = function(a, b, c) {
      var d = this.expandToIndex(a);
      this.tracks[a] = b;
      null != d && (c && this.queue.interrupt(d), b.mixingFrom = d, b.mixTime = 0, null != d.mixingFrom && 0 < d.mixDuration && (b.interruptAlpha *= Math.min(1, d.mixTime / d.mixDuration)), d.timelinesRotation.length = 0);
      this.queue.start(b);
    };
    c.prototype.setAnimation = function(a, b, c) {
      var d = this.data.skeletonData.findAnimation(b);
      if (null == d) {
        throw Error("Animation not found: " + b);
      }
      return this.setAnimationWith(a, d, c);
    };
    c.prototype.setAnimationWith = function(a, b, c) {
      if (null == b) {
        throw Error("animation cannot be null.");
      }
      var d = !0, e = this.expandToIndex(a);
      null != e && (-1 == e.nextTrackLast ? (this.tracks[a] = e.mixingFrom, this.queue.interrupt(e), this.queue.end(e), this.disposeNext(e), e = e.mixingFrom, d = !1) : this.disposeNext(e));
      b = this.trackEntry(a, b, c, e);
      this.setCurrent(a, b, d);
      this.queue.drain();
      return b;
    };
    c.prototype.addAnimation = function(a, b, c, d) {
      var e = this.data.skeletonData.findAnimation(b);
      if (null == e) {
        throw Error("Animation not found: " + b);
      }
      return this.addAnimationWith(a, e, c, d);
    };
    c.prototype.addAnimationWith = function(a, b, c, d) {
      if (null == b) {
        throw Error("animation cannot be null.");
      }
      var e = this.expandToIndex(a);
      if (null != e) {
        for (; null != e.next;) {
          e = e.next;
        }
      }
      c = this.trackEntry(a, b, c, e);
      null == e ? (this.setCurrent(a, c, !0), this.queue.drain()) : (e.next = c, 0 >= d && (a = e.animationEnd - e.animationStart, d = 0 != a ? d + (a * (1 + (e.trackTime / a | 0)) - this.data.getMix(e.animation, b)) : 0));
      c.delay = d;
      return c;
    };
    c.prototype.setEmptyAnimation = function(a, b) {
      a = this.setAnimationWith(a, c.emptyAnimation, !1);
      a.mixDuration = b;
      a.trackEnd = b;
      return a;
    };
    c.prototype.addEmptyAnimation = function(a, b, d) {
      0 >= d && (d -= b);
      a = this.addAnimationWith(a, c.emptyAnimation, !1, d);
      a.mixDuration = b;
      a.trackEnd = b;
      return a;
    };
    c.prototype.setEmptyAnimations = function(a) {
      var b = this.queue.drainDisabled;
      this.queue.drainDisabled = !0;
      for (var c = 0, d = this.tracks.length; c < d; c++) {
        var e = this.tracks[c];
        null != e && this.setEmptyAnimation(e.trackIndex, a);
      }
      this.queue.drainDisabled = b;
      this.queue.drain();
    };
    c.prototype.expandToIndex = function(b) {
      if (b < this.tracks.length) {
        return this.tracks[b];
      }
      a.Utils.ensureArrayCapacity(this.tracks, b - this.tracks.length + 1, null);
      this.tracks.length = b + 1;
      return null;
    };
    c.prototype.trackEntry = function(a, b, c, d) {
      var e = this.trackEntryPool.obtain();
      e.trackIndex = a;
      e.animation = b;
      e.loop = c;
      e.eventThreshold = 0;
      e.attachmentThreshold = 0;
      e.drawOrderThreshold = 0;
      e.animationStart = 0;
      e.animationEnd = b.duration;
      e.animationLast = -1;
      e.nextAnimationLast = -1;
      e.delay = 0;
      e.trackTime = 0;
      e.trackLast = -1;
      e.nextTrackLast = -1;
      e.trackEnd = Number.MAX_VALUE;
      e.timeScale = 1;
      e.alpha = 1;
      e.interruptAlpha = 1;
      e.mixTime = 0;
      e.mixDuration = null == d ? 0 : this.data.getMix(d.animation, b);
      return e;
    };
    c.prototype.disposeNext = function(a) {
      for (var b = a.next; null != b;) {
        this.queue.dispose(b), b = b.next;
      }
      a.next = null;
    };
    c.prototype._animationsChanged = function() {
      this.animationsChanged = !1;
      var a = this.propertyIDs;
      a.clear();
      for (var b = this.mixingTo, c = 0, d = this.tracks.length; c < d; c++) {
        var e = this.tracks[c];
        null != e && e.setTimelineData(null, b, a);
      }
    };
    c.prototype.getCurrent = function(a) {
      return a >= this.tracks.length ? null : this.tracks[a];
    };
    c.prototype.addListener = function(a) {
      if (null == a) {
        throw Error("listener cannot be null.");
      }
      this.listeners.push(a);
    };
    c.prototype.removeListener = function(a) {
      a = this.listeners.indexOf(a);
      0 <= a && this.listeners.splice(a, 1);
    };
    c.prototype.clearListeners = function() {
      this.listeners.length = 0;
    };
    c.prototype.clearListenerNotifications = function() {
      this.queue.clear();
    };
    c.emptyAnimation = new a.Animation("<empty>", [], 0);
    c.SUBSEQUENT = 0;
    c.FIRST = 1;
    c.DIP = 2;
    c.DIP_MIX = 3;
    return c;
  }();
  a.AnimationState = c;
  var k = function() {
    function b() {
      this.timelineData = [];
      this.timelineDipMix = [];
      this.timelinesRotation = [];
    }
    b.prototype.reset = function() {
      this.listener = this.animation = this.mixingFrom = this.next = null;
      this.timelineData.length = 0;
      this.timelineDipMix.length = 0;
      this.timelinesRotation.length = 0;
    };
    b.prototype.setTimelineData = function(b, d, f) {
      null != b && d.push(b);
      var h = null != this.mixingFrom ? this.mixingFrom.setTimelineData(this, d, f) : this;
      null != b && d.pop();
      var e = d.length - 1, k = this.animation.timelines, m = this.animation.timelines.length, n = a.Utils.setArraySize(this.timelineData, m);
      this.timelineDipMix.length = 0;
      var q = a.Utils.setArraySize(this.timelineDipMix, m), x = 0;
      a: for (; x < m; x++) {
        var p = k[x].getPropertyId();
        if (f.add(p)) {
          if (null != b && b.hasTimeline(p)) {
            for (var v = e; 0 <= v; v--) {
              var z = d[v];
              if (!z.hasTimeline(p) && 0 < z.mixDuration) {
                n[x] = c.DIP_MIX;
                q[x] = z;
                continue a;
              }
            }
            n[x] = c.DIP;
          } else {
            n[x] = c.FIRST;
          }
        } else {
          n[x] = c.SUBSEQUENT;
        }
      }
      return h;
    };
    b.prototype.hasTimeline = function(a) {
      for (var b = this.animation.timelines, c = 0, d = b.length; c < d; c++) {
        if (b[c].getPropertyId() == a) {
          return !0;
        }
      }
      return !1;
    };
    b.prototype.getAnimationTime = function() {
      if (this.loop) {
        var a = this.animationEnd - this.animationStart;
        return 0 == a ? this.animationStart : this.trackTime % a + this.animationStart;
      }
      return Math.min(this.trackTime + this.animationStart, this.animationEnd);
    };
    b.prototype.setAnimationLast = function(a) {
      this.nextAnimationLast = this.animationLast = a;
    };
    b.prototype.isComplete = function() {
      return this.trackTime >= this.animationEnd - this.animationStart;
    };
    b.prototype.resetRotationDirections = function() {
      this.timelinesRotation.length = 0;
    };
    return b;
  }();
  a.TrackEntry = k;
  var b = function() {
    function a(a) {
      this.objects = [];
      this.drainDisabled = !1;
      this.animState = a;
    }
    a.prototype.start = function(a) {
      this.objects.push(f.start);
      this.objects.push(a);
      this.animState.animationsChanged = !0;
    };
    a.prototype.interrupt = function(a) {
      this.objects.push(f.interrupt);
      this.objects.push(a);
    };
    a.prototype.end = function(a) {
      this.objects.push(f.end);
      this.objects.push(a);
      this.animState.animationsChanged = !0;
    };
    a.prototype.dispose = function(a) {
      this.objects.push(f.dispose);
      this.objects.push(a);
    };
    a.prototype.complete = function(a) {
      this.objects.push(f.complete);
      this.objects.push(a);
    };
    a.prototype.event = function(a, b) {
      this.objects.push(f.event);
      this.objects.push(a);
      this.objects.push(b);
    };
    a.prototype.drain = function() {
      if (!this.drainDisabled) {
        this.drainDisabled = !0;
        for (var a = this.objects, b = this.animState.listeners, c = 0; c < a.length; c += 2) {
          var d = a[c + 1];
          switch(a[c]) {
            case f.start:
              null != d.listener && d.listener.start && d.listener.start(d);
              for (var e = 0; e < b.length; e++) {
                b[e].start && b[e].start(d);
              }
              break;
            case f.interrupt:
              null != d.listener && d.listener.interrupt && d.listener.interrupt(d);
              for (e = 0; e < b.length; e++) {
                b[e].interrupt && b[e].interrupt(d);
              }
              break;
            case f.end:
              for (null != d.listener && d.listener.end && d.listener.end(d), e = 0; e < b.length; e++) {
                b[e].end && b[e].end(d);
              }
            case f.dispose:
              null != d.listener && d.listener.dispose && d.listener.dispose(d);
              for (e = 0; e < b.length; e++) {
                b[e].dispose && b[e].dispose(d);
              }
              this.animState.trackEntryPool.free(d);
              break;
            case f.complete:
              null != d.listener && d.listener.complete && d.listener.complete(d);
              for (e = 0; e < b.length; e++) {
                b[e].complete && b[e].complete(d);
              }
              break;
            case f.event:
              var h = a[c++ + 2];
              null != d.listener && d.listener.event && d.listener.event(d, h);
              for (e = 0; e < b.length; e++) {
                b[e].event && b[e].event(d, h);
              }
          }
        }
        this.clear();
        this.drainDisabled = !1;
      }
    };
    a.prototype.clear = function() {
      this.objects.length = 0;
    };
    return a;
  }();
  a.EventQueue = b;
  (function(a) {
    a[a.start = 0] = "start";
    a[a.interrupt = 1] = "interrupt";
    a[a.end = 2] = "end";
    a[a.dispose = 3] = "dispose";
    a[a.complete = 4] = "complete";
    a[a.event = 5] = "event";
  })(a.EventType || (a.EventType = {}));
  var f = a.EventType, d = function() {
    function a() {
    }
    a.prototype.start = function(a) {
    };
    a.prototype.interrupt = function(a) {
    };
    a.prototype.end = function(a) {
    };
    a.prototype.dispose = function(a) {
    };
    a.prototype.complete = function(a) {
    };
    a.prototype.event = function(a, b) {
    };
    return a;
  }();
  a.AnimationStateAdapter2 = d;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    function a(a) {
      this.animationToMixTime = {};
      this.defaultMix = 0;
      if (null == a) {
        throw Error("skeletonData cannot be null.");
      }
      this.skeletonData = a;
    }
    a.prototype.setMix = function(a, c, d) {
      var b = this.skeletonData.findAnimation(a);
      if (null == b) {
        throw Error("Animation not found: " + a);
      }
      a = this.skeletonData.findAnimation(c);
      if (null == a) {
        throw Error("Animation not found: " + c);
      }
      this.setMixWith(b, a, d);
    };
    a.prototype.setMixWith = function(a, c, d) {
      if (null == a) {
        throw Error("from cannot be null.");
      }
      if (null == c) {
        throw Error("to cannot be null.");
      }
      this.animationToMixTime[a.name + c.name] = d;
    };
    a.prototype.getMix = function(a, c) {
      a = this.animationToMixTime[a.name + c.name];
      return void 0 === a ? this.defaultMix : a;
    };
    return a;
  }();
  a.AnimationStateData = c;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    function a(a, c) {
      void 0 === c && (c = "");
      this.assets = {};
      this.errors = {};
      this.loaded = this.toLoad = 0;
      this.textureLoader = a;
      this.pathPrefix = c;
    }
    a.prototype.loadText = function(a, c, d) {
      var b = this;
      void 0 === c && (c = null);
      void 0 === d && (d = null);
      a = this.pathPrefix + a;
      this.toLoad++;
      var f = new XMLHttpRequest;
      f.onreadystatechange = function() {
        f.readyState == XMLHttpRequest.DONE && (200 <= f.status && 300 > f.status ? (b.assets[a] = f.responseText, c && c(a, f.responseText)) : (b.errors[a] = "Couldn't load text " + a + ": status " + f.status + ", " + f.responseText, d && d(a, "Couldn't load text " + a + ": status " + f.status + ", " + f.responseText)), b.toLoad--, b.loaded++);
      };
      f.open("GET", a, !0);
      f.send();
    };
    a.prototype.loadTexture = function(a, c, d) {
      var b = this;
      void 0 === c && (c = null);
      void 0 === d && (d = null);
      a = this.pathPrefix + a;
      this.toLoad++;
      var f = new Image;
      f.crossOrigin = "anonymous";
      f.onload = function(d) {
        d = b.textureLoader(f);
        b.assets[a] = d;
        b.toLoad--;
        b.loaded++;
        c && c(a, f);
      };
      f.onerror = function(c) {
        b.errors[a] = "Couldn't load image " + a;
        b.toLoad--;
        b.loaded++;
        d && d(a, "Couldn't load image " + a);
      };
      f.src = a;
    };
    a.prototype.loadTextureData = function(a, c, d, h) {
      var b = this;
      void 0 === d && (d = null);
      void 0 === h && (h = null);
      a = this.pathPrefix + a;
      this.toLoad++;
      var f = new Image;
      f.onload = function(c) {
        c = b.textureLoader(f);
        b.assets[a] = c;
        b.toLoad--;
        b.loaded++;
        d && d(a, f);
      };
      f.onerror = function(c) {
        b.errors[a] = "Couldn't load image " + a;
        b.toLoad--;
        b.loaded++;
        h && h(a, "Couldn't load image " + a);
      };
      f.src = c;
    };
    a.prototype.get = function(a) {
      a = this.pathPrefix + a;
      return this.assets[a];
    };
    a.prototype.remove = function(a) {
      a = this.pathPrefix + a;
      var b = this.assets[a];
      b.dispose && b.dispose();
      this.assets[a] = null;
    };
    a.prototype.removeAll = function() {
      for (var a in this.assets) {
        var c = this.assets[a];
        c.dispose && c.dispose();
      }
      this.assets = {};
    };
    a.prototype.isLoadingComplete = function() {
      return 0 == this.toLoad;
    };
    a.prototype.getToLoad = function() {
      return this.toLoad;
    };
    a.prototype.getLoaded = function() {
      return this.loaded;
    };
    a.prototype.dispose = function() {
      this.removeAll();
    };
    a.prototype.hasErrors = function() {
      return 0 < Object.keys(this.errors).length;
    };
    a.prototype.getErrors = function() {
      return this.errors;
    };
    return a;
  }();
  a.AssetManager = c;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    function c(a) {
      this.atlas = a;
    }
    c.prototype.newRegionAttachment = function(b, c, d) {
      b = this.atlas.findRegion(d);
      if (null == b) {
        throw Error("Region not found in atlas: " + d + " (region attachment: " + c + ")");
      }
      b.renderObject = b;
      c = new a.RegionAttachment(c);
      c.setRegion(b);
      return c;
    };
    c.prototype.newMeshAttachment = function(b, c, d) {
      b = this.atlas.findRegion(d);
      if (null == b) {
        throw Error("Region not found in atlas: " + d + " (mesh attachment: " + c + ")");
      }
      b.renderObject = b;
      c = new a.MeshAttachment(c);
      c.region = b;
      return c;
    };
    c.prototype.newBoundingBoxAttachment = function(b, c) {
      return new a.BoundingBoxAttachment(c);
    };
    c.prototype.newPathAttachment = function(b, c) {
      return new a.PathAttachment(c);
    };
    c.prototype.newPointAttachment = function(b, c) {
      return new a.PointAttachment(c);
    };
    c.prototype.newClippingAttachment = function(b, c) {
      return new a.ClippingAttachment(c);
    };
    return c;
  }();
  a.AtlasAttachmentLoader = c;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    return function(a) {
      if (null == a) {
        throw Error("name cannot be null.");
      }
      this.name = a;
    };
  }();
  a.Attachment = c;
  c = function(a) {
    function b(c) {
      a.call(this, c);
      this.id = (b.nextID++ & 65535) << 11;
      this.worldVerticesLength = 0;
    }
    __extends(b, a);
    b.prototype.computeWorldVertices = function(a, b, c, k, q, m) {
      c = q + (c >> 1) * m;
      var d = a.bone.skeleton, e = a.attachmentVertices, f = this.vertices, h = this.bones;
      if (null == h) {
        0 < e.length && (f = e);
        a = a.bone;
        e = a.worldX;
        h = a.worldY;
        var n = a.a;
        d = a.b;
        var y = a.c;
        a = a.d;
        for (var x = b; q < c; x += 2, q += m) {
          b = f[x];
          var p = f[x + 1];
          k[q] = b * n + p * d + e;
          k[q + 1] = b * y + p * a + h;
        }
      } else {
        for (p = a = n = 0; p < b; p += 2) {
          y = h[n], n += y + 1, a += y;
        }
        x = d.bones;
        if (0 == e.length) {
          for (d = 3 * a; q < c; q += m) {
            var v = 0, z = 0;
            y = h[n++];
            for (y += n; n < y; n++, d += 3) {
              a = x[h[n]];
              b = f[d];
              p = f[d + 1];
              var C = f[d + 2];
              v += (b * a.a + p * a.b + a.worldX) * C;
              z += (b * a.c + p * a.d + a.worldY) * C;
            }
            k[q] = v;
            k[q + 1] = z;
          }
        } else {
          d = 3 * a;
          for (var A = a << 1; q < c; q += m) {
            z = v = 0;
            y = h[n++];
            for (y += n; n < y; n++, d += 3, A += 2) {
              a = x[h[n]], b = f[d] + e[A], p = f[d + 1] + e[A + 1], C = f[d + 2], v += (b * a.a + p * a.b + a.worldX) * C, z += (b * a.c + p * a.d + a.worldY) * C;
            }
            k[q] = v;
            k[q + 1] = z;
          }
        }
      }
    };
    b.prototype.applyDeform = function(a) {
      return this == a;
    };
    b.nextID = 0;
    return b;
  }(c);
  a.VertexAttachment = c;
})(spine || (spine = {}));
(function(a) {
  a = a.AttachmentType || (a.AttachmentType = {});
  a[a.Region = 0] = "Region";
  a[a.BoundingBox = 1] = "BoundingBox";
  a[a.Mesh = 2] = "Mesh";
  a[a.LinkedMesh = 3] = "LinkedMesh";
  a[a.Path = 4] = "Path";
  a[a.Point = 5] = "Point";
})(spine || (spine = {}));
(function(a) {
  var c = function(c) {
    function b(b) {
      c.call(this, b);
      this.color = new a.Color(1, 1, 1, 1);
    }
    __extends(b, c);
    return b;
  }(a.VertexAttachment);
  a.BoundingBoxAttachment = c;
})(spine || (spine = {}));
(function(a) {
  var c = function(c) {
    function b(b) {
      c.call(this, b);
      this.color = new a.Color(.2275, .2275, .8078, 1);
    }
    __extends(b, c);
    return b;
  }(a.VertexAttachment);
  a.ClippingAttachment = c;
})(spine || (spine = {}));
(function(a) {
  var c = function(c) {
    function b(b) {
      c.call(this, b);
      this.color = new a.Color(1, 1, 1, 1);
      this.inheritDeform = !1;
      this.tempColor = new a.Color(0, 0, 0, 0);
    }
    __extends(b, c);
    b.prototype.updateUVs = function() {
      var b, c;
      if (null == this.region) {
        var h = b = 0;
        var k = c = 1;
      } else {
        h = this.region.u, b = this.region.v, k = this.region.u2 - h, c = this.region.v2 - b;
      }
      var q = this.regionUVs;
      if (null == this.uvs || this.uvs.length != q.length) {
        this.uvs = a.Utils.newFloatArray(q.length);
      }
      var m = this.uvs;
      if (this.region.rotate) {
        for (var t = 0, e = m.length; t < e; t += 2) {
          m[t] = h + q[t + 1] * k, m[t + 1] = b + c - q[t] * c;
        }
      } else {
        for (t = 0, e = m.length; t < e; t += 2) {
          m[t] = h + q[t] * k, m[t + 1] = b + q[t + 1] * c;
        }
      }
    };
    b.prototype.applyDeform = function(a) {
      return this == a || this.inheritDeform && this.parentMesh == a;
    };
    b.prototype.getParentMesh = function() {
      return this.parentMesh;
    };
    b.prototype.setParentMesh = function(a) {
      this.parentMesh = a;
      null != a && (this.bones = a.bones, this.vertices = a.vertices, this.worldVerticesLength = a.worldVerticesLength, this.regionUVs = a.regionUVs, this.triangles = a.triangles, this.hullLength = a.hullLength, this.worldVerticesLength = a.worldVerticesLength);
    };
    return b;
  }(a.VertexAttachment);
  a.MeshAttachment = c;
})(spine || (spine = {}));
(function(a) {
  var c = function(c) {
    function b(b) {
      c.call(this, b);
      this.constantSpeed = this.closed = !1;
      this.color = new a.Color(1, 1, 1, 1);
    }
    __extends(b, c);
    return b;
  }(a.VertexAttachment);
  a.PathAttachment = c;
})(spine || (spine = {}));
(function(a) {
  var c = function(c) {
    function b(b) {
      c.call(this, b);
      this.color = new a.Color(.38, .94, 0, 1);
    }
    __extends(b, c);
    b.prototype.computeWorldPosition = function(a, b) {
      b.x = this.x * a.a + this.y * a.b + a.worldX;
      b.y = this.x * a.c + this.y * a.d + a.worldY;
      return b;
    };
    b.prototype.computeWorldRotation = function(b) {
      var c = a.MathUtils.cosDeg(this.rotation), f = a.MathUtils.sinDeg(this.rotation);
      return Math.atan2(c * b.c + f * b.d, c * b.a + f * b.b) * a.MathUtils.radDeg;
    };
    return b;
  }(a.VertexAttachment);
  a.PointAttachment = c;
})(spine || (spine = {}));
(function(a) {
  var c = function(c) {
    function b(b) {
      c.call(this, b);
      this.y = this.x = 0;
      this.scaleY = this.scaleX = 1;
      this.height = this.width = this.rotation = 0;
      this.color = new a.Color(1, 1, 1, 1);
      this.offset = a.Utils.newFloatArray(8);
      this.uvs = a.Utils.newFloatArray(8);
      this.tempColor = new a.Color(1, 1, 1, 1);
    }
    __extends(b, c);
    b.prototype.updateOffset = function() {
      var a = this.width / this.region.originalWidth * this.scaleX, c = this.height / this.region.originalHeight * this.scaleY, h = -this.width / 2 * this.scaleX + this.region.offsetX * a, k = -this.height / 2 * this.scaleY + this.region.offsetY * c, q = h + this.region.width * a;
      a = k + this.region.height * c;
      c = this.rotation * Math.PI / 180;
      var m = Math.cos(c), t = Math.sin(c);
      c = h * m + this.x;
      h *= t;
      var e = k * m + this.y;
      k *= t;
      var l = q * m + this.x;
      q *= t;
      m = a * m + this.y;
      a *= t;
      t = this.offset;
      t[b.OX1] = c - k;
      t[b.OY1] = e + h;
      t[b.OX2] = c - a;
      t[b.OY2] = m + h;
      t[b.OX3] = l - a;
      t[b.OY3] = m + q;
      t[b.OX4] = l - k;
      t[b.OY4] = e + q;
    };
    b.prototype.setRegion = function(a) {
      this.region = a;
      var b = this.uvs;
      a.rotate ? (b[2] = a.u, b[3] = a.v2, b[4] = a.u, b[5] = a.v, b[6] = a.u2, b[7] = a.v, b[0] = a.u2, b[1] = a.v2) : (b[0] = a.u, b[1] = a.v2, b[2] = a.u, b[3] = a.v, b[4] = a.u2, b[5] = a.v, b[6] = a.u2, b[7] = a.v2);
    };
    b.prototype.computeWorldVertices = function(a, c, h, k) {
      var d = this.offset, f = a.worldX, n = a.worldY, e = a.a, l = a.b, u = a.c;
      a = a.d;
      var w = d[b.OX1];
      var y = d[b.OY1];
      c[h] = w * e + y * l + f;
      c[h + 1] = w * u + y * a + n;
      h += k;
      w = d[b.OX2];
      y = d[b.OY2];
      c[h] = w * e + y * l + f;
      c[h + 1] = w * u + y * a + n;
      h += k;
      w = d[b.OX3];
      y = d[b.OY3];
      c[h] = w * e + y * l + f;
      c[h + 1] = w * u + y * a + n;
      h += k;
      w = d[b.OX4];
      y = d[b.OY4];
      c[h] = w * e + y * l + f;
      c[h + 1] = w * u + y * a + n;
    };
    b.OX1 = 0;
    b.OY1 = 1;
    b.OX2 = 2;
    b.OY2 = 3;
    b.OX3 = 4;
    b.OY3 = 5;
    b.OX4 = 6;
    b.OY4 = 7;
    b.X1 = 0;
    b.Y1 = 1;
    b.C1R = 2;
    b.C1G = 3;
    b.C1B = 4;
    b.C1A = 5;
    b.U1 = 6;
    b.V1 = 7;
    b.X2 = 8;
    b.Y2 = 9;
    b.C2R = 10;
    b.C2G = 11;
    b.C2B = 12;
    b.C2A = 13;
    b.U2 = 14;
    b.V2 = 15;
    b.X3 = 16;
    b.Y3 = 17;
    b.C3R = 18;
    b.C3G = 19;
    b.C3B = 20;
    b.C3A = 21;
    b.U3 = 22;
    b.V3 = 23;
    b.X4 = 24;
    b.Y4 = 25;
    b.C4R = 26;
    b.C4G = 27;
    b.C4B = 28;
    b.C4A = 29;
    b.U4 = 30;
    b.V4 = 31;
    return b;
  }(a.Attachment);
  a.RegionAttachment = c;
})(spine || (spine = {}));
(function(a) {
  a = a.BlendMode || (a.BlendMode = {});
  a[a.Normal = 0] = "Normal";
  a[a.Additive = 1] = "Additive";
  a[a.Multiply = 2] = "Multiply";
  a[a.Screen = 3] = "Screen";
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    function c(a, c, d) {
      this.children = [];
      this.ashearY = this.ashearX = this.ascaleY = this.ascaleX = this.arotation = this.ay = this.ax = this.shearY = this.shearX = this.scaleY = this.scaleX = this.rotation = this.y = this.x = 0;
      this.appliedValid = !1;
      this.worldY = this.d = this.c = this.worldX = this.b = this.a = 0;
      this.sorted = !1;
      if (null == a) {
        throw Error("data cannot be null.");
      }
      if (null == c) {
        throw Error("skeleton cannot be null.");
      }
      this.data = a;
      this.skeleton = c;
      this.parent = d;
      this.setToSetupPose();
    }
    c.prototype.update = function() {
      this.updateWorldTransformWith(this.x, this.y, this.rotation, this.scaleX, this.scaleY, this.shearX, this.shearY);
    };
    c.prototype.updateWorldTransform = function() {
      this.updateWorldTransformWith(this.x, this.y, this.rotation, this.scaleX, this.scaleY, this.shearX, this.shearY);
    };
    c.prototype.updateWorldTransformWith = function(b, c, d, h, k, q, m) {
      this.ax = b;
      this.ay = c;
      this.arotation = d;
      this.ascaleX = h;
      this.ascaleY = k;
      this.ashearX = q;
      this.ashearY = m;
      this.appliedValid = !0;
      var f = this.parent;
      if (null == f) {
        m = d + 90 + m;
        f = a.MathUtils.cosDeg(d + q) * h;
        var e = a.MathUtils.cosDeg(m) * k;
        h *= a.MathUtils.sinDeg(d + q);
        k *= a.MathUtils.sinDeg(m);
        var l = this.skeleton;
        l.flipX && (b = -b, f = -f, e = -e);
        l.flipY && (c = -c, h = -h, k = -k);
        this.a = f;
        this.b = e;
        this.c = h;
        this.d = k;
        this.worldX = b + l.x;
        this.worldY = c + l.y;
      } else {
        l = f.a;
        var n = f.b, w = f.c, y = f.d;
        this.worldX = l * b + n * c + f.worldX;
        this.worldY = w * b + y * c + f.worldY;
        switch(this.data.transformMode) {
          case a.TransformMode.Normal:
            m = d + 90 + m;
            f = a.MathUtils.cosDeg(d + q) * h;
            e = a.MathUtils.cosDeg(m) * k;
            h *= a.MathUtils.sinDeg(d + q);
            k *= a.MathUtils.sinDeg(m);
            this.a = l * f + n * h;
            this.b = l * e + n * k;
            this.c = w * f + y * h;
            this.d = w * e + y * k;
            return;
          case a.TransformMode.OnlyTranslation:
            m = d + 90 + m;
            this.a = a.MathUtils.cosDeg(d + q) * h;
            this.b = a.MathUtils.cosDeg(m) * k;
            this.c = a.MathUtils.sinDeg(d + q) * h;
            this.d = a.MathUtils.sinDeg(m) * k;
            break;
          case a.TransformMode.NoRotationOrReflection:
            f = l * l + w * w;
            1E-4 < f ? (f = Math.abs(l * y - n * w) / f, n = w * f, y = l * f, f = Math.atan2(w, l) * a.MathUtils.radDeg) : (w = l = 0, f = 90 - Math.atan2(y, n) * a.MathUtils.radDeg);
            q = d + q - f;
            m = d + m - f + 90;
            f = a.MathUtils.cosDeg(q) * h;
            e = a.MathUtils.cosDeg(m) * k;
            h *= a.MathUtils.sinDeg(q);
            k *= a.MathUtils.sinDeg(m);
            this.a = l * f - n * h;
            this.b = l * e - n * k;
            this.c = w * f + y * h;
            this.d = w * e + y * k;
            break;
          case a.TransformMode.NoScale:
          case a.TransformMode.NoScaleOrReflection:
            f = a.MathUtils.cosDeg(d);
            e = a.MathUtils.sinDeg(d);
            d = l * f + n * e;
            b = w * f + y * e;
            f = Math.sqrt(d * d + b * b);
            1E-5 < f && (f = 1 / f);
            d *= f;
            b *= f;
            f = Math.sqrt(d * d + b * b);
            e = Math.PI / 2 + Math.atan2(b, d);
            c = Math.cos(e) * f;
            var x = Math.sin(e) * f;
            f = a.MathUtils.cosDeg(q) * h;
            e = a.MathUtils.cosDeg(90 + m) * k;
            h *= a.MathUtils.sinDeg(q);
            k *= a.MathUtils.sinDeg(90 + m);
            if (this.data.transformMode != a.TransformMode.NoScaleOrReflection ? 0 > l * y - n * w : this.skeleton.flipX != this.skeleton.flipY) {
              c = -c, x = -x;
            }
            this.a = d * f + c * h;
            this.b = d * e + c * k;
            this.c = b * f + x * h;
            this.d = b * e + x * k;
            return;
        }
        this.skeleton.flipX && (this.a = -this.a, this.b = -this.b);
        this.skeleton.flipY && (this.c = -this.c, this.d = -this.d);
      }
    };
    c.prototype.setToSetupPose = function() {
      var a = this.data;
      this.x = a.x;
      this.y = a.y;
      this.rotation = a.rotation;
      this.scaleX = a.scaleX;
      this.scaleY = a.scaleY;
      this.shearX = a.shearX;
      this.shearY = a.shearY;
    };
    c.prototype.getWorldRotationX = function() {
      return Math.atan2(this.c, this.a) * a.MathUtils.radDeg;
    };
    c.prototype.getWorldRotationY = function() {
      return Math.atan2(this.d, this.b) * a.MathUtils.radDeg;
    };
    c.prototype.getWorldScaleX = function() {
      return Math.sqrt(this.a * this.a + this.c * this.c);
    };
    c.prototype.getWorldScaleY = function() {
      return Math.sqrt(this.b * this.b + this.d * this.d);
    };
    c.prototype.updateAppliedTransform = function() {
      this.appliedValid = !0;
      var b = this.parent;
      if (null == b) {
        this.ax = this.worldX, this.ay = this.worldY, this.arotation = Math.atan2(this.c, this.a) * a.MathUtils.radDeg, this.ascaleX = Math.sqrt(this.a * this.a + this.c * this.c), this.ascaleY = Math.sqrt(this.b * this.b + this.d * this.d), this.ashearX = 0, this.ashearY = Math.atan2(this.a * this.b + this.c * this.d, this.a * this.d - this.b * this.c) * a.MathUtils.radDeg;
      } else {
        var c = b.a, d = b.b, h = b.c, k = b.d, q = 1 / (c * k - d * h), m = this.worldX - b.worldX;
        b = this.worldY - b.worldY;
        this.ax = m * k * q - b * d * q;
        this.ay = b * c * q - m * h * q;
        k *= q;
        c *= q;
        d *= q;
        q *= h;
        h = k * this.a - d * this.c;
        d = k * this.b - d * this.d;
        k = c * this.c - q * this.a;
        q = c * this.d - q * this.b;
        this.ashearX = 0;
        this.ascaleX = Math.sqrt(h * h + k * k);
        1E-4 < this.ascaleX ? (c = h * q - d * k, this.ascaleY = c / this.ascaleX, this.ashearY = Math.atan2(h * d + k * q, c) * a.MathUtils.radDeg, this.arotation = Math.atan2(k, h) * a.MathUtils.radDeg) : (this.ascaleX = 0, this.ascaleY = Math.sqrt(d * d + q * q), this.ashearY = 0, this.arotation = 90 - Math.atan2(q, d) * a.MathUtils.radDeg);
      }
    };
    c.prototype.worldToLocal = function(a) {
      var b = this.a, c = this.b, h = this.c, k = this.d, q = 1 / (b * k - c * h), m = a.x - this.worldX, t = a.y - this.worldY;
      a.x = m * k * q - t * c * q;
      a.y = t * b * q - m * h * q;
      return a;
    };
    c.prototype.localToWorld = function(a) {
      var b = a.x, c = a.y;
      a.x = b * this.a + c * this.b + this.worldX;
      a.y = b * this.c + c * this.d + this.worldY;
      return a;
    };
    c.prototype.worldToLocalRotation = function(b) {
      var c = a.MathUtils.sinDeg(b);
      b = a.MathUtils.cosDeg(b);
      return Math.atan2(this.a * c - this.c * b, this.d * b - this.b * c) * a.MathUtils.radDeg;
    };
    c.prototype.localToWorldRotation = function(b) {
      var c = a.MathUtils.sinDeg(b);
      b = a.MathUtils.cosDeg(b);
      return Math.atan2(b * this.c + c * this.d, b * this.a + c * this.b) * a.MathUtils.radDeg;
    };
    c.prototype.rotateWorld = function(b) {
      var c = this.a, d = this.b, h = this.c, k = this.d, q = a.MathUtils.cosDeg(b);
      b = a.MathUtils.sinDeg(b);
      this.a = q * c - b * h;
      this.b = q * d - b * k;
      this.c = b * c + q * h;
      this.d = b * d + q * k;
      this.appliedValid = !1;
    };
    return c;
  }();
  a.Bone = c;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    return function(a, c, d) {
      this.rotation = this.y = this.x = 0;
      this.scaleY = this.scaleX = 1;
      this.shearY = this.shearX = 0;
      this.transformMode = k.Normal;
      if (0 > a) {
        throw Error("index must be >= 0.");
      }
      if (null == c) {
        throw Error("name cannot be null.");
      }
      this.index = a;
      this.name = c;
      this.parent = d;
    };
  }();
  a.BoneData = c;
  (function(a) {
    a[a.Normal = 0] = "Normal";
    a[a.OnlyTranslation = 1] = "OnlyTranslation";
    a[a.NoRotationOrReflection = 2] = "NoRotationOrReflection";
    a[a.NoScale = 3] = "NoScale";
    a[a.NoScaleOrReflection = 4] = "NoScaleOrReflection";
  })(a.TransformMode || (a.TransformMode = {}));
  var k = a.TransformMode;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    return function(a, b) {
      if (null == b) {
        throw Error("data cannot be null.");
      }
      this.time = a;
      this.data = b;
    };
  }();
  a.Event = c;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    return function(a) {
      this.name = a;
    };
  }();
  a.EventData = c;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    function c(a, c) {
      this.mix = 1;
      this.bendDirection = 0;
      if (null == a) {
        throw Error("data cannot be null.");
      }
      if (null == c) {
        throw Error("skeleton cannot be null.");
      }
      this.data = a;
      this.mix = a.mix;
      this.bendDirection = a.bendDirection;
      this.bones = [];
      for (var b = 0; b < a.bones.length; b++) {
        this.bones.push(c.findBone(a.bones[b].name));
      }
      this.target = c.findBone(a.target.name);
    }
    c.prototype.getOrder = function() {
      return this.data.order;
    };
    c.prototype.apply = function() {
      this.update();
    };
    c.prototype.update = function() {
      var a = this.target, c = this.bones;
      switch(c.length) {
        case 1:
          this.apply1(c[0], a.worldX, a.worldY, this.mix);
          break;
        case 2:
          this.apply2(c[0], c[1], a.worldX, a.worldY, this.bendDirection, this.mix);
      }
    };
    c.prototype.apply1 = function(b, c, d, h) {
      b.appliedValid || b.updateAppliedTransform();
      var f = b.parent, k = 1 / (f.a * f.d - f.b * f.c);
      c -= f.worldX;
      d -= f.worldY;
      f = Math.atan2((d * f.a - c * f.c) * k - b.ay, (c * f.d - d * f.b) * k - b.ax) * a.MathUtils.radDeg - b.ashearX - b.arotation;
      0 > b.ascaleX && (f += 180);
      180 < f ? f -= 360 : -180 > f && (f += 360);
      b.updateWorldTransformWith(b.ax, b.ay, b.arotation + f * h, b.ascaleX, b.ascaleY, b.ashearX, b.ashearY);
    };
    c.prototype.apply2 = function(b, c, d, h, k, q) {
      if (0 == q) {
        c.updateWorldTransform();
      } else {
        b.appliedValid || b.updateAppliedTransform();
        c.appliedValid || c.updateAppliedTransform();
        var f = b.ax, n = b.ay, e = b.ascaleX, l = b.ascaleY, u = c.ascaleX;
        if (0 > e) {
          e = -e;
          var w = 180;
          var y = -1;
        } else {
          w = 0, y = 1;
        }
        0 > l && (l = -l, y = -y);
        if (0 > u) {
          u = -u;
          var x = 180;
        } else {
          x = 0;
        }
        var p = c.ax, v = b.a, z = b.b, C = b.c, A = b.d, D = 1E-4 >= Math.abs(e - l);
        if (D) {
          var E = c.ay;
          var B = v * p + z * E + b.worldX;
          var G = C * p + A * E + b.worldY;
        } else {
          E = 0, B = v * p + b.worldX, G = C * p + b.worldY;
        }
        var H = b.parent;
        v = H.a;
        z = H.b;
        C = H.c;
        A = H.d;
        var K = 1 / (v * A - z * C);
        d -= H.worldX;
        h -= H.worldY;
        var I = (d * A - h * z) * K - f, L = (h * v - d * C) * K - n;
        d = B - H.worldX;
        h = G - H.worldY;
        z = (d * A - h * z) * K - f;
        v = (h * v - d * C) * K - n;
        d = Math.sqrt(z * z + v * v);
        z = c.data.length * u;
        a: {
          if (D) {
            z *= e, v = (I * I + L * L - d * d - z * z) / (2 * d * z), -1 > v ? v = -1 : 1 < v && (v = 1), k *= Math.acos(v), v = d + z * v, z *= Math.sin(k), v = Math.atan2(L * v - I * z, I * v + L * z);
          } else {
            v = e * z;
            z *= l;
            h = v * v;
            u = z * z;
            D = I * I + L * L;
            I = Math.atan2(L, I);
            C = u * d * d + h * D - h * u;
            L = -2 * u * d;
            K = u - h;
            A = L * L - 4 * K * C;
            if (0 <= A && (A = Math.sqrt(A), 0 > L && (A = -A), A = -(L + A) / 2, L = A / K, C /= A, C = Math.abs(L) < Math.abs(C) ? L : C, C * C <= D)) {
              h = Math.sqrt(D - C * C) * k;
              v = I - Math.atan2(h, C);
              k = Math.atan2(h / l, (C - d) / e);
              break a;
            }
            e = a.MathUtils.PI;
            L = d - v;
            K = L * L;
            l = B = 0;
            G = d + v;
            H = G * G;
            var R = 0;
            C = -v * d / (h - u);
            -1 <= C && 1 >= C && (C = Math.acos(C), d = v * Math.cos(C) + d, h = z * Math.sin(C), A = d * d + h * h, A < K && (e = C, K = A, L = d, B = h), A > H && (l = C, H = A, G = d, R = h));
            D <= (K + H) / 2 ? (v = I - Math.atan2(B * k, L), k *= e) : (v = I - Math.atan2(R * k, G), k *= l);
          }
        }
        z = Math.atan2(E, p) * y;
        C = b.arotation;
        v = (v - z) * a.MathUtils.radDeg + w - C;
        180 < v ? v -= 360 : -180 > v && (v += 360);
        b.updateWorldTransformWith(f, n, C + v * q, b.ascaleX, b.ascaleY, 0, 0);
        C = c.arotation;
        k = ((k + z) * a.MathUtils.radDeg - c.ashearX) * y + x - C;
        180 < k ? k -= 360 : -180 > k && (k += 360);
        c.updateWorldTransformWith(p, E, C + k * q, c.ascaleX, c.ascaleY, c.ashearX, c.ashearY);
      }
    };
    return c;
  }();
  a.IkConstraint = c;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    return function(a) {
      this.order = 0;
      this.bones = [];
      this.mix = this.bendDirection = 1;
      this.name = a;
    };
  }();
  a.IkConstraintData = c;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    function c(a, c) {
      this.translateMix = this.rotateMix = this.spacing = this.position = 0;
      this.spaces = [];
      this.positions = [];
      this.world = [];
      this.curves = [];
      this.lengths = [];
      this.segments = [];
      if (null == a) {
        throw Error("data cannot be null.");
      }
      if (null == c) {
        throw Error("skeleton cannot be null.");
      }
      this.data = a;
      this.bones = [];
      for (var b = 0, f = a.bones.length; b < f; b++) {
        this.bones.push(c.findBone(a.bones[b].name));
      }
      this.target = c.findSlot(a.target.name);
      this.position = a.position;
      this.spacing = a.spacing;
      this.rotateMix = a.rotateMix;
      this.translateMix = a.translateMix;
    }
    c.prototype.apply = function() {
      this.update();
    };
    c.prototype.update = function() {
      var b = this.target.getAttachment();
      if (b instanceof a.PathAttachment) {
        var c = this.rotateMix, d = this.translateMix, h = 0 < c;
        if (0 < d || h) {
          var k = this.data, q = k.spacingMode, m = q == a.SpacingMode.Length, t = k.rotateMode, e = t == a.RotateMode.Tangent, l = t == a.RotateMode.ChainScale, u = this.bones.length, w = e ? u : u + 1, y = this.bones, x = a.Utils.setArraySize(this.spaces, w), p = null, v = this.spacing;
          if (l || m) {
            l && (p = a.Utils.setArraySize(this.lengths, u));
            for (var z = 0, C = w - 1; z < C;) {
              var A = y[z], D = A.data.length;
              0 == D && (D = 1E-7);
              var E = D * A.a, B = D * A.c;
              A = Math.sqrt(E * E + B * B);
              l && (p[z] = A);
              x[++z] = (m ? D + v : v) * A / D;
            }
          } else {
            for (z = 1; z < w; z++) {
              x[z] = v;
            }
          }
          b = this.computeWorldPositions(b, w, e, k.positionMode == a.PositionMode.Percent, q == a.SpacingMode.Percent);
          q = b[0];
          m = b[1];
          k = k.offsetRotation;
          0 == k ? t = t == a.RotateMode.Chain : (t = !1, w = this.target.bone, k *= 0 < w.a * w.d - w.b * w.c ? a.MathUtils.degRad : -a.MathUtils.degRad);
          z = 0;
          for (w = 3; z < u; z++, w += 3) {
            A = y[z];
            A.worldX += (q - A.worldX) * d;
            A.worldY += (m - A.worldY) * d;
            E = b[w];
            B = b[w + 1];
            v = E - q;
            C = B - m;
            l && (q = p[z], 0 != q && (q = (Math.sqrt(v * v + C * C) / q - 1) * c + 1, A.a *= q, A.c *= q));
            q = E;
            m = B;
            if (h) {
              E = A.a;
              B = A.b;
              D = A.c;
              var G = A.d;
              var H = e ? b[w - 1] : 0 == x[z + 1] ? b[w + 2] : Math.atan2(C, v);
              H -= Math.atan2(D, E);
              if (t) {
                var K = Math.cos(H);
                var I = Math.sin(H);
                var L = A.data.length;
                q += (L * (K * E - I * D) - v) * c;
                m += (L * (I * E + K * D) - C) * c;
              } else {
                H += k;
              }
              H > a.MathUtils.PI ? H -= a.MathUtils.PI2 : H < -a.MathUtils.PI && (H += a.MathUtils.PI2);
              H *= c;
              K = Math.cos(H);
              I = Math.sin(H);
              A.a = K * E - I * D;
              A.b = K * B - I * G;
              A.c = I * E + K * D;
              A.d = I * B + K * G;
            }
            A.appliedValid = !1;
          }
        }
      }
    };
    c.prototype.computeWorldPositions = function(b, f, d, h, k) {
      var n = this.target, m = this.position, t = this.spaces, e = a.Utils.setArraySize(this.positions, 3 * f + 2), l = b.closed, u = b.worldVerticesLength, w = u / 6, y = c.NONE;
      if (!b.constantSpeed) {
        var x = b.lengths;
        w -= l ? 1 : 2;
        var p = x[w];
        h && (m *= p);
        if (k) {
          for (var v = 0; v < f; v++) {
            t[v] *= p;
          }
        }
        var z = a.Utils.setArraySize(this.world, 8);
        for (k = h = v = 0; v < f; v++, h += 3) {
          var C = t[v], A = m += C;
          if (l) {
            A %= p, 0 > A && (A += p), k = 0;
          } else {
            if (0 > A) {
              y != c.BEFORE && (y = c.BEFORE, b.computeWorldVertices(n, 2, 4, z, 0, 2));
              this.addBeforePosition(A, z, 0, e, h);
              continue;
            } else {
              if (A > p) {
                y != c.AFTER && (y = c.AFTER, b.computeWorldVertices(n, u - 6, 4, z, 0, 2));
                this.addAfterPosition(A - p, z, 0, e, h);
                continue;
              }
            }
          }
          for (;; k++) {
            var D = x[k];
            if (!(A > D)) {
              if (0 == k) {
                A /= D;
              } else {
                var E = x[k - 1];
                A = (A - E) / (D - E);
              }
              break;
            }
          }
          k != y && (y = k, l && k == w ? (b.computeWorldVertices(n, u - 4, 4, z, 0, 2), b.computeWorldVertices(n, 0, 4, z, 4, 2)) : b.computeWorldVertices(n, 6 * k + 2, 8, z, 0, 2));
          this.addCurvePosition(A, z[0], z[1], z[2], z[3], z[4], z[5], z[6], z[7], e, h, d || 0 < v && 0 == C);
        }
        return e;
      }
      l ? (u += 2, z = a.Utils.setArraySize(this.world, u), b.computeWorldVertices(n, 2, u - 4, z, 0, 2), b.computeWorldVertices(n, 0, 2, z, u - 4, 2), z[u - 2] = z[0], z[u - 1] = z[1]) : (w--, u -= 4, z = a.Utils.setArraySize(this.world, u), b.computeWorldVertices(n, 2, u, z, 0, 2));
      b = a.Utils.setArraySize(this.curves, w);
      n = 0;
      x = z[0];
      p = z[1];
      var B = D = 0, G = 0, H = 0, K = 0, I = 0;
      v = 0;
      for (C = 2; v < w; v++, C += 6) {
        D = z[C];
        B = z[C + 1];
        G = z[C + 2];
        H = z[C + 3];
        K = z[C + 4];
        I = z[C + 5];
        var L = .1875 * (x - 2 * D + G);
        var R = .1875 * (p - 2 * B + H);
        E = .09375 * (3 * (D - G) - x + K);
        var J = .09375 * (3 * (B - H) - p + I);
        var Q = 2 * L + E;
        var aa = 2 * R + J;
        L = .75 * (D - x) + L + .16666667 * E;
        R = .75 * (B - p) + R + .16666667 * J;
        n += Math.sqrt(L * L + R * R);
        L += Q;
        R += aa;
        Q += E;
        aa += J;
        n += Math.sqrt(L * L + R * R);
        L += Q;
        R += aa;
        n += Math.sqrt(L * L + R * R);
        L += Q + E;
        R += aa + J;
        n += Math.sqrt(L * L + R * R);
        b[v] = n;
        x = K;
        p = I;
      }
      h && (m *= n);
      if (k) {
        for (v = 0; v < f; v++) {
          t[v] *= n;
        }
      }
      w = this.segments;
      var V = 0;
      for (J = k = h = v = 0; v < f; v++, h += 3) {
        C = t[v];
        A = m += C;
        if (l) {
          A %= n, 0 > A && (A += n), k = 0;
        } else {
          if (0 > A) {
            this.addBeforePosition(A, z, 0, e, h);
            continue;
          } else {
            if (A > n) {
              this.addAfterPosition(A - n, z, u - 4, e, h);
              continue;
            }
          }
        }
        for (;; k++) {
          if (Q = b[k], !(A > Q)) {
            0 == k ? A /= Q : (E = b[k - 1], A = (A - E) / (Q - E));
            break;
          }
        }
        if (k != y) {
          y = k;
          var N = 6 * k;
          x = z[N];
          p = z[N + 1];
          D = z[N + 2];
          B = z[N + 3];
          G = z[N + 4];
          H = z[N + 5];
          K = z[N + 6];
          I = z[N + 7];
          L = .03 * (x - 2 * D + G);
          R = .03 * (p - 2 * B + H);
          E = .006 * (3 * (D - G) - x + K);
          J = .006 * (3 * (B - H) - p + I);
          Q = 2 * L + E;
          aa = 2 * R + J;
          L = .3 * (D - x) + L + .16666667 * E;
          R = .3 * (B - p) + R + .16666667 * J;
          V = Math.sqrt(L * L + R * R);
          w[0] = V;
          for (N = 1; 8 > N; N++) {
            L += Q, R += aa, Q += E, aa += J, V += Math.sqrt(L * L + R * R), w[N] = V;
          }
          L += Q;
          R += aa;
          V += Math.sqrt(L * L + R * R);
          w[8] = V;
          L += Q + E;
          R += aa + J;
          V += Math.sqrt(L * L + R * R);
          w[9] = V;
          J = 0;
        }
        for (A *= V;; J++) {
          if (Q = w[J], !(A > Q)) {
            0 == J ? A /= Q : (E = w[J - 1], A = J + (A - E) / (Q - E));
            break;
          }
        }
        this.addCurvePosition(.1 * A, x, p, D, B, G, H, K, I, e, h, d || 0 < v && 0 == C);
      }
      return e;
    };
    c.prototype.addBeforePosition = function(a, c, d, h, k) {
      var b = c[d], f = c[d + 1];
      c = Math.atan2(c[d + 3] - f, c[d + 2] - b);
      h[k] = b + a * Math.cos(c);
      h[k + 1] = f + a * Math.sin(c);
      h[k + 2] = c;
    };
    c.prototype.addAfterPosition = function(a, c, d, h, k) {
      var b = c[d + 2], f = c[d + 3];
      c = Math.atan2(f - c[d + 1], b - c[d]);
      h[k] = b + a * Math.cos(c);
      h[k + 1] = f + a * Math.sin(c);
      h[k + 2] = c;
    };
    c.prototype.addCurvePosition = function(a, c, d, h, k, q, m, t, e, l, u, w) {
      if (0 == a || isNaN(a)) {
        a = 1E-4;
      }
      var b = a * a, f = b * a, n = 1 - a, v = n * n, z = v * n, C = n * a, A = 3 * C;
      n *= A;
      a *= A;
      t = c * z + h * n + q * a + t * f;
      e = d * z + k * n + m * a + e * f;
      l[u] = t;
      l[u + 1] = e;
      w && (l[u + 2] = Math.atan2(e - (d * v + k * C * 2 + m * b), t - (c * v + h * C * 2 + q * b)));
    };
    c.prototype.getOrder = function() {
      return this.data.order;
    };
    c.NONE = -1;
    c.BEFORE = -2;
    c.AFTER = -3;
    return c;
  }();
  a.PathConstraint = c;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    return function(a) {
      this.order = 0;
      this.bones = [];
      this.name = a;
    };
  }();
  a.PathConstraintData = c;
  (function(a) {
    a[a.Fixed = 0] = "Fixed";
    a[a.Percent = 1] = "Percent";
  })(a.PositionMode || (a.PositionMode = {}));
  (function(a) {
    a[a.Length = 0] = "Length";
    a[a.Fixed = 1] = "Fixed";
    a[a.Percent = 2] = "Percent";
  })(a.SpacingMode || (a.SpacingMode = {}));
  (function(a) {
    a[a.Tangent = 0] = "Tangent";
    a[a.Chain = 1] = "Chain";
    a[a.ChainScale = 2] = "ChainScale";
  })(a.RotateMode || (a.RotateMode = {}));
})(spine || (spine = {}));
(function() {
  Math.fround || (Math.fround = function(a) {
    return function(c) {
      return a[0] = c, a[0];
    };
  }(new Float32Array(1)));
})();
(function(a) {
  var c = function() {
    function a(a) {
      this.toLoad = [];
      this.assets = {};
      this.clientId = a;
    }
    a.prototype.loaded = function() {
      var a = 0, b;
      for (b in this.assets) {
        a++;
      }
      return a;
    };
    return a;
  }(), k = function() {
    function a(a) {
      void 0 === a && (a = "");
      this.clientAssets = {};
      this.queuedAssets = {};
      this.rawAssets = {};
      this.errors = {};
      this.pathPrefix = a;
    }
    a.prototype.queueAsset = function(a, b, h) {
      var d = this.clientAssets[a];
      if (null === d || void 0 === d) {
        d = new c(a), this.clientAssets[a] = d;
      }
      null !== b && (d.textureLoader = b);
      d.toLoad.push(h);
      if (this.queuedAssets[h] === h) {
        return !1;
      }
      this.queuedAssets[h] = h;
      return !0;
    };
    a.prototype.loadText = function(a, b) {
      var c = this;
      b = this.pathPrefix + b;
      if (this.queueAsset(a, null, b)) {
        var d = new XMLHttpRequest;
        d.onreadystatechange = function() {
          d.readyState == XMLHttpRequest.DONE && (200 <= d.status && 300 > d.status ? c.rawAssets[b] = d.responseText : c.errors[b] = "Couldn't load text " + b + ": status " + d.status + ", " + d.responseText);
        };
        d.open("GET", b, !0);
        d.send();
      }
    };
    a.prototype.loadJson = function(a, b) {
      var c = this;
      b = this.pathPrefix + b;
      if (this.queueAsset(a, null, b)) {
        var d = new XMLHttpRequest;
        d.onreadystatechange = function() {
          d.readyState == XMLHttpRequest.DONE && (200 <= d.status && 300 > d.status ? c.rawAssets[b] = JSON.parse(d.responseText) : c.errors[b] = "Couldn't load text " + b + ": status " + d.status + ", " + d.responseText);
        };
        d.open("GET", b, !0);
        d.send();
      }
    };
    a.prototype.loadTexture = function(a, b, c) {
      var d = this;
      c = this.pathPrefix + c;
      if (this.queueAsset(a, b, c)) {
        var f = new Image;
        f.src = c;
        f.crossOrigin = "anonymous";
        f.onload = function(a) {
          d.rawAssets[c] = f;
        };
        f.onerror = function(a) {
          d.errors[c] = "Couldn't load image " + c;
        };
      }
    };
    a.prototype.get = function(a, b) {
      b = this.pathPrefix + b;
      a = this.clientAssets[a];
      return null === a || void 0 === a ? !0 : a.assets[b];
    };
    a.prototype.updateClientAssets = function(a) {
      for (var b = 0; b < a.toLoad.length; b++) {
        var c = a.toLoad[b], f = a.assets[c];
        if (null === f || void 0 === f) {
          f = this.rawAssets[c], null !== f && void 0 !== f && (a.assets[c] = f instanceof HTMLImageElement ? a.textureLoader(f) : f);
        }
      }
    };
    a.prototype.isLoadingComplete = function(a) {
      a = this.clientAssets[a];
      if (null === a || void 0 === a) {
        return !0;
      }
      this.updateClientAssets(a);
      return a.toLoad.length == a.loaded();
    };
    a.prototype.dispose = function() {
    };
    a.prototype.hasErrors = function() {
      return 0 < Object.keys(this.errors).length;
    };
    a.prototype.getErrors = function() {
      return this.errors;
    };
    return a;
  }();
  a.SharedAssetManager = k;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    function c(b) {
      this._updateCache = [];
      this.updateCacheReset = [];
      this.time = 0;
      this.flipY = this.flipX = !1;
      this.y = this.x = 0;
      if (null == b) {
        throw Error("data cannot be null.");
      }
      this.data = b;
      this.bones = [];
      for (var c = 0; c < b.bones.length; c++) {
        var d = b.bones[c];
        if (null == d.parent) {
          d = new a.Bone(d, this, null);
        } else {
          var h = this.bones[d.parent.index];
          d = new a.Bone(d, this, h);
          h.children.push(d);
        }
        this.bones.push(d);
      }
      this.slots = [];
      this.drawOrder = [];
      for (c = 0; c < b.slots.length; c++) {
        h = b.slots[c], d = this.bones[h.boneData.index], d = new a.Slot(h, d), this.slots.push(d), this.drawOrder.push(d);
      }
      this.ikConstraints = [];
      for (c = 0; c < b.ikConstraints.length; c++) {
        this.ikConstraints.push(new a.IkConstraint(b.ikConstraints[c], this));
      }
      this.transformConstraints = [];
      for (c = 0; c < b.transformConstraints.length; c++) {
        this.transformConstraints.push(new a.TransformConstraint(b.transformConstraints[c], this));
      }
      this.pathConstraints = [];
      for (c = 0; c < b.pathConstraints.length; c++) {
        this.pathConstraints.push(new a.PathConstraint(b.pathConstraints[c], this));
      }
      this.color = new a.Color(1, 1, 1, 1);
      this.updateCache();
    }
    c.prototype.updateCache = function() {
      this._updateCache.length = 0;
      this.updateCacheReset.length = 0;
      for (var a = this.bones, c = 0, d = a.length; c < d; c++) {
        a[c].sorted = !1;
      }
      d = this.ikConstraints;
      var h = this.transformConstraints, k = this.pathConstraints, q = d.length, m = h.length, t = k.length, e = q + m + t;
      c = 0;
      a: for (; c < e; c++) {
        for (var l = 0; l < q; l++) {
          var u = d[l];
          if (u.data.order == c) {
            this.sortIkConstraint(u);
            continue a;
          }
        }
        for (l = 0; l < m; l++) {
          if (u = h[l], u.data.order == c) {
            this.sortTransformConstraint(u);
            continue a;
          }
        }
        for (l = 0; l < t; l++) {
          if (u = k[l], u.data.order == c) {
            this.sortPathConstraint(u);
            continue a;
          }
        }
      }
      c = 0;
      for (d = a.length; c < d; c++) {
        this.sortBone(a[c]);
      }
    };
    c.prototype.sortIkConstraint = function(a) {
      this.sortBone(a.target);
      var b = a.bones, c = b[0];
      this.sortBone(c);
      if (1 < b.length) {
        var h = b[b.length - 1];
        -1 < this._updateCache.indexOf(h) || this.updateCacheReset.push(h);
      }
      this._updateCache.push(a);
      this.sortReset(c.children);
      b[b.length - 1].sorted = !0;
    };
    c.prototype.sortPathConstraint = function(b) {
      var c = b.target, d = c.data.index, h = c.bone;
      null != this.skin && this.sortPathConstraintAttachment(this.skin, d, h);
      null != this.data.defaultSkin && this.data.defaultSkin != this.skin && this.sortPathConstraintAttachment(this.data.defaultSkin, d, h);
      for (var k = 0, q = this.data.skins.length; k < q; k++) {
        this.sortPathConstraintAttachment(this.data.skins[k], d, h);
      }
      k = c.getAttachment();
      k instanceof a.PathAttachment && this.sortPathConstraintAttachmentWith(k, h);
      h = b.bones;
      c = h.length;
      for (k = 0; k < c; k++) {
        this.sortBone(h[k]);
      }
      this._updateCache.push(b);
      for (k = 0; k < c; k++) {
        this.sortReset(h[k].children);
      }
      for (k = 0; k < c; k++) {
        h[k].sorted = !0;
      }
    };
    c.prototype.sortTransformConstraint = function(a) {
      this.sortBone(a.target);
      var b = a.bones, c = b.length;
      if (a.data.local) {
        for (var h = 0; h < c; h++) {
          var k = b[h];
          this.sortBone(k.parent);
          -1 < this._updateCache.indexOf(k) || this.updateCacheReset.push(k);
        }
      } else {
        for (h = 0; h < c; h++) {
          this.sortBone(b[h]);
        }
      }
      this._updateCache.push(a);
      for (a = 0; a < c; a++) {
        this.sortReset(b[a].children);
      }
      for (a = 0; a < c; a++) {
        b[a].sorted = !0;
      }
    };
    c.prototype.sortPathConstraintAttachment = function(a, c, d) {
      if (a = a.attachments[c]) {
        for (var b in a) {
          this.sortPathConstraintAttachmentWith(a[b], d);
        }
      }
    };
    c.prototype.sortPathConstraintAttachmentWith = function(b, c) {
      if (b instanceof a.PathAttachment) {
        if (b = b.bones, null == b) {
          this.sortBone(c);
        } else {
          c = this.bones;
          for (var d = 0; d < b.length;) {
            var f = b[d++];
            for (f = d + f; d < f; d++) {
              this.sortBone(c[b[d]]);
            }
          }
        }
      }
    };
    c.prototype.sortBone = function(a) {
      if (!a.sorted) {
        var b = a.parent;
        null != b && this.sortBone(b);
        a.sorted = !0;
        this._updateCache.push(a);
      }
    };
    c.prototype.sortReset = function(a) {
      for (var b = 0, c = a.length; b < c; b++) {
        var h = a[b];
        h.sorted && this.sortReset(h.children);
        h.sorted = !1;
      }
    };
    c.prototype.updateWorldTransform = function() {
      for (var a = this.updateCacheReset, c = 0, d = a.length; c < d; c++) {
        var h = a[c];
        h.ax = h.x;
        h.ay = h.y;
        h.arotation = h.rotation;
        h.ascaleX = h.scaleX;
        h.ascaleY = h.scaleY;
        h.ashearX = h.shearX;
        h.ashearY = h.shearY;
        h.appliedValid = !0;
      }
      a = this._updateCache;
      c = 0;
      for (d = a.length; c < d; c++) {
        a[c].update();
      }
    };
    c.prototype.setToSetupPose = function() {
      this.setBonesToSetupPose();
      this.setSlotsToSetupPose();
    };
    c.prototype.setBonesToSetupPose = function() {
      for (var a = this.bones, c = 0, d = a.length; c < d; c++) {
        a[c].setToSetupPose();
      }
      var h = this.ikConstraints;
      c = 0;
      for (d = h.length; c < d; c++) {
        a = h[c], a.bendDirection = a.data.bendDirection, a.mix = a.data.mix;
      }
      var k = this.transformConstraints;
      c = 0;
      for (d = k.length; c < d; c++) {
        a = k[c], h = a.data, a.rotateMix = h.rotateMix, a.translateMix = h.translateMix, a.scaleMix = h.scaleMix, a.shearMix = h.shearMix;
      }
      k = this.pathConstraints;
      c = 0;
      for (d = k.length; c < d; c++) {
        a = k[c], h = a.data, a.position = h.position, a.spacing = h.spacing, a.rotateMix = h.rotateMix, a.translateMix = h.translateMix;
      }
    };
    c.prototype.setSlotsToSetupPose = function() {
      var b = this.slots;
      a.Utils.arrayCopy(b, 0, this.drawOrder, 0, b.length);
      for (var c = 0, d = b.length; c < d; c++) {
        b[c].setToSetupPose();
      }
    };
    c.prototype.getRootBone = function() {
      return 0 == this.bones.length ? null : this.bones[0];
    };
    c.prototype.findBone = function(a) {
      if (null == a) {
        throw Error("boneName cannot be null.");
      }
      for (var b = this.bones, c = 0, h = b.length; c < h; c++) {
        var k = b[c];
        if (k.data.name == a) {
          return k;
        }
      }
      return null;
    };
    c.prototype.findBoneIndex = function(a) {
      if (null == a) {
        throw Error("boneName cannot be null.");
      }
      for (var b = this.bones, c = 0, h = b.length; c < h; c++) {
        if (b[c].data.name == a) {
          return c;
        }
      }
      return -1;
    };
    c.prototype.findSlot = function(a) {
      if (null == a) {
        throw Error("slotName cannot be null.");
      }
      for (var b = this.slots, c = 0, h = b.length; c < h; c++) {
        var k = b[c];
        if (k.data.name == a) {
          return k;
        }
      }
      return null;
    };
    c.prototype.findSlotIndex = function(a) {
      if (null == a) {
        throw Error("slotName cannot be null.");
      }
      for (var b = this.slots, c = 0, h = b.length; c < h; c++) {
        if (b[c].data.name == a) {
          return c;
        }
      }
      return -1;
    };
    c.prototype.setSkinByName = function(a) {
      var b = this.data.findSkin(a);
      if (null == b) {
        throw Error("Skin not found: " + a);
      }
      this.setSkin(b);
    };
    c.prototype.setSkin = function(a) {
      if (null != a) {
        if (null != this.skin) {
          a.attachAll(this, this.skin);
        } else {
          for (var b = this.slots, c = 0, h = b.length; c < h; c++) {
            var k = b[c], q = k.data.attachmentName;
            null != q && (q = a.getAttachment(c, q), null != q && k.setAttachment(q));
          }
        }
      }
      this.skin = a;
    };
    c.prototype.getAttachmentByName = function(a, c) {
      return this.getAttachment(this.data.findSlotIndex(a), c);
    };
    c.prototype.getAttachment = function(a, c) {
      if (null == c) {
        throw Error("attachmentName cannot be null.");
      }
      if (null != this.skin) {
        var b = this.skin.getAttachment(a, c);
        if (null != b) {
          return b;
        }
      }
      return null != this.data.defaultSkin ? this.data.defaultSkin.getAttachment(a, c) : null;
    };
    c.prototype.setAttachment = function(a, c) {
      if (null == a) {
        throw Error("slotName cannot be null.");
      }
      for (var b = this.slots, f = 0, k = b.length; f < k; f++) {
        var q = b[f];
        if (q.data.name == a) {
          b = null;
          if (null != c && (b = this.getAttachment(f, c), null == b)) {
            throw Error("Attachment not found: " + c + ", for slot: " + a);
          }
          q.setAttachment(b);
          return;
        }
      }
      throw Error("Slot not found: " + a);
    };
    c.prototype.findIkConstraint = function(a) {
      if (null == a) {
        throw Error("constraintName cannot be null.");
      }
      for (var b = this.ikConstraints, c = 0, h = b.length; c < h; c++) {
        var k = b[c];
        if (k.data.name == a) {
          return k;
        }
      }
      return null;
    };
    c.prototype.findTransformConstraint = function(a) {
      if (null == a) {
        throw Error("constraintName cannot be null.");
      }
      for (var b = this.transformConstraints, c = 0, h = b.length; c < h; c++) {
        var k = b[c];
        if (k.data.name == a) {
          return k;
        }
      }
      return null;
    };
    c.prototype.findPathConstraint = function(a) {
      if (null == a) {
        throw Error("constraintName cannot be null.");
      }
      for (var b = this.pathConstraints, c = 0, h = b.length; c < h; c++) {
        var k = b[c];
        if (k.data.name == a) {
          return k;
        }
      }
      return null;
    };
    c.prototype.getBounds = function(b, c, d) {
      if (null == b) {
        throw Error("offset cannot be null.");
      }
      if (null == c) {
        throw Error("size cannot be null.");
      }
      for (var f = this.drawOrder, k = Number.POSITIVE_INFINITY, q = Number.POSITIVE_INFINITY, m = Number.NEGATIVE_INFINITY, t = Number.NEGATIVE_INFINITY, e = 0, l = f.length; e < l; e++) {
        var u = f[e], w = null, y = u.getAttachment();
        if (y instanceof a.RegionAttachment) {
          var x = 8;
          w = a.Utils.setArraySize(d, x, 0);
          y.computeWorldVertices(u.bone, w, 0, 2);
        } else {
          y instanceof a.MeshAttachment && (x = y.worldVerticesLength, w = a.Utils.setArraySize(d, x, 0), y.computeWorldVertices(u, 0, x, w, 0, 2));
        }
        if (null != w) {
          for (u = 0, x = w.length; u < x; u += 2) {
            y = w[u];
            var p = w[u + 1];
            k = Math.min(k, y);
            q = Math.min(q, p);
            m = Math.max(m, y);
            t = Math.max(t, p);
          }
        }
      }
      b.set(k, q);
      c.set(m - k, t - q);
    };
    c.prototype.update = function(a) {
      this.time += a;
    };
    return c;
  }();
  a.Skeleton = c;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    function c() {
      this.maxY = this.maxX = this.minY = this.minX = 0;
      this.boundingBoxes = [];
      this.polygons = [];
      this.polygonPool = new a.Pool(function() {
        return a.Utils.newFloatArray(16);
      });
    }
    c.prototype.update = function(b, c) {
      if (null == b) {
        throw Error("skeleton cannot be null.");
      }
      var d = this.boundingBoxes, f = this.polygons, k = this.polygonPool;
      b = b.slots;
      var q = b.length;
      d.length = 0;
      k.freeAll(f);
      for (var m = f.length = 0; m < q; m++) {
        var t = b[m], e = t.getAttachment();
        if (e instanceof a.BoundingBoxAttachment) {
          d.push(e);
          var l = k.obtain();
          l.length != e.worldVerticesLength && (l = a.Utils.newFloatArray(e.worldVerticesLength));
          f.push(l);
          e.computeWorldVertices(t, 0, e.worldVerticesLength, l, 0, 2);
        }
      }
      c ? this.aabbCompute() : (this.minY = this.minX = Number.POSITIVE_INFINITY, this.maxY = this.maxX = Number.NEGATIVE_INFINITY);
    };
    c.prototype.aabbCompute = function() {
      for (var a = Number.POSITIVE_INFINITY, c = Number.POSITIVE_INFINITY, d = Number.NEGATIVE_INFINITY, h = Number.NEGATIVE_INFINITY, k = this.polygons, q = 0, m = k.length; q < m; q++) {
        var t = k[q], e = t, l = 0;
        for (t = t.length; l < t; l += 2) {
          var u = e[l], w = e[l + 1];
          a = Math.min(a, u);
          c = Math.min(c, w);
          d = Math.max(d, u);
          h = Math.max(h, w);
        }
      }
      this.minX = a;
      this.minY = c;
      this.maxX = d;
      this.maxY = h;
    };
    c.prototype.aabbContainsPoint = function(a, c) {
      return a >= this.minX && a <= this.maxX && c >= this.minY && c <= this.maxY;
    };
    c.prototype.aabbIntersectsSegment = function(a, c, d, h) {
      var b = this.minX, f = this.minY, k = this.maxX, t = this.maxY;
      if (a <= b && d <= b || c <= f && h <= f || a >= k && d >= k || c >= t && h >= t) {
        return !1;
      }
      d = (h - c) / (d - a);
      h = d * (b - a) + c;
      if (h > f && h < t) {
        return !0;
      }
      h = d * (k - a) + c;
      if (h > f && h < t) {
        return !0;
      }
      f = (f - c) / d + a;
      if (f > b && f < k) {
        return !0;
      }
      f = (t - c) / d + a;
      return f > b && f < k ? !0 : !1;
    };
    c.prototype.aabbIntersectsSkeleton = function(a) {
      return this.minX < a.maxX && this.maxX > a.minX && this.minY < a.maxY && this.maxY > a.minY;
    };
    c.prototype.containsPoint = function(a, c) {
      for (var b = this.polygons, f = 0, k = b.length; f < k; f++) {
        if (this.containsPointPolygon(b[f], a, c)) {
          return this.boundingBoxes[f];
        }
      }
      return null;
    };
    c.prototype.containsPointPolygon = function(a, c, d) {
      for (var b = a.length, f = b - 2, k = !1, m = 0; m < b; m += 2) {
        var t = a[m + 1], e = a[f + 1];
        if (t < d && e >= d || e < d && t >= d) {
          var l = a[m];
          l + (d - t) / (e - t) * (a[f] - l) < c && (k = !k);
        }
        f = m;
      }
      return k;
    };
    c.prototype.intersectsSegment = function(a, c, d, h) {
      for (var b = this.polygons, f = 0, k = b.length; f < k; f++) {
        if (this.intersectsSegmentPolygon(b[f], a, c, d, h)) {
          return this.boundingBoxes[f];
        }
      }
      return null;
    };
    c.prototype.intersectsSegmentPolygon = function(a, c, d, h, k) {
      for (var b = a.length, f = c - h, n = d - k, e = c * k - d * h, l = a[b - 2], u = a[b - 1], w = 0; w < b; w += 2) {
        var y = a[w], x = a[w + 1], p = l * x - u * y, v = l - y, z = u - x, C = f * z - n * v;
        v = (e * v - f * p) / C;
        if ((v >= l && v <= y || v >= y && v <= l) && (v >= c && v <= h || v >= h && v <= c) && (l = (e * z - n * p) / C, (l >= u && l <= x || l >= x && l <= u) && (l >= d && l <= k || l >= k && l <= d))) {
          return !0;
        }
        l = y;
        u = x;
      }
      return !1;
    };
    c.prototype.getPolygon = function(a) {
      if (null == a) {
        throw Error("boundingBox cannot be null.");
      }
      a = this.boundingBoxes.indexOf(a);
      return -1 == a ? null : this.polygons[a];
    };
    c.prototype.getWidth = function() {
      return this.maxX - this.minX;
    };
    c.prototype.getHeight = function() {
      return this.maxY - this.minY;
    };
    return c;
  }();
  a.SkeletonBounds = c;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    function c() {
      this.triangulator = new a.Triangulator;
      this.clippingPolygon = [];
      this.clipOutput = [];
      this.clippedVertices = [];
      this.clippedTriangles = [];
      this.scratch = [];
    }
    c.prototype.clipStart = function(b, f) {
      if (null != this.clipAttachment) {
        return 0;
      }
      this.clipAttachment = f;
      var d = f.worldVerticesLength, h = a.Utils.setArraySize(this.clippingPolygon, d);
      f.computeWorldVertices(b, 0, d, h, 0, 2);
      b = this.clippingPolygon;
      c.makeClockwise(b);
      b = this.clippingPolygons = this.triangulator.decompose(b, this.triangulator.triangulate(b));
      f = 0;
      for (d = b.length; f < d; f++) {
        h = b[f], c.makeClockwise(h), h.push(h[0]), h.push(h[1]);
      }
      return b.length;
    };
    c.prototype.clipEndWithSlot = function(a) {
      null != this.clipAttachment && this.clipAttachment.endSlot == a.data && this.clipEnd();
    };
    c.prototype.clipEnd = function() {
      null != this.clipAttachment && (this.clippingPolygons = this.clipAttachment = null, this.clippedVertices.length = 0, this.clippedTriangles.length = 0, this.clippingPolygon.length = 0);
    };
    c.prototype.isClipping = function() {
      return null != this.clipAttachment;
    };
    c.prototype.clipTriangles = function(b, c, d, h, k, q, m, t) {
      c = this.clipOutput;
      var e = this.clippedVertices, f = this.clippedTriangles, n = this.clippingPolygons, w = this.clippingPolygons.length, y = t ? 12 : 8, x = 0;
      e.length = 0;
      var p = f.length = 0;
      a: for (; p < h; p += 3) {
        var v = d[p] << 1, z = b[v], C = b[v + 1], A = k[v], D = k[v + 1];
        v = d[p + 1] << 1;
        var E = b[v], B = b[v + 1], G = k[v], H = k[v + 1];
        v = d[p + 2] << 1;
        var K = b[v], I = b[v + 1], L = k[v];
        v = k[v + 1];
        for (var R = 0; R < w; R++) {
          var J = e.length;
          if (this.clip(z, C, E, B, K, I, n[R], c)) {
            var Q = c.length;
            if (0 != Q) {
              for (var aa = B - I, V = K - E, N = z - K, S = I - C, W = 1 / (aa * N + V * (C - I)), M = Q >> 1, O = this.clipOutput, P = a.Utils.setArraySize(e, J + M * y), ka = 0; ka < Q; ka += 2) {
                var ha = O[ka], ja = O[ka + 1];
                P[J] = ha;
                P[J + 1] = ja;
                P[J + 2] = q.r;
                P[J + 3] = q.g;
                P[J + 4] = q.b;
                P[J + 5] = q.a;
                ha -= K;
                var X = ja - I;
                ja = (aa * ha + V * X) * W;
                ha = (S * ha + N * X) * W;
                X = 1 - ja - ha;
                P[J + 6] = A * ja + G * ha + L * X;
                P[J + 7] = D * ja + H * ha + v * X;
                t && (P[J + 8] = m.r, P[J + 9] = m.g, P[J + 10] = m.b, P[J + 11] = m.a);
                J += y;
              }
              J = f.length;
              Q = a.Utils.setArraySize(f, J + 3 * (M - 2));
              M--;
              for (ka = 1; ka < M; ka++) {
                Q[J] = x, Q[J + 1] = x + ka, Q[J + 2] = x + ka + 1, J += 3;
              }
              x += M + 1;
            }
          } else {
            P = a.Utils.setArraySize(e, J + 3 * y);
            P[J] = z;
            P[J + 1] = C;
            P[J + 2] = q.r;
            P[J + 3] = q.g;
            P[J + 4] = q.b;
            P[J + 5] = q.a;
            t ? (P[J + 6] = A, P[J + 7] = D, P[J + 8] = m.r, P[J + 9] = m.g, P[J + 10] = m.b, P[J + 11] = m.a, P[J + 12] = E, P[J + 13] = B, P[J + 14] = q.r, P[J + 15] = q.g, P[J + 16] = q.b, P[J + 17] = q.a, P[J + 18] = G, P[J + 19] = H, P[J + 20] = m.r, P[J + 21] = m.g, P[J + 22] = m.b, P[J + 23] = m.a, P[J + 24] = K, P[J + 25] = I, P[J + 26] = q.r, P[J + 27] = q.g, P[J + 28] = q.b, P[J + 29] = q.a, P[J + 30] = L, P[J + 31] = v, P[J + 32] = m.r, P[J + 33] = m.g, P[J + 34] = m.b, P[J + 35] = m.a) : 
            (P[J + 6] = A, P[J + 7] = D, P[J + 8] = E, P[J + 9] = B, P[J + 10] = q.r, P[J + 11] = q.g, P[J + 12] = q.b, P[J + 13] = q.a, P[J + 14] = G, P[J + 15] = H, P[J + 16] = K, P[J + 17] = I, P[J + 18] = q.r, P[J + 19] = q.g, P[J + 20] = q.b, P[J + 21] = q.a, P[J + 22] = L, P[J + 23] = v);
            J = f.length;
            Q = a.Utils.setArraySize(f, J + 3);
            Q[J] = x;
            Q[J + 1] = x + 1;
            Q[J + 2] = x + 2;
            x += 3;
            continue a;
          }
        }
      }
    };
    c.prototype.clip = function(a, c, d, h, k, q, m, t) {
      var b = t, f = !1;
      if (2 <= m.length % 4) {
        var n = t;
        t = this.scratch;
      } else {
        n = this.scratch;
      }
      n.length = 0;
      n.push(a);
      n.push(c);
      n.push(d);
      n.push(h);
      n.push(k);
      n.push(q);
      n.push(a);
      n.push(c);
      t.length = 0;
      c = m.length - 4;
      for (a = 0;; a += 2) {
        d = m[a];
        h = m[a + 1];
        k = m[a + 2];
        q = m[a + 3];
        for (var w = d - k, y = h - q, x = n, p = n.length - 2, v = t.length, z = 0; z < p; z += 2) {
          var C = x[z], A = x[z + 1], D = x[z + 2], E = x[z + 3], B = 0 < w * (E - q) - y * (D - k);
          if (0 < w * (A - q) - y * (C - k)) {
            if (B) {
              t.push(D);
              t.push(E);
              continue;
            }
            f = E - A;
            B = D - C;
            f = (B * (h - A) - f * (d - C)) / (f * (k - d) - B * (q - h));
            t.push(d + (k - d) * f);
            t.push(h + (q - h) * f);
          } else {
            B && (f = E - A, B = D - C, f = (B * (h - A) - f * (d - C)) / (f * (k - d) - B * (q - h)), t.push(d + (k - d) * f), t.push(h + (q - h) * f), t.push(D), t.push(E));
          }
          f = !0;
        }
        if (v == t.length) {
          return b.length = 0, !0;
        }
        t.push(t[0]);
        t.push(t[1]);
        if (a == c) {
          break;
        }
        d = t;
        t = n;
        t.length = 0;
        n = d;
      }
      if (b != t) {
        for (a = b.length = 0, m = t.length - 2; a < m; a++) {
          b[a] = t[a];
        }
      } else {
        b.length -= 2;
      }
      return f;
    };
    c.makeClockwise = function(a) {
      for (var b = a.length, c = a[b - 2] * a[1] - a[0] * a[b - 1], h, k, q, m, t = 0, e = b - 3; t < e; t += 2) {
        h = a[t], k = a[t + 1], q = a[t + 2], m = a[t + 3], c += h * m - q * k;
      }
      if (!(0 > c)) {
        for (t = 0, c = b - 2, e = b >> 1; t < e; t += 2) {
          b = a[t], h = a[t + 1], k = c - t, a[t] = a[k], a[t + 1] = a[k + 1], a[k] = b, a[k + 1] = h;
        }
      }
    };
    return c;
  }();
  a.SkeletonClipping = c;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    function a() {
      this.bones = [];
      this.slots = [];
      this.skins = [];
      this.events = [];
      this.animations = [];
      this.ikConstraints = [];
      this.transformConstraints = [];
      this.pathConstraints = [];
      this.fps = 0;
    }
    a.prototype.findBone = function(a) {
      if (null == a) {
        throw Error("boneName cannot be null.");
      }
      for (var b = this.bones, c = 0, h = b.length; c < h; c++) {
        var k = b[c];
        if (k.name == a) {
          return k;
        }
      }
      return null;
    };
    a.prototype.findBoneIndex = function(a) {
      if (null == a) {
        throw Error("boneName cannot be null.");
      }
      for (var b = this.bones, c = 0, h = b.length; c < h; c++) {
        if (b[c].name == a) {
          return c;
        }
      }
      return -1;
    };
    a.prototype.findSlot = function(a) {
      if (null == a) {
        throw Error("slotName cannot be null.");
      }
      for (var b = this.slots, c = 0, h = b.length; c < h; c++) {
        var k = b[c];
        if (k.name == a) {
          return k;
        }
      }
      return null;
    };
    a.prototype.findSlotIndex = function(a) {
      if (null == a) {
        throw Error("slotName cannot be null.");
      }
      for (var b = this.slots, c = 0, h = b.length; c < h; c++) {
        if (b[c].name == a) {
          return c;
        }
      }
      return -1;
    };
    a.prototype.findSkin = function(a) {
      if (null == a) {
        throw Error("skinName cannot be null.");
      }
      for (var b = this.skins, c = 0, h = b.length; c < h; c++) {
        var k = b[c];
        if (k.name == a) {
          return k;
        }
      }
      return null;
    };
    a.prototype.findEvent = function(a) {
      if (null == a) {
        throw Error("eventDataName cannot be null.");
      }
      for (var b = this.events, c = 0, h = b.length; c < h; c++) {
        var k = b[c];
        if (k.name == a) {
          return k;
        }
      }
      return null;
    };
    a.prototype.findAnimation = function(a) {
      if (null == a) {
        throw Error("animationName cannot be null.");
      }
      for (var b = this.animations, c = 0, h = b.length; c < h; c++) {
        var k = b[c];
        if (k.name == a) {
          return k;
        }
      }
      return null;
    };
    a.prototype.findIkConstraint = function(a) {
      if (null == a) {
        throw Error("constraintName cannot be null.");
      }
      for (var b = this.ikConstraints, c = 0, h = b.length; c < h; c++) {
        var k = b[c];
        if (k.name == a) {
          return k;
        }
      }
      return null;
    };
    a.prototype.findTransformConstraint = function(a) {
      if (null == a) {
        throw Error("constraintName cannot be null.");
      }
      for (var b = this.transformConstraints, c = 0, h = b.length; c < h; c++) {
        var k = b[c];
        if (k.name == a) {
          return k;
        }
      }
      return null;
    };
    a.prototype.findPathConstraint = function(a) {
      if (null == a) {
        throw Error("constraintName cannot be null.");
      }
      for (var b = this.pathConstraints, c = 0, h = b.length; c < h; c++) {
        var k = b[c];
        if (k.name == a) {
          return k;
        }
      }
      return null;
    };
    a.prototype.findPathConstraintIndex = function(a) {
      if (null == a) {
        throw Error("pathConstraintName cannot be null.");
      }
      for (var b = this.pathConstraints, c = 0, h = b.length; c < h; c++) {
        if (b[c].name == a) {
          return c;
        }
      }
      return -1;
    };
    return a;
  }();
  a.SkeletonData = c;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    function b(a) {
      this.scale = 1;
      this.linkedMeshes = [];
      this.attachmentLoader = a;
    }
    b.prototype.readSkeletonData = function(c) {
      var d = this.scale, f = new a.SkeletonData;
      c = "string" === typeof c ? JSON.parse(c) : c;
      var k = c.skeleton;
      null != k && (f.hash = k.hash, f.version = k.spine, f.width = k.width, f.height = k.height, f.fps = k.fps, f.imagesPath = k.images);
      if (c.bones) {
        for (k = 0; k < c.bones.length; k++) {
          var q = c.bones[k], m = null, t = this.getValue(q, "parent", null);
          if (null != t && (m = f.findBone(t), null == m)) {
            throw Error("Parent bone not found: " + t);
          }
          m = new a.BoneData(f.bones.length, q.name, m);
          m.length = this.getValue(q, "length", 0) * d;
          m.x = this.getValue(q, "x", 0) * d;
          m.y = this.getValue(q, "y", 0) * d;
          m.rotation = this.getValue(q, "rotation", 0);
          m.scaleX = this.getValue(q, "scaleX", 1);
          m.scaleY = this.getValue(q, "scaleY", 1);
          m.shearX = this.getValue(q, "shearX", 0);
          m.shearY = this.getValue(q, "shearY", 0);
          m.transformMode = b.transformModeFromString(this.getValue(q, "transform", "normal"));
          f.bones.push(m);
        }
      }
      if (c.slots) {
        for (k = 0; k < c.slots.length; k++) {
          q = c.slots[k];
          var e = q.name;
          t = q.bone;
          m = f.findBone(t);
          if (null == m) {
            throw Error("Slot bone not found: " + t);
          }
          m = new a.SlotData(f.slots.length, e, m);
          t = this.getValue(q, "color", null);
          null != t && m.color.setFromString(t);
          t = this.getValue(q, "dark", null);
          null != t && (m.darkColor = new a.Color(1, 1, 1, 1), m.darkColor.setFromString(t));
          m.attachmentName = this.getValue(q, "attachment", null);
          m.blendMode = b.blendModeFromString(this.getValue(q, "blend", "normal"));
          f.slots.push(m);
        }
      }
      if (c.ik) {
        for (k = 0; k < c.ik.length; k++) {
          q = c.ik[k];
          m = new a.IkConstraintData(q.name);
          m.order = this.getValue(q, "order", 0);
          for (var l = 0; l < q.bones.length; l++) {
            t = q.bones[l];
            var u = f.findBone(t);
            if (null == u) {
              throw Error("IK bone not found: " + t);
            }
            m.bones.push(u);
          }
          t = q.target;
          m.target = f.findBone(t);
          if (null == m.target) {
            throw Error("IK target bone not found: " + t);
          }
          m.bendDirection = this.getValue(q, "bendPositive", !0) ? 1 : -1;
          m.mix = this.getValue(q, "mix", 1);
          f.ikConstraints.push(m);
        }
      }
      if (c.transform) {
        for (k = 0; k < c.transform.length; k++) {
          q = c.transform[k];
          m = new a.TransformConstraintData(q.name);
          m.order = this.getValue(q, "order", 0);
          for (l = 0; l < q.bones.length; l++) {
            t = q.bones[l];
            u = f.findBone(t);
            if (null == u) {
              throw Error("Transform constraint bone not found: " + t);
            }
            m.bones.push(u);
          }
          t = q.target;
          m.target = f.findBone(t);
          if (null == m.target) {
            throw Error("Transform constraint target bone not found: " + t);
          }
          m.local = this.getValue(q, "local", !1);
          m.relative = this.getValue(q, "relative", !1);
          m.offsetRotation = this.getValue(q, "rotation", 0);
          m.offsetX = this.getValue(q, "x", 0) * d;
          m.offsetY = this.getValue(q, "y", 0) * d;
          m.offsetScaleX = this.getValue(q, "scaleX", 0);
          m.offsetScaleY = this.getValue(q, "scaleY", 0);
          m.offsetShearY = this.getValue(q, "shearY", 0);
          m.rotateMix = this.getValue(q, "rotateMix", 1);
          m.translateMix = this.getValue(q, "translateMix", 1);
          m.scaleMix = this.getValue(q, "scaleMix", 1);
          m.shearMix = this.getValue(q, "shearMix", 1);
          f.transformConstraints.push(m);
        }
      }
      if (c.path) {
        for (k = 0; k < c.path.length; k++) {
          q = c.path[k];
          m = new a.PathConstraintData(q.name);
          m.order = this.getValue(q, "order", 0);
          for (l = 0; l < q.bones.length; l++) {
            t = q.bones[l];
            u = f.findBone(t);
            if (null == u) {
              throw Error("Transform constraint bone not found: " + t);
            }
            m.bones.push(u);
          }
          t = q.target;
          m.target = f.findSlot(t);
          if (null == m.target) {
            throw Error("Path target slot not found: " + t);
          }
          m.positionMode = b.positionModeFromString(this.getValue(q, "positionMode", "percent"));
          m.spacingMode = b.spacingModeFromString(this.getValue(q, "spacingMode", "length"));
          m.rotateMode = b.rotateModeFromString(this.getValue(q, "rotateMode", "tangent"));
          m.offsetRotation = this.getValue(q, "rotation", 0);
          m.position = this.getValue(q, "position", 0);
          m.positionMode == a.PositionMode.Fixed && (m.position *= d);
          m.spacing = this.getValue(q, "spacing", 0);
          if (m.spacingMode == a.SpacingMode.Length || m.spacingMode == a.SpacingMode.Fixed) {
            m.spacing *= d;
          }
          m.rotateMix = this.getValue(q, "rotateMix", 1);
          m.translateMix = this.getValue(q, "translateMix", 1);
          f.pathConstraints.push(m);
        }
      }
      if (c.skins) {
        for (var w in c.skins) {
          k = c.skins[w];
          d = new a.Skin(w);
          for (e in k) {
            m = f.findSlotIndex(e);
            if (-1 == m) {
              throw Error("Slot not found: " + e);
            }
            q = k[e];
            for (var y in q) {
              t = this.readAttachment(q[y], d, m, y, f), null != t && d.addAttachment(m, y, t);
            }
          }
          f.skins.push(d);
          "default" == d.name && (f.defaultSkin = d);
        }
      }
      k = 0;
      for (e = this.linkedMeshes.length; k < e; k++) {
        w = this.linkedMeshes[k];
        d = null == w.skin ? f.defaultSkin : f.findSkin(w.skin);
        if (null == d) {
          throw Error("Skin not found: " + w.skin);
        }
        y = d.getAttachment(w.slotIndex, w.parent);
        if (null == y) {
          throw Error("Parent mesh not found: " + w.parent);
        }
        w.mesh.setParentMesh(y);
        w.mesh.updateUVs();
      }
      this.linkedMeshes.length = 0;
      if (c.events) {
        for (var x in c.events) {
          e = c.events[x], m = new a.EventData(x), m.intValue = this.getValue(e, "int", 0), m.floatValue = this.getValue(e, "float", 0), m.stringValue = this.getValue(e, "string", ""), f.events.push(m);
        }
      }
      if (c.animations) {
        for (var p in c.animations) {
          this.readAnimation(c.animations[p], p, f);
        }
      }
      return f;
    };
    b.prototype.readAttachment = function(b, c, h, n, q) {
      var d = this.scale;
      n = this.getValue(b, "name", n);
      switch(this.getValue(b, "type", "region")) {
        case "region":
          q = this.getValue(b, "path", n);
          h = this.attachmentLoader.newRegionAttachment(c, n, q);
          if (null == h) {
            break;
          }
          h.path = q;
          h.x = this.getValue(b, "x", 0) * d;
          h.y = this.getValue(b, "y", 0) * d;
          h.scaleX = this.getValue(b, "scaleX", 1);
          h.scaleY = this.getValue(b, "scaleY", 1);
          h.rotation = this.getValue(b, "rotation", 0);
          h.width = b.width * d;
          h.height = b.height * d;
          d = this.getValue(b, "color", null);
          null != d && h.color.setFromString(d);
          h.updateOffset();
          return h;
        case "boundingbox":
          q = this.attachmentLoader.newBoundingBoxAttachment(c, n);
          if (null == q) {
            break;
          }
          this.readVertices(b, q, b.vertexCount << 1);
          d = this.getValue(b, "color", null);
          null != d && q.color.setFromString(d);
          return q;
        case "mesh":
        case "linkedmesh":
          q = this.getValue(b, "path", n);
          c = this.attachmentLoader.newMeshAttachment(c, n, q);
          if (null == c) {
            break;
          }
          c.path = q;
          d = this.getValue(b, "color", null);
          null != d && c.color.setFromString(d);
          d = this.getValue(b, "parent", null);
          if (null != d) {
            return c.inheritDeform = this.getValue(b, "deform", !0), this.linkedMeshes.push(new k(c, this.getValue(b, "skin", null), h, d)), c;
          }
          d = b.uvs;
          this.readVertices(b, c, d.length);
          c.triangles = b.triangles;
          c.regionUVs = d;
          c.updateUVs();
          c.hullLength = 2 * this.getValue(b, "hull", 0);
          return c;
        case "path":
          q = this.attachmentLoader.newPathAttachment(c, n);
          if (null == q) {
            break;
          }
          q.closed = this.getValue(b, "closed", !1);
          q.constantSpeed = this.getValue(b, "constantSpeed", !0);
          c = b.vertexCount;
          this.readVertices(b, q, c << 1);
          h = a.Utils.newArray(c / 3, 0);
          for (c = 0; c < b.lengths.length; c++) {
            h[c] = b.lengths[c] * d;
          }
          q.lengths = h;
          d = this.getValue(b, "color", null);
          null != d && q.color.setFromString(d);
          return q;
        case "point":
          q = this.attachmentLoader.newPointAttachment(c, n);
          if (null == q) {
            break;
          }
          q.x = this.getValue(b, "x", 0) * d;
          q.y = this.getValue(b, "y", 0) * d;
          q.rotation = this.getValue(b, "rotation", 0);
          d = this.getValue(b, "color", null);
          null != d && q.color.setFromString(d);
          return q;
        case "clipping":
          if (h = this.attachmentLoader.newClippingAttachment(c, n), null != h) {
            d = this.getValue(b, "end", null);
            if (null != d) {
              q = q.findSlot(d);
              if (null == q) {
                throw Error("Clipping end slot not found: " + d);
              }
              h.endSlot = q;
            }
            c = b.vertexCount;
            this.readVertices(b, h, c << 1);
            d = this.getValue(b, "color", null);
            null != d && h.color.setFromString(d);
            return h;
          }
      }
      return null;
    };
    b.prototype.readVertices = function(b, c, h) {
      var d = this.scale;
      c.worldVerticesLength = h;
      b = b.vertices;
      if (h == b.length) {
        var f = a.Utils.toFloatArray(b);
        if (1 != d) {
          h = 0;
          for (var k = b.length; h < k; h++) {
            f[h] *= d;
          }
        }
        c.vertices = f;
      } else {
        f = [];
        var t = [];
        h = 0;
        for (k = b.length; h < k;) {
          var e = b[h++];
          t.push(e);
          for (e = h + 4 * e; h < e; h += 4) {
            t.push(b[h]), f.push(b[h + 1] * d), f.push(b[h + 2] * d), f.push(b[h + 3]);
          }
        }
        c.bones = t;
        c.vertices = a.Utils.toFloatArray(f);
      }
    };
    b.prototype.readAnimation = function(b, c, h) {
      var d = this.scale, f = [], k = 0;
      if (b.slots) {
        for (var t in b.slots) {
          var e = b.slots[t], l = h.findSlotIndex(t);
          if (-1 == l) {
            throw Error("Slot not found: " + t);
          }
          for (var u in e) {
            var w = e[u];
            if ("attachment" == u) {
              var y = new a.AttachmentTimeline(w.length);
              y.slotIndex = l;
              for (var x = 0, p = 0; p < w.length; p++) {
                var v = w[p];
                y.setFrame(x++, v.time, v.name);
              }
              f.push(y);
              k = Math.max(k, y.frames[y.getFrameCount() - 1]);
            } else {
              if ("color" == u) {
                y = new a.ColorTimeline(w.length);
                y.slotIndex = l;
                for (p = x = 0; p < w.length; p++) {
                  v = w[p];
                  var z = new a.Color;
                  z.setFromString(v.color);
                  y.setFrame(x, v.time, z.r, z.g, z.b, z.a);
                  this.readCurve(v, y, x);
                  x++;
                }
                f.push(y);
                k = Math.max(k, y.frames[(y.getFrameCount() - 1) * a.ColorTimeline.ENTRIES]);
              } else {
                if ("twoColor" == u) {
                  y = new a.TwoColorTimeline(w.length);
                  y.slotIndex = l;
                  for (p = x = 0; p < w.length; p++) {
                    v = w[p];
                    z = new a.Color;
                    var C = new a.Color;
                    z.setFromString(v.light);
                    C.setFromString(v.dark);
                    y.setFrame(x, v.time, z.r, z.g, z.b, z.a, C.r, C.g, C.b);
                    this.readCurve(v, y, x);
                    x++;
                  }
                  f.push(y);
                  k = Math.max(k, y.frames[(y.getFrameCount() - 1) * a.TwoColorTimeline.ENTRIES]);
                } else {
                  throw Error("Invalid timeline type for a slot: " + u + " (" + t + ")");
                }
              }
            }
          }
        }
      }
      if (b.bones) {
        for (var A in b.bones) {
          e = b.bones[A];
          z = h.findBoneIndex(A);
          if (-1 == z) {
            throw Error("Bone not found: " + A);
          }
          for (u in e) {
            if (w = e[u], "rotate" === u) {
              y = new a.RotateTimeline(w.length);
              y.boneIndex = z;
              for (p = x = 0; p < w.length; p++) {
                v = w[p], y.setFrame(x, v.time, v.angle), this.readCurve(v, y, x), x++;
              }
              f.push(y);
              k = Math.max(k, y.frames[(y.getFrameCount() - 1) * a.RotateTimeline.ENTRIES]);
            } else {
              if ("translate" === u || "scale" === u || "shear" === u) {
                l = 1;
                "scale" === u ? y = new a.ScaleTimeline(w.length) : "shear" === u ? y = new a.ShearTimeline(w.length) : (y = new a.TranslateTimeline(w.length), l = d);
                y.boneIndex = z;
                for (p = x = 0; p < w.length; p++) {
                  v = w[p];
                  C = this.getValue(v, "x", 0);
                  var D = this.getValue(v, "y", 0);
                  y.setFrame(x, v.time, C * l, D * l);
                  this.readCurve(v, y, x);
                  x++;
                }
                f.push(y);
                k = Math.max(k, y.frames[(y.getFrameCount() - 1) * a.TranslateTimeline.ENTRIES]);
              } else {
                throw Error("Invalid timeline type for a bone: " + u + " (" + A + ")");
              }
            }
          }
        }
      }
      if (b.ik) {
        for (var E in b.ik) {
          e = b.ik[E];
          x = h.findIkConstraint(E);
          y = new a.IkConstraintTimeline(e.length);
          y.ikConstraintIndex = h.ikConstraints.indexOf(x);
          for (p = x = 0; p < e.length; p++) {
            v = e[p], y.setFrame(x, v.time, this.getValue(v, "mix", 1), this.getValue(v, "bendPositive", !0) ? 1 : -1), this.readCurve(v, y, x), x++;
          }
          f.push(y);
          k = Math.max(k, y.frames[(y.getFrameCount() - 1) * a.IkConstraintTimeline.ENTRIES]);
        }
      }
      if (b.transform) {
        for (E in b.transform) {
          e = b.transform[E];
          x = h.findTransformConstraint(E);
          y = new a.TransformConstraintTimeline(e.length);
          y.transformConstraintIndex = h.transformConstraints.indexOf(x);
          for (p = x = 0; p < e.length; p++) {
            v = e[p], y.setFrame(x, v.time, this.getValue(v, "rotateMix", 1), this.getValue(v, "translateMix", 1), this.getValue(v, "scaleMix", 1), this.getValue(v, "shearMix", 1)), this.readCurve(v, y, x), x++;
          }
          f.push(y);
          k = Math.max(k, y.frames[(y.getFrameCount() - 1) * a.TransformConstraintTimeline.ENTRIES]);
        }
      }
      if (b.paths) {
        for (E in b.paths) {
          e = b.paths[E];
          A = h.findPathConstraintIndex(E);
          if (-1 == A) {
            throw Error("Path constraint not found: " + E);
          }
          z = h.pathConstraints[A];
          for (u in e) {
            if (w = e[u], "position" === u || "spacing" === u) {
              l = 1;
              if ("spacing" === u) {
                if (y = new a.PathConstraintSpacingTimeline(w.length), z.spacingMode == a.SpacingMode.Length || z.spacingMode == a.SpacingMode.Fixed) {
                  l = d;
                }
              } else {
                y = new a.PathConstraintPositionTimeline(w.length), z.positionMode == a.PositionMode.Fixed && (l = d);
              }
              y.pathConstraintIndex = A;
              for (p = x = 0; p < w.length; p++) {
                v = w[p], y.setFrame(x, v.time, this.getValue(v, u, 0) * l), this.readCurve(v, y, x), x++;
              }
              f.push(y);
              k = Math.max(k, y.frames[(y.getFrameCount() - 1) * a.PathConstraintPositionTimeline.ENTRIES]);
            } else {
              if ("mix" === u) {
                y = new a.PathConstraintMixTimeline(w.length);
                y.pathConstraintIndex = A;
                for (p = x = 0; p < w.length; p++) {
                  v = w[p], y.setFrame(x, v.time, this.getValue(v, "rotateMix", 1), this.getValue(v, "translateMix", 1)), this.readCurve(v, y, x), x++;
                }
                f.push(y);
                k = Math.max(k, y.frames[(y.getFrameCount() - 1) * a.PathConstraintMixTimeline.ENTRIES]);
              }
            }
          }
        }
      }
      if (b.deform) {
        for (var B in b.deform) {
          A = b.deform[B];
          z = h.findSkin(B);
          if (null == z) {
            throw Error("Skin not found: " + B);
          }
          for (t in A) {
            e = A[t];
            l = h.findSlotIndex(t);
            if (-1 == l) {
              throw Error("Slot not found: " + e.name);
            }
            for (u in e) {
              w = e[u];
              x = z.getAttachment(l, u);
              if (null == x) {
                throw Error("Deform attachment not found: " + w.name);
              }
              C = null != x.bones;
              D = x.vertices;
              var G = C ? D.length / 3 * 2 : D.length;
              y = new a.DeformTimeline(w.length);
              y.slotIndex = l;
              y.attachment = x;
              for (E = x = 0; E < w.length; E++) {
                v = w[E];
                var H = this.getValue(v, "vertices", null);
                if (null == H) {
                  var K = C ? a.Utils.newFloatArray(G) : D;
                } else {
                  K = a.Utils.newFloatArray(G);
                  p = this.getValue(v, "offset", 0);
                  a.Utils.arrayCopy(H, 0, K, p, H.length);
                  if (1 != d) {
                    for (H = p + H.length; p < H; p++) {
                      K[p] *= d;
                    }
                  }
                  if (!C) {
                    for (p = 0; p < G; p++) {
                      K[p] += D[p];
                    }
                  }
                }
                y.setFrame(x, v.time, K);
                this.readCurve(v, y, x);
                x++;
              }
              f.push(y);
              k = Math.max(k, y.frames[y.getFrameCount() - 1]);
            }
          }
        }
      }
      d = b.drawOrder;
      null == d && (d = b.draworder);
      if (null != d) {
        y = new a.DrawOrderTimeline(d.length);
        t = h.slots.length;
        for (E = x = 0; E < d.length; E++) {
          u = d[E];
          B = null;
          w = this.getValue(u, "offsets", null);
          if (null != w) {
            B = a.Utils.newArray(t, -1);
            v = a.Utils.newArray(t - w.length, 0);
            for (p = A = e = 0; p < w.length; p++) {
              z = w[p];
              l = h.findSlotIndex(z.slot);
              if (-1 == l) {
                throw Error("Slot not found: " + z.slot);
              }
              for (; e != l;) {
                v[A++] = e++;
              }
              B[e + z.offset] = e++;
            }
            for (; e < t;) {
              v[A++] = e++;
            }
            for (p = t - 1; 0 <= p; p--) {
              -1 == B[p] && (B[p] = v[--A]);
            }
          }
          y.setFrame(x++, u.time, B);
        }
        f.push(y);
        k = Math.max(k, y.frames[y.getFrameCount() - 1]);
      }
      if (b.events) {
        y = new a.EventTimeline(b.events.length);
        for (p = x = 0; p < b.events.length; p++) {
          d = b.events[p];
          t = h.findEvent(d.name);
          if (null == t) {
            throw Error("Event not found: " + d.name);
          }
          l = new a.Event(a.Utils.toSinglePrecision(d.time), t);
          l.intValue = this.getValue(d, "int", t.intValue);
          l.floatValue = this.getValue(d, "float", t.floatValue);
          l.stringValue = this.getValue(d, "string", t.stringValue);
          y.setFrame(x++, l);
        }
        f.push(y);
        k = Math.max(k, y.frames[y.getFrameCount() - 1]);
      }
      if (isNaN(k)) {
        throw Error("Error while parsing animation, duration is NaN");
      }
      h.animations.push(new a.Animation(c, f, k));
    };
    b.prototype.readCurve = function(a, b, c) {
      a.curve && ("stepped" === a.curve ? b.setStepped(c) : "[object Array]" === Object.prototype.toString.call(a.curve) && (a = a.curve, b.setCurve(c, a[0], a[1], a[2], a[3])));
    };
    b.prototype.getValue = function(a, b, c) {
      return void 0 !== a[b] ? a[b] : c;
    };
    b.blendModeFromString = function(b) {
      b = b.toLowerCase();
      if ("normal" == b) {
        return a.BlendMode.Normal;
      }
      if ("additive" == b) {
        return a.BlendMode.Additive;
      }
      if ("multiply" == b) {
        return a.BlendMode.Multiply;
      }
      if ("screen" == b) {
        return a.BlendMode.Screen;
      }
      throw Error("Unknown blend mode: " + b);
    };
    b.positionModeFromString = function(b) {
      b = b.toLowerCase();
      if ("fixed" == b) {
        return a.PositionMode.Fixed;
      }
      if ("percent" == b) {
        return a.PositionMode.Percent;
      }
      throw Error("Unknown position mode: " + b);
    };
    b.spacingModeFromString = function(b) {
      b = b.toLowerCase();
      if ("length" == b) {
        return a.SpacingMode.Length;
      }
      if ("fixed" == b) {
        return a.SpacingMode.Fixed;
      }
      if ("percent" == b) {
        return a.SpacingMode.Percent;
      }
      throw Error("Unknown position mode: " + b);
    };
    b.rotateModeFromString = function(b) {
      b = b.toLowerCase();
      if ("tangent" == b) {
        return a.RotateMode.Tangent;
      }
      if ("chain" == b) {
        return a.RotateMode.Chain;
      }
      if ("chainscale" == b) {
        return a.RotateMode.ChainScale;
      }
      throw Error("Unknown rotate mode: " + b);
    };
    b.transformModeFromString = function(b) {
      b = b.toLowerCase();
      if ("normal" == b) {
        return a.TransformMode.Normal;
      }
      if ("onlytranslation" == b) {
        return a.TransformMode.OnlyTranslation;
      }
      if ("norotationorreflection" == b) {
        return a.TransformMode.NoRotationOrReflection;
      }
      if ("noscale" == b) {
        return a.TransformMode.NoScale;
      }
      if ("noscaleorreflection" == b) {
        return a.TransformMode.NoScaleOrReflection;
      }
      throw Error("Unknown transform mode: " + b);
    };
    return b;
  }();
  a.SkeletonJson = c;
  var k = function() {
    return function(a, c, d, h) {
      this.mesh = a;
      this.skin = c;
      this.slotIndex = d;
      this.parent = h;
    };
  }();
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    function a(a) {
      this.attachments = [];
      if (null == a) {
        throw Error("name cannot be null.");
      }
      this.name = a;
    }
    a.prototype.addAttachment = function(a, c, d) {
      if (null == d) {
        throw Error("attachment cannot be null.");
      }
      var b = this.attachments;
      a >= b.length && (b.length = a + 1);
      b[a] || (b[a] = {});
      b[a][c] = d;
    };
    a.prototype.getAttachment = function(a, c) {
      return (a = this.attachments[a]) ? a[c] : null;
    };
    a.prototype.attachAll = function(a, c) {
      for (var b = 0, f = 0; f < a.slots.length; f++) {
        var k = a.slots[f], q = k.getAttachment();
        if (q && b < c.attachments.length) {
          var m = c.attachments[b], t;
          for (t in m) {
            if (q == m[t]) {
              q = this.getAttachment(b, t);
              null != q && k.setAttachment(q);
              break;
            }
          }
        }
        b++;
      }
    };
    return a;
  }();
  a.Skin = c;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    function c(b, c) {
      this.attachmentVertices = [];
      if (null == b) {
        throw Error("data cannot be null.");
      }
      if (null == c) {
        throw Error("bone cannot be null.");
      }
      this.data = b;
      this.bone = c;
      this.color = new a.Color;
      this.darkColor = null == b.darkColor ? null : new a.Color;
      this.setToSetupPose();
    }
    c.prototype.getAttachment = function() {
      return this.attachment;
    };
    c.prototype.setAttachment = function(a) {
      this.attachment != a && (this.attachment = a, this.attachmentTime = this.bone.skeleton.time, this.attachmentVertices.length = 0);
    };
    c.prototype.setAttachmentTime = function(a) {
      this.attachmentTime = this.bone.skeleton.time - a;
    };
    c.prototype.getAttachmentTime = function() {
      return this.bone.skeleton.time - this.attachmentTime;
    };
    c.prototype.setToSetupPose = function() {
      this.color.setFromColor(this.data.color);
      null != this.darkColor && this.darkColor.setFromColor(this.data.darkColor);
      null == this.data.attachmentName ? this.attachment = null : (this.attachment = null, this.setAttachment(this.bone.skeleton.getAttachment(this.data.index, this.data.attachmentName)));
    };
    return c;
  }();
  a.Slot = c;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    return function(c, b, f) {
      this.color = new a.Color(1, 1, 1, 1);
      if (0 > c) {
        throw Error("index must be >= 0.");
      }
      if (null == b) {
        throw Error("name cannot be null.");
      }
      if (null == f) {
        throw Error("boneData cannot be null.");
      }
      this.index = c;
      this.name = b;
      this.boneData = f;
    };
  }();
  a.SlotData = c;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    function a(a) {
      this._image = a;
    }
    a.prototype.getImage = function() {
      return this._image;
    };
    a.filterFromString = function(a) {
      switch(a.toLowerCase()) {
        case "nearest":
          return k.Nearest;
        case "linear":
          return k.Linear;
        case "mipmap":
          return k.MipMap;
        case "mipmapnearestnearest":
          return k.MipMapNearestNearest;
        case "mipmaplinearnearest":
          return k.MipMapLinearNearest;
        case "mipmapnearestlinear":
          return k.MipMapNearestLinear;
        case "mipmaplinearlinear":
          return k.MipMapLinearLinear;
        default:
          throw Error("Unknown texture filter " + a);
      }
    };
    a.wrapFromString = function(a) {
      switch(a.toLowerCase()) {
        case "mirroredtepeat":
          return b.MirroredRepeat;
        case "clamptoedge":
          return b.ClampToEdge;
        case "repeat":
          return b.Repeat;
        default:
          throw Error("Unknown texture wrap " + a);
      }
    };
    return a;
  }();
  a.Texture = c;
  (function(a) {
    a[a.Nearest = 9728] = "Nearest";
    a[a.Linear = 9729] = "Linear";
    a[a.MipMap = 9987] = "MipMap";
    a[a.MipMapNearestNearest = 9984] = "MipMapNearestNearest";
    a[a.MipMapLinearNearest = 9985] = "MipMapLinearNearest";
    a[a.MipMapNearestLinear = 9986] = "MipMapNearestLinear";
    a[a.MipMapLinearLinear = 9987] = "MipMapLinearLinear";
  })(a.TextureFilter || (a.TextureFilter = {}));
  var k = a.TextureFilter;
  (function(a) {
    a[a.MirroredRepeat = 33648] = "MirroredRepeat";
    a[a.ClampToEdge = 33071] = "ClampToEdge";
    a[a.Repeat = 10497] = "Repeat";
  })(a.TextureWrap || (a.TextureWrap = {}));
  var b = a.TextureWrap;
  c = function() {
    return function() {
      this.height = this.width = this.v2 = this.u2 = this.v = this.u = 0;
      this.rotate = !1;
      this.originalHeight = this.originalWidth = this.offsetY = this.offsetX = 0;
    };
  }();
  a.TextureRegion = c;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    function c(a, b) {
      this.pages = [];
      this.regions = [];
      this.load(a, b);
    }
    c.prototype.load = function(c, d) {
      if (null == d) {
        throw Error("textureLoader cannot be null.");
      }
      c = new k(c);
      for (var h = Array(4), m = null;;) {
        var n = c.readLine();
        if (null == n) {
          break;
        }
        n = n.trim();
        if (0 == n.length) {
          m = null;
        } else {
          if (m) {
            var e = new f;
            e.name = n;
            e.page = m;
            e.rotate = "true" == c.readValue();
            c.readTuple(h);
            n = parseInt(h[0]);
            var l = parseInt(h[1]);
            c.readTuple(h);
            var u = parseInt(h[0]), w = parseInt(h[1]);
            e.u = n / m.width;
            e.v = l / m.height;
            e.rotate ? (e.u2 = (n + w) / m.width, e.v2 = (l + u) / m.height) : (e.u2 = (n + u) / m.width, e.v2 = (l + w) / m.height);
            e.x = n;
            e.y = l;
            e.width = Math.abs(u);
            e.height = Math.abs(w);
            4 == c.readTuple(h) && 4 == c.readTuple(h) && c.readTuple(h);
            e.originalWidth = parseInt(h[0]);
            e.originalHeight = parseInt(h[1]);
            c.readTuple(h);
            e.offsetX = parseInt(h[0]);
            e.offsetY = parseInt(h[1]);
            e.index = parseInt(c.readValue());
            e.texture = m.texture;
            this.regions.push(e);
          } else {
            m = new b, m.name = n, 2 == c.readTuple(h) && (m.width = parseInt(h[0]), m.height = parseInt(h[1]), c.readTuple(h)), c.readTuple(h), m.minFilter = a.Texture.filterFromString(h[0]), m.magFilter = a.Texture.filterFromString(h[1]), e = c.readValue(), m.uWrap = a.TextureWrap.ClampToEdge, m.vWrap = a.TextureWrap.ClampToEdge, "x" == e ? m.uWrap = a.TextureWrap.Repeat : "y" == e ? m.vWrap = a.TextureWrap.Repeat : "xy" == e && (m.uWrap = m.vWrap = a.TextureWrap.Repeat), m.texture = d(n), m.texture.setFilters(m.minFilter, 
            m.magFilter), m.texture.setWraps(m.uWrap, m.vWrap), m.width = m.texture.getImage().width, m.height = m.texture.getImage().height, this.pages.push(m);
          }
        }
      }
    };
    c.prototype.findRegion = function(a) {
      for (var b = 0; b < this.regions.length; b++) {
        if (this.regions[b].name == a) {
          return this.regions[b];
        }
      }
      return null;
    };
    c.prototype.dispose = function() {
      for (var a = 0; a < this.pages.length; a++) {
        this.pages[a].texture.dispose();
      }
    };
    return c;
  }();
  a.TextureAtlas = c;
  var k = function() {
    function a(a) {
      this.index = 0;
      this.lines = a.split(/\r\n|\r|\n/);
    }
    a.prototype.readLine = function() {
      return this.index >= this.lines.length ? null : this.lines[this.index++];
    };
    a.prototype.readValue = function() {
      var a = this.readLine(), b = a.indexOf(":");
      if (-1 == b) {
        throw Error("Invalid line: " + a);
      }
      return a.substring(b + 1).trim();
    };
    a.prototype.readTuple = function(a) {
      var b = this.readLine(), c = b.indexOf(":");
      if (-1 == c) {
        throw Error("Invalid line: " + b);
      }
      var d = 0;
      for (c += 1; 3 > d; d++) {
        var f = b.indexOf(",", c);
        if (-1 == f) {
          break;
        }
        a[d] = b.substr(c, f - c).trim();
        c = f + 1;
      }
      a[d] = b.substring(c).trim();
      return d + 1;
    };
    return a;
  }(), b = function() {
    return function() {
    };
  }();
  a.TextureAtlasPage = b;
  var f = function(a) {
    function b() {
      a.apply(this, arguments);
    }
    __extends(b, a);
    return b;
  }(a.TextureRegion);
  a.TextureAtlasRegion = f;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    function c(b, c) {
      this.shearMix = this.scaleMix = this.translateMix = this.rotateMix = 0;
      this.temp = new a.Vector2;
      if (null == b) {
        throw Error("data cannot be null.");
      }
      if (null == c) {
        throw Error("skeleton cannot be null.");
      }
      this.data = b;
      this.rotateMix = b.rotateMix;
      this.translateMix = b.translateMix;
      this.scaleMix = b.scaleMix;
      this.shearMix = b.shearMix;
      this.bones = [];
      for (var d = 0; d < b.bones.length; d++) {
        this.bones.push(c.findBone(b.bones[d].name));
      }
      this.target = c.findBone(b.target.name);
    }
    c.prototype.apply = function() {
      this.update();
    };
    c.prototype.update = function() {
      this.data.local ? this.data.relative ? this.applyRelativeLocal() : this.applyAbsoluteLocal() : this.data.relative ? this.applyRelativeWorld() : this.applyAbsoluteWorld();
    };
    c.prototype.applyAbsoluteWorld = function() {
      var b = this.rotateMix, c = this.translateMix, d = this.scaleMix, h = this.shearMix, k = this.target, q = k.a, m = k.b, t = k.c, e = k.d, l = 0 < q * e - m * t ? a.MathUtils.degRad : -a.MathUtils.degRad, u = this.data.offsetRotation * l;
      l *= this.data.offsetShearY;
      for (var w = this.bones, y = 0, x = w.length; y < x; y++) {
        var p = w[y], v = !1;
        if (0 != b) {
          var z = p.a;
          v = p.b;
          var C = p.c, A = p.d, D = Math.atan2(t, q) - Math.atan2(C, z) + u;
          D > a.MathUtils.PI ? D -= a.MathUtils.PI2 : D < -a.MathUtils.PI && (D += a.MathUtils.PI2);
          D *= b;
          var E = Math.cos(D);
          D = Math.sin(D);
          p.a = E * z - D * C;
          p.b = E * v - D * A;
          p.c = D * z + E * C;
          p.d = D * v + E * A;
          v = !0;
        }
        0 != c && (v = this.temp, k.localToWorld(v.set(this.data.offsetX, this.data.offsetY)), p.worldX += (v.x - p.worldX) * c, p.worldY += (v.y - p.worldY) * c, v = !0);
        0 < d && (v = Math.sqrt(p.a * p.a + p.c * p.c), A = Math.sqrt(q * q + t * t), 1E-5 < v && (v = (v + (A - v + this.data.offsetScaleX) * d) / v), p.a *= v, p.c *= v, v = Math.sqrt(p.b * p.b + p.d * p.d), A = Math.sqrt(m * m + e * e), 1E-5 < v && (v = (v + (A - v + this.data.offsetScaleY) * d) / v), p.b *= v, p.d *= v, v = !0);
        0 < h && (v = p.b, A = p.d, z = Math.atan2(A, v), D = Math.atan2(e, m) - Math.atan2(t, q) - (z - Math.atan2(p.c, p.a)), D > a.MathUtils.PI ? D -= a.MathUtils.PI2 : D < -a.MathUtils.PI && (D += a.MathUtils.PI2), D = z + (D + l) * h, v = Math.sqrt(v * v + A * A), p.b = Math.cos(D) * v, p.d = Math.sin(D) * v, v = !0);
        v && (p.appliedValid = !1);
      }
    };
    c.prototype.applyRelativeWorld = function() {
      var b = this.rotateMix, c = this.translateMix, d = this.scaleMix, h = this.shearMix, k = this.target, q = k.a, m = k.b, t = k.c, e = k.d, l = 0 < q * e - m * t ? a.MathUtils.degRad : -a.MathUtils.degRad, u = this.data.offsetRotation * l;
      l *= this.data.offsetShearY;
      for (var w = this.bones, y = 0, x = w.length; y < x; y++) {
        var p = w[y], v = !1;
        if (0 != b) {
          v = p.a;
          var z = p.b, C = p.c, A = p.d, D = Math.atan2(t, q) + u;
          D > a.MathUtils.PI ? D -= a.MathUtils.PI2 : D < -a.MathUtils.PI && (D += a.MathUtils.PI2);
          D *= b;
          var E = Math.cos(D);
          D = Math.sin(D);
          p.a = E * v - D * C;
          p.b = E * z - D * A;
          p.c = D * v + E * C;
          p.d = D * z + E * A;
          v = !0;
        }
        0 != c && (v = this.temp, k.localToWorld(v.set(this.data.offsetX, this.data.offsetY)), p.worldX += v.x * c, p.worldY += v.y * c, v = !0);
        0 < d && (v = (Math.sqrt(q * q + t * t) - 1 + this.data.offsetScaleX) * d + 1, p.a *= v, p.c *= v, v = (Math.sqrt(m * m + e * e) - 1 + this.data.offsetScaleY) * d + 1, p.b *= v, p.d *= v, v = !0);
        0 < h && (D = Math.atan2(e, m) - Math.atan2(t, q), D > a.MathUtils.PI ? D -= a.MathUtils.PI2 : D < -a.MathUtils.PI && (D += a.MathUtils.PI2), z = p.b, A = p.d, D = Math.atan2(A, z) + (D - a.MathUtils.PI / 2 + l) * h, v = Math.sqrt(z * z + A * A), p.b = Math.cos(D) * v, p.d = Math.sin(D) * v, v = !0);
        v && (p.appliedValid = !1);
      }
    };
    c.prototype.applyAbsoluteLocal = function() {
      var a = this.rotateMix, c = this.translateMix, d = this.scaleMix, h = this.shearMix, k = this.target;
      k.appliedValid || k.updateAppliedTransform();
      for (var q = this.bones, m = 0, t = q.length; m < t; m++) {
        var e = q[m];
        e.appliedValid || e.updateAppliedTransform();
        var l = e.arotation;
        if (0 != a) {
          var u = k.arotation - l + this.data.offsetRotation;
          u -= 360 * (16384 - (16384.499999999996 - u / 360 | 0));
          l += u * a;
        }
        var w = e.ax, y = e.ay;
        0 != c && (w += (k.ax - w + this.data.offsetX) * c, y += (k.ay - y + this.data.offsetY) * c);
        var x = e.ascaleX, p = e.ascaleY;
        0 < d && (1E-5 < x && (x = (x + (k.ascaleX - x + this.data.offsetScaleX) * d) / x), 1E-5 < p && (p = (p + (k.ascaleY - p + this.data.offsetScaleY) * d) / p));
        var v = e.ashearY;
        0 < h && (u = k.ashearY - v + this.data.offsetShearY, u -= 360 * (16384 - (16384.499999999996 - u / 360 | 0)), e.shearY += u * h);
        e.updateWorldTransformWith(w, y, l, x, p, e.ashearX, v);
      }
    };
    c.prototype.applyRelativeLocal = function() {
      var a = this.rotateMix, c = this.translateMix, d = this.scaleMix, h = this.shearMix, k = this.target;
      k.appliedValid || k.updateAppliedTransform();
      for (var q = this.bones, m = 0, t = q.length; m < t; m++) {
        var e = q[m];
        e.appliedValid || e.updateAppliedTransform();
        var l = e.arotation;
        0 != a && (l += (k.arotation + this.data.offsetRotation) * a);
        var u = e.ax, w = e.ay;
        0 != c && (u += (k.ax + this.data.offsetX) * c, w += (k.ay + this.data.offsetY) * c);
        var y = e.ascaleX, x = e.ascaleY;
        0 < d && (1E-5 < y && (y *= (k.ascaleX - 1 + this.data.offsetScaleX) * d + 1), 1E-5 < x && (x *= (k.ascaleY - 1 + this.data.offsetScaleY) * d + 1));
        var p = e.ashearY;
        0 < h && (p += (k.ashearY + this.data.offsetShearY) * h);
        e.updateWorldTransformWith(u, w, l, y, x, e.ashearX, p);
      }
    };
    c.prototype.getOrder = function() {
      return this.data.order;
    };
    return c;
  }();
  a.TransformConstraint = c;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    return function(a) {
      this.order = 0;
      this.bones = [];
      this.offsetShearY = this.offsetScaleY = this.offsetScaleX = this.offsetY = this.offsetX = this.offsetRotation = this.shearMix = this.scaleMix = this.translateMix = this.rotateMix = 0;
      this.local = this.relative = !1;
      if (null == a) {
        throw Error("name cannot be null.");
      }
      this.name = a;
    };
  }();
  a.TransformConstraintData = c;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    function c() {
      this.convexPolygons = [];
      this.convexPolygonsIndices = [];
      this.indicesArray = [];
      this.isConcaveArray = [];
      this.triangles = [];
      this.polygonPool = new a.Pool(function() {
        return [];
      });
      this.polygonIndicesPool = new a.Pool(function() {
        return [];
      });
    }
    c.prototype.triangulate = function(a) {
      for (var b = a.length >> 1, d = this.indicesArray, h = d.length = 0; h < b; h++) {
        d[h] = h;
      }
      var k = this.isConcaveArray;
      h = k.length = 0;
      for (var q = b; h < q; ++h) {
        k[h] = c.isConcave(h, b, a, d);
      }
      q = this.triangles;
      for (q.length = 0; 3 < b;) {
        var m = b - 1;
        h = 0;
        for (var t = 1;;) {
          a: {
            if (!k[h]) {
              var e = d[m] << 1, l = d[h] << 1, u = d[t] << 1, w = a[e];
              e = a[e + 1];
              var y = a[l];
              l = a[l + 1];
              var x = a[u];
              u = a[u + 1];
              for (var p = (t + 1) % b; p != m; p = (p + 1) % b) {
                if (k[p]) {
                  var v = d[p] << 1, z = a[v];
                  v = a[v + 1];
                  if (c.positiveArea(x, u, w, e, z, v) && c.positiveArea(w, e, y, l, z, v) && c.positiveArea(y, l, x, u, z, v)) {
                    break a;
                  }
                }
              }
              break;
            }
          }
          if (0 == t) {
            do {
              if (!k[h]) {
                break;
              }
              h--;
            } while (0 < h);
            break;
          }
          m = h;
          h = t;
          t = (t + 1) % b;
        }
        q.push(d[(b + h - 1) % b]);
        q.push(d[h]);
        q.push(d[(h + 1) % b]);
        d.splice(h, 1);
        k.splice(h, 1);
        b--;
        m = (b + h - 1) % b;
        h = h == b ? 0 : h;
        k[m] = c.isConcave(m, b, a, d);
        k[h] = c.isConcave(h, b, a, d);
      }
      3 == b && (q.push(d[2]), q.push(d[0]), q.push(d[1]));
      return q;
    };
    c.prototype.decompose = function(a, f) {
      var b = this.convexPolygons;
      this.polygonPool.freeAll(b);
      b.length = 0;
      var h = this.convexPolygonsIndices;
      this.polygonIndicesPool.freeAll(h);
      h.length = 0;
      var k = this.polygonIndicesPool.obtain();
      k.length = 0;
      var q = this.polygonPool.obtain();
      q.length = 0;
      for (var m = -1, t = 0, e = 0, l = f.length; e < l; e += 3) {
        var u = f[e] << 1, w = f[e + 1] << 1, y = f[e + 2] << 1, x = a[u], p = a[u + 1], v = a[w], z = a[w + 1], C = a[y], A = a[y + 1], D = !1;
        if (m == u) {
          var E = q.length - 4;
          E = c.winding(q[E], q[E + 1], q[E + 2], q[E + 3], C, A);
          var B = c.winding(C, A, q[0], q[1], q[2], q[3]);
          E == t && B == t && (q.push(C), q.push(A), k.push(y), D = !0);
        }
        D || (0 < q.length ? (b.push(q), h.push(k)) : (this.polygonPool.free(q), this.polygonIndicesPool.free(k)), q = this.polygonPool.obtain(), q.length = 0, q.push(x), q.push(p), q.push(v), q.push(z), q.push(C), q.push(A), k = this.polygonIndicesPool.obtain(), k.length = 0, k.push(u), k.push(w), k.push(y), t = c.winding(x, p, v, z, C, A), m = u);
      }
      0 < q.length && (b.push(q), h.push(k));
      e = 0;
      for (l = b.length; e < l; e++) {
        if (k = h[e], 0 != k.length) {
          for (a = k[0], f = k[k.length - 1], q = b[e], E = q.length - 4, m = q[E], t = q[E + 1], u = q[E + 2], w = q[E + 3], y = q[0], x = q[1], p = q[2], v = q[3], z = c.winding(m, t, u, w, y, x), D = 0; D < l; D++) {
            if (D != e) {
              var G = h[D];
              if (3 == G.length) {
                E = G[0];
                B = G[1];
                var H = G[2], K = b[D];
                C = K[K.length - 2];
                A = K[K.length - 1];
                E == a && B == f && (E = c.winding(m, t, u, w, C, A), B = c.winding(C, A, y, x, p, v), E == z && B == z && (K.length = 0, G.length = 0, q.push(C), q.push(A), k.push(H), m = u, t = w, u = C, w = A, D = 0));
              }
            }
          }
        }
      }
      for (e = b.length - 1; 0 <= e; e--) {
        q = b[e], 0 == q.length && (b.splice(e, 1), this.polygonPool.free(q), k = h[e], h.splice(e, 1), this.polygonIndicesPool.free(k));
      }
      return b;
    };
    c.isConcave = function(a, c, d, h) {
      var b = h[(c + a - 1) % c] << 1, f = h[a] << 1;
      a = h[(a + 1) % c] << 1;
      return !this.positiveArea(d[b], d[b + 1], d[f], d[f + 1], d[a], d[a + 1]);
    };
    c.positiveArea = function(a, c, d, h, k, q) {
      return 0 <= a * (q - h) + d * (c - q) + k * (h - c);
    };
    c.winding = function(a, c, d, h, k, q) {
      d -= a;
      h -= c;
      return 0 <= k * h - q * d + d * c - a * h ? 1 : -1;
    };
    return c;
  }();
  a.Triangulator = c;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    function a() {
      this.array = [];
    }
    a.prototype.add = function(a) {
      var b = this.contains(a);
      this.array[a | 0] = a | 0;
      return !b;
    };
    a.prototype.contains = function(a) {
      return void 0 != this.array[a | 0];
    };
    a.prototype.remove = function(a) {
      this.array[a | 0] = void 0;
    };
    a.prototype.clear = function() {
      this.array.length = 0;
    };
    return a;
  }();
  a.IntSet = c;
  c = function() {
    function a(a, c, d, h) {
      void 0 === a && (a = 0);
      void 0 === c && (c = 0);
      void 0 === d && (d = 0);
      void 0 === h && (h = 0);
      this.r = a;
      this.g = c;
      this.b = d;
      this.a = h;
    }
    a.prototype.set = function(a, c, d, h) {
      this.r = a;
      this.g = c;
      this.b = d;
      this.a = h;
      this.clamp();
      return this;
    };
    a.prototype.setFromColor = function(a) {
      this.r = a.r;
      this.g = a.g;
      this.b = a.b;
      this.a = a.a;
      return this;
    };
    a.prototype.setFromString = function(a) {
      a = "#" == a.charAt(0) ? a.substr(1) : a;
      this.r = parseInt(a.substr(0, 2), 16) / 255;
      this.g = parseInt(a.substr(2, 2), 16) / 255;
      this.b = parseInt(a.substr(4, 2), 16) / 255;
      this.a = (8 != a.length ? 255 : parseInt(a.substr(6, 2), 16)) / 255;
      return this;
    };
    a.prototype.add = function(a, c, d, h) {
      this.r += a;
      this.g += c;
      this.b += d;
      this.a += h;
      this.clamp();
      return this;
    };
    a.prototype.clamp = function() {
      0 > this.r ? this.r = 0 : 1 < this.r && (this.r = 1);
      0 > this.g ? this.g = 0 : 1 < this.g && (this.g = 1);
      0 > this.b ? this.b = 0 : 1 < this.b && (this.b = 1);
      0 > this.a ? this.a = 0 : 1 < this.a && (this.a = 1);
      return this;
    };
    a.WHITE = new a(1, 1, 1, 1);
    a.RED = new a(1, 0, 0, 1);
    a.GREEN = new a(0, 1, 0, 1);
    a.BLUE = new a(0, 0, 1, 1);
    a.MAGENTA = new a(1, 0, 1, 1);
    return a;
  }();
  a.Color = c;
  c = function() {
    function a() {
    }
    a.clamp = function(a, c, d) {
      return a < c ? c : a > d ? d : a;
    };
    a.cosDeg = function(b) {
      return Math.cos(b * a.degRad);
    };
    a.sinDeg = function(b) {
      return Math.sin(b * a.degRad);
    };
    a.signum = function(a) {
      return 0 < a ? 1 : 0 > a ? -1 : 0;
    };
    a.toInt = function(a) {
      return 0 < a ? Math.floor(a) : Math.ceil(a);
    };
    a.cbrt = function(a) {
      var b = Math.pow(Math.abs(a), 1 / 3);
      return 0 > a ? -b : b;
    };
    a.randomTriangular = function(b, c) {
      return a.randomTriangularWith(b, c, .5 * (b + c));
    };
    a.randomTriangularWith = function(a, c, d) {
      var b = Math.random(), f = c - a;
      return b <= (d - a) / f ? a + Math.sqrt(b * f * (d - a)) : c - Math.sqrt((1 - b) * f * (c - d));
    };
    a.PI = 3.1415927;
    a.PI2 = 2 * a.PI;
    a.radiansToDegrees = 180 / a.PI;
    a.radDeg = a.radiansToDegrees;
    a.degreesToRadians = a.PI / 180;
    a.degRad = a.degreesToRadians;
    return a;
  }();
  a.MathUtils = c;
  c = function() {
    function a() {
    }
    a.prototype.apply = function(a, c, d) {
      return a + (c - a) * this.applyInternal(d);
    };
    return a;
  }();
  a.Interpolation = c;
  c = function(a) {
    function b(b) {
      a.call(this);
      this.power = 2;
      this.power = b;
    }
    __extends(b, a);
    b.prototype.applyInternal = function(a) {
      return .5 >= a ? Math.pow(2 * a, this.power) / 2 : Math.pow(2 * (a - 1), this.power) / (0 == this.power % 2 ? -2 : 2) + 1;
    };
    return b;
  }(c);
  a.Pow = c;
  c = function(a) {
    function b(b) {
      a.call(this, b);
    }
    __extends(b, a);
    b.prototype.applyInternal = function(a) {
      return Math.pow(a - 1, this.power) * (0 == this.power % 2 ? -1 : 1) + 1;
    };
    return b;
  }(c);
  a.PowOut = c;
  c = function() {
    function a() {
    }
    a.arrayCopy = function(a, c, d, h, k) {
      for (var b = c; b < c + k; b++, h++) {
        d[h] = a[b];
      }
    };
    a.setArraySize = function(a, c, d) {
      void 0 === d && (d = 0);
      var b = a.length;
      if (b == c) {
        return a;
      }
      a.length = c;
      if (b < c) {
        for (; b < c; b++) {
          a[b] = d;
        }
      }
      return a;
    };
    a.ensureArrayCapacity = function(b, c, d) {
      void 0 === d && (d = 0);
      return b.length >= c ? b : a.setArraySize(b, c, d);
    };
    a.newArray = function(a, c) {
      for (var b = Array(a), f = 0; f < a; f++) {
        b[f] = c;
      }
      return b;
    };
    a.newFloatArray = function(b) {
      if (a.SUPPORTS_TYPED_ARRAYS) {
        return new Float32Array(b);
      }
      b = Array(b);
      for (var c = 0; c < b.length; c++) {
        b[c] = 0;
      }
      return b;
    };
    a.newShortArray = function(b) {
      if (a.SUPPORTS_TYPED_ARRAYS) {
        return new Int16Array(b);
      }
      b = Array(b);
      for (var c = 0; c < b.length; c++) {
        b[c] = 0;
      }
      return b;
    };
    a.toFloatArray = function(b) {
      return a.SUPPORTS_TYPED_ARRAYS ? new Float32Array(b) : b;
    };
    a.toSinglePrecision = function(b) {
      return a.SUPPORTS_TYPED_ARRAYS ? Math.fround(b) : b;
    };
    a.SUPPORTS_TYPED_ARRAYS = "undefined" !== typeof Float32Array;
    return a;
  }();
  a.Utils = c;
  c = function() {
    function a() {
    }
    a.logBones = function(a) {
      for (var b = 0; b < a.bones.length; b++) {
        var c = a.bones[b];
        console.log(c.data.name + ", " + c.a + ", " + c.b + ", " + c.c + ", " + c.d + ", " + c.worldX + ", " + c.worldY);
      }
    };
    return a;
  }();
  a.DebugUtils = c;
  c = function() {
    function a(a) {
      this.items = [];
      this.instantiator = a;
    }
    a.prototype.obtain = function() {
      return 0 < this.items.length ? this.items.pop() : this.instantiator();
    };
    a.prototype.free = function(a) {
      a.reset && a.reset();
      this.items.push(a);
    };
    a.prototype.freeAll = function(a) {
      for (var b = 0; b < a.length; b++) {
        a[b].reset && a[b].reset(), this.items[b] = a[b];
      }
    };
    a.prototype.clear = function() {
      this.items.length = 0;
    };
    return a;
  }();
  a.Pool = c;
  c = function() {
    function a(a, c) {
      void 0 === a && (a = 0);
      void 0 === c && (c = 0);
      this.x = a;
      this.y = c;
    }
    a.prototype.set = function(a, c) {
      this.x = a;
      this.y = c;
      return this;
    };
    a.prototype.length = function() {
      var a = this.x, c = this.y;
      return Math.sqrt(a * a + c * c);
    };
    a.prototype.normalize = function() {
      var a = this.length();
      0 != a && (this.x /= a, this.y /= a);
      return this;
    };
    return a;
  }();
  a.Vector2 = c;
  c = function() {
    function a() {
      this.maxDelta = .064;
      this.totalTime = this.delta = this.framesPerSecond = 0;
      this.lastTime = Date.now() / 1E3;
      this.frameTime = this.frameCount = 0;
    }
    a.prototype.update = function() {
      var a = Date.now() / 1E3;
      this.delta = a - this.lastTime;
      this.frameTime += this.delta;
      this.totalTime += this.delta;
      this.delta > this.maxDelta && (this.delta = this.maxDelta);
      this.lastTime = a;
      this.frameCount++;
      1 < this.frameTime && (this.framesPerSecond = this.frameCount / this.frameTime, this.frameCount = this.frameTime = 0);
    };
    return a;
  }();
  a.TimeKeeper = c;
  c = function() {
    function a(a) {
      void 0 === a && (a = 32);
      this.mean = this.lastValue = this.addedValues = 0;
      this.dirty = !0;
      this.values = Array(a);
    }
    a.prototype.hasEnoughData = function() {
      return this.addedValues >= this.values.length;
    };
    a.prototype.addValue = function(a) {
      this.addedValues < this.values.length && this.addedValues++;
      this.values[this.lastValue++] = a;
      this.lastValue > this.values.length - 1 && (this.lastValue = 0);
      this.dirty = !0;
    };
    a.prototype.getMean = function() {
      if (this.hasEnoughData()) {
        if (this.dirty) {
          for (var a = 0, c = 0; c < this.values.length; c++) {
            a += this.values[c];
          }
          this.mean = a / this.values.length;
          this.dirty = !1;
        }
        return this.mean;
      }
      return 0;
    };
    return a;
  }();
  a.WindowedMean = c;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    function c(a, c) {
      this.jitterY = this.jitterX = 0;
      this.jitterX = a;
      this.jitterY = c;
    }
    c.prototype.begin = function(a) {
    };
    c.prototype.transform = function(b, c, d, h) {
      b.x += a.MathUtils.randomTriangular(-this.jitterX, this.jitterY);
      b.y += a.MathUtils.randomTriangular(-this.jitterX, this.jitterY);
    };
    c.prototype.end = function() {
    };
    return c;
  }();
  a.JitterEffect = c;
})(spine || (spine = {}));
(function(a) {
  var c = function() {
    function c(a) {
      this.worldY = this.worldX = this.angle = this.radius = this.centerY = this.centerX = 0;
      this.radius = a;
    }
    c.prototype.begin = function(a) {
      this.worldX = a.x + this.centerX;
      this.worldY = a.y + this.centerY;
    };
    c.prototype.transform = function(b, f, d, h) {
      h = this.angle * a.MathUtils.degreesToRadians;
      f = b.x - this.worldX;
      d = b.y - this.worldY;
      var k = Math.sqrt(f * f + d * d);
      k < this.radius && (k = c.interpolation.apply(0, h, (this.radius - k) / this.radius), h = Math.cos(k), k = Math.sin(k), b.x = h * f - k * d + this.worldX, b.y = k * f + h * d + this.worldY);
    };
    c.prototype.end = function() {
    };
    c.interpolation = new a.PowOut(2);
    return c;
  }();
  a.SwirlEffect = c;
})(spine || (spine = {}));
(function(a) {
  (function(c) {
    var k = function(a) {
      function b(b) {
        void 0 === b && (b = "");
        a.call(this, function(a) {
          return new c.ThreeJsTexture(a);
        }, b);
      }
      __extends(b, a);
      return b;
    }(a.AssetManager);
    c.AssetManager = k;
  })(a.threejs || (a.threejs = {}));
})(spine || (spine = {}));
(function(a) {
  (function(a) {
    var c = function() {
      function a(b, c) {
        void 0 === c && (c = 10920);
        this.indicesLength = this.verticesLength = 0;
        if (10920 < c) {
          throw Error("Can't have more than 10920 triangles per batch: " + c);
        }
        var d = this.vertices = new Float32Array(c * a.VERTEX_SIZE);
        c = this.indices = new Uint16Array(3 * c);
        this.mesh = b;
        var f = new THREE.BufferGeometry;
        d = this.vertexBuffer = new THREE.InterleavedBuffer(d, a.VERTEX_SIZE);
        d.dynamic = !0;
        f.addAttribute("position", new THREE.InterleavedBufferAttribute(d, 3, 0, !1));
        f.addAttribute("color", new THREE.InterleavedBufferAttribute(d, 4, 3, !1));
        f.addAttribute("uv", new THREE.InterleavedBufferAttribute(d, 2, 7, !1));
        f.setIndex(new THREE.BufferAttribute(c, 1));
        f.getIndex().dynamic = !0;
        f.drawRange.start = 0;
        f.drawRange.count = 0;
        b.geometry = f;
      }
      a.prototype.begin = function() {
        this.indicesLength = this.verticesLength = 0;
      };
      a.prototype.batch = function(b, c, h, k, q) {
        void 0 === q && (q = 0);
        for (var d = this.verticesLength / a.VERTEX_SIZE, f = this.vertices, e = this.verticesLength, l = 0; l < c;) {
          f[e++] = b[l++], f[e++] = b[l++], f[e++] = q, f[e++] = b[l++], f[e++] = b[l++], f[e++] = b[l++], f[e++] = b[l++], f[e++] = b[l++], f[e++] = b[l++];
        }
        this.verticesLength = e;
        b = this.indices;
        e = this.indicesLength;
        for (l = 0; l < k; e++, l++) {
          b[e] = h[l] + d;
        }
        this.indicesLength += k;
      };
      a.prototype.end = function() {
        this.vertexBuffer.needsUpdate = !0;
        this.vertexBuffer.updateRange.offset = 0;
        this.vertexBuffer.updateRange.count = this.verticesLength;
        var a = this.mesh.geometry;
        a.getIndex().needsUpdate = !0;
        a.getIndex().updateRange.offset = 0;
        a.getIndex().updateRange.count = this.indicesLength;
        a.drawRange.start = 0;
        a.drawRange.count = this.indicesLength;
      };
      a.VERTEX_SIZE = 9;
      return a;
    }();
    a.MeshBatcher = c;
  })(a.threejs || (a.threejs = {}));
})(spine || (spine = {}));
(function(a) {
  (function(c) {
    var k = function(b) {
      function f(d) {
        b.call(this);
        this.tempPos = new a.Vector2;
        this.tempUv = new a.Vector2;
        this.tempLight = new a.Color;
        this.tempDark = new a.Color;
        this.zOffset = .1;
        this.clipper = new a.SkeletonClipping;
        this.vertices = a.Utils.newFloatArray(1024);
        this.tempColor = new a.Color;
        this.skeleton = new a.Skeleton(d);
        d = new a.AnimationStateData(d);
        this.state = new a.AnimationState(d);
        d = this.material = new THREE.MeshBasicMaterial;
        d.side = THREE.DoubleSide;
        d.transparent = !0;
        d.alphaTest = .5;
        this.batcher = new c.MeshBatcher(this);
      }
      __extends(f, b);
      f.prototype.update = function(a) {
        var b = this.state, c = this.skeleton;
        b.update(a);
        b.apply(c);
        c.updateWorldTransform();
        this.updateGeometry();
      };
      f.prototype.updateGeometry = function() {
        var b = this.tempPos, c = this.tempUv, k = this.tempLight, q = this.tempDark, m = this.clipper, t = this.skeleton.drawOrder, e = this.batcher;
        e.begin();
        for (var l = 0, u = this.zOffset, w = 0, y = t.length; w < y; w++) {
          var x = m.isClipping() ? 2 : f.VERTEX_SIZE, p = t[w];
          var v = p.getAttachment();
          if (v instanceof a.RegionAttachment) {
            var z = v;
            var C = z.color;
            v = this.vertices;
            var A = 4 * x;
            z.computeWorldVertices(p.bone, v, 0, x);
            var D = f.QUAD_TRIANGLES;
            var E = z.uvs;
            z = z.region.renderObject.texture;
          } else {
            if (v instanceof a.MeshAttachment) {
              z = v, C = z.color, v = this.vertices, A = (z.worldVerticesLength >> 1) * x, A > v.length && (v = this.vertices = a.Utils.newFloatArray(A)), z.computeWorldVertices(p, 0, z.worldVerticesLength, v, 0, x), D = z.triangles, E = z.uvs, z = z.region.renderObject.texture;
            } else {
              v instanceof a.ClippingAttachment && m.clipStart(p, v);
              continue;
            }
          }
          if (null != z) {
            if (!this.material.map) {
              var B = this.material;
              B.map = z.texture;
              B.needsUpdate = !0;
            }
            z = p.bone.skeleton.color;
            B = p.color;
            p = this.tempColor;
            p.set(z.r * B.r * C.r, z.g * B.g * C.g, z.b * B.b * C.b, z.a * B.a * C.a);
            if (m.isClipping()) {
              m.clipTriangles(v, A, D, D.length, E, p, null, !1);
              v = m.clippedVertices;
              D = m.clippedTriangles;
              if (null != this.vertexEffect) {
                for (B = this.vertexEffect, C = v, z = 0, E = v.length; z < E; z += x) {
                  b.x = C[z], b.y = C[z + 1], k.setFromColor(p), q.set(0, 0, 0, 0), c.x = C[z + 6], c.y = C[z + 7], B.transform(b, c, k, q), C[z] = b.x, C[z + 1] = b.y, C[z + 2] = k.r, C[z + 3] = k.g, C[z + 4] = k.b, C[z + 5] = k.a, C[z + 6] = c.x, C[z + 7] = c.y;
                }
              }
              e.batch(v, v.length, D, D.length, l);
            } else {
              C = v;
              if (null != this.vertexEffect) {
                B = this.vertexEffect;
                for (var G = z = 0, H = A; z < H; z += x, G += 2) {
                  b.x = C[z], b.y = C[z + 1], k.setFromColor(p), q.set(0, 0, 0, 0), c.x = E[G], c.y = E[G + 1], B.transform(b, c, k, q), C[z] = b.x, C[z + 1] = b.y, C[z + 2] = k.r, C[z + 3] = k.g, C[z + 4] = k.b, C[z + 5] = k.a, C[z + 6] = c.x, C[z + 7] = c.y;
                }
              } else {
                for (z = 2, G = 0, B = A; z < B; z += x, G += 2) {
                  C[z] = p.r, C[z + 1] = p.g, C[z + 2] = p.b, C[z + 3] = p.a, C[z + 4] = E[G], C[z + 5] = E[G + 1];
                }
              }
              e.batch(v, A, D, D.length, l);
            }
            l += u;
          }
        }
        e.end();
      };
      f.QUAD_TRIANGLES = [0, 1, 2, 2, 3, 0];
      f.VERTEX_SIZE = 8;
      return f;
    }(THREE.Mesh);
    c.SkeletonMesh = k;
  })(a.threejs || (a.threejs = {}));
})(spine || (spine = {}));
(function(a) {
  (function(c) {
    var k = function(b) {
      function c(a) {
        b.call(this, a);
        this.texture = new THREE.Texture(a);
        this.texture.flipY = !1;
        this.texture.needsUpdate = !0;
      }
      __extends(c, b);
      c.prototype.setFilters = function(a, b) {
        this.texture.minFilter = c.toThreeJsTextureFilter(a);
        this.texture.magFilter = c.toThreeJsTextureFilter(b);
      };
      c.prototype.setWraps = function(a, b) {
        this.texture.wrapS = c.toThreeJsTextureWrap(a);
        this.texture.wrapT = c.toThreeJsTextureWrap(b);
      };
      c.prototype.dispose = function() {
        this.texture.dispose();
      };
      c.toThreeJsTextureFilter = function(b) {
        if (b === a.TextureFilter.Linear) {
          return THREE.LinearFilter;
        }
        if (b === a.TextureFilter.MipMap) {
          return THREE.LinearMipMapLinearFilter;
        }
        if (b === a.TextureFilter.MipMapLinearNearest) {
          return THREE.LinearMipMapNearestFilter;
        }
        if (b === a.TextureFilter.MipMapNearestLinear) {
          return THREE.NearestMipMapLinearFilter;
        }
        if (b === a.TextureFilter.MipMapNearestNearest) {
          return THREE.NearestMipMapNearestFilter;
        }
        if (b === a.TextureFilter.Nearest) {
          return THREE.NearestFilter;
        }
        throw Error("Unknown texture filter: " + b);
      };
      c.toThreeJsTextureWrap = function(b) {
        if (b === a.TextureWrap.ClampToEdge) {
          return THREE.ClampToEdgeWrapping;
        }
        if (b === a.TextureWrap.MirroredRepeat) {
          return THREE.MirroredRepeatWrapping;
        }
        if (b === a.TextureWrap.Repeat) {
          return THREE.RepeatWrapping;
        }
        throw Error("Unknown texture wrap: " + b);
      };
      return c;
    }(a.Texture);
    c.ThreeJsTexture = k;
  })(a.threejs || (a.threejs = {}));
})(spine || (spine = {}));
(function(a) {
  "object" === typeof exports && "undefined" !== typeof module ? module.exports = a() : "function" === typeof define && define.amd ? define([], a) : ("undefined" !== typeof window ? window : "undefined" !== typeof global ? global : "undefined" !== typeof self ? self : this).opentype = a();
})(function() {
  return function f(c, k, b) {
    function d(n, m) {
      if (!k[n]) {
        if (!c[n]) {
          var q = "function" == typeof require && require;
          if (!m && q) {
            return q(n, !0);
          }
          if (h) {
            return h(n, !0);
          }
          m = Error("Cannot find module '" + n + "'");
          throw m.code = "MODULE_NOT_FOUND", m;
        }
        m = k[n] = {exports:{}};
        c[n][0].call(m.exports, function(b) {
          var e = c[n][1][b];
          return d(e ? e : b);
        }, m, m.exports, f, c, k, b);
      }
      return k[n].exports;
    }
    for (var h = "function" == typeof require && require, n = 0; n < b.length; n++) {
      d(b[n]);
    }
    return d;
  }({1:[function(c, k, b) {
    function f() {
      this.table = new Uint16Array(16);
      this.trans = new Uint16Array(288);
    }
    function d(b, c) {
      this.source = b;
      this.bitcount = this.tag = this.sourceIndex = 0;
      this.dest = c;
      this.destLen = 0;
      this.ltree = new f;
      this.dtree = new f;
    }
    function h(b, c, e, d) {
      var f;
      for (f = 0; e > f; ++f) {
        b[f] = 0;
      }
      for (f = 0; 30 - e > f; ++f) {
        b[f + e] = f / e | 0;
      }
      e = d;
      for (f = 0; 30 > f; ++f) {
        c[f] = e, e += 1 << b[f];
      }
    }
    function n(b, c, e, d) {
      var f, h;
      for (f = 0; 16 > f; ++f) {
        b.table[f] = 0;
      }
      for (f = 0; d > f; ++f) {
        b.table[c[e + f]]++;
      }
      for (f = h = b.table[0] = 0; 16 > f; ++f) {
        A[f] = h, h += b.table[f];
      }
      for (f = 0; d > f; ++f) {
        c[e + f] && (b.trans[A[c[e + f]]++] = f);
      }
    }
    function q(b, c, e) {
      if (!c) {
        return e;
      }
      for (; 24 > b.bitcount;) {
        b.tag |= b.source[b.sourceIndex++] << b.bitcount, b.bitcount += 8;
      }
      var d = b.tag & 65535 >>> 16 - c;
      return b.tag >>>= c, b.bitcount -= c, d + e;
    }
    function m(b, c) {
      for (; 24 > b.bitcount;) {
        b.tag |= b.source[b.sourceIndex++] << b.bitcount, b.bitcount += 8;
      }
      var e = 0, d = 0, f = 0, h = b.tag;
      do {
        d = 2 * d + (1 & h), h >>>= 1, ++f, e += c.table[f], d -= c.table[f];
      } while (0 <= d);
      return b.tag = h, b.bitcount -= f, c.trans[e + d];
    }
    function t(b, c, d) {
      for (;;) {
        var f = m(b, c);
        if (256 === f) {
          return e;
        }
        if (256 > f) {
          b.dest[b.destLen++] = f;
        } else {
          var h;
          f -= 257;
          f = q(b, w[f], y[f]);
          var k = m(b, d);
          for (h = k = b.destLen - q(b, x[k], p[k]); k + f > h; ++h) {
            b.dest[b.destLen++] = b.dest[h];
          }
        }
      }
    }
    var e = 0, l = new f, u = new f, w = new Uint8Array(30), y = new Uint16Array(30), x = new Uint8Array(30), p = new Uint16Array(30), v = new Uint8Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]), z = new f, C = new Uint8Array(320), A = new Uint16Array(16);
    (function(b, c) {
      var e;
      for (e = 0; 7 > e; ++e) {
        b.table[e] = 0;
      }
      b.table[7] = 24;
      b.table[8] = 152;
      b.table[9] = 112;
      for (e = 0; 24 > e; ++e) {
        b.trans[e] = 256 + e;
      }
      for (e = 0; 144 > e; ++e) {
        b.trans[24 + e] = e;
      }
      for (e = 0; 8 > e; ++e) {
        b.trans[168 + e] = 280 + e;
      }
      for (e = 0; 112 > e; ++e) {
        b.trans[176 + e] = 144 + e;
      }
      for (e = 0; 5 > e; ++e) {
        c.table[e] = 0;
      }
      c.table[5] = 32;
      for (e = 0; 32 > e; ++e) {
        c.trans[e] = e;
      }
    })(l, u);
    h(w, y, 4, 3);
    h(x, p, 2, 1);
    w[28] = 0;
    y[28] = 258;
    k.exports = function(b, c) {
      b = new d(b, c);
      do {
        c = b;
        c.bitcount-- || (c.tag = c.source[c.sourceIndex++], c.bitcount = 7);
        var f = 1 & c.tag;
        switch(c = (c.tag >>>= 1, f), q(b, 2, 0)) {
          case 0:
            var h, k = h = void 0;
            for (f = b; 8 < f.bitcount;) {
              f.sourceIndex--, f.bitcount -= 8;
            }
            if (k = f.source[f.sourceIndex + 1], k = 256 * k + f.source[f.sourceIndex], h = f.source[f.sourceIndex + 3], h = 256 * h + f.source[f.sourceIndex + 2], k !== (65535 & ~h)) {
              f = -3;
            } else {
              f.sourceIndex += 4;
              for (h = k; h; --h) {
                f.dest[f.destLen++] = f.source[f.sourceIndex++];
              }
              f = (f.bitcount = 0, e);
            }
            break;
          case 1:
            f = t(b, l, u);
            break;
          case 2:
            var p;
            k = b;
            var w = b.ltree, y = b.dtree;
            h = q(k, 5, 257);
            f = q(k, 5, 1);
            var x = q(k, 4, 4);
            for (p = 0; 19 > p; ++p) {
              C[p] = 0;
            }
            for (p = 0; x > p; ++p) {
              var A = q(k, 3, 0);
              C[v[p]] = A;
            }
            n(z, C, 0, 19);
            for (p = 0; h + f > p;) {
              switch(x = m(k, z), x) {
                case 16:
                  A = C[p - 1];
                  for (x = q(k, 2, 3); x; --x) {
                    C[p++] = A;
                  }
                  break;
                case 17:
                  for (x = q(k, 3, 3); x; --x) {
                    C[p++] = 0;
                  }
                  break;
                case 18:
                  for (x = q(k, 7, 11); x; --x) {
                    C[p++] = 0;
                  }
                  break;
                default:
                  C[p++] = x;
              }
            }
            n(w, C, 0, h);
            n(y, C, h, f);
            f = t(b, b.ltree, b.dtree);
            break;
          default:
            f = -3;
        }
        if (f !== e) {
          throw Error("Data error");
        }
      } while (!c);
      return b.destLen < b.dest.length ? "function" == typeof b.dest.slice ? b.dest.slice(0, b.destLen) : b.dest.subarray(0, b.destLen) : b.dest;
    };
  }, {}], 2:[function(c, k, b) {
    b.fail = function(b) {
      throw Error(b);
    };
    b.argument = function(c, d) {
      c || b.fail(d);
    };
    b.assert = b.argument;
  }, {}], 3:[function(c, k, b) {
    b.line = function(b, c, h, k, q) {
      b.beginPath();
      b.moveTo(c, h);
      b.lineTo(k, q);
      b.stroke();
    };
  }, {}], 4:[function(c, k, b) {
    function f(b) {
      this.font = b;
    }
    function d(b) {
      this.cmap = b;
    }
    function h(b, c) {
      this.encoding = b;
      this.charset = c;
    }
    function n(c) {
      var d;
      switch(c.version) {
        case 1:
          this.names = b.standardNames.slice();
          break;
        case 2:
          this.names = Array(c.numberOfGlyphs);
          for (d = 0; d < c.numberOfGlyphs; d++) {
            this.names[d] = c.glyphNameIndex[d] < b.standardNames.length ? b.standardNames[c.glyphNameIndex[d]] : c.names[c.glyphNameIndex[d] - b.standardNames.length];
          }
          break;
        case 2.5:
          this.names = Array(c.numberOfGlyphs);
          for (d = 0; d < c.numberOfGlyphs; d++) {
            this.names[d] = b.standardNames[d + c.glyphNameIndex[d]];
          }
          break;
        case 3:
          this.names = [];
      }
    }
    f.prototype.charToGlyphIndex = function(b) {
      b = b.charCodeAt(0);
      var c = this.font.glyphs;
      if (!c) {
        return null;
      }
      for (var d = 0; d < c.length; d += 1) {
        for (var e = c.get(d), f = 0; f < e.unicodes.length; f += 1) {
          if (e.unicodes[f] === b) {
            return d;
          }
        }
      }
    };
    d.prototype.charToGlyphIndex = function(b) {
      return this.cmap.glyphIndexMap[b.charCodeAt(0)] || 0;
    };
    h.prototype.charToGlyphIndex = function(b) {
      b = b.charCodeAt(0);
      return this.charset.indexOf(this.encoding[b]);
    };
    n.prototype.nameToGlyphIndex = function(b) {
      return this.names.indexOf(b);
    };
    n.prototype.glyphIndexToName = function(b) {
      return this.names[b];
    };
    b.cffStandardStrings = ".notdef;space;exclam;quotedbl;numbersign;dollar;percent;ampersand;quoteright;parenleft;parenright;asterisk;plus;comma;hyphen;period;slash;zero;one;two;three;four;five;six;seven;eight;nine;colon;semicolon;less;equal;greater;question;at;A;B;C;D;E;F;G;H;I;J;K;L;M;N;O;P;Q;R;S;T;U;V;W;X;Y;Z;bracketleft;backslash;bracketright;asciicircum;underscore;quoteleft;a;b;c;d;e;f;g;h;i;j;k;l;m;n;o;p;q;r;s;t;u;v;w;x;y;z;braceleft;bar;braceright;asciitilde;exclamdown;cent;sterling;fraction;yen;florin;section;currency;quotesingle;quotedblleft;guillemotleft;guilsinglleft;guilsinglright;fi;fl;endash;dagger;daggerdbl;periodcentered;paragraph;bullet;quotesinglbase;quotedblbase;quotedblright;guillemotright;ellipsis;perthousand;questiondown;grave;acute;circumflex;tilde;macron;breve;dotaccent;dieresis;ring;cedilla;hungarumlaut;ogonek;caron;emdash;AE;ordfeminine;Lslash;Oslash;OE;ordmasculine;ae;dotlessi;lslash;oslash;oe;germandbls;onesuperior;logicalnot;mu;trademark;Eth;onehalf;plusminus;Thorn;onequarter;divide;brokenbar;degree;thorn;threequarters;twosuperior;registered;minus;eth;multiply;threesuperior;copyright;Aacute;Acircumflex;Adieresis;Agrave;Aring;Atilde;Ccedilla;Eacute;Ecircumflex;Edieresis;Egrave;Iacute;Icircumflex;Idieresis;Igrave;Ntilde;Oacute;Ocircumflex;Odieresis;Ograve;Otilde;Scaron;Uacute;Ucircumflex;Udieresis;Ugrave;Yacute;Ydieresis;Zcaron;aacute;acircumflex;adieresis;agrave;aring;atilde;ccedilla;eacute;ecircumflex;edieresis;egrave;iacute;icircumflex;idieresis;igrave;ntilde;oacute;ocircumflex;odieresis;ograve;otilde;scaron;uacute;ucircumflex;udieresis;ugrave;yacute;ydieresis;zcaron;exclamsmall;Hungarumlautsmall;dollaroldstyle;dollarsuperior;ampersandsmall;Acutesmall;parenleftsuperior;parenrightsuperior;266 ff;onedotenleader;zerooldstyle;oneoldstyle;twooldstyle;threeoldstyle;fouroldstyle;fiveoldstyle;sixoldstyle;sevenoldstyle;eightoldstyle;nineoldstyle;commasuperior;threequartersemdash;periodsuperior;questionsmall;asuperior;bsuperior;centsuperior;dsuperior;esuperior;isuperior;lsuperior;msuperior;nsuperior;osuperior;rsuperior;ssuperior;tsuperior;ff;ffi;ffl;parenleftinferior;parenrightinferior;Circumflexsmall;hyphensuperior;Gravesmall;Asmall;Bsmall;Csmall;Dsmall;Esmall;Fsmall;Gsmall;Hsmall;Ismall;Jsmall;Ksmall;Lsmall;Msmall;Nsmall;Osmall;Psmall;Qsmall;Rsmall;Ssmall;Tsmall;Usmall;Vsmall;Wsmall;Xsmall;Ysmall;Zsmall;colonmonetary;onefitted;rupiah;Tildesmall;exclamdownsmall;centoldstyle;Lslashsmall;Scaronsmall;Zcaronsmall;Dieresissmall;Brevesmall;Caronsmall;Dotaccentsmall;Macronsmall;figuredash;hypheninferior;Ogoneksmall;Ringsmall;Cedillasmall;questiondownsmall;oneeighth;threeeighths;fiveeighths;seveneighths;onethird;twothirds;zerosuperior;foursuperior;fivesuperior;sixsuperior;sevensuperior;eightsuperior;ninesuperior;zeroinferior;oneinferior;twoinferior;threeinferior;fourinferior;fiveinferior;sixinferior;seveninferior;eightinferior;nineinferior;centinferior;dollarinferior;periodinferior;commainferior;Agravesmall;Aacutesmall;Acircumflexsmall;Atildesmall;Adieresissmall;Aringsmall;AEsmall;Ccedillasmall;Egravesmall;Eacutesmall;Ecircumflexsmall;Edieresissmall;Igravesmall;Iacutesmall;Icircumflexsmall;Idieresissmall;Ethsmall;Ntildesmall;Ogravesmall;Oacutesmall;Ocircumflexsmall;Otildesmall;Odieresissmall;OEsmall;Oslashsmall;Ugravesmall;Uacutesmall;Ucircumflexsmall;Udieresissmall;Yacutesmall;Thornsmall;Ydieresissmall;001.000;001.001;001.002;001.003;Black;Bold;Book;Light;Medium;Regular;Roman;Semibold".split(";");
    b.cffStandardEncoding = "                                space exclam quotedbl numbersign dollar percent ampersand quoteright parenleft parenright asterisk plus comma hyphen period slash zero one two three four five six seven eight nine colon semicolon less equal greater question at A B C D E F G H I J K L M N O P Q R S T U V W X Y Z bracketleft backslash bracketright asciicircum underscore quoteleft a b c d e f g h i j k l m n o p q r s t u v w x y z braceleft bar braceright asciitilde                                   exclamdown cent sterling fraction yen florin section currency quotesingle quotedblleft guillemotleft guilsinglleft guilsinglright fi fl  endash dagger daggerdbl periodcentered  paragraph bullet quotesinglbase quotedblbase quotedblright guillemotright ellipsis perthousand  questiondown  grave acute circumflex tilde macron breve dotaccent dieresis  ring cedilla  hungarumlaut ogonek caron emdash                 AE  ordfeminine     Lslash Oslash OE ordmasculine      ae    dotlessi   lslash oslash oe germandbls".split(" ");
    b.cffExpertEncoding = "                                space exclamsmall Hungarumlautsmall  dollaroldstyle dollarsuperior ampersandsmall Acutesmall parenleftsuperior parenrightsuperior twodotenleader onedotenleader comma hyphen period fraction zerooldstyle oneoldstyle twooldstyle threeoldstyle fouroldstyle fiveoldstyle sixoldstyle sevenoldstyle eightoldstyle nineoldstyle colon semicolon commasuperior threequartersemdash periodsuperior questionsmall  asuperior bsuperior centsuperior dsuperior esuperior   isuperior   lsuperior msuperior nsuperior osuperior   rsuperior ssuperior tsuperior  ff fi fl ffi ffl parenleftinferior  parenrightinferior Circumflexsmall hyphensuperior Gravesmall Asmall Bsmall Csmall Dsmall Esmall Fsmall Gsmall Hsmall Ismall Jsmall Ksmall Lsmall Msmall Nsmall Osmall Psmall Qsmall Rsmall Ssmall Tsmall Usmall Vsmall Wsmall Xsmall Ysmall Zsmall colonmonetary onefitted rupiah Tildesmall                                   exclamdownsmall centoldstyle Lslashsmall   Scaronsmall Zcaronsmall Dieresissmall Brevesmall Caronsmall  Dotaccentsmall   Macronsmall   figuredash hypheninferior   Ogoneksmall Ringsmall Cedillasmall    onequarter onehalf threequarters questiondownsmall oneeighth threeeighths fiveeighths seveneighths onethird twothirds   zerosuperior onesuperior twosuperior threesuperior foursuperior fivesuperior sixsuperior sevensuperior eightsuperior ninesuperior zeroinferior oneinferior twoinferior threeinferior fourinferior fiveinferior sixinferior seveninferior eightinferior nineinferior centinferior dollarinferior periodinferior commainferior Agravesmall Aacutesmall Acircumflexsmall Atildesmall Adieresissmall Aringsmall AEsmall Ccedillasmall Egravesmall Eacutesmall Ecircumflexsmall Edieresissmall Igravesmall Iacutesmall Icircumflexsmall Idieresissmall Ethsmall Ntildesmall Ogravesmall Oacutesmall Ocircumflexsmall Otildesmall Odieresissmall OEsmall Oslashsmall Ugravesmall Uacutesmall Ucircumflexsmall Udieresissmall Yacutesmall Thornsmall Ydieresissmall".split(" ");
    b.standardNames = ".notdef .null nonmarkingreturn space exclam quotedbl numbersign dollar percent ampersand quotesingle parenleft parenright asterisk plus comma hyphen period slash zero one two three four five six seven eight nine colon semicolon less equal greater question at A B C D E F G H I J K L M N O P Q R S T U V W X Y Z bracketleft backslash bracketright asciicircum underscore grave a b c d e f g h i j k l m n o p q r s t u v w x y z braceleft bar braceright asciitilde Adieresis Aring Ccedilla Eacute Ntilde Odieresis Udieresis aacute agrave acircumflex adieresis atilde aring ccedilla eacute egrave ecircumflex edieresis iacute igrave icircumflex idieresis ntilde oacute ograve ocircumflex odieresis otilde uacute ugrave ucircumflex udieresis dagger degree cent sterling section bullet paragraph germandbls registered copyright trademark acute dieresis notequal AE Oslash infinity plusminus lessequal greaterequal yen mu partialdiff summation product pi integral ordfeminine ordmasculine Omega ae oslash questiondown exclamdown logicalnot radical florin approxequal Delta guillemotleft guillemotright ellipsis nonbreakingspace Agrave Atilde Otilde OE oe endash emdash quotedblleft quotedblright quoteleft quoteright divide lozenge ydieresis Ydieresis fraction currency guilsinglleft guilsinglright fi fl daggerdbl periodcentered quotesinglbase quotedblbase perthousand Acircumflex Ecircumflex Aacute Edieresis Egrave Iacute Icircumflex Idieresis Igrave Oacute Ocircumflex apple Ograve Uacute Ucircumflex Ugrave dotlessi circumflex tilde macron breve dotaccent ring cedilla hungarumlaut ogonek caron Lslash lslash Scaron scaron Zcaron zcaron brokenbar Eth eth Yacute yacute Thorn thorn minus multiply onesuperior twosuperior threesuperior onehalf onequarter threequarters franc Gbreve gbreve Idotaccent Scedilla scedilla Cacute cacute Ccaron ccaron dcroat".split(" ");
    b.DefaultEncoding = f;
    b.CmapEncoding = d;
    b.CffEncoding = h;
    b.GlyphNames = n;
    b.addGlyphNames = function(b) {
      for (var c, d = b.tables.cmap.glyphIndexMap, e = Object.keys(d), f = 0; f < e.length; f += 1) {
        var h = e[f];
        c = b.glyphs.get(d[h]);
        c.addUnicode(parseInt(h));
      }
      for (f = 0; f < b.glyphs.length; f += 1) {
        c = b.glyphs.get(f), b.cffEncoding ? c.name = b.cffEncoding.charset[f] : b.glyphNames.names && (c.name = b.glyphNames.glyphIndexToName(f));
      }
    };
  }, {}], 5:[function(c, k, b) {
    function f(b) {
      b = b || {};
      b.empty || (t.checkArgument(b.familyName, "When creating a new Font object, familyName is required."), t.checkArgument(b.styleName, "When creating a new Font object, styleName is required."), t.checkArgument(b.unitsPerEm, "When creating a new Font object, unitsPerEm is required."), t.checkArgument(b.ascender, "When creating a new Font object, ascender is required."), t.checkArgument(b.descender, "When creating a new Font object, descender is required."), t.checkArgument(0 > b.descender, "Descender should be negative (e.g. -512)."), 
      this.names = {fontFamily:{en:b.familyName || " "}, fontSubfamily:{en:b.styleName || " "}, fullName:{en:b.fullName || b.familyName + " " + b.styleName}, postScriptName:{en:b.postScriptName || b.familyName + b.styleName}, designer:{en:b.designer || " "}, designerURL:{en:b.designerURL || " "}, manufacturer:{en:b.manufacturer || " "}, manufacturerURL:{en:b.manufacturerURL || " "}, license:{en:b.license || " "}, licenseURL:{en:b.licenseURL || " "}, version:{en:b.version || "Version 0.1"}, description:{en:b.description || 
      " "}, copyright:{en:b.copyright || " "}, trademark:{en:b.trademark || " "}}, this.unitsPerEm = b.unitsPerEm || 1E3, this.ascender = b.ascender, this.descender = b.descender, this.createdTimestamp = b.createdTimestamp, this.tables = {os2:{usWeightClass:b.weightClass || this.usWeightClasses.MEDIUM, usWidthClass:b.widthClass || this.usWidthClasses.MEDIUM, fsSelection:b.fsSelection || this.fsSelectionValues.REGULAR}});
      this.supported = !0;
      this.glyphs = new q.GlyphSet(this, b.glyphs || []);
      this.encoding = new n.DefaultEncoding(this);
      this.substitution = new m(this);
      this.tables = this.tables || {};
    }
    var d = c("./path"), h = c("./tables/sfnt"), n = c("./encoding"), q = c("./glyphset"), m = c("./substitution"), t = c("./util");
    f.prototype.hasChar = function(b) {
      return null !== this.encoding.charToGlyphIndex(b);
    };
    f.prototype.charToGlyphIndex = function(b) {
      return this.encoding.charToGlyphIndex(b);
    };
    f.prototype.charToGlyph = function(b) {
      b = this.charToGlyphIndex(b);
      b = this.glyphs.get(b);
      return b || (b = this.glyphs.get(0)), b;
    };
    f.prototype.stringToGlyphs = function(b) {
      for (var c = [], e = 0; e < b.length; e += 1) {
        c.push(this.charToGlyph(b[e]));
      }
      return c;
    };
    f.prototype.nameToGlyphIndex = function(b) {
      return this.glyphNames.nameToGlyphIndex(b);
    };
    f.prototype.nameToGlyph = function(b) {
      b = this.nametoGlyphIndex(b);
      b = this.glyphs.get(b);
      return b || (b = this.glyphs.get(0)), b;
    };
    f.prototype.glyphIndexToName = function(b) {
      return this.glyphNames.glyphIndexToName ? this.glyphNames.glyphIndexToName(b) : "";
    };
    f.prototype.getKerningValue = function(b, c) {
      b = b.index || b;
      c = c.index || c;
      var e = this.getGposKerningValue;
      return e ? e(b, c) : this.kerningPairs[b + "," + c] || 0;
    };
    f.prototype.forEachGlyph = function(b, c, d, f, h, k) {
      c = void 0 !== c ? c : 0;
      d = void 0 !== d ? d : 0;
      f = void 0 !== f ? f : 72;
      h = h || {};
      var e = void 0 === h.kerning ? !0 : h.kerning, l = 1 / this.unitsPerEm * f;
      b = this.stringToGlyphs(b);
      for (var m = 0; m < b.length; m += 1) {
        var n = b[m];
        if (k(n, c, d, f, h), n.advanceWidth && (c += n.advanceWidth * l), e && m < b.length - 1) {
          n = this.getKerningValue(n, b[m + 1]), c += n * l;
        }
      }
    };
    f.prototype.getPath = function(b, c, f, h, k) {
      var e = new d.Path;
      return this.forEachGlyph(b, c, f, h, k, function(b, c, d, f) {
        b = b.getPath(c, d, f);
        e.extend(b);
      }), e;
    };
    f.prototype.getPaths = function(b, c, d, f, h) {
      var e = [];
      return this.forEachGlyph(b, c, d, f, h, function(b, c, d, f) {
        b = b.getPath(c, d, f);
        e.push(b);
      }), e;
    };
    f.prototype.draw = function(b, c, d, f, h, k) {
      this.getPath(c, d, f, h, k).draw(b);
    };
    f.prototype.drawPoints = function(b, c, d, f, h, k) {
      this.forEachGlyph(c, d, f, h, k, function(c, e, d, f) {
        c.drawPoints(b, e, d, f);
      });
    };
    f.prototype.drawMetrics = function(b, c, d, f, h, k) {
      this.forEachGlyph(c, d, f, h, k, function(c, e, d, f) {
        c.drawMetrics(b, e, d, f);
      });
    };
    f.prototype.getEnglishName = function(b) {
      return (b = this.names[b]) ? b.en : void 0;
    };
    f.prototype.validate = function() {
      function b(b) {
        var e = d.getEnglishName(b);
        e && 0 < e.trim().length || c.push("No English " + b + " specified.");
      }
      var c = [], d = this;
      b("fontFamily");
      b("weightName");
      b("manufacturer");
      b("copyright");
      b("version");
      0 < this.unitsPerEm || c.push("No unitsPerEm specified.");
    };
    f.prototype.toTables = function() {
      return h.fontToTable(this);
    };
    f.prototype.toBuffer = function() {
      return console.warn("Font.toBuffer is deprecated. Use Font.toArrayBuffer instead."), this.toArrayBuffer();
    };
    f.prototype.toArrayBuffer = function() {
      for (var b = this.toTables().encode(), c = new ArrayBuffer(b.length), d = new Uint8Array(c), f = 0; f < b.length; f++) {
        d[f] = b[f];
      }
      return c;
    };
    f.prototype.download = function() {
      var b = this.getEnglishName("fontFamily"), d = this.getEnglishName("fontSubfamily"), f = b.replace(/\s/g, "") + "-" + d + ".otf", h = this.toArrayBuffer();
      t.isBrowser() ? (window.requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem, window.requestFileSystem(window.TEMPORARY, h.byteLength, function(b) {
        b.root.getFile(f, {create:!0}, function(b) {
          b.createWriter(function(c) {
            var e = new DataView(h);
            e = new Blob([e], {type:"font/opentype"});
            c.write(e);
            c.addEventListener("writeend", function() {
              location.href = b.toURL();
            }, !1);
          });
        });
      }, function(b) {
        throw Error(b.name + ": " + b.message);
      })) : (b = c("fs"), d = t.arrayBufferToNodeBuffer(h), b.writeFileSync(f, d));
    };
    f.prototype.fsSelectionValues = {ITALIC:1, UNDERSCORE:2, NEGATIVE:4, OUTLINED:8, STRIKEOUT:16, BOLD:32, REGULAR:64, USER_TYPO_METRICS:128, WWS:256, OBLIQUE:512};
    f.prototype.usWidthClasses = {ULTRA_CONDENSED:1, EXTRA_CONDENSED:2, CONDENSED:3, SEMI_CONDENSED:4, MEDIUM:5, SEMI_EXPANDED:6, EXPANDED:7, EXTRA_EXPANDED:8, ULTRA_EXPANDED:9};
    f.prototype.usWeightClasses = {THIN:100, EXTRA_LIGHT:200, LIGHT:300, NORMAL:400, MEDIUM:500, SEMI_BOLD:600, BOLD:700, EXTRA_BOLD:800, BLACK:900};
    b.Font = f;
  }, {"./encoding":4, "./glyphset":7, "./path":11, "./substitution":12, "./tables/sfnt":31, "./util":33, fs:void 0}], 6:[function(c, k, b) {
    function f(b, c) {
      var e = c || {commands:[]};
      return {configurable:!0, get:function() {
        return "function" == typeof e && (e = e()), e;
      }, set:function(b) {
        e = b;
      }};
    }
    function d(b) {
      this.bindConstructorValues(b);
    }
    var h = c("./check"), n = c("./draw"), q = c("./path");
    d.prototype.bindConstructorValues = function(b) {
      this.index = b.index || 0;
      this.name = b.name || null;
      this.unicode = b.unicode || void 0;
      this.unicodes = b.unicodes || void 0 !== b.unicode ? [b.unicode] : [];
      b.xMin && (this.xMin = b.xMin);
      b.yMin && (this.yMin = b.yMin);
      b.xMax && (this.xMax = b.xMax);
      b.yMax && (this.yMax = b.yMax);
      b.advanceWidth && (this.advanceWidth = b.advanceWidth);
      Object.defineProperty(this, "path", f(this, b.path));
    };
    d.prototype.addUnicode = function(b) {
      0 === this.unicodes.length && (this.unicode = b);
      this.unicodes.push(b);
    };
    d.prototype.getPath = function(b, c, e, d) {
      b = void 0 !== b ? b : 0;
      c = void 0 !== c ? c : 0;
      d = void 0 !== d ? d : {xScale:1, yScale:1};
      var f = 1 / this.path.unitsPerEm * (void 0 !== e ? e : 72);
      e = d.xScale * f;
      d = d.yScale * f;
      f = new q.Path;
      for (var h = this.path.commands, k = 0; k < h.length; k += 1) {
        var l = h[k];
        "M" === l.type ? f.moveTo(b + l.x * e, c + -l.y * d) : "L" === l.type ? f.lineTo(b + l.x * e, c + -l.y * d) : "Q" === l.type ? f.quadraticCurveTo(b + l.x1 * e, c + -l.y1 * d, b + l.x * e, c + -l.y * d) : "C" === l.type ? f.curveTo(b + l.x1 * e, c + -l.y1 * d, b + l.x2 * e, c + -l.y2 * d, b + l.x * e, c + -l.y * d) : "Z" === l.type && f.closePath();
      }
      return f;
    };
    d.prototype.getContours = function() {
      if (void 0 === this.points) {
        return [];
      }
      for (var b = [], c = [], e = 0; e < this.points.length; e += 1) {
        var d = this.points[e];
        c.push(d);
        d.lastPointOfContour && (b.push(c), c = []);
      }
      return h.argument(0 === c.length, "There are still points left in the current contour."), b;
    };
    d.prototype.getMetrics = function() {
      for (var b = this.path.commands, c = [], d = [], f = 0; f < b.length; f += 1) {
        var h = b[f];
        "Z" !== h.type && (c.push(h.x), d.push(h.y));
        "Q" !== h.type && "C" !== h.type || (c.push(h.x1), d.push(h.y1));
        "C" === h.type && (c.push(h.x2), d.push(h.y2));
      }
      b = {xMin:Math.min.apply(null, c), yMin:Math.min.apply(null, d), xMax:Math.max.apply(null, c), yMax:Math.max.apply(null, d), leftSideBearing:this.leftSideBearing};
      return isFinite(b.xMin) || (b.xMin = 0), isFinite(b.xMax) || (b.xMax = this.advanceWidth), isFinite(b.yMin) || (b.yMin = 0), isFinite(b.yMax) || (b.yMax = 0), b.rightSideBearing = this.advanceWidth - b.leftSideBearing - (b.xMax - b.xMin), b;
    };
    d.prototype.draw = function(b, c, d, f, h) {
      this.getPath(c, d, f, h).draw(b);
    };
    d.prototype.drawPoints = function(b, c, d, f) {
      function e(c, d, e, f) {
        var h = 2 * Math.PI;
        b.beginPath();
        for (var k = 0; k < c.length; k += 1) {
          b.moveTo(d + c[k].x * f, e + c[k].y * f), b.arc(d + c[k].x * f, e + c[k].y * f, 2, 0, h, !1);
        }
        b.closePath();
        b.fill();
      }
      c = void 0 !== c ? c : 0;
      d = void 0 !== d ? d : 0;
      f = 1 / this.path.unitsPerEm * (void 0 !== f ? f : 24);
      for (var h = [], k = [], l = this.path, m = 0; m < l.commands.length; m += 1) {
        var n = l.commands[m];
        void 0 !== n.x && h.push({x:n.x, y:-n.y});
        void 0 !== n.x1 && k.push({x:n.x1, y:-n.y1});
        void 0 !== n.x2 && k.push({x:n.x2, y:-n.y2});
      }
      b.fillStyle = "blue";
      e(h, c, d, f);
      b.fillStyle = "red";
      e(k, c, d, f);
    };
    d.prototype.drawMetrics = function(b, c, d, f) {
      c = void 0 !== c ? c : 0;
      d = void 0 !== d ? d : 0;
      f = 1 / this.path.unitsPerEm * (void 0 !== f ? f : 24);
      b.lineWidth = 1;
      b.strokeStyle = "black";
      n.line(b, c, -1E4, c, 1E4);
      n.line(b, -1E4, d, 1E4, d);
      var e = this.xMin || 0, h = this.yMin || 0, k = this.xMax || 0, l = this.yMax || 0, m = this.advanceWidth || 0;
      b.strokeStyle = "blue";
      n.line(b, c + e * f, -1E4, c + e * f, 1E4);
      n.line(b, c + k * f, -1E4, c + k * f, 1E4);
      n.line(b, -1E4, d + -h * f, 1E4, d + -h * f);
      n.line(b, -1E4, d + -l * f, 1E4, d + -l * f);
      b.strokeStyle = "green";
      n.line(b, c + m * f, -1E4, c + m * f, 1E4);
    };
    b.Glyph = d;
  }, {"./check":2, "./draw":3, "./path":11}], 7:[function(c, k, b) {
    function f(b, c, d) {
      Object.defineProperty(b, c, {get:function() {
        return b.path, b[d];
      }, set:function(c) {
        b[d] = c;
      }, enumerable:!0, configurable:!0});
    }
    function d(b, c) {
      if (this.font = b, this.glyphs = {}, Array.isArray(c)) {
        for (b = 0; b < c.length; b++) {
          this.glyphs[b] = c[b];
        }
      }
      this.length = c && c.length || 0;
    }
    var h = c("./glyph");
    d.prototype.get = function(b) {
      return "function" == typeof this.glyphs[b] && (this.glyphs[b] = this.glyphs[b]()), this.glyphs[b];
    };
    d.prototype.push = function(b, c) {
      this.glyphs[b] = c;
      this.length++;
    };
    b.GlyphSet = d;
    b.glyphLoader = function(b, c) {
      return new h.Glyph({index:c, font:b});
    };
    b.ttfGlyphLoader = function(b, c, d, k, e, l) {
      return function() {
        var m = new h.Glyph({index:c, font:b});
        return m.path = function() {
          d(m, k, e);
          var c = l(b.glyphs, m);
          return c.unitsPerEm = b.unitsPerEm, c;
        }, f(m, "xMin", "_xMin"), f(m, "xMax", "_xMax"), f(m, "yMin", "_yMin"), f(m, "yMax", "_yMax"), m;
      };
    };
    b.cffGlyphLoader = function(b, c, d, f) {
      return function() {
        var e = new h.Glyph({index:c, font:b});
        return e.path = function() {
          var c = d(b, e, f);
          return c.unitsPerEm = b.unitsPerEm, c;
        }, e;
      };
    };
  }, {"./glyph":6}], 8:[function(c, k, b) {
    function f(b, c) {
      for (var d = 0, f = b.length - 1; f >= d;) {
        var h = d + f >>> 1, e = b[h].tag;
        if (e === c) {
          return h;
        }
        c > e ? d = h + 1 : f = h - 1;
      }
      return -d - 1;
    }
    var d = c("./check");
    k.exports = {searchTag:f, binSearch:function(b, c) {
      for (var d = 0, f = b.length - 1; f >= d;) {
        var h = d + f >>> 1, e = b[h];
        if (e === c) {
          return h;
        }
        c > e ? d = h + 1 : f = h - 1;
      }
      return -d - 1;
    }, getScriptNames:function() {
      var b = this.getGsubTable();
      return b ? b.scripts.map(function(b) {
        return b.tag;
      }) : [];
    }, getScriptTable:function(b, c) {
      var d = this.getGsubTable(c);
      if (d) {
        c = d.scripts;
        d = f(d.scripts, b);
        if (0 <= d) {
          return c[d].script;
        }
        b = {tag:b, script:{defaultLangSys:{reserved:0, reqFeatureIndex:65535, featureIndexes:[]}, langSysRecords:[]}};
        return c.splice(-1 - d, 0, b.script), b;
      }
    }, getLangSysTable:function(b, c, d) {
      if (b = this.getScriptTable(b, d)) {
        if ("DFLT" === c) {
          return b.defaultLangSys;
        }
        var h = f(b.langSysRecords, c);
        if (0 <= h) {
          return b.langSysRecords[h].langSys;
        }
        if (d) {
          return c = {tag:c, langSys:{reserved:0, reqFeatureIndex:65535, featureIndexes:[]}}, b.langSysRecords.splice(-1 - h, 0, c), c.langSys;
        }
      }
    }, getFeatureTable:function(b, c, f, k) {
      if (b = this.getLangSysTable(b, c, k)) {
        var h;
        b = b.featureIndexes;
        c = this.font.tables.gsub.features;
        for (var e = 0; e < b.length; e++) {
          if (h = c[b[e]], h.tag === f) {
            return h.feature;
          }
        }
        if (k) {
          return k = c.length, d.assert(0 === k || f >= c[k - 1].tag, "Features must be added in alphabetical order."), h = {tag:f, feature:{params:0, lookupListIndexes:[]}}, c.push(h), b.push(k), h.feature;
        }
      }
    }, getLookupTable:function(b, c, d, f, k) {
      if (b = this.getFeatureTable(b, c, d, k)) {
        var e;
        b = b.lookupListIndexes;
        c = this.font.tables.gsub.lookups;
        for (d = 0; d < b.length; d++) {
          if (e = c[b[d]], e.lookupType === f) {
            return e;
          }
        }
        if (k) {
          return e = {lookupType:f, lookupFlag:0, subtables:[], markFilteringSet:void 0}, f = c.length, c.push(e), b.push(f), e;
        }
      }
    }, expandCoverage:function(b) {
      if (1 === b.format) {
        return b.glyphs;
      }
      var c = [];
      b = b.ranges;
      for (var d = 0; b > d; d++) {
        var f = b[d], h = f.end;
        for (f = f.start; h >= f; f++) {
          c.push(f);
        }
      }
      return c;
    }};
  }, {"./check":2}], 9:[function(c, k, b) {
    function f(b, d) {
      c("fs").readFile(b, function(b, c) {
        return b ? d(b.message) : void d(null, w.nodeBufferToArrayBuffer(c));
      });
    }
    function d(b, c) {
      var d = new XMLHttpRequest;
      d.open("get", b, !0);
      d.responseType = "arraybuffer";
      d.onload = function() {
        return 200 !== d.status ? c("Font could not be loaded: " + d.statusText) : c(null, d.response);
      };
      d.send();
    }
    function h(b, c) {
      for (var d = [], e = 12, f = 0; c > f; f += 1) {
        var h = l.getTag(b, e), k = l.getULong(b, e + 4), m = l.getULong(b, e + 8), n = l.getULong(b, e + 12);
        d.push({tag:h, checksum:k, offset:m, length:n, compression:!1});
        e += 16;
      }
      return d;
    }
    function n(b, c) {
      if ("WOFF" === c.compression) {
        b = new Uint8Array(b.buffer, c.offset + 2, c.compressedLength - 2);
        var d = new Uint8Array(c.originalLength);
        if (m(b, d), d.byteLength !== c.originalLength) {
          throw Error("Decompression error: " + c.tag + " decompressed length doesn't match recorded length");
        }
        return {data:new DataView(d.buffer, 0), offset:0};
      }
      return {data:b, offset:c.offset};
    }
    function q(b) {
      var c = new e.Font({empty:!0});
      b = new DataView(b, 0);
      var d = l.getTag(b, 0);
      if (d === String.fromCharCode(0, 1, 0, 0)) {
        c.outlinesFormat = "truetype";
        d = l.getUShort(b, 4);
        var f = h(b, d);
      } else {
        if ("OTTO" === d) {
          c.outlinesFormat = "cff", d = l.getUShort(b, 4), f = h(b, d);
        } else {
          if ("wOFF" !== d) {
            throw Error("Unsupported OpenType signature " + d);
          }
          f = l.getTag(b, 4);
          if (f === String.fromCharCode(0, 1, 0, 0)) {
            c.outlinesFormat = "truetype";
          } else {
            if ("OTTO" !== f) {
              throw Error("Unsupported OpenType flavor " + d);
            }
            c.outlinesFormat = "cff";
          }
          f = d = l.getUShort(b, 12);
          for (var k = [], m = 44, q = 0; f > q; q += 1) {
            var u = l.getTag(b, m), w = l.getULong(b, m + 4), Q = l.getULong(b, m + 8), ha = l.getULong(b, m + 12);
            k.push({tag:u, offset:w, compression:ha > Q ? "WOFF" : !1, compressedLength:Q, originalLength:ha});
            m += 20;
          }
          f = k;
        }
      }
      for (k = 0; d > k; k += 1) {
        switch(m = f[k], m.tag) {
          case "cmap":
            m = n(b, m);
            c.tables.cmap = y.parse(m.data, m.offset);
            c.encoding = new t.CmapEncoding(c.tables.cmap);
            break;
          case "fvar":
            var ja = m;
            break;
          case "head":
            m = n(b, m);
            c.tables.head = A.parse(m.data, m.offset);
            c.unitsPerEm = c.tables.head.unitsPerEm;
            var X = c.tables.head.indexToLocFormat;
            break;
          case "hhea":
            m = n(b, m);
            c.tables.hhea = D.parse(m.data, m.offset);
            c.ascender = c.tables.hhea.ascender;
            c.descender = c.tables.hhea.descender;
            c.numberOfHMetrics = c.tables.hhea.numberOfHMetrics;
            break;
          case "hmtx":
            var fa = m;
            break;
          case "ltag":
            m = n(b, m);
            var ba = G.parse(m.data, m.offset);
            break;
          case "maxp":
            m = n(b, m);
            c.tables.maxp = K.parse(m.data, m.offset);
            c.numGlyphs = c.tables.maxp.numGlyphs;
            break;
          case "name":
            var la = m;
            break;
          case "OS/2":
            m = n(b, m);
            c.tables.os2 = L.parse(m.data, m.offset);
            break;
          case "post":
            m = n(b, m);
            c.tables.post = R.parse(m.data, m.offset);
            c.glyphNames = new t.GlyphNames(c.tables.post);
            break;
          case "glyf":
            var ma = m;
            break;
          case "loca":
            var ca = m;
            break;
          case "CFF ":
            var Ta = m;
            break;
          case "kern":
            var nb = m;
            break;
          case "GPOS":
            var ob = m;
            break;
          case "GSUB":
            var pb = m;
            break;
          case "meta":
            var qb = m;
        }
      }
      la = n(b, la);
      if (c.tables.name = I.parse(la.data, la.offset, ba), c.names = c.tables.name, ma && ca) {
        X = 0 === X, ca = n(b, ca), ca = H.parse(ca.data, ca.offset, c.numGlyphs, X), ma = n(b, ma), c.glyphs = v.parse(ma.data, ma.offset, ca, c);
      } else {
        if (!Ta) {
          throw Error("Font doesn't contain TrueType or CFF outlines.");
        }
        ma = n(b, Ta);
        x.parse(ma.data, ma.offset, c);
      }
      fa = n(b, fa);
      (E.parse(fa.data, fa.offset, c.numberOfHMetrics, c.numGlyphs, c.glyphs), t.addGlyphNames(c), nb) ? (nb = n(b, nb), c.kerningPairs = B.parse(nb.data, nb.offset)) : c.kerningPairs = {};
      ob && (ob = n(b, ob), z.parse(ob.data, ob.offset, c));
      pb && (pb = n(b, pb), c.tables.gsub = C.parse(pb.data, pb.offset));
      ja && (ja = n(b, ja), c.tables.fvar = p.parse(ja.data, ja.offset, c.names));
      qb && (qb = n(b, qb), c.tables.meta = J.parse(qb.data, qb.offset), c.metas = c.tables.meta);
      return c;
    }
    var m = c("tiny-inflate"), t = c("./encoding"), e = c("./font");
    k = c("./glyph");
    var l = c("./parse"), u = c("./path"), w = c("./util"), y = c("./tables/cmap"), x = c("./tables/cff"), p = c("./tables/fvar"), v = c("./tables/glyf"), z = c("./tables/gpos"), C = c("./tables/gsub"), A = c("./tables/head"), D = c("./tables/hhea"), E = c("./tables/hmtx"), B = c("./tables/kern"), G = c("./tables/ltag"), H = c("./tables/loca"), K = c("./tables/maxp"), I = c("./tables/name"), L = c("./tables/os2"), R = c("./tables/post"), J = c("./tables/meta");
    b._parse = l;
    b.Font = e.Font;
    b.Glyph = k.Glyph;
    b.Path = u.Path;
    b.parse = q;
    b.load = function(b, c) {
      ("undefined" == typeof window ? f : d)(b, function(b, d) {
        if (b) {
          return c(b);
        }
        try {
          var e = q(d);
        } catch (W) {
          return c(W, null);
        }
        return c(null, e);
      });
    };
    b.loadSync = function(b) {
      b = c("fs").readFileSync(b);
      return q(w.nodeBufferToArrayBuffer(b));
    };
  }, {"./encoding":4, "./font":5, "./glyph":6, "./parse":10, "./path":11, "./tables/cff":14, "./tables/cmap":15, "./tables/fvar":16, "./tables/glyf":17, "./tables/gpos":18, "./tables/gsub":19, "./tables/head":20, "./tables/hhea":21, "./tables/hmtx":22, "./tables/kern":23, "./tables/loca":24, "./tables/ltag":25, "./tables/maxp":26, "./tables/meta":27, "./tables/name":28, "./tables/os2":29, "./tables/post":30, "./util":33, fs:void 0, "tiny-inflate":1}], 10:[function(c, k, b) {
    function f(b, c) {
      return b.getUint16(c, !1);
    }
    function d(b, c) {
      this.data = b;
      this.offset = c;
      this.relativeOffset = 0;
    }
    var h = c("./check");
    b.getByte = function(b, c) {
      return b.getUint8(c);
    };
    b.getCard8 = b.getByte;
    b.getUShort = b.getCard16 = f;
    b.getShort = function(b, c) {
      return b.getInt16(c, !1);
    };
    b.getULong = function(b, c) {
      return b.getUint32(c, !1);
    };
    b.getFixed = function(b, c) {
      var d = b.getInt16(c, !1);
      b = b.getUint16(c + 2, !1);
      return d + b / 65535;
    };
    b.getTag = function(b, c) {
      for (var d = "", f = c; c + 4 > f; f += 1) {
        d += String.fromCharCode(b.getInt8(f));
      }
      return d;
    };
    b.getOffset = function(b, c, d) {
      for (var e = 0, f = 0; d > f; f += 1) {
        e <<= 8, e += b.getUint8(c + f);
      }
      return e;
    };
    b.getBytes = function(b, c, d) {
      for (var e = []; d > c; c += 1) {
        e.push(b.getUint8(c));
      }
      return e;
    };
    b.bytesToString = function(b) {
      for (var c = "", d = 0; d < b.length; d += 1) {
        c += String.fromCharCode(b[d]);
      }
      return c;
    };
    var n = {"byte":1, uShort:2, "short":2, uLong:4, fixed:4, longDateTime:8, tag:4};
    d.prototype.parseByte = function() {
      var b = this.data.getUint8(this.offset + this.relativeOffset);
      return this.relativeOffset += 1, b;
    };
    d.prototype.parseChar = function() {
      var b = this.data.getInt8(this.offset + this.relativeOffset);
      return this.relativeOffset += 1, b;
    };
    d.prototype.parseCard8 = d.prototype.parseByte;
    d.prototype.parseUShort = function() {
      var b = this.data.getUint16(this.offset + this.relativeOffset);
      return this.relativeOffset += 2, b;
    };
    d.prototype.parseCard16 = d.prototype.parseUShort;
    d.prototype.parseSID = d.prototype.parseUShort;
    d.prototype.parseOffset16 = d.prototype.parseUShort;
    d.prototype.parseShort = function() {
      var b = this.data.getInt16(this.offset + this.relativeOffset);
      return this.relativeOffset += 2, b;
    };
    d.prototype.parseF2Dot14 = function() {
      var b = this.data.getInt16(this.offset + this.relativeOffset) / 16384;
      return this.relativeOffset += 2, b;
    };
    d.prototype.parseULong = function() {
      var c = b.getULong(this.data, this.offset + this.relativeOffset);
      return this.relativeOffset += 4, c;
    };
    d.prototype.parseFixed = function() {
      var c = b.getFixed(this.data, this.offset + this.relativeOffset);
      return this.relativeOffset += 4, c;
    };
    d.prototype.parseString = function(b) {
      var c = this.data, d = this.offset + this.relativeOffset, f = "";
      this.relativeOffset += b;
      for (var h = 0; b > h; h++) {
        f += String.fromCharCode(c.getUint8(d + h));
      }
      return f;
    };
    d.prototype.parseTag = function() {
      return this.parseString(4);
    };
    d.prototype.parseLongDateTime = function() {
      var c = b.getULong(this.data, this.offset + this.relativeOffset + 4);
      return c -= 2082844800, this.relativeOffset += 8, c;
    };
    d.prototype.parseVersion = function() {
      var b = f(this.data, this.offset + this.relativeOffset), c = f(this.data, this.offset + this.relativeOffset + 2);
      return this.relativeOffset += 4, b + c / 4096 / 10;
    };
    d.prototype.skip = function(b, c) {
      void 0 === c && (c = 1);
      this.relativeOffset += n[b] * c;
    };
    d.prototype.parseOffset16List = d.prototype.parseUShortList = function(b) {
      void 0 === b && (b = this.parseUShort());
      for (var c = Array(b), d = this.data, f = this.offset + this.relativeOffset, h = 0; b > h; h++) {
        c[h] = d.getUint16(f), f += 2;
      }
      return this.relativeOffset += 2 * b, c;
    };
    d.prototype.parseList = function(b, c) {
      c || (c = b, b = this.parseUShort());
      for (var d = Array(b), f = 0; b > f; f++) {
        d[f] = c.call(this);
      }
      return d;
    };
    d.prototype.parseRecordList = function(b, c) {
      c || (c = b, b = this.parseUShort());
      for (var d = Array(b), f = Object.keys(c), h = 0; b > h; h++) {
        for (var k = {}, m = 0; m < f.length; m++) {
          var n = f[m];
          k[n] = c[n].call(this);
        }
        d[h] = k;
      }
      return d;
    };
    d.prototype.parseStruct = function(b) {
      if ("function" == typeof b) {
        return b.call(this);
      }
      for (var c = Object.keys(b), d = {}, f = 0; f < c.length; f++) {
        var h = c[f];
        d[h] = b[h].call(this);
      }
      return d;
    };
    d.prototype.parsePointer = function(b) {
      var c = this.parseOffset16();
      return 0 < c ? (new d(this.data, this.offset + c)).parseStruct(b) : void 0;
    };
    d.prototype.parseListOfLists = function(b) {
      for (var c = this.parseOffset16List(), d = c.length, f = this.relativeOffset, h = Array(d), k = 0; d > k; k++) {
        var m = c[k];
        if (0 !== m) {
          if (this.relativeOffset = m, b) {
            for (var n = this.parseOffset16List(), p = Array(n.length), q = 0; q < n.length; q++) {
              this.relativeOffset = m + n[q], p[q] = b.call(this);
            }
            h[k] = p;
          } else {
            h[k] = this.parseUShortList();
          }
        } else {
          h[k] = void 0;
        }
      }
      return this.relativeOffset = f, h;
    };
    d.prototype.parseCoverage = function() {
      var b = this.offset + this.relativeOffset, c = this.parseUShort(), d = this.parseUShort();
      if (1 === c) {
        return {format:1, glyphs:this.parseUShortList(d)};
      }
      if (2 === c) {
        b = Array(d);
        for (c = 0; d > c; c++) {
          b[c] = {start:this.parseUShort(), end:this.parseUShort(), index:this.parseUShort()};
        }
        return {format:2, ranges:b};
      }
      h.assert(!1, "0x" + b.toString(16) + ": Coverage format must be 1 or 2.");
    };
    d.prototype.parseClassDef = function() {
      var b = this.offset + this.relativeOffset, c = this.parseUShort();
      return 1 === c ? {format:1, startGlyph:this.parseUShort(), classes:this.parseUShortList()} : 2 === c ? {format:2, ranges:this.parseRecordList({start:d.uShort, end:d.uShort, classId:d.uShort})} : void h.assert(!1, "0x" + b.toString(16) + ": ClassDef format must be 1 or 2.");
    };
    d.list = function(b, c) {
      return function() {
        return this.parseList(b, c);
      };
    };
    d.recordList = function(b, c) {
      return function() {
        return this.parseRecordList(b, c);
      };
    };
    d.pointer = function(b) {
      return function() {
        return this.parsePointer(b);
      };
    };
    d.tag = d.prototype.parseTag;
    d.byte = d.prototype.parseByte;
    d.uShort = d.offset16 = d.prototype.parseUShort;
    d.uShortList = d.prototype.parseUShortList;
    d.struct = d.prototype.parseStruct;
    d.coverage = d.prototype.parseCoverage;
    d.classDef = d.prototype.parseClassDef;
    var q = {reserved:d.uShort, reqFeatureIndex:d.uShort, featureIndexes:d.uShortList};
    d.prototype.parseScriptList = function() {
      return this.parsePointer(d.recordList({tag:d.tag, script:d.pointer({defaultLangSys:d.pointer(q), langSysRecords:d.recordList({tag:d.tag, langSys:d.pointer(q)})})}));
    };
    d.prototype.parseFeatureList = function() {
      return this.parsePointer(d.recordList({tag:d.tag, feature:d.pointer({featureParams:d.offset16, lookupListIndexes:d.uShortList})}));
    };
    d.prototype.parseLookupList = function(b) {
      return this.parsePointer(d.list(d.pointer(function() {
        var c = this.parseUShort();
        h.argument(1 <= c && 8 >= c, "GSUB lookup type " + c + " unknown.");
        var e = this.parseUShort(), f = 16 & e;
        return {lookupType:c, lookupFlag:e, subtables:this.parseList(d.pointer(b[c])), markFilteringSet:f ? this.parseUShort() : void 0};
      })));
    };
    b.Parser = d;
  }, {"./check":2}], 11:[function(c, k, b) {
    function f() {
      this.commands = [];
      this.fill = "black";
      this.stroke = null;
      this.strokeWidth = 1;
    }
    f.prototype.moveTo = function(b, c) {
      this.commands.push({type:"M", x:b, y:c});
    };
    f.prototype.lineTo = function(b, c) {
      this.commands.push({type:"L", x:b, y:c});
    };
    f.prototype.curveTo = f.prototype.bezierCurveTo = function(b, c, f, k, m, t) {
      this.commands.push({type:"C", x1:b, y1:c, x2:f, y2:k, x:m, y:t});
    };
    f.prototype.quadTo = f.prototype.quadraticCurveTo = function(b, c, f, k) {
      this.commands.push({type:"Q", x1:b, y1:c, x:f, y:k});
    };
    f.prototype.close = f.prototype.closePath = function() {
      this.commands.push({type:"Z"});
    };
    f.prototype.extend = function(b) {
      b.commands && (b = b.commands);
      Array.prototype.push.apply(this.commands, b);
    };
    f.prototype.draw = function(b) {
      b.beginPath();
      for (var c = 0; c < this.commands.length; c += 1) {
        var d = this.commands[c];
        "M" === d.type ? b.moveTo(d.x, d.y) : "L" === d.type ? b.lineTo(d.x, d.y) : "C" === d.type ? b.bezierCurveTo(d.x1, d.y1, d.x2, d.y2, d.x, d.y) : "Q" === d.type ? b.quadraticCurveTo(d.x1, d.y1, d.x, d.y) : "Z" === d.type && b.closePath();
      }
      this.fill && (b.fillStyle = this.fill, b.fill());
      this.stroke && (b.strokeStyle = this.stroke, b.lineWidth = this.strokeWidth, b.stroke());
    };
    f.prototype.toPathData = function(b) {
      function c() {
        for (var c = "", d = 0; d < arguments.length; d += 1) {
          var f = arguments[d];
          0 <= f && 0 < d && (c += " ");
          c += Math.round(f) === f ? "" + Math.round(f) : f.toFixed(b);
        }
        return c;
      }
      b = void 0 !== b ? b : 2;
      for (var d = "", f = 0; f < this.commands.length; f += 1) {
        var k = this.commands[f];
        "M" === k.type ? d += "M" + c(k.x, k.y) : "L" === k.type ? d += "L" + c(k.x, k.y) : "C" === k.type ? d += "C" + c(k.x1, k.y1, k.x2, k.y2, k.x, k.y) : "Q" === k.type ? d += "Q" + c(k.x1, k.y1, k.x, k.y) : "Z" === k.type && (d += "Z");
      }
      return d;
    };
    f.prototype.toSVG = function(b) {
      var c = '<path d="';
      return c += this.toPathData(b), c += '"', this.fill && "black" !== this.fill && (c += null === this.fill ? ' fill="none"' : ' fill="' + this.fill + '"'), this.stroke && (c += ' stroke="' + this.stroke + '" stroke-width="' + this.strokeWidth + '"'), c + "/>";
    };
    b.Path = f;
  }, {}], 12:[function(c, k, b) {
    function f(b, c, d) {
      b = b.subtables;
      for (var f = 0; f < b.length; f++) {
        var h = b[f];
        if (h.substFormat === c) {
          return h;
        }
      }
      return d ? (b.push(d), d) : void 0;
    }
    var d = c("./check");
    c = c("./layout");
    b = function(b) {
      this.font = b;
    };
    b.prototype = c;
    b.prototype.getGsubTable = function(b) {
      var c = this.font.tables.gsub;
      return !c && b && (this.font.tables.gsub = c = {version:1, scripts:[{tag:"DFLT", script:{defaultLangSys:{reserved:0, reqFeatureIndex:65535, featureIndexes:[]}, langSysRecords:[]}}], features:[], lookups:[]}), c;
    };
    b.prototype.getSingle = function(b, c, d) {
      var f = [];
      b = this.getLookupTable(c, d, b, 1);
      if (!b) {
        return f;
      }
      b = b.subtables;
      for (c = 0; c < b.length; c++) {
        var h = b[c];
        d = this.expandCoverage(h.coverage);
        if (1 === h.substFormat) {
          var e = h.deltaGlyphId;
          for (h = 0; h < d.length; h++) {
            var k = d[h];
            f.push({sub:k, by:k + e});
          }
        } else {
          for (e = h.substitute, h = 0; h < d.length; h++) {
            f.push({sub:d[h], by:e[h]});
          }
        }
      }
      return f;
    };
    b.prototype.getAlternates = function(b, c, d) {
      var f = [];
      b = this.getLookupTable(c, d, b, 3);
      if (!b) {
        return f;
      }
      b = b.subtables;
      for (c = 0; c < b.length; c++) {
        var h = b[c];
        d = this.expandCoverage(h.coverage);
        h = h.alternateSets;
        for (var e = 0; e < d.length; e++) {
          f.push({sub:d[e], by:h[e]});
        }
      }
      return f;
    };
    b.prototype.getLigatures = function(b, c, d) {
      var f = [];
      b = this.getLookupTable(c, d, b, 4);
      if (!b) {
        return [];
      }
      b = b.subtables;
      for (c = 0; c < b.length; c++) {
        var h = b[c];
        d = this.expandCoverage(h.coverage);
        h = h.ligatureSets;
        for (var e = 0; e < d.length; e++) {
          for (var k = d[e], n = h[e], q = 0; q < n.length; q++) {
            var y = n[q];
            f.push({sub:[k].concat(y.components), by:y.ligGlyph});
          }
        }
      }
      return f;
    };
    b.prototype.addSingle = function(b, c, k, m) {
      b = this.getLookupTable(k, m, b, 1, !0);
      b = f(b, 2, {substFormat:2, coverage:{format:1, glyphs:[]}, substitute:[]});
      d.assert(1 === b.coverage.format, "Ligature: unable to modify coverage table format " + b.coverage.format);
      k = c.sub;
      m = this.binSearch(b.coverage.glyphs, k);
      0 > m && (m = -1 - m, b.coverage.glyphs.splice(m, 0, k), b.substitute.splice(m, 0, 0));
      b.substitute[m] = c.by;
    };
    b.prototype.addAlternate = function(b, c, k, m) {
      b = this.getLookupTable(k, m, b, 3, !0);
      b = f(b, 1, {substFormat:1, coverage:{format:1, glyphs:[]}, alternateSets:[]});
      d.assert(1 === b.coverage.format, "Ligature: unable to modify coverage table format " + b.coverage.format);
      k = c.sub;
      m = this.binSearch(b.coverage.glyphs, k);
      0 > m && (m = -1 - m, b.coverage.glyphs.splice(m, 0, k), b.alternateSets.splice(m, 0, 0));
      b.alternateSets[m] = c.by;
    };
    b.prototype.addLigature = function(b, c, f, k) {
      b = this.getLookupTable(f || "DFLT", k || "DFLT", b, 4, !0);
      (f = b.subtables[0]) || (f = {substFormat:1, coverage:{format:1, glyphs:[]}, ligatureSets:[]}, b.subtables[0] = f);
      d.assert(1 === f.coverage.format, "Ligature: unable to modify coverage table format " + f.coverage.format);
      k = c.sub[0];
      b = c.sub.slice(1);
      c = {ligGlyph:c.by, components:b};
      var h = this.binSearch(f.coverage.glyphs, k);
      if (0 <= h) {
        f = f.ligatureSets[h];
        for (k = 0; k < f.length; k++) {
          a: {
            h = f[k].components;
            var e = h.length;
            if (e !== b.length) {
              h = !1;
            } else {
              for (var l = 0; e > l; l++) {
                if (h[l] !== b[l]) {
                  h = !1;
                  break a;
                }
              }
              h = !0;
            }
          }
          if (h) {
            return;
          }
        }
        f.push(c);
      } else {
        h = -1 - h, f.coverage.glyphs.splice(h, 0, k), f.ligatureSets.splice(h, 0, [c]);
      }
    };
    b.prototype.getFeature = function(b, c, d) {
      if (c = c || "DFLT", d = d || "DFLT", /ss\d\d/.test(b)) {
        return this.getSingle(b, c, d);
      }
      switch(b) {
        case "aalt":
        case "salt":
          return this.getSingle(b, c, d).concat(this.getAlternates(b, c, d));
        case "dlig":
        case "liga":
        case "rlig":
          return this.getLigatures(b, c, d);
      }
    };
    b.prototype.add = function(b, c, d, f) {
      if (d = d || "DFLT", f = f || "DFLT", /ss\d\d/.test(b)) {
        return this.addSingle(b, c, d, f);
      }
      switch(b) {
        case "aalt":
        case "salt":
          return "number" == typeof c.by ? this.addSingle(b, c, d, f) : this.addAlternate(b, c, d, f);
        case "dlig":
        case "liga":
        case "rlig":
          return this.addLigature(b, c, d, f);
      }
    };
    k.exports = b;
  }, {"./check":2, "./layout":8}], 13:[function(c, k, b) {
    function f(b, c, d) {
      var e;
      for (e = 0; e < c.length; e += 1) {
        var f = c[e];
        this[f.name] = f.value;
      }
      if (this.tableName = b, this.fields = c, d) {
        for (b = Object.keys(d), e = 0; e < b.length; e += 1) {
          c = b[e], f = d[c], void 0 !== this[c] && (this[c] = f);
        }
      }
    }
    function d(b, c, d) {
      void 0 === d && (d = c.length);
      var e = Array(c.length + 1);
      e[0] = {name:b + "Count", type:"USHORT", value:d};
      for (d = 0; d < c.length; d++) {
        e[d + 1] = {name:b + d, type:"USHORT", value:c[d]};
      }
      return e;
    }
    function h(b, c, d) {
      var e = c.length, f = Array(e + 1);
      f[0] = {name:b + "Count", type:"USHORT", value:e};
      for (var h = 0; e > h; h++) {
        f[h + 1] = {name:b + h, type:"TABLE", value:d(c[h], h)};
      }
      return f;
    }
    function n(b, c, d) {
      var e = c.length, f = [];
      f[0] = {name:b + "Count", type:"USHORT", value:e};
      for (b = 0; e > b; b++) {
        f = f.concat(d(c[b], b));
      }
      return f;
    }
    function q(b) {
      1 === b.format ? f.call(this, "coverageTable", [{name:"coverageFormat", type:"USHORT", value:1}].concat(d("glyph", b.glyphs))) : l.assert(!1, "Can't create coverage table format 2 yet.");
    }
    function m(b) {
      f.call(this, "scriptListTable", n("scriptRecord", b, function(b, c) {
        var e = b.script, h = e.defaultLangSys;
        return l.assert(!!h, "Unable to write GSUB: script " + b.tag + " has no default language system."), [{name:"scriptTag" + c, type:"TAG", value:b.tag}, {name:"script" + c, type:"TABLE", value:new f("scriptTable", [{name:"defaultLangSys", type:"TABLE", value:new f("defaultLangSys", [{name:"lookupOrder", type:"USHORT", value:0}, {name:"reqFeatureIndex", type:"USHORT", value:h.reqFeatureIndex}].concat(d("featureIndex", h.featureIndexes)))}].concat(n("langSys", e.langSysRecords, function(b, c) {
          var e = b.langSys;
          return [{name:"langSysTag" + c, type:"TAG", value:b.tag}, {name:"langSys" + c, type:"TABLE", value:new f("langSys", [{name:"lookupOrder", type:"USHORT", value:0}, {name:"reqFeatureIndex", type:"USHORT", value:e.reqFeatureIndex}].concat(d("featureIndex", e.featureIndexes)))}];
        })))}];
      }));
    }
    function t(b) {
      f.call(this, "featureListTable", n("featureRecord", b, function(b, c) {
        var e = b.feature;
        return [{name:"featureTag" + c, type:"TAG", value:b.tag}, {name:"feature" + c, type:"TABLE", value:new f("featureTable", [{name:"featureParams", type:"USHORT", value:e.featureParams}].concat(d("lookupListIndex", e.lookupListIndexes)))}];
      }));
    }
    function e(b, c) {
      f.call(this, "lookupListTable", h("lookup", b, function(b) {
        var d = c[b.lookupType];
        return l.assert(!!d, "Unable to write GSUB lookup type " + b.lookupType + " tables."), new f("lookupTable", [{name:"lookupType", type:"USHORT", value:b.lookupType}, {name:"lookupFlag", type:"USHORT", value:b.lookupFlag}].concat(h("subtable", b.subtables, d)));
      }));
    }
    var l = c("./check"), u = c("./types").encode, w = c("./types").sizeOf;
    f.prototype.encode = function() {
      return u.TABLE(this);
    };
    f.prototype.sizeOf = function() {
      return w.TABLE(this);
    };
    q.prototype = Object.create(f.prototype);
    q.prototype.constructor = q;
    m.prototype = Object.create(f.prototype);
    m.prototype.constructor = m;
    t.prototype = Object.create(f.prototype);
    t.prototype.constructor = t;
    e.prototype = Object.create(f.prototype);
    e.prototype.constructor = e;
    b.Record = b.Table = f;
    b.Coverage = q;
    b.ScriptList = m;
    b.FeatureList = t;
    b.LookupList = e;
    b.ushortList = d;
    b.tableList = h;
    b.recordList = n;
  }, {"./check":2, "./types":32}], 14:[function(c, k, b) {
    function f(b, c) {
      if (b === c) {
        return !0;
      }
      if (Array.isArray(b) && Array.isArray(c)) {
        if (b.length !== c.length) {
          return !1;
        }
        for (var d = 0; d < b.length; d += 1) {
          if (!f(b[d], c[d])) {
            return !1;
          }
        }
        return !0;
      }
      return !1;
    }
    function d(b, c, d) {
      var e, f = [], h = [];
      var k = v.getCard16(b, c);
      if (0 !== k) {
        var l = v.getByte(b, c + 2);
        var m = c + (k + 1) * l + 2;
        var n = c + 3;
        for (e = 0; k + 1 > e; e += 1) {
          f.push(v.getOffset(b, n, l)), n += l;
        }
        k = m + f[k];
      } else {
        k = c + 2;
      }
      for (e = 0; e < f.length - 1; e += 1) {
        l = v.getBytes(b, m + f[e], m + f[e + 1]), d && (l = d(l)), h.push(l);
      }
      return {objects:h, startOffset:c, endOffset:k};
    }
    function h(b, c) {
      var d, e, f, h;
      if (28 === c) {
        return d = b.parseByte(), e = b.parseByte(), d << 8 | e;
      }
      if (29 === c) {
        return d = b.parseByte(), e = b.parseByte(), f = b.parseByte(), h = b.parseByte(), d << 24 | e << 16 | f << 8 | h;
      }
      if (30 === c) {
        c = "";
        for (d = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", ".", "E", "E-", null, "-"];;) {
          f = b.parseByte();
          e = f >> 4;
          f &= 15;
          if (15 === e) {
            break;
          }
          if (c += d[e], 15 === f) {
            break;
          }
          c += d[f];
        }
        return parseFloat(c);
      }
      if (32 <= c && 246 >= c) {
        return c - 139;
      }
      if (247 <= c && 250 >= c) {
        return d = b.parseByte(), 256 * (c - 247) + d + 108;
      }
      if (251 <= c && 254 >= c) {
        return d = b.parseByte(), 256 * -(c - 251) - d - 108;
      }
      throw Error("Invalid b0 " + c);
    }
    function n(b, c, d) {
      var e = new v.Parser(b, void 0 !== c ? c : 0);
      c = [];
      var f = [];
      for (d = void 0 !== d ? d : b.length; e.relativeOffset < d;) {
        b = e.parseByte(), 21 >= b ? (12 === b && (b = 1200 + e.parseByte()), c.push([b, f]), f = []) : f.push(h(e, b));
      }
      d = {};
      for (b = 0; b < c.length; b += 1) {
        e = c[b][0];
        f = c[b][1];
        if (f = 1 === f.length ? f[0] : f, d.hasOwnProperty(e)) {
          throw Error("Object " + d + " already has key " + e);
        }
        d[e] = f;
      }
      return d;
    }
    function q(b, c) {
      return 390 >= c ? x.cffStandardStrings[c] : b[c - 391];
    }
    function m(b, c, d) {
      for (var e = {}, f = 0; f < c.length; f += 1) {
        var h = c[f], k = b[h.op];
        void 0 === k && (k = void 0 !== h.value ? h.value : null);
        "SID" === h.type && (k = q(d, k));
        e[h.name] = k;
      }
      return e;
    }
    function t(b, c, d) {
      function e(b, c) {
        v && p.closePath();
        p.moveTo(b, c);
        v = !0;
      }
      function f() {
        0 !== q.length % 2 && !u && (w = q.shift() + b.nominalWidthX);
        t += q.length >> 1;
        q.length = 0;
        u = !0;
      }
      function h(d) {
        for (var z, A, B, C, D, E, G, H, I, J, K = 0; K < d.length;) {
          switch(D = d[K], K += 1, D) {
            case 1:
              f();
              break;
            case 3:
              f();
              break;
            case 4:
              1 < q.length && !u && (w = q.shift() + b.nominalWidthX, u = !0);
              x += q.pop();
              e(y, x);
              break;
            case 5:
              for (; 0 < q.length;) {
                y += q.shift(), x += q.shift(), p.lineTo(y, x);
              }
              break;
            case 6:
              for (; 0 < q.length && (y += q.shift(), p.lineTo(y, x), 0 !== q.length);) {
                x += q.shift(), p.lineTo(y, x);
              }
              break;
            case 7:
              for (; 0 < q.length && (x += q.shift(), p.lineTo(y, x), 0 !== q.length);) {
                y += q.shift(), p.lineTo(y, x);
              }
              break;
            case 8:
              for (; 0 < q.length;) {
                k = y + q.shift(), l = x + q.shift(), m = k + q.shift(), n = l + q.shift(), y = m + q.shift(), x = n + q.shift(), p.curveTo(k, l, m, n, y, x);
              }
              break;
            case 10:
              D = q.pop() + b.subrsBias;
              (D = b.subrs[D]) && h(D);
              break;
            case 11:
              return;
            case 12:
              switch(D = d[K], K += 1, D) {
                case 35:
                  k = y + q.shift();
                  l = x + q.shift();
                  m = k + q.shift();
                  n = l + q.shift();
                  D = m + q.shift();
                  E = n + q.shift();
                  G = D + q.shift();
                  H = E + q.shift();
                  I = G + q.shift();
                  J = H + q.shift();
                  y = I + q.shift();
                  x = J + q.shift();
                  q.shift();
                  p.curveTo(k, l, m, n, D, E);
                  p.curveTo(G, H, I, J, y, x);
                  break;
                case 34:
                  k = y + q.shift();
                  l = x;
                  m = k + q.shift();
                  n = l + q.shift();
                  D = m + q.shift();
                  E = n;
                  G = D + q.shift();
                  H = n;
                  I = G + q.shift();
                  J = x;
                  y = I + q.shift();
                  p.curveTo(k, l, m, n, D, E);
                  p.curveTo(G, H, I, J, y, x);
                  break;
                case 36:
                  k = y + q.shift();
                  l = x + q.shift();
                  m = k + q.shift();
                  n = l + q.shift();
                  D = m + q.shift();
                  E = n;
                  G = D + q.shift();
                  H = n;
                  I = G + q.shift();
                  J = H + q.shift();
                  y = I + q.shift();
                  p.curveTo(k, l, m, n, D, E);
                  p.curveTo(G, H, I, J, y, x);
                  break;
                case 37:
                  k = y + q.shift();
                  l = x + q.shift();
                  m = k + q.shift();
                  n = l + q.shift();
                  D = m + q.shift();
                  E = n + q.shift();
                  G = D + q.shift();
                  H = E + q.shift();
                  I = G + q.shift();
                  J = H + q.shift();
                  Math.abs(I - y) > Math.abs(J - x) ? y = I + q.shift() : x = J + q.shift();
                  p.curveTo(k, l, m, n, D, E);
                  p.curveTo(G, H, I, J, y, x);
                  break;
                default:
                  console.log("Glyph " + c.index + ": unknown operator 1200" + D), q.length = 0;
              }break;
            case 14:
              0 < q.length && !u && (w = q.shift() + b.nominalWidthX, u = !0);
              v && (p.closePath(), v = !1);
              break;
            case 18:
              f();
              break;
            case 19:
            case 20:
              f();
              K += t + 7 >> 3;
              break;
            case 21:
              2 < q.length && !u && (w = q.shift() + b.nominalWidthX, u = !0);
              x += q.pop();
              y += q.pop();
              e(y, x);
              break;
            case 22:
              1 < q.length && !u && (w = q.shift() + b.nominalWidthX, u = !0);
              y += q.pop();
              e(y, x);
              break;
            case 23:
              f();
              break;
            case 24:
              for (; 2 < q.length;) {
                k = y + q.shift(), l = x + q.shift(), m = k + q.shift(), n = l + q.shift(), y = m + q.shift(), x = n + q.shift(), p.curveTo(k, l, m, n, y, x);
              }
              y += q.shift();
              x += q.shift();
              p.lineTo(y, x);
              break;
            case 25:
              for (; 6 < q.length;) {
                y += q.shift(), x += q.shift(), p.lineTo(y, x);
              }
              k = y + q.shift();
              l = x + q.shift();
              m = k + q.shift();
              n = l + q.shift();
              y = m + q.shift();
              x = n + q.shift();
              p.curveTo(k, l, m, n, y, x);
              break;
            case 26:
              for (q.length % 2 && (y += q.shift()); 0 < q.length;) {
                k = y, l = x + q.shift(), m = k + q.shift(), n = l + q.shift(), y = m, x = n + q.shift(), p.curveTo(k, l, m, n, y, x);
              }
              break;
            case 27:
              for (q.length % 2 && (x += q.shift()); 0 < q.length;) {
                k = y + q.shift(), l = x, m = k + q.shift(), n = l + q.shift(), y = m + q.shift(), x = n, p.curveTo(k, l, m, n, y, x);
              }
              break;
            case 28:
              z = d[K];
              A = d[K + 1];
              q.push((z << 24 | A << 16) >> 16);
              K += 2;
              break;
            case 29:
              D = q.pop() + b.gsubrsBias;
              (D = b.gsubrs[D]) && h(D);
              break;
            case 30:
              for (; 0 < q.length && (k = y, l = x + q.shift(), m = k + q.shift(), n = l + q.shift(), y = m + q.shift(), x = n + (1 === q.length ? q.shift() : 0), p.curveTo(k, l, m, n, y, x), 0 !== q.length);) {
                k = y + q.shift(), l = x, m = k + q.shift(), n = l + q.shift(), x = n + q.shift(), y = m + (1 === q.length ? q.shift() : 0), p.curveTo(k, l, m, n, y, x);
              }
              break;
            case 31:
              for (; 0 < q.length && (k = y + q.shift(), l = x, m = k + q.shift(), n = l + q.shift(), x = n + q.shift(), y = m + (1 === q.length ? q.shift() : 0), p.curveTo(k, l, m, n, y, x), 0 !== q.length);) {
                k = y, l = x + q.shift(), m = k + q.shift(), n = l + q.shift(), y = m + q.shift(), x = n + (1 === q.length ? q.shift() : 0), p.curveTo(k, l, m, n, y, x);
              }
              break;
            default:
              32 > D ? console.log("Glyph " + c.index + ": unknown operator " + D) : 247 > D ? q.push(D - 139) : 251 > D ? (z = d[K], K += 1, q.push(256 * (D - 247) + z + 108)) : 255 > D ? (z = d[K], K += 1, q.push(256 * -(D - 251) - z - 108)) : (z = d[K], A = d[K + 1], B = d[K + 2], C = d[K + 3], K += 4, q.push((z << 24 | A << 16 | B << 8 | C) / 65536));
          }
        }
      }
      var k, l, m, n, p = new z.Path, q = [], t = 0, u = !1, w = b.defaultWidthX, v = !1, y = 0, x = 0;
      return h(d), c.advanceWidth = w, p;
    }
    function e(b) {
      return 1240 > b.length ? 107 : 33900 > b.length ? 1131 : 32768;
    }
    function l(b, c) {
      var d, e = x.cffStandardStrings.indexOf(b);
      return e = c.indexOf(b), 0 <= e ? d = e + x.cffStandardStrings.length : (d = x.cffStandardStrings.length + c.length, c.push(b)), d;
    }
    function u(b, c, d) {
      for (var e = {}, h = 0; h < b.length; h += 1) {
        var k = b[h], m = c[k.name];
        void 0 === m || f(m, k.value) || ("SID" === k.type && (m = l(m, d)), e[k.op] = {name:k.name, type:k.type, value:m});
      }
      return e;
    }
    function w(b, c) {
      var d = new C.Record("Top DICT", [{name:"dict", type:"DICT", value:{}}]);
      return d.dict = u(A, b, c), d;
    }
    function y(b) {
      var c = new C.Record("Top DICT INDEX", [{name:"topDicts", type:"INDEX", value:[]}]);
      return c.topDicts = [{name:"topDict_0", type:"TABLE", value:b}], c;
    }
    var x = c("../encoding"), p = c("../glyphset"), v = c("../parse"), z = c("../path"), C = c("../table"), A = [{name:"version", op:0, type:"SID"}, {name:"notice", op:1, type:"SID"}, {name:"copyright", op:1200, type:"SID"}, {name:"fullName", op:2, type:"SID"}, {name:"familyName", op:3, type:"SID"}, {name:"weight", op:4, type:"SID"}, {name:"isFixedPitch", op:1201, type:"number", value:0}, {name:"italicAngle", op:1202, type:"number", value:0}, {name:"underlinePosition", op:1203, type:"number", value:-100}, 
    {name:"underlineThickness", op:1204, type:"number", value:50}, {name:"paintType", op:1205, type:"number", value:0}, {name:"charstringType", op:1206, type:"number", value:2}, {name:"fontMatrix", op:1207, type:"real real real real real real".split(" "), value:[.001, 0, 0, .001, 0, 0]}, {name:"uniqueId", op:13, type:"number"}, {name:"fontBBox", op:5, type:["number", "number", "number", "number"], value:[0, 0, 0, 0]}, {name:"strokeWidth", op:1208, type:"number", value:0}, {name:"xuid", op:14, type:[], 
    value:null}, {name:"charset", op:15, type:"offset", value:0}, {name:"encoding", op:16, type:"offset", value:0}, {name:"charStrings", op:17, type:"offset", value:0}, {name:"private", op:18, type:["number", "offset"], value:[0, 0]}], D = [{name:"subrs", op:19, type:"offset", value:0}, {name:"defaultWidthX", op:20, type:"number", value:0}, {name:"nominalWidthX", op:21, type:"number", value:0}];
    b.parse = function(b, c, f) {
      f.tables.cff = {};
      var h = {};
      h = (h.formatMajor = v.getCard8(b, c), h.formatMinor = v.getCard8(b, c + 1), h.size = v.getCard8(b, c + 2), h.offsetSize = v.getCard8(b, c + 3), h.startOffset = c, h.endOffset = c + 4, h);
      h = d(b, h.endOffset, v.bytesToString);
      h = d(b, h.endOffset);
      var k = d(b, h.endOffset, v.bytesToString), l = d(b, k.endOffset);
      f.gsubrs = l.objects;
      f.gsubrsBias = e(f.gsubrs);
      l = new DataView((new Uint8Array(h.objects[0])).buffer);
      h = k.objects;
      l = n(l, 0, l.byteLength);
      l = m(l, A, h);
      f.tables.cff.topDict = l;
      h = c + l["private"][1];
      var u = k.objects;
      var w = n(b, h, l["private"][0]);
      u = m(w, D, u);
      (f.defaultWidthX = u.defaultWidthX, f.nominalWidthX = u.nominalWidthX, 0 !== u.subrs) ? (h = d(b, h + u.subrs), f.subrs = h.objects, f.subrsBias = e(f.subrs)) : (f.subrs = [], f.subrsBias = 0);
      h = d(b, c + l.charStrings);
      f.nGlyphs = h.objects.length;
      u = f.nGlyphs;
      w = k.objects;
      var y = new v.Parser(b, c + l.charset);
      --u;
      k = [".notdef"];
      var z = y.parseCard8();
      if (0 === z) {
        for (z = 0; u > z; z += 1) {
          var B = y.parseSID();
          k.push(q(w, B));
        }
      } else {
        if (1 === z) {
          for (; k.length <= u;) {
            B = y.parseSID();
            var C = y.parseCard8();
            for (z = 0; C >= z; z += 1) {
              k.push(q(w, B)), B += 1;
            }
          }
        } else {
          if (2 !== z) {
            throw Error("Unknown charset format " + z);
          }
          for (; k.length <= u;) {
            for (B = y.parseSID(), C = y.parseCard16(), z = 0; C >= z; z += 1) {
              k.push(q(w, B)), B += 1;
            }
          }
        }
      }
      if (0 === l.encoding) {
        b = new x.CffEncoding(x.cffStandardEncoding, k);
      } else {
        if (1 === l.encoding) {
          b = new x.CffEncoding(x.cffExpertEncoding, k);
        } else {
          u = {};
          b = new v.Parser(b, c + l.encoding);
          c = b.parseCard8();
          if (0 === c) {
            for (w = b.parseCard8(), c = 0; w > c; c += 1) {
              l = b.parseCard8(), u[l] = c;
            }
          } else {
            if (1 !== c) {
              throw Error("Unknown encoding format " + c);
            }
            w = b.parseCard8();
            l = 1;
            for (c = 0; w > c; c += 1) {
              for (y = b.parseCard8(), z = b.parseCard8(), B = y; y + z >= B; B += 1) {
                u[B] = l, l += 1;
              }
            }
          }
          b = new x.CffEncoding(u, k);
        }
      }
      f.cffEncoding = b;
      f.encoding = f.encoding || f.cffEncoding;
      f.glyphs = new p.GlyphSet(f);
      for (b = 0; b < f.nGlyphs; b += 1) {
        f.glyphs.push(b, p.cffGlyphLoader(f, b, t, h.objects[b]));
      }
    };
    b.make = function(b, c) {
      var d = new C.Table("CFF ", [{name:"header", type:"RECORD"}, {name:"nameIndex", type:"RECORD"}, {name:"topDictIndex", type:"RECORD"}, {name:"stringIndex", type:"RECORD"}, {name:"globalSubrIndex", type:"RECORD"}, {name:"charsets", type:"RECORD"}, {name:"charStringsIndex", type:"RECORD"}, {name:"privateDict", type:"RECORD"}]), e = 1 / c.unitsPerEm;
      e = {version:c.version, fullName:c.fullName, familyName:c.familyName, weight:c.weightName, fontBBox:c.fontBBox || [0, 0, 0, 0], fontMatrix:[e, 0, 0, e, 0, 0], charset:999, encoding:0, charStrings:999, "private":[0, 999]};
      for (var f = [], h = 1; h < b.length; h += 1) {
        var k = b.get(h);
        f.push(k.name);
      }
      k = [];
      d.header = new C.Record("Header", [{name:"major", type:"Card8", value:1}, {name:"minor", type:"Card8", value:0}, {name:"hdrSize", type:"Card8", value:4}, {name:"major", type:"Card8", value:1}]);
      c = [c.postScriptName];
      h = new C.Record("Name INDEX", [{name:"names", type:"INDEX", value:[]}]);
      h.names = [];
      for (var m = 0; m < c.length; m += 1) {
        h.names.push({name:"name_" + m, type:"NAME", value:c[m]});
      }
      d.nameIndex = h;
      c = w(e, k);
      d.topDictIndex = y(c);
      d.globalSubrIndex = new C.Record("Global Subr INDEX", [{name:"subrs", type:"INDEX", value:[]}]);
      h = new C.Record("Charsets", [{name:"format", type:"Card8", value:0}]);
      for (m = 0; m < f.length; m += 1) {
        var n = l(f[m], k);
        h.fields.push({name:"glyph_" + m, type:"SID", value:n});
      }
      d.charsets = h;
      f = new C.Record("CharStrings INDEX", [{name:"charStrings", type:"INDEX", value:[]}]);
      for (h = 0; h < b.length; h += 1) {
        m = b.get(h);
        n = [];
        var p = m.path;
        n.push({name:"width", type:"NUMBER", value:m.advanceWidth});
        for (var q = 0, t = 0, v = 0; v < p.commands.length; v += 1) {
          var x = p.commands[v];
          if ("Q" === x.type) {
            var z = 1 / 3, A = 2 / 3;
            x = {type:"C", x:x.x, y:x.y, x1:z * q + A * x.x1, y1:z * t + A * x.y1, x2:z * x.x + A * x.x1, y2:z * x.y + A * x.y1};
          }
          if ("M" === x.type) {
            q = Math.round(x.x - q), t = Math.round(x.y - t), n.push({name:"dx", type:"NUMBER", value:q}), n.push({name:"dy", type:"NUMBER", value:t}), n.push({name:"rmoveto", type:"OP", value:21}), q = Math.round(x.x), t = Math.round(x.y);
          } else {
            if ("L" === x.type) {
              q = Math.round(x.x - q), t = Math.round(x.y - t), n.push({name:"dx", type:"NUMBER", value:q}), n.push({name:"dy", type:"NUMBER", value:t}), n.push({name:"rlineto", type:"OP", value:5}), q = Math.round(x.x), t = Math.round(x.y);
            } else {
              if ("C" === x.type) {
                z = Math.round(x.x1 - q);
                A = Math.round(x.y1 - t);
                var B = Math.round(x.x2 - x.x1), E = Math.round(x.y2 - x.y1);
                q = Math.round(x.x - x.x2);
                t = Math.round(x.y - x.y2);
                n.push({name:"dx1", type:"NUMBER", value:z});
                n.push({name:"dy1", type:"NUMBER", value:A});
                n.push({name:"dx2", type:"NUMBER", value:B});
                n.push({name:"dy2", type:"NUMBER", value:E});
                n.push({name:"dx", type:"NUMBER", value:q});
                n.push({name:"dy", type:"NUMBER", value:t});
                n.push({name:"rrcurveto", type:"OP", value:8});
                q = Math.round(x.x);
                t = Math.round(x.y);
              }
            }
          }
        }
        n = (n.push({name:"endchar", type:"OP", value:14}), n);
        f.charStrings.push({name:m.name, type:"CHARSTRING", value:n});
      }
      d.charStringsIndex = f;
      b = new C.Record("Private DICT", [{name:"dict", type:"DICT", value:{}}]);
      b = (b.dict = u(D, {}, k), b);
      d.privateDict = b;
      b = new C.Record("String INDEX", [{name:"strings", type:"INDEX", value:[]}]);
      b.strings = [];
      for (f = 0; f < k.length; f += 1) {
        b.strings.push({name:"string_" + f, type:"STRING", value:k[f]});
      }
      d.stringIndex = b;
      b = d.header.sizeOf() + d.nameIndex.sizeOf() + d.topDictIndex.sizeOf() + d.stringIndex.sizeOf() + d.globalSubrIndex.sizeOf();
      return e.charset = b, e.encoding = 0, e.charStrings = e.charset + d.charsets.sizeOf(), e.private[1] = e.charStrings + d.charStringsIndex.sizeOf(), c = w(e, k), d.topDictIndex = y(c), d;
    };
  }, {"../encoding":4, "../glyphset":7, "../parse":10, "../path":11, "../table":13}], 15:[function(c, k, b) {
    function f(b, c, d) {
      b.segments.push({end:c, start:c, delta:-(c - d), offset:0});
    }
    var d = c("../check"), h = c("../parse"), n = c("../table");
    b.parse = function(b, c) {
      var f, e = {};
      e.version = h.getUShort(b, c);
      d.argument(0 === e.version, "cmap table version should be 0.");
      e.numTables = h.getUShort(b, c + 2);
      var k = -1;
      for (f = e.numTables - 1; 0 <= f; --f) {
        var m = h.getUShort(b, c + 4 + 8 * f), n = h.getUShort(b, c + 4 + 8 * f + 2);
        if (3 === m && (0 === n || 1 === n || 10 === n)) {
          k = h.getULong(b, c + 4 + 8 * f + 4);
          break;
        }
      }
      if (-1 === k) {
        return null;
      }
      f = new h.Parser(b, c + k);
      if (e.format = f.parseUShort(), 12 === e.format) {
        f.parseUShort();
        e.length = f.parseULong();
        e.language = f.parseULong();
        var q;
        e.groupCount = q = f.parseULong();
        e.glyphIndexMap = {};
        for (b = 0; q > b; b += 1) {
          for (n = f.parseULong(), k = f.parseULong(), m = f.parseULong(); k >= n; n += 1) {
            e.glyphIndexMap[n] = m, m++;
          }
        }
      } else {
        if (4 !== e.format) {
          throw Error("Only format 4 and 12 cmap tables are supported.");
        }
        var x = k;
        e.length = f.parseUShort();
        e.language = f.parseUShort();
        e.segCount = k = f.parseUShort() >> 1;
        f.skip("uShort", 3);
        e.glyphIndexMap = {};
        f = new h.Parser(b, c + x + 14);
        m = new h.Parser(b, c + x + 16 + 2 * k);
        n = new h.Parser(b, c + x + 16 + 4 * k);
        var p = new h.Parser(b, c + x + 16 + 6 * k);
        x = c + x + 16 + 8 * k;
        for (c = 0; k - 1 > c; c += 1) {
          for (var v = f.parseUShort(), z = m.parseUShort(), C = n.parseShort(), A = p.parseUShort(), D = z; v >= D; D += 1) {
            0 !== A ? (x = p.offset + p.relativeOffset - 2, x += A, x += 2 * (D - z), q = h.getUShort(b, x), 0 !== q && (q = q + C & 65535)) : q = D + C & 65535, e.glyphIndexMap[D] = q;
          }
        }
      }
      return e;
    };
    b.make = function(b) {
      var c, d = new n.Table("cmap", [{name:"version", type:"USHORT", value:0}, {name:"numTables", type:"USHORT", value:1}, {name:"platformID", type:"USHORT", value:3}, {name:"encodingID", type:"USHORT", value:1}, {name:"offset", type:"ULONG", value:12}, {name:"format", type:"USHORT", value:4}, {name:"length", type:"USHORT", value:0}, {name:"language", type:"USHORT", value:0}, {name:"segCountX2", type:"USHORT", value:0}, {name:"searchRange", type:"USHORT", value:0}, {name:"entrySelector", type:"USHORT", 
      value:0}, {name:"rangeShift", type:"USHORT", value:0}]);
      d.segments = [];
      for (c = 0; c < b.length; c += 1) {
        for (var e = b.get(c), h = 0; h < e.unicodes.length; h += 1) {
          f(d, e.unicodes[h], c);
        }
        d.segments = d.segments.sort(function(b, c) {
          return b.start - c.start;
        });
      }
      d.segments.push({end:65535, start:65535, delta:1, offset:0});
      b = d.segments.length;
      d.segCountX2 = 2 * b;
      d.searchRange = 2 * Math.pow(2, Math.floor(Math.log(b) / Math.log(2)));
      d.entrySelector = Math.log(d.searchRange / 2) / Math.log(2);
      d.rangeShift = d.segCountX2 - d.searchRange;
      e = [];
      h = [];
      var k = [], q = [], y = [];
      for (c = 0; b > c; c += 1) {
        var x = d.segments[c];
        e = e.concat({name:"end_" + c, type:"USHORT", value:x.end});
        h = h.concat({name:"start_" + c, type:"USHORT", value:x.start});
        k = k.concat({name:"idDelta_" + c, type:"SHORT", value:x.delta});
        q = q.concat({name:"idRangeOffset_" + c, type:"USHORT", value:x.offset});
        void 0 !== x.glyphId && (y = y.concat({name:"glyph_" + c, type:"USHORT", value:x.glyphId}));
      }
      return d.fields = d.fields.concat(e), d.fields.push({name:"reservedPad", type:"USHORT", value:0}), d.fields = d.fields.concat(h), d.fields = d.fields.concat(k), d.fields = d.fields.concat(q), d.fields = d.fields.concat(y), d.length = 2 * e.length + 16 + 2 * h.length + 2 * k.length + 2 * q.length + 2 * y.length, d;
    };
  }, {"../check":2, "../parse":10, "../table":13}], 16:[function(c, k, b) {
    function f(b, c) {
      var d = JSON.stringify(b), e = 256, f;
      for (f in c) {
        var h = parseInt(f);
        if (h && !(256 > h)) {
          if (JSON.stringify(c[f]) === d) {
            return h;
          }
          h >= e && (e = h + 1);
        }
      }
      return c[e] = b, e;
    }
    function d(b, c, d) {
      d = f(c.name, d);
      return [{name:"tag_" + b, type:"TAG", value:c.tag}, {name:"minValue_" + b, type:"FIXED", value:c.minValue << 16}, {name:"defaultValue_" + b, type:"FIXED", value:c.defaultValue << 16}, {name:"maxValue_" + b, type:"FIXED", value:c.maxValue << 16}, {name:"flags_" + b, type:"USHORT", value:0}, {name:"nameID_" + b, type:"USHORT", value:d}];
    }
    function h(b, c, d) {
      var e = {};
      b = new t.Parser(b, c);
      return e.tag = b.parseTag(), e.minValue = b.parseFixed(), e.defaultValue = b.parseFixed(), e.maxValue = b.parseFixed(), b.skip("uShort", 1), e.name = d[b.parseUShort()] || {}, e;
    }
    function n(b, c, d, e) {
      e = f(c.name, e);
      e = [{name:"nameID_" + b, type:"USHORT", value:e}, {name:"flags_" + b, type:"USHORT", value:0}];
      for (var h = 0; h < d.length; ++h) {
        var k = d[h].tag;
        e.push({name:"axis_" + b + " " + k, type:"FIXED", value:c.coordinates[k] << 16});
      }
      return e;
    }
    function q(b, c, d, e) {
      var f = {};
      b = new t.Parser(b, c);
      f.name = e[b.parseUShort()] || {};
      b.skip("uShort", 1);
      f.coordinates = {};
      for (e = 0; e < d.length; ++e) {
        f.coordinates[d[e].tag] = b.parseFixed();
      }
      return f;
    }
    var m = c("../check"), t = c("../parse"), e = c("../table");
    b.make = function(b, c) {
      var f = new e.Table("fvar", [{name:"version", type:"ULONG", value:65536}, {name:"offsetToData", type:"USHORT", value:0}, {name:"countSizePairs", type:"USHORT", value:2}, {name:"axisCount", type:"USHORT", value:b.axes.length}, {name:"axisSize", type:"USHORT", value:20}, {name:"instanceCount", type:"USHORT", value:b.instances.length}, {name:"instanceSize", type:"USHORT", value:4 + 4 * b.axes.length}]);
      f.offsetToData = f.sizeOf();
      for (var h = 0; h < b.axes.length; h++) {
        f.fields = f.fields.concat(d(h, b.axes[h], c));
      }
      for (h = 0; h < b.instances.length; h++) {
        f.fields = f.fields.concat(n(h, b.instances[h], b.axes, c));
      }
      return f;
    };
    b.parse = function(b, c, d) {
      var e = new t.Parser(b, c), f = e.parseULong();
      m.argument(65536 === f, "Unsupported fvar table version.");
      var k = e.parseOffset16();
      e.skip("uShort", 1);
      var l = e.parseUShort(), n = e.parseUShort();
      f = e.parseUShort();
      e = e.parseUShort();
      for (var u = [], w = 0; l > w; w++) {
        u.push(h(b, c + k + w * n, d));
      }
      w = [];
      c = c + k + l * n;
      for (k = 0; f > k; k++) {
        w.push(q(b, c + k * e, u, d));
      }
      return {axes:u, instances:w};
    };
  }, {"../check":2, "../parse":10, "../table":13}], 17:[function(c, k, b) {
    function f(b, c, d, e, f) {
      var h;
      return 0 < (c & e) ? (h = b.parseByte(), 0 === (c & f) && (h = -h), h = d + h) : h = 0 < (c & f) ? d : d + b.parseShort(), h;
    }
    function d(b, c, d) {
      c = new t.Parser(c, d);
      b.numberOfContours = c.parseShort();
      b._xMin = c.parseShort();
      b._yMin = c.parseShort();
      b._xMax = c.parseShort();
      b._yMax = c.parseShort();
      var e;
      if (0 < b.numberOfContours) {
        var h, k = b.endPointIndices = [];
        for (h = 0; h < b.numberOfContours; h += 1) {
          k.push(c.parseUShort());
        }
        b.instructionLength = c.parseUShort();
        b.instructions = [];
        for (h = 0; h < b.instructionLength; h += 1) {
          b.instructions.push(c.parseByte());
        }
        var l = k[k.length - 1] + 1;
        d = [];
        for (h = 0; l > h; h += 1) {
          if (e = c.parseByte(), d.push(e), 0 < (8 & e)) {
            for (var m = c.parseByte(), n = 0; m > n; n += 1) {
              d.push(e), h += 1;
            }
          }
        }
        if (q.argument(d.length === l, "Bad flags."), 0 < k.length) {
          n = [];
          if (0 < l) {
            for (h = 0; l > h; h += 1) {
              e = d[h], m = {}, m.onCurve = !!(1 & e), m.lastPointOfContour = 0 <= k.indexOf(h), n.push(m);
            }
            for (h = k = 0; l > h; h += 1) {
              e = d[h], m = n[h], m.x = f(c, e, k, 2, 16), k = m.x;
            }
            for (h = k = 0; l > h; h += 1) {
              e = d[h], m = n[h], m.y = f(c, e, k, 4, 32), k = m.y;
            }
          }
          b.points = n;
        } else {
          b.points = [];
        }
      } else {
        if (0 === b.numberOfContours) {
          b.points = [];
        } else {
          for (b.isComposite = !0, b.points = [], b.components = [], e = !0; e;) {
            d = c.parseUShort(), e = {glyphIndex:c.parseUShort(), xScale:1, scale01:0, scale10:0, yScale:1, dx:0, dy:0}, 0 < (1 & d) ? 0 < (2 & d) ? (e.dx = c.parseShort(), e.dy = c.parseShort()) : e.matchedPoints = [c.parseUShort(), c.parseUShort()] : 0 < (2 & d) ? (e.dx = c.parseChar(), e.dy = c.parseChar()) : e.matchedPoints = [c.parseByte(), c.parseByte()], 0 < (8 & d) ? e.xScale = e.yScale = c.parseF2Dot14() : 0 < (64 & d) ? (e.xScale = c.parseF2Dot14(), e.yScale = c.parseF2Dot14()) : 0 < (128 & 
            d) && (e.xScale = c.parseF2Dot14(), e.scale01 = c.parseF2Dot14(), e.scale10 = c.parseF2Dot14(), e.yScale = c.parseF2Dot14()), b.components.push(e), e = !!(32 & d);
          }
        }
      }
    }
    function h(b, c) {
      for (var d = [], e = 0; e < b.length; e += 1) {
        var f = b[e];
        d.push({x:c.xScale * f.x + c.scale01 * f.y + c.dx, y:c.scale10 * f.x + c.yScale * f.y + c.dy, onCurve:f.onCurve, lastPointOfContour:f.lastPointOfContour});
      }
      return d;
    }
    function n(b, c) {
      if (c.isComposite) {
        for (var d = 0; d < c.components.length; d += 1) {
          var f = c.components[d], k = b.get(f.glyphIndex);
          if (k.getPath(), k.points) {
            if (void 0 === f.matchedPoints) {
              k = h(k.points, f);
            } else {
              if (f.matchedPoints[0] > c.points.length - 1 || f.matchedPoints[1] > k.points.length - 1) {
                throw Error("Matched points out of range in " + c.name);
              }
              var l = c.points[f.matchedPoints[0]], m = k.points[f.matchedPoints[1]];
              f = {xScale:f.xScale, scale01:f.scale01, scale10:f.scale10, yScale:f.yScale, dx:0, dy:0};
              m = h([m], f)[0];
              f.dx = l.x - m.x;
              f.dy = l.y - m.y;
              k = h(k.points, f);
            }
            c.points = c.points.concat(k);
          }
        }
      }
      var n;
      c = c.points;
      b = new e.Path;
      if (c) {
        d = [];
        k = [];
        for (l = 0; l < c.length; l += 1) {
          m = c[l], k.push(m), m.lastPointOfContour && (d.push(k), k = []);
        }
        c = (q.argument(0 === k.length, "There are still points left in the current contour."), d);
        for (d = 0; d < c.length; d += 1) {
          var t;
          k = c[d];
          l = k[0];
          m = k[k.length - 1];
          l.onCurve ? (n = null, t = !0) : (l = m.onCurve ? m : {x:(l.x + m.x) / 2, y:(l.y + m.y) / 2}, n = l, t = !1);
          b.moveTo(l.x, l.y);
          for (f = t ? 1 : 0; f < k.length; f += 1) {
            var u = k[f], D = 0 === f ? l : k[f - 1];
            if (D.onCurve && u.onCurve) {
              b.lineTo(u.x, u.y);
            } else {
              if (D.onCurve && !u.onCurve) {
                n = u;
              } else {
                if (D.onCurve || u.onCurve) {
                  if (D.onCurve || !u.onCurve) {
                    throw Error("Invalid state.");
                  }
                  b.quadraticCurveTo(n.x, n.y, u.x, u.y);
                  n = null;
                } else {
                  b.quadraticCurveTo(D.x, D.y, (D.x + u.x) / 2, (D.y + u.y) / 2), n = u;
                }
              }
            }
          }
          l !== m && (n ? b.quadraticCurveTo(n.x, n.y, l.x, l.y) : b.lineTo(l.x, l.y));
        }
        n = (b.closePath(), b);
      } else {
        n = b;
      }
      return n;
    }
    var q = c("../check"), m = c("../glyphset"), t = c("../parse"), e = c("../path");
    b.parse = function(b, c, e, f) {
      var h, k = new m.GlyphSet(f);
      for (h = 0; h < e.length - 1; h += 1) {
        var l = e[h];
        l !== e[h + 1] ? k.push(h, m.ttfGlyphLoader(f, h, d, b, c + l, n)) : k.push(h, m.glyphLoader(f, h));
      }
      return k;
    };
  }, {"../check":2, "../glyphset":7, "../parse":10, "../path":11}], 18:[function(c, k, b) {
    function f(b, c) {
      b = new t.Parser(b, c);
      c = b.parseUShort();
      for (var d = [], e = 0; c > e; e++) {
        d[b.parseTag()] = {offset:b.parseUShort()};
      }
      return d;
    }
    function d(b, c) {
      b = new t.Parser(b, c);
      var d = b.parseUShort();
      c = b.parseUShort();
      if (1 === d) {
        return b.parseUShortList(c);
      }
      if (2 === d) {
        for (d = []; c--;) {
          for (var e = b.parseUShort(), f = b.parseUShort(), h = b.parseUShort(); f >= e; e++) {
            d[h++] = e;
          }
        }
        return d;
      }
    }
    function h(b, c) {
      b = new t.Parser(b, c);
      c = b.parseUShort();
      if (1 === c) {
        var d = b.parseUShort();
        c = b.parseUShort();
        var e = b.parseUShortList(c);
        return function(b) {
          return e[b - d] || 0;
        };
      }
      if (2 === c) {
        c = b.parseUShort();
        for (var f = [], h = [], k = [], l = 0; c > l; l++) {
          f[l] = b.parseUShort(), h[l] = b.parseUShort(), k[l] = b.parseUShort();
        }
        return function(b) {
          for (var c = 0, d = f.length - 1; d > c;) {
            var e = c + d + 1 >> 1;
            b < f[e] ? d = e - 1 : c = e;
          }
          return f[c] <= b && b <= h[c] ? k[c] || 0 : 0;
        };
      }
    }
    function n(b, c) {
      var e, f = new t.Parser(b, c), k = f.parseUShort(), l = f.parseUShort();
      l = d(b, c + l);
      var m = f.parseUShort(), n = f.parseUShort();
      if (4 === m && 0 === n) {
        var q = {};
        if (1 === k) {
          b = f.parseUShort();
          var C = [];
          c = f.parseOffset16List(b);
          for (k = 0; b > k; k++) {
            var A = c[k], D = q[A];
            if (!D) {
              for (D = {}, f.relativeOffset = A, A = f.parseUShort(); A--;) {
                var E = f.parseUShort();
                m && (e = f.parseShort());
                n && f.parseShort();
                D[E] = e;
              }
            }
            C[l[k]] = D;
          }
          return function(b, c) {
            return (b = C[b]) ? b[c] : void 0;
          };
        }
        if (2 === k) {
          D = f.parseUShort();
          A = f.parseUShort();
          q = f.parseUShort();
          k = f.parseUShort();
          var B = h(b, c + D), G = h(b, c + A), H = [];
          for (b = 0; q > b; b++) {
            for (c = H[b] = [], D = 0; k > D; D++) {
              m && (e = f.parseShort()), n && f.parseShort(), c[D] = e;
            }
          }
          var K = {};
          for (b = 0; b < l.length; b++) {
            K[l[b]] = 1;
          }
          return function(b, c) {
            if (K[b]) {
              return b = B(b), c = G(c), (b = H[b]) ? b[c] : void 0;
            }
          };
        }
      }
    }
    function q(b, c) {
      var d = new t.Parser(b, c), e = d.parseUShort(), f = d.parseUShort(), h = 16 & f, k = d.parseUShort(), l = d.parseOffset16List(k);
      d = {lookupType:e, lookupFlag:f, markFilteringSet:h ? d.parseUShort() : -1};
      if (2 === e) {
        var m = [];
        for (e = 0; k > e; e++) {
          m.push(n(b, c + l[e]));
        }
        d.getKerningValue = function(b, c) {
          for (var d = m.length; d--;) {
            var e = m[d](b, c);
            if (void 0 !== e) {
              return e;
            }
          }
          return 0;
        };
      }
      return d;
    }
    var m = c("../check"), t = c("../parse");
    b.parse = function(b, c, d) {
      var e = new t.Parser(b, c), h = e.parseFixed();
      m.argument(1 === h, "Unsupported GPOS table version.");
      f(b, c + e.parseUShort());
      f(b, c + e.parseUShort());
      var k = e.parseUShort();
      e.relativeOffset = k;
      h = e.parseUShort();
      e = e.parseOffset16List(h);
      c += k;
      for (k = 0; h > k; k++) {
        var l = q(b, c + e[k]);
        2 !== l.lookupType || d.getGposKerningValue || (d.getGposKerningValue = l.getKerningValue);
      }
    };
  }, {"../check":2, "../parse":10}], 19:[function(c, k, b) {
    var f = c("../check"), d = c("../parse").Parser, h = Array(9), n = c("../table");
    h[1] = function() {
      var b = this.offset + this.relativeOffset, c = this.parseUShort();
      return 1 === c ? {substFormat:1, coverage:this.parsePointer(d.coverage), deltaGlyphId:this.parseUShort()} : 2 === c ? {substFormat:2, coverage:this.parsePointer(d.coverage), substitute:this.parseOffset16List()} : void f.assert(!1, "0x" + b.toString(16) + ": lookup type 1 format must be 1 or 2.");
    };
    h[2] = function() {
      var b = this.parseUShort();
      return f.argument(1 === b, "GSUB Multiple Substitution Subtable identifier-format must be 1"), {substFormat:b, coverage:this.parsePointer(d.coverage), sequences:this.parseListOfLists()};
    };
    h[3] = function() {
      var b = this.parseUShort();
      return f.argument(1 === b, "GSUB Alternate Substitution Subtable identifier-format must be 1"), {substFormat:b, coverage:this.parsePointer(d.coverage), alternateSets:this.parseListOfLists()};
    };
    h[4] = function() {
      var b = this.parseUShort();
      return f.argument(1 === b, "GSUB ligature table identifier-format must be 1"), {substFormat:b, coverage:this.parsePointer(d.coverage), ligatureSets:this.parseListOfLists(function() {
        return {ligGlyph:this.parseUShort(), components:this.parseUShortList(this.parseUShort() - 1)};
      })};
    };
    var q = {sequenceIndex:d.uShort, lookupListIndex:d.uShort};
    h[5] = function() {
      var b = this.offset + this.relativeOffset, c = this.parseUShort();
      if (1 === c) {
        return {substFormat:c, coverage:this.parsePointer(d.coverage), ruleSets:this.parseListOfLists(function() {
          var b = this.parseUShort(), c = this.parseUShort();
          return {input:this.parseUShortList(b - 1), lookupRecords:this.parseRecordList(c, q)};
        })};
      }
      if (2 === c) {
        return {substFormat:c, coverage:this.parsePointer(d.coverage), classDef:this.parsePointer(d.classDef), classSets:this.parseListOfLists(function() {
          var b = this.parseUShort(), c = this.parseUShort();
          return {classes:this.parseUShortList(b - 1), lookupRecords:this.parseRecordList(c, q)};
        })};
      }
      if (3 === c) {
        b = this.parseUShort();
        var h = this.parseUShort();
        return {substFormat:c, coverages:this.parseList(b, d.pointer(d.coverage)), lookupRecords:this.parseRecordList(h, q)};
      }
      f.assert(!1, "0x" + b.toString(16) + ": lookup type 5 format must be 1, 2 or 3.");
    };
    h[6] = function() {
      var b = this.offset + this.relativeOffset, c = this.parseUShort();
      return 1 === c ? {substFormat:1, coverage:this.parsePointer(d.coverage), chainRuleSets:this.parseListOfLists(function() {
        return {backtrack:this.parseUShortList(), input:this.parseUShortList(this.parseShort() - 1), lookahead:this.parseUShortList(), lookupRecords:this.parseRecordList(q)};
      })} : 2 === c ? {substFormat:2, coverage:this.parsePointer(d.coverage), backtrackClassDef:this.parsePointer(d.classDef), inputClassDef:this.parsePointer(d.classDef), lookaheadClassDef:this.parsePointer(d.classDef), chainClassSet:this.parseListOfLists(function() {
        return {backtrack:this.parseUShortList(), input:this.parseUShortList(this.parseShort() - 1), lookahead:this.parseUShortList(), lookupRecords:this.parseRecordList(q)};
      })} : 3 === c ? {substFormat:3, backtrackCoverage:this.parseList(d.pointer(d.coverage)), inputCoverage:this.parseList(d.pointer(d.coverage)), lookaheadCoverage:this.parseList(d.pointer(d.coverage)), lookupRecords:this.parseRecordList(q)} : void f.assert(!1, "0x" + b.toString(16) + ": lookup type 6 format must be 1, 2 or 3.");
    };
    h[7] = function() {
      var b = this.parseUShort();
      f.argument(1 === b, "GSUB Extension Substitution subtable identifier-format must be 1");
      b = this.parseUShort();
      var c = new d(this.data, this.offset + this.parseULong());
      return {substFormat:1, lookupType:b, extension:h[b].call(c)};
    };
    h[8] = function() {
      var b = this.parseUShort();
      return f.argument(1 === b, "GSUB Reverse Chaining Contextual Single Substitution Subtable identifier-format must be 1"), {substFormat:b, coverage:this.parsePointer(d.coverage), backtrackCoverage:this.parseList(d.pointer(d.coverage)), lookaheadCoverage:this.parseList(d.pointer(d.coverage)), substitutes:this.parseUShortList()};
    };
    var m = Array(9);
    m[1] = function(b) {
      return 1 === b.substFormat ? new n.Table("substitutionTable", [{name:"substFormat", type:"USHORT", value:1}, {name:"coverage", type:"TABLE", value:new n.Coverage(b.coverage)}, {name:"deltaGlyphID", type:"USHORT", value:b.deltaGlyphId}]) : new n.Table("substitutionTable", [{name:"substFormat", type:"USHORT", value:2}, {name:"coverage", type:"TABLE", value:new n.Coverage(b.coverage)}].concat(n.ushortList("substitute", b.substitute)));
    };
    m[3] = function(b) {
      return f.assert(1 === b.substFormat, "Lookup type 3 substFormat must be 1."), new n.Table("substitutionTable", [{name:"substFormat", type:"USHORT", value:1}, {name:"coverage", type:"TABLE", value:new n.Coverage(b.coverage)}].concat(n.tableList("altSet", b.alternateSets, function(b) {
        return new n.Table("alternateSetTable", n.ushortList("alternate", b));
      })));
    };
    m[4] = function(b) {
      return f.assert(1 === b.substFormat, "Lookup type 4 substFormat must be 1."), new n.Table("substitutionTable", [{name:"substFormat", type:"USHORT", value:1}, {name:"coverage", type:"TABLE", value:new n.Coverage(b.coverage)}].concat(n.tableList("ligSet", b.ligatureSets, function(b) {
        return new n.Table("ligatureSetTable", n.tableList("ligature", b, function(b) {
          return new n.Table("ligatureTable", [{name:"ligGlyph", type:"USHORT", value:b.ligGlyph}].concat(n.ushortList("component", b.components, b.components.length + 1)));
        }));
      })));
    };
    b.parse = function(b, c) {
      b = new d(b, c || 0);
      c = b.parseVersion();
      return f.argument(1 === c, "Unsupported GSUB table version."), {version:c, scripts:b.parseScriptList(), features:b.parseFeatureList(), lookups:b.parseLookupList(h)};
    };
    b.make = function(b) {
      return new n.Table("GSUB", [{name:"version", type:"ULONG", value:65536}, {name:"scripts", type:"TABLE", value:new n.ScriptList(b.scripts)}, {name:"features", type:"TABLE", value:new n.FeatureList(b.features)}, {name:"lookups", type:"TABLE", value:new n.LookupList(b.lookups, m)}]);
    };
  }, {"../check":2, "../parse":10, "../table":13}], 20:[function(c, k, b) {
    var f = c("../check"), d = c("../parse"), h = c("../table");
    b.parse = function(b, c) {
      var h = {};
      b = new d.Parser(b, c);
      return h.version = b.parseVersion(), h.fontRevision = Math.round(1E3 * b.parseFixed()) / 1E3, h.checkSumAdjustment = b.parseULong(), h.magicNumber = b.parseULong(), f.argument(1594834165 === h.magicNumber, "Font header has wrong magic number."), h.flags = b.parseUShort(), h.unitsPerEm = b.parseUShort(), h.created = b.parseLongDateTime(), h.modified = b.parseLongDateTime(), h.xMin = b.parseShort(), h.yMin = b.parseShort(), h.xMax = b.parseShort(), h.yMax = b.parseShort(), h.macStyle = b.parseUShort(), 
      h.lowestRecPPEM = b.parseUShort(), h.fontDirectionHint = b.parseShort(), h.indexToLocFormat = b.parseShort(), h.glyphDataFormat = b.parseShort(), h;
    };
    b.make = function(b) {
      var c = Math.round((new Date).getTime() / 1E3) + 2082844800, d = c;
      return b.createdTimestamp && (d = b.createdTimestamp + 2082844800), new h.Table("head", [{name:"version", type:"FIXED", value:65536}, {name:"fontRevision", type:"FIXED", value:65536}, {name:"checkSumAdjustment", type:"ULONG", value:0}, {name:"magicNumber", type:"ULONG", value:1594834165}, {name:"flags", type:"USHORT", value:0}, {name:"unitsPerEm", type:"USHORT", value:1E3}, {name:"created", type:"LONGDATETIME", value:d}, {name:"modified", type:"LONGDATETIME", value:c}, {name:"xMin", type:"SHORT", 
      value:0}, {name:"yMin", type:"SHORT", value:0}, {name:"xMax", type:"SHORT", value:0}, {name:"yMax", type:"SHORT", value:0}, {name:"macStyle", type:"USHORT", value:0}, {name:"lowestRecPPEM", type:"USHORT", value:0}, {name:"fontDirectionHint", type:"SHORT", value:2}, {name:"indexToLocFormat", type:"SHORT", value:0}, {name:"glyphDataFormat", type:"SHORT", value:0}], b);
    };
  }, {"../check":2, "../parse":10, "../table":13}], 21:[function(c, k, b) {
    var f = c("../parse"), d = c("../table");
    b.parse = function(b, c) {
      var d = {};
      b = new f.Parser(b, c);
      return d.version = b.parseVersion(), d.ascender = b.parseShort(), d.descender = b.parseShort(), d.lineGap = b.parseShort(), d.advanceWidthMax = b.parseUShort(), d.minLeftSideBearing = b.parseShort(), d.minRightSideBearing = b.parseShort(), d.xMaxExtent = b.parseShort(), d.caretSlopeRise = b.parseShort(), d.caretSlopeRun = b.parseShort(), d.caretOffset = b.parseShort(), b.relativeOffset += 8, d.metricDataFormat = b.parseShort(), d.numberOfHMetrics = b.parseUShort(), d;
    };
    b.make = function(b) {
      return new d.Table("hhea", [{name:"version", type:"FIXED", value:65536}, {name:"ascender", type:"FWORD", value:0}, {name:"descender", type:"FWORD", value:0}, {name:"lineGap", type:"FWORD", value:0}, {name:"advanceWidthMax", type:"UFWORD", value:0}, {name:"minLeftSideBearing", type:"FWORD", value:0}, {name:"minRightSideBearing", type:"FWORD", value:0}, {name:"xMaxExtent", type:"FWORD", value:0}, {name:"caretSlopeRise", type:"SHORT", value:1}, {name:"caretSlopeRun", type:"SHORT", value:0}, {name:"caretOffset", 
      type:"SHORT", value:0}, {name:"reserved1", type:"SHORT", value:0}, {name:"reserved2", type:"SHORT", value:0}, {name:"reserved3", type:"SHORT", value:0}, {name:"reserved4", type:"SHORT", value:0}, {name:"metricDataFormat", type:"SHORT", value:0}, {name:"numberOfHMetrics", type:"USHORT", value:0}], b);
    };
  }, {"../parse":10, "../table":13}], 22:[function(c, k, b) {
    var f = c("../parse"), d = c("../table");
    b.parse = function(b, c, d, k, t) {
      var e, h;
      b = new f.Parser(b, c);
      for (c = 0; k > c; c += 1) {
        d > c && (e = b.parseUShort(), h = b.parseShort());
        var m = t.get(c);
        m.advanceWidth = e;
        m.leftSideBearing = h;
      }
    };
    b.make = function(b) {
      for (var c = new d.Table("hmtx", []), f = 0; f < b.length; f += 1) {
        var h = b.get(f), k = h.leftSideBearing || 0;
        c.fields.push({name:"advanceWidth_" + f, type:"USHORT", value:h.advanceWidth || 0});
        c.fields.push({name:"leftSideBearing_" + f, type:"SHORT", value:k});
      }
      return c;
    };
  }, {"../parse":10, "../table":13}], 23:[function(c, k, b) {
    var f = c("../check"), d = c("../parse");
    b.parse = function(b, c) {
      var h = {};
      b = new d.Parser(b, c);
      c = b.parseUShort();
      f.argument(0 === c, "Unsupported kern table version.");
      b.skip("uShort", 1);
      c = b.parseUShort();
      f.argument(0 === c, "Unsupported kern sub-table version.");
      b.skip("uShort", 2);
      c = b.parseUShort();
      b.skip("uShort", 3);
      for (var k = 0; c > k; k += 1) {
        var n = b.parseUShort(), e = b.parseUShort(), l = b.parseShort();
        h[n + "," + e] = l;
      }
      return h;
    };
  }, {"../check":2, "../parse":10}], 24:[function(c, k, b) {
    var f = c("../parse");
    b.parse = function(b, c, k, q) {
      b = new f.Parser(b, c);
      c = q ? b.parseUShort : b.parseULong;
      for (var d = [], h = 0; k + 1 > h; h += 1) {
        var e = c.call(b);
        q && (e *= 2);
        d.push(e);
      }
      return d;
    };
  }, {"../parse":10}], 25:[function(c, k, b) {
    var f = c("../check"), d = c("../parse"), h = c("../table");
    b.make = function(b) {
      for (var c = new h.Table("ltag", [{name:"version", type:"ULONG", value:1}, {name:"flags", type:"ULONG", value:0}, {name:"numTags", type:"ULONG", value:b.length}]), d = "", f = 12 + 4 * b.length, e = 0; e < b.length; ++e) {
        var k = d.indexOf(b[e]);
        0 > k && (k = d.length, d += b[e]);
        c.fields.push({name:"offset " + e, type:"USHORT", value:f + k});
        c.fields.push({name:"length " + e, type:"USHORT", value:b[e].length});
      }
      return c.fields.push({name:"stringPool", type:"CHARARRAY", value:d}), c;
    };
    b.parse = function(b, c) {
      var h = new d.Parser(b, c), k = h.parseULong();
      f.argument(1 === k, "Unsupported ltag table version.");
      h.skip("uLong", 1);
      k = h.parseULong();
      for (var e = [], l = 0; k > l; l++) {
        for (var n = "", q = c + h.parseUShort(), y = h.parseUShort(), x = q; q + y > x; ++x) {
          n += String.fromCharCode(b.getInt8(x));
        }
        e.push(n);
      }
      return e;
    };
  }, {"../check":2, "../parse":10, "../table":13}], 26:[function(c, k, b) {
    var f = c("../parse"), d = c("../table");
    b.parse = function(b, c) {
      var d = {};
      b = new f.Parser(b, c);
      return d.version = b.parseVersion(), d.numGlyphs = b.parseUShort(), 1 === d.version && (d.maxPoints = b.parseUShort(), d.maxContours = b.parseUShort(), d.maxCompositePoints = b.parseUShort(), d.maxCompositeContours = b.parseUShort(), d.maxZones = b.parseUShort(), d.maxTwilightPoints = b.parseUShort(), d.maxStorage = b.parseUShort(), d.maxFunctionDefs = b.parseUShort(), d.maxInstructionDefs = b.parseUShort(), d.maxStackElements = b.parseUShort(), d.maxSizeOfInstructions = b.parseUShort(), d.maxComponentElements = 
      b.parseUShort(), d.maxComponentDepth = b.parseUShort()), d;
    };
    b.make = function(b) {
      return new d.Table("maxp", [{name:"version", type:"FIXED", value:20480}, {name:"numGlyphs", type:"USHORT", value:b}]);
    };
  }, {"../parse":10, "../table":13}], 27:[function(c, k, b) {
    var f = c("../types").decode, d = c("../check"), h = c("../parse"), n = c("../table");
    b.parse = function(b, c) {
      var k = new h.Parser(b, c), e = k.parseULong();
      d.argument(1 === e, "Unsupported META table version.");
      k.parseULong();
      k.parseULong();
      e = k.parseULong();
      for (var l = {}, m = 0; e > m; m++) {
        var n = k.parseTag(), q = k.parseULong(), x = k.parseULong();
        q = f.UTF8(b, c + q, x);
        l[n] = q;
      }
      return l;
    };
    b.make = function(b) {
      var c = Object.keys(b).length, d = "", e = 16 + 12 * c;
      c = new n.Table("meta", [{name:"version", type:"ULONG", value:1}, {name:"flags", type:"ULONG", value:0}, {name:"offset", type:"ULONG", value:e}, {name:"numTags", type:"ULONG", value:c}]);
      for (var f in b) {
        var h = d.length;
        d += b[f];
        c.fields.push({name:"tag " + f, type:"TAG", value:f});
        c.fields.push({name:"offset " + f, type:"ULONG", value:e + h});
        c.fields.push({name:"length " + f, type:"ULONG", value:b[f].length});
      }
      return c.fields.push({name:"stringPool", type:"CHARARRAY", value:d}), c;
    };
  }, {"../check":2, "../parse":10, "../table":13, "../types":32}], 28:[function(c, k, b) {
    function f(b, c, d) {
      switch(b) {
        case 0:
          return x;
        case 1:
          return v[d] || p[c];
        case 3:
          if (1 === c || 10 === c) {
            return x;
          }
      }
    }
    function d(b) {
      var c = {}, d;
      for (d in b) {
        c[b[d]] = parseInt(d);
      }
      return c;
    }
    function h(b, c, d, f, h, k) {
      return new e.Record("NameRecord", [{name:"platformID", type:"USHORT", value:b}, {name:"encodingID", type:"USHORT", value:c}, {name:"languageID", type:"USHORT", value:d}, {name:"nameID", type:"USHORT", value:f}, {name:"length", type:"USHORT", value:h}, {name:"offset", type:"USHORT", value:k}]);
    }
    function n(b, c) {
      a: {
        var d = b.length;
        var e = c.length - d + 1, f = 0;
        b: for (; e > f; f++) {
          for (; e > f;) {
            for (var h = 0; d > h; h++) {
              if (c[f + h] !== b[h]) {
                continue b;
              }
            }
            d = f;
            break a;
          }
        }
        d = -1;
      }
      if (0 > d) {
        for (d = c.length, e = 0, f = b.length; f > e; ++e) {
          c.push(b[e]);
        }
      }
      return d;
    }
    k = c("../types");
    var q = k.decode, m = k.encode, t = c("../parse"), e = c("../table"), l = "copyright fontFamily fontSubfamily uniqueID fullName version postScriptName trademark manufacturer designer description manufacturerURL designerURL license licenseURL reserved preferredFamily preferredSubfamily compatibleFullName sampleText postScriptFindFontName wwsFamily wwsSubfamily".split(" "), u = {0:"en", 1:"fr", 2:"de", 3:"it", 4:"nl", 5:"sv", 6:"es", 7:"da", 8:"pt", 9:"no", 10:"he", 11:"ja", 12:"ar", 13:"fi", 14:"el", 
    15:"is", 16:"mt", 17:"tr", 18:"hr", 19:"zh-Hant", 20:"ur", 21:"hi", 22:"th", 23:"ko", 24:"lt", 25:"pl", 26:"hu", 27:"es", 28:"lv", 29:"se", 30:"fo", 31:"fa", 32:"ru", 33:"zh", 34:"nl-BE", 35:"ga", 36:"sq", 37:"ro", 38:"cz", 39:"sk", 40:"si", 41:"yi", 42:"sr", 43:"mk", 44:"bg", 45:"uk", 46:"be", 47:"uz", 48:"kk", 49:"az-Cyrl", 50:"az-Arab", 51:"hy", 52:"ka", 53:"mo", 54:"ky", 55:"tg", 56:"tk", 57:"mn-CN", 58:"mn", 59:"ps", 60:"ks", 61:"ku", 62:"sd", 63:"bo", 64:"ne", 65:"sa", 66:"mr", 67:"bn", 
    68:"as", 69:"gu", 70:"pa", 71:"or", 72:"ml", 73:"kn", 74:"ta", 75:"te", 76:"si", 77:"my", 78:"km", 79:"lo", 80:"vi", 81:"id", 82:"tl", 83:"ms", 84:"ms-Arab", 85:"am", 86:"ti", 87:"om", 88:"so", 89:"sw", 90:"rw", 91:"rn", 92:"ny", 93:"mg", 94:"eo", 128:"cy", 129:"eu", 130:"ca", 131:"la", 132:"qu", 133:"gn", 134:"ay", 135:"tt", 136:"ug", 137:"dz", 138:"jv", 139:"su", 140:"gl", 141:"af", 142:"br", 143:"iu", 144:"gd", 145:"gv", 146:"ga", 147:"to", 148:"el-polyton", 149:"kl", 150:"az", 151:"nn"}, 
    w = {0:0, 1:0, 2:0, 3:0, 4:0, 5:0, 6:0, 7:0, 8:0, 9:0, 10:5, 11:1, 12:4, 13:0, 14:6, 15:0, 16:0, 17:0, 18:0, 19:2, 20:4, 21:9, 22:21, 23:3, 24:29, 25:29, 26:29, 27:29, 28:29, 29:0, 30:0, 31:4, 32:7, 33:25, 34:0, 35:0, 36:0, 37:0, 38:29, 39:29, 40:0, 41:5, 42:7, 43:7, 44:7, 45:7, 46:7, 47:7, 48:7, 49:7, 50:4, 51:24, 52:23, 53:7, 54:7, 55:7, 56:7, 57:27, 58:7, 59:4, 60:4, 61:4, 62:4, 63:26, 64:9, 65:9, 66:9, 67:13, 68:13, 69:11, 70:10, 71:12, 72:17, 73:16, 74:14, 75:15, 76:18, 77:19, 78:20, 79:22, 
    80:30, 81:0, 82:0, 83:0, 84:4, 85:28, 86:28, 87:28, 88:0, 89:0, 90:0, 91:0, 92:0, 93:0, 94:0, 128:0, 129:0, 130:0, 131:0, 132:0, 133:0, 134:0, 135:7, 136:4, 137:26, 138:0, 139:0, 140:0, 141:0, 142:0, 143:28, 144:0, 145:0, 146:0, 147:0, 148:6, 149:0, 150:0, 151:0}, y = {1078:"af", 1052:"sq", 1156:"gsw", 1118:"am", 5121:"ar-DZ", 15361:"ar-BH", 3073:"ar", 2049:"ar-IQ", 11265:"ar-JO", 13313:"ar-KW", 12289:"ar-LB", 4097:"ar-LY", 6145:"ary", 8193:"ar-OM", 16385:"ar-QA", 1025:"ar-SA", 10241:"ar-SY", 
    7169:"aeb", 14337:"ar-AE", 9217:"ar-YE", 1067:"hy", 1101:"as", 2092:"az-Cyrl", 1068:"az", 1133:"ba", 1069:"eu", 1059:"be", 2117:"bn", 1093:"bn-IN", 8218:"bs-Cyrl", 5146:"bs", 1150:"br", 1026:"bg", 1027:"ca", 3076:"zh-HK", 5124:"zh-MO", 2052:"zh", 4100:"zh-SG", 1028:"zh-TW", 1155:"co", 1050:"hr", 4122:"hr-BA", 1029:"cs", 1030:"da", 1164:"prs", 1125:"dv", 2067:"nl-BE", 1043:"nl", 3081:"en-AU", 10249:"en-BZ", 4105:"en-CA", 9225:"en-029", 16393:"en-IN", 6153:"en-IE", 8201:"en-JM", 17417:"en-MY", 
    5129:"en-NZ", 13321:"en-PH", 18441:"en-SG", 7177:"en-ZA", 11273:"en-TT", 2057:"en-GB", 1033:"en", 12297:"en-ZW", 1061:"et", 1080:"fo", 1124:"fil", 1035:"fi", 2060:"fr-BE", 3084:"fr-CA", 1036:"fr", 5132:"fr-LU", 6156:"fr-MC", 4108:"fr-CH", 1122:"fy", 1110:"gl", 1079:"ka", 3079:"de-AT", 1031:"de", 5127:"de-LI", 4103:"de-LU", 2055:"de-CH", 1032:"el", 1135:"kl", 1095:"gu", 1128:"ha", 1037:"he", 1081:"hi", 1038:"hu", 1039:"is", 1136:"ig", 1057:"id", 1117:"iu", 2141:"iu-Latn", 2108:"ga", 1076:"xh", 
    1077:"zu", 1040:"it", 2064:"it-CH", 1041:"ja", 1099:"kn", 1087:"kk", 1107:"km", 1158:"quc", 1159:"rw", 1089:"sw", 1111:"kok", 1042:"ko", 1088:"ky", 1108:"lo", 1062:"lv", 1063:"lt", 2094:"dsb", 1134:"lb", 1071:"mk", 2110:"ms-BN", 1086:"ms", 1100:"ml", 1082:"mt", 1153:"mi", 1146:"arn", 1102:"mr", 1148:"moh", 1104:"mn", 2128:"mn-CN", 1121:"ne", 1044:"nb", 2068:"nn", 1154:"oc", 1096:"or", 1123:"ps", 1045:"pl", 1046:"pt", 2070:"pt-PT", 1094:"pa", 1131:"qu-BO", 2155:"qu-EC", 3179:"qu", 1048:"ro", 1047:"rm", 
    1049:"ru", 9275:"smn", 4155:"smj-NO", 5179:"smj", 3131:"se-FI", 1083:"se", 2107:"se-SE", 8251:"sms", 6203:"sma-NO", 7227:"sms", 1103:"sa", 7194:"sr-Cyrl-BA", 3098:"sr", 6170:"sr-Latn-BA", 2074:"sr-Latn", 1132:"nso", 1074:"tn", 1115:"si", 1051:"sk", 1060:"sl", 11274:"es-AR", 16394:"es-BO", 13322:"es-CL", 9226:"es-CO", 5130:"es-CR", 7178:"es-DO", 12298:"es-EC", 17418:"es-SV", 4106:"es-GT", 18442:"es-HN", 2058:"es-MX", 19466:"es-NI", 6154:"es-PA", 15370:"es-PY", 10250:"es-PE", 20490:"es-PR", 3082:"es", 
    1034:"es", 21514:"es-US", 14346:"es-UY", 8202:"es-VE", 2077:"sv-FI", 1053:"sv", 1114:"syr", 1064:"tg", 2143:"tzm", 1097:"ta", 1092:"tt", 1098:"te", 1054:"th", 1105:"bo", 1055:"tr", 1090:"tk", 1152:"ug", 1058:"uk", 1070:"hsb", 1056:"ur", 2115:"uz-Cyrl", 1091:"uz", 1066:"vi", 1106:"cy", 1160:"wo", 1157:"sah", 1144:"ii", 1130:"yo"}, x = "utf-16", p = {0:"macintosh", 1:"x-mac-japanese", 2:"x-mac-chinesetrad", 3:"x-mac-korean", 6:"x-mac-greek", 7:"x-mac-cyrillic", 9:"x-mac-devanagai", 10:"x-mac-gurmukhi", 
    11:"x-mac-gujarati", 12:"x-mac-oriya", 13:"x-mac-bengali", 14:"x-mac-tamil", 15:"x-mac-telugu", 16:"x-mac-kannada", 17:"x-mac-malayalam", 18:"x-mac-sinhalese", 19:"x-mac-burmese", 20:"x-mac-khmer", 21:"x-mac-thai", 22:"x-mac-lao", 23:"x-mac-georgian", 24:"x-mac-armenian", 25:"x-mac-chinesesimp", 26:"x-mac-tibetan", 27:"x-mac-mongolian", 28:"x-mac-ethiopic", 29:"x-mac-ce", 30:"x-mac-vietnamese", 31:"x-mac-extarabic"}, v = {15:"x-mac-icelandic", 17:"x-mac-turkish", 18:"x-mac-croatian", 24:"x-mac-ce", 
    25:"x-mac-ce", 26:"x-mac-ce", 27:"x-mac-ce", 28:"x-mac-ce", 30:"x-mac-icelandic", 37:"x-mac-romanian", 38:"x-mac-ce", 39:"x-mac-ce", 40:"x-mac-ce", 143:"x-mac-inuit", 146:"x-mac-gaelic"};
    b.parse = function(b, c, d) {
      var e = {};
      c = new t.Parser(b, c);
      for (var h = c.parseUShort(), k = c.parseUShort(), m = c.offset + c.parseUShort(), n = 0; k > n; n++) {
        var p = c.parseUShort(), w = c.parseUShort(), v = c.parseUShort(), z = c.parseUShort();
        z = l[z] || z;
        var A = c.parseUShort(), C = c.parseUShort();
        a: {
          switch(p) {
            case 0:
              if (65535 === v) {
                var aa = "und";
                break a;
              }
              if (d) {
                aa = d[v];
                break a;
              }
              break;
            case 1:
              aa = u[v];
              break a;
            case 3:
              aa = y[v];
              break a;
          }
          aa = void 0;
        }
        p = f(p, w, v);
        void 0 !== p && void 0 !== aa && (p = p === x ? q.UTF16(b, m + C, A) : q.MACSTRING(b, m + C, A, p)) && (w = e[z], void 0 === w && (w = e[z] = {}), w[aa] = p);
      }
      return 1 === h && c.parseUShort(), e;
    };
    b.make = function(b, c) {
      var k, p = [], q = {}, t = d(l);
      for (x in b) {
        var v = t[x];
        if (void 0 === v && (v = x), k = parseInt(v), isNaN(k)) {
          throw Error('Name table entry "' + x + '" does not exist, see nameTableNames for complete list.');
        }
        q[k] = b[x];
        p.push(k);
      }
      var x = d(u);
      v = d(y);
      b = [];
      t = [];
      for (var z = 0; z < p.length; z++) {
        k = p[z];
        var C = q[k], L;
        for (L in C) {
          var R = C[L], J = 1, Q = x[L], aa = w[Q], V = f(J, aa, Q);
          V = m.MACSTRING(R, V);
          void 0 === V && (J = 0, Q = c.indexOf(L), 0 > Q && (Q = c.length, c.push(L)), aa = 4, V = m.UTF16(R));
          var N = n(V, t);
          b.push(h(J, aa, Q, k, V.length, N));
          J = v[L];
          void 0 !== J && (R = m.UTF16(R), Q = n(R, t), b.push(h(3, 1, J, k, R.length, Q)));
        }
      }
      b.sort(function(b, c) {
        return b.platformID - c.platformID || b.encodingID - c.encodingID || b.languageID - c.languageID || b.nameID - c.nameID;
      });
      c = new e.Table("name", [{name:"format", type:"USHORT", value:0}, {name:"count", type:"USHORT", value:b.length}, {name:"stringOffset", type:"USHORT", value:6 + 12 * b.length}]);
      for (k = 0; k < b.length; k++) {
        c.fields.push({name:"record_" + k, type:"RECORD", value:b[k]});
      }
      return c.fields.push({name:"strings", type:"LITERAL", value:t}), c;
    };
  }, {"../parse":10, "../table":13, "../types":32}], 29:[function(c, k, b) {
    var f = c("../parse"), d = c("../table"), h = [{begin:0, end:127}, {begin:128, end:255}, {begin:256, end:383}, {begin:384, end:591}, {begin:592, end:687}, {begin:688, end:767}, {begin:768, end:879}, {begin:880, end:1023}, {begin:11392, end:11519}, {begin:1024, end:1279}, {begin:1328, end:1423}, {begin:1424, end:1535}, {begin:42240, end:42559}, {begin:1536, end:1791}, {begin:1984, end:2047}, {begin:2304, end:2431}, {begin:2432, end:2559}, {begin:2560, end:2687}, {begin:2688, end:2815}, {begin:2816, 
    end:2943}, {begin:2944, end:3071}, {begin:3072, end:3199}, {begin:3200, end:3327}, {begin:3328, end:3455}, {begin:3584, end:3711}, {begin:3712, end:3839}, {begin:4256, end:4351}, {begin:6912, end:7039}, {begin:4352, end:4607}, {begin:7680, end:7935}, {begin:7936, end:8191}, {begin:8192, end:8303}, {begin:8304, end:8351}, {begin:8352, end:8399}, {begin:8400, end:8447}, {begin:8448, end:8527}, {begin:8528, end:8591}, {begin:8592, end:8703}, {begin:8704, end:8959}, {begin:8960, end:9215}, {begin:9216, 
    end:9279}, {begin:9280, end:9311}, {begin:9312, end:9471}, {begin:9472, end:9599}, {begin:9600, end:9631}, {begin:9632, end:9727}, {begin:9728, end:9983}, {begin:9984, end:10175}, {begin:12288, end:12351}, {begin:12352, end:12447}, {begin:12448, end:12543}, {begin:12544, end:12591}, {begin:12592, end:12687}, {begin:43072, end:43135}, {begin:12800, end:13055}, {begin:13056, end:13311}, {begin:44032, end:55215}, {begin:55296, end:57343}, {begin:67840, end:67871}, {begin:19968, end:40959}, {begin:57344, 
    end:63743}, {begin:12736, end:12783}, {begin:64256, end:64335}, {begin:64336, end:65023}, {begin:65056, end:65071}, {begin:65040, end:65055}, {begin:65104, end:65135}, {begin:65136, end:65279}, {begin:65280, end:65519}, {begin:65520, end:65535}, {begin:3840, end:4095}, {begin:1792, end:1871}, {begin:1920, end:1983}, {begin:3456, end:3583}, {begin:4096, end:4255}, {begin:4608, end:4991}, {begin:5024, end:5119}, {begin:5120, end:5759}, {begin:5760, end:5791}, {begin:5792, end:5887}, {begin:6016, 
    end:6143}, {begin:6144, end:6319}, {begin:10240, end:10495}, {begin:40960, end:42127}, {begin:5888, end:5919}, {begin:66304, end:66351}, {begin:66352, end:66383}, {begin:66560, end:66639}, {begin:118784, end:119039}, {begin:119808, end:120831}, {begin:1044480, end:1048573}, {begin:65024, end:65039}, {begin:917504, end:917631}, {begin:6400, end:6479}, {begin:6480, end:6527}, {begin:6528, end:6623}, {begin:6656, end:6687}, {begin:11264, end:11359}, {begin:11568, end:11647}, {begin:19904, end:19967}, 
    {begin:43008, end:43055}, {begin:65536, end:65663}, {begin:65856, end:65935}, {begin:66432, end:66463}, {begin:66464, end:66527}, {begin:66640, end:66687}, {begin:66688, end:66735}, {begin:67584, end:67647}, {begin:68096, end:68191}, {begin:119552, end:119647}, {begin:73728, end:74751}, {begin:119648, end:119679}, {begin:7040, end:7103}, {begin:7168, end:7247}, {begin:7248, end:7295}, {begin:43136, end:43231}, {begin:43264, end:43311}, {begin:43312, end:43359}, {begin:43520, end:43615}, {begin:65936, 
    end:65999}, {begin:66E3, end:66047}, {begin:66208, end:66271}, {begin:127024, end:127135}];
    b.unicodeRanges = h;
    b.getUnicodeRange = function(b) {
      for (var c = 0; c < h.length; c += 1) {
        var d = h[c];
        if (b >= d.begin && b < d.end) {
          return c;
        }
      }
      return -1;
    };
    b.parse = function(b, c) {
      var d = {};
      b = new f.Parser(b, c);
      d.version = b.parseUShort();
      d.xAvgCharWidth = b.parseShort();
      d.usWeightClass = b.parseUShort();
      d.usWidthClass = b.parseUShort();
      d.fsType = b.parseUShort();
      d.ySubscriptXSize = b.parseShort();
      d.ySubscriptYSize = b.parseShort();
      d.ySubscriptXOffset = b.parseShort();
      d.ySubscriptYOffset = b.parseShort();
      d.ySuperscriptXSize = b.parseShort();
      d.ySuperscriptYSize = b.parseShort();
      d.ySuperscriptXOffset = b.parseShort();
      d.ySuperscriptYOffset = b.parseShort();
      d.yStrikeoutSize = b.parseShort();
      d.yStrikeoutPosition = b.parseShort();
      d.sFamilyClass = b.parseShort();
      d.panose = [];
      for (c = 0; 10 > c; c++) {
        d.panose[c] = b.parseByte();
      }
      return d.ulUnicodeRange1 = b.parseULong(), d.ulUnicodeRange2 = b.parseULong(), d.ulUnicodeRange3 = b.parseULong(), d.ulUnicodeRange4 = b.parseULong(), d.achVendID = String.fromCharCode(b.parseByte(), b.parseByte(), b.parseByte(), b.parseByte()), d.fsSelection = b.parseUShort(), d.usFirstCharIndex = b.parseUShort(), d.usLastCharIndex = b.parseUShort(), d.sTypoAscender = b.parseShort(), d.sTypoDescender = b.parseShort(), d.sTypoLineGap = b.parseShort(), d.usWinAscent = b.parseUShort(), d.usWinDescent = 
      b.parseUShort(), 1 <= d.version && (d.ulCodePageRange1 = b.parseULong(), d.ulCodePageRange2 = b.parseULong()), 2 <= d.version && (d.sxHeight = b.parseShort(), d.sCapHeight = b.parseShort(), d.usDefaultChar = b.parseUShort(), d.usBreakChar = b.parseUShort(), d.usMaxContent = b.parseUShort()), d;
    };
    b.make = function(b) {
      return new d.Table("OS/2", [{name:"version", type:"USHORT", value:3}, {name:"xAvgCharWidth", type:"SHORT", value:0}, {name:"usWeightClass", type:"USHORT", value:0}, {name:"usWidthClass", type:"USHORT", value:0}, {name:"fsType", type:"USHORT", value:0}, {name:"ySubscriptXSize", type:"SHORT", value:650}, {name:"ySubscriptYSize", type:"SHORT", value:699}, {name:"ySubscriptXOffset", type:"SHORT", value:0}, {name:"ySubscriptYOffset", type:"SHORT", value:140}, {name:"ySuperscriptXSize", type:"SHORT", 
      value:650}, {name:"ySuperscriptYSize", type:"SHORT", value:699}, {name:"ySuperscriptXOffset", type:"SHORT", value:0}, {name:"ySuperscriptYOffset", type:"SHORT", value:479}, {name:"yStrikeoutSize", type:"SHORT", value:49}, {name:"yStrikeoutPosition", type:"SHORT", value:258}, {name:"sFamilyClass", type:"SHORT", value:0}, {name:"bFamilyType", type:"BYTE", value:0}, {name:"bSerifStyle", type:"BYTE", value:0}, {name:"bWeight", type:"BYTE", value:0}, {name:"bProportion", type:"BYTE", value:0}, {name:"bContrast", 
      type:"BYTE", value:0}, {name:"bStrokeVariation", type:"BYTE", value:0}, {name:"bArmStyle", type:"BYTE", value:0}, {name:"bLetterform", type:"BYTE", value:0}, {name:"bMidline", type:"BYTE", value:0}, {name:"bXHeight", type:"BYTE", value:0}, {name:"ulUnicodeRange1", type:"ULONG", value:0}, {name:"ulUnicodeRange2", type:"ULONG", value:0}, {name:"ulUnicodeRange3", type:"ULONG", value:0}, {name:"ulUnicodeRange4", type:"ULONG", value:0}, {name:"achVendID", type:"CHARARRAY", value:"XXXX"}, {name:"fsSelection", 
      type:"USHORT", value:0}, {name:"usFirstCharIndex", type:"USHORT", value:0}, {name:"usLastCharIndex", type:"USHORT", value:0}, {name:"sTypoAscender", type:"SHORT", value:0}, {name:"sTypoDescender", type:"SHORT", value:0}, {name:"sTypoLineGap", type:"SHORT", value:0}, {name:"usWinAscent", type:"USHORT", value:0}, {name:"usWinDescent", type:"USHORT", value:0}, {name:"ulCodePageRange1", type:"ULONG", value:0}, {name:"ulCodePageRange2", type:"ULONG", value:0}, {name:"sxHeight", type:"SHORT", value:0}, 
      {name:"sCapHeight", type:"SHORT", value:0}, {name:"usDefaultChar", type:"USHORT", value:0}, {name:"usBreakChar", type:"USHORT", value:0}, {name:"usMaxContext", type:"USHORT", value:0}], b);
    };
  }, {"../parse":10, "../table":13}], 30:[function(c, k, b) {
    var f = c("../encoding"), d = c("../parse"), h = c("../table");
    b.parse = function(b, c) {
      var h = {};
      c = new d.Parser(b, c);
      switch(h.version = c.parseVersion(), h.italicAngle = c.parseFixed(), h.underlinePosition = c.parseShort(), h.underlineThickness = c.parseShort(), h.isFixedPitch = c.parseULong(), h.minMemType42 = c.parseULong(), h.maxMemType42 = c.parseULong(), h.minMemType1 = c.parseULong(), h.maxMemType1 = c.parseULong(), h.version) {
        case 1:
          h.names = f.standardNames.slice();
          break;
        case 2:
          h.numberOfGlyphs = c.parseUShort();
          h.glyphNameIndex = Array(h.numberOfGlyphs);
          for (b = 0; b < h.numberOfGlyphs; b++) {
            h.glyphNameIndex[b] = c.parseUShort();
          }
          h.names = [];
          for (b = 0; b < h.numberOfGlyphs; b++) {
            if (h.glyphNameIndex[b] >= f.standardNames.length) {
              var k = c.parseChar();
              h.names.push(c.parseString(k));
            }
          }
          break;
        case 2.5:
          for (h.numberOfGlyphs = c.parseUShort(), h.offset = Array(h.numberOfGlyphs), b = 0; b < h.numberOfGlyphs; b++) {
            h.offset[b] = c.parseChar();
          }
      }
      return h;
    };
    b.make = function() {
      return new h.Table("post", [{name:"version", type:"FIXED", value:196608}, {name:"italicAngle", type:"FIXED", value:0}, {name:"underlinePosition", type:"FWORD", value:0}, {name:"underlineThickness", type:"FWORD", value:0}, {name:"isFixedPitch", type:"ULONG", value:0}, {name:"minMemType42", type:"ULONG", value:0}, {name:"maxMemType42", type:"ULONG", value:0}, {name:"minMemType1", type:"ULONG", value:0}, {name:"maxMemType1", type:"ULONG", value:0}]);
    };
  }, {"../encoding":4, "../parse":10, "../table":13}], 31:[function(c, k, b) {
    function f(b) {
      for (; 0 !== b.length % 4;) {
        b.push(0);
      }
      for (var c = 0, d = 0; d < b.length; d += 4) {
        c += (b[d] << 24) + (b[d + 1] << 16) + (b[d + 2] << 8) + b[d + 3];
      }
      return c % Math.pow(2, 32);
    }
    function d(b, c, d, e) {
      return new m.Record("Table Record", [{name:"tag", type:"TAG", value:void 0 !== b ? b : ""}, {name:"checkSum", type:"ULONG", value:void 0 !== c ? c : 0}, {name:"offset", type:"ULONG", value:void 0 !== d ? d : 0}, {name:"length", type:"ULONG", value:void 0 !== e ? e : 0}]);
    }
    function h(b) {
      var c = new m.Table("sfnt", [{name:"version", type:"TAG", value:"OTTO"}, {name:"numTables", type:"USHORT", value:0}, {name:"searchRange", type:"USHORT", value:0}, {name:"entrySelector", type:"USHORT", value:0}, {name:"rangeShift", type:"USHORT", value:0}]);
      c.tables = b;
      c.numTables = b.length;
      var e = Math.pow(2, Math.log(c.numTables) / Math.log(2) | 0);
      c.searchRange = 16 * e;
      c.entrySelector = Math.log(e) / Math.log(2) | 0;
      c.rangeShift = 16 * c.numTables - c.searchRange;
      e = [];
      for (var h = [], k = c.sizeOf() + d().sizeOf() * c.numTables; 0 !== k % 4;) {
        k += 1, h.push({name:"padding", type:"BYTE", value:0});
      }
      for (var l = 0; l < b.length; l += 1) {
        var n = b[l];
        q.argument(4 === n.tableName.length, "Table name" + n.tableName + " is invalid.");
        var p = n.sizeOf(), t = d(n.tableName, f(n.encode()), k, p);
        e.push({name:t.tag + " Table Record", type:"RECORD", value:t});
        h.push({name:n.tableName + " table", type:"RECORD", value:n});
        k += p;
        for (q.argument(!isNaN(k), "Something went wrong calculating the offset."); 0 !== k % 4;) {
          k += 1, h.push({name:"padding", type:"BYTE", value:0});
        }
      }
      return e.sort(function(b, c) {
        return b.value.tag > c.value.tag ? 1 : -1;
      }), c.fields = c.fields.concat(e), c.fields = c.fields.concat(h), c;
    }
    function n(b, c, d) {
      for (var e = 0; e < c.length; e += 1) {
        var f = b.charToGlyphIndex(c[e]);
        if (0 < f) {
          return b.glyphs.get(f).getMetrics();
        }
      }
      return d;
    }
    var q = c("../check"), m = c("../table"), t = c("./cmap"), e = c("./cff"), l = c("./head"), u = c("./hhea"), w = c("./hmtx"), y = c("./ltag"), x = c("./maxp"), p = c("./name"), v = c("./os2"), z = c("./post"), C = c("./gsub"), A = c("./meta");
    b.computeCheckSum = f;
    b.make = h;
    b.fontToTable = function(b) {
      for (var c, d = [], k = [], m = [], q = [], D = [], L = [], R = [], J = 0, Q = 0, aa = 0, V = 0, N = 0, S = 0; S < b.glyphs.length; S += 1) {
        var W = b.glyphs.get(S), M = 0 | W.unicode;
        if (isNaN(W.advanceWidth)) {
          throw Error("Glyph " + W.name + " (" + S + "): advanceWidth is not a number.");
        }
        (c > M || void 0 === c) && 0 < M && (c = M);
        M > J && (J = M);
        M = v.getUnicodeRange(M);
        if (32 > M) {
          Q |= 1 << M;
        } else {
          if (64 > M) {
            aa |= 1 << M - 32;
          } else {
            if (96 > M) {
              V |= 1 << M - 64;
            } else {
              if (!(123 > M)) {
                throw Error("Unicode ranges bits > 123 are reserved for internal usage");
              }
              N |= 1 << M - 96;
            }
          }
        }
        ".notdef" !== W.name && (M = W.getMetrics(), d.push(M.xMin), k.push(M.yMin), m.push(M.xMax), q.push(M.yMax), L.push(M.leftSideBearing), R.push(M.rightSideBearing), D.push(W.advanceWidth));
      }
      S = Math.min.apply(null, d);
      k = Math.min.apply(null, k);
      m = Math.max.apply(null, m);
      q = Math.max.apply(null, q);
      d = Math.max.apply(null, D);
      for (M = W = 0; M < D.length; M += 1) {
        W += D[M];
      }
      S = {xMin:S, yMin:k, xMax:m, yMax:q, advanceWidthMax:d, advanceWidthAvg:W / D.length, minLeftSideBearing:Math.min.apply(null, L), maxLeftSideBearing:Math.max.apply(null, L), minRightSideBearing:Math.min.apply(null, R)};
      S.ascender = b.ascender;
      S.descender = b.descender;
      D = l.make({flags:3, unitsPerEm:b.unitsPerEm, xMin:S.xMin, yMin:S.yMin, xMax:S.xMax, yMax:S.yMax, lowestRecPPEM:3, createdTimestamp:b.createdTimestamp});
      L = u.make({ascender:S.ascender, descender:S.descender, advanceWidthMax:S.advanceWidthMax, minLeftSideBearing:S.minLeftSideBearing, minRightSideBearing:S.minRightSideBearing, xMaxExtent:S.maxLeftSideBearing + (S.xMax - S.xMin), numberOfHMetrics:b.glyphs.length});
      R = x.make(b.glyphs.length);
      c = v.make({xAvgCharWidth:Math.round(S.advanceWidthAvg), usWeightClass:b.tables.os2.usWeightClass, usWidthClass:b.tables.os2.usWidthClass, usFirstCharIndex:c, usLastCharIndex:J, ulUnicodeRange1:Q, ulUnicodeRange2:aa, ulUnicodeRange3:V, ulUnicodeRange4:N, fsSelection:b.tables.os2.fsSelection, sTypoAscender:S.ascender, sTypoDescender:S.descender, sTypoLineGap:0, usWinAscent:S.yMax, usWinDescent:Math.abs(S.yMin), ulCodePageRange1:1, sxHeight:n(b, "xyvw", {yMax:Math.round(S.ascender / 2)}).yMax, 
      sCapHeight:n(b, "HIKLEFJMNTZBDPRAGOQSUVWXY", S).yMax, usDefaultChar:b.hasChar(" ") ? 32 : 0, usBreakChar:b.hasChar(" ") ? 32 : 0});
      J = w.make(b.glyphs);
      Q = t.make(b.glyphs);
      aa = b.getEnglishName("fontFamily");
      V = b.getEnglishName("fontSubfamily");
      N = aa + " " + V;
      (q = b.getEnglishName("postScriptName")) || (q = aa.replace(/\s/g, "") + "-" + V);
      m = {};
      for (var O in b.names) {
        m[O] = b.names[O];
      }
      m.uniqueID || (m.uniqueID = {en:b.getEnglishName("manufacturer") + ":" + N});
      m.postScriptName || (m.postScriptName = {en:q});
      m.preferredFamily || (m.preferredFamily = b.names.fontFamily);
      m.preferredSubfamily || (m.preferredSubfamily = b.names.fontSubfamily);
      k = [];
      O = p.make(m, k);
      m = 0 < k.length ? y.make(k) : void 0;
      k = z.make();
      V = e.make(b.glyphs, {version:b.getEnglishName("version"), fullName:N, familyName:aa, weightName:V, postScriptName:q, unitsPerEm:b.unitsPerEm, fontBBox:[0, S.yMin, S.ascender, S.advanceWidthMax]});
      aa = b.metas && 0 < Object.keys(b.metas).length ? A.make(b.metas) : void 0;
      O = [D, L, R, c, O, Q, k, V, J];
      m && O.push(m);
      b.tables.gsub && O.push(C.make(b.tables.gsub));
      aa && O.push(aa);
      b = h(O);
      O = b.encode();
      O = f(O);
      c = b.fields;
      J = !1;
      for (S = 0; S < c.length; S += 1) {
        if ("head table" === c[S].name) {
          c[S].value.checkSumAdjustment = 2981146554 - O;
          J = !0;
          break;
        }
      }
      if (!J) {
        throw Error("Could not find head table with checkSum to adjust.");
      }
      return b;
    };
  }, {"../check":2, "../table":13, "./cff":14, "./cmap":15, "./gsub":19, "./head":20, "./hhea":21, "./hmtx":22, "./ltag":25, "./maxp":26, "./meta":27, "./name":28, "./os2":29, "./post":30}], 32:[function(c, k, b) {
    function f(b) {
      return function() {
        return b;
      };
    }
    var d = c("./check");
    c = {};
    var h = {}, n = {};
    h.BYTE = function(b) {
      return d.argument(0 <= b && 255 >= b, "Byte value should be between 0 and 255."), [b];
    };
    n.BYTE = f(1);
    h.CHAR = function(b) {
      return [b.charCodeAt(0)];
    };
    n.CHAR = f(1);
    h.CHARARRAY = function(b) {
      for (var c = [], d = 0; d < b.length; d += 1) {
        c[d] = b.charCodeAt(d);
      }
      return c;
    };
    n.CHARARRAY = function(b) {
      return b.length;
    };
    h.USHORT = function(b) {
      return [b >> 8 & 255, 255 & b];
    };
    n.USHORT = f(2);
    h.SHORT = function(b) {
      return 32768 <= b && (b = -(65536 - b)), [b >> 8 & 255, 255 & b];
    };
    n.SHORT = f(2);
    h.UINT24 = function(b) {
      return [b >> 16 & 255, b >> 8 & 255, 255 & b];
    };
    n.UINT24 = f(3);
    h.ULONG = function(b) {
      return [b >> 24 & 255, b >> 16 & 255, b >> 8 & 255, 255 & b];
    };
    n.ULONG = f(4);
    h.LONG = function(b) {
      return 2147483648 <= b && (b = -(4294967296 - b)), [b >> 24 & 255, b >> 16 & 255, b >> 8 & 255, 255 & b];
    };
    n.LONG = f(4);
    h.FIXED = h.ULONG;
    n.FIXED = n.ULONG;
    h.FWORD = h.SHORT;
    n.FWORD = n.SHORT;
    h.UFWORD = h.USHORT;
    n.UFWORD = n.USHORT;
    h.LONGDATETIME = function(b) {
      return [0, 0, 0, 0, b >> 24 & 255, b >> 16 & 255, b >> 8 & 255, 255 & b];
    };
    n.LONGDATETIME = f(8);
    h.TAG = function(b) {
      return d.argument(4 === b.length, "Tag should be exactly 4 ASCII characters."), [b.charCodeAt(0), b.charCodeAt(1), b.charCodeAt(2), b.charCodeAt(3)];
    };
    n.TAG = f(4);
    h.Card8 = h.BYTE;
    n.Card8 = n.BYTE;
    h.Card16 = h.USHORT;
    n.Card16 = n.USHORT;
    h.OffSize = h.BYTE;
    n.OffSize = n.BYTE;
    h.SID = h.USHORT;
    n.SID = n.USHORT;
    h.NUMBER = function(b) {
      return -107 <= b && 107 >= b ? [b + 139] : 108 <= b && 1131 >= b ? (b -= 108, [(b >> 8) + 247, 255 & b]) : -1131 <= b && -108 >= b ? (b = -b - 108, [(b >> 8) + 251, 255 & b]) : -32768 <= b && 32767 >= b ? h.NUMBER16(b) : h.NUMBER32(b);
    };
    n.NUMBER = function(b) {
      return h.NUMBER(b).length;
    };
    h.NUMBER16 = function(b) {
      return [28, b >> 8 & 255, 255 & b];
    };
    n.NUMBER16 = f(3);
    h.NUMBER32 = function(b) {
      return [29, b >> 24 & 255, b >> 16 & 255, b >> 8 & 255, 255 & b];
    };
    n.NUMBER32 = f(5);
    h.REAL = function(b) {
      var c = b.toString(), d = /\.(\d*?)(?:9{5,20}|0{5,20})\d{0,2}(?:e(.+)|$)/.exec(c);
      d && (c = parseFloat("1e" + ((d[2] ? +d[2] : 0) + d[1].length)), c = (Math.round(b * c) / c).toString());
      var e = "";
      b = 0;
      for (d = c.length; d > b; b += 1) {
        var f = c[b];
        e += "e" === f ? "-" === c[++b] ? "c" : "b" : "." === f ? "a" : "-" === f ? "e" : f;
      }
      e += 1 & e.length ? "f" : "ff";
      c = [30];
      b = 0;
      for (d = e.length; d > b; b += 2) {
        c.push(parseInt(e.substr(b, 2), 16));
      }
      return c;
    };
    n.REAL = function(b) {
      return h.REAL(b).length;
    };
    h.NAME = h.CHARARRAY;
    n.NAME = n.CHARARRAY;
    h.STRING = h.CHARARRAY;
    n.STRING = n.CHARARRAY;
    c.UTF8 = function(b, c, d) {
      for (var e = [], f = 0; d > f; f++, c += 1) {
        e[f] = b.getUint8(c);
      }
      return String.fromCharCode.apply(null, e);
    };
    c.UTF16 = function(b, c, d) {
      var e = [];
      d /= 2;
      for (var f = 0; d > f; f++, c += 2) {
        e[f] = b.getUint16(c);
      }
      return String.fromCharCode.apply(null, e);
    };
    h.UTF16 = function(b) {
      for (var c = [], d = 0; d < b.length; d += 1) {
        var e = b.charCodeAt(d);
        c[c.length] = e >> 8 & 255;
        c[c.length] = 255 & e;
      }
      return c;
    };
    n.UTF16 = function(b) {
      return 2 * b.length;
    };
    var q = {"x-mac-croatian":"\u00c4\u00c5\u00c7\u00c9\u00d1\u00d6\u00dc\u00e1\u00e0\u00e2\u00e4\u00e3\u00e5\u00e7\u00e9\u00e8\u00ea\u00eb\u00ed\u00ec\u00ee\u00ef\u00f1\u00f3\u00f2\u00f4\u00f6\u00f5\u00fa\u00f9\u00fb\u00fc\u2020\u00b0\u00a2\u00a3\u00a7\u2022\u00b6\u00df\u00ae\u0160\u2122\u00b4\u00a8\u2260\u017d\u00d8\u221e\u00b1\u2264\u2265\u2206\u00b5\u2202\u2211\u220f\u0161\u222b\u00aa\u00ba\u03a9\u017e\u00f8\u00bf\u00a1\u00ac\u221a\u0192\u2248\u0106\u00ab\u010c\u2026\u00a0\u00c0\u00c3\u00d5\u0152\u0153\u0110\u2014\u201c\u201d\u2018\u2019\u00f7\u25ca\uf8ff\u00a9\u2044\u20ac\u2039\u203a\u00c6\u00bb\u2013\u00b7\u201a\u201e\u2030\u00c2\u0107\u00c1\u010d\u00c8\u00cd\u00ce\u00cf\u00cc\u00d3\u00d4\u0111\u00d2\u00da\u00db\u00d9\u0131\u02c6\u02dc\u00af\u03c0\u00cb\u02da\u00b8\u00ca\u00e6\u02c7", 
    "x-mac-cyrillic":"\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041a\u041b\u041c\u041d\u041e\u041f\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042a\u042b\u042c\u042d\u042e\u042f\u2020\u00b0\u0490\u00a3\u00a7\u2022\u00b6\u0406\u00ae\u00a9\u2122\u0402\u0452\u2260\u0403\u0453\u221e\u00b1\u2264\u2265\u0456\u00b5\u0491\u0408\u0404\u0454\u0407\u0457\u0409\u0459\u040a\u045a\u0458\u0405\u00ac\u221a\u0192\u2248\u2206\u00ab\u00bb\u2026\u00a0\u040b\u045b\u040c\u045c\u0455\u2013\u2014\u201c\u201d\u2018\u2019\u00f7\u201e\u040e\u045e\u040f\u045f\u2116\u0401\u0451\u044f\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043a\u043b\u043c\u043d\u043e\u043f\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044a\u044b\u044c\u044d\u044e", 
    "x-mac-gaelic":"\u00c4\u00c5\u00c7\u00c9\u00d1\u00d6\u00dc\u00e1\u00e0\u00e2\u00e4\u00e3\u00e5\u00e7\u00e9\u00e8\u00ea\u00eb\u00ed\u00ec\u00ee\u00ef\u00f1\u00f3\u00f2\u00f4\u00f6\u00f5\u00fa\u00f9\u00fb\u00fc\u2020\u00b0\u00a2\u00a3\u00a7\u2022\u00b6\u00df\u00ae\u00a9\u2122\u00b4\u00a8\u2260\u00c6\u00d8\u1e02\u00b1\u2264\u2265\u1e03\u010a\u010b\u1e0a\u1e0b\u1e1e\u1e1f\u0120\u0121\u1e40\u00e6\u00f8\u1e41\u1e56\u1e57\u027c\u0192\u017f\u1e60\u00ab\u00bb\u2026\u00a0\u00c0\u00c3\u00d5\u0152\u0153\u2013\u2014\u201c\u201d\u2018\u2019\u1e61\u1e9b\u00ff\u0178\u1e6a\u20ac\u2039\u203a\u0176\u0177\u1e6b\u00b7\u1ef2\u1ef3\u204a\u00c2\u00ca\u00c1\u00cb\u00c8\u00cd\u00ce\u00cf\u00cc\u00d3\u00d4\u2663\u00d2\u00da\u00db\u00d9\u0131\u00dd\u00fd\u0174\u0175\u1e84\u1e85\u1e80\u1e81\u1e82\u1e83", 
    "x-mac-greek":"\u00c4\u00b9\u00b2\u00c9\u00b3\u00d6\u00dc\u0385\u00e0\u00e2\u00e4\u0384\u00a8\u00e7\u00e9\u00e8\u00ea\u00eb\u00a3\u2122\u00ee\u00ef\u2022\u00bd\u2030\u00f4\u00f6\u00a6\u20ac\u00f9\u00fb\u00fc\u2020\u0393\u0394\u0398\u039b\u039e\u03a0\u00df\u00ae\u00a9\u03a3\u03aa\u00a7\u2260\u00b0\u00b7\u0391\u00b1\u2264\u2265\u00a5\u0392\u0395\u0396\u0397\u0399\u039a\u039c\u03a6\u03ab\u03a8\u03a9\u03ac\u039d\u00ac\u039f\u03a1\u2248\u03a4\u00ab\u00bb\u2026\u00a0\u03a5\u03a7\u0386\u0388\u0153\u2013\u2015\u201c\u201d\u2018\u2019\u00f7\u0389\u038a\u038c\u038e\u03ad\u03ae\u03af\u03cc\u038f\u03cd\u03b1\u03b2\u03c8\u03b4\u03b5\u03c6\u03b3\u03b7\u03b9\u03be\u03ba\u03bb\u03bc\u03bd\u03bf\u03c0\u03ce\u03c1\u03c3\u03c4\u03b8\u03c9\u03c2\u03c7\u03c5\u03b6\u03ca\u03cb\u0390\u03b0\u00ad", 
    "x-mac-icelandic":"\u00c4\u00c5\u00c7\u00c9\u00d1\u00d6\u00dc\u00e1\u00e0\u00e2\u00e4\u00e3\u00e5\u00e7\u00e9\u00e8\u00ea\u00eb\u00ed\u00ec\u00ee\u00ef\u00f1\u00f3\u00f2\u00f4\u00f6\u00f5\u00fa\u00f9\u00fb\u00fc\u00dd\u00b0\u00a2\u00a3\u00a7\u2022\u00b6\u00df\u00ae\u00a9\u2122\u00b4\u00a8\u2260\u00c6\u00d8\u221e\u00b1\u2264\u2265\u00a5\u00b5\u2202\u2211\u220f\u03c0\u222b\u00aa\u00ba\u03a9\u00e6\u00f8\u00bf\u00a1\u00ac\u221a\u0192\u2248\u2206\u00ab\u00bb\u2026\u00a0\u00c0\u00c3\u00d5\u0152\u0153\u2013\u2014\u201c\u201d\u2018\u2019\u00f7\u25ca\u00ff\u0178\u2044\u20ac\u00d0\u00f0\u00de\u00fe\u00fd\u00b7\u201a\u201e\u2030\u00c2\u00ca\u00c1\u00cb\u00c8\u00cd\u00ce\u00cf\u00cc\u00d3\u00d4\uf8ff\u00d2\u00da\u00db\u00d9\u0131\u02c6\u02dc\u00af\u02d8\u02d9\u02da\u00b8\u02dd\u02db\u02c7", 
    "x-mac-inuit":"\u1403\u1404\u1405\u1406\u140a\u140b\u1431\u1432\u1433\u1434\u1438\u1439\u1449\u144e\u144f\u1450\u1451\u1455\u1456\u1466\u146d\u146e\u146f\u1470\u1472\u1473\u1483\u148b\u148c\u148d\u148e\u1490\u1491\u00b0\u14a1\u14a5\u14a6\u2022\u00b6\u14a7\u00ae\u00a9\u2122\u14a8\u14aa\u14ab\u14bb\u14c2\u14c3\u14c4\u14c5\u14c7\u14c8\u14d0\u14ef\u14f0\u14f1\u14f2\u14f4\u14f5\u1505\u14d5\u14d6\u14d7\u14d8\u14da\u14db\u14ea\u1528\u1529\u152a\u152b\u152d\u2026\u00a0\u152e\u153e\u1555\u1556\u1557\u2013\u2014\u201c\u201d\u2018\u2019\u1558\u1559\u155a\u155d\u1546\u1547\u1548\u1549\u154b\u154c\u1550\u157f\u1580\u1581\u1582\u1583\u1584\u1585\u158f\u1590\u1591\u1592\u1593\u1594\u1595\u1671\u1672\u1673\u1674\u1675\u1676\u1596\u15a0\u15a1\u15a2\u15a3\u15a4\u15a5\u15a6\u157c\u0141\u0142", 
    "x-mac-ce":"\u00c4\u0100\u0101\u00c9\u0104\u00d6\u00dc\u00e1\u0105\u010c\u00e4\u010d\u0106\u0107\u00e9\u0179\u017a\u010e\u00ed\u010f\u0112\u0113\u0116\u00f3\u0117\u00f4\u00f6\u00f5\u00fa\u011a\u011b\u00fc\u2020\u00b0\u0118\u00a3\u00a7\u2022\u00b6\u00df\u00ae\u00a9\u2122\u0119\u00a8\u2260\u0123\u012e\u012f\u012a\u2264\u2265\u012b\u0136\u2202\u2211\u0142\u013b\u013c\u013d\u013e\u0139\u013a\u0145\u0146\u0143\u00ac\u221a\u0144\u0147\u2206\u00ab\u00bb\u2026\u00a0\u0148\u0150\u00d5\u0151\u014c\u2013\u2014\u201c\u201d\u2018\u2019\u00f7\u25ca\u014d\u0154\u0155\u0158\u2039\u203a\u0159\u0156\u0157\u0160\u201a\u201e\u0161\u015a\u015b\u00c1\u0164\u0165\u00cd\u017d\u017e\u016a\u00d3\u00d4\u016b\u016e\u00da\u016f\u0170\u0171\u0172\u0173\u00dd\u00fd\u0137\u017b\u0141\u017c\u0122\u02c7", 
    macintosh:"\u00c4\u00c5\u00c7\u00c9\u00d1\u00d6\u00dc\u00e1\u00e0\u00e2\u00e4\u00e3\u00e5\u00e7\u00e9\u00e8\u00ea\u00eb\u00ed\u00ec\u00ee\u00ef\u00f1\u00f3\u00f2\u00f4\u00f6\u00f5\u00fa\u00f9\u00fb\u00fc\u2020\u00b0\u00a2\u00a3\u00a7\u2022\u00b6\u00df\u00ae\u00a9\u2122\u00b4\u00a8\u2260\u00c6\u00d8\u221e\u00b1\u2264\u2265\u00a5\u00b5\u2202\u2211\u220f\u03c0\u222b\u00aa\u00ba\u03a9\u00e6\u00f8\u00bf\u00a1\u00ac\u221a\u0192\u2248\u2206\u00ab\u00bb\u2026\u00a0\u00c0\u00c3\u00d5\u0152\u0153\u2013\u2014\u201c\u201d\u2018\u2019\u00f7\u25ca\u00ff\u0178\u2044\u20ac\u2039\u203a\ufb01\ufb02\u2021\u00b7\u201a\u201e\u2030\u00c2\u00ca\u00c1\u00cb\u00c8\u00cd\u00ce\u00cf\u00cc\u00d3\u00d4\uf8ff\u00d2\u00da\u00db\u00d9\u0131\u02c6\u02dc\u00af\u02d8\u02d9\u02da\u00b8\u02dd\u02db\u02c7", 
    "x-mac-romanian":"\u00c4\u00c5\u00c7\u00c9\u00d1\u00d6\u00dc\u00e1\u00e0\u00e2\u00e4\u00e3\u00e5\u00e7\u00e9\u00e8\u00ea\u00eb\u00ed\u00ec\u00ee\u00ef\u00f1\u00f3\u00f2\u00f4\u00f6\u00f5\u00fa\u00f9\u00fb\u00fc\u2020\u00b0\u00a2\u00a3\u00a7\u2022\u00b6\u00df\u00ae\u00a9\u2122\u00b4\u00a8\u2260\u0102\u0218\u221e\u00b1\u2264\u2265\u00a5\u00b5\u2202\u2211\u220f\u03c0\u222b\u00aa\u00ba\u03a9\u0103\u0219\u00bf\u00a1\u00ac\u221a\u0192\u2248\u2206\u00ab\u00bb\u2026\u00a0\u00c0\u00c3\u00d5\u0152\u0153\u2013\u2014\u201c\u201d\u2018\u2019\u00f7\u25ca\u00ff\u0178\u2044\u20ac\u2039\u203a\u021a\u021b\u2021\u00b7\u201a\u201e\u2030\u00c2\u00ca\u00c1\u00cb\u00c8\u00cd\u00ce\u00cf\u00cc\u00d3\u00d4\uf8ff\u00d2\u00da\u00db\u00d9\u0131\u02c6\u02dc\u00af\u02d8\u02d9\u02da\u00b8\u02dd\u02db\u02c7", 
    "x-mac-turkish":"\u00c4\u00c5\u00c7\u00c9\u00d1\u00d6\u00dc\u00e1\u00e0\u00e2\u00e4\u00e3\u00e5\u00e7\u00e9\u00e8\u00ea\u00eb\u00ed\u00ec\u00ee\u00ef\u00f1\u00f3\u00f2\u00f4\u00f6\u00f5\u00fa\u00f9\u00fb\u00fc\u2020\u00b0\u00a2\u00a3\u00a7\u2022\u00b6\u00df\u00ae\u00a9\u2122\u00b4\u00a8\u2260\u00c6\u00d8\u221e\u00b1\u2264\u2265\u00a5\u00b5\u2202\u2211\u220f\u03c0\u222b\u00aa\u00ba\u03a9\u00e6\u00f8\u00bf\u00a1\u00ac\u221a\u0192\u2248\u2206\u00ab\u00bb\u2026\u00a0\u00c0\u00c3\u00d5\u0152\u0153\u2013\u2014\u201c\u201d\u2018\u2019\u00f7\u25ca\u00ff\u0178\u011e\u011f\u0130\u0131\u015e\u015f\u2021\u00b7\u201a\u201e\u2030\u00c2\u00ca\u00c1\u00cb\u00c8\u00cd\u00ce\u00cf\u00cc\u00d3\u00d4\uf8ff\u00d2\u00da\u00db\u00d9\uf8a0\u02c6\u02dc\u00af\u02d8\u02d9\u02da\u00b8\u02dd\u02db\u02c7"};
    c.MACSTRING = function(b, c, d, e) {
      e = q[e];
      if (void 0 !== e) {
        for (var f = "", h = 0; d > h; h++) {
          var k = b.getUint8(c + h);
          f += 127 >= k ? String.fromCharCode(k) : e[127 & k];
        }
        return f;
      }
    };
    var m = "function" == typeof WeakMap && new WeakMap, t;
    h.MACSTRING = function(b, c) {
      a: {
        if (!t) {
          for (d in t = {}, q) {
            t[d] = new String(d);
          }
        }
        var d = t[c];
        if (void 0 !== d) {
          if (m) {
            var e = m.get(d);
            if (void 0 !== e) {
              d = e;
              break a;
            }
          }
          c = q[c];
          if (void 0 !== c) {
            e = {};
            for (var f = 0; f < c.length; f++) {
              e[c.charCodeAt(f)] = f + 128;
            }
            d = (m && m.set(d, e), e);
            break a;
          }
        }
        d = void 0;
      }
      if (void 0 !== d) {
        c = [];
        for (e = 0; e < b.length; e++) {
          f = b.charCodeAt(e);
          if (128 <= f && (f = d[f], void 0 === f)) {
            return;
          }
          c[e] = f;
        }
        return c;
      }
    };
    n.MACSTRING = function(b, c) {
      b = h.MACSTRING(b, c);
      return void 0 !== b ? b.length : 0;
    };
    h.INDEX = function(b) {
      var c, d = 1, e = [d], f = [];
      for (c = 0; c < b.length; c += 1) {
        var k = h.OBJECT(b[c]);
        Array.prototype.push.apply(f, k);
        d += k.length;
        e.push(d);
      }
      if (0 === f.length) {
        return [0, 0];
      }
      k = [];
      d = 1 + Math.floor(Math.log(d) / Math.log(2)) / 8 | 0;
      var l = [void 0, h.BYTE, h.USHORT, h.UINT24, h.ULONG][d];
      for (c = 0; c < e.length; c += 1) {
        var m = l(e[c]);
        Array.prototype.push.apply(k, m);
      }
      return Array.prototype.concat(h.Card16(b.length), h.OffSize(d), k, f);
    };
    n.INDEX = function(b) {
      return h.INDEX(b).length;
    };
    h.DICT = function(b) {
      for (var c = [], d = Object.keys(b), e = d.length, f = 0; e > f; f += 1) {
        var k = parseInt(d[f], 0), l = b[k];
        c = c.concat(h.OPERAND(l.value, l.type));
        c = c.concat(h.OPERATOR(k));
      }
      return c;
    };
    n.DICT = function(b) {
      return h.DICT(b).length;
    };
    h.OPERATOR = function(b) {
      return 1200 > b ? [b] : [12, b - 1200];
    };
    h.OPERAND = function(b, c) {
      var e = [];
      if (Array.isArray(c)) {
        for (var f = 0; f < c.length; f += 1) {
          d.argument(b.length === c.length, "Not enough arguments given for type" + c), e = e.concat(h.OPERAND(b[f], c[f]));
        }
      } else {
        if ("SID" === c) {
          e = e.concat(h.NUMBER(b));
        } else {
          if ("offset" === c) {
            e = e.concat(h.NUMBER32(b));
          } else {
            if ("number" === c) {
              e = e.concat(h.NUMBER(b));
            } else {
              if ("real" !== c) {
                throw Error("Unknown operand type " + c);
              }
              e = e.concat(h.REAL(b));
            }
          }
        }
      }
      return e;
    };
    h.OP = h.BYTE;
    n.OP = n.BYTE;
    var e = "function" == typeof WeakMap && new WeakMap;
    h.CHARSTRING = function(b) {
      if (e) {
        var c = e.get(b);
        if (void 0 !== c) {
          return c;
        }
      }
      c = [];
      for (var d = b.length, f = 0; d > f; f += 1) {
        var k = b[f];
        c = c.concat(h[k.type](k.value));
      }
      return e && e.set(b, c), c;
    };
    n.CHARSTRING = function(b) {
      return h.CHARSTRING(b).length;
    };
    h.OBJECT = function(b) {
      var c = h[b.type];
      return d.argument(void 0 !== c, "No encoding function for type " + b.type), c(b.value);
    };
    n.OBJECT = function(b) {
      var c = n[b.type];
      return d.argument(void 0 !== c, "No sizeOf function for type " + b.type), c(b.value);
    };
    h.TABLE = function(b) {
      var c, e = [], f = b.fields.length, k = [], l = [];
      for (c = 0; f > c; c += 1) {
        var m = b.fields[c], n = h[m.type];
        d.argument(void 0 !== n, "No encoding function for field type " + m.type + " (" + m.name + ")");
        var q = b[m.name];
        void 0 === q && (q = m.value);
        n = n(q);
        "TABLE" === m.type ? (l.push(e.length), e = e.concat([0, 0]), k.push(n)) : e = e.concat(n);
      }
      for (c = 0; c < k.length; c += 1) {
        f = l[c], m = e.length, d.argument(65536 > m, "Table " + b.tableName + " too big."), e[f] = m >> 8, e[f + 1] = 255 & m, e = e.concat(k[c]);
      }
      return e;
    };
    n.TABLE = function(b) {
      for (var c = 0, e = b.fields.length, f = 0; e > f; f += 1) {
        var h = b.fields[f], k = n[h.type];
        d.argument(void 0 !== k, "No sizeOf function for field type " + h.type + " (" + h.name + ")");
        var l = b[h.name];
        void 0 === l && (l = h.value);
        c += k(l);
        "TABLE" === h.type && (c += 2);
      }
      return c;
    };
    h.RECORD = h.TABLE;
    n.RECORD = n.TABLE;
    h.LITERAL = function(b) {
      return b;
    };
    n.LITERAL = function(b) {
      return b.length;
    };
    b.decode = c;
    b.encode = h;
    b.sizeOf = n;
  }, {"./check":2}], 33:[function(c, k, b) {
    b.isBrowser = function() {
      return "undefined" != typeof window;
    };
    b.isNode = function() {
      return "undefined" == typeof window;
    };
    b.nodeBufferToArrayBuffer = function(b) {
      for (var c = new ArrayBuffer(b.length), f = new Uint8Array(c), k = 0; k < b.length; ++k) {
        f[k] = b[k];
      }
      return c;
    };
    b.arrayBufferToNodeBuffer = function(b) {
      var c = new Buffer(b.byteLength);
      b = new Uint8Array(b);
      for (var f = 0; f < c.length; ++f) {
        c[f] = b[f];
      }
      return c;
    };
    b.checkArgument = function(b, c) {
      if (!b) {
        throw c;
      }
    };
  }, {}]}, {}, [9])(9);
});
"use strict";
function Nunu() {
}
Nunu.NAME = "nunuStudio";
Nunu.VERSION = "<PLACEHOLDER_VERSION>";
Nunu.TIMESTAMP = "<PLACEHOLDER_TIMESTAMP>";
Nunu.REPOSITORY_BRANCH = "<PLACEHOLDER_REPOSITORY_BRANCH>";
Nunu.REPOSITORY_COMMIT = "<PLACEHOLDER_REPOSITORY_COMMIT>";
Nunu.NWJS = 200;
Nunu.BROWSER = 201;
Nunu.CORDOVA = 202;
Nunu.developmentMode = function() {
  return "<PLACEHOLDER_TIMESTAMP>" === Nunu.TIMESTAMP;
};
Nunu.webvrAvailable = function() {
  return void 0 !== navigator.getVRDisplays;
};
Nunu.getVRDisplays = function(a) {
  void 0 === navigator.getVRDisplays ? console.warn("nunuStudio: WebVR is not supported.") : navigator.getVRDisplays().then(function(c) {
    0 < c.length ? a(c[0]) : console.warn("nunuStudio: WebVR supported but no display is available.");
  });
};
Nunu.getQueryParameters = function() {
  for (var a = location.search.substring(1).split("&"), c = {}, k = 0; k < a.length; k++) {
    var b = a[k].split("=");
    if (1 < b.length) {
      var f = unescape(b[0]).replace(/"/g, "");
      b = unescape(b[1]).replace(/"/g, "");
      c[f] = b;
    }
  }
  return c;
};
Nunu.createWorker = function(a, c) {
  a = new Blob([a], {type:"application/javascript"});
  a = new Worker(URL.createObjectURL(a));
  void 0 !== c && (a.onmessage = c);
  return a;
};
Nunu.webAudioAvailable = function() {
  return void 0 !== window.AudioContext || void 0 !== window.webkitAudioContext;
};
Nunu.webglAvailable = function() {
  try {
    var a = document.createElement("canvas");
    (a.getContext("webgl") || a.getContext("experimental-webgl")).getSupportedExtensions();
    return !0;
  } catch (c) {
  }
  return !1;
};
Nunu.getPlatform = function() {
  return void 0 !== window.nw ? Nunu.NWJS : void 0 !== window.cordova ? Nunu.CORDOVA : Nunu.BROWSER;
};
Nunu.runningOnDesktop = function() {
  return void 0 !== window.nw;
};
Nunu.openWebpage = function(a) {
  Nunu.runningOnDesktop() ? require("nw.gui").Shell.openExternal(a) : window.open(a);
};
Nunu.isFullscreen = function() {
  return !0 === document.webkitIsFullScreen || !0 === document.mozFullScreen || !0 === document.webkitIsFullScreen || !0 === document.webkitIsFullScreen || !0 === document.fullscreen || !1;
};
Nunu.setFullscreen = function(a, c) {
  var k = Nunu.isFullscreen();
  void 0 === a && (a = !k);
  !0 === a ? (void 0 === c && (c = document.body), !1 === k && (c.requestFullscreen = c.requestFullscreen || c.mozRequestFullScreen || c.webkitRequestFullscreen || c.msRequestFullscreen, void 0 !== c.requestFullscreen && c.requestFullscreen())) : !0 === k && (document.exitFullscreen = document.exitFullscreen || document.mozCancelFullScreen || document.webkitExitFullscreen, void 0 !== document.exitFullscreen && document.exitFullscreen());
};
"use strict";
function importFrom(a) {
  for (var c in a) {
    c in window || (window[c] = a[c]);
  }
}
importFrom(THREE);
importFrom(CANNON);
importFrom(SPE);
"use strict";
function FileSystem() {
}
try {
  FileSystem.fs = require("fs");
} catch (a) {
}
FileSystem.isRemote = function(a) {
  return a.startsWith("http");
};
FileSystem.readFile = function(a, c, k, b, f) {
  void 0 === c && (c = !0);
  if (void 0 === FileSystem.fs || FileSystem.isRemote(a)) {
    var d = new XMLHttpRequest;
    d.overrideMimeType("text/plain");
    d.open("GET", a, !c);
    void 0 !== k && (d.onload = function() {
      k(d.response);
    });
    void 0 !== b && (d.onprogress = b);
    void 0 !== f && (d.onerror = f);
    d.send(null);
    return !0 === c ? d.response : null;
  }
  if (!0 === c) {
    return a = FileSystem.fs.readFileSync(a, "utf8"), void 0 !== k && k(a), a;
  }
  FileSystem.fs.readFile(a, "utf8", function(a, b) {
    null !== a ? void 0 !== f && f(a) : void 0 !== k && k(b);
  });
  return null;
};
FileSystem.readFileArrayBuffer = function(a, c, k, b, f) {
  void 0 === c && (c = !0);
  if (void 0 === FileSystem.fs || FileSystem.isRemote(a)) {
    var d = new XMLHttpRequest;
    d.open("GET", a, !c);
    d.overrideMimeType("text/plain; charset=x-user-defined");
    void 0 !== k && (d.onload = function() {
      k(ArraybufferUtils.fromBinaryString(d.response));
    });
    void 0 !== b && (d.onprogress = b);
    void 0 !== f && (d.onerror = f);
    d.send(null);
    return !0 === c ? ArraybufferUtils.fromBinaryString(d.response) : null;
  }
  if (!0 === c) {
    return a = FileSystem.fs.readFileSync(a), ArraybufferUtils.fromBuffer(a);
  }
  FileSystem.fs.readFile(a, function(a, b) {
    null !== a ? void 0 !== f && f(a) : void 0 !== k && k(ArraybufferUtils.fromBuffer(b));
  });
  return null;
};
FileSystem.readFileBase64 = function(a, c, k, b, f) {
  void 0 === c && (c = !0);
  if (void 0 === FileSystem.fs || FileSystem.isRemote(a)) {
    var d = new XMLHttpRequest;
    d.open("GET", a, !c);
    d.overrideMimeType("text/plain; charset=x-user-defined");
    void 0 !== k && (d.onload = function() {
      k(Base64Utils.fromBinaryString(d.response));
    });
    void 0 !== b && (d.onprogress = b);
    void 0 !== f && (d.onerror = f);
    d.send(null);
    return !0 === c ? Base64Utils.fromBinaryString(d.response) : null;
  }
  if (!0 === c) {
    return a = FileSystem.fs.readFileSync(a), (new Buffer(a)).toString("base64");
  }
  FileSystem.fs.readFile(a, function(a, b) {
    null !== a ? void 0 !== f && f(a) : void 0 !== k && k((new Buffer(b)).toString("base64"));
  });
  return null;
};
FileSystem.writeFile = function(a, c, k, b) {
  void 0 !== FileSystem.fs ? void 0 !== FileSystem.fs.writeFileSync ? !1 !== k ? (FileSystem.fs.writeFileSync(a, c, "utf8"), void 0 !== b && b()) : FileSystem.fs.writeFile(a, c, "utf8", b) : (a = FileSystem.fs.createWriteStream(a, "utf8"), a.write(c), a.end()) : (c = new Blob([c], {type:"octet/stream"}), k = document.createElement("a"), k.download = a, k.href = window.URL.createObjectURL(c), k.style.display = "none", k.onclick = function() {
    document.body.removeChild(this);
  }, document.body.appendChild(k), k.click(), void 0 !== b && b());
};
FileSystem.writeFileBase64 = function(a, c, k, b) {
  void 0 !== FileSystem.fs ? (c = Buffer.from(Base64Utils.removeHeader(c), "base64"), void 0 !== FileSystem.fs.writeFile ? !1 !== k ? (FileSystem.fs.writeFileSync(a, c), void 0 !== b && b()) : FileSystem.fs.writeFile(a, c, b) : (a = FileSystem.fs.createWriteStream(a), a.write(c), a.end())) : (k = ArraybufferUtils.fromBase64(Base64Utils.removeHeader(c)), k = new Blob([k]), c = document.createElement("a"), c.download = a, c.href = window.URL.createObjectURL(k), c.onclick = function() {
    document.body.removeChild(this);
  }, c.style.display = "none", document.body.appendChild(c), c.click(), void 0 !== b && b());
};
FileSystem.writeFileArrayBuffer = function(a, c, k, b) {
  void 0 !== FileSystem.fs ? (c = BufferUtils.fromArrayBuffer(c), void 0 !== FileSystem.fs.writeFileSync ? !1 !== k ? (FileSystem.fs.writeFileSync(a, c), void 0 !== b && b()) : FileSystem.fs.writeFile(a, c, b) : (a = FileSystem.fs.createWriteStream(a), a.write(c), a.end())) : (k = new Blob([c]), c = document.createElement("a"), c.download = a, c.href = window.URL.createObjectURL(k), c.onclick = function() {
    document.body.removeChild(this);
  }, c.style.display = "none", document.body.appendChild(c), c.click(), void 0 !== b && b());
};
FileSystem.chooseFile = function(a, c, k, b) {
  var f = document.createElement("input");
  f.type = "file";
  f.style.display = "none";
  document.body.appendChild(f);
  void 0 !== c && (f.accept = c);
  !0 === b && (f.multiple = !0);
  f.onchange = function(b) {
    void 0 !== a && a(f.files);
    document.body.removeChild(f);
  };
  void 0 !== k && (f.nwsaveas = !0 !== k ? k : "file");
  f.click();
};
FileSystem.chooseFileName = function(a, c, k) {
  k = prompt("Save As", void 0 !== k ? k : "file");
  null !== k && (void 0 === c || k.endsWith(c) || (k += c), void 0 !== a && a(k));
};
FileSystem.copyFile = function(a, c) {
  void 0 !== FileSystem.fs && (void 0 !== FileSystem.fs.copyFileSync ? FileSystem.fs.copyFileSync(a, c) : (a.replace(/\//g, "\\"), c.replace(/\//g, "\\"), FileSystem.fs.createReadStream(a).pipe(FileSystem.fs.createWriteStream(c))));
};
FileSystem.makeDirectory = function(a) {
  void 0 !== FileSystem.fs && (a.replace(/\//g, "\\"), FileSystem.fs.mkdirSync(a, {recursive:!0}));
};
FileSystem.getFilesDirectory = function(a) {
  if (void 0 !== FileSystem.fs) {
    try {
      return a.replace(/\//g, "\\"), FileSystem.fs.readdirSync(a);
    } catch (c) {
    }
  }
  return [];
};
FileSystem.deleteFolder = function(a) {
  void 0 !== FileSystem.fs && FileSystem.fs.existsSync(a) && (FileSystem.fs.readdirSync(a).forEach(function(c, k) {
    c = a + "/" + c;
    FileSystem.fs.lstatSync(c).isDirectory() ? FileSystem.deleteFolder(c) : FileSystem.fs.unlinkSync(c);
  }), FileSystem.fs.rmdirSync(a));
};
FileSystem.copyFolder = function(a, c) {
  if (void 0 !== FileSystem.fs) {
    a.replace(/\//g, "\\");
    c.replace(/\//g, "\\");
    FileSystem.makeDirectory(c);
    for (var k = FileSystem.fs.readdirSync(a), b = 0; b < k.length; b++) {
      var f = a + "\\" + k[b], d = c + "\\" + k[b], h = FileSystem.fs.statSync(f);
      h.isDirectory() ? FileSystem.copyFolder(f, d) : h.isSymbolicLink() ? FileSystem.fs.symlinkSync(FileSystem.fs.readlinkSync(f), d) : FileSystem.copyFile(f, d);
    }
  }
};
FileSystem.fileExists = function(a) {
  return void 0 !== FileSystem.fs ? (a.replace(/\//g, "\\"), FileSystem.fs.existsSync(a)) : !1;
};
FileSystem.getFileName = function(a) {
  if (void 0 !== a) {
    var c = a.lastIndexOf("\\"), k = a.lastIndexOf("/");
    return a.substring(c > k ? c + 1 : k + 1, a.lastIndexOf("."));
  }
  return "";
};
FileSystem.getFileNameWithExtension = function(a) {
  if (void 0 !== a) {
    var c = a.lastIndexOf("\\"), k = a.lastIndexOf("/");
    return a.substring(c > k ? c + 1 : k + 1, a.length);
  }
  return "";
};
FileSystem.getNameWithoutExtension = function(a) {
  return void 0 !== a ? a.substring(0, a.lastIndexOf(".")) : "";
};
FileSystem.getFilePath = function(a) {
  if (void 0 !== a) {
    var c = a.lastIndexOf("\\"), k = a.lastIndexOf("/");
    return a.substring(0, c > k ? c + 1 : k + 1);
  }
  return "";
};
FileSystem.getFileExtension = function(a) {
  return void 0 !== a ? a.substring(a.lastIndexOf(".") + 1, a.length).toLowerCase() : "";
};
"use strict";
THREE.KeyframeTrack.prototype.color = "#FF0000";
THREE.KeyframeTrack.prototype.setColor = function(a) {
  this.color = a;
};
THREE.KeyframeTrack.prototype.sort = function() {
  for (var a = 0; a < this.times.length; a++) {
    for (var c = a + 1; c < this.times.length; c++) {
      if (this.times[a] > this.times[c]) {
        var k = this.times[c];
        this.times[c] = this.times[a];
        this.times[a] = k;
        for (var b = this.getValueSize(), f = c * b, d = a * b, h = 0; h < b; h++) {
          k = this.values[f + h], this.values[f + h] = this.values[d + h], this.values[d + h] = k;
        }
      }
    }
  }
};
THREE.KeyframeTrack._toJSON = THREE.KeyframeTrack.toJSON;
THREE.KeyframeTrack.toJSON = function(a) {
  var c = THREE.KeyframeTrack._toJSON.call(this, a);
  c.color = a.color;
  return c;
};
THREE.KeyframeTrack._parse = THREE.KeyframeTrack.parse;
THREE.KeyframeTrack.parse = function(a) {
  var c = THREE.KeyframeTrack._parse.call(this, a);
  void 0 !== a.color && (c.color = a.color);
  return c;
};
"use strict";
THREE.AnimationClip.prototype.enabled = !0;
THREE.AnimationClip.prototype.loop = THREE.LoopRepeat;
THREE.AnimationClip.prototype.timeScale = 1;
THREE.AnimationClip.prototype.weight = 1;
THREE.AnimationClip._toJSON = THREE.AnimationClip.toJSON;
THREE.AnimationClip.toJSON = function(a) {
  var c = THREE.AnimationClip._toJSON.call(this, a);
  c.enabled = a.enabled;
  c.loop = a.loop;
  c.timeScale = a.timeScale;
  c.weight = a.weight;
  return c;
};
THREE.AnimationClip._parse = THREE.AnimationClip.parse;
THREE.AnimationClip.parse = function(a) {
  var c = THREE.AnimationClip._parse.call(this, a);
  void 0 !== a.enabled && (c.enabled = a.enabled, c.loop = a.loop, c.timeScale = a.timeScale, c.weight = a.weight);
  return c;
};
"use strict";
THREE.Object3D.prototype.folded = !1;
THREE.Object3D.prototype.locked = !1;
THREE.Object3D.prototype.contains = function(a) {
  for (var c = 0; c < this.children.length; c++) {
    if (this.children[c].uuid === a.uuid || this.children[c].contains(a)) {
      return !0;
    }
  }
  return !1;
};
THREE.Object3D.prototype.playAnimation = function() {
  void 0 !== this.mixer && this.mixer.play();
};
THREE.Object3D.prototype.stopAnimation = function() {
  void 0 !== this.mixer && this.mixer.stop();
};
THREE.Object3D.prototype.initialize = function() {
  void 0 !== this.animations && (this.mixer = new AnimationMixer(this), this.mixer.createActions(this.animations), this.mixer.play());
};
THREE.Object3D.prototype.update = function(a) {
  void 0 !== this.mixer && this.mixer.update(a);
};
THREE.Object3D.prototype.resize = function(a, c) {
};
THREE.Object3D.prototype.dispose = function() {
  void 0 !== this.mixer && this.mixer.dispose();
};
THREE.Object3D.prototype.addAbove = function(a, c) {
  if (a === this) {
    return console.error("THREE.Object3D.add: object can't be added as a child of itself.", a), this;
  }
  a && a.isObject3D ? (null !== a.parent && a.parent.remove(a), a.parent = this, a.dispatchEvent({type:"added"}), c = this.children.indexOf(c), this.children.splice(c, 0, a)) : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", a);
  return this;
};
THREE.Object3D.prototype.addBellow = function(a, c) {
  if (a === this) {
    return console.error("THREE.Object3D.add: object can't be added as a child of itself.", a), this;
  }
  a && a.isObject3D ? (null !== a.parent && a.parent.remove(a), a.parent = this, a.dispatchEvent({type:"added"}), c = this.children.indexOf(c) + 1, this.children.splice(c, 0, a)) : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", a);
  return this;
};
THREE.Object3D.prototype.getScene = function() {
  for (var a = this; null !== a.parent;) {
    if (a = a.parent, a instanceof Scene) {
      return a;
    }
  }
  return null;
};
THREE.Object3D.prototype.removeAll = function() {
  for (; 0 < this.children.length;) {
    this.remove(this.children[0]);
  }
};
THREE.Object3D.prototype.isEmpty = function() {
  return 0 === this.children.length;
};
THREE.Object3D.prototype.destroy = function() {
  for (; 0 < this.children.length;) {
    this.children[0].destroy();
  }
  null !== this.parent && (this.dispose && this.dispose(), this.parent.remove(this), this.parent = null);
};
THREE.Object3D.prototype.toJSON = function(a, c, k) {
  function b(b, c) {
    void 0 === b[c.uuid] && (b[c.uuid] = c.toJSON(a));
    return c.uuid;
  }
  function f(a) {
    var b = [], c;
    for (c in a) {
      var d = a[c];
      delete d.metadata;
      b.push(d);
    }
    return b;
  }
  var d = void 0 === a, h = {};
  d && (a = new ResourceManager.ResourceContainer, h.metadata = {version:Nunu.VERSION, type:"NunuProgram"});
  var n = {};
  n.uuid = this.uuid;
  n.type = this.type;
  n.name = this.name;
  n.folded = this.folded;
  n.locked = this.locked;
  n.castShadow = this.castShadow;
  n.receiveShadow = this.receiveShadow;
  n.visible = this.visible;
  n.matrixAutoUpdate = this.matrixAutoUpdate;
  n.frustumCulled = this.frustumCulled;
  n.renderOrder = this.renderOrder;
  n.position = this.position.toArray();
  n.quaternion = this.quaternion.toArray();
  n.scale = this.scale.toArray();
  "{}" !== JSON.stringify(this.userData) && (n.userData = this.userData);
  if (void 0 !== this.geometry) {
    n.geometry = b(a.geometries, this.geometry);
    var q = this.geometry.parameters;
    if (void 0 !== q && void 0 !== q.shapes) {
      var m = q.shapes;
      if (Array.isArray(m)) {
        q = 0;
        for (var t = m.length; q < t; q++) {
          b(a.shapes, m[q]);
        }
      } else {
        b(a.shapes, m);
      }
    }
  }
  if (void 0 !== this.material) {
    if (this.material instanceof THREE.Material) {
      n.material = b(a.materials, this.material);
    } else {
      if (this.material instanceof Array) {
        m = [];
        for (q = 0; q < this.material.length; q++) {
          m.push(b(a.materials, this.material[q]));
        }
        n.material = m;
      }
    }
  }
  if (void 0 !== this.animations && 0 < this.animations.length) {
    for (n.animations = [], q = 0; q < this.animations.length; q++) {
      n.animations.push(THREE.AnimationClip.toJSON(this.animations[q]));
    }
  }
  void 0 !== c && c(a, n);
  if (!1 !== k && 0 < this.children.length) {
    for (n.children = [], q = 0; q < this.children.length; q++) {
      this.children[q].locked || n.children.push(this.children[q].toJSON(a).object);
    }
  }
  d && (h.geometries = f(a.geometries), h.materials = f(a.materials), h.textures = f(a.textures), h.images = f(a.images), h.videos = f(a.videos), h.audio = f(a.audio), h.fonts = f(a.fonts), h.skeletons = f(a.skeletons), h.resources = f(a.resources), h.shapes = f(a.shapes));
  h.object = n;
  return h;
};
"use strict";
THREE.BufferGeometry.prototype.computeBoundingSphere = function() {
  var a = new THREE.Box3, c = new THREE.Vector3;
  return function() {
    null === this.boundingSphere && (this.boundingSphere = new THREE.Sphere);
    var k = this.attributes.position;
    if (k) {
      var b = this.boundingSphere.center;
      a.setFromBufferAttribute(k);
      a.getCenter(b);
      var f = 0;
      k = k.array;
      for (var d = k.length, h = 0; h < d; h += 3) {
        c.set(k[h], k[h + 1], k[h + 2]);
        var n = b.distanceToSquared(c);
        n > f && (f = n);
      }
      this.boundingSphere.radius = Math.sqrt(f);
    }
  };
}();
THREE.BufferGeometry.prototype.toJSON = function() {
  var a = {metadata:{version:4.5, type:"BufferGeometry", generator:"BufferGeometry.toJSON"}};
  a.uuid = this.uuid;
  a.type = this.type;
  a.name = this.name;
  if (void 0 !== this.parameters) {
    var c = this.parameters;
    for (h in c) {
      void 0 !== c[h] && (a[h] = c[h]);
    }
    return a;
  }
  a.data = {attributes:{}, morphAttributes:{}};
  var k = this.index;
  null !== k && (c = Array.prototype.slice.call(k.array), a.data.index = {type:k.array.constructor.name, array:c});
  var b = this.attributes;
  for (h in b) {
    k = b[h], c = Array.prototype.slice.call(k.array), a.data.attributes[h] = {itemSize:k.itemSize, type:k.array.constructor.name, array:c, normalized:k.normalized};
  }
  c = this.morphAttributes;
  for (h in c) {
    b = this.morphAttributes[h];
    c = [];
    for (var f = 0, d = b.length; f < d; f++) {
      k = b[f], c.push({name:k.name, itemSize:k.itemSize, type:k.array.constructor.name, array:Array.prototype.slice.call(k.array), normalized:k.normalized});
    }
    a.data.morphAttributes[h] = c;
  }
  var h = this.groups;
  0 < h.length && (a.data.groups = JSON.parse(JSON.stringify(h)));
  h = this.boundingSphere;
  null !== h && (a.data.boundingSphere = {center:h.center.toArray(), radius:h.radius});
  return a;
};
"use strict";
THREE.Camera.prototype.render = function(a, c) {
  a.render(c, this);
};
"use strict";
THREE.Material.prototype.dispose = function() {
  function a(a) {
    void 0 !== a && null !== a && a.dispose();
  }
  this.dispatchEvent({type:"dispose"});
  a(this.map);
  a(this.bumpMap);
  a(this.normalMap);
  a(this.displacementMap);
  a(this.specularMap);
  a(this.emissiveMap);
  a(this.alphaMap);
  a(this.roughnessMap);
  a(this.metalnessMap);
  a(this.envMap);
};
THREE.Material.prototype.toJSON = function(a) {
  function c(a) {
    var b = [], c;
    for (c in a) {
      var d = a[c];
      delete d.metadata;
      b.push(d);
    }
    return b;
  }
  void 0 === a && (a = {textures:{}, images:{}, videos:{}});
  var k = {};
  k.uuid = this.uuid;
  k.type = this.type;
  k.name = this.name;
  k.depthFunc = this.depthFunc;
  k.depthTest = this.depthTest;
  k.depthWrite = this.depthWrite;
  this.color && this.color.isColor && (k.color = this.color.getHex());
  void 0 !== this.roughness && (k.roughness = this.roughness);
  void 0 !== this.metalness && (k.metalness = this.metalness);
  this.specular && this.specular.isColor && (k.specular = this.specular.getHex());
  void 0 !== this.shininess && (k.shininess = this.shininess);
  void 0 !== this.clearCoat && (k.clearCoat = this.clearCoat);
  void 0 !== this.clearCoatRoughness && (k.clearCoatRoughness = this.clearCoatRoughness);
  this.map && this.map.isTexture && (k.map = this.map.toJSON(a).uuid);
  this.alphaMap && this.alphaMap.isTexture && (k.alphaMap = this.alphaMap.toJSON(a).uuid);
  this.lightMap && this.lightMap.isTexture && (k.lightMap = this.lightMap.toJSON(a).uuid);
  this.bumpMap && this.bumpMap.isTexture && (k.bumpMap = this.bumpMap.toJSON(a).uuid, k.bumpScale = this.bumpScale);
  this.normalMap && this.normalMap.isTexture && (k.normalMap = this.normalMap.toJSON(a).uuid, k.normalMapType = this.normalMapType, k.normalScale = this.normalScale.toArray());
  this.displacementMap && this.displacementMap.isTexture && (k.displacementMap = this.displacementMap.toJSON(a).uuid, k.displacementScale = this.displacementScale, k.displacementBias = this.displacementBias);
  this.roughnessMap && this.roughnessMap.isTexture && (k.roughnessMap = this.roughnessMap.toJSON(a).uuid);
  this.metalnessMap && this.metalnessMap.isTexture && (k.metalnessMap = this.metalnessMap.toJSON(a).uuid);
  this.emissive && this.emissive.isColor && (k.emissive = this.emissive.getHex());
  1 !== this.emissiveIntensity && (k.emissiveIntensity = this.emissiveIntensity);
  this.matcap && this.matcap.isTexture && (k.matcap = this.matcap.toJSON(a).uuid);
  this.emissiveMap && this.emissiveMap.isTexture && (k.emissiveMap = this.emissiveMap.toJSON(a).uuid);
  this.aoMap && this.aoMap.isTexture && (k.aoMap = this.aoMap.toJSON(a).uuid);
  this.aoMapIntensity && (k.aoMapIntensity = this.aoMapIntensity);
  this.specularMap && this.specularMap.isTexture && (k.specularMap = this.specularMap.toJSON(a).uuid);
  this.envMap && this.envMap.isTexture && (k.envMap = this.envMap.toJSON(a).uuid, k.reflectivity = this.reflectivity, this.combine && (k.combine = this.combine), this.envMapIntensity && (k.envMapIntensity = this.envMapIntensity), this.refractionRatio && (k.refractionRatio = this.refractionRatio));
  this.gradientMap && this.gradientMap.isTexture && (k.gradientMap = this.gradientMap.toJSON(a).uuid);
  void 0 !== this.size && (k.size = this.size);
  void 0 !== this.sizeAttenuation && (k.sizeAttenuation = this.sizeAttenuation);
  void 0 !== this.rotation && (k.rotation = this.rotation);
  void 0 !== this.linewidth && (k.linewidth = this.linewidth);
  void 0 !== this.dashSize && (k.dashSize = this.dashSize);
  void 0 !== this.gapSize && (k.gapSize = this.gapSize);
  void 0 !== this.scale && (k.scale = this.scale);
  this.blending !== THREE.NormalBlending && (k.blending = this.blending);
  this.side !== THREE.FrontSide && (k.side = this.side);
  this.vertexColors !== THREE.NoColors && (k.vertexColors = this.vertexColors);
  k.flatShading = this.flatShading;
  1 > this.opacity && (k.opacity = this.opacity);
  !0 === this.transparent && (k.transparent = this.transparent);
  !0 === this.dithering && (k.dithering = !0);
  0 < this.alphaTest && (k.alphaTest = this.alphaTest);
  !0 === this.premultipliedAlpha && (k.premultipliedAlpha = this.premultipliedAlpha);
  !0 === this.wireframe && (k.wireframe = this.wireframe);
  1 < this.wireframeLinewidth && (k.wireframeLinewidth = this.wireframeLinewidth);
  "round" !== this.wireframeLinecap && (k.wireframeLinecap = this.wireframeLinecap);
  "round" !== this.wireframeLinejoin && (k.wireframeLinejoin = this.wireframeLinejoin);
  k.skinning = this.skinning;
  k.morphTargets = this.morphTargets;
  void 0 !== this.morphNormals && (k.morphNormals = this.morphNormals);
  if (void 0 === a) {
    var b = c(a.textures), f = c(a.images);
    a = c(a.videos);
    0 < b.length && (k.textures = b);
    0 < f.length && (k.images = f);
    0 < a.length && (k.videos = a);
  }
  return k;
};
"use strict";
THREE.BufferGeometryLoader.prototype.parse = function(a) {
  var c = {Int8Array:Int8Array, Uint8Array:Uint8Array, Uint8ClampedArray:Uint8ClampedArray, Int16Array:Int16Array, Uint16Array:Uint16Array, Int32Array:Int32Array, Uint32Array:Uint32Array, Float32Array:Float32Array, Float64Array:Float64Array}, k = new THREE.BufferGeometry, b = a.data.index;
  if (void 0 !== b) {
    var f = new c[b.type](b.array);
    k.setIndex(new THREE.BufferAttribute(f, 1));
  }
  b = a.data.attributes;
  for (var d in b) {
    var h = b[d];
    f = new c[h.type](h.array);
    k.addAttribute(d, new THREE.BufferAttribute(f, h.itemSize, h.normalized));
  }
  var n = a.data.morphAttributes;
  for (d in n) {
    var q = n[d], m = [];
    b = 0;
    for (var t = q.length; b < t; b++) {
      h = q[b], f = new c[h.type](h.array), f = new THREE.BufferAttribute(f, h.itemSize, h.normalized), void 0 !== h.name && (f.name = h.name), m.push(f);
    }
    k.morphAttributes[d] = m;
  }
  c = a.data.groups || a.data.drawcalls || a.data.offsets;
  if (void 0 !== c) {
    for (b = 0, d = c.length; b !== d; ++b) {
      h = c[b], k.addGroup(h.start, h.count, h.materialIndex);
    }
  }
  a = a.data.boundingSphere;
  void 0 !== a && (b = new THREE.Vector3, void 0 !== a.center && b.fromArray(a.center), k.boundingSphere = new THREE.Sphere(b, a.radius));
  return k;
};
"use strict";
THREE.Texture.prototype.toJSON = function(a) {
  if (void 0 !== a.textures[this.uuid]) {
    return a.textures[this.uuid];
  }
  var c = {metadata:{version:Nunu.VERSION, type:"Texture"}, uuid:this.uuid, name:this.name, category:this.category, format:this.format, mapping:this.mapping, repeat:[this.repeat.x, this.repeat.y], offset:[this.offset.x, this.offset.y], center:[this.center.x, this.center.y], rotation:this.rotation, wrap:[this.wrapS, this.wrapT], minFilter:this.minFilter, magFilter:this.magFilter, anisotropy:this.anisotropy, flipY:this.flipY};
  return a.textures[this.uuid] = c;
};
"use strict";
THREE.LightShadow.prototype.toJSON = function() {
  var a = {};
  a.bias = this.bias;
  a.radius = this.radius;
  a.mapSize = {};
  a.mapSize.x = this.mapSize.x;
  a.mapSize.y = this.mapSize.y;
  a.camera = {};
  a.camera.top = this.camera.top;
  a.camera.bottom = this.camera.bottom;
  a.camera.far = this.camera.far;
  a.camera.near = this.camera.near;
  a.camera.left = this.camera.left;
  a.camera.right = this.camera.right;
  return a;
};
THREE.LightShadow.prototype.fromJSON = function(a) {
  void 0 !== a.bias && (this.bias = a.bias);
  void 0 !== a.radius && (this.radius = a.radius);
  if (void 0 !== a.mapSize) {
    var c = a.mapSize;
    this.mapSize.set(c.x, c.y);
  }
  void 0 !== a.camera && (a = a.camera, this.camera.top = a.top, this.camera.bottom = a.bottom, this.camera.left = a.left, this.camera.right = a.right, this.camera.near = a.near, this.camera.far = a.far);
};
"use strict";
THREE.Fog.NONE = 0;
THREE.Fog.LINEAR = 1;
THREE.Fog.EXPONENTIAL = 2;
"use strict";
THREE.Points.prototype.raycast = function(a, c) {
  null === this.geometry.boundingBox && this.geometry.computeBoundingBox();
  var k = new THREE.Box3;
  k.copy(this.geometry.boundingBox);
  k.applyMatrix4(this.matrixWorld);
  null !== a.ray.intersectBox(k, new THREE.Vector3) && c.push({object:this});
};
"use strict";
function AnimationMixer(a) {
  THREE.AnimationMixer.call(this, a);
  this.playing = !1;
}
AnimationMixer.prototype = Object.create(THREE.AnimationMixer.prototype);
AnimationMixer.prototype.createActions = function(a) {
  for (var c = 0; c < a.length; c++) {
    var k = this.clipAction(a[c]);
    k.setLoop(a[c].loop);
    k.weight = a[c].weight;
    k.timeScale = a[c].timeScale;
    k.enabled = a[c].enabled;
    k.play();
  }
  return this._actions;
};
AnimationMixer.prototype.setTime = function(a) {
  this.time = a;
  for (var c = 0; c < this._actions.length; c++) {
    this._actions[c].time = a;
  }
  this.update(0, !0);
};
AnimationMixer.prototype.play = function() {
  this.playing = !0;
};
AnimationMixer.prototype.stop = function() {
  this.setTime(0);
  this.playing = !1;
};
AnimationMixer.prototype.pause = function() {
  this.playing = !1;
};
AnimationMixer.prototype.dispose = function() {
  this.stopAllAction();
  this.uncacheRoot(this._root);
};
AnimationMixer.prototype.update = function(a, c) {
  if (this.playing || c) {
    this.time += a;
    c = Math.sign(a);
    for (var k = 0; k < this._actions.length; k++) {
      this._actions[k]._update(this.time, a, c, this._accuIndex);
    }
    for (k = 0; k < this._bindings.length; k++) {
      this._bindings[k].apply(this._accuIndex);
    }
  }
  return this;
};
"use strict";
function Key() {
  this.justReleased = this.justPressed = this.pressed = !1;
}
Key.DOWN = -1;
Key.UP = 1;
Key.RESET = 0;
Key.prototype.constructor = Key;
Key.prototype.update = function(a) {
  this.justReleased = this.justPressed = !1;
  a === Key.DOWN ? (!1 === this.pressed && (this.justPressed = !0), this.pressed = !0) : a === Key.UP ? (this.pressed && (this.justReleased = !0), this.pressed = !1) : a === Key.RESET && (this.justPressed = this.justReleased = !1);
};
Key.prototype.set = function(a, c, k) {
  this.justPressed = a;
  this.pressed = c;
  this.justReleased = k;
};
Key.prototype.reset = function() {
  this.justReleased = this.pressed = this.justPressed = !1;
};
"use strict";
function Keyboard(a) {
  this.keys = [];
  this.actions = [];
  var c = this, k = this.actions;
  this.events = new EventManager;
  this.events.add(window, "keydown", function(a) {
    k.push(a.keyCode);
    k.push(Key.DOWN);
  });
  this.events.add(window, "keyup", function(a) {
    k.push(a.keyCode);
    k.push(Key.UP);
  });
  this.events.add(window, "focus", function(a) {
    c.reset();
  });
  !0 !== a && this.create();
}
Keyboard.prototype = Keyboard;
Keyboard.prototype.constructor = Keyboard;
Keyboard.update = function() {
  for (var a = 0; this.actions.length > a;) {
    var c = this.actions.shift(), k = this.actions.shift();
    void 0 === this.keys[c] && (this.keys[c] = new Key);
    this.keys[c].update(k);
    if (this.keys[c].justReleased || this.keys[c].justPressed) {
      this.actions.push(c), this.actions.push(Key.RESET), a += 2;
    }
  }
};
Keyboard.reset = function() {
  for (var a = 0; a < this.keys.length; a++) {
    void 0 !== this.keys[a] && this.keys[a].reset();
  }
};
Keyboard.keyPressed = function(a) {
  return void 0 !== this.keys[a] && this.keys[a].pressed;
};
Keyboard.keyJustPressed = function(a) {
  return void 0 !== this.keys[a] && this.keys[a].justPressed;
};
Keyboard.keyJustReleased = function(a) {
  return void 0 !== this.keys[a] && this.keys[a].justReleased;
};
Keyboard.create = function() {
  this.events.create();
};
Keyboard.dispose = function() {
  this.events.destroy();
};
Keyboard.TAB = 9;
Keyboard.ENTER = 13;
Keyboard.SHIFT = 16;
Keyboard.CTRL = 17;
Keyboard.ALT = 18;
Keyboard.CAPS_LOCK = 20;
Keyboard.ESC = 27;
Keyboard.SPACEBAR = 32;
Keyboard.PAGE_UP = 33;
Keyboard.PAGE_DOWN = 34;
Keyboard.END = 35;
Keyboard.HOME = 36;
Keyboard.INSERT = 45;
Keyboard.DEL = 46;
Keyboard.LEFT = 37;
Keyboard.RIGHT = 39;
Keyboard.UP = 38;
Keyboard.DOWN = 40;
Keyboard.NUM0 = 48;
Keyboard.NUM1 = 49;
Keyboard.NUM2 = 50;
Keyboard.NUM3 = 51;
Keyboard.NUM4 = 52;
Keyboard.NUM5 = 53;
Keyboard.NUM6 = 54;
Keyboard.NUM7 = 55;
Keyboard.NUM8 = 56;
Keyboard.NUM9 = 57;
Keyboard.A = 65;
Keyboard.B = 66;
Keyboard.C = 67;
Keyboard.D = 68;
Keyboard.E = 69;
Keyboard.F = 70;
Keyboard.G = 71;
Keyboard.H = 72;
Keyboard.I = 73;
Keyboard.J = 74;
Keyboard.K = 75;
Keyboard.L = 76;
Keyboard.M = 77;
Keyboard.N = 78;
Keyboard.O = 79;
Keyboard.P = 80;
Keyboard.Q = 81;
Keyboard.R = 82;
Keyboard.S = 83;
Keyboard.T = 84;
Keyboard.U = 85;
Keyboard.V = 86;
Keyboard.W = 87;
Keyboard.X = 88;
Keyboard.Y = 89;
Keyboard.Z = 90;
Keyboard.F1 = 112;
Keyboard.F2 = 113;
Keyboard.F3 = 114;
Keyboard.F4 = 115;
Keyboard.F5 = 116;
Keyboard.F6 = 117;
Keyboard.F7 = 118;
Keyboard.F8 = 119;
Keyboard.F9 = 120;
Keyboard.F10 = 121;
Keyboard.F11 = 122;
Keyboard.F12 = 123;
"use strict";
function TizenKeyboard() {
}
TizenKeyboard.ARROW_LEFT = 37;
TizenKeyboard.ARROW_UP = 38;
TizenKeyboard.ARROW_RIGHT = 39;
TizenKeyboard.ARROW_DOWN = 40;
TizenKeyboard.ENTER = 13;
TizenKeyboard.BACK = 10009;
TizenKeyboard.VOLUME_UP = 447;
TizenKeyboard.VOLUME_DOWN = 448;
TizenKeyboard.VOLUME_MUTE = 449;
TizenKeyboard.CHANNEL_UP = 427;
TizenKeyboard.CHANNEL_DOWN = 428;
TizenKeyboard.F0_RED = 403;
TizenKeyboard.F1_GREEN = 404;
TizenKeyboard.F2_YELLOW = 405;
TizenKeyboard.F3_BLUE = 406;
TizenKeyboard.NUM_0 = 48;
TizenKeyboard.NUM_1 = 49;
TizenKeyboard.NUM_2 = 50;
TizenKeyboard.NUM_3 = 51;
TizenKeyboard.NUM_4 = 52;
TizenKeyboard.NUM_5 = 53;
TizenKeyboard.NUM_6 = 54;
TizenKeyboard.NUM_7 = 55;
TizenKeyboard.NUM_8 = 56;
TizenKeyboard.NUM_9 = 57;
TizenKeyboard.MINUS = 189;
TizenKeyboard.E_MANUAL = 10146;
TizenKeyboard.PREVIOUS_CHANNEL = 10190;
TizenKeyboard.PICTURE_SIZE = 10140;
TizenKeyboard.SOCCER = 10228;
TizenKeyboard.TELETEXT = 10200;
TizenKeyboard.SEARCH = 10225;
TizenKeyboard.GUIDE = 458;
TizenKeyboard.SOURCE = 10072;
TizenKeyboard.EXTRA = 10253;
TizenKeyboard.MTS = 10195;
TizenKeyboard.MEDIA_PLAY_PAUSE = 10252;
TizenKeyboard.MENU = 18;
TizenKeyboard.MEDIA_REWIND = 412;
TizenKeyboard.TOOLS = 10135;
TizenKeyboard.MEDIA_FAST_FORWARD = 417;
TizenKeyboard.INFO = 457;
TizenKeyboard.MEDIA_PLAY = 415;
TizenKeyboard.EXIT = 10182;
TizenKeyboard.MEDIA_PAUSE = 19;
TizenKeyboard.MEDIA_STOP = 413;
TizenKeyboard.CAPTION = 10221;
TizenKeyboard.MEDIA_RECORD = 416;
TizenKeyboard.CHANNEL_LIST = 10073;
TizenKeyboard.MEDIA_TRACK_PREVIOUS = 10232;
TizenKeyboard.MEDIA_TRACK_NEXT = 10233;
TizenKeyboard.MEDIA_3D = 10199;
"use strict";
function Mouse(a, c) {
  this._keys = Array(5);
  this._position = new THREE.Vector2(0, 0);
  this._positionUpdated = !1;
  this._delta = new THREE.Vector2(0, 0);
  this._wheel = 0;
  this._wheelUpdated = !1;
  this._doubleClicked = Array(5);
  this.keys = Array(5);
  this.position = new THREE.Vector2(0, 0);
  this.delta = new THREE.Vector2(0, 0);
  this.wheel = 0;
  this.doubleClicked = Array(5);
  this.domElement = void 0 !== a ? a : window;
  this.canvas = null;
  this.events = new EventManager;
  for (a = 0; 5 > a; a++) {
    this._doubleClicked[a] = !1, this.doubleClicked[a] = !1, this._keys[a] = new Key, this.keys[a] = new Key;
  }
  var k = this;
  void 0 !== window.onmousewheel ? this.events.add(this.domElement, "mousewheel", function(a) {
    k._wheel = a.deltaY;
    k._wheelUpdated = !0;
  }) : void 0 !== window.addEventListener ? this.events.add(this.domElement, "DOMMouseScroll", function(a) {
    k._wheel = 30 * a.detail;
    k._wheelUpdated = !0;
  }) : this.events.add(this.domElement, "wheel", function(a) {
    k._wheel = a.deltaY;
    k._wheelUpdated = !0;
  });
  if (void 0 !== window.ontouchstart || 0 < navigator.msMaxTouchPoints) {
    var b = new Vector2(0, 0);
    this.events.add(this.domElement, "touchstart", function(a) {
      a = a.touches[0];
      k.updatePosition(a.clientX, a.clientY, 0, 0);
      k.updateKey(Mouse.LEFT, Key.DOWN);
      b.set(a.clientX, a.clientY);
    });
    this.events.add(this.domElement, "touchend", function(a) {
      k.updateKey(Mouse.LEFT, Key.UP);
    });
    this.events.add(this.domElement, "touchcancel", function(a) {
      k.updateKey(Mouse.LEFT, Key.UP);
    });
    this.events.add(document.body, "touchmove", function(a) {
      a = a.touches[0];
      k.updatePosition(a.clientX, a.clientY, a.clientX - b.x, a.clientY - b.y);
      b.set(a.clientX, a.clientY);
    });
  }
  this.events.add(this.domElement, "mousemove", function(a) {
    k.updatePosition(a.clientX, a.clientY, a.movementX, a.movementY);
  });
  this.events.add(this.domElement, "mousedown", function(a) {
    k.updateKey(a.which - 1, Key.DOWN);
  });
  this.events.add(this.domElement, "mouseup", function(a) {
    k.updateKey(a.which - 1, Key.UP);
  });
  this.events.add(this.domElement, "dragstart", function(a) {
    k.updateKey(a.which - 1, Key.UP);
  });
  this.events.add(this.domElement, "dblclick", function(a) {
    k._doubleClicked[a.which - 1] = !0;
  });
  !0 !== c && this.create();
}
Mouse.prototype = Mouse;
Mouse.prototype.constructor = Mouse;
Mouse.LEFT = 0;
Mouse.MIDDLE = 1;
Mouse.RIGHT = 2;
Mouse.BACK = 3;
Mouse.FORWARD = 4;
Mouse.setCanvas = function(a) {
  this.canvas = a;
  a.mouseInside = !1;
  a.addEventListener("mouseenter", function() {
    this.mouseInside = !0;
  });
  a.addEventListener("mouseleave", function() {
    this.mouseInside = !1;
  });
};
Mouse.insideCanvas = function() {
  return null !== this.canvas && this.canvas.mouseInside;
};
Mouse.setLock = function(a) {
  null !== this.canvas && (a ? this.canvas.requestPointerLock ? this.canvas.requestPointerLock() : this.canvas.mozRequestPointerLock ? this.canvas.mozRequestPointerLock() : this.canvas.webkitRequestPointerLock && this.canvas.webkitRequestPointerLock() : document.exitPointerLock ? document.exitPointerLock() : document.mozExitPointerLock ? document.mozExitPointerLock() : document.webkitExitPointerLock && document.webkitExitPointerLock());
};
Mouse.buttonPressed = function(a) {
  return this.keys[a].pressed;
};
Mouse.buttonDoubleClicked = function(a) {
  return this.doubleClicked[a];
};
Mouse.buttonJustPressed = function(a) {
  return this.keys[a].justPressed;
};
Mouse.buttonJustReleased = function(a) {
  return this.keys[a].justReleased;
};
Mouse.updatePosition = function(a, c, k, b) {
  if (null !== this.canvas) {
    var f = this.canvas.getBoundingClientRect();
    a -= f.left;
    c -= f.top;
  }
  this._position.set(a, c);
  this._delta.x += k;
  this._delta.y += b;
  this._positionUpdated = !0;
};
Mouse.updateKey = function(a, c) {
  -1 < a && this._keys[a].update(c);
};
Mouse.update = function() {
  for (var a = 0; 5 > a; a++) {
    this._keys[a].justPressed && this.keys[a].justPressed && (this._keys[a].justPressed = !1), this._keys[a].justReleased && this.keys[a].justReleased && (this._keys[a].justReleased = !1), this.keys[a].set(this._keys[a].justPressed, this._keys[a].pressed, this._keys[a].justReleased), !0 === this._doubleClicked[a] ? (this.doubleClicked[a] = !0, this._doubleClicked[a] = !1) : this.doubleClicked[a] = !1;
  }
  this._wheelUpdated ? (this.wheel = this._wheel, this._wheelUpdated = !1) : this.wheel = 0;
  this._positionUpdated ? (this.delta.copy(this._delta), this.position.copy(this._position), this._delta.set(0, 0), this._positionUpdated = !1) : (this.delta.x = 0, this.delta.y = 0);
};
Mouse.create = function() {
  this.events.create();
};
Mouse.dispose = function() {
  this.events.destroy();
};
"use strict";
function Gamepad() {
  this.product = this.vendor = -1;
  this.connected = !1;
  this.gamepad = null;
  this.buttons = [];
  for (var a = navigator.getGamepads(), c = 0; c < a.length; c++) {
    if (null !== a[c]) {
      this.setGamepad(a[c]);
      break;
    }
  }
  null === this.gamepad && console.warn("nunuStudio: No gamepad found");
}
Gamepad.prototype.setGamepad = function(a) {
  if (void 0 !== a && null !== a) {
    this.index = a.index;
    this.gamepad = a;
    this.buttons = [];
    for (var c = 0; c < a.buttons.length; c++) {
      this.buttons.push(new Key);
    }
    this.setProductVendor(a);
    this.connected = !0;
  } else {
    console.warn("nunuStudio: No gamepad found"), this.disconnect();
  }
};
Gamepad.prototype.disconnect = function() {
  this.product = this.vendor = -1;
  this.connected = !1;
  this.gamepad = null;
  this.buttons = [];
};
Gamepad.prototype.setProductVendor = function(a) {
  try {
    var c = a.id.split(":");
    this.vendor = c[1].split(" ")[1];
    this.product = c[2].replace(" ", "").replace(")", "");
    return;
  } catch (k) {
  }
  try {
    c = a.id.split("-"), this.vendor = c[0], this.product = c[1];
  } catch (k) {
  }
};
Gamepad.prototype.update = function(a) {
  this.gamepad = navigator.getGamepads()[this.index];
  if (void 0 !== this.gamepad) {
    for (a = 0; a < this.buttons.length; a++) {
      this.buttons[a].update(this.gamepad.buttons[a].pressed ? Key.DOWN : Key.UP);
    }
  }
};
Gamepad.prototype.getAnalogueButton = function(a) {
  return a > this.buttons.length || 0 > a ? 0 : this.gamepad.buttons[a].value;
};
Gamepad.prototype.getAxis = function(a) {
  return a > this.gamepad.axes.length || 0 > a ? 0 : this.gamepad.axes[a];
};
Gamepad.prototype.buttonExists = function(a) {
  return 0 <= a && a < this.buttons.length;
};
Gamepad.prototype.buttonPressed = function(a) {
  return this.buttons[a] ? this.buttons[a].pressed : !1;
};
Gamepad.prototype.buttonJustPressed = function(a) {
  return this.buttons[a] ? this.buttons[a].justPressed : !1;
};
Gamepad.prototype.buttonJustReleased = function(a) {
  return this.buttons[a] ? this.buttons[a].justReleased : !1;
};
Gamepad.LEFT = 14;
Gamepad.RIGHT = 15;
Gamepad.DOWN = 13;
Gamepad.UP = 12;
Gamepad.SELECT = 8;
Gamepad.START = 9;
Gamepad.HOME = 16;
Gamepad.LEFT_TRIGGER_A = 4;
Gamepad.LEFT_TRIGGER_B = 6;
Gamepad.RIGHT_TRIGGER_A = 5;
Gamepad.RIGHT_TRIGGER_B = 7;
Gamepad.L1 = 4;
Gamepad.L2 = 6;
Gamepad.L3 = 6;
Gamepad.R1 = 5;
Gamepad.R2 = 7;
Gamepad.R3 = 11;
Gamepad.A = 0;
Gamepad.B = 1;
Gamepad.C = 2;
Gamepad.D = 3;
Gamepad.X = 2;
Gamepad.Y = 3;
Gamepad.LEFT_ANALOGUE_BUT = 10;
Gamepad.LEFT_ANALOGUE_HOR = 0;
Gamepad.LEFT_ANALOGUE_VERT = 1;
Gamepad.RIGHT_ANALOGUE_BUT = 11;
Gamepad.RIGHT_ANALOGUE_HOR = 2;
Gamepad.RIGHT_ANALOGUE_VERT = 3;
"use strict";
function Gyroscope() {
  this.orientation = this.gamma = this.beta = this.alpha = 0;
  this.events = new EventManager;
  var a = this;
  this.events.add(window, "orientationchange", function(c) {
    a.orientation = THREE.Math.degToRad(window.orientation);
  });
  this.events.add(window, "deviceorientation", function(c) {
    a.alpha = THREE.Math.degToRad(c.alpha);
    a.beta = THREE.Math.degToRad(c.beta);
    a.gamma = THREE.Math.degToRad(c.gamma);
  });
  this.events.create();
}
Gyroscope.prototype.setObjectQuaternion = function() {
  var a = new THREE.Euler, c = new THREE.Quaternion, k = new THREE.Vector3(0, 0, 1), b = new THREE.Quaternion(-Math.sqrt(.5), 0, 0, Math.sqrt(.5));
  return function(f) {
    a.set(this.beta, this.alpha, -this.gamma, "YXZ");
    f.quaternion.setFromEuler(a);
    f.quaternion.multiply(b);
    f.quaternion.multiply(c.setFromAxisAngle(k, -this.orientation));
  };
}();
Gyroscope.prototype.dispose = function() {
  this.events.destroy();
};
"use strict";
function RendererState() {
  this.autoClearDepth = this.autoClearStencil = this.autoClearColor = this.autoClear = !1;
  this.clearColor = new THREE.Color;
  this.clearAlpha = 1;
}
RendererState.prototype.backup = function(a) {
  this.autoClear = a.autoClear;
  this.autoClearColor = a.autoClearColor;
  this.autoClearStencil = a.autoClearStencil;
  this.autoClearDepth = a.autoClearDepth;
  this.clearColor.copy(a.getClearColor());
  this.clearAlpha = a.getClearAlpha();
};
RendererState.prototype.restore = function(a) {
  a.autoClear = this.autoClear;
  a.autoClearColor = this.autoClearColor;
  a.autoClearStencil = this.autoClearStencil;
  a.autoClearDepth = this.autoClearDepth;
  a.setClearColor(this.clearColor);
  a.setClearAlpha(this.clearAlpha);
};
"use strict";
function Pass() {
  this.uuid = THREE.Math.generateUUID();
  this.type = "Pass";
  this.needsSwap = this.enabled = !0;
  this.copyToScreen = this.renderToScreen = this.clear = !1;
}
Pass.RGBALinear = {minFilter:THREE.LinearFilter, magFilter:THREE.LinearFilter, format:THREE.RGBAFormat};
Pass.RGBLinear = {minFilter:THREE.LinearFilter, magFilter:THREE.LinearFilter, format:THREE.RGBFormat};
Pass.RGBANearest = {minFilter:THREE.NearestFilter, magFilter:THREE.NearestFilter, format:THREE.RGBAFormat};
Pass.prototype.createQuadScene = function() {
  this.camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);
  this.scene = new THREE.Scene;
  this.quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2), null);
  this.quad.frustumCulled = !1;
  this.scene.add(this.quad);
};
Pass.prototype.setSize = function(a, c) {
};
Pass.prototype.render = function(a, c, k, b, f, d, h) {
};
Pass.prototype.dispose = function() {
};
Pass.prototype.toJSON = function(a) {
  a = {};
  a.uuid = this.uuid;
  a.type = this.type;
  a.clear = this.clear;
  a.enabled = this.enabled;
  a.needsSwap = this.needsSwap;
  a.renderToScreen = this.renderToScreen;
  a.copyToScreen = this.copyToScreen;
  return a;
};
"use strict";
function ShaderPass(a, c) {
  Pass.call(this);
  this.type = "Shader";
  this.textureID = void 0 !== c ? c : "tDiffuse";
  a instanceof THREE.ShaderMaterial ? (this.uniforms = a.uniforms, this.material = a) : a && (this.uniforms = THREE.UniformsUtils.clone(a.uniforms), this.material = new THREE.ShaderMaterial({defines:Object.assign({}, a.defines), uniforms:this.uniforms, vertexShader:a.vertexShader, fragmentShader:a.fragmentShader}));
  this.createQuadScene();
}
ShaderPass.prototype = Object.create(Pass.prototype);
ShaderPass.prototype.render = function(a, c, k, b, f, d, h) {
  this.uniforms[this.textureID] && (this.uniforms[this.textureID].value = k.texture);
  this.quad.material = this.material;
  !0 === this.clear ? (a.autoClear = !0, a.autoClearColor = !0, a.autoClearDepth = !0, a.autoClearStencil = !0) : a.autoClear = !1;
  a.setRenderTarget(this.renderToScreen ? null : c);
  a.render(this.scene, this.camera);
};
"use strict";
function EffectComposer() {
  void 0 === THREE.CopyShader && console.error("EffectComposer relies on THREE.CopyShader");
  this.uuid = THREE.Math.generateUUID();
  this.height = this.width = 1;
  this.passes = [];
  this.writeBuffer = new THREE.WebGLRenderTarget(this.width, this.height, EffectComposer.bufferParameters);
  this.readBuffer = new THREE.WebGLRenderTarget(this.width, this.height, EffectComposer.bufferParameters);
  this.copyPass = new ShaderPass(THREE.CopyShader);
  this.rendererState = new RendererState;
}
EffectComposer.bufferParameters = {minFilter:THREE.LinearFilter, magFilter:THREE.LinearFilter, format:THREE.RGBAFormat, stencilBuffer:!1};
EffectComposer.prototype.swapBuffers = function() {
  var a = this.readBuffer;
  this.readBuffer = this.writeBuffer;
  this.writeBuffer = a;
};
EffectComposer.prototype.addPass = function(a) {
  this.passes.push(a);
};
EffectComposer.prototype.moveBack = function(a) {
  var c = this.passes.indexOf(a);
  if (0 < c) {
    for (var k = c; k !== c - 1; --k) {
      this.passes[k] = this.passes[k - 1];
    }
    this.passes[c - 1] = a;
    return !0;
  }
  return !1;
};
EffectComposer.prototype.moveForward = function(a) {
  var c = this.passes.indexOf(a);
  if (-1 !== c && c < this.passes.length - 1) {
    for (var k = c; k !== c + 1; k += 1) {
      this.passes[k] = this.passes[k + 1];
    }
    this.passes[c + 1] = a;
    return !0;
  }
  return !1;
};
EffectComposer.prototype.removePass = function(a) {
  a = this.passes.indexOf(a);
  -1 !== a && this.passes.splice(a, 1);
};
EffectComposer.prototype.insertPass = function(a, c) {
  this.passes.splice(c, 0, a);
};
EffectComposer.prototype.render = function(a, c, k, b) {
  var f = !1;
  this.rendererState.backup(a);
  for (var d = 0; d < this.passes.length; d++) {
    var h = this.passes[d];
    if (!0 === h.enabled) {
      h.render(a, this.writeBuffer, this.readBuffer, b, f, c, k);
      if (!0 === h.renderToScreen) {
        !0 === h.copyToScreen && (this.copyPass.renderToScreen = !0, this.copyPass.render(a, this.readBuffer, this.writeBuffer, b));
        break;
      }
      !0 === h.needsSwap && (!0 === f && (a.context.stencilFunc(a.context.NOTEQUAL, 1, 4294967295), this.copyPass.renderToScreen = !1, this.copyPass.render(a, this.writeBuffer, this.readBuffer, b), a.context.stencilFunc(a.context.EQUAL, 1, 4294967295)), this.swapBuffers());
      void 0 !== THREE.MaskPass && (h instanceof THREE.MaskPass ? f = !0 : h instanceof THREE.ClearMaskPass && (f = !1));
    }
  }
  this.rendererState.restore(a);
};
EffectComposer.prototype.setSize = function(a, c) {
  a = Math.floor(a);
  c = Math.floor(c);
  this.width = a;
  this.height = c;
  this.writeBuffer.setSize(a, c);
  this.readBuffer.setSize(a, c);
  for (var k = 0; k < this.passes.length; k++) {
    this.passes[k].setSize(a, c);
  }
};
EffectComposer.prototype.reset = function() {
  this.dispose();
  this.writeBuffer = new THREE.WebGLRenderTarget(this.width, this.height, EffectComposer.bufferParameters);
  this.readBuffer = new THREE.WebGLRenderTarget(this.width, this.height, EffectComposer.bufferParameters);
};
EffectComposer.prototype.dispose = function() {
  this.writeBuffer.dispose();
  this.readBuffer.dispose();
  this.readBuffer = this.writeBuffer = null;
};
EffectComposer.prototype.toJSON = function() {
  var a = {};
  a.uuid = this.uuid;
  a.passes = [];
  for (var c = 0; c < this.passes.length; c++) {
    a.passes.push(this.passes[c].toJSON());
  }
  return a;
};
EffectComposer.fromJSON = function(a) {
  var c = new EffectComposer;
  c.uuid = a.uuid;
  for (var k = 0; k < a.passes.length; k++) {
    var b = a.passes[k];
    if ("Render" === b.type) {
      var f = new RenderPass;
    } else {
      if ("UnrealBloom" === b.type) {
        for (f = new UnrealBloomPass, f.strength = b.strength, f.radius = b.radius, f.threshold = b.threshold, f.bloomFactors = b.bloomFactors, k = 0; k < f.bloomTintColors.length; k++) {
          f.bloomTintColors[k].fromArray(b.bloomTintColors[k]);
        }
      } else {
        "Bloom" === b.type ? f = new BloomPass(b.strength, b.kernelSize, b.sigma, b.resolution) : "SSAONOH" === b.type ? (f = new SSAONOHPass, f.kernelRadius = b.kernelRadius, f.minDistance = b.minDistance, f.maxDistance = b.maxDistance) : "SSAO" === b.type ? (f = new SSAOPass, f.onlyAO = b.onlyAO, f.radius = b.radius, f.aoClamp = b.aoClamp, f.lumInfluence = b.lumInfluence) : "Bokeh" === b.type ? f = new BokehPass(b.focus, b.aperture, b.maxblur) : "FXAA" === b.type ? f = new FXAAPass : "Copy" === 
        b.type ? f = new CopyPass : "Film" === b.type ? (f = new FilmPass, f.grayscale = b.grayscale, f.noiseIntensity = b.noiseIntensity, f.scanlinesIntensity = b.scanlinesIntensity, f.scanlinesCount = b.scanlinesCount) : "DotScreen" === b.type ? (f = new DotScreenPass, f.center.fromArray(b.center), f.angle = b.angle, f.scale = b.scale) : "Colorify" === b.type ? (f = new ColorifyPass, f.color.setHex(b.color)) : "Sobel" === b.type ? f = new SobelPass : "Technicolor" === b.type ? f = new TechnicolorPass : 
        "HueSaturation" === b.type ? (f = new HueSaturationPass, f.hue = b.hue, f.saturation = b.saturation) : f = new RenderPass;
      }
    }
    f.uuid = b.uuid;
    f.enabled = b.enabled;
    f.needsSwap = b.needsSwap;
    f.renderToScreen = b.renderToScreen;
    f.clear = b.clear;
    f.copyToScreen = !0 === b.copyToScreen;
    c.addPass(f);
  }
  return c;
};
"use strict";
function RenderPass() {
  Pass.call(this);
  this.type = "Render";
  this.clear = !0;
}
RenderPass.prototype = Object.create(Pass.prototype);
RenderPass.prototype.render = function(a, c, k, b, f, d, h) {
  !0 === this.clear ? (a.autoClear = !0, a.autoClearColor = !0, a.autoClearDepth = !0, a.autoClearStencil = !0) : a.autoClear = !1;
  a.setRenderTarget(this.renderToScreen ? null : c);
  a.render(d, h);
};
"use strict";
function FXAAPass() {
  ShaderPass.call(this, THREE.FXAAShader);
  this.type = "FXAA";
}
FXAAPass.prototype = Object.create(ShaderPass.prototype);
FXAAPass.prototype.setSize = function(a, c) {
  this.uniforms.resolution.value.set(1 / a, 1 / c);
};
"use strict";
function UnrealBloomPass(a, c, k) {
  void 0 === THREE.LuminosityHighPassShader && console.error("UnrealBloomPass relies on THREE.LuminosityHighPassShader");
  void 0 === THREE.CopyShader && console.error("UnrealBloomPass relies on THREE.CopyShader");
  Pass.call(this);
  this.type = "UnrealBloom";
  this.renderTargetsHorizontal = [];
  this.renderTargetsVertical = [];
  this.nMips = 5;
  for (var b = 0; b < this.nMips; b++) {
    var f = new THREE.WebGLRenderTarget(0, 0, Pass.RGBALinear);
    f.texture.generateMipmaps = !1;
    this.renderTargetsHorizontal.push(f);
    f = new THREE.WebGLRenderTarget(0, 0, Pass.RGBALinear);
    f.texture.generateMipmaps = !1;
    this.renderTargetsVertical.push(f);
  }
  this.renderTargetBright = new THREE.WebGLRenderTarget(0, 0, Pass.RGBALinear);
  this.renderTargetBright.texture.generateMipmaps = !1;
  b = THREE.LuminosityHighPassShader;
  this.highPassUniforms = THREE.UniformsUtils.clone(b.uniforms);
  this.materialHighPassFilter = new THREE.ShaderMaterial({uniforms:this.highPassUniforms, vertexShader:b.vertexShader, fragmentShader:b.fragmentShader, defines:{}});
  this.separableBlurMaterials = [];
  f = [3, 5, 7, 9, 11];
  for (b = 0; b < this.nMips; b++) {
    this.separableBlurMaterials.push(UnrealBloomPass.getSeperableBlurMaterial(f[b])), this.separableBlurMaterials[b].uniforms.texSize.value = new THREE.Vector2(0, 0);
  }
  this.compositeMaterial = UnrealBloomPass.getCompositeMaterial(this.nMips);
  this.compositeMaterial.uniforms.blurTexture1.value = this.renderTargetsVertical[0].texture;
  this.compositeMaterial.uniforms.blurTexture2.value = this.renderTargetsVertical[1].texture;
  this.compositeMaterial.uniforms.blurTexture3.value = this.renderTargetsVertical[2].texture;
  this.compositeMaterial.uniforms.blurTexture4.value = this.renderTargetsVertical[3].texture;
  this.compositeMaterial.uniforms.blurTexture5.value = this.renderTargetsVertical[4].texture;
  this.highPassUniforms.luminosityThreshold.value = void 0 !== k ? k : .7;
  this.highPassUniforms.smoothWidth.value = .01;
  this.compositeMaterial.uniforms.bloomStrength.value = void 0 !== a ? a : .8;
  this.compositeMaterial.uniforms.bloomRadius.value = void 0 !== c ? c : .3;
  this.compositeMaterial.uniforms.bloomFactors.value = [1, .8, .6, .4, .2];
  this.compositeMaterial.uniforms.bloomTintColors.value = [new THREE.Vector3(1, 1, 1), new THREE.Vector3(1, 1, 1), new THREE.Vector3(1, 1, 1), new THREE.Vector3(1, 1, 1), new THREE.Vector3(1, 1, 1)];
  this.compositeMaterial.needsUpdate = !0;
  this.copyUniforms = THREE.UniformsUtils.clone(THREE.CopyShader.uniforms);
  this.copyUniforms.opacity.value = 1;
  this.materialCopy = new THREE.ShaderMaterial({uniforms:this.copyUniforms, vertexShader:THREE.CopyShader.vertexShader, fragmentShader:THREE.CopyShader.fragmentShader, blending:THREE.AdditiveBlending, depthTest:!1, depthWrite:!1, transparent:!0});
  this.oldClearColor = new THREE.Color;
  this.oldClearAlpha = 1;
  this.oldAutoClear = !1;
  this.createQuadScene();
  this.basic = new THREE.MeshBasicMaterial;
  Object.defineProperties(this, {strength:{get:function() {
    return this.compositeMaterial.uniforms.bloomStrength.value;
  }, set:function(a) {
    this.compositeMaterial.uniforms.bloomStrength.value = a;
  }}, radius:{get:function() {
    return this.compositeMaterial.uniforms.bloomRadius.value;
  }, set:function(a) {
    this.compositeMaterial.uniforms.bloomRadius.value = a;
  }}, threshold:{get:function() {
    return this.highPassUniforms.luminosityThreshold.value;
  }, set:function(a) {
    this.highPassUniforms.luminosityThreshold.value;
  }}, smooth:{get:function() {
    return this.highPassUniforms.smoothWidth.value;
  }, set:function(a) {
    this.highPassUniforms.smoothWidth.value;
  }}, bloomFactors:{get:function() {
    return this.compositeMaterial.uniforms.bloomFactors.value;
  }, set:function(a) {
    this.compositeMaterial.uniforms.bloomFactors.value;
  }}, bloomTintColors:{get:function() {
    return this.compositeMaterial.uniforms.bloomTintColors.value;
  }, set:function(a) {
    this.compositeMaterial.uniforms.bloomTintColors.value = a;
  }}});
}
UnrealBloomPass.prototype = Object.create(Pass.prototype);
UnrealBloomPass.BlurDirectionX = new THREE.Vector2(1, 0);
UnrealBloomPass.BlurDirectionY = new THREE.Vector2(0, 1);
UnrealBloomPass.prototype.dispose = function() {
  for (var a = 0; a < this.renderTargetsHorizontal.length; a++) {
    this.renderTargetsHorizontal[a].dispose();
  }
  for (a = 0; a < this.renderTargetsVertical.length; a++) {
    this.renderTargetsVertical[a].dispose();
  }
  this.renderTargetBright.dispose();
};
UnrealBloomPass.prototype.setSize = function(a, c) {
  a = Math.round(a / 2);
  c = Math.round(c / 2);
  this.renderTargetBright.setSize(a, c);
  for (var k = 0; k < this.nMips; k++) {
    this.renderTargetsHorizontal[k].setSize(a, c), this.renderTargetsVertical[k].setSize(a, c), this.separableBlurMaterials[k].uniforms.texSize.value.set(a, c), a = Math.round(a / 2), c = Math.round(c / 2);
  }
};
UnrealBloomPass.prototype.render = function(a, c, k, b, f, d, h) {
  this.oldClearColor.copy(a.getClearColor());
  this.oldClearAlpha = a.getClearAlpha();
  this.oldAutoClear = a.autoClear;
  a.autoClear = !1;
  a.setClearColor(new THREE.Color(0, 0, 0), 0);
  f && a.context.disable(a.context.STENCIL_TEST);
  this.renderToScreen && (this.quad.material = this.basic, this.basic.map = k.texture, a.clear(), a.render(this.scene, this.camera));
  this.highPassUniforms.tDiffuse.value = k.texture;
  this.quad.material = this.materialHighPassFilter;
  a.clear();
  a.setRenderTarget(this.renderTargetBright);
  a.render(this.scene, this.camera);
  c = this.renderTargetBright;
  for (b = 0; b < this.nMips; b++) {
    this.quad.material = this.separableBlurMaterials[b], this.separableBlurMaterials[b].uniforms.colorTexture.value = c.texture, this.separableBlurMaterials[b].uniforms.direction.value = UnrealBloomPass.BlurDirectionX, a.clear(), a.setRenderTarget(this.renderTargetsHorizontal[b]), a.render(this.scene, this.camera), this.separableBlurMaterials[b].uniforms.colorTexture.value = this.renderTargetsHorizontal[b].texture, this.separableBlurMaterials[b].uniforms.direction.value = UnrealBloomPass.BlurDirectionY, 
    a.clear(), a.setRenderTarget(this.renderTargetsVertical[b]), a.render(this.scene, this.camera), c = this.renderTargetsVertical[b];
  }
  this.quad.material = this.compositeMaterial;
  a.clear();
  a.setRenderTarget(this.renderTargetsHorizontal[0]);
  a.render(this.scene, this.camera);
  this.quad.material = this.materialCopy;
  this.copyUniforms.tDiffuse.value = this.renderTargetsHorizontal[0].texture;
  f && a.context.enable(a.context.STENCIL_TEST);
  !0 === this.clear ? (a.autoClear = !0, a.autoClearColor = !0, a.autoClearDepth = !0, a.autoClearStencil = !0) : a.autoClear = !1;
  a.setRenderTarget(this.renderToScreen ? null : k);
  a.render(this.scene, this.camera);
  a.setClearColor(this.oldClearColor, this.oldClearAlpha);
  a.autoClear = this.oldAutoClear;
};
UnrealBloomPass.prototype.toJSON = function(a) {
  a = Pass.prototype.toJSON.call(this, a);
  a.strength = this.strength;
  a.radius = this.radius;
  a.threshold = this.threshold;
  a.bloomFactors = this.bloomFactors;
  a.bloomTintColors = [];
  for (var c = 0; c < this.bloomTintColors.length; c++) {
    a.bloomTintColors.push(this.bloomTintColors[c].toArray());
  }
  return a;
};
UnrealBloomPass.getSeperableBlurMaterial = function(a) {
  return new THREE.ShaderMaterial({defines:{KERNEL_RADIUS:a, SIGMA:a}, uniforms:{colorTexture:{value:null}, texSize:{value:new THREE.Vector2(.5, .5)}, direction:{value:new THREE.Vector2(.5, .5)}}, vertexShader:"\n\t\t\tvarying vec2 vUv;\n\t\t\tvoid main()\n\t\t\t{\n\t\t\t\tvUv = uv;\n\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n\t\t\t}", fragmentShader:"\n\t\t\t#include <common>\n\t\t\tvarying vec2 vUv;\n\t\t\tuniform sampler2D colorTexture;\n\t\t\tuniform vec2 texSize;\n\t\t\tuniform vec2 direction;\n\t\t\t\n\t\t\tfloat gaussianPdf(in float x, in float sigma)\n\t\t\t{\n\t\t\t\treturn 0.39894 * exp(-0.5 * x * x / (sigma * sigma)) / sigma;\n\t\t\t}\n\t\t\t\n\t\t\tvoid main()\n\t\t\t{\n\t\t\t\tvec2 invSize = 1.0 / texSize;\n\t\t\t\tfloat fSigma = float(SIGMA);\n\t\t\t\tfloat weightSum = gaussianPdf(0.0, fSigma);\n\t\t\t\tvec3 diffuseSum = texture2D(colorTexture, vUv).rgb * weightSum;\n\t\t\t\tfor(int i = 1; i < KERNEL_RADIUS; i++)\n\t\t\t\t{\n\t\t\t\t\tfloat x = float(i);\n\t\t\t\t\tfloat w = gaussianPdf(x, fSigma);\n\t\t\t\t\tvec2 uvOffset = direction * invSize * x;\n\t\t\t\t\tvec3 sample1 = texture2D(colorTexture, vUv + uvOffset).rgb;\n\t\t\t\t\tvec3 sample2 = texture2D(colorTexture, vUv - uvOffset).rgb;\n\t\t\t\t\tdiffuseSum += (sample1 + sample2) * w;\n\t\t\t\t\tweightSum += 2.0 * w;\n\t\t\t\t}\n\t\t\t\tgl_FragColor = vec4(diffuseSum/weightSum, 1.0);\n\t\t\t}"});
};
UnrealBloomPass.getCompositeMaterial = function(a) {
  return new THREE.ShaderMaterial({defines:{NUM_MIPS:a}, uniforms:{blurTexture1:{value:null}, blurTexture2:{value:null}, blurTexture3:{value:null}, blurTexture4:{value:null}, blurTexture5:{value:null}, dirtTexture:{value:null}, bloomStrength:{value:1}, bloomFactors:{value:null}, bloomTintColors:{value:null}, bloomRadius:{value:0}}, vertexShader:"\n\t\t\tvarying vec2 vUv;\n\t\t\tvoid main()\n\t\t\t{\n\t\t\t\tvUv = uv;\n\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n\t\t\t}", 
  fragmentShader:"\n\t\t\tvarying vec2 vUv;\n\t\t\tuniform sampler2D blurTexture1;\n\t\t\tuniform sampler2D blurTexture2;\n\t\t\tuniform sampler2D blurTexture3;\n\t\t\tuniform sampler2D blurTexture4;\n\t\t\tuniform sampler2D blurTexture5;\n\t\t\tuniform sampler2D dirtTexture;\n\t\t\tuniform float bloomStrength;\n\t\t\tuniform float bloomRadius;\n\t\t\tuniform float bloomFactors[NUM_MIPS];\n\t\t\tuniform vec3 bloomTintColors[NUM_MIPS];\n\t\t\t\n\t\t\tfloat lerpBloomFactor(const in float factor)\n\t\t\t{\n\t\t\t\tfloat mirrorFactor = 1.2 - factor;\n\t\t\t\treturn mix(factor, mirrorFactor, bloomRadius);\n\t\t\t}\n\t\t\t\n\t\t\tvoid main()\n\t\t\t{\n\t\t\t\tgl_FragColor = bloomStrength * (lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) + \n\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) + \n\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) + \n\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) + \n\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv));\n\t\t\t}"});
};
"use strict";
function BloomPass(a, c, k, b) {
  Pass.call(this);
  void 0 === THREE.ConvolutionShader && console.error("BloomPass relies on THREE.ConvolutionShader");
  void 0 === THREE.CopyShader && console.error("BloomPass relies on THREE.CopyShader");
  this.type = "Bloom";
  this.copyToScreen = !0;
  this.createQuadScene();
  a = void 0 !== a ? a : 1;
  c = void 0 !== c ? c : 25;
  k = void 0 !== k ? k : 4;
  b = void 0 !== b ? b : 256;
  this.renderTargetX = new THREE.WebGLRenderTarget(b, b, Pass.RGBALinear);
  this.renderTargetY = new THREE.WebGLRenderTarget(b, b, Pass.RGBALinear);
  this.copyUniforms = THREE.UniformsUtils.clone(THREE.CopyShader.uniforms);
  this.copyUniforms.opacity.value = a;
  this.materialCopy = new THREE.ShaderMaterial({uniforms:this.copyUniforms, vertexShader:THREE.CopyShader.vertexShader, fragmentShader:THREE.CopyShader.fragmentShader, blending:THREE.AdditiveBlending, transparent:!0});
  this.convolutionUniforms = THREE.UniformsUtils.clone(THREE.ConvolutionShader.uniforms);
  this.convolutionUniforms.uImageIncrement.value = BloomPass.blurX;
  this.convolutionUniforms.cKernel.value = THREE.ConvolutionShader.buildKernel(k);
  this.materialConvolution = new THREE.ShaderMaterial({uniforms:this.convolutionUniforms, vertexShader:THREE.ConvolutionShader.vertexShader, fragmentShader:THREE.ConvolutionShader.fragmentShader, defines:{KERNEL_SIZE_FLOAT:c.toFixed(1), KERNEL_SIZE_INT:c.toFixed(0)}});
}
BloomPass.blurX = new THREE.Vector2(.001953125, 0);
BloomPass.blurY = new THREE.Vector2(0, .001953125);
BloomPass.prototype = Object.create(Pass.prototype);
BloomPass.prototype.render = function(a, c, k, b, f, d, h) {
  f && a.context.disable(a.context.STENCIL_TEST);
  this.quad.material = this.materialConvolution;
  this.convolutionUniforms.tDiffuse.value = k.texture;
  this.convolutionUniforms.uImageIncrement.value = BloomPass.blurX;
  a.render(this.scene, this.camera, this.renderTargetX, !0);
  this.convolutionUniforms.tDiffuse.value = this.renderTargetX.texture;
  this.convolutionUniforms.uImageIncrement.value = BloomPass.blurY;
  a.render(this.scene, this.camera, this.renderTargetY, !0);
  this.quad.material = this.materialCopy;
  this.copyUniforms.tDiffuse.value = this.renderTargetY.texture;
  f && a.context.enable(a.context.STENCIL_TEST);
  a.setRenderTarget(c);
  a.render(this.scene, this.camera);
};
BloomPass.prototype.toJSON = function(a) {
  a = Pass.prototype.toJSON.call(this, a);
  a.strength = this.strength;
  a.kernelSize = this.kernelSize;
  a.sigma = this.sigma;
  a.resolution = this.resolution;
  return a;
};
"use strict";
function SSAONOHPass() {
  void 0 === THREE.SSAOShader && console.warn("SSAONOHPass depends on THREE.SSAOShader");
  Pass.call(this);
  this.type = "SSAONOH";
  this.kernel = [];
  this.noiseTexture = null;
  this.createQuadScene();
  this.depthTexture = new THREE.DepthTexture;
  this.depthTexture.type = THREE.UnsignedShortType;
  this.depthTexture.minFilter = THREE.NearestFilter;
  this.depthTexture.maxFilter = THREE.NearestFilter;
  this.normalMaterial = new THREE.MeshNormalMaterial;
  this.normalMaterial.blending = THREE.NoBlending;
  this.normalRenderTarget = new THREE.WebGLRenderTarget(1, 1, {minFilter:THREE.LinearFilter, magFilter:THREE.LinearFilter, format:THREE.RGBAFormat, depthTexture:this.depthTexture, depthBuffer:!0});
  this.ssaoRenderTarget = new THREE.WebGLRenderTarget(1, 1, Pass.RGBALinear);
  this.blurRenderTarget = new THREE.WebGLRenderTarget(1, 1, Pass.RGBALinear);
  this.blurMaterial = new THREE.ShaderMaterial({defines:Object.assign({}, THREE.SSAOBlurShader.defines), uniforms:THREE.UniformsUtils.clone(THREE.SSAOBlurShader.uniforms), vertexShader:THREE.SSAOBlurShader.vertexShader, fragmentShader:THREE.SSAOBlurShader.fragmentShader});
  this.blurMaterial.uniforms.tDiffuse.value = this.ssaoRenderTarget.texture;
  this.ssaoMaterial = new THREE.ShaderMaterial({defines:Object.assign({}, THREE.SSAOShader.defines), uniforms:THREE.UniformsUtils.clone(THREE.SSAOShader.uniforms), vertexShader:THREE.SSAOShader.vertexShader, fragmentShader:THREE.SSAOShader.fragmentShader, blending:THREE.NoBlending});
  this.ssaoMaterial.uniforms.tNormal.value = this.normalRenderTarget.texture;
  this.copyMaterial = new THREE.ShaderMaterial({uniforms:THREE.UniformsUtils.clone(THREE.CopyShader.uniforms), vertexShader:THREE.CopyShader.vertexShader, fragmentShader:THREE.CopyShader.fragmentShader, transparent:!0, depthTest:!1, depthWrite:!1, blendSrc:THREE.DstColorFactor, blendDst:THREE.ZeroFactor, blendEquation:THREE.AddEquation, blendSrcAlpha:THREE.DstAlphaFactor, blendDstAlpha:THREE.ZeroFactor, blendEquationAlpha:THREE.AddEquation});
  this.originalClearColor = new THREE.Color;
  this._kernelSize = 0;
  var a = this;
  Object.defineProperties(this, {kernelRadius:{get:function() {
    return a.ssaoMaterial.uniforms.kernelRadius.value;
  }, set:function(c) {
    a.ssaoMaterial.uniforms.kernelRadius.value = c;
  }}, minDistance:{get:function() {
    return a.ssaoMaterial.uniforms.minDistance.value;
  }, set:function(c) {
    a.ssaoMaterial.uniforms.minDistance.value = c;
  }}, maxDistance:{get:function() {
    return a.ssaoMaterial.uniforms.maxDistance.value;
  }, set:function(c) {
    a.ssaoMaterial.uniforms.maxDistance.value = c;
  }}, kernelSize:{get:function() {
    return a._kernelSize;
  }, set:function(c) {
    a._kernelSize = c;
    a.generateSampleKernel();
    a.generateRandomKernelRotations();
    a.ssaoMaterial.uniforms.tNoise.value = a.noiseTexture;
    a.ssaoMaterial.uniforms.kernel.value = a.kernel;
  }}});
  this.kernelSize = 64;
  this.kernelRadius = 8;
  this.minDistance = .1;
  this.maxDistance = 1E3;
}
SSAONOHPass.prototype = Object.create(Pass.prototype);
SSAONOHPass.prototype.generateSampleKernel = function() {
  for (var a = 0; a < this._kernelSize; a++) {
    var c = new THREE.Vector3;
    c.x = 2 * Math.random() - 1;
    c.y = 2 * Math.random() - 1;
    c.z = Math.random();
    c.normalize();
    var k = a / this._kernelSize;
    k = THREE.Math.lerp(.1, 1, k * k);
    c.multiplyScalar(k);
    this.kernel.push(c);
  }
};
SSAONOHPass.prototype.generateRandomKernelRotations = function() {
  void 0 === SimplexNoise && console.error("SSAONOHPass: The pass relies on SimplexNoise.");
  for (var a = new SimplexNoise, c = new Float32Array(16), k = 0; 16 > k; k++) {
    c[k] = a.noise3d(2 * Math.random() - 1, 2 * Math.random() - 1, 0);
  }
  this.noiseTexture = new THREE.DataTexture(c, 4, 4, THREE.LuminanceFormat, THREE.FloatType);
  this.noiseTexture.wrapS = THREE.RepeatWrapping;
  this.noiseTexture.wrapT = THREE.RepeatWrapping;
  this.noiseTexture.needsUpdate = !0;
};
SSAONOHPass.prototype.render = function(a, c, k, b, f, d, h) {
  this.originalClearColor.copy(a.getClearColor());
  b = a.getClearAlpha();
  f = a.autoClear;
  d.overrideMaterial = this.normalMaterial;
  a.autoClear = !1;
  a.setClearColor(7829503);
  a.setClearAlpha(1);
  a.clear();
  a.setRenderTarget(this.normalRenderTarget);
  a.render(d, h);
  d.overrideMaterial = null;
  a.autoClear = f;
  a.setClearColor(this.originalClearColor);
  a.setClearAlpha(b);
  this.ssaoMaterial.uniforms.tDepth.value = this.depthTexture;
  this.ssaoMaterial.uniforms.tDiffuse.value = k.texture;
  this.ssaoMaterial.uniforms.cameraNear.value = h.near;
  this.ssaoMaterial.uniforms.cameraFar.value = h.far;
  this.ssaoMaterial.uniforms.cameraProjectionMatrix.value.copy(h.projectionMatrix);
  this.ssaoMaterial.uniforms.cameraInverseProjectionMatrix.value.getInverse(h.projectionMatrix);
  this.renderPass(a, this.ssaoMaterial, this.ssaoRenderTarget);
  this.renderPass(a, this.blurMaterial, this.blurRenderTarget);
  this.renderToScreen ? (this.copyMaterial.uniforms.tDiffuse.value = k.texture, this.copyMaterial.blending = THREE.NoBlending, this.renderPass(a, this.copyMaterial, void 0, this.clear), this.copyMaterial.uniforms.tDiffuse.value = this.blurRenderTarget.texture, this.copyMaterial.blending = THREE.CustomBlending, this.renderPass(a, this.copyMaterial, void 0, !1)) : (this.copyMaterial.uniforms.tDiffuse.value = k.texture, this.copyMaterial.blending = THREE.NoBlending, this.renderPass(a, this.copyMaterial, 
  c, this.clear), this.copyMaterial.uniforms.tDiffuse.value = this.blurRenderTarget.texture, this.copyMaterial.blending = THREE.CustomBlending, this.renderPass(a, this.copyMaterial, c, !1));
};
SSAONOHPass.prototype.renderPass = function(a, c, k, b) {
  this.quad.material = c;
  !0 === b && a.clear();
  a.setRenderTarget(k);
  a.render(this.scene, this.camera);
};
SSAONOHPass.prototype.dispose = function() {
  this.normalRenderTarget.dispose();
  this.ssaoRenderTarget.dispose();
  this.blurRenderTarget.dispose();
  this.quad.geometry.dispose();
  this.normalMaterial.dispose();
  this.blurMaterial.dispose();
  this.copyMaterial.dispose();
};
SSAONOHPass.prototype.setSize = function(a, c) {
  this.ssaoMaterial.uniforms.resolution.value.set(a, c);
  this.blurMaterial.uniforms.resolution.value.set(a, c);
  this.normalRenderTarget.setSize(a, c);
  this.ssaoRenderTarget.setSize(a, c);
  this.blurRenderTarget.setSize(a, c);
};
SSAONOHPass.prototype.toJSON = function(a) {
  a = Pass.prototype.toJSON.call(this, a);
  a.kernelRadius = this.kernelRadius;
  a.minDistance = this.minDistance;
  a.maxDistance = this.maxDistance;
  return a;
};
"use strict";
function SSAOPass() {
  ShaderPass.call(this, SSAOShader);
  this.type = "SSAO";
  this.depthMaterial = new THREE.MeshDepthMaterial;
  this.depthMaterial.depthPacking = THREE.RGBADepthPacking;
  this.depthMaterial.blending = THREE.NoBlending;
  this.depthRenderTarget = new THREE.WebGLRenderTarget(2, 2, {minFilter:THREE.LinearFilter, magFilter:THREE.LinearFilter});
  this.uniforms.tDepth.value = this.depthRenderTarget.texture;
  this.uniforms.size.value.set(2, 2);
  Object.defineProperties(this, {radius:{get:function() {
    return this.uniforms.radius.value;
  }, set:function(a) {
    this.uniforms.radius.value = a;
  }}, onlyAO:{get:function() {
    return this.uniforms.onlyAO.value;
  }, set:function(a) {
    this.uniforms.onlyAO.value = a;
  }}, aoClamp:{get:function() {
    return this.uniforms.aoClamp.value;
  }, set:function(a) {
    this.uniforms.aoClamp.value = a;
  }}, lumInfluence:{get:function() {
    return this.uniforms.lumInfluence.value;
  }, set:function(a) {
    this.uniforms.lumInfluence.value = a;
  }}});
  this.radius = 4;
  this.onlyAO = !1;
  this.aoClamp = .25;
  this.lumInfluence = .7;
}
SSAOPass.prototype = Object.create(ShaderPass.prototype);
SSAOPass.prototype.render = function(a, c, k, b, f, d, h) {
  this.uniforms.cameraNear.value = h.near;
  this.uniforms.cameraFar.value = h.far;
  d.overrideMaterial = this.depthMaterial;
  a.clear();
  a.setRenderTarget(this.depthRenderTarget);
  a.render(d, h);
  d.overrideMaterial = null;
  ShaderPass.prototype.render.call(this, a, c, k, b, f);
};
SSAOPass.prototype.setSize = function(a, c) {
  this.uniforms.size.value.set(a, c);
  this.depthRenderTarget.setSize(a, c);
};
SSAOPass.prototype.toJSON = function(a) {
  a = Pass.prototype.toJSON.call(this, a);
  a.onlyAO = this.onlyAO;
  a.radius = this.radius;
  a.aoClamp = this.aoClamp;
  a.lumInfluence = this.lumInfluence;
  return a;
};
"use strict";
function BokehPass(a, c, k) {
  void 0 === THREE.BokehShader && console.error("BokehPass relies on THREE.BokehShader");
  Pass.call(this);
  this.type = "Bokeh";
  this.renderTargetColor = new THREE.WebGLRenderTarget(0, 0, Pass.RGBLinear);
  this.renderTargetDepth = this.renderTargetColor.clone();
  this.materialDepth = new THREE.MeshDepthMaterial;
  this.materialDepth.depthPacking = THREE.RGBADepthPacking;
  this.materialDepth.blending = THREE.NoBlending;
  this.uniforms = THREE.UniformsUtils.clone(THREE.BokehShader.uniforms);
  this.uniforms.tDepth.value = this.renderTargetDepth.texture;
  this.materialBokeh = new THREE.ShaderMaterial({defines:THREE.BokehShader.defines, uniforms:this.uniforms, vertexShader:THREE.BokehShader.vertexShader, fragmentShader:THREE.BokehShader.fragmentShader});
  this.createQuadScene();
  this.quad.material = this.materialBokeh;
  this.oldClearColor = new THREE.Color;
  this.oldClearAlpha = 1;
  this.oldAutoClear = !1;
  var b = this;
  Object.defineProperties(this, {aperture:{get:function() {
    return b.uniforms.aperture.value;
  }, set:function(a) {
    b.uniforms.aperture.value = a;
  }}, focus:{get:function() {
    return b.uniforms.focus.value;
  }, set:function(a) {
    b.uniforms.focus.value = a;
  }}, maxblur:{get:function() {
    return b.uniforms.maxblur.value;
  }, set:function(a) {
    b.uniforms.maxblur.value = a;
  }}});
  this.focus = void 0 !== a ? a : 1;
  this.aperture = void 0 !== c ? c : 1;
  this.maxblur = void 0 !== k ? k : .2;
}
BokehPass.prototype = Object.create(Pass.prototype);
BokehPass.prototype.render = function(a, c, k, b, f, d, h) {
  this.oldClearColor.copy(a.getClearColor());
  this.oldClearAlpha = a.getClearAlpha();
  this.oldAutoClear = a.autoClear;
  d.overrideMaterial = this.materialDepth;
  a.autoClear = !1;
  a.setClearColor(16777215);
  a.setClearAlpha(1);
  a.render(d, h, this.renderTargetDepth, !0);
  this.uniforms.tColor.value = k.texture;
  this.uniforms.nearClip.value = h.near;
  this.uniforms.farClip.value = h.far;
  this.uniforms.aspect.value = h.aspect;
  !0 === this.clear ? (a.autoClear = !0, a.autoClearColor = !0, a.autoClearDepth = !0, a.autoClearStencil = !0) : a.autoClear = !1;
  a.setRenderTarget(this.renderToScreen ? null : c);
  a.render(this.scene, this.camera);
  d.overrideMaterial = null;
  a.setClearColor(this.oldClearColor);
  a.setClearAlpha(this.oldClearAlpha);
  a.autoClear = this.oldAutoClear;
};
BokehPass.prototype.setSize = function(a, c) {
  this.renderTargetColor.setSize(a, c);
  this.renderTargetDepth.setSize(a, c);
};
BokehPass.prototype.toJSON = function(a) {
  a = Pass.prototype.toJSON.call(this, a);
  a.aperture = this.aperture;
  a.focus = this.focus;
  a.maxblur = this.maxblur;
  return a;
};
"use strict";
function CopyPass() {
  ShaderPass.call(this, THREE.CopyShader);
  this.type = "Copy";
}
CopyPass.prototype = Object.create(ShaderPass.prototype);
"use strict";
function FilmPass(a, c, k, b) {
  void 0 === THREE.FilmShader && console.error("FilmPass relies on THREE.FilmShader");
  Pass.call(this);
  this.type = "Film";
  this.createQuadScene();
  this.uniforms = THREE.UniformsUtils.clone(THREE.FilmShader.uniforms);
  this.material = new THREE.ShaderMaterial({uniforms:this.uniforms, vertexShader:THREE.FilmShader.vertexShader, fragmentShader:THREE.FilmShader.fragmentShader});
  var f = this;
  Object.defineProperties(this, {grayscale:{get:function() {
    return f.uniforms.grayscale.value;
  }, set:function(a) {
    f.uniforms.grayscale.value = a;
  }}, noiseIntensity:{get:function() {
    return f.uniforms.nIntensity.value;
  }, set:function(a) {
    f.uniforms.nIntensity.value = a;
  }}, scanlinesIntensity:{get:function() {
    return f.uniforms.sIntensity.value;
  }, set:function(a) {
    f.uniforms.sIntensity.value = a;
  }}, scanlinesCount:{get:function() {
    return f.uniforms.sCount.value;
  }, set:function(a) {
    f.uniforms.sCount.value = a;
  }}});
  this.grayscale = void 0 !== b ? b : !1;
  this.noiseIntensity = void 0 !== a ? a : .35;
  this.scanlinesIntensity = void 0 !== c ? c : .5;
  this.scanlinesCount = void 0 !== k ? k : 512;
}
FilmPass.prototype = Object.create(Pass.prototype);
FilmPass.prototype.render = function(a, c, k, b, f, d, h) {
  this.uniforms.time.value += b;
  this.uniforms.tDiffuse.value = k.texture;
  this.quad.material = this.material;
  !0 === this.clear ? (a.autoClear = !0, a.autoClearColor = !0, a.autoClearDepth = !0, a.autoClearStencil = !0) : a.autoClear = !1;
  a.setRenderTarget(this.renderToScreen ? null : c);
  a.render(this.scene, this.camera);
};
FilmPass.prototype.toJSON = function(a) {
  a = Pass.prototype.toJSON.call(this, a);
  a.grayscale = this.grayscale;
  a.noiseIntensity = this.noiseIntensity;
  a.scanlinesIntensity = this.scanlinesIntensity;
  a.scanlinesCount = this.scanlinesCount;
  return a;
};
"use strict";
function DotScreenPass(a, c, k) {
  void 0 === THREE.DotScreenShader && console.error("DotScreenPass relies on THREE.DotScreenShader");
  Pass.call(this);
  this.type = "DotScreen";
  this.createQuadScene();
  this.uniforms = THREE.UniformsUtils.clone(THREE.DotScreenShader.uniforms);
  this.material = new THREE.ShaderMaterial({uniforms:this.uniforms, vertexShader:THREE.DotScreenShader.vertexShader, fragmentShader:THREE.DotScreenShader.fragmentShader});
  Object.defineProperties(this, {center:{get:function() {
    return this.uniforms.center.value;
  }, set:function(a) {
    this.uniforms.center.value = a;
  }}, angle:{get:function() {
    return this.uniforms.angle.value;
  }, set:function(a) {
    this.uniforms.angle.value = a;
  }}, scale:{get:function() {
    return this.uniforms.scale.value;
  }, set:function(a) {
    this.uniforms.scale.value = a;
  }}});
  void 0 !== a && this.center.copy(a);
  this.angle = void 0 !== c ? c : .5;
  this.scale = void 0 !== k ? k : .8;
}
DotScreenPass.prototype = Object.create(Pass.prototype);
DotScreenPass.prototype.render = function(a, c, k, b, f, d, h) {
  this.uniforms.tDiffuse.value = k.texture;
  this.uniforms.tSize.value.set(k.width, k.height);
  this.quad.material = this.material;
  !0 === this.clear ? (a.autoClear = !0, a.autoClearColor = !0, a.autoClearDepth = !0, a.autoClearStencil = !0) : a.autoClear = !1;
  a.setRenderTarget(this.renderToScreen ? null : c);
  a.render(this.scene, this.camera);
};
DotScreenPass.prototype.toJSON = function(a) {
  a = Pass.prototype.toJSON.call(this, a);
  a.center = this.center.toArray();
  a.angle = this.angle;
  a.scale = this.scale;
  return a;
};
"use strict";
function SobelPass(a, c, k) {
  void 0 === THREE.SobelOperatorShader && console.error("SobelPass relies on THREE.SobelOperatorShader");
  void 0 === THREE.LuminosityShader && console.error("SobelPass relies on THREE.LuminosityShader");
  ShaderPass.call(this, THREE.SobelOperatorShader);
  this.type = "Sobel";
}
SobelPass.prototype = Object.create(ShaderPass.prototype);
SobelPass.prototype.setSize = function(a, c) {
  this.uniforms.resolution.value.set(a, c);
};
"use strict";
function ColorifyPass() {
  ShaderPass.call(this, THREE.ColorifyShader);
  this.type = "Colorify";
  Object.defineProperties(this, {color:{get:function() {
    return this.uniforms.color.value;
  }, set:function(a) {
    this.uniforms.color.value = a;
  }}});
}
ColorifyPass.prototype = Object.create(ShaderPass.prototype);
ColorifyPass.prototype.toJSON = function(a) {
  a = Pass.prototype.toJSON.call(this, a);
  a.color = this.color.getHex();
  return a;
};
"use strict";
function TechnicolorPass() {
  ShaderPass.call(this, THREE.TechnicolorShader);
  this.type = "Technicolor";
}
TechnicolorPass.prototype = Object.create(ShaderPass.prototype);
"use strict";
function HueSaturationPass(a, c) {
  ShaderPass.call(this, THREE.HueSaturationShader);
  this.type = "HueSaturation";
  Object.defineProperties(this, {hue:{get:function() {
    return this.uniforms.hue.value;
  }, set:function(a) {
    this.uniforms.hue.value = a;
  }}, saturation:{get:function() {
    return this.uniforms.saturation.value;
  }, set:function(a) {
    this.uniforms.saturation.value = a;
  }}});
  this.hue = void 0 !== a ? a : 0;
  this.saturation = void 0 !== c ? c : 0;
}
HueSaturationPass.prototype = Object.create(ShaderPass.prototype);
HueSaturationPass.prototype.toJSON = function(a) {
  a = Pass.prototype.toJSON.call(this, a);
  a.hue = this.hue;
  a.saturation = this.saturation;
  return a;
};
"use strict";
var SSAOShader = {uniforms:{tDiffuse:{value:null}, tDepth:{value:null}, size:{value:new THREE.Vector2(512, 512)}, cameraNear:{value:1}, cameraFar:{value:100}, radius:{value:32}, onlyAO:{value:0}, aoClamp:{value:.25}, lumInfluence:{value:.7}}, vertexShader:"\n\tvarying vec2 vUv;\n\tvoid main()\n\t{\n\t\tvUv = uv;\n\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n\t}", fragmentShader:"\n\tuniform float cameraNear;\n\tuniform float cameraFar;\n\n\t#ifdef USE_LOGDEPTHBUF\n\t\tuniform float logDepthBufFC;\n\t#endif\n\n\tuniform float radius; //ao radius \n\tuniform bool onlyAO; //use only ambient occlusion pass?\n\n\tuniform vec2 size; //texture width, height\n\tuniform float aoClamp; //depth clamp - reduces haloing at screen edges\n\n\tuniform float lumInfluence; //how much luminance affects occlusion\n\n\tuniform sampler2D tDiffuse;\n\tuniform sampler2D tDepth;\n\n\tvarying vec2 vUv;\n\n\t#define DL 2.399963229728653 //PI *(3.0 - sqrt(5.0))\n\t#define EULER 2.718281828459045\n\n\t//user variables\n\tconst int samples = 64; //ao sample count\n\tconst bool useNoise = true; //use noise instead of pattern for sample dithering\n\tconst float noiseAmount = 0.0004; //dithering amount\n\tconst float diffArea = 0.4; //self-shadowing reduction\n\tconst float gDisplace = 0.4; //gauss bell center\n\n\t//RGBA depth\n\t#include <packing>\n\n\t//generating noise / pattern texture for dithering\n\tvec2 rand(const vec2 coord)\n\t{\n\t\tvec2 noise;\n\n\t\tif(useNoise)\n\t\t{\n\t\t\tfloat nx = dot(coord, vec2(12.9898, 78.233));\n\t\t\tfloat ny = dot(coord, vec2(12.9898, 78.233) * 2.0);\n\t\t\tnoise = clamp(fract(43758.5453 * sin(vec2(nx, ny))), 0.0, 1.0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfloat ff = fract(1.0 - coord.s *(size.x / 2.0));\n\t\t\tfloat gg = fract(coord.t *(size.y / 2.0));\n\t\t\tnoise = vec2(0.25, 0.75) * vec2(ff) + vec2(0.75, 0.25) * gg;\n\t\t}\n\n\t\treturn(noise * 2.0  - 1.0) * noiseAmount;\n\t}\n\n\tfloat readDepth(const in vec2 coord) {\n\n\t\tfloat cameraFarPlusNear = cameraFar + cameraNear;\n\t\tfloat cameraFarMinusNear = cameraFar - cameraNear;\n\t\tfloat cameraCoef = 2.0 * cameraNear;\n\n\t\t#ifdef USE_LOGDEPTHBUF\n\t\t\tfloat logz = unpackRGBAToDepth(texture2D(tDepth, coord));\n\t\t\tfloat w = pow(2.0, (logz / logDepthBufFC)) - 1.0;\n\t\t\tfloat z = (logz / w) + 1.0;\n\t\t#else\n\t\t\tfloat z = unpackRGBAToDepth(texture2D(tDepth, coord));\n\t\t#endif\n\n\t\treturn cameraCoef /(cameraFarPlusNear - z * cameraFarMinusNear);\n\t}\n\n\tfloat compareDepths(const in float depth1, const in float depth2, inout int far)\n\t{\n\t\tfloat garea = 8.0; //gauss bell width\n\t\tfloat diff =(depth1 - depth2) * 100.0; //depth difference (0-100)\n\n\t\t//reduce left bell width to avoid self-shadowing\n\t\tif(diff < gDisplace)\n\t\t{\n\t\t\tgarea = diffArea;\n\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfar = 1;\n\t\t}\n\n\t\tfloat dd = diff - gDisplace;\n\t\tfloat gauss = pow(EULER, -2.0 *(dd * dd) /(garea * garea));\n\t\treturn gauss;\n\t}\n\n\tfloat calcAO(float depth, float dw, float dh)\n\t{\n\t\tvec2 vv = vec2(dw, dh);\n\t\tvec2 coord1 = vUv + radius * vv;\n\t\tvec2 coord2 = vUv - radius * vv;\n\n\t\tfloat temp1 = 0.0;\n\t\tfloat temp2 = 0.0;\n\n\t\tint far = 0;\n\t\ttemp1 = compareDepths(depth, readDepth(coord1), far);\n\n\t\t//DEPTH EXTRAPOLATION\n\t\tif(far > 0)\n\t\t{\n\t\t\ttemp2 = compareDepths(readDepth(coord2), depth, far);\n\t\t\ttemp1 +=(1.0 - temp1) * temp2;\n\t\t}\n\n\t\treturn temp1;\n\t}\n\n\tvoid main()\n\t{\n\t\tvec2 noise = rand(vUv);\n\t\tfloat depth = readDepth(vUv);\n\n\t\tfloat tt = clamp(depth, aoClamp, 1.0);\n\n\t\tfloat w =(1.0 / size.x) / tt +(noise.x *(1.0 - noise.x));\n\t\tfloat h =(1.0 / size.y) / tt +(noise.y *(1.0 - noise.y));\n\n\t\tfloat ao = 0.0;\n\n\t\tfloat dz = 1.0 / float(samples);\n\t\tfloat l = 0.0;\n\t\tfloat z = 1.0 - dz / 2.0;\n\n\t\tfor(int i = 0; i <= samples; i ++)\n\t\t{\n\t\t\tfloat r = sqrt(1.0 - z);\n\n\t\t\tfloat pw = cos(l) * r;\n\t\t\tfloat ph = sin(l) * r;\n\t\t\tao += calcAO(depth, pw * w, ph * h);\n\t\t\tz = z - dz;\n\t\t\tl = l + DL;\n\t\t}\n\n\t\tao /= float(samples);\n\t\tao = 1.0 - ao;\n\n\t\tvec3 color = texture2D(tDiffuse, vUv).rgb;\n\n\t\tvec3 lumcoeff = vec3(0.299, 0.587, 0.114);\n\t\tfloat lum = dot(color.rgb, lumcoeff);\n\t\tvec3 luminance = vec3(lum);\n\n\t\tvec3 final = vec3(color * mix(vec3(ao), vec3(1.0), luminance * lumInfluence)); //mix(color * ao, white, luminance)\n\n\t\tif(onlyAO)\n\t\t{\n\t\t\tfinal = vec3(mix(vec3(ao), vec3(1.0), luminance * lumInfluence)); //ambient occlusion only\n\t\t}\n\n\t\tgl_FragColor = vec4(final, 1.0);\n\t}"};
"use strict";
function VRControls() {
  this.display = null;
  this.scale = 1;
  this.standing = !1;
  this.userHeight = 1.6;
  this.frameData = null;
  void 0 !== VRFrameData && (this.frameData = new VRFrameData);
  this.position = new THREE.Vector3;
  this.quaternion = new THREE.Quaternion;
  if (void 0 !== navigator.getVRDisplays) {
    var a = this;
    navigator.getVRDisplays().then(function(c) {
      0 < c.length ? a.display = c[0] : console.warn("nunuStudio: No VR display is available.");
    });
  }
}
VRControls.prototype.update = function(a) {
  if (null !== this.display) {
    if (this.display.getFrameData) {
      this.display.getFrameData(this.frameData);
      var c = this.frameData.pose;
    } else {
      c = this.display.getPose();
    }
    null !== c.orientation && this.quaternion.fromArray(c.orientation);
    null !== c.position ? this.position.fromArray(c.position) : this.position.set(0, 0, 0);
    this.standing && (this.position.y += this.userHeight);
    this.position.multiplyScalar(this.scale);
    null !== a && (a.position.copy(this.position), a.quaternion.copy(this.quaternion));
  }
};
VRControls.prototype.dispose = function() {
  this.display = null;
};
VRControls.prototype.resetPose = function() {
  null !== this.display && this.display.resetPose();
};
"use strict";
function VREffect(a, c) {
  var k, b, f, d, h, n, q, m;
  function t(a) {
    0 < a.length ? u = a[0] : c && c("nunuStudio: HMD not available");
  }
  function e() {
    var b = C.isPresenting;
    C.isPresenting = void 0 !== u && u.isPresenting;
    if (C.isPresenting) {
      var c = u.getEyeParameters("left"), d = c.renderWidth;
      c = c.renderHeight;
      b || (E = a.getPixelRatio(), A = a.getSize(), a.setPixelRatio(1), a.setSize(2 * d, c, !1));
    } else {
      b && (a.setPixelRatio(E), a.setSize(A.width, A.height, D));
    }
  }
  function l(a, b, c, d) {
    var e = Math.PI / 180;
    var f = Math.tan(a.upDegrees * e);
    var h = Math.tan(a.downDegrees * e), k = Math.tan(a.leftDegrees * e);
    a = Math.tan(a.rightDegrees * e);
    c = void 0 === c ? .01 : c;
    d = void 0 === d ? 1E4 : d;
    e = void 0 === b || b ? -1 : 1;
    var l = new THREE.Matrix4, m = l.elements, n = 2 / (k + a), p = 2 / (f + h);
    b = [n, p];
    f = [(k - a) * n * .5, (f - h) * p * .5];
    m[0] = b[0];
    m[1] = 0;
    m[2] = f[0] * e;
    m[3] = 0;
    m[4] = 0;
    m[5] = b[1];
    m[6] = -f[1] * e;
    m[7] = 0;
    m[8] = 0;
    m[9] = 0;
    m[10] = d / (c - d) * -e;
    m[11] = d * c / (c - d);
    m[12] = 0;
    m[13] = 0;
    m[14] = e;
    m[15] = 0;
    l.transpose();
    return l;
  }
  var u, w = new THREE.Vector3, y = new THREE.Vector3, x = new THREE.Matrix4, p = new THREE.Matrix4, v = new THREE.Matrix4, z = null;
  void 0 !== window.VRFrameData && (z = new window.VRFrameData);
  navigator.getVRDisplays && navigator.getVRDisplays().then(t).catch(function() {
    console.warn("nunuStudio: Unable to get VR Displays");
  });
  this.isPresenting = !1;
  var C = this, A = a.getSize(), D = !1, E = a.getPixelRatio();
  this.getVRDisplay = function() {
    return u;
  };
  this.setVRDisplay = function(a) {
    u = a;
  };
  this.setSize = function(b, c, d) {
    A = {width:b, height:c};
    D = d;
    C.isPresenting ? (b = u.getEyeParameters("left"), a.setPixelRatio(1), a.setSize(2 * b.renderWidth, b.renderHeight, !1)) : (a.setPixelRatio(E), a.setSize(b, c, d));
  };
  var B = a.domElement, G = [0, 0, .5, 1], H = [.5, 0, .5, 1];
  window.addEventListener("vrdisplaypresentchange", e, !1);
  this.setFullScreen = function(a) {
    return new Promise(function(b, c) {
      void 0 === u ? c(Error("No VR hardware found.")) : C.isPresenting === a ? b() : a ? b(u.requestPresent([{source:B}])) : b(u.exitPresent());
    });
  };
  this.requestPresent = function() {
    return this.setFullScreen(!0);
  };
  this.exitPresent = function() {
    return this.setFullScreen(!1);
  };
  this.requestAnimationFrame = function(a) {
    return void 0 !== u ? u.requestAnimationFrame(a) : window.requestAnimationFrame(a);
  };
  this.cancelAnimationFrame = function(a) {
    void 0 !== u ? u.cancelAnimationFrame(a) : window.cancelAnimationFrame(a);
  };
  this.submitFrame = function() {
    void 0 !== u && C.isPresenting && u.submitFrame();
  };
  this.autoSubmitFrame = !0;
  var K = new THREE.PerspectiveCamera;
  K.layers.enable(1);
  var I = new THREE.PerspectiveCamera;
  I.layers.enable(2);
  this.render = function(c, e, t, A) {
    if (u && C.isPresenting) {
      var B = c.autoUpdate;
      B && (c.updateMatrixWorld(), c.autoUpdate = !1);
      var D = a.getSize(), E = u.getLayers();
      if (E.length) {
        var J = E[0];
        E = null !== J.leftBounds && 4 === J.leftBounds.length ? J.leftBounds : G;
        J = null !== J.rightBounds && 4 === J.rightBounds.length ? J.rightBounds : H;
      } else {
        E = G, J = H;
      }
      h = Math.round(D.width * E[0]);
      n = Math.round(D.height * E[1]);
      q = Math.round(D.width * E[2]);
      m = Math.round(D.height * E[3]);
      k = Math.round(D.width * J[0]);
      b = Math.round(D.height * J[1]);
      f = Math.round(D.width * J[2]);
      d = Math.round(D.height * J[3]);
      a.setClearColor(c.background);
      (a.autoClear || A) && a.clear(!0, !0, !0);
      t ? (a.setRenderTarget(t), t.scissorTest = !0) : (a.setRenderTarget(null), a.setScissorTest(!0));
      null === e.parent && e.updateMatrixWorld();
      e.matrixWorld.decompose(K.position, K.quaternion, K.scale);
      I.position.copy(K.position);
      I.quaternion.copy(K.quaternion);
      I.scale.copy(K.scale);
      u.getFrameData ? (u.depthNear = e.near, u.depthFar = e.far, u.getFrameData(z), K.projectionMatrix.elements = z.leftProjectionMatrix, I.projectionMatrix.elements = z.rightProjectionMatrix, e = z, e.pose.orientation ? (L.fromArray(e.pose.orientation), x.makeRotationFromQuaternion(L)) : x.identity(), e.pose.position && (R.fromArray(e.pose.position), x.setPosition(R)), p.fromArray(e.leftViewMatrix), p.multiply(x), v.fromArray(e.rightViewMatrix), v.multiply(x), p.getInverse(p), v.getInverse(v), 
      K.updateMatrix(), K.matrix.multiply(p), K.matrix.decompose(K.position, K.quaternion, K.scale), I.updateMatrix(), I.matrix.multiply(v), I.matrix.decompose(I.position, I.quaternion, I.scale)) : (E = u.getEyeParameters("left"), J = u.getEyeParameters("right"), K.projectionMatrix = l(E.fieldOfView, !0, e.near, e.far), I.projectionMatrix = l(J.fieldOfView, !0, e.near, e.far), w.fromArray(E.offset), y.fromArray(J.offset), K.translateOnAxis(w, K.scale.x), I.translateOnAxis(y, I.scale.x));
      t ? (t.viewport.set(h, n, q, m), t.scissor.set(h, n, q, m)) : (a.setViewport(h, n, q, m), a.setScissor(h, n, q, m));
      a.render(c, K, t, A);
      t ? (t.viewport.set(k, b, f, d), t.scissor.set(k, b, f, d)) : (a.setViewport(k, b, f, d), a.setScissor(k, b, f, d));
      a.render(c, I, t, A);
      t ? (t.viewport.set(0, 0, D.width, D.height), t.scissor.set(0, 0, D.width, D.height), t.scissorTest = !1, a.setRenderTarget(null)) : (a.setViewport(0, 0, D.width, D.height), a.setScissorTest(!1));
      B && (c.autoUpdate = !0);
      C.autoSubmitFrame && C.submitFrame();
    } else {
      a.render(c, e, t, A);
    }
  };
  this.dispose = function() {
    window.removeEventListener("vrdisplaypresentchange", e, !1);
  };
  var L = new THREE.Quaternion, R = new THREE.Vector3;
}
"use strict";
function Resource(a, c) {
  this.name = a;
  this.uuid = THREE.Math.generateUUID();
  this.type = c;
  this.encoding = this.format = "";
  this.data = null;
}
Resource.prototype.export = function(a) {
  "base64" === this.format ? FileSystem.writeFileBase64(a, this.data) : "arraybuffer" === this.format ? FileSystem.writeFileArrayBuffer(a, void 0 !== this.arraybuffer ? this.arraybuffer : this.data) : "string" === this.format ? FileSystem.writeFile(a, this.data) : "json" === this.format ? FileSystem.writeFile(a, JSON.stringify(this.data)) : "url" === this.format && FileSystem.writeFileArrayBuffer(a, FileSystem.readFileArrayBuffer(this.data));
};
Resource.prototype.toJSON = function(a) {
  a = {};
  a.name = this.name;
  a.uuid = this.uuid;
  a.type = this.type;
  return a;
};
"use strict";
function Font(a) {
  Resource.call(this, "font", "Font");
  this.reversed = !1;
  this.font = null;
  if (void 0 !== a) {
    if (a instanceof ArrayBuffer) {
      this.data = a, this.format = "arraybuffer", this.loadTTF();
    } else {
      if ("object" === typeof a) {
        this.font = this.data = a, this.encoding = this.format = "json";
      } else {
        if (this.encoding = FileSystem.getFileExtension(a), this.name = FileSystem.getFileName(a), "json" === this.encoding) {
          this.data = JSON.parse(FileSystem.readFile(a)), this.format = "json", this.font = this.data;
        } else {
          if ("ttf" === this.encoding || "otf" === this.encoding || "ttc" === this.encoding || "otc" === this.encoding) {
            this.data = FileSystem.readFileArrayBuffer(a), this.format = "arraybuffer", this.loadTTF();
          }
        }
      }
    }
  }
}
Font.prototype = Object.create(Resource.prototype);
Font.fileIsFont = function(a) {
  return void 0 !== a ? (a = a.name.toLocaleLowerCase(), a.endsWith("ttf") || a.endsWith("otf") || a.endsWith("ttc") || a.endsWith("otc") || a.endsWith("json")) : !1;
};
Font.prototype.isFont = !0;
Font.prototype.reverseGlyphs = function() {
  this.reversed = !this.reversed;
  this.loadTTF();
};
Font.prototype.loadTTF = function() {
  var a = new THREE.TTFLoader;
  a.reversed = this.reversed;
  this.font = a.parse(this.data);
};
Font.prototype.toJSON = function(a) {
  if (void 0 !== a.fonts[this.uuid]) {
    return a.fonts[this.uuid];
  }
  var c = Resource.prototype.toJSON.call(this, a);
  c.encoding = this.encoding;
  c.reversed = this.reversed;
  "arraybuffer" === this.format ? (c.data = this.data, c.format = this.format) : "base64" === this.format ? (c.data = ArraybufferUtils.fromBase64(this.data), c.format = "arraybuffer") : (c.data = this.data, c.format = this.format);
  return a.fonts[this.uuid] = c;
};
Font.prototype.generateShapes = function(a, c, k) {
  void 0 === c && (c = 100);
  void 0 === k && (k = 10);
  var b = this.font;
  a = String(a).split("");
  var f = c / b.resolution, d = (b.boundingBox.yMax - b.boundingBox.yMin) * f, h = 0, n = 0;
  c = [];
  for (var q = 0; q < a.length; q++) {
    var m = a[q];
    if ("\n" === m) {
      n -= d, h = 0;
    } else {
      var t;
      var e = f;
      var l = h, u = n;
      if (m = b.glyphs[m] || b.glyphs["?"]) {
        var w = new THREE.ShapePath, y = [], x = THREE.ShapeUtils.b2, p = THREE.ShapeUtils.b3;
        if (m.o) {
          for (var v = m._cachedOutline || (m._cachedOutline = m.o.split(" ")), z = 0, C = v.length; z < C;) {
            var A = v[z++];
            if ("m" === A) {
              var D = v[z++] * e + l;
              var E = v[z++] * e + u;
              w.moveTo(D, E);
            }
            if ("l" === A) {
              D = v[z++] * e + l, E = v[z++] * e + u, w.lineTo(D, E);
            } else {
              if ("q" === A) {
                var B = v[z++] * e + l;
                var G = v[z++] * e + u;
                var H = v[z++] * e + l;
                A = v[z++] * e + u;
                w.quadraticCurveTo(H, A, B, G);
                if (t = y[y.length - 1]) {
                  var K = t.x;
                  t = t.y;
                  for (var I = 1; I <= k; I++) {
                    var L = I / k;
                    x(L, K, H, B);
                    x(L, t, A, G);
                  }
                }
              } else {
                if ("b" === A && (B = v[z++] * e + l, G = v[z++] * e + u, H = v[z++] * e + l, A = v[z++] * e + u, D = v[z++] * e + l, E = v[z++] * e + u, w.bezierCurveTo(H, A, D, E, B, G), t = y[y.length - 1])) {
                  for (K = t.x, t = t.y, I = 1; I <= k; I++) {
                    L = I / k, p(L, K, H, D, B), p(L, t, A, E, G);
                  }
                }
              }
            }
          }
        }
        e = {width:m.ha * e, path:w};
      } else {
        e = void 0;
      }
      h += e.width;
      c.push(e.path);
    }
  }
  k = [];
  for (b = 0; b < c.length; b++) {
    Array.prototype.push.apply(k, c[b].toShapes());
  }
  return k;
};
"use strict";
function Video(a, c) {
  Resource.call(this, "video", "Video");
  void 0 !== a && (a instanceof ArrayBuffer ? this.loadArrayBufferData(a, c) : Base64Utils.isBase64(a) ? (this.encoding = Base64Utils.getFileFormat(a), this.format = "base64", this.data = a) : this.loadArrayBufferData(FileSystem.readFileArrayBuffer(a), FileSystem.getFileExtension(a)));
}
Video.prototype = Object.create(Resource.prototype);
Video.fileIsVideo = function(a) {
  return void 0 !== a && a.type.startsWith("video") ? !0 : !1;
};
Video.prototype.loadArrayBufferData = function(a, c) {
  var k = new Uint8Array(a);
  k = new Blob([k], {type:"video/" + c});
  this.data = URL.createObjectURL(k);
  this.arraybuffer = a;
  this.encoding = c;
  this.format = "arraybuffer";
};
Video.prototype.toJSON = function(a) {
  if (void 0 !== a.videos[this.uuid]) {
    return a.videos[this.uuid];
  }
  var c = Resource.prototype.toJSON.call(this, a);
  c.encoding = this.encoding;
  "arraybuffer" === this.format ? (c.format = this.format, c.data = this.arraybuffer) : "base64" === this.format ? (c.format = "arraybuffer", c.data = ArraybufferUtils.fromBase64(Base64Utils.removeHeader(this.data))) : (c.format = this.format, c.data = this.data);
  return a.videos[this.uuid] = c;
};
"use strict";
function Audio(a, c) {
  Resource.call(this, "audio", "Audio");
  void 0 !== a && (a instanceof ArrayBuffer ? (this.data = a, this.encoding = void 0 !== c ? c : "") : Base64Utils.isBase64(a) ? (this.encoding = void 0 !== c ? c : "", this.data = ArraybufferUtils.fromBase64(a)) : (this.data = FileSystem.readFileArrayBuffer(a), this.encoding = FileSystem.getFileExtension(a)), this.format = "arraybuffer");
}
Audio.prototype = Object.create(Resource.prototype);
Audio.fileIsAudio = function(a) {
  return void 0 !== a && a.type.startsWith("audio") ? !0 : !1;
};
Audio.prototype.getAudioBuffer = function(a, c) {
  a.decodeAudioData(this.data.slice(0), c, function(a) {
    console.error("nunuStudio: Cannot decode audio buffer (" + a + ")");
  });
};
Audio.prototype.toJSON = function(a) {
  if (void 0 !== a.audio[this.uuid]) {
    return a.audio[this.uuid];
  }
  var c = Resource.prototype.toJSON.call(this, a);
  c.encoding = this.encoding;
  c.data = this.data;
  c.format = this.format;
  return a.audio[this.uuid] = c;
};
"use strict";
function Image(a, c) {
  Resource.call(this, "image", "Image");
  this.height = this.width = -1;
  void 0 !== a ? a instanceof ArrayBuffer ? this.loadArrayBufferData(a, c) : (Base64Utils.isBase64(a) ? (this.encoding = Base64Utils.getFileFormat(a), this.format = "base64") : (this.encoding = FileSystem.getFileExtension(a), this.format = "url"), this.data = a) : this.createSolidColor();
}
Image.prototype = Object.create(Resource.prototype);
Image.fileIsImage = function(a) {
  if (void 0 !== a) {
    if (a.type.startsWith("image")) {
      return !0;
    }
    a = a.name.toLocaleLowerCase();
    return a.endsWith("tga") || a.endsWith("dds") || a.endsWith("pvr") || a.endsWith("ktx");
  }
  return !1;
};
Image.prototype.createSolidColor = function(a) {
  var c = document.createElement("canvas");
  c.width = 1;
  c.height = 1;
  var k = c.getContext("2d");
  k.fillStyle = void 0 !== a ? a : MathUtils.randomColor();
  k.fillRect(0, 0, 1, 1);
  this.data = c.toDataURL("image/png");
  this.format = "base64";
  this.encoding = "png";
};
Image.prototype.loadArrayBufferData = function(a, c) {
  var k = new Uint8Array(a);
  k = new Blob([k], {type:"image/" + c});
  this.data = URL.createObjectURL(k);
  this.arraybuffer = a;
  this.encoding = c;
  this.format = "arraybuffer";
};
Image.prototype.hasTransparency = function() {
  return "png" === this.encoding || "gif" === this.encoding;
};
Image.prototype.compressJPEG = function(a) {
  var c = document.createElement("img");
  c.src = this.data;
  var k = document.createElement("canvas");
  k.width = c.width;
  k.height = c.height;
  k.getContext("2d").drawImage(c, 0, 0, c.width, c.height);
  var b = this;
  k.toBlob(function(a) {
    var c = new FileReader;
    c.onload = function() {
      b.encoding = "jpeg";
      b.format = "arraybuffer";
      b.data = c.result;
    };
    c.readAsArrayBuffer(a);
  }, "image/jpeg", void 0 !== a ? a : .7);
};
Image.prototype.toJSON = function(a) {
  if (void 0 !== a.images[this.uuid]) {
    return a.images[this.uuid];
  }
  var c = Resource.prototype.toJSON.call(this, a);
  "url" === this.format && this.loadArrayBufferData(FileSystem.readFileArrayBuffer(this.data), this.encoding);
  c.width = this.width;
  c.height = this.height;
  c.encoding = this.encoding;
  "arraybuffer" === this.format ? (c.format = this.format, c.data = this.arraybuffer) : "base64" === this.format ? (c.format = "arraybuffer", c.data = ArraybufferUtils.fromBase64(Base64Utils.removeHeader(this.data))) : (c.format = this.format, c.data = this.data);
  return a.images[this.uuid] = c;
};
"use strict";
function Model() {
  Resource.call(this, "model", "Model");
}
Model.prototype = Object.create(Resource.prototype);
Model.extensions = "gcode drc assimp assimp.json blend amf babylon prwm svg obj 3ds dae gltf glb 3mf awd ply vtk vtp wrl vrml fbx pcd stl json x".split(" ");
Model.fileIsModel = function(a) {
  if (void 0 !== a) {
    a = a.name.toLocaleLowerCase();
    for (var c = 0; c < Model.extensions.length; c++) {
      if (a.endsWith(Model.extensions[c])) {
        return !0;
      }
    }
  }
  return !1;
};
"use strict";
function TextFile(a, c) {
  Resource.call(this, "text", "TextFile");
  this.format = "string";
  this.encoding = void 0 !== c ? c : "txt";
  this.data = void 0 !== a ? a : "";
}
TextFile.prototype = Object.create(Resource.prototype);
TextFile.extensions = ".js .txt .glsl .json .xml .yaml .csv .css .html".split(" ");
TextFile.fileIsText = function(a) {
  a = a.name.toLocaleLowerCase();
  for (var c = 0; c < TextFile.extensions.length; c++) {
    if (a.endsWith(TextFile.extensions[c])) {
      return !0;
    }
  }
  return !1;
};
TextFile.prototype.toJSON = function(a) {
  if (void 0 !== a.resources[this.uuid]) {
    return a.resources[this.uuid];
  }
  var c = Resource.prototype.toJSON.call(this, a);
  c.encoding = this.encoding;
  c.data = this.data;
  c.format = this.format;
  return a.resources[this.uuid] = c;
};
"use strict";
function ResourceManager() {
  THREE.Object3D.call(this);
  ResourceManager.ResourceContainer.call(this);
}
ResourceManager.ResourceContainer = function() {
  this.images = [];
  this.videos = [];
  this.audio = [];
  this.fonts = [];
  this.materials = [];
  this.textures = [];
  this.geometries = [];
  this.resources = [];
  this.shapes = [];
  this.skeletons = [];
};
ResourceManager.prototype = Object.create(THREE.Object3D.prototype);
ResourceManager.prototype.dispose = function() {
  for (var a in this.geometries) {
    this.geometries[a].dispose();
  }
  for (a in this.textures) {
    this.textures[a].dispose();
  }
  for (a in this.materials) {
    this.materials[a].dispose();
  }
};
ResourceManager.searchObject = function(a, c, k) {
  function b(a) {
    f(a);
    void 0 === c.materials[a.uuid] && (q.materials[a.uuid] = a);
  }
  function f(a) {
    d(a.map);
    d(a.bumpMap);
    d(a.normalMap);
    d(a.displacementMap);
    d(a.specularMap);
    d(a.emissiveMap);
    d(a.alphaMap);
    d(a.roughnessMap);
    d(a.metalnessMap);
    d(a.envMap);
  }
  function d(a) {
    null !== a && void 0 !== a && (n(a), void 0 === c.textures[a.uuid] && (q.textures[a.uuid] = a));
  }
  function h(a) {
    void 0 === c.images[a.uuid] && (q.images[a.uuid] = a);
  }
  function n(a) {
    a.img instanceof Image && h(a.img);
    a.video instanceof Video && void 0 === c.videos[a.video.uuid] && (q.videos[a.video.uuid] = a.video);
    if (void 0 !== a.images) {
      for (var b = 0; b < a.images.length; b++) {
        h(a.images[b]);
      }
    }
  }
  var q = void 0 !== k ? k : new ResourceManager.ResourceContainer;
  a.traverse(function(a) {
    if (!a.locked) {
      a.font instanceof Font && void 0 === c.fonts[a.font.uuid] && (q.fonts[a.font.uuid] = a.font);
      a.audio instanceof Audio && void 0 === c.audio[a.audio.uuid] && (q.audio[a.audio.uuid] = a.audio);
      if (void 0 !== a.material && !(a instanceof LensFlare || a instanceof ParticleEmitter || a instanceof Sky || a instanceof SpineAnimation)) {
        if (a.material instanceof THREE.Material) {
          b(a.material);
        } else {
          if (a.material instanceof Array) {
            for (var e = 0; e < a.material.length; e++) {
              b(a.material[e]);
            }
          } else {
            if (a.materials instanceof Array) {
              for (e = 0; e < a.materials.length; e++) {
                b(a.materials[e]);
              }
            } else {
              if (a.material instanceof THREE.MultiMaterial) {
                var f = a.material.materials;
                for (e = 0; e < f.length; e++) {
                  b(f[e]);
                }
              }
            }
          }
        }
      }
      !(a instanceof THREE.Mesh || a instanceof THREE.SkinnedMesh) || "BufferGeometry" !== a.geometry.type && "Geometry" !== a.geometry.type || void 0 !== c.geometries[a.geometry.uuid] || (q.geometries[a.geometry.uuid] = a.geometry);
      void 0 !== a.texture && d(a.texture);
      if (a instanceof LensFlare) {
        for (e = 0; e < a.elements.length; e++) {
          d(a.elements[e].texture);
        }
      }
    }
  });
  for (var m in c.materials) {
    f(c.materials[m]);
  }
  for (m in c.textures) {
    n(c.textures[m]);
  }
  return q;
};
ResourceManager.prototype.addRes = function(a, c) {
  this[c][a.uuid] = a;
};
ResourceManager.prototype.getResByName = function(a) {
  for (var c in this) {
    for (var k in c) {
      if (k[i].name === a) {
        return k[i];
      }
    }
  }
  return null;
};
ResourceManager.prototype.removeRes = function(a, c, k, b) {
  "materials" === c ? this.removeMaterial(a, k, b) : "textures" === c ? this.removeTexture(a, k) : "fonts" === c ? this.removeFont(a, k) : "audio" === c ? this.removeAudio(a, k) : void 0 !== this[c] && void 0 !== this[c][a.uuid] && delete this[c][a.uuid];
};
ResourceManager.prototype.getResourceByName = function(a) {
  for (var c in this.resources) {
    if (this.resources[c].name === a) {
      return this.resources[c];
    }
  }
  console.warn("nunuStudio: Resource " + a + " not found");
  return null;
};
ResourceManager.prototype.addResource = function(a) {
  a instanceof Resource && (this.resources[a.uuid] = a);
};
ResourceManager.prototype.removeResource = function(a) {
  delete this.resources[a.uuid];
};
ResourceManager.prototype.getImageByName = function(a) {
  for (var c in this.images) {
    if (this.images[c].name === a) {
      return this.images[c];
    }
  }
  console.warn("nunuStudio: Resource " + a + " not found");
  return null;
};
ResourceManager.prototype.removeImage = function(a) {
  a instanceof Image && delete this.images[a.uuid];
};
ResourceManager.prototype.getVideoByName = function(a) {
  for (var c in this.videos) {
    if (this.videos[c].name === a) {
      return this.videos[c];
    }
  }
  console.warn("nunuStudio: Resource " + a + " not found");
  return null;
};
ResourceManager.prototype.removeVideo = function(a) {
  a instanceof Video && delete this.videos[a.uuid];
};
ResourceManager.prototype.getMaterialByName = function(a) {
  for (var c in this.materials) {
    if (this.materials[c].name === a) {
      return this.materials[c];
    }
  }
  console.warn("nunuStudio: Resource " + a + " not found");
  return null;
};
ResourceManager.prototype.addMaterial = function(a) {
  a instanceof THREE.Material && (this.materials[a.uuid] = a);
};
ResourceManager.prototype.removeMaterial = function(a, c, k) {
  void 0 === c && (c = new THREE.MeshBasicMaterial);
  void 0 === k && (k = new THREE.SpriteMaterial);
  a instanceof THREE.Material && (delete this.materials[a.uuid], this.traverse(function(b) {
    void 0 !== b.material && b.material.uuid === a.uuid && (b.material = b instanceof THREE.Sprite ? k : c);
  }));
};
ResourceManager.prototype.getTextureByName = function(a) {
  for (var c in this.textures) {
    if (this.textures[c].name === a) {
      return this.textures[c];
    }
  }
  console.warn("nunuStudio: Resource " + a + " not found");
  return null;
};
ResourceManager.prototype.addTexture = function(a) {
  material instanceof THREE.Texture && (this.textures[a.uuid] = a);
};
ResourceManager.prototype.removeTexture = function(a, c) {
  void 0 === c && (c = new THREE.Texture);
  a instanceof THREE.Texture && (delete this.textures[a.uuid], this.traverse(function(k) {
    void 0 !== k.material ? (k = k.material, null != k.map && k.map.uuid === a.uuid && (k.map = c, k.needsUpdate = !0), null != k.bumpMap && k.bumpMap.uuid === a.uuid && (k.bumpMap = c, k.needsUpdate = !0), null != k.normalMap && k.normalMap.uuid === a.uuid && (k.normalMap = c, k.needsUpdate = !0), null != k.displacementMap && k.displacementMap.uuid === a.uuid && (k.displacementMap = c, k.needsUpdate = !0), null != k.specularMap && k.specularMap.uuid === a.uuid && (k.specularMap = c, k.needsUpdate = 
    !0), null != k.emissiveMap && k.emissiveMap.uuid === a.uuid && (k.emissiveMap = c, k.needsUpdate = !0), null != k.alphaMap && k.alphaMap.uuid === a.uuid && (k.alphaMap = c, k.needsUpdate = !0), null != k.roughnessMap && k.roughnessMap.uuid === a.uuid && (k.roughnessMap = c, k.needsUpdate = !0), null != k.metalnessMap && k.metalnessMap.uuid === a.uuid && (k.metalnessMap = c, k.needsUpdate = !0), null != k.envMap && k.envMap.uuid === a.uuid && (k.envMap = null, k.needsUpdate = !0)) : k instanceof 
    ParticleEmitter && k.group.texture.uuid === a.uuid && (k.group.texture = c);
  }));
};
ResourceManager.prototype.getFontByName = function(a) {
  for (var c in this.fonts) {
    if (this.fonts[c].name === a) {
      return this.fonts[c];
    }
  }
  console.warn("nunuStudio: Resource " + a + " not found");
  return null;
};
ResourceManager.prototype.addFont = function(a) {
  a instanceof Font && (this.fonts[a.uuid] = a);
};
ResourceManager.prototype.removeFont = function(a, c) {
  void 0 === c && (c = new Font);
  a instanceof Font && (delete this.fonts[a.uuid], this.traverse(function(k) {
    void 0 !== k.font && k.font.uuid === a.uuid && k.setFont(c);
  }));
};
ResourceManager.prototype.getAudioByName = function(a) {
  for (var c in this.audio) {
    if (this.audio[c].name === a) {
      return this.audio[c];
    }
  }
  console.warn("nunuStudio: Resource " + a + " not found");
  return null;
};
ResourceManager.prototype.addAudio = function(a) {
  a instanceof Audio && (this.audio[a.uuid] = a);
};
ResourceManager.prototype.removeAudio = function(a, c) {
  void 0 === c && (c = new Audio);
  a instanceof Audio && (delete this.audio[a.uuid], this.traverse(function(k) {
    void 0 !== k.audio && k.audio.uuid === a.uuid && k.setAudio(c);
  }));
};
"use strict";
function VideoStream(a) {
  Video.call(this);
  this.format = "url";
  this.encoding = FileSystem.getFileExtension(a);
  this.data = a;
}
VideoStream.prototype = Object.create(Video.prototype);
"use strict";
function Texture(a, c, k, b, f, d, h, n, q, m) {
  this.img = "string" === typeof a ? new Image(a) : void 0 === a ? new Image : a;
  THREE.Texture.call(this, document.createElement("img"), c, k, b, f, d, h, n, q, m);
  var t = this;
  this.name = "texture";
  this.category = "Image";
  this.disposed = !1;
  this.format = this.img.hasTransparency() ? THREE.RGBAFormat : THREE.RGBFormat;
  this.image.crossOrigin = "anonymous";
  this.image.src = this.img.data;
  this.image.onload = function() {
    t.needsUpdate = !0;
  };
  this.image.onerror = function() {
    console.log("nunuStudio: Failed to load image " + t.img.uuid + " data.");
    t.img.createSolidColor();
    t.image.src = t.img.data;
    t.needsUpdate = !0;
  };
  if ("gif" === this.img.encoding) {
    var e = function() {
      t.disposed || (t.needsUpdate = !0, requestAnimationFrame(e));
    };
    this.generateMipmaps = !1;
    this.minFilter = this.magFilter = THREE.LinearFilter;
    e();
  }
}
Texture.prototype = Object.create(THREE.Texture.prototype);
Texture.prototype.dispose = function() {
  THREE.Texture.prototype.dispose.call(this);
  this.disposed = !0;
};
Texture.prototype.toJSON = function(a) {
  var c = THREE.Texture.prototype.toJSON.call(this, a);
  a = this.img.toJSON(a);
  c.image = a.uuid;
  return c;
};
"use strict";
function CanvasTexture(a, c, k, b, f, d, h, n, q, m, t) {
  THREE.Texture.call(this, document.createElement("canvas"), k, b, f, d, h, n, q, m, t);
  this.name = "canvas";
  this.category = "Canvas";
  this.format = THREE.RGBAFormat;
  this.width = void 0 !== a ? a : 512;
  this.height = void 0 !== c ? c : 512;
  this.context = this.image.getContext("2d");
  this.updateSize();
}
CanvasTexture.prototype = Object.create(THREE.Texture.prototype);
CanvasTexture.prototype.updateSize = function() {
  this.image.width = this.width;
  this.image.height = this.height;
  this.context.fillStyle = "#000000";
  this.context.fillRect(0, 0, this.width, this.height);
  this.context.font = "Normal " + Math.round(this.width / 12) + "px Arial";
  this.context.textAlign = "center";
  this.context.fillStyle = "#FF0000";
  this.context.fillText("Canvas Texture", this.width / 2, this.height / 2);
  this.needsUpdate = !0;
};
CanvasTexture.prototype.clear = function(a) {
  this.context.fillStyle = a;
  this.context.fillRect(0, 0, this.width, this.height);
};
CanvasTexture.prototype.toJSON = function(a) {
  a = THREE.Texture.prototype.toJSON.call(this, a);
  a.width = this.width;
  a.height = this.height;
  return a;
};
"use strict";
function VideoTexture(a, c, k, b, f, d) {
  function h() {
    n.disposed || (n.image.readyState >= n.image.HAVE_CURRENT_DATA && (n.needsUpdate = !0), requestAnimationFrame(h));
  }
  THREE.Texture.call(this, document.createElement("video"), c, k, b, THREE.LinearFilter, THREE.LinearFilter, THREE.RGBFormat, f, d);
  this.generateMipmaps = this.disposed = !1;
  this.name = "video";
  this.category = "Video";
  this.loop = this.autoplay = !0;
  this.volume = this.playbackRate = 1;
  this.image.crossOrigin = "anonymous";
  this.image.autoplay = this.autoplay;
  this.image.playbackRate = this.playbackRate;
  this.image.loop = this.loop;
  this.image.volume = this.volume;
  this.video = null;
  this.setVideo(a);
  var n = this;
  h();
}
VideoTexture.prototype = Object.create(THREE.Texture.prototype);
VideoTexture.prototype.setVideo = function(a) {
  null === a || void 0 === a ? (this.video = null, this.image.src = null) : ("string" === typeof a ? this.video = new Video(a) : a instanceof Video && (this.video = a), this.image.src = this.video.data);
};
VideoTexture.prototype.setTime = function(a) {
  this.image.currentTime = a;
};
VideoTexture.prototype.setLoop = function(a) {
  this.loop = a;
  this.image.loop = a;
};
VideoTexture.prototype.setVolume = function(a) {
  this.volume = 0 <= a && 1 >= a ? a : 0 <= a ? 1 : 0;
  this.image.volume = this.volume;
};
VideoTexture.prototype.setAutoPlay = function(a) {
  this.autoplay = a;
  this.image.autoplay = this.autoplay;
};
VideoTexture.prototype.setPlaybackRate = function(a) {
  this.playbackRate = a;
  this.image.playbackRate = a;
};
VideoTexture.prototype.pause = function() {
  this.image.paused || this.image.pause();
};
VideoTexture.prototype.play = function() {
  this.image.paused && this.image.play();
};
VideoTexture.prototype.dispose = function() {
  THREE.Texture.prototype.dispose.call(this);
  this.disposed = !0;
  this.image.pause();
  this.image.src = "";
  this.image.load();
};
VideoTexture.prototype.toJSON = function(a) {
  var c = THREE.Texture.prototype.toJSON.call(this, a);
  a = this.video.toJSON(a);
  c.video = a.uuid;
  c.loop = this.loop;
  c.autoplay = this.autoplay;
  c.playbackRate = this.playbackRate;
  c.volume = this.volume;
  return c;
};
"use strict";
function WebcamTexture(a, c, k, b, f) {
  function d() {
    h.readyState >= h.HAVE_CURRENT_DATA && (n.needsUpdate = !0);
    n.disposed || requestAnimationFrame(d);
  }
  var h = document.createElement("video");
  h.autoplay = !0;
  h.loop = !0;
  THREE.Texture.call(this, h, a, c, k, THREE.LinearFilter, THREE.LinearFilter, THREE.RGBFormat, b, f);
  var n = this;
  this.disposed = this.generateMipmaps = !1;
  this.name = "webcam";
  this.category = "Webcam";
  this.mode = WebcamTexture.USER;
  this.stream = null;
  this.connect();
  requestAnimationFrame(d);
}
WebcamTexture.USER = 21;
WebcamTexture.ENVIRONMENT = 22;
WebcamTexture.prototype = Object.create(THREE.Texture.prototype);
WebcamTexture.prototype.connect = function() {
  var a = this.mode === WebcamTexture.USER ? {facingMode:"user"} : {facingMode:{exact:"environment"}}, c = this;
  void 0 !== navigator.webkitGetUserMedia && (navigator.getUserMedia = navigator.webkitGetUserMedia);
  navigator.getUserMedia ? navigator.getUserMedia({video:!0}, function(a) {
    c.stream = a;
    c.image.src = URL.createObjectURL(a);
  }, function(a) {
    console.warn("nunuStudio: No webcam available");
  }) : navigator.mediaDevices.getUserMedia && navigator.mediaDevices.getUserMedia({video:a}).then(function(a) {
    c.stream = a;
    c.image.src = URL.createObjectURL(a);
  }).catch(function(a) {
    console.warn("nunuStudio: No webcam available");
  });
};
WebcamTexture.prototype.disconnect = function() {
  if (null !== this.stream) {
    for (var a = this.stream.getTracks(), c = 0; c < a.length; c++) {
      a[c].stop();
    }
  }
};
WebcamTexture.prototype.dispose = function() {
  THREE.Texture.prototype.dispose.call(this);
  this.disconnect();
  this.disposed = !0;
  this.image.paused || this.image.pause();
};
WebcamTexture.prototype.toJSON = function(a) {
  a = THREE.Texture.prototype.toJSON.call(this, a);
  a.mode = this.mode;
  return a;
};
"use strict";
function CubeTexture(a, c, k, b, f, d, h, n, q, m) {
  void 0 === c && (c = THREE.CubeReflectionMapping);
  for (var t = [], e = 0; 6 > e; e++) {
    t.push(document.createElement("canvas"));
  }
  THREE.Texture.call(this, t, c, k, b, f, d, h, n, q, m);
  this.images = void 0 !== a ? a : [];
  this.size = 512;
  this.flipY = !1;
  this.mode = 6 === this.images.length ? CubeTexture.CUBE : CubeTexture.CROSS;
  0 < this.images.length && this.updateImages();
  this.name = "cubetexture";
  this.category = "Cube";
}
CubeTexture.prototype = Object.create(THREE.Texture.prototype);
CubeTexture.prototype.isCubeTexture = !0;
CubeTexture.RIGHT = 0;
CubeTexture.LEFT = 1;
CubeTexture.TOP = 2;
CubeTexture.BOTTOM = 3;
CubeTexture.FRONT = 4;
CubeTexture.BACK = 5;
CubeTexture.CUBE = 20;
CubeTexture.CROSS = 21;
CubeTexture.EQUIRECTANGULAR = 22;
CubeTexture.prototype.setSize = function(a) {
  0 !== (a & a - 1) ? console.warn("nunuStudio: CubeTexture new size is not a power of two.") : this.size = a;
};
CubeTexture.prototype.setImages = function(a, c) {
  this.mode = void 0 !== c ? c : CubeTexture.CUBE;
  this.images = a;
};
CubeTexture.prototype.updateImages = function() {
  var a = this;
  if (this.mode === CubeTexture.CUBE) {
    for (var c = 0; c < this.images.length; c++) {
      "string" === typeof this.images[c] && (this.images[c] = new Image(this.images[c]));
      var k = document.createElement("img");
      k.crossOrigin = "anonymous";
      k.index = c;
      k.src = this.images[c].data;
      k.onload = function() {
        a.image[this.index].width = a.size;
        a.image[this.index].height = a.size;
        a.image[this.index].getContext("2d").drawImage(this, 0, 0, a.size, a.size);
        a.needsUpdate = !0;
      };
    }
  } else {
    if (this.mode === CubeTexture.CROSS) {
      for (c = 0; c < this.image.length; c++) {
        this.image[c].width = this.size, this.image[c].height = this.size;
      }
      k = document.createElement("img");
      k.src = this.images[0].data;
      k.onload = function() {
        var b = this.naturalWidth / 4, c = this.naturalHeight / 3;
        a.image[CubeTexture.LEFT].getContext("2d").drawImage(this, 0, c, b, c, 0, 0, a.size, a.size);
        a.image[CubeTexture.FRONT].getContext("2d").drawImage(this, b, c, b, c, 0, 0, a.size, a.size);
        a.image[CubeTexture.RIGHT].getContext("2d").drawImage(this, 2 * b, c, b, c, 0, 0, a.size, a.size);
        a.image[CubeTexture.BACK].getContext("2d").drawImage(this, 3 * b, c, b, c, 0, 0, a.size, a.size);
        a.image[CubeTexture.TOP].getContext("2d").drawImage(this, b, 0, b, c, 0, 0, a.size, a.size);
        a.image[CubeTexture.BOTTOM].getContext("2d").drawImage(this, b, 2 * c, b, c, 0, 0, a.size, a.size);
        a.needsUpdate = !0;
      };
    } else {
      if (this.mode === CubeTexture.EQUIRECTANGULAR) {
        for (c = 0; c < this.image.length; c++) {
          this.image[c].width = this.size, this.image[c].height = this.size;
        }
        k = document.createElement("img");
        k.src = this.images[0].data;
        k.onload = function() {
          var b = document.createElement("canvas");
          b.width = k.naturalWidth;
          b.height = k.naturalHeight;
          var c = b.getContext("2d");
          c.drawImage(k, 0, 0);
          b = c.getImageData(0, 0, b.width, b.height);
          for (c = 0; 6 > c; c++) {
            var d = CubeTexture.renderEquirectFace(b, c, Math.PI, a.size);
            a.image[c].getContext("2d").putImageData(d, 0, 0);
          }
          a.needsUpdate = !0;
        };
      }
    }
  }
};
CubeTexture.resampleBilinear = function(a, c, k, b, f) {
  var d = a.width, h = a.height;
  a = a.data;
  var n = THREE.Math.clamp(Math.floor(k), 0, d - 1), q = THREE.Math.clamp(Math.ceil(k), 0, d - 1);
  k -= n;
  var m = THREE.Math.clamp(Math.floor(b), 0, h - 1), t = THREE.Math.clamp(Math.ceil(b), 0, h - 1);
  b -= m;
  h = 4 * (m * d + n);
  m = 4 * (m * d + q);
  n = 4 * (t * d + n);
  d = 4 * (t * d + q);
  for (q = 0; 3 > q; q++) {
    c.data[f + q] = Math.ceil((a[h + q] * (1 - k) + a[m + q] * k) * (1 - b) + (a[n + q] * (1 - k) + a[d + q] * k) * b);
  }
};
CubeTexture.renderEquirectFace = function(a, c, k, b) {
  var f = new ImageData(b, b);
  c = CubeTexture.faces[c];
  for (var d = 0; d < b; d++) {
    for (var h = 0; h < b; h++) {
      var n = 4 * (h * b + d);
      f.data[n + 3] = 255;
      var q = c(2 * (d + .5) / b - 1, 2 * (h + .5) / b - 1), m = Math.sqrt(q.x * q.x + q.y * q.y + q.z * q.z), t = THREE.Math.euclideanModulo(Math.atan2(q.y, q.x) + k, 2 * Math.PI);
      CubeTexture.resampleBilinear(a, f, a.width * t / Math.PI / 2 - .5, a.height * Math.acos(q.z / m) / Math.PI - .5, n);
    }
  }
  return f;
};
CubeTexture.faces = [function(a, c) {
  return new THREE.Vector3(a, -1, -c);
}, function(a, c) {
  return new THREE.Vector3(-a, 1, -c);
}, function(a, c) {
  return new THREE.Vector3(-c, -a, 1);
}, function(a, c) {
  return new THREE.Vector3(c, -a, -1);
}, function(a, c) {
  return new THREE.Vector3(-1, -a, -c);
}, function(a, c) {
  return new THREE.Vector3(1, a, -c);
}];
CubeTexture.prototype.toJSON = function(a) {
  var c = THREE.Texture.prototype.toJSON.call(this, a);
  c.size = this.size;
  c.mode = this.mode;
  c.images = [];
  if (this.mode === CubeTexture.EQUIRECTANGULAR || this.mode === CubeTexture.CROSS) {
    var k = this.images[0].toJSON(a);
    c.images.push(k.uuid);
  } else {
    for (var b = 0; b < this.images.length; b++) {
      k = this.images[b].toJSON(a), c.images.push(k.uuid);
    }
  }
  return c;
};
"use strict";
function CompressedTexture(a, c, k, b, f, d, h, n, q, m, t, e) {
  THREE.Texture.call(this, null, d, h, n, q, m, b, f, t, e);
  this.category = "Compressed";
  this.image = {width:c, height:k};
  this.mipmaps = a;
  this.generateMipmaps = this.flipY = this.isCubeTexture = !1;
}
CompressedTexture.prototype = Object.create(Texture.prototype);
CompressedTexture.prototype.isCompressedTexture = !0;
CompressedTexture.prototype.toJSON = function(a) {
  a = THREE.Texture.prototype.toJSON.call(this, a);
  if (a.isCubeTexture = this.isCubeTexture) {
    a.image = [];
    for (var c = 0; c < this.image.length; c++) {
      for (var k = {mipmaps:[], format:this.image[c].format, width:this.image[c].width, height:this.image[c].height}, b = 0; b < this.image[c].mipmaps.length; b++) {
        k.mipmaps.push({width:this.image[c].mipmaps[b].width, height:this.image[c].mipmaps[b].height, data:this.image[c].mipmaps[b].data});
      }
      a.image.push(k);
    }
  } else {
    for (a.mipmaps = [], a.width = this.image.width, a.height = this.image.height, b = 0; b < this.mipmaps.length; b++) {
      a.mipmaps.push({width:this.mipmaps[b].width, height:this.mipmaps[b].height, data:this.mipmaps[b].data});
    }
  }
  return a;
};
"use strict";
function SpriteSheetTexture(a, c, k, b, f, d, h) {
  function n() {
    q.currentFrame++;
    q.currentFrame >= q._endFrame && (q.currentFrame = q._beginFrame);
    q.offset.x = q.currentFrame % q.framesHorizontal / q.framesHorizontal;
    q.offset.y = 1 - q.repeat.y - Math.floor(q.currentFrame / q.framesHorizontal) / q.framesVertical;
    q.disposed || setTimeout(n, 1E3 * q.animationSpeed);
  }
  "string" === typeof a ? this.img = new Image(a) : a instanceof Image && (this.img = a);
  THREE.Texture.call(this, document.createElement("img"), f, THREE.RepeatWrapping, THREE.RepeatWrapping, THREE.LinearFilter, THREE.LinearFilter, THREE.RGBFormat, d, h);
  this.name = "animation";
  this.category = "SpriteSheet";
  this.disposed = !1;
  this.format = this.img.hasTransparency() ? THREE.RGBAFormat : THREE.RGBFormat;
  this.repeat.set(1 / c, 1 / k);
  this.loop = !0;
  this.animationSpeed = .1;
  this._totalFrames = b;
  this._endFrame = this._beginFrame = 0;
  this._framesHorizontal = c;
  this._framesVertical = k;
  var q = this;
  Object.defineProperties(this, {framesHorizontal:{get:function() {
    return q._framesHorizontal;
  }, set:function(a) {
    q._framesHorizontal = a;
    q.repeat.x = 1 / a;
    q.totalFrames = q._framesHorizontal * q._framesVertical;
  }}, framesVertical:{get:function() {
    return q._framesVertical;
  }, set:function(a) {
    q._framesVertical = a;
    q.repeat.y = 1 / a;
    q.totalFrames = q._framesHorizontal * q._framesVertical;
  }}, endFrame:{get:function() {
    return q._endFrame;
  }, set:function(a) {
    a > q._totalFrames && (a = q._totalFrames);
    q._endFrame = a;
  }}, beginFrame:{get:function() {
    return q._beginFrame;
  }, set:function(a) {
    0 > a && (a = 0);
    q.currentFrame = a;
    q._beginFrame = a;
  }}, totalFrames:{get:function() {
    return q._totalFrames;
  }, set:function(a) {
    q._beginFrame = 0;
    q._endFrame = a;
    q._totalFrames = a;
  }}});
  this.image.crossOrigin = "anonymous";
  this.image.src = this.img.data;
  this.image.onload = function() {
    q.needsUpdate = !0;
  };
  this.currentFrame = 0;
  n();
}
SpriteSheetTexture.prototype = Object.create(THREE.Texture.prototype);
SpriteSheetTexture.prototype.setAnimationSpeed = function(a) {
  this.animationSpeed = a;
};
SpriteSheetTexture.prototype.setFrameGrid = function(a, c) {
  this._framesHorizontal = a;
  this._framesVertical = c;
  this._totalFrames = a * c;
  this.repeat.set(1 / a, 1 / c);
};
SpriteSheetTexture.prototype.setAnimationFrames = function(a, c) {
  this.beginFrame = a;
  this.endFrame = c;
};
SpriteSheetTexture.prototype.dispose = function() {
  THREE.Texture.prototype.dispose.call(this);
  this.disposed = !0;
};
SpriteSheetTexture.prototype.toJSON = function(a) {
  var c = THREE.Texture.prototype.toJSON.call(this, a);
  a = this.img.toJSON(a);
  c.image = a.uuid;
  c.loop = this.loop;
  c.animationSpeed = this.animationSpeed;
  c.framesHorizontal = this._framesHorizontal;
  c.framesVertical = this._framesVertical;
  c.totalFrames = this._totalFrames;
  c.beginFrame = this._beginFrame;
  c.endFrame = this._endFrame;
  return c;
};
"use strict";
function FontLoader(a) {
  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
}
FontLoader.prototype.load = function(a, c, k, b) {
  (new THREE.FileLoader(this.manager)).load(a, function(a) {
    c(new Font(JSON.parse(a)));
  }, k, b);
};
FontLoader.prototype.parse = function(a) {
  if (void 0 !== a.data) {
    var c = new Font;
    c.name = a.name;
    c.uuid = a.uuid;
    c.encoding = a.encoding;
    void 0 !== a.reversed && (c.reversed = a.reversed);
    "arraybuffer" === a.format ? (c.format = a.format, c.data = void 0 !== a.data.toArrayBuffer ? a.data.toArrayBuffer() : a.data, c.loadTTF()) : "base64" === a.format ? (c.format = "arraybuffer", c.data = ArraybufferUtils.fromBase64(a.data), c.loadTTF()) : (c.format = a.format, c.data = a.data, c.font = a.data);
    return c;
  }
  return new Font(a);
};
"use strict";
function ImageLoader(a) {
  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
  this.path = "";
  this.crossOrigin = "Anonymous";
}
ImageLoader.prototype.setCrossOrigin = function(a) {
  this.crossOrigin = a;
  return this;
};
ImageLoader.prototype.setPath = function(a) {
  this.path = a;
  return this;
};
ImageLoader.prototype.loadJSON = function(a, c, k, b) {
  var f = this;
  (new THREE.FileLoader(this.manager)).load(a, function(a) {
    c(f.parse(JSON.parse(a)));
  }, k, b);
};
ImageLoader.prototype.parse = function(a) {
  var c = new Image(void 0 !== a.data.toArrayBuffer ? a.data.toArrayBuffer() : a.data, a.encoding);
  c.name = a.name;
  c.uuid = a.uuid;
  void 0 !== a.width && (c.width = a.width, c.height = a.height);
  return c;
};
"use strict";
function VideoLoader(a) {
  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
}
VideoLoader.prototype.load = function(a, c, k, b) {
  var f = this;
  (new THREE.FileLoader(this.manager)).load(a, function(a) {
    c(f.parse(JSON.parse(a)));
  }, k, b);
};
VideoLoader.prototype.parse = function(a) {
  var c = new Video(void 0 !== a.data.toArrayBuffer ? a.data.toArrayBuffer() : a.data, a.encoding);
  c.name = a.name;
  c.uuid = a.uuid;
  return c;
};
"use strict";
function AudioLoader(a) {
  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
}
AudioLoader.prototype.load = function(a, c, k, b) {
  (new THREE.FileLoader(this.manager)).load(a, function(a) {
    c(self.parse(JSON.parse(a)));
  }, k, b);
};
AudioLoader.prototype.parse = function(a) {
  var c = new Audio;
  c.name = a.name;
  c.uuid = a.uuid;
  c.encoding = a.encoding;
  "base64" === a.format ? (c.format = "arraybuffer", c.data = ArraybufferUtils.fromBase64(a.data)) : "arraybuffer" === a.format ? (c.format = a.format, c.data = void 0 !== a.data.toArrayBuffer ? a.data.toArrayBuffer() : a.data) : (c.format = a.format, c.data = a.data);
  return c;
};
"use strict";
function MaterialLoader(a) {
  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
  this.textures = {};
}
MaterialLoader.prototype.load = function(a, c, k, b) {
  var f = this;
  (new FileLoader(f.manager)).load(a, function(a) {
    c(f.parse(JSON.parse(a)));
  }, k, b);
};
MaterialLoader.prototype.setTextures = function(a) {
  this.textures = a;
};
MaterialLoader.prototype.parse = function(a) {
  function c(a) {
    void 0 === k[a] && console.warn("THREE.MaterialLoader: Undefined texture", a);
    return k[a];
  }
  var k = this.textures, b = new window[a.type];
  void 0 !== a.uuid && (b.uuid = a.uuid);
  void 0 !== a.name && (b.name = a.name);
  void 0 !== a.color && (void 0 === b.color && (b.color = new THREE.Color), b.color.setHex(a.color));
  void 0 !== a.roughness && (b.roughness = a.roughness);
  void 0 !== a.metalness && (b.metalness = a.metalness);
  void 0 !== a.specular && (void 0 === b.specular && (b.specular = new THREE.Color), b.specular.setHex(a.specular));
  void 0 !== a.shininess && (b.shininess = a.shininess);
  void 0 !== a.clearCoat && (b.clearCoat = a.clearCoat);
  void 0 !== a.clearCoatRoughness && (b.clearCoatRoughness = a.clearCoatRoughness);
  void 0 !== a.uniforms && (b.uniforms = a.uniforms);
  void 0 !== a.vertexShader && (b.vertexShader = a.vertexShader);
  void 0 !== a.fragmentShader && (b.fragmentShader = a.fragmentShader);
  void 0 !== a.vertexColors && (b.vertexColors = a.vertexColors);
  void 0 !== a.fog && (b.fog = a.fog);
  void 0 !== a.blending && (b.blending = a.blending);
  void 0 !== a.side && (b.side = a.side);
  void 0 !== a.shading && (b.flatShading = 1 === a.shading);
  void 0 !== a.flatShading && (b.flatShading = a.flatShading);
  void 0 !== a.rotation && (b.rotation = a.rotation);
  void 0 !== a.linewidth && (b.linewidth = a.linewidth);
  void 0 !== a.dashSize && (b.dashSize = a.dashSize);
  void 0 !== a.gapSize && (b.gapSize = a.gapSize);
  void 0 !== a.scale && (b.scale = a.scale);
  void 0 !== a.opacity && (b.opacity = a.opacity);
  void 0 !== a.transparent && (b.transparent = a.transparent);
  void 0 !== a.alphaTest && (b.alphaTest = a.alphaTest);
  void 0 !== a.depthTest && (b.depthTest = a.depthTest);
  void 0 !== a.depthWrite && (b.depthWrite = a.depthWrite);
  void 0 !== a.colorWrite && (b.colorWrite = a.colorWrite);
  void 0 !== a.wireframe && (b.wireframe = a.wireframe);
  void 0 !== a.wireframeLinewidth && (b.wireframeLinewidth = a.wireframeLinewidth);
  void 0 !== a.wireframeLinecap && (b.wireframeLinecap = a.wireframeLinecap);
  void 0 !== a.wireframeLinejoin && (b.wireframeLinejoin = a.wireframeLinejoin);
  void 0 !== a.morphTargets && (b.morphTargets = a.morphTargets);
  void 0 !== a.morphNormals && (b.morphNormals = a.morphNormals);
  void 0 !== a.dithering && (b.dithering = a.dithering);
  void 0 !== a.visible && (b.visible = a.visible);
  void 0 !== a.userData && (b.userData = a.userData);
  void 0 !== a.skinning && (b.skinning = a.skinning);
  void 0 !== a.size && (b.size = a.size);
  void 0 !== a.sizeAttenuation && (b.sizeAttenuation = a.sizeAttenuation);
  void 0 !== a.map && (b.map = c(a.map));
  void 0 !== a.alphaMap && (b.alphaMap = c(a.alphaMap), b.transparent = !0);
  void 0 !== a.bumpMap && (b.bumpMap = c(a.bumpMap));
  void 0 !== a.bumpScale && (b.bumpScale = a.bumpScale);
  void 0 !== a.normalMap && (b.normalMap = c(a.normalMap));
  if (void 0 !== a.normalScale) {
    var f = a.normalScale;
    !1 === Array.isArray(f) && (f = [f, f]);
    b.normalScale = (new Vector2).fromArray(f);
  }
  void 0 !== a.displacementMap && (b.displacementMap = c(a.displacementMap));
  void 0 !== a.displacementScale && (b.displacementScale = a.displacementScale);
  void 0 !== a.displacementBias && (b.displacementBias = a.displacementBias);
  void 0 !== a.roughnessMap && (b.roughnessMap = c(a.roughnessMap));
  void 0 !== a.metalnessMap && (b.metalnessMap = c(a.metalnessMap));
  void 0 !== a.emissiveMap && (b.emissiveMap = c(a.emissiveMap));
  void 0 !== a.emissive && (void 0 === b.emissive && (b.emissive = new THREE.Color), b.emissive.setHex(a.emissive));
  void 0 !== a.emissiveIntensity && (b.emissiveIntensity = a.emissiveIntensity);
  void 0 !== a.matcap && (b.matcap = c(a.matcap));
  void 0 !== a.specularMap && (b.specularMap = c(a.specularMap));
  void 0 !== a.envMap && (b.envMap = c(a.envMap));
  void 0 !== a.reflectivity && (b.reflectivity = a.reflectivity);
  void 0 !== a.envMapIntensity && (b.envMapIntensity = a.envMapIntensity);
  void 0 !== a.combine && (b.combine = a.combine);
  void 0 !== a.refractionRatio && (b.refractionRatio = a.refractionRatio);
  void 0 !== a.lightMap && (b.lightMap = c(a.lightMap));
  void 0 !== a.lightMapIntensity && (b.lightMapIntensity = a.lightMapIntensity);
  void 0 !== a.aoMap && (b.aoMap = c(a.aoMap));
  void 0 !== a.aoMapIntensity && (b.aoMapIntensity = a.aoMapIntensity);
  void 0 !== a.gradientMap && (b.gradientMap = c(a.gradientMap));
  if (void 0 !== a.materials) {
    f = 0;
    for (var d = a.materials.length; f < d; f++) {
      b.materials.push(this.parse(a.materials[f]));
    }
  }
  return b;
};
"use strict";
function TextureLoader(a) {
  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
  this.path = "";
  this.crossOrigin = "Anonymous";
  this.images = [];
  this.videos = [];
  this.fonts = [];
}
THREE._TextureLoader = THREE.TextureLoader;
THREE.TextureLoader = TextureLoader;
TextureLoader.prototype.setCrossOrigin = function(a) {
  this.crossOrigin = a;
  return this;
};
TextureLoader.prototype.setPath = function(a) {
  this.path = a;
  return this;
};
TextureLoader.prototype.setImages = function(a) {
  this.images = a;
  return this;
};
TextureLoader.prototype.setVideos = function(a) {
  this.videos = a;
  return this;
};
TextureLoader.prototype.setFonts = function(a) {
  this.fonts = a;
  return this;
};
TextureLoader.prototype.load = function(a, c, k, b) {
  try {
    var f = new Texture(this.path + a);
    void 0 !== c && c(f);
    return f;
  } catch (d) {
    return void 0 !== b && b(d), console.warn("nunuStudio: Texture not found", d), new Texture;
  }
};
TextureLoader.prototype.loadJSON = function(a, c, k, b) {
  var f = this;
  (new THREE.FileLoader(this.manager)).load(a, function(a) {
    f.parse(JSON.parse(a), c);
  }, k, b);
};
TextureLoader.prototype.parse = function(a, c) {
  var k = a.category;
  if ("Video" === k) {
    void 0 === a.video && console.warn("TextureLoader: No video specified for", a.uuid), void 0 === this.videos[a.video] && console.warn("TextureLoader: Undefined video", a.video), k = new VideoTexture(this.videos[a.video]), k.setLoop(a.loop), k.setAutoPlay(a.autoplay), k.setPlaybackRate(a.playbackRate), k.setVolume(a.volume);
  } else {
    if ("Webcam" === k) {
      k = new WebcamTexture, void 0 !== a.mode && (k.mode = a.mode);
    } else {
      if ("Compressed" === k) {
        if (a.isCubeTexture) {
          k = new CompressedTexture;
          k.image = [];
          k.isCubeTexture = !0;
          for (var b = 0; b < a.image.length; b++) {
            for (var f = 0; f < a.image[b].mipmaps.length; f++) {
              void 0 !== a.image[b].mipmaps[f].data.toArrayBuffer && (a.image[b].mipmaps[f].data = new Uint8Array(a.image[b].mipmaps[f].data.toArrayBuffer()));
            }
            k.image.push(a.image[b]);
          }
        } else {
          for (f = 0; f < a.mipmaps.length; f++) {
            void 0 !== a.mipmaps[f].data.toArrayBuffer && (a.mipmaps[f].data = new Uint8Array(a.mipmaps[f].data.toArrayBuffer()));
          }
          k = new CompressedTexture(a.mipmaps, a.width, a.height);
        }
      } else {
        if ("Cube" === k) {
          b = [];
          for (f = 0; f < a.images.length; f++) {
            void 0 === this.images[a.images[f]] && console.warn("nunuStudio: TextureLoader, undefined image", a.images[f]), b.push(this.images[a.images[f]]);
          }
          k = new CubeTexture;
          k.setImages(b, a.mode);
          k.setSize(a.size);
          k.updateImages();
        } else {
          "Canvas" === k ? k = new CanvasTexture(a.width, a.height) : (void 0 === a.image && console.warn("nunuStudio: TextureLoader, no image specified for", a.uuid), void 0 === this.images[a.image] && console.warn("nunuStudio: TextureLoader, undefined image", a.image), "SpriteSheet" === k ? (k = new SpriteSheetTexture(this.images[a.image], a.framesHorizontal, a.framesVertical, a.totalFrames), k.loop = a.loop, k.animationSpeed = a.animationSpeed, k.beginFrame = a.beginFrame, k.endFrame = a.endFrame) : 
          k = new Texture(this.images[a.image]));
        }
      }
    }
  }
  k.needsUpdate = !0;
  k.uuid = a.uuid;
  k.name = a.name;
  k.mapping = a.mapping;
  k.offset.set(a.offset[0], a.offset[1]);
  k.repeat.set(a.repeat[0], a.repeat[1]);
  void 0 !== a.center && k.center.set(a.center[0], a.center[1]);
  void 0 !== a.rotation && (k.rotation = a.rotation);
  void 0 !== a.format && (k.format = a.format);
  k.wrapS = a.wrap[0];
  k.wrapT = a.wrap[1];
  k.minFilter = a.minFilter;
  k.magFilter = a.magFilter;
  k.anisotropy = a.anisotropy;
  k.flipY = a.flipY;
  void 0 !== c && c(k);
  return k;
};
"use strict";
function GeometryLoader(a) {
  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
  this.geometryLoader = new LegacyGeometryLoader;
  this.bufferGeometryLoader = new THREE.BufferGeometryLoader;
  this.shapes = {};
}
GeometryLoader.prototype.setShapes = function(a) {
  this.shapes = a;
  return this;
};
GeometryLoader.prototype.load = function(a, c, k, b) {
  (new THREE.FileLoader(this.manager)).load(a, function(a) {
    c(self.parse(JSON.parse(a)));
  }, k, b);
};
GeometryLoader.prototype.parse = function(a) {
  switch(a.type) {
    case "PlaneGeometry":
    case "PlaneBufferGeometry":
      var c = new THREE[a.type](a.width, a.height, a.widthSegments, a.heightSegments);
      break;
    case "BoxGeometry":
    case "BoxBufferGeometry":
    case "CubeGeometry":
      c = new THREE[a.type](a.width, a.height, a.depth, a.widthSegments, a.heightSegments, a.depthSegments);
      break;
    case "CircleGeometry":
    case "CircleBufferGeometry":
      c = new THREE[a.type](a.radius, a.segments, a.thetaStart, a.thetaLength);
      break;
    case "CylinderGeometry":
    case "CylinderBufferGeometry":
      c = new THREE[a.type](a.radiusTop, a.radiusBottom, a.height, a.radialSegments, a.heightSegments, a.openEnded, a.thetaStart, a.thetaLength);
      break;
    case "ConeGeometry":
    case "ConeBufferGeometry":
      c = new THREE[a.type](a.radius, a.height, a.radialSegments, a.heightSegments, a.openEnded, a.thetaStart, a.thetaLength);
      break;
    case "SphereGeometry":
    case "SphereBufferGeometry":
      c = new THREE[a.type](a.radius, a.widthSegments, a.heightSegments, a.phiStart, a.phiLength, a.thetaStart, a.thetaLength);
      break;
    case "DodecahedronGeometry":
    case "IcosahedronGeometry":
    case "OctahedronGeometry":
    case "TetrahedronGeometry":
    case "DodecahedronBufferGeometry":
    case "IcosahedronBufferGeometry":
    case "OctahedronBufferGeometry":
    case "TetrahedronBufferGeometry":
      c = new THREE[a.type](a.radius, a.detail);
      break;
    case "PolyhedronGeometry":
    case "PolyhedronBufferGeometry":
      c = new THREE[a.type](a.radius, a.indices, a.radius, a.detail);
      break;
    case "RingGeometry":
    case "RingBufferGeometry":
      c = new THREE[a.type](a.innerRadius, a.outerRadius, a.thetaSegments, a.phiSegments, a.thetaStart, a.thetaLength);
      break;
    case "TorusGeometry":
    case "TorusBufferGeometry":
      c = new THREE[a.type](a.radius, a.tube, a.radialSegments, a.tubularSegments, a.arc);
      break;
    case "TorusKnotGeometry":
    case "TorusKnotBufferGeometry":
      c = new THREE[a.type](a.radius, a.tube, a.tubularSegments, a.radialSegments, a.p, a.q);
      break;
    case "LatheGeometry":
    case "LatheBufferGeometry":
      c = new THREE[a.type](a.points, a.segments, a.phiStart, a.phiLength);
      break;
    case "ShapeGeometry":
    case "ShapeBufferGeometry":
      c = [];
      for (var k = 0, b = a.shapes.length; k < b; k++) {
        c.push(this.shapes[a.shapes[k]]);
      }
      c = new THREE[a.type](c, a.curveSegments);
      break;
    case "BufferGeometry":
      c = this.bufferGeometryLoader.parse(a);
      break;
    case "Geometry":
      c = this.geometryLoader.parse(a.data).geometry;
      break;
    default:
      console.warn("GeometryLoader: Unsupported geometry type " + a.type), c = new THREE.Geometry;
  }
  c.uuid = a.uuid;
  c.name = void 0 !== a.name ? a.name : "geometry";
  return c;
};
"use strict";
function LegacyGeometryLoader(a) {
  this.manager = void 0 !== a ? a : DefaultLoadingManager;
  this.withCredentials = !1;
}
LegacyGeometryLoader.prototype.load = function(a, c, k, b) {
  var f = this, d = void 0 === this.path ? LoaderUtils.extractUrlBase(a) : this.path, h = new FileLoader(this.manager);
  h.setPath(this.path);
  h.setWithCredentials(this.withCredentials);
  h.load(a, function(b) {
    b = JSON.parse(b);
    var h = b.metadata;
    if (void 0 !== h && (h = h.type, void 0 !== h && "object" === h.toLowerCase())) {
      console.error("nunuStudio: LegacyGeometryLoader: " + a + " should be loaded with ObjectLoader instead.");
      return;
    }
    b = f.parse(b, d);
    c(b.geometry, b.materials);
  }, k, b);
};
LegacyGeometryLoader.prototype.setPath = function(a) {
  this.path = a;
  return this;
};
LegacyGeometryLoader.prototype.setResourcePath = function(a) {
  this.resourcePath = a;
  return this;
};
LegacyGeometryLoader.prototype.setCrossOrigin = function(a) {
  this.crossOrigin = a;
  return this;
};
LegacyGeometryLoader.prototype.parse = function() {
  return function(a, c) {
    void 0 !== a.data && (a = a.data);
    a.scale = void 0 !== a.scale ? 1 / a.scale : 1;
    var k = new THREE.Geometry, b = a, f, d, h, n = b.faces;
    var q = b.vertices;
    var m = b.normals, t = b.colors;
    var e = b.scale;
    var l = 0;
    if (void 0 !== b.uvs) {
      for (f = 0; f < b.uvs.length; f++) {
        b.uvs[f].length && l++;
      }
      for (f = 0; f < l; f++) {
        k.faceVertexUvs[f] = [];
      }
    }
    var u = 0;
    for (h = q.length; u < h;) {
      f = new THREE.Vector3, f.x = q[u++] * e, f.y = q[u++] * e, f.z = q[u++] * e, k.vertices.push(f);
    }
    u = 0;
    for (h = n.length; u < h;) {
      q = n[u++];
      var w = q & 1;
      var y = q & 2;
      f = q & 8;
      var x = q & 16;
      var p = q & 32;
      e = q & 64;
      q &= 128;
      if (w) {
        w = new THREE.Face3;
        w.a = n[u];
        w.b = n[u + 1];
        w.c = n[u + 3];
        var v = new THREE.Face3;
        v.a = n[u + 1];
        v.b = n[u + 2];
        v.c = n[u + 3];
        u += 4;
        y && (y = n[u++], w.materialIndex = y, v.materialIndex = y);
        y = k.faces.length;
        if (f) {
          for (f = 0; f < l; f++) {
            var z = b.uvs[f];
            k.faceVertexUvs[f][y] = [];
            k.faceVertexUvs[f][y + 1] = [];
            for (d = 0; 4 > d; d++) {
              var C = n[u++];
              var A = z[2 * C];
              C = z[2 * C + 1];
              A = new THREE.Vector2(A, C);
              2 !== d && k.faceVertexUvs[f][y].push(A);
              0 !== d && k.faceVertexUvs[f][y + 1].push(A);
            }
          }
        }
        x && (x = 3 * n[u++], w.normal.set(m[x++], m[x++], m[x]), v.normal.copy(w.normal));
        if (p) {
          for (f = 0; 4 > f; f++) {
            x = 3 * n[u++], p = new THREE.Vector3(m[x++], m[x++], m[x]), 2 !== f && w.vertexNormals.push(p), 0 !== f && v.vertexNormals.push(p);
          }
        }
        e && (e = n[u++], e = t[e], w.color.setHex(e), v.color.setHex(e));
        if (q) {
          for (f = 0; 4 > f; f++) {
            e = n[u++], e = t[e], 2 !== f && w.vertexColors.push(new Color(e)), 0 !== f && v.vertexColors.push(new Color(e));
          }
        }
        k.faces.push(w);
        k.faces.push(v);
      } else {
        w = new THREE.Face3;
        w.a = n[u++];
        w.b = n[u++];
        w.c = n[u++];
        y && (y = n[u++], w.materialIndex = y);
        y = k.faces.length;
        if (f) {
          for (f = 0; f < l; f++) {
            for (z = b.uvs[f], k.faceVertexUvs[f][y] = [], d = 0; 3 > d; d++) {
              C = n[u++], A = z[2 * C], C = z[2 * C + 1], A = new THREE.Vector2(A, C), k.faceVertexUvs[f][y].push(A);
            }
          }
        }
        x && (x = 3 * n[u++], w.normal.set(m[x++], m[x++], m[x]));
        if (p) {
          for (f = 0; 3 > f; f++) {
            x = 3 * n[u++], p = new THREE.Vector3(m[x++], m[x++], m[x]), w.vertexNormals.push(p);
          }
        }
        e && (e = n[u++], w.color.setHex(t[e]));
        if (q) {
          for (f = 0; 3 > f; f++) {
            e = n[u++], w.vertexColors.push(new Color(t[e]));
          }
        }
        k.faces.push(w);
      }
    }
    b = a;
    u = void 0 !== b.influencesPerVertex ? b.influencesPerVertex : 2;
    if (b.skinWeights) {
      for (h = 0, n = b.skinWeights.length; h < n; h += u) {
        k.skinWeights.push(new Vector4(b.skinWeights[h], 1 < u ? b.skinWeights[h + 1] : 0, 2 < u ? b.skinWeights[h + 2] : 0, 3 < u ? b.skinWeights[h + 3] : 0));
      }
    }
    if (b.skinIndices) {
      for (h = 0, n = b.skinIndices.length; h < n; h += u) {
        k.skinIndices.push(new Vector4(b.skinIndices[h], 1 < u ? b.skinIndices[h + 1] : 0, 2 < u ? b.skinIndices[h + 2] : 0, 3 < u ? b.skinIndices[h + 3] : 0));
      }
    }
    k.bones = b.bones;
    k.bones && 0 < k.bones.length && (k.skinWeights.length !== k.skinIndices.length || k.skinIndices.length !== k.vertices.length) && console.warn("When skinning, number of vertices (" + k.vertices.length + "), skinIndices (" + k.skinIndices.length + "), and skinWeights (" + k.skinWeights.length + ") should match.");
    h = a;
    n = h.scale;
    if (void 0 !== h.morphTargets) {
      for (b = 0, u = h.morphTargets.length; b < u; b++) {
        for (k.morphTargets[b] = {}, k.morphTargets[b].name = h.morphTargets[b].name, k.morphTargets[b].vertices = [], m = k.morphTargets[b].vertices, t = h.morphTargets[b].vertices, l = 0, q = t.length; l < q; l += 3) {
          e = new THREE.Vector3, e.x = t[l] * n, e.y = t[l + 1] * n, e.z = t[l + 2] * n, m.push(e);
        }
      }
    }
    if (void 0 !== h.morphColors && 0 < h.morphColors.length) {
      for (n = k.faces, h = h.morphColors[0].colors, b = 0, u = n.length; b < u; b++) {
        n[b].color.fromArray(h, 3 * b);
      }
    }
    h = a;
    b = [];
    u = [];
    void 0 !== h.animation && u.push(h.animation);
    void 0 !== h.animations && (h.animations.length ? u = u.concat(h.animations) : u.push(h.animations));
    for (h = 0; h < u.length; h++) {
      (n = AnimationClip.parseAnimation(u[h], k.bones)) && b.push(n);
    }
    k.morphTargets && (u = AnimationClip.CreateClipsFromMorphTargetSequences(k.morphTargets, 10), b = b.concat(u));
    0 < b.length && (k.animations = b);
    k.computeFaceNormals();
    k.computeBoundingSphere();
    if (void 0 === a.materials || 0 === a.materials.length) {
      return {geometry:k};
    }
    a = Loader.prototype.initMaterials(a.materials, this.resourcePath || c, this.crossOrigin);
    return {geometry:k, materials:a};
  };
}();
"use strict";
function ObjectLoader(a) {
  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
  this.texturePath = "";
}
ObjectLoader.prototype.load = function(a, c, k, b) {
  "" === this.texturePath && (this.texturePath = a.substring(0, a.lastIndexOf("/") + 1));
  var f = this;
  (new THREE.FileLoader(this.manager)).load(a, function(a) {
    f.parse(JSON.parse(a), c);
  }, k, b);
};
ObjectLoader.prototype.parse = function(a, c) {
  var k = this.parseResources(a.resources), b = this.parseShape(a.shapes);
  b = this.parseGeometries(a.geometries, b);
  var f = this.parseImages(a.images), d = this.parseVideos(a.videos), h = this.parseAudio(a.audio), n = this.parseFonts(a.fonts);
  f = this.parseTextures(a.textures, f, d);
  d = this.parseMaterials(a.materials, f);
  k = this.parseObject(a.object, b, d, f, h, n, k);
  a.skeletons && (b = this.parseSkeletons(a.skeletons, k), this.bindSkeletons(k, b));
  a.animations && (k.animations = this.parseAnimations(a.animations));
  void 0 !== a.images && 0 !== a.images.length || void 0 === c || c(k);
  return k;
};
ObjectLoader.prototype.setTexturePath = function(a) {
  this.texturePath = a;
};
ObjectLoader.prototype.setCrossOrigin = function(a) {
  this.crossOrigin = a;
};
ObjectLoader.prototype.parseResources = function(a) {
  var c = [];
  if (void 0 !== a) {
    for (var k in a) {
      var b = new TextFile(a[k].data, a[k].encoding);
      b.format = a[k].format;
      b.name = a[k].name;
      b.uuid = a[k].uuid;
      c[b.uuid] = b;
    }
  }
  return c;
};
ObjectLoader.prototype.parseShape = function(a) {
  var c = {};
  if (void 0 !== a) {
    for (var k = 0, b = a.length; k < b; k++) {
      var f = (new Shape).fromJSON(a[k]);
      c[f.uuid] = f;
    }
  }
  return c;
};
ObjectLoader.prototype.parseGeometries = function(a, c) {
  var k = new GeometryLoader;
  k.setShapes(c);
  c = [];
  if (void 0 !== a) {
    for (var b = 0; b < a.length; b++) {
      c[a[b].uuid] = k.parse(a[b]);
    }
  }
  return c;
};
ObjectLoader.prototype.parseMaterials = function(a, c) {
  var k = [], b = new MaterialLoader;
  b.setTextures(c);
  if (void 0 !== a) {
    for (var f in a) {
      k[a[f].uuid] = b.parse(a[f]);
    }
  }
  return k;
};
ObjectLoader.prototype.parseAnimations = function(a) {
  for (var c = [], k = 0; k < a.length; k++) {
    var b = THREE.AnimationClip.parse(a[k]);
    void 0 !== a[k].uuid && (b.uuid = a[k].uuid);
    c.push();
  }
  return c;
};
ObjectLoader.prototype.parseImages = function(a) {
  var c = new ImageLoader, k = [];
  if (void 0 !== a) {
    for (var b in a) {
      k[a[b].uuid] = c.parse(a[b]);
    }
  }
  return k;
};
ObjectLoader.prototype.parseVideos = function(a) {
  var c = new VideoLoader, k = [];
  if (void 0 !== a) {
    for (var b in a) {
      k[a[b].uuid] = c.parse(a[b]);
    }
  }
  return k;
};
ObjectLoader.prototype.parseAudio = function(a) {
  var c = new AudioLoader, k = [];
  if (void 0 !== a) {
    for (var b in a) {
      k[a[b].uuid] = c.parse(a[b]);
    }
  }
  return k;
};
ObjectLoader.prototype.parseFonts = function(a) {
  var c = new FontLoader, k = [];
  if (void 0 !== a) {
    for (var b in a) {
      k[a[b].uuid] = c.parse(a[b]);
    }
  }
  return k;
};
ObjectLoader.prototype.parseTextures = function(a, c, k) {
  var b = [], f = new TextureLoader;
  f.setImages(c);
  f.setVideos(k);
  if (void 0 !== a) {
    for (var d in a) {
      b[a[d].uuid] = f.parse(a[d]);
    }
  }
  return b;
};
ObjectLoader.prototype.parseSkeletons = function(a, c) {
  var k = {};
  if (void 0 === a) {
    return k;
  }
  for (var b = 0; b < a.length; b++) {
    var f = a[b], d = f.uuid, h = f.bones;
    f = f.boneInverses;
    for (var n = [], q = [], m = 0, t = h.length; m < t; m++) {
      var e = c.getObjectByProperty("uuid", h[m]);
      void 0 === e && (console.warn("THREE.ObjectLoader: Not found Bone whose uuid is " + h[m]), e = new THREE.Bone);
      n.push(e);
      q.push((new THREE.Matrix4).fromArray(f[m]));
    }
    k[d] = new Skeleton(n, q);
  }
  return k;
};
ObjectLoader.prototype.bindSkeletons = function(a, c) {
  0 !== Object.keys(c).length && a.traverse(function(a) {
    if (!0 === a.isSkinnedMesh && void 0 !== a.skeletonUUID) {
      var b = c[a.skeletonUUID];
      void 0 === b ? console.warn("THREE.ObjectLoader: Not found Skeleton whose uuid is " + a.skeletonUUID) : a.bind(b, a.bindMatrix);
      delete a.skeletonUUID;
    }
  });
};
ObjectLoader.prototype.parseObject = function(a, c, k, b, f, d, h) {
  function n(a) {
    void 0 === b[a] && console.warn("ObjectLoader: Undefined texture", a);
    return b[a];
  }
  function q(a) {
    void 0 === c[a] && console.warn("ObjectLoader: Undefined geometry", a);
    return c[a];
  }
  function m(a) {
    if (a instanceof Array) {
      for (var b = [], c = 0; c < a.length; c++) {
        b.push(k[a[c]]);
      }
      return b;
    }
    void 0 === k[a] && console.warn("ObjectLoader: Undefined material", a);
    return k[a];
  }
  function t(a) {
    void 0 === d[a] && console.warn("ObjectLoader: Undefined font", a);
    return d[a];
  }
  function e(a) {
    void 0 === f[a] && console.warn("ObjectLoader: Undefined audio", a);
    return f[a];
  }
  switch(a.type) {
    case "SpineAnimation":
      for (var l = 0; l < a.textures.length; l++) {
        a.textures[l].texture = n(a.textures[l].texture);
      }
      var u = new SpineAnimation(a.json, a.atlas, "", a.textures);
      void 0 !== a.animation && (u.animation = a.animation, u.track = a.track, u.loop = a.loop);
      void 0 !== a.skin && (u.skin = a.skin);
      break;
    case "Audio":
      u = new AudioEmitter(e(a.audio));
      u.autoplay = a.autoplay;
      u.startTime = a.startTime;
      u.playbackRate = a.playbackRate;
      u.loop = void 0 !== a.source ? a.source.loop : a.loop;
      void 0 !== a.volume && (u.volume = a.volume);
      break;
    case "PositionalAudio":
      u = new PositionalAudio(e(a.audio));
      u.autoplay = a.autoplay;
      u.startTime = a.startTime;
      u.playbackRate = a.playbackRate;
      u.loop = void 0 !== a.source ? a.source.loop : a.loop;
      void 0 !== a.volume && (u.volume = a.volume);
      break;
    case "Physics":
      u = new PhysicsObject;
      u.body.type = a.body.type;
      u.body.mass = a.body.mass;
      u.body.linearDamping = a.body.linearDamping;
      u.body.angularDamping = a.body.angularDamping;
      u.body.allowSleep = a.body.allowSleep;
      u.body.sleepSpeedLimit = a.body.sleepSpeedLimit;
      u.body.sleepTimeLimit = a.body.sleepTimeLimit;
      u.body.collisionFilterGroup = a.body.collisionFilterGroup;
      u.body.collisionFilterMask = a.body.collisionFilterMask;
      u.body.fixedRotation = a.body.fixedRotation;
      var w = a.body.shapes;
      for (l = 0; l < w.length; l++) {
        var y = w[l];
        y.type === CANNON.Shape.types.SPHERE ? u.body.addShape(new CANNON.Sphere(y.radius)) : y.type === CANNON.Shape.types.BOX ? u.body.addShape(new CANNON.Box(new CANNON.Vec3(y.halfExtents.x, y.halfExtents.y, y.halfExtents.z))) : y.type === CANNON.Shape.types.PARTICLE ? u.body.addShape(new CANNON.Particle) : y.type === CANNON.Shape.types.PLANE ? u.body.addShape(new CANNON.Plane) : y.type === CANNON.Shape.types.CONVEXPOLYHEDRON && u.body.addShape(new CANNON.ConvexPolyhedron(y.vertices, y.faces));
      }
      break;
    case "ParticleEmiter":
      u = function(a) {
        return Array.isArray(a) ? (new THREE.Vector3).fromArray(a) : new THREE.Vector3(a.x, a.y, a.z);
      };
      void 0 !== a.group && (l = a.group, l.texture.value = n(l.texture.value), l.texture.frames = (new THREE.Vector2).fromArray(l.texture.frames || [1, 1]));
      if (void 0 !== a.emitter) {
        for (w = a.emitter, w.position.value = u(w.position.value), w.position.spread = u(w.position.spread), w.velocity.value = u(w.velocity.value), w.velocity.spread = u(w.velocity.spread), w.acceleration.value = u(w.acceleration.value), w.acceleration.spread = u(w.acceleration.spread), l = 0; l < w.color.value.length; l++) {
          w.color.value[l] = new THREE.Color(w.color.value[l]), w.color.spread[l] = u(w.color.spread[l]);
        }
      }
      u = new ParticleEmitter(a.group, a.emitter);
      break;
    case "LensFlare":
      u = new LensFlare;
      void 0 !== a.lensFlares && (a.elements = a.lensFlares);
      for (l = 0; l < a.elements.length; l++) {
        u.addFlare(n(a.elements[l].texture), a.elements[l].size, a.elements[l].distance, new THREE.Color(a.elements[l].color));
      }
      break;
    case "TextMesh":
    case "Text3D":
      u = new TextMesh(a.text, m(a.material), t(a.font), a.height, a.bevel, a.bevelThickness, a.bevelSize, a.size, a.curveSegments, a.extruded);
      break;
    case "Program":
      u = new Program(a.name);
      u.description = a.description;
      u.author = a.author;
      u.version = a.version;
      u.vr = a.vr;
      u.vrScale = a.vrScale;
      void 0 !== a.rendererConfig ? u.rendererConfig.fromJSON(a.rendererConfig) : (u.antialiasing = a.antialiasing, u.shadows = a.shadows, u.shadowsType = a.shadowsType, u.toneMapping = a.toneMapping, u.toneMappingWhitePoint = a.toneMappingWhitePoint, u.toneMappingExposure = a.toneMappingExposure);
      void 0 !== a.lockPointer && (u.lockPointer = a.lockPointer);
      void 0 !== a.defaultScene && (u.defaultScene = a.defaultScene);
      void 0 !== a.handlePixelRatio && (u.handlePixelRatio = a.handlePixelRatio);
      break;
    case "LeapDevice":
      u = new LeapMotion;
      u.mode = a.mode;
      u.useArm = a.useArm;
      void 0 !== a.debugModel && (u.debugModel = a.debugModel);
      void 0 !== a.gesturesEnabled && (u.gesturesEnabled = a.gesturesEnabled);
      void 0 !== a.posesEnabled && (u.posesEnabled = a.posesEnabled);
      break;
    case "Kinect":
      u = new KinectDevice;
      void 0 !== a.debugModel && (u.debugModel = a.debugModel);
      break;
    case "Sky":
      u = new Sky(a.autoUpdate, a.dayTime, a.sunDistance, a.time);
      void 0 !== a.sun && (u.sun.shadow.fromJSON(a.sun.shadow), void 0 !== a.sun.castShadow && (u.sun.castShadow = a.sun.castShadow));
      if (void 0 !== a.colorTop) {
        for (u.colorTop = [], l = 0; l < a.colorTop.length; l++) {
          u.colorTop.push(new THREE.Color(a.colorTop[l]));
        }
      }
      if (void 0 !== a.colorBottom) {
        for (u.colorBottom = [], l = 0; l < a.colorBottom.length; l++) {
          u.colorBottom.push(new THREE.Color(a.colorBottom[l]));
        }
      }
      void 0 !== a.sunColor && (u.sunColor = a.sunColor);
      void 0 !== a.moonColor && (u.moonColor = a.moonColor);
      void 0 !== a.intensity && (u.intensity = a.intensity);
      break;
    case "CubeCamera":
      u = new CubeCamera(a.near, a.far, a.resolution, a.autoUpdate);
      break;
    case "FirstPersonControls":
      u = new FirstPersonControls;
      u.sensitivity = a.sensitivity;
      u.needsButtonPressed = a.needsButtonPressed;
      u.movementEnabled = a.movementEnabled;
      u.moveSpeed = a.moveSpeed;
      u.moveOnPlane = a.moveOnPlane;
      u.moveKeys = a.moveKeys;
      break;
    case "OrbitControls":
      u = new OrbitControls;
      u.distance = a.distance;
      u.maxDistance = a.maxDistance;
      u.minDistance = a.minDistance;
      u.sensitivity = a.sensitivity;
      u.limitUp = a.limitUp;
      u.limitDown = a.limitDown;
      u.needsButtonPressed = a.needsButtonPressed;
      u.zoomEnabled = a.zoomEnabled;
      u.movementEnabled = a.movementEnabled;
      void 0 !== a.smooth && (u.smooth = a.smooth, u.friction = a.friction, u.speed = a.speed, u.invertNavigation = a.invertNavigation);
      void 0 !== a.center && (u.center.fromArray(a.center), u.vector.fromArray(a.vector));
      break;
    case "Scene":
      u = new Scene;
      void 0 !== a.background && (Number.isInteger(a.background) ? u.background = new THREE.Color(a.background) : u.background = n(a.background));
      void 0 !== a.fog && ("Fog" === a.fog.type ? u.fog = new THREE.Fog(a.fog.color, a.fog.near, a.fog.far) : "FogExp2" === a.fog.type && (u.fog = new THREE.FogExp2(a.fog.color, a.fog.density)));
      void 0 !== a.defaultCamera && (u.defaultCamera = this.parse(a.defaultCamera));
      void 0 !== a.cameras && (u.cameras = a.cameras);
      void 0 !== a.usePhysics && (u.usePhysics = a.usePhysics);
      void 0 !== a.world && (u.world.gravity.set(a.world.gravity.x, a.world.gravity.y, a.world.gravity.z), u.world.quatNormalizeSkip = a.world.quatNormalizeSkip, u.world.quatNormalizeFast = a.world.quatNormalizeFast, u.world.solver.tolerance = a.world.solver.tolerance, u.world.solver.iterations = a.world.solver.iterations);
      break;
    case "PerspectiveCamera":
      u = new PerspectiveCamera(a.fov, a.aspect, a.near, a.far);
      void 0 !== a.focus && (u.focus = a.focus);
      void 0 !== a.zoom && (u.zoom = a.zoom);
      void 0 !== a.filmGauge && (u.filmGauge = a.filmGauge);
      void 0 !== a.filmOffset && (u.filmOffset = a.filmOffset);
      void 0 !== a.view && (u.view = Object.assign({}, a.view));
      void 0 !== a.viewport && (a.viewport instanceof Array ? (u.viewport.size.fromArray(a.viewport), u.viewport.offset.fromArray(a.offset)) : u.viewport.fromJSON(a.viewport));
      void 0 !== a.clearColor && (u.clearColor = a.clearColor);
      void 0 !== a.clearDepth && (u.clearDepth = a.clearDepth);
      void 0 !== a.clearStencil && (u.clearStencil = a.clearStencil);
      void 0 !== a.order && (u.order = a.order);
      void 0 !== a.composer && (u.composer = EffectComposer.fromJSON(a.composer));
      break;
    case "OrthographicCamera":
      u = new OrthographicCamera(a.size, a.aspect, a.mode, a.near, a.far);
      void 0 !== a.viewport && (a.viewport instanceof Array ? (u.viewport.size.fromArray(a.viewport), u.viewport.offset.fromArray(a.offset)) : u.viewport.fromJSON(a.viewport));
      void 0 !== a.clearColor && (u.clearColor = a.clearColor);
      void 0 !== a.clearDepth && (u.clearDepth = a.clearDepth);
      void 0 !== a.clearStencil && (u.clearStencil = a.clearStencil);
      void 0 !== a.order && (u.order = a.order);
      void 0 !== a.composer && (u.composer = EffectComposer.fromJSON(a.composer));
      void 0 !== a.zoom && (u.zoom = a.zoom);
      void 0 !== a.view && (u.view = Object.assign({}, a.view));
      break;
    case "Script":
      u = new Script(a.code, a.mode);
      break;
    case "RectAreaLight":
      u = new RectAreaLight(a.color, a.intensity, a.width, a.height);
      break;
    case "AmbientLight":
      u = new AmbientLight(a.color, a.intensity);
      break;
    case "DirectionalLight":
      u = new DirectionalLight(a.color, a.intensity);
      break;
    case "PointLight":
      u = new PointLight(a.color, a.intensity, a.distance, a.decay);
      break;
    case "SpotLight":
      u = new SpotLight(a.color, a.intensity, a.distance, a.angle, a.penumbra, a.decay);
      break;
    case "HemisphereLight":
      u = new HemisphereLight(a.color, a.groundColor, a.intensity);
      break;
    case "SkinnedMesh":
      l = q(a.geometry);
      u = m(a.material);
      void 0 !== a.skeleton && void 0 !== l.bones && (w = l.bones, l.bones = void 0);
      u = new SkinnedMesh(l, u);
      void 0 !== a.skeleton && (u.skeletonUUID = a.skeleton);
      void 0 !== a.bindMode && (u.bindMode = a.bindMode);
      void 0 !== a.bindMatrix && u.bindMatrix.fromArray(a.bindMatrix);
      u.updateMatrixWorld(!0);
      void 0 !== w && (l.bones = w);
      break;
    case "Mesh":
      l = q(a.geometry);
      u = m(a.material);
      u = l.bones && 0 < l.bones.length ? new SkinnedMesh(l, u) : new Mesh(l, u);
      break;
    case "LOD":
      u = new THREE.LOD;
      break;
    case "Line":
      u = new THREE.Line(q(a.geometry), m(a.material), a.mode);
      break;
    case "LineLoop":
      u = new THREE.LineLoop(q(a.geometry), m(a.material));
      break;
    case "LineSegments":
      u = new THREE.LineSegments(q(a.geometry), m(a.material));
      break;
    case "PointCloud":
    case "Points":
      u = new THREE.Points(q(a.geometry), m(a.material));
      break;
    case "Sprite":
      u = new Sprite(m(a.material));
      break;
    case "Group":
      u = new Container;
      break;
    case "Bone":
      u = new THREE.Bone;
      break;
    default:
      u = new Container;
  }
  u.uuid = a.uuid;
  u.name = a.name;
  u.locked = !0 === a.locked || !0 === a.hidden;
  u.folded = !0 === a.folded;
  void 0 !== a.frustumCulled && (u.frustumCulled = a.frustumCulled);
  void 0 !== a.renderOrder && (u.renderOrder = a.renderOrder);
  if (void 0 !== a.animations) {
    for (u.animations = [], l = 0; l < a.animations.length; l++) {
      u.animations.push(THREE.AnimationClip.parse(a.animations[l]));
    }
  }
  void 0 !== a.matrix && (u.matrix.fromArray(a.matrix), u.matrix.decompose(u.position, u.quaternion, u.scale));
  void 0 !== a.position && u.position.fromArray(a.position);
  void 0 !== a.rotation && u.rotation.fromArray(a.rotation);
  void 0 !== a.quaternion && u.quaternion.fromArray(a.quaternion);
  void 0 !== a.scale && u.scale.fromArray(a.scale);
  u.castShadow = !0 === a.castShadow;
  u.receiveShadow = !0 === a.receiveShadow;
  void 0 !== a.shadow && u.shadow.fromJSON(a.shadow);
  u.visible = !0 === a.visible;
  void 0 !== a.userData && (u.userData = a.userData);
  if (void 0 !== a.children) {
    for (var x in a.children) {
      u.add(this.parseObject(a.children[x], c, k, b, f, d));
    }
  }
  void 0 !== a.matrixAutoUpdate && (u.matrixAutoUpdate = a.matrixAutoUpdate, u.matrixAutoUpdate || (u.updateMatrix(), u.updateMatrixWorld(!0)));
  if ("Program" === a.type) {
    u.materials = k, u.textures = b, u.resources = h, u.fonts = d, u.audio = f;
  } else {
    if ("Scene" === a.type) {
      for (l = 0; l < u.cameras.length; l++) {
        x = u.getCamera(u.cameras[l]), null !== x ? u.cameras[l] = x : u.cameras.splice(l, 1);
      }
    } else {
      if ("LOD" === a.type) {
        for (a = a.levels, h = 0; h < a.length; h++) {
          l = a[h], x = u.getObjectByProperty("uuid", l.object), void 0 !== x && u.addLevel(x, l.distance);
        }
      }
    }
  }
  return u;
};
"use strict";
function LeapMotion() {
  THREE.Group.call(this);
  this.type = "LeapDevice";
  this.name = "leap";
  this.posesEnabled = this.gesturesEnabled = this.debugModel = !0;
  this.mode = LeapMotion.DESK;
  this.useArm = !1;
  this.boneMeshes = [];
  this.armMeshes = [];
  this.material = new THREE.MeshPhongMaterial;
  this.geometry = new THREE.BoxBufferGeometry(1, 1, 1);
  this.gesture = [];
  for (var a = 0; 10 > a; a++) {
    this.gesture[a] = !1;
  }
  this.pose = [];
  for (a = 0; 3 > a; a++) {
    this.pose[a] = !1;
  }
  this.data = null;
}
LeapMotion.prototype = Object.create(THREE.Group.prototype);
LeapMotion.DESK = 0;
LeapMotion.HDM = 1;
LeapMotion.SWIPE = 0;
LeapMotion.SWIPE_LEFT = 1;
LeapMotion.SWIPE_RIGHT = 2;
LeapMotion.SWIPE_FRONT = 3;
LeapMotion.SWIPE_BACK = 4;
LeapMotion.SWIPE_UP = 5;
LeapMotion.SWIPE_DOWN = 6;
LeapMotion.CIRCLE = 7;
LeapMotion.SCREEN_TAP = 8;
LeapMotion.KEY_TAP = 9;
LeapMotion.CLOSED = 0;
LeapMotion.OPEN = 1;
LeapMotion.POINTING = 2;
LeapMotion.prototype.initialize = function() {
  var a = this;
  Leap.loop({background:!0}, function(c) {
    a.data = c;
  }).connect();
  THREE.Object3D.prototype.initialize.call(this);
};
LeapMotion.prototype.update = function(a) {
  null !== this.data && (this.gesturesEnabled && this.updateGestures(), this.posesEnabled && this.updatePoses(), this.debugModel && this.updateDebugModel());
  THREE.Object3D.prototype.update.call(this, a);
};
LeapMotion.prototype.checkGesture = function(a) {
  return void 0 !== this.gesture[a] ? this.gesture[a] : !1;
};
LeapMotion.prototype.checkPose = function(a) {
  return void 0 !== this.pose[a] ? this.pose[a] : !1;
};
LeapMotion.prototype.setMode = function(a) {
  this.mode = a;
};
LeapMotion.prototype.updatePoses = function() {
  for (var a = 0; a < this.pose.length; a++) {
    this.pose[a] = !0;
  }
  for (var c = 0; c < this.data.hands.length; c++) {
    var k = this.data.hands[c], b = k.sphereCenter;
    b = new THREE.Vector3(b[0], b[1], b[2]);
    var f = [], d = 0;
    for (a = 0; a < this.pose.length; a++) {
      this.pose[a] = !0;
    }
    var h = [];
    for (a = 0; a < k.fingers.length; a++) {
      var n = k.fingers[a];
      h.push(n.direction);
      n = n.distal.nextJoint;
      n = new THREE.Vector3(n[0], n[1], n[2]);
      f.push(b.distanceTo(n) / k._scaleFactor);
      0 !== a && (.3 > h[a][2] && (this.pose[LeapMotion.CLOSED] = !1), -.5 < h[a][2] && (this.pose[LeapMotion.OPEN] = !1), 1 === a ? d = f[1] : d < 2 * f[a] - 15 && (this.pose[LeapMotion.POINTING] = !1));
    }
    d < 2 * f[0] - 15 && (this.pose[LeapMotion.POINTING] = !1);
  }
};
LeapMotion.prototype.updateGestures = function() {
  for (var a = 0; a < this.gesture.length; a++) {
    this.gesture[a] = !1;
  }
  var c = this;
  this.data.valid && 0 < this.data.gestures.length && this.data.gestures.forEach(function(a) {
    "swipe" === a.type ? (c.gesture[LeapMotion.SWIPE] = !0, 0 < a.direction[0] ? c.gesture[LeapMotion.SWIPE_RIGHT] = !0 : c.gesture[LeapMotion.SWIPE_LEFT] = !0, 0 < a.direction[1] ? c.gesture[LeapMotion.SWIPE_UP] = !0 : c.gesture[LeapMotion.SWIPE_DOWN] = !0, 0 < a.direction[2] ? c.gesture[LeapMotion.SWIPE_FRONT] = !0 : c.gesture[LeapMotion.SWIPE_BACK] = !0) : "circle" === a.type ? c.gesture[LeapMotion.CIRCLE] = !0 : "keyTap" === a.type ? c.gesture[LeapMotion.KEY_TAP] = !0 : "screenTap" === a.type && 
    (c.gesture[LeapMotion.SCREEN_TAP] = !0);
  });
};
LeapMotion.prototype.updateDebugModel = function() {
  var a = this;
  this.armMeshes.forEach(function(b) {
    a.remove(b);
  });
  this.boneMeshes.forEach(function(b) {
    a.remove(b);
  });
  for (var c = 0, k = 0, b = 0; b < this.data.hands.length; b++) {
    for (var f = this.data.hands[b], d = 0; d < f.fingers.length; d++) {
      for (var h = f.fingers[d], n = 0; n < h.bones.length; n++) {
        var q = h.bones[n];
        if (0 !== c) {
          var m = this.boneMeshes[c] || this.addMesh(this.boneMeshes);
          this.updateMesh(q, m);
        }
        c++;
      }
    }
    this.showArm && (f = f.arm, d = this.armMeshes[k++] || this.addMesh(this.armMeshes), this.updateMesh(f, d), d.scale.set(f.width / 1200, f.width / 300, f.length / 150));
  }
};
LeapMotion.prototype.addMesh = function(a) {
  var c = new Mesh(this.geometry, this.material);
  c.castShadow = this.castShadow;
  c.receiveShadow = this.receiveShadow;
  a.push(c);
  return c;
};
LeapMotion.prototype.updateMesh = function(a, c) {
  c.position.fromArray(a.center());
  c.position.divideScalar(150);
  c.setRotationFromMatrix((new THREE.Matrix4).fromArray(a.matrix()));
  c.scale.set(a.width / 150, a.width / 150, a.length / 150);
  this.add(c);
};
LeapMotion.prototype.getMovement = function() {
  var a = this.data.gestures[0].position, c = this.data.gestures[0].startPosition;
  a = new THREE.Vector3(a[0] - c[0], a[1] - c[1], a[2] - c[2]);
  a.divideScalar(this.data.currentFrameRate);
  return a;
};
LeapMotion.prototype.toJSON = function(a) {
  a = THREE.Group.prototype.toJSON.call(this, a);
  a.object.type = this.type;
  a.object.debugModel = this.debugModel;
  a.object.gesturesEnabled = this.gesturesEnabled;
  a.object.posesEnabled = this.posesEnabled;
  a.object.mode = this.mode;
  a.object.useArm = this.useArm;
  return a;
};
"use strict";
function KinectDevice() {
  THREE.Group.call(this);
  this.type = "Kinect";
  this.name = "kinect";
  this.socket = new WebSocket("ws://127.0.0.1:8181");
  this.connected = !1;
  this.debugModel = !0;
  this.dataTimeout = 0;
  this.data = this.camera = null;
  this.dataReceived = !1;
  var a = this;
  this.socket.onopen = function() {
    a.connected = !0;
  };
  this.socket.onclose = function() {
    a.connected = !1;
  };
  this.socket.onmessage = function(c) {
    "string" === typeof c.data ? (a.data = JSON.parse(c.data), a.dataReceived = !0, a.dataTimeout = KinectDevice.DATA_TIMEOUT) : c.data instanceof Blob && (a.camera = c.data);
  };
}
KinectDevice.DATA_TIMEOUT = 20;
KinectDevice.DEPTH = 0;
KinectDevice.COLOR = 1;
KinectDevice.JOINTS_NAME = [["head", "shouldercenter"], ["shouldercenter", "shoulderright"], ["shouldercenter", "shoulderleft"], ["shoulderright", "elbowright"], ["shoulderleft", "elbowleft"], ["elbowright", "wristright"], ["elbowleft", "wristleft"], ["wristright", "handright"], ["wristleft", "handleft"], ["shouldercenter", "spine"], ["spine", "hipcenter"], ["hipcenter", "hipright"], ["hipcenter", "hipleft"], ["hipright", "kneeright"], ["hipleft", "kneeleft"], ["kneeright", "ankleright"], ["kneeleft", 
"ankleleft"], ["ankleright", "footright"], ["ankleleft", "footleft"]];
KinectDevice.prototype = Object.create(THREE.Group.prototype);
KinectDevice.prototype.update = function(a) {
  if (null !== this.data) {
    if (this.dataReceived) {
      for (this.dataReceived = !1; 0 < this.children.length;) {
        this.children.pop();
      }
      if (this.debugModel) {
        for (var c = new THREE.SphereGeometry(.04, 6, 6), k = new THREE.MeshPhongMaterial(16711680), b = 0; b < this.data.skeletons.length; b++) {
          for (var f = this.data.skeletons[b].joints, d = 0; d < f.length; d++) {
            var h = new Mesh(c, k);
            h.position.set(f[d].x, f[d].y, f[d].z);
            h.castShadow = !0;
            this.add(h);
          }
        }
      }
    } else {
      if (0 < this.dataTimeout && (this.dataTimeout--, 0 === this.dataTimeout)) {
        for (; 0 < this.children.length;) {
          this.children.pop();
        }
      }
    }
  }
  THREE.Object3D.prototype.update.call(this, a);
};
KinectDevice.prototype.isConnected = function() {
  return this.connected;
};
KinectDevice.prototype.setCameraMode = function(a) {
  a === KinectDevice.COLOR ? socket.send("Color") : a === KinectDevice.DEPTH && socket.send("Depth");
};
KinectDevice.prototype.toJSON = function(a) {
  a = THREE.Group.prototype.toJSON.call(this, a);
  a.object.debugModel = this.debugModel;
  return a;
};
"use strict";
function Mesh(a, c) {
  THREE._Mesh.call(this, a, c);
  this.name = "model";
  this.castShadow = this.receiveShadow = !0;
}
THREE._Mesh = THREE.Mesh;
THREE.Mesh = Mesh;
Mesh.prototype = Object.create(THREE._Mesh.prototype);
Mesh.prototype.dispose = function() {
  null !== this.material && void 0 !== this.material.dispose && this.material.dispose();
  null !== this.geometry && this.geometry.dispose();
  THREE.Object3D.prototype.dispose.call(this);
};
"use strict";
function SkinnedMesh(a, c, k) {
  THREE._SkinnedMesh.call(this, a, c, k);
  this.name = "skinned";
  this.castShadow = this.receiveShadow = !0;
}
THREE._SkinnedMesh = THREE.SkinnedMesh;
THREE.SkinnedMesh = SkinnedMesh;
SkinnedMesh.prototype = Object.create(THREE._SkinnedMesh.prototype);
SkinnedMesh.prototype.dispose = function() {
  null !== this.material && void 0 !== this.material.dispose && this.material.dispose();
  null !== this.geometry && this.geometry.dispose();
  THREE.Object3D.prototype.dispose.call(this);
};
SkinnedMesh.prototype.toJSON = function(a) {
  var c = this;
  a = THREE.Object3D.prototype.toJSON.call(this, a, function(a, b) {
    void 0 !== c.skeleton && (void 0 === a.skeletons[c.skeleton.uuid] && (a.skeletons[c.skeleton.uuid] = c.skeleton.toJSON(a)), b.skeleton = c.skeleton.uuid);
  });
  void 0 !== this.bindMode && (a.object.bindMode = this.bindMode);
  void 0 !== this.bindMatrix && (a.object.bindMatrix = this.bindMatrix.toArray());
  return a;
};
"use strict";
function TextMesh(a, c, k, b, f, d, h, n, q, m) {
  Mesh.call(this, TextMesh.EMPTY_GEOMETRY, c);
  this.name = "text";
  this.type = "TextMesh";
  this.font = void 0 !== k ? k : null;
  this.extruded = void 0 !== m ? m : !0;
  this.size = void 0 !== n ? n : 1;
  this.height = void 0 !== b ? b : .5;
  this.curveSegments = void 0 !== q ? q : 15;
  this.bevel = void 0 !== f ? f : !1;
  this.bevelThickness = void 0 !== d ? d : .1;
  this.bevelSize = void 0 !== h ? h : .05;
  this.text = "";
  this.setText(void 0 !== a ? a : "text");
}
TextMesh.prototype = Object.create(Mesh.prototype);
TextMesh.EMPTY_GEOMETRY = new THREE.Geometry;
TextMesh.prototype.setFont = function(a) {
  this.font !== a && (this.font = a, this.updateGeometry());
};
TextMesh.prototype.setText = function(a) {
  this.text !== a && (this.text = a, this.updateGeometry());
};
TextMesh.prototype.updateGeometry = function() {
  if (null !== this.font) {
    if (void 0 !== this.geometry && this.geometry.dispose(), !0 !== this.font.isFont) {
      console.warn("nunuStudio: Font parameter is not an instance of THREE.Font."), this.geometry = TextMesh.EMPTY_GEOMETRY;
    } else {
      var a = this.font.generateShapes(this.text, this.size);
      this.extruded ? (this.geometry = new THREE.ExtrudeBufferGeometry(a, {curveSegments:this.curveSegments, depth:this.height, bevelEnabled:this.bevel, bevelSize:this.bevelSize, bevelThickness:this.bevelThickness}), this.geometry.computeVertexNormals()) : this.geometry = new THREE.ShapeBufferGeometry(a, this.curveSegments);
    }
  }
};
TextMesh.prototype.clone = function() {
  return new TextMesh(this.text, this.material, this.font, this.height, this.bevel, this.bevelThickness, this.bevelSize, this.size, this.curveSegments);
};
TextMesh.prototype.toJSON = function(a) {
  var c = this.geometry;
  this.geometry = void 0;
  var k = this.font;
  a = THREE.Object3D.prototype.toJSON.call(this, a, function(a, c) {
    k = k.toJSON(a);
  });
  a.object.text = this.text;
  a.object.font = k.uuid;
  a.object.size = this.size;
  a.object.curveSegments = this.curveSegments;
  a.object.height = this.height;
  a.object.bevel = this.bevel;
  a.object.bevelThickness = this.bevelThickness;
  a.object.bevelSize = this.bevelSize;
  a.object.extruded = this.extruded;
  this.geometry = c;
  return a;
};
"use strict";
function TextBitmap(a, c, k, b) {
  if (void 0 === a.font) {
    throw Error("TextBitmap configuration font is required.");
  }
  void 0 === a.width && (a.width = 500);
  void 0 === a.align && (a.align = TextBitmap.CENTER);
  void 0 === a.lineHeight && (a.lineHeight = a.font.common.lineHeight);
  void 0 === a.letterSpacing && (a.letterSpacing = 5);
  void 0 === a.text && (a.text = "");
  this.config = a;
  this.mode = void 0 !== k ? k : TextBitmap.BITMAP;
  a = this.mode === TextBitmap.SDF ? TextBitmap.SDF_SHADER : this.mode === TextBitmap.MSDF ? TextBitmap.MSDF_SHADER : TextBitmap.BITMAP_SHADER;
  b = {map:{type:"t", value:c}, color:{type:"v3", value:new THREE.Color(void 0 !== b ? b : 16777215)}, smoothing:{type:"f", value:0}, threshold:{type:"f", value:.4}};
  b = new THREE.ShaderMaterial({uniforms:THREE.UniformsUtils.clone(b), fragmentShader:a, vertexShader:TextBitmap.VERTEX_SHADER, side:THREE.DoubleSide, transparent:!0, depthTest:!1});
  b.uniforms.map.value = c;
  c = createGeometry(this.config);
  THREE.Mesh.call(this, c, b);
  this.name = "text";
  this.type = "TextBitmap";
  this.updateGeometry();
  Object.defineProperties(this, {font:{get:function() {
    return this.config.font;
  }, set:function(a) {
    this.config.font = a;
    this.updateGeometry();
  }}, text:{get:function() {
    return this.config.text;
  }, set:function(a) {
    this.config.text = a;
    this.updateGeometry();
  }}, lineHeight:{get:function() {
    return this.config.lineHeight;
  }, set:function(a) {
    this.config.lineHeight = a;
    this.updateGeometry();
  }}, letterSpacing:{get:function() {
    return this.config.letterSpacing;
  }, set:function(a) {
    this.config.letterSpacing = a;
    this.updateGeometry();
  }}, align:{get:function() {
    return this.config.align;
  }, set:function(a) {
    this.config.align = a;
    this.updateGeometry();
  }}, width:{get:function() {
    return this.config.width;
  }, set:function(a) {
    this.config.width = a;
    this.updateGeometry();
  }}, color:{get:function() {
    return this.material.uniforms.color.value;
  }, set:function(a) {
    this.material.uniforms.color.value = a;
  }}, threshold:{get:function() {
    return this.material.uniforms.threshold.value;
  }, set:function(a) {
    this.material.uniforms.threshold.value = a;
  }}, smoothing:{get:function() {
    return this.material.uniforms.smoothing.value;
  }, set:function(a) {
    this.material.uniforms.smoothing.value = a;
  }}});
}
TextBitmap.prototype = Object.create(THREE.Mesh.prototype);
TextBitmap.prototype.constructor = TextBitmap;
TextBitmap.BITMAP = 100;
TextBitmap.SDF = 101;
TextBitmap.MSDF = 102;
TextBitmap.LEFT = "left";
TextBitmap.CENTER = "center";
TextBitmap.RIGHT = "right";
TextBitmap.VERTEX_SHADER = "\n#define BILLBOARD 0 \n\nvarying vec2 vUv;\n\nvoid main()\n{\n\tvUv = uv;\n\t\n\t#if BILLBOARD\n\t\tmat4 model = modelViewMatrix; \n\t\tmodel[0][0] = 1.0;\n\t\tmodel[0][1] = 0.0;\n\t\tmodel[0][2] = 0.0;\n\t\t\n\t\tmodel[1][0] = 0.0;\n\t\tmodel[1][1] = 1.0;\n\t\tmodel[1][2] = 0.0;\n\t\t\n\t\tmodel[2][0] = 0.0;\n\t\tmodel[2][1] = 0.0;\n\t\tmodel[2][2] = 1.0;\n\t\t\n\t\tgl_Position = projectionMatrix * model * vec4(position, 1.0);\n\t#else\n\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n\t#endif\n\t\n}";
TextBitmap.BITMAP_SHADER = "\nvarying vec2 vUv;\nuniform sampler2D map;\n\nvoid main()\n{\n\tgl_FragColor = texture2D(map, vUv);\n}";
TextBitmap.SDF_SHADER = "\nvarying vec2 vUv;\nuniform sampler2D map;\nuniform vec3 color;\nuniform float smoothing;\nuniform float threshold;\n\nvoid main()\n{\n\tfloat distance = texture2D(map, vUv).a;\n\tfloat alpha = smoothstep(threshold - smoothing, threshold + smoothing, distance);\n\tgl_FragColor = vec4(color, alpha);\n}";
TextBitmap.MSDF_SHADER = "\n#extension GL_OES_standard_derivatives : enable\n\nvarying vec2 vUv;\nuniform sampler2D map;\nuniform vec3 color;\nuniform float smoothing;\nuniform float threshold;\n\nfloat median(float r, float g, float b)\n{\n\treturn max(min(r, g), min(max(r, g), b));\n}\n\nvoid main()\n{\n\tvec3 sample = texture2D(map, vUv).rgb;\n\tfloat sigDist = median(sample.r, sample.g, sample.b) - 0.5;\n\tfloat alpha = clamp(sigDist / fwidth(sigDist) + 0.5, 0.0, 1.0);\n\tgl_FragColor = vec4(color, 1.0 - alpha);\n}";
TextBitmap.prototype.setText = function(a) {
  this.text = a;
};
TextBitmap.prototype.updateGeometry = function() {
  this.geometry.update(this.config);
};
"use strict";
function Sprite(a) {
  THREE._Sprite.call(this, a);
  this.name = "sprite";
}
THREE._Sprite = THREE.Sprite;
THREE.Sprite = Sprite;
Sprite.prototype = Object.create(THREE._Sprite.prototype);
Sprite.prototype.dispose = function() {
  null !== this.material && void 0 !== this.material.dispose && this.material.dispose();
  THREE.Object3D.prototype.dispose.call(this);
};
"use strict";
function PointLight(a, c, k, b) {
  THREE._PointLight.call(this, a, c, k, b);
  this.name = "point";
  this.castShadow = !0;
  this.shadow.camera.near = .1;
  this.shadow.camera.far = 1E3;
  this.shadow.bias = 0;
}
THREE._PointLight = THREE.PointLight;
THREE.PointLight = PointLight;
PointLight.prototype = Object.create(THREE._PointLight.prototype);
PointLight.prototype.updateShadowMap = function() {
  this.shadow.map.dispose();
  this.shadow.map = null;
  this.shadow.camera.updateProjectionMatrix();
};
"use strict";
function SpotLight(a, c, k, b, f, d) {
  THREE._SpotLight.call(this, a, c, k, b, f, d);
  this.name = "spotlight";
  this.castShadow = !0;
  this.shadow.camera.near = .05;
  this.shadow.camera.far = 5E3;
  this.shadow.mapSize.width = 512;
  this.shadow.mapSize.height = 512;
}
THREE._SpotLight = THREE.SpotLight;
THREE.SpotLight = SpotLight;
SpotLight.prototype = Object.create(THREE._SpotLight.prototype);
SpotLight.prototype.setTarget = function(a) {
  this.target = a;
};
SpotLight.prototype.updateShadowMap = function() {
  this.shadow.map.dispose();
  this.shadow.map = null;
  this.shadow.camera.updateProjectionMatrix();
};
SpotLight.prototype.toJSON = function(a) {
  a = THREE.Light.prototype.toJSON.call(this, a);
  a.object.target = this.target.uuid;
  return a;
};
"use strict";
function AmbientLight(a) {
  THREE._AmbientLight.call(this, a);
  this.name = "ambient";
  this.matrixAutoUpdate = !1;
}
THREE._AmbientLight = THREE.AmbientLight;
THREE.AmbientLight = AmbientLight;
AmbientLight.prototype = Object.create(THREE._AmbientLight.prototype);
"use strict";
function DirectionalLight(a, c) {
  THREE._DirectionalLight.call(this, a, c);
  this.name = "directional";
  this.castShadow = !0;
  this.shadow.camera.near = .5;
  this.shadow.camera.far = 1E4;
}
THREE._DirectionalLight = THREE.DirectionalLight;
THREE.DirectionalLight = DirectionalLight;
DirectionalLight.prototype = Object.create(THREE._DirectionalLight.prototype);
DirectionalLight.prototype.updateShadowMap = function() {
  this.shadow.map.dispose();
  this.shadow.map = null;
  this.shadow.camera.updateProjectionMatrix();
};
"use strict";
function HemisphereLight(a, c, k) {
  THREE._HemisphereLight.call(this, a, c, k);
  this.name = "hemisphere";
}
THREE._HemisphereLight = THREE.HemisphereLight;
THREE.HemisphereLight = HemisphereLight;
HemisphereLight.prototype = Object.create(THREE._HemisphereLight.prototype);
"use strict";
function RectAreaLight(a, c, k, b) {
  THREE._RectAreaLight.call(this, a, c, k, b);
  this.name = "rectarea";
}
THREE._RectAreaLight = THREE.RectAreaLight;
THREE.RectAreaLight = RectAreaLight;
RectAreaLight.prototype = Object.create(THREE._RectAreaLight.prototype);
RectAreaLight.prototype.toJSON = function(a) {
  a = THREE.Light.prototype.toJSON.call(this, a);
  a.object.width = this.width;
  a.object.height = this.height;
  return a;
};
"use strict";
function Viewport(a) {
  this.offset = new THREE.Vector2(0, 0);
  this.size = new THREE.Vector2(1, 1);
  this.mode = void 0 !== a ? a : Viewport.RELATIVE;
  this.anchor = Viewport.TOP_LEFT;
  this.height = this.width = 1;
  this.viewport = new THREE.Vector4(0, 0, 1, 1);
}
Viewport.RELATIVE = 200;
Viewport.ABSOLUTE = 201;
Viewport.TOP_LEFT = 301;
Viewport.TOP_RIGHT = 302;
Viewport.BOTTOM_LEFT = 303;
Viewport.BOTTOM_RIGHT = 304;
Viewport.prototype.update = function(a) {
  var c;
  if (void 0 === a) {
    var k = c = 0;
    var b = this.width;
    a = this.height;
  } else {
    c = a.viewport.x, k = a.viewport.y, b = a.viewport.z, a = a.viewport.w;
  }
  if (this.mode === Viewport.RELATIVE) {
    var f = new THREE.Vector2(this.offset.x * b, this.offset.y * a);
    var d = new THREE.Vector2(this.size.x * b, this.size.y * a);
  } else {
    this.mode === Viewport.ABSOLUTE && (f = this.offset, d = this.size);
  }
  this.anchor === Viewport.BOTTOM_LEFT ? this.viewport.set(f.x + c, f.y + k, d.x, d.y) : this.anchor === Viewport.BOTTOM_RIGHT ? this.viewport.set(b - d.x - f.x + c, f.y + k, d.x, d.y) : this.anchor === Viewport.TOP_LEFT ? this.viewport.set(f.x + c, a - d.y - f.y + k, d.x, d.y) : this.anchor === Viewport.TOP_RIGHT && this.viewport.set(b - d.x - f.x + c, a - d.y - f.y + k, d.x, d.y);
};
Viewport.prototype.getAspectRatio = function() {
  return this.viewport.z / this.viewport.w;
};
Viewport.prototype.isInside = function(a, c) {
  return c.position.x > this.viewport.x && c.position.x < this.viewport.x + this.viewport.z && c.position.y < this.height - this.viewport.y && c.position.y > this.height - this.viewport.y - this.viewport.w;
};
Viewport.prototype.getNormalized = function() {
  var a = new THREE.Vector2;
  return function(c, k) {
    a.set((k.position.x - this.viewport.z - this.viewport.x) / this.viewport.z * 2 + 1, -(k.position.y - (this.height - (this.viewport.y + this.viewport.w))) / this.viewport.w * 2 + 1);
    return a;
  };
}();
Viewport.prototype.enable = function(a) {
  a.setViewport(this.viewport);
  a.setScissor(this.viewport);
};
Viewport.prototype.toJSON = function() {
  return {offset:this.offset.toArray(), size:this.size.toArray(), mode:this.mode, anchor:this.anchor};
};
Viewport.prototype.fromJSON = function(a) {
  this.offset.fromArray(a.offset);
  this.size.fromArray(a.size);
  this.mode = a.mode;
  this.anchor = a.anchor;
};
"use strict";
function PerspectiveCamera(a, c, k, b) {
  this.viewport = new Viewport;
  THREE.PerspectiveCamera.call(this, a, c, k, b);
  this.name = "camera";
  this.clearStencil = this.clearDepth = this.clearColor = !0;
  this.order = 0;
  this.composer = new EffectComposer;
  a = new RenderPass;
  a.renderToScreen = !0;
  this.composer.addPass(a);
}
PerspectiveCamera.prototype = Object.create(THREE.PerspectiveCamera.prototype);
PerspectiveCamera.prototype.resize = function(a, c, k) {
  this.viewport.width = a;
  this.viewport.height = c;
  this.viewport.update(k);
  this.aspect = this.viewport.getAspectRatio();
  this.updateProjectionMatrix();
  this.composer.setSize(this.viewport.viewport.z, this.viewport.viewport.w);
};
PerspectiveCamera.prototype.setupRenderer = function(a) {
  this.viewport.enable(a);
  a.clear(this.clearColor, this.clearDepth, this.clearStencil);
};
PerspectiveCamera.prototype.render = function(a, c) {
  this.composer.render(a, c, this, .016);
};
PerspectiveCamera.prototype.destroy = function() {
  var a = this.getScene();
  null !== a && a.removeCamera(this);
  THREE.Object3D.prototype.destroy.call(this);
};
PerspectiveCamera.prototype.updateProjectionMatrix = function() {
  var a = this.near * Math.tan(.5 * THREE.Math.DEG2RAD * this.fov) / this.zoom, c = 2 * a, k = this.aspect * c, b = -.5 * k;
  0 !== this.filmOffset && (b += this.near * this.filmOffset / this.getFilmWidth());
  this.projectionMatrix.makePerspective(b, b + k, a, a - c, this.near, this.far);
};
PerspectiveCamera.prototype.toJSON = function(a) {
  a = THREE.PerspectiveCamera.prototype.toJSON.call(this, a);
  a.object.clearColor = this.clearColor;
  a.object.clearDepth = this.clearDepth;
  a.object.clearStencil = this.clearStencil;
  a.object.viewport = this.viewport.toJSON();
  a.object.order = this.order;
  a.object.composer = this.composer.toJSON();
  return a;
};
"use strict";
function OrthographicCamera(a, c, k, b, f) {
  THREE.OrthographicCamera.call(this, -1, 1, 1, -1, b, f);
  this.name = "camera";
  this.size = void 0 != a ? a : 10;
  this.aspect = void 0 != c ? c : 1;
  this.mode = void 0 !== k ? k : OrthographicCamera.RESIZE_HORIZONTAL;
  this.viewport = new Viewport;
  this.clearStencil = this.clearDepth = this.clearColor = !0;
  this.order = 0;
  this.updateProjectionMatrix();
  this.composer = new EffectComposer;
  a = new RenderPass;
  a.renderToScreen = !0;
  this.composer.addPass(a);
}
OrthographicCamera.prototype = Object.create(THREE.OrthographicCamera.prototype);
OrthographicCamera.RESIZE_HORIZONTAL = 0;
OrthographicCamera.RESIZE_VERTICAL = 1;
OrthographicCamera.prototype.resize = function(a, c, k) {
  this.viewport.width = a;
  this.viewport.height = c;
  this.viewport.update(k);
  this.aspect = this.viewport.getAspectRatio();
  this.updateProjectionMatrix();
  this.composer.setSize(this.viewport.viewport.z, this.viewport.viewport.w);
};
OrthographicCamera.prototype.setupRenderer = function(a) {
  this.viewport.enable(a);
  a.clear(this.clearColor, this.clearDepth, this.clearStencil);
};
OrthographicCamera.prototype.render = function(a, c) {
  this.composer.render(a, c, this, .016);
};
OrthographicCamera.prototype.destroy = function() {
  var a = this.getScene();
  null !== a && a.removeCamera(this);
  THREE.Object3D.prototype.destroy.call(this);
};
OrthographicCamera.prototype.updateProjectionMatrix = function() {
  this.mode === OrthographicCamera.RESIZE_HORIZONTAL ? (this.top = this.size / 2, this.bottom = -this.top, this.right = this.top * this.aspect, this.left = -this.right) : this.mode === OrthographicCamera.RESIZE_VERTICAL && (this.right = this.size / 2, this.left = -this.right, this.top = this.right / this.aspect, this.bottom = -this.top);
  THREE.OrthographicCamera.prototype.updateProjectionMatrix.call(this);
};
OrthographicCamera.prototype.toJSON = function(a) {
  a = THREE.OrthographicCamera.prototype.toJSON.call(this, a);
  a.object.size = this.size;
  a.object.aspect = this.aspect;
  a.object.mode = this.mode;
  a.object.clearColor = this.clearColor;
  a.object.clearDepth = this.clearDepth;
  a.object.clearStencil = this.clearStencil;
  a.object.viewport = this.viewport.toJSON();
  a.object.order = this.order;
  a.object.composer = this.composer.toJSON();
  return a;
};
"use strict";
function AudioEmitter(a) {
  THREE.Object3D.call(this);
  this.name = "audio";
  this.type = "Audio";
  this.listener = new THREE.AudioListener;
  this.context = this.listener.context;
  this.matrixAutoUpdate = !1;
  this.gain = this.context.createGain();
  this.gain.connect(this.listener.getInput());
  this.buffer = null;
  this.filters = [];
  this.sourceType = "empty";
  this.audio = void 0 !== a ? a : null;
  this.autoplay = !0;
  this.playbackRate = this.volume = 1;
  this.startTime = 0;
  this.loop = !0;
  this.detune = 0;
  this.isPlaying = !1;
  this.hasPlaybackControl = !0;
}
THREE._Audio = THREE.Audio;
THREE.Audio = AudioEmitter;
AudioEmitter.prototype = Object.create(THREE._Audio.prototype);
AudioEmitter.prototype.initialize = function() {
  if (null !== this.audio) {
    var a = this;
    this.audio.getAudioBuffer(this.context, function(c) {
      a.setBuffer(c);
    });
  } else {
    console.warn("nunuStudio: AudioEmitter audio is null.");
  }
  this.setVolume(this.volume);
  this.setPlaybackRate(this.playbackRate);
  THREE.Object3D.prototype.initialize.call(this);
};
AudioEmitter.prototype.setBuffer = function(a) {
  this.buffer = a;
  this.sourceType = "buffer";
  !0 === this.autoplay && this.play();
  return this;
};
AudioEmitter.prototype.play = function() {
  if (null === this.buffer) {
    console.warn("nunuStudio: Audio buffer not ready, audio will not play.");
  } else {
    this.isPlaying && console.warn("nunuStudio: Audio is already playing, its only possible to control the last playing instance.");
    var a = this.context.createBufferSource();
    a.buffer = this.buffer;
    a.detune.value = this.detune;
    a.loop = this.loop;
    a.onended = this.onEnded.bind(this);
    a.playbackRate.setValueAtTime(this.playbackRate, this.startTime);
    a.start(0, this.startTime);
    this.isPlaying = !0;
    this.source = a;
    return this.connect();
  }
};
AudioEmitter.prototype.pause = function() {
  this.source.stop();
  this.startTime = this.context.currentTime;
  this.isPlaying = !1;
  return this;
};
AudioEmitter.prototype.stop = function() {
  this.source.stop();
  this.startTime = 0;
  this.isPlaying = !1;
  return this;
};
AudioEmitter.prototype.setAudio = function(a) {
  this.audio = a;
  null !== this.buffer && (this.isPlaying && this.stop(), this.disconnect());
  var c = this;
  this.audio.getAudioBuffer(this.context, function(a) {
    c.setBuffer(a);
  });
};
AudioEmitter.prototype.getVolume = function() {
  return this.gain.gain.value;
};
AudioEmitter.prototype.setVolume = function(a) {
  this.volume = a;
  this.gain.gain.value = a;
  return this;
};
AudioEmitter.prototype.setLoop = function(a) {
  this.loop = a;
  this.isPlaying && (this.source.loop = this.loop);
  return this;
};
AudioEmitter.prototype.setDetune = function(a) {
  this.detune = a;
  !0 === this.isPlaying && this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, .01);
  return this;
};
AudioEmitter.prototype.getLoop = function() {
  return this.loop;
};
AudioEmitter.prototype.setPlaybackRate = function(a) {
  this.playbackRate = a;
  this.isPlaying && this.source.playbackRate.setValueAtTime(this.playbackRate, this.context.currentTime);
  return this;
};
AudioEmitter.prototype.getPlaybackRate = function() {
  return this.playbackRate;
};
AudioEmitter.prototype.getFilters = function() {
  return this.filters;
};
AudioEmitter.prototype.setFilters = function(a) {
  a || (a = []);
  this.isPlaying ? (this.disconnect(), this.filters = a, this.connect()) : this.filters = a;
  return this;
};
AudioEmitter.prototype.getFilter = function(a) {
  return this.getFilters()[void 0 !== a ? a : 0];
};
AudioEmitter.prototype.setFilter = function(a) {
  return this.setFilters(a ? [a] : []);
};
AudioEmitter.prototype.setNodeSource = function(a) {
  this.hasPlaybackControl = !1;
  this.sourceType = "audioNode";
  this.source = a;
  this.connect();
  return this;
};
AudioEmitter.prototype.getOutput = function() {
  return this.gain;
};
AudioEmitter.prototype.dispose = function() {
  this.isPlaying && (this.stop(), this.disconnect());
  THREE.Object3D.prototype.dispose.call(this);
};
AudioEmitter.prototype.toJSON = function(a) {
  var c = this.audio;
  a = THREE.Object3D.prototype.toJSON.call(this, a, function(a, b) {
    c = c.toJSON(a);
  });
  a.object.audio = c.uuid;
  a.object.volume = this.volume;
  a.object.autoplay = this.autoplay;
  a.object.startTime = this.startTime;
  a.object.playbackRate = this.playbackRate;
  a.object.loop = this.loop;
  return a;
};
"use strict";
function PositionalAudio(a) {
  AudioEmitter.call(this, a);
  this.type = "PositionalAudio";
  this.matrixAutoUpdate = !0;
  this.distanceModel = "inverse";
  this.panningModel = "HRTF";
  this.panner = this.context.createPanner();
  this.panner.connect(this.gain);
  this.panner.panningModel = this.panningModel;
  this.panner.distanceModel = this.distanceModel;
  this.panner.refDistance = 1;
  this.panner.maxDistance = 1E4;
  this.panner.rolloffFactor = 1;
  this.panner.coneInnerAngle = 360;
  this.panner.coneOuterAngle = 0;
  this.panner.coneOuterGain = 0;
  this.scene = null;
  this.tempPosition = new THREE.Vector3;
  this.tempPositionCamera = new THREE.Vector3;
  this.tempQuaternionCamera = new THREE.Quaternion;
}
THREE._PositionalAudio = THREE.PositionalAudio;
THREE.PositionalAudio = PositionalAudio;
PositionalAudio.prototype = Object.create(AudioEmitter.prototype);
PositionalAudio.prototype.initialize = function() {
  AudioEmitter.prototype.initialize.call(this);
  for (var a = this.parent; null !== a;) {
    if (a instanceof Scene) {
      this.scene = a;
      break;
    }
    a = a.parent;
  }
};
PositionalAudio.prototype.update = function(a) {
  if (0 < this.scene.cameras.length) {
    var c = this.scene.cameras[0];
    this.getWorldPosition(this.tempPosition);
    c.getWorldPosition(this.tempPositionCamera);
    c.getWorldQuaternion(this.tempQuaternionCamera);
    this.tempPosition.sub(this.tempPositionCamera);
    this.tempPosition.z = -this.tempPosition.z;
    this.tempPosition.applyQuaternion(this.tempQuaternionCamera);
    this.panner.setPosition(this.tempPosition.x, this.tempPosition.z, this.tempPosition.y);
  } else {
    this.panner.setPosition(0, 0, 0), this.panner.setOrientation(0, 0, 0);
  }
  THREE.Object3D.prototype.update.call(this, a);
};
PositionalAudio.prototype.getOutput = function() {
  return this.panner;
};
PositionalAudio.prototype.getRefDistance = function() {
  return this.panner.refDistance;
};
PositionalAudio.prototype.setRefDistance = function(a) {
  this.panner.refDistance = a;
};
PositionalAudio.prototype.getRolloffFactor = function() {
  return this.panner.rolloffFactor;
};
PositionalAudio.prototype.setRolloffFactor = function(a) {
  this.panner.rolloffFactor = a;
};
PositionalAudio.prototype.getDistanceModel = function() {
  return this.panner.distanceModel;
};
PositionalAudio.prototype.setDistanceModel = function(a) {
  this.panner.distanceModel = a;
};
PositionalAudio.prototype.getMaxDistance = function() {
  return this.panner.maxDistance;
};
PositionalAudio.prototype.setMaxDistance = function(a) {
  this.panner.maxDistance = a;
};
PositionalAudio.prototype.toJSON = function(a) {
  return AudioEmitter.prototype.toJSON.call(this, a);
};
function Script(a, c) {
  THREE.Group.call(this);
  this.type = "Script";
  this.name = "script";
  this.code = void 0 !== a ? a : Script.DEFAULT;
  this.mode = void 0 !== c ? c : Script.APPEND;
  this.script = {};
  this.scene = this.program = null;
}
Script.prototype = Object.create(THREE.Group.prototype);
Script.DEFAULT = "function initialize()\n{\n\t//TODO <INITIALIZATION CODE>\n}\n\nfunction update(delta)\n{\n\t//TODO <UPDATE CODE>\n}\n";
Script.METHODS = "initialize update dispose onMouseOver onResize onAppData".split(" ");
Script.APPEND = 100;
Script.EVALUATE = 101;
Script.INCLUDE = 102;
Script.getIncludes = function(a) {
  var c = [], k = a.search(/include\(".+?"\);/gi);
  -1 !== k && (a = a.substring(k), k = a.indexOf('");'), a = a.substring(9, k), c.push(a));
  return c;
};
Script.removeIncludes = function(a) {
  return a.replace(/include\(".+?"\);/gi, "");
};
Script.prototype.initialize = function() {
  for (var a = this; null !== a.parent;) {
    a = a.parent, a instanceof Scene ? this.scene = a : a instanceof Program && (this.program = a);
  }
  THREE.Object3D.prototype.initialize.call(this);
  var c = this;
  this.compileCode(this.code, function() {
    void 0 !== c.script.initialize && c.script.initialize.call(c);
  });
};
Script.prototype.update = function(a) {
  if (void 0 !== this.script.onMouseOver) {
    var c = this.scene.raycaster.intersectObjects(this.children, !0);
    0 < c.length && this.script.onMouseOver.call(this, c);
  }
  void 0 !== this.script.update && this.script.update.call(this, a);
  THREE.Object3D.prototype.update.call(this, a);
};
Script.prototype.dispose = function() {
  void 0 !== this.script.dispose && this.script.dispose.call(this);
  THREE.Object3D.prototype.dispose.call(this);
};
Script.prototype.resize = function(a, c) {
  void 0 !== this.script.onResize && this.script.onResize.call(this, a, c);
};
Script.prototype.appData = function(a) {
  void 0 !== this.script.onAppData && this.script.onAppData.call(this, a);
};
Script.prototype.compileCode = function(a, c) {
  void 0 !== a && (this.code = a);
  try {
    a = this.code;
    for (var k = 0; k < Script.METHODS.length; k++) {
      var b = Script.METHODS[k];
      a += "\nif(this." + b + " == undefined && typeof " + b + " !== 'undefined'){this." + b + " = " + b + ";}";
    }
    if (this.mode === Script.APPEND) {
      var f = Script.getIncludes(a);
      a = Script.removeIncludes(a);
      for (k = 0; k < f.length; k++) {
        a = this.program.getResourceByName(f[k]).data + "\n" + a;
      }
      a += '\nfunction include(name)\t\t\t{\t\t\t\tconsole.warn("nunuStudio: Script running in append mode " + name);\t\t\t}';
    } else {
      if (this.mode === Script.EVALUATE) {
        a += '\nfunction include(name)\t\t\t{\t\t\t\tvar text = program.getResourceByName(name);\t\t\t\tif(text !== null)\t\t\t\t{\t\t\t\t\tnew Function(text.data).call(this);\t\t\t\t}\t\t\t\telse\t\t\t\t{\t\t\t\t\tconsole.warn("nunuStudio: Javascript file " + name + " not found in resources");\t\t\t\t}\t\t\t}';
      } else {
        if (this.mode === Script.INCLUDE) {
          f = Script.getIncludes(a);
          a = Script.removeIncludes(a);
          var d = 0;
          for (k = 0; k < f.length; k++) {
            var h = new Blob([this.program.getResourceByName(f[k]).data], {type:"text/plain"}), n = URL.createObjectURL(h), q = document.createElement("script");
            q.type = "text/javascript";
            q.async = !1;
            q.src = n;
            q.onload = function() {
              d++;
              d === f.length && c();
            };
            q.onerror = q.onload;
            document.body.appendChild(q);
          }
        }
      }
    }
    var m = new Function("Keyboard, Mouse, self, program, scene", a);
    try {
      this.script = new m(this.program.keyboard, this.program.mouse, this, this.program, this.scene);
    } catch (t) {
      throw console.warn("nunuStudio: Error initializing script code", t), "Error initializing script code";
    }
    this.mode !== Script.INCLUDE && c();
  } catch (t) {
    throw console.warn("nunuStudio: Error compiling script code", t), "Error compiling script code";
  }
};
Script.prototype.toJSON = function(a) {
  a = THREE.Object3D.prototype.toJSON.call(this, a);
  a.object.code = this.code;
  a.object.mode = this.mode;
  return a;
};
"use strict";
function PhysicsObject() {
  THREE.Group.call(this);
  this.name = "physics";
  this.type = "Physics";
  this.body = new CANNON.Body;
  this.body.type = CANNON.Body.DYNAMIC;
  this.body.mass = 1;
  this.world = null;
}
PhysicsObject.prototype = Object.create(THREE.Group.prototype);
PhysicsObject.prototype.initialize = function() {
  this.body.position.copy(this.position);
  this.body.quaternion.copy(this.quaternion);
  for (var a = this; null !== a.parent;) {
    a = a.parent, a instanceof Scene && (this.world = a.world, this.world.addBody(this.body));
  }
  THREE.Object3D.prototype.initialize.call(this);
};
PhysicsObject.prototype.update = function(a) {
  this.position.copy(this.body.position);
  this.body.fixedRotation || this.quaternion.copy(this.body.quaternion);
  THREE.Object3D.prototype.update.call(this, a);
};
PhysicsObject.prototype.addShape = function(a) {
  a instanceof CANNON.Shape && this.body.addShape(a);
};
PhysicsObject.prototype.toJSON = function(a) {
  a = THREE.Object3D.prototype.toJSON.call(this, a);
  a.object.body = {};
  a.object.body.type = this.body.type;
  a.object.body.mass = this.body.mass;
  a.object.body.linearDamping = this.body.linearDamping;
  a.object.body.angularDamping = this.body.angularDamping;
  a.object.body.allowSleep = this.body.allowSleep;
  a.object.body.sleepSpeedLimit = this.body.sleepSpeedLimit;
  a.object.body.sleepTimeLimit = this.body.sleepTimeLimit;
  a.object.body.collisionFilterGroup = this.body.collisionFilterGroup;
  a.object.body.collisionFilterMask = this.body.collisionFilterMask;
  a.object.body.fixedRotation = this.body.fixedRotation;
  a.object.body.shapes = [];
  for (var c = this.body.shapes, k = 0; k < c.length; k++) {
    var b = c[k], f = {};
    f.type = b.type;
    b.type === CANNON.Shape.types.SPHERE ? f.radius = b.radius : b.type === CANNON.Shape.types.BOX ? (f.halfExtents = {}, f.halfExtents.x = b.halfExtents.x, f.halfExtents.y = b.halfExtents.y, f.halfExtents.z = b.halfExtents.z) : b.type === CANNON.Shape.types.CONVEXPOLYHEDRON ? (f.vertices = b.vertices, f.faces = b.faces) : b.type === CANNON.Shape.types.TRIMESH && (f.vertices = b.vertices, f.normals = b.normals, f.edges = b.edges, f.indices = b.indices);
    a.object.body.shapes[k] = f;
  }
  return a;
};
"use strict";
function SpineAnimation(a, c, k, b) {
  void 0 === b && (b = []);
  var f = new spine.TextureAtlas(c, function(a) {
    for (var d = 0; d < b.length; d++) {
      if (b[d].name === a) {
        var f = new SpineTexture(b[d].texture);
        break;
      }
    }
    d === b.length && (f = new SpineTexture(new Texture(new Image(k + "/" + a))), b.push({name:a, texture:f.texture}));
    a = f.texture.image;
    d = f.texture.img;
    if (0 < d.width && 0 < d.height) {
      a.width = d.width, a.height = d.height;
    } else {
      if (0 !== a.naturalWidth && 0 !== a.naturalHeight) {
        a.width = a.naturalWidth, a.height = a.naturalHeight, d.width = a.width, d.height = a.height;
      } else {
        d = c.search("size: ");
        var q = c.search("\nformat");
        d = c.substring(d + 6, q);
        d = d.split(",");
        a.width = parseInt(d[0]);
        a.height = parseInt(d[1]);
      }
    }
    return f;
  });
  f = new spine.AtlasAttachmentLoader(f);
  f = (new spine.SkeletonJson(f)).readSkeletonData(a);
  spine.threejs.SkeletonMesh.call(this, f);
  this.name = "spine";
  this.type = "SpineAnimation";
  this.frustumCulled = !1;
  this.castShadow = this.receiveShadow = !0;
  this.scale.set(.01, .01, .01);
  this.json = a;
  this.atlas = c;
  this.textures = b;
  this.skin = 0 < this.getSkins().length ? this.getSkins()[0].name : null;
  this.animation = 0 < this.getAnimations().length ? this.getAnimations()[0].name : null;
  this.track = 0;
  this.loop = !0;
  this.clock = new THREE.Clock;
  this.play();
}
SpineAnimation.prototype = Object.create(spine.threejs.SkeletonMesh.prototype);
SpineAnimation.prototype.update = THREE.Object3D.prototype.update;
SpineAnimation.prototype.onBeforeRender = function() {
  this.state.update(this.clock.getDelta());
  this.state.apply(this.skeleton);
  this.skeleton.updateWorldTransform();
  this.updateGeometry();
};
SpineAnimation.prototype.play = function() {
  null !== this.animation && this.setAnimation(this.track, this.animation, this.loop);
  null !== this.skin && this.setSkin(this.skin);
};
SpineAnimation.prototype.getAnimations = function() {
  return this.state.data.skeletonData.animations;
};
SpineAnimation.prototype.setAnimation = function(a, c, k) {
  try {
    void 0 !== a && (this.track = a), void 0 !== c && (this.animation = c), void 0 !== k && (this.loop = k), this.state.setAnimation(this.track, this.animation, this.loop);
  } catch (b) {
    this.animation = null, console.warn("nunuStudio: Error setting spine animation " + name + " on track " + a);
  }
};
SpineAnimation.prototype.getSkins = function() {
  return this.state.data.skeletonData.skins;
};
SpineAnimation.prototype.setSkin = function(a) {
  try {
    this.skeleton.setSkinByName(a), this.skin = a;
  } catch (c) {
    this.skin = null, console.warn("nunuStudio: Error setting spine skin " + a);
  }
};
SpineAnimation.prototype.toJSON = function(a) {
  var c = this.geometry, k = this.material;
  this.material = this.geometry = void 0;
  var b = [], f = this;
  a = THREE.Object3D.prototype.toJSON.call(this, a, function(a, c) {
    for (c = 0; c < f.textures.length; c++) {
      var d = f.textures[c].texture.toJSON(a);
      b.push({name:f.textures[c].name, texture:d.uuid});
    }
  });
  a.object.json = this.json;
  a.object.atlas = this.atlas;
  a.object.textures = b;
  null !== this.animation && (a.object.animation = this.animation, a.object.track = this.track, a.object.loop = this.loop);
  null !== this.skin && (a.object.skin = this.skin);
  this.geometry = c;
  this.material = k;
  return a;
};
"use strict";
function SpineTexture(a) {
  spine.Texture.call(this, a.image);
  this.texture = a;
  this.texture.flipY = !1;
}
SpineTexture.prototype = Object.create(spine.Texture.prototype);
SpineTexture.prototype.setFilters = function(a, c) {
  this.texture.minFilter = SpineTexture.getTextureFilter(a);
  this.texture.magFilter = SpineTexture.getTextureFilter(c);
};
SpineTexture.prototype.setWraps = function(a, c) {
  this.texture.wrapS = SpineTexture.getTextureWrap(a);
  this.texture.wrapT = SpineTexture.getTextureWrap(c);
};
SpineTexture.prototype.dispose = function() {
  this.texture.dispose();
};
SpineTexture.getTextureFilter = function(a) {
  return a === spine.TextureFilter.Linear ? THREE.LinearFilter : a === spine.TextureFilter.MipMap || a === spine.TextureFilter.MipMapLinearLinear ? THREE.LinearMipMapLinearFilter : a === spine.TextureFilter.MipMapLinearNearest ? THREE.LinearMipMapNearestFilter : a === spine.TextureFilter.MipMapNearestLinear ? THREE.NearestMipMapLinearFilter : a === spine.TextureFilter.MipMapNearestNearest ? THREE.NearestMipMapNearestFilter : a === spine.TextureFilter.Nearest ? THREE.NearestFilter : null;
};
SpineTexture.getTextureWrap = function(a) {
  if (a === spine.TextureWrap.ClampToEdge) {
    return THREE.ClampToEdgeWrapping;
  }
  if (a === spine.TextureWrap.MirroredRepeat) {
    return THREE.MirroredRepeatWrapping;
  }
  if (a === spine.TextureWrap.Repeat) {
    return THREE.RepeatWrapping;
  }
};
"use strict";
function ParticleEmitter(a, c) {
  this.group = new SPE.Group(void 0 !== a ? a : ParticleEmitter.defaultGroup);
  this.emitter = new SPE.Emitter(void 0 !== c ? c : ParticleEmitter.defaultEmitter);
  this.group.addEmitter(this.emitter);
  THREE.Points.call(this, this.group.geometry, this.group.material);
  this.type = "ParticleEmiter";
  this.name = "particle";
  this.dynamicEmitter = this.frustumCulled = !1;
  this.clock = new THREE.Clock;
  this.temp = new THREE.Vector4;
  var k = this;
  Object.defineProperties(this, {texture:{get:function() {
    return k.group.texture;
  }, set:function(a) {
    k.group.texture = a;
  }}});
}
ParticleEmitter.prototype = Object.create(THREE.Points.prototype);
ParticleEmitter.defaultEmitter = {particleCount:200, velocity:{value:new THREE.Vector3(0, 0, 0), spread:new THREE.Vector3(3, 3, 3)}, acceleration:{value:new THREE.Vector3(0, 0, 0), spread:new THREE.Vector3(0, 0, 0)}};
ParticleEmitter.defaultGroup = {texture:{value:null}, maxParticleCount:200, blending:THREE.AdditiveBlending, fog:!1, depthWrite:!1, depthTest:!0, transparent:!0, hasPerspective:!0};
ParticleEmitter.prototype.reload = function() {
  this.dispose();
  var a = this.children;
  this.children = [];
  var c = (new ObjectLoader).parse(this.toJSON());
  this.children = a;
  this.group = c.group;
  this.emitter = c.emitter;
  this.geometry = this.group.geometry;
  this.material = this.group.material;
};
ParticleEmitter.prototype.updateMatrix = function() {
  this.dynamicEmitter ? (this.matrix.makeRotationFromQuaternion(this.quaternion), this.matrix.scale(this.scale)) : this.matrix.compose(this.position, this.quaternion, this.scale);
  this.matrixWorldNeedsUpdate = !0;
};
ParticleEmitter.prototype.onBeforeRender = function(a, c, k, b) {
  this.group.uniforms.scale.value = a.getCurrentViewport(this.temp).w;
  this.group.tick(this.clock.getDelta());
  !0 === this.dynamicEmitter && (this.emitter.position.value = this.position);
};
ParticleEmitter.prototype.dispose = function() {
  this.group.dispose();
  THREE.Object3D.prototype.dispose.call(this);
};
ParticleEmitter.prototype.toJSON = function(a) {
  var c = this.material, k = this.geometry;
  this.geometry = this.material = void 0;
  var b = this.group.texture, f = THREE.Object3D.prototype.toJSON.call(this, a, function(a, c) {
    b = b.toJSON(a);
  });
  this.material = c;
  this.geometry = k;
  f.object.group = this.group.toJSON(a);
  f.object.emitter = this.emitter.toJSON(a);
  return f;
};
SPE.Group.prototype.toJSON = function(a) {
  a = {texture:{}};
  a.texture.value = this.texture.uuid;
  a.texture.frames = this.textureFrames.toArray();
  a.texture.frameCount = this.textureFrameCount;
  a.texture.loop = this.textureLoop;
  a.fixedTimeStep = this.fixedTimeStep;
  a.hasPerspective = this.hasPerspective;
  a.colorize = this.colorize;
  a.maxParticleCount = this.maxParticleCount;
  a.transparent = this.transparent;
  a.blending = this.blending;
  a.alphaTest = this.alphaTest;
  a.depthWrite = this.depthWrite;
  a.depthTest = this.depthTest;
  a.fog = this.fog;
  a.scale = this.scale;
  return a;
};
SPE.Emitter.prototype.toJSON = function(a) {
  a = {};
  a.uuid = this.uuid;
  a.type = this.type;
  a.direction = this.direction;
  a.particleCount = this.particleCount;
  a.duration = this.duration;
  a.isStatic = this.isStatic;
  a.maxAge = {};
  a.maxAge.value = this.maxAge.value;
  a.maxAge.spread = this.maxAge.spread;
  a.position = {};
  a.position.value = this.position.value.toArray();
  a.position.spread = this.position.spread.toArray();
  a.position.radius = this.position.radius;
  a.position.radiusScale = this.position.radiusScale.toArray();
  a.velocity = {};
  a.velocity.value = this.velocity.value.toArray();
  a.velocity.spread = this.velocity.spread.toArray();
  a.acceleration = {};
  a.acceleration.value = this.acceleration.value.toArray();
  a.acceleration.spread = this.acceleration.spread.toArray();
  a.wiggle = {};
  a.wiggle.value = this.wiggle.value;
  a.wiggle.spread = this.wiggle.spread;
  a.opacity = {};
  a.opacity.value = this.opacity.value.slice(0);
  a.opacity.spread = this.opacity.spread;
  a.size = {};
  a.size.value = this.size.value.slice(0);
  a.size.spread = this.size.spread;
  a.angle = {};
  a.angle.value = this.angle.value.slice(0);
  a.angle.spread = this.angle.spread;
  a.color = {};
  a.color.value = [];
  for (var c = 0; c < this.color.value.length; c++) {
    a.color.value.push(this.color.value[c].getHex());
  }
  a.color.spread = [];
  for (c = 0; c < this.color.spread.length; c++) {
    a.color.spread.push(this.color.spread[c].toArray());
  }
  return a;
};
"use strict";
function Sky(a, c, k, b) {
  THREE.Group.call(this);
  this.name = "sky";
  this.type = "Sky";
  this.colorTop = [new THREE.Color(7844859), new THREE.Color(30463), new THREE.Color(220086), new THREE.Color(9273)];
  this.colorBottom = [new THREE.Color(15461606), new THREE.Color(16777215), new THREE.Color(16705495), new THREE.Color(26023)];
  this.sunColor = 16777130;
  this.intensity = .3;
  this.moonColor = 5592507;
  this.hemisphere = new THREE.HemisphereLight(3310847, 16764031, .5);
  this.hemisphere.locked = !0;
  this.hemisphere.matrixAutoUpdate = !1;
  this.add(this.hemisphere);
  this.sun = new DirectionalLight(this.sunColor, this.intensity);
  this.sun.castShadow = !0;
  this.sun.locked = !0;
  this.add(this.sun);
  var f = {topColor:{type:"c", value:new THREE.Color(0, .46, 1)}, bottomColor:{type:"c", value:new THREE.Color(1, 1, 1)}, offset:{type:"f", value:20}, exponent:{type:"f", value:.2}};
  f.topColor.value.copy(this.hemisphere.color);
  var d = new THREE.SphereBufferGeometry(1500, 16, 16);
  f = new THREE.ShaderMaterial({vertexShader:Sky.VERTEX, fragmentShader:Sky.FRAGMENT, uniforms:f, side:THREE.BackSide});
  this.sky = new THREE.Mesh(d, f);
  this.sky.locked = !0;
  this.sky.matrixAutoUpdate = !1;
  this.add(this.sky);
  this.sky.raycast = function() {
    return null;
  };
  this.autoUpdate = void 0 !== a ? a : !0;
  this.sunDistance = void 0 !== k ? k : 100;
  this.dayTime = void 0 !== c ? c : 120;
  this.time = void 0 !== b ? b : 75;
  this.updateSky();
}
Sky.prototype = Object.create(THREE.Group.prototype);
Sky.VERTEX = "varying vec3 vWorldPosition;\nvoid main()\n{\n\tvec4 worldPosition = modelMatrix * vec4(position, 1.0);\n\tvWorldPosition = worldPosition.xyz;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}";
Sky.FRAGMENT = "uniform vec3 topColor;\nuniform vec3 bottomColor;\nuniform float offset;\nuniform float exponent;\nvarying vec3 vWorldPosition;\nvoid main()\n{\n\tfloat h = normalize(vWorldPosition + offset).y;\n\tgl_FragColor = vec4(mix(bottomColor, topColor, max(pow(max(h , 0.0), exponent), 0.0)), 1.0);\n}";
Sky.prototype.initialize = function() {
  this.updateSky();
  THREE.Object3D.prototype.initialize.call(this);
};
Sky.prototype.update = function(a) {
  this.autoUpdate && (this.time += a, this.time > this.dayTime && (this.time -= this.dayTime), this.updateSky());
  THREE.Object3D.prototype.update.call(this, a);
};
Sky.prototype.updateSky = function() {
  var a = this.time / this.dayTime;
  if (.25 > a) {
    this.sky.material.uniforms.topColor.value.setRGB(this.colorTop[3].r, this.colorTop[3].g, this.colorTop[3].b), this.sky.material.uniforms.bottomColor.value.setRGB(this.colorBottom[3].r, this.colorBottom[3].g, this.colorBottom[3].b);
  } else {
    if (.292 > a) {
      var c = 23.81 * (a - .25), k = 1 - c;
      this.sky.material.uniforms.topColor.value.setRGB(k * this.colorTop[3].r + c * this.colorTop[0].r, k * this.colorTop[3].g + c * this.colorTop[0].g, k * this.colorTop[3].b + c * this.colorTop[0].b);
      this.sky.material.uniforms.bottomColor.value.setRGB(k * this.colorBottom[3].r + c * this.colorBottom[0].r, k * this.colorBottom[3].g + c * this.colorBottom[0].g, k * this.colorBottom[3].b + c * this.colorBottom[0].b);
    } else {
      .4167 > a ? (this.sky.material.uniforms.topColor.value.setRGB(this.colorTop[0].r, this.colorTop[0].g, this.colorTop[0].b), this.sky.material.uniforms.bottomColor.value.setRGB(this.colorBottom[0].r, this.colorBottom[0].g, this.colorBottom[0].b)) : .5 > a ? (c = 12 * (a - .4167), k = 1 - c, this.sky.material.uniforms.topColor.value.setRGB(k * this.colorTop[0].r + c * this.colorTop[1].r, k * this.colorTop[0].g + c * this.colorTop[1].g, k * this.colorTop[0].b + c * this.colorTop[1].b), this.sky.material.uniforms.bottomColor.value.setRGB(k * 
      this.colorBottom[0].r + c * this.colorBottom[1].r, k * this.colorBottom[0].g + c * this.colorBottom[1].g, k * this.colorBottom[0].b + c * this.colorBottom[1].b)) : .708 > a ? (this.sky.material.uniforms.topColor.value.setRGB(this.colorTop[1].r, this.colorTop[1].g, this.colorTop[1].b), this.sky.material.uniforms.bottomColor.value.setRGB(this.colorBottom[1].r, this.colorBottom[1].g, this.colorBottom[1].b)) : .75 > a ? (c = 23.81 * (a - .708), k = 1 - c, this.sky.material.uniforms.topColor.value.setRGB(k * 
      this.colorTop[1].r + c * this.colorTop[2].r, k * this.colorTop[1].g + c * this.colorTop[2].g, k * this.colorTop[1].b + c * this.colorTop[2].b), this.sky.material.uniforms.bottomColor.value.setRGB(k * this.colorBottom[1].r + c * this.colorBottom[2].r, k * this.colorBottom[1].g + c * this.colorBottom[2].g, k * this.colorBottom[1].b + c * this.colorBottom[2].b)) : .8333 > a ? (c = 12.048 * (a - .75), k = 1 - c, this.sky.material.uniforms.topColor.value.setRGB(k * this.colorTop[2].r + c * this.colorTop[3].r, 
      k * this.colorTop[2].g + c * this.colorTop[3].g, k * this.colorTop[2].b + c * this.colorTop[3].b), this.sky.material.uniforms.bottomColor.value.setRGB(k * this.colorBottom[2].r + c * this.colorBottom[3].r, k * this.colorBottom[2].g + c * this.colorBottom[3].g, k * this.colorBottom[2].b + c * this.colorBottom[3].b)) : (this.sky.material.uniforms.topColor.value.setRGB(this.colorTop[3].r, this.colorTop[3].g, this.colorTop[3].b), this.sky.material.uniforms.bottomColor.value.setRGB(this.colorBottom[3].r, 
      this.colorBottom[3].g, this.colorBottom[3].b));
    }
  }
  .2 > a ? (this.sun.intensity = this.intensity, this.sun.color.setHex(this.moonColor)) : .3 > a ? (c = 10 * (a - .2), .5 > c ? (this.sun.intensity = (2 - 2 * c) * this.intensity, this.sun.color.setHex(this.moonColor)) : (this.sun.intensity = 2 * c * this.intensity, this.sun.color.setHex(this.sunColor))) : .7 > a ? (this.sun.intensity = this.intensity, this.sun.color.setHex(this.sunColor)) : .8 > a ? (c = 10 * (a - .7), .5 > c ? (this.sun.intensity = (2 - 2 * c) * this.intensity, this.sun.color.setHex(this.sunColor)) : 
  (this.sun.intensity = 2 * c * this.intensity, this.sun.color.setHex(this.moonColor))) : (this.sun.intensity = this.intensity, this.sun.color.setHex(this.moonColor));
  c = MathUtils.PI2 * a - MathUtils.PID2;
  .25 < a && .75 > a ? (this.sun.position.x = this.sunDistance * Math.cos(c), this.sun.position.y = this.sunDistance * Math.sin(c)) : (this.sun.position.x = this.sunDistance * Math.cos(c + Math.PI), this.sun.position.y = this.sunDistance * Math.sin(c + Math.PI));
};
Sky.prototype.toJSON = function(a) {
  a = THREE.Object3D.prototype.toJSON.call(this, a);
  a.object.colorTop = [];
  for (var c = 0; c < this.colorTop.length; c++) {
    a.object.colorTop.push(this.colorTop[c].toJSON());
  }
  a.object.colorBottom = [];
  for (c = 0; c < this.colorBottom.length; c++) {
    a.object.colorBottom.push(this.colorBottom[c].toJSON());
  }
  a.object.sunColor = this.sunColor;
  a.object.moonColor = this.moonColor;
  a.object.intensity = this.intensity;
  a.object.autoUpdate = this.autoUpdate;
  a.object.sunDistance = this.sunDistance;
  a.object.dayTime = this.dayTime;
  a.object.time = this.time;
  a.object.sun = {};
  a.object.sun.castShadow = this.sun.castShadow;
  a.object.sun.shadow = this.sun.shadow.toJSON();
  return a;
};
"use strict";
function Container() {
  THREE.Group.call(this);
  this.name = "container";
  this.type = "Group";
}
Container.prototype = Object.create(THREE.Group.prototype);
"use strict";
function CubeCamera(a, c, k, b) {
  THREE.Object3D.call(this);
  this.name = "cubecamera";
  this.type = "CubeCamera";
  this.near = void 0 !== a ? a : .01;
  this.far = void 0 !== c ? c : 1E4;
  this.resolution = void 0 !== k ? k : 256;
  this.autoUpdate = void 0 !== b ? b : !1;
  this.cameras = [];
  for (a = 0; 6 > a; a++) {
    c = new THREE.PerspectiveCamera(90, 1, this.near, this.far), c.parent = this, this.cameras.push(c);
  }
  this.cameras[0].up.set(0, -1, 0);
  this.cameras[0].lookAt(new THREE.Vector3(1, 0, 0));
  this.cameras[1].up.set(0, -1, 0);
  this.cameras[1].lookAt(new THREE.Vector3(-1, 0, 0));
  this.cameras[2].up.set(0, 0, 1);
  this.cameras[2].lookAt(new THREE.Vector3(0, 1, 0));
  this.cameras[3].up.set(0, 0, -1);
  this.cameras[3].lookAt(new THREE.Vector3(0, -1, 0));
  this.cameras[4].up.set(0, -1, 0);
  this.cameras[4].lookAt(new THREE.Vector3(0, 0, 1));
  this.cameras[5].up.set(0, -1, 0);
  this.cameras[5].lookAt(new THREE.Vector3(0, 0, -1));
  this.target = new THREE.WebGLRenderTargetCube(this.resolution, this.resolution, {format:THREE.RGBFormat, magFilter:THREE.LinearFilter, minFilter:THREE.LinearFilter});
  this.cube = this.target.texture;
  this.cube.generateMipmaps = !1;
  this.cube.name = "cube";
  this.renderer = this.scene = null;
}
THREE._CubeCamera = THREE.CubeCamera;
THREE.CubeCamera = CubeCamera;
CubeCamera.prototype = Object.create(THREE.Object3D.prototype);
CubeCamera.prototype.initialize = function() {
  for (var a = this; null !== a.parent;) {
    a = a.parent, a instanceof Scene ? this.scene = a : a instanceof Program && (this.renderer = a.renderer);
  }
  THREE.Object3D.prototype.initialize.call(this);
};
CubeCamera.prototype.update = function(a) {
  this.autoUpdate && this.updateCubeMap(this.renderer, this.scene);
  THREE.Object3D.prototype.update.call(this, a);
};
CubeCamera.prototype.setResolution = function(a) {
  this.resolution = a;
  this.target.setSize(a, a);
};
CubeCamera.prototype.updateCubeMap = function(a, c) {
  var k = a.autoClear;
  a.autoClear = !0;
  for (var b = 0; 6 > b; b++) {
    this.cameras[b].updateMatrixWorld(), this.target.activeCubeFace = b, a.setRenderTarget(this.target), a.render(c, this.cameras[b]);
  }
  a.autoClear = k;
};
CubeCamera.prototype.toJSON = function(a) {
  a = THREE.Object3D.prototype.toJSON.call(this, a);
  a.object.near = this.near;
  a.object.far = this.far;
  a.object.resolution = this.resolution;
  a.object.autoUpdate = this.autoUpdate;
  return a;
};
"use strict";
function LensFlare() {
  THREE.Mesh.call(this, THREE.Lensflare.Geometry, new THREE.MeshBasicMaterial({opacity:0, transparent:!0}));
  this.name = "lensflare";
  this.type = "LensFlare";
  this.renderOrder = Infinity;
  this.castShadow = this.receiveShadow = this.frustumCulled = !1;
  this.elements = [];
  var a = new THREE.Vector3, c = new THREE.DataTexture(new Uint8Array(768), 16, 16, THREE.RGBFormat);
  c.minFilter = THREE.NearestFilter;
  c.magFilter = THREE.NearestFilter;
  c.wrapS = THREE.ClampToEdgeWrapping;
  c.wrapT = THREE.ClampToEdgeWrapping;
  c.needsUpdate = !0;
  var k = new THREE.DataTexture(new Uint8Array(768), 16, 16, THREE.RGBFormat);
  k.minFilter = THREE.NearestFilter;
  k.magFilter = THREE.NearestFilter;
  k.wrapS = THREE.ClampToEdgeWrapping;
  k.wrapT = THREE.ClampToEdgeWrapping;
  k.needsUpdate = !0;
  var b = THREE.Lensflare.Geometry, f = THREE.Lensflare.Shader, d = new THREE.RawShaderMaterial({uniforms:{scale:{value:null}, screenPosition:{value:null}}, vertexShader:"precision highp float;\n\t\t\tuniform vec3 screenPosition;\n\t\t\tuniform vec2 scale;\n\t\t\tattribute vec3 position;\n\t\t\tvoid main()\n\t\t\t{\n\t\t\t\tgl_Position = vec4(position.xy * scale + screenPosition.xy, screenPosition.z, 1.0);\n\t\t\t}", fragmentShader:"precision highp float;\n\t\t\tvoid main()\n\t\t\t{\n\t\t\t\tgl_FragColor = vec4(1.0, 0.0, 1.0, 1.0);\n\t\t\t}", 
  depthTest:!0, depthWrite:!1, transparent:!1}), h = new THREE.RawShaderMaterial({uniforms:{map:{value:c}, scale:{value:null}, screenPosition:{value:null}}, vertexShader:"precision highp float;\n\t\t\tuniform vec3 screenPosition;\n\t\t\tuniform vec2 scale;\n\t\t\tattribute vec3 position;\n\t\t\tattribute vec2 uv;\n\t\t\tvarying vec2 vUV;\n\t\t\tvoid main()\n\t\t\t{\n\t\t\t\tvUV = uv;\n\t\t\t\tgl_Position = vec4(position.xy * scale + screenPosition.xy, screenPosition.z, 1.0);\n\t\t\t}", fragmentShader:"precision highp float;\n\t\t\tuniform sampler2D map;\n\t\t\tvarying vec2 vUV;\n\t\t\tvoid main()\n\t\t\t{\n\t\t\t\tgl_FragColor = texture2D(map, vUV);\n\t\t\t}", 
  depthTest:!1, depthWrite:!1, transparent:!1}), n = new THREE.Mesh(b, d);
  f = THREE.LensflareElement.Shader;
  var q = new THREE.RawShaderMaterial({uniforms:{map:{value:null}, occlusionMap:{value:k}, color:{value:new THREE.Color(16777215)}, scale:{value:new THREE.Vector2}, screenPosition:{value:new THREE.Vector3}}, vertexShader:f.vertexShader, fragmentShader:f.fragmentShader, blending:THREE.AdditiveBlending, transparent:!0, depthWrite:!1}), m = new THREE.Mesh(b, q), t = new THREE.Vector2, e = new THREE.Vector2, l = new THREE.Box2, u = new THREE.Vector4;
  this.onBeforeRender = function(f, y, x) {
    f.getCurrentViewport(u);
    y = u.w / u.z;
    var p = u.z / 2, v = u.w / 2, w = 16 / u.w;
    t.set(w * y, w);
    l.min.set(u.x, u.y);
    l.max.set(u.x + (u.z - 16), u.y + (u.w - 16));
    a.setFromMatrixPosition(this.matrixWorld);
    a.applyMatrix4(x.matrixWorldInverse);
    a.applyMatrix4(x.projectionMatrix);
    e.x = u.x + a.x * p + p - 8;
    e.y = u.y + a.y * v + v - 8;
    if (l.containsPoint(e)) {
      f.copyFramebufferToTexture(e, c);
      p = d.uniforms;
      p.scale.value = t;
      p.screenPosition.value = a;
      f.renderBufferDirect(x, null, b, d, n, null);
      f.copyFramebufferToTexture(e, k);
      p = h.uniforms;
      p.scale.value = t;
      p.screenPosition.value = a;
      f.renderBufferDirect(x, null, b, h, n, null);
      v = 2 * -a.x;
      for (var C = 2 * -a.y, A = 0, D = this.elements.length; A < D; A++) {
        y = this.elements[A], p = q.uniforms, p.color.value.copy(y.color), p.map.value = y.texture, p.screenPosition.value.x = a.x + v * y.distance, p.screenPosition.value.y = a.y + C * y.distance, w = y.size / u.w, y = u.w / u.z, p.scale.value.set(w * y, w), q.uniformsNeedUpdate = !0, f.renderBufferDirect(x, null, b, q, m, null);
      }
    }
  };
  this.dispose = function() {
    d.dispose();
    h.dispose();
    q.dispose();
    c.dispose();
    k.dispose();
    for (var a = 0; a < this.elements.length; a++) {
      this.elements[a].texture.dispose();
    }
  };
}
LensFlare.prototype = Object.create(THREE.Mesh.prototype);
LensFlare.prototype.addFlare = function(a, c, k, b) {
  void 0 === c && (c = -1);
  void 0 === k && (k = 0);
  void 0 === b && (b = new Color(16777215));
  k = Math.min(k, Math.max(0, k));
  this.addElement(new THREE.LensflareElement(a, c, k, b));
};
LensFlare.prototype.addElement = function(a) {
  this.elements.push(a);
};
LensFlare.prototype.toJSON = function(a) {
  var c = this, k = [];
  a = THREE.Object3D.prototype.toJSON.call(this, a, function(a, f) {
    for (f = 0; f < c.elements.length; f++) {
      var b = {};
      b.texture = c.elements[f].texture.toJSON(a).uuid;
      b.size = c.elements[f].size;
      b.distance = c.elements[f].distance;
      b.color = c.elements[f].color.getHex();
      k.push(b);
    }
  });
  a.object.elements = k;
  return a;
};
"use strict";
function Skeleton(a, c) {
  this.uuid = THREE.Math.generateUUID();
  void 0 === a && (a = []);
  this.bones = a.slice(0);
  this.boneMatrices = new Float32Array(16 * this.bones.length);
  if (void 0 === c) {
    this.calculateInverses();
  } else {
    if (this.bones.length === c.length) {
      this.boneInverses = c.slice(0);
    } else {
      for (console.warn("nunuStudio: Skeleton boneInverses is the wrong length."), this.boneInverses = [], a = 0; a < this.bones.length; a++) {
        this.boneInverses.push(new Matrix4);
      }
    }
  }
}
THREE._Skeleton = THREE.Skeleton;
THREE.Skeleton = Skeleton;
Skeleton.prototype = Object.create(THREE._Skeleton.prototype);
Skeleton.prototype.toJSON = function(a) {
  a = {};
  for (var c = [], k = [], b = 0, f = this.bones.length; b < f; b++) {
    c.push(this.bones[b].uuid);
  }
  b = 0;
  for (f = this.boneInverses.length; b < f; b++) {
    k.push(this.boneInverses[b].toArray());
  }
  a.uuid = this.uuid;
  a.bones = c;
  a.boneInverses = k;
  return a;
};
"use strict";
function OrbitControls() {
  THREE.Group.call(this);
  this.name = "orbit";
  this.type = "OrbitControls";
  this.distance = 4;
  this.maxDistance = 20;
  this.minDistance = 2;
  this.sensitivity = .002;
  this.zoomSensitivity = .001;
  this.limitUp = 1.57;
  this.limitDown = -1.57;
  this.movementEnabled = this.zoomEnabled = this.needsButtonPressed = !0;
  this.center = new THREE.Vector3(0, 0, 0);
  this.vector = new THREE.Vector2(Math.PI / 2, 0);
  this.smooth = !0;
  this.friction = .8;
  this.speed = .3;
  this.invertNavigation = !1;
  this.keyboard = this.mouse = null;
  this.speedDistance = 0;
  this.speedCenter = new THREE.Vector3(0, 0, 0);
  this.speedOrientation = new THREE.Vector2(0, 0);
  this.tempVector = new THREE.Vector3;
}
OrbitControls.UP = new THREE.Vector3(0, 1, 0);
OrbitControls.ZERO = new THREE.Vector3(0, 0, 0);
OrbitControls.prototype = Object.create(THREE.Group.prototype);
OrbitControls.prototype.initialize = function() {
  for (var a = this; null !== a.parent;) {
    a = a.parent, a instanceof Program && (this.mouse = a.mouse, this.keyboard = a.keyboard);
  }
  this.center.copy(this.position);
  this.updateControls();
  THREE.Group.prototype.initialize.call(this);
};
OrbitControls.prototype.update = function(a) {
  var c = !1;
  if (!this.needsButtonPressed || this.mouse.buttonPressed(Mouse.LEFT)) {
    !0 === this.smooth ? (this.speedOrientation.y += this.speed * this.sensitivity * (this.invertNavigation ? this.mouse.delta.y : -this.mouse.delta.y), this.speedOrientation.x -= this.speed * this.sensitivity * this.mouse.delta.x) : (this.vector.y -= this.sensitivity * (this.invertNavigation ? this.mouse.delta.y : -this.mouse.delta.y), this.vector.x -= this.sensitivity * this.mouse.delta.x), c = !0;
  }
  this.zoomEnabled && (this.mouse.buttonPressed(Mouse.MIDDLE) && (!0 === this.smooth ? this.speedCenter.y += this.speed * this.sensitivity * this.mouse.delta.y * this.distance : this.center.y += this.sensitivity * this.mouse.delta.y * this.distance, c = !0), 0 !== this.mouse.wheel && (!0 === this.smooth ? this.speedDistance += this.speed * this.mouse.wheel * this.position.distanceTo(this.center) * this.sensitivity : this.distance += this.mouse.wheel * this.position.distanceTo(this.center) * this.sensitivity, 
  c = !0));
  if (this.movementEnabled && this.mouse.buttonPressed(Mouse.RIGHT)) {
    c = this.getWorldDirection(this.tempVector);
    c.y = 0;
    c.normalize();
    if (!0 === this.smooth) {
      var k = this.speed * this.mouse.delta.y * this.sensitivity * this.distance;
      this.speedCenter.x += -c.x * k;
      this.speedCenter.z += -c.z * k;
      c.applyAxisAngle(OrbitControls.UP, Math.PI / 2);
      k = this.speed * this.mouse.delta.x * this.sensitivity * this.distance;
      this.speedCenter.x -= c.x * k;
      this.speedCenter.z -= c.z * k;
    } else {
      k = this.mouse.delta.y * this.sensitivity * this.distance, this.center.x += -c.x * k, this.center.z += -c.z * k, c.applyAxisAngle(OrbitControls.UP, Math.PI / 2), k = this.mouse.delta.x * this.sensitivity * this.distance, this.center.x -= c.x * k, this.center.z -= c.z * k;
    }
    c = !0;
  }
  !0 === this.smooth ? (this.distance += this.speedDistance, this.center.add(this.speedCenter), this.vector.add(this.speedOrientation), this.speedDistance *= this.friction, this.speedOrientation.multiplyScalar(this.friction), this.speedCenter.multiplyScalar(this.friction), this.updateControls()) : (!0 === c && this.updateControls(), THREE.Object3D.prototype.update.call(this, a));
};
OrbitControls.prototype.updateControls = function() {
  this.vector.y < this.limitDown ? this.vector.y = this.limitDown : this.vector.y > this.limitUp && (this.vector.y = this.limitUp);
  this.distance < this.minDistance ? this.distance = this.minDistance : this.distance > this.maxDistance && (this.distance = this.maxDistance);
  var a = this.distance * Math.cos(this.vector.y);
  this.position.set(Math.cos(this.vector.x) * a, this.distance * Math.sin(this.vector.y), Math.sin(this.vector.x) * a);
  this.position.add(this.center);
  a = new THREE.Matrix4;
  a.lookAt(this.position, this.center, OrbitControls.UP);
  this.quaternion.setFromRotationMatrix(a);
};
OrbitControls.prototype.toJSON = function(a) {
  a = THREE.Object3D.prototype.toJSON.call(this, a);
  a.object.distance = this.distance;
  a.object.maxDistance = this.maxDistance;
  a.object.minDistance = this.minDistance;
  a.object.sensitivity = this.sensitivity;
  a.object.limitUp = this.limitUp;
  a.object.limitDown = this.limitDown;
  a.object.needsButtonPressed = this.needsButtonPressed;
  a.object.zoomEnabled = this.zoomEnabled;
  a.object.movementEnabled = this.movementEnabled;
  a.object.smooth = this.smooth;
  a.object.friction = this.friction;
  a.object.speed = this.speed;
  a.object.invertNavigation = this.invertNavigation;
  a.object.center = this.center.toArray();
  a.object.vector = this.vector.toArray();
  return a;
};
"use strict";
function FirstPersonControls() {
  THREE.Group.call(this);
  this.name = "controls";
  this.type = "FirstPersonControls";
  this.sensitivity = .005;
  this.movementEnabled = this.needsButtonPressed = !0;
  this.moveSpeed = .05;
  this.moveOnPlane = !1;
  this.moveKeys = [Keyboard.W, Keyboard.S, Keyboard.A, Keyboard.D];
  this.vector = new THREE.Vector2(0, 0);
  this.keyboard = this.mouse = null;
  this.tempVector = new THREE.Vector3;
}
FirstPersonControls.UP = new THREE.Vector3(0, 1, 0);
FirstPersonControls.prototype = Object.create(THREE.Group.prototype);
FirstPersonControls.prototype.initialize = function() {
  for (var a = this; null !== a.parent;) {
    a = a.parent, a instanceof Program && (this.mouse = a.mouse, this.keyboard = a.keyboard);
  }
  this.updateControls();
  THREE.Group.prototype.initialize.call(this);
};
FirstPersonControls.prototype.update = function(a) {
  if (!this.needsButtonPressed || this.mouse.buttonPressed(Mouse.LEFT)) {
    this.vector.y -= this.sensitivity * this.mouse.delta.y, this.vector.x -= this.sensitivity * this.mouse.delta.x, -1.57 > this.vector.y ? this.vector.y = -1.57 : 1.57 < this.vector.y && (this.vector.y = 1.57), this.updateControls();
  }
  if (this.movementEnabled) {
    if (this.keyboard.keyPressed(this.moveKeys[0])) {
      var c = this.getWorldDirection(this.tempVector);
      this.moveOnPlane && (c.y = 0);
      c.normalize();
      c.multiplyScalar(this.moveSpeed);
      this.position.sub(c);
    }
    this.keyboard.keyPressed(this.moveKeys[1]) && (c = this.getWorldDirection(this.tempVector), this.moveOnPlane && (c.y = 0), c.normalize(), c.multiplyScalar(this.moveSpeed), this.position.add(c));
    this.keyboard.keyPressed(this.moveKeys[2]) && (c = new THREE.Vector3(Math.sin(this.vector.x - 1.57), 0, Math.cos(this.vector.x - 1.57)), c.normalize(), c.multiplyScalar(this.moveSpeed), this.position.sub(c));
    this.keyboard.keyPressed(this.moveKeys[3]) && (c = new THREE.Vector3(Math.sin(this.vector.x + 1.57), 0, Math.cos(this.vector.x + 1.57)), c.normalize(), c.multiplyScalar(this.moveSpeed), this.position.sub(c));
  }
  THREE.Object3D.prototype.update.call(this, a);
};
FirstPersonControls.prototype.updateControls = function() {
  var a = Math.cos(this.vector.y);
  a = new THREE.Vector3(Math.sin(this.vector.x) * a, Math.sin(this.vector.y), Math.cos(this.vector.x) * a);
  a.add(this.position);
  var c = new THREE.Matrix4;
  c.lookAt(this.position, a, FirstPersonControls.UP);
  this.quaternion.setFromRotationMatrix(c);
};
FirstPersonControls.prototype.getDirection = function() {
  var a = this.getWorldDirection(this.tempVector);
  a.normalize();
  return a;
};
FirstPersonControls.prototype.toJSON = function(a) {
  a = THREE.Object3D.prototype.toJSON.call(this, a);
  a.object.moveSpeed = this.moveSpeed;
  a.object.sensitivity = this.sensitivity;
  a.object.needsButtonPressed = this.needsButtonPressed;
  a.object.movementEnabled = this.movementEnabled;
  a.object.moveOnPlane = this.moveOnPlane;
  a.object.moveKeys = this.moveKeys;
  return a;
};
"use strict";
function RendererConfiguration() {
  this.backend = RendererConfiguration.WEBGL;
  this.autoClearStencil = this.autoClearDepth = this.autoClearColor = this.autoClear = !1;
  this.stencil = this.shadows = this.antialiasing = !0;
  this.shadowsType = THREE.PCFSoftShadowMap;
  this.shadowsAutoUpdate = !0;
  this.toneMapping = THREE.NoToneMapping;
  this.toneMappingWhitePoint = this.toneMappingExposure = 1;
  this.sortObjects = !0;
  this.gammaFactor = 2;
  this.gammaOutput = this.gammaInput = !1;
  this.precision = "highp";
  this.premultipliedAlpha = this.alpha = !0;
  this.preserveDrawingBuffer = !1;
  this.powerPreference = "high-performance";
  this.physicallyCorrectLights = this.logarithmicDepthBuffer = !1;
}
RendererConfiguration.WEBGL = 1;
RendererConfiguration.WEBGL2 = 2;
RendererConfiguration.prototype.createRenderer = function(a) {
  var c = null;
  if (this.backend === RendererConfiguration.WEBGL2) {
    try {
      c = a.getContext("webgl2");
    } catch (k) {
    }
  }
  a = new THREE.WebGLRenderer({canvas:a, context:c, precision:this.precision, alpha:this.alpha, premultipliedAlpha:this.premultipliedAlpha, antialias:this.antialiasing, stencil:this.stencil, preserveDrawingBuffer:this.preserveDrawingBuffer, powerPreference:this.powerPreference, logarithmicDepthBuffer:this.logarithmicDepthBuffer});
  a.autoClear = this.autoClear;
  a.autoClearColor = this.autoClearColor;
  a.autoClearDepth = this.autoClearDepth;
  a.autoClearStencil = this.autoClearStencil;
  a.shadowMap.enabled = this.shadows;
  a.shadowMap.type = this.shadowsType;
  a.shadowMap.autoUpdate = this.shadowsAutoUpdate;
  a.shadowMap.needsUpdate = !1;
  a.toneMapping = this.toneMapping;
  a.toneMappingExposure = this.toneMappingExposure;
  a.toneMappingWhitePoint = this.toneMappingWhitePoint;
  a.sortObjects = this.sortObjects;
  a.gammaFactor = this.gammaFactor;
  a.gammaInput = this.gammaInput;
  a.gammaOutput = this.gammaOutput;
  a.physicallyCorrectLights = this.physicallyCorrectLights;
  return a;
};
RendererConfiguration.prototype.toJSON = function() {
  return {backend:this.backend, autoClear:this.autoClear, autoClearColor:this.autoClearColor, autoClearDepth:this.autoClearDepth, autoClearStencil:this.autoClearStencil, antialiasing:this.antialiasing, shadows:this.shadows, stencil:this.stencil, shadowsType:this.shadowsType, shadowsAutoUpdate:this.shadowsAutoUpdate, toneMapping:this.toneMapping, toneMappingExposure:this.toneMappingExposure, toneMappingWhitePoint:this.toneMappingWhitePoint, sortObjects:this.sortObjects, gammaFactor:this.gammaFactor, 
  gammaInput:this.gammaInput, gammaOutput:this.gammaOutput, precision:this.precision, alpha:this.alpha, premultipliedAlpha:this.premultipliedAlpha, preserveDrawingBuffer:this.preserveDrawingBuffer, powerPreference:this.powerPreference, logarithmicDepthBuffer:this.logarithmicDepthBuffer, physicallyCorrectLights:this.physicallyCorrectLights};
};
RendererConfiguration.prototype.fromJSON = function(a) {
  this.backend = a.backend;
  this.autoClear = a.autoClear;
  this.autoClearColor = a.autoClearColor;
  this.autoClearDepth = a.autoClearDepth;
  this.autoClearStencil = a.autoClearStencil;
  this.antialiasing = a.antialiasing;
  this.shadows = a.shadows;
  this.stencil = a.stencil;
  this.shadowsType = a.shadowsType;
  this.shadowsAutoUpdate = a.shadowsAutoUpdate;
  this.toneMapping = a.toneMapping;
  this.toneMappingExposure = a.toneMappingExposure;
  this.toneMappingWhitePoint = a.toneMappingWhitePoint;
  this.sortObjects = a.sortObjects;
  this.gammaFactor = a.gammaFactor;
  this.gammaInput = a.gammaInput;
  this.gammaOutput = a.gammaOutput;
  this.precision = a.precision;
  this.alpha = a.alpha;
  this.premultipliedAlpha = a.premultipliedAlpha;
  this.preserveDrawingBuffer = a.preserveDrawingBuffer;
  this.powerPreference = a.powerPreference;
  this.logarithmicDepthBuffer = a.logarithmicDepthBuffer;
  this.physicallyCorrectLights = a.physicallyCorrectLights;
};
"use strict";
function Program(a) {
  ResourceManager.call(this);
  this.type = "Program";
  this.matrixAutoUpdate = !1;
  this.app = null;
  this.name = void 0 !== a ? a : "program";
  this.author = this.description = "";
  this.version = "0";
  this.vr = this.handlePixelRatio = this.lockPointer = !1;
  this.vrScale = 1;
  this.rendererConfig = new RendererConfiguration;
  this.division = this.canvas = this.scene = this.renderer = this.mouse = this.keyboard = this.defaultCamera = this.defaultScene = null;
  this.manager = new EventManager;
  this.manager.add(window, "vrdisplaypresentchange", function() {
    null === self.vrDisplay || self.vrDisplay.isPresenting || (self.vrEnabled = !1);
  });
  this.clock = new THREE.Clock;
  this.vrEnabled = !1;
  this.vrControls = this.vrEffect = this.vrDisplay = null;
}
Program.prototype = Object.create(ResourceManager.prototype);
Program.prototype.initialize = function() {
  this.manager.create();
  null === this.mouse && (this.mouse = new Mouse);
  null === this.keyboard && (this.keyboard = new keyboard);
  if (null !== this.defaultScene) {
    for (var a = 0; a < this.children.length; a++) {
      if (this.children[a].uuid === this.defaultScene) {
        this.setScene(this.children[a]);
        break;
      }
    }
  } else {
    0 < this.children.length && this.setScene(this.children[0]);
  }
  if (this.vr) {
    var c = this;
    Nunu.getVRDisplays(function(a) {
      c.vrDisplay = a;
      c.vrControls = new VRControls;
      c.vrEffect = new VREffect(c.renderer);
    });
  }
  this.clock.start();
};
Program.prototype.setMouseKeyboard = function(a, c) {
  this.mouse = a;
  this.keyboard = c;
};
Program.prototype.setRenderer = function(a, c) {
  this.renderer = a;
  this.renderer.autoClear = !1;
  this.canvas = a.domElement;
  this.division = this.canvas.parentElement;
  c && this.updateRenderer();
};
Program.prototype.update = function() {
  var a = this.clock.getDelta();
  this.scene.update(a);
};
Program.prototype.render = function(a) {
  if (this.vrEnabled) {
    for (a = 0; a < this.scene.cameras.length; a++) {
      var c = this.scene.cameras[a];
      this.vrControls.update(c);
      this.vrEffect.render(this.scene, c, void 0, !0);
    }
  } else {
    this.scene.render(a);
  }
};
Program.prototype.resize = function(a, c) {
  null !== this.vrEffect && this.vrEffect.setSize(a, c);
  null !== this.defaultCamera && this.defaultCamera.resize(a, c);
  this.scene.resize(a, c);
};
Program.prototype.updateRenderer = function() {
  null !== this.renderer && (this.renderer.shadowMap.enabled = this.shadows, this.renderer.shadowMap.type = this.shadowsType, this.renderer.toneMapping = this.toneMapping, this.renderer.toneMappingExposure = this.toneMappingExposure, this.renderer.toneMappingWhitePoint = this.toneMappingWhitePoint);
};
Program.prototype.displayVR = function() {
  if (this.vr) {
    try {
      this.vrDisplay.isPresenting || (this.vrDisplay.requestPresent([{source:this.canvas}]), this.vrEnabled = !0);
    } catch (a) {
      console.warn("nunuStudio: Failed to enter in VR mode", a);
    }
  }
};
Program.prototype.exitVR = function() {
  this.vrDisplay.isPresenting && (this.vrDisplay.exitPresent(), this.vrEnabled = !1);
};
Program.prototype.setScene = function(a) {
  null !== this.scene && this.scene.dispose();
  a instanceof Scene ? this.scene = a : "string" === typeof a && (this.scene = this.getObjectByName(a));
  null !== this.scene && (null === this.scene.defaultCamera && (this.scene.defaultCamera = this.defaultCamera), this.scene.initialize());
};
Program.prototype.remove = function(a) {
  if (a instanceof Scene) {
    var c = this.children.indexOf(a);
    -1 < c && (this.children.splice(c, 1), a.parent = null);
    a === this.scene && (this.scene.dispose(), this.scene = null);
    0 === this.children.length && (this.scene = null);
  } else {
    console.warn("nunuStudio: Trying to remove Object3D from program, only Scene objects allowed.");
  }
};
Program.prototype.add = function(a) {
  a instanceof Scene ? (a.parent = this, this.children.push(a), 1 === this.children.length && (this.scene = this.children[0])) : console.warn("nunuStudio: Trying to add Object3D to program, only Scene objects allowed.");
};
Program.prototype.clone = function() {
  return (new ObjectLoader).parse(this.toJSON());
};
Program.prototype.setInitialScene = function(a) {
  this.defaultScene = a.uuid;
};
Program.prototype.dispose = function() {
  this.manager.destroy();
  null !== this.vrEffect && this.vrEffect.dispose();
  null !== this.scene ? this.scene.dispose() : console.warn("nunuStudio: Program dispose() scene is null.", this);
  ResourceManager.prototype.dispose.call(this);
  THREE.Object3D.prototype.dispose.call(this);
};
Program.prototype.receiveDataApp = function(a) {
  var c = !1;
  this.traverse(function(k) {
    k instanceof Script && (k.appData(a), c = !0);
  });
  c || console.warn("nunuStudio: No script with onAppData found", a);
};
Program.prototype.sendDataApp = function(a) {
  if (null !== this.app) {
    if (void 0 !== this.app.onDataReceived) {
      this.app.onDataReceived(a);
    } else {
      console.warn("nunuStudio: Send app data communication", a);
    }
  } else {
    console.warn("nunuStudio: Data sent to app", a);
  }
};
Program.prototype.toJSON = function(a, c) {
  var k = this;
  a = THREE.Object3D.prototype.toJSON.call(this, a, function(a, f) {
    if (!1 !== c) {
      f = k.textures;
      for (var b in f) {
        var h = f[b];
        void 0 === a.textures[h.uuid] && (a.textures[h.uuid] = h.toJSON(a));
      }
      f = k.materials;
      for (b in f) {
        h = f[b], void 0 === a.materials[h.uuid] && (a.materials[h.uuid] = h.toJSON(a));
      }
      f = k.fonts;
      for (b in f) {
        h = f[b], void 0 === a.fonts[h.uuid] && (a.fonts[h.uuid] = h.toJSON(a));
      }
      f = k.audio;
      for (b in f) {
        h = f[b], void 0 === a.audio[h.uuid] && (a.audio[h.uuid] = h.toJSON(a));
      }
      f = k.resources;
      for (b in f) {
        h = f[b], void 0 === a.resources[h.uuid] && (a.resources[h.uuid] = h.toJSON(a));
      }
    }
  });
  null !== this.defaultScene && (a.object.defaultScene = this.defaultScene);
  a.object.author = this.author;
  a.object.description = this.description;
  a.object.version = this.version;
  a.object.lockPointer = this.lockPointer;
  a.object.handlePixelRatio = this.handlePixelRatio;
  a.object.vr = this.vr;
  a.object.vrScale = this.vrScale;
  a.object.rendererConfig = this.rendererConfig.toJSON();
  return a;
};
"use strict";
function Scene() {
  THREE._Scene.call(this);
  this.name = "scene";
  this.matrixAutoUpdate = !1;
  this.usePhysics = !0;
  this.world = new CANNON.World;
  this.world.defaultContactMaterial.contactEquationStiffness = 1E9;
  this.world.defaultContactMaterial.contactEquationRelaxation = 4;
  this.world.quatNormalizeSkip = 0;
  this.world.quatNormalizeFast = !1;
  this.world.gravity.set(0, -9.8, 0);
  this.world.broadphase = new CANNON.NaiveBroadphase;
  this.world.solver = new CANNON.SplitSolver(new CANNON.GSSolver);
  this.world.solver.tolerance = .05;
  this.world.solver.iterations = 7;
  this.background = new THREE.Color(0);
  this.cameras = [];
  this.defaultCamera = null;
  this.delta = 0;
  this.raycaster = new THREE.Raycaster;
  this.canvas = this.program = null;
  this.mouse = new THREE.Vector2(0, 0);
}
THREE._Scene = THREE.Scene;
Scene.prototype = Object.create(THREE._Scene.prototype);
Scene.prototype.initialize = function() {
  this.program = this.parent;
  this.canvas = this.parent.canvas;
  THREE.Object3D.prototype.initialize.call(this);
  for (var a = 0; a < this.children.length; a++) {
    this.children[a].traverse(function(a) {
      a.initialize();
    });
  }
};
Scene.prototype.update = function(a) {
  this.mouse.set(this.program.mouse.position.x / this.canvas.width * 2 - 1, -2 * this.program.mouse.position.y / this.canvas.height + 1);
  0 < this.cameras.length && this.raycaster.setFromCamera(this.mouse, this.cameras[0]);
  this.usePhysics && this.world.step(.05 > a ? a : .05);
  for (var c = 0; c < this.children.length; c++) {
    this.children[c].traverse(function(c) {
      c.update(a);
    });
  }
};
Scene.prototype.resize = function(a, c) {
  null !== this.defaultCamera && this.defaultCamera.resize(a, c);
  for (var k = 0; k < this.cameras.length; k++) {
    this.cameras[k].resize(a, c);
  }
  for (k = 0; k < this.children.length; k++) {
    this.children[k].traverse(function(b) {
      b.resize(a, c);
    });
  }
};
Scene.prototype.dispose = function() {
  for (var a = 0; a < this.children.length; a++) {
    this.children[a].traverse(function(a) {
      a.dispose();
    });
  }
};
Scene.prototype.render = function(a) {
  a.setClearColor(this.background);
  if (0 < this.cameras.length) {
    a.setScissorTest(!0);
    for (var c = 0; c < this.cameras.length; c++) {
      this.cameras[c].setupRenderer(a), this.cameras[c].render(a, this);
    }
    a.setScissorTest(!1);
  } else {
    null !== this.defaultCamera && this.defaultCamera.render(a, this);
  }
};
Scene.prototype.getCamera = function(a, c) {
  void 0 === c && (c = this);
  if (a === c.uuid) {
    return c;
  }
  c = c.children;
  for (var k = 0; k < c.length; k++) {
    var b = this.getCamera(a, c[k]);
    if (null !== b) {
      return b;
    }
  }
  return null;
};
Scene.prototype.addCamera = function(a) {
  -1 === this.cameras.indexOf(a) && (this.cameras.push(a), this.updateCameraOrder());
};
Scene.prototype.updateCameraOrder = function() {
  this.cameras.sort(function(a, c) {
    return a.order > c.order;
  });
};
Scene.prototype.removeCamera = function(a) {
  a = this.cameras.indexOf(a);
  -1 < a && this.cameras.splice(a, 1);
};
Scene.prototype.isCameraActive = function(a) {
  return -1 < this.cameras.indexOf(a);
};
Scene.prototype.setFogMode = function(a) {
  var c = null !== this.fog ? this.fog.color.getHex() : "#FFFFFF";
  a === THREE.Fog.LINEAR ? this.fog = new THREE.Fog(c, 5, 20) : a === THREE.Fog.EXPONENTIAL ? this.fog = new THREE.FogExp2(c, .01) : a === THREE.Fog.NONE && (this.fog = null);
};
Scene.prototype.toJSON = function(a) {
  if (null == this.parent || "Program" !== this.parent.type) {
    return console.warn("nunuStudio: Scene is not on top level serializing as Group."), this.type = "Group", THREE.Object3D.prototype.toJSON.call(this, a);
  }
  var c = this.background, k = THREE.Object3D.prototype.toJSON.call(this, a, function(a, b) {
    c instanceof THREE.Color ? c = c.toJSON(a) : c instanceof THREE.Texture && (c = c.toJSON(a).uuid);
  });
  null !== c && (k.object.background = c);
  if (null !== this.defaultCamera) {
    var b = new THREE.Vector3, f = new THREE.Quaternion, d = new THREE.Vector3;
    this.defaultCamera.matrixWorld.decompose(b, f, d);
    a = this.defaultCamera.toJSON(a);
    a.object.position = b.toArray();
    a.object.quaternion = f.toArray();
    a.object.scale = d.toArray();
    k.object.defaultCamera = a;
  }
  null !== this.fog && (k.object.fog = this.fog.toJSON());
  k.object.usePhysics = this.usePhysics;
  k.object.cameras = [];
  for (b = 0; b < this.cameras.length; b++) {
    k.object.cameras.push(this.cameras[b].uuid);
  }
  k.object.world = {};
  k.object.world.gravity = this.world.gravity;
  k.object.world.quatNormalizeSkip = this.world.quatNormalizeSkip;
  k.object.world.quatNormalizeFast = this.world.quatNormalizeFast;
  k.object.world.solver = {};
  k.object.world.solver.tolerance = this.world.solver.tolerance;
  k.object.world.solver.iterations = this.world.solver.iterations;
  return k;
};
"use strict";
function Base64Utils() {
}
Base64Utils.encoding = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
Base64Utils.isBase64 = function(a) {
  if ("string" !== typeof a) {
    return !1;
  }
  if (a.startsWith("data:")) {
    return !0;
  }
  for (var c = 0; c < a.length; c++) {
    if (!Base64Utils.encoding.includes(a.charAt(c))) {
      return !1;
    }
  }
  return !0;
};
Base64Utils.removeHeader = function(a) {
  return a.slice(a.search(";base64,") + 8);
};
Base64Utils.getFileFormat = function(a) {
  var c = a.indexOf("/") + 1, k = a.indexOf(";");
  return a.substr(c, k - c);
};
Base64Utils.fromArraybuffer = function(a) {
  var c = "";
  a = new Uint8Array(a);
  for (var k = a.byteLength % 3, b = a.byteLength - k, f, d, h, n, q = 0; q < b; q += 3) {
    n = a[q] << 16 | a[q + 1] << 8 | a[q + 2], f = (n & 16515072) >> 18, d = (n & 258048) >> 12, h = (n & 4032) >> 6, n &= 63, c += Base64Utils.encoding[f] + Base64Utils.encoding[d] + Base64Utils.encoding[h] + Base64Utils.encoding[n];
  }
  1 === k ? (n = a[b], c += Base64Utils.encoding[(n & 252) >> 2] + Base64Utils.encoding[(n & 3) << 4] + "==") : 2 === k && (n = a[b] << 8 | a[b + 1], c += Base64Utils.encoding[(n & 64512) >> 10] + Base64Utils.encoding[(n & 1008) >> 4] + Base64Utils.encoding[(n & 15) << 2] + "=");
  return c;
};
Base64Utils.fromBinaryString = function(a) {
  for (var c = "", k = a.length % 3, b = a.length - k, f, d, h, n = 0; n < b; n += 3) {
    f = a.charCodeAt(n) & 255, d = a.charCodeAt(n + 1), h = a.charCodeAt(n + 2), c += Base64Utils.encoding.charAt(f >> 2), c += Base64Utils.encoding.charAt((f & 3) << 4 | (d & 240) >> 4), c += Base64Utils.encoding.charAt((d & 15) << 2 | (h & 192) >> 6), c += Base64Utils.encoding.charAt(h & 63);
  }
  1 === k ? (f = a.charCodeAt(n) & 255, c += Base64Utils.encoding.charAt(f >> 2), c += Base64Utils.encoding.charAt((f & 3) << 4), c += "==") : 2 === k && (f = a.charCodeAt(n) & 255, d = a.charCodeAt(n + 1), c += Base64Utils.encoding.charAt(f >> 2), c += Base64Utils.encoding.charAt((f & 3) << 4 | (d & 240) >> 4), c += Base64Utils.encoding.charAt((d & 15) << 2), c += "=");
  return c;
};
"use strict";
function ArraybufferUtils() {
}
ArraybufferUtils.fromBinaryString = function(a) {
  for (var c = a.length, k = new ArrayBuffer(c), b = new Uint8Array(k), f = 0; f < c; f++) {
    b[f] = a.charCodeAt(f);
  }
  return k;
};
ArraybufferUtils.fromBase64 = function(a) {
  for (var c = a.length / 4 * 3, k = new ArrayBuffer(c), b = new Uint8Array(k), f, d, h, n, q = 0, m = 0; q < c; q += 3) {
    f = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".indexOf(a.charAt(m++)), d = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".indexOf(a.charAt(m++)), h = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".indexOf(a.charAt(m++)), n = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".indexOf(a.charAt(m++)), b[q] = f << 2 | d >> 4, 64 !== h && (b[q + 1] = (d & 15) << 4 | h >> 2), 64 !== n && (b[q + 2] = (h & 3) << 6 | n);
  }
  return k;
};
ArraybufferUtils.fromBuffer = function(a) {
  for (var c = new ArrayBuffer(a.length), k = new Uint8Array(c), b = 0; b < a.length; b++) {
    k[b] = a[b];
  }
  return c;
};
"use strict";
function BufferUtils() {
}
BufferUtils.fromArrayBuffer = function(a) {
  var c = new Buffer(a.byteLength);
  a = new Uint8Array(a);
  for (var k = 0; k < c.length; k++) {
    c[k] = a[k];
  }
  return c;
};
"use strict";
function Timer(a, c) {
  this.callback = a;
  this.time = c;
  this.running = !1;
  this.id = -1;
}
Timer.prototype.start = function() {
  function a() {
    c.callback();
    c.running && (c.id = setTimeout(a, c.time));
  }
  if (!this.running) {
    this.running = !0;
    var c = this;
    a();
  }
};
Timer.prototype.stop = function() {
  this.running = !1;
  clearTimeout(self.id);
};
"use strict";
function AnimationTimer(a) {
  this.callback = a;
  this.running = !1;
  this.id = -1;
}
AnimationTimer.prototype.start = function() {
  function a() {
    c.callback();
    c.running && (c.id = requestAnimationFrame(a));
  }
  if (!this.running) {
    this.running = !0;
    var c = this;
    a();
  }
};
AnimationTimer.prototype.stop = function() {
  this.running = !1;
  cancelAnimationFrame(this.id);
};
"use strict";
function LocalStorage() {
}
LocalStorage.set = function(a, c) {
  "object" === typeof c ? window.localStorage.setItem(a, JSON.stringify(c)) : window.localStorage.setItem(a, c);
};
LocalStorage.get = function(a) {
  a = window.localStorage.getItem(a);
  try {
    return JSON.parse(a);
  } catch (c) {
    return a;
  }
};
LocalStorage.exists = function(a) {
  return null !== window.localStorage.getItem(a);
};
LocalStorage.delete = function(a) {
  return window.localStorage.removeItem(a);
};
"use strict";
function EventManager() {
  this.events = [];
}
EventManager.prototype.add = function(a, c, k) {
  this.events.push([a, c, k, !1]);
};
EventManager.prototype.clear = function() {
  this.destroy();
  this.events = [];
};
EventManager.prototype.create = function() {
  for (var a = 0; a < this.events.length; a++) {
    var c = this.events[a];
    c[0].addEventListener(c[1], c[2]);
    c[3] = !0;
  }
};
EventManager.prototype.destroy = function() {
  for (var a = 0; a < this.events.length; a++) {
    var c = this.events[a];
    c[0].removeEventListener(c[1], c[2]);
    c[3] = !1;
  }
};
EventManager.prototype.addScrollEvent = function(a, c) {
  void 0 !== window.onmousewheel ? this.add(a, "mousewheel", c) : void 0 !== window.addEventListener ? this.add(a, "DOMMouseScroll", function(a) {
    a.deltaY = 30 * a.detail;
    c(a);
  }) : this.add(a, "wheel", c);
};
"use strict";
function MathUtils() {
}
MathUtils.PI2 = 2 * Math.PI;
MathUtils.PID3 = Math.PI / 3;
MathUtils.PID2 = Math.PI / 2;
MathUtils.randomColor = function() {
  for (var a = "#", c = 0; 6 > c; c++) {
    a += "0123456789ABCDEF"[Math.floor(16 * Math.random())];
  }
  return a;
};
"use strict";
function ObjectUtils() {
}
ObjectUtils.getRoot = function(a) {
  for (; null !== a.parent;) {
    a = a.parent;
  }
  return a;
};
ObjectUtils.scaleAndCenterObject = function(a) {
  var c = ObjectUtils.calculateBoundingBox(a);
  if (null !== c) {
    var k = new THREE.Vector3;
    c.getSize(k);
    k = 1 / (k.x > k.y ? k.x > k.z ? k.x : k.z : k.y > k.z ? k.y : k.z);
    var b = new THREE.Vector3;
    c.getCenter(b);
    b.multiplyScalar(k);
    a.scale.set(k, k, k);
    a.position.set(-b.x, -k * c.min.y, -b.z);
  }
};
ObjectUtils.calculateBoundingBox = function(a) {
  var c = null;
  a.traverse(function(a) {
    void 0 !== a.geometry && (a.geometry.computeBoundingBox(), a = a.geometry.boundingBox, null === c ? c = a.clone() : (a.min.x < c.min.x && (c.min.x = a.min.x), a.max.x > c.max.x && (c.max.x = a.max.x), a.min.y < c.min.y && (c.min.y = a.min.y), a.max.y > c.max.y && (c.max.y = a.max.y), a.min.z < c.min.z && (c.min.z = a.min.z), a.max.z > c.max.z && (c.max.z = a.max.z)));
  });
  return c;
};
ObjectUtils.recalculateGeometryOrigin = function(a) {
  a.traverse(function(a) {
    if (void 0 !== a.geometry) {
      a.geometry.computeBoundingBox();
      var c = a.geometry.boundingBox.clone().getCenter(new THREE.Vector3);
      a.position.add(c);
      var b = new THREE.Matrix4;
      b.makeTranslation(-c.x, -c.y, -c.z);
      a.geometry.applyMatrix(b);
    }
  });
};
ObjectUtils.convertToBufferGeometry = function(a) {
  a.traverse(function(a) {
    void 0 !== a.geometry && !0 === a.geometry.isGeometry && (a.geometry = (new THREE.BufferGeometry).fromGeometry(a.geometry));
  });
};
"use strict";
function PhysicsGenerator() {
}
PhysicsGenerator.Type = {BOX:"Box", CYLINDER:"Cylinder", SPHERE:"Sphere", HULL:"ConvexPolyhedron"};
PhysicsGenerator.createShape = function(a, c) {
  if (void 0 !== c) {
    return c === PhysicsGenerator.Type.BOX ? PhysicsGenerator.createBoundingBoxShape(a) : c === PhysicsGenerator.Type.CYLINDER ? PhysicsGenerator.createBoundingCylinderShape(a) : c === PhysicsGenerator.Type.SPHERE ? PhysicsGenerator.createBoundingSphereShape(a) : c === PhysicsGenerator.Type.HULL ? PhysicsGenerator.createConvexPolyhedron(a) : null;
  }
  c = PhysicsGenerator.getGeometry(a);
  if (!c) {
    return null;
  }
  switch(c.type) {
    case "BoxGeometry":
    case "BoxBufferGeometry":
      return PhysicsGenerator.createBoxShape(c);
    case "CylinderGeometry":
    case "CylinderBufferGeometry":
      return PhysicsGenerator.createCylinderShape(c);
    case "PlaneGeometry":
    case "PlaneBufferGeometry":
      return PhysicsGenerator.createPlaneShape(c);
    case "SphereGeometry":
    case "SphereBufferGeometry":
      return PhysicsGenerator.createSphereShape(c);
    case "TubeGeometry":
      return PhysicsGenerator.createTubeShape(c);
    case "Geometry":
    case "BufferGeometry":
      return PhysicsGenerator.createConvexPolyhedron(a);
    default:
      return PhysicsGenerator.createBoxShape(c);
  }
};
PhysicsGenerator.createBoxShape = function(a) {
  if (!PhysicsGenerator.getVertices(a).length) {
    return null;
  }
  a.computeBoundingBox();
  a = a.boundingBox;
  return new CANNON.Box(new CANNON.Vec3((a.max.x - a.min.x) / 2, (a.max.y - a.min.y) / 2, (a.max.z - a.min.z) / 2));
};
PhysicsGenerator.createBoundingBoxShape = function(a) {
  var c = new Box3;
  c.setFromObject(a);
  if (!isFinite(c.min.lengthSq())) {
    return null;
  }
  c = new CANNON.Box(new CANNON.Vec3((c.max.x - c.min.x) / 2, (c.max.y - c.min.y) / 2, (c.max.z - c.min.z) / 2));
  a.updateMatrixWorld();
  (new THREE.Vector3).setFromMatrixPosition(a.matrixWorld);
  return c;
};
PhysicsGenerator.createConvexPolyhedron = function(a) {
  var c = new THREE.QuickHull;
  c.setFromObject(a);
  a = [];
  for (var k = [], b = [], f = 0; f < c.faces.length; f++) {
    var d = c.faces[f], h = d.edge;
    do {
      var n = h.head().point;
      a.push(new CANNON.Vec3(n.x, n.y, n.z));
      h = h.next;
    } while (h !== d.edge);
    k.push([a.length - 3, a.length - 2, a.length - 1]);
    b.push(new CANNON.Vec3(d.normal.x, d.normal.y, d.normal.z));
  }
  return new CANNON.ConvexPolyhedron(a, k, b);
};
PhysicsGenerator.createCylinderShape = function(a) {
  a = a.parameters;
  a = new CANNON.Cylinder(a.radiusTop, a.radiusBottom, a.height, a.radialSegments);
  a.orientation = new CANNON.Quaternion;
  a.orientation.setFromEuler(0, 0, 0, "XYZ").normalize();
  return a;
};
PhysicsGenerator.createBoundingCylinderShape = function(a) {
  var c = ["x", "y", "z"];
  c = c.splice(c.indexOf("y"), 1) && c;
  a = PhysicsGenerator.getGeometry(a);
  a.computeBoundingBox();
  a.computeBoundingSphere();
  c = .5 * Math.max(a.boundingBox.max[c[0]] - a.boundingBox.min[c[0]], a.boundingBox.max[c[1]] - a.boundingBox.min[c[1]]);
  a = new CANNON.Cylinder(c, c, a.boundingBox.max.y - a.boundingBox.min.y, 12);
  a.orientation = new CANNON.Quaternion;
  a.orientation.setFromEuler(Math.PI / 2, 0, 0, "XYZ").normalize();
  return a;
};
PhysicsGenerator.createPlaneShape = function(a) {
  a.computeBoundingBox();
  a = a.boundingBox;
  return new CANNON.Box(new CANNON.Vec3((a.max.x - a.min.x) / 2, (a.max.y - a.min.y) / 2, (a.max.z - a.min.z) / 2));
};
PhysicsGenerator.createSphereShape = function(a) {
  return new CANNON.Sphere(a.parameters.radius);
};
PhysicsGenerator.createBoundingSphereShape = function(a) {
  a = PhysicsGenerator.getGeometry(a);
  a.computeBoundingSphere();
  return new CANNON.Sphere(a.boundingSphere.radius);
};
PhysicsGenerator.createTubeShape = function(a) {
  var c = new THREE.BufferGeometry;
  c.fromGeometry(a);
  return createTrimeshShape(c);
};
PhysicsGenerator.createTrimeshShape = function(a) {
  var c = PhysicsGenerator.getVertices(a);
  if (!c.length) {
    return null;
  }
  a = Object.keys(c).map(Number);
  return new CANNON.Trimesh(c, a);
};
PhysicsGenerator.getGeometry = function(a) {
  var c = PhysicsGenerator.getMeshes(a);
  if (0 === c.length) {
    return null;
  }
  var k = new THREE.Geometry;
  if (1 === c.length) {
    a = new THREE.Vector3;
    var b = new THREE.Quaternion, f = new THREE.Vector3(1, 1, 1);
    k = c[0].geometry.clone();
    c[0].updateMatrixWorld();
    c[0].matrixWorld.decompose(a, b, f);
    return k.scale(f.x, f.y, f.z);
  }
  for (b = new THREE.Geometry; f = c.pop();) {
    f.updateMatrixWorld(), f.geometry instanceof THREE.BufferGeometry ? (k.fromBufferGeometry(f.geometry), b.merge(k, f.matrixWorld)) : b.merge(f.geometry, f.matrixWorld);
  }
  c = new THREE.Matrix4;
  c.scale(a.scale);
  b.applyMatrix(c);
  return b;
};
PhysicsGenerator.getVertices = function(a) {
  a.attributes || (a = (new THREE.BufferGeometry).fromGeometry(a));
  return a.attributes.position.array;
};
PhysicsGenerator.getMeshes = function(a) {
  var c = [];
  a.traverse(function(a) {
    a instanceof THREE.Mesh && c.push(a);
  });
  return c;
};

