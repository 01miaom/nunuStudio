/*


 opentype.js:
   license: MIT (http://opensource.org/licenses/MIT)
   author: Frederik De Bleser <frederik@debleser.be>
   version: 0.6.5

 tiny-inflate:
   license: MIT (http://opensource.org/licenses/MIT)
   author: Devon Govett <devongovett@gmail.com>
   maintainers: devongovett <devongovett@gmail.com>
   homepage: https://github.com/devongovett/tiny-inflate
   version: 1.0.2

 This header is generated by licensify (https://github.com/twada/licensify)


 nunuStudio:
   license: MIT (http://opensource.org/licenses/MIT)
   author: Tentone <tentone@outlook.com>
 LeapJS v0.6.4                                                  
 http://github.com/leapmotion/leapjs/                                        

 Copyright 2013 LeapMotion, Inc. and other contributors                      
 Released under the Apache-2.0 license                                     
 http://github.com/leapmotion/leapjs/blob/master/LICENSE.txt                 
*/
function Nunu() {
}
Nunu.NAME = "nunuStudio";
Nunu.VERSION = "V0.8.9.22 Alpha";
Nunu.TIMESTAMP = "201703140126";
Nunu.webvrAvailable = function() {
  return void 0 !== navigator.getVRDisplays;
};
Nunu.webAudioAvailable = function() {
  return void 0 !== window.AudioContext || void 0 !== window.webkitAudioContext;
};
Nunu.webglAvailable = function() {
  var a = ["webgl", "experimental-webgl", "webgl2", "experimental-webgl"];
  try {
    for (var h = document.createElement("canvas"), l = 0;l < a.length;l++) {
      if (void 0 !== h.getContext(a[l])) {
        return !0;
      }
    }
  } catch (b) {
  }
  return !1;
};
Nunu.runningOnDesktop = function() {
  return void 0 !== window.nw;
};
(function(a, h) {
  "object" === typeof exports && "undefined" !== typeof module ? h(exports) : "function" === typeof define && define.amd ? define(["exports"], h) : h(a.THREE = a.THREE || {});
})(this, function(a) {
  function h() {
  }
  function l(d, n) {
    this.x = d || 0;
    this.y = n || 0;
  }
  function b(d, n, a, E, c, f, e, m, g, k) {
    Object.defineProperty(this, "id", {value:bf++});
    this.uuid = na.generateUUID();
    this.name = "";
    this.image = void 0 !== d ? d : b.DEFAULT_IMAGE;
    this.mipmaps = [];
    this.mapping = void 0 !== n ? n : b.DEFAULT_MAPPING;
    this.wrapS = void 0 !== a ? a : 1001;
    this.wrapT = void 0 !== E ? E : 1001;
    this.magFilter = void 0 !== c ? c : 1006;
    this.minFilter = void 0 !== f ? f : 1008;
    this.anisotropy = void 0 !== g ? g : 1;
    this.format = void 0 !== e ? e : 1023;
    this.type = void 0 !== m ? m : 1009;
    this.offset = new l(0, 0);
    this.repeat = new l(1, 1);
    this.generateMipmaps = !0;
    this.premultiplyAlpha = !1;
    this.flipY = !0;
    this.unpackAlignment = 4;
    this.encoding = void 0 !== k ? k : 3E3;
    this.version = 0;
    this.onUpdate = null;
  }
  function g(d, n, a, b) {
    this.x = d || 0;
    this.y = n || 0;
    this.z = a || 0;
    this.w = void 0 !== b ? b : 1;
  }
  function k(d, n, a) {
    this.uuid = na.generateUUID();
    this.width = d;
    this.height = n;
    this.scissor = new g(0, 0, d, n);
    this.scissorTest = !1;
    this.viewport = new g(0, 0, d, n);
    a = a || {};
    void 0 === a.minFilter && (a.minFilter = 1006);
    this.texture = new b(void 0, void 0, a.wrapS, a.wrapT, a.magFilter, a.minFilter, a.format, a.type, a.anisotropy, a.encoding);
    this.depthBuffer = void 0 !== a.depthBuffer ? a.depthBuffer : !0;
    this.stencilBuffer = void 0 !== a.stencilBuffer ? a.stencilBuffer : !0;
    this.depthTexture = void 0 !== a.depthTexture ? a.depthTexture : null;
  }
  function c(d, n, a) {
    k.call(this, d, n, a);
    this.activeMipMapLevel = this.activeCubeFace = 0;
  }
  function e(d, n, a, b) {
    this.x = d || 0;
    this.y = n || 0;
    this.z = a || 0;
    this.w = void 0 !== b ? b : 1;
  }
  function f(d, n, a) {
    this.x = d || 0;
    this.y = n || 0;
    this.z = a || 0;
  }
  function q() {
    this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
    0 < arguments.length && console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.");
  }
  function r(d, n, a, E, c, f, e, m, g, k, q, h) {
    b.call(this, null, f, e, m, g, k, E, c, q, h);
    this.image = {data:d, width:n, height:a};
    this.magFilter = void 0 !== g ? g : 1003;
    this.minFilter = void 0 !== k ? k : 1003;
    this.flipY = this.generateMipmaps = !1;
    this.unpackAlignment = 1;
  }
  function w(d, n, a, E, c, f, e, m, g, k) {
    d = void 0 !== d ? d : [];
    b.call(this, d, void 0 !== n ? n : 301, a, E, c, f, e, m, g, k);
    this.flipY = !1;
  }
  function p(d, n, a) {
    var z = d[0];
    if (0 >= z || 0 < z) {
      return d;
    }
    var b = n * a, c = Ee[b];
    void 0 === c && (c = new Float32Array(b), Ee[b] = c);
    if (0 !== n) {
      for (z.toArray(c, 0), z = 1, b = 0;z !== n;++z) {
        b += a, d[z].toArray(c, b);
      }
    }
    return c;
  }
  function u(d, n) {
    var a = Fe[n];
    void 0 === a && (a = new Int32Array(n), Fe[n] = a);
    for (var b = 0;b !== n;++b) {
      a[b] = d.allocTextureUnit();
    }
    return a;
  }
  function v(d, n) {
    d.uniform1f(this.addr, n);
  }
  function y(d, n) {
    d.uniform1i(this.addr, n);
  }
  function x(d, n) {
    void 0 === n.x ? d.uniform2fv(this.addr, n) : d.uniform2f(this.addr, n.x, n.y);
  }
  function m(d, n) {
    void 0 !== n.x ? d.uniform3f(this.addr, n.x, n.y, n.z) : void 0 !== n.r ? d.uniform3f(this.addr, n.r, n.g, n.b) : d.uniform3fv(this.addr, n);
  }
  function t(d, n) {
    void 0 === n.x ? d.uniform4fv(this.addr, n) : d.uniform4f(this.addr, n.x, n.y, n.z, n.w);
  }
  function C(d, n) {
    d.uniformMatrix2fv(this.addr, !1, n.elements || n);
  }
  function A(d, n) {
    void 0 === n.elements ? d.uniformMatrix3fv(this.addr, !1, n) : (Ge.set(n.elements), d.uniformMatrix3fv(this.addr, !1, Ge));
  }
  function D(d, n) {
    void 0 === n.elements ? d.uniformMatrix4fv(this.addr, !1, n) : (He.set(n.elements), d.uniformMatrix4fv(this.addr, !1, He));
  }
  function F(d, n, a) {
    var z = a.allocTextureUnit();
    d.uniform1i(this.addr, z);
    a.setTexture2D(n || Ie, z);
  }
  function G(d, n, a) {
    var z = a.allocTextureUnit();
    d.uniform1i(this.addr, z);
    a.setTextureCube(n || Je, z);
  }
  function B(d, n) {
    d.uniform2iv(this.addr, n);
  }
  function K(d, n) {
    d.uniform3iv(this.addr, n);
  }
  function H(d, n) {
    d.uniform4iv(this.addr, n);
  }
  function M(d) {
    switch(d) {
      case 5126:
        return v;
      case 35664:
        return x;
      case 35665:
        return m;
      case 35666:
        return t;
      case 35674:
        return C;
      case 35675:
        return A;
      case 35676:
        return D;
      case 35678:
        return F;
      case 35680:
        return G;
      case 5124:
      case 35670:
        return y;
      case 35667:
      case 35671:
        return B;
      case 35668:
      case 35672:
        return K;
      case 35669:
      case 35673:
        return H;
    }
  }
  function J(d, n) {
    d.uniform1fv(this.addr, n);
  }
  function P(d, n) {
    d.uniform1iv(this.addr, n);
  }
  function O(d, n) {
    d.uniform2fv(this.addr, p(n, this.size, 2));
  }
  function N(d, n) {
    d.uniform3fv(this.addr, p(n, this.size, 3));
  }
  function ba(d, n) {
    d.uniform4fv(this.addr, p(n, this.size, 4));
  }
  function da(d, n) {
    d.uniformMatrix2fv(this.addr, !1, p(n, this.size, 4));
  }
  function ca(d, n) {
    d.uniformMatrix3fv(this.addr, !1, p(n, this.size, 9));
  }
  function ia(d, n) {
    d.uniformMatrix4fv(this.addr, !1, p(n, this.size, 16));
  }
  function R(d, n, a) {
    var z = n.length, b = u(a, z);
    d.uniform1iv(this.addr, b);
    for (d = 0;d !== z;++d) {
      a.setTexture2D(n[d] || Ie, b[d]);
    }
  }
  function S(d, n, a) {
    var z = n.length, b = u(a, z);
    d.uniform1iv(this.addr, b);
    for (d = 0;d !== z;++d) {
      a.setTextureCube(n[d] || Je, b[d]);
    }
  }
  function I(d) {
    switch(d) {
      case 5126:
        return J;
      case 35664:
        return O;
      case 35665:
        return N;
      case 35666:
        return ba;
      case 35674:
        return da;
      case 35675:
        return ca;
      case 35676:
        return ia;
      case 35678:
        return R;
      case 35680:
        return S;
      case 5124:
      case 35670:
        return P;
      case 35667:
      case 35671:
        return B;
      case 35668:
      case 35672:
        return K;
      case 35669:
      case 35673:
        return H;
    }
  }
  function V(d, n, a) {
    this.id = d;
    this.addr = a;
    this.setValue = M(n.type);
  }
  function ka(d, n, a) {
    this.id = d;
    this.addr = a;
    this.size = n.size;
    this.setValue = I(n.type);
  }
  function ma(d) {
    this.id = d;
    this.seq = [];
    this.map = {};
  }
  function Q(d, n, a) {
    this.seq = [];
    this.map = {};
    this.renderer = a;
    a = d.getProgramParameter(n, d.ACTIVE_UNIFORMS);
    for (var z = 0;z < a;++z) {
      var b = d.getActiveUniform(n, z), c = d.getUniformLocation(n, b.name), f = this, e = b.name, m = e.length;
      for (Zd.lastIndex = 0;;) {
        var g = Zd.exec(e), k = Zd.lastIndex, q = g[1], h = g[3];
        "]" === g[2] && (q |= 0);
        if (void 0 === h || "[" === h && k + 2 === m) {
          e = f;
          b = void 0 === h ? new V(q, b, c) : new ka(q, b, c);
          e.seq.push(b);
          e.map[b.id] = b;
          break;
        } else {
          h = f.map[q], void 0 === h && (h = new ma(q), q = f, f = h, q.seq.push(f), q.map[f.id] = f), f = h;
        }
      }
    }
  }
  function Z(d, n, a) {
    return void 0 === n && void 0 === a ? this.set(d) : this.setRGB(d, n, a);
  }
  function ra(d, n) {
    this.min = void 0 !== d ? d : new l(Infinity, Infinity);
    this.max = void 0 !== n ? n : new l(-Infinity, -Infinity);
  }
  function pa(d, n) {
    var a, b, c, e, m, g, k, q, h, r, p = d.context, t = d.state, w, u, v, C, y;
    this.render = function(z, E, T) {
      if (0 !== n.length) {
        z = new f;
        var U = T.w / T.z, W = .5 * T.z, ya = .5 * T.w, x = 16 / T.w, B = new l(x * U, x), A = new f(1, 1, 0), va = new l(1, 1), Yd = new ra;
        Yd.min.set(T.x, T.y);
        Yd.max.set(T.x + (T.z - 16), T.y + (T.w - 16));
        if (void 0 === v) {
          var x = new Float32Array([-1, -1, 0, 0, 1, -1, 1, 0, 1, 1, 1, 1, -1, 1, 0, 1]), F = new Uint16Array([0, 1, 2, 0, 2, 3]);
          w = p.createBuffer();
          u = p.createBuffer();
          p.bindBuffer(p.ARRAY_BUFFER, w);
          p.bufferData(p.ARRAY_BUFFER, x, p.STATIC_DRAW);
          p.bindBuffer(p.ELEMENT_ARRAY_BUFFER, u);
          p.bufferData(p.ELEMENT_ARRAY_BUFFER, F, p.STATIC_DRAW);
          C = p.createTexture();
          y = p.createTexture();
          t.bindTexture(p.TEXTURE_2D, C);
          p.texImage2D(p.TEXTURE_2D, 0, p.RGB, 16, 16, 0, p.RGB, p.UNSIGNED_BYTE, null);
          p.texParameteri(p.TEXTURE_2D, p.TEXTURE_WRAP_S, p.CLAMP_TO_EDGE);
          p.texParameteri(p.TEXTURE_2D, p.TEXTURE_WRAP_T, p.CLAMP_TO_EDGE);
          p.texParameteri(p.TEXTURE_2D, p.TEXTURE_MAG_FILTER, p.NEAREST);
          p.texParameteri(p.TEXTURE_2D, p.TEXTURE_MIN_FILTER, p.NEAREST);
          t.bindTexture(p.TEXTURE_2D, y);
          p.texImage2D(p.TEXTURE_2D, 0, p.RGBA, 16, 16, 0, p.RGBA, p.UNSIGNED_BYTE, null);
          p.texParameteri(p.TEXTURE_2D, p.TEXTURE_WRAP_S, p.CLAMP_TO_EDGE);
          p.texParameteri(p.TEXTURE_2D, p.TEXTURE_WRAP_T, p.CLAMP_TO_EDGE);
          p.texParameteri(p.TEXTURE_2D, p.TEXTURE_MAG_FILTER, p.NEAREST);
          p.texParameteri(p.TEXTURE_2D, p.TEXTURE_MIN_FILTER, p.NEAREST);
          var x = {vertexShader:"uniform lowp int renderType;\nuniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nuniform sampler2D occlusionMap;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nvUV = uv;\nvec2 pos = position;\nif ( renderType == 2 ) {\nvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\nvVisibility =        visibility.r / 9.0;\nvVisibility *= 1.0 - visibility.g / 9.0;\nvVisibility *=       visibility.b / 9.0;\nvVisibility *= 1.0 - visibility.a / 9.0;\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}", 
          fragmentShader:"uniform lowp int renderType;\nuniform sampler2D map;\nuniform float opacity;\nuniform vec3 color;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nif ( renderType == 0 ) {\ngl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\n} else if ( renderType == 1 ) {\ngl_FragColor = texture2D( map, vUV );\n} else {\nvec4 texture = texture2D( map, vUV );\ntexture.a *= opacity * vVisibility;\ngl_FragColor = texture;\ngl_FragColor.rgb *= color;\n}\n}"}, F = p.createProgram(), I = 
          p.createShader(p.FRAGMENT_SHADER), G = p.createShader(p.VERTEX_SHADER), D = "precision " + d.getPrecision() + " float;\n";
          p.shaderSource(I, D + x.fragmentShader);
          p.shaderSource(G, D + x.vertexShader);
          p.compileShader(I);
          p.compileShader(G);
          p.attachShader(F, I);
          p.attachShader(F, G);
          p.linkProgram(F);
          v = F;
          h = p.getAttribLocation(v, "position");
          r = p.getAttribLocation(v, "uv");
          a = p.getUniformLocation(v, "renderType");
          b = p.getUniformLocation(v, "map");
          c = p.getUniformLocation(v, "occlusionMap");
          e = p.getUniformLocation(v, "opacity");
          m = p.getUniformLocation(v, "color");
          g = p.getUniformLocation(v, "scale");
          k = p.getUniformLocation(v, "rotation");
          q = p.getUniformLocation(v, "screenPosition");
        }
        p.useProgram(v);
        t.initAttributes();
        t.enableAttribute(h);
        t.enableAttribute(r);
        t.disableUnusedAttributes();
        p.uniform1i(c, 0);
        p.uniform1i(b, 1);
        p.bindBuffer(p.ARRAY_BUFFER, w);
        p.vertexAttribPointer(h, 2, p.FLOAT, !1, 16, 0);
        p.vertexAttribPointer(r, 2, p.FLOAT, !1, 16, 8);
        p.bindBuffer(p.ELEMENT_ARRAY_BUFFER, u);
        t.disable(p.CULL_FACE);
        t.buffers.depth.setMask(!1);
        F = 0;
        for (I = n.length;F < I;F++) {
          if (x = 16 / T.w, B.set(x * U, x), G = n[F], z.set(G.matrixWorld.elements[12], G.matrixWorld.elements[13], G.matrixWorld.elements[14]), z.applyMatrix4(E.matrixWorldInverse), z.applyMatrix4(E.projectionMatrix), A.copy(z), va.x = T.x + A.x * W + W - 8, va.y = T.y + A.y * ya + ya - 8, !0 === Yd.containsPoint(va)) {
            t.activeTexture(p.TEXTURE0);
            t.bindTexture(p.TEXTURE_2D, null);
            t.activeTexture(p.TEXTURE1);
            t.bindTexture(p.TEXTURE_2D, C);
            p.copyTexImage2D(p.TEXTURE_2D, 0, p.RGB, va.x, va.y, 16, 16, 0);
            p.uniform1i(a, 0);
            p.uniform2f(g, B.x, B.y);
            p.uniform3f(q, A.x, A.y, A.z);
            t.disable(p.BLEND);
            t.enable(p.DEPTH_TEST);
            p.drawElements(p.TRIANGLES, 6, p.UNSIGNED_SHORT, 0);
            t.activeTexture(p.TEXTURE0);
            t.bindTexture(p.TEXTURE_2D, y);
            p.copyTexImage2D(p.TEXTURE_2D, 0, p.RGBA, va.x, va.y, 16, 16, 0);
            p.uniform1i(a, 1);
            t.disable(p.DEPTH_TEST);
            t.activeTexture(p.TEXTURE1);
            t.bindTexture(p.TEXTURE_2D, C);
            p.drawElements(p.TRIANGLES, 6, p.UNSIGNED_SHORT, 0);
            G.positionScreen.copy(A);
            G.customUpdateCallback ? G.customUpdateCallback(G) : G.updateLensFlares();
            p.uniform1i(a, 2);
            t.enable(p.BLEND);
            for (var D = 0, cf = G.lensFlares.length;D < cf;D++) {
              var Na = G.lensFlares[D];
              .001 < Na.opacity && .001 < Na.scale && (A.x = Na.x, A.y = Na.y, A.z = Na.z, x = Na.size * Na.scale / T.w, B.x = x * U, B.y = x, p.uniform3f(q, A.x, A.y, A.z), p.uniform2f(g, B.x, B.y), p.uniform1f(k, Na.rotation), p.uniform1f(e, Na.opacity), p.uniform3f(m, Na.color.r, Na.color.g, Na.color.b), t.setBlending(Na.blending, Na.blendEquation, Na.blendSrc, Na.blendDst), d.setTexture2D(Na.texture, 1), p.drawElements(p.TRIANGLES, 6, p.UNSIGNED_SHORT, 0));
            }
          }
        }
        t.enable(p.CULL_FACE);
        t.enable(p.DEPTH_TEST);
        t.buffers.depth.setMask(!0);
        d.resetGLState();
      }
    };
  }
  function fa(d, n) {
    function a(d, n) {
      return d.renderOrder !== n.renderOrder ? d.renderOrder - n.renderOrder : d.z !== n.z ? n.z - d.z : n.id - d.id;
    }
    var E, c, m, g, k, q, h, p, r, t, l, w, u, v, C, y, x, A = d.context, B = d.state, F, G, I, D, K = new f, V = new e, H = new f;
    this.render = function(z, f) {
      if (0 !== n.length) {
        if (void 0 === I) {
          var e = new Float32Array([-.5, -.5, 0, 0, .5, -.5, 1, 0, .5, .5, 1, 1, -.5, .5, 0, 1]), T = new Uint16Array([0, 1, 2, 0, 2, 3]);
          F = A.createBuffer();
          G = A.createBuffer();
          A.bindBuffer(A.ARRAY_BUFFER, F);
          A.bufferData(A.ARRAY_BUFFER, e, A.STATIC_DRAW);
          A.bindBuffer(A.ELEMENT_ARRAY_BUFFER, G);
          A.bufferData(A.ELEMENT_ARRAY_BUFFER, T, A.STATIC_DRAW);
          var e = A.createProgram(), T = A.createShader(A.VERTEX_SHADER), U = A.createShader(A.FRAGMENT_SHADER);
          A.shaderSource(T, ["precision " + d.getPrecision() + " float;", "uniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float rotation;\nuniform vec2 scale;\nuniform vec2 uvOffset;\nuniform vec2 uvScale;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\nvUV = uvOffset + uv * uvScale;\nvec2 alignedPosition = position * scale;\nvec2 rotatedPosition;\nrotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\nrotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\nvec4 finalPosition;\nfinalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\nfinalPosition.xy += rotatedPosition;\nfinalPosition = projectionMatrix * finalPosition;\ngl_Position = finalPosition;\n}"].join("\n"));
          A.shaderSource(U, ["precision " + d.getPrecision() + " float;", "uniform vec3 color;\nuniform sampler2D map;\nuniform float opacity;\nuniform int fogType;\nuniform vec3 fogColor;\nuniform float fogDensity;\nuniform float fogNear;\nuniform float fogFar;\nuniform float alphaTest;\nvarying vec2 vUV;\nvoid main() {\nvec4 texture = texture2D( map, vUV );\nif ( texture.a < alphaTest ) discard;\ngl_FragColor = vec4( color * texture.xyz, texture.a * opacity );\nif ( fogType > 0 ) {\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\nfloat fogFactor = 0.0;\nif ( fogType == 1 ) {\nfogFactor = smoothstep( fogNear, fogFar, depth );\n} else {\nconst float LOG2 = 1.442695;\nfogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\nfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\n}\ngl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n}\n}"].join("\n"));
          A.compileShader(T);
          A.compileShader(U);
          A.attachShader(e, T);
          A.attachShader(e, U);
          A.linkProgram(e);
          I = e;
          y = A.getAttribLocation(I, "position");
          x = A.getAttribLocation(I, "uv");
          E = A.getUniformLocation(I, "uvOffset");
          c = A.getUniformLocation(I, "uvScale");
          m = A.getUniformLocation(I, "rotation");
          g = A.getUniformLocation(I, "scale");
          k = A.getUniformLocation(I, "color");
          q = A.getUniformLocation(I, "map");
          h = A.getUniformLocation(I, "opacity");
          p = A.getUniformLocation(I, "modelViewMatrix");
          r = A.getUniformLocation(I, "projectionMatrix");
          t = A.getUniformLocation(I, "fogType");
          l = A.getUniformLocation(I, "fogDensity");
          w = A.getUniformLocation(I, "fogNear");
          u = A.getUniformLocation(I, "fogFar");
          v = A.getUniformLocation(I, "fogColor");
          C = A.getUniformLocation(I, "alphaTest");
          e = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
          e.width = 8;
          e.height = 8;
          T = e.getContext("2d");
          T.fillStyle = "white";
          T.fillRect(0, 0, 8, 8);
          D = new b(e);
          D.needsUpdate = !0;
        }
        A.useProgram(I);
        B.initAttributes();
        B.enableAttribute(y);
        B.enableAttribute(x);
        B.disableUnusedAttributes();
        B.disable(A.CULL_FACE);
        B.enable(A.BLEND);
        A.bindBuffer(A.ARRAY_BUFFER, F);
        A.vertexAttribPointer(y, 2, A.FLOAT, !1, 16, 0);
        A.vertexAttribPointer(x, 2, A.FLOAT, !1, 16, 8);
        A.bindBuffer(A.ELEMENT_ARRAY_BUFFER, G);
        A.uniformMatrix4fv(r, !1, f.projectionMatrix.elements);
        B.activeTexture(A.TEXTURE0);
        A.uniform1i(q, 0);
        T = e = 0;
        (U = z.fog) ? (A.uniform3f(v, U.color.r, U.color.g, U.color.b), U.isFog ? (A.uniform1f(w, U.near), A.uniform1f(u, U.far), A.uniform1i(t, 1), T = e = 1) : U.isFogExp2 && (A.uniform1f(l, U.density), A.uniform1i(t, 2), T = e = 2)) : (A.uniform1i(t, 0), T = e = 0);
        for (var U = 0, W = n.length;U < W;U++) {
          var ya = n[U];
          ya.modelViewMatrix.multiplyMatrices(f.matrixWorldInverse, ya.matrixWorld);
          ya.z = -ya.modelViewMatrix.elements[14];
        }
        n.sort(a);
        f = [];
        U = 0;
        for (W = n.length;U < W;U++) {
          var ya = n[U], va = ya.material;
          !1 !== va.visible && (A.uniform1f(C, va.alphaTest), A.uniformMatrix4fv(p, !1, ya.modelViewMatrix.elements), ya.matrixWorld.decompose(K, V, H), f[0] = H.x, f[1] = H.y, ya = 0, z.fog && va.fog && (ya = T), e !== ya && (A.uniform1i(t, ya), e = ya), null !== va.map ? (A.uniform2f(E, va.map.offset.x, va.map.offset.y), A.uniform2f(c, va.map.repeat.x, va.map.repeat.y)) : (A.uniform2f(E, 0, 0), A.uniform2f(c, 1, 1)), A.uniform1f(h, va.opacity), A.uniform3f(k, va.color.r, va.color.g, va.color.b), 
          A.uniform1f(m, va.rotation), A.uniform2fv(g, f), B.setBlending(va.blending, va.blendEquation, va.blendSrc, va.blendDst), B.buffers.depth.setTest(va.depthTest), B.buffers.depth.setMask(va.depthWrite), va.map ? d.setTexture2D(va.map, 0) : d.setTexture2D(D, 0), A.drawElements(A.TRIANGLES, 6, A.UNSIGNED_SHORT, 0));
        }
        B.enable(A.CULL_FACE);
        d.resetGLState();
      }
    };
  }
  function X() {
    Object.defineProperty(this, "id", {value:ef++});
    this.uuid = na.generateUUID();
    this.name = "";
    this.type = "Material";
    this.lights = this.fog = !0;
    this.blending = 1;
    this.side = 0;
    this.shading = 2;
    this.vertexColors = 0;
    this.opacity = 1;
    this.transparent = !1;
    this.blendSrc = 204;
    this.blendDst = 205;
    this.blendEquation = 100;
    this.blendEquationAlpha = this.blendDstAlpha = this.blendSrcAlpha = null;
    this.depthFunc = 3;
    this.depthWrite = this.depthTest = !0;
    this.clippingPlanes = null;
    this.clipShadows = this.clipIntersection = !1;
    this.colorWrite = !0;
    this.precision = null;
    this.polygonOffset = !1;
    this.alphaTest = this.polygonOffsetUnits = this.polygonOffsetFactor = 0;
    this.premultipliedAlpha = !1;
    this.overdraw = 0;
    this.needsUpdate = this.visible = !0;
  }
  function ta(d) {
    X.call(this);
    this.type = "ShaderMaterial";
    this.defines = {};
    this.uniforms = {};
    this.vertexShader = "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";
    this.fragmentShader = "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";
    this.linewidth = 1;
    this.wireframe = !1;
    this.wireframeLinewidth = 1;
    this.morphNormals = this.morphTargets = this.skinning = this.clipping = this.lights = this.fog = !1;
    this.extensions = {derivatives:!1, fragDepth:!1, drawBuffers:!1, shaderTextureLOD:!1};
    this.defaultAttributeValues = {color:[1, 1, 1], uv:[0, 0], uv2:[0, 0]};
    this.index0AttributeName = void 0;
    void 0 !== d && (void 0 !== d.attributes && console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."), this.setValues(d));
  }
  function Ba(d) {
    X.call(this);
    this.type = "MeshDepthMaterial";
    this.depthPacking = 3200;
    this.morphTargets = this.skinning = !1;
    this.displacementMap = this.alphaMap = this.map = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.wireframe = !1;
    this.wireframeLinewidth = 1;
    this.lights = this.fog = !1;
    this.setValues(d);
  }
  function Aa(d, n) {
    this.min = void 0 !== d ? d : new f(Infinity, Infinity, Infinity);
    this.max = void 0 !== n ? n : new f(-Infinity, -Infinity, -Infinity);
  }
  function Ca(d, n) {
    this.center = void 0 !== d ? d : new f;
    this.radius = void 0 !== n ? n : 0;
  }
  function sa() {
    this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1];
    0 < arguments.length && console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.");
  }
  function ua(d, n) {
    this.normal = void 0 !== d ? d : new f(1, 0, 0);
    this.constant = void 0 !== n ? n : 0;
  }
  function Va(d, n, a, b, c, f) {
    this.planes = [void 0 !== d ? d : new ua, void 0 !== n ? n : new ua, void 0 !== a ? a : new ua, void 0 !== b ? b : new ua, void 0 !== c ? c : new ua, void 0 !== f ? f : new ua];
  }
  function qd(d, n, a, b) {
    function z(n, a, z, b) {
      var E = n.geometry, c;
      c = v;
      var f = n.customDepthMaterial;
      z && (c = C, f = n.customDistanceMaterial);
      f ? c = f : (f = !1, a.morphTargets && (E && E.isBufferGeometry ? f = E.morphAttributes && E.morphAttributes.position && 0 < E.morphAttributes.position.length : E && E.isGeometry && (f = E.morphTargets && 0 < E.morphTargets.length)), n.isSkinnedMesh && !1 === a.skinning && console.warn("THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:", n), n = n.isSkinnedMesh && a.skinning, E = 0, f && (E |= 1), n && (E |= 2), c = c[E]);
      d.localClippingEnabled && !0 === a.clipShadows && 0 !== a.clippingPlanes.length && (E = c.uuid, f = a.uuid, n = y[E], void 0 === n && (n = {}, y[E] = n), E = n[f], void 0 === E && (E = c.clone(), n[f] = E), c = E);
      c.visible = a.visible;
      c.wireframe = a.wireframe;
      f = a.side;
      V.renderSingleSided && 2 == f && (f = 0);
      V.renderReverseSided && (0 === f ? f = 1 : 1 === f && (f = 0));
      c.side = f;
      c.clipShadows = a.clipShadows;
      c.clippingPlanes = a.clippingPlanes;
      c.wireframeLinewidth = a.wireframeLinewidth;
      c.linewidth = a.linewidth;
      z && void 0 !== c.uniforms.lightPos && c.uniforms.lightPos.value.copy(b);
      return c;
    }
    function E(n, b, c, f) {
      if (!1 !== n.visible) {
        if (n.layers.test(b.layers) && (n.isMesh || n.isLine || n.isPoints) && n.castShadow && (!n.frustumCulled || m.intersectsObject(n))) {
          n.modelViewMatrix.multiplyMatrices(c.matrixWorldInverse, n.matrixWorld);
          var e = a.update(n), g = n.material;
          if (Array.isArray(g)) {
            for (var k = e.groups, q = 0, h = k.length;q < h;q++) {
              var T = k[q], p = g[T.materialIndex];
              p && p.visible && (p = z(n, p, f, u), d.renderBufferDirect(c, null, e, p, n, T));
            }
          } else {
            g.visible && (p = z(n, g, f, u), d.renderBufferDirect(c, null, e, p, n, null));
          }
        }
        n = n.children;
        e = 0;
        for (g = n.length;e < g;e++) {
          E(n[e], b, c, f);
        }
      }
    }
    var c = d.context, e = d.state, m = new Va, h = new q, p = n.shadows, r = new l, t = new l(b.maxTextureSize, b.maxTextureSize), w = new f, u = new f, v = Array(4), C = Array(4), y = {}, A = [new f(1, 0, 0), new f(-1, 0, 0), new f(0, 0, 1), new f(0, 0, -1), new f(0, 1, 0), new f(0, -1, 0)], x = [new f(0, 1, 0), new f(0, 1, 0), new f(0, 1, 0), new f(0, 1, 0), new f(0, 0, 1), new f(0, 0, -1)], B = [new g, new g, new g, new g, new g, new g];
    n = new Ba;
    n.depthPacking = 3201;
    n.clipping = !0;
    b = xb.distanceRGBA;
    for (var F = Ta.clone(b.uniforms), I = 0;4 !== I;++I) {
      var G = 0 !== (I & 1), D = 0 !== (I & 2), K = n.clone();
      K.morphTargets = G;
      K.skinning = D;
      v[I] = K;
      G = new ta({defines:{USE_SHADOWMAP:""}, uniforms:F, vertexShader:b.vertexShader, fragmentShader:b.fragmentShader, morphTargets:G, skinning:D, clipping:!0});
      C[I] = G;
    }
    var V = this;
    this.enabled = !1;
    this.autoUpdate = !0;
    this.needsUpdate = !1;
    this.type = 1;
    this.renderSingleSided = this.renderReverseSided = !0;
    this.render = function(n, a) {
      if (!1 !== V.enabled && (!1 !== V.autoUpdate || !1 !== V.needsUpdate) && 0 !== p.length) {
        e.disable(c.BLEND);
        e.buffers.color.setClear(1, 1, 1, 1);
        e.buffers.depth.setTest(!0);
        e.setScissorTest(!1);
        for (var z, b, f = 0, g = p.length;f < g;f++) {
          var q = p[f], T = q.shadow;
          if (void 0 === T) {
            console.warn("THREE.WebGLShadowMap:", q, "has no shadow.");
          } else {
            var l = T.camera;
            r.copy(T.mapSize);
            r.min(t);
            if (q && q.isPointLight) {
              z = 6;
              b = !0;
              var U = r.x, W = r.y;
              B[0].set(2 * U, W, U, W);
              B[1].set(0, W, U, W);
              B[2].set(3 * U, W, U, W);
              B[3].set(U, W, U, W);
              B[4].set(3 * U, 0, U, W);
              B[5].set(U, 0, U, W);
              r.x *= 4;
              r.y *= 2;
            } else {
              z = 1, b = !1;
            }
            null === T.map && (T.map = new k(r.x, r.y, {minFilter:1003, magFilter:1003, format:1023}), T.map.texture.name = q.name + ".shadowMap", l.updateProjectionMatrix());
            T.isSpotLightShadow && T.update(q);
            U = T.map;
            T = T.matrix;
            u.setFromMatrixPosition(q.matrixWorld);
            l.position.copy(u);
            d.setRenderTarget(U);
            d.clear();
            for (U = 0;U < z;U++) {
              b ? (w.copy(l.position), w.add(A[U]), l.up.copy(x[U]), l.lookAt(w), e.viewport(B[U])) : (w.setFromMatrixPosition(q.target.matrixWorld), l.lookAt(w)), l.updateMatrixWorld(), l.matrixWorldInverse.getInverse(l.matrixWorld), T.set(.5, 0, 0, .5, 0, .5, 0, .5, 0, 0, .5, .5, 0, 0, 0, 1), T.multiply(l.projectionMatrix), T.multiply(l.matrixWorldInverse), h.multiplyMatrices(l.projectionMatrix, l.matrixWorldInverse), m.setFromMatrix(h), E(n, a, l, b);
            }
          }
        }
        z = d.getClearColor();
        b = d.getClearAlpha();
        d.setClearColor(z, b);
        V.needsUpdate = !1;
      }
    };
  }
  function qb(d, n) {
    this.origin = void 0 !== d ? d : new f;
    this.direction = void 0 !== n ? n : new f;
  }
  function kb(d, n, a, b) {
    this._x = d || 0;
    this._y = n || 0;
    this._z = a || 0;
    this._order = b || kb.DefaultOrder;
  }
  function Fc() {
    this.mask = 1;
  }
  function aa() {
    Object.defineProperty(this, "id", {value:ff++});
    this.uuid = na.generateUUID();
    this.name = "";
    this.type = "Object3D";
    this.parent = null;
    this.children = [];
    this.up = aa.DefaultUp.clone();
    var d = new f, n = new e, a = new f(1, 1, 1), b = new kb;
    b.onChange(function() {
      n.setFromEuler(b);
    });
    Object.defineProperties(this, {position:{enumerable:!0, value:d}, rotation:{enumerable:!0, value:b}, quaternion:{enumerable:!0, value:n}, scale:{enumerable:!0, value:a}, modelViewMatrix:{value:new q}, normalMatrix:{value:new sa}});
    this.matrix = new q;
    this.matrixWorld = new q;
    this.matrixAutoUpdate = aa.DefaultMatrixAutoUpdate;
    this.matrixWorldNeedsUpdate = !1;
    this.layers = new Fc;
    this.visible = !0;
    this.receiveShadow = this.castShadow = !1;
    this.frustumCulled = !0;
    this.renderOrder = 0;
    this.userData = {};
    this.onBeforeRender = function() {
    };
    this.onAfterRender = function() {
    };
  }
  function yb(d, n) {
    this.start = void 0 !== d ? d : new f;
    this.end = void 0 !== n ? n : new f;
  }
  function Ja(d, n, a) {
    this.a = void 0 !== d ? d : new f;
    this.b = void 0 !== n ? n : new f;
    this.c = void 0 !== a ? a : new f;
  }
  function Ha(d, n, a, b, c, e) {
    this.a = d;
    this.b = n;
    this.c = a;
    this.normal = b && b.isVector3 ? b : new f;
    this.vertexNormals = Array.isArray(b) ? b : [];
    this.color = c && c.isColor ? c : new Z;
    this.vertexColors = Array.isArray(c) ? c : [];
    this.materialIndex = void 0 !== e ? e : 0;
  }
  function La(d) {
    X.call(this);
    this.type = "MeshBasicMaterial";
    this.color = new Z(16777215);
    this.lightMap = this.map = null;
    this.lightMapIntensity = 1;
    this.aoMap = null;
    this.aoMapIntensity = 1;
    this.envMap = this.alphaMap = this.specularMap = null;
    this.combine = 0;
    this.reflectivity = 1;
    this.refractionRatio = .98;
    this.wireframe = !1;
    this.wireframeLinewidth = 1;
    this.wireframeLinejoin = this.wireframeLinecap = "round";
    this.lights = this.morphTargets = this.skinning = !1;
    this.setValues(d);
  }
  function ja(d, n, a) {
    if (Array.isArray(d)) {
      throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
    }
    this.uuid = na.generateUUID();
    this.array = d;
    this.itemSize = n;
    this.count = void 0 !== d ? d.length / n : 0;
    this.normalized = !0 === a;
    this.dynamic = !1;
    this.updateRange = {offset:0, count:-1};
    this.onUploadCallback = function() {
    };
    this.version = 0;
  }
  function rb(d, n) {
    ja.call(this, new Int8Array(d), n);
  }
  function lb(d, n) {
    ja.call(this, new Uint8Array(d), n);
  }
  function Wa(d, n) {
    ja.call(this, new Uint8ClampedArray(d), n);
  }
  function zb(d, n) {
    ja.call(this, new Int16Array(d), n);
  }
  function Za(d, n) {
    ja.call(this, new Uint16Array(d), n);
  }
  function $a(d, n) {
    ja.call(this, new Int32Array(d), n);
  }
  function mb(d, n) {
    ja.call(this, new Uint32Array(d), n);
  }
  function Y(d, n) {
    ja.call(this, new Float32Array(d), n);
  }
  function sb(d, n) {
    ja.call(this, new Float64Array(d), n);
  }
  function Gc() {
    this.indices = [];
    this.vertices = [];
    this.normals = [];
    this.colors = [];
    this.uvs = [];
    this.uvs2 = [];
    this.groups = [];
    this.morphTargets = {};
    this.skinWeights = [];
    this.skinIndices = [];
    this.boundingSphere = this.boundingBox = null;
    this.groupsNeedUpdate = this.uvsNeedUpdate = this.colorsNeedUpdate = this.normalsNeedUpdate = this.verticesNeedUpdate = !1;
  }
  function nb(d) {
    for (var n = d.length, a = -Infinity;n--;) {
      d[n] > a && (a = d[n]);
    }
    return a;
  }
  function ga() {
    Object.defineProperty(this, "id", {value:$d++});
    this.uuid = na.generateUUID();
    this.name = "";
    this.type = "Geometry";
    this.vertices = [];
    this.colors = [];
    this.faces = [];
    this.faceVertexUvs = [[]];
    this.morphTargets = [];
    this.morphNormals = [];
    this.skinWeights = [];
    this.skinIndices = [];
    this.lineDistances = [];
    this.boundingSphere = this.boundingBox = null;
    this.groupsNeedUpdate = this.lineDistancesNeedUpdate = this.colorsNeedUpdate = this.normalsNeedUpdate = this.uvsNeedUpdate = this.verticesNeedUpdate = this.elementsNeedUpdate = !1;
  }
  function ea() {
    Object.defineProperty(this, "id", {value:$d++});
    this.uuid = na.generateUUID();
    this.name = "";
    this.type = "BufferGeometry";
    this.index = null;
    this.attributes = {};
    this.morphAttributes = {};
    this.groups = [];
    this.boundingSphere = this.boundingBox = null;
    this.drawRange = {start:0, count:Infinity};
  }
  function Ia(d, n) {
    aa.call(this);
    this.type = "Mesh";
    this.geometry = void 0 !== d ? d : new ea;
    this.material = void 0 !== n ? n : new La({color:16777215 * Math.random()});
    this.drawMode = 0;
    this.updateMorphTargets();
  }
  function Oa(d, n, a, b, c, f) {
    ga.call(this);
    this.type = "BoxGeometry";
    this.parameters = {width:d, height:n, depth:a, widthSegments:b, heightSegments:c, depthSegments:f};
    this.fromBufferGeometry(new Ua(d, n, a, b, c, f));
    this.mergeVertices();
  }
  function Ua(d, n, a, b, c, e) {
    function z(d, n, a, z, b, c, e, p, r, t, l) {
      var w = c / r, U = e / t, W = c / 2, u = e / 2, v = p / 2;
      e = r + 1;
      var C = t + 1, ya = c = 0, y, A, x = new f;
      for (A = 0;A < C;A++) {
        var B = A * U - u;
        for (y = 0;y < e;y++) {
          x[d] = (y * w - W) * z, x[n] = B * b, x[a] = v, g.push(x.x, x.y, x.z), x[d] = 0, x[n] = 0, x[a] = 0 < p ? 1 : -1, k.push(x.x, x.y, x.z), q.push(y / r), q.push(1 - A / t), c += 1;
        }
      }
      for (A = 0;A < t;A++) {
        for (y = 0;y < r;y++) {
          d = h + y + e * (A + 1), n = h + (y + 1) + e * (A + 1), a = h + (y + 1) + e * A, m.push(h + y + e * A, d, a), m.push(d, n, a), ya += 6;
        }
      }
      E.addGroup(T, ya, l);
      T += ya;
      h += c;
    }
    ea.call(this);
    this.type = "BoxBufferGeometry";
    this.parameters = {width:d, height:n, depth:a, widthSegments:b, heightSegments:c, depthSegments:e};
    var E = this;
    b = Math.floor(b) || 1;
    c = Math.floor(c) || 1;
    e = Math.floor(e) || 1;
    var m = [], g = [], k = [], q = [], h = 0, T = 0;
    z("z", "y", "x", -1, -1, a, n, d, e, c, 0);
    z("z", "y", "x", 1, -1, a, n, -d, e, c, 1);
    z("x", "z", "y", 1, 1, d, a, n, b, e, 2);
    z("x", "z", "y", 1, -1, d, a, -n, b, e, 3);
    z("x", "y", "z", 1, -1, d, n, a, b, c, 4);
    z("x", "y", "z", -1, -1, d, n, -a, b, c, 5);
    this.setIndex(m);
    this.addAttribute("position", new Y(g, 3));
    this.addAttribute("normal", new Y(k, 3));
    this.addAttribute("uv", new Y(q, 2));
  }
  function Ga(d, n, a, b) {
    ga.call(this);
    this.type = "PlaneGeometry";
    this.parameters = {width:d, height:n, widthSegments:a, heightSegments:b};
    this.fromBufferGeometry(new Cb(d, n, a, b));
  }
  function Cb(d, n, a, b) {
    ea.call(this);
    this.type = "PlaneBufferGeometry";
    this.parameters = {width:d, height:n, widthSegments:a, heightSegments:b};
    var z = d / 2, c = n / 2;
    a = Math.floor(a) || 1;
    b = Math.floor(b) || 1;
    var f = a + 1, E = b + 1, e = d / a, m = n / b, g = [], k = [], q = [], h = [];
    for (d = 0;d < E;d++) {
      var p = d * m - c;
      for (n = 0;n < f;n++) {
        k.push(n * e - z, -p, 0), q.push(0, 0, 1), h.push(n / a), h.push(1 - d / b);
      }
    }
    for (d = 0;d < b;d++) {
      for (n = 0;n < a;n++) {
        z = n + f * (d + 1), c = n + 1 + f * (d + 1), E = n + 1 + f * d, g.push(n + f * d, z, E), g.push(z, c, E);
      }
    }
    this.setIndex(g);
    this.addAttribute("position", new Y(k, 3));
    this.addAttribute("normal", new Y(q, 3));
    this.addAttribute("uv", new Y(h, 2));
  }
  function Ka() {
    aa.call(this);
    this.type = "Camera";
    this.matrixWorldInverse = new q;
    this.projectionMatrix = new q;
  }
  function Ma(d, n, a, b) {
    Ka.call(this);
    this.type = "PerspectiveCamera";
    this.fov = void 0 !== d ? d : 50;
    this.zoom = 1;
    this.near = void 0 !== a ? a : .1;
    this.far = void 0 !== b ? b : 2E3;
    this.focus = 10;
    this.aspect = void 0 !== n ? n : 1;
    this.view = null;
    this.filmGauge = 35;
    this.filmOffset = 0;
    this.updateProjectionMatrix();
  }
  function Wb(d, n, a, b, c, f) {
    Ka.call(this);
    this.type = "OrthographicCamera";
    this.zoom = 1;
    this.view = null;
    this.left = d;
    this.right = n;
    this.top = a;
    this.bottom = b;
    this.near = void 0 !== c ? c : .1;
    this.far = void 0 !== f ? f : 2E3;
    this.updateProjectionMatrix();
  }
  function gf(d) {
    var n = {};
    return {get:function(d) {
      d.isInterleavedBufferAttribute && (d = d.data);
      return n[d.uuid];
    }, remove:function(a) {
      var z = n[a.uuid];
      z && (d.deleteBuffer(z.buffer), delete n[a.uuid]);
    }, update:function(a, b) {
      a.isInterleavedBufferAttribute && (a = a.data);
      var z = n[a.uuid];
      if (void 0 === z) {
        var z = a.uuid, c = a, f = c.array;
        a = c.dynamic ? d.DYNAMIC_DRAW : d.STATIC_DRAW;
        var E = d.createBuffer();
        d.bindBuffer(b, E);
        d.bufferData(b, f, a);
        c.onUploadCallback();
        a = d.FLOAT;
        f instanceof Float32Array ? a = d.FLOAT : f instanceof Float64Array ? console.warn("Unsupported data buffer format: Float64Array") : f instanceof Uint16Array ? a = d.UNSIGNED_SHORT : f instanceof Int16Array ? a = d.SHORT : f instanceof Uint32Array ? a = d.UNSIGNED_INT : f instanceof Int32Array ? a = d.INT : f instanceof Int8Array ? a = d.BYTE : f instanceof Uint8Array && (a = d.UNSIGNED_BYTE);
        n[z] = {buffer:E, type:a, bytesPerElement:f.BYTES_PER_ELEMENT, version:c.version};
      } else {
        z.version < a.version && (c = a, f = c.array, E = c.updateRange, d.bindBuffer(b, z.buffer), !1 === c.dynamic ? d.bufferData(b, f, d.STATIC_DRAW) : -1 === E.count ? d.bufferSubData(b, 0, f) : 0 === E.count ? console.error("THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.") : (d.bufferSubData(b, E.offset * f.BYTES_PER_ELEMENT, f.subarray(E.offset, E.offset + E.count)), E.count = 
        0), z.version = a.version);
      }
    }};
  }
  function Hc(d, n) {
    return d.renderOrder !== n.renderOrder ? d.renderOrder - n.renderOrder : d.program && n.program && d.program !== n.program ? d.program.id - n.program.id : d.material.id !== n.material.id ? d.material.id - n.material.id : d.z !== n.z ? d.z - n.z : d.id - n.id;
  }
  function Db(d, n) {
    return d.renderOrder !== n.renderOrder ? d.renderOrder - n.renderOrder : d.z !== n.z ? n.z - d.z : d.id - n.id;
  }
  function rd() {
    var d = [], n = -1, a = [], b = -1;
    return {opaque:d, transparent:a, init:function() {
      b = n = -1;
    }, push:function(z, c, f, E, e) {
      var m, g;
      f.transparent ? (m = a, g = ++b) : (m = d, g = ++n);
      (g = m[g]) ? (g.id = z.id, g.object = z, g.geometry = c, g.material = f, g.program = f.program, g.renderOrder = z.renderOrder, g.z = E, g.group = e) : (g = {id:z.id, object:z, geometry:c, material:f, program:f.program, renderOrder:z.renderOrder, z:E, group:e}, m.push(g));
    }, finish:function() {
      d.length = n + 1;
      a.length = b + 1;
    }, sort:function() {
      d.sort(Hc);
      a.sort(Db);
    }};
  }
  function hf() {
    var d = {};
    return {get:function(n, a) {
      n = n.id + "," + a.id;
      a = d[n];
      void 0 === a && (console.log("THREE.WebGLRenderLists:", n), a = new rd, d[n] = a);
      return a;
    }, dispose:function() {
      d = {};
    }};
  }
  function jf(d, n, a) {
    var z, b, c;
    this.setMode = function(d) {
      z = d;
    };
    this.setIndex = function(a) {
      a.array instanceof Uint32Array && n.get("OES_element_index_uint") ? (b = d.UNSIGNED_INT, c = 4) : a.array instanceof Uint16Array ? (b = d.UNSIGNED_SHORT, c = 2) : (b = d.UNSIGNED_BYTE, c = 1);
    };
    this.render = function(n, f) {
      d.drawElements(z, f, b, n * c);
      a.calls++;
      a.vertices += f;
      z === d.TRIANGLES && (a.faces += f / 3);
    };
    this.renderInstances = function(f, E, e) {
      var g = n.get("ANGLE_instanced_arrays");
      null === g ? console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.") : (g.drawElementsInstancedANGLE(z, e, b, E * c, f.maxInstancedCount), a.calls++, a.vertices += e * f.maxInstancedCount, z === d.TRIANGLES && (a.faces += f.maxInstancedCount * e / 3));
    };
  }
  function kf(d, n, a) {
    var z;
    this.setMode = function(d) {
      z = d;
    };
    this.render = function(n, b) {
      d.drawArrays(z, n, b);
      a.calls++;
      a.vertices += b;
      z === d.TRIANGLES && (a.faces += b / 3);
    };
    this.renderInstances = function(b, c, f) {
      var E = n.get("ANGLE_instanced_arrays");
      if (null === E) {
        console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
      } else {
        var e = b.attributes.position;
        e.isInterleavedBufferAttribute ? (f = e.data.count, E.drawArraysInstancedANGLE(z, 0, f, b.maxInstancedCount)) : E.drawArraysInstancedANGLE(z, c, f, b.maxInstancedCount);
        a.calls++;
        a.vertices += f * b.maxInstancedCount;
        z === d.TRIANGLES && (a.faces += b.maxInstancedCount * f / 3);
      }
    };
  }
  function lf(d, n, a) {
    function z(d) {
      d = d.target;
      var f = b[d.id];
      null !== f.index && n.remove(f.index);
      for (var E in f.attributes) {
        n.remove(f.attributes[E]);
      }
      d.removeEventListener("dispose", z);
      delete b[d.id];
      if (E = c[d.id]) {
        n.remove(E), delete c[d.id];
      }
      if (E = c[f.id]) {
        n.remove(E), delete c[f.id];
      }
      a.geometries--;
    }
    var b = {}, c = {};
    return {get:function(d, n) {
      var c = b[n.id];
      if (c) {
        return c;
      }
      n.addEventListener("dispose", z);
      n.isBufferGeometry ? c = n : n.isGeometry && (void 0 === n._bufferGeometry && (n._bufferGeometry = (new ea).setFromObject(d)), c = n._bufferGeometry);
      b[n.id] = c;
      a.geometries++;
      return c;
    }, update:function(a) {
      var z = a.index, b = a.attributes;
      null !== z && n.update(z, d.ELEMENT_ARRAY_BUFFER);
      for (var c in b) {
        n.update(b[c], d.ARRAY_BUFFER);
      }
      a = a.morphAttributes;
      for (c in a) {
        for (var z = a[c], b = 0, f = z.length;b < f;b++) {
          n.update(z[b], d.ARRAY_BUFFER);
        }
      }
    }, getWireframeAttribute:function(a) {
      var z = c[a.id];
      if (z) {
        return z;
      }
      var z = [], b = a.index, f = a.attributes;
      if (null !== b) {
        for (var b = b.array, f = 0, E = b.length;f < E;f += 3) {
          var e = b[f + 0], g = b[f + 1], m = b[f + 2];
          z.push(e, g, g, m, m, e);
        }
      } else {
        for (b = f.position.array, f = 0, E = b.length / 3 - 1;f < E;f += 3) {
          e = f + 0, g = f + 1, m = f + 2, z.push(e, g, g, m, m, e);
        }
      }
      z = new (65535 < nb(z) ? mb : Za)(z, 1);
      n.update(z, d.ELEMENT_ARRAY_BUFFER);
      return c[a.id] = z;
    }};
  }
  function mf() {
    var d = {};
    return {get:function(n) {
      if (void 0 !== d[n.id]) {
        return d[n.id];
      }
      var a;
      switch(n.type) {
        case "DirectionalLight":
          a = {direction:new f, color:new Z, shadow:!1, shadowBias:0, shadowRadius:1, shadowMapSize:new l};
          break;
        case "SpotLight":
          a = {position:new f, direction:new f, color:new Z, distance:0, coneCos:0, penumbraCos:0, decay:0, shadow:!1, shadowBias:0, shadowRadius:1, shadowMapSize:new l};
          break;
        case "PointLight":
          a = {position:new f, color:new Z, distance:0, decay:0, shadow:!1, shadowBias:0, shadowRadius:1, shadowMapSize:new l};
          break;
        case "HemisphereLight":
          a = {direction:new f, skyColor:new Z, groundColor:new Z};
          break;
        case "RectAreaLight":
          a = {color:new Z, position:new f, halfWidth:new f, halfHeight:new f};
      }
      return d[n.id] = a;
    }};
  }
  function nf(d, n, a) {
    var z = {};
    return {update:function(d) {
      var b = a.frame, c = d.geometry, f = n.get(d, c);
      z[f.id] !== b && (c.isGeometry && f.updateFromObject(d), n.update(f), z[f.id] = b);
      return f;
    }, clear:function() {
      z = {};
    }};
  }
  function ab(d) {
    d = d.split("\n");
    for (var n = 0;n < d.length;n++) {
      d[n] = n + 1 + ": " + d[n];
    }
    return d.join("\n");
  }
  function Ra(d, n, a) {
    var z = d.createShader(n);
    d.shaderSource(z, a);
    d.compileShader(z);
    !1 === d.getShaderParameter(z, d.COMPILE_STATUS) && console.error("THREE.WebGLShader: Shader couldn't compile.");
    "" !== d.getShaderInfoLog(z) && console.warn("THREE.WebGLShader: gl.getShaderInfoLog()", n === d.VERTEX_SHADER ? "vertex" : "fragment", d.getShaderInfoLog(z), ab(a));
    return z;
  }
  function tb(d) {
    switch(d) {
      case 3E3:
        return ["Linear", "( value )"];
      case 3001:
        return ["sRGB", "( value )"];
      case 3002:
        return ["RGBE", "( value )"];
      case 3004:
        return ["RGBM", "( value, 7.0 )"];
      case 3005:
        return ["RGBM", "( value, 16.0 )"];
      case 3006:
        return ["RGBD", "( value, 256.0 )"];
      case 3007:
        return ["Gamma", "( value, float( GAMMA_FACTOR ) )"];
      default:
        throw Error("unsupported encoding: " + d);
    }
  }
  function Sa(d, n) {
    n = tb(n);
    return "vec4 " + d + "( vec4 value ) { return " + n[0] + "ToLinear" + n[1] + "; }";
  }
  function sd(d, n) {
    n = tb(n);
    return "vec4 " + d + "( vec4 value ) { return LinearTo" + n[0] + n[1] + "; }";
  }
  function Eb(d, n) {
    switch(n) {
      case 1:
        n = "Linear";
        break;
      case 2:
        n = "Reinhard";
        break;
      case 3:
        n = "Uncharted2";
        break;
      case 4:
        n = "OptimizedCineon";
        break;
      default:
        throw Error("unsupported toneMapping: " + n);
    }
    return "vec3 " + d + "( vec3 color ) { return " + n + "ToneMapping( color ); }";
  }
  function td(d, n, a) {
    d = d || {};
    return [d.derivatives || n.envMapCubeUV || n.bumpMap || n.normalMap || n.flatShading ? "#extension GL_OES_standard_derivatives : enable" : "", (d.fragDepth || n.logarithmicDepthBuffer) && a.get("EXT_frag_depth") ? "#extension GL_EXT_frag_depth : enable" : "", d.drawBuffers && a.get("WEBGL_draw_buffers") ? "#extension GL_EXT_draw_buffers : require" : "", (d.shaderTextureLOD || n.envMap) && a.get("EXT_shader_texture_lod") ? "#extension GL_EXT_shader_texture_lod : enable" : ""].filter(Fb).join("\n");
  }
  function of(d) {
    var n = [], a;
    for (a in d) {
      var b = d[a];
      !1 !== b && n.push("#define " + a + " " + b);
    }
    return n.join("\n");
  }
  function Fb(d) {
    return "" !== d;
  }
  function Ke(d, n) {
    return d.replace(/NUM_DIR_LIGHTS/g, n.numDirLights).replace(/NUM_SPOT_LIGHTS/g, n.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g, n.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, n.numPointLights).replace(/NUM_HEMI_LIGHTS/g, n.numHemiLights);
  }
  function ae(d) {
    return d.replace(/#include +<([\w\d.]+)>/g, function(d, a) {
      d = ha[a];
      if (void 0 === d) {
        throw Error("Can not resolve #include <" + a + ">");
      }
      return ae(d);
    });
  }
  function Le(d) {
    return d.replace(/for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g, function(d, a, b, c) {
      d = "";
      for (a = parseInt(a);a < parseInt(b);a++) {
        d += c.replace(/\[ i \]/g, "[ " + a + " ]");
      }
      return d;
    });
  }
  function pf(d, n, a, b) {
    var z = d.context, c = a.extensions, f = a.defines, e = a.__webglShader.vertexShader, E = a.__webglShader.fragmentShader, g = "SHADOWMAP_TYPE_BASIC";
    1 === b.shadowMapType ? g = "SHADOWMAP_TYPE_PCF" : 2 === b.shadowMapType && (g = "SHADOWMAP_TYPE_PCF_SOFT");
    var m = "ENVMAP_TYPE_CUBE", k = "ENVMAP_MODE_REFLECTION", q = "ENVMAP_BLENDING_MULTIPLY";
    if (b.envMap) {
      switch(a.envMap.mapping) {
        case 301:
        case 302:
          m = "ENVMAP_TYPE_CUBE";
          break;
        case 306:
        case 307:
          m = "ENVMAP_TYPE_CUBE_UV";
          break;
        case 303:
        case 304:
          m = "ENVMAP_TYPE_EQUIREC";
          break;
        case 305:
          m = "ENVMAP_TYPE_SPHERE";
      }
      switch(a.envMap.mapping) {
        case 302:
        case 304:
          k = "ENVMAP_MODE_REFRACTION";
      }
      switch(a.combine) {
        case 0:
          q = "ENVMAP_BLENDING_MULTIPLY";
          break;
        case 1:
          q = "ENVMAP_BLENDING_MIX";
          break;
        case 2:
          q = "ENVMAP_BLENDING_ADD";
      }
    }
    var h = 0 < d.gammaFactor ? d.gammaFactor : 1, c = td(c, b, d.extensions), p = of(f), r = z.createProgram();
    a.isRawShaderMaterial ? (f = [p, "\n"].filter(Fb).join("\n"), g = [c, p, "\n"].filter(Fb).join("\n")) : (f = ["precision " + b.precision + " float;", "precision " + b.precision + " int;", "#define SHADER_NAME " + a.__webglShader.name, p, b.supportsVertexTextures ? "#define VERTEX_TEXTURES" : "", "#define GAMMA_FACTOR " + h, "#define MAX_BONES " + b.maxBones, b.useFog && b.fog ? "#define USE_FOG" : "", b.useFog && b.fogExp ? "#define FOG_EXP2" : "", b.map ? "#define USE_MAP" : "", b.envMap ? "#define USE_ENVMAP" : 
    "", b.envMap ? "#define " + k : "", b.lightMap ? "#define USE_LIGHTMAP" : "", b.aoMap ? "#define USE_AOMAP" : "", b.emissiveMap ? "#define USE_EMISSIVEMAP" : "", b.bumpMap ? "#define USE_BUMPMAP" : "", b.normalMap ? "#define USE_NORMALMAP" : "", b.displacementMap && b.supportsVertexTextures ? "#define USE_DISPLACEMENTMAP" : "", b.specularMap ? "#define USE_SPECULARMAP" : "", b.roughnessMap ? "#define USE_ROUGHNESSMAP" : "", b.metalnessMap ? "#define USE_METALNESSMAP" : "", b.alphaMap ? "#define USE_ALPHAMAP" : 
    "", b.vertexColors ? "#define USE_COLOR" : "", b.flatShading ? "#define FLAT_SHADED" : "", b.skinning ? "#define USE_SKINNING" : "", b.useVertexTexture ? "#define BONE_TEXTURE" : "", b.morphTargets ? "#define USE_MORPHTARGETS" : "", b.morphNormals && !1 === b.flatShading ? "#define USE_MORPHNORMALS" : "", b.doubleSided ? "#define DOUBLE_SIDED" : "", b.flipSided ? "#define FLIP_SIDED" : "", "#define NUM_CLIPPING_PLANES " + b.numClippingPlanes, b.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", 
    b.shadowMapEnabled ? "#define " + g : "", b.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "", b.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", b.logarithmicDepthBuffer && d.extensions.get("EXT_frag_depth") ? "#define USE_LOGDEPTHBUF_EXT" : "", "uniform mat4 modelMatrix;", "uniform mat4 modelViewMatrix;", "uniform mat4 projectionMatrix;", "uniform mat4 viewMatrix;", "uniform mat3 normalMatrix;", "uniform vec3 cameraPosition;", "attribute vec3 position;", "attribute vec3 normal;", 
    "attribute vec2 uv;", "#ifdef USE_COLOR", "\tattribute vec3 color;", "#endif", "#ifdef USE_MORPHTARGETS", "\tattribute vec3 morphTarget0;", "\tattribute vec3 morphTarget1;", "\tattribute vec3 morphTarget2;", "\tattribute vec3 morphTarget3;", "\t#ifdef USE_MORPHNORMALS", "\t\tattribute vec3 morphNormal0;", "\t\tattribute vec3 morphNormal1;", "\t\tattribute vec3 morphNormal2;", "\t\tattribute vec3 morphNormal3;", "\t#else", "\t\tattribute vec3 morphTarget4;", "\t\tattribute vec3 morphTarget5;", 
    "\t\tattribute vec3 morphTarget6;", "\t\tattribute vec3 morphTarget7;", "\t#endif", "#endif", "#ifdef USE_SKINNING", "\tattribute vec4 skinIndex;", "\tattribute vec4 skinWeight;", "#endif", "\n"].filter(Fb).join("\n"), g = [c, "precision " + b.precision + " float;", "precision " + b.precision + " int;", "#define SHADER_NAME " + a.__webglShader.name, p, b.alphaTest ? "#define ALPHATEST " + b.alphaTest : "", "#define GAMMA_FACTOR " + h, b.useFog && b.fog ? "#define USE_FOG" : "", b.useFog && b.fogExp ? 
    "#define FOG_EXP2" : "", b.map ? "#define USE_MAP" : "", b.envMap ? "#define USE_ENVMAP" : "", b.envMap ? "#define " + m : "", b.envMap ? "#define " + k : "", b.envMap ? "#define " + q : "", b.lightMap ? "#define USE_LIGHTMAP" : "", b.aoMap ? "#define USE_AOMAP" : "", b.emissiveMap ? "#define USE_EMISSIVEMAP" : "", b.bumpMap ? "#define USE_BUMPMAP" : "", b.normalMap ? "#define USE_NORMALMAP" : "", b.specularMap ? "#define USE_SPECULARMAP" : "", b.roughnessMap ? "#define USE_ROUGHNESSMAP" : "", 
    b.metalnessMap ? "#define USE_METALNESSMAP" : "", b.alphaMap ? "#define USE_ALPHAMAP" : "", b.vertexColors ? "#define USE_COLOR" : "", b.gradientMap ? "#define USE_GRADIENTMAP" : "", b.flatShading ? "#define FLAT_SHADED" : "", b.doubleSided ? "#define DOUBLE_SIDED" : "", b.flipSided ? "#define FLIP_SIDED" : "", "#define NUM_CLIPPING_PLANES " + b.numClippingPlanes, "#define UNION_CLIPPING_PLANES " + (b.numClippingPlanes - b.numClipIntersection), b.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", 
    b.shadowMapEnabled ? "#define " + g : "", b.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "", b.physicallyCorrectLights ? "#define PHYSICALLY_CORRECT_LIGHTS" : "", b.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", b.logarithmicDepthBuffer && d.extensions.get("EXT_frag_depth") ? "#define USE_LOGDEPTHBUF_EXT" : "", b.envMap && d.extensions.get("EXT_shader_texture_lod") ? "#define TEXTURE_LOD_EXT" : "", "uniform mat4 viewMatrix;", "uniform vec3 cameraPosition;", 0 !== b.toneMapping ? 
    "#define TONE_MAPPING" : "", 0 !== b.toneMapping ? ha.tonemapping_pars_fragment : "", 0 !== b.toneMapping ? Eb("toneMapping", b.toneMapping) : "", b.outputEncoding || b.mapEncoding || b.envMapEncoding || b.emissiveMapEncoding ? ha.encodings_pars_fragment : "", b.mapEncoding ? Sa("mapTexelToLinear", b.mapEncoding) : "", b.envMapEncoding ? Sa("envMapTexelToLinear", b.envMapEncoding) : "", b.emissiveMapEncoding ? Sa("emissiveMapTexelToLinear", b.emissiveMapEncoding) : "", b.outputEncoding ? sd("linearToOutputTexel", 
    b.outputEncoding) : "", b.depthPacking ? "#define DEPTH_PACKING " + a.depthPacking : "", "\n"].filter(Fb).join("\n"));
    e = ae(e, b);
    e = Ke(e, b);
    E = ae(E, b);
    E = Ke(E, b);
    a.isShaderMaterial || (e = Le(e), E = Le(E));
    E = g + E;
    e = Ra(z, z.VERTEX_SHADER, f + e);
    E = Ra(z, z.FRAGMENT_SHADER, E);
    z.attachShader(r, e);
    z.attachShader(r, E);
    void 0 !== a.index0AttributeName ? z.bindAttribLocation(r, 0, a.index0AttributeName) : !0 === b.morphTargets && z.bindAttribLocation(r, 0, "position");
    z.linkProgram(r);
    b = z.getProgramInfoLog(r);
    m = z.getShaderInfoLog(e);
    k = z.getShaderInfoLog(E);
    h = q = !0;
    if (!1 === z.getProgramParameter(r, z.LINK_STATUS)) {
      q = !1, console.error("THREE.WebGLProgram: shader error: ", z.getError(), "gl.VALIDATE_STATUS", z.getProgramParameter(r, z.VALIDATE_STATUS), "gl.getProgramInfoLog", b, m, k);
    } else {
      if ("" !== b) {
        console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()", b);
      } else {
        if ("" === m || "" === k) {
          h = !1;
        }
      }
    }
    h && (this.diagnostics = {runnable:q, material:a, programLog:b, vertexShader:{log:m, prefix:f}, fragmentShader:{log:k, prefix:g}});
    z.deleteShader(e);
    z.deleteShader(E);
    var t;
    this.getUniforms = function() {
      void 0 === t && (t = new Q(z, r, d));
      return t;
    };
    var l;
    this.getAttributes = function() {
      if (void 0 === l) {
        for (var d = {}, n = z.getProgramParameter(r, z.ACTIVE_ATTRIBUTES), a = 0;a < n;a++) {
          var b = z.getActiveAttrib(r, a).name;
          d[b] = z.getAttribLocation(r, b);
        }
        l = d;
      }
      return l;
    };
    this.destroy = function() {
      z.deleteProgram(r);
      this.program = void 0;
    };
    Object.defineProperties(this, {uniforms:{get:function() {
      console.warn("THREE.WebGLProgram: .uniforms is now .getUniforms().");
      return this.getUniforms();
    }}, attributes:{get:function() {
      console.warn("THREE.WebGLProgram: .attributes is now .getAttributes().");
      return this.getAttributes();
    }}});
    this.id = qf++;
    this.code = n;
    this.usedTimes = 1;
    this.program = r;
    this.vertexShader = e;
    this.fragmentShader = E;
    return this;
  }
  function rf(d, n) {
    function a(d, n) {
      var a;
      d ? d.isTexture ? a = d.encoding : d.isWebGLRenderTarget && (console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."), a = d.texture.encoding) : a = 3E3;
      3E3 === a && n && (a = 3007);
      return a;
    }
    var b = [], c = {MeshDepthMaterial:"depth", MeshNormalMaterial:"normal", MeshBasicMaterial:"basic", MeshLambertMaterial:"lambert", MeshPhongMaterial:"phong", MeshToonMaterial:"phong", MeshStandardMaterial:"physical", MeshPhysicalMaterial:"physical", LineBasicMaterial:"basic", LineDashedMaterial:"dashed", PointsMaterial:"points"}, f = "precision supportsVertexTextures map mapEncoding envMap envMapMode envMapEncoding lightMap aoMap emissiveMap emissiveMapEncoding bumpMap normalMap displacementMap specularMap roughnessMap metalnessMap gradientMap alphaMap combine vertexColors fog useFog fogExp flatShading sizeAttenuation logarithmicDepthBuffer skinning maxBones useVertexTexture morphTargets morphNormals maxMorphTargets maxMorphNormals premultipliedAlpha numDirLights numPointLights numSpotLights numHemiLights numRectAreaLights shadowMapEnabled shadowMapType toneMapping physicallyCorrectLights alphaTest doubleSided flipSided numClippingPlanes numClipIntersection depthPacking".split(" ");
    this.getParameters = function(b, z, f, e, E, g) {
      var m = c[b.type], k;
      if (g.isSkinnedMesh) {
        if (k = g.skeleton.bones, n.floatVertexTextures) {
          k = 1024;
        } else {
          var q = Math.min(Math.floor((n.maxVertexUniforms - 20) / 4), k.length);
          q < k.length ? (console.warn("THREE.WebGLRenderer: Skeleton has " + k.length + " bones. This GPU supports " + q + "."), k = 0) : k = q;
        }
      } else {
        k = 0;
      }
      q = d.getPrecision();
      null !== b.precision && (q = n.getMaxPrecision(b.precision), q !== b.precision && console.warn("THREE.WebGLProgram.getParameters:", b.precision, "not supported, using", q, "instead."));
      var h = d.getRenderTarget();
      return {shaderID:m, precision:q, supportsVertexTextures:n.vertexTextures, outputEncoding:a(h ? h.texture : null, d.gammaOutput), map:!!b.map, mapEncoding:a(b.map, d.gammaInput), envMap:!!b.envMap, envMapMode:b.envMap && b.envMap.mapping, envMapEncoding:a(b.envMap, d.gammaInput), envMapCubeUV:!!b.envMap && (306 === b.envMap.mapping || 307 === b.envMap.mapping), lightMap:!!b.lightMap, aoMap:!!b.aoMap, emissiveMap:!!b.emissiveMap, emissiveMapEncoding:a(b.emissiveMap, d.gammaInput), bumpMap:!!b.bumpMap, 
      normalMap:!!b.normalMap, displacementMap:!!b.displacementMap, roughnessMap:!!b.roughnessMap, metalnessMap:!!b.metalnessMap, specularMap:!!b.specularMap, alphaMap:!!b.alphaMap, gradientMap:!!b.gradientMap, combine:b.combine, vertexColors:b.vertexColors, fog:!!f, useFog:b.fog, fogExp:f && f.isFogExp2, flatShading:1 === b.shading, sizeAttenuation:b.sizeAttenuation, logarithmicDepthBuffer:n.logarithmicDepthBuffer, skinning:b.skinning && 0 < k, maxBones:k, useVertexTexture:n.floatVertexTextures, 
      morphTargets:b.morphTargets, morphNormals:b.morphNormals, maxMorphTargets:d.maxMorphTargets, maxMorphNormals:d.maxMorphNormals, numDirLights:z.directional.length, numPointLights:z.point.length, numSpotLights:z.spot.length, numRectAreaLights:z.rectArea.length, numHemiLights:z.hemi.length, numClippingPlanes:e, numClipIntersection:E, shadowMapEnabled:d.shadowMap.enabled && g.receiveShadow && 0 < z.shadows.length, shadowMapType:d.shadowMap.type, toneMapping:d.toneMapping, physicallyCorrectLights:d.physicallyCorrectLights, 
      premultipliedAlpha:b.premultipliedAlpha, alphaTest:b.alphaTest, doubleSided:2 === b.side, flipSided:1 === b.side, depthPacking:void 0 !== b.depthPacking ? b.depthPacking : !1};
    };
    this.getProgramCode = function(d, n) {
      var a = [];
      n.shaderID ? a.push(n.shaderID) : (a.push(d.fragmentShader), a.push(d.vertexShader));
      if (void 0 !== d.defines) {
        for (var b in d.defines) {
          a.push(b), a.push(d.defines[b]);
        }
      }
      for (b = 0;b < f.length;b++) {
        a.push(n[f[b]]);
      }
      return a.join();
    };
    this.acquireProgram = function(n, a, z) {
      for (var f, c = 0, e = b.length;c < e;c++) {
        var E = b[c];
        if (E.code === z) {
          f = E;
          ++f.usedTimes;
          break;
        }
      }
      void 0 === f && (f = new pf(d, z, n, a), b.push(f));
      return f;
    };
    this.releaseProgram = function(d) {
      if (0 === --d.usedTimes) {
        var n = b.indexOf(d);
        b[n] = b[b.length - 1];
        b.pop();
        d.destroy();
      }
    };
    this.programs = b;
  }
  function sf(d, n, a, b, f, c, e) {
    function z(d, n) {
      if (d.width > n || d.height > n) {
        n /= Math.max(d.width, d.height);
        var a = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
        a.width = Math.floor(d.width * n);
        a.height = Math.floor(d.height * n);
        a.getContext("2d").drawImage(d, 0, 0, d.width, d.height, 0, 0, a.width, a.height);
        console.warn("THREE.WebGLRenderer: image is too big (" + d.width + "x" + d.height + "). Resized to " + a.width + "x" + a.height, d);
        return a;
      }
      return d;
    }
    function E(d) {
      return na.isPowerOfTwo(d.width) && na.isPowerOfTwo(d.height);
    }
    function g(n) {
      return 1003 === n || 1004 === n || 1005 === n ? d.NEAREST : d.LINEAR;
    }
    function m(n) {
      n = n.target;
      n.removeEventListener("dispose", m);
      a: {
        var a = b.get(n);
        if (n.image && a.__image__webglTextureCube) {
          d.deleteTexture(a.__image__webglTextureCube);
        } else {
          if (void 0 === a.__webglInit) {
            break a;
          }
          d.deleteTexture(a.__webglTexture);
        }
        b.remove(n);
      }
      e.textures--;
    }
    function k(n) {
      n = n.target;
      n.removeEventListener("dispose", k);
      var a = b.get(n), z = b.get(n.texture);
      if (n) {
        void 0 !== z.__webglTexture && d.deleteTexture(z.__webglTexture);
        n.depthTexture && n.depthTexture.dispose();
        if (n.isWebGLRenderTargetCube) {
          for (z = 0;6 > z;z++) {
            d.deleteFramebuffer(a.__webglFramebuffer[z]), a.__webglDepthbuffer && d.deleteRenderbuffer(a.__webglDepthbuffer[z]);
          }
        } else {
          d.deleteFramebuffer(a.__webglFramebuffer), a.__webglDepthbuffer && d.deleteRenderbuffer(a.__webglDepthbuffer);
        }
        b.remove(n.texture);
        b.remove(n);
      }
      e.textures--;
    }
    function q(n, g) {
      var k = b.get(n);
      if (0 < n.version && k.__version !== n.version) {
        var q = n.image;
        if (void 0 === q) {
          console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined", n);
        } else {
          if (!1 === q.complete) {
            console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete", n);
          } else {
            void 0 === k.__webglInit && (k.__webglInit = !0, n.addEventListener("dispose", m), k.__webglTexture = d.createTexture(), e.textures++);
            a.activeTexture(d.TEXTURE0 + g);
            a.bindTexture(d.TEXTURE_2D, k.__webglTexture);
            d.pixelStorei(d.UNPACK_FLIP_Y_WEBGL, n.flipY);
            d.pixelStorei(d.UNPACK_PREMULTIPLY_ALPHA_WEBGL, n.premultiplyAlpha);
            d.pixelStorei(d.UNPACK_ALIGNMENT, n.unpackAlignment);
            g = z(n.image, f.maxTextureSize);
            if ((1001 !== n.wrapS || 1001 !== n.wrapT || 1003 !== n.minFilter && 1006 !== n.minFilter) && !1 === E(g)) {
              if (q = g, q instanceof HTMLImageElement || q instanceof HTMLCanvasElement) {
                var p = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
                p.width = na.nearestPowerOfTwo(q.width);
                p.height = na.nearestPowerOfTwo(q.height);
                p.getContext("2d").drawImage(q, 0, 0, p.width, p.height);
                console.warn("THREE.WebGLRenderer: image is not power of two (" + q.width + "x" + q.height + "). Resized to " + p.width + "x" + p.height, q);
                g = p;
              } else {
                g = q;
              }
            }
            var q = E(g), p = c(n.format), r = c(n.type);
            h(d.TEXTURE_2D, n, q);
            var t = n.mipmaps;
            if (n.isDepthTexture) {
              t = d.DEPTH_COMPONENT;
              if (1015 === n.type) {
                if (!T) {
                  throw Error("Float Depth Texture only supported in WebGL2.0");
                }
                t = d.DEPTH_COMPONENT32F;
              } else {
                T && (t = d.DEPTH_COMPONENT16);
              }
              1026 === n.format && t === d.DEPTH_COMPONENT && 1012 !== n.type && 1014 !== n.type && (console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."), n.type = 1012, r = c(n.type));
              1027 === n.format && (t = d.DEPTH_STENCIL, 1020 !== n.type && (console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."), n.type = 1020, r = c(n.type)));
              a.texImage2D(d.TEXTURE_2D, 0, t, g.width, g.height, 0, p, r, null);
            } else {
              if (n.isDataTexture) {
                if (0 < t.length && q) {
                  for (var l = 0, w = t.length;l < w;l++) {
                    g = t[l], a.texImage2D(d.TEXTURE_2D, l, p, g.width, g.height, 0, p, r, g.data);
                  }
                  n.generateMipmaps = !1;
                } else {
                  a.texImage2D(d.TEXTURE_2D, 0, p, g.width, g.height, 0, p, r, g.data);
                }
              } else {
                if (n.isCompressedTexture) {
                  for (l = 0, w = t.length;l < w;l++) {
                    g = t[l], 1023 !== n.format && 1022 !== n.format ? -1 < a.getCompressedTextureFormats().indexOf(p) ? a.compressedTexImage2D(d.TEXTURE_2D, l, p, g.width, g.height, 0, g.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : a.texImage2D(d.TEXTURE_2D, l, p, g.width, g.height, 0, p, r, g.data);
                  }
                } else {
                  if (0 < t.length && q) {
                    l = 0;
                    for (w = t.length;l < w;l++) {
                      g = t[l], a.texImage2D(d.TEXTURE_2D, l, p, p, r, g);
                    }
                    n.generateMipmaps = !1;
                  } else {
                    a.texImage2D(d.TEXTURE_2D, 0, p, p, r, g);
                  }
                }
              }
            }
            n.generateMipmaps && q && d.generateMipmap(d.TEXTURE_2D);
            k.__version = n.version;
            if (n.onUpdate) {
              n.onUpdate(n);
            }
            return;
          }
        }
      }
      a.activeTexture(d.TEXTURE0 + g);
      a.bindTexture(d.TEXTURE_2D, k.__webglTexture);
    }
    function h(a, z, e) {
      e ? (d.texParameteri(a, d.TEXTURE_WRAP_S, c(z.wrapS)), d.texParameteri(a, d.TEXTURE_WRAP_T, c(z.wrapT)), d.texParameteri(a, d.TEXTURE_MAG_FILTER, c(z.magFilter)), d.texParameteri(a, d.TEXTURE_MIN_FILTER, c(z.minFilter))) : (d.texParameteri(a, d.TEXTURE_WRAP_S, d.CLAMP_TO_EDGE), d.texParameteri(a, d.TEXTURE_WRAP_T, d.CLAMP_TO_EDGE), 1001 === z.wrapS && 1001 === z.wrapT || console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.", 
      z), d.texParameteri(a, d.TEXTURE_MAG_FILTER, g(z.magFilter)), d.texParameteri(a, d.TEXTURE_MIN_FILTER, g(z.minFilter)), 1003 !== z.minFilter && 1006 !== z.minFilter && console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.", z));
      !(e = n.get("EXT_texture_filter_anisotropic")) || 1015 === z.type && null === n.get("OES_texture_float_linear") || 1016 === z.type && null === n.get("OES_texture_half_float_linear") || !(1 < z.anisotropy || b.get(z).__currentAnisotropy) || (d.texParameterf(a, e.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(z.anisotropy, f.getMaxAnisotropy())), b.get(z).__currentAnisotropy = z.anisotropy);
    }
    function p(n, z, f, e) {
      var g = c(z.texture.format), E = c(z.texture.type);
      a.texImage2D(e, 0, g, z.width, z.height, 0, g, E, null);
      d.bindFramebuffer(d.FRAMEBUFFER, n);
      d.framebufferTexture2D(d.FRAMEBUFFER, f, e, b.get(z.texture).__webglTexture, 0);
      d.bindFramebuffer(d.FRAMEBUFFER, null);
    }
    function r(n, a) {
      d.bindRenderbuffer(d.RENDERBUFFER, n);
      a.depthBuffer && !a.stencilBuffer ? (d.renderbufferStorage(d.RENDERBUFFER, d.DEPTH_COMPONENT16, a.width, a.height), d.framebufferRenderbuffer(d.FRAMEBUFFER, d.DEPTH_ATTACHMENT, d.RENDERBUFFER, n)) : a.depthBuffer && a.stencilBuffer ? (d.renderbufferStorage(d.RENDERBUFFER, d.DEPTH_STENCIL, a.width, a.height), d.framebufferRenderbuffer(d.FRAMEBUFFER, d.DEPTH_STENCIL_ATTACHMENT, d.RENDERBUFFER, n)) : d.renderbufferStorage(d.RENDERBUFFER, d.RGBA4, a.width, a.height);
      d.bindRenderbuffer(d.RENDERBUFFER, null);
    }
    var T = "undefined" !== typeof WebGL2RenderingContext && d instanceof WebGL2RenderingContext;
    this.setTexture2D = q;
    this.setTextureCube = function(n, g) {
      var k = b.get(n);
      if (6 === n.image.length) {
        if (0 < n.version && k.__version !== n.version) {
          k.__image__webglTextureCube || (n.addEventListener("dispose", m), k.__image__webglTextureCube = d.createTexture(), e.textures++);
          a.activeTexture(d.TEXTURE0 + g);
          a.bindTexture(d.TEXTURE_CUBE_MAP, k.__image__webglTextureCube);
          d.pixelStorei(d.UNPACK_FLIP_Y_WEBGL, n.flipY);
          g = n && n.isCompressedTexture;
          for (var q = n.image[0] && n.image[0].isDataTexture, p = [], r = 0;6 > r;r++) {
            p[r] = g || q ? q ? n.image[r].image : n.image[r] : z(n.image[r], f.maxCubemapSize);
          }
          var T = E(p[0]), t = c(n.format), l = c(n.type);
          h(d.TEXTURE_CUBE_MAP, n, T);
          for (r = 0;6 > r;r++) {
            if (g) {
              for (var w, U = p[r].mipmaps, u = 0, v = U.length;u < v;u++) {
                w = U[u], 1023 !== n.format && 1022 !== n.format ? -1 < a.getCompressedTextureFormats().indexOf(t) ? a.compressedTexImage2D(d.TEXTURE_CUBE_MAP_POSITIVE_X + r, u, t, w.width, w.height, 0, w.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()") : a.texImage2D(d.TEXTURE_CUBE_MAP_POSITIVE_X + r, u, t, w.width, w.height, 0, t, l, w.data);
              }
            } else {
              q ? a.texImage2D(d.TEXTURE_CUBE_MAP_POSITIVE_X + r, 0, t, p[r].width, p[r].height, 0, t, l, p[r].data) : a.texImage2D(d.TEXTURE_CUBE_MAP_POSITIVE_X + r, 0, t, t, l, p[r]);
            }
          }
          n.generateMipmaps && T && d.generateMipmap(d.TEXTURE_CUBE_MAP);
          k.__version = n.version;
          if (n.onUpdate) {
            n.onUpdate(n);
          }
        } else {
          a.activeTexture(d.TEXTURE0 + g), a.bindTexture(d.TEXTURE_CUBE_MAP, k.__image__webglTextureCube);
        }
      }
    };
    this.setTextureCubeDynamic = function(n, z) {
      a.activeTexture(d.TEXTURE0 + z);
      a.bindTexture(d.TEXTURE_CUBE_MAP, b.get(n).__webglTexture);
    };
    this.setupRenderTarget = function(n) {
      var z = b.get(n), c = b.get(n.texture);
      n.addEventListener("dispose", k);
      c.__webglTexture = d.createTexture();
      e.textures++;
      var f = !0 === n.isWebGLRenderTargetCube, g = E(n);
      if (f) {
        z.__webglFramebuffer = [];
        for (var m = 0;6 > m;m++) {
          z.__webglFramebuffer[m] = d.createFramebuffer();
        }
      } else {
        z.__webglFramebuffer = d.createFramebuffer();
      }
      if (f) {
        a.bindTexture(d.TEXTURE_CUBE_MAP, c.__webglTexture);
        h(d.TEXTURE_CUBE_MAP, n.texture, g);
        for (m = 0;6 > m;m++) {
          p(z.__webglFramebuffer[m], n, d.COLOR_ATTACHMENT0, d.TEXTURE_CUBE_MAP_POSITIVE_X + m);
        }
        n.texture.generateMipmaps && g && d.generateMipmap(d.TEXTURE_CUBE_MAP);
        a.bindTexture(d.TEXTURE_CUBE_MAP, null);
      } else {
        a.bindTexture(d.TEXTURE_2D, c.__webglTexture), h(d.TEXTURE_2D, n.texture, g), p(z.__webglFramebuffer, n, d.COLOR_ATTACHMENT0, d.TEXTURE_2D), n.texture.generateMipmaps && g && d.generateMipmap(d.TEXTURE_2D), a.bindTexture(d.TEXTURE_2D, null);
      }
      if (n.depthBuffer) {
        z = b.get(n);
        c = !0 === n.isWebGLRenderTargetCube;
        if (n.depthTexture) {
          if (c) {
            throw Error("target.depthTexture not supported in Cube render targets");
          }
          if (n && n.isWebGLRenderTargetCube) {
            throw Error("Depth Texture with cube render targets is not supported!");
          }
          d.bindFramebuffer(d.FRAMEBUFFER, z.__webglFramebuffer);
          if (!n.depthTexture || !n.depthTexture.isDepthTexture) {
            throw Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
          }
          b.get(n.depthTexture).__webglTexture && n.depthTexture.image.width === n.width && n.depthTexture.image.height === n.height || (n.depthTexture.image.width = n.width, n.depthTexture.image.height = n.height, n.depthTexture.needsUpdate = !0);
          q(n.depthTexture, 0);
          z = b.get(n.depthTexture).__webglTexture;
          if (1026 === n.depthTexture.format) {
            d.framebufferTexture2D(d.FRAMEBUFFER, d.DEPTH_ATTACHMENT, d.TEXTURE_2D, z, 0);
          } else {
            if (1027 === n.depthTexture.format) {
              d.framebufferTexture2D(d.FRAMEBUFFER, d.DEPTH_STENCIL_ATTACHMENT, d.TEXTURE_2D, z, 0);
            } else {
              throw Error("Unknown depthTexture format");
            }
          }
        } else {
          if (c) {
            for (z.__webglDepthbuffer = [], c = 0;6 > c;c++) {
              d.bindFramebuffer(d.FRAMEBUFFER, z.__webglFramebuffer[c]), z.__webglDepthbuffer[c] = d.createRenderbuffer(), r(z.__webglDepthbuffer[c], n);
            }
          } else {
            d.bindFramebuffer(d.FRAMEBUFFER, z.__webglFramebuffer), z.__webglDepthbuffer = d.createRenderbuffer(), r(z.__webglDepthbuffer, n);
          }
        }
        d.bindFramebuffer(d.FRAMEBUFFER, null);
      }
    };
    this.updateRenderTargetMipmap = function(n) {
      var z = n.texture;
      z.generateMipmaps && E(n) && 1003 !== z.minFilter && 1006 !== z.minFilter && (n = n && n.isWebGLRenderTargetCube ? d.TEXTURE_CUBE_MAP : d.TEXTURE_2D, z = b.get(z).__webglTexture, a.bindTexture(n, z), d.generateMipmap(n), a.bindTexture(n, null));
    };
  }
  function tf() {
    var d = {};
    return {get:function(n) {
      n = n.uuid;
      var a = d[n];
      void 0 === a && (a = {}, d[n] = a);
      return a;
    }, remove:function(n) {
      delete d[n.uuid];
    }, clear:function() {
      d = {};
    }};
  }
  function uf(d, n, a) {
    function b(n, a, b) {
      var z = new Uint8Array(4), c = d.createTexture();
      d.bindTexture(n, c);
      d.texParameteri(n, d.TEXTURE_MIN_FILTER, d.NEAREST);
      d.texParameteri(n, d.TEXTURE_MAG_FILTER, d.NEAREST);
      for (n = 0;n < b;n++) {
        d.texImage2D(a + n, 0, d.RGBA, 1, 1, 0, d.RGBA, d.UNSIGNED_BYTE, z);
      }
      return c;
    }
    function z(n) {
      !0 !== v[n] && (d.enable(n), v[n] = !0);
    }
    function c(n) {
      !1 !== v[n] && (d.disable(n), v[n] = !1);
    }
    function f(n, b, f, e, g, E, m, k) {
      0 !== n ? z(d.BLEND) : c(d.BLEND);
      if (n !== y || k !== D) {
        2 === n ? k ? (d.blendEquationSeparate(d.FUNC_ADD, d.FUNC_ADD), d.blendFuncSeparate(d.ONE, d.ONE, d.ONE, d.ONE)) : (d.blendEquation(d.FUNC_ADD), d.blendFunc(d.SRC_ALPHA, d.ONE)) : 3 === n ? k ? (d.blendEquationSeparate(d.FUNC_ADD, d.FUNC_ADD), d.blendFuncSeparate(d.ZERO, d.ZERO, d.ONE_MINUS_SRC_COLOR, d.ONE_MINUS_SRC_ALPHA)) : (d.blendEquation(d.FUNC_ADD), d.blendFunc(d.ZERO, d.ONE_MINUS_SRC_COLOR)) : 4 === n ? k ? (d.blendEquationSeparate(d.FUNC_ADD, d.FUNC_ADD), d.blendFuncSeparate(d.ZERO, 
        d.SRC_COLOR, d.ZERO, d.SRC_ALPHA)) : (d.blendEquation(d.FUNC_ADD), d.blendFunc(d.ZERO, d.SRC_COLOR)) : k ? (d.blendEquationSeparate(d.FUNC_ADD, d.FUNC_ADD), d.blendFuncSeparate(d.ONE, d.ONE_MINUS_SRC_ALPHA, d.ONE, d.ONE_MINUS_SRC_ALPHA)) : (d.blendEquationSeparate(d.FUNC_ADD, d.FUNC_ADD), d.blendFuncSeparate(d.SRC_ALPHA, d.ONE_MINUS_SRC_ALPHA, d.ONE, d.ONE_MINUS_SRC_ALPHA)), y = n, D = k;
      }
      if (5 === n) {
        g = g || b;
        E = E || f;
        m = m || e;
        if (b !== A || g !== F) {
          d.blendEquationSeparate(a(b), a(g)), A = b, F = g;
        }
        if (f !== x || e !== B || E !== I || m !== G) {
          d.blendFuncSeparate(a(f), a(e), a(E), a(m)), x = f, B = e, I = E, G = m;
        }
      } else {
        G = I = F = B = x = A = null;
      }
    }
    function e(n) {
      V !== n && (n ? d.frontFace(d.CW) : d.frontFace(d.CCW), V = n);
    }
    function m(n) {
      0 !== n ? (z(d.CULL_FACE), n !== K && (1 === n ? d.cullFace(d.BACK) : 2 === n ? d.cullFace(d.FRONT) : d.cullFace(d.FRONT_AND_BACK))) : c(d.CULL_FACE);
      K = n;
    }
    function k(n, a, b) {
      if (n) {
        if (z(d.POLYGON_OFFSET_FILL), ca !== a || J !== b) {
          d.polygonOffset(a, b), ca = a, J = b;
        }
      } else {
        c(d.POLYGON_OFFSET_FILL);
      }
    }
    function q(n) {
      void 0 === n && (n = d.TEXTURE0 + ka - 1);
      ia !== n && (d.activeTexture(n), ia = n);
    }
    var h = new function() {
      var n = !1, a = new g, b = null, z = new g;
      return {setMask:function(a) {
        b === a || n || (d.colorMask(a, a, a, a), b = a);
      }, setLocked:function(d) {
        n = d;
      }, setClear:function(n, b, c, f, e) {
        !0 === e && (n *= f, b *= f, c *= f);
        a.set(n, b, c, f);
        !1 === z.equals(a) && (d.clearColor(n, b, c, f), z.copy(a));
      }, reset:function() {
        n = !1;
        b = null;
        z.set(0, 0, 0, 1);
      }};
    }, p = new function() {
      var n = !1, a = null, b = null, f = null;
      return {setTest:function(n) {
        n ? z(d.DEPTH_TEST) : c(d.DEPTH_TEST);
      }, setMask:function(b) {
        a === b || n || (d.depthMask(b), a = b);
      }, setFunc:function(n) {
        if (b !== n) {
          if (n) {
            switch(n) {
              case 0:
                d.depthFunc(d.NEVER);
                break;
              case 1:
                d.depthFunc(d.ALWAYS);
                break;
              case 2:
                d.depthFunc(d.LESS);
                break;
              case 3:
                d.depthFunc(d.LEQUAL);
                break;
              case 4:
                d.depthFunc(d.EQUAL);
                break;
              case 5:
                d.depthFunc(d.GEQUAL);
                break;
              case 6:
                d.depthFunc(d.GREATER);
                break;
              case 7:
                d.depthFunc(d.NOTEQUAL);
                break;
              default:
                d.depthFunc(d.LEQUAL);
            }
          } else {
            d.depthFunc(d.LEQUAL);
          }
          b = n;
        }
      }, setLocked:function(d) {
        n = d;
      }, setClear:function(n) {
        f !== n && (d.clearDepth(n), f = n);
      }, reset:function() {
        n = !1;
        f = b = a = null;
      }};
    }, r = new function() {
      var n = !1, a = null, b = null, f = null, e = null, g = null, E = null, m = null, k = null;
      return {setTest:function(n) {
        n ? z(d.STENCIL_TEST) : c(d.STENCIL_TEST);
      }, setMask:function(b) {
        a === b || n || (d.stencilMask(b), a = b);
      }, setFunc:function(n, a, z) {
        if (b !== n || f !== a || e !== z) {
          d.stencilFunc(n, a, z), b = n, f = a, e = z;
        }
      }, setOp:function(n, a, b) {
        if (g !== n || E !== a || m !== b) {
          d.stencilOp(n, a, b), g = n, E = a, m = b;
        }
      }, setLocked:function(d) {
        n = d;
      }, setClear:function(n) {
        k !== n && (d.clearStencil(n), k = n);
      }, reset:function() {
        n = !1;
        k = m = E = g = e = f = b = a = null;
      }};
    }, t = d.getParameter(d.MAX_VERTEX_ATTRIBS), l = new Uint8Array(t), w = new Uint8Array(t), u = new Uint8Array(t), v = {}, C = null, y = null, A = null, x = null, B = null, F = null, I = null, G = null, D = !1, V = null, K = null, H = null, ca = null, J = null, R = null, ka = d.getParameter(d.MAX_TEXTURE_IMAGE_UNITS), t = parseFloat(/^WebGL\ ([0-9])/.exec(d.getParameter(d.VERSION))[1]), P = 1 <= parseFloat(t), ia = null, M = {}, N = new g, ba = new g, O = {};
    O[d.TEXTURE_2D] = b(d.TEXTURE_2D, d.TEXTURE_2D, 1);
    O[d.TEXTURE_CUBE_MAP] = b(d.TEXTURE_CUBE_MAP, d.TEXTURE_CUBE_MAP_POSITIVE_X, 6);
    return {buffers:{color:h, depth:p, stencil:r}, init:function() {
      h.setClear(0, 0, 0, 1);
      p.setClear(1);
      r.setClear(0);
      z(d.DEPTH_TEST);
      p.setFunc(3);
      e(!1);
      m(1);
      z(d.CULL_FACE);
      z(d.BLEND);
      f(1);
    }, initAttributes:function() {
      for (var d = 0, n = l.length;d < n;d++) {
        l[d] = 0;
      }
    }, enableAttribute:function(a) {
      l[a] = 1;
      0 === w[a] && (d.enableVertexAttribArray(a), w[a] = 1);
      0 !== u[a] && (n.get("ANGLE_instanced_arrays").vertexAttribDivisorANGLE(a, 0), u[a] = 0);
    }, enableAttributeAndDivisor:function(n, a, b) {
      l[n] = 1;
      0 === w[n] && (d.enableVertexAttribArray(n), w[n] = 1);
      u[n] !== a && (b.vertexAttribDivisorANGLE(n, a), u[n] = a);
    }, disableUnusedAttributes:function() {
      for (var n = 0, a = w.length;n !== a;++n) {
        w[n] !== l[n] && (d.disableVertexAttribArray(n), w[n] = 0);
      }
    }, enable:z, disable:c, getCompressedTextureFormats:function() {
      if (null === C && (C = [], n.get("WEBGL_compressed_texture_pvrtc") || n.get("WEBGL_compressed_texture_s3tc") || n.get("WEBGL_compressed_texture_etc1"))) {
        for (var a = d.getParameter(d.COMPRESSED_TEXTURE_FORMATS), b = 0;b < a.length;b++) {
          C.push(a[b]);
        }
      }
      return C;
    }, setBlending:f, setMaterial:function(n) {
      2 === n.side ? c(d.CULL_FACE) : z(d.CULL_FACE);
      e(1 === n.side);
      !0 === n.transparent ? f(n.blending, n.blendEquation, n.blendSrc, n.blendDst, n.blendEquationAlpha, n.blendSrcAlpha, n.blendDstAlpha, n.premultipliedAlpha) : f(0);
      p.setFunc(n.depthFunc);
      p.setTest(n.depthTest);
      p.setMask(n.depthWrite);
      h.setMask(n.colorWrite);
      k(n.polygonOffset, n.polygonOffsetFactor, n.polygonOffsetUnits);
    }, setFlipSided:e, setCullFace:m, setLineWidth:function(n) {
      n !== H && (P && d.lineWidth(n), H = n);
    }, setPolygonOffset:k, getScissorTest:function() {
      return R;
    }, setScissorTest:function(n) {
      (R = n) ? z(d.SCISSOR_TEST) : c(d.SCISSOR_TEST);
    }, activeTexture:q, bindTexture:function(n, a) {
      null === ia && q();
      var b = M[ia];
      void 0 === b && (b = {type:void 0, texture:void 0}, M[ia] = b);
      if (b.type !== n || b.texture !== a) {
        d.bindTexture(n, a || O[n]), b.type = n, b.texture = a;
      }
    }, compressedTexImage2D:function() {
      try {
        d.compressedTexImage2D.apply(d, arguments);
      } catch (be) {
        console.error(be);
      }
    }, texImage2D:function() {
      try {
        d.texImage2D.apply(d, arguments);
      } catch (be) {
        console.error(be);
      }
    }, scissor:function(n) {
      !1 === N.equals(n) && (d.scissor(n.x, n.y, n.z, n.w), N.copy(n));
    }, viewport:function(n) {
      !1 === ba.equals(n) && (d.viewport(n.x, n.y, n.z, n.w), ba.copy(n));
    }, reset:function() {
      for (var n = 0;n < w.length;n++) {
        1 === w[n] && (d.disableVertexAttribArray(n), w[n] = 0);
      }
      v = {};
      ia = C = null;
      M = {};
      K = V = y = null;
      h.reset();
      p.reset();
      r.reset();
    }};
  }
  function vf(d, n, a) {
    function b(n) {
      if ("highp" === n) {
        if (0 < d.getShaderPrecisionFormat(d.VERTEX_SHADER, d.HIGH_FLOAT).precision && 0 < d.getShaderPrecisionFormat(d.FRAGMENT_SHADER, d.HIGH_FLOAT).precision) {
          return "highp";
        }
        n = "mediump";
      }
      return "mediump" === n && 0 < d.getShaderPrecisionFormat(d.VERTEX_SHADER, d.MEDIUM_FLOAT).precision && 0 < d.getShaderPrecisionFormat(d.FRAGMENT_SHADER, d.MEDIUM_FLOAT).precision ? "mediump" : "lowp";
    }
    var z, c = void 0 !== a.precision ? a.precision : "highp", f = b(c);
    f !== c && (console.warn("THREE.WebGLRenderer:", c, "not supported, using", f, "instead."), c = f);
    a = !0 === a.logarithmicDepthBuffer && !!n.get("EXT_frag_depth");
    var f = d.getParameter(d.MAX_TEXTURE_IMAGE_UNITS), e = d.getParameter(d.MAX_VERTEX_TEXTURE_IMAGE_UNITS), g = d.getParameter(d.MAX_TEXTURE_SIZE), m = d.getParameter(d.MAX_CUBE_MAP_TEXTURE_SIZE), k = d.getParameter(d.MAX_VERTEX_ATTRIBS), q = d.getParameter(d.MAX_VERTEX_UNIFORM_VECTORS), h = d.getParameter(d.MAX_VARYING_VECTORS), p = d.getParameter(d.MAX_FRAGMENT_UNIFORM_VECTORS), r = 0 < e, t = !!n.get("OES_texture_float");
    return {getMaxAnisotropy:function() {
      if (void 0 !== z) {
        return z;
      }
      var a = n.get("EXT_texture_filter_anisotropic");
      return z = null !== a ? d.getParameter(a.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 0;
    }, getMaxPrecision:b, precision:c, logarithmicDepthBuffer:a, maxTextures:f, maxVertexTextures:e, maxTextureSize:g, maxCubemapSize:m, maxAttributes:k, maxVertexUniforms:q, maxVaryings:h, maxFragmentUniforms:p, vertexTextures:r, floatFragmentTextures:t, floatVertexTextures:r && t};
  }
  function wf(d) {
    var n = {};
    return {get:function(a) {
      if (void 0 !== n[a]) {
        return n[a];
      }
      var b;
      switch(a) {
        case "WEBGL_depth_texture":
          b = d.getExtension("WEBGL_depth_texture") || d.getExtension("MOZ_WEBGL_depth_texture") || d.getExtension("WEBKIT_WEBGL_depth_texture");
          break;
        case "EXT_texture_filter_anisotropic":
          b = d.getExtension("EXT_texture_filter_anisotropic") || d.getExtension("MOZ_EXT_texture_filter_anisotropic") || d.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
          break;
        case "WEBGL_compressed_texture_s3tc":
          b = d.getExtension("WEBGL_compressed_texture_s3tc") || d.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || d.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
          break;
        case "WEBGL_compressed_texture_pvrtc":
          b = d.getExtension("WEBGL_compressed_texture_pvrtc") || d.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
          break;
        case "WEBGL_compressed_texture_etc1":
          b = d.getExtension("WEBGL_compressed_texture_etc1");
          break;
        default:
          b = d.getExtension(a);
      }
      null === b && console.warn("THREE.WebGLRenderer: " + a + " extension not supported.");
      return n[a] = b;
    }};
  }
  function xf() {
    function d() {
      k.value !== b && (k.value = b, k.needsUpdate = 0 < c);
      a.numPlanes = c;
      a.numIntersection = 0;
    }
    function n(d, n, b, z) {
      var c = null !== d ? d.length : 0, f = null;
      if (0 !== c) {
        f = k.value;
        if (!0 !== z || null === f) {
          z = b + 4 * c;
          n = n.matrixWorldInverse;
          m.getNormalMatrix(n);
          if (null === f || f.length < z) {
            f = new Float32Array(z);
          }
          for (z = 0;z !== c;++z, b += 4) {
            g.copy(d[z]).applyMatrix4(n, m), g.normal.toArray(f, b), f[b + 3] = g.constant;
          }
        }
        k.value = f;
        k.needsUpdate = !0;
      }
      a.numPlanes = c;
      return f;
    }
    var a = this, b = null, c = 0, f = !1, e = !1, g = new ua, m = new sa, k = {value:null, needsUpdate:!1};
    this.uniform = k;
    this.numIntersection = this.numPlanes = 0;
    this.init = function(d, a, z) {
      var e = 0 !== d.length || a || 0 !== c || f;
      f = a;
      b = n(d, z, 0);
      c = d.length;
      return e;
    };
    this.beginShadows = function() {
      e = !0;
      n(null);
    };
    this.endShadows = function() {
      e = !1;
      d();
    };
    this.setState = function(a, z, g, m, E, q) {
      if (!f || null === a || 0 === a.length || e && !g) {
        e ? n(null) : d();
      } else {
        g = e ? 0 : c;
        var h = 4 * g, p = E.clippingState || null;
        k.value = p;
        p = n(a, m, h, q);
        for (a = 0;a !== h;++a) {
          p[a] = b[a];
        }
        E.clippingState = p;
        this.numIntersection = z ? this.numPlanes : 0;
        this.numPlanes += g;
      }
    };
  }
  function ce(d) {
    function n() {
      qa.init();
      qa.scissor(ba.copy(Hc).multiplyScalar(X));
      qa.viewport(da.copy(Db).multiplyScalar(X));
      qa.buffers.color.setClear(ma.r, ma.g, ma.b, Ga, I);
    }
    function a() {
      N = R = null;
      M = "";
      P = -1;
      qa.reset();
    }
    function b(d) {
      d.preventDefault();
      a();
      n();
      Ra.clear();
      xa.clear();
    }
    function c(d) {
      d = d.target;
      d.removeEventListener("dispose", c);
      e(d);
      Ra.remove(d);
    }
    function e(d) {
      var n = Ra.get(d).program;
      d.program = void 0;
      void 0 !== n && za.releaseProgram(n);
    }
    function m(d, n, a) {
      d.render(function(d) {
        J.renderBufferImmediate(d, n, a);
      });
    }
    function k(d, n) {
      return Math.abs(n[0]) - Math.abs(d[0]);
    }
    function h(d, n, a) {
      if (d.visible) {
        if (d.layers.test(n.layers)) {
          if (d.isLight) {
            D.push(d);
          } else {
            if (d.isSprite) {
              d.frustumCulled && !Y.intersectsSprite(d) || H.push(d);
            } else {
              if (d.isLensFlare) {
                ca.push(d);
              } else {
                if (d.isImmediateRenderObject) {
                  a && sa.setFromMatrixPosition(d.matrixWorld).applyMatrix4(Ba), V.push(d, null, d.material, sa.z, null);
                } else {
                  if (d.isMesh || d.isLine || d.isPoints) {
                    if (d.isSkinnedMesh && d.skeleton.update(), !d.frustumCulled || Y.intersectsObject(d)) {
                      a && sa.setFromMatrixPosition(d.matrixWorld).applyMatrix4(Ba);
                      var b = xa.update(d), z = d.material;
                      if (Array.isArray(z)) {
                        for (var c = b.groups, f = 0, e = c.length;f < e;f++) {
                          var g = c[f], m = z[g.materialIndex];
                          m && m.visible && V.push(d, b, m, sa.z, g);
                        }
                      } else {
                        z.visible && V.push(d, b, z, sa.z, null);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        d = d.children;
        f = 0;
        for (e = d.length;f < e;f++) {
          h(d[f], n, a);
        }
      }
    }
    function p(d, n, a, b) {
      for (var z = 0, f = d.length;z < f;z++) {
        var c = d[z], e = c.object, g = c.geometry, m = void 0 === b ? c.material : b, c = c.group;
        e.onBeforeRender(J, n, a, g, m, c);
        if (a.isArrayCamera && a.enabled) {
          for (var E = a.cameras, k = 0, q = E.length;k < q;k++) {
            var h = E[k], p = h.bounds;
            J.setViewport(p.x * ra * X, p.y * Ka * X, p.z * ra * X, p.w * Ka * X);
            J.setScissor(p.x * ra * X, p.y * Ka * X, p.z * ra * X, p.w * Ka * X);
            J.setScissorTest(!0);
            t(e, n, h, g, m, c);
          }
        } else {
          t(e, n, a, g, m, c);
        }
        e.onAfterRender(J, n, a, g, m, c);
      }
    }
    function t(d, n, a, b, z, c) {
      d.modelViewMatrix.multiplyMatrices(a.matrixWorldInverse, d.matrixWorld);
      d.normalMatrix.getNormalMatrix(d.modelViewMatrix);
      d.isImmediateRenderObject ? (qa.setMaterial(z), n = l(a, n.fog, z, d), M = "", m(d, n, z)) : J.renderBufferDirect(a, n.fog, b, z, d, c);
    }
    function l(d, n, a, b) {
      S = 0;
      var z = Ra.get(a);
      aa && (Aa || d !== N) && Sa.setState(a.clippingPlanes, a.clipIntersection, a.clipShadows, d, z, d === N && a.id === P);
      !1 === a.needsUpdate && (void 0 === z.program ? a.needsUpdate = !0 : a.fog && z.fog !== n ? a.needsUpdate = !0 : a.lights && z.lightsHash !== oa.hash ? a.needsUpdate = !0 : void 0 === z.numClippingPlanes || z.numClippingPlanes === Sa.numPlanes && z.numIntersection === Sa.numIntersection || (a.needsUpdate = !0));
      if (a.needsUpdate) {
        a: {
          var f = Ra.get(a), g = za.getParameters(a, oa, n, Sa.numPlanes, Sa.numIntersection, b), m = za.getProgramCode(a, g), E = f.program, k = !0;
          if (void 0 === E) {
            a.addEventListener("dispose", c);
          } else {
            if (E.code !== m) {
              e(a);
            } else {
              if (void 0 !== g.shaderID) {
                break a;
              } else {
                k = !1;
              }
            }
          }
          k && (g.shaderID ? (E = xb[g.shaderID], f.__webglShader = {name:a.type, uniforms:Ta.clone(E.uniforms), vertexShader:E.vertexShader, fragmentShader:E.fragmentShader}) : f.__webglShader = {name:a.type, uniforms:a.uniforms, vertexShader:a.vertexShader, fragmentShader:a.fragmentShader}, a.__webglShader = f.__webglShader, E = za.acquireProgram(a, g, m), f.program = E, a.program = E);
          g = E.getAttributes();
          if (a.morphTargets) {
            for (m = a.numSupportedMorphTargets = 0;m < J.maxMorphTargets;m++) {
              0 <= g["morphTarget" + m] && a.numSupportedMorphTargets++;
            }
          }
          if (a.morphNormals) {
            for (m = a.numSupportedMorphNormals = 0;m < J.maxMorphNormals;m++) {
              0 <= g["morphNormal" + m] && a.numSupportedMorphNormals++;
            }
          }
          g = f.__webglShader.uniforms;
          if (!a.isShaderMaterial && !a.isRawShaderMaterial || !0 === a.clipping) {
            f.numClippingPlanes = Sa.numPlanes, f.numIntersection = Sa.numIntersection, g.clippingPlanes = Sa.uniform;
          }
          f.fog = n;
          f.lightsHash = oa.hash;
          a.lights && (g.ambientLightColor.value = oa.ambient, g.directionalLights.value = oa.directional, g.spotLights.value = oa.spot, g.rectAreaLights.value = oa.rectArea, g.pointLights.value = oa.point, g.hemisphereLights.value = oa.hemi, g.directionalShadowMap.value = oa.directionalShadowMap, g.directionalShadowMatrix.value = oa.directionalShadowMatrix, g.spotShadowMap.value = oa.spotShadowMap, g.spotShadowMatrix.value = oa.spotShadowMatrix, g.pointShadowMap.value = oa.pointShadowMap, g.pointShadowMatrix.value = 
          oa.pointShadowMatrix);
          m = f.program.getUniforms();
          g = Q.seqWithValue(m.seq, g);
          f.uniformsList = g;
        }
        a.needsUpdate = !1;
      }
      var q = !1, k = E = !1, f = z.program, g = f.getUniforms(), m = z.__webglShader.uniforms;
      f.id !== R && (L.useProgram(f.program), R = f.id, k = E = q = !0);
      a.id !== P && (P = a.id, E = !0);
      if (q || d !== N) {
        g.setValue(L, "projectionMatrix", d.projectionMatrix);
        ab.logarithmicDepthBuffer && g.setValue(L, "logDepthBufFC", 2 / (Math.log(d.far + 1) / Math.LN2));
        d !== N && (N = d, k = E = !0);
        if (a.isShaderMaterial || a.isMeshPhongMaterial || a.isMeshStandardMaterial || a.envMap) {
          q = g.map.cameraPosition, void 0 !== q && q.setValue(L, sa.setFromMatrixPosition(d.matrixWorld));
        }
        (a.isMeshPhongMaterial || a.isMeshLambertMaterial || a.isMeshBasicMaterial || a.isMeshStandardMaterial || a.isShaderMaterial || a.skinning) && g.setValue(L, "viewMatrix", d.matrixWorldInverse);
        g.setValue(L, "toneMappingExposure", J.toneMappingExposure);
        g.setValue(L, "toneMappingWhitePoint", J.toneMappingWhitePoint);
      }
      if (a.skinning && (g.setOptional(L, b, "bindMatrix"), g.setOptional(L, b, "bindMatrixInverse"), d = b.skeleton)) {
        if (q = d.bones, ab.floatVertexTextures) {
          if (void 0 === d.boneTexture) {
            var q = Math.sqrt(4 * q.length), q = na.nextPowerOfTwo(Math.ceil(q)), q = Math.max(q, 4), h = new Float32Array(q * q * 4);
            h.set(d.boneMatrices);
            var p = new r(h, q, q, 1023, 1015);
            d.boneMatrices = h;
            d.boneTexture = p;
            d.boneTextureSize = q;
          }
          g.setValue(L, "boneTexture", d.boneTexture);
          g.setValue(L, "boneTextureSize", d.boneTextureSize);
        } else {
          g.setOptional(L, d, "boneMatrices");
        }
      }
      if (E) {
        a.lights && (d = k, m.ambientLightColor.needsUpdate = d, m.directionalLights.needsUpdate = d, m.pointLights.needsUpdate = d, m.spotLights.needsUpdate = d, m.rectAreaLights.needsUpdate = d, m.hemisphereLights.needsUpdate = d);
        n && a.fog && (m.fogColor.value = n.color, n.isFog ? (m.fogNear.value = n.near, m.fogFar.value = n.far) : n.isFogExp2 && (m.fogDensity.value = n.density));
        if (a.isMeshBasicMaterial || a.isMeshLambertMaterial || a.isMeshPhongMaterial || a.isMeshStandardMaterial || a.isMeshNormalMaterial || a.isMeshDepthMaterial) {
          m.opacity.value = a.opacity;
          m.diffuse.value = a.color;
          a.emissive && m.emissive.value.copy(a.emissive).multiplyScalar(a.emissiveIntensity);
          m.map.value = a.map;
          m.specularMap.value = a.specularMap;
          m.alphaMap.value = a.alphaMap;
          a.lightMap && (m.lightMap.value = a.lightMap, m.lightMapIntensity.value = a.lightMapIntensity);
          a.aoMap && (m.aoMap.value = a.aoMap, m.aoMapIntensity.value = a.aoMapIntensity);
          var t;
          a.map ? t = a.map : a.specularMap ? t = a.specularMap : a.displacementMap ? t = a.displacementMap : a.normalMap ? t = a.normalMap : a.bumpMap ? t = a.bumpMap : a.roughnessMap ? t = a.roughnessMap : a.metalnessMap ? t = a.metalnessMap : a.alphaMap ? t = a.alphaMap : a.emissiveMap && (t = a.emissiveMap);
          void 0 !== t && (t.isWebGLRenderTarget && (t = t.texture), n = t.offset, t = t.repeat, m.offsetRepeat.value.set(n.x, n.y, t.x, t.y));
          m.envMap.value = a.envMap;
          m.flipEnvMap.value = a.envMap && a.envMap.isCubeTexture ? -1 : 1;
          m.reflectivity.value = a.reflectivity;
          m.refractionRatio.value = a.refractionRatio;
        }
        a.isLineBasicMaterial ? (m.diffuse.value = a.color, m.opacity.value = a.opacity) : a.isLineDashedMaterial ? (m.diffuse.value = a.color, m.opacity.value = a.opacity, m.dashSize.value = a.dashSize, m.totalSize.value = a.dashSize + a.gapSize, m.scale.value = a.scale) : a.isPointsMaterial ? (m.diffuse.value = a.color, m.opacity.value = a.opacity, m.size.value = a.size * X, m.scale.value = .5 * Ka, m.map.value = a.map, null !== a.map && (t = a.map.offset, a = a.map.repeat, m.offsetRepeat.value.set(t.x, 
        t.y, a.x, a.y))) : a.isMeshLambertMaterial ? a.emissiveMap && (m.emissiveMap.value = a.emissiveMap) : a.isMeshToonMaterial ? (w(m, a), a.gradientMap && (m.gradientMap.value = a.gradientMap)) : a.isMeshPhongMaterial ? w(m, a) : a.isMeshPhysicalMaterial ? (m.clearCoat.value = a.clearCoat, m.clearCoatRoughness.value = a.clearCoatRoughness, u(m, a)) : a.isMeshStandardMaterial ? u(m, a) : a.isMeshDepthMaterial ? a.displacementMap && (m.displacementMap.value = a.displacementMap, m.displacementScale.value = 
        a.displacementScale, m.displacementBias.value = a.displacementBias) : a.isMeshNormalMaterial && (a.bumpMap && (m.bumpMap.value = a.bumpMap, m.bumpScale.value = a.bumpScale), a.normalMap && (m.normalMap.value = a.normalMap, m.normalScale.value.copy(a.normalScale)), a.displacementMap && (m.displacementMap.value = a.displacementMap, m.displacementScale.value = a.displacementScale, m.displacementBias.value = a.displacementBias));
        void 0 !== m.ltcMat && (m.ltcMat.value = la.LTC_MAT_TEXTURE);
        void 0 !== m.ltcMag && (m.ltcMag.value = la.LTC_MAG_TEXTURE);
        Q.upload(L, z.uniformsList, m, J);
      }
      g.setValue(L, "modelViewMatrix", b.modelViewMatrix);
      g.setValue(L, "normalMatrix", b.normalMatrix);
      g.setValue(L, "modelMatrix", b.matrixWorld);
      return f;
    }
    function w(d, n) {
      d.specular.value = n.specular;
      d.shininess.value = Math.max(n.shininess, 1E-4);
      n.emissiveMap && (d.emissiveMap.value = n.emissiveMap);
      n.bumpMap && (d.bumpMap.value = n.bumpMap, d.bumpScale.value = n.bumpScale);
      n.normalMap && (d.normalMap.value = n.normalMap, d.normalScale.value.copy(n.normalScale));
      n.displacementMap && (d.displacementMap.value = n.displacementMap, d.displacementScale.value = n.displacementScale, d.displacementBias.value = n.displacementBias);
    }
    function u(d, n) {
      d.roughness.value = n.roughness;
      d.metalness.value = n.metalness;
      n.roughnessMap && (d.roughnessMap.value = n.roughnessMap);
      n.metalnessMap && (d.metalnessMap.value = n.metalnessMap);
      n.emissiveMap && (d.emissiveMap.value = n.emissiveMap);
      n.bumpMap && (d.bumpMap.value = n.bumpMap, d.bumpScale.value = n.bumpScale);
      n.normalMap && (d.normalMap.value = n.normalMap, d.normalScale.value.copy(n.normalScale));
      n.displacementMap && (d.displacementMap.value = n.displacementMap, d.displacementScale.value = n.displacementScale, d.displacementBias.value = n.displacementBias);
      n.envMap && (d.envMapIntensity.value = n.envMapIntensity);
    }
    function v(d) {
      var n;
      if (1E3 === d) {
        return L.REPEAT;
      }
      if (1001 === d) {
        return L.CLAMP_TO_EDGE;
      }
      if (1002 === d) {
        return L.MIRRORED_REPEAT;
      }
      if (1003 === d) {
        return L.NEAREST;
      }
      if (1004 === d) {
        return L.NEAREST_MIPMAP_NEAREST;
      }
      if (1005 === d) {
        return L.NEAREST_MIPMAP_LINEAR;
      }
      if (1006 === d) {
        return L.LINEAR;
      }
      if (1007 === d) {
        return L.LINEAR_MIPMAP_NEAREST;
      }
      if (1008 === d) {
        return L.LINEAR_MIPMAP_LINEAR;
      }
      if (1009 === d) {
        return L.UNSIGNED_BYTE;
      }
      if (1017 === d) {
        return L.UNSIGNED_SHORT_4_4_4_4;
      }
      if (1018 === d) {
        return L.UNSIGNED_SHORT_5_5_5_1;
      }
      if (1019 === d) {
        return L.UNSIGNED_SHORT_5_6_5;
      }
      if (1010 === d) {
        return L.BYTE;
      }
      if (1011 === d) {
        return L.SHORT;
      }
      if (1012 === d) {
        return L.UNSIGNED_SHORT;
      }
      if (1013 === d) {
        return L.INT;
      }
      if (1014 === d) {
        return L.UNSIGNED_INT;
      }
      if (1015 === d) {
        return L.FLOAT;
      }
      if (1016 === d && (n = ha.get("OES_texture_half_float"), null !== n)) {
        return n.HALF_FLOAT_OES;
      }
      if (1021 === d) {
        return L.ALPHA;
      }
      if (1022 === d) {
        return L.RGB;
      }
      if (1023 === d) {
        return L.RGBA;
      }
      if (1024 === d) {
        return L.LUMINANCE;
      }
      if (1025 === d) {
        return L.LUMINANCE_ALPHA;
      }
      if (1026 === d) {
        return L.DEPTH_COMPONENT;
      }
      if (1027 === d) {
        return L.DEPTH_STENCIL;
      }
      if (100 === d) {
        return L.FUNC_ADD;
      }
      if (101 === d) {
        return L.FUNC_SUBTRACT;
      }
      if (102 === d) {
        return L.FUNC_REVERSE_SUBTRACT;
      }
      if (200 === d) {
        return L.ZERO;
      }
      if (201 === d) {
        return L.ONE;
      }
      if (202 === d) {
        return L.SRC_COLOR;
      }
      if (203 === d) {
        return L.ONE_MINUS_SRC_COLOR;
      }
      if (204 === d) {
        return L.SRC_ALPHA;
      }
      if (205 === d) {
        return L.ONE_MINUS_SRC_ALPHA;
      }
      if (206 === d) {
        return L.DST_ALPHA;
      }
      if (207 === d) {
        return L.ONE_MINUS_DST_ALPHA;
      }
      if (208 === d) {
        return L.DST_COLOR;
      }
      if (209 === d) {
        return L.ONE_MINUS_DST_COLOR;
      }
      if (210 === d) {
        return L.SRC_ALPHA_SATURATE;
      }
      if (2001 === d || 2002 === d || 2003 === d || 2004 === d) {
        if (n = ha.get("WEBGL_compressed_texture_s3tc"), null !== n) {
          if (2001 === d) {
            return n.COMPRESSED_RGB_S3TC_DXT1_EXT;
          }
          if (2002 === d) {
            return n.COMPRESSED_RGBA_S3TC_DXT1_EXT;
          }
          if (2003 === d) {
            return n.COMPRESSED_RGBA_S3TC_DXT3_EXT;
          }
          if (2004 === d) {
            return n.COMPRESSED_RGBA_S3TC_DXT5_EXT;
          }
        }
      }
      if (2100 === d || 2101 === d || 2102 === d || 2103 === d) {
        if (n = ha.get("WEBGL_compressed_texture_pvrtc"), null !== n) {
          if (2100 === d) {
            return n.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
          }
          if (2101 === d) {
            return n.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
          }
          if (2102 === d) {
            return n.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
          }
          if (2103 === d) {
            return n.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
          }
        }
      }
      if (2151 === d && (n = ha.get("WEBGL_compressed_texture_etc1"), null !== n)) {
        return n.COMPRESSED_RGB_ETC1_WEBGL;
      }
      if (103 === d || 104 === d) {
        if (n = ha.get("EXT_blend_minmax"), null !== n) {
          if (103 === d) {
            return n.MIN_EXT;
          }
          if (104 === d) {
            return n.MAX_EXT;
          }
        }
      }
      return 1020 === d && (n = ha.get("WEBGL_depth_texture"), null !== n) ? n.UNSIGNED_INT_24_8_WEBGL : 0;
    }
    console.log("THREE.WebGLRenderer", "85dev");
    d = d || {};
    var C = void 0 !== d.canvas ? d.canvas : document.createElementNS("http://www.w3.org/1999/xhtml", "canvas"), y = void 0 !== d.context ? d.context : null, A = void 0 !== d.alpha ? d.alpha : !1, x = void 0 !== d.depth ? d.depth : !0, B = void 0 !== d.stencil ? d.stencil : !0, F = void 0 !== d.antialias ? d.antialias : !1, I = void 0 !== d.premultipliedAlpha ? d.premultipliedAlpha : !0, G = void 0 !== d.preserveDrawingBuffer ? d.preserveDrawingBuffer : !1, D = [], V = null, K = new Float32Array(8), 
    H = [], ca = [];
    this.domElement = C;
    this.context = null;
    this.sortObjects = this.autoClearStencil = this.autoClearDepth = this.autoClearColor = this.autoClear = !0;
    this.clippingPlanes = [];
    this.localClippingEnabled = !1;
    this.gammaFactor = 2;
    this.physicallyCorrectLights = this.gammaOutput = this.gammaInput = !1;
    this.toneMappingWhitePoint = this.toneMappingExposure = this.toneMapping = 1;
    this.maxMorphTargets = 8;
    this.maxMorphNormals = 4;
    var J = this, R = null, ka = null, ia = null, P = -1, M = "", N = null, ba = new g, O = null, da = new g, S = 0, ma = new Z(0), Ga = 0, ra = C.width, Ka = C.height, X = 1, Hc = new g(0, 0, ra, Ka), rd = !1, Db = new g(0, 0, ra, Ka), Y = new Va, Sa = new xf, aa = !1, Aa = !1, Ba = new q, sa = new f, ga = new q, Ca = new q, oa = {hash:"", ambient:[0, 0, 0], directional:[], directionalShadowMap:[], directionalShadowMatrix:[], spot:[], spotShadowMap:[], spotShadowMatrix:[], rectArea:[], point:[], 
    pointShadowMap:[], pointShadowMatrix:[], hemi:[], shadows:[]}, ja = {geometries:0, textures:0}, ua = {frame:0, calls:0, vertices:0, faces:0, points:0};
    this.info = {render:ua, memory:ja, programs:null};
    var L;
    try {
      A = {alpha:A, depth:x, stencil:B, antialias:F, premultipliedAlpha:I, preserveDrawingBuffer:G};
      L = y || C.getContext("webgl", A) || C.getContext("experimental-webgl", A);
      if (null === L) {
        if (null !== C.getContext("webgl")) {
          throw "Error creating WebGL context with your selected attributes.";
        }
        throw "Error creating WebGL context.";
      }
      void 0 === L.getShaderPrecisionFormat && (L.getShaderPrecisionFormat = function() {
        return {rangeMin:1, rangeMax:1, precision:1};
      });
      C.addEventListener("webglcontextlost", b, !1);
    } catch (yf) {
      console.error("THREE.WebGLRenderer: " + yf);
    }
    var ha = new wf(L);
    ha.get("WEBGL_depth_texture");
    ha.get("OES_texture_float");
    ha.get("OES_texture_float_linear");
    ha.get("OES_texture_half_float");
    ha.get("OES_texture_half_float_linear");
    ha.get("OES_standard_derivatives");
    ha.get("ANGLE_instanced_arrays");
    ha.get("OES_element_index_uint") && (ea.MaxIndex = 4294967296);
    var ab = new vf(L, ha, d), qa = new uf(L, ha, v), Ra = new tf, tb = new sf(L, ha, qa, Ra, ab, v, ja), wa = new gf(L), sd = new lf(L, wa, ja), xa = new nf(L, sd, ua), za = new rf(this, ab), Eb = new mf, td = new hf;
    this.info.programs = za.programs;
    var Fb = new kf(L, ha, ua), Ja = new jf(L, ha, ua), Ha, Fa, Da, Ea;
    n();
    this.context = L;
    this.capabilities = ab;
    this.extensions = ha;
    this.properties = Ra;
    this.state = qa;
    var Oa = new qd(this, oa, xa, ab);
    this.shadowMap = Oa;
    var Pa = new fa(this, H), Qa = new pa(this, ca);
    this.getContext = function() {
      return L;
    };
    this.getContextAttributes = function() {
      return L.getContextAttributes();
    };
    this.forceContextLoss = function() {
      ha.get("WEBGL_lose_context").loseContext();
    };
    this.getMaxAnisotropy = function() {
      return ab.getMaxAnisotropy();
    };
    this.getPrecision = function() {
      return ab.precision;
    };
    this.getPixelRatio = function() {
      return X;
    };
    this.setPixelRatio = function(d) {
      void 0 !== d && (X = d, this.setSize(Db.z, Db.w, !1));
    };
    this.getSize = function() {
      return {width:ra, height:Ka};
    };
    this.setSize = function(d, n, a) {
      ra = d;
      Ka = n;
      C.width = d * X;
      C.height = n * X;
      !1 !== a && (C.style.width = d + "px", C.style.height = n + "px");
      this.setViewport(0, 0, d, n);
    };
    this.setViewport = function(d, n, a, b) {
      qa.viewport(Db.set(d, n, a, b));
    };
    this.setScissor = function(d, n, a, b) {
      qa.scissor(Hc.set(d, n, a, b));
    };
    this.setScissorTest = function(d) {
      qa.setScissorTest(rd = d);
    };
    this.getClearColor = function() {
      return ma;
    };
    this.setClearColor = function(d, n) {
      ma.set(d);
      Ga = void 0 !== n ? n : 1;
      qa.buffers.color.setClear(ma.r, ma.g, ma.b, Ga, I);
    };
    this.getClearAlpha = function() {
      return Ga;
    };
    this.setClearAlpha = function(d) {
      Ga = d;
      qa.buffers.color.setClear(ma.r, ma.g, ma.b, Ga, I);
    };
    this.clear = function(d, n, a) {
      var b = 0;
      if (void 0 === d || d) {
        b |= L.COLOR_BUFFER_BIT;
      }
      if (void 0 === n || n) {
        b |= L.DEPTH_BUFFER_BIT;
      }
      if (void 0 === a || a) {
        b |= L.STENCIL_BUFFER_BIT;
      }
      L.clear(b);
    };
    this.clearColor = function() {
      this.clear(!0, !1, !1);
    };
    this.clearDepth = function() {
      this.clear(!1, !0, !1);
    };
    this.clearStencil = function() {
      this.clear(!1, !1, !0);
    };
    this.clearTarget = function(d, n, a, b) {
      this.setRenderTarget(d);
      this.clear(n, a, b);
    };
    this.resetGLState = a;
    this.dispose = function() {
      C.removeEventListener("webglcontextlost", b, !1);
      td.dispose();
    };
    this.renderBufferImmediate = function(d, n, a) {
      qa.initAttributes();
      var b = Ra.get(d);
      d.hasPositions && !b.position && (b.position = L.createBuffer());
      d.hasNormals && !b.normal && (b.normal = L.createBuffer());
      d.hasUvs && !b.uv && (b.uv = L.createBuffer());
      d.hasColors && !b.color && (b.color = L.createBuffer());
      n = n.getAttributes();
      d.hasPositions && (L.bindBuffer(L.ARRAY_BUFFER, b.position), L.bufferData(L.ARRAY_BUFFER, d.positionArray, L.DYNAMIC_DRAW), qa.enableAttribute(n.position), L.vertexAttribPointer(n.position, 3, L.FLOAT, !1, 0, 0));
      if (d.hasNormals) {
        L.bindBuffer(L.ARRAY_BUFFER, b.normal);
        if (!a.isMeshPhongMaterial && !a.isMeshStandardMaterial && !a.isMeshNormalMaterial && 1 === a.shading) {
          for (var z = 0, f = 3 * d.count;z < f;z += 9) {
            var c = d.normalArray, e = (c[z + 0] + c[z + 3] + c[z + 6]) / 3, g = (c[z + 1] + c[z + 4] + c[z + 7]) / 3, m = (c[z + 2] + c[z + 5] + c[z + 8]) / 3;
            c[z + 0] = e;
            c[z + 1] = g;
            c[z + 2] = m;
            c[z + 3] = e;
            c[z + 4] = g;
            c[z + 5] = m;
            c[z + 6] = e;
            c[z + 7] = g;
            c[z + 8] = m;
          }
        }
        L.bufferData(L.ARRAY_BUFFER, d.normalArray, L.DYNAMIC_DRAW);
        qa.enableAttribute(n.normal);
        L.vertexAttribPointer(n.normal, 3, L.FLOAT, !1, 0, 0);
      }
      d.hasUvs && a.map && (L.bindBuffer(L.ARRAY_BUFFER, b.uv), L.bufferData(L.ARRAY_BUFFER, d.uvArray, L.DYNAMIC_DRAW), qa.enableAttribute(n.uv), L.vertexAttribPointer(wa.uv, 2, L.FLOAT, !1, 0, 0));
      d.hasColors && 0 !== a.vertexColors && (L.bindBuffer(L.ARRAY_BUFFER, b.color), L.bufferData(L.ARRAY_BUFFER, d.colorArray, L.DYNAMIC_DRAW), qa.enableAttribute(n.color), L.vertexAttribPointer(n.color, 3, L.FLOAT, !1, 0, 0));
      qa.disableUnusedAttributes();
      L.drawArrays(L.TRIANGLES, 0, d.count);
      d.count = 0;
    };
    this.renderBufferDirect = function(d, n, a, b, z, c) {
      qa.setMaterial(b);
      var f = l(d, n, b, z);
      d = a.id + "_" + f.id + "_" + (!0 === b.wireframe);
      var e = !1;
      d !== M && (M = d, e = !0);
      n = z.morphTargetInfluences;
      if (void 0 !== n) {
        var g = [];
        d = 0;
        for (var m = n.length;d < m;d++) {
          e = n[d], g.push([e, d]);
        }
        g.sort(k);
        8 < g.length && (g.length = 8);
        var E = a.morphAttributes;
        d = 0;
        for (m = g.length;d < m;d++) {
          e = g[d], K[d] = e[0], 0 !== e[0] ? (n = e[1], !0 === b.morphTargets && E.position && a.addAttribute("morphTarget" + d, E.position[n]), !0 === b.morphNormals && E.normal && a.addAttribute("morphNormal" + d, E.normal[n])) : (!0 === b.morphTargets && a.removeAttribute("morphTarget" + d), !0 === b.morphNormals && a.removeAttribute("morphNormal" + d));
        }
        d = g.length;
        for (n = K.length;d < n;d++) {
          K[d] = 0;
        }
        f.getUniforms().setValue(L, "morphTargetInfluences", K);
        e = !0;
      }
      n = a.index;
      m = a.attributes.position;
      g = 1;
      !0 === b.wireframe && (n = sd.getWireframeAttribute(a), g = 2);
      d = Fb;
      null !== n && (d = Ja, d.setIndex(n));
      if (e) {
        var e = void 0, q;
        if (a && a.isInstancedBufferGeometry && (q = ha.get("ANGLE_instanced_arrays"), null === q)) {
          console.error("THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
        } else {
          void 0 === e && (e = 0);
          qa.initAttributes();
          var E = a.attributes, f = f.getAttributes(), h = b.defaultAttributeValues, p;
          for (p in f) {
            var r = f[p];
            if (0 <= r) {
              var t = E[p];
              if (void 0 !== t) {
                var T = t.normalized, w = t.itemSize, U = wa.get(t), u = U.buffer, v = U.type, U = U.bytesPerElement;
                if (t.isInterleavedBufferAttribute) {
                  var C = t.data, W = C.stride, t = t.offset;
                  C && C.isInstancedInterleavedBuffer ? (qa.enableAttributeAndDivisor(r, C.meshPerAttribute, q), void 0 === a.maxInstancedCount && (a.maxInstancedCount = C.meshPerAttribute * C.count)) : qa.enableAttribute(r);
                  L.bindBuffer(L.ARRAY_BUFFER, u);
                  L.vertexAttribPointer(r, w, v, T, W * U, (e * W + t) * U);
                } else {
                  t.isInstancedBufferAttribute ? (qa.enableAttributeAndDivisor(r, t.meshPerAttribute, q), void 0 === a.maxInstancedCount && (a.maxInstancedCount = t.meshPerAttribute * t.count)) : qa.enableAttribute(r), L.bindBuffer(L.ARRAY_BUFFER, u), L.vertexAttribPointer(r, w, v, T, 0, e * w * U);
                }
              } else {
                if (void 0 !== h && (T = h[p], void 0 !== T)) {
                  switch(T.length) {
                    case 2:
                      L.vertexAttrib2fv(r, T);
                      break;
                    case 3:
                      L.vertexAttrib3fv(r, T);
                      break;
                    case 4:
                      L.vertexAttrib4fv(r, T);
                      break;
                    default:
                      L.vertexAttrib1fv(r, T);
                  }
                }
              }
            }
          }
          qa.disableUnusedAttributes();
        }
        null !== n && L.bindBuffer(L.ELEMENT_ARRAY_BUFFER, wa.get(n).buffer);
      }
      q = 0;
      null !== n ? q = n.count : void 0 !== m && (q = m.count);
      n = a.drawRange.start * g;
      m = null !== c ? c.start * g : 0;
      p = Math.max(n, m);
      c = Math.max(0, Math.min(q, n + a.drawRange.count * g, m + (null !== c ? c.count * g : Infinity)) - 1 - p + 1);
      if (0 !== c) {
        if (z.isMesh) {
          if (!0 === b.wireframe) {
            qa.setLineWidth(b.wireframeLinewidth * (null === ka ? X : 1)), d.setMode(L.LINES);
          } else {
            switch(z.drawMode) {
              case 0:
                d.setMode(L.TRIANGLES);
                break;
              case 1:
                d.setMode(L.TRIANGLE_STRIP);
                break;
              case 2:
                d.setMode(L.TRIANGLE_FAN);
            }
          }
        } else {
          z.isLine ? (b = b.linewidth, void 0 === b && (b = 1), qa.setLineWidth(b * (null === ka ? X : 1)), z.isLineSegments ? d.setMode(L.LINES) : z.isLineLoop ? d.setMode(L.LINE_LOOP) : d.setMode(L.LINE_STRIP)) : z.isPoints && d.setMode(L.POINTS);
        }
        a && a.isInstancedBufferGeometry ? 0 < a.maxInstancedCount && d.renderInstances(a, p, c) : d.render(p, c);
      }
    };
    this.render = function(d, n, a, b) {
      if (void 0 !== n && !0 !== n.isCamera) {
        console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
      } else {
        M = "";
        P = -1;
        N = null;
        !0 === d.autoUpdate && d.updateMatrixWorld();
        n.onBeforeRender(J);
        null === n.parent && n.updateMatrixWorld();
        n.matrixWorldInverse.getInverse(n.matrixWorld);
        Ba.multiplyMatrices(n.projectionMatrix, n.matrixWorldInverse);
        Y.setFromMatrix(Ba);
        D.length = 0;
        H.length = 0;
        ca.length = 0;
        Aa = this.localClippingEnabled;
        aa = Sa.init(this.clippingPlanes, Aa, n);
        V = td.get(d, n);
        V.init();
        h(d, n, J.sortObjects);
        V.finish();
        !0 === J.sortObjects && V.sort();
        aa && Sa.beginShadows();
        for (var z = D, c = 0, f = 0, e = z.length;f < e;f++) {
          var g = z[f];
          g.castShadow && (oa.shadows[c] = g, c++);
        }
        oa.shadows.length = c;
        Oa.render(d, n);
        for (var z = D, m, E = g = 0, k = 0, r, t, T, l = n.matrixWorldInverse, w = 0, U = 0, u = 0, v = 0, C = 0, c = 0, f = z.length;c < f;c++) {
          if (e = z[c], m = e.color, r = e.intensity, t = e.distance, T = e.shadow && e.shadow.map ? e.shadow.map.texture : null, e.isAmbientLight) {
            g += m.r * r, E += m.g * r, k += m.b * r;
          } else {
            if (e.isDirectionalLight) {
              var W = Eb.get(e);
              W.color.copy(e.color).multiplyScalar(e.intensity);
              W.direction.setFromMatrixPosition(e.matrixWorld);
              sa.setFromMatrixPosition(e.target.matrixWorld);
              W.direction.sub(sa);
              W.direction.transformDirection(l);
              if (W.shadow = e.castShadow) {
                m = e.shadow, W.shadowBias = m.bias, W.shadowRadius = m.radius, W.shadowMapSize = m.mapSize;
              }
              oa.directionalShadowMap[w] = T;
              oa.directionalShadowMatrix[w] = e.shadow.matrix;
              oa.directional[w] = W;
              w++;
            } else {
              if (e.isSpotLight) {
                W = Eb.get(e);
                W.position.setFromMatrixPosition(e.matrixWorld);
                W.position.applyMatrix4(l);
                W.color.copy(m).multiplyScalar(r);
                W.distance = t;
                W.direction.setFromMatrixPosition(e.matrixWorld);
                sa.setFromMatrixPosition(e.target.matrixWorld);
                W.direction.sub(sa);
                W.direction.transformDirection(l);
                W.coneCos = Math.cos(e.angle);
                W.penumbraCos = Math.cos(e.angle * (1 - e.penumbra));
                W.decay = 0 === e.distance ? 0 : e.decay;
                if (W.shadow = e.castShadow) {
                  m = e.shadow, W.shadowBias = m.bias, W.shadowRadius = m.radius, W.shadowMapSize = m.mapSize;
                }
                oa.spotShadowMap[u] = T;
                oa.spotShadowMatrix[u] = e.shadow.matrix;
                oa.spot[u] = W;
                u++;
              } else {
                if (e.isRectAreaLight) {
                  W = Eb.get(e), W.color.copy(m).multiplyScalar(r / (e.width * e.height)), W.position.setFromMatrixPosition(e.matrixWorld), W.position.applyMatrix4(l), Ca.identity(), ga.copy(e.matrixWorld), ga.premultiply(l), Ca.extractRotation(ga), W.halfWidth.set(.5 * e.width, 0, 0), W.halfHeight.set(0, .5 * e.height, 0), W.halfWidth.applyMatrix4(Ca), W.halfHeight.applyMatrix4(Ca), oa.rectArea[v] = W, v++;
                } else {
                  if (e.isPointLight) {
                    W = Eb.get(e);
                    W.position.setFromMatrixPosition(e.matrixWorld);
                    W.position.applyMatrix4(l);
                    W.color.copy(e.color).multiplyScalar(e.intensity);
                    W.distance = e.distance;
                    W.decay = 0 === e.distance ? 0 : e.decay;
                    if (W.shadow = e.castShadow) {
                      m = e.shadow, W.shadowBias = m.bias, W.shadowRadius = m.radius, W.shadowMapSize = m.mapSize;
                    }
                    oa.pointShadowMap[U] = T;
                    void 0 === oa.pointShadowMatrix[U] && (oa.pointShadowMatrix[U] = new q);
                    sa.setFromMatrixPosition(e.matrixWorld).negate();
                    oa.pointShadowMatrix[U].identity().setPosition(sa);
                    oa.point[U] = W;
                    U++;
                  } else {
                    e.isHemisphereLight && (W = Eb.get(e), W.direction.setFromMatrixPosition(e.matrixWorld), W.direction.transformDirection(l), W.direction.normalize(), W.skyColor.copy(e.color).multiplyScalar(r), W.groundColor.copy(e.groundColor).multiplyScalar(r), oa.hemi[C] = W, C++);
                  }
                }
              }
            }
          }
        }
        oa.ambient[0] = g;
        oa.ambient[1] = E;
        oa.ambient[2] = k;
        oa.directional.length = w;
        oa.spot.length = u;
        oa.rectArea.length = v;
        oa.point.length = U;
        oa.hemi.length = C;
        oa.hash = w + "," + U + "," + u + "," + v + "," + C + "," + oa.shadows.length;
        aa && Sa.endShadows();
        ua.frame++;
        ua.calls = 0;
        ua.vertices = 0;
        ua.faces = 0;
        ua.points = 0;
        void 0 === a && (a = null);
        this.setRenderTarget(a);
        z = d.background;
        null === z ? qa.buffers.color.setClear(ma.r, ma.g, ma.b, Ga, I) : z && z.isColor && (qa.buffers.color.setClear(z.r, z.g, z.b, 1, I), b = !0);
        (this.autoClear || b) && this.clear(this.autoClearColor, this.autoClearDepth, this.autoClearStencil);
        z && z.isCubeTexture ? (void 0 === Da && (Da = new Ma, Ea = new Ia(new Ua(5, 5, 5), new ta({uniforms:xb.cube.uniforms, vertexShader:xb.cube.vertexShader, fragmentShader:xb.cube.fragmentShader, side:1, depthTest:!1, depthWrite:!1, fog:!1}))), Da.projectionMatrix.copy(n.projectionMatrix), Da.matrixWorld.extractRotation(n.matrixWorld), Da.matrixWorldInverse.getInverse(Da.matrixWorld), Ea.material.uniforms.tCube.value = z, Ea.modelViewMatrix.multiplyMatrices(Da.matrixWorldInverse, Ea.matrixWorld), 
        xa.update(Ea), J.renderBufferDirect(Da, null, Ea.geometry, Ea.material, Ea, null)) : z && z.isTexture && (void 0 === Ha && (Ha = new Wb(-1, 1, 1, -1, 0, 1), Fa = new Ia(new Cb(2, 2), new La({depthTest:!1, depthWrite:!1, fog:!1}))), Fa.material.map = z, xa.update(Fa), J.renderBufferDirect(Ha, null, Fa.geometry, Fa.material, Fa, null));
        b = V.opaque;
        z = V.transparent;
        d.overrideMaterial ? (c = d.overrideMaterial, b.length && p(b, d, n, c), z.length && p(z, d, n, c)) : (b.length && p(b, d, n), z.length && p(z, d, n));
        Pa.render(d, n);
        Qa.render(d, n, da);
        a && tb.updateRenderTargetMipmap(a);
        qa.buffers.depth.setTest(!0);
        qa.buffers.depth.setMask(!0);
        qa.buffers.color.setMask(!0);
        n.isArrayCamera && n.enabled && J.setScissorTest(!1);
        n.onAfterRender(J);
      }
    };
    this.setFaceCulling = function(d, n) {
      qa.setCullFace(d);
      qa.setFlipSided(0 === n);
    };
    this.allocTextureUnit = function() {
      var d = S;
      d >= ab.maxTextures && console.warn("WebGLRenderer: trying to use " + d + " texture units while this GPU supports only " + ab.maxTextures);
      S += 1;
      return d;
    };
    this.setTexture2D = function() {
      var d = !1;
      return function(n, a) {
        n && n.isWebGLRenderTarget && (d || (console.warn("THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead."), d = !0), n = n.texture);
        tb.setTexture2D(n, a);
      };
    }();
    this.setTexture = function() {
      var d = !1;
      return function(n, a) {
        d || (console.warn("THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead."), d = !0);
        tb.setTexture2D(n, a);
      };
    }();
    this.setTextureCube = function() {
      var d = !1;
      return function(n, a) {
        n && n.isWebGLRenderTargetCube && (d || (console.warn("THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead."), d = !0), n = n.texture);
        n && n.isCubeTexture || Array.isArray(n.image) && 6 === n.image.length ? tb.setTextureCube(n, a) : tb.setTextureCubeDynamic(n, a);
      };
    }();
    this.getRenderTarget = function() {
      return ka;
    };
    this.setRenderTarget = function(d) {
      (ka = d) && void 0 === Ra.get(d).__webglFramebuffer && tb.setupRenderTarget(d);
      var n = d && d.isWebGLRenderTargetCube, a;
      d ? (a = Ra.get(d), a = n ? a.__webglFramebuffer[d.activeCubeFace] : a.__webglFramebuffer, ba.copy(d.scissor), O = d.scissorTest, da.copy(d.viewport)) : (a = null, ba.copy(Hc).multiplyScalar(X), O = rd, da.copy(Db).multiplyScalar(X));
      ia !== a && (L.bindFramebuffer(L.FRAMEBUFFER, a), ia = a);
      qa.scissor(ba);
      qa.setScissorTest(O);
      qa.viewport(da);
      n && (n = Ra.get(d.texture), L.framebufferTexture2D(L.FRAMEBUFFER, L.COLOR_ATTACHMENT0, L.TEXTURE_CUBE_MAP_POSITIVE_X + d.activeCubeFace, n.__webglTexture, d.activeMipMapLevel));
    };
    this.readRenderTargetPixels = function(d, n, a, b, z, c) {
      if (!1 === (d && d.isWebGLRenderTarget)) {
        console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
      } else {
        var f = Ra.get(d).__webglFramebuffer;
        if (f) {
          var e = !1;
          f !== ia && (L.bindFramebuffer(L.FRAMEBUFFER, f), e = !0);
          try {
            var m = d.texture, g = m.format, E = m.type;
            1023 !== g && v(g) !== L.getParameter(L.IMPLEMENTATION_COLOR_READ_FORMAT) ? console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.") : 1009 === E || v(E) === L.getParameter(L.IMPLEMENTATION_COLOR_READ_TYPE) || 1015 === E && (ha.get("OES_texture_float") || ha.get("WEBGL_color_buffer_float")) || 1016 === E && ha.get("EXT_color_buffer_half_float") ? L.checkFramebufferStatus(L.FRAMEBUFFER) === L.FRAMEBUFFER_COMPLETE ? 0 <= 
            n && n <= d.width - b && 0 <= a && a <= d.height - z && L.readPixels(n, a, b, z, v(g), v(E), c) : console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.") : console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
          } finally {
            e && L.bindFramebuffer(L.FRAMEBUFFER, ia);
          }
        }
      }
    };
  }
  function Xb(d, n) {
    this.name = "";
    this.color = new Z(d);
    this.density = void 0 !== n ? n : 2.5E-4;
  }
  function Yb(d, n, a) {
    this.name = "";
    this.color = new Z(d);
    this.near = void 0 !== n ? n : 1;
    this.far = void 0 !== a ? a : 1E3;
  }
  function ud() {
    aa.call(this);
    this.type = "Scene";
    this.overrideMaterial = this.fog = this.background = null;
    this.autoUpdate = !0;
  }
  function de(d, n, a, b, c) {
    aa.call(this);
    this.lensFlares = [];
    this.positionScreen = new f;
    this.customUpdateCallback = void 0;
    void 0 !== d && this.add(d, n, a, b, c);
  }
  function Ab(d) {
    X.call(this);
    this.type = "SpriteMaterial";
    this.color = new Z(16777215);
    this.map = null;
    this.rotation = 0;
    this.lights = this.fog = !1;
    this.setValues(d);
  }
  function Ic(d) {
    aa.call(this);
    this.type = "Sprite";
    this.material = void 0 !== d ? d : new Ab;
  }
  function Jc() {
    aa.call(this);
    this.type = "LOD";
    Object.defineProperties(this, {levels:{enumerable:!0, value:[]}});
  }
  function Kc(d, n) {
    d = d || [];
    this.bones = d.slice(0);
    this.boneMatrices = new Float32Array(16 * this.bones.length);
    if (void 0 === n) {
      this.calculateInverses();
    } else {
      if (this.bones.length === n.length) {
        this.boneInverses = n.slice(0);
      } else {
        for (console.warn("THREE.Skeleton boneInverses is the wrong length."), this.boneInverses = [], d = 0, n = this.bones.length;d < n;d++) {
          this.boneInverses.push(new q);
        }
      }
    }
  }
  function vd() {
    aa.call(this);
    this.type = "Bone";
  }
  function wd(d, n) {
    Ia.call(this, d, n);
    this.type = "SkinnedMesh";
    this.bindMode = "attached";
    this.bindMatrix = new q;
    this.bindMatrixInverse = new q;
    d = this.initBones();
    d = new Kc(d);
    this.bind(d, this.matrixWorld);
    this.normalizeSkinWeights();
  }
  function za(d) {
    X.call(this);
    this.type = "LineBasicMaterial";
    this.color = new Z(16777215);
    this.linewidth = 1;
    this.linejoin = this.linecap = "round";
    this.lights = !1;
    this.setValues(d);
  }
  function cb(d, n, a) {
    if (1 === a) {
      return console.warn("THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead."), new wa(d, n);
    }
    aa.call(this);
    this.type = "Line";
    this.geometry = void 0 !== d ? d : new ea;
    this.material = void 0 !== n ? n : new za({color:16777215 * Math.random()});
  }
  function wa(d, n) {
    cb.call(this, d, n);
    this.type = "LineSegments";
  }
  function xd(d, n) {
    cb.call(this, d, n);
    this.type = "LineLoop";
  }
  function db(d) {
    X.call(this);
    this.type = "PointsMaterial";
    this.color = new Z(16777215);
    this.map = null;
    this.size = 1;
    this.sizeAttenuation = !0;
    this.lights = !1;
    this.setValues(d);
  }
  function Zb(d, n) {
    aa.call(this);
    this.type = "Points";
    this.geometry = void 0 !== d ? d : new ea;
    this.material = void 0 !== n ? n : new db({color:16777215 * Math.random()});
  }
  function Lc() {
    aa.call(this);
    this.type = "Group";
  }
  function yd(d, n, a, c, f, e, m, g, k) {
    function z() {
      requestAnimationFrame(z);
      d.readyState >= d.HAVE_CURRENT_DATA && (E.needsUpdate = !0);
    }
    b.call(this, d, n, a, c, f, e, m, g, k);
    this.generateMipmaps = !1;
    var E = this;
    z();
  }
  function $b(d, n, a, c, f, e, m, g, k, q, p, h) {
    b.call(this, null, e, m, g, k, q, c, f, p, h);
    this.image = {width:n, height:a};
    this.mipmaps = d;
    this.generateMipmaps = this.flipY = !1;
  }
  function zd(d, n, a, c, f, e, m, g, k) {
    b.call(this, d, n, a, c, f, e, m, g, k);
    this.needsUpdate = !0;
  }
  function Mc(d, n, a, c, f, e, m, g, k, q) {
    q = void 0 !== q ? q : 1026;
    if (1026 !== q && 1027 !== q) {
      throw Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
    }
    void 0 === a && 1026 === q && (a = 1012);
    void 0 === a && 1027 === q && (a = 1020);
    b.call(this, null, c, f, e, m, g, q, a, k);
    this.image = {width:d, height:n};
    this.magFilter = void 0 !== m ? m : 1003;
    this.minFilter = void 0 !== g ? g : 1003;
    this.generateMipmaps = this.flipY = !1;
  }
  function ac(d) {
    function n(d, n) {
      return d - n;
    }
    ea.call(this);
    this.type = "WireframeGeometry";
    var a = [], b, c, e, m, g = [0, 0], k = {}, q, p = ["a", "b", "c"];
    if (d && d.isGeometry) {
      var h = d.faces;
      b = 0;
      for (e = h.length;b < e;b++) {
        var r = h[b];
        for (c = 0;3 > c;c++) {
          g[0] = r[p[c]], g[1] = r[p[(c + 1) % 3]], g.sort(n), q = g.toString(), void 0 === k[q] && (k[q] = {index1:g[0], index2:g[1]});
        }
      }
      for (q in k) {
        b = k[q], p = d.vertices[b.index1], a.push(p.x, p.y, p.z), p = d.vertices[b.index2], a.push(p.x, p.y, p.z);
      }
    } else {
      if (d && d.isBufferGeometry) {
        var t, p = new f;
        if (null !== d.index) {
          h = d.attributes.position;
          r = d.index;
          t = d.groups;
          0 === t.length && (t = [{start:0, count:r.count, materialIndex:0}]);
          d = 0;
          for (m = t.length;d < m;++d) {
            for (b = t[d], c = b.start, e = b.count, b = c, e = c + e;b < e;b += 3) {
              for (c = 0;3 > c;c++) {
                g[0] = r.getX(b + c), g[1] = r.getX(b + (c + 1) % 3), g.sort(n), q = g.toString(), void 0 === k[q] && (k[q] = {index1:g[0], index2:g[1]});
              }
            }
          }
          for (q in k) {
            b = k[q], p.fromBufferAttribute(h, b.index1), a.push(p.x, p.y, p.z), p.fromBufferAttribute(h, b.index2), a.push(p.x, p.y, p.z);
          }
        } else {
          for (h = d.attributes.position, b = 0, e = h.count / 3;b < e;b++) {
            for (c = 0;3 > c;c++) {
              k = 3 * b + c, p.fromBufferAttribute(h, k), a.push(p.x, p.y, p.z), k = 3 * b + (c + 1) % 3, p.fromBufferAttribute(h, k), a.push(p.x, p.y, p.z);
            }
          }
        }
      }
    }
    this.addAttribute("position", new Y(a, 3));
  }
  function Nc(d, n, a) {
    ga.call(this);
    this.type = "ParametricGeometry";
    this.parameters = {func:d, slices:n, stacks:a};
    this.fromBufferGeometry(new bc(d, n, a));
    this.mergeVertices();
  }
  function bc(d, n, a) {
    ea.call(this);
    this.type = "ParametricBufferGeometry";
    this.parameters = {func:d, slices:n, stacks:a};
    var b = [], z = [], c = [], f, e, g = n + 1;
    for (f = 0;f <= a;f++) {
      var m = f / a;
      for (e = 0;e <= n;e++) {
        var k = e / n, q = d(k, m);
        z.push(q.x, q.y, q.z);
        c.push(k, m);
      }
    }
    for (f = 0;f < a;f++) {
      for (e = 0;e < n;e++) {
        d = f * g + e + 1, m = (f + 1) * g + e + 1, k = (f + 1) * g + e, b.push(f * g + e, d, k), b.push(d, m, k);
      }
    }
    this.setIndex(b);
    this.addAttribute("position", new Y(z, 3));
    this.addAttribute("uv", new Y(c, 2));
    this.computeVertexNormals();
  }
  function Oc(d, n, a, b) {
    ga.call(this);
    this.type = "PolyhedronGeometry";
    this.parameters = {vertices:d, indices:n, radius:a, detail:b};
    this.fromBufferGeometry(new Pa(d, n, a, b));
    this.mergeVertices();
  }
  function Pa(d, n, a, b) {
    function z(d) {
      g.push(d.x, d.y, d.z);
    }
    function c(n, a) {
      n *= 3;
      a.x = d[n + 0];
      a.y = d[n + 1];
      a.z = d[n + 2];
    }
    function e(d, n, a, b) {
      0 > b && 1 === d.x && (m[n] = d.x - 1);
      0 === a.x && 0 === a.z && (m[n] = b / 2 / Math.PI + .5);
    }
    ea.call(this);
    this.type = "PolyhedronBufferGeometry";
    this.parameters = {vertices:d, indices:n, radius:a, detail:b};
    a = a || 1;
    var g = [], m = [];
    (function(d) {
      for (var a = new f, b = new f, e = new f, g = 0;g < n.length;g += 3) {
        c(n[g + 0], a);
        c(n[g + 1], b);
        c(n[g + 2], e);
        var m = a, k = b, E = e, q = Math.pow(2, d), p = [], h, r;
        for (h = 0;h <= q;h++) {
          p[h] = [];
          var t = m.clone().lerp(E, h / q), T = k.clone().lerp(E, h / q), l = q - h;
          for (r = 0;r <= l;r++) {
            p[h][r] = 0 === r && h === q ? t : t.clone().lerp(T, r / l);
          }
        }
        for (h = 0;h < q;h++) {
          for (r = 0;r < 2 * (q - h) - 1;r++) {
            m = Math.floor(r / 2), 0 === r % 2 ? (z(p[h][m + 1]), z(p[h + 1][m]), z(p[h][m])) : (z(p[h][m + 1]), z(p[h + 1][m + 1]), z(p[h + 1][m]));
          }
        }
      }
    })(b || 0);
    (function(d) {
      for (var n = new f, a = 0;a < g.length;a += 3) {
        n.x = g[a + 0], n.y = g[a + 1], n.z = g[a + 2], n.normalize().multiplyScalar(d), g[a + 0] = n.x, g[a + 1] = n.y, g[a + 2] = n.z;
      }
    })(a);
    (function() {
      for (var d = new f, n = 0;n < g.length;n += 3) {
        d.x = g[n + 0], d.y = g[n + 1], d.z = g[n + 2], m.push(Math.atan2(d.z, -d.x) / 2 / Math.PI + .5, 1 - (Math.atan2(-d.y, Math.sqrt(d.x * d.x + d.z * d.z)) / Math.PI + .5));
      }
      for (var d = new f, n = new f, a = new f, b = new f, z = new l, c = new l, k = new l, E = 0, q = 0;E < g.length;E += 9, q += 6) {
        d.set(g[E + 0], g[E + 1], g[E + 2]);
        n.set(g[E + 3], g[E + 4], g[E + 5]);
        a.set(g[E + 6], g[E + 7], g[E + 8]);
        z.set(m[q + 0], m[q + 1]);
        c.set(m[q + 2], m[q + 3]);
        k.set(m[q + 4], m[q + 5]);
        b.copy(d).add(n).add(a).divideScalar(3);
        var p = Math.atan2(b.z, -b.x);
        e(z, q + 0, d, p);
        e(c, q + 2, n, p);
        e(k, q + 4, a, p);
      }
      for (d = 0;d < m.length;d += 6) {
        n = m[d + 0], a = m[d + 2], b = m[d + 4], z = Math.min(n, a, b), .9 < Math.max(n, a, b) && .1 > z && (.2 > n && (m[d + 0] += 1), .2 > a && (m[d + 2] += 1), .2 > b && (m[d + 4] += 1));
      }
    })();
    this.addAttribute("position", new Y(g, 3));
    this.addAttribute("normal", new Y(g.slice(), 3));
    this.addAttribute("uv", new Y(m, 2));
    this.normalizeNormals();
  }
  function Pc(d, n) {
    ga.call(this);
    this.type = "TetrahedronGeometry";
    this.parameters = {radius:d, detail:n};
    this.fromBufferGeometry(new cc(d, n));
    this.mergeVertices();
  }
  function cc(d, n) {
    Pa.call(this, [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1], [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1], d, n);
    this.type = "TetrahedronBufferGeometry";
    this.parameters = {radius:d, detail:n};
  }
  function Qc(d, n) {
    ga.call(this);
    this.type = "OctahedronGeometry";
    this.parameters = {radius:d, detail:n};
    this.fromBufferGeometry(new Gb(d, n));
    this.mergeVertices();
  }
  function Gb(d, n) {
    Pa.call(this, [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1], [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2], d, n);
    this.type = "OctahedronBufferGeometry";
    this.parameters = {radius:d, detail:n};
  }
  function Rc(d, n) {
    ga.call(this);
    this.type = "IcosahedronGeometry";
    this.parameters = {radius:d, detail:n};
    this.fromBufferGeometry(new dc(d, n));
    this.mergeVertices();
  }
  function dc(d, n) {
    var a = (1 + Math.sqrt(5)) / 2;
    Pa.call(this, [-1, a, 0, 1, a, 0, -1, -a, 0, 1, -a, 0, 0, -1, a, 0, 1, a, 0, -1, -a, 0, 1, -a, a, 0, -1, a, 0, 1, -a, 0, -1, -a, 0, 1], [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1], d, n);
    this.type = "IcosahedronBufferGeometry";
    this.parameters = {radius:d, detail:n};
  }
  function Sc(d, n) {
    ga.call(this);
    this.type = "DodecahedronGeometry";
    this.parameters = {radius:d, detail:n};
    this.fromBufferGeometry(new ec(d, n));
    this.mergeVertices();
  }
  function ec(d, n) {
    var a = (1 + Math.sqrt(5)) / 2, b = 1 / a;
    Pa.call(this, [-1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, 0, -b, -a, 0, -b, a, 0, b, -a, 0, b, a, -b, -a, 0, -b, a, 0, b, -a, 0, b, a, 0, -a, 0, -b, a, 0, -b, -a, 0, b, a, 0, b], [3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8, 17, 8, 10, 17, 10, 6, 8, 0, 16, 8, 16, 2, 8, 2, 10, 0, 12, 1, 0, 1, 18, 0, 18, 16, 6, 10, 2, 6, 2, 13, 6, 13, 15, 2, 16, 18, 2, 18, 3, 2, 3, 13, 18, 1, 9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4, 0, 
    8, 11, 9, 5, 11, 5, 19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19, 4, 17, 1, 12, 14, 1, 14, 5, 1, 5, 9], d, n);
    this.type = "DodecahedronBufferGeometry";
    this.parameters = {radius:d, detail:n};
  }
  function Tc(d, n, a, b, c, f) {
    ga.call(this);
    this.type = "TubeGeometry";
    this.parameters = {path:d, tubularSegments:n, radius:a, radialSegments:b, closed:c};
    void 0 !== f && console.warn("THREE.TubeGeometry: taper has been removed.");
    d = new fc(d, n, a, b, c);
    this.tangents = d.tangents;
    this.normals = d.normals;
    this.binormals = d.binormals;
    this.fromBufferGeometry(d);
    this.mergeVertices();
  }
  function fc(d, n, a, b, c) {
    function z(z) {
      var c = d.getPointAt(z / n), f = e.normals[z];
      z = e.binormals[z];
      for (E = 0;E <= b;E++) {
        var k = E / b * Math.PI * 2, q = Math.sin(k), k = -Math.cos(k);
        m.x = k * f.x + q * z.x;
        m.y = k * f.y + q * z.y;
        m.z = k * f.z + q * z.z;
        m.normalize();
        h.push(m.x, m.y, m.z);
        g.x = c.x + a * m.x;
        g.y = c.y + a * m.y;
        g.z = c.z + a * m.z;
        p.push(g.x, g.y, g.z);
      }
    }
    ea.call(this);
    this.type = "TubeBufferGeometry";
    this.parameters = {path:d, tubularSegments:n, radius:a, radialSegments:b, closed:c};
    n = n || 64;
    a = a || 1;
    b = b || 8;
    c = c || !1;
    var e = d.computeFrenetFrames(n, c);
    this.tangents = e.tangents;
    this.normals = e.normals;
    this.binormals = e.binormals;
    var g = new f, m = new f, k = new l, q, E, p = [], h = [], r = [], t = [];
    for (q = 0;q < n;q++) {
      z(q);
    }
    z(!1 === c ? n : 0);
    for (q = 0;q <= n;q++) {
      for (E = 0;E <= b;E++) {
        k.x = q / n, k.y = E / b, r.push(k.x, k.y);
      }
    }
    (function() {
      for (E = 1;E <= n;E++) {
        for (q = 1;q <= b;q++) {
          var d = (b + 1) * E + (q - 1), a = (b + 1) * E + q, z = (b + 1) * (E - 1) + q;
          t.push((b + 1) * (E - 1) + (q - 1), d, z);
          t.push(d, a, z);
        }
      }
    })();
    this.setIndex(t);
    this.addAttribute("position", new Y(p, 3));
    this.addAttribute("normal", new Y(h, 3));
    this.addAttribute("uv", new Y(r, 2));
  }
  function Uc(d, n, a, b, c, f, e) {
    ga.call(this);
    this.type = "TorusKnotGeometry";
    this.parameters = {radius:d, tube:n, tubularSegments:a, radialSegments:b, p:c, q:f};
    void 0 !== e && console.warn("THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.");
    this.fromBufferGeometry(new gc(d, n, a, b, c, f));
    this.mergeVertices();
  }
  function gc(d, n, a, b, c, e) {
    function z(d, n, a, b, z) {
      var c = Math.sin(d);
      n = a / n * d;
      a = Math.cos(n);
      z.x = b * (2 + a) * .5 * Math.cos(d);
      z.y = b * (2 + a) * c * .5;
      z.z = b * Math.sin(n) * .5;
    }
    ea.call(this);
    this.type = "TorusKnotBufferGeometry";
    this.parameters = {radius:d, tube:n, tubularSegments:a, radialSegments:b, p:c, q:e};
    d = d || 100;
    n = n || 40;
    a = Math.floor(a) || 64;
    b = Math.floor(b) || 8;
    c = c || 2;
    e = e || 3;
    var g = [], m = [], k = [], q = [], E, p, h = new f, r = new f;
    new l;
    var t = new f, T = new f, w = new f, u = new f, U = new f;
    for (E = 0;E <= a;++E) {
      for (p = E / a * c * Math.PI * 2, z(p, c, e, d, t), z(p + .01, c, e, d, T), u.subVectors(T, t), U.addVectors(T, t), w.crossVectors(u, U), U.crossVectors(w, u), w.normalize(), U.normalize(), p = 0;p <= b;++p) {
        var v = p / b * Math.PI * 2, C = -n * Math.cos(v), v = n * Math.sin(v);
        h.x = t.x + (C * U.x + v * w.x);
        h.y = t.y + (C * U.y + v * w.y);
        h.z = t.z + (C * U.z + v * w.z);
        m.push(h.x, h.y, h.z);
        r.subVectors(h, t).normalize();
        k.push(r.x, r.y, r.z);
        q.push(E / a);
        q.push(p / b);
      }
    }
    for (p = 1;p <= a;p++) {
      for (E = 1;E <= b;E++) {
        d = (b + 1) * p + (E - 1), n = (b + 1) * p + E, c = (b + 1) * (p - 1) + E, g.push((b + 1) * (p - 1) + (E - 1), d, c), g.push(d, n, c);
      }
    }
    this.setIndex(g);
    this.addAttribute("position", new Y(m, 3));
    this.addAttribute("normal", new Y(k, 3));
    this.addAttribute("uv", new Y(q, 2));
  }
  function Vc(d, n, a, b, c) {
    ga.call(this);
    this.type = "TorusGeometry";
    this.parameters = {radius:d, tube:n, radialSegments:a, tubularSegments:b, arc:c};
    this.fromBufferGeometry(new hc(d, n, a, b, c));
  }
  function hc(d, n, a, b, c) {
    ea.call(this);
    this.type = "TorusBufferGeometry";
    this.parameters = {radius:d, tube:n, radialSegments:a, tubularSegments:b, arc:c};
    d = d || 100;
    n = n || 40;
    a = Math.floor(a) || 8;
    b = Math.floor(b) || 6;
    c = c || 2 * Math.PI;
    var z = [], e = [], g = [], m = [], k = new f, q = new f, E = new f, p, h;
    for (p = 0;p <= a;p++) {
      for (h = 0;h <= b;h++) {
        var r = h / b * c, t = p / a * Math.PI * 2;
        q.x = (d + n * Math.cos(t)) * Math.cos(r);
        q.y = (d + n * Math.cos(t)) * Math.sin(r);
        q.z = n * Math.sin(t);
        e.push(q.x, q.y, q.z);
        k.x = d * Math.cos(r);
        k.y = d * Math.sin(r);
        E.subVectors(q, k).normalize();
        g.push(E.x, E.y, E.z);
        m.push(h / b);
        m.push(p / a);
      }
    }
    for (p = 1;p <= a;p++) {
      for (h = 1;h <= b;h++) {
        d = (b + 1) * (p - 1) + h - 1, n = (b + 1) * (p - 1) + h, c = (b + 1) * p + h, z.push((b + 1) * p + h - 1, d, c), z.push(d, n, c);
      }
    }
    this.setIndex(z);
    this.addAttribute("position", new Y(e, 3));
    this.addAttribute("normal", new Y(g, 3));
    this.addAttribute("uv", new Y(m, 2));
  }
  function Bb(d, n) {
    ga.call(this);
    this.type = "ExtrudeGeometry";
    this.parameters = {shapes:d, options:n};
    this.fromBufferGeometry(new eb(d, n));
    this.mergeVertices();
  }
  function eb(d, n) {
    "undefined" !== typeof d && (ea.call(this), this.type = "ExtrudeBufferGeometry", d = Array.isArray(d) ? d : [d], this.addShapeList(d, n), this.computeVertexNormals());
  }
  function Wc(d, n) {
    ga.call(this);
    this.type = "TextGeometry";
    this.parameters = {text:d, parameters:n};
    this.fromBufferGeometry(new ic(d, n));
    this.mergeVertices();
  }
  function ic(d, n) {
    n = n || {};
    var a = n.font;
    if (!1 === (a && a.isFont)) {
      return console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font."), new ga;
    }
    a = a.generateShapes(d, n.size, n.curveSegments);
    n.amount = void 0 !== n.height ? n.height : 50;
    void 0 === n.bevelThickness && (n.bevelThickness = 10);
    void 0 === n.bevelSize && (n.bevelSize = 8);
    void 0 === n.bevelEnabled && (n.bevelEnabled = !1);
    eb.call(this, a, n);
    this.type = "TextGeometry";
  }
  function Xc(d, n, a, b, c, f, e) {
    ga.call(this);
    this.type = "SphereGeometry";
    this.parameters = {radius:d, widthSegments:n, heightSegments:a, phiStart:b, phiLength:c, thetaStart:f, thetaLength:e};
    this.fromBufferGeometry(new Hb(d, n, a, b, c, f, e));
  }
  function Hb(d, n, a, b, c, e, g) {
    ea.call(this);
    this.type = "SphereBufferGeometry";
    this.parameters = {radius:d, widthSegments:n, heightSegments:a, phiStart:b, phiLength:c, thetaStart:e, thetaLength:g};
    d = d || 50;
    n = Math.max(3, Math.floor(n) || 8);
    a = Math.max(2, Math.floor(a) || 6);
    b = void 0 !== b ? b : 0;
    c = void 0 !== c ? c : 2 * Math.PI;
    e = void 0 !== e ? e : 0;
    g = void 0 !== g ? g : Math.PI;
    var z = e + g, m, k, q = 0, E = [], p = new f, h = new f, r = [], t = [], l = [], T = [];
    for (k = 0;k <= a;k++) {
      var w = [], u = k / a;
      for (m = 0;m <= n;m++) {
        var v = m / n;
        p.x = -d * Math.cos(b + v * c) * Math.sin(e + u * g);
        p.y = d * Math.cos(e + u * g);
        p.z = d * Math.sin(b + v * c) * Math.sin(e + u * g);
        t.push(p.x, p.y, p.z);
        h.set(p.x, p.y, p.z).normalize();
        l.push(h.x, h.y, h.z);
        T.push(v, 1 - u);
        w.push(q++);
      }
      E.push(w);
    }
    for (k = 0;k < a;k++) {
      for (m = 0;m < n;m++) {
        d = E[k][m + 1], b = E[k][m], c = E[k + 1][m], g = E[k + 1][m + 1], (0 !== k || 0 < e) && r.push(d, b, g), (k !== a - 1 || z < Math.PI) && r.push(b, c, g);
      }
    }
    this.setIndex(r);
    this.addAttribute("position", new Y(t, 3));
    this.addAttribute("normal", new Y(l, 3));
    this.addAttribute("uv", new Y(T, 2));
  }
  function Yc(d, n, a, b, c, f) {
    ga.call(this);
    this.type = "RingGeometry";
    this.parameters = {innerRadius:d, outerRadius:n, thetaSegments:a, phiSegments:b, thetaStart:c, thetaLength:f};
    this.fromBufferGeometry(new jc(d, n, a, b, c, f));
  }
  function jc(d, n, a, b, c, e) {
    ea.call(this);
    this.type = "RingBufferGeometry";
    this.parameters = {innerRadius:d, outerRadius:n, thetaSegments:a, phiSegments:b, thetaStart:c, thetaLength:e};
    d = d || 20;
    n = n || 50;
    c = void 0 !== c ? c : 0;
    e = void 0 !== e ? e : 2 * Math.PI;
    a = void 0 !== a ? Math.max(3, a) : 8;
    b = void 0 !== b ? Math.max(1, b) : 1;
    var z = [], g = [], m = [], k = [], q = d, E = (n - d) / b, p = new f, h = new l, r, t;
    for (r = 0;r <= b;r++) {
      for (t = 0;t <= a;t++) {
        d = c + t / a * e, p.x = q * Math.cos(d), p.y = q * Math.sin(d), g.push(p.x, p.y, p.z), m.push(0, 0, 1), h.x = (p.x / n + 1) / 2, h.y = (p.y / n + 1) / 2, k.push(h.x, h.y);
      }
      q += E;
    }
    for (r = 0;r < b;r++) {
      for (n = r * (a + 1), t = 0;t < a;t++) {
        d = t + n, c = d + a + 1, e = d + a + 2, q = d + 1, z.push(d, c, q), z.push(c, e, q);
      }
    }
    this.setIndex(z);
    this.addAttribute("position", new Y(g, 3));
    this.addAttribute("normal", new Y(m, 3));
    this.addAttribute("uv", new Y(k, 2));
  }
  function Zc(d, n, a, b) {
    ga.call(this);
    this.type = "LatheGeometry";
    this.parameters = {points:d, segments:n, phiStart:a, phiLength:b};
    this.fromBufferGeometry(new kc(d, n, a, b));
    this.mergeVertices();
  }
  function kc(d, n, a, b) {
    ea.call(this);
    this.type = "LatheBufferGeometry";
    this.parameters = {points:d, segments:n, phiStart:a, phiLength:b};
    n = Math.floor(n) || 12;
    a = a || 0;
    b = b || 2 * Math.PI;
    b = na.clamp(b, 0, 2 * Math.PI);
    var z = [], c = [], e = [], g = 1 / n, m = new f, k = new l, q, E;
    for (q = 0;q <= n;q++) {
      E = a + q * g * b;
      var p = Math.sin(E), h = Math.cos(E);
      for (E = 0;E <= d.length - 1;E++) {
        m.x = d[E].x * p, m.y = d[E].y, m.z = d[E].x * h, c.push(m.x, m.y, m.z), k.x = q / n, k.y = E / (d.length - 1), e.push(k.x, k.y);
      }
    }
    for (q = 0;q < n;q++) {
      for (E = 0;E < d.length - 1;E++) {
        a = E + q * d.length, g = a + d.length, m = a + d.length + 1, k = a + 1, z.push(a, g, k), z.push(g, m, k);
      }
    }
    this.setIndex(z);
    this.addAttribute("position", new Y(c, 3));
    this.addAttribute("uv", new Y(e, 2));
    this.computeVertexNormals();
    if (b === 2 * Math.PI) {
      for (b = this.attributes.normal.array, z = new f, c = new f, e = new f, a = n * d.length * 3, E = q = 0;q < d.length;q++, E += 3) {
        z.x = b[E + 0], z.y = b[E + 1], z.z = b[E + 2], c.x = b[a + E + 0], c.y = b[a + E + 1], c.z = b[a + E + 2], e.addVectors(z, c).normalize(), b[E + 0] = b[a + E + 0] = e.x, b[E + 1] = b[a + E + 1] = e.y, b[E + 2] = b[a + E + 2] = e.z;
      }
    }
  }
  function lc(d, n) {
    ga.call(this);
    this.type = "ShapeGeometry";
    "object" === typeof n && (console.warn("THREE.ShapeGeometry: Options parameter has been removed."), n = n.curveSegments);
    this.parameters = {shapes:d, curveSegments:n};
    this.fromBufferGeometry(new mc(d, n));
    this.mergeVertices();
  }
  function mc(d, n) {
    function a(d) {
      var a, z, g = c.length / 3;
      d = d.extractPoints(n);
      var k = d.shape, q = d.holes;
      if (!1 === fb.isClockWise(k)) {
        for (k = k.reverse(), d = 0, a = q.length;d < a;d++) {
          z = q[d], !0 === fb.isClockWise(z) && (q[d] = z.reverse());
        }
      }
      var E = fb.triangulateShape(k, q);
      d = 0;
      for (a = q.length;d < a;d++) {
        z = q[d], k = k.concat(z);
      }
      d = 0;
      for (a = k.length;d < a;d++) {
        z = k[d], c.push(z.x, z.y, 0), f.push(0, 0, 1), e.push(z.x, z.y);
      }
      d = 0;
      for (a = E.length;d < a;d++) {
        k = E[d], b.push(k[0] + g, k[1] + g, k[2] + g), m += 3;
      }
    }
    ea.call(this);
    this.type = "ShapeBufferGeometry";
    this.parameters = {shapes:d, curveSegments:n};
    n = n || 12;
    var b = [], c = [], f = [], e = [], g = 0, m = 0;
    if (!1 === Array.isArray(d)) {
      a(d);
    } else {
      for (var k = 0;k < d.length;k++) {
        a(d[k]), this.addGroup(g, m, k), g += m, m = 0;
      }
    }
    this.setIndex(b);
    this.addAttribute("position", new Y(c, 3));
    this.addAttribute("normal", new Y(f, 3));
    this.addAttribute("uv", new Y(e, 2));
  }
  function nc(d, n) {
    function a(d, n) {
      return d - n;
    }
    ea.call(this);
    this.type = "EdgesGeometry";
    this.parameters = {thresholdAngle:n};
    var b = [];
    n = Math.cos(na.DEG2RAD * (void 0 !== n ? n : 1));
    var c = [0, 0], f = {}, e, g = ["a", "b", "c"], m;
    d.isBufferGeometry ? (m = new ga, m.fromBufferGeometry(d)) : m = d.clone();
    m.mergeVertices();
    m.computeFaceNormals();
    d = m.vertices;
    m = m.faces;
    for (var k = 0, q = m.length;k < q;k++) {
      for (var p = m[k], h = 0;3 > h;h++) {
        c[0] = p[g[h]], c[1] = p[g[(h + 1) % 3]], c.sort(a), e = c.toString(), void 0 === f[e] ? f[e] = {index1:c[0], index2:c[1], face1:k, face2:void 0} : f[e].face2 = k;
      }
    }
    for (e in f) {
      if (c = f[e], void 0 === c.face2 || m[c.face1].normal.dot(m[c.face2].normal) <= n) {
        g = d[c.index1], b.push(g.x, g.y, g.z), g = d[c.index2], b.push(g.x, g.y, g.z);
      }
    }
    this.addAttribute("position", new Y(b, 3));
  }
  function Ib(d, n, a, b, c, f, e, g) {
    ga.call(this);
    this.type = "CylinderGeometry";
    this.parameters = {radiusTop:d, radiusBottom:n, height:a, radialSegments:b, heightSegments:c, openEnded:f, thetaStart:e, thetaLength:g};
    this.fromBufferGeometry(new ub(d, n, a, b, c, f, e, g));
    this.mergeVertices();
  }
  function ub(d, n, a, b, c, e, g, m) {
    function z(a) {
      var z, c, e, t = new l, u = new f, v = 0, U = !0 === a ? d : n, C = !0 === a ? 1 : -1;
      c = r;
      for (z = 1;z <= b;z++) {
        E.push(0, T * C, 0), p.push(0, C, 0), h.push(.5, .5), r++;
      }
      e = r;
      for (z = 0;z <= b;z++) {
        var y = z / b * m + g, W = Math.cos(y), y = Math.sin(y);
        u.x = U * y;
        u.y = T * C;
        u.z = U * W;
        E.push(u.x, u.y, u.z);
        p.push(0, C, 0);
        t.x = .5 * W + .5;
        t.y = .5 * y * C + .5;
        h.push(t.x, t.y);
        r++;
      }
      for (z = 0;z < b;z++) {
        t = c + z, u = e + z, !0 === a ? q.push(u, u + 1, t) : q.push(u + 1, u, t), v += 3;
      }
      k.addGroup(w, v, !0 === a ? 1 : 2);
      w += v;
    }
    ea.call(this);
    this.type = "CylinderBufferGeometry";
    this.parameters = {radiusTop:d, radiusBottom:n, height:a, radialSegments:b, heightSegments:c, openEnded:e, thetaStart:g, thetaLength:m};
    var k = this;
    d = void 0 !== d ? d : 20;
    n = void 0 !== n ? n : 20;
    a = void 0 !== a ? a : 100;
    b = Math.floor(b) || 8;
    c = Math.floor(c) || 1;
    e = void 0 !== e ? e : !1;
    g = void 0 !== g ? g : 0;
    m = void 0 !== m ? m : 2 * Math.PI;
    var q = [], E = [], p = [], h = [], r = 0, t = [], T = a / 2, w = 0;
    (function() {
      var z, e, l = new f, u = new f, v = 0, U = (n - d) / a;
      for (e = 0;e <= c;e++) {
        var C = [], y = e / c, W = y * (n - d) + d;
        for (z = 0;z <= b;z++) {
          var A = z / b, x = A * m + g, ya = Math.sin(x), x = Math.cos(x);
          u.x = W * ya;
          u.y = -y * a + T;
          u.z = W * x;
          E.push(u.x, u.y, u.z);
          l.set(ya, U, x).normalize();
          p.push(l.x, l.y, l.z);
          h.push(A, 1 - y);
          C.push(r++);
        }
        t.push(C);
      }
      for (z = 0;z < b;z++) {
        for (e = 0;e < c;e++) {
          l = t[e + 1][z], u = t[e + 1][z + 1], U = t[e][z + 1], q.push(t[e][z], l, U), q.push(l, u, U), v += 6;
        }
      }
      k.addGroup(w, v, 0);
      w += v;
    })();
    !1 === e && (0 < d && z(!0), 0 < n && z(!1));
    this.setIndex(q);
    this.addAttribute("position", new Y(E, 3));
    this.addAttribute("normal", new Y(p, 3));
    this.addAttribute("uv", new Y(h, 2));
  }
  function $c(d, n, a, b, c, f, e) {
    Ib.call(this, 0, d, n, a, b, c, f, e);
    this.type = "ConeGeometry";
    this.parameters = {radius:d, height:n, radialSegments:a, heightSegments:b, openEnded:c, thetaStart:f, thetaLength:e};
  }
  function ad(d, n, a, b, c, f, e) {
    ub.call(this, 0, d, n, a, b, c, f, e);
    this.type = "ConeBufferGeometry";
    this.parameters = {radius:d, height:n, radialSegments:a, heightSegments:b, openEnded:c, thetaStart:f, thetaLength:e};
  }
  function bd(d, n, a, b) {
    ga.call(this);
    this.type = "CircleGeometry";
    this.parameters = {radius:d, segments:n, thetaStart:a, thetaLength:b};
    this.fromBufferGeometry(new oc(d, n, a, b));
  }
  function oc(d, n, a, b) {
    ea.call(this);
    this.type = "CircleBufferGeometry";
    this.parameters = {radius:d, segments:n, thetaStart:a, thetaLength:b};
    d = d || 50;
    n = void 0 !== n ? Math.max(3, n) : 8;
    a = void 0 !== a ? a : 0;
    b = void 0 !== b ? b : 2 * Math.PI;
    var z = [], c = [], e = [], g = [], m, k, q = new f, E = new l;
    c.push(0, 0, 0);
    e.push(0, 0, 1);
    g.push(.5, .5);
    k = 0;
    for (m = 3;k <= n;k++, m += 3) {
      var p = a + k / n * b;
      q.x = d * Math.cos(p);
      q.y = d * Math.sin(p);
      c.push(q.x, q.y, q.z);
      e.push(0, 0, 1);
      E.x = (c[m] / d + 1) / 2;
      E.y = (c[m + 1] / d + 1) / 2;
      g.push(E.x, E.y);
    }
    for (m = 1;m <= n;m++) {
      z.push(m, m + 1, 0);
    }
    this.setIndex(z);
    this.addAttribute("position", new Y(c, 3));
    this.addAttribute("normal", new Y(e, 3));
    this.addAttribute("uv", new Y(g, 2));
  }
  function pc() {
    ta.call(this, {uniforms:Ta.merge([la.lights, {opacity:{value:1}}]), vertexShader:ha.shadow_vert, fragmentShader:ha.shadow_frag});
    this.transparent = this.lights = !0;
    Object.defineProperties(this, {opacity:{enumerable:!0, get:function() {
      return this.uniforms.opacity.value;
    }, set:function(d) {
      this.uniforms.opacity.value = d;
    }}});
  }
  function qc(d) {
    ta.call(this, d);
    this.type = "RawShaderMaterial";
  }
  function ob(d) {
    X.call(this);
    this.defines = {STANDARD:""};
    this.type = "MeshStandardMaterial";
    this.color = new Z(16777215);
    this.metalness = this.roughness = .5;
    this.lightMap = this.map = null;
    this.lightMapIntensity = 1;
    this.aoMap = null;
    this.aoMapIntensity = 1;
    this.emissive = new Z(0);
    this.emissiveIntensity = 1;
    this.bumpMap = this.emissiveMap = null;
    this.bumpScale = 1;
    this.normalMap = null;
    this.normalScale = new l(1, 1);
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.envMap = this.alphaMap = this.metalnessMap = this.roughnessMap = null;
    this.envMapIntensity = 1;
    this.refractionRatio = .98;
    this.wireframe = !1;
    this.wireframeLinewidth = 1;
    this.wireframeLinejoin = this.wireframeLinecap = "round";
    this.morphNormals = this.morphTargets = this.skinning = !1;
    this.setValues(d);
  }
  function Jb(d) {
    ob.call(this);
    this.defines = {PHYSICAL:""};
    this.type = "MeshPhysicalMaterial";
    this.reflectivity = .5;
    this.clearCoatRoughness = this.clearCoat = 0;
    this.setValues(d);
  }
  function gb(d) {
    X.call(this);
    this.type = "MeshPhongMaterial";
    this.color = new Z(16777215);
    this.specular = new Z(1118481);
    this.shininess = 30;
    this.lightMap = this.map = null;
    this.lightMapIntensity = 1;
    this.aoMap = null;
    this.aoMapIntensity = 1;
    this.emissive = new Z(0);
    this.emissiveIntensity = 1;
    this.bumpMap = this.emissiveMap = null;
    this.bumpScale = 1;
    this.normalMap = null;
    this.normalScale = new l(1, 1);
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.envMap = this.alphaMap = this.specularMap = null;
    this.combine = 0;
    this.reflectivity = 1;
    this.refractionRatio = .98;
    this.wireframe = !1;
    this.wireframeLinewidth = 1;
    this.wireframeLinejoin = this.wireframeLinecap = "round";
    this.morphNormals = this.morphTargets = this.skinning = !1;
    this.setValues(d);
  }
  function Kb(d) {
    gb.call(this);
    this.defines = {TOON:""};
    this.type = "MeshToonMaterial";
    this.gradientMap = null;
    this.setValues(d);
  }
  function Lb(d) {
    X.call(this, d);
    this.type = "MeshNormalMaterial";
    this.bumpMap = null;
    this.bumpScale = 1;
    this.normalMap = null;
    this.normalScale = new l(1, 1);
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.wireframe = !1;
    this.wireframeLinewidth = 1;
    this.morphNormals = this.morphTargets = this.skinning = this.lights = this.fog = !1;
    this.setValues(d);
  }
  function Mb(d) {
    X.call(this);
    this.type = "MeshLambertMaterial";
    this.color = new Z(16777215);
    this.lightMap = this.map = null;
    this.lightMapIntensity = 1;
    this.aoMap = null;
    this.aoMapIntensity = 1;
    this.emissive = new Z(0);
    this.emissiveIntensity = 1;
    this.envMap = this.alphaMap = this.specularMap = this.emissiveMap = null;
    this.combine = 0;
    this.reflectivity = 1;
    this.refractionRatio = .98;
    this.wireframe = !1;
    this.wireframeLinewidth = 1;
    this.wireframeLinejoin = this.wireframeLinecap = "round";
    this.morphNormals = this.morphTargets = this.skinning = !1;
    this.setValues(d);
  }
  function Nb(d) {
    X.call(this);
    this.type = "LineDashedMaterial";
    this.color = new Z(16777215);
    this.scale = this.linewidth = 1;
    this.dashSize = 3;
    this.gapSize = 1;
    this.lights = !1;
    this.setValues(d);
  }
  function ee(d, n, a) {
    var b = this, z = !1, c = 0, f = 0;
    this.onStart = void 0;
    this.onLoad = d;
    this.onProgress = n;
    this.onError = a;
    this.itemStart = function(d) {
      f++;
      if (!1 === z && void 0 !== b.onStart) {
        b.onStart(d, c, f);
      }
      z = !0;
    };
    this.itemEnd = function(d) {
      c++;
      if (void 0 !== b.onProgress) {
        b.onProgress(d, c, f);
      }
      if (c === f && (z = !1, void 0 !== b.onLoad)) {
        b.onLoad();
      }
    };
    this.itemError = function(d) {
      if (void 0 !== b.onError) {
        b.onError(d);
      }
    };
  }
  function hb(d) {
    this.manager = void 0 !== d ? d : Xa;
  }
  function Me(d) {
    this.manager = void 0 !== d ? d : Xa;
    this._parser = null;
  }
  function fe(d) {
    this.manager = void 0 !== d ? d : Xa;
    this._parser = null;
  }
  function cd(d) {
    this.manager = void 0 !== d ? d : Xa;
  }
  function ge(d) {
    this.manager = void 0 !== d ? d : Xa;
  }
  function Ad(d) {
    this.manager = void 0 !== d ? d : Xa;
  }
  function xa(d, n) {
    aa.call(this);
    this.type = "Light";
    this.color = new Z(d);
    this.intensity = void 0 !== n ? n : 1;
    this.receiveShadow = void 0;
  }
  function Bd(d, n, a) {
    xa.call(this, d, a);
    this.type = "HemisphereLight";
    this.castShadow = void 0;
    this.position.copy(aa.DefaultUp);
    this.updateMatrix();
    this.groundColor = new Z(n);
  }
  function Ob(d) {
    this.camera = d;
    this.bias = 0;
    this.radius = 1;
    this.mapSize = new l(512, 512);
    this.map = null;
    this.matrix = new q;
  }
  function Cd() {
    Ob.call(this, new Ma(50, 1, .5, 500));
  }
  function Dd(d, n, a, b, c, f) {
    xa.call(this, d, n);
    this.type = "SpotLight";
    this.position.copy(aa.DefaultUp);
    this.updateMatrix();
    this.target = new aa;
    Object.defineProperty(this, "power", {get:function() {
      return this.intensity * Math.PI;
    }, set:function(d) {
      this.intensity = d / Math.PI;
    }});
    this.distance = void 0 !== a ? a : 0;
    this.angle = void 0 !== b ? b : Math.PI / 3;
    this.penumbra = void 0 !== c ? c : 0;
    this.decay = void 0 !== f ? f : 1;
    this.shadow = new Cd;
  }
  function Ed(d, n, a, b) {
    xa.call(this, d, n);
    this.type = "PointLight";
    Object.defineProperty(this, "power", {get:function() {
      return 4 * this.intensity * Math.PI;
    }, set:function(d) {
      this.intensity = d / (4 * Math.PI);
    }});
    this.distance = void 0 !== a ? a : 0;
    this.decay = void 0 !== b ? b : 1;
    this.shadow = new Ob(new Ma(90, 1, .5, 500));
  }
  function Fd() {
    Ob.call(this, new Wb(-5, 5, 5, -5, .5, 500));
  }
  function Gd(d, n) {
    xa.call(this, d, n);
    this.type = "DirectionalLight";
    this.position.copy(aa.DefaultUp);
    this.updateMatrix();
    this.target = new aa;
    this.shadow = new Fd;
  }
  function Hd(d, n) {
    xa.call(this, d, n);
    this.type = "AmbientLight";
    this.castShadow = void 0;
  }
  function Id(d, n, a, b) {
    xa.call(this, d, n);
    this.type = "RectAreaLight";
    this.position.set(0, 1, 0);
    this.updateMatrix();
    this.width = void 0 !== a ? a : 10;
    this.height = void 0 !== b ? b : 10;
  }
  function Ya(d, n, a, b) {
    this.parameterPositions = d;
    this._cachedIndex = 0;
    this.resultBuffer = void 0 !== b ? b : new n.constructor(a);
    this.sampleValues = n;
    this.valueSize = a;
  }
  function Jd(d, n, a, b) {
    Ya.call(this, d, n, a, b);
    this._offsetNext = this._weightNext = this._offsetPrev = this._weightPrev = -0;
  }
  function dd(d, n, a, b) {
    Ya.call(this, d, n, a, b);
  }
  function Kd(d, n, a, b) {
    Ya.call(this, d, n, a, b);
  }
  function Pb(d, n, a, b) {
    if (void 0 === d) {
      throw Error("track name is undefined");
    }
    if (void 0 === n || 0 === n.length) {
      throw Error("no keyframes in track named " + d);
    }
    this.name = d;
    this.times = Da.convertArray(n, this.TimeBufferType);
    this.values = Da.convertArray(a, this.ValueBufferType);
    this.setInterpolation(b || this.DefaultInterpolation);
    this.validate();
    this.optimize();
  }
  function rc(d, n, a, b) {
    Pb.call(this, d, n, a, b);
  }
  function Ld(d, n, a, b) {
    Ya.call(this, d, n, a, b);
  }
  function ed(d, n, a, b) {
    Pb.call(this, d, n, a, b);
  }
  function sc(d, n, a, b) {
    Pb.call(this, d, n, a, b);
  }
  function Md(d, n, a, b) {
    Pb.call(this, d, n, a, b);
  }
  function Nd(d, n, a) {
    Pb.call(this, d, n, a);
  }
  function Od(d, n, a, b) {
    Pb.call(this, d, n, a, b);
  }
  function Qb(d, n, a, b) {
    Pb.apply(this, arguments);
  }
  function bb(d, n, a) {
    this.name = d;
    this.tracks = a;
    this.duration = void 0 !== n ? n : -1;
    this.uuid = na.generateUUID();
    0 > this.duration && this.resetDuration();
    this.optimize();
  }
  function Pd(d) {
    this.manager = void 0 !== d ? d : Xa;
    this.textures = {};
  }
  function he(d) {
    this.manager = void 0 !== d ? d : Xa;
  }
  function tc() {
    this.onLoadStart = function() {
    };
    this.onLoadProgress = function() {
    };
    this.onLoadComplete = function() {
    };
  }
  function ie(d) {
    "boolean" === typeof d && (console.warn("THREE.JSONLoader: showStatus parameter has been removed from constructor."), d = void 0);
    this.manager = void 0 !== d ? d : Xa;
    this.withCredentials = !1;
  }
  function Ne(d) {
    this.manager = void 0 !== d ? d : Xa;
    this.texturePath = "";
  }
  function Oe(d, n, a, b, c) {
    n = .5 * (b - n);
    c = .5 * (c - a);
    var z = d * d;
    return (2 * a - 2 * b + n + c) * d * z + (-3 * a + 3 * b - 2 * n - c) * z + n * d + a;
  }
  function Rb(d, n, a, b) {
    var c = 1 - d;
    return c * c * n + 2 * (1 - d) * d * a + d * d * b;
  }
  function Sb(d, n, a, b, c) {
    var z = 1 - d, f = 1 - d;
    return z * z * z * n + 3 * f * f * d * a + 3 * (1 - d) * d * d * b + d * d * d * c;
  }
  function Qa() {
  }
  function pb(d, n) {
    this.v1 = d;
    this.v2 = n;
  }
  function fd() {
    this.curves = [];
    this.autoClose = !1;
  }
  function vb(d, n, a, b, c, f, e, m) {
    this.aX = d;
    this.aY = n;
    this.xRadius = a;
    this.yRadius = b;
    this.aStartAngle = c;
    this.aEndAngle = f;
    this.aClockwise = e;
    this.aRotation = m || 0;
  }
  function Tb(d) {
    this.points = void 0 === d ? [] : d;
  }
  function uc(d, n, a, b) {
    this.v0 = d;
    this.v1 = n;
    this.v2 = a;
    this.v3 = b;
  }
  function vc(d, n, a) {
    this.v0 = d;
    this.v1 = n;
    this.v2 = a;
  }
  function gd(d) {
    fd.call(this);
    this.currentPoint = new l;
    d && this.fromPoints(d);
  }
  function Ub() {
    gd.apply(this, arguments);
    this.holes = [];
  }
  function je() {
    this.subPaths = [];
    this.currentPath = null;
  }
  function ke(d) {
    this.data = d;
  }
  function Pe(d) {
    this.manager = void 0 !== d ? d : Xa;
  }
  function le(d) {
    this.manager = void 0 !== d ? d : Xa;
  }
  function Qe() {
    this.type = "StereoCamera";
    this.aspect = 1;
    this.eyeSep = .064;
    this.cameraL = new Ma;
    this.cameraL.layers.enable(1);
    this.cameraL.matrixAutoUpdate = !1;
    this.cameraR = new Ma;
    this.cameraR.layers.enable(2);
    this.cameraR.matrixAutoUpdate = !1;
  }
  function Qd(d, n, a) {
    aa.call(this);
    this.type = "CubeCamera";
    var b = new Ma(90, 1, d, n);
    b.up.set(0, -1, 0);
    b.lookAt(new f(1, 0, 0));
    this.add(b);
    var z = new Ma(90, 1, d, n);
    z.up.set(0, -1, 0);
    z.lookAt(new f(-1, 0, 0));
    this.add(z);
    var e = new Ma(90, 1, d, n);
    e.up.set(0, 0, 1);
    e.lookAt(new f(0, 1, 0));
    this.add(e);
    var m = new Ma(90, 1, d, n);
    m.up.set(0, 0, -1);
    m.lookAt(new f(0, -1, 0));
    this.add(m);
    var g = new Ma(90, 1, d, n);
    g.up.set(0, -1, 0);
    g.lookAt(new f(0, 0, 1));
    this.add(g);
    var k = new Ma(90, 1, d, n);
    k.up.set(0, -1, 0);
    k.lookAt(new f(0, 0, -1));
    this.add(k);
    this.renderTarget = new c(a, a, {format:1022, magFilter:1006, minFilter:1006});
    this.renderTarget.texture.name = "CubeCamera";
    this.updateCubeMap = function(d, n) {
      null === this.parent && this.updateMatrixWorld();
      var a = this.renderTarget, c = a.texture.generateMipmaps;
      a.texture.generateMipmaps = !1;
      a.activeCubeFace = 0;
      d.render(n, b, a);
      a.activeCubeFace = 1;
      d.render(n, z, a);
      a.activeCubeFace = 2;
      d.render(n, e, a);
      a.activeCubeFace = 3;
      d.render(n, m, a);
      a.activeCubeFace = 4;
      d.render(n, g, a);
      a.texture.generateMipmaps = c;
      a.activeCubeFace = 5;
      d.render(n, k, a);
      d.setRenderTarget(null);
    };
  }
  function me(d) {
    Ma.call(this);
    this.enabled = !1;
    this.cameras = d || [];
  }
  function ne() {
    aa.call(this);
    this.type = "AudioListener";
    this.context = oe.getContext();
    this.gain = this.context.createGain();
    this.gain.connect(this.context.destination);
    this.filter = null;
  }
  function wc(d) {
    aa.call(this);
    this.type = "Audio";
    this.context = d.context;
    this.gain = this.context.createGain();
    this.gain.connect(d.getInput());
    this.autoplay = !1;
    this.buffer = null;
    this.loop = !1;
    this.startTime = 0;
    this.playbackRate = 1;
    this.isPlaying = !1;
    this.hasPlaybackControl = !0;
    this.sourceType = "empty";
    this.filters = [];
  }
  function pe(d) {
    wc.call(this, d);
    this.panner = this.context.createPanner();
    this.panner.connect(this.gain);
  }
  function qe(d, n) {
    this.analyser = d.context.createAnalyser();
    this.analyser.fftSize = void 0 !== n ? n : 2048;
    this.data = new Uint8Array(this.analyser.frequencyBinCount);
    d.getOutput().connect(this.analyser);
  }
  function re(d, n, a) {
    this.binding = d;
    this.valueSize = a;
    d = Float64Array;
    switch(n) {
      case "quaternion":
        n = this._slerp;
        break;
      case "string":
      case "bool":
        d = Array;
        n = this._select;
        break;
      default:
        n = this._lerp;
    }
    this.buffer = new d(4 * a);
    this._mixBufferRegion = n;
    this.referenceCount = this.useCount = this.cumulativeWeight = 0;
  }
  function Re(d, n, a) {
    a = a || Ea.parseTrackName(n);
    this._targetGroup = d;
    this._bindings = d.subscribe_(n, a);
  }
  function Ea(d, n, a) {
    this.path = n;
    this.parsedPath = a || Ea.parseTrackName(n);
    this.node = Ea.findNode(d, this.parsedPath.nodeName) || d;
    this.rootNode = d;
  }
  function Se(d) {
    this.uuid = na.generateUUID();
    this._objects = Array.prototype.slice.call(arguments);
    this.nCachedObjects_ = 0;
    var n = {};
    this._indicesByUUID = n;
    for (var a = 0, b = arguments.length;a !== b;++a) {
      n[arguments[a].uuid] = a;
    }
    this._paths = [];
    this._parsedPaths = [];
    this._bindings = [];
    this._bindingsIndicesByPath = {};
    var c = this;
    this.stats = {objects:{get total() {
      return c._objects.length;
    }, get inUse() {
      return this.total - c.nCachedObjects_;
    }}, get bindingsPerObject() {
      return c._bindings.length;
    }};
  }
  function Te(d, n, a) {
    this._mixer = d;
    this._clip = n;
    this._localRoot = a || null;
    d = n.tracks;
    n = d.length;
    a = Array(n);
    for (var b = {endingStart:2400, endingEnd:2400}, c = 0;c !== n;++c) {
      var z = d[c].createInterpolant(null);
      a[c] = z;
      z.settings = b;
    }
    this._interpolantSettings = b;
    this._interpolants = a;
    this._propertyBindings = Array(n);
    this._weightInterpolant = this._timeScaleInterpolant = this._byClipCacheIndex = this._cacheIndex = null;
    this.loop = 2201;
    this._loopCount = -1;
    this._startTime = null;
    this.time = 0;
    this._effectiveWeight = this.weight = this._effectiveTimeScale = this.timeScale = 1;
    this.repetitions = Infinity;
    this.paused = !1;
    this.enabled = !0;
    this.clampWhenFinished = !1;
    this.zeroSlopeAtEnd = this.zeroSlopeAtStart = !0;
  }
  function Ue(d) {
    this._root = d;
    this._initMemoryManager();
    this.time = this._accuIndex = 0;
    this.timeScale = 1;
  }
  function Rd(d, n) {
    "string" === typeof d && (console.warn("THREE.Uniform: Type parameter is no longer needed."), d = n);
    this.value = d;
  }
  function se() {
    ea.call(this);
    this.type = "InstancedBufferGeometry";
    this.maxInstancedCount = void 0;
  }
  function te(d, n, a, b) {
    this.uuid = na.generateUUID();
    this.data = d;
    this.itemSize = n;
    this.offset = a;
    this.normalized = !0 === b;
  }
  function xc(d, n) {
    this.uuid = na.generateUUID();
    this.array = d;
    this.stride = n;
    this.count = void 0 !== d ? d.length / n : 0;
    this.dynamic = !1;
    this.updateRange = {offset:0, count:-1};
    this.onUploadCallback = function() {
    };
    this.version = 0;
  }
  function ue(d, n, a) {
    xc.call(this, d, n);
    this.meshPerAttribute = a || 1;
  }
  function ve(d, n, a) {
    ja.call(this, d, n);
    this.meshPerAttribute = a || 1;
  }
  function Ve(d, n, a, b) {
    this.ray = new qb(d, n);
    this.near = a || 0;
    this.far = b || Infinity;
    this.params = {Mesh:{}, Line:{}, LOD:{}, Points:{threshold:1}, Sprite:{}};
    Object.defineProperties(this.params, {PointCloud:{get:function() {
      console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points.");
      return this.Points;
    }}});
  }
  function We(d, n) {
    return d.distance - n.distance;
  }
  function we(d, n, a, b) {
    if (!1 !== d.visible && (d.raycast(n, a), !0 === b)) {
      d = d.children;
      b = 0;
      for (var c = d.length;b < c;b++) {
        we(d[b], n, a, !0);
      }
    }
  }
  function Xe(d) {
    this.autoStart = void 0 !== d ? d : !0;
    this.elapsedTime = this.oldTime = this.startTime = 0;
    this.running = !1;
  }
  function Ye(d, n, a) {
    this.radius = void 0 !== d ? d : 1;
    this.phi = void 0 !== n ? n : 0;
    this.theta = void 0 !== a ? a : 0;
    return this;
  }
  function Ze(d, n, a) {
    this.radius = void 0 !== d ? d : 1;
    this.theta = void 0 !== n ? n : 0;
    this.y = void 0 !== a ? a : 0;
    return this;
  }
  function Fa(d, n) {
    Ia.call(this, d, n);
    this.animationsMap = {};
    this.animationsList = [];
    d = this.geometry.morphTargets.length;
    this.createAnimation("__default", 0, d - 1, d / 1);
    this.setAnimationWeight("__default", 1);
  }
  function hd(d) {
    aa.call(this);
    this.material = d;
    this.render = function(d) {
    };
  }
  function id(d, n, a, b) {
    this.object = d;
    this.size = void 0 !== n ? n : 1;
    d = void 0 !== a ? a : 16711680;
    b = void 0 !== b ? b : 1;
    n = 0;
    (a = this.object.geometry) && a.isGeometry ? n = 3 * a.faces.length : a && a.isBufferGeometry && (n = a.attributes.normal.count);
    a = new ea;
    n = new Y(6 * n, 3);
    a.addAttribute("position", n);
    wa.call(this, a, new za({color:d, linewidth:b}));
    this.matrixAutoUpdate = !1;
    this.update();
  }
  function yc(d) {
    aa.call(this);
    this.light = d;
    this.light.updateMatrixWorld();
    this.matrix = d.matrixWorld;
    this.matrixAutoUpdate = !1;
    d = new ea;
    for (var n = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1], a = 0, b = 1;32 > a;a++, b++) {
      var c = a / 32 * Math.PI * 2, f = b / 32 * Math.PI * 2;
      n.push(Math.cos(c), Math.sin(c), 1, Math.cos(f), Math.sin(f), 1);
    }
    d.addAttribute("position", new Y(n, 3));
    n = new za({fog:!1});
    this.cone = new wa(d, n);
    this.add(this.cone);
    this.update();
  }
  function zc(d) {
    this.bones = this.getBoneList(d);
    for (var n = new ea, a = [], b = [], c = new Z(0, 0, 1), f = new Z(0, 1, 0), e = 0;e < this.bones.length;e++) {
      var m = this.bones[e];
      m.parent && m.parent.isBone && (a.push(0, 0, 0), a.push(0, 0, 0), b.push(c.r, c.g, c.b), b.push(f.r, f.g, f.b));
    }
    n.addAttribute("position", new Y(a, 3));
    n.addAttribute("color", new Y(b, 3));
    a = new za({vertexColors:2, depthTest:!1, depthWrite:!1, transparent:!0});
    wa.call(this, n, a);
    this.root = d;
    this.matrix = d.matrixWorld;
    this.matrixAutoUpdate = !1;
    this.update();
  }
  function Ac(d, n) {
    this.light = d;
    this.light.updateMatrixWorld();
    d = new Hb(n, 4, 2);
    n = new La({wireframe:!0, fog:!1});
    n.color.copy(this.light.color).multiplyScalar(this.light.intensity);
    Ia.call(this, d, n);
    this.matrix = this.light.matrixWorld;
    this.matrixAutoUpdate = !1;
  }
  function Bc(d) {
    aa.call(this);
    this.light = d;
    this.light.updateMatrixWorld();
    var n = new La({color:d.color, fog:!1});
    d = new La({color:d.color, fog:!1, wireframe:!0});
    var a = new ea;
    a.addAttribute("position", new ja(new Float32Array(18), 3));
    this.add(new Ia(a, n));
    this.add(new Ia(a, d));
    this.update();
  }
  function Cc(d, n) {
    aa.call(this);
    this.light = d;
    this.light.updateMatrixWorld();
    this.matrix = d.matrixWorld;
    this.matrixAutoUpdate = !1;
    d = new Gb(n);
    d.rotateY(.5 * Math.PI);
    n = new La({vertexColors:2, wireframe:!0});
    var a = d.getAttribute("position"), a = new Float32Array(3 * a.count);
    d.addAttribute("color", new ja(a, 3));
    this.add(new Ia(d, n));
    this.update();
  }
  function jd(d, n, a, b) {
    d = d || 10;
    n = n || 10;
    a = new Z(void 0 !== a ? a : 4473924);
    b = new Z(void 0 !== b ? b : 8947848);
    var c = n / 2, z = d / n, f = d / 2;
    d = [];
    for (var e = [], m = 0, g = 0, k = -f;m <= n;m++, k += z) {
      d.push(-f, 0, k, f, 0, k);
      d.push(k, 0, -f, k, 0, f);
      var q = m === c ? a : b;
      q.toArray(e, g);
      g += 3;
      q.toArray(e, g);
      g += 3;
      q.toArray(e, g);
      g += 3;
      q.toArray(e, g);
      g += 3;
    }
    n = new ea;
    n.addAttribute("position", new Y(d, 3));
    n.addAttribute("color", new Y(e, 3));
    a = new za({vertexColors:2});
    wa.call(this, n, a);
  }
  function Sd(d, n, a, b, c, f) {
    d = d || 10;
    n = n || 16;
    a = a || 8;
    b = b || 64;
    c = new Z(void 0 !== c ? c : 4473924);
    f = new Z(void 0 !== f ? f : 8947848);
    var z = [], e = [], m, g, k, q, p;
    for (k = 0;k <= n;k++) {
      g = k / n * 2 * Math.PI, m = Math.sin(g) * d, g = Math.cos(g) * d, z.push(0, 0, 0), z.push(m, 0, g), p = k & 1 ? c : f, e.push(p.r, p.g, p.b), e.push(p.r, p.g, p.b);
    }
    for (k = 0;k <= a;k++) {
      for (p = k & 1 ? c : f, q = d - d / a * k, n = 0;n < b;n++) {
        g = n / b * 2 * Math.PI, m = Math.sin(g) * q, g = Math.cos(g) * q, z.push(m, 0, g), e.push(p.r, p.g, p.b), g = (n + 1) / b * 2 * Math.PI, m = Math.sin(g) * q, g = Math.cos(g) * q, z.push(m, 0, g), e.push(p.r, p.g, p.b);
      }
    }
    d = new ea;
    d.addAttribute("position", new Y(z, 3));
    d.addAttribute("color", new Y(e, 3));
    z = new za({vertexColors:2});
    wa.call(this, d, z);
  }
  function kd(d, n, a, b) {
    this.object = d;
    this.size = void 0 !== n ? n : 1;
    d = void 0 !== a ? a : 16776960;
    b = void 0 !== b ? b : 1;
    n = 0;
    (a = this.object.geometry) && a.isGeometry ? n = a.faces.length : console.warn("THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.");
    a = new ea;
    n = new Y(6 * n, 3);
    a.addAttribute("position", n);
    wa.call(this, a, new za({color:d, linewidth:b}));
    this.matrixAutoUpdate = !1;
    this.update();
  }
  function Dc(d, n) {
    aa.call(this);
    this.light = d;
    this.light.updateMatrixWorld();
    this.matrix = d.matrixWorld;
    this.matrixAutoUpdate = !1;
    void 0 === n && (n = 1);
    d = new ea;
    d.addAttribute("position", new Y([-n, n, 0, n, n, 0, n, -n, 0, -n, -n, 0, -n, n, 0], 3));
    n = new za({fog:!1});
    this.add(new cb(d, n));
    d = new ea;
    d.addAttribute("position", new Y([0, 0, 0, 0, 0, 1], 3));
    this.add(new cb(d, n));
    this.update();
  }
  function ld(d) {
    function n(d, n, b) {
      a(d, b);
      a(n, b);
    }
    function a(d, n) {
      f.push(0, 0, 0);
      e.push(n.r, n.g, n.b);
      void 0 === g[d] && (g[d] = []);
      g[d].push(f.length / 3 - 1);
    }
    var b = new ea, c = new za({color:16777215, vertexColors:1}), f = [], e = [], g = {}, m = new Z(16755200), k = new Z(16711680), q = new Z(43775), p = new Z(16777215), h = new Z(3355443);
    n("n1", "n2", m);
    n("n2", "n4", m);
    n("n4", "n3", m);
    n("n3", "n1", m);
    n("f1", "f2", m);
    n("f2", "f4", m);
    n("f4", "f3", m);
    n("f3", "f1", m);
    n("n1", "f1", m);
    n("n2", "f2", m);
    n("n3", "f3", m);
    n("n4", "f4", m);
    n("p", "n1", k);
    n("p", "n2", k);
    n("p", "n3", k);
    n("p", "n4", k);
    n("u1", "u2", q);
    n("u2", "u3", q);
    n("u3", "u1", q);
    n("c", "t", p);
    n("p", "c", h);
    n("cn1", "cn2", h);
    n("cn3", "cn4", h);
    n("cf1", "cf2", h);
    n("cf3", "cf4", h);
    b.addAttribute("position", new Y(f, 3));
    b.addAttribute("color", new Y(e, 3));
    wa.call(this, b, c);
    this.camera = d;
    this.camera.updateProjectionMatrix && this.camera.updateProjectionMatrix();
    this.matrix = d.matrixWorld;
    this.matrixAutoUpdate = !1;
    this.pointMap = g;
    this.update();
  }
  function Ec(d, n) {
    void 0 === n && (n = 16776960);
    var a = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]), b = new Float32Array(24), c = new ea;
    c.setIndex(new ja(a, 1));
    c.addAttribute("position", new ja(b, 3));
    wa.call(this, c, new za({color:n}));
    void 0 !== d && this.update(d);
  }
  function Vb(d, n, a, b, c, f) {
    aa.call(this);
    void 0 === b && (b = 16776960);
    void 0 === a && (a = 1);
    void 0 === c && (c = .2 * a);
    void 0 === f && (f = .2 * c);
    void 0 === Td && (Td = new ea, Td.addAttribute("position", new Y([0, 0, 0, 0, 1, 0], 3)), xe = new ub(0, .5, 1, 5, 1), xe.translate(0, -.5, 0));
    this.position.copy(n);
    this.line = new cb(Td, new za({color:b}));
    this.line.matrixAutoUpdate = !1;
    this.add(this.line);
    this.cone = new Ia(xe, new La({color:b}));
    this.cone.matrixAutoUpdate = !1;
    this.add(this.cone);
    this.setDirection(d);
    this.setLength(a, c, f);
  }
  function Ud(d) {
    d = d || 1;
    var n = [0, 0, 0, d, 0, 0, 0, 0, 0, 0, d, 0, 0, 0, 0, 0, 0, d];
    d = new ea;
    d.addAttribute("position", new Y(n, 3));
    d.addAttribute("color", new Y([1, 0, 0, 1, .6, 0, 0, 1, 0, .6, 1, 0, 0, 0, 1, 0, .6, 1], 3));
    n = new za({vertexColors:2});
    wa.call(this, d, n);
  }
  function ye() {
    var d = 0, n = 0, a = 0, b = 0;
    return {initCatmullRom:function(c, f, z, e, m) {
      c = m * (z - c);
      e = m * (e - f);
      d = f;
      n = c;
      a = -3 * f + 3 * z - 2 * c - e;
      b = 2 * f - 2 * z + c + e;
    }, initNonuniformCatmullRom:function(c, f, z, e, m, g, k) {
      c = ((f - c) / m - (z - c) / (m + g) + (z - f) / g) * g;
      e = ((z - f) / g - (e - f) / (g + k) + (e - z) / k) * g;
      d = f;
      n = c;
      a = -3 * f + 3 * z - 2 * c - e;
      b = 2 * f - 2 * z + c + e;
    }, calc:function(c) {
      var f = c * c;
      return d + n * c + a * f + b * f * c;
    }};
  }
  function ib(d) {
    this.points = d || [];
    this.closed = !1;
  }
  function md(d, n, a, b) {
    this.v0 = d;
    this.v1 = n;
    this.v2 = a;
    this.v3 = b;
  }
  function nd(d, n, a) {
    this.v0 = d;
    this.v1 = n;
    this.v2 = a;
  }
  function od(d, n) {
    this.v1 = d;
    this.v2 = n;
  }
  function Vd(d, n, a, b, c, f) {
    vb.call(this, d, n, a, a, b, c, f);
  }
  function $e(d) {
    console.warn("THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.");
    ib.call(this, d);
    this.type = "catmullrom";
    this.closed = !0;
  }
  function af(d) {
    console.warn("THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.");
    ib.call(this, d);
    this.type = "catmullrom";
  }
  function ze(d) {
    console.warn("THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.");
    ib.call(this, d);
    this.type = "catmullrom";
  }
  void 0 === Number.EPSILON && (Number.EPSILON = Math.pow(2, -52));
  void 0 === Number.isInteger && (Number.isInteger = function(d) {
    return "number" === typeof d && isFinite(d) && Math.floor(d) === d;
  });
  void 0 === Math.sign && (Math.sign = function(d) {
    return 0 > d ? -1 : 0 < d ? 1 : +d;
  });
  void 0 === Function.prototype.name && Object.defineProperty(Function.prototype, "name", {get:function() {
    return this.toString().match(/^\s*function\s*([^\(\s]*)/)[1];
  }});
  void 0 === Object.assign && function() {
    Object.assign = function(d) {
      if (void 0 === d || null === d) {
        throw new TypeError("Cannot convert undefined or null to object");
      }
      for (var n = Object(d), a = 1;a < arguments.length;a++) {
        var b = arguments[a];
        if (void 0 !== b && null !== b) {
          for (var c in b) {
            Object.prototype.hasOwnProperty.call(b, c) && (n[c] = b[c]);
          }
        }
      }
      return n;
    };
  }();
  Object.assign(h.prototype, {addEventListener:function(d, n) {
    void 0 === this._listeners && (this._listeners = {});
    var a = this._listeners;
    void 0 === a[d] && (a[d] = []);
    -1 === a[d].indexOf(n) && a[d].push(n);
  }, hasEventListener:function(d, a) {
    if (void 0 === this._listeners) {
      return !1;
    }
    var n = this._listeners;
    return void 0 !== n[d] && -1 !== n[d].indexOf(a);
  }, removeEventListener:function(d, a) {
    void 0 !== this._listeners && (d = this._listeners[d], void 0 !== d && (a = d.indexOf(a), -1 !== a && d.splice(a, 1)));
  }, dispatchEvent:function(d) {
    if (void 0 !== this._listeners) {
      var a = this._listeners[d.type];
      if (void 0 !== a) {
        d.target = this;
        var b = [], c, f = a.length;
        for (c = 0;c < f;c++) {
          b[c] = a[c];
        }
        for (c = 0;c < f;c++) {
          b[c].call(this, d);
        }
      }
    }
  }});
  var na = {DEG2RAD:Math.PI / 180, RAD2DEG:180 / Math.PI, generateUUID:function() {
    var d = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""), a = Array(36), b = 0, c;
    return function() {
      for (var n = 0;36 > n;n++) {
        8 === n || 13 === n || 18 === n || 23 === n ? a[n] = "-" : 14 === n ? a[n] = "4" : (2 >= b && (b = 33554432 + 16777216 * Math.random() | 0), c = b & 15, b >>= 4, a[n] = d[19 === n ? c & 3 | 8 : c]);
      }
      return a.join("");
    };
  }(), clamp:function(d, a, b) {
    return Math.max(a, Math.min(b, d));
  }, euclideanModulo:function(d, a) {
    return (d % a + a) % a;
  }, mapLinear:function(d, a, b, c, f) {
    return c + (d - a) * (f - c) / (b - a);
  }, lerp:function(d, a, b) {
    return (1 - b) * d + b * a;
  }, smoothstep:function(d, a, b) {
    if (d <= a) {
      return 0;
    }
    if (d >= b) {
      return 1;
    }
    d = (d - a) / (b - a);
    return d * d * (3 - 2 * d);
  }, smootherstep:function(d, a, b) {
    if (d <= a) {
      return 0;
    }
    if (d >= b) {
      return 1;
    }
    d = (d - a) / (b - a);
    return d * d * d * (d * (6 * d - 15) + 10);
  }, randInt:function(d, a) {
    return d + Math.floor(Math.random() * (a - d + 1));
  }, randFloat:function(d, a) {
    return d + Math.random() * (a - d);
  }, randFloatSpread:function(d) {
    return d * (.5 - Math.random());
  }, degToRad:function(d) {
    return d * na.DEG2RAD;
  }, radToDeg:function(d) {
    return d * na.RAD2DEG;
  }, isPowerOfTwo:function(d) {
    return 0 === (d & d - 1) && 0 !== d;
  }, nearestPowerOfTwo:function(d) {
    return Math.pow(2, Math.round(Math.log(d) / Math.LN2));
  }, nextPowerOfTwo:function(d) {
    d--;
    d |= d >> 1;
    d |= d >> 2;
    d |= d >> 4;
    d |= d >> 8;
    d |= d >> 16;
    d++;
    return d;
  }};
  Object.defineProperties(l.prototype, {width:{get:function() {
    return this.x;
  }, set:function(d) {
    this.x = d;
  }}, height:{get:function() {
    return this.y;
  }, set:function(d) {
    this.y = d;
  }}});
  Object.assign(l.prototype, {isVector2:!0, set:function(d, a) {
    this.x = d;
    this.y = a;
    return this;
  }, setScalar:function(d) {
    this.y = this.x = d;
    return this;
  }, setX:function(d) {
    this.x = d;
    return this;
  }, setY:function(d) {
    this.y = d;
    return this;
  }, setComponent:function(d, a) {
    switch(d) {
      case 0:
        this.x = a;
        break;
      case 1:
        this.y = a;
        break;
      default:
        throw Error("index is out of range: " + d);
    }
    return this;
  }, getComponent:function(d) {
    switch(d) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      default:
        throw Error("index is out of range: " + d);
    }
  }, clone:function() {
    return new this.constructor(this.x, this.y);
  }, copy:function(d) {
    this.x = d.x;
    this.y = d.y;
    return this;
  }, add:function(d, a) {
    if (void 0 !== a) {
      return console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(d, a);
    }
    this.x += d.x;
    this.y += d.y;
    return this;
  }, addScalar:function(d) {
    this.x += d;
    this.y += d;
    return this;
  }, addVectors:function(d, a) {
    this.x = d.x + a.x;
    this.y = d.y + a.y;
    return this;
  }, addScaledVector:function(d, a) {
    this.x += d.x * a;
    this.y += d.y * a;
    return this;
  }, sub:function(d, a) {
    if (void 0 !== a) {
      return console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(d, a);
    }
    this.x -= d.x;
    this.y -= d.y;
    return this;
  }, subScalar:function(d) {
    this.x -= d;
    this.y -= d;
    return this;
  }, subVectors:function(d, a) {
    this.x = d.x - a.x;
    this.y = d.y - a.y;
    return this;
  }, multiply:function(d) {
    this.x *= d.x;
    this.y *= d.y;
    return this;
  }, multiplyScalar:function(d) {
    this.x *= d;
    this.y *= d;
    return this;
  }, divide:function(d) {
    this.x /= d.x;
    this.y /= d.y;
    return this;
  }, divideScalar:function(d) {
    return this.multiplyScalar(1 / d);
  }, min:function(d) {
    this.x = Math.min(this.x, d.x);
    this.y = Math.min(this.y, d.y);
    return this;
  }, max:function(d) {
    this.x = Math.max(this.x, d.x);
    this.y = Math.max(this.y, d.y);
    return this;
  }, clamp:function(d, a) {
    this.x = Math.max(d.x, Math.min(a.x, this.x));
    this.y = Math.max(d.y, Math.min(a.y, this.y));
    return this;
  }, clampScalar:function() {
    var d = new l, a = new l;
    return function(n, b) {
      d.set(n, n);
      a.set(b, b);
      return this.clamp(d, a);
    };
  }(), clampLength:function(d, a) {
    var n = this.length();
    return this.multiplyScalar(Math.max(d, Math.min(a, n)) / n);
  }, floor:function() {
    this.x = Math.floor(this.x);
    this.y = Math.floor(this.y);
    return this;
  }, ceil:function() {
    this.x = Math.ceil(this.x);
    this.y = Math.ceil(this.y);
    return this;
  }, round:function() {
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    return this;
  }, roundToZero:function() {
    this.x = 0 > this.x ? Math.ceil(this.x) : Math.floor(this.x);
    this.y = 0 > this.y ? Math.ceil(this.y) : Math.floor(this.y);
    return this;
  }, negate:function() {
    this.x = -this.x;
    this.y = -this.y;
    return this;
  }, dot:function(d) {
    return this.x * d.x + this.y * d.y;
  }, lengthSq:function() {
    return this.x * this.x + this.y * this.y;
  }, length:function() {
    return Math.sqrt(this.x * this.x + this.y * this.y);
  }, lengthManhattan:function() {
    return Math.abs(this.x) + Math.abs(this.y);
  }, normalize:function() {
    return this.divideScalar(this.length());
  }, angle:function() {
    var d = Math.atan2(this.y, this.x);
    0 > d && (d += 2 * Math.PI);
    return d;
  }, distanceTo:function(d) {
    return Math.sqrt(this.distanceToSquared(d));
  }, distanceToSquared:function(d) {
    var a = this.x - d.x;
    d = this.y - d.y;
    return a * a + d * d;
  }, distanceToManhattan:function(d) {
    return Math.abs(this.x - d.x) + Math.abs(this.y - d.y);
  }, setLength:function(d) {
    return this.multiplyScalar(d / this.length());
  }, lerp:function(d, a) {
    this.x += (d.x - this.x) * a;
    this.y += (d.y - this.y) * a;
    return this;
  }, lerpVectors:function(d, a, b) {
    return this.subVectors(a, d).multiplyScalar(b).add(d);
  }, equals:function(d) {
    return d.x === this.x && d.y === this.y;
  }, fromArray:function(d, a) {
    void 0 === a && (a = 0);
    this.x = d[a];
    this.y = d[a + 1];
    return this;
  }, toArray:function(d, a) {
    void 0 === d && (d = []);
    void 0 === a && (a = 0);
    d[a] = this.x;
    d[a + 1] = this.y;
    return d;
  }, fromBufferAttribute:function(d, a, b) {
    void 0 !== b && console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute().");
    this.x = d.getX(a);
    this.y = d.getY(a);
    return this;
  }, rotateAround:function(d, a) {
    var n = Math.cos(a);
    a = Math.sin(a);
    var b = this.x - d.x, c = this.y - d.y;
    this.x = b * n - c * a + d.x;
    this.y = b * a + c * n + d.y;
    return this;
  }});
  var bf = 0;
  b.DEFAULT_IMAGE = void 0;
  b.DEFAULT_MAPPING = 300;
  Object.defineProperty(b.prototype, "needsUpdate", {set:function(d) {
    !0 === d && this.version++;
  }});
  Object.assign(b.prototype, h.prototype, {constructor:b, isTexture:!0, clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(d) {
    this.name = d.name;
    this.image = d.image;
    this.mipmaps = d.mipmaps.slice(0);
    this.mapping = d.mapping;
    this.wrapS = d.wrapS;
    this.wrapT = d.wrapT;
    this.magFilter = d.magFilter;
    this.minFilter = d.minFilter;
    this.anisotropy = d.anisotropy;
    this.format = d.format;
    this.type = d.type;
    this.offset.copy(d.offset);
    this.repeat.copy(d.repeat);
    this.generateMipmaps = d.generateMipmaps;
    this.premultiplyAlpha = d.premultiplyAlpha;
    this.flipY = d.flipY;
    this.unpackAlignment = d.unpackAlignment;
    this.encoding = d.encoding;
    return this;
  }, toJSON:function(d) {
    if (void 0 !== d.textures[this.uuid]) {
      return d.textures[this.uuid];
    }
    var a = {metadata:{version:4.4, type:"Texture", generator:"Texture.toJSON"}, uuid:this.uuid, name:this.name, mapping:this.mapping, repeat:[this.repeat.x, this.repeat.y], offset:[this.offset.x, this.offset.y], wrap:[this.wrapS, this.wrapT], minFilter:this.minFilter, magFilter:this.magFilter, anisotropy:this.anisotropy, flipY:this.flipY};
    if (void 0 !== this.image) {
      var b = this.image;
      void 0 === b.uuid && (b.uuid = na.generateUUID());
      if (void 0 === d.images[b.uuid]) {
        var c = d.images, f = b.uuid, e = b.uuid, m;
        void 0 !== b.toDataURL ? m = b : (m = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas"), m.width = b.width, m.height = b.height, m.getContext("2d").drawImage(b, 0, 0, b.width, b.height));
        m = 2048 < m.width || 2048 < m.height ? m.toDataURL("image/jpeg", .6) : m.toDataURL("image/png");
        c[f] = {uuid:e, url:m};
      }
      a.image = b.uuid;
    }
    return d.textures[this.uuid] = a;
  }, dispose:function() {
    this.dispatchEvent({type:"dispose"});
  }, transformUv:function(d) {
    if (300 === this.mapping) {
      d.multiply(this.repeat);
      d.add(this.offset);
      if (0 > d.x || 1 < d.x) {
        switch(this.wrapS) {
          case 1E3:
            d.x -= Math.floor(d.x);
            break;
          case 1001:
            d.x = 0 > d.x ? 0 : 1;
            break;
          case 1002:
            d.x = 1 === Math.abs(Math.floor(d.x) % 2) ? Math.ceil(d.x) - d.x : d.x - Math.floor(d.x);
        }
      }
      if (0 > d.y || 1 < d.y) {
        switch(this.wrapT) {
          case 1E3:
            d.y -= Math.floor(d.y);
            break;
          case 1001:
            d.y = 0 > d.y ? 0 : 1;
            break;
          case 1002:
            d.y = 1 === Math.abs(Math.floor(d.y) % 2) ? Math.ceil(d.y) - d.y : d.y - Math.floor(d.y);
        }
      }
      this.flipY && (d.y = 1 - d.y);
    }
  }});
  Object.assign(g.prototype, {isVector4:!0, set:function(d, a, b, c) {
    this.x = d;
    this.y = a;
    this.z = b;
    this.w = c;
    return this;
  }, setScalar:function(d) {
    this.w = this.z = this.y = this.x = d;
    return this;
  }, setX:function(d) {
    this.x = d;
    return this;
  }, setY:function(d) {
    this.y = d;
    return this;
  }, setZ:function(d) {
    this.z = d;
    return this;
  }, setW:function(d) {
    this.w = d;
    return this;
  }, setComponent:function(d, a) {
    switch(d) {
      case 0:
        this.x = a;
        break;
      case 1:
        this.y = a;
        break;
      case 2:
        this.z = a;
        break;
      case 3:
        this.w = a;
        break;
      default:
        throw Error("index is out of range: " + d);
    }
    return this;
  }, getComponent:function(d) {
    switch(d) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      case 3:
        return this.w;
      default:
        throw Error("index is out of range: " + d);
    }
  }, clone:function() {
    return new this.constructor(this.x, this.y, this.z, this.w);
  }, copy:function(d) {
    this.x = d.x;
    this.y = d.y;
    this.z = d.z;
    this.w = void 0 !== d.w ? d.w : 1;
    return this;
  }, add:function(d, a) {
    if (void 0 !== a) {
      return console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(d, a);
    }
    this.x += d.x;
    this.y += d.y;
    this.z += d.z;
    this.w += d.w;
    return this;
  }, addScalar:function(d) {
    this.x += d;
    this.y += d;
    this.z += d;
    this.w += d;
    return this;
  }, addVectors:function(d, a) {
    this.x = d.x + a.x;
    this.y = d.y + a.y;
    this.z = d.z + a.z;
    this.w = d.w + a.w;
    return this;
  }, addScaledVector:function(d, a) {
    this.x += d.x * a;
    this.y += d.y * a;
    this.z += d.z * a;
    this.w += d.w * a;
    return this;
  }, sub:function(d, a) {
    if (void 0 !== a) {
      return console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(d, a);
    }
    this.x -= d.x;
    this.y -= d.y;
    this.z -= d.z;
    this.w -= d.w;
    return this;
  }, subScalar:function(d) {
    this.x -= d;
    this.y -= d;
    this.z -= d;
    this.w -= d;
    return this;
  }, subVectors:function(d, a) {
    this.x = d.x - a.x;
    this.y = d.y - a.y;
    this.z = d.z - a.z;
    this.w = d.w - a.w;
    return this;
  }, multiplyScalar:function(d) {
    this.x *= d;
    this.y *= d;
    this.z *= d;
    this.w *= d;
    return this;
  }, applyMatrix4:function(d) {
    var a = this.x, b = this.y, c = this.z, f = this.w;
    d = d.elements;
    this.x = d[0] * a + d[4] * b + d[8] * c + d[12] * f;
    this.y = d[1] * a + d[5] * b + d[9] * c + d[13] * f;
    this.z = d[2] * a + d[6] * b + d[10] * c + d[14] * f;
    this.w = d[3] * a + d[7] * b + d[11] * c + d[15] * f;
    return this;
  }, divideScalar:function(d) {
    return this.multiplyScalar(1 / d);
  }, setAxisAngleFromQuaternion:function(d) {
    this.w = 2 * Math.acos(d.w);
    var a = Math.sqrt(1 - d.w * d.w);
    1E-4 > a ? (this.x = 1, this.z = this.y = 0) : (this.x = d.x / a, this.y = d.y / a, this.z = d.z / a);
    return this;
  }, setAxisAngleFromRotationMatrix:function(d) {
    var a, b, c;
    d = d.elements;
    var f = d[0];
    c = d[4];
    var e = d[8], m = d[1], g = d[5], k = d[9];
    b = d[2];
    a = d[6];
    var q = d[10];
    if (.01 > Math.abs(c - m) && .01 > Math.abs(e - b) && .01 > Math.abs(k - a)) {
      if (.1 > Math.abs(c + m) && .1 > Math.abs(e + b) && .1 > Math.abs(k + a) && .1 > Math.abs(f + g + q - 3)) {
        return this.set(1, 0, 0, 0), this;
      }
      d = Math.PI;
      f = (f + 1) / 2;
      g = (g + 1) / 2;
      q = (q + 1) / 2;
      c = (c + m) / 4;
      e = (e + b) / 4;
      k = (k + a) / 4;
      f > g && f > q ? .01 > f ? (a = 0, c = b = .707106781) : (a = Math.sqrt(f), b = c / a, c = e / a) : g > q ? .01 > g ? (a = .707106781, b = 0, c = .707106781) : (b = Math.sqrt(g), a = c / b, c = k / b) : .01 > q ? (b = a = .707106781, c = 0) : (c = Math.sqrt(q), a = e / c, b = k / c);
      this.set(a, b, c, d);
      return this;
    }
    d = Math.sqrt((a - k) * (a - k) + (e - b) * (e - b) + (m - c) * (m - c));
    .001 > Math.abs(d) && (d = 1);
    this.x = (a - k) / d;
    this.y = (e - b) / d;
    this.z = (m - c) / d;
    this.w = Math.acos((f + g + q - 1) / 2);
    return this;
  }, min:function(d) {
    this.x = Math.min(this.x, d.x);
    this.y = Math.min(this.y, d.y);
    this.z = Math.min(this.z, d.z);
    this.w = Math.min(this.w, d.w);
    return this;
  }, max:function(d) {
    this.x = Math.max(this.x, d.x);
    this.y = Math.max(this.y, d.y);
    this.z = Math.max(this.z, d.z);
    this.w = Math.max(this.w, d.w);
    return this;
  }, clamp:function(d, a) {
    this.x = Math.max(d.x, Math.min(a.x, this.x));
    this.y = Math.max(d.y, Math.min(a.y, this.y));
    this.z = Math.max(d.z, Math.min(a.z, this.z));
    this.w = Math.max(d.w, Math.min(a.w, this.w));
    return this;
  }, clampScalar:function() {
    var d = new g, a = new g;
    return function(n, b) {
      d.set(n, n, n, n);
      a.set(b, b, b, b);
      return this.clamp(d, a);
    };
  }(), floor:function() {
    this.x = Math.floor(this.x);
    this.y = Math.floor(this.y);
    this.z = Math.floor(this.z);
    this.w = Math.floor(this.w);
    return this;
  }, ceil:function() {
    this.x = Math.ceil(this.x);
    this.y = Math.ceil(this.y);
    this.z = Math.ceil(this.z);
    this.w = Math.ceil(this.w);
    return this;
  }, round:function() {
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    this.z = Math.round(this.z);
    this.w = Math.round(this.w);
    return this;
  }, roundToZero:function() {
    this.x = 0 > this.x ? Math.ceil(this.x) : Math.floor(this.x);
    this.y = 0 > this.y ? Math.ceil(this.y) : Math.floor(this.y);
    this.z = 0 > this.z ? Math.ceil(this.z) : Math.floor(this.z);
    this.w = 0 > this.w ? Math.ceil(this.w) : Math.floor(this.w);
    return this;
  }, negate:function() {
    this.x = -this.x;
    this.y = -this.y;
    this.z = -this.z;
    this.w = -this.w;
    return this;
  }, dot:function(d) {
    return this.x * d.x + this.y * d.y + this.z * d.z + this.w * d.w;
  }, lengthSq:function() {
    return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
  }, length:function() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
  }, lengthManhattan:function() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
  }, normalize:function() {
    return this.divideScalar(this.length());
  }, setLength:function(d) {
    return this.multiplyScalar(d / this.length());
  }, lerp:function(d, a) {
    this.x += (d.x - this.x) * a;
    this.y += (d.y - this.y) * a;
    this.z += (d.z - this.z) * a;
    this.w += (d.w - this.w) * a;
    return this;
  }, lerpVectors:function(d, a, b) {
    return this.subVectors(a, d).multiplyScalar(b).add(d);
  }, equals:function(d) {
    return d.x === this.x && d.y === this.y && d.z === this.z && d.w === this.w;
  }, fromArray:function(d, a) {
    void 0 === a && (a = 0);
    this.x = d[a];
    this.y = d[a + 1];
    this.z = d[a + 2];
    this.w = d[a + 3];
    return this;
  }, toArray:function(d, a) {
    void 0 === d && (d = []);
    void 0 === a && (a = 0);
    d[a] = this.x;
    d[a + 1] = this.y;
    d[a + 2] = this.z;
    d[a + 3] = this.w;
    return d;
  }, fromBufferAttribute:function(d, a, b) {
    void 0 !== b && console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute().");
    this.x = d.getX(a);
    this.y = d.getY(a);
    this.z = d.getZ(a);
    this.w = d.getW(a);
    return this;
  }});
  Object.assign(k.prototype, h.prototype, {isWebGLRenderTarget:!0, setSize:function(d, a) {
    if (this.width !== d || this.height !== a) {
      this.width = d, this.height = a, this.dispose();
    }
    this.viewport.set(0, 0, d, a);
    this.scissor.set(0, 0, d, a);
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(d) {
    this.width = d.width;
    this.height = d.height;
    this.viewport.copy(d.viewport);
    this.texture = d.texture.clone();
    this.depthBuffer = d.depthBuffer;
    this.stencilBuffer = d.stencilBuffer;
    this.depthTexture = d.depthTexture;
    return this;
  }, dispose:function() {
    this.dispatchEvent({type:"dispose"});
  }});
  c.prototype = Object.create(k.prototype);
  c.prototype.constructor = c;
  c.prototype.isWebGLRenderTargetCube = !0;
  Object.assign(e, {slerp:function(d, a, b, c) {
    return b.copy(d).slerp(a, c);
  }, slerpFlat:function(d, a, b, c, f, e, m) {
    var n = b[c + 0], z = b[c + 1], g = b[c + 2];
    b = b[c + 3];
    c = f[e + 0];
    var k = f[e + 1], q = f[e + 2];
    f = f[e + 3];
    if (b !== f || n !== c || z !== k || g !== q) {
      e = 1 - m;
      var p = n * c + z * k + g * q + b * f, h = 0 <= p ? 1 : -1, E = 1 - p * p;
      E > Number.EPSILON && (E = Math.sqrt(E), p = Math.atan2(E, p * h), e = Math.sin(e * p) / E, m = Math.sin(m * p) / E);
      h *= m;
      n = n * e + c * h;
      z = z * e + k * h;
      g = g * e + q * h;
      b = b * e + f * h;
      e === 1 - m && (m = 1 / Math.sqrt(n * n + z * z + g * g + b * b), n *= m, z *= m, g *= m, b *= m);
    }
    d[a] = n;
    d[a + 1] = z;
    d[a + 2] = g;
    d[a + 3] = b;
  }});
  Object.assign(e.prototype, {set:function(d, a, b, c) {
    this.x = d;
    this.y = a;
    this.z = b;
    this.w = c;
    return this;
  }, clone:function() {
    return new this.constructor(this.x, this.y, this.z, this.w);
  }, copy:function(d) {
    this.x = d.x;
    this.y = d.y;
    this.z = d.z;
    this.w = d.w;
    return this;
  }, setFromEuler:function(d) {
    if (!1 === (d && d.isEuler)) {
      throw Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");
    }
    var a = d.x, b = d.y, c = d.z;
    d = d.order;
    var f = Math.cos, e = Math.sin, m = f(a / 2), g = f(b / 2), f = f(c / 2), a = e(a / 2), b = e(b / 2), c = e(c / 2);
    "XYZ" === d ? (this.x = a * g * f + m * b * c, this.y = m * b * f - a * g * c, this.z = m * g * c + a * b * f, this.w = m * g * f - a * b * c) : "YXZ" === d ? (this.x = a * g * f + m * b * c, this.y = m * b * f - a * g * c, this.z = m * g * c - a * b * f, this.w = m * g * f + a * b * c) : "ZXY" === d ? (this.x = a * g * f - m * b * c, this.y = m * b * f + a * g * c, this.z = m * g * c + a * b * f, this.w = m * g * f - a * b * c) : "ZYX" === d ? (this.x = a * g * f - m * b * c, this.y = m * b * 
    f + a * g * c, this.z = m * g * c - a * b * f, this.w = m * g * f + a * b * c) : "YZX" === d ? (this.x = a * g * f + m * b * c, this.y = m * b * f + a * g * c, this.z = m * g * c - a * b * f, this.w = m * g * f - a * b * c) : "XZY" === d && (this.x = a * g * f - m * b * c, this.y = m * b * f - a * g * c, this.z = m * g * c + a * b * f, this.w = m * g * f + a * b * c);
    return this;
  }, setFromAxisAngle:function(d, a) {
    a /= 2;
    var n = Math.sin(a);
    this.x = d.x * n;
    this.y = d.y * n;
    this.z = d.z * n;
    this.w = Math.cos(a);
    return this;
  }, setFromRotationMatrix:function(d) {
    var a = d.elements, b = a[0];
    d = a[4];
    var c = a[8], f = a[1], e = a[5], m = a[9], g = a[2], k = a[6], a = a[10], q = b + e + a;
    0 < q ? (b = .5 / Math.sqrt(q + 1), this.w = .25 / b, this.x = (k - m) * b, this.y = (c - g) * b, this.z = (f - d) * b) : b > e && b > a ? (b = 2 * Math.sqrt(1 + b - e - a), this.w = (k - m) / b, this.x = .25 * b, this.y = (d + f) / b, this.z = (c + g) / b) : e > a ? (b = 2 * Math.sqrt(1 + e - b - a), this.w = (c - g) / b, this.x = (d + f) / b, this.y = .25 * b, this.z = (m + k) / b) : (b = 2 * Math.sqrt(1 + a - b - e), this.w = (f - d) / b, this.x = (c + g) / b, this.y = (m + k) / b, this.z = 
    .25 * b);
    return this;
  }, setFromUnitVectors:function() {
    var d = new f, a;
    return function(n, b) {
      void 0 === d && (d = new f);
      a = n.dot(b) + 1;
      1E-6 > a ? (a = 0, Math.abs(n.x) > Math.abs(n.z) ? d.set(-n.y, n.x, 0) : d.set(0, -n.z, n.y)) : d.crossVectors(n, b);
      this.x = d.x;
      this.y = d.y;
      this.z = d.z;
      this.w = a;
      return this.normalize();
    };
  }(), inverse:function() {
    return this.conjugate().normalize();
  }, conjugate:function() {
    this.x *= -1;
    this.y *= -1;
    this.z *= -1;
    return this;
  }, dot:function(d) {
    return this.x * d.x + this.y * d.y + this.z * d.z + this.w * d.w;
  }, lengthSq:function() {
    return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
  }, length:function() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
  }, normalize:function() {
    var d = this.length();
    0 === d ? (this.z = this.y = this.x = 0, this.w = 1) : (d = 1 / d, this.x *= d, this.y *= d, this.z *= d, this.w *= d);
    return this;
  }, multiply:function(d, a) {
    return void 0 !== a ? (console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."), this.multiplyQuaternions(d, a)) : this.multiplyQuaternions(this, d);
  }, premultiply:function(d) {
    return this.multiplyQuaternions(d, this);
  }, multiplyQuaternions:function(d, a) {
    var n = d.x, b = d.y, c = d.z;
    d = d.w;
    var f = a.x, e = a.y, m = a.z;
    a = a.w;
    this.x = n * a + d * f + b * m - c * e;
    this.y = b * a + d * e + c * f - n * m;
    this.z = c * a + d * m + n * e - b * f;
    this.w = d * a - n * f - b * e - c * m;
    return this;
  }, slerp:function(d, a) {
    if (0 === a) {
      return this;
    }
    if (1 === a) {
      return this.copy(d);
    }
    var n = this.x, b = this.y, c = this.z, f = this.w, e = f * d.w + n * d.x + b * d.y + c * d.z;
    0 > e ? (this.w = -d.w, this.x = -d.x, this.y = -d.y, this.z = -d.z, e = -e) : this.copy(d);
    if (1 <= e) {
      return this.w = f, this.x = n, this.y = b, this.z = c, this;
    }
    d = Math.sqrt(1 - e * e);
    if (.001 > Math.abs(d)) {
      return this.w = .5 * (f + this.w), this.x = .5 * (n + this.x), this.y = .5 * (b + this.y), this.z = .5 * (c + this.z), this;
    }
    var m = Math.atan2(d, e), e = Math.sin((1 - a) * m) / d;
    d = Math.sin(a * m) / d;
    this.w = f * e + this.w * d;
    this.x = n * e + this.x * d;
    this.y = b * e + this.y * d;
    this.z = c * e + this.z * d;
    return this;
  }, equals:function(d) {
    return d.x === this.x && d.y === this.y && d.z === this.z && d.w === this.w;
  }, fromArray:function(d, a) {
    void 0 === a && (a = 0);
    this.x = d[a];
    this.y = d[a + 1];
    this.z = d[a + 2];
    this.w = d[a + 3];
    return this;
  }, toArray:function(d, a) {
    void 0 === d && (d = []);
    void 0 === a && (a = 0);
    d[a] = this.x;
    d[a + 1] = this.y;
    d[a + 2] = this.z;
    d[a + 3] = this.w;
    return d;
  }});
  Object.assign(f.prototype, {isVector3:!0, set:function(d, a, b) {
    this.x = d;
    this.y = a;
    this.z = b;
    return this;
  }, setScalar:function(d) {
    this.z = this.y = this.x = d;
    return this;
  }, setX:function(d) {
    this.x = d;
    return this;
  }, setY:function(d) {
    this.y = d;
    return this;
  }, setZ:function(d) {
    this.z = d;
    return this;
  }, setComponent:function(d, a) {
    switch(d) {
      case 0:
        this.x = a;
        break;
      case 1:
        this.y = a;
        break;
      case 2:
        this.z = a;
        break;
      default:
        throw Error("index is out of range: " + d);
    }
    return this;
  }, getComponent:function(d) {
    switch(d) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      default:
        throw Error("index is out of range: " + d);
    }
  }, clone:function() {
    return new this.constructor(this.x, this.y, this.z);
  }, copy:function(d) {
    this.x = d.x;
    this.y = d.y;
    this.z = d.z;
    return this;
  }, add:function(d, a) {
    if (void 0 !== a) {
      return console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(d, a);
    }
    this.x += d.x;
    this.y += d.y;
    this.z += d.z;
    return this;
  }, addScalar:function(d) {
    this.x += d;
    this.y += d;
    this.z += d;
    return this;
  }, addVectors:function(d, a) {
    this.x = d.x + a.x;
    this.y = d.y + a.y;
    this.z = d.z + a.z;
    return this;
  }, addScaledVector:function(d, a) {
    this.x += d.x * a;
    this.y += d.y * a;
    this.z += d.z * a;
    return this;
  }, sub:function(d, a) {
    if (void 0 !== a) {
      return console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(d, a);
    }
    this.x -= d.x;
    this.y -= d.y;
    this.z -= d.z;
    return this;
  }, subScalar:function(d) {
    this.x -= d;
    this.y -= d;
    this.z -= d;
    return this;
  }, subVectors:function(d, a) {
    this.x = d.x - a.x;
    this.y = d.y - a.y;
    this.z = d.z - a.z;
    return this;
  }, multiply:function(d, a) {
    if (void 0 !== a) {
      return console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."), this.multiplyVectors(d, a);
    }
    this.x *= d.x;
    this.y *= d.y;
    this.z *= d.z;
    return this;
  }, multiplyScalar:function(d) {
    this.x *= d;
    this.y *= d;
    this.z *= d;
    return this;
  }, multiplyVectors:function(d, a) {
    this.x = d.x * a.x;
    this.y = d.y * a.y;
    this.z = d.z * a.z;
    return this;
  }, applyEuler:function() {
    var d = new e;
    return function(a) {
      !1 === (a && a.isEuler) && console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.");
      return this.applyQuaternion(d.setFromEuler(a));
    };
  }(), applyAxisAngle:function() {
    var d = new e;
    return function(a, b) {
      return this.applyQuaternion(d.setFromAxisAngle(a, b));
    };
  }(), applyMatrix3:function(d) {
    var a = this.x, b = this.y, c = this.z;
    d = d.elements;
    this.x = d[0] * a + d[3] * b + d[6] * c;
    this.y = d[1] * a + d[4] * b + d[7] * c;
    this.z = d[2] * a + d[5] * b + d[8] * c;
    return this;
  }, applyMatrix4:function(d) {
    var a = this.x, b = this.y, c = this.z;
    d = d.elements;
    this.x = d[0] * a + d[4] * b + d[8] * c + d[12];
    this.y = d[1] * a + d[5] * b + d[9] * c + d[13];
    this.z = d[2] * a + d[6] * b + d[10] * c + d[14];
    return this.divideScalar(d[3] * a + d[7] * b + d[11] * c + d[15]);
  }, applyQuaternion:function(d) {
    var a = this.x, b = this.y, c = this.z, f = d.x, e = d.y, m = d.z;
    d = d.w;
    var g = d * a + e * c - m * b, k = d * b + m * a - f * c, q = d * c + f * b - e * a, a = -f * a - e * b - m * c;
    this.x = g * d + a * -f + k * -m - q * -e;
    this.y = k * d + a * -e + q * -f - g * -m;
    this.z = q * d + a * -m + g * -e - k * -f;
    return this;
  }, project:function() {
    var d = new q;
    return function(a) {
      d.multiplyMatrices(a.projectionMatrix, d.getInverse(a.matrixWorld));
      return this.applyMatrix4(d);
    };
  }(), unproject:function() {
    var d = new q;
    return function(a) {
      d.multiplyMatrices(a.matrixWorld, d.getInverse(a.projectionMatrix));
      return this.applyMatrix4(d);
    };
  }(), transformDirection:function(d) {
    var a = this.x, b = this.y, c = this.z;
    d = d.elements;
    this.x = d[0] * a + d[4] * b + d[8] * c;
    this.y = d[1] * a + d[5] * b + d[9] * c;
    this.z = d[2] * a + d[6] * b + d[10] * c;
    return this.normalize();
  }, divide:function(d) {
    this.x /= d.x;
    this.y /= d.y;
    this.z /= d.z;
    return this;
  }, divideScalar:function(d) {
    return this.multiplyScalar(1 / d);
  }, min:function(d) {
    this.x = Math.min(this.x, d.x);
    this.y = Math.min(this.y, d.y);
    this.z = Math.min(this.z, d.z);
    return this;
  }, max:function(d) {
    this.x = Math.max(this.x, d.x);
    this.y = Math.max(this.y, d.y);
    this.z = Math.max(this.z, d.z);
    return this;
  }, clamp:function(d, a) {
    this.x = Math.max(d.x, Math.min(a.x, this.x));
    this.y = Math.max(d.y, Math.min(a.y, this.y));
    this.z = Math.max(d.z, Math.min(a.z, this.z));
    return this;
  }, clampScalar:function() {
    var d = new f, a = new f;
    return function(n, b) {
      d.set(n, n, n);
      a.set(b, b, b);
      return this.clamp(d, a);
    };
  }(), clampLength:function(d, a) {
    var n = this.length();
    return this.multiplyScalar(Math.max(d, Math.min(a, n)) / n);
  }, floor:function() {
    this.x = Math.floor(this.x);
    this.y = Math.floor(this.y);
    this.z = Math.floor(this.z);
    return this;
  }, ceil:function() {
    this.x = Math.ceil(this.x);
    this.y = Math.ceil(this.y);
    this.z = Math.ceil(this.z);
    return this;
  }, round:function() {
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    this.z = Math.round(this.z);
    return this;
  }, roundToZero:function() {
    this.x = 0 > this.x ? Math.ceil(this.x) : Math.floor(this.x);
    this.y = 0 > this.y ? Math.ceil(this.y) : Math.floor(this.y);
    this.z = 0 > this.z ? Math.ceil(this.z) : Math.floor(this.z);
    return this;
  }, negate:function() {
    this.x = -this.x;
    this.y = -this.y;
    this.z = -this.z;
    return this;
  }, dot:function(d) {
    return this.x * d.x + this.y * d.y + this.z * d.z;
  }, lengthSq:function() {
    return this.x * this.x + this.y * this.y + this.z * this.z;
  }, length:function() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
  }, lengthManhattan:function() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
  }, normalize:function() {
    return this.divideScalar(this.length());
  }, setLength:function(d) {
    return this.multiplyScalar(d / this.length());
  }, lerp:function(d, a) {
    this.x += (d.x - this.x) * a;
    this.y += (d.y - this.y) * a;
    this.z += (d.z - this.z) * a;
    return this;
  }, lerpVectors:function(d, a, b) {
    return this.subVectors(a, d).multiplyScalar(b).add(d);
  }, cross:function(d, a) {
    if (void 0 !== a) {
      return console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."), this.crossVectors(d, a);
    }
    a = this.x;
    var n = this.y, b = this.z;
    this.x = n * d.z - b * d.y;
    this.y = b * d.x - a * d.z;
    this.z = a * d.y - n * d.x;
    return this;
  }, crossVectors:function(d, a) {
    var n = d.x, b = d.y;
    d = d.z;
    var c = a.x, f = a.y;
    a = a.z;
    this.x = b * a - d * f;
    this.y = d * c - n * a;
    this.z = n * f - b * c;
    return this;
  }, projectOnVector:function(d) {
    var a = d.dot(this) / d.lengthSq();
    return this.copy(d).multiplyScalar(a);
  }, projectOnPlane:function() {
    var d = new f;
    return function(a) {
      d.copy(this).projectOnVector(a);
      return this.sub(d);
    };
  }(), reflect:function() {
    var d = new f;
    return function(a) {
      return this.sub(d.copy(a).multiplyScalar(2 * this.dot(a)));
    };
  }(), angleTo:function(d) {
    d = this.dot(d) / Math.sqrt(this.lengthSq() * d.lengthSq());
    return Math.acos(na.clamp(d, -1, 1));
  }, distanceTo:function(d) {
    return Math.sqrt(this.distanceToSquared(d));
  }, distanceToSquared:function(d) {
    var a = this.x - d.x, b = this.y - d.y;
    d = this.z - d.z;
    return a * a + b * b + d * d;
  }, distanceToManhattan:function(d) {
    return Math.abs(this.x - d.x) + Math.abs(this.y - d.y) + Math.abs(this.z - d.z);
  }, setFromSpherical:function(d) {
    var a = Math.sin(d.phi) * d.radius;
    this.x = a * Math.sin(d.theta);
    this.y = Math.cos(d.phi) * d.radius;
    this.z = a * Math.cos(d.theta);
    return this;
  }, setFromCylindrical:function(d) {
    this.x = d.radius * Math.sin(d.theta);
    this.y = d.y;
    this.z = d.radius * Math.cos(d.theta);
    return this;
  }, setFromMatrixPosition:function(d) {
    return this.setFromMatrixColumn(d, 3);
  }, setFromMatrixScale:function(d) {
    var a = this.setFromMatrixColumn(d, 0).length(), b = this.setFromMatrixColumn(d, 1).length();
    d = this.setFromMatrixColumn(d, 2).length();
    this.x = a;
    this.y = b;
    this.z = d;
    return this;
  }, setFromMatrixColumn:function(d, a) {
    return this.fromArray(d.elements, 4 * a);
  }, equals:function(d) {
    return d.x === this.x && d.y === this.y && d.z === this.z;
  }, fromArray:function(d, a) {
    void 0 === a && (a = 0);
    this.x = d[a];
    this.y = d[a + 1];
    this.z = d[a + 2];
    return this;
  }, toArray:function(d, a) {
    void 0 === d && (d = []);
    void 0 === a && (a = 0);
    d[a] = this.x;
    d[a + 1] = this.y;
    d[a + 2] = this.z;
    return d;
  }, fromBufferAttribute:function(d, a, b) {
    void 0 !== b && console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute().");
    this.x = d.getX(a);
    this.y = d.getY(a);
    this.z = d.getZ(a);
    return this;
  }});
  Object.assign(q.prototype, {isMatrix4:!0, set:function(d, a, b, c, f, e, m, g, k, q, p, h, r, t, l, w) {
    var n = this.elements;
    n[0] = d;
    n[4] = a;
    n[8] = b;
    n[12] = c;
    n[1] = f;
    n[5] = e;
    n[9] = m;
    n[13] = g;
    n[2] = k;
    n[6] = q;
    n[10] = p;
    n[14] = h;
    n[3] = r;
    n[7] = t;
    n[11] = l;
    n[15] = w;
    return this;
  }, identity:function() {
    this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    return this;
  }, clone:function() {
    return (new q).fromArray(this.elements);
  }, copy:function(d) {
    var a = this.elements;
    d = d.elements;
    a[0] = d[0];
    a[1] = d[1];
    a[2] = d[2];
    a[3] = d[3];
    a[4] = d[4];
    a[5] = d[5];
    a[6] = d[6];
    a[7] = d[7];
    a[8] = d[8];
    a[9] = d[9];
    a[10] = d[10];
    a[11] = d[11];
    a[12] = d[12];
    a[13] = d[13];
    a[14] = d[14];
    a[15] = d[15];
    return this;
  }, copyPosition:function(d) {
    var a = this.elements;
    d = d.elements;
    a[12] = d[12];
    a[13] = d[13];
    a[14] = d[14];
    return this;
  }, extractBasis:function(d, a, b) {
    d.setFromMatrixColumn(this, 0);
    a.setFromMatrixColumn(this, 1);
    b.setFromMatrixColumn(this, 2);
    return this;
  }, makeBasis:function(d, a, b) {
    this.set(d.x, a.x, b.x, 0, d.y, a.y, b.y, 0, d.z, a.z, b.z, 0, 0, 0, 0, 1);
    return this;
  }, extractRotation:function() {
    var d = new f;
    return function(a) {
      var n = this.elements, b = a.elements, c = 1 / d.setFromMatrixColumn(a, 0).length(), f = 1 / d.setFromMatrixColumn(a, 1).length();
      a = 1 / d.setFromMatrixColumn(a, 2).length();
      n[0] = b[0] * c;
      n[1] = b[1] * c;
      n[2] = b[2] * c;
      n[4] = b[4] * f;
      n[5] = b[5] * f;
      n[6] = b[6] * f;
      n[8] = b[8] * a;
      n[9] = b[9] * a;
      n[10] = b[10] * a;
      return this;
    };
  }(), makeRotationFromEuler:function(d) {
    !1 === (d && d.isEuler) && console.error("THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");
    var a = this.elements, b = d.x, c = d.y, f = d.z, e = Math.cos(b), b = Math.sin(b), m = Math.cos(c), c = Math.sin(c), g = Math.cos(f), f = Math.sin(f);
    if ("XYZ" === d.order) {
      d = e * g;
      var k = e * f, q = b * g, p = b * f;
      a[0] = m * g;
      a[4] = -m * f;
      a[8] = c;
      a[1] = k + q * c;
      a[5] = d - p * c;
      a[9] = -b * m;
      a[2] = p - d * c;
      a[6] = q + k * c;
      a[10] = e * m;
    } else {
      "YXZ" === d.order ? (d = m * g, k = m * f, q = c * g, p = c * f, a[0] = d + p * b, a[4] = q * b - k, a[8] = e * c, a[1] = e * f, a[5] = e * g, a[9] = -b, a[2] = k * b - q, a[6] = p + d * b, a[10] = e * m) : "ZXY" === d.order ? (d = m * g, k = m * f, q = c * g, p = c * f, a[0] = d - p * b, a[4] = -e * f, a[8] = q + k * b, a[1] = k + q * b, a[5] = e * g, a[9] = p - d * b, a[2] = -e * c, a[6] = b, a[10] = e * m) : "ZYX" === d.order ? (d = e * g, k = e * f, q = b * g, p = b * f, a[0] = m * g, a[4] = 
      q * c - k, a[8] = d * c + p, a[1] = m * f, a[5] = p * c + d, a[9] = k * c - q, a[2] = -c, a[6] = b * m, a[10] = e * m) : "YZX" === d.order ? (d = e * m, k = e * c, q = b * m, p = b * c, a[0] = m * g, a[4] = p - d * f, a[8] = q * f + k, a[1] = f, a[5] = e * g, a[9] = -b * g, a[2] = -c * g, a[6] = k * f + q, a[10] = d - p * f) : "XZY" === d.order && (d = e * m, k = e * c, q = b * m, p = b * c, a[0] = m * g, a[4] = -f, a[8] = c * g, a[1] = d * f + p, a[5] = e * g, a[9] = k * f - q, a[2] = q * 
      f - k, a[6] = b * g, a[10] = p * f + d);
    }
    a[3] = 0;
    a[7] = 0;
    a[11] = 0;
    a[12] = 0;
    a[13] = 0;
    a[14] = 0;
    a[15] = 1;
    return this;
  }, makeRotationFromQuaternion:function(d) {
    var a = this.elements, b = d.x, c = d.y, f = d.z, e = d.w, m = b + b, g = c + c, k = f + f;
    d = b * m;
    var q = b * g, b = b * k, p = c * g, c = c * k, f = f * k, m = e * m, g = e * g, e = e * k;
    a[0] = 1 - (p + f);
    a[4] = q - e;
    a[8] = b + g;
    a[1] = q + e;
    a[5] = 1 - (d + f);
    a[9] = c - m;
    a[2] = b - g;
    a[6] = c + m;
    a[10] = 1 - (d + p);
    a[3] = 0;
    a[7] = 0;
    a[11] = 0;
    a[12] = 0;
    a[13] = 0;
    a[14] = 0;
    a[15] = 1;
    return this;
  }, lookAt:function() {
    var d = new f, a = new f, b = new f;
    return function(n, c, f) {
      var e = this.elements;
      b.subVectors(n, c);
      0 === b.lengthSq() && (b.z = 1);
      b.normalize();
      d.crossVectors(f, b);
      0 === d.lengthSq() && (b.z += 1E-4, d.crossVectors(f, b));
      d.normalize();
      a.crossVectors(b, d);
      e[0] = d.x;
      e[4] = a.x;
      e[8] = b.x;
      e[1] = d.y;
      e[5] = a.y;
      e[9] = b.y;
      e[2] = d.z;
      e[6] = a.z;
      e[10] = b.z;
      return this;
    };
  }(), multiply:function(d, a) {
    return void 0 !== a ? (console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."), this.multiplyMatrices(d, a)) : this.multiplyMatrices(this, d);
  }, premultiply:function(d) {
    return this.multiplyMatrices(d, this);
  }, multiplyMatrices:function(d, a) {
    d = d.elements;
    a = a.elements;
    var n = this.elements, b = d[0], c = d[4], f = d[8], e = d[12], m = d[1], g = d[5], k = d[9], q = d[13], p = d[2], h = d[6], r = d[10], t = d[14], l = d[3], w = d[7], u = d[11];
    d = d[15];
    var v = a[0], C = a[4], y = a[8], A = a[12], x = a[1], B = a[5], F = a[9], I = a[13], G = a[2], D = a[6], V = a[10], K = a[14], H = a[3], J = a[7], ca = a[11];
    a = a[15];
    n[0] = b * v + c * x + f * G + e * H;
    n[4] = b * C + c * B + f * D + e * J;
    n[8] = b * y + c * F + f * V + e * ca;
    n[12] = b * A + c * I + f * K + e * a;
    n[1] = m * v + g * x + k * G + q * H;
    n[5] = m * C + g * B + k * D + q * J;
    n[9] = m * y + g * F + k * V + q * ca;
    n[13] = m * A + g * I + k * K + q * a;
    n[2] = p * v + h * x + r * G + t * H;
    n[6] = p * C + h * B + r * D + t * J;
    n[10] = p * y + h * F + r * V + t * ca;
    n[14] = p * A + h * I + r * K + t * a;
    n[3] = l * v + w * x + u * G + d * H;
    n[7] = l * C + w * B + u * D + d * J;
    n[11] = l * y + w * F + u * V + d * ca;
    n[15] = l * A + w * I + u * K + d * a;
    return this;
  }, multiplyScalar:function(d) {
    var a = this.elements;
    a[0] *= d;
    a[4] *= d;
    a[8] *= d;
    a[12] *= d;
    a[1] *= d;
    a[5] *= d;
    a[9] *= d;
    a[13] *= d;
    a[2] *= d;
    a[6] *= d;
    a[10] *= d;
    a[14] *= d;
    a[3] *= d;
    a[7] *= d;
    a[11] *= d;
    a[15] *= d;
    return this;
  }, applyToBufferAttribute:function() {
    var d = new f;
    return function(a) {
      for (var n = 0, b = a.count;n < b;n++) {
        d.x = a.getX(n), d.y = a.getY(n), d.z = a.getZ(n), d.applyMatrix4(this), a.setXYZ(n, d.x, d.y, d.z);
      }
      return a;
    };
  }(), determinant:function() {
    var d = this.elements, a = d[0], b = d[4], c = d[8], f = d[12], e = d[1], m = d[5], g = d[9], k = d[13], q = d[2], p = d[6], h = d[10], r = d[14];
    return d[3] * (+f * g * p - c * k * p - f * m * h + b * k * h + c * m * r - b * g * r) + d[7] * (+a * g * r - a * k * h + f * e * h - c * e * r + c * k * q - f * g * q) + d[11] * (+a * k * p - a * m * r - f * e * p + b * e * r + f * m * q - b * k * q) + d[15] * (-c * m * q - a * g * p + a * m * h + c * e * p - b * e * h + b * g * q);
  }, transpose:function() {
    var d = this.elements, a;
    a = d[1];
    d[1] = d[4];
    d[4] = a;
    a = d[2];
    d[2] = d[8];
    d[8] = a;
    a = d[6];
    d[6] = d[9];
    d[9] = a;
    a = d[3];
    d[3] = d[12];
    d[12] = a;
    a = d[7];
    d[7] = d[13];
    d[13] = a;
    a = d[11];
    d[11] = d[14];
    d[14] = a;
    return this;
  }, setPosition:function(d) {
    var a = this.elements;
    a[12] = d.x;
    a[13] = d.y;
    a[14] = d.z;
    return this;
  }, getInverse:function(d, a) {
    var n = this.elements;
    d = d.elements;
    var b = d[0], c = d[1], f = d[2], e = d[3], m = d[4], g = d[5], k = d[6], q = d[7], p = d[8], h = d[9], r = d[10], t = d[11], l = d[12], w = d[13], u = d[14];
    d = d[15];
    var v = h * u * q - w * r * q + w * k * t - g * u * t - h * k * d + g * r * d, C = l * r * q - p * u * q - l * k * t + m * u * t + p * k * d - m * r * d, y = p * w * q - l * h * q + l * g * t - m * w * t - p * g * d + m * h * d, A = l * h * k - p * w * k - l * g * r + m * w * r + p * g * u - m * h * u, x = b * v + c * C + f * y + e * A;
    if (0 === x) {
      if (!0 === a) {
        throw Error("THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0");
      }
      console.warn("THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0");
      return this.identity();
    }
    x = 1 / x;
    n[0] = v * x;
    n[1] = (w * r * e - h * u * e - w * f * t + c * u * t + h * f * d - c * r * d) * x;
    n[2] = (g * u * e - w * k * e + w * f * q - c * u * q - g * f * d + c * k * d) * x;
    n[3] = (h * k * e - g * r * e - h * f * q + c * r * q + g * f * t - c * k * t) * x;
    n[4] = C * x;
    n[5] = (p * u * e - l * r * e + l * f * t - b * u * t - p * f * d + b * r * d) * x;
    n[6] = (l * k * e - m * u * e - l * f * q + b * u * q + m * f * d - b * k * d) * x;
    n[7] = (m * r * e - p * k * e + p * f * q - b * r * q - m * f * t + b * k * t) * x;
    n[8] = y * x;
    n[9] = (l * h * e - p * w * e - l * c * t + b * w * t + p * c * d - b * h * d) * x;
    n[10] = (m * w * e - l * g * e + l * c * q - b * w * q - m * c * d + b * g * d) * x;
    n[11] = (p * g * e - m * h * e - p * c * q + b * h * q + m * c * t - b * g * t) * x;
    n[12] = A * x;
    n[13] = (p * w * f - l * h * f + l * c * r - b * w * r - p * c * u + b * h * u) * x;
    n[14] = (l * g * f - m * w * f - l * c * k + b * w * k + m * c * u - b * g * u) * x;
    n[15] = (m * h * f - p * g * f + p * c * k - b * h * k - m * c * r + b * g * r) * x;
    return this;
  }, scale:function(d) {
    var a = this.elements, b = d.x, c = d.y;
    d = d.z;
    a[0] *= b;
    a[4] *= c;
    a[8] *= d;
    a[1] *= b;
    a[5] *= c;
    a[9] *= d;
    a[2] *= b;
    a[6] *= c;
    a[10] *= d;
    a[3] *= b;
    a[7] *= c;
    a[11] *= d;
    return this;
  }, getMaxScaleOnAxis:function() {
    var d = this.elements;
    return Math.sqrt(Math.max(d[0] * d[0] + d[1] * d[1] + d[2] * d[2], d[4] * d[4] + d[5] * d[5] + d[6] * d[6], d[8] * d[8] + d[9] * d[9] + d[10] * d[10]));
  }, makeTranslation:function(d, a, b) {
    this.set(1, 0, 0, d, 0, 1, 0, a, 0, 0, 1, b, 0, 0, 0, 1);
    return this;
  }, makeRotationX:function(d) {
    var a = Math.cos(d);
    d = Math.sin(d);
    this.set(1, 0, 0, 0, 0, a, -d, 0, 0, d, a, 0, 0, 0, 0, 1);
    return this;
  }, makeRotationY:function(d) {
    var a = Math.cos(d);
    d = Math.sin(d);
    this.set(a, 0, d, 0, 0, 1, 0, 0, -d, 0, a, 0, 0, 0, 0, 1);
    return this;
  }, makeRotationZ:function(d) {
    var a = Math.cos(d);
    d = Math.sin(d);
    this.set(a, -d, 0, 0, d, a, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    return this;
  }, makeRotationAxis:function(d, a) {
    var n = Math.cos(a);
    a = Math.sin(a);
    var b = 1 - n, c = d.x, f = d.y;
    d = d.z;
    var e = b * c, m = b * f;
    this.set(e * c + n, e * f - a * d, e * d + a * f, 0, e * f + a * d, m * f + n, m * d - a * c, 0, e * d - a * f, m * d + a * c, b * d * d + n, 0, 0, 0, 0, 1);
    return this;
  }, makeScale:function(d, a, b) {
    this.set(d, 0, 0, 0, 0, a, 0, 0, 0, 0, b, 0, 0, 0, 0, 1);
    return this;
  }, makeShear:function(d, a, b) {
    this.set(1, a, b, 0, d, 1, b, 0, d, a, 1, 0, 0, 0, 0, 1);
    return this;
  }, compose:function(d, a, b) {
    this.makeRotationFromQuaternion(a);
    this.scale(b);
    this.setPosition(d);
    return this;
  }, decompose:function() {
    var d = new f, a = new q;
    return function(n, b, c) {
      var f = this.elements, e = d.set(f[0], f[1], f[2]).length(), m = d.set(f[4], f[5], f[6]).length(), g = d.set(f[8], f[9], f[10]).length();
      0 > this.determinant() && (e = -e);
      n.x = f[12];
      n.y = f[13];
      n.z = f[14];
      a.copy(this);
      n = 1 / e;
      var f = 1 / m, k = 1 / g;
      a.elements[0] *= n;
      a.elements[1] *= n;
      a.elements[2] *= n;
      a.elements[4] *= f;
      a.elements[5] *= f;
      a.elements[6] *= f;
      a.elements[8] *= k;
      a.elements[9] *= k;
      a.elements[10] *= k;
      b.setFromRotationMatrix(a);
      c.x = e;
      c.y = m;
      c.z = g;
      return this;
    };
  }(), makePerspective:function(d, a, b, c, f, e) {
    void 0 === e && console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");
    var n = this.elements;
    n[0] = 2 * f / (a - d);
    n[4] = 0;
    n[8] = (a + d) / (a - d);
    n[12] = 0;
    n[1] = 0;
    n[5] = 2 * f / (b - c);
    n[9] = (b + c) / (b - c);
    n[13] = 0;
    n[2] = 0;
    n[6] = 0;
    n[10] = -(e + f) / (e - f);
    n[14] = -2 * e * f / (e - f);
    n[3] = 0;
    n[7] = 0;
    n[11] = -1;
    n[15] = 0;
    return this;
  }, makeOrthographic:function(d, a, b, c, f, e) {
    var n = this.elements, m = 1 / (a - d), g = 1 / (b - c), k = 1 / (e - f);
    n[0] = 2 * m;
    n[4] = 0;
    n[8] = 0;
    n[12] = -((a + d) * m);
    n[1] = 0;
    n[5] = 2 * g;
    n[9] = 0;
    n[13] = -((b + c) * g);
    n[2] = 0;
    n[6] = 0;
    n[10] = -2 * k;
    n[14] = -((e + f) * k);
    n[3] = 0;
    n[7] = 0;
    n[11] = 0;
    n[15] = 1;
    return this;
  }, equals:function(d) {
    var a = this.elements;
    d = d.elements;
    for (var b = 0;16 > b;b++) {
      if (a[b] !== d[b]) {
        return !1;
      }
    }
    return !0;
  }, fromArray:function(d, a) {
    void 0 === a && (a = 0);
    for (var n = 0;16 > n;n++) {
      this.elements[n] = d[n + a];
    }
    return this;
  }, toArray:function(d, a) {
    void 0 === d && (d = []);
    void 0 === a && (a = 0);
    var n = this.elements;
    d[a] = n[0];
    d[a + 1] = n[1];
    d[a + 2] = n[2];
    d[a + 3] = n[3];
    d[a + 4] = n[4];
    d[a + 5] = n[5];
    d[a + 6] = n[6];
    d[a + 7] = n[7];
    d[a + 8] = n[8];
    d[a + 9] = n[9];
    d[a + 10] = n[10];
    d[a + 11] = n[11];
    d[a + 12] = n[12];
    d[a + 13] = n[13];
    d[a + 14] = n[14];
    d[a + 15] = n[15];
    return d;
  }});
  r.prototype = Object.create(b.prototype);
  r.prototype.constructor = r;
  r.prototype.isDataTexture = !0;
  w.prototype = Object.create(b.prototype);
  w.prototype.constructor = w;
  w.prototype.isCubeTexture = !0;
  Object.defineProperty(w.prototype, "images", {get:function() {
    return this.image;
  }, set:function(d) {
    this.image = d;
  }});
  var Ie = new b, Je = new w, Ee = [], Fe = [], He = new Float32Array(16), Ge = new Float32Array(9);
  ma.prototype.setValue = function(d, a) {
    for (var n = this.seq, b = 0, c = n.length;b !== c;++b) {
      var f = n[b];
      f.setValue(d, a[f.id]);
    }
  };
  var Zd = /([\w\d_]+)(\])?(\[|\.)?/g;
  Q.prototype.setValue = function(d, a, b) {
    a = this.map[a];
    void 0 !== a && a.setValue(d, b, this.renderer);
  };
  Q.prototype.setOptional = function(d, a, b) {
    a = a[b];
    void 0 !== a && this.setValue(d, b, a);
  };
  Q.upload = function(d, a, b, c) {
    for (var n = 0, f = a.length;n !== f;++n) {
      var e = a[n], m = b[e.id];
      !1 !== m.needsUpdate && e.setValue(d, m.value, c);
    }
  };
  Q.seqWithValue = function(d, a) {
    for (var n = [], b = 0, c = d.length;b !== c;++b) {
      var f = d[b];
      f.id in a && n.push(f);
    }
    return n;
  };
  var zf = {aliceblue:15792383, antiquewhite:16444375, aqua:65535, aquamarine:8388564, azure:15794175, beige:16119260, bisque:16770244, black:0, blanchedalmond:16772045, blue:255, blueviolet:9055202, brown:10824234, burlywood:14596231, cadetblue:6266528, chartreuse:8388352, chocolate:13789470, coral:16744272, cornflowerblue:6591981, cornsilk:16775388, crimson:14423100, cyan:65535, darkblue:139, darkcyan:35723, darkgoldenrod:12092939, darkgray:11119017, darkgreen:25600, darkgrey:11119017, darkkhaki:12433259, 
  darkmagenta:9109643, darkolivegreen:5597999, darkorange:16747520, darkorchid:10040012, darkred:9109504, darksalmon:15308410, darkseagreen:9419919, darkslateblue:4734347, darkslategray:3100495, darkslategrey:3100495, darkturquoise:52945, darkviolet:9699539, deeppink:16716947, deepskyblue:49151, dimgray:6908265, dimgrey:6908265, dodgerblue:2003199, firebrick:11674146, floralwhite:16775920, forestgreen:2263842, fuchsia:16711935, gainsboro:14474460, ghostwhite:16316671, gold:16766720, goldenrod:14329120, 
  gray:8421504, green:32768, greenyellow:11403055, grey:8421504, honeydew:15794160, hotpink:16738740, indianred:13458524, indigo:4915330, ivory:16777200, khaki:15787660, lavender:15132410, lavenderblush:16773365, lawngreen:8190976, lemonchiffon:16775885, lightblue:11393254, lightcoral:15761536, lightcyan:14745599, lightgoldenrodyellow:16448210, lightgray:13882323, lightgreen:9498256, lightgrey:13882323, lightpink:16758465, lightsalmon:16752762, lightseagreen:2142890, lightskyblue:8900346, lightslategray:7833753, 
  lightslategrey:7833753, lightsteelblue:11584734, lightyellow:16777184, lime:65280, limegreen:3329330, linen:16445670, magenta:16711935, maroon:8388608, mediumaquamarine:6737322, mediumblue:205, mediumorchid:12211667, mediumpurple:9662683, mediumseagreen:3978097, mediumslateblue:8087790, mediumspringgreen:64154, mediumturquoise:4772300, mediumvioletred:13047173, midnightblue:1644912, mintcream:16121850, mistyrose:16770273, moccasin:16770229, navajowhite:16768685, navy:128, oldlace:16643558, olive:8421376, 
  olivedrab:7048739, orange:16753920, orangered:16729344, orchid:14315734, palegoldenrod:15657130, palegreen:10025880, paleturquoise:11529966, palevioletred:14381203, papayawhip:16773077, peachpuff:16767673, peru:13468991, pink:16761035, plum:14524637, powderblue:11591910, purple:8388736, red:16711680, rosybrown:12357519, royalblue:4286945, saddlebrown:9127187, salmon:16416882, sandybrown:16032864, seagreen:3050327, seashell:16774638, sienna:10506797, silver:12632256, skyblue:8900331, slateblue:6970061, 
  slategray:7372944, slategrey:7372944, snow:16775930, springgreen:65407, steelblue:4620980, tan:13808780, teal:32896, thistle:14204888, tomato:16737095, turquoise:4251856, violet:15631086, wheat:16113331, white:16777215, whitesmoke:16119285, yellow:16776960, yellowgreen:10145074};
  Object.assign(Z.prototype, {isColor:!0, r:1, g:1, b:1, set:function(d) {
    d && d.isColor ? this.copy(d) : "number" === typeof d ? this.setHex(d) : "string" === typeof d && this.setStyle(d);
    return this;
  }, setScalar:function(d) {
    this.b = this.g = this.r = d;
    return this;
  }, setHex:function(d) {
    d = Math.floor(d);
    this.r = (d >> 16 & 255) / 255;
    this.g = (d >> 8 & 255) / 255;
    this.b = (d & 255) / 255;
    return this;
  }, setRGB:function(d, a, b) {
    this.r = d;
    this.g = a;
    this.b = b;
    return this;
  }, setHSL:function() {
    function d(d, a, b) {
      0 > b && (b += 1);
      1 < b && --b;
      return b < 1 / 6 ? d + 6 * (a - d) * b : .5 > b ? a : b < 2 / 3 ? d + 6 * (a - d) * (2 / 3 - b) : d;
    }
    return function(a, b, c) {
      a = na.euclideanModulo(a, 1);
      b = na.clamp(b, 0, 1);
      c = na.clamp(c, 0, 1);
      0 === b ? this.r = this.g = this.b = c : (b = .5 >= c ? c * (1 + b) : c + b - c * b, c = 2 * c - b, this.r = d(c, b, a + 1 / 3), this.g = d(c, b, a), this.b = d(c, b, a - 1 / 3));
      return this;
    };
  }(), setStyle:function(d) {
    function a(a) {
      void 0 !== a && 1 > parseFloat(a) && console.warn("THREE.Color: Alpha component of " + d + " will be ignored.");
    }
    var b;
    if (b = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(d)) {
      var c = b[2];
      switch(b[1]) {
        case "rgb":
        case "rgba":
          if (b = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(c)) {
            return this.r = Math.min(255, parseInt(b[1], 10)) / 255, this.g = Math.min(255, parseInt(b[2], 10)) / 255, this.b = Math.min(255, parseInt(b[3], 10)) / 255, a(b[5]), this;
          }
          if (b = /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(c)) {
            return this.r = Math.min(100, parseInt(b[1], 10)) / 100, this.g = Math.min(100, parseInt(b[2], 10)) / 100, this.b = Math.min(100, parseInt(b[3], 10)) / 100, a(b[5]), this;
          }
          break;
        case "hsl":
        case "hsla":
          if (b = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(c)) {
            var c = parseFloat(b[1]) / 360, f = parseInt(b[2], 10) / 100, e = parseInt(b[3], 10) / 100;
            a(b[5]);
            return this.setHSL(c, f, e);
          }
      }
    } else {
      if (b = /^\#([A-Fa-f0-9]+)$/.exec(d)) {
        b = b[1];
        c = b.length;
        if (3 === c) {
          return this.r = parseInt(b.charAt(0) + b.charAt(0), 16) / 255, this.g = parseInt(b.charAt(1) + b.charAt(1), 16) / 255, this.b = parseInt(b.charAt(2) + b.charAt(2), 16) / 255, this;
        }
        if (6 === c) {
          return this.r = parseInt(b.charAt(0) + b.charAt(1), 16) / 255, this.g = parseInt(b.charAt(2) + b.charAt(3), 16) / 255, this.b = parseInt(b.charAt(4) + b.charAt(5), 16) / 255, this;
        }
      }
    }
    d && 0 < d.length && (b = zf[d], void 0 !== b ? this.setHex(b) : console.warn("THREE.Color: Unknown color " + d));
    return this;
  }, clone:function() {
    return new this.constructor(this.r, this.g, this.b);
  }, copy:function(d) {
    this.r = d.r;
    this.g = d.g;
    this.b = d.b;
    return this;
  }, copyGammaToLinear:function(d, a) {
    void 0 === a && (a = 2);
    this.r = Math.pow(d.r, a);
    this.g = Math.pow(d.g, a);
    this.b = Math.pow(d.b, a);
    return this;
  }, copyLinearToGamma:function(d, a) {
    void 0 === a && (a = 2);
    a = 0 < a ? 1 / a : 1;
    this.r = Math.pow(d.r, a);
    this.g = Math.pow(d.g, a);
    this.b = Math.pow(d.b, a);
    return this;
  }, convertGammaToLinear:function() {
    var d = this.r, a = this.g, b = this.b;
    this.r = d * d;
    this.g = a * a;
    this.b = b * b;
    return this;
  }, convertLinearToGamma:function() {
    this.r = Math.sqrt(this.r);
    this.g = Math.sqrt(this.g);
    this.b = Math.sqrt(this.b);
    return this;
  }, getHex:function() {
    return 255 * this.r << 16 ^ 255 * this.g << 8 ^ 255 * this.b << 0;
  }, getHexString:function() {
    return ("000000" + this.getHex().toString(16)).slice(-6);
  }, getHSL:function(d) {
    d = d || {h:0, s:0, l:0};
    var a = this.r, b = this.g, c = this.b, f = Math.max(a, b, c), e = Math.min(a, b, c), m, g = (e + f) / 2;
    if (e === f) {
      e = m = 0;
    } else {
      var k = f - e, e = .5 >= g ? k / (f + e) : k / (2 - f - e);
      switch(f) {
        case a:
          m = (b - c) / k + (b < c ? 6 : 0);
          break;
        case b:
          m = (c - a) / k + 2;
          break;
        case c:
          m = (a - b) / k + 4;
      }
      m /= 6;
    }
    d.h = m;
    d.s = e;
    d.l = g;
    return d;
  }, getStyle:function() {
    return "rgb(" + (255 * this.r | 0) + "," + (255 * this.g | 0) + "," + (255 * this.b | 0) + ")";
  }, offsetHSL:function(d, a, b) {
    var n = this.getHSL();
    n.h += d;
    n.s += a;
    n.l += b;
    this.setHSL(n.h, n.s, n.l);
    return this;
  }, add:function(d) {
    this.r += d.r;
    this.g += d.g;
    this.b += d.b;
    return this;
  }, addColors:function(d, a) {
    this.r = d.r + a.r;
    this.g = d.g + a.g;
    this.b = d.b + a.b;
    return this;
  }, addScalar:function(d) {
    this.r += d;
    this.g += d;
    this.b += d;
    return this;
  }, sub:function(d) {
    this.r = Math.max(0, this.r - d.r);
    this.g = Math.max(0, this.g - d.g);
    this.b = Math.max(0, this.b - d.b);
    return this;
  }, multiply:function(d) {
    this.r *= d.r;
    this.g *= d.g;
    this.b *= d.b;
    return this;
  }, multiplyScalar:function(d) {
    this.r *= d;
    this.g *= d;
    this.b *= d;
    return this;
  }, lerp:function(d, a) {
    this.r += (d.r - this.r) * a;
    this.g += (d.g - this.g) * a;
    this.b += (d.b - this.b) * a;
    return this;
  }, equals:function(d) {
    return d.r === this.r && d.g === this.g && d.b === this.b;
  }, fromArray:function(d, a) {
    void 0 === a && (a = 0);
    this.r = d[a];
    this.g = d[a + 1];
    this.b = d[a + 2];
    return this;
  }, toArray:function(d, a) {
    void 0 === d && (d = []);
    void 0 === a && (a = 0);
    d[a] = this.r;
    d[a + 1] = this.g;
    d[a + 2] = this.b;
    return d;
  }, toJSON:function() {
    return this.getHex();
  }});
  var la = {common:{diffuse:{value:new Z(15658734)}, opacity:{value:1}, map:{value:null}, offsetRepeat:{value:new g(0, 0, 1, 1)}, specularMap:{value:null}, alphaMap:{value:null}, envMap:{value:null}, flipEnvMap:{value:-1}, reflectivity:{value:1}, refractionRatio:{value:.98}}, aomap:{aoMap:{value:null}, aoMapIntensity:{value:1}}, lightmap:{lightMap:{value:null}, lightMapIntensity:{value:1}}, emissivemap:{emissiveMap:{value:null}}, bumpmap:{bumpMap:{value:null}, bumpScale:{value:1}}, normalmap:{normalMap:{value:null}, 
  normalScale:{value:new l(1, 1)}}, displacementmap:{displacementMap:{value:null}, displacementScale:{value:1}, displacementBias:{value:0}}, roughnessmap:{roughnessMap:{value:null}}, metalnessmap:{metalnessMap:{value:null}}, gradientmap:{gradientMap:{value:null}}, fog:{fogDensity:{value:2.5E-4}, fogNear:{value:1}, fogFar:{value:2E3}, fogColor:{value:new Z(16777215)}}, lights:{ambientLightColor:{value:[]}, directionalLights:{value:[], properties:{direction:{}, color:{}, shadow:{}, shadowBias:{}, shadowRadius:{}, 
  shadowMapSize:{}}}, directionalShadowMap:{value:[]}, directionalShadowMatrix:{value:[]}, spotLights:{value:[], properties:{color:{}, position:{}, direction:{}, distance:{}, coneCos:{}, penumbraCos:{}, decay:{}, shadow:{}, shadowBias:{}, shadowRadius:{}, shadowMapSize:{}}}, spotShadowMap:{value:[]}, spotShadowMatrix:{value:[]}, pointLights:{value:[], properties:{color:{}, position:{}, decay:{}, distance:{}, shadow:{}, shadowBias:{}, shadowRadius:{}, shadowMapSize:{}}}, pointShadowMap:{value:[]}, 
  pointShadowMatrix:{value:[]}, hemisphereLights:{value:[], properties:{direction:{}, skyColor:{}, groundColor:{}}}, rectAreaLights:{value:[], properties:{color:{}, position:{}, width:{}, height:{}}}}, points:{diffuse:{value:new Z(15658734)}, opacity:{value:1}, size:{value:1}, scale:{value:1}, map:{value:null}, offsetRepeat:{value:new g(0, 0, 1, 1)}}}, Ta = {merge:function(d) {
    for (var a = {}, b = 0;b < d.length;b++) {
      var c = this.clone(d[b]), f;
      for (f in c) {
        a[f] = c[f];
      }
    }
    return a;
  }, clone:function(d) {
    var a = {}, b;
    for (b in d) {
      a[b] = {};
      for (var c in d[b]) {
        var f = d[b][c];
        f && (f.isColor || f.isMatrix3 || f.isMatrix4 || f.isVector2 || f.isVector3 || f.isVector4 || f.isTexture) ? a[b][c] = f.clone() : Array.isArray(f) ? a[b][c] = f.slice() : a[b][c] = f;
      }
    }
    return a;
  }}, ha = {alphamap_fragment:"#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif\n", alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif\n", alphatest_fragment:"#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif\n", aomap_fragment:"#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif\n", 
  aomap_pars_fragment:"#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif", begin_vertex:"\nvec3 transformed = vec3( position );\n", beginnormal_vertex:"\nvec3 objectNormal = vec3( normal );\n", bsdfs:"float punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t\tif( decayExponent > 0.0 ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\t\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t\treturn distanceFalloff * maxDistanceCutoffFactor;\n#else\n\t\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n#endif\n\t\t}\n\t\treturn 1.0;\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 ltcTextureCoords( const in GeometricContext geometry, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = (LUT_SIZE - 1.0)/LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5/LUT_SIZE;\n\tvec3 N = geometry.normal;\n\tvec3 V = geometry.viewDir;\n\tvec3 P = geometry.position;\n\tfloat theta = acos( dot( N, V ) );\n\tvec2 uv = vec2(\n\t\tsqrt( saturate( roughness ) ),\n\t\tsaturate( theta / ( 0.5 * PI ) ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nvoid clipQuadToHorizon( inout vec3 L[5], out int n ) {\n\tint config = 0;\n\tif ( L[0].z > 0.0 ) config += 1;\n\tif ( L[1].z > 0.0 ) config += 2;\n\tif ( L[2].z > 0.0 ) config += 4;\n\tif ( L[3].z > 0.0 ) config += 8;\n\tn = 0;\n\tif ( config == 0 ) {\n\t} else if ( config == 1 ) {\n\t\tn = 3;\n\t\tL[1] = -L[1].z * L[0] + L[0].z * L[1];\n\t\tL[2] = -L[3].z * L[0] + L[0].z * L[3];\n\t} else if ( config == 2 ) {\n\t\tn = 3;\n\t\tL[0] = -L[0].z * L[1] + L[1].z * L[0];\n\t\tL[2] = -L[2].z * L[1] + L[1].z * L[2];\n\t} else if ( config == 3 ) {\n\t\tn = 4;\n\t\tL[2] = -L[2].z * L[1] + L[1].z * L[2];\n\t\tL[3] = -L[3].z * L[0] + L[0].z * L[3];\n\t} else if ( config == 4 ) {\n\t\tn = 3;\n\t\tL[0] = -L[3].z * L[2] + L[2].z * L[3];\n\t\tL[1] = -L[1].z * L[2] + L[2].z * L[1];\n\t} else if ( config == 5 ) {\n\t\tn = 0;\n\t} else if ( config == 6 ) {\n\t\tn = 4;\n\t\tL[0] = -L[0].z * L[1] + L[1].z * L[0];\n\t\tL[3] = -L[3].z * L[2] + L[2].z * L[3];\n\t} else if ( config == 7 ) {\n\t\tn = 5;\n\t\tL[4] = -L[3].z * L[0] + L[0].z * L[3];\n\t\tL[3] = -L[3].z * L[2] + L[2].z * L[3];\n\t} else if ( config == 8 ) {\n\t\tn = 3;\n\t\tL[0] = -L[0].z * L[3] + L[3].z * L[0];\n\t\tL[1] = -L[2].z * L[3] + L[3].z * L[2];\n\t\tL[2] =  L[3];\n\t} else if ( config == 9 ) {\n\t\tn = 4;\n\t\tL[1] = -L[1].z * L[0] + L[0].z * L[1];\n\t\tL[2] = -L[2].z * L[3] + L[3].z * L[2];\n\t} else if ( config == 10 ) {\n\t\tn = 0;\n\t} else if ( config == 11 ) {\n\t\tn = 5;\n\t\tL[4] = L[3];\n\t\tL[3] = -L[2].z * L[3] + L[3].z * L[2];\n\t\tL[2] = -L[2].z * L[1] + L[1].z * L[2];\n\t} else if ( config == 12 ) {\n\t\tn = 4;\n\t\tL[1] = -L[1].z * L[2] + L[2].z * L[1];\n\t\tL[0] = -L[0].z * L[3] + L[3].z * L[0];\n\t} else if ( config == 13 ) {\n\t\tn = 5;\n\t\tL[4] = L[3];\n\t\tL[3] = L[2];\n\t\tL[2] = -L[1].z * L[2] + L[2].z * L[1];\n\t\tL[1] = -L[1].z * L[0] + L[0].z * L[1];\n\t} else if ( config == 14 ) {\n\t\tn = 5;\n\t\tL[4] = -L[0].z * L[3] + L[3].z * L[0];\n\t\tL[0] = -L[0].z * L[1] + L[1].z * L[0];\n\t} else if ( config == 15 ) {\n\t\tn = 4;\n\t}\n\tif ( n == 3 )\n\t\tL[3] = L[0];\n\tif ( n == 4 )\n\t\tL[4] = L[0];\n}\nfloat integrateLtcBrdfOverRectEdge( vec3 v1, vec3 v2 ) {\n\tfloat cosTheta = dot( v1, v2 );\n\tfloat theta = acos( cosTheta );\n\tfloat res = cross( v1, v2 ).z * ( ( theta > 0.001 ) ? theta / sin( theta ) : 1.0 );\n\treturn res;\n}\nvoid initRectPoints( const in vec3 pos, const in vec3 halfWidth, const in vec3 halfHeight, out vec3 rectPoints[4] ) {\n\trectPoints[0] = pos - halfWidth - halfHeight;\n\trectPoints[1] = pos + halfWidth - halfHeight;\n\trectPoints[2] = pos + halfWidth + halfHeight;\n\trectPoints[3] = pos - halfWidth + halfHeight;\n}\nvec3 integrateLtcBrdfOverRect( const in GeometricContext geometry, const in mat3 brdfMat, const in vec3 rectPoints[4] ) {\n\tvec3 N = geometry.normal;\n\tvec3 V = geometry.viewDir;\n\tvec3 P = geometry.position;\n\tvec3 T1, T2;\n\tT1 = normalize(V - N * dot( V, N ));\n\tT2 = - cross( N, T1 );\n\tmat3 brdfWrtSurface = brdfMat * transpose( mat3( T1, T2, N ) );\n\tvec3 clippedRect[5];\n\tclippedRect[0] = brdfWrtSurface * ( rectPoints[0] - P );\n\tclippedRect[1] = brdfWrtSurface * ( rectPoints[1] - P );\n\tclippedRect[2] = brdfWrtSurface * ( rectPoints[2] - P );\n\tclippedRect[3] = brdfWrtSurface * ( rectPoints[3] - P );\n\tint n;\n\tclipQuadToHorizon(clippedRect, n);\n\tif ( n == 0 )\n\t\treturn vec3( 0, 0, 0 );\n\tclippedRect[0] = normalize( clippedRect[0] );\n\tclippedRect[1] = normalize( clippedRect[1] );\n\tclippedRect[2] = normalize( clippedRect[2] );\n\tclippedRect[3] = normalize( clippedRect[3] );\n\tclippedRect[4] = normalize( clippedRect[4] );\n\tfloat sum = 0.0;\n\tsum += integrateLtcBrdfOverRectEdge( clippedRect[0], clippedRect[1] );\n\tsum += integrateLtcBrdfOverRectEdge( clippedRect[1], clippedRect[2] );\n\tsum += integrateLtcBrdfOverRectEdge( clippedRect[2], clippedRect[3] );\n\tif (n >= 4)\n\t\tsum += integrateLtcBrdfOverRectEdge( clippedRect[3], clippedRect[4] );\n\tif (n == 5)\n\t\tsum += integrateLtcBrdfOverRectEdge( clippedRect[4], clippedRect[0] );\n\tsum = max( 0.0, sum );\n\tvec3 Lo_i = vec3( sum, sum, sum );\n\treturn Lo_i;\n}\nvec3 Rect_Area_Light_Specular_Reflectance(\n\t\tconst in GeometricContext geometry,\n\t\tconst in vec3 lightPos, const in vec3 lightHalfWidth, const in vec3 lightHalfHeight,\n\t\tconst in float roughness,\n\t\tconst in sampler2D ltcMat, const in sampler2D ltcMag ) {\n\tvec3 rectPoints[4];\n\tinitRectPoints( lightPos, lightHalfWidth, lightHalfHeight, rectPoints );\n\tvec2 uv = ltcTextureCoords( geometry, roughness );\n\tvec4 brdfLtcApproxParams, t;\n\tbrdfLtcApproxParams = texture2D( ltcMat, uv );\n\tt = texture2D( ltcMat, uv );\n\tfloat brdfLtcScalar = texture2D( ltcMag, uv ).a;\n\tmat3 brdfLtcApproxMat = mat3(\n\t\tvec3(   1,   0, t.y ),\n\t\tvec3(   0, t.z,   0 ),\n\t\tvec3( t.w,   0, t.x )\n\t);\n\tvec3 specularReflectance = integrateLtcBrdfOverRect( geometry, brdfLtcApproxMat, rectPoints );\n\tspecularReflectance *= brdfLtcScalar;\n\treturn specularReflectance;\n}\nvec3 Rect_Area_Light_Diffuse_Reflectance(\n\t\tconst in GeometricContext geometry,\n\t\tconst in vec3 lightPos, const in vec3 lightHalfWidth, const in vec3 lightHalfHeight ) {\n\tvec3 rectPoints[4];\n\tinitRectPoints( lightPos, lightHalfWidth, lightHalfHeight, rectPoints );\n\tmat3 diffuseBrdfMat = mat3(1);\n\tvec3 diffuseReflectance = integrateLtcBrdfOverRect( geometry, diffuseBrdfMat, rectPoints );\n\treturn diffuseReflectance;\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n\treturn specularColor * AB.x + AB.y;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n", 
  bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = dFdx( surf_pos );\n\t\tvec3 vSigmaY = dFdy( surf_pos );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif\n", 
  clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; ++ i ) {\n\t\tvec4 plane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t\t\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; ++ i ) {\n\t\t\tvec4 plane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\tif ( clipped ) discard;\n\t\n\t#endif\n#endif\n", 
  clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif\n", clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvarying vec3 vViewPosition;\n#endif\n", clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n", 
  color_fragment:"#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif", color_pars_fragment:"#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif\n", color_pars_vertex:"#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif", color_vertex:"#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif", common:"#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transpose( const in mat3 v ) {\n\tmat3 tmp;\n\ttmp[0] = vec3(v[0].x, v[1].x, v[2].x);\n\ttmp[1] = vec3(v[0].y, v[1].y, v[2].y);\n\ttmp[2] = vec3(v[0].z, v[1].z, v[2].z);\n\treturn tmp;\n}\n", 
  cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\tfloat rcpPowScale = 1.0 / powScale;\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result = mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif\n", 
  defaultnormal_vertex:"#ifdef FLIP_SIDED\n\tobjectNormal = -objectNormal;\n#endif\nvec3 transformedNormal = normalMatrix * objectNormal;\n", displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif\n", displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif\n", emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif\n", 
  emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif\n", encodings_fragment:"  gl_FragColor = linearToOutputTexel( gl_FragColor );\n", encodings_pars_fragment:"\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.xyz * value.w * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\n\tfloat M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM            = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\n\tfloat D      = max( maxRange / maxRGB, 1.0 );\n\tD            = min( floor( D ) / 255.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\n\tXp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract(Le);\n\tvResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\n\treturn vec4( max(vRGB, 0.0), 1.0 );\n}\n", 
  envmap_fragment:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\n\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\tenvColor = envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif\n", 
  envmap_pars_fragment:"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\n\tuniform float reflectivity;\n\tuniform float envMapIntensity;\n#endif\n#ifdef USE_ENVMAP\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\n\t\tvarying vec3 vWorldPosition;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif\n", 
  envmap_pars_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif\n", envmap_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif\n", 
  fog_vertex:"\n#ifdef USE_FOG\nfogDepth = -mvPosition.z;\n#endif", fog_pars_vertex:"#ifdef USE_FOG\n  varying float fogDepth;\n#endif\n", fog_fragment:"#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif\n", fog_pars_fragment:"#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif\n", 
  gradientmap_pars_fragment:"#ifdef TOON\n\tuniform sampler2D gradientMap;\n\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\t\tfloat dotNL = dot( normal, lightDirection );\n\t\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t\t#ifdef USE_GRADIENTMAP\n\t\t\treturn texture2D( gradientMap, coord ).rgb;\n\t\t#else\n\t\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t\t#endif\n\t}\n#endif\n", lightmap_fragment:"#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif\n", 
  lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif", lights_lambert_vertex:"vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif\n", 
  lights_pars:"uniform vec3 ambientLightColor;\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltcMat;\tuniform sampler2D ltcMag;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = saturate( reflectVec.y * 0.5 + 0.5 );\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif\n", 
  lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;\n", lights_phong_pars_fragment:"varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_BlinnPhong( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 matDiffColor = material.diffuseColor;\n\t\tvec3 matSpecColor = material.specularColor;\n\t\tvec3 lightColor   = rectAreaLight.color;\n\t\tfloat roughness = BlinnExponentToGGXRoughness( material.specularShininess );\n\t\tvec3 spec = Rect_Area_Light_Specular_Reflectance(\n\t\t\t\tgeometry,\n\t\t\t\trectAreaLight.position, rectAreaLight.halfWidth, rectAreaLight.halfHeight,\n\t\t\t\troughness,\n\t\t\t\tltcMat, ltcMag );\n\t\tvec3 diff = Rect_Area_Light_Diffuse_Reflectance(\n\t\t\t\tgeometry,\n\t\t\t\trectAreaLight.position, rectAreaLight.halfWidth, rectAreaLight.halfHeight );\n\t\treflectedLight.directSpecular += lightColor * matSpecColor * spec / PI2;\n\t\treflectedLight.directDiffuse  += lightColor * matDiffColor * diff / PI2;\n\t}\n#endif\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifdef TOON\n\t\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#else\n\t\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\t\tvec3 irradiance = dotNL * directLight.color;\n\t#endif\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)\n", 
  lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef STANDARD\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.clearCoat = saturate( clearCoat );\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\n#endif\n", 
  lights_physical_pars_fragment:"struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n\t#ifndef STANDARD\n\t\tfloat clearCoat;\n\t\tfloat clearCoatRoughness;\n\t#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 matDiffColor = material.diffuseColor;\n\t\tvec3 matSpecColor = material.specularColor;\n\t\tvec3 lightColor   = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 spec = Rect_Area_Light_Specular_Reflectance(\n\t\t\t\tgeometry,\n\t\t\t\trectAreaLight.position, rectAreaLight.halfWidth, rectAreaLight.halfHeight,\n\t\t\t\troughness,\n\t\t\t\tltcMat, ltcMag );\n\t\tvec3 diff = Rect_Area_Light_Diffuse_Reflectance(\n\t\t\t\tgeometry,\n\t\t\t\trectAreaLight.position, rectAreaLight.halfWidth, rectAreaLight.halfHeight );\n\t\treflectedLight.directSpecular += lightColor * matSpecColor * spec;\n\t\treflectedLight.directDiffuse  += lightColor * matDiffColor * diff;\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifndef STANDARD\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t#ifndef STANDARD\n\t\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifndef STANDARD\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\tfloat dotNL = dotNV;\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n\t#ifndef STANDARD\n\t\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}\n", 
  lights_template:"\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\n\t#endif\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\n\t#ifndef STANDARD\n\t\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\n\t#else\n\t\tvec3 clearCoatRadiance = vec3( 0.0 );\n\t#endif\n\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\n#endif\n", 
  logdepthbuf_fragment:"#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\n\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\n#endif", logdepthbuf_pars_fragment:"#ifdef USE_LOGDEPTHBUF\n\tuniform float logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n#endif\n", logdepthbuf_pars_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n\tuniform float logDepthBufFC;\n#endif", logdepthbuf_vertex:"#ifdef USE_LOGDEPTHBUF\n\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t#else\n\t\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\n\t#endif\n#endif\n", 
  map_fragment:"#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif\n", map_pars_fragment:"#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n", map_particle_fragment:"#ifdef USE_MAP\n\tvec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n", map_particle_pars_fragment:"#ifdef USE_MAP\n\tuniform vec4 offsetRepeat;\n\tuniform sampler2D map;\n#endif\n", 
  metalnessmap_fragment:"float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif\n", metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif", morphnormal_vertex:"#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif\n", 
  morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif", morphtarget_vertex:"#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif\n", 
  normal_flip:"#ifdef DOUBLE_SIDED\n\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n#else\n\tfloat flipNormal = 1.0;\n#endif\n", normal_fragment:"#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal ) * flipNormal;\n#endif\n#ifdef USE_NORMALMAP\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n", 
  normalmap_pars_fragment:"#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\n\t\tvec3 N = normalize( surf_norm );\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy = normalScale * mapN.xy;\n\t\tmat3 tsn = mat3( S, T, N );\n\t\treturn normalize( tsn * mapN );\n\t}\n#endif\n", 
  packing:"vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 1.0 - 2.0 * rgb.xyz;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}\n", 
  premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif\n", project_vertex:"#ifdef USE_SKINNING\n\tvec4 mvPosition = modelViewMatrix * skinned;\n#else\n\tvec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\n#endif\ngl_Position = projectionMatrix * mvPosition;\n", roughnessmap_fragment:"float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif\n", 
  roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif", shadowmap_pars_fragment:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\treturn (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn 1.0;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\tfloat dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif\n", 
  shadowmap_pars_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n#endif\n", 
  shadowmap_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif\n", 
  shadowmask_pars_fragment:"float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tDirectionalLight directionalLight;\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tSpotLight spotLight;\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tPointLight pointLight;\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}\n", 
  skinbase_vertex:"#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif", skinning_pars_vertex:"#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif\n", 
  skinning_vertex:"#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\tskinned  = bindMatrixInverse * skinned;\n#endif\n", skinnormal_vertex:"#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n#endif\n", 
  specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif", specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif", tonemapping_fragment:"#if defined( TONE_MAPPING )\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif\n", tonemapping_pars_fragment:"#define saturate(a) clamp( a, 0.0, 1.0 )\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\n", 
  uv_pars_fragment:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n#endif", uv_pars_vertex:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n\tuniform vec4 offsetRepeat;\n#endif\n", 
  uv_vertex:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n#endif", uv2_pars_fragment:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif", uv2_pars_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif", 
  uv2_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif", worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( PHYSICAL ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\n\t#ifdef USE_SKINNING\n\t\tvec4 worldPosition = modelMatrix * skinned;\n\t#else\n\t\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n\t#endif\n#endif\n", cube_frag:"uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\n\tgl_FragColor.a *= opacity;\n}\n", 
  cube_vert:"varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}\n", depth_frag:"#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}\n", 
  depth_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#include <begin_vertex>\n\t#include <displacementmap_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}\n", 
  distanceRGBA_frag:"uniform vec3 lightPos;\nvarying vec4 vWorldPosition;\n#include <common>\n#include <packing>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tgl_FragColor = packDepthToRGBA( length( vWorldPosition.xyz - lightPos.xyz ) / 1000.0 );\n}\n", distanceRGBA_vert:"varying vec4 vWorldPosition;\n#include <common>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <skinbase_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition;\n}\n", 
  equirect_frag:"uniform sampler2D tEquirect;\nuniform float tFlip;\nvarying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldPosition );\n\tvec2 sampleUV;\n\tsampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n}\n", equirect_vert:"varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}\n", 
  linedashed_frag:"uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n", 
  linedashed_vert:"uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}\n", 
  meshbasic_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <normal_flip>\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n", 
  meshbasic_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}\n", 
  meshlambert_frag:"uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <normal_flip>\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n", 
  meshlambert_vert:"#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n", 
  meshphong_frag:"#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_flip>\n\t#include <normal_fragment>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_template>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n", 
  meshphong_vert:"#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <displacementmap_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n", 
  meshphysical_frag:"#define PHYSICAL\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifndef STANDARD\n\tuniform float clearCoat;\n\tuniform float clearCoatRoughness;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <lights_pars>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_flip>\n\t#include <normal_fragment>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_template>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n", 
  meshphysical_vert:"#define PHYSICAL\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <displacementmap_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n", 
  normal_frag:"#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\t#include <normal_flip>\n\t#include <normal_fragment>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}\n", 
  normal_vert:"#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <displacementmap_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}\n", 
  points_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n", 
  points_vert:"uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#ifdef USE_SIZEATTENUATION\n\t\tgl_PointSize = size * ( scale / - mvPosition.z );\n\t#else\n\t\tgl_PointSize = size;\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n", 
  shadow_frag:"uniform float opacity;\n#include <common>\n#include <packing>\n#include <bsdfs>\n#include <lights_pars>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( 0.0, 0.0, 0.0, opacity * ( 1.0 - getShadowMask() ) );\n}\n", shadow_vert:"#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n}\n"}, xb = {basic:{uniforms:Ta.merge([la.common, 
  la.aomap, la.lightmap, la.fog]), vertexShader:ha.meshbasic_vert, fragmentShader:ha.meshbasic_frag}, lambert:{uniforms:Ta.merge([la.common, la.aomap, la.lightmap, la.emissivemap, la.fog, la.lights, {emissive:{value:new Z(0)}}]), vertexShader:ha.meshlambert_vert, fragmentShader:ha.meshlambert_frag}, phong:{uniforms:Ta.merge([la.common, la.aomap, la.lightmap, la.emissivemap, la.bumpmap, la.normalmap, la.displacementmap, la.gradientmap, la.fog, la.lights, {emissive:{value:new Z(0)}, specular:{value:new Z(1118481)}, 
  shininess:{value:30}}]), vertexShader:ha.meshphong_vert, fragmentShader:ha.meshphong_frag}, standard:{uniforms:Ta.merge([la.common, la.aomap, la.lightmap, la.emissivemap, la.bumpmap, la.normalmap, la.displacementmap, la.roughnessmap, la.metalnessmap, la.fog, la.lights, {emissive:{value:new Z(0)}, roughness:{value:.5}, metalness:{value:0}, envMapIntensity:{value:1}}]), vertexShader:ha.meshphysical_vert, fragmentShader:ha.meshphysical_frag}, points:{uniforms:Ta.merge([la.points, la.fog]), vertexShader:ha.points_vert, 
  fragmentShader:ha.points_frag}, dashed:{uniforms:Ta.merge([la.common, la.fog, {scale:{value:1}, dashSize:{value:1}, totalSize:{value:2}}]), vertexShader:ha.linedashed_vert, fragmentShader:ha.linedashed_frag}, depth:{uniforms:Ta.merge([la.common, la.displacementmap]), vertexShader:ha.depth_vert, fragmentShader:ha.depth_frag}, normal:{uniforms:Ta.merge([la.common, la.bumpmap, la.normalmap, la.displacementmap, {opacity:{value:1}}]), vertexShader:ha.normal_vert, fragmentShader:ha.normal_frag}, cube:{uniforms:{tCube:{value:null}, 
  tFlip:{value:-1}, opacity:{value:1}}, vertexShader:ha.cube_vert, fragmentShader:ha.cube_frag}, equirect:{uniforms:{tEquirect:{value:null}, tFlip:{value:-1}}, vertexShader:ha.equirect_vert, fragmentShader:ha.equirect_frag}, distanceRGBA:{uniforms:{lightPos:{value:new f}}, vertexShader:ha.distanceRGBA_vert, fragmentShader:ha.distanceRGBA_frag}};
  xb.physical = {uniforms:Ta.merge([xb.standard.uniforms, {clearCoat:{value:0}, clearCoatRoughness:{value:0}}]), vertexShader:ha.meshphysical_vert, fragmentShader:ha.meshphysical_frag};
  Object.assign(ra.prototype, {set:function(d, a) {
    this.min.copy(d);
    this.max.copy(a);
    return this;
  }, setFromPoints:function(d) {
    this.makeEmpty();
    for (var a = 0, b = d.length;a < b;a++) {
      this.expandByPoint(d[a]);
    }
    return this;
  }, setFromCenterAndSize:function() {
    var d = new l;
    return function(a, b) {
      b = d.copy(b).multiplyScalar(.5);
      this.min.copy(a).sub(b);
      this.max.copy(a).add(b);
      return this;
    };
  }(), clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(d) {
    this.min.copy(d.min);
    this.max.copy(d.max);
    return this;
  }, makeEmpty:function() {
    this.min.x = this.min.y = Infinity;
    this.max.x = this.max.y = -Infinity;
    return this;
  }, isEmpty:function() {
    return this.max.x < this.min.x || this.max.y < this.min.y;
  }, getCenter:function(d) {
    d = d || new l;
    return this.isEmpty() ? d.set(0, 0) : d.addVectors(this.min, this.max).multiplyScalar(.5);
  }, getSize:function(d) {
    d = d || new l;
    return this.isEmpty() ? d.set(0, 0) : d.subVectors(this.max, this.min);
  }, expandByPoint:function(d) {
    this.min.min(d);
    this.max.max(d);
    return this;
  }, expandByVector:function(d) {
    this.min.sub(d);
    this.max.add(d);
    return this;
  }, expandByScalar:function(d) {
    this.min.addScalar(-d);
    this.max.addScalar(d);
    return this;
  }, containsPoint:function(d) {
    return d.x < this.min.x || d.x > this.max.x || d.y < this.min.y || d.y > this.max.y ? !1 : !0;
  }, containsBox:function(d) {
    return this.min.x <= d.min.x && d.max.x <= this.max.x && this.min.y <= d.min.y && d.max.y <= this.max.y;
  }, getParameter:function(d, a) {
    return (a || new l).set((d.x - this.min.x) / (this.max.x - this.min.x), (d.y - this.min.y) / (this.max.y - this.min.y));
  }, intersectsBox:function(d) {
    return d.max.x < this.min.x || d.min.x > this.max.x || d.max.y < this.min.y || d.min.y > this.max.y ? !1 : !0;
  }, clampPoint:function(d, a) {
    return (a || new l).copy(d).clamp(this.min, this.max);
  }, distanceToPoint:function() {
    var d = new l;
    return function(a) {
      return d.copy(a).clamp(this.min, this.max).sub(a).length();
    };
  }(), intersect:function(d) {
    this.min.max(d.min);
    this.max.min(d.max);
    return this;
  }, union:function(d) {
    this.min.min(d.min);
    this.max.max(d.max);
    return this;
  }, translate:function(d) {
    this.min.add(d);
    this.max.add(d);
    return this;
  }, equals:function(d) {
    return d.min.equals(this.min) && d.max.equals(this.max);
  }});
  var ef = 0;
  Object.assign(X.prototype, h.prototype, {isMaterial:!0, setValues:function(d) {
    if (void 0 !== d) {
      for (var a in d) {
        var b = d[a];
        if (void 0 === b) {
          console.warn("THREE.Material: '" + a + "' parameter is undefined.");
        } else {
          var c = this[a];
          void 0 === c ? console.warn("THREE." + this.type + ": '" + a + "' is not a property of this material.") : c && c.isColor ? c.set(b) : c && c.isVector3 && b && b.isVector3 ? c.copy(b) : this[a] = "overdraw" === a ? Number(b) : b;
        }
      }
    }
  }, toJSON:function(d) {
    function a(d) {
      var a = [], n;
      for (n in d) {
        var b = d[n];
        delete b.metadata;
        a.push(b);
      }
      return a;
    }
    var b = void 0 === d;
    b && (d = {textures:{}, images:{}});
    var c = {metadata:{version:4.4, type:"Material", generator:"Material.toJSON"}};
    c.uuid = this.uuid;
    c.type = this.type;
    "" !== this.name && (c.name = this.name);
    this.color && this.color.isColor && (c.color = this.color.getHex());
    void 0 !== this.roughness && (c.roughness = this.roughness);
    void 0 !== this.metalness && (c.metalness = this.metalness);
    this.emissive && this.emissive.isColor && (c.emissive = this.emissive.getHex());
    this.specular && this.specular.isColor && (c.specular = this.specular.getHex());
    void 0 !== this.shininess && (c.shininess = this.shininess);
    void 0 !== this.clearCoat && (c.clearCoat = this.clearCoat);
    void 0 !== this.clearCoatRoughness && (c.clearCoatRoughness = this.clearCoatRoughness);
    this.map && this.map.isTexture && (c.map = this.map.toJSON(d).uuid);
    this.alphaMap && this.alphaMap.isTexture && (c.alphaMap = this.alphaMap.toJSON(d).uuid);
    this.lightMap && this.lightMap.isTexture && (c.lightMap = this.lightMap.toJSON(d).uuid);
    this.bumpMap && this.bumpMap.isTexture && (c.bumpMap = this.bumpMap.toJSON(d).uuid, c.bumpScale = this.bumpScale);
    this.normalMap && this.normalMap.isTexture && (c.normalMap = this.normalMap.toJSON(d).uuid, c.normalScale = this.normalScale.toArray());
    this.displacementMap && this.displacementMap.isTexture && (c.displacementMap = this.displacementMap.toJSON(d).uuid, c.displacementScale = this.displacementScale, c.displacementBias = this.displacementBias);
    this.roughnessMap && this.roughnessMap.isTexture && (c.roughnessMap = this.roughnessMap.toJSON(d).uuid);
    this.metalnessMap && this.metalnessMap.isTexture && (c.metalnessMap = this.metalnessMap.toJSON(d).uuid);
    this.emissiveMap && this.emissiveMap.isTexture && (c.emissiveMap = this.emissiveMap.toJSON(d).uuid);
    this.specularMap && this.specularMap.isTexture && (c.specularMap = this.specularMap.toJSON(d).uuid);
    this.envMap && this.envMap.isTexture && (c.envMap = this.envMap.toJSON(d).uuid, c.reflectivity = this.reflectivity);
    this.gradientMap && this.gradientMap.isTexture && (c.gradientMap = this.gradientMap.toJSON(d).uuid);
    void 0 !== this.size && (c.size = this.size);
    void 0 !== this.sizeAttenuation && (c.sizeAttenuation = this.sizeAttenuation);
    1 !== this.blending && (c.blending = this.blending);
    2 !== this.shading && (c.shading = this.shading);
    0 !== this.side && (c.side = this.side);
    0 !== this.vertexColors && (c.vertexColors = this.vertexColors);
    1 > this.opacity && (c.opacity = this.opacity);
    !0 === this.transparent && (c.transparent = this.transparent);
    c.depthFunc = this.depthFunc;
    c.depthTest = this.depthTest;
    c.depthWrite = this.depthWrite;
    0 < this.alphaTest && (c.alphaTest = this.alphaTest);
    !0 === this.premultipliedAlpha && (c.premultipliedAlpha = this.premultipliedAlpha);
    !0 === this.wireframe && (c.wireframe = this.wireframe);
    1 < this.wireframeLinewidth && (c.wireframeLinewidth = this.wireframeLinewidth);
    "round" !== this.wireframeLinecap && (c.wireframeLinecap = this.wireframeLinecap);
    "round" !== this.wireframeLinejoin && (c.wireframeLinejoin = this.wireframeLinejoin);
    c.skinning = this.skinning;
    c.morphTargets = this.morphTargets;
    b && (b = a(d.textures), d = a(d.images), 0 < b.length && (c.textures = b), 0 < d.length && (c.images = d));
    return c;
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(d) {
    this.name = d.name;
    this.fog = d.fog;
    this.lights = d.lights;
    this.blending = d.blending;
    this.side = d.side;
    this.shading = d.shading;
    this.vertexColors = d.vertexColors;
    this.opacity = d.opacity;
    this.transparent = d.transparent;
    this.blendSrc = d.blendSrc;
    this.blendDst = d.blendDst;
    this.blendEquation = d.blendEquation;
    this.blendSrcAlpha = d.blendSrcAlpha;
    this.blendDstAlpha = d.blendDstAlpha;
    this.blendEquationAlpha = d.blendEquationAlpha;
    this.depthFunc = d.depthFunc;
    this.depthTest = d.depthTest;
    this.depthWrite = d.depthWrite;
    this.colorWrite = d.colorWrite;
    this.precision = d.precision;
    this.polygonOffset = d.polygonOffset;
    this.polygonOffsetFactor = d.polygonOffsetFactor;
    this.polygonOffsetUnits = d.polygonOffsetUnits;
    this.alphaTest = d.alphaTest;
    this.premultipliedAlpha = d.premultipliedAlpha;
    this.overdraw = d.overdraw;
    this.visible = d.visible;
    this.clipShadows = d.clipShadows;
    this.clipIntersection = d.clipIntersection;
    d = d.clippingPlanes;
    var a = null;
    if (null !== d) {
      for (var b = d.length, a = Array(b), c = 0;c !== b;++c) {
        a[c] = d[c].clone();
      }
    }
    this.clippingPlanes = a;
    return this;
  }, dispose:function() {
    this.dispatchEvent({type:"dispose"});
  }});
  ta.prototype = Object.create(X.prototype);
  ta.prototype.constructor = ta;
  ta.prototype.isShaderMaterial = !0;
  ta.prototype.copy = function(d) {
    X.prototype.copy.call(this, d);
    this.fragmentShader = d.fragmentShader;
    this.vertexShader = d.vertexShader;
    this.uniforms = Ta.clone(d.uniforms);
    this.defines = d.defines;
    this.wireframe = d.wireframe;
    this.wireframeLinewidth = d.wireframeLinewidth;
    this.lights = d.lights;
    this.clipping = d.clipping;
    this.skinning = d.skinning;
    this.morphTargets = d.morphTargets;
    this.morphNormals = d.morphNormals;
    this.extensions = d.extensions;
    return this;
  };
  ta.prototype.toJSON = function(d) {
    d = X.prototype.toJSON.call(this, d);
    d.uniforms = this.uniforms;
    d.vertexShader = this.vertexShader;
    d.fragmentShader = this.fragmentShader;
    return d;
  };
  Ba.prototype = Object.create(X.prototype);
  Ba.prototype.constructor = Ba;
  Ba.prototype.isMeshDepthMaterial = !0;
  Ba.prototype.copy = function(d) {
    X.prototype.copy.call(this, d);
    this.depthPacking = d.depthPacking;
    this.skinning = d.skinning;
    this.morphTargets = d.morphTargets;
    this.map = d.map;
    this.alphaMap = d.alphaMap;
    this.displacementMap = d.displacementMap;
    this.displacementScale = d.displacementScale;
    this.displacementBias = d.displacementBias;
    this.wireframe = d.wireframe;
    this.wireframeLinewidth = d.wireframeLinewidth;
    return this;
  };
  Object.assign(Aa.prototype, {isBox3:!0, set:function(d, a) {
    this.min.copy(d);
    this.max.copy(a);
    return this;
  }, setFromArray:function(d) {
    for (var a = Infinity, b = Infinity, c = Infinity, f = -Infinity, e = -Infinity, m = -Infinity, g = 0, k = d.length;g < k;g += 3) {
      var q = d[g], p = d[g + 1], h = d[g + 2];
      q < a && (a = q);
      p < b && (b = p);
      h < c && (c = h);
      q > f && (f = q);
      p > e && (e = p);
      h > m && (m = h);
    }
    this.min.set(a, b, c);
    this.max.set(f, e, m);
    return this;
  }, setFromBufferAttribute:function(d) {
    for (var a = Infinity, b = Infinity, c = Infinity, f = -Infinity, e = -Infinity, m = -Infinity, g = 0, k = d.count;g < k;g++) {
      var q = d.getX(g), p = d.getY(g), h = d.getZ(g);
      q < a && (a = q);
      p < b && (b = p);
      h < c && (c = h);
      q > f && (f = q);
      p > e && (e = p);
      h > m && (m = h);
    }
    this.min.set(a, b, c);
    this.max.set(f, e, m);
    return this;
  }, setFromPoints:function(d) {
    this.makeEmpty();
    for (var a = 0, b = d.length;a < b;a++) {
      this.expandByPoint(d[a]);
    }
    return this;
  }, setFromCenterAndSize:function() {
    var d = new f;
    return function(a, b) {
      b = d.copy(b).multiplyScalar(.5);
      this.min.copy(a).sub(b);
      this.max.copy(a).add(b);
      return this;
    };
  }(), setFromObject:function(d) {
    this.makeEmpty();
    return this.expandByObject(d);
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(d) {
    this.min.copy(d.min);
    this.max.copy(d.max);
    return this;
  }, makeEmpty:function() {
    this.min.x = this.min.y = this.min.z = Infinity;
    this.max.x = this.max.y = this.max.z = -Infinity;
    return this;
  }, isEmpty:function() {
    return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
  }, getCenter:function(d) {
    d = d || new f;
    return this.isEmpty() ? d.set(0, 0, 0) : d.addVectors(this.min, this.max).multiplyScalar(.5);
  }, getSize:function(d) {
    d = d || new f;
    return this.isEmpty() ? d.set(0, 0, 0) : d.subVectors(this.max, this.min);
  }, expandByPoint:function(d) {
    this.min.min(d);
    this.max.max(d);
    return this;
  }, expandByVector:function(d) {
    this.min.sub(d);
    this.max.add(d);
    return this;
  }, expandByScalar:function(d) {
    this.min.addScalar(-d);
    this.max.addScalar(d);
    return this;
  }, expandByObject:function() {
    var d = new f;
    return function(a) {
      var n = this;
      a.updateMatrixWorld(!0);
      a.traverse(function(a) {
        var b, c;
        b = a.geometry;
        if (void 0 !== b) {
          if (b.isGeometry) {
            var f = b.vertices;
            b = 0;
            for (c = f.length;b < c;b++) {
              d.copy(f[b]), d.applyMatrix4(a.matrixWorld), n.expandByPoint(d);
            }
          } else {
            if (b.isBufferGeometry && (f = b.attributes.position, void 0 !== f)) {
              for (b = 0, c = f.count;b < c;b++) {
                d.fromBufferAttribute(f, b).applyMatrix4(a.matrixWorld), n.expandByPoint(d);
              }
            }
          }
        }
      });
      return this;
    };
  }(), containsPoint:function(d) {
    return d.x < this.min.x || d.x > this.max.x || d.y < this.min.y || d.y > this.max.y || d.z < this.min.z || d.z > this.max.z ? !1 : !0;
  }, containsBox:function(d) {
    return this.min.x <= d.min.x && d.max.x <= this.max.x && this.min.y <= d.min.y && d.max.y <= this.max.y && this.min.z <= d.min.z && d.max.z <= this.max.z;
  }, getParameter:function(d, a) {
    return (a || new f).set((d.x - this.min.x) / (this.max.x - this.min.x), (d.y - this.min.y) / (this.max.y - this.min.y), (d.z - this.min.z) / (this.max.z - this.min.z));
  }, intersectsBox:function(d) {
    return d.max.x < this.min.x || d.min.x > this.max.x || d.max.y < this.min.y || d.min.y > this.max.y || d.max.z < this.min.z || d.min.z > this.max.z ? !1 : !0;
  }, intersectsSphere:function() {
    var d = new f;
    return function(a) {
      this.clampPoint(a.center, d);
      return d.distanceToSquared(a.center) <= a.radius * a.radius;
    };
  }(), intersectsPlane:function(d) {
    var a, b;
    0 < d.normal.x ? (a = d.normal.x * this.min.x, b = d.normal.x * this.max.x) : (a = d.normal.x * this.max.x, b = d.normal.x * this.min.x);
    0 < d.normal.y ? (a += d.normal.y * this.min.y, b += d.normal.y * this.max.y) : (a += d.normal.y * this.max.y, b += d.normal.y * this.min.y);
    0 < d.normal.z ? (a += d.normal.z * this.min.z, b += d.normal.z * this.max.z) : (a += d.normal.z * this.max.z, b += d.normal.z * this.min.z);
    return a <= d.constant && b >= d.constant;
  }, clampPoint:function(d, a) {
    return (a || new f).copy(d).clamp(this.min, this.max);
  }, distanceToPoint:function() {
    var d = new f;
    return function(a) {
      return d.copy(a).clamp(this.min, this.max).sub(a).length();
    };
  }(), getBoundingSphere:function() {
    var d = new f;
    return function(a) {
      a = a || new Ca;
      this.getCenter(a.center);
      a.radius = .5 * this.getSize(d).length();
      return a;
    };
  }(), intersect:function(d) {
    this.min.max(d.min);
    this.max.min(d.max);
    this.isEmpty() && this.makeEmpty();
    return this;
  }, union:function(d) {
    this.min.min(d.min);
    this.max.max(d.max);
    return this;
  }, applyMatrix4:function() {
    var d = [new f, new f, new f, new f, new f, new f, new f, new f];
    return function(a) {
      if (this.isEmpty()) {
        return this;
      }
      d[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(a);
      d[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(a);
      d[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(a);
      d[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(a);
      d[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(a);
      d[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(a);
      d[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(a);
      d[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(a);
      this.setFromPoints(d);
      return this;
    };
  }(), translate:function(d) {
    this.min.add(d);
    this.max.add(d);
    return this;
  }, equals:function(d) {
    return d.min.equals(this.min) && d.max.equals(this.max);
  }});
  Object.assign(Ca.prototype, {set:function(d, a) {
    this.center.copy(d);
    this.radius = a;
    return this;
  }, setFromPoints:function() {
    var d = new Aa;
    return function(a, b) {
      var n = this.center;
      void 0 !== b ? n.copy(b) : d.setFromPoints(a).getCenter(n);
      for (var c = b = 0, f = a.length;c < f;c++) {
        b = Math.max(b, n.distanceToSquared(a[c]));
      }
      this.radius = Math.sqrt(b);
      return this;
    };
  }(), clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(d) {
    this.center.copy(d.center);
    this.radius = d.radius;
    return this;
  }, empty:function() {
    return 0 >= this.radius;
  }, containsPoint:function(d) {
    return d.distanceToSquared(this.center) <= this.radius * this.radius;
  }, distanceToPoint:function(d) {
    return d.distanceTo(this.center) - this.radius;
  }, intersectsSphere:function(d) {
    var a = this.radius + d.radius;
    return d.center.distanceToSquared(this.center) <= a * a;
  }, intersectsBox:function(d) {
    return d.intersectsSphere(this);
  }, intersectsPlane:function(d) {
    return Math.abs(this.center.dot(d.normal) - d.constant) <= this.radius;
  }, clampPoint:function(d, a) {
    var b = this.center.distanceToSquared(d);
    a = a || new f;
    a.copy(d);
    b > this.radius * this.radius && (a.sub(this.center).normalize(), a.multiplyScalar(this.radius).add(this.center));
    return a;
  }, getBoundingBox:function(d) {
    d = d || new Aa;
    d.set(this.center, this.center);
    d.expandByScalar(this.radius);
    return d;
  }, applyMatrix4:function(d) {
    this.center.applyMatrix4(d);
    this.radius *= d.getMaxScaleOnAxis();
    return this;
  }, translate:function(d) {
    this.center.add(d);
    return this;
  }, equals:function(d) {
    return d.center.equals(this.center) && d.radius === this.radius;
  }});
  Object.assign(sa.prototype, {isMatrix3:!0, set:function(d, a, b, c, f, e, m, g, k) {
    var n = this.elements;
    n[0] = d;
    n[1] = c;
    n[2] = m;
    n[3] = a;
    n[4] = f;
    n[5] = g;
    n[6] = b;
    n[7] = e;
    n[8] = k;
    return this;
  }, identity:function() {
    this.set(1, 0, 0, 0, 1, 0, 0, 0, 1);
    return this;
  }, clone:function() {
    return (new this.constructor).fromArray(this.elements);
  }, copy:function(d) {
    var a = this.elements;
    d = d.elements;
    a[0] = d[0];
    a[1] = d[1];
    a[2] = d[2];
    a[3] = d[3];
    a[4] = d[4];
    a[5] = d[5];
    a[6] = d[6];
    a[7] = d[7];
    a[8] = d[8];
    return this;
  }, setFromMatrix4:function(d) {
    d = d.elements;
    this.set(d[0], d[4], d[8], d[1], d[5], d[9], d[2], d[6], d[10]);
    return this;
  }, applyToBufferAttribute:function() {
    var d = new f;
    return function(a) {
      for (var b = 0, n = a.count;b < n;b++) {
        d.x = a.getX(b), d.y = a.getY(b), d.z = a.getZ(b), d.applyMatrix3(this), a.setXYZ(b, d.x, d.y, d.z);
      }
      return a;
    };
  }(), multiplyScalar:function(d) {
    var a = this.elements;
    a[0] *= d;
    a[3] *= d;
    a[6] *= d;
    a[1] *= d;
    a[4] *= d;
    a[7] *= d;
    a[2] *= d;
    a[5] *= d;
    a[8] *= d;
    return this;
  }, determinant:function() {
    var d = this.elements, a = d[0], b = d[1], c = d[2], f = d[3], e = d[4], m = d[5], g = d[6], k = d[7], d = d[8];
    return a * e * d - a * m * k - b * f * d + b * m * g + c * f * k - c * e * g;
  }, getInverse:function(d, a) {
    d && d.isMatrix4 && console.error("THREE.Matrix3.getInverse no longer takes a Matrix4 argument.");
    d = d.elements;
    var b = this.elements, n = d[0], c = d[1], f = d[2], e = d[3], m = d[4], g = d[5], k = d[6], q = d[7];
    d = d[8];
    var p = d * m - g * q, h = g * k - d * e, r = q * e - m * k, t = n * p + c * h + f * r;
    if (0 === t) {
      if (!0 === a) {
        throw Error("THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0");
      }
      console.warn("THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0");
      return this.identity();
    }
    t = 1 / t;
    b[0] = p * t;
    b[1] = (f * q - d * c) * t;
    b[2] = (g * c - f * m) * t;
    b[3] = h * t;
    b[4] = (d * n - f * k) * t;
    b[5] = (f * e - g * n) * t;
    b[6] = r * t;
    b[7] = (c * k - q * n) * t;
    b[8] = (m * n - c * e) * t;
    return this;
  }, transpose:function() {
    var d, a = this.elements;
    d = a[1];
    a[1] = a[3];
    a[3] = d;
    d = a[2];
    a[2] = a[6];
    a[6] = d;
    d = a[5];
    a[5] = a[7];
    a[7] = d;
    return this;
  }, getNormalMatrix:function(d) {
    return this.setFromMatrix4(d).getInverse(this).transpose();
  }, transposeIntoArray:function(d) {
    var a = this.elements;
    d[0] = a[0];
    d[1] = a[3];
    d[2] = a[6];
    d[3] = a[1];
    d[4] = a[4];
    d[5] = a[7];
    d[6] = a[2];
    d[7] = a[5];
    d[8] = a[8];
    return this;
  }, fromArray:function(d, a) {
    void 0 === a && (a = 0);
    for (var b = 0;9 > b;b++) {
      this.elements[b] = d[b + a];
    }
    return this;
  }, toArray:function(d, a) {
    void 0 === d && (d = []);
    void 0 === a && (a = 0);
    var b = this.elements;
    d[a] = b[0];
    d[a + 1] = b[1];
    d[a + 2] = b[2];
    d[a + 3] = b[3];
    d[a + 4] = b[4];
    d[a + 5] = b[5];
    d[a + 6] = b[6];
    d[a + 7] = b[7];
    d[a + 8] = b[8];
    return d;
  }});
  Object.assign(ua.prototype, {set:function(d, a) {
    this.normal.copy(d);
    this.constant = a;
    return this;
  }, setComponents:function(d, a, b, c) {
    this.normal.set(d, a, b);
    this.constant = c;
    return this;
  }, setFromNormalAndCoplanarPoint:function(d, a) {
    this.normal.copy(d);
    this.constant = -a.dot(this.normal);
    return this;
  }, setFromCoplanarPoints:function() {
    var d = new f, a = new f;
    return function(b, n, c) {
      n = d.subVectors(c, n).cross(a.subVectors(b, n)).normalize();
      this.setFromNormalAndCoplanarPoint(n, b);
      return this;
    };
  }(), clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(d) {
    this.normal.copy(d.normal);
    this.constant = d.constant;
    return this;
  }, normalize:function() {
    var d = 1 / this.normal.length();
    this.normal.multiplyScalar(d);
    this.constant *= d;
    return this;
  }, negate:function() {
    this.constant *= -1;
    this.normal.negate();
    return this;
  }, distanceToPoint:function(d) {
    return this.normal.dot(d) + this.constant;
  }, distanceToSphere:function(d) {
    return this.distanceToPoint(d.center) - d.radius;
  }, projectPoint:function(d, a) {
    return this.orthoPoint(d, a).sub(d).negate();
  }, orthoPoint:function(d, a) {
    d = this.distanceToPoint(d);
    return (a || new f).copy(this.normal).multiplyScalar(d);
  }, intersectLine:function() {
    var d = new f;
    return function(a, b) {
      b = b || new f;
      var n = a.delta(d), c = this.normal.dot(n);
      if (0 === c) {
        if (0 === this.distanceToPoint(a.start)) {
          return b.copy(a.start);
        }
      } else {
        return c = -(a.start.dot(this.normal) + this.constant) / c, 0 > c || 1 < c ? void 0 : b.copy(n).multiplyScalar(c).add(a.start);
      }
    };
  }(), intersectsLine:function(d) {
    var a = this.distanceToPoint(d.start);
    d = this.distanceToPoint(d.end);
    return 0 > a && 0 < d || 0 > d && 0 < a;
  }, intersectsBox:function(d) {
    return d.intersectsPlane(this);
  }, intersectsSphere:function(d) {
    return d.intersectsPlane(this);
  }, coplanarPoint:function(d) {
    return (d || new f).copy(this.normal).multiplyScalar(-this.constant);
  }, applyMatrix4:function() {
    var d = new f, a = new sa;
    return function(b, n) {
      var c = this.coplanarPoint(d).applyMatrix4(b);
      b = n || a.getNormalMatrix(b);
      b = this.normal.applyMatrix3(b).normalize();
      this.constant = -c.dot(b);
      return this;
    };
  }(), translate:function(d) {
    this.constant -= d.dot(this.normal);
    return this;
  }, equals:function(d) {
    return d.normal.equals(this.normal) && d.constant === this.constant;
  }});
  Object.assign(Va.prototype, {set:function(d, a, b, c, f, e) {
    var n = this.planes;
    n[0].copy(d);
    n[1].copy(a);
    n[2].copy(b);
    n[3].copy(c);
    n[4].copy(f);
    n[5].copy(e);
    return this;
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(d) {
    for (var a = this.planes, b = 0;6 > b;b++) {
      a[b].copy(d.planes[b]);
    }
    return this;
  }, setFromMatrix:function(d) {
    var a = this.planes, b = d.elements;
    d = b[0];
    var c = b[1], f = b[2], e = b[3], m = b[4], g = b[5], k = b[6], q = b[7], p = b[8], h = b[9], r = b[10], t = b[11], l = b[12], w = b[13], u = b[14], b = b[15];
    a[0].setComponents(e - d, q - m, t - p, b - l).normalize();
    a[1].setComponents(e + d, q + m, t + p, b + l).normalize();
    a[2].setComponents(e + c, q + g, t + h, b + w).normalize();
    a[3].setComponents(e - c, q - g, t - h, b - w).normalize();
    a[4].setComponents(e - f, q - k, t - r, b - u).normalize();
    a[5].setComponents(e + f, q + k, t + r, b + u).normalize();
    return this;
  }, intersectsObject:function() {
    var d = new Ca;
    return function(a) {
      var b = a.geometry;
      null === b.boundingSphere && b.computeBoundingSphere();
      d.copy(b.boundingSphere).applyMatrix4(a.matrixWorld);
      return this.intersectsSphere(d);
    };
  }(), intersectsSprite:function() {
    var d = new Ca;
    return function(a) {
      d.center.set(0, 0, 0);
      d.radius = .7071067811865476;
      d.applyMatrix4(a.matrixWorld);
      return this.intersectsSphere(d);
    };
  }(), intersectsSphere:function(d) {
    var a = this.planes, b = d.center;
    d = -d.radius;
    for (var c = 0;6 > c;c++) {
      if (a[c].distanceToPoint(b) < d) {
        return !1;
      }
    }
    return !0;
  }, intersectsBox:function() {
    var d = new f, a = new f;
    return function(b) {
      for (var n = this.planes, c = 0;6 > c;c++) {
        var f = n[c];
        d.x = 0 < f.normal.x ? b.min.x : b.max.x;
        a.x = 0 < f.normal.x ? b.max.x : b.min.x;
        d.y = 0 < f.normal.y ? b.min.y : b.max.y;
        a.y = 0 < f.normal.y ? b.max.y : b.min.y;
        d.z = 0 < f.normal.z ? b.min.z : b.max.z;
        a.z = 0 < f.normal.z ? b.max.z : b.min.z;
        var e = f.distanceToPoint(d), f = f.distanceToPoint(a);
        if (0 > e && 0 > f) {
          return !1;
        }
      }
      return !0;
    };
  }(), containsPoint:function(d) {
    for (var a = this.planes, b = 0;6 > b;b++) {
      if (0 > a[b].distanceToPoint(d)) {
        return !1;
      }
    }
    return !0;
  }});
  Object.assign(qb.prototype, {set:function(d, a) {
    this.origin.copy(d);
    this.direction.copy(a);
    return this;
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(d) {
    this.origin.copy(d.origin);
    this.direction.copy(d.direction);
    return this;
  }, at:function(d, a) {
    return (a || new f).copy(this.direction).multiplyScalar(d).add(this.origin);
  }, lookAt:function(d) {
    this.direction.copy(d).sub(this.origin).normalize();
    return this;
  }, recast:function() {
    var d = new f;
    return function(a) {
      this.origin.copy(this.at(a, d));
      return this;
    };
  }(), closestPointToPoint:function(d, a) {
    a = a || new f;
    a.subVectors(d, this.origin);
    d = a.dot(this.direction);
    return 0 > d ? a.copy(this.origin) : a.copy(this.direction).multiplyScalar(d).add(this.origin);
  }, distanceToPoint:function(d) {
    return Math.sqrt(this.distanceSqToPoint(d));
  }, distanceSqToPoint:function() {
    var d = new f;
    return function(a) {
      var b = d.subVectors(a, this.origin).dot(this.direction);
      if (0 > b) {
        return this.origin.distanceToSquared(a);
      }
      d.copy(this.direction).multiplyScalar(b).add(this.origin);
      return d.distanceToSquared(a);
    };
  }(), distanceSqToSegment:function() {
    var d = new f, a = new f, b = new f;
    return function(n, c, f, e) {
      d.copy(n).add(c).multiplyScalar(.5);
      a.copy(c).sub(n).normalize();
      b.copy(this.origin).sub(d);
      var m = .5 * n.distanceTo(c), g = -this.direction.dot(a), k = b.dot(this.direction), q = -b.dot(a), p = b.lengthSq(), h = Math.abs(1 - g * g), r;
      0 < h ? (n = g * q - k, c = g * k - q, r = m * h, 0 <= n ? c >= -r ? c <= r ? (m = 1 / h, n *= m, c *= m, g = n * (n + g * c + 2 * k) + c * (g * n + c + 2 * q) + p) : (c = m, n = Math.max(0, -(g * c + k)), g = -n * n + c * (c + 2 * q) + p) : (c = -m, n = Math.max(0, -(g * c + k)), g = -n * n + c * (c + 2 * q) + p) : c <= -r ? (n = Math.max(0, -(-g * m + k)), c = 0 < n ? -m : Math.min(Math.max(-m, -q), m), g = -n * n + c * (c + 2 * q) + p) : c <= r ? (n = 0, c = Math.min(Math.max(-m, -q), m), 
      g = c * (c + 2 * q) + p) : (n = Math.max(0, -(g * m + k)), c = 0 < n ? m : Math.min(Math.max(-m, -q), m), g = -n * n + c * (c + 2 * q) + p)) : (c = 0 < g ? -m : m, n = Math.max(0, -(g * c + k)), g = -n * n + c * (c + 2 * q) + p);
      f && f.copy(this.direction).multiplyScalar(n).add(this.origin);
      e && e.copy(a).multiplyScalar(c).add(d);
      return g;
    };
  }(), intersectSphere:function() {
    var d = new f;
    return function(a, b) {
      d.subVectors(a.center, this.origin);
      var n = d.dot(this.direction), c = d.dot(d) - n * n;
      a = a.radius * a.radius;
      if (c > a) {
        return null;
      }
      a = Math.sqrt(a - c);
      c = n - a;
      n += a;
      return 0 > c && 0 > n ? null : 0 > c ? this.at(n, b) : this.at(c, b);
    };
  }(), intersectsSphere:function(d) {
    return this.distanceToPoint(d.center) <= d.radius;
  }, distanceToPlane:function(d) {
    var a = d.normal.dot(this.direction);
    if (0 === a) {
      return 0 === d.distanceToPoint(this.origin) ? 0 : null;
    }
    d = -(this.origin.dot(d.normal) + d.constant) / a;
    return 0 <= d ? d : null;
  }, intersectPlane:function(d, a) {
    d = this.distanceToPlane(d);
    return null === d ? null : this.at(d, a);
  }, intersectsPlane:function(d) {
    var a = d.distanceToPoint(this.origin);
    return 0 === a || 0 > d.normal.dot(this.direction) * a ? !0 : !1;
  }, intersectBox:function(d, a) {
    var b, n, c, f, e;
    n = 1 / this.direction.x;
    f = 1 / this.direction.y;
    e = 1 / this.direction.z;
    var m = this.origin;
    0 <= n ? (b = (d.min.x - m.x) * n, n *= d.max.x - m.x) : (b = (d.max.x - m.x) * n, n *= d.min.x - m.x);
    0 <= f ? (c = (d.min.y - m.y) * f, f *= d.max.y - m.y) : (c = (d.max.y - m.y) * f, f *= d.min.y - m.y);
    if (b > f || c > n) {
      return null;
    }
    if (c > b || b !== b) {
      b = c;
    }
    if (f < n || n !== n) {
      n = f;
    }
    0 <= e ? (c = (d.min.z - m.z) * e, e *= d.max.z - m.z) : (c = (d.max.z - m.z) * e, e *= d.min.z - m.z);
    if (b > e || c > n) {
      return null;
    }
    if (c > b || b !== b) {
      b = c;
    }
    if (e < n || n !== n) {
      n = e;
    }
    return 0 > n ? null : this.at(0 <= b ? b : n, a);
  }, intersectsBox:function() {
    var d = new f;
    return function(a) {
      return null !== this.intersectBox(a, d);
    };
  }(), intersectTriangle:function() {
    var d = new f, a = new f, b = new f, c = new f;
    return function(n, f, e, m, g) {
      a.subVectors(f, n);
      b.subVectors(e, n);
      c.crossVectors(a, b);
      f = this.direction.dot(c);
      if (0 < f) {
        if (m) {
          return null;
        }
        m = 1;
      } else {
        if (0 > f) {
          m = -1, f = -f;
        } else {
          return null;
        }
      }
      d.subVectors(this.origin, n);
      n = m * this.direction.dot(b.crossVectors(d, b));
      if (0 > n) {
        return null;
      }
      e = m * this.direction.dot(a.cross(d));
      if (0 > e || n + e > f) {
        return null;
      }
      n = -m * d.dot(c);
      return 0 > n ? null : this.at(n / f, g);
    };
  }(), applyMatrix4:function(d) {
    this.direction.add(this.origin).applyMatrix4(d);
    this.origin.applyMatrix4(d);
    this.direction.sub(this.origin);
    this.direction.normalize();
    return this;
  }, equals:function(d) {
    return d.origin.equals(this.origin) && d.direction.equals(this.direction);
  }});
  kb.RotationOrders = "XYZ YZX ZXY XZY YXZ ZYX".split(" ");
  kb.DefaultOrder = "XYZ";
  Object.defineProperties(kb.prototype, {x:{get:function() {
    return this._x;
  }, set:function(d) {
    this._x = d;
    this.onChangeCallback();
  }}, y:{get:function() {
    return this._y;
  }, set:function(d) {
    this._y = d;
    this.onChangeCallback();
  }}, z:{get:function() {
    return this._z;
  }, set:function(d) {
    this._z = d;
    this.onChangeCallback();
  }}, order:{get:function() {
    return this._order;
  }, set:function(d) {
    this._order = d;
    this.onChangeCallback();
  }}});
  Object.assign(kb.prototype, {isEuler:!0, set:function(d, a, b, c) {
    this._x = d;
    this._y = a;
    this._z = b;
    this._order = c || this._order;
    this.onChangeCallback();
    return this;
  }, clone:function() {
    return new this.constructor(this._x, this._y, this._z, this._order);
  }, copy:function(d) {
    this._x = d._x;
    this._y = d._y;
    this._z = d._z;
    this._order = d._order;
    this.onChangeCallback();
    return this;
  }, setFromRotationMatrix:function(d, a, b) {
    var n = na.clamp, c = d.elements;
    d = c[0];
    var f = c[4], e = c[8], m = c[1], g = c[5], k = c[9], q = c[2], p = c[6], c = c[10];
    a = a || this._order;
    "XYZ" === a ? (this._y = Math.asin(n(e, -1, 1)), .99999 > Math.abs(e) ? (this._x = Math.atan2(-k, c), this._z = Math.atan2(-f, d)) : (this._x = Math.atan2(p, g), this._z = 0)) : "YXZ" === a ? (this._x = Math.asin(-n(k, -1, 1)), .99999 > Math.abs(k) ? (this._y = Math.atan2(e, c), this._z = Math.atan2(m, g)) : (this._y = Math.atan2(-q, d), this._z = 0)) : "ZXY" === a ? (this._x = Math.asin(n(p, -1, 1)), .99999 > Math.abs(p) ? (this._y = Math.atan2(-q, c), this._z = Math.atan2(-f, g)) : (this._y = 
    0, this._z = Math.atan2(m, d))) : "ZYX" === a ? (this._y = Math.asin(-n(q, -1, 1)), .99999 > Math.abs(q) ? (this._x = Math.atan2(p, c), this._z = Math.atan2(m, d)) : (this._x = 0, this._z = Math.atan2(-f, g))) : "YZX" === a ? (this._z = Math.asin(n(m, -1, 1)), .99999 > Math.abs(m) ? (this._x = Math.atan2(-k, g), this._y = Math.atan2(-q, d)) : (this._x = 0, this._y = Math.atan2(e, c))) : "XZY" === a ? (this._z = Math.asin(-n(f, -1, 1)), .99999 > Math.abs(f) ? (this._x = Math.atan2(p, g), this._y = 
    Math.atan2(e, d)) : (this._x = Math.atan2(-k, c), this._y = 0)) : console.warn("THREE.Euler: .setFromRotationMatrix() given unsupported order: " + a);
    this._order = a;
    if (!1 !== b) {
      this.onChangeCallback();
    }
    return this;
  }, setFromQuaternion:function() {
    var d = new q;
    return function(a, b, c) {
      d.makeRotationFromQuaternion(a);
      return this.setFromRotationMatrix(d, b, c);
    };
  }(), setFromVector3:function(d, a) {
    return this.set(d.x, d.y, d.z, a || this._order);
  }, reorder:function() {
    var d = new e;
    return function(a) {
      d.setFromEuler(this);
      return this.setFromQuaternion(d, a);
    };
  }(), equals:function(d) {
    return d._x === this._x && d._y === this._y && d._z === this._z && d._order === this._order;
  }, fromArray:function(d) {
    this._x = d[0];
    this._y = d[1];
    this._z = d[2];
    void 0 !== d[3] && (this._order = d[3]);
    this.onChangeCallback();
    return this;
  }, toArray:function(d, a) {
    void 0 === d && (d = []);
    void 0 === a && (a = 0);
    d[a] = this._x;
    d[a + 1] = this._y;
    d[a + 2] = this._z;
    d[a + 3] = this._order;
    return d;
  }, toVector3:function(d) {
    return d ? d.set(this._x, this._y, this._z) : new f(this._x, this._y, this._z);
  }, onChange:function(d) {
    this.onChangeCallback = d;
    return this;
  }, onChangeCallback:function() {
  }});
  Object.assign(Fc.prototype, {set:function(d) {
    this.mask = 1 << d | 0;
  }, enable:function(d) {
    this.mask = this.mask | 1 << d | 0;
  }, toggle:function(d) {
    this.mask ^= 1 << d | 0;
  }, disable:function(d) {
    this.mask &= ~(1 << d | 0);
  }, test:function(d) {
    return 0 !== (this.mask & d.mask);
  }});
  var ff = 0;
  aa.DefaultUp = new f(0, 1, 0);
  aa.DefaultMatrixAutoUpdate = !0;
  Object.assign(aa.prototype, h.prototype, {isObject3D:!0, applyMatrix:function(d) {
    this.matrix.multiplyMatrices(d, this.matrix);
    this.matrix.decompose(this.position, this.quaternion, this.scale);
  }, setRotationFromAxisAngle:function(d, a) {
    this.quaternion.setFromAxisAngle(d, a);
  }, setRotationFromEuler:function(d) {
    this.quaternion.setFromEuler(d);
  }, setRotationFromMatrix:function(d) {
    this.quaternion.setFromRotationMatrix(d);
  }, setRotationFromQuaternion:function(d) {
    this.quaternion.copy(d);
  }, rotateOnAxis:function() {
    var d = new e;
    return function(a, b) {
      d.setFromAxisAngle(a, b);
      this.quaternion.multiply(d);
      return this;
    };
  }(), rotateX:function() {
    var d = new f(1, 0, 0);
    return function(a) {
      return this.rotateOnAxis(d, a);
    };
  }(), rotateY:function() {
    var d = new f(0, 1, 0);
    return function(a) {
      return this.rotateOnAxis(d, a);
    };
  }(), rotateZ:function() {
    var d = new f(0, 0, 1);
    return function(a) {
      return this.rotateOnAxis(d, a);
    };
  }(), translateOnAxis:function() {
    var d = new f;
    return function(a, b) {
      d.copy(a).applyQuaternion(this.quaternion);
      this.position.add(d.multiplyScalar(b));
      return this;
    };
  }(), translateX:function() {
    var d = new f(1, 0, 0);
    return function(a) {
      return this.translateOnAxis(d, a);
    };
  }(), translateY:function() {
    var d = new f(0, 1, 0);
    return function(a) {
      return this.translateOnAxis(d, a);
    };
  }(), translateZ:function() {
    var d = new f(0, 0, 1);
    return function(a) {
      return this.translateOnAxis(d, a);
    };
  }(), localToWorld:function(d) {
    return d.applyMatrix4(this.matrixWorld);
  }, worldToLocal:function() {
    var d = new q;
    return function(a) {
      return a.applyMatrix4(d.getInverse(this.matrixWorld));
    };
  }(), lookAt:function() {
    var d = new q;
    return function(a) {
      this.isCamera ? d.lookAt(this.position, a, this.up) : d.lookAt(a, this.position, this.up);
      this.quaternion.setFromRotationMatrix(d);
    };
  }(), add:function(d) {
    if (1 < arguments.length) {
      for (var a = 0;a < arguments.length;a++) {
        this.add(arguments[a]);
      }
      return this;
    }
    if (d === this) {
      return console.error("THREE.Object3D.add: object can't be added as a child of itself.", d), this;
    }
    d && d.isObject3D ? (null !== d.parent && d.parent.remove(d), d.parent = this, d.dispatchEvent({type:"added"}), this.children.push(d)) : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", d);
    return this;
  }, remove:function(d) {
    if (1 < arguments.length) {
      for (var a = 0;a < arguments.length;a++) {
        this.remove(arguments[a]);
      }
    }
    a = this.children.indexOf(d);
    -1 !== a && (d.parent = null, d.dispatchEvent({type:"removed"}), this.children.splice(a, 1));
  }, getObjectById:function(d) {
    return this.getObjectByProperty("id", d);
  }, getObjectByName:function(d) {
    return this.getObjectByProperty("name", d);
  }, getObjectByProperty:function(d, a) {
    if (this[d] === a) {
      return this;
    }
    for (var b = 0, n = this.children.length;b < n;b++) {
      var c = this.children[b].getObjectByProperty(d, a);
      if (void 0 !== c) {
        return c;
      }
    }
  }, getWorldPosition:function(d) {
    d = d || new f;
    this.updateMatrixWorld(!0);
    return d.setFromMatrixPosition(this.matrixWorld);
  }, getWorldQuaternion:function() {
    var d = new f, a = new f;
    return function(b) {
      b = b || new e;
      this.updateMatrixWorld(!0);
      this.matrixWorld.decompose(d, b, a);
      return b;
    };
  }(), getWorldRotation:function() {
    var d = new e;
    return function(a) {
      a = a || new kb;
      this.getWorldQuaternion(d);
      return a.setFromQuaternion(d, this.rotation.order, !1);
    };
  }(), getWorldScale:function() {
    var d = new f, a = new e;
    return function(b) {
      b = b || new f;
      this.updateMatrixWorld(!0);
      this.matrixWorld.decompose(d, a, b);
      return b;
    };
  }(), getWorldDirection:function() {
    var d = new e;
    return function(a) {
      a = a || new f;
      this.getWorldQuaternion(d);
      return a.set(0, 0, 1).applyQuaternion(d);
    };
  }(), raycast:function() {
  }, traverse:function(d) {
    d(this);
    for (var a = this.children, b = 0, c = a.length;b < c;b++) {
      a[b].traverse(d);
    }
  }, traverseVisible:function(d) {
    if (!1 !== this.visible) {
      d(this);
      for (var a = this.children, b = 0, c = a.length;b < c;b++) {
        a[b].traverseVisible(d);
      }
    }
  }, traverseAncestors:function(d) {
    var a = this.parent;
    null !== a && (d(a), a.traverseAncestors(d));
  }, updateMatrix:function() {
    this.matrix.compose(this.position, this.quaternion, this.scale);
    this.matrixWorldNeedsUpdate = !0;
  }, updateMatrixWorld:function(d) {
    this.matrixAutoUpdate && this.updateMatrix();
    if (this.matrixWorldNeedsUpdate || d) {
      null === this.parent ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), this.matrixWorldNeedsUpdate = !1, d = !0;
    }
    for (var a = this.children, b = 0, c = a.length;b < c;b++) {
      a[b].updateMatrixWorld(d);
    }
  }, toJSON:function(d) {
    function a(d) {
      var a = [], b;
      for (b in d) {
        var n = d[b];
        delete n.metadata;
        a.push(n);
      }
      return a;
    }
    var b = void 0 === d || "" === d, c = {};
    b && (d = {geometries:{}, materials:{}, textures:{}, images:{}}, c.metadata = {version:4.4, type:"Object", generator:"Object3D.toJSON"});
    var f = {};
    f.uuid = this.uuid;
    f.type = this.type;
    "" !== this.name && (f.name = this.name);
    "{}" !== JSON.stringify(this.userData) && (f.userData = this.userData);
    !0 === this.castShadow && (f.castShadow = !0);
    !0 === this.receiveShadow && (f.receiveShadow = !0);
    !1 === this.visible && (f.visible = !1);
    f.matrix = this.matrix.toArray();
    void 0 !== this.geometry && (void 0 === d.geometries[this.geometry.uuid] && (d.geometries[this.geometry.uuid] = this.geometry.toJSON(d)), f.geometry = this.geometry.uuid);
    void 0 !== this.material && (void 0 === d.materials[this.material.uuid] && (d.materials[this.material.uuid] = this.material.toJSON(d)), f.material = this.material.uuid);
    if (0 < this.children.length) {
      f.children = [];
      for (var e = 0;e < this.children.length;e++) {
        f.children.push(this.children[e].toJSON(d).object);
      }
    }
    if (b) {
      var b = a(d.geometries), e = a(d.materials), m = a(d.textures);
      d = a(d.images);
      0 < b.length && (c.geometries = b);
      0 < e.length && (c.materials = e);
      0 < m.length && (c.textures = m);
      0 < d.length && (c.images = d);
    }
    c.object = f;
    return c;
  }, clone:function(d) {
    return (new this.constructor).copy(this, d);
  }, copy:function(d, a) {
    void 0 === a && (a = !0);
    this.name = d.name;
    this.up.copy(d.up);
    this.position.copy(d.position);
    this.quaternion.copy(d.quaternion);
    this.scale.copy(d.scale);
    this.matrix.copy(d.matrix);
    this.matrixWorld.copy(d.matrixWorld);
    this.matrixAutoUpdate = d.matrixAutoUpdate;
    this.matrixWorldNeedsUpdate = d.matrixWorldNeedsUpdate;
    this.layers.mask = d.layers.mask;
    this.visible = d.visible;
    this.castShadow = d.castShadow;
    this.receiveShadow = d.receiveShadow;
    this.frustumCulled = d.frustumCulled;
    this.renderOrder = d.renderOrder;
    this.userData = JSON.parse(JSON.stringify(d.userData));
    if (!0 === a) {
      for (a = 0;a < d.children.length;a++) {
        this.add(d.children[a].clone());
      }
    }
    return this;
  }});
  Object.assign(yb.prototype, {set:function(d, a) {
    this.start.copy(d);
    this.end.copy(a);
    return this;
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(d) {
    this.start.copy(d.start);
    this.end.copy(d.end);
    return this;
  }, getCenter:function(d) {
    return (d || new f).addVectors(this.start, this.end).multiplyScalar(.5);
  }, delta:function(d) {
    return (d || new f).subVectors(this.end, this.start);
  }, distanceSq:function() {
    return this.start.distanceToSquared(this.end);
  }, distance:function() {
    return this.start.distanceTo(this.end);
  }, at:function(d, a) {
    a = a || new f;
    return this.delta(a).multiplyScalar(d).add(this.start);
  }, closestPointToPointParameter:function() {
    var d = new f, a = new f;
    return function(b, n) {
      d.subVectors(b, this.start);
      a.subVectors(this.end, this.start);
      b = a.dot(a);
      b = a.dot(d) / b;
      n && (b = na.clamp(b, 0, 1));
      return b;
    };
  }(), closestPointToPoint:function(d, a, b) {
    d = this.closestPointToPointParameter(d, a);
    b = b || new f;
    return this.delta(b).multiplyScalar(d).add(this.start);
  }, applyMatrix4:function(d) {
    this.start.applyMatrix4(d);
    this.end.applyMatrix4(d);
    return this;
  }, equals:function(d) {
    return d.start.equals(this.start) && d.end.equals(this.end);
  }});
  Object.assign(Ja, {normal:function() {
    var d = new f;
    return function(a, b, c, e) {
      e = e || new f;
      e.subVectors(c, b);
      d.subVectors(a, b);
      e.cross(d);
      a = e.lengthSq();
      return 0 < a ? e.multiplyScalar(1 / Math.sqrt(a)) : e.set(0, 0, 0);
    };
  }(), barycoordFromPoint:function() {
    var d = new f, a = new f, b = new f;
    return function(n, c, e, m, g) {
      d.subVectors(m, c);
      a.subVectors(e, c);
      b.subVectors(n, c);
      n = d.dot(d);
      c = d.dot(a);
      e = d.dot(b);
      var k = a.dot(a);
      m = a.dot(b);
      var q = n * k - c * c;
      g = g || new f;
      if (0 === q) {
        return g.set(-2, -1, -1);
      }
      q = 1 / q;
      k = (k * e - c * m) * q;
      n = (n * m - c * e) * q;
      return g.set(1 - k - n, n, k);
    };
  }(), containsPoint:function() {
    var d = new f;
    return function(a, b, c, f) {
      a = Ja.barycoordFromPoint(a, b, c, f, d);
      return 0 <= a.x && 0 <= a.y && 1 >= a.x + a.y;
    };
  }()});
  Object.assign(Ja.prototype, {set:function(d, a, b) {
    this.a.copy(d);
    this.b.copy(a);
    this.c.copy(b);
    return this;
  }, setFromPointsAndIndices:function(d, a, b, c) {
    this.a.copy(d[a]);
    this.b.copy(d[b]);
    this.c.copy(d[c]);
    return this;
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(d) {
    this.a.copy(d.a);
    this.b.copy(d.b);
    this.c.copy(d.c);
    return this;
  }, area:function() {
    var d = new f, a = new f;
    return function() {
      d.subVectors(this.c, this.b);
      a.subVectors(this.a, this.b);
      return .5 * d.cross(a).length();
    };
  }(), midpoint:function(d) {
    return (d || new f).addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
  }, normal:function(d) {
    return Ja.normal(this.a, this.b, this.c, d);
  }, plane:function(d) {
    return (d || new ua).setFromCoplanarPoints(this.a, this.b, this.c);
  }, barycoordFromPoint:function(d, a) {
    return Ja.barycoordFromPoint(d, this.a, this.b, this.c, a);
  }, containsPoint:function(d) {
    return Ja.containsPoint(d, this.a, this.b, this.c);
  }, closestPointToPoint:function() {
    var d = new ua, a = [new yb, new yb, new yb], b = new f, c = new f;
    return function(n, e) {
      e = e || new f;
      var m = Infinity;
      d.setFromCoplanarPoints(this.a, this.b, this.c);
      d.projectPoint(n, b);
      if (!0 === this.containsPoint(b)) {
        e.copy(b);
      } else {
        for (a[0].set(this.a, this.b), a[1].set(this.b, this.c), a[2].set(this.c, this.a), n = 0;n < a.length;n++) {
          a[n].closestPointToPoint(b, !0, c);
          var g = b.distanceToSquared(c);
          g < m && (m = g, e.copy(c));
        }
      }
      return e;
    };
  }(), equals:function(d) {
    return d.a.equals(this.a) && d.b.equals(this.b) && d.c.equals(this.c);
  }});
  Object.assign(Ha.prototype, {clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(d) {
    this.a = d.a;
    this.b = d.b;
    this.c = d.c;
    this.normal.copy(d.normal);
    this.color.copy(d.color);
    this.materialIndex = d.materialIndex;
    for (var a = 0, b = d.vertexNormals.length;a < b;a++) {
      this.vertexNormals[a] = d.vertexNormals[a].clone();
    }
    a = 0;
    for (b = d.vertexColors.length;a < b;a++) {
      this.vertexColors[a] = d.vertexColors[a].clone();
    }
    return this;
  }});
  La.prototype = Object.create(X.prototype);
  La.prototype.constructor = La;
  La.prototype.isMeshBasicMaterial = !0;
  La.prototype.copy = function(d) {
    X.prototype.copy.call(this, d);
    this.color.copy(d.color);
    this.map = d.map;
    this.lightMap = d.lightMap;
    this.lightMapIntensity = d.lightMapIntensity;
    this.aoMap = d.aoMap;
    this.aoMapIntensity = d.aoMapIntensity;
    this.specularMap = d.specularMap;
    this.alphaMap = d.alphaMap;
    this.envMap = d.envMap;
    this.combine = d.combine;
    this.reflectivity = d.reflectivity;
    this.refractionRatio = d.refractionRatio;
    this.wireframe = d.wireframe;
    this.wireframeLinewidth = d.wireframeLinewidth;
    this.wireframeLinecap = d.wireframeLinecap;
    this.wireframeLinejoin = d.wireframeLinejoin;
    this.skinning = d.skinning;
    this.morphTargets = d.morphTargets;
    return this;
  };
  Object.defineProperty(ja.prototype, "needsUpdate", {set:function(d) {
    !0 === d && this.version++;
  }});
  Object.assign(ja.prototype, {isBufferAttribute:!0, setArray:function(d) {
    if (Array.isArray(d)) {
      throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
    }
    this.count = void 0 !== d ? d.length / this.itemSize : 0;
    this.array = d;
  }, setDynamic:function(d) {
    this.dynamic = d;
    return this;
  }, copy:function(d) {
    this.array = new d.array.constructor(d.array);
    this.itemSize = d.itemSize;
    this.count = d.count;
    this.normalized = d.normalized;
    this.dynamic = d.dynamic;
    return this;
  }, copyAt:function(d, a, b) {
    d *= this.itemSize;
    b *= a.itemSize;
    for (var n = 0, c = this.itemSize;n < c;n++) {
      this.array[d + n] = a.array[b + n];
    }
    return this;
  }, copyArray:function(d) {
    this.array.set(d);
    return this;
  }, copyColorsArray:function(d) {
    for (var a = this.array, b = 0, c = 0, f = d.length;c < f;c++) {
      var e = d[c];
      void 0 === e && (console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined", c), e = new Z);
      a[b++] = e.r;
      a[b++] = e.g;
      a[b++] = e.b;
    }
    return this;
  }, copyIndicesArray:function(d) {
    for (var a = this.array, b = 0, c = 0, f = d.length;c < f;c++) {
      var e = d[c];
      a[b++] = e.a;
      a[b++] = e.b;
      a[b++] = e.c;
    }
    return this;
  }, copyVector2sArray:function(d) {
    for (var a = this.array, b = 0, c = 0, f = d.length;c < f;c++) {
      var e = d[c];
      void 0 === e && (console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined", c), e = new l);
      a[b++] = e.x;
      a[b++] = e.y;
    }
    return this;
  }, copyVector3sArray:function(d) {
    for (var a = this.array, b = 0, c = 0, e = d.length;c < e;c++) {
      var m = d[c];
      void 0 === m && (console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined", c), m = new f);
      a[b++] = m.x;
      a[b++] = m.y;
      a[b++] = m.z;
    }
    return this;
  }, copyVector4sArray:function(d) {
    for (var a = this.array, b = 0, c = 0, f = d.length;c < f;c++) {
      var e = d[c];
      void 0 === e && (console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined", c), e = new g);
      a[b++] = e.x;
      a[b++] = e.y;
      a[b++] = e.z;
      a[b++] = e.w;
    }
    return this;
  }, set:function(d, a) {
    void 0 === a && (a = 0);
    this.array.set(d, a);
    return this;
  }, getX:function(d) {
    return this.array[d * this.itemSize];
  }, setX:function(d, a) {
    this.array[d * this.itemSize] = a;
    return this;
  }, getY:function(d) {
    return this.array[d * this.itemSize + 1];
  }, setY:function(d, a) {
    this.array[d * this.itemSize + 1] = a;
    return this;
  }, getZ:function(d) {
    return this.array[d * this.itemSize + 2];
  }, setZ:function(d, a) {
    this.array[d * this.itemSize + 2] = a;
    return this;
  }, getW:function(d) {
    return this.array[d * this.itemSize + 3];
  }, setW:function(d, a) {
    this.array[d * this.itemSize + 3] = a;
    return this;
  }, setXY:function(d, a, b) {
    d *= this.itemSize;
    this.array[d + 0] = a;
    this.array[d + 1] = b;
    return this;
  }, setXYZ:function(d, a, b, c) {
    d *= this.itemSize;
    this.array[d + 0] = a;
    this.array[d + 1] = b;
    this.array[d + 2] = c;
    return this;
  }, setXYZW:function(d, a, b, c, f) {
    d *= this.itemSize;
    this.array[d + 0] = a;
    this.array[d + 1] = b;
    this.array[d + 2] = c;
    this.array[d + 3] = f;
    return this;
  }, onUpload:function(d) {
    this.onUploadCallback = d;
    return this;
  }, clone:function() {
    return (new this.constructor(this.array, this.itemSize)).copy(this);
  }});
  rb.prototype = Object.create(ja.prototype);
  rb.prototype.constructor = rb;
  lb.prototype = Object.create(ja.prototype);
  lb.prototype.constructor = lb;
  Wa.prototype = Object.create(ja.prototype);
  Wa.prototype.constructor = Wa;
  zb.prototype = Object.create(ja.prototype);
  zb.prototype.constructor = zb;
  Za.prototype = Object.create(ja.prototype);
  Za.prototype.constructor = Za;
  $a.prototype = Object.create(ja.prototype);
  $a.prototype.constructor = $a;
  mb.prototype = Object.create(ja.prototype);
  mb.prototype.constructor = mb;
  Y.prototype = Object.create(ja.prototype);
  Y.prototype.constructor = Y;
  sb.prototype = Object.create(ja.prototype);
  sb.prototype.constructor = sb;
  Object.assign(Gc.prototype, {computeGroups:function(d) {
    var a, b = [], c = void 0;
    d = d.faces;
    for (var f = 0;f < d.length;f++) {
      var e = d[f];
      e.materialIndex !== c && (c = e.materialIndex, void 0 !== a && (a.count = 3 * f - a.start, b.push(a)), a = {start:3 * f, materialIndex:c});
    }
    void 0 !== a && (a.count = 3 * f - a.start, b.push(a));
    this.groups = b;
  }, fromGeometry:function(d) {
    var a = d.faces, b = d.vertices, c = d.faceVertexUvs, f = c[0] && 0 < c[0].length, e = c[1] && 0 < c[1].length, m = d.morphTargets, g = m.length, k;
    if (0 < g) {
      k = [];
      for (var q = 0;q < g;q++) {
        k[q] = [];
      }
      this.morphTargets.position = k;
    }
    var p = d.morphNormals, h = p.length, r;
    if (0 < h) {
      r = [];
      for (q = 0;q < h;q++) {
        r[q] = [];
      }
      this.morphTargets.normal = r;
    }
    for (var t = d.skinIndices, w = d.skinWeights, u = t.length === b.length, v = w.length === b.length, q = 0;q < a.length;q++) {
      var C = a[q];
      this.vertices.push(b[C.a], b[C.b], b[C.c]);
      var y = C.vertexNormals;
      3 === y.length ? this.normals.push(y[0], y[1], y[2]) : (y = C.normal, this.normals.push(y, y, y));
      y = C.vertexColors;
      3 === y.length ? this.colors.push(y[0], y[1], y[2]) : (y = C.color, this.colors.push(y, y, y));
      !0 === f && (y = c[0][q], void 0 !== y ? this.uvs.push(y[0], y[1], y[2]) : (console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ", q), this.uvs.push(new l, new l, new l)));
      !0 === e && (y = c[1][q], void 0 !== y ? this.uvs2.push(y[0], y[1], y[2]) : (console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ", q), this.uvs2.push(new l, new l, new l)));
      for (y = 0;y < g;y++) {
        var A = m[y].vertices;
        k[y].push(A[C.a], A[C.b], A[C.c]);
      }
      for (y = 0;y < h;y++) {
        A = p[y].vertexNormals[q], r[y].push(A.a, A.b, A.c);
      }
      u && this.skinIndices.push(t[C.a], t[C.b], t[C.c]);
      v && this.skinWeights.push(w[C.a], w[C.b], w[C.c]);
    }
    this.computeGroups(d);
    this.verticesNeedUpdate = d.verticesNeedUpdate;
    this.normalsNeedUpdate = d.normalsNeedUpdate;
    this.colorsNeedUpdate = d.colorsNeedUpdate;
    this.uvsNeedUpdate = d.uvsNeedUpdate;
    this.groupsNeedUpdate = d.groupsNeedUpdate;
    return this;
  }});
  var $d = 0;
  Object.assign(ga.prototype, h.prototype, {isGeometry:!0, applyMatrix:function(d) {
    for (var a = (new sa).getNormalMatrix(d), b = 0, c = this.vertices.length;b < c;b++) {
      this.vertices[b].applyMatrix4(d);
    }
    b = 0;
    for (c = this.faces.length;b < c;b++) {
      d = this.faces[b];
      d.normal.applyMatrix3(a).normalize();
      for (var f = 0, e = d.vertexNormals.length;f < e;f++) {
        d.vertexNormals[f].applyMatrix3(a).normalize();
      }
    }
    null !== this.boundingBox && this.computeBoundingBox();
    null !== this.boundingSphere && this.computeBoundingSphere();
    this.normalsNeedUpdate = this.verticesNeedUpdate = !0;
    return this;
  }, rotateX:function() {
    var d = new q;
    return function(a) {
      d.makeRotationX(a);
      this.applyMatrix(d);
      return this;
    };
  }(), rotateY:function() {
    var d = new q;
    return function(a) {
      d.makeRotationY(a);
      this.applyMatrix(d);
      return this;
    };
  }(), rotateZ:function() {
    var d = new q;
    return function(a) {
      d.makeRotationZ(a);
      this.applyMatrix(d);
      return this;
    };
  }(), translate:function() {
    var d = new q;
    return function(a, b, c) {
      d.makeTranslation(a, b, c);
      this.applyMatrix(d);
      return this;
    };
  }(), scale:function() {
    var d = new q;
    return function(a, b, c) {
      d.makeScale(a, b, c);
      this.applyMatrix(d);
      return this;
    };
  }(), lookAt:function() {
    var d = new aa;
    return function(a) {
      d.lookAt(a);
      d.updateMatrix();
      this.applyMatrix(d.matrix);
    };
  }(), fromBufferGeometry:function(d) {
    function a(d, a, n, c) {
      var f = void 0 !== g ? [h[d].clone(), h[a].clone(), h[n].clone()] : [], e = void 0 !== k ? [b.colors[d].clone(), b.colors[a].clone(), b.colors[n].clone()] : [];
      c = new Ha(d, a, n, f, e, c);
      b.faces.push(c);
      void 0 !== q && b.faceVertexUvs[0].push([r[d].clone(), r[a].clone(), r[n].clone()]);
      void 0 !== p && b.faceVertexUvs[1].push([t[d].clone(), t[a].clone(), t[n].clone()]);
    }
    var b = this, c = null !== d.index ? d.index.array : void 0, e = d.attributes, m = e.position.array, g = void 0 !== e.normal ? e.normal.array : void 0, k = void 0 !== e.color ? e.color.array : void 0, q = void 0 !== e.uv ? e.uv.array : void 0, p = void 0 !== e.uv2 ? e.uv2.array : void 0;
    void 0 !== p && (this.faceVertexUvs[1] = []);
    for (var h = [], r = [], t = [], w = e = 0;e < m.length;e += 3, w += 2) {
      b.vertices.push(new f(m[e], m[e + 1], m[e + 2])), void 0 !== g && h.push(new f(g[e], g[e + 1], g[e + 2])), void 0 !== k && b.colors.push(new Z(k[e], k[e + 1], k[e + 2])), void 0 !== q && r.push(new l(q[w], q[w + 1])), void 0 !== p && t.push(new l(p[w], p[w + 1]));
    }
    if (void 0 !== c) {
      if (m = d.groups, 0 < m.length) {
        for (e = 0;e < m.length;e++) {
          for (var u = m[e], v = u.start, C = u.count, w = v, v = v + C;w < v;w += 3) {
            a(c[w], c[w + 1], c[w + 2], u.materialIndex);
          }
        }
      } else {
        for (e = 0;e < c.length;e += 3) {
          a(c[e], c[e + 1], c[e + 2]);
        }
      }
    } else {
      for (e = 0;e < m.length / 3;e += 3) {
        a(e, e + 1, e + 2);
      }
    }
    this.computeFaceNormals();
    null !== d.boundingBox && (this.boundingBox = d.boundingBox.clone());
    null !== d.boundingSphere && (this.boundingSphere = d.boundingSphere.clone());
    return this;
  }, center:function() {
    this.computeBoundingBox();
    var d = this.boundingBox.getCenter().negate();
    this.translate(d.x, d.y, d.z);
    return d;
  }, normalize:function() {
    this.computeBoundingSphere();
    var d = this.boundingSphere.center, a = this.boundingSphere.radius, a = 0 === a ? 1 : 1 / a, b = new q;
    b.set(a, 0, 0, -a * d.x, 0, a, 0, -a * d.y, 0, 0, a, -a * d.z, 0, 0, 0, 1);
    this.applyMatrix(b);
    return this;
  }, computeFaceNormals:function() {
    for (var d = new f, a = new f, b = 0, c = this.faces.length;b < c;b++) {
      var e = this.faces[b], m = this.vertices[e.a], g = this.vertices[e.b];
      d.subVectors(this.vertices[e.c], g);
      a.subVectors(m, g);
      d.cross(a);
      d.normalize();
      e.normal.copy(d);
    }
  }, computeVertexNormals:function(d) {
    void 0 === d && (d = !0);
    var a, b, c;
    c = Array(this.vertices.length);
    a = 0;
    for (b = this.vertices.length;a < b;a++) {
      c[a] = new f;
    }
    if (d) {
      var e, m, g, k = new f, q = new f;
      d = 0;
      for (a = this.faces.length;d < a;d++) {
        b = this.faces[d], e = this.vertices[b.a], m = this.vertices[b.b], g = this.vertices[b.c], k.subVectors(g, m), q.subVectors(e, m), k.cross(q), c[b.a].add(k), c[b.b].add(k), c[b.c].add(k);
      }
    } else {
      for (this.computeFaceNormals(), d = 0, a = this.faces.length;d < a;d++) {
        b = this.faces[d], c[b.a].add(b.normal), c[b.b].add(b.normal), c[b.c].add(b.normal);
      }
    }
    a = 0;
    for (b = this.vertices.length;a < b;a++) {
      c[a].normalize();
    }
    d = 0;
    for (a = this.faces.length;d < a;d++) {
      b = this.faces[d], e = b.vertexNormals, 3 === e.length ? (e[0].copy(c[b.a]), e[1].copy(c[b.b]), e[2].copy(c[b.c])) : (e[0] = c[b.a].clone(), e[1] = c[b.b].clone(), e[2] = c[b.c].clone());
    }
    0 < this.faces.length && (this.normalsNeedUpdate = !0);
  }, computeFlatVertexNormals:function() {
    var d, a, b;
    this.computeFaceNormals();
    d = 0;
    for (a = this.faces.length;d < a;d++) {
      b = this.faces[d];
      var c = b.vertexNormals;
      3 === c.length ? (c[0].copy(b.normal), c[1].copy(b.normal), c[2].copy(b.normal)) : (c[0] = b.normal.clone(), c[1] = b.normal.clone(), c[2] = b.normal.clone());
    }
    0 < this.faces.length && (this.normalsNeedUpdate = !0);
  }, computeMorphNormals:function() {
    var d, a, b, c, e;
    b = 0;
    for (c = this.faces.length;b < c;b++) {
      for (e = this.faces[b], e.__originalFaceNormal ? e.__originalFaceNormal.copy(e.normal) : e.__originalFaceNormal = e.normal.clone(), e.__originalVertexNormals || (e.__originalVertexNormals = []), d = 0, a = e.vertexNormals.length;d < a;d++) {
        e.__originalVertexNormals[d] ? e.__originalVertexNormals[d].copy(e.vertexNormals[d]) : e.__originalVertexNormals[d] = e.vertexNormals[d].clone();
      }
    }
    var m = new ga;
    m.faces = this.faces;
    d = 0;
    for (a = this.morphTargets.length;d < a;d++) {
      if (!this.morphNormals[d]) {
        this.morphNormals[d] = {};
        this.morphNormals[d].faceNormals = [];
        this.morphNormals[d].vertexNormals = [];
        e = this.morphNormals[d].faceNormals;
        var g = this.morphNormals[d].vertexNormals, k, q;
        b = 0;
        for (c = this.faces.length;b < c;b++) {
          k = new f, q = {a:new f, b:new f, c:new f}, e.push(k), g.push(q);
        }
      }
      g = this.morphNormals[d];
      m.vertices = this.morphTargets[d].vertices;
      m.computeFaceNormals();
      m.computeVertexNormals();
      b = 0;
      for (c = this.faces.length;b < c;b++) {
        e = this.faces[b], k = g.faceNormals[b], q = g.vertexNormals[b], k.copy(e.normal), q.a.copy(e.vertexNormals[0]), q.b.copy(e.vertexNormals[1]), q.c.copy(e.vertexNormals[2]);
      }
    }
    b = 0;
    for (c = this.faces.length;b < c;b++) {
      e = this.faces[b], e.normal = e.__originalFaceNormal, e.vertexNormals = e.__originalVertexNormals;
    }
  }, computeLineDistances:function() {
    for (var d = 0, a = this.vertices, b = 0, c = a.length;b < c;b++) {
      0 < b && (d += a[b].distanceTo(a[b - 1])), this.lineDistances[b] = d;
    }
  }, computeBoundingBox:function() {
    null === this.boundingBox && (this.boundingBox = new Aa);
    this.boundingBox.setFromPoints(this.vertices);
  }, computeBoundingSphere:function() {
    null === this.boundingSphere && (this.boundingSphere = new Ca);
    this.boundingSphere.setFromPoints(this.vertices);
  }, merge:function(d, a, b) {
    if (!1 === (d && d.isGeometry)) {
      console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.", d);
    } else {
      var n, c = this.vertices.length, f = this.vertices, e = d.vertices, m = this.faces, g = d.faces, k = this.faceVertexUvs[0], q = d.faceVertexUvs[0], p = this.colors, h = d.colors;
      void 0 === b && (b = 0);
      void 0 !== a && (n = (new sa).getNormalMatrix(a));
      d = 0;
      for (var r = e.length;d < r;d++) {
        var t = e[d].clone();
        void 0 !== a && t.applyMatrix4(a);
        f.push(t);
      }
      d = 0;
      for (r = h.length;d < r;d++) {
        p.push(h[d].clone());
      }
      d = 0;
      for (r = g.length;d < r;d++) {
        var e = g[d], l = e.vertexNormals, h = e.vertexColors, p = new Ha(e.a + c, e.b + c, e.c + c);
        p.normal.copy(e.normal);
        void 0 !== n && p.normal.applyMatrix3(n).normalize();
        a = 0;
        for (f = l.length;a < f;a++) {
          t = l[a].clone(), void 0 !== n && t.applyMatrix3(n).normalize(), p.vertexNormals.push(t);
        }
        p.color.copy(e.color);
        a = 0;
        for (f = h.length;a < f;a++) {
          t = h[a], p.vertexColors.push(t.clone());
        }
        p.materialIndex = e.materialIndex + b;
        m.push(p);
      }
      d = 0;
      for (r = q.length;d < r;d++) {
        if (b = q[d], n = [], void 0 !== b) {
          a = 0;
          for (f = b.length;a < f;a++) {
            n.push(b[a].clone());
          }
          k.push(n);
        }
      }
    }
  }, mergeMesh:function(d) {
    !1 === (d && d.isMesh) ? console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.", d) : (d.matrixAutoUpdate && d.updateMatrix(), this.merge(d.geometry, d.matrix));
  }, mergeVertices:function() {
    var d = {}, a = [], b = [], c, f = Math.pow(10, 4), e, m;
    e = 0;
    for (m = this.vertices.length;e < m;e++) {
      c = this.vertices[e], c = Math.round(c.x * f) + "_" + Math.round(c.y * f) + "_" + Math.round(c.z * f), void 0 === d[c] ? (d[c] = e, a.push(this.vertices[e]), b[e] = a.length - 1) : b[e] = b[d[c]];
    }
    d = [];
    e = 0;
    for (m = this.faces.length;e < m;e++) {
      for (f = this.faces[e], f.a = b[f.a], f.b = b[f.b], f.c = b[f.c], f = [f.a, f.b, f.c], c = 0;3 > c;c++) {
        if (f[c] === f[(c + 1) % 3]) {
          d.push(e);
          break;
        }
      }
    }
    for (e = d.length - 1;0 <= e;e--) {
      for (f = d[e], this.faces.splice(f, 1), b = 0, m = this.faceVertexUvs.length;b < m;b++) {
        this.faceVertexUvs[b].splice(f, 1);
      }
    }
    e = this.vertices.length - a.length;
    this.vertices = a;
    return e;
  }, sortFacesByMaterialIndex:function() {
    for (var d = this.faces, a = d.length, b = 0;b < a;b++) {
      d[b]._id = b;
    }
    d.sort(function(d, a) {
      return d.materialIndex - a.materialIndex;
    });
    var c = this.faceVertexUvs[0], f = this.faceVertexUvs[1], e, m;
    c && c.length === a && (e = []);
    f && f.length === a && (m = []);
    for (b = 0;b < a;b++) {
      var g = d[b]._id;
      e && e.push(c[g]);
      m && m.push(f[g]);
    }
    e && (this.faceVertexUvs[0] = e);
    m && (this.faceVertexUvs[1] = m);
  }, toJSON:function() {
    function d(d, a, b) {
      return b ? d | 1 << a : d & ~(1 << a);
    }
    function a(d) {
      var a = d.x.toString() + d.y.toString() + d.z.toString();
      if (void 0 !== q[a]) {
        return q[a];
      }
      q[a] = k.length / 3;
      k.push(d.x, d.y, d.z);
      return q[a];
    }
    function b(d) {
      var a = d.r.toString() + d.g.toString() + d.b.toString();
      if (void 0 !== h[a]) {
        return h[a];
      }
      h[a] = p.length;
      p.push(d.getHex());
      return h[a];
    }
    function c(d) {
      var a = d.x.toString() + d.y.toString();
      if (void 0 !== t[a]) {
        return t[a];
      }
      t[a] = r.length / 2;
      r.push(d.x, d.y);
      return t[a];
    }
    var f = {metadata:{version:4.4, type:"Geometry", generator:"Geometry.toJSON"}};
    f.uuid = this.uuid;
    f.type = this.type;
    "" !== this.name && (f.name = this.name);
    if (void 0 !== this.parameters) {
      var e = this.parameters, m;
      for (m in e) {
        void 0 !== e[m] && (f[m] = e[m]);
      }
      return f;
    }
    e = [];
    for (m = 0;m < this.vertices.length;m++) {
      var g = this.vertices[m];
      e.push(g.x, g.y, g.z);
    }
    var g = [], k = [], q = {}, p = [], h = {}, r = [], t = {};
    for (m = 0;m < this.faces.length;m++) {
      var l = this.faces[m], w = void 0 !== this.faceVertexUvs[0][m], u = 0 < l.normal.length(), v = 0 < l.vertexNormals.length, C = 1 !== l.color.r || 1 !== l.color.g || 1 !== l.color.b, y = 0 < l.vertexColors.length, A = 0, A = d(A, 0, 0), A = d(A, 1, !0), A = d(A, 2, !1), A = d(A, 3, w), A = d(A, 4, u), A = d(A, 5, v), A = d(A, 6, C), A = d(A, 7, y);
      g.push(A);
      g.push(l.a, l.b, l.c);
      g.push(l.materialIndex);
      w && (w = this.faceVertexUvs[0][m], g.push(c(w[0]), c(w[1]), c(w[2])));
      u && g.push(a(l.normal));
      v && (u = l.vertexNormals, g.push(a(u[0]), a(u[1]), a(u[2])));
      C && g.push(b(l.color));
      y && (l = l.vertexColors, g.push(b(l[0]), b(l[1]), b(l[2])));
    }
    f.data = {};
    f.data.vertices = e;
    f.data.normals = k;
    0 < p.length && (f.data.colors = p);
    0 < r.length && (f.data.uvs = [r]);
    f.data.faces = g;
    return f;
  }, clone:function() {
    return (new ga).copy(this);
  }, copy:function(d) {
    var a, b, c, f, e, m;
    this.vertices = [];
    this.colors = [];
    this.faces = [];
    this.faceVertexUvs = [[]];
    this.morphTargets = [];
    this.morphNormals = [];
    this.skinWeights = [];
    this.skinIndices = [];
    this.lineDistances = [];
    this.boundingSphere = this.boundingBox = null;
    this.name = d.name;
    c = d.vertices;
    a = 0;
    for (b = c.length;a < b;a++) {
      this.vertices.push(c[a].clone());
    }
    c = d.colors;
    a = 0;
    for (b = c.length;a < b;a++) {
      this.colors.push(c[a].clone());
    }
    c = d.faces;
    a = 0;
    for (b = c.length;a < b;a++) {
      this.faces.push(c[a].clone());
    }
    a = 0;
    for (b = d.faceVertexUvs.length;a < b;a++) {
      var g = d.faceVertexUvs[a];
      void 0 === this.faceVertexUvs[a] && (this.faceVertexUvs[a] = []);
      c = 0;
      for (f = g.length;c < f;c++) {
        var k = g[c], q = [];
        e = 0;
        for (m = k.length;e < m;e++) {
          q.push(k[e].clone());
        }
        this.faceVertexUvs[a].push(q);
      }
    }
    e = d.morphTargets;
    a = 0;
    for (b = e.length;a < b;a++) {
      m = {};
      m.name = e[a].name;
      if (void 0 !== e[a].vertices) {
        for (m.vertices = [], c = 0, f = e[a].vertices.length;c < f;c++) {
          m.vertices.push(e[a].vertices[c].clone());
        }
      }
      if (void 0 !== e[a].normals) {
        for (m.normals = [], c = 0, f = e[a].normals.length;c < f;c++) {
          m.normals.push(e[a].normals[c].clone());
        }
      }
      this.morphTargets.push(m);
    }
    e = d.morphNormals;
    a = 0;
    for (b = e.length;a < b;a++) {
      m = {};
      if (void 0 !== e[a].vertexNormals) {
        for (m.vertexNormals = [], c = 0, f = e[a].vertexNormals.length;c < f;c++) {
          g = e[a].vertexNormals[c], k = {}, k.a = g.a.clone(), k.b = g.b.clone(), k.c = g.c.clone(), m.vertexNormals.push(k);
        }
      }
      if (void 0 !== e[a].faceNormals) {
        for (m.faceNormals = [], c = 0, f = e[a].faceNormals.length;c < f;c++) {
          m.faceNormals.push(e[a].faceNormals[c].clone());
        }
      }
      this.morphNormals.push(m);
    }
    c = d.skinWeights;
    a = 0;
    for (b = c.length;a < b;a++) {
      this.skinWeights.push(c[a].clone());
    }
    c = d.skinIndices;
    a = 0;
    for (b = c.length;a < b;a++) {
      this.skinIndices.push(c[a].clone());
    }
    c = d.lineDistances;
    a = 0;
    for (b = c.length;a < b;a++) {
      this.lineDistances.push(c[a]);
    }
    a = d.boundingBox;
    null !== a && (this.boundingBox = a.clone());
    a = d.boundingSphere;
    null !== a && (this.boundingSphere = a.clone());
    this.elementsNeedUpdate = d.elementsNeedUpdate;
    this.verticesNeedUpdate = d.verticesNeedUpdate;
    this.uvsNeedUpdate = d.uvsNeedUpdate;
    this.normalsNeedUpdate = d.normalsNeedUpdate;
    this.colorsNeedUpdate = d.colorsNeedUpdate;
    this.lineDistancesNeedUpdate = d.lineDistancesNeedUpdate;
    this.groupsNeedUpdate = d.groupsNeedUpdate;
    return this;
  }, dispose:function() {
    this.dispatchEvent({type:"dispose"});
  }});
  ea.MaxIndex = 65535;
  Object.assign(ea.prototype, h.prototype, {isBufferGeometry:!0, getIndex:function() {
    return this.index;
  }, setIndex:function(d) {
    Array.isArray(d) ? this.index = new (65535 < nb(d) ? mb : Za)(d, 1) : this.index = d;
  }, addAttribute:function(d, a, b) {
    if (!1 === (a && a.isBufferAttribute) && !1 === (a && a.isInterleavedBufferAttribute)) {
      console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."), this.addAttribute(d, new ja(a, b));
    } else {
      if ("index" === d) {
        console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."), this.setIndex(a);
      } else {
        return this.attributes[d] = a, this;
      }
    }
  }, getAttribute:function(d) {
    return this.attributes[d];
  }, removeAttribute:function(d) {
    delete this.attributes[d];
    return this;
  }, addGroup:function(d, a, b) {
    this.groups.push({start:d, count:a, materialIndex:void 0 !== b ? b : 0});
  }, clearGroups:function() {
    this.groups = [];
  }, setDrawRange:function(d, a) {
    this.drawRange.start = d;
    this.drawRange.count = a;
  }, applyMatrix:function(d) {
    var a = this.attributes.position;
    void 0 !== a && (d.applyToBufferAttribute(a), a.needsUpdate = !0);
    a = this.attributes.normal;
    void 0 !== a && ((new sa).getNormalMatrix(d).applyToBufferAttribute(a), a.needsUpdate = !0);
    null !== this.boundingBox && this.computeBoundingBox();
    null !== this.boundingSphere && this.computeBoundingSphere();
    return this;
  }, rotateX:function() {
    var d = new q;
    return function(a) {
      d.makeRotationX(a);
      this.applyMatrix(d);
      return this;
    };
  }(), rotateY:function() {
    var d = new q;
    return function(a) {
      d.makeRotationY(a);
      this.applyMatrix(d);
      return this;
    };
  }(), rotateZ:function() {
    var d = new q;
    return function(a) {
      d.makeRotationZ(a);
      this.applyMatrix(d);
      return this;
    };
  }(), translate:function() {
    var d = new q;
    return function(a, b, c) {
      d.makeTranslation(a, b, c);
      this.applyMatrix(d);
      return this;
    };
  }(), scale:function() {
    var d = new q;
    return function(a, b, c) {
      d.makeScale(a, b, c);
      this.applyMatrix(d);
      return this;
    };
  }(), lookAt:function() {
    var d = new aa;
    return function(a) {
      d.lookAt(a);
      d.updateMatrix();
      this.applyMatrix(d.matrix);
    };
  }(), center:function() {
    this.computeBoundingBox();
    var d = this.boundingBox.getCenter().negate();
    this.translate(d.x, d.y, d.z);
    return d;
  }, setFromObject:function(d) {
    var a = d.geometry;
    if (d.isPoints || d.isLine) {
      d = new Y(3 * a.vertices.length, 3);
      var b = new Y(3 * a.colors.length, 3);
      this.addAttribute("position", d.copyVector3sArray(a.vertices));
      this.addAttribute("color", b.copyColorsArray(a.colors));
      a.lineDistances && a.lineDistances.length === a.vertices.length && (d = new Y(a.lineDistances.length, 1), this.addAttribute("lineDistance", d.copyArray(a.lineDistances)));
      null !== a.boundingSphere && (this.boundingSphere = a.boundingSphere.clone());
      null !== a.boundingBox && (this.boundingBox = a.boundingBox.clone());
    } else {
      d.isMesh && a && a.isGeometry && this.fromGeometry(a);
    }
    return this;
  }, updateFromObject:function(d) {
    var a = d.geometry;
    if (d.isMesh) {
      var b = a.__directGeometry;
      !0 === a.elementsNeedUpdate && (b = void 0, a.elementsNeedUpdate = !1);
      if (void 0 === b) {
        return this.fromGeometry(a);
      }
      b.verticesNeedUpdate = a.verticesNeedUpdate;
      b.normalsNeedUpdate = a.normalsNeedUpdate;
      b.colorsNeedUpdate = a.colorsNeedUpdate;
      b.uvsNeedUpdate = a.uvsNeedUpdate;
      b.groupsNeedUpdate = a.groupsNeedUpdate;
      a.verticesNeedUpdate = !1;
      a.normalsNeedUpdate = !1;
      a.colorsNeedUpdate = !1;
      a.uvsNeedUpdate = !1;
      a.groupsNeedUpdate = !1;
      a = b;
    }
    !0 === a.verticesNeedUpdate && (b = this.attributes.position, void 0 !== b && (b.copyVector3sArray(a.vertices), b.needsUpdate = !0), a.verticesNeedUpdate = !1);
    !0 === a.normalsNeedUpdate && (b = this.attributes.normal, void 0 !== b && (b.copyVector3sArray(a.normals), b.needsUpdate = !0), a.normalsNeedUpdate = !1);
    !0 === a.colorsNeedUpdate && (b = this.attributes.color, void 0 !== b && (b.copyColorsArray(a.colors), b.needsUpdate = !0), a.colorsNeedUpdate = !1);
    a.uvsNeedUpdate && (b = this.attributes.uv, void 0 !== b && (b.copyVector2sArray(a.uvs), b.needsUpdate = !0), a.uvsNeedUpdate = !1);
    a.lineDistancesNeedUpdate && (b = this.attributes.lineDistance, void 0 !== b && (b.copyArray(a.lineDistances), b.needsUpdate = !0), a.lineDistancesNeedUpdate = !1);
    a.groupsNeedUpdate && (a.computeGroups(d.geometry), this.groups = a.groups, a.groupsNeedUpdate = !1);
    return this;
  }, fromGeometry:function(d) {
    d.__directGeometry = (new Gc).fromGeometry(d);
    return this.fromDirectGeometry(d.__directGeometry);
  }, fromDirectGeometry:function(d) {
    var a = new Float32Array(3 * d.vertices.length);
    this.addAttribute("position", (new ja(a, 3)).copyVector3sArray(d.vertices));
    0 < d.normals.length && (a = new Float32Array(3 * d.normals.length), this.addAttribute("normal", (new ja(a, 3)).copyVector3sArray(d.normals)));
    0 < d.colors.length && (a = new Float32Array(3 * d.colors.length), this.addAttribute("color", (new ja(a, 3)).copyColorsArray(d.colors)));
    0 < d.uvs.length && (a = new Float32Array(2 * d.uvs.length), this.addAttribute("uv", (new ja(a, 2)).copyVector2sArray(d.uvs)));
    0 < d.uvs2.length && (a = new Float32Array(2 * d.uvs2.length), this.addAttribute("uv2", (new ja(a, 2)).copyVector2sArray(d.uvs2)));
    0 < d.indices.length && (a = new (65535 < nb(d.indices) ? Uint32Array : Uint16Array)(3 * d.indices.length), this.setIndex((new ja(a, 1)).copyIndicesArray(d.indices)));
    this.groups = d.groups;
    for (var b in d.morphTargets) {
      for (var a = [], c = d.morphTargets[b], f = 0, e = c.length;f < e;f++) {
        var m = c[f], g = new Y(3 * m.length, 3);
        a.push(g.copyVector3sArray(m));
      }
      this.morphAttributes[b] = a;
    }
    0 < d.skinIndices.length && (b = new Y(4 * d.skinIndices.length, 4), this.addAttribute("skinIndex", b.copyVector4sArray(d.skinIndices)));
    0 < d.skinWeights.length && (b = new Y(4 * d.skinWeights.length, 4), this.addAttribute("skinWeight", b.copyVector4sArray(d.skinWeights)));
    null !== d.boundingSphere && (this.boundingSphere = d.boundingSphere.clone());
    null !== d.boundingBox && (this.boundingBox = d.boundingBox.clone());
    return this;
  }, computeBoundingBox:function() {
    null === this.boundingBox && (this.boundingBox = new Aa);
    var d = this.attributes.position;
    void 0 !== d ? this.boundingBox.setFromBufferAttribute(d) : this.boundingBox.makeEmpty();
    (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) && console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
  }, computeBoundingSphere:function() {
    var d = new Aa, a = new f;
    return function() {
      null === this.boundingSphere && (this.boundingSphere = new Ca);
      var b = this.attributes.position;
      if (b) {
        var c = this.boundingSphere.center;
        d.setFromBufferAttribute(b);
        d.getCenter(c);
        for (var n = 0, f = 0, e = b.count;f < e;f++) {
          a.x = b.getX(f), a.y = b.getY(f), a.z = b.getZ(f), n = Math.max(n, c.distanceToSquared(a));
        }
        this.boundingSphere.radius = Math.sqrt(n);
        isNaN(this.boundingSphere.radius) && console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
      }
    };
  }(), computeFaceNormals:function() {
  }, computeVertexNormals:function() {
    var d = this.index, a = this.attributes, b = this.groups;
    if (a.position) {
      var c = a.position.array;
      if (void 0 === a.normal) {
        this.addAttribute("normal", new ja(new Float32Array(c.length), 3));
      } else {
        for (var e = a.normal.array, m = 0, g = e.length;m < g;m++) {
          e[m] = 0;
        }
      }
      var e = a.normal.array, k, q, p, h = new f, r = new f, t = new f, l = new f, w = new f;
      if (d) {
        d = d.array;
        0 === b.length && this.addGroup(0, d.length);
        for (var u = 0, v = b.length;u < v;++u) {
          for (m = b[u], g = m.start, k = m.count, m = g, g += k;m < g;m += 3) {
            k = 3 * d[m + 0], q = 3 * d[m + 1], p = 3 * d[m + 2], h.fromArray(c, k), r.fromArray(c, q), t.fromArray(c, p), l.subVectors(t, r), w.subVectors(h, r), l.cross(w), e[k] += l.x, e[k + 1] += l.y, e[k + 2] += l.z, e[q] += l.x, e[q + 1] += l.y, e[q + 2] += l.z, e[p] += l.x, e[p + 1] += l.y, e[p + 2] += l.z;
          }
        }
      } else {
        for (m = 0, g = c.length;m < g;m += 9) {
          h.fromArray(c, m), r.fromArray(c, m + 3), t.fromArray(c, m + 6), l.subVectors(t, r), w.subVectors(h, r), l.cross(w), e[m] = l.x, e[m + 1] = l.y, e[m + 2] = l.z, e[m + 3] = l.x, e[m + 4] = l.y, e[m + 5] = l.z, e[m + 6] = l.x, e[m + 7] = l.y, e[m + 8] = l.z;
        }
      }
      this.normalizeNormals();
      a.normal.needsUpdate = !0;
    }
  }, merge:function(d, a) {
    if (!1 === (d && d.isBufferGeometry)) {
      console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.", d);
    } else {
      void 0 === a && (a = 0);
      var b = this.attributes, c;
      for (c in b) {
        if (void 0 !== d.attributes[c]) {
          for (var n = b[c].array, e = d.attributes[c], f = e.array, m = 0, e = e.itemSize * a;m < f.length;m++, e++) {
            n[e] = f[m];
          }
        }
      }
      return this;
    }
  }, normalizeNormals:function() {
    for (var d = this.attributes.normal, a, b, c, e, f = 0, m = d.count;f < m;f++) {
      a = d.getX(f), b = d.getY(f), c = d.getZ(f), e = 1 / Math.sqrt(a * a + b * b + c * c), d.setXYZ(f, a * e, b * e, c * e);
    }
  }, toNonIndexed:function() {
    if (null === this.index) {
      return console.warn("THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed."), this;
    }
    var d = new ea, a = this.index.array, b = this.attributes, c;
    for (c in b) {
      for (var e = b[c], f = e.array, e = e.itemSize, m = new f.constructor(a.length * e), g, k = 0, q = 0, p = a.length;q < p;q++) {
        g = a[q] * e;
        for (var h = 0;h < e;h++) {
          m[k++] = f[g++];
        }
      }
      d.addAttribute(c, new ja(m, e));
    }
    return d;
  }, toJSON:function() {
    var d = {metadata:{version:4.4, type:"BufferGeometry", generator:"BufferGeometry.toJSON"}};
    d.uuid = this.uuid;
    d.type = this.type;
    "" !== this.name && (d.name = this.name);
    if (void 0 !== this.parameters) {
      var a = this.parameters, b;
      for (b in a) {
        void 0 !== a[b] && (d[b] = a[b]);
      }
      return d;
    }
    d.data = {attributes:{}};
    var c = this.index;
    null !== c && (a = Array.prototype.slice.call(c.array), d.data.index = {type:c.array.constructor.name, array:a});
    c = this.attributes;
    for (b in c) {
      var e = c[b], a = Array.prototype.slice.call(e.array);
      d.data.attributes[b] = {itemSize:e.itemSize, type:e.array.constructor.name, array:a, normalized:e.normalized};
    }
    b = this.groups;
    0 < b.length && (d.data.groups = JSON.parse(JSON.stringify(b)));
    b = this.boundingSphere;
    null !== b && (d.data.boundingSphere = {center:b.center.toArray(), radius:b.radius});
    return d;
  }, clone:function() {
    return (new ea).copy(this);
  }, copy:function(d) {
    var a, b, c;
    this.index = null;
    this.attributes = {};
    this.morphAttributes = {};
    this.groups = [];
    this.boundingSphere = this.boundingBox = null;
    this.name = d.name;
    b = d.index;
    null !== b && this.setIndex(b.clone());
    b = d.attributes;
    for (a in b) {
      this.addAttribute(a, b[a].clone());
    }
    var e = d.morphAttributes;
    for (a in e) {
      var f = [], m = e[a];
      b = 0;
      for (c = m.length;b < c;b++) {
        f.push(m[b].clone());
      }
      this.morphAttributes[a] = f;
    }
    a = d.groups;
    b = 0;
    for (c = a.length;b < c;b++) {
      e = a[b], this.addGroup(e.start, e.count, e.materialIndex);
    }
    a = d.boundingBox;
    null !== a && (this.boundingBox = a.clone());
    a = d.boundingSphere;
    null !== a && (this.boundingSphere = a.clone());
    this.drawRange.start = d.drawRange.start;
    this.drawRange.count = d.drawRange.count;
    return this;
  }, dispose:function() {
    this.dispatchEvent({type:"dispose"});
  }});
  Ia.prototype = Object.assign(Object.create(aa.prototype), {constructor:Ia, isMesh:!0, setDrawMode:function(d) {
    this.drawMode = d;
  }, copy:function(d) {
    aa.prototype.copy.call(this, d);
    this.drawMode = d.drawMode;
    return this;
  }, updateMorphTargets:function() {
    var d = this.geometry.morphTargets;
    if (void 0 !== d && 0 < d.length) {
      this.morphTargetInfluences = [];
      this.morphTargetDictionary = {};
      for (var a = 0, b = d.length;a < b;a++) {
        this.morphTargetInfluences.push(0), this.morphTargetDictionary[d[a].name] = a;
      }
    }
  }, raycast:function() {
    function d(d, a, b, c, n, e, f) {
      Ja.barycoordFromPoint(d, a, b, c, C);
      n.multiplyScalar(C.x);
      e.multiplyScalar(C.y);
      f.multiplyScalar(C.z);
      n.add(e).add(f);
      return n.clone();
    }
    function a(d, a, b, c, n, e, f) {
      var m = d.material;
      if (null === (1 === m.side ? b.intersectTriangle(e, n, c, !0, f) : b.intersectTriangle(c, n, e, 2 !== m.side, f))) {
        return null;
      }
      A.copy(f);
      A.applyMatrix4(d.matrixWorld);
      b = a.ray.origin.distanceTo(A);
      return b < a.near || b > a.far ? null : {distance:b, point:A.clone(), object:d};
    }
    function b(b, c, n, e, f, m, q, h) {
      g.fromBufferAttribute(e, m);
      k.fromBufferAttribute(e, q);
      p.fromBufferAttribute(e, h);
      if (b = a(b, c, n, g, k, p, y)) {
        f && (w.fromBufferAttribute(f, m), u.fromBufferAttribute(f, q), v.fromBufferAttribute(f, h), b.uv = d(y, g, k, p, w, u, v)), b.face = new Ha(m, q, h, Ja.normal(g, k, p)), b.faceIndex = m;
      }
      return b;
    }
    var c = new q, e = new qb, m = new Ca, g = new f, k = new f, p = new f, h = new f, r = new f, t = new f, w = new l, u = new l, v = new l, C = new f, y = new f, A = new f;
    return function(n, f) {
      var q = this.geometry, l = this.material, z = this.matrixWorld;
      if (void 0 !== l && (null === q.boundingSphere && q.computeBoundingSphere(), m.copy(q.boundingSphere), m.applyMatrix4(z), !1 !== n.ray.intersectsSphere(m) && (c.getInverse(z), e.copy(n.ray).applyMatrix4(c), null === q.boundingBox || !1 !== e.intersectsBox(q.boundingBox)))) {
        var E;
        if (q.isBufferGeometry) {
          var C, A, l = q.index, x = q.attributes.position, z = q.attributes.uv, B, T;
          if (null !== l) {
            for (B = 0, T = l.count;B < T;B += 3) {
              if (q = l.getX(B), C = l.getX(B + 1), A = l.getX(B + 2), E = b(this, n, e, x, z, q, C, A)) {
                E.faceIndex = Math.floor(B / 3), f.push(E);
              }
            }
          } else {
            for (B = 0, T = x.count;B < T;B += 3) {
              if (q = B, C = B + 1, A = B + 2, E = b(this, n, e, x, z, q, C, A)) {
                E.index = q, f.push(E);
              }
            }
          }
        } else {
          if (q.isGeometry) {
            var F, z = Array.isArray(l);
            B = q.vertices;
            T = q.faces;
            C = q.faceVertexUvs[0];
            0 < C.length && (x = C);
            for (var I = 0, G = T.length;I < G;I++) {
              var D = T[I];
              E = z ? l[D.materialIndex] : l;
              if (void 0 !== E) {
                C = B[D.a];
                A = B[D.b];
                F = B[D.c];
                if (!0 === E.morphTargets) {
                  E = q.morphTargets;
                  var U = this.morphTargetInfluences;
                  g.set(0, 0, 0);
                  k.set(0, 0, 0);
                  p.set(0, 0, 0);
                  for (var V = 0, K = E.length;V < K;V++) {
                    var H = U[V];
                    if (0 !== H) {
                      var W = E[V].vertices;
                      g.addScaledVector(h.subVectors(W[D.a], C), H);
                      k.addScaledVector(r.subVectors(W[D.b], A), H);
                      p.addScaledVector(t.subVectors(W[D.c], F), H);
                    }
                  }
                  g.add(C);
                  k.add(A);
                  p.add(F);
                  C = g;
                  A = k;
                  F = p;
                }
                if (E = a(this, n, e, C, A, F, y)) {
                  x && x[I] && (U = x[I], w.copy(U[0]), u.copy(U[1]), v.copy(U[2]), E.uv = d(y, C, A, F, w, u, v)), E.face = D, E.faceIndex = I, f.push(E);
                }
              }
            }
          }
        }
      }
    };
  }(), clone:function() {
    return (new this.constructor(this.geometry, this.material)).copy(this);
  }});
  Oa.prototype = Object.create(ga.prototype);
  Oa.prototype.constructor = Oa;
  Ua.prototype = Object.create(ea.prototype);
  Ua.prototype.constructor = Ua;
  Ga.prototype = Object.create(ga.prototype);
  Ga.prototype.constructor = Ga;
  Cb.prototype = Object.create(ea.prototype);
  Cb.prototype.constructor = Cb;
  Ka.prototype = Object.assign(Object.create(aa.prototype), {constructor:Ka, isCamera:!0, copy:function(d) {
    aa.prototype.copy.call(this, d);
    this.matrixWorldInverse.copy(d.matrixWorldInverse);
    this.projectionMatrix.copy(d.projectionMatrix);
    return this;
  }, getWorldDirection:function() {
    var d = new e;
    return function(a) {
      a = a || new f;
      this.getWorldQuaternion(d);
      return a.set(0, 0, -1).applyQuaternion(d);
    };
  }(), clone:function() {
    return (new this.constructor).copy(this);
  }});
  Ma.prototype = Object.assign(Object.create(Ka.prototype), {constructor:Ma, isPerspectiveCamera:!0, copy:function(d) {
    Ka.prototype.copy.call(this, d);
    this.fov = d.fov;
    this.zoom = d.zoom;
    this.near = d.near;
    this.far = d.far;
    this.focus = d.focus;
    this.aspect = d.aspect;
    this.view = null === d.view ? null : Object.assign({}, d.view);
    this.filmGauge = d.filmGauge;
    this.filmOffset = d.filmOffset;
    return this;
  }, setFocalLength:function(d) {
    d = .5 * this.getFilmHeight() / d;
    this.fov = 2 * na.RAD2DEG * Math.atan(d);
    this.updateProjectionMatrix();
  }, getFocalLength:function() {
    var d = Math.tan(.5 * na.DEG2RAD * this.fov);
    return .5 * this.getFilmHeight() / d;
  }, getEffectiveFOV:function() {
    return 2 * na.RAD2DEG * Math.atan(Math.tan(.5 * na.DEG2RAD * this.fov) / this.zoom);
  }, getFilmWidth:function() {
    return this.filmGauge * Math.min(this.aspect, 1);
  }, getFilmHeight:function() {
    return this.filmGauge / Math.max(this.aspect, 1);
  }, setViewOffset:function(d, a, b, c, e, f) {
    this.aspect = d / a;
    this.view = {fullWidth:d, fullHeight:a, offsetX:b, offsetY:c, width:e, height:f};
    this.updateProjectionMatrix();
  }, clearViewOffset:function() {
    this.view = null;
    this.updateProjectionMatrix();
  }, updateProjectionMatrix:function() {
    var d = this.near, a = d * Math.tan(.5 * na.DEG2RAD * this.fov) / this.zoom, b = 2 * a, c = this.aspect * b, e = -.5 * c, f = this.view;
    if (null !== f) {
      var m = f.fullWidth, g = f.fullHeight, e = e + f.offsetX * c / m, a = a - f.offsetY * b / g, c = f.width / m * c, b = f.height / g * b;
    }
    f = this.filmOffset;
    0 !== f && (e += d * f / this.getFilmWidth());
    this.projectionMatrix.makePerspective(e, e + c, a, a - b, d, this.far);
  }, toJSON:function(d) {
    d = aa.prototype.toJSON.call(this, d);
    d.object.fov = this.fov;
    d.object.zoom = this.zoom;
    d.object.near = this.near;
    d.object.far = this.far;
    d.object.focus = this.focus;
    d.object.aspect = this.aspect;
    null !== this.view && (d.object.view = Object.assign({}, this.view));
    d.object.filmGauge = this.filmGauge;
    d.object.filmOffset = this.filmOffset;
    return d;
  }});
  Wb.prototype = Object.assign(Object.create(Ka.prototype), {constructor:Wb, isOrthographicCamera:!0, copy:function(d) {
    Ka.prototype.copy.call(this, d);
    this.left = d.left;
    this.right = d.right;
    this.top = d.top;
    this.bottom = d.bottom;
    this.near = d.near;
    this.far = d.far;
    this.zoom = d.zoom;
    this.view = null === d.view ? null : Object.assign({}, d.view);
    return this;
  }, setViewOffset:function(d, a, b, c, e, f) {
    this.view = {fullWidth:d, fullHeight:a, offsetX:b, offsetY:c, width:e, height:f};
    this.updateProjectionMatrix();
  }, clearViewOffset:function() {
    this.view = null;
    this.updateProjectionMatrix();
  }, updateProjectionMatrix:function() {
    var d = (this.right - this.left) / (2 * this.zoom), a = (this.top - this.bottom) / (2 * this.zoom), b = (this.right + this.left) / 2, c = (this.top + this.bottom) / 2, e = b - d, b = b + d, d = c + a, a = c - a;
    if (null !== this.view) {
      var b = this.zoom / (this.view.width / this.view.fullWidth), a = this.zoom / (this.view.height / this.view.fullHeight), f = (this.right - this.left) / this.view.width, c = (this.top - this.bottom) / this.view.height, e = e + this.view.offsetX / b * f, b = e + this.view.width / b * f, d = d - this.view.offsetY / a * c, a = d - this.view.height / a * c;
    }
    this.projectionMatrix.makeOrthographic(e, b, d, a, this.near, this.far);
  }, toJSON:function(d) {
    d = aa.prototype.toJSON.call(this, d);
    d.object.zoom = this.zoom;
    d.object.left = this.left;
    d.object.right = this.right;
    d.object.top = this.top;
    d.object.bottom = this.bottom;
    d.object.near = this.near;
    d.object.far = this.far;
    null !== this.view && (d.object.view = Object.assign({}, this.view));
    return d;
  }});
  var qf = 0;
  Xb.prototype.isFogExp2 = !0;
  Xb.prototype.clone = function() {
    return new Xb(this.color.getHex(), this.density);
  };
  Xb.prototype.toJSON = function(d) {
    return {type:"FogExp2", color:this.color.getHex(), density:this.density};
  };
  Yb.prototype.isFog = !0;
  Yb.prototype.clone = function() {
    return new Yb(this.color.getHex(), this.near, this.far);
  };
  Yb.prototype.toJSON = function(d) {
    return {type:"Fog", color:this.color.getHex(), near:this.near, far:this.far};
  };
  ud.prototype = Object.assign(Object.create(aa.prototype), {constructor:ud, copy:function(d, a) {
    aa.prototype.copy.call(this, d, a);
    null !== d.background && (this.background = d.background.clone());
    null !== d.fog && (this.fog = d.fog.clone());
    null !== d.overrideMaterial && (this.overrideMaterial = d.overrideMaterial.clone());
    this.autoUpdate = d.autoUpdate;
    this.matrixAutoUpdate = d.matrixAutoUpdate;
    return this;
  }, toJSON:function(d) {
    var a = aa.prototype.toJSON.call(this, d);
    null !== this.background && (a.object.background = this.background.toJSON(d));
    null !== this.fog && (a.object.fog = this.fog.toJSON());
    return a;
  }});
  de.prototype = Object.assign(Object.create(aa.prototype), {constructor:de, isLensFlare:!0, copy:function(d) {
    aa.prototype.copy.call(this, d);
    this.positionScreen.copy(d.positionScreen);
    this.customUpdateCallback = d.customUpdateCallback;
    for (var a = 0, b = d.lensFlares.length;a < b;a++) {
      this.lensFlares.push(d.lensFlares[a]);
    }
    return this;
  }, add:function(d, a, b, c, e, f) {
    void 0 === a && (a = -1);
    void 0 === b && (b = 0);
    void 0 === f && (f = 1);
    void 0 === e && (e = new Z(16777215));
    void 0 === c && (c = 1);
    b = Math.min(b, Math.max(0, b));
    this.lensFlares.push({texture:d, size:a, distance:b, x:0, y:0, z:0, scale:1, rotation:0, opacity:f, color:e, blending:c});
  }, updateLensFlares:function() {
    var d, a = this.lensFlares.length, b, c = 2 * -this.positionScreen.x, e = 2 * -this.positionScreen.y;
    for (d = 0;d < a;d++) {
      b = this.lensFlares[d], b.x = this.positionScreen.x + c * b.distance, b.y = this.positionScreen.y + e * b.distance, b.wantedRotation = b.x * Math.PI * .25, b.rotation += .25 * (b.wantedRotation - b.rotation);
    }
  }});
  Ab.prototype = Object.create(X.prototype);
  Ab.prototype.constructor = Ab;
  Ab.prototype.isSpriteMaterial = !0;
  Ab.prototype.copy = function(d) {
    X.prototype.copy.call(this, d);
    this.color.copy(d.color);
    this.map = d.map;
    this.rotation = d.rotation;
    return this;
  };
  Ic.prototype = Object.assign(Object.create(aa.prototype), {constructor:Ic, isSprite:!0, raycast:function() {
    var d = new f, a = new f, b = new f;
    return function(c, n) {
      a.setFromMatrixPosition(this.matrixWorld);
      c.ray.closestPointToPoint(a, d);
      b.setFromMatrixScale(this.matrixWorld);
      var e = b.x * b.y / 4;
      a.distanceToSquared(d) > e || (e = c.ray.origin.distanceTo(d), e < c.near || e > c.far || n.push({distance:e, point:d.clone(), face:null, object:this}));
    };
  }(), clone:function() {
    return (new this.constructor(this.material)).copy(this);
  }});
  Jc.prototype = Object.assign(Object.create(aa.prototype), {constructor:Jc, copy:function(d) {
    aa.prototype.copy.call(this, d, !1);
    d = d.levels;
    for (var a = 0, b = d.length;a < b;a++) {
      var c = d[a];
      this.addLevel(c.object.clone(), c.distance);
    }
    return this;
  }, addLevel:function(d, a) {
    void 0 === a && (a = 0);
    a = Math.abs(a);
    for (var b = this.levels, c = 0;c < b.length && !(a < b[c].distance);c++) {
    }
    b.splice(c, 0, {distance:a, object:d});
    this.add(d);
  }, getObjectForDistance:function(d) {
    for (var a = this.levels, b = 1, c = a.length;b < c && !(d < a[b].distance);b++) {
    }
    return a[b - 1].object;
  }, raycast:function() {
    var d = new f;
    return function(a, b) {
      d.setFromMatrixPosition(this.matrixWorld);
      var c = a.ray.origin.distanceTo(d);
      this.getObjectForDistance(c).raycast(a, b);
    };
  }(), update:function() {
    var d = new f, a = new f;
    return function(b) {
      var c = this.levels;
      if (1 < c.length) {
        d.setFromMatrixPosition(b.matrixWorld);
        a.setFromMatrixPosition(this.matrixWorld);
        b = d.distanceTo(a);
        c[0].object.visible = !0;
        for (var n = 1, e = c.length;n < e;n++) {
          if (b >= c[n].distance) {
            c[n - 1].object.visible = !1, c[n].object.visible = !0;
          } else {
            break;
          }
        }
        for (;n < e;n++) {
          c[n].object.visible = !1;
        }
      }
    };
  }(), toJSON:function(d) {
    d = aa.prototype.toJSON.call(this, d);
    d.object.levels = [];
    for (var a = this.levels, b = 0, c = a.length;b < c;b++) {
      var e = a[b];
      d.object.levels.push({object:e.object.uuid, distance:e.distance});
    }
    return d;
  }});
  Object.assign(Kc.prototype, {calculateInverses:function() {
    this.boneInverses = [];
    for (var d = 0, a = this.bones.length;d < a;d++) {
      var b = new q;
      this.bones[d] && b.getInverse(this.bones[d].matrixWorld);
      this.boneInverses.push(b);
    }
  }, pose:function() {
    var d, a, b;
    a = 0;
    for (b = this.bones.length;a < b;a++) {
      (d = this.bones[a]) && d.matrixWorld.getInverse(this.boneInverses[a]);
    }
    a = 0;
    for (b = this.bones.length;a < b;a++) {
      if (d = this.bones[a]) {
        d.parent && d.parent.isBone ? (d.matrix.getInverse(d.parent.matrixWorld), d.matrix.multiply(d.matrixWorld)) : d.matrix.copy(d.matrixWorld), d.matrix.decompose(d.position, d.quaternion, d.scale);
      }
    }
  }, update:function() {
    var d = new q, a = new q;
    return function() {
      for (var b = this.bones, c = this.boneInverses, n = this.boneMatrices, e = this.boneTexture, f = 0, m = b.length;f < m;f++) {
        d.multiplyMatrices(b[f] ? b[f].matrixWorld : a, c[f]), d.toArray(n, 16 * f);
      }
      void 0 !== e && (e.needsUpdate = !0);
    };
  }(), clone:function() {
    return new Kc(this.bones, this.boneInverses);
  }});
  vd.prototype = Object.assign(Object.create(aa.prototype), {constructor:vd, isBone:!0});
  wd.prototype = Object.assign(Object.create(Ia.prototype), {constructor:wd, isSkinnedMesh:!0, initBones:function() {
    var d = [], a, b, c, e;
    if (this.geometry && void 0 !== this.geometry.bones) {
      c = 0;
      for (e = this.geometry.bones.length;c < e;c++) {
        b = this.geometry.bones[c], a = new vd, d.push(a), a.name = b.name, a.position.fromArray(b.pos), a.quaternion.fromArray(b.rotq), void 0 !== b.scl && a.scale.fromArray(b.scl);
      }
      c = 0;
      for (e = this.geometry.bones.length;c < e;c++) {
        b = this.geometry.bones[c], -1 !== b.parent && null !== b.parent && void 0 !== d[b.parent] ? d[b.parent].add(d[c]) : this.add(d[c]);
      }
    }
    this.updateMatrixWorld(!0);
    return d;
  }, bind:function(d, a) {
    this.skeleton = d;
    void 0 === a && (this.updateMatrixWorld(!0), this.skeleton.calculateInverses(), a = this.matrixWorld);
    this.bindMatrix.copy(a);
    this.bindMatrixInverse.getInverse(a);
  }, pose:function() {
    this.skeleton.pose();
  }, normalizeSkinWeights:function() {
    var d, a;
    if (this.geometry && this.geometry.isGeometry) {
      for (a = 0;a < this.geometry.skinWeights.length;a++) {
        var b = this.geometry.skinWeights[a];
        d = 1 / b.lengthManhattan();
        Infinity !== d ? b.multiplyScalar(d) : b.set(1, 0, 0, 0);
      }
    } else {
      if (this.geometry && this.geometry.isBufferGeometry) {
        var b = new g, c = this.geometry.attributes.skinWeight;
        for (a = 0;a < c.count;a++) {
          b.x = c.getX(a), b.y = c.getY(a), b.z = c.getZ(a), b.w = c.getW(a), d = 1 / b.lengthManhattan(), Infinity !== d ? b.multiplyScalar(d) : b.set(1, 0, 0, 0), c.setXYZW(a, b.x, b.y, b.z, b.w);
        }
      }
    }
  }, updateMatrixWorld:function(d) {
    Ia.prototype.updateMatrixWorld.call(this, d);
    "attached" === this.bindMode ? this.bindMatrixInverse.getInverse(this.matrixWorld) : "detached" === this.bindMode ? this.bindMatrixInverse.getInverse(this.bindMatrix) : console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode);
  }, clone:function() {
    return (new this.constructor(this.geometry, this.material)).copy(this);
  }});
  za.prototype = Object.create(X.prototype);
  za.prototype.constructor = za;
  za.prototype.isLineBasicMaterial = !0;
  za.prototype.copy = function(d) {
    X.prototype.copy.call(this, d);
    this.color.copy(d.color);
    this.linewidth = d.linewidth;
    this.linecap = d.linecap;
    this.linejoin = d.linejoin;
    return this;
  };
  cb.prototype = Object.assign(Object.create(aa.prototype), {constructor:cb, isLine:!0, raycast:function() {
    var d = new q, a = new qb, b = new Ca;
    return function(c, n) {
      var e = c.linePrecision, e = e * e, m = this.geometry, g = this.matrixWorld;
      null === m.boundingSphere && m.computeBoundingSphere();
      b.copy(m.boundingSphere);
      b.applyMatrix4(g);
      if (!1 !== c.ray.intersectsSphere(b)) {
        d.getInverse(g);
        a.copy(c.ray).applyMatrix4(d);
        var k = new f, q = new f, g = new f, p = new f, h = this && this.isLineSegments ? 2 : 1;
        if (m.isBufferGeometry) {
          var r = m.index, t = m.attributes.position.array;
          if (null !== r) {
            for (var r = r.array, m = 0, l = r.length - 1;m < l;m += h) {
              var w = r[m + 1];
              k.fromArray(t, 3 * r[m]);
              q.fromArray(t, 3 * w);
              w = a.distanceSqToSegment(k, q, p, g);
              w > e || (p.applyMatrix4(this.matrixWorld), w = c.ray.origin.distanceTo(p), w < c.near || w > c.far || n.push({distance:w, point:g.clone().applyMatrix4(this.matrixWorld), index:m, face:null, faceIndex:null, object:this}));
            }
          } else {
            for (m = 0, l = t.length / 3 - 1;m < l;m += h) {
              k.fromArray(t, 3 * m), q.fromArray(t, 3 * m + 3), w = a.distanceSqToSegment(k, q, p, g), w > e || (p.applyMatrix4(this.matrixWorld), w = c.ray.origin.distanceTo(p), w < c.near || w > c.far || n.push({distance:w, point:g.clone().applyMatrix4(this.matrixWorld), index:m, face:null, faceIndex:null, object:this}));
            }
          }
        } else {
          if (m.isGeometry) {
            for (k = m.vertices, q = k.length, m = 0;m < q - 1;m += h) {
              w = a.distanceSqToSegment(k[m], k[m + 1], p, g), w > e || (p.applyMatrix4(this.matrixWorld), w = c.ray.origin.distanceTo(p), w < c.near || w > c.far || n.push({distance:w, point:g.clone().applyMatrix4(this.matrixWorld), index:m, face:null, faceIndex:null, object:this}));
            }
          }
        }
      }
    };
  }(), clone:function() {
    return (new this.constructor(this.geometry, this.material)).copy(this);
  }});
  wa.prototype = Object.assign(Object.create(cb.prototype), {constructor:wa, isLineSegments:!0});
  xd.prototype = Object.assign(Object.create(cb.prototype), {constructor:xd, isLineLoop:!0});
  db.prototype = Object.create(X.prototype);
  db.prototype.constructor = db;
  db.prototype.isPointsMaterial = !0;
  db.prototype.copy = function(d) {
    X.prototype.copy.call(this, d);
    this.color.copy(d.color);
    this.map = d.map;
    this.size = d.size;
    this.sizeAttenuation = d.sizeAttenuation;
    return this;
  };
  Zb.prototype = Object.assign(Object.create(aa.prototype), {constructor:Zb, isPoints:!0, raycast:function() {
    var d = new q, a = new qb, b = new Ca;
    return function(c, n) {
      function e(d, b) {
        var e = a.distanceSqToPoint(d);
        if (e < p) {
          d = a.closestPointToPoint(d);
          d.applyMatrix4(k);
          var f = c.ray.origin.distanceTo(d);
          f < c.near || f > c.far || n.push({distance:f, distanceToRay:Math.sqrt(e), point:d.clone(), index:b, face:null, object:m});
        }
      }
      var m = this, g = this.geometry, k = this.matrixWorld, q = c.params.Points.threshold;
      null === g.boundingSphere && g.computeBoundingSphere();
      b.copy(g.boundingSphere);
      b.applyMatrix4(k);
      b.radius += q;
      if (!1 !== c.ray.intersectsSphere(b)) {
        d.getInverse(k);
        a.copy(c.ray).applyMatrix4(d);
        var q = q / ((this.scale.x + this.scale.y + this.scale.z) / 3), p = q * q, q = new f;
        if (g.isBufferGeometry) {
          var h = g.index, g = g.attributes.position.array;
          if (null !== h) {
            for (var r = h.array, h = 0, t = r.length;h < t;h++) {
              var l = r[h];
              q.fromArray(g, 3 * l);
              e(q, l);
            }
          } else {
            for (h = 0, r = g.length / 3;h < r;h++) {
              q.fromArray(g, 3 * h), e(q, h);
            }
          }
        } else {
          for (q = g.vertices, h = 0, r = q.length;h < r;h++) {
            e(q[h], h);
          }
        }
      }
    };
  }(), clone:function() {
    return (new this.constructor(this.geometry, this.material)).copy(this);
  }});
  Lc.prototype = Object.assign(Object.create(aa.prototype), {constructor:Lc});
  yd.prototype = Object.create(b.prototype);
  yd.prototype.constructor = yd;
  $b.prototype = Object.create(b.prototype);
  $b.prototype.constructor = $b;
  $b.prototype.isCompressedTexture = !0;
  zd.prototype = Object.create(b.prototype);
  zd.prototype.constructor = zd;
  Mc.prototype = Object.create(b.prototype);
  Mc.prototype.constructor = Mc;
  Mc.prototype.isDepthTexture = !0;
  ac.prototype = Object.create(ea.prototype);
  ac.prototype.constructor = ac;
  Nc.prototype = Object.create(ga.prototype);
  Nc.prototype.constructor = Nc;
  bc.prototype = Object.create(ea.prototype);
  bc.prototype.constructor = bc;
  Oc.prototype = Object.create(ga.prototype);
  Oc.prototype.constructor = Oc;
  Pa.prototype = Object.create(ea.prototype);
  Pa.prototype.constructor = Pa;
  Pc.prototype = Object.create(ga.prototype);
  Pc.prototype.constructor = Pc;
  cc.prototype = Object.create(Pa.prototype);
  cc.prototype.constructor = cc;
  Qc.prototype = Object.create(ga.prototype);
  Qc.prototype.constructor = Qc;
  Gb.prototype = Object.create(Pa.prototype);
  Gb.prototype.constructor = Gb;
  Rc.prototype = Object.create(ga.prototype);
  Rc.prototype.constructor = Rc;
  dc.prototype = Object.create(Pa.prototype);
  dc.prototype.constructor = dc;
  Sc.prototype = Object.create(ga.prototype);
  Sc.prototype.constructor = Sc;
  ec.prototype = Object.create(Pa.prototype);
  ec.prototype.constructor = ec;
  Tc.prototype = Object.create(ga.prototype);
  Tc.prototype.constructor = Tc;
  fc.prototype = Object.create(ea.prototype);
  fc.prototype.constructor = fc;
  Uc.prototype = Object.create(ga.prototype);
  Uc.prototype.constructor = Uc;
  gc.prototype = Object.create(ea.prototype);
  gc.prototype.constructor = gc;
  Vc.prototype = Object.create(ga.prototype);
  Vc.prototype.constructor = Vc;
  hc.prototype = Object.create(ea.prototype);
  hc.prototype.constructor = hc;
  var fb = {area:function(d) {
    for (var a = d.length, b = 0, c = a - 1, e = 0;e < a;c = e++) {
      b += d[c].x * d[e].y - d[e].x * d[c].y;
    }
    return .5 * b;
  }, triangulate:function() {
    return function(d, a) {
      var b = d.length;
      if (3 > b) {
        return null;
      }
      var c = [], n = [], e = [], f, m, g;
      if (0 < fb.area(d)) {
        for (m = 0;m < b;m++) {
          n[m] = m;
        }
      } else {
        for (m = 0;m < b;m++) {
          n[m] = b - 1 - m;
        }
      }
      var k = 2 * b;
      for (m = b - 1;2 < b;) {
        if (0 >= k--) {
          console.warn("THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()");
          break;
        }
        f = m;
        b <= f && (f = 0);
        m = f + 1;
        b <= m && (m = 0);
        g = m + 1;
        b <= g && (g = 0);
        var q;
        a: {
          var p, h, r, t, l, w, u, v;
          p = d[n[f]].x;
          h = d[n[f]].y;
          r = d[n[m]].x;
          t = d[n[m]].y;
          l = d[n[g]].x;
          w = d[n[g]].y;
          if (0 >= (r - p) * (w - h) - (t - h) * (l - p)) {
            q = !1;
          } else {
            var C, y, A, x, B, F, I, G, D, V;
            C = l - r;
            y = w - t;
            A = p - l;
            x = h - w;
            B = r - p;
            F = t - h;
            for (q = 0;q < b;q++) {
              if (u = d[n[q]].x, v = d[n[q]].y, !(u === p && v === h || u === r && v === t || u === l && v === w) && (I = u - p, G = v - h, D = u - r, V = v - t, u -= l, v -= w, D = C * V - y * D, I = B * G - F * I, G = A * v - x * u, D >= -Number.EPSILON && G >= -Number.EPSILON && I >= -Number.EPSILON)) {
                q = !1;
                break a;
              }
            }
            q = !0;
          }
        }
        if (q) {
          c.push([d[n[f]], d[n[m]], d[n[g]]]);
          e.push([n[f], n[m], n[g]]);
          f = m;
          for (g = m + 1;g < b;f++, g++) {
            n[f] = n[g];
          }
          b--;
          k = 2 * b;
        }
      }
      return a ? e : c;
    };
  }(), triangulateShape:function(d, a) {
    function b(d) {
      var a = d.length;
      2 < a && d[a - 1].equals(d[0]) && d.pop();
    }
    function c(d, a, b) {
      return d.x !== a.x ? d.x < a.x ? d.x <= b.x && b.x <= a.x : a.x <= b.x && b.x <= d.x : d.y < a.y ? d.y <= b.y && b.y <= a.y : a.y <= b.y && b.y <= d.y;
    }
    function n(d, a, b, n, e) {
      var f = a.x - d.x, m = a.y - d.y, g = n.x - b.x, k = n.y - b.y, q = d.x - b.x, p = d.y - b.y, h = m * g - f * k, r = m * q - f * p;
      if (Math.abs(h) > Number.EPSILON) {
        if (0 < h) {
          if (0 > r || r > h) {
            return [];
          }
          g = k * q - g * p;
          if (0 > g || g > h) {
            return [];
          }
        } else {
          if (0 < r || r < h) {
            return [];
          }
          g = k * q - g * p;
          if (0 < g || g < h) {
            return [];
          }
        }
        if (0 === g) {
          return !e || 0 !== r && r !== h ? [d] : [];
        }
        if (g === h) {
          return !e || 0 !== r && r !== h ? [a] : [];
        }
        if (0 === r) {
          return [b];
        }
        if (r === h) {
          return [n];
        }
        e = g / h;
        return [{x:d.x + e * f, y:d.y + e * m}];
      }
      if (0 !== r || k * q !== g * p) {
        return [];
      }
      m = 0 === f && 0 === m;
      g = 0 === g && 0 === k;
      if (m && g) {
        return d.x !== b.x || d.y !== b.y ? [] : [d];
      }
      if (m) {
        return c(b, n, d) ? [d] : [];
      }
      if (g) {
        return c(d, a, b) ? [b] : [];
      }
      0 !== f ? (d.x < a.x ? (f = d, g = d.x, m = a, d = a.x) : (f = a, g = a.x, m = d, d = d.x), b.x < n.x ? (a = b, h = b.x, k = n, b = n.x) : (a = n, h = n.x, k = b, b = b.x)) : (d.y < a.y ? (f = d, g = d.y, m = a, d = a.y) : (f = a, g = a.y, m = d, d = d.y), b.y < n.y ? (a = b, h = b.y, k = n, b = n.y) : (a = n, h = n.y, k = b, b = b.y));
      return g <= h ? d < h ? [] : d === h ? e ? [] : [a] : d <= b ? [a, m] : [a, k] : g > b ? [] : g === b ? e ? [] : [f] : d <= b ? [f, m] : [f, k];
    }
    function e(d, a, b, c) {
      var n = a.x - d.x, e = a.y - d.y;
      a = b.x - d.x;
      b = b.y - d.y;
      var f = c.x - d.x;
      c = c.y - d.y;
      d = n * b - e * a;
      n = n * c - e * f;
      return Math.abs(d) > Number.EPSILON ? (a = f * b - c * a, 0 < d ? 0 <= n && 0 <= a : 0 <= n || 0 <= a) : 0 < n;
    }
    b(d);
    a.forEach(b);
    var f, m, g, k, q = {};
    g = d.concat();
    f = 0;
    for (m = a.length;f < m;f++) {
      Array.prototype.push.apply(g, a[f]);
    }
    f = 0;
    for (m = g.length;f < m;f++) {
      k = g[f].x + ":" + g[f].y, void 0 !== q[k] && console.warn("THREE.ShapeUtils: Duplicate point", k, f), q[k] = f;
    }
    f = function(d, a) {
      function b(d, a) {
        var b = m.length - 1, c = d - 1;
        0 > c && (c = b);
        var n = d + 1;
        n > b && (n = 0);
        b = e(m[d], m[c], m[n], g[a]);
        if (!b) {
          return !1;
        }
        b = g.length - 1;
        c = a - 1;
        0 > c && (c = b);
        n = a + 1;
        n > b && (n = 0);
        return e(g[a], g[c], g[n], m[d]) ? !0 : !1;
      }
      function c(d, a) {
        var b, c;
        for (b = 0;b < m.length;b++) {
          if (c = b + 1, c %= m.length, c = n(d, a, m[b], m[c], !0), 0 < c.length) {
            return !0;
          }
        }
        return !1;
      }
      function f(d, b) {
        var c, e, f, m;
        for (c = 0;c < k.length;c++) {
          for (e = a[k[c]], f = 0;f < e.length;f++) {
            if (m = f + 1, m %= e.length, m = n(d, b, e[f], e[m], !0), 0 < m.length) {
              return !0;
            }
          }
        }
        return !1;
      }
      var m = d.concat(), g, k = [], q, p, h, r, t = [], l, w, z, u = 0;
      for (d = a.length;u < d;u++) {
        k.push(u);
      }
      l = 0;
      for (var v = 2 * k.length;0 < k.length;) {
        v--;
        if (0 > v) {
          console.log("Infinite Loop! Holes left:" + k.length + ", Probably Hole outside Shape!");
          break;
        }
        for (q = l;q < m.length;q++) {
          p = m[q];
          d = -1;
          for (u = 0;u < k.length;u++) {
            if (h = k[u], r = p.x + ":" + p.y + ":" + h, void 0 === t[r]) {
              g = a[h];
              for (w = 0;w < g.length;w++) {
                if (h = g[w], b(q, w) && !c(p, h) && !f(p, h)) {
                  d = w;
                  k.splice(u, 1);
                  l = m.slice(0, q + 1);
                  h = m.slice(q);
                  w = g.slice(d);
                  z = g.slice(0, d + 1);
                  m = l.concat(w).concat(z).concat(h);
                  l = q;
                  break;
                }
              }
              if (0 <= d) {
                break;
              }
              t[r] = !0;
            }
          }
          if (0 <= d) {
            break;
          }
        }
      }
      return m;
    }(d, a);
    a = fb.triangulate(f, !1);
    f = 0;
    for (m = a.length;f < m;f++) {
      for (d = a[f], g = 0;3 > g;g++) {
        k = d[g].x + ":" + d[g].y, k = q[k], void 0 !== k && (d[g] = k);
      }
    }
    return a.concat();
  }, isClockWise:function(d) {
    return 0 > fb.area(d);
  }};
  Bb.prototype = Object.create(ga.prototype);
  Bb.prototype.constructor = Bb;
  eb.prototype = Object.create(ea.prototype);
  eb.prototype.constructor = eb;
  eb.prototype.getArrays = function() {
    var d = this.getAttribute("position"), d = d ? Array.prototype.slice.call(d.array) : [], a = this.getAttribute("uv"), a = a ? Array.prototype.slice.call(a.array) : [], b = this.index, b = b ? Array.prototype.slice.call(b.array) : [];
    return {position:d, uv:a, index:b};
  };
  eb.prototype.addShapeList = function(d, a) {
    var b = d.length;
    a.arrays = this.getArrays();
    for (var c = 0;c < b;c++) {
      this.addShape(d[c], a);
    }
    this.setIndex(a.arrays.index);
    this.addAttribute("position", new Y(a.arrays.position, 3));
    this.addAttribute("uv", new Y(a.arrays.uv, 2));
  };
  eb.prototype.addShape = function(d, a) {
    function b(d, a, b) {
      a || console.error("THREE.ExtrudeGeometry: vec does not exist");
      return a.clone().multiplyScalar(b).add(d);
    }
    function c(d, a, b) {
      var c, e, n;
      e = d.x - a.x;
      n = d.y - a.y;
      c = b.x - d.x;
      var f = b.y - d.y, m = e * e + n * n;
      if (Math.abs(e * f - n * c) > Number.EPSILON) {
        var g = Math.sqrt(m), k = Math.sqrt(c * c + f * f), m = a.x - n / g;
        a = a.y + e / g;
        f = ((b.x - f / k - m) * f - (b.y + c / k - a) * c) / (e * f - n * c);
        c = m + e * f - d.x;
        e = a + n * f - d.y;
        n = c * c + e * e;
        if (2 >= n) {
          return new l(c, e);
        }
        n = Math.sqrt(n / 2);
      } else {
        d = !1, e > Number.EPSILON ? c > Number.EPSILON && (d = !0) : e < -Number.EPSILON ? c < -Number.EPSILON && (d = !0) : Math.sign(n) === Math.sign(f) && (d = !0), d ? (c = -n, n = Math.sqrt(m)) : (c = e, e = n, n = Math.sqrt(m / 2));
      }
      return new l(c / n, e / n);
    }
    function e(d, a) {
      var b, c;
      for (Q = d.length;0 <= --Q;) {
        b = Q;
        c = Q - 1;
        0 > c && (c = d.length - 1);
        var e, n = A + 2 * v;
        for (e = 0;e < n;e++) {
          var f = da * e, m = da * (e + 1), q = a + c + f, h = a + c + m, m = a + b + m;
          g(a + b + f);
          g(q);
          g(m);
          g(q);
          g(h);
          g(m);
          f = p.length / 3;
          f = I.generateSideWallUV(R, p, f - 6, f - 3, f - 2, f - 1);
          k(f[0]);
          k(f[1]);
          k(f[3]);
          k(f[1]);
          k(f[2]);
          k(f[3]);
        }
      }
    }
    function n(d, a, b) {
      t.push(d);
      t.push(a);
      t.push(b);
    }
    function m(d, a, b) {
      g(d);
      g(a);
      g(b);
      d = p.length / 3;
      d = I.generateTopUV(R, p, d - 3, d - 2, d - 1);
      k(d[0]);
      k(d[1]);
      k(d[2]);
    }
    function g(d) {
      h.push(p.length / 3);
      p.push(t[3 * d + 0]);
      p.push(t[3 * d + 1]);
      p.push(t[3 * d + 2]);
    }
    function k(d) {
      r.push(d.x);
      r.push(d.y);
    }
    var q = a.arrays ? a.arrays : this.getArrays(), p = q.position, h = q.index, r = q.uv, t = [], q = void 0 !== a.amount ? a.amount : 100, w = void 0 !== a.bevelThickness ? a.bevelThickness : 6, u = void 0 !== a.bevelSize ? a.bevelSize : w - 2, v = void 0 !== a.bevelSegments ? a.bevelSegments : 3, C = void 0 !== a.bevelEnabled ? a.bevelEnabled : !0, y = void 0 !== a.curveSegments ? a.curveSegments : 12, A = void 0 !== a.steps ? a.steps : 1, x = a.extrudePath, B, F = !1, I = void 0 !== a.UVGenerator ? 
    a.UVGenerator : Bb.WorldUVGenerator, G, D, V, K;
    x && (B = x.getSpacedPoints(A), F = !0, C = !1, G = void 0 !== a.frames ? a.frames : x.computeFrenetFrames(A, !1), D = new f, V = new f, K = new f);
    C || (u = w = v = 0);
    var H, J, ca, R = this, x = d.extractPoints(y), y = x.shape, ka = x.holes;
    if (x = !fb.isClockWise(y)) {
      y = y.reverse();
      J = 0;
      for (ca = ka.length;J < ca;J++) {
        H = ka[J], fb.isClockWise(H) && (ka[J] = H.reverse());
      }
      x = !1;
    }
    var ia = fb.triangulateShape(y, ka), P = y;
    J = 0;
    for (ca = ka.length;J < ca;J++) {
      H = ka[J], y = y.concat(H);
    }
    var M, N, ba, O, da = y.length, S, ma = ia.length, x = [], Q = 0;
    N = P.length;
    d = N - 1;
    for (M = Q + 1;Q < N;Q++, d++, M++) {
      d === N && (d = 0), M === N && (M = 0), x[Q] = c(P[Q], P[d], P[M]);
    }
    var Z = [], Ga, pa = x.concat();
    J = 0;
    for (ca = ka.length;J < ca;J++) {
      H = ka[J];
      Ga = [];
      Q = 0;
      N = H.length;
      d = N - 1;
      for (M = Q + 1;Q < N;Q++, d++, M++) {
        d === N && (d = 0), M === N && (M = 0), Ga[Q] = c(H[Q], H[d], H[M]);
      }
      Z.push(Ga);
      pa = pa.concat(Ga);
    }
    for (d = 0;d < v;d++) {
      N = d / v;
      ba = w * Math.cos(N * Math.PI / 2);
      M = u * Math.sin(N * Math.PI / 2);
      Q = 0;
      for (N = P.length;Q < N;Q++) {
        O = b(P[Q], x[Q], M), n(O.x, O.y, -ba);
      }
      J = 0;
      for (ca = ka.length;J < ca;J++) {
        for (H = ka[J], Ga = Z[J], Q = 0, N = H.length;Q < N;Q++) {
          O = b(H[Q], Ga[Q], M), n(O.x, O.y, -ba);
        }
      }
    }
    M = u;
    for (Q = 0;Q < da;Q++) {
      O = C ? b(y[Q], pa[Q], M) : y[Q], F ? (V.copy(G.normals[0]).multiplyScalar(O.x), D.copy(G.binormals[0]).multiplyScalar(O.y), K.copy(B[0]).add(V).add(D), n(K.x, K.y, K.z)) : n(O.x, O.y, 0);
    }
    for (N = 1;N <= A;N++) {
      for (Q = 0;Q < da;Q++) {
        O = C ? b(y[Q], pa[Q], M) : y[Q], F ? (V.copy(G.normals[N]).multiplyScalar(O.x), D.copy(G.binormals[N]).multiplyScalar(O.y), K.copy(B[N]).add(V).add(D), n(K.x, K.y, K.z)) : n(O.x, O.y, q / A * N);
      }
    }
    for (d = v - 1;0 <= d;d--) {
      N = d / v;
      ba = w * Math.cos(N * Math.PI / 2);
      M = u * Math.sin(N * Math.PI / 2);
      Q = 0;
      for (N = P.length;Q < N;Q++) {
        O = b(P[Q], x[Q], M), n(O.x, O.y, q + ba);
      }
      J = 0;
      for (ca = ka.length;J < ca;J++) {
        for (H = ka[J], Ga = Z[J], Q = 0, N = H.length;Q < N;Q++) {
          O = b(H[Q], Ga[Q], M), F ? n(O.x, O.y + B[A - 1].y, B[A - 1].x + ba) : n(O.x, O.y, q + ba);
        }
      }
    }
    (function() {
      var d = p.length / 3;
      if (C) {
        var b = 0 * da;
        for (Q = 0;Q < ma;Q++) {
          S = ia[Q], m(S[2] + b, S[1] + b, S[0] + b);
        }
        b = da * (A + 2 * v);
        for (Q = 0;Q < ma;Q++) {
          S = ia[Q], m(S[0] + b, S[1] + b, S[2] + b);
        }
      } else {
        for (Q = 0;Q < ma;Q++) {
          S = ia[Q], m(S[2], S[1], S[0]);
        }
        for (Q = 0;Q < ma;Q++) {
          S = ia[Q], m(S[0] + da * A, S[1] + da * A, S[2] + da * A);
        }
      }
      R.addGroup(d, p.length / 3 - d, void 0 !== a.material ? a.material : 0);
    })();
    (function() {
      var d = p.length / 3, b = 0;
      e(P, b);
      b += P.length;
      J = 0;
      for (ca = ka.length;J < ca;J++) {
        H = ka[J], e(H, b), b += H.length;
      }
      R.addGroup(d, p.length / 3 - d, void 0 !== a.extrudeMaterial ? a.extrudeMaterial : 1);
    })();
    a.arrays || (this.setIndex(h), this.addAttribute("position", new Y(p, 3)), this.addAttribute("uv", new Y(a.arrays.uv, 2)));
  };
  Bb.WorldUVGenerator = {generateTopUV:function(d, a, b, c, e) {
    d = a[3 * c];
    c = a[3 * c + 1];
    var n = a[3 * e];
    e = a[3 * e + 1];
    return [new l(a[3 * b], a[3 * b + 1]), new l(d, c), new l(n, e)];
  }, generateSideWallUV:function(d, a, b, c, e, f) {
    d = a[3 * b];
    var n = a[3 * b + 1];
    b = a[3 * b + 2];
    var m = a[3 * c], g = a[3 * c + 1];
    c = a[3 * c + 2];
    var k = a[3 * e], q = a[3 * e + 1];
    e = a[3 * e + 2];
    var p = a[3 * f], h = a[3 * f + 1];
    a = a[3 * f + 2];
    return .01 > Math.abs(n - g) ? [new l(d, 1 - b), new l(m, 1 - c), new l(k, 1 - e), new l(p, 1 - a)] : [new l(n, 1 - b), new l(g, 1 - c), new l(q, 1 - e), new l(h, 1 - a)];
  }};
  Wc.prototype = Object.create(ga.prototype);
  Wc.prototype.constructor = Wc;
  ic.prototype = Object.create(eb.prototype);
  ic.prototype.constructor = ic;
  Xc.prototype = Object.create(ga.prototype);
  Xc.prototype.constructor = Xc;
  Hb.prototype = Object.create(ea.prototype);
  Hb.prototype.constructor = Hb;
  Yc.prototype = Object.create(ga.prototype);
  Yc.prototype.constructor = Yc;
  jc.prototype = Object.create(ea.prototype);
  jc.prototype.constructor = jc;
  Zc.prototype = Object.create(ga.prototype);
  Zc.prototype.constructor = Zc;
  kc.prototype = Object.create(ea.prototype);
  kc.prototype.constructor = kc;
  lc.prototype = Object.create(ga.prototype);
  lc.prototype.constructor = lc;
  mc.prototype = Object.create(ea.prototype);
  mc.prototype.constructor = mc;
  nc.prototype = Object.create(ea.prototype);
  nc.prototype.constructor = nc;
  Ib.prototype = Object.create(ga.prototype);
  Ib.prototype.constructor = Ib;
  ub.prototype = Object.create(ea.prototype);
  ub.prototype.constructor = ub;
  $c.prototype = Object.create(Ib.prototype);
  $c.prototype.constructor = $c;
  ad.prototype = Object.create(ub.prototype);
  ad.prototype.constructor = ad;
  bd.prototype = Object.create(ga.prototype);
  bd.prototype.constructor = bd;
  oc.prototype = Object.create(ea.prototype);
  oc.prototype.constructor = oc;
  var jb = Object.freeze({WireframeGeometry:ac, ParametricGeometry:Nc, ParametricBufferGeometry:bc, TetrahedronGeometry:Pc, TetrahedronBufferGeometry:cc, OctahedronGeometry:Qc, OctahedronBufferGeometry:Gb, IcosahedronGeometry:Rc, IcosahedronBufferGeometry:dc, DodecahedronGeometry:Sc, DodecahedronBufferGeometry:ec, PolyhedronGeometry:Oc, PolyhedronBufferGeometry:Pa, TubeGeometry:Tc, TubeBufferGeometry:fc, TorusKnotGeometry:Uc, TorusKnotBufferGeometry:gc, TorusGeometry:Vc, TorusBufferGeometry:hc, TextGeometry:Wc, 
  TextBufferGeometry:ic, SphereGeometry:Xc, SphereBufferGeometry:Hb, RingGeometry:Yc, RingBufferGeometry:jc, PlaneGeometry:Ga, PlaneBufferGeometry:Cb, LatheGeometry:Zc, LatheBufferGeometry:kc, ShapeGeometry:lc, ShapeBufferGeometry:mc, ExtrudeGeometry:Bb, ExtrudeBufferGeometry:eb, EdgesGeometry:nc, ConeGeometry:$c, ConeBufferGeometry:ad, CylinderGeometry:Ib, CylinderBufferGeometry:ub, CircleGeometry:bd, CircleBufferGeometry:oc, BoxGeometry:Oa, BoxBufferGeometry:Ua});
  pc.prototype = Object.create(ta.prototype);
  pc.prototype.constructor = pc;
  pc.prototype.isShadowMaterial = !0;
  qc.prototype = Object.create(ta.prototype);
  qc.prototype.constructor = qc;
  qc.prototype.isRawShaderMaterial = !0;
  ob.prototype = Object.create(X.prototype);
  ob.prototype.constructor = ob;
  ob.prototype.isMeshStandardMaterial = !0;
  ob.prototype.copy = function(d) {
    X.prototype.copy.call(this, d);
    this.defines = {STANDARD:""};
    this.color.copy(d.color);
    this.roughness = d.roughness;
    this.metalness = d.metalness;
    this.map = d.map;
    this.lightMap = d.lightMap;
    this.lightMapIntensity = d.lightMapIntensity;
    this.aoMap = d.aoMap;
    this.aoMapIntensity = d.aoMapIntensity;
    this.emissive.copy(d.emissive);
    this.emissiveMap = d.emissiveMap;
    this.emissiveIntensity = d.emissiveIntensity;
    this.bumpMap = d.bumpMap;
    this.bumpScale = d.bumpScale;
    this.normalMap = d.normalMap;
    this.normalScale.copy(d.normalScale);
    this.displacementMap = d.displacementMap;
    this.displacementScale = d.displacementScale;
    this.displacementBias = d.displacementBias;
    this.roughnessMap = d.roughnessMap;
    this.metalnessMap = d.metalnessMap;
    this.alphaMap = d.alphaMap;
    this.envMap = d.envMap;
    this.envMapIntensity = d.envMapIntensity;
    this.refractionRatio = d.refractionRatio;
    this.wireframe = d.wireframe;
    this.wireframeLinewidth = d.wireframeLinewidth;
    this.wireframeLinecap = d.wireframeLinecap;
    this.wireframeLinejoin = d.wireframeLinejoin;
    this.skinning = d.skinning;
    this.morphTargets = d.morphTargets;
    this.morphNormals = d.morphNormals;
    return this;
  };
  Jb.prototype = Object.create(ob.prototype);
  Jb.prototype.constructor = Jb;
  Jb.prototype.isMeshPhysicalMaterial = !0;
  Jb.prototype.copy = function(d) {
    ob.prototype.copy.call(this, d);
    this.defines = {PHYSICAL:""};
    this.reflectivity = d.reflectivity;
    this.clearCoat = d.clearCoat;
    this.clearCoatRoughness = d.clearCoatRoughness;
    return this;
  };
  gb.prototype = Object.create(X.prototype);
  gb.prototype.constructor = gb;
  gb.prototype.isMeshPhongMaterial = !0;
  gb.prototype.copy = function(d) {
    X.prototype.copy.call(this, d);
    this.color.copy(d.color);
    this.specular.copy(d.specular);
    this.shininess = d.shininess;
    this.map = d.map;
    this.lightMap = d.lightMap;
    this.lightMapIntensity = d.lightMapIntensity;
    this.aoMap = d.aoMap;
    this.aoMapIntensity = d.aoMapIntensity;
    this.emissive.copy(d.emissive);
    this.emissiveMap = d.emissiveMap;
    this.emissiveIntensity = d.emissiveIntensity;
    this.bumpMap = d.bumpMap;
    this.bumpScale = d.bumpScale;
    this.normalMap = d.normalMap;
    this.normalScale.copy(d.normalScale);
    this.displacementMap = d.displacementMap;
    this.displacementScale = d.displacementScale;
    this.displacementBias = d.displacementBias;
    this.specularMap = d.specularMap;
    this.alphaMap = d.alphaMap;
    this.envMap = d.envMap;
    this.combine = d.combine;
    this.reflectivity = d.reflectivity;
    this.refractionRatio = d.refractionRatio;
    this.wireframe = d.wireframe;
    this.wireframeLinewidth = d.wireframeLinewidth;
    this.wireframeLinecap = d.wireframeLinecap;
    this.wireframeLinejoin = d.wireframeLinejoin;
    this.skinning = d.skinning;
    this.morphTargets = d.morphTargets;
    this.morphNormals = d.morphNormals;
    return this;
  };
  Kb.prototype = Object.create(gb.prototype);
  Kb.prototype.constructor = Kb;
  Kb.prototype.isMeshToonMaterial = !0;
  Kb.prototype.copy = function(d) {
    gb.prototype.copy.call(this, d);
    this.gradientMap = d.gradientMap;
    return this;
  };
  Lb.prototype = Object.create(X.prototype);
  Lb.prototype.constructor = Lb;
  Lb.prototype.isMeshNormalMaterial = !0;
  Lb.prototype.copy = function(d) {
    X.prototype.copy.call(this, d);
    this.bumpMap = d.bumpMap;
    this.bumpScale = d.bumpScale;
    this.normalMap = d.normalMap;
    this.normalScale.copy(d.normalScale);
    this.displacementMap = d.displacementMap;
    this.displacementScale = d.displacementScale;
    this.displacementBias = d.displacementBias;
    this.wireframe = d.wireframe;
    this.wireframeLinewidth = d.wireframeLinewidth;
    this.skinning = d.skinning;
    this.morphTargets = d.morphTargets;
    this.morphNormals = d.morphNormals;
    return this;
  };
  Mb.prototype = Object.create(X.prototype);
  Mb.prototype.constructor = Mb;
  Mb.prototype.isMeshLambertMaterial = !0;
  Mb.prototype.copy = function(d) {
    X.prototype.copy.call(this, d);
    this.color.copy(d.color);
    this.map = d.map;
    this.lightMap = d.lightMap;
    this.lightMapIntensity = d.lightMapIntensity;
    this.aoMap = d.aoMap;
    this.aoMapIntensity = d.aoMapIntensity;
    this.emissive.copy(d.emissive);
    this.emissiveMap = d.emissiveMap;
    this.emissiveIntensity = d.emissiveIntensity;
    this.specularMap = d.specularMap;
    this.alphaMap = d.alphaMap;
    this.envMap = d.envMap;
    this.combine = d.combine;
    this.reflectivity = d.reflectivity;
    this.refractionRatio = d.refractionRatio;
    this.wireframe = d.wireframe;
    this.wireframeLinewidth = d.wireframeLinewidth;
    this.wireframeLinecap = d.wireframeLinecap;
    this.wireframeLinejoin = d.wireframeLinejoin;
    this.skinning = d.skinning;
    this.morphTargets = d.morphTargets;
    this.morphNormals = d.morphNormals;
    return this;
  };
  Nb.prototype = Object.create(X.prototype);
  Nb.prototype.constructor = Nb;
  Nb.prototype.isLineDashedMaterial = !0;
  Nb.prototype.copy = function(d) {
    X.prototype.copy.call(this, d);
    this.color.copy(d.color);
    this.linewidth = d.linewidth;
    this.scale = d.scale;
    this.dashSize = d.dashSize;
    this.gapSize = d.gapSize;
    return this;
  };
  var Af = Object.freeze({ShadowMaterial:pc, SpriteMaterial:Ab, RawShaderMaterial:qc, ShaderMaterial:ta, PointsMaterial:db, MeshPhysicalMaterial:Jb, MeshStandardMaterial:ob, MeshPhongMaterial:gb, MeshToonMaterial:Kb, MeshNormalMaterial:Lb, MeshLambertMaterial:Mb, MeshDepthMaterial:Ba, MeshBasicMaterial:La, LineDashedMaterial:Nb, LineBasicMaterial:za, Material:X}), pd = {enabled:!1, files:{}, add:function(d, a) {
    !1 !== this.enabled && (this.files[d] = a);
  }, get:function(d) {
    if (!1 !== this.enabled) {
      return this.files[d];
    }
  }, remove:function(d) {
    delete this.files[d];
  }, clear:function() {
    this.files = {};
  }}, Xa = new ee;
  Object.assign(hb.prototype, {load:function(d, a, b, c) {
    void 0 === d && (d = "");
    void 0 !== this.path && (d = this.path + d);
    var e = this, f = pd.get(d);
    if (void 0 !== f) {
      return e.manager.itemStart(d), setTimeout(function() {
        a && a(f);
        e.manager.itemEnd(d);
      }, 0), f;
    }
    var n = d.match(/^data:(.*?)(;base64)?,(.*)$/);
    if (n) {
      var m = n[1], g = !!n[2], n = n[3], n = window.decodeURIComponent(n);
      g && (n = window.atob(n));
      try {
        var k, q = (this.responseType || "").toLowerCase();
        switch(q) {
          case "arraybuffer":
          case "blob":
            k = new ArrayBuffer(n.length);
            for (var p = new Uint8Array(k), g = 0;g < n.length;g++) {
              p[g] = n.charCodeAt(g);
            }
            "blob" === q && (k = new Blob([k], {type:m}));
            break;
          case "document":
            k = (new DOMParser).parseFromString(n, m);
            break;
          case "json":
            k = JSON.parse(n);
            break;
          default:
            k = n;
        }
        window.setTimeout(function() {
          a && a(k);
          e.manager.itemEnd(d);
        }, 0);
      } catch (df) {
        window.setTimeout(function() {
          c && c(df);
          e.manager.itemError(d);
        }, 0);
      }
    } else {
      var h = new XMLHttpRequest;
      h.open("GET", d, !0);
      h.addEventListener("load", function(b) {
        var f = b.target.response;
        pd.add(d, f);
        200 === this.status ? (a && a(f), e.manager.itemEnd(d)) : 0 === this.status ? (console.warn("THREE.FileLoader: HTTP Status 0 received."), a && a(f), e.manager.itemEnd(d)) : (c && c(b), e.manager.itemError(d));
      }, !1);
      void 0 !== b && h.addEventListener("progress", function(d) {
        b(d);
      }, !1);
      h.addEventListener("error", function(a) {
        c && c(a);
        e.manager.itemError(d);
      }, !1);
      void 0 !== this.responseType && (h.responseType = this.responseType);
      void 0 !== this.withCredentials && (h.withCredentials = this.withCredentials);
      h.overrideMimeType && h.overrideMimeType(void 0 !== this.mimeType ? this.mimeType : "text/plain");
      for (m in this.requestHeader) {
        h.setRequestHeader(m, this.requestHeader[m]);
      }
      h.send(null);
    }
    e.manager.itemStart(d);
    return h;
  }, setPath:function(d) {
    this.path = d;
    return this;
  }, setResponseType:function(d) {
    this.responseType = d;
    return this;
  }, setWithCredentials:function(d) {
    this.withCredentials = d;
    return this;
  }, setMimeType:function(d) {
    this.mimeType = d;
    return this;
  }, setRequestHeader:function(d) {
    this.requestHeader = d;
    return this;
  }});
  Object.assign(Me.prototype, {load:function(d, a, b, c) {
    function e(e) {
      g.load(d[e], function(d) {
        d = f._parser(d, !0);
        n[e] = {width:d.width, height:d.height, format:d.format, mipmaps:d.mipmaps};
        k += 1;
        6 === k && (1 === d.mipmapCount && (m.minFilter = 1006), m.format = d.format, m.needsUpdate = !0, a && a(m));
      }, b, c);
    }
    var f = this, n = [], m = new $b;
    m.image = n;
    var g = new hb(this.manager);
    g.setPath(this.path);
    g.setResponseType("arraybuffer");
    if (Array.isArray(d)) {
      for (var k = 0, q = 0, p = d.length;q < p;++q) {
        e(q);
      }
    } else {
      g.load(d, function(d) {
        d = f._parser(d, !0);
        if (d.isCubemap) {
          for (var b = d.mipmaps.length / d.mipmapCount, c = 0;c < b;c++) {
            n[c] = {mipmaps:[]};
            for (var e = 0;e < d.mipmapCount;e++) {
              n[c].mipmaps.push(d.mipmaps[c * d.mipmapCount + e]), n[c].format = d.format, n[c].width = d.width, n[c].height = d.height;
            }
          }
        } else {
          m.image.width = d.width, m.image.height = d.height, m.mipmaps = d.mipmaps;
        }
        1 === d.mipmapCount && (m.minFilter = 1006);
        m.format = d.format;
        m.needsUpdate = !0;
        a && a(m);
      }, b, c);
    }
    return m;
  }, setPath:function(d) {
    this.path = d;
    return this;
  }});
  Object.assign(fe.prototype, {load:function(d, a, b, c) {
    var e = this, f = new r, n = new hb(this.manager);
    n.setResponseType("arraybuffer");
    n.load(d, function(d) {
      if (d = e._parser(d)) {
        void 0 !== d.image ? f.image = d.image : void 0 !== d.data && (f.image.width = d.width, f.image.height = d.height, f.image.data = d.data), f.wrapS = void 0 !== d.wrapS ? d.wrapS : 1001, f.wrapT = void 0 !== d.wrapT ? d.wrapT : 1001, f.magFilter = void 0 !== d.magFilter ? d.magFilter : 1006, f.minFilter = void 0 !== d.minFilter ? d.minFilter : 1008, f.anisotropy = void 0 !== d.anisotropy ? d.anisotropy : 1, void 0 !== d.format && (f.format = d.format), void 0 !== d.type && (f.type = d.type), 
        void 0 !== d.mipmaps && (f.mipmaps = d.mipmaps), 1 === d.mipmapCount && (f.minFilter = 1006), f.needsUpdate = !0, a && a(f, d);
      }
    }, b, c);
    return f;
  }});
  Object.assign(cd.prototype, {load:function(d, a, b, c) {
    void 0 === d && (d = "");
    void 0 !== this.path && (d = this.path + d);
    var e = this, f = pd.get(d);
    if (void 0 !== f) {
      return e.manager.itemStart(d), setTimeout(function() {
        a && a(f);
        e.manager.itemEnd(d);
      }, 0), f;
    }
    b = document.createElementNS("http://www.w3.org/1999/xhtml", "img");
    b.addEventListener("load", function() {
      pd.add(d, this);
      a && a(this);
      e.manager.itemEnd(d);
    }, !1);
    b.addEventListener("error", function(a) {
      c && c(a);
      e.manager.itemError(d);
    }, !1);
    "data:" !== d.substr(0, 5) && void 0 !== this.crossOrigin && (b.crossOrigin = this.crossOrigin);
    e.manager.itemStart(d);
    b.src = d;
    return b;
  }, setCrossOrigin:function(d) {
    this.crossOrigin = d;
    return this;
  }, setPath:function(d) {
    this.path = d;
    return this;
  }});
  Object.assign(ge.prototype, {load:function(d, a, b, c) {
    function e(b) {
      n.load(d[b], function(d) {
        f.images[b] = d;
        m++;
        6 === m && (f.needsUpdate = !0, a && a(f));
      }, void 0, c);
    }
    var f = new w, n = new cd(this.manager);
    n.setCrossOrigin(this.crossOrigin);
    n.setPath(this.path);
    var m = 0;
    for (b = 0;b < d.length;++b) {
      e(b);
    }
    return f;
  }, setCrossOrigin:function(d) {
    this.crossOrigin = d;
    return this;
  }, setPath:function(d) {
    this.path = d;
    return this;
  }});
  Object.assign(Ad.prototype, {load:function(d, a, c, e) {
    var f = new cd(this.manager);
    f.setCrossOrigin(this.crossOrigin);
    f.setPath(this.path);
    var n = new b;
    n.image = f.load(d, function() {
      var b = 0 < d.search(/\.(jpg|jpeg)$/) || 0 === d.search(/^data\:image\/jpeg/);
      n.format = b ? 1022 : 1023;
      n.needsUpdate = !0;
      void 0 !== a && a(n);
    }, c, e);
    return n;
  }, setCrossOrigin:function(d) {
    this.crossOrigin = d;
    return this;
  }, setPath:function(d) {
    this.path = d;
    return this;
  }});
  xa.prototype = Object.assign(Object.create(aa.prototype), {constructor:xa, isLight:!0, copy:function(d) {
    aa.prototype.copy.call(this, d);
    this.color.copy(d.color);
    this.intensity = d.intensity;
    return this;
  }, toJSON:function(d) {
    d = aa.prototype.toJSON.call(this, d);
    d.object.color = this.color.getHex();
    d.object.intensity = this.intensity;
    void 0 !== this.groundColor && (d.object.groundColor = this.groundColor.getHex());
    void 0 !== this.distance && (d.object.distance = this.distance);
    void 0 !== this.angle && (d.object.angle = this.angle);
    void 0 !== this.decay && (d.object.decay = this.decay);
    void 0 !== this.penumbra && (d.object.penumbra = this.penumbra);
    void 0 !== this.shadow && (d.object.shadow = this.shadow.toJSON());
    return d;
  }});
  Bd.prototype = Object.assign(Object.create(xa.prototype), {constructor:Bd, isHemisphereLight:!0, copy:function(d) {
    xa.prototype.copy.call(this, d);
    this.groundColor.copy(d.groundColor);
    return this;
  }});
  Object.assign(Ob.prototype, {copy:function(d) {
    this.camera = d.camera.clone();
    this.bias = d.bias;
    this.radius = d.radius;
    this.mapSize.copy(d.mapSize);
    return this;
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, toJSON:function() {
    var d = {};
    0 !== this.bias && (d.bias = this.bias);
    1 !== this.radius && (d.radius = this.radius);
    if (512 !== this.mapSize.x || 512 !== this.mapSize.y) {
      d.mapSize = this.mapSize.toArray();
    }
    d.camera = this.camera.toJSON(!1).object;
    delete d.camera.matrix;
    return d;
  }});
  Cd.prototype = Object.assign(Object.create(Ob.prototype), {constructor:Cd, isSpotLightShadow:!0, update:function(d) {
    var a = 2 * na.RAD2DEG * d.angle, b = this.mapSize.width / this.mapSize.height;
    d = d.distance || 500;
    var c = this.camera;
    if (a !== c.fov || b !== c.aspect || d !== c.far) {
      c.fov = a, c.aspect = b, c.far = d, c.updateProjectionMatrix();
    }
  }});
  Dd.prototype = Object.assign(Object.create(xa.prototype), {constructor:Dd, isSpotLight:!0, copy:function(d) {
    xa.prototype.copy.call(this, d);
    this.distance = d.distance;
    this.angle = d.angle;
    this.penumbra = d.penumbra;
    this.decay = d.decay;
    this.target = d.target.clone();
    this.shadow = d.shadow.clone();
    return this;
  }});
  Ed.prototype = Object.assign(Object.create(xa.prototype), {constructor:Ed, isPointLight:!0, copy:function(d) {
    xa.prototype.copy.call(this, d);
    this.distance = d.distance;
    this.decay = d.decay;
    this.shadow = d.shadow.clone();
    return this;
  }});
  Fd.prototype = Object.assign(Object.create(Ob.prototype), {constructor:Fd});
  Gd.prototype = Object.assign(Object.create(xa.prototype), {constructor:Gd, isDirectionalLight:!0, copy:function(d) {
    xa.prototype.copy.call(this, d);
    this.target = d.target.clone();
    this.shadow = d.shadow.clone();
    return this;
  }});
  Hd.prototype = Object.assign(Object.create(xa.prototype), {constructor:Hd, isAmbientLight:!0});
  Id.prototype = Object.assign(Object.create(xa.prototype), {constructor:Id, isRectAreaLight:!0, copy:function(d) {
    xa.prototype.copy.call(this, d);
    this.width = d.width;
    this.height = d.height;
    return this;
  }, toJSON:function(d) {
    d = xa.prototype.toJSON.call(this, d);
    d.object.width = this.width;
    d.object.height = this.height;
    return d;
  }});
  var Da = {arraySlice:function(d, a, b) {
    return Da.isTypedArray(d) ? new d.constructor(d.subarray(a, void 0 !== b ? b : d.length)) : d.slice(a, b);
  }, convertArray:function(d, a, b) {
    return !d || !b && d.constructor === a ? d : "number" === typeof a.BYTES_PER_ELEMENT ? new a(d) : Array.prototype.slice.call(d);
  }, isTypedArray:function(d) {
    return ArrayBuffer.isView(d) && !(d instanceof DataView);
  }, getKeyframeOrder:function(d) {
    for (var a = d.length, b = Array(a), c = 0;c !== a;++c) {
      b[c] = c;
    }
    b.sort(function(a, b) {
      return d[a] - d[b];
    });
    return b;
  }, sortedArray:function(d, a, b) {
    for (var c = d.length, e = new d.constructor(c), f = 0, n = 0;n !== c;++f) {
      for (var m = b[f] * a, g = 0;g !== a;++g) {
        e[n++] = d[m + g];
      }
    }
    return e;
  }, flattenJSON:function(d, a, b, c) {
    for (var e = 1, f = d[0];void 0 !== f && void 0 === f[c];) {
      f = d[e++];
    }
    if (void 0 !== f) {
      var n = f[c];
      if (void 0 !== n) {
        if (Array.isArray(n)) {
          do {
            n = f[c], void 0 !== n && (a.push(f.time), b.push.apply(b, n)), f = d[e++];
          } while (void 0 !== f);
        } else {
          if (void 0 !== n.toArray) {
            do {
              n = f[c], void 0 !== n && (a.push(f.time), n.toArray(b, b.length)), f = d[e++];
            } while (void 0 !== f);
          } else {
            do {
              n = f[c], void 0 !== n && (a.push(f.time), b.push(n)), f = d[e++];
            } while (void 0 !== f);
          }
        }
      }
    }
  }};
  Object.assign(Ya.prototype, {evaluate:function(d) {
    var a = this.parameterPositions, b = this._cachedIndex, c = a[b], e = a[b - 1];
    a: {
      b: {
        c: {
          d: {
            if (!(d < c)) {
              for (var f = b + 2;;) {
                if (void 0 === c) {
                  if (d < e) {
                    break d;
                  }
                  this._cachedIndex = b = a.length;
                  return this.afterEnd_(b - 1, d, e);
                }
                if (b === f) {
                  break;
                }
                e = c;
                c = a[++b];
                if (d < c) {
                  break b;
                }
              }
              c = a.length;
              break c;
            }
          }
          if (d >= e) {
            break a;
          } else {
            f = a[1];
            d < f && (b = 2, e = f);
            for (f = b - 2;;) {
              if (void 0 === e) {
                return this._cachedIndex = 0, this.beforeStart_(0, d, c);
              }
              if (b === f) {
                break;
              }
              c = e;
              e = a[--b - 1];
              if (d >= e) {
                break b;
              }
            }
            c = b;
            b = 0;
          }
        }
        for (;b < c;) {
          e = b + c >>> 1, d < a[e] ? c = e : b = e + 1;
        }
        c = a[b];
        e = a[b - 1];
        if (void 0 === e) {
          return this._cachedIndex = 0, this.beforeStart_(0, d, c);
        }
        if (void 0 === c) {
          return this._cachedIndex = b = a.length, this.afterEnd_(b - 1, e, d);
        }
      }
      this._cachedIndex = b;
      this.intervalChanged_(b, e, c);
    }
    return this.interpolate_(b, e, d, c);
  }, settings:null, DefaultSettings_:{}, getSettings_:function() {
    return this.settings || this.DefaultSettings_;
  }, copySampleValue_:function(d) {
    var a = this.resultBuffer, b = this.sampleValues, c = this.valueSize;
    d *= c;
    for (var e = 0;e !== c;++e) {
      a[e] = b[d + e];
    }
    return a;
  }, interpolate_:function(d, a, b, c) {
    throw Error("call to abstract method");
  }, intervalChanged_:function(d, a, b) {
  }});
  Object.assign(Ya.prototype, {beforeStart_:Ya.prototype.copySampleValue_, afterEnd_:Ya.prototype.copySampleValue_});
  Jd.prototype = Object.assign(Object.create(Ya.prototype), {constructor:Jd, DefaultSettings_:{endingStart:2400, endingEnd:2400}, intervalChanged_:function(d, a, b) {
    var c = this.parameterPositions, e = d - 2, f = d + 1, n = c[e], m = c[f];
    if (void 0 === n) {
      switch(this.getSettings_().endingStart) {
        case 2401:
          e = d;
          n = 2 * a - b;
          break;
        case 2402:
          e = c.length - 2;
          n = a + c[e] - c[e + 1];
          break;
        default:
          e = d, n = b;
      }
    }
    if (void 0 === m) {
      switch(this.getSettings_().endingEnd) {
        case 2401:
          f = d;
          m = 2 * b - a;
          break;
        case 2402:
          f = 1;
          m = b + c[1] - c[0];
          break;
        default:
          f = d - 1, m = a;
      }
    }
    d = .5 * (b - a);
    c = this.valueSize;
    this._weightPrev = d / (a - n);
    this._weightNext = d / (m - b);
    this._offsetPrev = e * c;
    this._offsetNext = f * c;
  }, interpolate_:function(d, a, b, c) {
    var e = this.resultBuffer, f = this.sampleValues, n = this.valueSize;
    d *= n;
    var m = d - n, g = this._offsetPrev, k = this._offsetNext, q = this._weightPrev, p = this._weightNext, h = (b - a) / (c - a);
    b = h * h;
    c = b * h;
    a = -q * c + 2 * q * b - q * h;
    q = (1 + q) * c + (-1.5 - 2 * q) * b + (-.5 + q) * h + 1;
    h = (-1 - p) * c + (1.5 + p) * b + .5 * h;
    p = p * c - p * b;
    for (b = 0;b !== n;++b) {
      e[b] = a * f[g + b] + q * f[m + b] + h * f[d + b] + p * f[k + b];
    }
    return e;
  }});
  dd.prototype = Object.assign(Object.create(Ya.prototype), {constructor:dd, interpolate_:function(d, a, b, c) {
    var e = this.resultBuffer, f = this.sampleValues, n = this.valueSize;
    d *= n;
    var m = d - n;
    a = (b - a) / (c - a);
    b = 1 - a;
    for (c = 0;c !== n;++c) {
      e[c] = f[m + c] * b + f[d + c] * a;
    }
    return e;
  }});
  Kd.prototype = Object.assign(Object.create(Ya.prototype), {constructor:Kd, interpolate_:function(d, a, b, c) {
    return this.copySampleValue_(d - 1);
  }});
  var wb;
  wb = {TimeBufferType:Float32Array, ValueBufferType:Float32Array, DefaultInterpolation:2301, InterpolantFactoryMethodDiscrete:function(d) {
    return new Kd(this.times, this.values, this.getValueSize(), d);
  }, InterpolantFactoryMethodLinear:function(d) {
    return new dd(this.times, this.values, this.getValueSize(), d);
  }, InterpolantFactoryMethodSmooth:function(d) {
    return new Jd(this.times, this.values, this.getValueSize(), d);
  }, setInterpolation:function(d) {
    var a;
    switch(d) {
      case 2300:
        a = this.InterpolantFactoryMethodDiscrete;
        break;
      case 2301:
        a = this.InterpolantFactoryMethodLinear;
        break;
      case 2302:
        a = this.InterpolantFactoryMethodSmooth;
    }
    if (void 0 === a) {
      a = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
      if (void 0 === this.createInterpolant) {
        if (d !== this.DefaultInterpolation) {
          this.setInterpolation(this.DefaultInterpolation);
        } else {
          throw Error(a);
        }
      }
      console.warn(a);
    } else {
      this.createInterpolant = a;
    }
  }, getInterpolation:function() {
    switch(this.createInterpolant) {
      case this.InterpolantFactoryMethodDiscrete:
        return 2300;
      case this.InterpolantFactoryMethodLinear:
        return 2301;
      case this.InterpolantFactoryMethodSmooth:
        return 2302;
    }
  }, getValueSize:function() {
    return this.values.length / this.times.length;
  }, shift:function(d) {
    if (0 !== d) {
      for (var a = this.times, b = 0, c = a.length;b !== c;++b) {
        a[b] += d;
      }
    }
    return this;
  }, scale:function(d) {
    if (1 !== d) {
      for (var a = this.times, b = 0, c = a.length;b !== c;++b) {
        a[b] *= d;
      }
    }
    return this;
  }, trim:function(d, a) {
    for (var b = this.times, c = b.length, e = 0, f = c - 1;e !== c && b[e] < d;) {
      ++e;
    }
    for (;-1 !== f && b[f] > a;) {
      --f;
    }
    ++f;
    if (0 !== e || f !== c) {
      e >= f && (f = Math.max(f, 1), e = f - 1), c = this.getValueSize(), this.times = Da.arraySlice(b, e, f), this.values = Da.arraySlice(this.values, e * c, f * c);
    }
    return this;
  }, validate:function() {
    var d = !0, a = this.getValueSize();
    0 !== a - Math.floor(a) && (console.error("invalid value size in track", this), d = !1);
    var b = this.times, a = this.values, c = b.length;
    0 === c && (console.error("track is empty", this), d = !1);
    for (var e = null, f = 0;f !== c;f++) {
      var m = b[f];
      if ("number" === typeof m && isNaN(m)) {
        console.error("time is not a valid number", this, f, m);
        d = !1;
        break;
      }
      if (null !== e && e > m) {
        console.error("out of order keys", this, f, m, e);
        d = !1;
        break;
      }
      e = m;
    }
    if (void 0 !== a && Da.isTypedArray(a)) {
      for (f = 0, b = a.length;f !== b;++f) {
        if (c = a[f], isNaN(c)) {
          console.error("value is not a valid number", this, f, c);
          d = !1;
          break;
        }
      }
    }
    return d;
  }, optimize:function() {
    for (var d = this.times, a = this.values, b = this.getValueSize(), c = 2302 === this.getInterpolation(), e = 1, f = d.length - 1, m = 1;m < f;++m) {
      var g = !1, k = d[m];
      if (k !== d[m + 1] && (1 !== m || k !== k[0])) {
        if (c) {
          g = !0;
        } else {
          for (var q = m * b, p = q - b, h = q + b, k = 0;k !== b;++k) {
            var r = a[q + k];
            if (r !== a[p + k] || r !== a[h + k]) {
              g = !0;
              break;
            }
          }
        }
      }
      if (g) {
        if (m !== e) {
          for (d[e] = d[m], g = m * b, q = e * b, k = 0;k !== b;++k) {
            a[q + k] = a[g + k];
          }
        }
        ++e;
      }
    }
    if (0 < f) {
      d[e] = d[f];
      g = f * b;
      q = e * b;
      for (k = 0;k !== b;++k) {
        a[q + k] = a[g + k];
      }
      ++e;
    }
    e !== d.length && (this.times = Da.arraySlice(d, 0, e), this.values = Da.arraySlice(a, 0, e * b));
    return this;
  }};
  rc.prototype = Object.assign(Object.create(wb), {constructor:rc, ValueTypeName:"vector"});
  Ld.prototype = Object.assign(Object.create(Ya.prototype), {constructor:Ld, interpolate_:function(d, a, b, c) {
    var f = this.resultBuffer, n = this.sampleValues, m = this.valueSize;
    d *= m;
    a = (b - a) / (c - a);
    for (b = d + m;d !== b;d += 4) {
      e.slerpFlat(f, 0, n, d - m, n, d, a);
    }
    return f;
  }});
  ed.prototype = Object.assign(Object.create(wb), {constructor:ed, ValueTypeName:"quaternion", DefaultInterpolation:2301, InterpolantFactoryMethodLinear:function(d) {
    return new Ld(this.times, this.values, this.getValueSize(), d);
  }, InterpolantFactoryMethodSmooth:void 0});
  sc.prototype = Object.assign(Object.create(wb), {constructor:sc, ValueTypeName:"number"});
  Md.prototype = Object.assign(Object.create(wb), {constructor:Md, ValueTypeName:"string", ValueBufferType:Array, DefaultInterpolation:2300, InterpolantFactoryMethodLinear:void 0, InterpolantFactoryMethodSmooth:void 0});
  Nd.prototype = Object.assign(Object.create(wb), {constructor:Nd, ValueTypeName:"bool", ValueBufferType:Array, DefaultInterpolation:2300, InterpolantFactoryMethodLinear:void 0, InterpolantFactoryMethodSmooth:void 0});
  Od.prototype = Object.assign(Object.create(wb), {constructor:Od, ValueTypeName:"color"});
  Qb.prototype = wb;
  wb.constructor = Qb;
  Object.assign(Qb, {parse:function(d) {
    if (void 0 === d.type) {
      throw Error("track type undefined, can not parse");
    }
    var a = Qb._getTrackTypeForValueTypeName(d.type);
    if (void 0 === d.times) {
      var b = [], c = [];
      Da.flattenJSON(d.keys, b, c, "value");
      d.times = b;
      d.values = c;
    }
    return void 0 !== a.parse ? a.parse(d) : new a(d.name, d.times, d.values, d.interpolation);
  }, toJSON:function(d) {
    var a = d.constructor;
    if (void 0 !== a.toJSON) {
      a = a.toJSON(d);
    } else {
      var a = {name:d.name, times:Da.convertArray(d.times, Array), values:Da.convertArray(d.values, Array)}, b = d.getInterpolation();
      b !== d.DefaultInterpolation && (a.interpolation = b);
    }
    a.type = d.ValueTypeName;
    return a;
  }, _getTrackTypeForValueTypeName:function(d) {
    switch(d.toLowerCase()) {
      case "scalar":
      case "double":
      case "float":
      case "number":
      case "integer":
        return sc;
      case "vector":
      case "vector2":
      case "vector3":
      case "vector4":
        return rc;
      case "color":
        return Od;
      case "quaternion":
        return ed;
      case "bool":
      case "boolean":
        return Nd;
      case "string":
        return Md;
    }
    throw Error("Unsupported typeName: " + d);
  }});
  Object.assign(bb, {parse:function(d) {
    for (var a = [], b = d.tracks, c = 1 / (d.fps || 1), e = 0, f = b.length;e !== f;++e) {
      a.push(Qb.parse(b[e]).scale(c));
    }
    return new bb(d.name, d.duration, a);
  }, toJSON:function(d) {
    var a = [], b = d.tracks;
    d = {name:d.name, duration:d.duration, tracks:a};
    for (var c = 0, e = b.length;c !== e;++c) {
      a.push(Qb.toJSON(b[c]));
    }
    return d;
  }, CreateFromMorphTargetSequence:function(d, a, b, c) {
    for (var e = a.length, f = [], n = 0;n < e;n++) {
      var m = [], g = [];
      m.push((n + e - 1) % e, n, (n + 1) % e);
      g.push(0, 1, 0);
      var k = Da.getKeyframeOrder(m), m = Da.sortedArray(m, 1, k), g = Da.sortedArray(g, 1, k);
      c || 0 !== m[0] || (m.push(e), g.push(g[0]));
      f.push((new sc(".morphTargetInfluences[" + a[n].name + "]", m, g)).scale(1 / b));
    }
    return new bb(d, -1, f);
  }, findByName:function(d, a) {
    var b = d;
    Array.isArray(d) || (b = d.geometry && d.geometry.animations || d.animations);
    for (d = 0;d < b.length;d++) {
      if (b[d].name === a) {
        return b[d];
      }
    }
    return null;
  }, CreateClipsFromMorphTargetSequences:function(d, a, b) {
    for (var c = {}, e = /^([\w-]*?)([\d]+)$/, f = 0, n = d.length;f < n;f++) {
      var m = d[f], g = m.name.match(e);
      if (g && 1 < g.length) {
        var k = g[1];
        (g = c[k]) || (c[k] = g = []);
        g.push(m);
      }
    }
    d = [];
    for (k in c) {
      d.push(bb.CreateFromMorphTargetSequence(k, c[k], a, b));
    }
    return d;
  }, parseAnimation:function(d, a) {
    if (!d) {
      return console.error("  no animation in JSONLoader data"), null;
    }
    var b = function(d, a, b, c, e) {
      if (0 !== b.length) {
        var f = [], n = [];
        Da.flattenJSON(b, f, n, c);
        0 !== f.length && e.push(new d(a, f, n));
      }
    }, c = [], e = d.name || "default", f = d.length || -1, n = d.fps || 30;
    d = d.hierarchy || [];
    for (var m = 0;m < d.length;m++) {
      var g = d[m].keys;
      if (g && 0 !== g.length) {
        if (g[0].morphTargets) {
          for (var f = {}, k = 0;k < g.length;k++) {
            if (g[k].morphTargets) {
              for (var q = 0;q < g[k].morphTargets.length;q++) {
                f[g[k].morphTargets[q]] = -1;
              }
            }
          }
          for (var p in f) {
            for (var h = [], r = [], q = 0;q !== g[k].morphTargets.length;++q) {
              var t = g[k];
              h.push(t.time);
              r.push(t.morphTarget === p ? 1 : 0);
            }
            c.push(new sc(".morphTargetInfluence[" + p + "]", h, r));
          }
          f = f.length * (n || 1);
        } else {
          k = ".bones[" + a[m].name + "]", b(rc, k + ".position", g, "pos", c), b(ed, k + ".quaternion", g, "rot", c), b(rc, k + ".scale", g, "scl", c);
        }
      }
    }
    return 0 === c.length ? null : new bb(e, f, c);
  }});
  Object.assign(bb.prototype, {resetDuration:function() {
    for (var d = 0, a = 0, b = this.tracks.length;a !== b;++a) {
      var c = this.tracks[a], d = Math.max(d, c.times[c.times.length - 1]);
    }
    this.duration = d;
  }, trim:function() {
    for (var d = 0;d < this.tracks.length;d++) {
      this.tracks[d].trim(0, this.duration);
    }
    return this;
  }, optimize:function() {
    for (var d = 0;d < this.tracks.length;d++) {
      this.tracks[d].optimize();
    }
    return this;
  }});
  Object.assign(Pd.prototype, {load:function(d, a, b, c) {
    var e = this;
    (new hb(e.manager)).load(d, function(d) {
      a(e.parse(JSON.parse(d)));
    }, b, c);
  }, setTextures:function(d) {
    this.textures = d;
  }, parse:function(d) {
    function a(d) {
      void 0 === b[d] && console.warn("THREE.MaterialLoader: Undefined texture", d);
      return b[d];
    }
    var b = this.textures, c = new Af[d.type];
    void 0 !== d.uuid && (c.uuid = d.uuid);
    void 0 !== d.name && (c.name = d.name);
    void 0 !== d.color && c.color.setHex(d.color);
    void 0 !== d.roughness && (c.roughness = d.roughness);
    void 0 !== d.metalness && (c.metalness = d.metalness);
    void 0 !== d.emissive && c.emissive.setHex(d.emissive);
    void 0 !== d.specular && c.specular.setHex(d.specular);
    void 0 !== d.shininess && (c.shininess = d.shininess);
    void 0 !== d.clearCoat && (c.clearCoat = d.clearCoat);
    void 0 !== d.clearCoatRoughness && (c.clearCoatRoughness = d.clearCoatRoughness);
    void 0 !== d.uniforms && (c.uniforms = d.uniforms);
    void 0 !== d.vertexShader && (c.vertexShader = d.vertexShader);
    void 0 !== d.fragmentShader && (c.fragmentShader = d.fragmentShader);
    void 0 !== d.vertexColors && (c.vertexColors = d.vertexColors);
    void 0 !== d.fog && (c.fog = d.fog);
    void 0 !== d.shading && (c.shading = d.shading);
    void 0 !== d.blending && (c.blending = d.blending);
    void 0 !== d.side && (c.side = d.side);
    void 0 !== d.opacity && (c.opacity = d.opacity);
    void 0 !== d.transparent && (c.transparent = d.transparent);
    void 0 !== d.alphaTest && (c.alphaTest = d.alphaTest);
    void 0 !== d.depthTest && (c.depthTest = d.depthTest);
    void 0 !== d.depthWrite && (c.depthWrite = d.depthWrite);
    void 0 !== d.colorWrite && (c.colorWrite = d.colorWrite);
    void 0 !== d.wireframe && (c.wireframe = d.wireframe);
    void 0 !== d.wireframeLinewidth && (c.wireframeLinewidth = d.wireframeLinewidth);
    void 0 !== d.wireframeLinecap && (c.wireframeLinecap = d.wireframeLinecap);
    void 0 !== d.wireframeLinejoin && (c.wireframeLinejoin = d.wireframeLinejoin);
    void 0 !== d.skinning && (c.skinning = d.skinning);
    void 0 !== d.morphTargets && (c.morphTargets = d.morphTargets);
    void 0 !== d.size && (c.size = d.size);
    void 0 !== d.sizeAttenuation && (c.sizeAttenuation = d.sizeAttenuation);
    void 0 !== d.map && (c.map = a(d.map));
    void 0 !== d.alphaMap && (c.alphaMap = a(d.alphaMap), c.transparent = !0);
    void 0 !== d.bumpMap && (c.bumpMap = a(d.bumpMap));
    void 0 !== d.bumpScale && (c.bumpScale = d.bumpScale);
    void 0 !== d.normalMap && (c.normalMap = a(d.normalMap));
    if (void 0 !== d.normalScale) {
      var e = d.normalScale;
      !1 === Array.isArray(e) && (e = [e, e]);
      c.normalScale = (new l).fromArray(e);
    }
    void 0 !== d.displacementMap && (c.displacementMap = a(d.displacementMap));
    void 0 !== d.displacementScale && (c.displacementScale = d.displacementScale);
    void 0 !== d.displacementBias && (c.displacementBias = d.displacementBias);
    void 0 !== d.roughnessMap && (c.roughnessMap = a(d.roughnessMap));
    void 0 !== d.metalnessMap && (c.metalnessMap = a(d.metalnessMap));
    void 0 !== d.emissiveMap && (c.emissiveMap = a(d.emissiveMap));
    void 0 !== d.emissiveIntensity && (c.emissiveIntensity = d.emissiveIntensity);
    void 0 !== d.specularMap && (c.specularMap = a(d.specularMap));
    void 0 !== d.envMap && (c.envMap = a(d.envMap));
    void 0 !== d.reflectivity && (c.reflectivity = d.reflectivity);
    void 0 !== d.lightMap && (c.lightMap = a(d.lightMap));
    void 0 !== d.lightMapIntensity && (c.lightMapIntensity = d.lightMapIntensity);
    void 0 !== d.aoMap && (c.aoMap = a(d.aoMap));
    void 0 !== d.aoMapIntensity && (c.aoMapIntensity = d.aoMapIntensity);
    void 0 !== d.gradientMap && (c.gradientMap = a(d.gradientMap));
    if (void 0 !== d.materials) {
      for (var e = 0, f = d.materials.length;e < f;e++) {
        c.materials.push(this.parse(d.materials[e]));
      }
    }
    return c;
  }});
  Object.assign(he.prototype, {load:function(d, a, b, c) {
    var e = this;
    (new hb(e.manager)).load(d, function(d) {
      a(e.parse(JSON.parse(d)));
    }, b, c);
  }, parse:function(d) {
    var a = new ea, b = d.data.index, c = {Int8Array:Int8Array, Uint8Array:Uint8Array, Uint8ClampedArray:Uint8ClampedArray, Int16Array:Int16Array, Uint16Array:Uint16Array, Int32Array:Int32Array, Uint32Array:Uint32Array, Float32Array:Float32Array, Float64Array:Float64Array};
    void 0 !== b && (b = new c[b.type](b.array), a.setIndex(new ja(b, 1)));
    var e = d.data.attributes, m;
    for (m in e) {
      var g = e[m], b = new c[g.type](g.array);
      a.addAttribute(m, new ja(b, g.itemSize, g.normalized));
    }
    c = d.data.groups || d.data.drawcalls || d.data.offsets;
    if (void 0 !== c) {
      for (m = 0, b = c.length;m !== b;++m) {
        e = c[m], a.addGroup(e.start, e.count, e.materialIndex);
      }
    }
    d = d.data.boundingSphere;
    void 0 !== d && (c = new f, void 0 !== d.center && c.fromArray(d.center), a.boundingSphere = new Ca(c, d.radius));
    return a;
  }});
  tc.Handlers = {handlers:[], add:function(d, a) {
    this.handlers.push(d, a);
  }, get:function(d) {
    for (var a = this.handlers, b = 0, c = a.length;b < c;b += 2) {
      var e = a[b + 1];
      if (a[b].test(d)) {
        return e;
      }
    }
    return null;
  }};
  Object.assign(tc.prototype, {crossOrigin:void 0, extractUrlBase:function(d) {
    d = d.split("/");
    if (1 === d.length) {
      return "./";
    }
    d.pop();
    return d.join("/") + "/";
  }, initMaterials:function(d, a, b) {
    for (var c = [], e = 0;e < d.length;++e) {
      c[e] = this.createMaterial(d[e], a, b);
    }
    return c;
  }, createMaterial:function() {
    var d = {NoBlending:0, NormalBlending:1, AdditiveBlending:2, SubtractiveBlending:3, MultiplyBlending:4, CustomBlending:5}, a = new Z, b = new Ad, c = new Pd;
    return function(e, f, n) {
      function m(d, a, c, e, m) {
        d = f + d;
        var k = tc.Handlers.get(d);
        null !== k ? d = k.load(d) : (b.setCrossOrigin(n), d = b.load(d));
        void 0 !== a && (d.repeat.fromArray(a), 1 !== a[0] && (d.wrapS = 1E3), 1 !== a[1] && (d.wrapT = 1E3));
        void 0 !== c && d.offset.fromArray(c);
        void 0 !== e && ("repeat" === e[0] && (d.wrapS = 1E3), "mirror" === e[0] && (d.wrapS = 1002), "repeat" === e[1] && (d.wrapT = 1E3), "mirror" === e[1] && (d.wrapT = 1002));
        void 0 !== m && (d.anisotropy = m);
        a = na.generateUUID();
        g[a] = d;
        return a;
      }
      var g = {}, k = {uuid:na.generateUUID(), type:"MeshLambertMaterial"}, q;
      for (q in e) {
        var p = e[q];
        switch(q) {
          case "DbgColor":
          case "DbgIndex":
          case "opticalDensity":
          case "illumination":
            break;
          case "DbgName":
            k.name = p;
            break;
          case "blending":
            k.blending = d[p];
            break;
          case "colorAmbient":
          case "mapAmbient":
            console.warn("THREE.Loader.createMaterial:", q, "is no longer supported.");
            break;
          case "colorDiffuse":
            k.color = a.fromArray(p).getHex();
            break;
          case "colorSpecular":
            k.specular = a.fromArray(p).getHex();
            break;
          case "colorEmissive":
            k.emissive = a.fromArray(p).getHex();
            break;
          case "specularCoef":
            k.shininess = p;
            break;
          case "shading":
            "basic" === p.toLowerCase() && (k.type = "MeshBasicMaterial");
            "phong" === p.toLowerCase() && (k.type = "MeshPhongMaterial");
            "standard" === p.toLowerCase() && (k.type = "MeshStandardMaterial");
            break;
          case "mapDiffuse":
            k.map = m(p, e.mapDiffuseRepeat, e.mapDiffuseOffset, e.mapDiffuseWrap, e.mapDiffuseAnisotropy);
            break;
          case "mapDiffuseRepeat":
          case "mapDiffuseOffset":
          case "mapDiffuseWrap":
          case "mapDiffuseAnisotropy":
            break;
          case "mapEmissive":
            k.emissiveMap = m(p, e.mapEmissiveRepeat, e.mapEmissiveOffset, e.mapEmissiveWrap, e.mapEmissiveAnisotropy);
            break;
          case "mapEmissiveRepeat":
          case "mapEmissiveOffset":
          case "mapEmissiveWrap":
          case "mapEmissiveAnisotropy":
            break;
          case "mapLight":
            k.lightMap = m(p, e.mapLightRepeat, e.mapLightOffset, e.mapLightWrap, e.mapLightAnisotropy);
            break;
          case "mapLightRepeat":
          case "mapLightOffset":
          case "mapLightWrap":
          case "mapLightAnisotropy":
            break;
          case "mapAO":
            k.aoMap = m(p, e.mapAORepeat, e.mapAOOffset, e.mapAOWrap, e.mapAOAnisotropy);
            break;
          case "mapAORepeat":
          case "mapAOOffset":
          case "mapAOWrap":
          case "mapAOAnisotropy":
            break;
          case "mapBump":
            k.bumpMap = m(p, e.mapBumpRepeat, e.mapBumpOffset, e.mapBumpWrap, e.mapBumpAnisotropy);
            break;
          case "mapBumpScale":
            k.bumpScale = p;
            break;
          case "mapBumpRepeat":
          case "mapBumpOffset":
          case "mapBumpWrap":
          case "mapBumpAnisotropy":
            break;
          case "mapNormal":
            k.normalMap = m(p, e.mapNormalRepeat, e.mapNormalOffset, e.mapNormalWrap, e.mapNormalAnisotropy);
            break;
          case "mapNormalFactor":
            k.normalScale = [p, p];
            break;
          case "mapNormalRepeat":
          case "mapNormalOffset":
          case "mapNormalWrap":
          case "mapNormalAnisotropy":
            break;
          case "mapSpecular":
            k.specularMap = m(p, e.mapSpecularRepeat, e.mapSpecularOffset, e.mapSpecularWrap, e.mapSpecularAnisotropy);
            break;
          case "mapSpecularRepeat":
          case "mapSpecularOffset":
          case "mapSpecularWrap":
          case "mapSpecularAnisotropy":
            break;
          case "mapMetalness":
            k.metalnessMap = m(p, e.mapMetalnessRepeat, e.mapMetalnessOffset, e.mapMetalnessWrap, e.mapMetalnessAnisotropy);
            break;
          case "mapMetalnessRepeat":
          case "mapMetalnessOffset":
          case "mapMetalnessWrap":
          case "mapMetalnessAnisotropy":
            break;
          case "mapRoughness":
            k.roughnessMap = m(p, e.mapRoughnessRepeat, e.mapRoughnessOffset, e.mapRoughnessWrap, e.mapRoughnessAnisotropy);
            break;
          case "mapRoughnessRepeat":
          case "mapRoughnessOffset":
          case "mapRoughnessWrap":
          case "mapRoughnessAnisotropy":
            break;
          case "mapAlpha":
            k.alphaMap = m(p, e.mapAlphaRepeat, e.mapAlphaOffset, e.mapAlphaWrap, e.mapAlphaAnisotropy);
            break;
          case "mapAlphaRepeat":
          case "mapAlphaOffset":
          case "mapAlphaWrap":
          case "mapAlphaAnisotropy":
            break;
          case "flipSided":
            k.side = 1;
            break;
          case "doubleSided":
            k.side = 2;
            break;
          case "transparency":
            console.warn("THREE.Loader.createMaterial: transparency has been renamed to opacity");
            k.opacity = p;
            break;
          case "depthTest":
          case "depthWrite":
          case "colorWrite":
          case "opacity":
          case "reflectivity":
          case "transparent":
          case "visible":
          case "wireframe":
            k[q] = p;
            break;
          case "vertexColors":
            !0 === p && (k.vertexColors = 2);
            "face" === p && (k.vertexColors = 1);
            break;
          default:
            console.error("THREE.Loader.createMaterial: Unsupported", q, p);
        }
      }
      "MeshBasicMaterial" === k.type && delete k.emissive;
      "MeshPhongMaterial" !== k.type && delete k.specular;
      1 > k.opacity && (k.transparent = !0);
      c.setTextures(g);
      return c.parse(k);
    };
  }()});
  Object.assign(ie.prototype, {load:function(d, a, b, c) {
    var e = this, f = this.texturePath && "string" === typeof this.texturePath ? this.texturePath : tc.prototype.extractUrlBase(d), n = new hb(this.manager);
    n.setWithCredentials(this.withCredentials);
    n.load(d, function(b) {
      b = JSON.parse(b);
      var c = b.metadata;
      if (void 0 !== c && (c = c.type, void 0 !== c)) {
        if ("object" === c.toLowerCase()) {
          console.error("THREE.JSONLoader: " + d + " should be loaded with THREE.ObjectLoader instead.");
          return;
        }
        if ("scene" === c.toLowerCase()) {
          console.error("THREE.JSONLoader: " + d + " should be loaded with THREE.SceneLoader instead.");
          return;
        }
      }
      b = e.parse(b, f);
      a(b.geometry, b.materials);
    }, b, c);
  }, setTexturePath:function(d) {
    this.texturePath = d;
  }, parse:function() {
    return function(d, a) {
      void 0 !== d.data && (d = d.data);
      d.scale = void 0 !== d.scale ? 1 / d.scale : 1;
      var b = new ga, c = d, e, n, m, k, q, p, h, r, t, w, u, v, C, y, A = c.faces;
      t = c.vertices;
      var x = c.normals, B = c.colors;
      p = c.scale;
      var F = 0;
      if (void 0 !== c.uvs) {
        for (e = 0;e < c.uvs.length;e++) {
          c.uvs[e].length && F++;
        }
        for (e = 0;e < F;e++) {
          b.faceVertexUvs[e] = [];
        }
      }
      k = 0;
      for (q = t.length;k < q;) {
        e = new f, e.x = t[k++] * p, e.y = t[k++] * p, e.z = t[k++] * p, b.vertices.push(e);
      }
      k = 0;
      for (q = A.length;k < q;) {
        if (t = A[k++], w = t & 1, m = t & 2, e = t & 8, h = t & 16, u = t & 32, p = t & 64, t &= 128, w) {
          w = new Ha;
          w.a = A[k];
          w.b = A[k + 1];
          w.c = A[k + 3];
          v = new Ha;
          v.a = A[k + 1];
          v.b = A[k + 2];
          v.c = A[k + 3];
          k += 4;
          m && (m = A[k++], w.materialIndex = m, v.materialIndex = m);
          m = b.faces.length;
          if (e) {
            for (e = 0;e < F;e++) {
              for (C = c.uvs[e], b.faceVertexUvs[e][m] = [], b.faceVertexUvs[e][m + 1] = [], n = 0;4 > n;n++) {
                r = A[k++], y = C[2 * r], r = C[2 * r + 1], y = new l(y, r), 2 !== n && b.faceVertexUvs[e][m].push(y), 0 !== n && b.faceVertexUvs[e][m + 1].push(y);
              }
            }
          }
          h && (h = 3 * A[k++], w.normal.set(x[h++], x[h++], x[h]), v.normal.copy(w.normal));
          if (u) {
            for (e = 0;4 > e;e++) {
              h = 3 * A[k++], u = new f(x[h++], x[h++], x[h]), 2 !== e && w.vertexNormals.push(u), 0 !== e && v.vertexNormals.push(u);
            }
          }
          p && (p = A[k++], p = B[p], w.color.setHex(p), v.color.setHex(p));
          if (t) {
            for (e = 0;4 > e;e++) {
              p = A[k++], p = B[p], 2 !== e && w.vertexColors.push(new Z(p)), 0 !== e && v.vertexColors.push(new Z(p));
            }
          }
          b.faces.push(w);
          b.faces.push(v);
        } else {
          w = new Ha;
          w.a = A[k++];
          w.b = A[k++];
          w.c = A[k++];
          m && (m = A[k++], w.materialIndex = m);
          m = b.faces.length;
          if (e) {
            for (e = 0;e < F;e++) {
              for (C = c.uvs[e], b.faceVertexUvs[e][m] = [], n = 0;3 > n;n++) {
                r = A[k++], y = C[2 * r], r = C[2 * r + 1], y = new l(y, r), b.faceVertexUvs[e][m].push(y);
              }
            }
          }
          h && (h = 3 * A[k++], w.normal.set(x[h++], x[h++], x[h]));
          if (u) {
            for (e = 0;3 > e;e++) {
              h = 3 * A[k++], u = new f(x[h++], x[h++], x[h]), w.vertexNormals.push(u);
            }
          }
          p && (p = A[k++], w.color.setHex(B[p]));
          if (t) {
            for (e = 0;3 > e;e++) {
              p = A[k++], w.vertexColors.push(new Z(B[p]));
            }
          }
          b.faces.push(w);
        }
      }
      c = d;
      k = void 0 !== c.influencesPerVertex ? c.influencesPerVertex : 2;
      if (c.skinWeights) {
        for (q = 0, A = c.skinWeights.length;q < A;q += k) {
          b.skinWeights.push(new g(c.skinWeights[q], 1 < k ? c.skinWeights[q + 1] : 0, 2 < k ? c.skinWeights[q + 2] : 0, 3 < k ? c.skinWeights[q + 3] : 0));
        }
      }
      if (c.skinIndices) {
        for (q = 0, A = c.skinIndices.length;q < A;q += k) {
          b.skinIndices.push(new g(c.skinIndices[q], 1 < k ? c.skinIndices[q + 1] : 0, 2 < k ? c.skinIndices[q + 2] : 0, 3 < k ? c.skinIndices[q + 3] : 0));
        }
      }
      b.bones = c.bones;
      b.bones && 0 < b.bones.length && (b.skinWeights.length !== b.skinIndices.length || b.skinIndices.length !== b.vertices.length) && console.warn("When skinning, number of vertices (" + b.vertices.length + "), skinIndices (" + b.skinIndices.length + "), and skinWeights (" + b.skinWeights.length + ") should match.");
      q = d;
      A = q.scale;
      if (void 0 !== q.morphTargets) {
        for (c = 0, k = q.morphTargets.length;c < k;c++) {
          for (b.morphTargets[c] = {}, b.morphTargets[c].name = q.morphTargets[c].name, b.morphTargets[c].vertices = [], x = b.morphTargets[c].vertices, B = q.morphTargets[c].vertices, F = 0, t = B.length;F < t;F += 3) {
            p = new f, p.x = B[F] * A, p.y = B[F + 1] * A, p.z = B[F + 2] * A, x.push(p);
          }
        }
      }
      if (void 0 !== q.morphColors && 0 < q.morphColors.length) {
        for (console.warn('THREE.JSONLoader: "morphColors" no longer supported. Using them as face colors.'), A = b.faces, q = q.morphColors[0].colors, c = 0, k = A.length;c < k;c++) {
          A[c].color.fromArray(q, 3 * c);
        }
      }
      q = d;
      c = [];
      k = [];
      void 0 !== q.animation && k.push(q.animation);
      void 0 !== q.animations && (q.animations.length ? k = k.concat(q.animations) : k.push(q.animations));
      for (q = 0;q < k.length;q++) {
        (A = bb.parseAnimation(k[q], b.bones)) && c.push(A);
      }
      b.morphTargets && (k = bb.CreateClipsFromMorphTargetSequences(b.morphTargets, 10), c = c.concat(k));
      0 < c.length && (b.animations = c);
      b.computeFaceNormals();
      b.computeBoundingSphere();
      if (void 0 === d.materials || 0 === d.materials.length) {
        return {geometry:b};
      }
      c = tc.prototype.initMaterials(d.materials, a, this.crossOrigin);
      return {geometry:b, materials:c};
    };
  }()});
  Object.assign(Ne.prototype, {load:function(d, a, b, c) {
    "" === this.texturePath && (this.texturePath = d.substring(0, d.lastIndexOf("/") + 1));
    var e = this;
    (new hb(e.manager)).load(d, function(b) {
      var f = null;
      try {
        f = JSON.parse(b);
      } catch (ya) {
        void 0 !== c && c(ya);
        console.error("THREE:ObjectLoader: Can't parse " + d + ".", ya.message);
        return;
      }
      b = f.metadata;
      void 0 === b || void 0 === b.type || "geometry" === b.type.toLowerCase() ? console.error("THREE.ObjectLoader: Can't load " + d + ". Use THREE.JSONLoader instead.") : e.parse(f, a);
    }, b, c);
  }, setTexturePath:function(d) {
    this.texturePath = d;
  }, setCrossOrigin:function(d) {
    this.crossOrigin = d;
  }, parse:function(d, a) {
    var b = this.parseGeometries(d.geometries), c = this.parseImages(d.images, function() {
      void 0 !== a && a(e);
    }), c = this.parseTextures(d.textures, c), c = this.parseMaterials(d.materials, c), e = this.parseObject(d.object, b, c);
    d.animations && (e.animations = this.parseAnimations(d.animations));
    void 0 !== d.images && 0 !== d.images.length || void 0 === a || a(e);
    return e;
  }, parseGeometries:function(d) {
    var a = {};
    if (void 0 !== d) {
      for (var b = new ie, c = new he, e = 0, f = d.length;e < f;e++) {
        var m, g = d[e];
        switch(g.type) {
          case "PlaneGeometry":
          case "PlaneBufferGeometry":
            m = new jb[g.type](g.width, g.height, g.widthSegments, g.heightSegments);
            break;
          case "BoxGeometry":
          case "BoxBufferGeometry":
          case "CubeGeometry":
            m = new jb[g.type](g.width, g.height, g.depth, g.widthSegments, g.heightSegments, g.depthSegments);
            break;
          case "CircleGeometry":
          case "CircleBufferGeometry":
            m = new jb[g.type](g.radius, g.segments, g.thetaStart, g.thetaLength);
            break;
          case "CylinderGeometry":
          case "CylinderBufferGeometry":
            m = new jb[g.type](g.radiusTop, g.radiusBottom, g.height, g.radialSegments, g.heightSegments, g.openEnded, g.thetaStart, g.thetaLength);
            break;
          case "ConeGeometry":
          case "ConeBufferGeometry":
            m = new jb[g.type](g.radius, g.height, g.radialSegments, g.heightSegments, g.openEnded, g.thetaStart, g.thetaLength);
            break;
          case "SphereGeometry":
          case "SphereBufferGeometry":
            m = new jb[g.type](g.radius, g.widthSegments, g.heightSegments, g.phiStart, g.phiLength, g.thetaStart, g.thetaLength);
            break;
          case "DodecahedronGeometry":
          case "IcosahedronGeometry":
          case "OctahedronGeometry":
          case "TetrahedronGeometry":
            m = new jb[g.type](g.radius, g.detail);
            break;
          case "RingGeometry":
          case "RingBufferGeometry":
            m = new jb[g.type](g.innerRadius, g.outerRadius, g.thetaSegments, g.phiSegments, g.thetaStart, g.thetaLength);
            break;
          case "TorusGeometry":
          case "TorusBufferGeometry":
            m = new jb[g.type](g.radius, g.tube, g.radialSegments, g.tubularSegments, g.arc);
            break;
          case "TorusKnotGeometry":
          case "TorusKnotBufferGeometry":
            m = new jb[g.type](g.radius, g.tube, g.tubularSegments, g.radialSegments, g.p, g.q);
            break;
          case "LatheGeometry":
          case "LatheBufferGeometry":
            m = new jb[g.type](g.points, g.segments, g.phiStart, g.phiLength);
            break;
          case "BufferGeometry":
            m = c.parse(g);
            break;
          case "Geometry":
            m = b.parse(g, this.texturePath).geometry;
            break;
          default:
            console.warn('THREE.ObjectLoader: Unsupported geometry type "' + g.type + '"');
            continue;
        }
        m.uuid = g.uuid;
        void 0 !== g.name && (m.name = g.name);
        a[g.uuid] = m;
      }
    }
    return a;
  }, parseMaterials:function(d, a) {
    var b = {};
    if (void 0 !== d) {
      var c = new Pd;
      c.setTextures(a);
      a = 0;
      for (var e = d.length;a < e;a++) {
        var f = c.parse(d[a]);
        b[f.uuid] = f;
      }
    }
    return b;
  }, parseAnimations:function(d) {
    for (var a = [], b = 0;b < d.length;b++) {
      var c = bb.parse(d[b]);
      a.push(c);
    }
    return a;
  }, parseImages:function(d, a) {
    function b(d) {
      c.manager.itemStart(d);
      return f.load(d, function() {
        c.manager.itemEnd(d);
      }, void 0, function() {
        c.manager.itemError(d);
      });
    }
    var c = this, e = {};
    if (void 0 !== d && 0 < d.length) {
      a = new ee(a);
      var f = new cd(a);
      f.setCrossOrigin(this.crossOrigin);
      a = 0;
      for (var m = d.length;a < m;a++) {
        var n = d[a], g = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(n.url) ? n.url : c.texturePath + n.url;
        e[n.uuid] = b(g);
      }
    }
    return e;
  }, parseTextures:function(d, a) {
    function c(d, a) {
      if ("number" === typeof d) {
        return d;
      }
      console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.", d);
      return a[d];
    }
    var e = {UVMapping:300, CubeReflectionMapping:301, CubeRefractionMapping:302, EquirectangularReflectionMapping:303, EquirectangularRefractionMapping:304, SphericalReflectionMapping:305, CubeUVReflectionMapping:306, CubeUVRefractionMapping:307}, f = {RepeatWrapping:1E3, ClampToEdgeWrapping:1001, MirroredRepeatWrapping:1002}, m = {NearestFilter:1003, NearestMipMapNearestFilter:1004, NearestMipMapLinearFilter:1005, LinearFilter:1006, LinearMipMapNearestFilter:1007, LinearMipMapLinearFilter:1008}, 
    n = {};
    if (void 0 !== d) {
      for (var g = 0, k = d.length;g < k;g++) {
        var q = d[g];
        void 0 === q.image && console.warn('THREE.ObjectLoader: No "image" specified for', q.uuid);
        void 0 === a[q.image] && console.warn("THREE.ObjectLoader: Undefined image", q.image);
        var p = new b(a[q.image]);
        p.needsUpdate = !0;
        p.uuid = q.uuid;
        void 0 !== q.name && (p.name = q.name);
        void 0 !== q.mapping && (p.mapping = c(q.mapping, e));
        void 0 !== q.offset && p.offset.fromArray(q.offset);
        void 0 !== q.repeat && p.repeat.fromArray(q.repeat);
        void 0 !== q.wrap && (p.wrapS = c(q.wrap[0], f), p.wrapT = c(q.wrap[1], f));
        void 0 !== q.minFilter && (p.minFilter = c(q.minFilter, m));
        void 0 !== q.magFilter && (p.magFilter = c(q.magFilter, m));
        void 0 !== q.anisotropy && (p.anisotropy = q.anisotropy);
        void 0 !== q.flipY && (p.flipY = q.flipY);
        n[q.uuid] = p;
      }
    }
    return n;
  }, parseObject:function() {
    var d = new q;
    return function(a, b, c) {
      function e(a) {
        void 0 === b[a] && console.warn("THREE.ObjectLoader: Undefined geometry", a);
        return b[a];
      }
      function f(a) {
        if (void 0 !== a) {
          return void 0 === c[a] && console.warn("THREE.ObjectLoader: Undefined material", a), c[a];
        }
      }
      var m;
      switch(a.type) {
        case "Scene":
          m = new ud;
          void 0 !== a.background && Number.isInteger(a.background) && (m.background = new Z(a.background));
          void 0 !== a.fog && ("Fog" === a.fog.type ? m.fog = new Yb(a.fog.color, a.fog.near, a.fog.far) : "FogExp2" === a.fog.type && (m.fog = new Xb(a.fog.color, a.fog.density)));
          break;
        case "PerspectiveCamera":
          m = new Ma(a.fov, a.aspect, a.near, a.far);
          void 0 !== a.focus && (m.focus = a.focus);
          void 0 !== a.zoom && (m.zoom = a.zoom);
          void 0 !== a.filmGauge && (m.filmGauge = a.filmGauge);
          void 0 !== a.filmOffset && (m.filmOffset = a.filmOffset);
          void 0 !== a.view && (m.view = Object.assign({}, a.view));
          break;
        case "OrthographicCamera":
          m = new Wb(a.left, a.right, a.top, a.bottom, a.near, a.far);
          break;
        case "AmbientLight":
          m = new Hd(a.color, a.intensity);
          break;
        case "DirectionalLight":
          m = new Gd(a.color, a.intensity);
          break;
        case "PointLight":
          m = new Ed(a.color, a.intensity, a.distance, a.decay);
          break;
        case "RectAreaLight":
          m = new Id(a.color, a.intensity, a.width, a.height);
          break;
        case "SpotLight":
          m = new Dd(a.color, a.intensity, a.distance, a.angle, a.penumbra, a.decay);
          break;
        case "HemisphereLight":
          m = new Bd(a.color, a.groundColor, a.intensity);
          break;
        case "SkinnedMesh":
          console.warn("THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.");
        case "Mesh":
          m = e(a.geometry);
          var g = f(a.material);
          m = m.bones && 0 < m.bones.length ? new wd(m, g) : new Ia(m, g);
          break;
        case "LOD":
          m = new Jc;
          break;
        case "Line":
          m = new cb(e(a.geometry), f(a.material), a.mode);
          break;
        case "LineLoop":
          m = new xd(e(a.geometry), f(a.material));
          break;
        case "LineSegments":
          m = new wa(e(a.geometry), f(a.material));
          break;
        case "PointCloud":
        case "Points":
          m = new Zb(e(a.geometry), f(a.material));
          break;
        case "Sprite":
          m = new Ic(f(a.material));
          break;
        case "Group":
          m = new Lc;
          break;
        default:
          m = new aa;
      }
      m.uuid = a.uuid;
      void 0 !== a.name && (m.name = a.name);
      void 0 !== a.matrix ? (d.fromArray(a.matrix), d.decompose(m.position, m.quaternion, m.scale)) : (void 0 !== a.position && m.position.fromArray(a.position), void 0 !== a.rotation && m.rotation.fromArray(a.rotation), void 0 !== a.quaternion && m.quaternion.fromArray(a.quaternion), void 0 !== a.scale && m.scale.fromArray(a.scale));
      void 0 !== a.castShadow && (m.castShadow = a.castShadow);
      void 0 !== a.receiveShadow && (m.receiveShadow = a.receiveShadow);
      a.shadow && (void 0 !== a.shadow.bias && (m.shadow.bias = a.shadow.bias), void 0 !== a.shadow.radius && (m.shadow.radius = a.shadow.radius), void 0 !== a.shadow.mapSize && m.shadow.mapSize.fromArray(a.shadow.mapSize), void 0 !== a.shadow.camera && (m.shadow.camera = this.parseObject(a.shadow.camera)));
      void 0 !== a.visible && (m.visible = a.visible);
      void 0 !== a.userData && (m.userData = a.userData);
      if (void 0 !== a.children) {
        for (var n in a.children) {
          m.add(this.parseObject(a.children[n], b, c));
        }
      }
      if ("LOD" === a.type) {
        for (a = a.levels, g = 0;g < a.length;g++) {
          var k = a[g];
          n = m.getObjectByProperty("uuid", k.object);
          void 0 !== n && m.addLevel(n, k.distance);
        }
      }
      return m;
    };
  }()});
  Object.assign(Qa.prototype, {getPoint:function() {
    console.warn("THREE.Curve: Warning, getPoint() not implemented!");
    return null;
  }, getPointAt:function(a) {
    a = this.getUtoTmapping(a);
    return this.getPoint(a);
  }, getPoints:function(a) {
    void 0 === a && (a = 5);
    for (var d = [], b = 0;b <= a;b++) {
      d.push(this.getPoint(b / a));
    }
    return d;
  }, getSpacedPoints:function(a) {
    void 0 === a && (a = 5);
    for (var d = [], b = 0;b <= a;b++) {
      d.push(this.getPointAt(b / a));
    }
    return d;
  }, getLength:function() {
    var a = this.getLengths();
    return a[a.length - 1];
  }, getLengths:function(a) {
    void 0 === a && (a = this.__arcLengthDivisions ? this.__arcLengthDivisions : 200);
    if (this.cacheArcLengths && this.cacheArcLengths.length === a + 1 && !this.needsUpdate) {
      return this.cacheArcLengths;
    }
    this.needsUpdate = !1;
    var d = [], b, c = this.getPoint(0), e, f = 0;
    d.push(0);
    for (e = 1;e <= a;e++) {
      b = this.getPoint(e / a), f += b.distanceTo(c), d.push(f), c = b;
    }
    return this.cacheArcLengths = d;
  }, updateArcLengths:function() {
    this.needsUpdate = !0;
    this.getLengths();
  }, getUtoTmapping:function(a, b) {
    var d = this.getLengths(), c, e = d.length;
    a = b ? b : a * d[e - 1];
    b = 0;
    for (var f = e - 1, m;b <= f;) {
      if (c = Math.floor(b + (f - b) / 2), m = d[c] - a, 0 > m) {
        b = c + 1;
      } else {
        if (0 < m) {
          f = c - 1;
        } else {
          f = c;
          break;
        }
      }
    }
    c = f;
    if (d[c] === a) {
      return c / (e - 1);
    }
    b = d[c];
    return (c + (a - b) / (d[c + 1] - b)) / (e - 1);
  }, getTangent:function(a) {
    var d = a - 1E-4;
    a += 1E-4;
    0 > d && (d = 0);
    1 < a && (a = 1);
    d = this.getPoint(d);
    return this.getPoint(a).clone().sub(d).normalize();
  }, getTangentAt:function(a) {
    a = this.getUtoTmapping(a);
    return this.getTangent(a);
  }, computeFrenetFrames:function(a, b) {
    var d = new f, c = [], e = [], m = [], g = new f, n = new q, k, p;
    for (k = 0;k <= a;k++) {
      p = k / a, c[k] = this.getTangentAt(p), c[k].normalize();
    }
    e[0] = new f;
    m[0] = new f;
    k = Number.MAX_VALUE;
    p = Math.abs(c[0].x);
    var h = Math.abs(c[0].y), r = Math.abs(c[0].z);
    p <= k && (k = p, d.set(1, 0, 0));
    h <= k && (k = h, d.set(0, 1, 0));
    r <= k && d.set(0, 0, 1);
    g.crossVectors(c[0], d).normalize();
    e[0].crossVectors(c[0], g);
    m[0].crossVectors(c[0], e[0]);
    for (k = 1;k <= a;k++) {
      e[k] = e[k - 1].clone(), m[k] = m[k - 1].clone(), g.crossVectors(c[k - 1], c[k]), g.length() > Number.EPSILON && (g.normalize(), d = Math.acos(na.clamp(c[k - 1].dot(c[k]), -1, 1)), e[k].applyMatrix4(n.makeRotationAxis(g, d))), m[k].crossVectors(c[k], e[k]);
    }
    if (!0 === b) {
      for (d = Math.acos(na.clamp(e[0].dot(e[a]), -1, 1)), d /= a, 0 < c[0].dot(g.crossVectors(e[0], e[a])) && (d = -d), k = 1;k <= a;k++) {
        e[k].applyMatrix4(n.makeRotationAxis(c[k], d * k)), m[k].crossVectors(c[k], e[k]);
      }
    }
    return {tangents:c, normals:e, binormals:m};
  }});
  pb.prototype = Object.create(Qa.prototype);
  pb.prototype.constructor = pb;
  pb.prototype.isLineCurve = !0;
  pb.prototype.getPoint = function(a) {
    if (1 === a) {
      return this.v2.clone();
    }
    var d = this.v2.clone().sub(this.v1);
    d.multiplyScalar(a).add(this.v1);
    return d;
  };
  pb.prototype.getPointAt = function(a) {
    return this.getPoint(a);
  };
  pb.prototype.getTangent = function(a) {
    return this.v2.clone().sub(this.v1).normalize();
  };
  fd.prototype = Object.assign(Object.create(Qa.prototype), {constructor:fd, add:function(a) {
    this.curves.push(a);
  }, closePath:function() {
    var a = this.curves[0].getPoint(0), b = this.curves[this.curves.length - 1].getPoint(1);
    a.equals(b) || this.curves.push(new pb(b, a));
  }, getPoint:function(a) {
    var d = a * this.getLength(), b = this.getCurveLengths();
    for (a = 0;a < b.length;) {
      if (b[a] >= d) {
        return d = b[a] - d, a = this.curves[a], b = a.getLength(), a.getPointAt(0 === b ? 0 : 1 - d / b);
      }
      a++;
    }
    return null;
  }, getLength:function() {
    var a = this.getCurveLengths();
    return a[a.length - 1];
  }, updateArcLengths:function() {
    this.needsUpdate = !0;
    this.cacheLengths = null;
    this.getLengths();
  }, getCurveLengths:function() {
    if (this.cacheLengths && this.cacheLengths.length === this.curves.length) {
      return this.cacheLengths;
    }
    for (var a = [], b = 0, c = 0, e = this.curves.length;c < e;c++) {
      b += this.curves[c].getLength(), a.push(b);
    }
    return this.cacheLengths = a;
  }, getSpacedPoints:function(a) {
    void 0 === a && (a = 40);
    for (var d = [], b = 0;b <= a;b++) {
      d.push(this.getPoint(b / a));
    }
    this.autoClose && d.push(d[0]);
    return d;
  }, getPoints:function(a) {
    a = a || 12;
    for (var d = [], b, c = 0, e = this.curves;c < e.length;c++) {
      for (var f = e[c], f = f.getPoints(f && f.isEllipseCurve ? 2 * a : f && f.isLineCurve ? 1 : f && f.isSplineCurve ? a * f.points.length : a), m = 0;m < f.length;m++) {
        var g = f[m];
        b && b.equals(g) || (d.push(g), b = g);
      }
    }
    this.autoClose && 1 < d.length && !d[d.length - 1].equals(d[0]) && d.push(d[0]);
    return d;
  }, createPointsGeometry:function(a) {
    a = this.getPoints(a);
    return this.createGeometry(a);
  }, createSpacedPointsGeometry:function(a) {
    a = this.getSpacedPoints(a);
    return this.createGeometry(a);
  }, createGeometry:function(a) {
    for (var d = new ga, b = 0, c = a.length;b < c;b++) {
      var e = a[b];
      d.vertices.push(new f(e.x, e.y, e.z || 0));
    }
    return d;
  }});
  vb.prototype = Object.create(Qa.prototype);
  vb.prototype.constructor = vb;
  vb.prototype.isEllipseCurve = !0;
  vb.prototype.getPoint = function(a) {
    for (var d = 2 * Math.PI, b = this.aEndAngle - this.aStartAngle, c = Math.abs(b) < Number.EPSILON;0 > b;) {
      b += d;
    }
    for (;b > d;) {
      b -= d;
    }
    b < Number.EPSILON && (b = c ? 0 : d);
    !0 !== this.aClockwise || c || (b = b === d ? -d : b - d);
    d = this.aStartAngle + a * b;
    a = this.aX + this.xRadius * Math.cos(d);
    var e = this.aY + this.yRadius * Math.sin(d);
    0 !== this.aRotation && (d = Math.cos(this.aRotation), b = Math.sin(this.aRotation), c = a - this.aX, e -= this.aY, a = c * d - e * b + this.aX, e = c * b + e * d + this.aY);
    return new l(a, e);
  };
  Tb.prototype = Object.create(Qa.prototype);
  Tb.prototype.constructor = Tb;
  Tb.prototype.isSplineCurve = !0;
  Tb.prototype.getPoint = function(a) {
    var d = this.points, b = (d.length - 1) * a;
    a = Math.floor(b);
    var b = b - a, c = d[0 === a ? a : a - 1], e = d[a], f = d[a > d.length - 2 ? d.length - 1 : a + 1], d = d[a > d.length - 3 ? d.length - 1 : a + 2];
    return new l(Oe(b, c.x, e.x, f.x, d.x), Oe(b, c.y, e.y, f.y, d.y));
  };
  uc.prototype = Object.create(Qa.prototype);
  uc.prototype.constructor = uc;
  uc.prototype.getPoint = function(a) {
    var d = this.v0, b = this.v1, c = this.v2, e = this.v3;
    return new l(Sb(a, d.x, b.x, c.x, e.x), Sb(a, d.y, b.y, c.y, e.y));
  };
  vc.prototype = Object.create(Qa.prototype);
  vc.prototype.constructor = vc;
  vc.prototype.getPoint = function(a) {
    var d = this.v0, b = this.v1, c = this.v2;
    return new l(Rb(a, d.x, b.x, c.x), Rb(a, d.y, b.y, c.y));
  };
  var Ae = Object.assign(Object.create(fd.prototype), {fromPoints:function(a) {
    this.moveTo(a[0].x, a[0].y);
    for (var d = 1, b = a.length;d < b;d++) {
      this.lineTo(a[d].x, a[d].y);
    }
  }, moveTo:function(a, b) {
    this.currentPoint.set(a, b);
  }, lineTo:function(a, b) {
    var d = new pb(this.currentPoint.clone(), new l(a, b));
    this.curves.push(d);
    this.currentPoint.set(a, b);
  }, quadraticCurveTo:function(a, b, c, e) {
    a = new vc(this.currentPoint.clone(), new l(a, b), new l(c, e));
    this.curves.push(a);
    this.currentPoint.set(c, e);
  }, bezierCurveTo:function(a, b, c, e, f, m) {
    a = new uc(this.currentPoint.clone(), new l(a, b), new l(c, e), new l(f, m));
    this.curves.push(a);
    this.currentPoint.set(f, m);
  }, splineThru:function(a) {
    var d = [this.currentPoint.clone()].concat(a), d = new Tb(d);
    this.curves.push(d);
    this.currentPoint.copy(a[a.length - 1]);
  }, arc:function(a, b, c, e, f, m) {
    this.absarc(a + this.currentPoint.x, b + this.currentPoint.y, c, e, f, m);
  }, absarc:function(a, b, c, e, f, m) {
    this.absellipse(a, b, c, c, e, f, m);
  }, ellipse:function(a, b, c, e, f, m, g, k) {
    this.absellipse(a + this.currentPoint.x, b + this.currentPoint.y, c, e, f, m, g, k);
  }, absellipse:function(a, b, c, e, f, m, g, k) {
    a = new vb(a, b, c, e, f, m, g, k);
    0 < this.curves.length && (b = a.getPoint(0), b.equals(this.currentPoint) || this.lineTo(b.x, b.y));
    this.curves.push(a);
    a = a.getPoint(1);
    this.currentPoint.copy(a);
  }});
  gd.prototype = Ae;
  Ae.constructor = gd;
  Ub.prototype = Object.assign(Object.create(Ae), {constructor:Ub, getPointsHoles:function(a) {
    for (var d = [], b = 0, c = this.holes.length;b < c;b++) {
      d[b] = this.holes[b].getPoints(a);
    }
    return d;
  }, extractAllPoints:function(a) {
    return {shape:this.getPoints(a), holes:this.getPointsHoles(a)};
  }, extractPoints:function(a) {
    return this.extractAllPoints(a);
  }});
  Object.assign(je.prototype, {moveTo:function(a, b) {
    this.currentPath = new gd;
    this.subPaths.push(this.currentPath);
    this.currentPath.moveTo(a, b);
  }, lineTo:function(a, b) {
    this.currentPath.lineTo(a, b);
  }, quadraticCurveTo:function(a, b, c, e) {
    this.currentPath.quadraticCurveTo(a, b, c, e);
  }, bezierCurveTo:function(a, b, c, e, f, m) {
    this.currentPath.bezierCurveTo(a, b, c, e, f, m);
  }, splineThru:function(a) {
    this.currentPath.splineThru(a);
  }, toShapes:function(a, b) {
    function d(a) {
      for (var d = [], b = 0, c = a.length;b < c;b++) {
        var e = a[b], f = new Ub;
        f.curves = e.curves;
        d.push(f);
      }
      return d;
    }
    function c(a, d) {
      for (var b = d.length, c = !1, e = b - 1, f = 0;f < b;e = f++) {
        var m = d[e], g = d[f], n = g.x - m.x, k = g.y - m.y;
        if (Math.abs(k) > Number.EPSILON) {
          if (0 > k && (m = d[f], n = -n, g = d[e], k = -k), !(a.y < m.y || a.y > g.y)) {
            if (a.y === m.y) {
              if (a.x === m.x) {
                return !0;
              }
            } else {
              e = k * (a.x - m.x) - n * (a.y - m.y);
              if (0 === e) {
                return !0;
              }
              0 > e || (c = !c);
            }
          }
        } else {
          if (a.y === m.y && (g.x <= a.x && a.x <= m.x || m.x <= a.x && a.x <= g.x)) {
            return !0;
          }
        }
      }
      return c;
    }
    var e = fb.isClockWise, f = this.subPaths;
    if (0 === f.length) {
      return [];
    }
    if (!0 === b) {
      return d(f);
    }
    var m, g, n = [];
    if (1 === f.length) {
      return m = f[0], g = new Ub, g.curves = m.curves, n.push(g), n;
    }
    var k = !e(f[0].getPoints()), k = a ? !k : k;
    g = [];
    var q = [], p = [], h = 0, r;
    q[h] = void 0;
    p[h] = [];
    for (var t = 0, l = f.length;t < l;t++) {
      m = f[t], r = m.getPoints(), b = e(r), (b = a ? !b : b) ? (!k && q[h] && h++, q[h] = {s:new Ub, p:r}, q[h].s.curves = m.curves, k && h++, p[h] = []) : p[h].push({h:m, p:r[0]});
    }
    if (!q[0]) {
      return d(f);
    }
    if (1 < q.length) {
      t = !1;
      m = [];
      e = 0;
      for (f = q.length;e < f;e++) {
        g[e] = [];
      }
      e = 0;
      for (f = q.length;e < f;e++) {
        for (b = p[e], k = 0;k < b.length;k++) {
          h = b[k];
          r = !0;
          for (l = 0;l < q.length;l++) {
            c(h.p, q[l].p) && (e !== l && m.push({froms:e, tos:l, hole:k}), r ? (r = !1, g[l].push(h)) : t = !0);
          }
          r && g[e].push(h);
        }
      }
      0 < m.length && (t || (p = g));
    }
    t = 0;
    for (e = q.length;t < e;t++) {
      for (g = q[t].s, n.push(g), m = p[t], f = 0, b = m.length;f < b;f++) {
        g.holes.push(m[f].h);
      }
    }
    return n;
  }});
  Object.assign(ke.prototype, {isFont:!0, generateShapes:function(a, b, c) {
    void 0 === b && (b = 100);
    void 0 === c && (c = 4);
    var d = this.data;
    a = String(a).split("");
    var e = b / d.resolution, f = (d.boundingBox.yMax - d.boundingBox.yMin + d.underlineThickness) * e, m = 0, g = 0;
    b = [];
    for (var n = 0;n < a.length;n++) {
      var k = a[n];
      if ("\n" === k) {
        m = 0, g -= f;
      } else {
        var q;
        q = e;
        var p = m, h = g;
        if (k = d.glyphs[k] || d.glyphs["?"]) {
          var r = new je, t = [], l, w, u, v, C, y, A, x;
          if (k.o) {
            for (var z = k._cachedOutline || (k._cachedOutline = k.o.split(" ")), B = 0, F = z.length;B < F;) {
              switch(z[B++]) {
                case "m":
                  l = z[B++] * q + p;
                  w = z[B++] * q + h;
                  r.moveTo(l, w);
                  break;
                case "l":
                  l = z[B++] * q + p;
                  w = z[B++] * q + h;
                  r.lineTo(l, w);
                  break;
                case "q":
                  l = z[B++] * q + p;
                  w = z[B++] * q + h;
                  C = z[B++] * q + p;
                  y = z[B++] * q + h;
                  r.quadraticCurveTo(C, y, l, w);
                  if (v = t[t.length - 1]) {
                    u = v.x;
                    v = v.y;
                    for (var I = 1;I <= c;I++) {
                      var G = I / c;
                      Rb(G, u, C, l);
                      Rb(G, v, y, w);
                    }
                  }
                  break;
                case "b":
                  if (l = z[B++] * q + p, w = z[B++] * q + h, C = z[B++] * q + p, y = z[B++] * q + h, A = z[B++] * q + p, x = z[B++] * q + h, r.bezierCurveTo(C, y, A, x, l, w), v = t[t.length - 1]) {
                    for (u = v.x, v = v.y, I = 1;I <= c;I++) {
                      G = I / c, Sb(G, u, C, A, l), Sb(G, v, y, x, w);
                    }
                  }
              }
            }
          }
          q = {offsetX:k.ha * q, path:r};
        } else {
          q = void 0;
        }
        m += q.offsetX;
        b.push(q.path);
      }
    }
    c = [];
    d = 0;
    for (a = b.length;d < a;d++) {
      Array.prototype.push.apply(c, b[d].toShapes());
    }
    return c;
  }});
  Object.assign(Pe.prototype, {load:function(a, b, c, e) {
    var d = this;
    (new hb(this.manager)).load(a, function(a) {
      var c;
      try {
        c = JSON.parse(a);
      } catch (ya) {
        console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead."), c = JSON.parse(a.substring(65, a.length - 2));
      }
      a = d.parse(c);
      b && b(a);
    }, c, e);
  }, parse:function(a) {
    return new ke(a);
  }});
  var Wd, oe = {getContext:function() {
    void 0 === Wd && (Wd = new (window.AudioContext || window.webkitAudioContext));
    return Wd;
  }, setContext:function(a) {
    Wd = a;
  }};
  Object.assign(le.prototype, {load:function(a, b, c, e) {
    var d = new hb(this.manager);
    d.setResponseType("arraybuffer");
    d.load(a, function(a) {
      oe.getContext().decodeAudioData(a, function(a) {
        b(a);
      });
    }, c, e);
  }});
  Object.assign(Qe.prototype, {update:function() {
    var a, b, c, e, f, m, g, k, p = new q, h = new q;
    return function(d) {
      if (a !== this || b !== d.focus || c !== d.fov || e !== d.aspect * this.aspect || f !== d.near || m !== d.far || g !== d.zoom || k !== this.eyeSep) {
        a = this;
        b = d.focus;
        c = d.fov;
        e = d.aspect * this.aspect;
        f = d.near;
        m = d.far;
        g = d.zoom;
        var n = d.projectionMatrix.clone();
        k = this.eyeSep / 2;
        var q = k * f / b, r = f * Math.tan(na.DEG2RAD * c * .5) / g, t, l;
        h.elements[12] = -k;
        p.elements[12] = k;
        t = -r * e + q;
        l = r * e + q;
        n.elements[0] = 2 * f / (l - t);
        n.elements[8] = (l + t) / (l - t);
        this.cameraL.projectionMatrix.copy(n);
        t = -r * e - q;
        l = r * e - q;
        n.elements[0] = 2 * f / (l - t);
        n.elements[8] = (l + t) / (l - t);
        this.cameraR.projectionMatrix.copy(n);
      }
      this.cameraL.matrixWorld.copy(d.matrixWorld).multiply(h);
      this.cameraR.matrixWorld.copy(d.matrixWorld).multiply(p);
    };
  }()});
  Qd.prototype = Object.create(aa.prototype);
  Qd.prototype.constructor = Qd;
  me.prototype = Object.assign(Object.create(Ma.prototype), {constructor:me, isArrayCamera:!0});
  ne.prototype = Object.assign(Object.create(aa.prototype), {constructor:ne, getInput:function() {
    return this.gain;
  }, removeFilter:function() {
    null !== this.filter && (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination), this.gain.connect(this.context.destination), this.filter = null);
  }, getFilter:function() {
    return this.filter;
  }, setFilter:function(a) {
    null !== this.filter ? (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination)) : this.gain.disconnect(this.context.destination);
    this.filter = a;
    this.gain.connect(this.filter);
    this.filter.connect(this.context.destination);
  }, getMasterVolume:function() {
    return this.gain.gain.value;
  }, setMasterVolume:function(a) {
    this.gain.gain.value = a;
  }, updateMatrixWorld:function() {
    var a = new f, b = new e, c = new f, m = new f;
    return function(d) {
      aa.prototype.updateMatrixWorld.call(this, d);
      d = this.context.listener;
      var e = this.up;
      this.matrixWorld.decompose(a, b, c);
      m.set(0, 0, -1).applyQuaternion(b);
      d.positionX ? (d.positionX.setValueAtTime(a.x, this.context.currentTime), d.positionY.setValueAtTime(a.y, this.context.currentTime), d.positionZ.setValueAtTime(a.z, this.context.currentTime), d.forwardX.setValueAtTime(m.x, this.context.currentTime), d.forwardY.setValueAtTime(m.y, this.context.currentTime), d.forwardZ.setValueAtTime(m.z, this.context.currentTime), d.upX.setValueAtTime(e.x, this.context.currentTime), d.upY.setValueAtTime(e.y, this.context.currentTime), d.upZ.setValueAtTime(e.z, 
      this.context.currentTime)) : (d.setPosition(a.x, a.y, a.z), d.setOrientation(m.x, m.y, m.z, e.x, e.y, e.z));
    };
  }()});
  wc.prototype = Object.assign(Object.create(aa.prototype), {constructor:wc, getOutput:function() {
    return this.gain;
  }, setNodeSource:function(a) {
    this.hasPlaybackControl = !1;
    this.sourceType = "audioNode";
    this.source = a;
    this.connect();
    return this;
  }, setBuffer:function(a) {
    this.buffer = a;
    this.sourceType = "buffer";
    this.autoplay && this.play();
    return this;
  }, play:function() {
    if (!0 === this.isPlaying) {
      console.warn("THREE.Audio: Audio is already playing.");
    } else {
      if (!1 === this.hasPlaybackControl) {
        console.warn("THREE.Audio: this Audio has no playback control.");
      } else {
        var a = this.context.createBufferSource();
        a.buffer = this.buffer;
        a.loop = this.loop;
        a.onended = this.onEnded.bind(this);
        a.playbackRate.setValueAtTime(this.playbackRate, this.startTime);
        a.start(0, this.startTime);
        this.isPlaying = !0;
        this.source = a;
        return this.connect();
      }
    }
  }, pause:function() {
    if (!1 === this.hasPlaybackControl) {
      console.warn("THREE.Audio: this Audio has no playback control.");
    } else {
      return this.source.stop(), this.startTime = this.context.currentTime, this.isPlaying = !1, this;
    }
  }, stop:function() {
    if (!1 === this.hasPlaybackControl) {
      console.warn("THREE.Audio: this Audio has no playback control.");
    } else {
      return this.source.stop(), this.startTime = 0, this.isPlaying = !1, this;
    }
  }, connect:function() {
    if (0 < this.filters.length) {
      this.source.connect(this.filters[0]);
      for (var a = 1, b = this.filters.length;a < b;a++) {
        this.filters[a - 1].connect(this.filters[a]);
      }
      this.filters[this.filters.length - 1].connect(this.getOutput());
    } else {
      this.source.connect(this.getOutput());
    }
    return this;
  }, disconnect:function() {
    if (0 < this.filters.length) {
      this.source.disconnect(this.filters[0]);
      for (var a = 1, b = this.filters.length;a < b;a++) {
        this.filters[a - 1].disconnect(this.filters[a]);
      }
      this.filters[this.filters.length - 1].disconnect(this.getOutput());
    } else {
      this.source.disconnect(this.getOutput());
    }
    return this;
  }, getFilters:function() {
    return this.filters;
  }, setFilters:function(a) {
    a || (a = []);
    !0 === this.isPlaying ? (this.disconnect(), this.filters = a, this.connect()) : this.filters = a;
    return this;
  }, getFilter:function() {
    return this.getFilters()[0];
  }, setFilter:function(a) {
    return this.setFilters(a ? [a] : []);
  }, setPlaybackRate:function(a) {
    if (!1 === this.hasPlaybackControl) {
      console.warn("THREE.Audio: this Audio has no playback control.");
    } else {
      return this.playbackRate = a, !0 === this.isPlaying && this.source.playbackRate.setValueAtTime(this.playbackRate, this.context.currentTime), this;
    }
  }, getPlaybackRate:function() {
    return this.playbackRate;
  }, onEnded:function() {
    this.isPlaying = !1;
  }, getLoop:function() {
    return !1 === this.hasPlaybackControl ? (console.warn("THREE.Audio: this Audio has no playback control."), !1) : this.loop;
  }, setLoop:function(a) {
    if (!1 === this.hasPlaybackControl) {
      console.warn("THREE.Audio: this Audio has no playback control.");
    } else {
      return this.loop = a, !0 === this.isPlaying && (this.source.loop = this.loop), this;
    }
  }, getVolume:function() {
    return this.gain.gain.value;
  }, setVolume:function(a) {
    this.gain.gain.value = a;
    return this;
  }});
  pe.prototype = Object.assign(Object.create(wc.prototype), {constructor:pe, getOutput:function() {
    return this.panner;
  }, getRefDistance:function() {
    return this.panner.refDistance;
  }, setRefDistance:function(a) {
    this.panner.refDistance = a;
  }, getRolloffFactor:function() {
    return this.panner.rolloffFactor;
  }, setRolloffFactor:function(a) {
    this.panner.rolloffFactor = a;
  }, getDistanceModel:function() {
    return this.panner.distanceModel;
  }, setDistanceModel:function(a) {
    this.panner.distanceModel = a;
  }, getMaxDistance:function() {
    return this.panner.maxDistance;
  }, setMaxDistance:function(a) {
    this.panner.maxDistance = a;
  }, updateMatrixWorld:function() {
    var a = new f;
    return function(d) {
      aa.prototype.updateMatrixWorld.call(this, d);
      a.setFromMatrixPosition(this.matrixWorld);
      this.panner.setPosition(a.x, a.y, a.z);
    };
  }()});
  Object.assign(qe.prototype, {getFrequencyData:function() {
    this.analyser.getByteFrequencyData(this.data);
    return this.data;
  }, getAverageFrequency:function() {
    for (var a = 0, b = this.getFrequencyData(), c = 0;c < b.length;c++) {
      a += b[c];
    }
    return a / b.length;
  }});
  Object.assign(re.prototype, {accumulate:function(a, b) {
    var d = this.buffer, c = this.valueSize;
    a = a * c + c;
    var e = this.cumulativeWeight;
    if (0 === e) {
      for (e = 0;e !== c;++e) {
        d[a + e] = d[e];
      }
      e = b;
    } else {
      e += b, this._mixBufferRegion(d, a, 0, b / e, c);
    }
    this.cumulativeWeight = e;
  }, apply:function(a) {
    var d = this.valueSize, b = this.buffer;
    a = a * d + d;
    var c = this.cumulativeWeight, e = this.binding;
    this.cumulativeWeight = 0;
    1 > c && this._mixBufferRegion(b, a, 3 * d, 1 - c, d);
    for (var c = d, f = d + d;c !== f;++c) {
      if (b[c] !== b[c + d]) {
        e.setValue(b, a);
        break;
      }
    }
  }, saveOriginalState:function() {
    var a = this.buffer, b = this.valueSize, c = 3 * b;
    this.binding.getValue(a, c);
    for (var e = b;e !== c;++e) {
      a[e] = a[c + e % b];
    }
    this.cumulativeWeight = 0;
  }, restoreOriginalState:function() {
    this.binding.setValue(this.buffer, 3 * this.valueSize);
  }, _select:function(a, b, c, e, f) {
    if (.5 <= e) {
      for (e = 0;e !== f;++e) {
        a[b + e] = a[c + e];
      }
    }
  }, _slerp:function(a, b, c, f) {
    e.slerpFlat(a, b, a, b, a, c, f);
  }, _lerp:function(a, b, c, e, f) {
    for (var d = 1 - e, m = 0;m !== f;++m) {
      var g = b + m;
      a[g] = a[g] * d + a[c + m] * e;
    }
  }});
  Object.assign(Re.prototype, {getValue:function(a, b) {
    this.bind();
    var d = this._bindings[this._targetGroup.nCachedObjects_];
    void 0 !== d && d.getValue(a, b);
  }, setValue:function(a, b) {
    for (var d = this._bindings, c = this._targetGroup.nCachedObjects_, e = d.length;c !== e;++c) {
      d[c].setValue(a, b);
    }
  }, bind:function() {
    for (var a = this._bindings, b = this._targetGroup.nCachedObjects_, c = a.length;b !== c;++b) {
      a[b].bind();
    }
  }, unbind:function() {
    for (var a = this._bindings, b = this._targetGroup.nCachedObjects_, c = a.length;b !== c;++b) {
      a[b].unbind();
    }
  }});
  Object.assign(Ea, {Composite:Re, create:function(a, b, c) {
    return a && a.isAnimationObjectGroup ? new Ea.Composite(a, b, c) : new Ea(a, b, c);
  }, parseTrackName:function() {
    var a = new RegExp("^" + /((?:[\w-]+[\/:])*)/.source + /([\w-\.]+)?/.source + /(?:\.([\w-]+)(?:\[(.+)\])?)?/.source + /\.([\w-]+)(?:\[(.+)\])?/.source + "$"), b = ["material", "materials", "bones"];
    return function(d) {
      var c = a.exec(d);
      if (!c) {
        throw Error("PropertyBinding: Cannot parse trackName: " + d);
      }
      var c = {nodeName:c[2], objectName:c[3], objectIndex:c[4], propertyName:c[5], propertyIndex:c[6]}, e = c.nodeName && c.nodeName.lastIndexOf(".");
      if (void 0 !== e && -1 !== e) {
        var f = c.nodeName.substring(e + 1);
        -1 !== b.indexOf(f) && (c.nodeName = c.nodeName.substring(0, e), c.objectName = f);
      }
      if (null === c.propertyName || 0 === c.propertyName.length) {
        throw Error("PropertyBinding: can not parse propertyName from trackName: " + d);
      }
      return c;
    };
  }(), findNode:function(a, b) {
    if (!b || "" === b || "root" === b || "." === b || -1 === b || b === a.name || b === a.uuid) {
      return a;
    }
    if (a.skeleton) {
      var d = function(a) {
        for (var d = 0;d < a.bones.length;d++) {
          var c = a.bones[d];
          if (c.name === b) {
            return c;
          }
        }
        return null;
      }(a.skeleton);
      if (d) {
        return d;
      }
    }
    if (a.children) {
      var c = function(a) {
        for (var d = 0;d < a.length;d++) {
          var e = a[d];
          if (e.name === b || e.uuid === b || (e = c(e.children))) {
            return e;
          }
        }
        return null;
      };
      if (d = c(a.children)) {
        return d;
      }
    }
    return null;
  }});
  Object.assign(Ea.prototype, {_getValue_unavailable:function() {
  }, _setValue_unavailable:function() {
  }, BindingType:{Direct:0, EntireArray:1, ArrayElement:2, HasFromToArray:3}, Versioning:{None:0, NeedsUpdate:1, MatrixWorldNeedsUpdate:2}, GetterByBindingType:[function(a, b) {
    a[b] = this.node[this.propertyName];
  }, function(a, b) {
    for (var d = this.resolvedProperty, c = 0, e = d.length;c !== e;++c) {
      a[b++] = d[c];
    }
  }, function(a, b) {
    a[b] = this.resolvedProperty[this.propertyIndex];
  }, function(a, b) {
    this.resolvedProperty.toArray(a, b);
  }], SetterByBindingTypeAndVersioning:[[function(a, b) {
    this.node[this.propertyName] = a[b];
  }, function(a, b) {
    this.node[this.propertyName] = a[b];
    this.targetObject.needsUpdate = !0;
  }, function(a, b) {
    this.node[this.propertyName] = a[b];
    this.targetObject.matrixWorldNeedsUpdate = !0;
  }], [function(a, b) {
    for (var d = this.resolvedProperty, c = 0, e = d.length;c !== e;++c) {
      d[c] = a[b++];
    }
  }, function(a, b) {
    for (var d = this.resolvedProperty, c = 0, e = d.length;c !== e;++c) {
      d[c] = a[b++];
    }
    this.targetObject.needsUpdate = !0;
  }, function(a, b) {
    for (var d = this.resolvedProperty, c = 0, e = d.length;c !== e;++c) {
      d[c] = a[b++];
    }
    this.targetObject.matrixWorldNeedsUpdate = !0;
  }], [function(a, b) {
    this.resolvedProperty[this.propertyIndex] = a[b];
  }, function(a, b) {
    this.resolvedProperty[this.propertyIndex] = a[b];
    this.targetObject.needsUpdate = !0;
  }, function(a, b) {
    this.resolvedProperty[this.propertyIndex] = a[b];
    this.targetObject.matrixWorldNeedsUpdate = !0;
  }], [function(a, b) {
    this.resolvedProperty.fromArray(a, b);
  }, function(a, b) {
    this.resolvedProperty.fromArray(a, b);
    this.targetObject.needsUpdate = !0;
  }, function(a, b) {
    this.resolvedProperty.fromArray(a, b);
    this.targetObject.matrixWorldNeedsUpdate = !0;
  }]], getValue:function(a, b) {
    this.bind();
    this.getValue(a, b);
  }, setValue:function(a, b) {
    this.bind();
    this.setValue(a, b);
  }, bind:function() {
    var a = this.node, b = this.parsedPath, c = b.objectName, e = b.propertyName, f = b.propertyIndex;
    a || (this.node = a = Ea.findNode(this.rootNode, b.nodeName) || this.rootNode);
    this.getValue = this._getValue_unavailable;
    this.setValue = this._setValue_unavailable;
    if (a) {
      if (c) {
        var m = b.objectIndex;
        switch(c) {
          case "materials":
            if (!a.material) {
              console.error("  can not bind to material as node does not have a material", this);
              return;
            }
            if (!a.material.materials) {
              console.error("  can not bind to material.materials as node.material does not have a materials array", this);
              return;
            }
            a = a.material.materials;
            break;
          case "bones":
            if (!a.skeleton) {
              console.error("  can not bind to bones as node does not have a skeleton", this);
              return;
            }
            a = a.skeleton.bones;
            for (c = 0;c < a.length;c++) {
              if (a[c].name === m) {
                m = c;
                break;
              }
            }
            break;
          default:
            if (void 0 === a[c]) {
              console.error("  can not bind to objectName of node, undefined", this);
              return;
            }
            a = a[c];
        }
        if (void 0 !== m) {
          if (void 0 === a[m]) {
            console.error("  trying to bind to objectIndex of objectName, but is undefined:", this, a);
            return;
          }
          a = a[m];
        }
      }
      m = a[e];
      if (void 0 === m) {
        console.error("  trying to update property for track: " + b.nodeName + "." + e + " but it wasn't found.", a);
      } else {
        b = this.Versioning.None;
        void 0 !== a.needsUpdate ? (b = this.Versioning.NeedsUpdate, this.targetObject = a) : void 0 !== a.matrixWorldNeedsUpdate && (b = this.Versioning.MatrixWorldNeedsUpdate, this.targetObject = a);
        c = this.BindingType.Direct;
        if (void 0 !== f) {
          if ("morphTargetInfluences" === e) {
            if (!a.geometry) {
              console.error("  can not bind to morphTargetInfluences becasuse node does not have a geometry", this);
              return;
            }
            if (!a.geometry.morphTargets) {
              console.error("  can not bind to morphTargetInfluences becasuse node does not have a geometry.morphTargets", this);
              return;
            }
            for (c = 0;c < this.node.geometry.morphTargets.length;c++) {
              if (a.geometry.morphTargets[c].name === f) {
                f = c;
                break;
              }
            }
          }
          c = this.BindingType.ArrayElement;
          this.resolvedProperty = m;
          this.propertyIndex = f;
        } else {
          void 0 !== m.fromArray && void 0 !== m.toArray ? (c = this.BindingType.HasFromToArray, this.resolvedProperty = m) : Array.isArray(m) ? (c = this.BindingType.EntireArray, this.resolvedProperty = m) : this.propertyName = e;
        }
        this.getValue = this.GetterByBindingType[c];
        this.setValue = this.SetterByBindingTypeAndVersioning[c][b];
      }
    } else {
      console.error("  trying to update node for track: " + this.path + " but it wasn't found.");
    }
  }, unbind:function() {
    this.node = null;
    this.getValue = this._getValue_unbound;
    this.setValue = this._setValue_unbound;
  }});
  Object.assign(Ea.prototype, {_getValue_unbound:Ea.prototype.getValue, _setValue_unbound:Ea.prototype.setValue});
  Object.assign(Se.prototype, {isAnimationObjectGroup:!0, add:function(a) {
    for (var d = this._objects, b = d.length, c = this.nCachedObjects_, e = this._indicesByUUID, f = this._paths, m = this._parsedPaths, g = this._bindings, k = g.length, q = 0, p = arguments.length;q !== p;++q) {
      var h = arguments[q], r = h.uuid, t = e[r];
      if (void 0 === t) {
        t = b++;
        e[r] = t;
        d.push(h);
        for (var r = 0, l = k;r !== l;++r) {
          g[r].push(new Ea(h, f[r], m[r]));
        }
      } else {
        if (t < c) {
          var w = --c, l = d[w];
          e[l.uuid] = t;
          d[t] = l;
          e[r] = w;
          d[w] = h;
          r = 0;
          for (l = k;r !== l;++r) {
            var u = g[r], v = u[t];
            u[t] = u[w];
            void 0 === v && (v = new Ea(h, f[r], m[r]));
            u[w] = v;
          }
        } else {
          void 0 !== d[t] && console.error("Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes...");
        }
      }
    }
    this.nCachedObjects_ = c;
  }, remove:function(a) {
    for (var d = this._objects, b = this.nCachedObjects_, c = this._indicesByUUID, e = this._bindings, f = e.length, m = 0, g = arguments.length;m !== g;++m) {
      var k = arguments[m], q = k.uuid, p = c[q];
      if (void 0 !== p && p >= b) {
        var h = b++, r = d[h];
        c[r.uuid] = p;
        d[p] = r;
        c[q] = h;
        d[h] = k;
        k = 0;
        for (q = f;k !== q;++k) {
          var r = e[k], t = r[p];
          r[p] = r[h];
          r[h] = t;
        }
      }
    }
    this.nCachedObjects_ = b;
  }, uncache:function(a) {
    for (var d = this._objects, b = d.length, c = this.nCachedObjects_, e = this._indicesByUUID, f = this._bindings, m = f.length, g = 0, k = arguments.length;g !== k;++g) {
      var q = arguments[g].uuid, p = e[q];
      if (void 0 !== p) {
        if (delete e[q], p < c) {
          var q = --c, h = d[q], r = --b, t = d[r];
          e[h.uuid] = p;
          d[p] = h;
          e[t.uuid] = q;
          d[q] = t;
          d.pop();
          h = 0;
          for (t = m;h !== t;++h) {
            var l = f[h], w = l[r];
            l[p] = l[q];
            l[q] = w;
            l.pop();
          }
        } else {
          for (r = --b, t = d[r], e[t.uuid] = p, d[p] = t, d.pop(), h = 0, t = m;h !== t;++h) {
            l = f[h], l[p] = l[r], l.pop();
          }
        }
      }
    }
    this.nCachedObjects_ = c;
  }, subscribe_:function(a, b) {
    var d = this._bindingsIndicesByPath, c = d[a], e = this._bindings;
    if (void 0 !== c) {
      return e[c];
    }
    var f = this._paths, m = this._parsedPaths, g = this._objects, k = this.nCachedObjects_, q = Array(g.length), c = e.length;
    d[a] = c;
    f.push(a);
    m.push(b);
    e.push(q);
    d = k;
    for (c = g.length;d !== c;++d) {
      q[d] = new Ea(g[d], a, b);
    }
    return q;
  }, unsubscribe_:function(a) {
    var d = this._bindingsIndicesByPath, b = d[a];
    if (void 0 !== b) {
      var c = this._paths, e = this._parsedPaths, f = this._bindings, m = f.length - 1, g = f[m];
      d[a[m]] = b;
      f[b] = g;
      f.pop();
      e[b] = e[m];
      e.pop();
      c[b] = c[m];
      c.pop();
    }
  }});
  Object.assign(Te.prototype, {play:function() {
    this._mixer._activateAction(this);
    return this;
  }, stop:function() {
    this._mixer._deactivateAction(this);
    return this.reset();
  }, reset:function() {
    this.paused = !1;
    this.enabled = !0;
    this.time = 0;
    this._loopCount = -1;
    this._startTime = null;
    return this.stopFading().stopWarping();
  }, isRunning:function() {
    return this.enabled && !this.paused && 0 !== this.timeScale && null === this._startTime && this._mixer._isActiveAction(this);
  }, isScheduled:function() {
    return this._mixer._isActiveAction(this);
  }, startAt:function(a) {
    this._startTime = a;
    return this;
  }, setLoop:function(a, b) {
    this.loop = a;
    this.repetitions = b;
    return this;
  }, setEffectiveWeight:function(a) {
    this.weight = a;
    this._effectiveWeight = this.enabled ? a : 0;
    return this.stopFading();
  }, getEffectiveWeight:function() {
    return this._effectiveWeight;
  }, fadeIn:function(a) {
    return this._scheduleFading(a, 0, 1);
  }, fadeOut:function(a) {
    return this._scheduleFading(a, 1, 0);
  }, crossFadeFrom:function(a, b, c) {
    a.fadeOut(b);
    this.fadeIn(b);
    if (c) {
      c = this._clip.duration;
      var d = a._clip.duration, e = c / d;
      a.warp(1, d / c, b);
      this.warp(e, 1, b);
    }
    return this;
  }, crossFadeTo:function(a, b, c) {
    return a.crossFadeFrom(this, b, c);
  }, stopFading:function() {
    var a = this._weightInterpolant;
    null !== a && (this._weightInterpolant = null, this._mixer._takeBackControlInterpolant(a));
    return this;
  }, setEffectiveTimeScale:function(a) {
    this.timeScale = a;
    this._effectiveTimeScale = this.paused ? 0 : a;
    return this.stopWarping();
  }, getEffectiveTimeScale:function() {
    return this._effectiveTimeScale;
  }, setDuration:function(a) {
    this.timeScale = this._clip.duration / a;
    return this.stopWarping();
  }, syncWith:function(a) {
    this.time = a.time;
    this.timeScale = a.timeScale;
    return this.stopWarping();
  }, halt:function(a) {
    return this.warp(this._effectiveTimeScale, 0, a);
  }, warp:function(a, b, c) {
    var d = this._mixer, e = d.time, f = this._timeScaleInterpolant, m = this.timeScale;
    null === f && (this._timeScaleInterpolant = f = d._lendControlInterpolant());
    d = f.parameterPositions;
    f = f.sampleValues;
    d[0] = e;
    d[1] = e + c;
    f[0] = a / m;
    f[1] = b / m;
    return this;
  }, stopWarping:function() {
    var a = this._timeScaleInterpolant;
    null !== a && (this._timeScaleInterpolant = null, this._mixer._takeBackControlInterpolant(a));
    return this;
  }, getMixer:function() {
    return this._mixer;
  }, getClip:function() {
    return this._clip;
  }, getRoot:function() {
    return this._localRoot || this._mixer._root;
  }, _update:function(a, b, c, e) {
    var d = this._startTime;
    if (null !== d) {
      b = (a - d) * c;
      if (0 > b || 0 === c) {
        return;
      }
      this._startTime = null;
      b *= c;
    }
    b *= this._updateTimeScale(a);
    c = this._updateTime(b);
    a = this._updateWeight(a);
    if (0 < a) {
      b = this._interpolants;
      for (var d = this._propertyBindings, f = 0, m = b.length;f !== m;++f) {
        b[f].evaluate(c), d[f].accumulate(e, a);
      }
    }
  }, _updateWeight:function(a) {
    var d = 0;
    if (this.enabled) {
      var d = this.weight, b = this._weightInterpolant;
      if (null !== b) {
        var c = b.evaluate(a)[0], d = d * c;
        a > b.parameterPositions[1] && (this.stopFading(), 0 === c && (this.enabled = !1));
      }
    }
    return this._effectiveWeight = d;
  }, _updateTimeScale:function(a) {
    var d = 0;
    if (!this.paused) {
      var d = this.timeScale, b = this._timeScaleInterpolant;
      if (null !== b) {
        var c = b.evaluate(a)[0], d = d * c;
        a > b.parameterPositions[1] && (this.stopWarping(), 0 === d ? this.paused = !0 : this.timeScale = d);
      }
    }
    return this._effectiveTimeScale = d;
  }, _updateTime:function(a) {
    var d = this.time + a;
    if (0 === a) {
      return d;
    }
    var b = this._clip.duration, c = this.loop, e = this._loopCount;
    if (2200 === c) {
      a: {
        if (-1 === e && (this._loopCount = 0, this._setEndings(!0, !0, !1)), d >= b) {
          d = b;
        } else {
          if (0 > d) {
            d = 0;
          } else {
            break a;
          }
        }
        this.clampWhenFinished ? this.paused = !0 : this.enabled = !1;
        this._mixer.dispatchEvent({type:"finished", action:this, direction:0 > a ? -1 : 1});
      }
    } else {
      c = 2202 === c;
      -1 === e && (0 <= a ? (e = 0, this._setEndings(!0, 0 === this.repetitions, c)) : this._setEndings(0 === this.repetitions, !0, c));
      if (d >= b || 0 > d) {
        var f = Math.floor(d / b), d = d - b * f, e = e + Math.abs(f), m = this.repetitions - e;
        0 > m ? (this.clampWhenFinished ? this.paused = !0 : this.enabled = !1, d = 0 < a ? b : 0, this._mixer.dispatchEvent({type:"finished", action:this, direction:0 < a ? 1 : -1})) : (0 === m ? (a = 0 > a, this._setEndings(a, !a, c)) : this._setEndings(!1, !1, c), this._loopCount = e, this._mixer.dispatchEvent({type:"loop", action:this, loopDelta:f}));
      }
      if (c && 1 === (e & 1)) {
        return this.time = d, b - d;
      }
    }
    return this.time = d;
  }, _setEndings:function(a, b, c) {
    var d = this._interpolantSettings;
    c ? (d.endingStart = 2401, d.endingEnd = 2401) : (d.endingStart = a ? this.zeroSlopeAtStart ? 2401 : 2400 : 2402, d.endingEnd = b ? this.zeroSlopeAtEnd ? 2401 : 2400 : 2402);
  }, _scheduleFading:function(a, b, c) {
    var d = this._mixer, e = d.time, f = this._weightInterpolant;
    null === f && (this._weightInterpolant = f = d._lendControlInterpolant());
    d = f.parameterPositions;
    f = f.sampleValues;
    d[0] = e;
    f[0] = b;
    d[1] = e + a;
    f[1] = c;
    return this;
  }});
  Object.assign(Ue.prototype, h.prototype, {_bindAction:function(a, b) {
    var d = a._localRoot || this._root, c = a._clip.tracks, e = c.length, f = a._propertyBindings;
    a = a._interpolants;
    var m = d.uuid, g = this._bindingsByRootAndName, k = g[m];
    void 0 === k && (k = {}, g[m] = k);
    for (g = 0;g !== e;++g) {
      var q = c[g], n = q.name, p = k[n];
      if (void 0 === p) {
        p = f[g];
        if (void 0 !== p) {
          null === p._cacheIndex && (++p.referenceCount, this._addInactiveBinding(p, m, n));
          continue;
        }
        p = new re(Ea.create(d, n, b && b._propertyBindings[g].binding.parsedPath), q.ValueTypeName, q.getValueSize());
        ++p.referenceCount;
        this._addInactiveBinding(p, m, n);
      }
      f[g] = p;
      a[g].resultBuffer = p.buffer;
    }
  }, _activateAction:function(a) {
    if (!this._isActiveAction(a)) {
      if (null === a._cacheIndex) {
        var d = (a._localRoot || this._root).uuid, b = a._clip.uuid, c = this._actionsByClip[b];
        this._bindAction(a, c && c.knownActions[0]);
        this._addInactiveAction(a, b, d);
      }
      d = a._propertyBindings;
      b = 0;
      for (c = d.length;b !== c;++b) {
        var e = d[b];
        0 === e.useCount++ && (this._lendBinding(e), e.saveOriginalState());
      }
      this._lendAction(a);
    }
  }, _deactivateAction:function(a) {
    if (this._isActiveAction(a)) {
      for (var d = a._propertyBindings, b = 0, c = d.length;b !== c;++b) {
        var e = d[b];
        0 === --e.useCount && (e.restoreOriginalState(), this._takeBackBinding(e));
      }
      this._takeBackAction(a);
    }
  }, _initMemoryManager:function() {
    this._actions = [];
    this._nActiveActions = 0;
    this._actionsByClip = {};
    this._bindings = [];
    this._nActiveBindings = 0;
    this._bindingsByRootAndName = {};
    this._controlInterpolants = [];
    this._nActiveControlInterpolants = 0;
    var a = this;
    this.stats = {actions:{get total() {
      return a._actions.length;
    }, get inUse() {
      return a._nActiveActions;
    }}, bindings:{get total() {
      return a._bindings.length;
    }, get inUse() {
      return a._nActiveBindings;
    }}, controlInterpolants:{get total() {
      return a._controlInterpolants.length;
    }, get inUse() {
      return a._nActiveControlInterpolants;
    }}};
  }, _isActiveAction:function(a) {
    a = a._cacheIndex;
    return null !== a && a < this._nActiveActions;
  }, _addInactiveAction:function(a, b, c) {
    var d = this._actions, e = this._actionsByClip, f = e[b];
    void 0 === f ? (f = {knownActions:[a], actionByRoot:{}}, a._byClipCacheIndex = 0, e[b] = f) : (b = f.knownActions, a._byClipCacheIndex = b.length, b.push(a));
    a._cacheIndex = d.length;
    d.push(a);
    f.actionByRoot[c] = a;
  }, _removeInactiveAction:function(a) {
    var d = this._actions, b = d[d.length - 1], c = a._cacheIndex;
    b._cacheIndex = c;
    d[c] = b;
    d.pop();
    a._cacheIndex = null;
    var d = a._clip.uuid, b = this._actionsByClip, c = b[d], e = c.knownActions, f = e[e.length - 1], m = a._byClipCacheIndex;
    f._byClipCacheIndex = m;
    e[m] = f;
    e.pop();
    a._byClipCacheIndex = null;
    delete c.actionByRoot[(a._localRoot || this._root).uuid];
    0 === e.length && delete b[d];
    this._removeInactiveBindingsForAction(a);
  }, _removeInactiveBindingsForAction:function(a) {
    a = a._propertyBindings;
    for (var d = 0, b = a.length;d !== b;++d) {
      var c = a[d];
      0 === --c.referenceCount && this._removeInactiveBinding(c);
    }
  }, _lendAction:function(a) {
    var d = this._actions, b = a._cacheIndex, c = this._nActiveActions++, e = d[c];
    a._cacheIndex = c;
    d[c] = a;
    e._cacheIndex = b;
    d[b] = e;
  }, _takeBackAction:function(a) {
    var d = this._actions, b = a._cacheIndex, c = --this._nActiveActions, e = d[c];
    a._cacheIndex = c;
    d[c] = a;
    e._cacheIndex = b;
    d[b] = e;
  }, _addInactiveBinding:function(a, b, c) {
    var d = this._bindingsByRootAndName, e = d[b], f = this._bindings;
    void 0 === e && (e = {}, d[b] = e);
    e[c] = a;
    a._cacheIndex = f.length;
    f.push(a);
  }, _removeInactiveBinding:function(a) {
    var d = this._bindings, b = a.binding, c = b.rootNode.uuid, b = b.path, e = this._bindingsByRootAndName, f = e[c], m = d[d.length - 1];
    a = a._cacheIndex;
    m._cacheIndex = a;
    d[a] = m;
    d.pop();
    delete f[b];
    a: {
      for (var g in f) {
        break a;
      }
      delete e[c];
    }
  }, _lendBinding:function(a) {
    var d = this._bindings, b = a._cacheIndex, c = this._nActiveBindings++, e = d[c];
    a._cacheIndex = c;
    d[c] = a;
    e._cacheIndex = b;
    d[b] = e;
  }, _takeBackBinding:function(a) {
    var d = this._bindings, b = a._cacheIndex, c = --this._nActiveBindings, e = d[c];
    a._cacheIndex = c;
    d[c] = a;
    e._cacheIndex = b;
    d[b] = e;
  }, _lendControlInterpolant:function() {
    var a = this._controlInterpolants, b = this._nActiveControlInterpolants++, c = a[b];
    void 0 === c && (c = new dd(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer), c.__cacheIndex = b, a[b] = c);
    return c;
  }, _takeBackControlInterpolant:function(a) {
    var d = this._controlInterpolants, b = a.__cacheIndex, c = --this._nActiveControlInterpolants, e = d[c];
    a.__cacheIndex = c;
    d[c] = a;
    e.__cacheIndex = b;
    d[b] = e;
  }, _controlInterpolantsResultBuffer:new Float32Array(1), clipAction:function(a, b) {
    var d = b || this._root, c = d.uuid, e = "string" === typeof a ? bb.findByName(d, a) : a, d = null !== e ? e.uuid : a;
    a = this._actionsByClip[d];
    var f = null;
    if (void 0 !== a) {
      f = a.actionByRoot[c];
      if (void 0 !== f) {
        return f;
      }
      f = a.knownActions[0];
      null === e && (e = f._clip);
    }
    if (null === e) {
      return null;
    }
    e = new Te(this, e, b);
    this._bindAction(e, f);
    this._addInactiveAction(e, d, c);
    return e;
  }, existingAction:function(a, b) {
    b = b || this._root;
    var d = b.uuid;
    b = "string" === typeof a ? bb.findByName(b, a) : a;
    b = this._actionsByClip[b ? b.uuid : a];
    return void 0 !== b ? b.actionByRoot[d] || null : null;
  }, stopAllAction:function() {
    for (var a = this._actions, b = this._nActiveActions, c = this._bindings, e = this._nActiveBindings, f = this._nActiveBindings = this._nActiveActions = 0;f !== b;++f) {
      a[f].reset();
    }
    for (f = 0;f !== e;++f) {
      c[f].useCount = 0;
    }
    return this;
  }, update:function(a) {
    a *= this.timeScale;
    for (var d = this._actions, b = this._nActiveActions, c = this.time += a, e = Math.sign(a), f = this._accuIndex ^= 1, m = 0;m !== b;++m) {
      var g = d[m];
      g.enabled && g._update(c, a, e, f);
    }
    a = this._bindings;
    d = this._nActiveBindings;
    for (m = 0;m !== d;++m) {
      a[m].apply(f);
    }
    return this;
  }, getRoot:function() {
    return this._root;
  }, uncacheClip:function(a) {
    var d = this._actions;
    a = a.uuid;
    var b = this._actionsByClip, c = b[a];
    if (void 0 !== c) {
      for (var c = c.knownActions, e = 0, f = c.length;e !== f;++e) {
        var m = c[e];
        this._deactivateAction(m);
        var g = m._cacheIndex, k = d[d.length - 1];
        m._cacheIndex = null;
        m._byClipCacheIndex = null;
        k._cacheIndex = g;
        d[g] = k;
        d.pop();
        this._removeInactiveBindingsForAction(m);
      }
      delete b[a];
    }
  }, uncacheRoot:function(a) {
    a = a.uuid;
    var d = this._actionsByClip, b;
    for (b in d) {
      var c = d[b].actionByRoot[a];
      void 0 !== c && (this._deactivateAction(c), this._removeInactiveAction(c));
    }
    b = this._bindingsByRootAndName[a];
    if (void 0 !== b) {
      for (var e in b) {
        a = b[e], a.restoreOriginalState(), this._removeInactiveBinding(a);
      }
    }
  }, uncacheAction:function(a, b) {
    a = this.existingAction(a, b);
    null !== a && (this._deactivateAction(a), this._removeInactiveAction(a));
  }});
  Rd.prototype.clone = function() {
    return new Rd(void 0 === this.value.clone ? this.value : this.value.clone());
  };
  se.prototype = Object.assign(Object.create(ea.prototype), {constructor:se, isInstancedBufferGeometry:!0, addGroup:function(a, b, c) {
    this.groups.push({start:a, count:b, materialIndex:c});
  }, copy:function(a) {
    var d = a.index;
    null !== d && this.setIndex(d.clone());
    var d = a.attributes, b;
    for (b in d) {
      this.addAttribute(b, d[b].clone());
    }
    a = a.groups;
    b = 0;
    for (d = a.length;b < d;b++) {
      var c = a[b];
      this.addGroup(c.start, c.count, c.materialIndex);
    }
    return this;
  }});
  Object.defineProperties(te.prototype, {count:{get:function() {
    return this.data.count;
  }}, array:{get:function() {
    return this.data.array;
  }}});
  Object.assign(te.prototype, {isInterleavedBufferAttribute:!0, setX:function(a, b) {
    this.data.array[a * this.data.stride + this.offset] = b;
    return this;
  }, setY:function(a, b) {
    this.data.array[a * this.data.stride + this.offset + 1] = b;
    return this;
  }, setZ:function(a, b) {
    this.data.array[a * this.data.stride + this.offset + 2] = b;
    return this;
  }, setW:function(a, b) {
    this.data.array[a * this.data.stride + this.offset + 3] = b;
    return this;
  }, getX:function(a) {
    return this.data.array[a * this.data.stride + this.offset];
  }, getY:function(a) {
    return this.data.array[a * this.data.stride + this.offset + 1];
  }, getZ:function(a) {
    return this.data.array[a * this.data.stride + this.offset + 2];
  }, getW:function(a) {
    return this.data.array[a * this.data.stride + this.offset + 3];
  }, setXY:function(a, b, c) {
    a = a * this.data.stride + this.offset;
    this.data.array[a + 0] = b;
    this.data.array[a + 1] = c;
    return this;
  }, setXYZ:function(a, b, c, e) {
    a = a * this.data.stride + this.offset;
    this.data.array[a + 0] = b;
    this.data.array[a + 1] = c;
    this.data.array[a + 2] = e;
    return this;
  }, setXYZW:function(a, b, c, e, f) {
    a = a * this.data.stride + this.offset;
    this.data.array[a + 0] = b;
    this.data.array[a + 1] = c;
    this.data.array[a + 2] = e;
    this.data.array[a + 3] = f;
    return this;
  }});
  Object.defineProperty(xc.prototype, "needsUpdate", {set:function(a) {
    !0 === a && this.version++;
  }});
  Object.assign(xc.prototype, {isInterleavedBuffer:!0, setArray:function(a) {
    if (Array.isArray(a)) {
      throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
    }
    this.count = void 0 !== a ? a.length / this.stride : 0;
    this.array = a;
  }, setDynamic:function(a) {
    this.dynamic = a;
    return this;
  }, copy:function(a) {
    this.array = new a.array.constructor(a.array);
    this.count = a.count;
    this.stride = a.stride;
    this.dynamic = a.dynamic;
    return this;
  }, copyAt:function(a, b, c) {
    a *= this.stride;
    c *= b.stride;
    for (var d = 0, e = this.stride;d < e;d++) {
      this.array[a + d] = b.array[c + d];
    }
    return this;
  }, set:function(a, b) {
    void 0 === b && (b = 0);
    this.array.set(a, b);
    return this;
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, onUpload:function(a) {
    this.onUploadCallback = a;
    return this;
  }});
  ue.prototype = Object.assign(Object.create(xc.prototype), {constructor:ue, isInstancedInterleavedBuffer:!0, copy:function(a) {
    xc.prototype.copy.call(this, a);
    this.meshPerAttribute = a.meshPerAttribute;
    return this;
  }});
  ve.prototype = Object.assign(Object.create(ja.prototype), {constructor:ve, isInstancedBufferAttribute:!0, copy:function(a) {
    ja.prototype.copy.call(this, a);
    this.meshPerAttribute = a.meshPerAttribute;
    return this;
  }});
  Object.assign(Ve.prototype, {linePrecision:1, set:function(a, b) {
    this.ray.set(a, b);
  }, setFromCamera:function(a, b) {
    b && b.isPerspectiveCamera ? (this.ray.origin.setFromMatrixPosition(b.matrixWorld), this.ray.direction.set(a.x, a.y, .5).unproject(b).sub(this.ray.origin).normalize()) : b && b.isOrthographicCamera ? (this.ray.origin.set(a.x, a.y, (b.near + b.far) / (b.near - b.far)).unproject(b), this.ray.direction.set(0, 0, -1).transformDirection(b.matrixWorld)) : console.error("THREE.Raycaster: Unsupported camera type.");
  }, intersectObject:function(a, b) {
    var d = [];
    we(a, this, d, b);
    d.sort(We);
    return d;
  }, intersectObjects:function(a, b) {
    var d = [];
    if (!1 === Array.isArray(a)) {
      return console.warn("THREE.Raycaster.intersectObjects: objects is not an Array."), d;
    }
    for (var c = 0, e = a.length;c < e;c++) {
      we(a[c], this, d, b);
    }
    d.sort(We);
    return d;
  }});
  Object.assign(Xe.prototype, {start:function() {
    this.oldTime = this.startTime = ("undefined" === typeof performance ? Date : performance).now();
    this.elapsedTime = 0;
    this.running = !0;
  }, stop:function() {
    this.getElapsedTime();
    this.running = !1;
  }, getElapsedTime:function() {
    this.getDelta();
    return this.elapsedTime;
  }, getDelta:function() {
    var a = 0;
    if (this.autoStart && !this.running) {
      return this.start(), 0;
    }
    if (this.running) {
      var b = ("undefined" === typeof performance ? Date : performance).now(), a = (b - this.oldTime) / 1E3;
      this.oldTime = b;
      this.elapsedTime += a;
    }
    return a;
  }});
  Object.assign(Ye.prototype, {set:function(a, b, c) {
    this.radius = a;
    this.phi = b;
    this.theta = c;
    return this;
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(a) {
    this.radius = a.radius;
    this.phi = a.phi;
    this.theta = a.theta;
    return this;
  }, makeSafe:function() {
    this.phi = Math.max(1E-6, Math.min(Math.PI - 1E-6, this.phi));
    return this;
  }, setFromVector3:function(a) {
    this.radius = a.length();
    0 === this.radius ? this.phi = this.theta = 0 : (this.theta = Math.atan2(a.x, a.z), this.phi = Math.acos(na.clamp(a.y / this.radius, -1, 1)));
    return this;
  }});
  Object.assign(Ze.prototype, {set:function(a, b, c) {
    this.radius = a;
    this.theta = b;
    this.y = c;
    return this;
  }, clone:function() {
    return (new this.constructor).copy(this);
  }, copy:function(a) {
    this.radius = a.radius;
    this.theta = a.theta;
    this.y = a.y;
    return this;
  }, setFromVector3:function(a) {
    this.radius = Math.sqrt(a.x * a.x + a.z * a.z);
    this.theta = Math.atan2(a.x, a.z);
    this.y = a.y;
    return this;
  }});
  Fa.prototype = Object.create(Ia.prototype);
  Fa.prototype.constructor = Fa;
  Fa.prototype.createAnimation = function(a, b, c, e) {
    b = {start:b, end:c, length:c - b + 1, fps:e, duration:(c - b) / e, lastFrame:0, currentFrame:0, active:!1, time:0, direction:1, weight:1, directionBackwards:!1, mirroredLoop:!1};
    this.animationsMap[a] = b;
    this.animationsList.push(b);
  };
  Fa.prototype.autoCreateAnimations = function(a) {
    for (var d = /([a-z]+)_?(\d+)/i, b, c = {}, e = this.geometry, f = 0, m = e.morphTargets.length;f < m;f++) {
      var g = e.morphTargets[f].name.match(d);
      if (g && 1 < g.length) {
        var k = g[1];
        c[k] || (c[k] = {start:Infinity, end:-Infinity});
        g = c[k];
        f < g.start && (g.start = f);
        f > g.end && (g.end = f);
        b || (b = k);
      }
    }
    for (k in c) {
      g = c[k], this.createAnimation(k, g.start, g.end, a);
    }
    this.firstAnimation = b;
  };
  Fa.prototype.setAnimationDirectionForward = function(a) {
    if (a = this.animationsMap[a]) {
      a.direction = 1, a.directionBackwards = !1;
    }
  };
  Fa.prototype.setAnimationDirectionBackward = function(a) {
    if (a = this.animationsMap[a]) {
      a.direction = -1, a.directionBackwards = !0;
    }
  };
  Fa.prototype.setAnimationFPS = function(a, b) {
    (a = this.animationsMap[a]) && (a.fps = b, a.duration = (a.end - a.start) / a.fps);
  };
  Fa.prototype.setAnimationDuration = function(a, b) {
    (a = this.animationsMap[a]) && (a.duration = b, a.fps = (a.end - a.start) / a.duration);
  };
  Fa.prototype.setAnimationWeight = function(a, b) {
    (a = this.animationsMap[a]) && (a.weight = b);
  };
  Fa.prototype.setAnimationTime = function(a, b) {
    (a = this.animationsMap[a]) && (a.time = b);
  };
  Fa.prototype.getAnimationTime = function(a) {
    var d = 0;
    if (a = this.animationsMap[a]) {
      d = a.time;
    }
    return d;
  };
  Fa.prototype.getAnimationDuration = function(a) {
    var d = -1;
    if (a = this.animationsMap[a]) {
      d = a.duration;
    }
    return d;
  };
  Fa.prototype.playAnimation = function(a) {
    var d = this.animationsMap[a];
    d ? (d.time = 0, d.active = !0) : console.warn("THREE.MorphBlendMesh: animation[" + a + "] undefined in .playAnimation()");
  };
  Fa.prototype.stopAnimation = function(a) {
    if (a = this.animationsMap[a]) {
      a.active = !1;
    }
  };
  Fa.prototype.update = function(a) {
    for (var d = 0, b = this.animationsList.length;d < b;d++) {
      var c = this.animationsList[d];
      if (c.active) {
        var e = c.duration / c.length;
        c.time += c.direction * a;
        if (c.mirroredLoop) {
          if (c.time > c.duration || 0 > c.time) {
            c.direction *= -1, c.time > c.duration && (c.time = c.duration, c.directionBackwards = !0), 0 > c.time && (c.time = 0, c.directionBackwards = !1);
          }
        } else {
          c.time %= c.duration, 0 > c.time && (c.time += c.duration);
        }
        var f = c.start + na.clamp(Math.floor(c.time / e), 0, c.length - 1), m = c.weight;
        f !== c.currentFrame && (this.morphTargetInfluences[c.lastFrame] = 0, this.morphTargetInfluences[c.currentFrame] = 1 * m, this.morphTargetInfluences[f] = 0, c.lastFrame = c.currentFrame, c.currentFrame = f);
        e = c.time % e / e;
        c.directionBackwards && (e = 1 - e);
        c.currentFrame !== c.lastFrame ? (this.morphTargetInfluences[c.currentFrame] = e * m, this.morphTargetInfluences[c.lastFrame] = (1 - e) * m) : this.morphTargetInfluences[c.currentFrame] = m;
      }
    }
  };
  hd.prototype = Object.create(aa.prototype);
  hd.prototype.constructor = hd;
  hd.prototype.isImmediateRenderObject = !0;
  id.prototype = Object.create(wa.prototype);
  id.prototype.constructor = id;
  id.prototype.update = function() {
    var a = new f, b = new f, c = new sa;
    return function() {
      var d = ["a", "b", "c"];
      this.object.updateMatrixWorld(!0);
      c.getNormalMatrix(this.object.matrixWorld);
      var e = this.object.matrixWorld, f = this.geometry.attributes.position, m = this.object.geometry;
      if (m && m.isGeometry) {
        for (var g = m.vertices, k = m.faces, q = m = 0, n = k.length;q < n;q++) {
          for (var p = k[q], h = 0, r = p.vertexNormals.length;h < r;h++) {
            var t = p.vertexNormals[h];
            a.copy(g[p[d[h]]]).applyMatrix4(e);
            b.copy(t).applyMatrix3(c).normalize().multiplyScalar(this.size).add(a);
            f.setXYZ(m, a.x, a.y, a.z);
            m += 1;
            f.setXYZ(m, b.x, b.y, b.z);
            m += 1;
          }
        }
      } else {
        if (m && m.isBufferGeometry) {
          for (d = m.attributes.position, g = m.attributes.normal, h = m = 0, r = d.count;h < r;h++) {
            a.set(d.getX(h), d.getY(h), d.getZ(h)).applyMatrix4(e), b.set(g.getX(h), g.getY(h), g.getZ(h)), b.applyMatrix3(c).normalize().multiplyScalar(this.size).add(a), f.setXYZ(m, a.x, a.y, a.z), m += 1, f.setXYZ(m, b.x, b.y, b.z), m += 1;
          }
        }
      }
      f.needsUpdate = !0;
      return this;
    };
  }();
  yc.prototype = Object.create(aa.prototype);
  yc.prototype.constructor = yc;
  yc.prototype.dispose = function() {
    this.cone.geometry.dispose();
    this.cone.material.dispose();
  };
  yc.prototype.update = function() {
    var a = new f, b = new f;
    return function() {
      var d = this.light.distance ? this.light.distance : 1E3, c = d * Math.tan(this.light.angle);
      this.cone.scale.set(c, c, d);
      a.setFromMatrixPosition(this.light.matrixWorld);
      b.setFromMatrixPosition(this.light.target.matrixWorld);
      this.cone.lookAt(b.sub(a));
      this.cone.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);
    };
  }();
  zc.prototype = Object.create(wa.prototype);
  zc.prototype.constructor = zc;
  zc.prototype.getBoneList = function(a) {
    var d = [];
    a && a.isBone && d.push(a);
    for (var b = 0;b < a.children.length;b++) {
      d.push.apply(d, this.getBoneList(a.children[b]));
    }
    return d;
  };
  zc.prototype.update = function() {
    var a = new f, b = new q, c = new q;
    return function() {
      var d = this.geometry, e = d.getAttribute("position");
      c.getInverse(this.root.matrixWorld);
      for (var f = 0, m = 0;f < this.bones.length;f++) {
        var g = this.bones[f];
        g.parent && g.parent.isBone && (b.multiplyMatrices(c, g.matrixWorld), a.setFromMatrixPosition(b), e.setXYZ(m, a.x, a.y, a.z), b.multiplyMatrices(c, g.parent.matrixWorld), a.setFromMatrixPosition(b), e.setXYZ(m + 1, a.x, a.y, a.z), m += 2);
      }
      d.getAttribute("position").needsUpdate = !0;
    };
  }();
  Ac.prototype = Object.create(Ia.prototype);
  Ac.prototype.constructor = Ac;
  Ac.prototype.dispose = function() {
    this.geometry.dispose();
    this.material.dispose();
  };
  Ac.prototype.update = function() {
    this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);
  };
  Bc.prototype = Object.create(aa.prototype);
  Bc.prototype.constructor = Bc;
  Bc.prototype.dispose = function() {
    this.children[0].geometry.dispose();
    this.children[0].material.dispose();
    this.children[1].geometry.dispose();
    this.children[1].material.dispose();
  };
  Bc.prototype.update = function() {
    var a = new f, b = new f;
    return function() {
      var d = this.children[0], c = this.children[1];
      if (this.light.target) {
        a.setFromMatrixPosition(this.light.matrixWorld);
        b.setFromMatrixPosition(this.light.target.matrixWorld);
        var e = b.clone().sub(a);
        d.lookAt(e);
        c.lookAt(e);
      }
      d.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);
      c.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);
      var c = .5 * this.light.width, e = .5 * this.light.height, d = d.geometry.getAttribute("position"), f = d.array;
      f[0] = c;
      f[1] = -e;
      f[2] = 0;
      f[3] = c;
      f[4] = e;
      f[5] = 0;
      f[6] = -c;
      f[7] = e;
      f[8] = 0;
      f[9] = -c;
      f[10] = e;
      f[11] = 0;
      f[12] = -c;
      f[13] = -e;
      f[14] = 0;
      f[15] = c;
      f[16] = -e;
      f[17] = 0;
      d.needsUpdate = !0;
    };
  }();
  Cc.prototype = Object.create(aa.prototype);
  Cc.prototype.constructor = Cc;
  Cc.prototype.dispose = function() {
    this.children[0].geometry.dispose();
    this.children[0].material.dispose();
  };
  Cc.prototype.update = function() {
    var a = new f, b = new Z, c = new Z;
    return function() {
      var d = this.children[0], e = d.geometry.getAttribute("color");
      b.copy(this.light.color).multiplyScalar(this.light.intensity);
      c.copy(this.light.groundColor).multiplyScalar(this.light.intensity);
      for (var f = 0, m = e.count;f < m;f++) {
        var g = f < m / 2 ? b : c;
        e.setXYZ(f, g.r, g.g, g.b);
      }
      d.lookAt(a.setFromMatrixPosition(this.light.matrixWorld).negate());
      e.needsUpdate = !0;
    };
  }();
  jd.prototype = Object.create(wa.prototype);
  jd.prototype.constructor = jd;
  Sd.prototype = Object.create(wa.prototype);
  Sd.prototype.constructor = Sd;
  kd.prototype = Object.create(wa.prototype);
  kd.prototype.constructor = kd;
  kd.prototype.update = function() {
    var a = new f, b = new f, c = new sa;
    return function() {
      this.object.updateMatrixWorld(!0);
      c.getNormalMatrix(this.object.matrixWorld);
      for (var d = this.object.matrixWorld, e = this.geometry.attributes.position, f = this.object.geometry, m = f.vertices, f = f.faces, g = 0, k = 0, q = f.length;k < q;k++) {
        var n = f[k], p = n.normal;
        a.copy(m[n.a]).add(m[n.b]).add(m[n.c]).divideScalar(3).applyMatrix4(d);
        b.copy(p).applyMatrix3(c).normalize().multiplyScalar(this.size).add(a);
        e.setXYZ(g, a.x, a.y, a.z);
        g += 1;
        e.setXYZ(g, b.x, b.y, b.z);
        g += 1;
      }
      e.needsUpdate = !0;
      return this;
    };
  }();
  Dc.prototype = Object.create(aa.prototype);
  Dc.prototype.constructor = Dc;
  Dc.prototype.dispose = function() {
    var a = this.children[0], b = this.children[1];
    a.geometry.dispose();
    a.material.dispose();
    b.geometry.dispose();
    b.material.dispose();
  };
  Dc.prototype.update = function() {
    var a = new f, b = new f, c = new f;
    return function() {
      a.setFromMatrixPosition(this.light.matrixWorld);
      b.setFromMatrixPosition(this.light.target.matrixWorld);
      c.subVectors(b, a);
      var d = this.children[0], e = this.children[1];
      d.lookAt(c);
      d.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);
      e.lookAt(c);
      e.scale.z = c.length();
    };
  }();
  ld.prototype = Object.create(wa.prototype);
  ld.prototype.constructor = ld;
  ld.prototype.update = function() {
    function a(a, d, f, g) {
      e.set(d, f, g).unproject(m);
      a = c[a];
      if (void 0 !== a) {
        for (d = b.getAttribute("position"), f = 0, g = a.length;f < g;f++) {
          d.setXYZ(a[f], e.x, e.y, e.z);
        }
      }
    }
    var b, c, e = new f, m = new Ka;
    return function() {
      b = this.geometry;
      c = this.pointMap;
      m.projectionMatrix.copy(this.camera.projectionMatrix);
      a("c", 0, 0, -1);
      a("t", 0, 0, 1);
      a("n1", -1, -1, -1);
      a("n2", 1, -1, -1);
      a("n3", -1, 1, -1);
      a("n4", 1, 1, -1);
      a("f1", -1, -1, 1);
      a("f2", 1, -1, 1);
      a("f3", -1, 1, 1);
      a("f4", 1, 1, 1);
      a("u1", .7, 1.1, -1);
      a("u2", -.7, 1.1, -1);
      a("u3", 0, 2, -1);
      a("cf1", -1, 0, 1);
      a("cf2", 1, 0, 1);
      a("cf3", 0, -1, 1);
      a("cf4", 0, 1, 1);
      a("cn1", -1, 0, -1);
      a("cn2", 1, 0, -1);
      a("cn3", 0, -1, -1);
      a("cn4", 0, 1, -1);
      b.getAttribute("position").needsUpdate = !0;
    };
  }();
  Ec.prototype = Object.create(wa.prototype);
  Ec.prototype.constructor = Ec;
  Ec.prototype.update = function() {
    var a = new Aa;
    return function(d) {
      d && d.isBox3 ? a.copy(d) : a.setFromObject(d);
      if (!a.isEmpty()) {
        d = a.min;
        var b = a.max, c = this.geometry.attributes.position, e = c.array;
        e[0] = b.x;
        e[1] = b.y;
        e[2] = b.z;
        e[3] = d.x;
        e[4] = b.y;
        e[5] = b.z;
        e[6] = d.x;
        e[7] = d.y;
        e[8] = b.z;
        e[9] = b.x;
        e[10] = d.y;
        e[11] = b.z;
        e[12] = b.x;
        e[13] = b.y;
        e[14] = d.z;
        e[15] = d.x;
        e[16] = b.y;
        e[17] = d.z;
        e[18] = d.x;
        e[19] = d.y;
        e[20] = d.z;
        e[21] = b.x;
        e[22] = d.y;
        e[23] = d.z;
        c.needsUpdate = !0;
        this.geometry.computeBoundingSphere();
      }
    };
  }();
  var Td, xe;
  Vb.prototype = Object.create(aa.prototype);
  Vb.prototype.constructor = Vb;
  Vb.prototype.setDirection = function() {
    var a = new f, b;
    return function(d) {
      .99999 < d.y ? this.quaternion.set(0, 0, 0, 1) : -.99999 > d.y ? this.quaternion.set(1, 0, 0, 0) : (a.set(d.z, 0, -d.x).normalize(), b = Math.acos(d.y), this.quaternion.setFromAxisAngle(a, b));
    };
  }();
  Vb.prototype.setLength = function(a, b, c) {
    void 0 === b && (b = .2 * a);
    void 0 === c && (c = .2 * b);
    this.line.scale.set(1, Math.max(0, a - b), 1);
    this.line.updateMatrix();
    this.cone.scale.set(c, b, c);
    this.cone.position.y = a;
    this.cone.updateMatrix();
  };
  Vb.prototype.setColor = function(a) {
    this.line.material.color.copy(a);
    this.cone.material.color.copy(a);
  };
  Ud.prototype = Object.create(wa.prototype);
  Ud.prototype.constructor = Ud;
  var Xd = new f, Be = new ye, Ce = new ye, De = new ye;
  ib.prototype = Object.create(Qa.prototype);
  ib.prototype.constructor = ib;
  ib.prototype.getPoint = function(a) {
    var d = this.points, b = d.length;
    2 > b && console.log("duh, you need at least 2 points");
    a *= b - (this.closed ? 0 : 1);
    var c = Math.floor(a);
    a -= c;
    this.closed ? c += 0 < c ? 0 : (Math.floor(Math.abs(c) / d.length) + 1) * d.length : 0 === a && c === b - 1 && (c = b - 2, a = 1);
    var e, m, g;
    this.closed || 0 < c ? e = d[(c - 1) % b] : (Xd.subVectors(d[0], d[1]).add(d[0]), e = Xd);
    m = d[c % b];
    g = d[(c + 1) % b];
    this.closed || c + 2 < b ? d = d[(c + 2) % b] : (Xd.subVectors(d[b - 1], d[b - 2]).add(d[b - 1]), d = Xd);
    if (void 0 === this.type || "centripetal" === this.type || "chordal" === this.type) {
      var k = "chordal" === this.type ? .5 : .25, b = Math.pow(e.distanceToSquared(m), k), c = Math.pow(m.distanceToSquared(g), k), k = Math.pow(g.distanceToSquared(d), k);
      1E-4 > c && (c = 1);
      1E-4 > b && (b = c);
      1E-4 > k && (k = c);
      Be.initNonuniformCatmullRom(e.x, m.x, g.x, d.x, b, c, k);
      Ce.initNonuniformCatmullRom(e.y, m.y, g.y, d.y, b, c, k);
      De.initNonuniformCatmullRom(e.z, m.z, g.z, d.z, b, c, k);
    } else {
      "catmullrom" === this.type && (b = void 0 !== this.tension ? this.tension : .5, Be.initCatmullRom(e.x, m.x, g.x, d.x, b), Ce.initCatmullRom(e.y, m.y, g.y, d.y, b), De.initCatmullRom(e.z, m.z, g.z, d.z, b));
    }
    return new f(Be.calc(a), Ce.calc(a), De.calc(a));
  };
  md.prototype = Object.create(Qa.prototype);
  md.prototype.constructor = md;
  md.prototype.getPoint = function(a) {
    var d = this.v0, b = this.v1, c = this.v2, e = this.v3;
    return new f(Sb(a, d.x, b.x, c.x, e.x), Sb(a, d.y, b.y, c.y, e.y), Sb(a, d.z, b.z, c.z, e.z));
  };
  nd.prototype = Object.create(Qa.prototype);
  nd.prototype.constructor = nd;
  nd.prototype.getPoint = function(a) {
    var d = this.v0, b = this.v1, c = this.v2;
    return new f(Rb(a, d.x, b.x, c.x), Rb(a, d.y, b.y, c.y), Rb(a, d.z, b.z, c.z));
  };
  od.prototype = Object.create(Qa.prototype);
  od.prototype.constructor = od;
  od.prototype.getPoint = function(a) {
    if (1 === a) {
      return this.v2.clone();
    }
    var d = new f;
    d.subVectors(this.v2, this.v1);
    d.multiplyScalar(a);
    d.add(this.v1);
    return d;
  };
  Vd.prototype = Object.create(vb.prototype);
  Vd.prototype.constructor = Vd;
  Qa.create = function(a, b) {
    console.log("THREE.Curve.create() has been deprecated");
    a.prototype = Object.create(Qa.prototype);
    a.prototype.constructor = a;
    a.prototype.getPoint = b;
    return a;
  };
  $e.prototype = Object.create(ib.prototype);
  af.prototype = Object.create(ib.prototype);
  ze.prototype = Object.create(ib.prototype);
  Object.assign(ze.prototype, {initFromArray:function(a) {
    console.error("THREE.Spline: .initFromArray() has been removed.");
  }, getControlPointsArray:function(a) {
    console.error("THREE.Spline: .getControlPointsArray() has been removed.");
  }, reparametrizeByArcLength:function(a) {
    console.error("THREE.Spline: .reparametrizeByArcLength() has been removed.");
  }});
  jd.prototype.setColors = function() {
    console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.");
  };
  Object.assign(ra.prototype, {center:function(a) {
    console.warn("THREE.Box2: .center() has been renamed to .getCenter().");
    return this.getCenter(a);
  }, empty:function() {
    console.warn("THREE.Box2: .empty() has been renamed to .isEmpty().");
    return this.isEmpty();
  }, isIntersectionBox:function(a) {
    console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().");
    return this.intersectsBox(a);
  }, size:function(a) {
    console.warn("THREE.Box2: .size() has been renamed to .getSize().");
    return this.getSize(a);
  }});
  Object.assign(Aa.prototype, {center:function(a) {
    console.warn("THREE.Box3: .center() has been renamed to .getCenter().");
    return this.getCenter(a);
  }, empty:function() {
    console.warn("THREE.Box3: .empty() has been renamed to .isEmpty().");
    return this.isEmpty();
  }, isIntersectionBox:function(a) {
    console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().");
    return this.intersectsBox(a);
  }, isIntersectionSphere:function(a) {
    console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().");
    return this.intersectsSphere(a);
  }, size:function(a) {
    console.warn("THREE.Box3: .size() has been renamed to .getSize().");
    return this.getSize(a);
  }});
  yb.prototype.center = function(a) {
    console.warn("THREE.Line3: .center() has been renamed to .getCenter().");
    return this.getCenter(a);
  };
  na.random16 = function() {
    console.warn("THREE.Math.random16() has been deprecated. Use Math.random() instead.");
    return Math.random();
  };
  Object.assign(sa.prototype, {flattenToArrayOffset:function(a, b) {
    console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");
    return this.toArray(a, b);
  }, multiplyVector3:function(a) {
    console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.");
    return a.applyMatrix3(this);
  }, multiplyVector3Array:function(a) {
    console.warn("THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.");
    return this.applyToVector3Array(a);
  }, applyToBuffer:function(a, b, c) {
    console.warn("THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.");
    return this.applyToBufferAttribute(a);
  }, applyToVector3Array:function(a, b, c) {
    console.error("THREE.Matrix3: .applyToVector3Array() has been removed.");
  }});
  Object.assign(q.prototype, {extractPosition:function(a) {
    console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().");
    return this.copyPosition(a);
  }, flattenToArrayOffset:function(a, b) {
    console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");
    return this.toArray(a, b);
  }, getPosition:function() {
    var a;
    return function() {
      void 0 === a && (a = new f);
      console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.");
      return a.setFromMatrixColumn(this, 3);
    };
  }(), setRotationFromQuaternion:function(a) {
    console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().");
    return this.makeRotationFromQuaternion(a);
  }, multiplyToArray:function() {
    console.warn("THREE.Matrix4: .multiplyToArray() has been removed.");
  }, multiplyVector3:function(a) {
    console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.");
    return a.applyMatrix4(this);
  }, multiplyVector4:function(a) {
    console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.");
    return a.applyMatrix4(this);
  }, multiplyVector3Array:function(a) {
    console.warn("THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.");
    return this.applyToVector3Array(a);
  }, rotateAxis:function(a) {
    console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.");
    a.transformDirection(this);
  }, crossVector:function(a) {
    console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.");
    return a.applyMatrix4(this);
  }, translate:function() {
    console.error("THREE.Matrix4: .translate() has been removed.");
  }, rotateX:function() {
    console.error("THREE.Matrix4: .rotateX() has been removed.");
  }, rotateY:function() {
    console.error("THREE.Matrix4: .rotateY() has been removed.");
  }, rotateZ:function() {
    console.error("THREE.Matrix4: .rotateZ() has been removed.");
  }, rotateByAxis:function() {
    console.error("THREE.Matrix4: .rotateByAxis() has been removed.");
  }, applyToBuffer:function(a, b, c) {
    console.warn("THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.");
    return this.applyToBufferAttribute(a);
  }, applyToVector3Array:function(a, b, c) {
    console.error("THREE.Matrix4: .applyToVector3Array() has been removed.");
  }, makeFrustum:function(a, b, c, e, f, m) {
    console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.");
    return this.makePerspective(a, b, e, c, f, m);
  }});
  ua.prototype.isIntersectionLine = function(a) {
    console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().");
    return this.intersectsLine(a);
  };
  e.prototype.multiplyVector3 = function(a) {
    console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.");
    return a.applyQuaternion(this);
  };
  Object.assign(qb.prototype, {isIntersectionBox:function(a) {
    console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().");
    return this.intersectsBox(a);
  }, isIntersectionPlane:function(a) {
    console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().");
    return this.intersectsPlane(a);
  }, isIntersectionSphere:function(a) {
    console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().");
    return this.intersectsSphere(a);
  }});
  Object.assign(Ub.prototype, {extrude:function(a) {
    console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.");
    return new Bb(this, a);
  }, makeGeometry:function(a) {
    console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.");
    return new lc(this, a);
  }});
  Object.assign(l.prototype, {fromAttribute:function(a, b, c) {
    console.error("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().");
    return this.fromBufferAttribute(a, b, c);
  }});
  Object.assign(f.prototype, {setEulerFromRotationMatrix:function() {
    console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.");
  }, setEulerFromQuaternion:function() {
    console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.");
  }, getPositionFromMatrix:function(a) {
    console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().");
    return this.setFromMatrixPosition(a);
  }, getScaleFromMatrix:function(a) {
    console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().");
    return this.setFromMatrixScale(a);
  }, getColumnFromMatrix:function(a, b) {
    console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().");
    return this.setFromMatrixColumn(b, a);
  }, applyProjection:function(a) {
    console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.");
    return this.applyMatrix4(a);
  }, fromAttribute:function(a, b, c) {
    console.error("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().");
    return this.fromBufferAttribute(a, b, c);
  }});
  Object.assign(g.prototype, {fromAttribute:function(a, b, c) {
    console.error("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().");
    return this.fromBufferAttribute(a, b, c);
  }});
  ga.prototype.computeTangents = function() {
    console.warn("THREE.Geometry: .computeTangents() has been removed.");
  };
  Object.assign(aa.prototype, {getChildByName:function(a) {
    console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().");
    return this.getObjectByName(a);
  }, renderDepth:function() {
    console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.");
  }, translate:function(a, b) {
    console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.");
    return this.translateOnAxis(b, a);
  }});
  Object.defineProperties(aa.prototype, {eulerOrder:{get:function() {
    console.warn("THREE.Object3D: .eulerOrder is now .rotation.order.");
    return this.rotation.order;
  }, set:function(a) {
    console.warn("THREE.Object3D: .eulerOrder is now .rotation.order.");
    this.rotation.order = a;
  }}, useQuaternion:{get:function() {
    console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
  }, set:function() {
    console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
  }}});
  Object.defineProperties(Jc.prototype, {objects:{get:function() {
    console.warn("THREE.LOD: .objects has been renamed to .levels.");
    return this.levels;
  }}});
  Object.defineProperty(Kc.prototype, "useVertexTexture", {get:function() {
    console.warn("THREE.Skeleton: useVertexTexture has been removed.");
  }, set:function() {
    console.warn("THREE.Skeleton: useVertexTexture has been removed.");
  }});
  Ma.prototype.setLens = function(a, b) {
    console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup.");
    void 0 !== b && (this.filmGauge = b);
    this.setFocalLength(a);
  };
  Object.defineProperties(xa.prototype, {onlyShadow:{set:function() {
    console.warn("THREE.Light: .onlyShadow has been removed.");
  }}, shadowCameraFov:{set:function(a) {
    console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov.");
    this.shadow.camera.fov = a;
  }}, shadowCameraLeft:{set:function(a) {
    console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left.");
    this.shadow.camera.left = a;
  }}, shadowCameraRight:{set:function(a) {
    console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right.");
    this.shadow.camera.right = a;
  }}, shadowCameraTop:{set:function(a) {
    console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top.");
    this.shadow.camera.top = a;
  }}, shadowCameraBottom:{set:function(a) {
    console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.");
    this.shadow.camera.bottom = a;
  }}, shadowCameraNear:{set:function(a) {
    console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near.");
    this.shadow.camera.near = a;
  }}, shadowCameraFar:{set:function(a) {
    console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far.");
    this.shadow.camera.far = a;
  }}, shadowCameraVisible:{set:function() {
    console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.");
  }}, shadowBias:{set:function(a) {
    console.warn("THREE.Light: .shadowBias is now .shadow.bias.");
    this.shadow.bias = a;
  }}, shadowDarkness:{set:function() {
    console.warn("THREE.Light: .shadowDarkness has been removed.");
  }}, shadowMapWidth:{set:function(a) {
    console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.");
    this.shadow.mapSize.width = a;
  }}, shadowMapHeight:{set:function(a) {
    console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.");
    this.shadow.mapSize.height = a;
  }}});
  Object.defineProperties(ja.prototype, {length:{get:function() {
    console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead.");
    return this.array.length;
  }}});
  Object.assign(ea.prototype, {addIndex:function(a) {
    console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().");
    this.setIndex(a);
  }, addDrawCall:function(a, b, c) {
    void 0 !== c && console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.");
    console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup().");
    this.addGroup(a, b);
  }, clearDrawCalls:function() {
    console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().");
    this.clearGroups();
  }, computeTangents:function() {
    console.warn("THREE.BufferGeometry: .computeTangents() has been removed.");
  }, computeOffsets:function() {
    console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.");
  }});
  Object.defineProperties(ea.prototype, {drawcalls:{get:function() {
    console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups.");
    return this.groups;
  }}, offsets:{get:function() {
    console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups.");
    return this.groups;
  }}});
  Object.defineProperties(Rd.prototype, {dynamic:{set:function() {
    console.warn("THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.");
  }}, onUpdate:{value:function() {
    console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.");
    return this;
  }}});
  Object.defineProperties(X.prototype, {wrapAround:{get:function() {
    console.warn("THREE.Material: .wrapAround has been removed.");
  }, set:function() {
    console.warn("THREE.Material: .wrapAround has been removed.");
  }}, wrapRGB:{get:function() {
    console.warn("THREE.Material: .wrapRGB has been removed.");
    return new Z;
  }}});
  Object.defineProperties(gb.prototype, {metal:{get:function() {
    console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.");
    return !1;
  }, set:function() {
    console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead");
  }}});
  Object.defineProperties(ta.prototype, {derivatives:{get:function() {
    console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.");
    return this.extensions.derivatives;
  }, set:function(a) {
    console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.");
    this.extensions.derivatives = a;
  }}});
  Object.assign(ce.prototype, {getCurrentRenderTarget:function() {
    console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().");
    return this.getRenderTarget();
  }, supportsFloatTextures:function() {
    console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' ).");
    return this.extensions.get("OES_texture_float");
  }, supportsHalfFloatTextures:function() {
    console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' ).");
    return this.extensions.get("OES_texture_half_float");
  }, supportsStandardDerivatives:function() {
    console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' ).");
    return this.extensions.get("OES_standard_derivatives");
  }, supportsCompressedTextureS3TC:function() {
    console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' ).");
    return this.extensions.get("WEBGL_compressed_texture_s3tc");
  }, supportsCompressedTexturePVRTC:function() {
    console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' ).");
    return this.extensions.get("WEBGL_compressed_texture_pvrtc");
  }, supportsBlendMinMax:function() {
    console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' ).");
    return this.extensions.get("EXT_blend_minmax");
  }, supportsVertexTextures:function() {
    console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.");
    return this.capabilities.vertexTextures;
  }, supportsInstancedArrays:function() {
    console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' ).");
    return this.extensions.get("ANGLE_instanced_arrays");
  }, enableScissorTest:function(a) {
    console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().");
    this.setScissorTest(a);
  }, initMaterial:function() {
    console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.");
  }, addPrePlugin:function() {
    console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.");
  }, addPostPlugin:function() {
    console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.");
  }, updateShadowMap:function() {
    console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.");
  }});
  Object.defineProperties(ce.prototype, {shadowMapEnabled:{get:function() {
    return this.shadowMap.enabled;
  }, set:function(a) {
    console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.");
    this.shadowMap.enabled = a;
  }}, shadowMapType:{get:function() {
    return this.shadowMap.type;
  }, set:function(a) {
    console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.");
    this.shadowMap.type = a;
  }}, shadowMapCullFace:{get:function() {
    return this.shadowMap.cullFace;
  }, set:function(a) {
    console.warn("THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.");
    this.shadowMap.cullFace = a;
  }}});
  Object.defineProperties(qd.prototype, {cullFace:{get:function() {
    return this.renderReverseSided ? 2 : 1;
  }, set:function(a) {
    a = 1 !== a;
    console.warn("WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to " + a + ".");
    this.renderReverseSided = a;
  }}});
  Object.defineProperties(k.prototype, {wrapS:{get:function() {
    console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.");
    return this.texture.wrapS;
  }, set:function(a) {
    console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.");
    this.texture.wrapS = a;
  }}, wrapT:{get:function() {
    console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.");
    return this.texture.wrapT;
  }, set:function(a) {
    console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.");
    this.texture.wrapT = a;
  }}, magFilter:{get:function() {
    console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.");
    return this.texture.magFilter;
  }, set:function(a) {
    console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.");
    this.texture.magFilter = a;
  }}, minFilter:{get:function() {
    console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.");
    return this.texture.minFilter;
  }, set:function(a) {
    console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.");
    this.texture.minFilter = a;
  }}, anisotropy:{get:function() {
    console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.");
    return this.texture.anisotropy;
  }, set:function(a) {
    console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.");
    this.texture.anisotropy = a;
  }}, offset:{get:function() {
    console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset.");
    return this.texture.offset;
  }, set:function(a) {
    console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset.");
    this.texture.offset = a;
  }}, repeat:{get:function() {
    console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat.");
    return this.texture.repeat;
  }, set:function(a) {
    console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat.");
    this.texture.repeat = a;
  }}, format:{get:function() {
    console.warn("THREE.WebGLRenderTarget: .format is now .texture.format.");
    return this.texture.format;
  }, set:function(a) {
    console.warn("THREE.WebGLRenderTarget: .format is now .texture.format.");
    this.texture.format = a;
  }}, type:{get:function() {
    console.warn("THREE.WebGLRenderTarget: .type is now .texture.type.");
    return this.texture.type;
  }, set:function(a) {
    console.warn("THREE.WebGLRenderTarget: .type is now .texture.type.");
    this.texture.type = a;
  }}, generateMipmaps:{get:function() {
    console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.");
    return this.texture.generateMipmaps;
  }, set:function(a) {
    console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.");
    this.texture.generateMipmaps = a;
  }}});
  wc.prototype.load = function(a) {
    console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");
    var d = this;
    (new le).load(a, function(a) {
      d.setBuffer(a);
    });
    return this;
  };
  qe.prototype.getData = function() {
    console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData().");
    return this.getFrequencyData();
  };
  a.WebGLRenderTargetCube = c;
  a.WebGLRenderTarget = k;
  a.WebGLRenderer = ce;
  a.ShaderLib = xb;
  a.UniformsLib = la;
  a.UniformsUtils = Ta;
  a.ShaderChunk = ha;
  a.FogExp2 = Xb;
  a.Fog = Yb;
  a.Scene = ud;
  a.LensFlare = de;
  a.Sprite = Ic;
  a.LOD = Jc;
  a.SkinnedMesh = wd;
  a.Skeleton = Kc;
  a.Bone = vd;
  a.Mesh = Ia;
  a.LineSegments = wa;
  a.LineLoop = xd;
  a.Line = cb;
  a.Points = Zb;
  a.Group = Lc;
  a.VideoTexture = yd;
  a.DataTexture = r;
  a.CompressedTexture = $b;
  a.CubeTexture = w;
  a.CanvasTexture = zd;
  a.DepthTexture = Mc;
  a.Texture = b;
  a.CompressedTextureLoader = Me;
  a.DataTextureLoader = fe;
  a.CubeTextureLoader = ge;
  a.TextureLoader = Ad;
  a.ObjectLoader = Ne;
  a.MaterialLoader = Pd;
  a.BufferGeometryLoader = he;
  a.DefaultLoadingManager = Xa;
  a.LoadingManager = ee;
  a.JSONLoader = ie;
  a.ImageLoader = cd;
  a.FontLoader = Pe;
  a.FileLoader = hb;
  a.Loader = tc;
  a.Cache = pd;
  a.AudioLoader = le;
  a.SpotLightShadow = Cd;
  a.SpotLight = Dd;
  a.PointLight = Ed;
  a.RectAreaLight = Id;
  a.HemisphereLight = Bd;
  a.DirectionalLightShadow = Fd;
  a.DirectionalLight = Gd;
  a.AmbientLight = Hd;
  a.LightShadow = Ob;
  a.Light = xa;
  a.StereoCamera = Qe;
  a.PerspectiveCamera = Ma;
  a.OrthographicCamera = Wb;
  a.CubeCamera = Qd;
  a.ArrayCamera = me;
  a.Camera = Ka;
  a.AudioListener = ne;
  a.PositionalAudio = pe;
  a.AudioContext = oe;
  a.AudioAnalyser = qe;
  a.Audio = wc;
  a.VectorKeyframeTrack = rc;
  a.StringKeyframeTrack = Md;
  a.QuaternionKeyframeTrack = ed;
  a.NumberKeyframeTrack = sc;
  a.ColorKeyframeTrack = Od;
  a.BooleanKeyframeTrack = Nd;
  a.PropertyMixer = re;
  a.PropertyBinding = Ea;
  a.KeyframeTrack = Qb;
  a.AnimationUtils = Da;
  a.AnimationObjectGroup = Se;
  a.AnimationMixer = Ue;
  a.AnimationClip = bb;
  a.Uniform = Rd;
  a.InstancedBufferGeometry = se;
  a.BufferGeometry = ea;
  a.GeometryIdCount = function() {
    return $d++;
  };
  a.Geometry = ga;
  a.InterleavedBufferAttribute = te;
  a.InstancedInterleavedBuffer = ue;
  a.InterleavedBuffer = xc;
  a.InstancedBufferAttribute = ve;
  a.Face3 = Ha;
  a.Object3D = aa;
  a.Raycaster = Ve;
  a.Layers = Fc;
  a.EventDispatcher = h;
  a.Clock = Xe;
  a.QuaternionLinearInterpolant = Ld;
  a.LinearInterpolant = dd;
  a.DiscreteInterpolant = Kd;
  a.CubicInterpolant = Jd;
  a.Interpolant = Ya;
  a.Triangle = Ja;
  a.Math = na;
  a.Spherical = Ye;
  a.Cylindrical = Ze;
  a.Plane = ua;
  a.Frustum = Va;
  a.Sphere = Ca;
  a.Ray = qb;
  a.Matrix4 = q;
  a.Matrix3 = sa;
  a.Box3 = Aa;
  a.Box2 = ra;
  a.Line3 = yb;
  a.Euler = kb;
  a.Vector4 = g;
  a.Vector3 = f;
  a.Vector2 = l;
  a.Quaternion = e;
  a.Color = Z;
  a.MorphBlendMesh = Fa;
  a.ImmediateRenderObject = hd;
  a.VertexNormalsHelper = id;
  a.SpotLightHelper = yc;
  a.SkeletonHelper = zc;
  a.PointLightHelper = Ac;
  a.RectAreaLightHelper = Bc;
  a.HemisphereLightHelper = Cc;
  a.GridHelper = jd;
  a.PolarGridHelper = Sd;
  a.FaceNormalsHelper = kd;
  a.DirectionalLightHelper = Dc;
  a.CameraHelper = ld;
  a.BoxHelper = Ec;
  a.ArrowHelper = Vb;
  a.AxisHelper = Ud;
  a.CatmullRomCurve3 = ib;
  a.CubicBezierCurve3 = md;
  a.QuadraticBezierCurve3 = nd;
  a.LineCurve3 = od;
  a.ArcCurve = Vd;
  a.EllipseCurve = vb;
  a.SplineCurve = Tb;
  a.CubicBezierCurve = uc;
  a.QuadraticBezierCurve = vc;
  a.LineCurve = pb;
  a.Shape = Ub;
  a.Path = gd;
  a.ShapePath = je;
  a.Font = ke;
  a.CurvePath = fd;
  a.Curve = Qa;
  a.ShapeUtils = fb;
  a.SceneUtils = {createMultiMaterialObject:function(a, b) {
    for (var d = new Lc, c = 0, e = b.length;c < e;c++) {
      d.add(new Ia(a, b[c]));
    }
    return d;
  }, detach:function(a, b, c) {
    a.applyMatrix(b.matrixWorld);
    b.remove(a);
    c.add(a);
  }, attach:function(a, b, c) {
    var d = new q;
    d.getInverse(c.matrixWorld);
    a.applyMatrix(d);
    b.remove(a);
    c.add(a);
  }};
  a.WireframeGeometry = ac;
  a.ParametricGeometry = Nc;
  a.ParametricBufferGeometry = bc;
  a.TetrahedronGeometry = Pc;
  a.TetrahedronBufferGeometry = cc;
  a.OctahedronGeometry = Qc;
  a.OctahedronBufferGeometry = Gb;
  a.IcosahedronGeometry = Rc;
  a.IcosahedronBufferGeometry = dc;
  a.DodecahedronGeometry = Sc;
  a.DodecahedronBufferGeometry = ec;
  a.PolyhedronGeometry = Oc;
  a.PolyhedronBufferGeometry = Pa;
  a.TubeGeometry = Tc;
  a.TubeBufferGeometry = fc;
  a.TorusKnotGeometry = Uc;
  a.TorusKnotBufferGeometry = gc;
  a.TorusGeometry = Vc;
  a.TorusBufferGeometry = hc;
  a.TextGeometry = Wc;
  a.TextBufferGeometry = ic;
  a.SphereGeometry = Xc;
  a.SphereBufferGeometry = Hb;
  a.RingGeometry = Yc;
  a.RingBufferGeometry = jc;
  a.PlaneGeometry = Ga;
  a.PlaneBufferGeometry = Cb;
  a.LatheGeometry = Zc;
  a.LatheBufferGeometry = kc;
  a.ShapeGeometry = lc;
  a.ShapeBufferGeometry = mc;
  a.ExtrudeGeometry = Bb;
  a.ExtrudeBufferGeometry = eb;
  a.EdgesGeometry = nc;
  a.ConeGeometry = $c;
  a.ConeBufferGeometry = ad;
  a.CylinderGeometry = Ib;
  a.CylinderBufferGeometry = ub;
  a.CircleGeometry = bd;
  a.CircleBufferGeometry = oc;
  a.BoxGeometry = Oa;
  a.BoxBufferGeometry = Ua;
  a.ShadowMaterial = pc;
  a.SpriteMaterial = Ab;
  a.RawShaderMaterial = qc;
  a.ShaderMaterial = ta;
  a.PointsMaterial = db;
  a.MeshPhysicalMaterial = Jb;
  a.MeshStandardMaterial = ob;
  a.MeshPhongMaterial = gb;
  a.MeshToonMaterial = Kb;
  a.MeshNormalMaterial = Lb;
  a.MeshLambertMaterial = Mb;
  a.MeshDepthMaterial = Ba;
  a.MeshBasicMaterial = La;
  a.LineDashedMaterial = Nb;
  a.LineBasicMaterial = za;
  a.Material = X;
  a.Float64BufferAttribute = sb;
  a.Float32BufferAttribute = Y;
  a.Uint32BufferAttribute = mb;
  a.Int32BufferAttribute = $a;
  a.Uint16BufferAttribute = Za;
  a.Int16BufferAttribute = zb;
  a.Uint8ClampedBufferAttribute = Wa;
  a.Uint8BufferAttribute = lb;
  a.Int8BufferAttribute = rb;
  a.BufferAttribute = ja;
  a.REVISION = "85dev";
  a.MOUSE = {LEFT:0, MIDDLE:1, RIGHT:2};
  a.CullFaceNone = 0;
  a.CullFaceBack = 1;
  a.CullFaceFront = 2;
  a.CullFaceFrontBack = 3;
  a.FrontFaceDirectionCW = 0;
  a.FrontFaceDirectionCCW = 1;
  a.BasicShadowMap = 0;
  a.PCFShadowMap = 1;
  a.PCFSoftShadowMap = 2;
  a.FrontSide = 0;
  a.BackSide = 1;
  a.DoubleSide = 2;
  a.FlatShading = 1;
  a.SmoothShading = 2;
  a.NoColors = 0;
  a.FaceColors = 1;
  a.VertexColors = 2;
  a.NoBlending = 0;
  a.NormalBlending = 1;
  a.AdditiveBlending = 2;
  a.SubtractiveBlending = 3;
  a.MultiplyBlending = 4;
  a.CustomBlending = 5;
  a.AddEquation = 100;
  a.SubtractEquation = 101;
  a.ReverseSubtractEquation = 102;
  a.MinEquation = 103;
  a.MaxEquation = 104;
  a.ZeroFactor = 200;
  a.OneFactor = 201;
  a.SrcColorFactor = 202;
  a.OneMinusSrcColorFactor = 203;
  a.SrcAlphaFactor = 204;
  a.OneMinusSrcAlphaFactor = 205;
  a.DstAlphaFactor = 206;
  a.OneMinusDstAlphaFactor = 207;
  a.DstColorFactor = 208;
  a.OneMinusDstColorFactor = 209;
  a.SrcAlphaSaturateFactor = 210;
  a.NeverDepth = 0;
  a.AlwaysDepth = 1;
  a.LessDepth = 2;
  a.LessEqualDepth = 3;
  a.EqualDepth = 4;
  a.GreaterEqualDepth = 5;
  a.GreaterDepth = 6;
  a.NotEqualDepth = 7;
  a.MultiplyOperation = 0;
  a.MixOperation = 1;
  a.AddOperation = 2;
  a.NoToneMapping = 0;
  a.LinearToneMapping = 1;
  a.ReinhardToneMapping = 2;
  a.Uncharted2ToneMapping = 3;
  a.CineonToneMapping = 4;
  a.UVMapping = 300;
  a.CubeReflectionMapping = 301;
  a.CubeRefractionMapping = 302;
  a.EquirectangularReflectionMapping = 303;
  a.EquirectangularRefractionMapping = 304;
  a.SphericalReflectionMapping = 305;
  a.CubeUVReflectionMapping = 306;
  a.CubeUVRefractionMapping = 307;
  a.RepeatWrapping = 1E3;
  a.ClampToEdgeWrapping = 1001;
  a.MirroredRepeatWrapping = 1002;
  a.NearestFilter = 1003;
  a.NearestMipMapNearestFilter = 1004;
  a.NearestMipMapLinearFilter = 1005;
  a.LinearFilter = 1006;
  a.LinearMipMapNearestFilter = 1007;
  a.LinearMipMapLinearFilter = 1008;
  a.UnsignedByteType = 1009;
  a.ByteType = 1010;
  a.ShortType = 1011;
  a.UnsignedShortType = 1012;
  a.IntType = 1013;
  a.UnsignedIntType = 1014;
  a.FloatType = 1015;
  a.HalfFloatType = 1016;
  a.UnsignedShort4444Type = 1017;
  a.UnsignedShort5551Type = 1018;
  a.UnsignedShort565Type = 1019;
  a.UnsignedInt248Type = 1020;
  a.AlphaFormat = 1021;
  a.RGBFormat = 1022;
  a.RGBAFormat = 1023;
  a.LuminanceFormat = 1024;
  a.LuminanceAlphaFormat = 1025;
  a.RGBEFormat = 1023;
  a.DepthFormat = 1026;
  a.DepthStencilFormat = 1027;
  a.RGB_S3TC_DXT1_Format = 2001;
  a.RGBA_S3TC_DXT1_Format = 2002;
  a.RGBA_S3TC_DXT3_Format = 2003;
  a.RGBA_S3TC_DXT5_Format = 2004;
  a.RGB_PVRTC_4BPPV1_Format = 2100;
  a.RGB_PVRTC_2BPPV1_Format = 2101;
  a.RGBA_PVRTC_4BPPV1_Format = 2102;
  a.RGBA_PVRTC_2BPPV1_Format = 2103;
  a.RGB_ETC1_Format = 2151;
  a.LoopOnce = 2200;
  a.LoopRepeat = 2201;
  a.LoopPingPong = 2202;
  a.InterpolateDiscrete = 2300;
  a.InterpolateLinear = 2301;
  a.InterpolateSmooth = 2302;
  a.ZeroCurvatureEnding = 2400;
  a.ZeroSlopeEnding = 2401;
  a.WrapAroundEnding = 2402;
  a.TrianglesDrawMode = 0;
  a.TriangleStripDrawMode = 1;
  a.TriangleFanDrawMode = 2;
  a.LinearEncoding = 3E3;
  a.sRGBEncoding = 3001;
  a.GammaEncoding = 3007;
  a.RGBEEncoding = 3002;
  a.LogLuvEncoding = 3003;
  a.RGBM7Encoding = 3004;
  a.RGBM16Encoding = 3005;
  a.RGBDEncoding = 3006;
  a.BasicDepthPacking = 3200;
  a.RGBADepthPacking = 3201;
  a.CubeGeometry = Oa;
  a.Face4 = function(a, b, c, e, f, m, g) {
    console.warn("THREE.Face4 has been removed. A THREE.Face3 will be created instead.");
    return new Ha(a, b, c, f, m, g);
  };
  a.LineStrip = 0;
  a.LinePieces = 1;
  a.MeshFaceMaterial = function(a) {
    console.warn("THREE.MeshFaceMaterial has been removed. Use an Array instead.");
    return a;
  };
  a.MultiMaterial = function(a) {
    void 0 === a && (a = []);
    console.warn("THREE.MultiMaterial has been removed. Use an Array instead.");
    a.isMultiMaterial = !0;
    a.materials = a;
    a.clone = function() {
      return a.slice();
    };
    return a;
  };
  a.PointCloud = function(a, b) {
    console.warn("THREE.PointCloud has been renamed to THREE.Points.");
    return new Zb(a, b);
  };
  a.Particle = function(a) {
    console.warn("THREE.Particle has been renamed to THREE.Sprite.");
    return new Ic(a);
  };
  a.ParticleSystem = function(a, b) {
    console.warn("THREE.ParticleSystem has been renamed to THREE.Points.");
    return new Zb(a, b);
  };
  a.PointCloudMaterial = function(a) {
    console.warn("THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.");
    return new db(a);
  };
  a.ParticleBasicMaterial = function(a) {
    console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.");
    return new db(a);
  };
  a.ParticleSystemMaterial = function(a) {
    console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.");
    return new db(a);
  };
  a.Vertex = function(a, b, c) {
    console.warn("THREE.Vertex has been removed. Use THREE.Vector3 instead.");
    return new f(a, b, c);
  };
  a.DynamicBufferAttribute = function(a, b) {
    console.warn("THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.");
    return (new ja(a, b)).setDynamic(!0);
  };
  a.Int8Attribute = function(a, b) {
    console.warn("THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.");
    return new rb(a, b);
  };
  a.Uint8Attribute = function(a, b) {
    console.warn("THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.");
    return new lb(a, b);
  };
  a.Uint8ClampedAttribute = function(a, b) {
    console.warn("THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.");
    return new Wa(a, b);
  };
  a.Int16Attribute = function(a, b) {
    console.warn("THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.");
    return new zb(a, b);
  };
  a.Uint16Attribute = function(a, b) {
    console.warn("THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.");
    return new Za(a, b);
  };
  a.Int32Attribute = function(a, b) {
    console.warn("THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.");
    return new $a(a, b);
  };
  a.Uint32Attribute = function(a, b) {
    console.warn("THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.");
    return new mb(a, b);
  };
  a.Float32Attribute = function(a, b) {
    console.warn("THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.");
    return new Y(a, b);
  };
  a.Float64Attribute = function(a, b) {
    console.warn("THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.");
    return new sb(a, b);
  };
  a.ClosedSplineCurve3 = $e;
  a.SplineCurve3 = af;
  a.Spline = ze;
  a.BoundingBoxHelper = function(a, b) {
    console.warn("THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.");
    return new Ec(a, b);
  };
  a.EdgesHelper = function(a, b) {
    console.warn("THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.");
    return new wa(new nc(a.geometry), new za({color:void 0 !== b ? b : 16777215}));
  };
  a.WireframeHelper = function(a, b) {
    console.warn("THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.");
    return new wa(new ac(a.geometry), new za({color:void 0 !== b ? b : 16777215}));
  };
  a.XHRLoader = function(a) {
    console.warn("THREE.XHRLoader has been renamed to THREE.FileLoader.");
    return new hb(a);
  };
  a.BinaryTextureLoader = function(a) {
    console.warn("THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.");
    return new fe(a);
  };
  a.GeometryUtils = {merge:function(a, b, c) {
    console.warn("THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.");
    var d;
    b.isMesh && (b.matrixAutoUpdate && b.updateMatrix(), d = b.matrix, b = b.geometry);
    a.merge(b, d, c);
  }, center:function(a) {
    console.warn("THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.");
    return a.center();
  }};
  a.ImageUtils = {crossOrigin:void 0, loadTexture:function(a, b, c, e) {
    console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");
    var d = new Ad;
    d.setCrossOrigin(this.crossOrigin);
    a = d.load(a, c, void 0, e);
    b && (a.mapping = b);
    return a;
  }, loadTextureCube:function(a, b, c, e) {
    console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");
    var d = new ge;
    d.setCrossOrigin(this.crossOrigin);
    a = d.load(a, c, void 0, e);
    b && (a.mapping = b);
    return a;
  }, loadCompressedTexture:function() {
    console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.");
  }, loadCompressedTextureCube:function() {
    console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.");
  }};
  a.Projector = function() {
    console.error("THREE.Projector has been moved to /examples/js/renderers/Projector.js.");
    this.projectVector = function(a, b) {
      console.warn("THREE.Projector: .projectVector() is now vector.project().");
      a.project(b);
    };
    this.unprojectVector = function(a, b) {
      console.warn("THREE.Projector: .unprojectVector() is now vector.unproject().");
      a.unproject(b);
    };
    this.pickingRay = function() {
      console.error("THREE.Projector: .pickingRay() is now raycaster.setFromCamera().");
    };
  };
  a.CanvasRenderer = function() {
    console.error("THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js");
    this.domElement = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
    this.clear = function() {
    };
    this.render = function() {
    };
    this.setClearColor = function() {
    };
    this.setSize = function() {
    };
  };
  Object.defineProperty(a, "__esModule", {value:!0});
});
THREE.VREffect = function(a, h) {
  var l, b, g, k, c, e, f, q;
  function r(a) {
    v = a;
    0 < a.length ? u = a[0] : h && h("HMD not available");
  }
  function w() {
    var b = t.isPresenting;
    t.isPresenting = void 0 !== u && u.isPresenting;
    if (t.isPresenting) {
      var c = u.getEyeParameters("left"), e = c.renderWidth, c = c.renderHeight;
      b || (D = a.getPixelRatio(), C = a.getSize(), a.setPixelRatio(1), a.setSize(2 * e, c, !1));
    } else {
      b && (a.setPixelRatio(D), a.setSize(C.width, C.height, A));
    }
  }
  function p(a, b, c, e) {
    var f, m = Math.PI / 180;
    f = Math.tan(a.upDegrees * m);
    var g = Math.tan(a.downDegrees * m), k = Math.tan(a.leftDegrees * m);
    a = Math.tan(a.rightDegrees * m);
    c = void 0 === c ? .01 : c;
    e = void 0 === e ? 1E4 : e;
    var m = void 0 === b || b ? -1 : 1, q = new THREE.Matrix4, p = q.elements, h = 2 / (k + a), r = 2 / (f + g);
    b = [h, r];
    f = [(k - a) * h * .5, (f - g) * r * .5];
    p[0] = b[0];
    p[1] = 0;
    p[2] = f[0] * m;
    p[3] = 0;
    p[4] = 0;
    p[5] = b[1];
    p[6] = -f[1] * m;
    p[7] = 0;
    p[8] = 0;
    p[9] = 0;
    p[10] = e / (c - e) * -m;
    p[11] = e * c / (c - e);
    p[12] = 0;
    p[13] = 0;
    p[14] = m;
    p[15] = 0;
    q.transpose();
    return q;
  }
  var u, v, y = new THREE.Vector3, x = new THREE.Vector3, m = null;
  "VRFrameData" in window && (m = new window.VRFrameData);
  navigator.getVRDisplays && navigator.getVRDisplays().then(r).catch(function() {
    console.warn("THREE.VREffect: Unable to get VR Displays");
  });
  this.isPresenting = !1;
  var t = this, C = a.getSize(), A = !1, D = a.getPixelRatio();
  this.getVRDisplay = function() {
    return u;
  };
  this.setVRDisplay = function(a) {
    u = a;
  };
  this.getVRDisplays = function() {
    console.warn("THREE.VREffect: getVRDisplays() is being deprecated.");
    return v;
  };
  this.setSize = function(b, c, e) {
    C = {width:b, height:c};
    A = e;
    t.isPresenting ? (b = u.getEyeParameters("left"), a.setPixelRatio(1), a.setSize(2 * b.renderWidth, b.renderHeight, !1)) : (a.setPixelRatio(D), a.setSize(b, c, e));
  };
  var F = a.domElement, G = [0, 0, .5, 1], B = [.5, 0, .5, 1];
  window.addEventListener("vrdisplaypresentchange", w, !1);
  this.setFullScreen = function(a) {
    return new Promise(function(b, c) {
      void 0 === u ? c(Error("No VR hardware found.")) : t.isPresenting === a ? b() : a ? b(u.requestPresent([{source:F}])) : b(u.exitPresent());
    });
  };
  this.requestPresent = function() {
    return this.setFullScreen(!0);
  };
  this.exitPresent = function() {
    return this.setFullScreen(!1);
  };
  this.requestAnimationFrame = function(a) {
    return void 0 !== u ? u.requestAnimationFrame(a) : window.requestAnimationFrame(a);
  };
  this.cancelAnimationFrame = function(a) {
    void 0 !== u ? u.cancelAnimationFrame(a) : window.cancelAnimationFrame(a);
  };
  this.submitFrame = function() {
    void 0 !== u && t.isPresenting && u.submitFrame();
  };
  this.autoSubmitFrame = !0;
  var K = new THREE.PerspectiveCamera;
  K.layers.enable(1);
  var H = new THREE.PerspectiveCamera;
  H.layers.enable(2);
  this.render = function(h, r, w, v) {
    if (u && t.isPresenting) {
      var C = h.autoUpdate;
      C && (h.updateMatrixWorld(), h.autoUpdate = !1);
      var A = u.getEyeParameters("left"), F = u.getEyeParameters("right");
      y.fromArray(A.offset);
      x.fromArray(F.offset);
      Array.isArray(h) && (console.warn("THREE.VREffect.render() no longer supports arrays. Use object.layers instead."), h = h[0]);
      var D = a.getSize(), J = u.getLayers(), R;
      J.length ? (R = J[0], J = null !== R.leftBounds && 4 === R.leftBounds.length ? R.leftBounds : G, R = null !== R.rightBounds && 4 === R.rightBounds.length ? R.rightBounds : B) : (J = G, R = B);
      c = Math.round(D.width * J[0]);
      e = Math.round(D.height * J[1]);
      f = Math.round(D.width * J[2]);
      q = Math.round(D.height * J[3]);
      l = Math.round(D.width * R[0]);
      b = Math.round(D.height * R[1]);
      g = Math.round(D.width * R[2]);
      k = Math.round(D.height * R[3]);
      w ? (a.setRenderTarget(w), w.scissorTest = !0) : (a.setRenderTarget(null), a.setScissorTest(!0));
      (a.autoClear || v) && a.clear();
      null === r.parent && r.updateMatrixWorld();
      r.matrixWorld.decompose(K.position, K.quaternion, K.scale);
      H.position.copy(K.position);
      H.quaternion.copy(K.quaternion);
      H.scale.copy(K.scale);
      K.translateOnAxis(y, K.scale.x);
      H.translateOnAxis(x, H.scale.x);
      u.getFrameData ? (u.depthNear = r.near, u.depthFar = r.far, u.getFrameData(m), K.projectionMatrix.elements = m.leftProjectionMatrix, H.projectionMatrix.elements = m.rightProjectionMatrix) : (K.projectionMatrix = p(A.fieldOfView, !0, r.near, r.far), H.projectionMatrix = p(F.fieldOfView, !0, r.near, r.far));
      w ? (w.viewport.set(c, e, f, q), w.scissor.set(c, e, f, q)) : (a.setViewport(c, e, f, q), a.setScissor(c, e, f, q));
      a.render(h, K, w, v);
      w ? (w.viewport.set(l, b, g, k), w.scissor.set(l, b, g, k)) : (a.setViewport(l, b, g, k), a.setScissor(l, b, g, k));
      a.render(h, H, w, v);
      w ? (w.viewport.set(0, 0, D.width, D.height), w.scissor.set(0, 0, D.width, D.height), w.scissorTest = !1, a.setRenderTarget(null)) : (a.setViewport(0, 0, D.width, D.height), a.setScissorTest(!1));
      C && (h.autoUpdate = !0);
      t.autoSubmitFrame && t.submitFrame();
    } else {
      a.render(h, r, w, v);
    }
  };
  this.dispose = function() {
    window.removeEventListener("vrdisplaypresentchange", w, !1);
  };
};
!function(a) {
  if ("object" == typeof exports && "undefined" != typeof module) {
    module.exports = a();
  } else {
    var h;
    "undefined" != typeof window ? h = window : "undefined" != typeof global ? h = global : "undefined" != typeof self && (h = self);
    h.CANNON = a();
  }
}(function() {
  return function h(l, b, g) {
    function k(e, q) {
      if (!b[e]) {
        if (!l[e]) {
          var f = "function" == typeof require && require;
          if (!q && f) {
            return f(e, !0);
          }
          if (c) {
            return c(e, !0);
          }
          throw Error("Cannot find module '" + e + "'");
        }
        q = b[e] = {exports:{}};
        l[e][0].call(q.exports, function(b) {
          var c = l[e][1][b];
          return k(c ? c : b);
        }, q, q.exports, h, l, b, g);
      }
      return b[e].exports;
    }
    for (var c = "function" == typeof require && require, e = 0;e < g.length;e++) {
      k(g[e]);
    }
    return k;
  }({1:[function(h, l) {
    l.exports = {name:"cannon", version:"0.6.2", description:"A lightweight 3D physics engine written in JavaScript.", homepage:"https://github.com/schteppe/cannon.js", author:"Stefan Hedman <schteppe@gmail.com> (http://steffe.se)", keywords:["cannon.js", "cannon", "physics", "engine", "3d"], main:"./build/cannon.js", engines:{node:"*"}, repository:{type:"git", url:"https://github.com/schteppe/cannon.js.git"}, bugs:{url:"https://github.com/schteppe/cannon.js/issues"}, licenses:[{type:"MIT"}], devDependencies:{jshint:"latest", 
    "uglify-js":"latest", nodeunit:"^0.9.0", grunt:"~0.4.0", "grunt-contrib-jshint":"~0.1.1", "grunt-contrib-nodeunit":"^0.4.1", "grunt-contrib-concat":"~0.1.3", "grunt-contrib-uglify":"^0.5.1", "grunt-browserify":"^2.1.4", "grunt-contrib-yuidoc":"^0.5.2", browserify:"*"}, dependencies:{}};
  }, {}], 2:[function(h, l) {
    l.exports = {version:h("../package.json").version, AABB:h("./collision/AABB"), ArrayCollisionMatrix:h("./collision/ArrayCollisionMatrix"), Body:h("./objects/Body"), Box:h("./shapes/Box"), Broadphase:h("./collision/Broadphase"), Constraint:h("./constraints/Constraint"), ContactEquation:h("./equations/ContactEquation"), Narrowphase:h("./world/Narrowphase"), ConeTwistConstraint:h("./constraints/ConeTwistConstraint"), ContactMaterial:h("./material/ContactMaterial"), ConvexPolyhedron:h("./shapes/ConvexPolyhedron"), 
    Cylinder:h("./shapes/Cylinder"), DistanceConstraint:h("./constraints/DistanceConstraint"), Equation:h("./equations/Equation"), EventTarget:h("./utils/EventTarget"), FrictionEquation:h("./equations/FrictionEquation"), GSSolver:h("./solver/GSSolver"), GridBroadphase:h("./collision/GridBroadphase"), Heightfield:h("./shapes/Heightfield"), HingeConstraint:h("./constraints/HingeConstraint"), LockConstraint:h("./constraints/LockConstraint"), Mat3:h("./math/Mat3"), Material:h("./material/Material"), 
    NaiveBroadphase:h("./collision/NaiveBroadphase"), ObjectCollisionMatrix:h("./collision/ObjectCollisionMatrix"), Pool:h("./utils/Pool"), Particle:h("./shapes/Particle"), Plane:h("./shapes/Plane"), PointToPointConstraint:h("./constraints/PointToPointConstraint"), Quaternion:h("./math/Quaternion"), Ray:h("./collision/Ray"), RaycastVehicle:h("./objects/RaycastVehicle"), RaycastResult:h("./collision/RaycastResult"), RigidVehicle:h("./objects/RigidVehicle"), RotationalEquation:h("./equations/RotationalEquation"), 
    RotationalMotorEquation:h("./equations/RotationalMotorEquation"), SAPBroadphase:h("./collision/SAPBroadphase"), SPHSystem:h("./objects/SPHSystem"), Shape:h("./shapes/Shape"), Solver:h("./solver/Solver"), Sphere:h("./shapes/Sphere"), SplitSolver:h("./solver/SplitSolver"), Spring:h("./objects/Spring"), Trimesh:h("./shapes/Trimesh"), Vec3:h("./math/Vec3"), Vec3Pool:h("./utils/Vec3Pool"), World:h("./world/World")};
  }, {"../package.json":1, "./collision/AABB":3, "./collision/ArrayCollisionMatrix":4, "./collision/Broadphase":5, "./collision/GridBroadphase":6, "./collision/NaiveBroadphase":7, "./collision/ObjectCollisionMatrix":8, "./collision/Ray":9, "./collision/RaycastResult":10, "./collision/SAPBroadphase":11, "./constraints/ConeTwistConstraint":12, "./constraints/Constraint":13, "./constraints/DistanceConstraint":14, "./constraints/HingeConstraint":15, "./constraints/LockConstraint":16, "./constraints/PointToPointConstraint":17, 
  "./equations/ContactEquation":19, "./equations/Equation":20, "./equations/FrictionEquation":21, "./equations/RotationalEquation":22, "./equations/RotationalMotorEquation":23, "./material/ContactMaterial":24, "./material/Material":25, "./math/Mat3":27, "./math/Quaternion":28, "./math/Vec3":30, "./objects/Body":31, "./objects/RaycastVehicle":32, "./objects/RigidVehicle":33, "./objects/SPHSystem":34, "./objects/Spring":35, "./shapes/Box":37, "./shapes/ConvexPolyhedron":38, "./shapes/Cylinder":39, 
  "./shapes/Heightfield":40, "./shapes/Particle":41, "./shapes/Plane":42, "./shapes/Shape":43, "./shapes/Sphere":44, "./shapes/Trimesh":45, "./solver/GSSolver":46, "./solver/Solver":47, "./solver/SplitSolver":48, "./utils/EventTarget":49, "./utils/Pool":51, "./utils/Vec3Pool":54, "./world/Narrowphase":55, "./world/World":56}], 3:[function(h, l) {
    function b(b) {
      b = b || {};
      this.lowerBound = new g;
      b.lowerBound && this.lowerBound.copy(b.lowerBound);
      this.upperBound = new g;
      b.upperBound && this.upperBound.copy(b.upperBound);
    }
    var g = h("../math/Vec3");
    h("../utils/Utils");
    l.exports = b;
    var k = new g;
    b.prototype.setFromPoints = function(b, c, g, h) {
      var e = this.lowerBound, f = this.upperBound;
      e.copy(b[0]);
      g && g.vmult(e, e);
      f.copy(e);
      for (var q = 1;q < b.length;q++) {
        var r = b[q];
        g && (g.vmult(r, k), r = k);
        r.x > f.x && (f.x = r.x);
        r.x < e.x && (e.x = r.x);
        r.y > f.y && (f.y = r.y);
        r.y < e.y && (e.y = r.y);
        r.z > f.z && (f.z = r.z);
        r.z < e.z && (e.z = r.z);
      }
      return c && (c.vadd(e, e), c.vadd(f, f)), h && (e.x -= h, e.y -= h, e.z -= h, f.x += h, f.y += h, f.z += h), this;
    };
    b.prototype.copy = function(b) {
      return this.lowerBound.copy(b.lowerBound), this.upperBound.copy(b.upperBound), this;
    };
    b.prototype.clone = function() {
      return (new b).copy(this);
    };
    b.prototype.extend = function(b) {
      var c = b.lowerBound.x;
      this.lowerBound.x > c && (this.lowerBound.x = c);
      c = b.upperBound.x;
      this.upperBound.x < c && (this.upperBound.x = c);
      c = b.lowerBound.y;
      this.lowerBound.y > c && (this.lowerBound.y = c);
      c = b.upperBound.y;
      this.upperBound.y < c && (this.upperBound.y = c);
      c = b.lowerBound.z;
      this.lowerBound.z > c && (this.lowerBound.z = c);
      c = b.upperBound.z;
      this.upperBound.z < c && (this.upperBound.z = c);
    };
    b.prototype.overlaps = function(b) {
      var c = this.lowerBound, e = this.upperBound, g = b.lowerBound;
      b = b.upperBound;
      return (g.x <= e.x && e.x <= b.x || c.x <= b.x && b.x <= e.x) && (g.y <= e.y && e.y <= b.y || c.y <= b.y && b.y <= e.y) && (g.z <= e.z && e.z <= b.z || c.z <= b.z && b.z <= e.z);
    };
    b.prototype.contains = function(b) {
      var c = this.lowerBound, e = this.upperBound, g = b.lowerBound;
      b = b.upperBound;
      return c.x <= g.x && e.x >= b.x && c.y <= g.y && e.y >= b.y && c.z <= g.z && e.z >= b.z;
    };
    b.prototype.getCorners = function(b, c, g, k, h, p, l, v) {
      var e = this.lowerBound, f = this.upperBound;
      b.copy(e);
      c.set(f.x, e.y, e.z);
      g.set(f.x, f.y, e.z);
      k.set(e.x, f.y, f.z);
      h.set(f.x, e.y, e.z);
      p.set(e.x, f.y, e.z);
      l.set(e.x, e.y, f.z);
      v.copy(f);
    };
    var c = [new g, new g, new g, new g, new g, new g, new g, new g];
    b.prototype.toLocalFrame = function(b, f) {
      this.getCorners(c[0], c[1], c[2], c[3], c[4], c[5], c[6], c[7]);
      for (var e = 0;8 !== e;e++) {
        var g = c[e];
        b.pointToLocal(g, g);
      }
      return f.setFromPoints(c);
    };
    b.prototype.toWorldFrame = function(b, f) {
      this.getCorners(c[0], c[1], c[2], c[3], c[4], c[5], c[6], c[7]);
      for (var e = 0;8 !== e;e++) {
        var g = c[e];
        b.pointToWorld(g, g);
      }
      return f.setFromPoints(c);
    };
  }, {"../math/Vec3":30, "../utils/Utils":53}], 4:[function(h, l) {
    function b() {
      this.matrix = [];
    }
    l.exports = b;
    b.prototype.get = function(b, k) {
      if (b = b.index, k = k.index, k > b) {
        b = k = b;
      }
      return this.matrix[(b * (b + 1) >> 1) + k - 1];
    };
    b.prototype.set = function(b, k, c) {
      if (b = b.index, k = k.index, k > b) {
        b = k = b;
      }
      this.matrix[(b * (b + 1) >> 1) + k - 1] = c ? 1 : 0;
    };
    b.prototype.reset = function() {
      for (var b = 0, k = this.matrix.length;b !== k;b++) {
        this.matrix[b] = 0;
      }
    };
    b.prototype.setNumObjects = function(b) {
      this.matrix.length = b * (b - 1) >> 1;
    };
  }, {}], 5:[function(h, l) {
    function b() {
      this.world = null;
      this.useBoundingBoxes = !1;
      this.dirty = !0;
    }
    var g = h("../objects/Body"), k = h("../math/Vec3"), c = h("../math/Quaternion");
    h("../shapes/Shape");
    h("../shapes/Plane");
    l.exports = b;
    b.prototype.collisionPairs = function() {
      throw Error("collisionPairs not implemented for this BroadPhase class!");
    };
    var e = g.STATIC | g.KINEMATIC;
    b.prototype.needBroadphaseCollision = function(b, c) {
      return 0 === (b.collisionFilterGroup & c.collisionFilterMask) || 0 === (c.collisionFilterGroup & b.collisionFilterMask) ? !1 : 0 === (b.type & e) && b.sleepState !== g.SLEEPING || 0 === (c.type & e) && c.sleepState !== g.SLEEPING ? !0 : !1;
    };
    b.prototype.intersectionTest = function(b, c, e, f) {
      this.useBoundingBoxes ? this.doBoundingBoxBroadphase(b, c, e, f) : this.doBoundingSphereBroadphase(b, c, e, f);
    };
    var f = new k;
    new k;
    new c;
    new k;
    b.prototype.doBoundingSphereBroadphase = function(b, c, e, g) {
      c.position.vsub(b.position, f);
      var m = Math.pow(b.boundingRadius + c.boundingRadius, 2), k = f.norm2();
      m > k && (e.push(b), g.push(c));
    };
    b.prototype.doBoundingBoxBroadphase = function(b, c, e, f) {
      b.aabbNeedsUpdate && b.computeAABB();
      c.aabbNeedsUpdate && c.computeAABB();
      b.aabb.overlaps(c.aabb) && (e.push(b), f.push(c));
    };
    var q = {keys:[]}, r = [], w = [];
    b.prototype.makePairsUnique = function(b, c) {
      for (var e = b.length, f = 0;f !== e;f++) {
        r[f] = b[f], w[f] = c[f];
      }
      b.length = 0;
      for (f = c.length = 0;f !== e;f++) {
        var m = r[f].id, g = w[f].id, m = g > m ? m + "," + g : g + "," + m;
        q[m] = f;
        q.keys.push(m);
      }
      for (f = 0;f !== q.keys.length;f++) {
        m = q.keys.pop(), e = q[m], b.push(r[e]), c.push(w[e]), delete q[m];
      }
    };
    b.prototype.setWorld = function() {
    };
    var p = new k;
    b.boundingSphereCheck = function(b, c) {
      return b.position.vsub(c.position, p), Math.pow(b.shape.boundingSphereRadius + c.shape.boundingSphereRadius, 2) > p.norm2();
    };
    b.prototype.aabbQuery = function() {
      return console.warn(".aabbQuery is not implemented in this Broadphase subclass."), [];
    };
  }, {"../math/Quaternion":28, "../math/Vec3":30, "../objects/Body":31, "../shapes/Plane":42, "../shapes/Shape":43}], 6:[function(h, l) {
    function b(b, c, e, h, p) {
      g.apply(this);
      this.nx = e || 10;
      this.ny = h || 10;
      this.nz = p || 10;
      this.aabbMin = b || new k(100, 100, 100);
      this.aabbMax = c || new k(-100, -100, -100);
      b = this.nx * this.ny * this.nz;
      if (0 >= b) {
        throw "GridBroadphase: Each dimension's n must be >0";
      }
      this.bins = [];
      this.binLengths = [];
      this.bins.length = b;
      this.binLengths.length = b;
      for (c = 0;b > c;c++) {
        this.bins[c] = [], this.binLengths[c] = 0;
      }
    }
    l.exports = b;
    var g = h("./Broadphase"), k = h("../math/Vec3"), c = h("../shapes/Shape");
    b.prototype = new g;
    b.prototype.constructor = b;
    var e = new k;
    new k;
    b.prototype.collisionPairs = function(b, g, k) {
      function f(b, c, e, f, g, k, q) {
        b = (b - B) * M | 0;
        c = (c - K) * J | 0;
        e = (e - H) * P | 0;
        f = R((f - B) * M);
        g = R((g - K) * J);
        k = R((k - H) * P);
        0 > b ? b = 0 : b >= l && (b = l - 1);
        0 > c ? c = 0 : c >= x && (c = x - 1);
        0 > e ? e = 0 : e >= m && (e = m - 1);
        0 > f ? f = 0 : f >= l && (f = l - 1);
        0 > g ? g = 0 : g >= x && (g = x - 1);
        0 > k ? k = 0 : k >= m && (k = m - 1);
        b *= t;
        c *= C;
        e *= A;
        f *= t;
        g *= C;
        for (k *= A;f >= b;b += t) {
          for (var p = c;g >= p;p += C) {
            for (var h = e;k >= h;h += A) {
              var r = b + p + h;
              ca[r][ia[r]++] = q;
            }
          }
        }
      }
      var q = b.numObjects();
      b = b.bodies;
      for (var h = this.aabbMax, r = this.aabbMin, l = this.nx, x = this.ny, m = this.nz, t = x * m, C = m, A = 1, D = h.x, F = h.y, G = h.z, B = r.x, K = r.y, H = r.z, M = l / (D - B), J = x / (F - K), P = m / (G - H), D = (D - B) / l, O = (F - K) / x, G = (G - H) / m, N = .5 * Math.sqrt(D * D + O * O + G * G), F = c.types, ba = F.SPHERE, da = F.PLANE, ca = (F.BOX, F.COMPOUND, F.CONVEXPOLYHEDRON, this.bins), ia = this.binLengths, F = this.bins.length, r = 0;r !== F;r++) {
        ia[r] = 0;
      }
      for (var R = Math.ceil, r = Math.min, h = Math.max, r = 0;r !== q;r++) {
        var h = b[r], S = h.shape;
        switch(S.type) {
          case ba:
            var I = h.position.x, V = h.position.y, ka = h.position.z, S = S.radius;
            f(I - S, V - S, ka - S, I + S, V + S, ka + S, h);
            break;
          case da:
            S.worldNormalNeedsUpdate && S.computeWorldNormal(h.quaternion);
            var ka = S.worldNormal, S = K + .5 * O - h.position.y, ma = H + .5 * G - h.position.z, Q = e;
            Q.set(B + .5 * D - h.position.x, S, ma);
            for (var Z = I = 0;I !== l;I++, Z += t, Q.y = S, Q.x += D) {
              for (var ra = V = 0;V !== x;V++, ra += C, Q.z = ma, Q.y += O) {
                for (var pa = 0, fa = 0;pa !== m;pa++, fa += A, Q.z += G) {
                  if (Q.dot(ka) < N) {
                    var X = Z + ra + fa;
                    ca[X][ia[X]++] = h;
                  }
                }
              }
            }
            break;
          default:
            h.aabbNeedsUpdate && h.computeAABB(), f(h.aabb.lowerBound.x, h.aabb.lowerBound.y, h.aabb.lowerBound.z, h.aabb.upperBound.x, h.aabb.upperBound.y, h.aabb.upperBound.z, h);
        }
      }
      for (r = 0;r !== F;r++) {
        if (q = ia[r], 1 < q) {
          for (b = ca[r], I = 0;I !== q;I++) {
            for (h = b[I], V = 0;V !== I;V++) {
              D = b[V], this.needBroadphaseCollision(h, D) && this.intersectionTest(h, D, g, k);
            }
          }
        }
      }
      this.makePairsUnique(g, k);
    };
  }, {"../math/Vec3":30, "../shapes/Shape":43, "./Broadphase":5}], 7:[function(h, l) {
    function b() {
      g.apply(this);
    }
    l.exports = b;
    var g = h("./Broadphase");
    h = h("./AABB");
    b.prototype = new g;
    b.prototype.constructor = b;
    b.prototype.collisionPairs = function(b, c, e) {
      var f, g, k, h = b.bodies, p = h.length;
      for (b = 0;b !== p;b++) {
        for (f = 0;f !== b;f++) {
          g = h[b], k = h[f], this.needBroadphaseCollision(g, k) && this.intersectionTest(g, k, c, e);
        }
      }
    };
    new h;
    b.prototype.aabbQuery = function(b, c, e) {
      e = e || [];
      for (var f = 0;f < b.bodies.length;f++) {
        var g = b.bodies[f];
        g.aabbNeedsUpdate && g.computeAABB();
        g.aabb.overlaps(c) && e.push(g);
      }
      return e;
    };
  }, {"./AABB":3, "./Broadphase":5}], 8:[function(h, l) {
    function b() {
      this.matrix = {};
    }
    l.exports = b;
    b.prototype.get = function(b, k) {
      if (b = b.id, k = k.id, k > b) {
        b = k = b;
      }
      return b + "-" + k in this.matrix;
    };
    b.prototype.set = function(b, k, c) {
      if (b = b.id, k = k.id, k > b) {
        b = k = b;
      }
      c ? this.matrix[b + "-" + k] = !0 : delete this.matrix[b + "-" + k];
    };
    b.prototype.reset = function() {
      this.matrix = {};
    };
    b.prototype.setNumObjects = function() {
    };
  }, {}], 9:[function(h, l) {
    function b(c, f) {
      this.from = c ? c.clone() : new k;
      this.to = f ? f.clone() : new k;
      this._direction = new k;
      this.precision = 1E-4;
      this.checkCollisionResponse = !0;
      this.skipBackfaces = !1;
      this.collisionFilterGroup = this.collisionFilterMask = -1;
      this.mode = b.ANY;
      this.result = new e;
      this.hasHit = !1;
      this.callback = function() {
      };
    }
    function g(b, c, e, f) {
      f.vsub(c, ba);
      e.vsub(c, w);
      b.vsub(c, p);
      var m, g;
      b = ba.dot(ba);
      c = ba.dot(w);
      e = ba.dot(p);
      f = w.dot(w);
      var k = w.dot(p);
      return 0 <= (m = f * e - c * k) && 0 <= (g = b * k - c * e) && b * f - c * c > m + g;
    }
    l.exports = b;
    var k = h("../math/Vec3");
    l = h("../math/Quaternion");
    var c = h("../math/Transform"), e = (h("../shapes/ConvexPolyhedron"), h("../shapes/Box"), h("../collision/RaycastResult")), f = h("../shapes/Shape");
    h = h("../collision/AABB");
    b.prototype.constructor = b;
    b.CLOSEST = 1;
    b.ANY = 2;
    b.ALL = 4;
    var q = new h, r = [];
    b.prototype.intersectWorld = function(c, f) {
      return this.mode = f.mode || b.ANY, this.result = f.result || new e, this.skipBackfaces = !!f.skipBackfaces, this.collisionFilterMask = "undefined" != typeof f.collisionFilterMask ? f.collisionFilterMask : -1, this.collisionFilterGroup = "undefined" != typeof f.collisionFilterGroup ? f.collisionFilterGroup : -1, f.from && this.from.copy(f.from), f.to && this.to.copy(f.to), this.callback = f.callback || function() {
      }, this.hasHit = !1, this.result.reset(), this._updateDirection(), this.getAABB(q), r.length = 0, c.broadphase.aabbQuery(c, q, r), this.intersectBodies(r), this.hasHit;
    };
    var w = new k, p = new k;
    b.pointInTriangle = g;
    var u = new k, v = new l;
    b.prototype.intersectBody = function(b, c) {
      c && (this.result = c, this._updateDirection());
      c = this.checkCollisionResponse;
      if ((!c || b.collisionResponse) && 0 !== (this.collisionFilterGroup & b.collisionFilterMask) && 0 !== (b.collisionFilterGroup & this.collisionFilterMask)) {
        for (var e = 0, f = b.shapes.length;f > e;e++) {
          var m = b.shapes[e];
          if ((!c || m.collisionResponse) && (b.quaternion.mult(b.shapeOrientations[e], v), b.quaternion.vmult(b.shapeOffsets[e], u), u.vadd(b.position, u), this.intersectShape(m, v, u, b), this.result._shouldStop)) {
            break;
          }
        }
      }
    };
    b.prototype.intersectBodies = function(b, c) {
      c && (this.result = c, this._updateDirection());
      c = 0;
      for (var e = b.length;!this.result._shouldStop && e > c;c++) {
        this.intersectBody(b[c]);
      }
    };
    b.prototype._updateDirection = function() {
      this.to.vsub(this.from, this._direction);
      this._direction.normalize();
    };
    b.prototype.intersectShape = function(b, c, e, f) {
      var m = this.from, g = this._direction;
      e.vsub(m, ba);
      var k = ba.dot(g);
      g.mult(k, da);
      da.vadd(m, da);
      e.distanceTo(da) > b.boundingSphereRadius || (m = this[b.type]) && m.call(this, b, c, e, f);
    };
    var y = (new k, new k, new k), x = new k, m = new k, t = new k;
    new k;
    new e;
    b.prototype.intersectBox = function(b, c, e, f) {
      return this.intersectConvex(b.convexPolyhedronRepresentation, c, e, f);
    };
    b.prototype[f.types.BOX] = b.prototype.intersectBox;
    b.prototype.intersectPlane = function(b, c, e, f) {
      var m = this.from, g = this.to, q = this._direction, p = new k(0, 0, 1);
      c.vmult(p, p);
      var h = new k;
      m.vsub(e, h);
      c = h.dot(p);
      g.vsub(e, h);
      h = h.dot(p);
      if (!(0 < c * h || m.distanceTo(g) < c || (h = p.dot(q), Math.abs(h) < this.precision))) {
        var r = new k, g = new k;
        c = new k;
        m.vsub(e, r);
        e = -p.dot(r) / h;
        q.scale(e, g);
        m.vadd(g, c);
        this.reportIntersection(p, c, b, f, -1);
      }
    };
    b.prototype[f.types.PLANE] = b.prototype.intersectPlane;
    b.prototype.getAABB = function(b) {
      var c = this.to, e = this.from;
      b.lowerBound.x = Math.min(c.x, e.x);
      b.lowerBound.y = Math.min(c.y, e.y);
      b.lowerBound.z = Math.min(c.z, e.z);
      b.upperBound.x = Math.max(c.x, e.x);
      b.upperBound.y = Math.max(c.y, e.y);
      b.upperBound.z = Math.max(c.z, e.z);
    };
    var C = {faceList:[0]};
    b.prototype.intersectHeightfield = function(e, f, m, g) {
      var q = (e.data, e.elementSize, new k), p = new b(this.from, this.to);
      c.pointToLocalFrame(m, f, p.from, p.from);
      c.pointToLocalFrame(m, f, p.to, p.to);
      var h = [], r = null, t = null, l = null, w = null, u = e.getIndexOfPosition(p.from.x, p.from.y, h, !1);
      if (u && (r = h[0], t = h[1], l = h[0], w = h[1]), u = e.getIndexOfPosition(p.to.x, p.to.y, h, !1), u && ((null === r || h[0] < r) && (r = h[0]), (null === l || h[0] > l) && (l = h[0]), (null === t || h[1] < t) && (t = h[1]), (null === w || h[1] > w) && (w = h[1])), null !== r) {
        for (p = [], e.getRectMinMax(r, t, l, w, p), r = (p[0], p[1], r);l >= r;r++) {
          for (p = t;w >= p;p++) {
            if (this.result._shouldStop || (e.getConvexTrianglePillar(r, p, !1), c.pointToWorldFrame(m, f, e.pillarOffset, q), this.intersectConvex(e.pillarConvex, f, q, g, C), this.result._shouldStop)) {
              return;
            }
            e.getConvexTrianglePillar(r, p, !0);
            c.pointToWorldFrame(m, f, e.pillarOffset, q);
            this.intersectConvex(e.pillarConvex, f, q, g, C);
          }
        }
      }
    };
    b.prototype[f.types.HEIGHTFIELD] = b.prototype.intersectHeightfield;
    var A = new k, D = new k;
    b.prototype.intersectSphere = function(b, c, e, f) {
      c = this.from;
      var m = this.to, g = Math.pow(m.x - c.x, 2) + Math.pow(m.y - c.y, 2) + Math.pow(m.z - c.z, 2), k = 2 * ((m.x - c.x) * (c.x - e.x) + (m.y - c.y) * (c.y - e.y) + (m.z - c.z) * (c.z - e.z)), q = Math.pow(k, 2) - 4 * g * (Math.pow(c.x - e.x, 2) + Math.pow(c.y - e.y, 2) + Math.pow(c.z - e.z, 2) - Math.pow(b.radius, 2));
      if (!(0 > q)) {
        if (0 === q) {
          c.lerp(m, q, A), A.vsub(e, D), D.normalize(), this.reportIntersection(D, A, b, f, -1);
        } else {
          var p = (-k - Math.sqrt(q)) / (2 * g), g = (-k + Math.sqrt(q)) / (2 * g);
          (0 <= p && 1 >= p && (c.lerp(m, p, A), A.vsub(e, D), D.normalize(), this.reportIntersection(D, A, b, f, -1)), this.result._shouldStop) || 0 <= g && 1 >= g && (c.lerp(m, g, A), A.vsub(e, D), D.normalize(), this.reportIntersection(D, A, b, f, -1));
        }
      }
    };
    b.prototype[f.types.SPHERE] = b.prototype.intersectSphere;
    var F = new k, G = (new k, new k, new k);
    b.prototype.intersectConvex = function(b, c, e, f, k) {
      k = k && k.faceList || null;
      for (var q = b.faces, p = b.vertices, h = b.faceNormals, r = this._direction, l = this.from, w = l.distanceTo(this.to), u = k ? k.length : q.length, v = this.result, C = 0;!v._shouldStop && u > C;C++) {
        var A = k ? k[C] : C, B = q[A], D = h[A], I = c, K = e;
        G.copy(p[B[0]]);
        I.vmult(G, G);
        G.vadd(K, G);
        G.vsub(l, G);
        I.vmult(D, F);
        D = r.dot(F);
        if (!(Math.abs(D) < this.precision || (D = F.dot(G) / D, 0 > D))) {
          for (r.mult(D, y), y.vadd(l, y), x.copy(p[B[0]]), I.vmult(x, x), K.vadd(x, x), D = 1;!v._shouldStop && D < B.length - 1;D++) {
            m.copy(p[B[D]]);
            t.copy(p[B[D + 1]]);
            I.vmult(m, m);
            I.vmult(t, t);
            K.vadd(m, m);
            K.vadd(t, t);
            var H = y.distanceTo(l);
            !g(y, x, m, t) && !g(y, m, x, t) || H > w || this.reportIntersection(F, y, b, f, A);
          }
        }
      }
    };
    b.prototype[f.types.CONVEXPOLYHEDRON] = b.prototype.intersectConvex;
    var B = new k, K = new k, H = new k, M = new k, J = new k, P = new k, O = (new h, []), N = new c;
    b.prototype.intersectTrimesh = function(b, e, f, k, q) {
      q = (q && q.faceList || null, b.indices);
      var p = (b.vertices, b.faceNormals, this.from), h = this.to, r = this._direction;
      N.position.copy(f);
      N.quaternion.copy(e);
      c.vectorToLocalFrame(f, e, r, K);
      c.pointToLocalFrame(f, e, p, H);
      c.pointToLocalFrame(f, e, h, M);
      p = H.distanceSquared(M);
      b.tree.rayQuery(this, N, O);
      h = 0;
      for (r = O.length;!this.result._shouldStop && h !== r;h++) {
        var l = O[h];
        b.getNormal(l, B);
        b.getVertex(q[3 * l], x);
        x.vsub(H, G);
        var w = K.dot(B), w = B.dot(G) / w;
        0 > w || (K.scale(w, y), y.vadd(H, y), b.getVertex(q[3 * l + 1], m), b.getVertex(q[3 * l + 2], t), w = y.distanceSquared(H), !g(y, m, x, t) && !g(y, x, m, t) || w > p || (c.vectorToWorldFrame(e, B, J), c.pointToWorldFrame(f, e, y, P), this.reportIntersection(J, P, b, k, l)));
      }
      O.length = 0;
    };
    b.prototype[f.types.TRIMESH] = b.prototype.intersectTrimesh;
    b.prototype.reportIntersection = function(c, e, f, m, g) {
      var k = this.from, q = this.to, p = k.distanceTo(e), h = this.result;
      if (!(this.skipBackfaces && 0 < c.dot(this._direction))) {
        switch(h.hitFaceIndex = "undefined" != typeof g ? g : -1, this.mode) {
          case b.ALL:
            this.hasHit = !0;
            h.set(k, q, c, e, f, m, p);
            h.hasHit = !0;
            this.callback(h);
            break;
          case b.CLOSEST:
            (p < h.distance || !h.hasHit) && (this.hasHit = !0, h.hasHit = !0, h.set(k, q, c, e, f, m, p));
            break;
          case b.ANY:
            this.hasHit = !0, h.hasHit = !0, h.set(k, q, c, e, f, m, p), h._shouldStop = !0;
        }
      }
    };
    var ba = new k, da = new k;
  }, {"../collision/AABB":3, "../collision/RaycastResult":10, "../math/Quaternion":28, "../math/Transform":29, "../math/Vec3":30, "../shapes/Box":37, "../shapes/ConvexPolyhedron":38, "../shapes/Shape":43}], 10:[function(h, l) {
    function b() {
      this.rayFromWorld = new g;
      this.rayToWorld = new g;
      this.hitNormalWorld = new g;
      this.hitPointWorld = new g;
      this.hasHit = !1;
      this.body = this.shape = null;
      this.distance = this.hitFaceIndex = -1;
      this._shouldStop = !1;
    }
    var g = h("../math/Vec3");
    l.exports = b;
    b.prototype.reset = function() {
      this.rayFromWorld.setZero();
      this.rayToWorld.setZero();
      this.hitNormalWorld.setZero();
      this.hitPointWorld.setZero();
      this.hasHit = !1;
      this.body = this.shape = null;
      this.distance = this.hitFaceIndex = -1;
      this._shouldStop = !1;
    };
    b.prototype.abort = function() {
      this._shouldStop = !0;
    };
    b.prototype.set = function(b, c, e, f, g, h, l) {
      this.rayFromWorld.copy(b);
      this.rayToWorld.copy(c);
      this.hitNormalWorld.copy(e);
      this.hitPointWorld.copy(f);
      this.shape = g;
      this.body = h;
      this.distance = l;
    };
  }, {"../math/Vec3":30}], 11:[function(h, l) {
    function b(b) {
      g.apply(this);
      this.axisList = [];
      this.world = null;
      this.axisIndex = 0;
      var c = this.axisList;
      this._addBodyHandler = function(b) {
        c.push(b.body);
      };
      this._removeBodyHandler = function(b) {
        b = c.indexOf(b.body);
        -1 !== b && c.splice(b, 1);
      };
      b && this.setWorld(b);
    }
    var g = (h("../shapes/Shape"), h("../collision/Broadphase"));
    l.exports = b;
    b.prototype = new g;
    b.prototype.setWorld = function(b) {
      for (var c = this.axisList.length = 0;c < b.bodies.length;c++) {
        this.axisList.push(b.bodies[c]);
      }
      b.removeEventListener("addBody", this._addBodyHandler);
      b.removeEventListener("removeBody", this._removeBodyHandler);
      b.addEventListener("addBody", this._addBodyHandler);
      b.addEventListener("removeBody", this._removeBodyHandler);
      this.world = b;
      this.dirty = !0;
    };
    b.insertionSortX = function(b) {
      for (var c = 1, e = b.length;e > c;c++) {
        for (var f = b[c], g = c - 1;0 <= g && !(b[g].aabb.lowerBound.x <= f.aabb.lowerBound.x);g--) {
          b[g + 1] = b[g];
        }
        b[g + 1] = f;
      }
      return b;
    };
    b.insertionSortY = function(b) {
      for (var c = 1, e = b.length;e > c;c++) {
        for (var f = b[c], g = c - 1;0 <= g && !(b[g].aabb.lowerBound.y <= f.aabb.lowerBound.y);g--) {
          b[g + 1] = b[g];
        }
        b[g + 1] = f;
      }
      return b;
    };
    b.insertionSortZ = function(b) {
      for (var c = 1, e = b.length;e > c;c++) {
        for (var f = b[c], g = c - 1;0 <= g && !(b[g].aabb.lowerBound.z <= f.aabb.lowerBound.z);g--) {
          b[g + 1] = b[g];
        }
        b[g + 1] = f;
      }
      return b;
    };
    b.prototype.collisionPairs = function(g, c, e) {
      var f, k = this.axisList, h = k.length, l = this.axisIndex;
      this.dirty && (this.sortList(), this.dirty = !1);
      for (g = 0;g !== h;g++) {
        var p = k[g];
        for (f = g + 1;h > f;f++) {
          var u = k[f];
          if (this.needBroadphaseCollision(p, u)) {
            if (!b.checkBounds(p, u, l)) {
              break;
            }
            this.intersectionTest(p, u, c, e);
          }
        }
      }
    };
    b.prototype.sortList = function() {
      for (var g = this.axisList, c = this.axisIndex, e = g.length, f = 0;f !== e;f++) {
        var q = g[f];
        q.aabbNeedsUpdate && q.computeAABB();
      }
      0 === c ? b.insertionSortX(g) : 1 === c ? b.insertionSortY(g) : 2 === c && b.insertionSortZ(g);
    };
    b.checkBounds = function(b, c, e) {
      var f, g;
      0 === e ? (f = b.position.x, g = c.position.x) : 1 === e ? (f = b.position.y, g = c.position.y) : 2 === e && (f = b.position.z, g = c.position.z);
      return f + b.boundingRadius > g - c.boundingRadius;
    };
    b.prototype.autoDetectAxis = function() {
      for (var b = 0, c = 0, e = 0, f = 0, g = 0, h = 0, l = this.axisList, p = l.length, u = 1 / p, v = 0;v !== p;v++) {
        var y = l[v], x = y.position.x, b = b + x, c = c + x * x, x = y.position.y, e = e + x, f = f + x * x, y = y.position.z, g = g + y, h = h + y * y;
      }
      b = c - b * b * u;
      e = f - e * e * u;
      g = h - g * g * u;
      this.axisIndex = b > e ? b > g ? 0 : 2 : e > g ? 1 : 2;
    };
    b.prototype.aabbQuery = function(b, c, e) {
      e = e || [];
      this.dirty && (this.sortList(), this.dirty = !1);
      b = this.axisIndex;
      var f = "x";
      1 === b && (f = "y");
      2 === b && (f = "z");
      b = this.axisList;
      for (f = (c.lowerBound[f], c.upperBound[f], 0);f < b.length;f++) {
        var g = b[f];
        g.aabbNeedsUpdate && g.computeAABB();
        g.aabb.overlaps(c) && e.push(g);
      }
      return e;
    };
  }, {"../collision/Broadphase":5, "../shapes/Shape":43}], 12:[function(h, l) {
    function b(b, q, h) {
      h = h || {};
      var f = "undefined" != typeof h.maxForce ? h.maxForce : 1E6, p = h.pivotA ? h.pivotA.clone() : new e, r = h.pivotB ? h.pivotB.clone() : new e;
      this.axisA = h.axisA ? h.axisA.clone() : new e;
      this.axisB = h.axisB ? h.axisB.clone() : new e;
      g.call(this, b, p, q, r, f);
      this.collideConnected = !!h.collideConnected;
      this.angle = "undefined" != typeof h.angle ? h.angle : 0;
      p = this.coneEquation = new k(b, q, h);
      b = this.twistEquation = new c(b, q, h);
      this.twistAngle = "undefined" != typeof h.twistAngle ? h.twistAngle : 0;
      p.maxForce = 0;
      p.minForce = -f;
      b.maxForce = 0;
      b.minForce = -f;
      this.equations.push(p, b);
    }
    l.exports = b;
    var g = (h("./Constraint"), h("./PointToPointConstraint")), k = h("../equations/ConeEquation"), c = h("../equations/RotationalEquation"), e = (h("../equations/ContactEquation"), h("../math/Vec3"));
    b.prototype = new g;
    b.constructor = b;
    new e;
    new e;
    b.prototype.update = function() {
      var b = this.bodyA, c = this.bodyB, e = this.coneEquation, k = this.twistEquation;
      g.prototype.update.call(this);
      b.vectorToWorldFrame(this.axisA, e.axisA);
      c.vectorToWorldFrame(this.axisB, e.axisB);
      this.axisA.tangents(k.axisA, k.axisA);
      b.vectorToWorldFrame(k.axisA, k.axisA);
      this.axisB.tangents(k.axisB, k.axisB);
      c.vectorToWorldFrame(k.axisB, k.axisB);
      e.angle = this.angle;
      k.maxAngle = this.twistAngle;
    };
  }, {"../equations/ConeEquation":18, "../equations/ContactEquation":19, "../equations/RotationalEquation":22, "../math/Vec3":30, "./Constraint":13, "./PointToPointConstraint":17}], 13:[function(h, l) {
    function b(k, c, e) {
      e = g.defaults(e, {collideConnected:!0, wakeUpBodies:!0});
      this.equations = [];
      this.bodyA = k;
      this.bodyB = c;
      this.id = b.idCounter++;
      this.collideConnected = e.collideConnected;
      e.wakeUpBodies && (k && k.wakeUp(), c && c.wakeUp());
    }
    l.exports = b;
    var g = h("../utils/Utils");
    b.prototype.update = function() {
      throw Error("method update() not implmemented in this Constraint subclass!");
    };
    b.prototype.enable = function() {
      for (var b = this.equations, c = 0;c < b.length;c++) {
        b[c].enabled = !0;
      }
    };
    b.prototype.disable = function() {
      for (var b = this.equations, c = 0;c < b.length;c++) {
        b[c].enabled = !1;
      }
    };
    b.idCounter = 0;
  }, {"../utils/Utils":53}], 14:[function(h, l) {
    function b(b, e, f, q) {
      g.call(this, b, e);
      "undefined" == typeof f && (f = b.position.distanceTo(e.position));
      "undefined" == typeof q && (q = 1E6);
      this.distance = f;
      b = this.distanceEquation = new k(b, e);
      this.equations.push(b);
      b.minForce = -q;
      b.maxForce = q;
    }
    l.exports = b;
    var g = h("./Constraint"), k = h("../equations/ContactEquation");
    b.prototype = new g;
    b.prototype.update = function() {
      var b = this.distanceEquation, e = .5 * this.distance, f = b.ni;
      this.bodyB.position.vsub(this.bodyA.position, f);
      f.normalize();
      f.mult(e, b.ri);
      f.mult(-e, b.rj);
    };
  }, {"../equations/ContactEquation":19, "./Constraint":13}], 15:[function(h, l) {
    function b(b, f, q) {
      q = q || {};
      var h = "undefined" != typeof q.maxForce ? q.maxForce : 1E6, p = q.pivotA ? q.pivotA.clone() : new e, r = q.pivotB ? q.pivotB.clone() : new e;
      g.call(this, b, p, f, r, h);
      (this.axisA = q.axisA ? q.axisA.clone() : new e(1, 0, 0)).normalize();
      (this.axisB = q.axisB ? q.axisB.clone() : new e(1, 0, 0)).normalize();
      p = this.rotationalEquation1 = new k(b, f, q);
      q = this.rotationalEquation2 = new k(b, f, q);
      b = this.motorEquation = new c(b, f, h);
      b.enabled = !1;
      this.equations.push(p, q, b);
    }
    l.exports = b;
    var g = (h("./Constraint"), h("./PointToPointConstraint")), k = h("../equations/RotationalEquation"), c = h("../equations/RotationalMotorEquation"), e = (h("../equations/ContactEquation"), h("../math/Vec3"));
    b.prototype = new g;
    b.constructor = b;
    b.prototype.enableMotor = function() {
      this.motorEquation.enabled = !0;
    };
    b.prototype.disableMotor = function() {
      this.motorEquation.enabled = !1;
    };
    b.prototype.setMotorSpeed = function(b) {
      this.motorEquation.targetVelocity = b;
    };
    b.prototype.setMotorMaxForce = function(b) {
      this.motorEquation.maxForce = b;
      this.motorEquation.minForce = -b;
    };
    var f = new e, q = new e;
    b.prototype.update = function() {
      var b = this.bodyA, c = this.bodyB, e = this.motorEquation, k = this.rotationalEquation1, h = this.rotationalEquation2, l = this.axisA, x = this.axisB;
      g.prototype.update.call(this);
      b.quaternion.vmult(l, f);
      c.quaternion.vmult(x, q);
      f.tangents(k.axisA, h.axisA);
      k.axisB.copy(q);
      h.axisB.copy(q);
      this.motorEquation.enabled && (b.quaternion.vmult(this.axisA, e.axisA), c.quaternion.vmult(this.axisB, e.axisB));
    };
  }, {"../equations/ContactEquation":19, "../equations/RotationalEquation":22, "../equations/RotationalMotorEquation":23, "../math/Vec3":30, "./Constraint":13, "./PointToPointConstraint":17}], 16:[function(h, l) {
    function b(b, f, q) {
      q = q || {};
      var e = "undefined" != typeof q.maxForce ? q.maxForce : 1E6, h = new c, p = new c, l = new c;
      b.position.vadd(f.position, l);
      l.scale(.5, l);
      f.pointToLocalFrame(l, p);
      b.pointToLocalFrame(l, h);
      g.call(this, b, h, f, p, e);
      e = this.rotationalEquation1 = new k(b, f, q);
      h = this.rotationalEquation2 = new k(b, f, q);
      b = this.rotationalEquation3 = new k(b, f, q);
      this.equations.push(e, h, b);
    }
    l.exports = b;
    var g = (h("./Constraint"), h("./PointToPointConstraint")), k = h("../equations/RotationalEquation"), c = (h("../equations/RotationalMotorEquation"), h("../equations/ContactEquation"), h("../math/Vec3"));
    b.prototype = new g;
    b.constructor = b;
    new c;
    new c;
    b.prototype.update = function() {
      var b = this.bodyA, f = this.bodyB, k = (this.motorEquation, this.rotationalEquation1), h = this.rotationalEquation2, l = this.rotationalEquation3;
      g.prototype.update.call(this);
      b.vectorToWorldFrame(c.UNIT_X, k.axisA);
      f.vectorToWorldFrame(c.UNIT_Y, k.axisB);
      b.vectorToWorldFrame(c.UNIT_Y, h.axisA);
      f.vectorToWorldFrame(c.UNIT_Z, h.axisB);
      b.vectorToWorldFrame(c.UNIT_Z, l.axisA);
      f.vectorToWorldFrame(c.UNIT_X, l.axisB);
    };
  }, {"../equations/ContactEquation":19, "../equations/RotationalEquation":22, "../equations/RotationalMotorEquation":23, "../math/Vec3":30, "./Constraint":13, "./PointToPointConstraint":17}], 17:[function(h, l) {
    function b(b, f, q, h, l) {
      g.call(this, b, q);
      l = "undefined" != typeof l ? l : 1E6;
      this.pivotA = f ? f.clone() : new c;
      this.pivotB = h ? h.clone() : new c;
      f = this.equationX = new k(b, q);
      h = this.equationY = new k(b, q);
      b = this.equationZ = new k(b, q);
      this.equations.push(f, h, b);
      f.minForce = h.minForce = b.minForce = -l;
      f.maxForce = h.maxForce = b.maxForce = l;
      f.ni.set(1, 0, 0);
      h.ni.set(0, 1, 0);
      b.ni.set(0, 0, 1);
    }
    l.exports = b;
    var g = h("./Constraint"), k = h("../equations/ContactEquation"), c = h("../math/Vec3");
    b.prototype = new g;
    b.prototype.update = function() {
      var b = this.bodyB, c = this.equationX, g = this.equationY, k = this.equationZ;
      this.bodyA.quaternion.vmult(this.pivotA, c.ri);
      b.quaternion.vmult(this.pivotB, c.rj);
      g.ri.copy(c.ri);
      g.rj.copy(c.rj);
      k.ri.copy(c.ri);
      k.rj.copy(c.rj);
    };
  }, {"../equations/ContactEquation":19, "../math/Vec3":30, "./Constraint":13}], 18:[function(h, l) {
    function b(b, c, e) {
      e = e || {};
      var f = "undefined" != typeof e.maxForce ? e.maxForce : 1E6;
      k.call(this, b, c, -f, f);
      this.axisA = e.axisA ? e.axisA.clone() : new g(1, 0, 0);
      this.axisB = e.axisB ? e.axisB.clone() : new g(0, 1, 0);
      this.angle = "undefined" != typeof e.angle ? e.angle : 0;
    }
    l.exports = b;
    var g = h("../math/Vec3"), k = (h("../math/Mat3"), h("./Equation"));
    b.prototype = new k;
    b.prototype.constructor = b;
    var c = new g, e = new g;
    b.prototype.computeB = function(b) {
      var f = this.a, g = this.b, k = this.axisA, h = this.axisB, l = this.jacobianElementA, v = this.jacobianElementB;
      k.cross(h, c);
      h.cross(k, e);
      l.rotational.copy(e);
      v.rotational.copy(c);
      k = Math.cos(this.angle) - k.dot(h);
      h = this.computeGW();
      l = this.computeGiMf();
      return -k * f - h * g - b * l;
    };
  }, {"../math/Mat3":27, "../math/Vec3":30, "./Equation":20}], 19:[function(h, l) {
    function b(b, c, e) {
      g.call(this, b, c, 0, "undefined" != typeof e ? e : 1E6);
      this.restitution = 0;
      this.ri = new k;
      this.rj = new k;
      this.ni = new k;
    }
    l.exports = b;
    var g = h("./Equation"), k = h("../math/Vec3");
    h("../math/Mat3");
    b.prototype = new g;
    b.prototype.constructor = b;
    var c = new k, e = new k, f = new k;
    b.prototype.computeB = function(b) {
      var g = this.a, k = this.b, m = this.bi, q = this.bj, h = this.ri, p = this.rj, r = m.velocity, l = m.angularVelocity, w = (m.force, m.torque, q.velocity), u = q.angularVelocity, v = (q.force, q.torque, f), H = this.jacobianElementA, M = this.jacobianElementB, J = this.ni;
      h.cross(J, c);
      p.cross(J, e);
      J.negate(H.spatial);
      c.negate(H.rotational);
      M.spatial.copy(J);
      M.rotational.copy(e);
      v.copy(q.position);
      v.vadd(p, v);
      v.vsub(m.position, v);
      v.vsub(h, v);
      m = J.dot(v);
      q = this.restitution + 1;
      r = q * w.dot(J) - q * r.dot(J) + u.dot(e) - l.dot(c);
      l = this.computeGiMf();
      return -m * g - r * k - b * l;
    };
    var q = new k, r = new k, w = new k, p = new k, u = new k;
    b.prototype.getImpactVelocityAlongNormal = function() {
      return this.bi.position.vadd(this.ri, w), this.bj.position.vadd(this.rj, p), this.bi.getVelocityAtWorldPoint(w, q), this.bj.getVelocityAtWorldPoint(p, r), q.vsub(r, u), this.ni.dot(u);
    };
  }, {"../math/Mat3":27, "../math/Vec3":30, "./Equation":20}], 20:[function(h, l) {
    function b(c, e, f, k) {
      this.id = b.id++;
      this.minForce = "undefined" == typeof f ? -1E6 : f;
      this.maxForce = "undefined" == typeof k ? 1E6 : k;
      this.bi = c;
      this.bj = e;
      this.eps = this.b = this.a = 0;
      this.jacobianElementA = new g;
      this.jacobianElementB = new g;
      this.enabled = !0;
      this.setSpookParams(1E7, 4, 1 / 60);
    }
    l.exports = b;
    var g = h("../math/JacobianElement");
    h = h("../math/Vec3");
    b.prototype.constructor = b;
    b.id = 0;
    b.prototype.setSpookParams = function(b, c, e) {
      this.a = 4 / (e * (1 + 4 * c));
      this.b = 4 * c / (1 + 4 * c);
      this.eps = 4 / (e * e * b * (1 + 4 * c));
    };
    b.prototype.computeB = function(b, c, e) {
      var f = this.computeGW(), g = this.computeGq(), m = this.computeGiMf();
      return -g * b - f * c - m * e;
    };
    b.prototype.computeGq = function() {
      var b = this.jacobianElementB, c = this.bj.position;
      return this.jacobianElementA.spatial.dot(this.bi.position) + b.spatial.dot(c);
    };
    var k = new h;
    b.prototype.computeGW = function() {
      var b = this.jacobianElementB, c = this.bi, e = this.bj, f = e.velocity, e = e.angularVelocity || k;
      return this.jacobianElementA.multiplyVectors(c.velocity, c.angularVelocity || k) + b.multiplyVectors(f, e);
    };
    b.prototype.computeGWlambda = function() {
      var b = this.jacobianElementB, c = this.bi, e = this.bj, f = e.vlambda, e = e.wlambda || k;
      return this.jacobianElementA.multiplyVectors(c.vlambda, c.wlambda || k) + b.multiplyVectors(f, e);
    };
    var c = new h, e = new h, f = new h, q = new h;
    b.prototype.computeGiMf = function() {
      var b = this.jacobianElementA, g = this.jacobianElementB, k = this.bi, h = this.bj, r = k.force, m = k.torque, t = h.force, l = h.torque, w = k.invMassSolve, D = h.invMassSolve;
      return k.invInertiaWorldSolve ? k.invInertiaWorldSolve.vmult(m, f) : f.set(0, 0, 0), h.invInertiaWorldSolve ? h.invInertiaWorldSolve.vmult(l, q) : q.set(0, 0, 0), r.mult(w, c), t.mult(D, e), b.multiplyVectors(c, f) + g.multiplyVectors(e, q);
    };
    var r = new h;
    b.prototype.computeGiMGt = function() {
      var b = this.jacobianElementA, c = this.jacobianElementB, e = this.bi, f = this.bj, g = e.invInertiaWorldSolve, m = f.invInertiaWorldSolve, e = e.invMassSolve + f.invMassSolve;
      return g && (g.vmult(b.rotational, r), e += r.dot(b.rotational)), m && (m.vmult(c.rotational, r), e += r.dot(c.rotational)), e;
    };
    var w = new h;
    new h;
    new h;
    new h;
    new h;
    new h;
    b.prototype.addToWlambda = function(b) {
      var c = this.jacobianElementA, e = this.jacobianElementB, f = this.bi, g = this.bj;
      c.spatial.mult(f.invMassSolve * b, w);
      f.vlambda.vadd(w, f.vlambda);
      e.spatial.mult(g.invMassSolve * b, w);
      g.vlambda.vadd(w, g.vlambda);
      f.invInertiaWorldSolve && (f.invInertiaWorldSolve.vmult(c.rotational, w), w.mult(b, w), f.wlambda.vadd(w, f.wlambda));
      g.invInertiaWorldSolve && (g.invInertiaWorldSolve.vmult(e.rotational, w), w.mult(b, w), g.wlambda.vadd(w, g.wlambda));
    };
    b.prototype.computeC = function() {
      return this.computeGiMGt() + this.eps;
    };
  }, {"../math/JacobianElement":26, "../math/Vec3":30}], 21:[function(h, l) {
    function b(b, c, e) {
      g.call(this, b, c, -e, e);
      this.ri = new k;
      this.rj = new k;
      this.t = new k;
    }
    l.exports = b;
    var g = h("./Equation"), k = h("../math/Vec3");
    h("../math/Mat3");
    b.prototype = new g;
    b.prototype.constructor = b;
    var c = new k, e = new k;
    b.prototype.computeB = function(b) {
      var f = (this.a, this.b), g = (this.bi, this.bj, this.ri), k = this.rj, h = this.t;
      g.cross(h, c);
      k.cross(h, e);
      g = this.jacobianElementA;
      k = this.jacobianElementB;
      h.negate(g.spatial);
      c.negate(g.rotational);
      k.spatial.copy(h);
      k.rotational.copy(e);
      h = this.computeGW();
      g = this.computeGiMf();
      return -h * f - b * g;
    };
  }, {"../math/Mat3":27, "../math/Vec3":30, "./Equation":20}], 22:[function(h, l) {
    function b(b, c, e) {
      e = e || {};
      var f = "undefined" != typeof e.maxForce ? e.maxForce : 1E6;
      k.call(this, b, c, -f, f);
      this.axisA = e.axisA ? e.axisA.clone() : new g(1, 0, 0);
      this.axisB = e.axisB ? e.axisB.clone() : new g(0, 1, 0);
      this.maxAngle = Math.PI / 2;
    }
    l.exports = b;
    var g = h("../math/Vec3"), k = (h("../math/Mat3"), h("./Equation"));
    b.prototype = new k;
    b.prototype.constructor = b;
    var c = new g, e = new g;
    b.prototype.computeB = function(b) {
      var f = this.a, g = this.b, k = this.axisA, h = this.axisB, l = this.jacobianElementA, v = this.jacobianElementB;
      k.cross(h, c);
      h.cross(k, e);
      l.rotational.copy(e);
      v.rotational.copy(c);
      k = Math.cos(this.maxAngle) - k.dot(h);
      h = this.computeGW();
      l = this.computeGiMf();
      return -k * f - h * g - b * l;
    };
  }, {"../math/Mat3":27, "../math/Vec3":30, "./Equation":20}], 23:[function(h, l) {
    function b(b, e, f) {
      f = "undefined" != typeof f ? f : 1E6;
      k.call(this, b, e, -f, f);
      this.axisA = new g;
      this.axisB = new g;
      this.targetVelocity = 0;
    }
    l.exports = b;
    var g = h("../math/Vec3"), k = (h("../math/Mat3"), h("./Equation"));
    b.prototype = new k;
    b.prototype.constructor = b;
    b.prototype.computeB = function(b) {
      var c = (this.a, this.b), f = (this.bi, this.bj, this.axisA), g = this.axisB, k = this.jacobianElementB;
      this.jacobianElementA.rotational.copy(f);
      g.negate(k.rotational);
      f = this.computeGW() - this.targetVelocity;
      g = this.computeGiMf();
      return -f * c - b * g;
    };
  }, {"../math/Mat3":27, "../math/Vec3":30, "./Equation":20}], 24:[function(h, l) {
    function b(k, c, e) {
      e = g.defaults(e, {friction:.3, restitution:.3, contactEquationStiffness:1E7, contactEquationRelaxation:3, frictionEquationStiffness:1E7, frictionEquationRelaxation:3});
      this.id = b.idCounter++;
      this.materials = [k, c];
      this.friction = e.friction;
      this.restitution = e.restitution;
      this.contactEquationStiffness = e.contactEquationStiffness;
      this.contactEquationRelaxation = e.contactEquationRelaxation;
      this.frictionEquationStiffness = e.frictionEquationStiffness;
      this.frictionEquationRelaxation = e.frictionEquationRelaxation;
    }
    var g = h("../utils/Utils");
    l.exports = b;
    b.idCounter = 0;
  }, {"../utils/Utils":53}], 25:[function(h, l) {
    function b(g) {
      var k = "";
      g = g || {};
      "string" == typeof g ? (k = g, g = {}) : "object" == typeof g && (k = "");
      this.name = k;
      this.id = b.idCounter++;
      this.friction = "undefined" != typeof g.friction ? g.friction : -1;
      this.restitution = "undefined" != typeof g.restitution ? g.restitution : -1;
    }
    l.exports = b;
    b.idCounter = 0;
  }, {}], 26:[function(h, l) {
    function b() {
      this.spatial = new g;
      this.rotational = new g;
    }
    l.exports = b;
    var g = h("./Vec3");
    b.prototype.multiplyElement = function(b) {
      return b.spatial.dot(this.spatial) + b.rotational.dot(this.rotational);
    };
    b.prototype.multiplyVectors = function(b, c) {
      return b.dot(this.spatial) + c.dot(this.rotational);
    };
  }, {"./Vec3":30}], 27:[function(h, l) {
    function b(b) {
      this.elements = b ? b : [0, 0, 0, 0, 0, 0, 0, 0, 0];
    }
    l.exports = b;
    var g = h("./Vec3");
    b.prototype.identity = function() {
      var b = this.elements;
      b[0] = 1;
      b[1] = 0;
      b[2] = 0;
      b[3] = 0;
      b[4] = 1;
      b[5] = 0;
      b[6] = 0;
      b[7] = 0;
      b[8] = 1;
    };
    b.prototype.setZero = function() {
      var b = this.elements;
      b[0] = 0;
      b[1] = 0;
      b[2] = 0;
      b[3] = 0;
      b[4] = 0;
      b[5] = 0;
      b[6] = 0;
      b[7] = 0;
      b[8] = 0;
    };
    b.prototype.setTrace = function(b) {
      var c = this.elements;
      c[0] = b.x;
      c[4] = b.y;
      c[8] = b.z;
    };
    b.prototype.getTrace = function(b) {
      b = b || new g;
      var c = this.elements;
      b.x = c[0];
      b.y = c[4];
      b.z = c[8];
    };
    b.prototype.vmult = function(b, c) {
      c = c || new g;
      var e = this.elements, f = b.x, k = b.y;
      b = b.z;
      return c.x = e[0] * f + e[1] * k + e[2] * b, c.y = e[3] * f + e[4] * k + e[5] * b, c.z = e[6] * f + e[7] * k + e[8] * b, c;
    };
    b.prototype.smult = function(b) {
      for (var c = 0;c < this.elements.length;c++) {
        this.elements[c] *= b;
      }
    };
    b.prototype.mmult = function(g, c) {
      c = c || new b;
      for (var e = 0;3 > e;e++) {
        for (var f = 0;3 > f;f++) {
          for (var k = 0, h = 0;3 > h;h++) {
            k += g.elements[e + 3 * h] * this.elements[h + 3 * f];
          }
          c.elements[e + 3 * f] = k;
        }
      }
      return c;
    };
    b.prototype.scale = function(g, c) {
      c = c || new b;
      for (var e = this.elements, f = c.elements, k = 0;3 !== k;k++) {
        f[3 * k + 0] = g.x * e[3 * k + 0], f[3 * k + 1] = g.y * e[3 * k + 1], f[3 * k + 2] = g.z * e[3 * k + 2];
      }
      return c;
    };
    b.prototype.solve = function(b, c) {
      c = c || new g;
      for (var e = [], f = 0;12 > f;f++) {
        e.push(0);
      }
      for (var k, f = 0;3 > f;f++) {
        for (k = 0;3 > k;k++) {
          e[f + 4 * k] = this.elements[f + 3 * k];
        }
      }
      e[3] = b.x;
      e[7] = b.y;
      e[11] = b.z;
      var h, l, p = 3, u = p;
      do {
        if (f = u - p, 0 === e[f + 4 * f]) {
          for (k = f + 1;u > k;k++) {
            if (0 !== e[f + 4 * k]) {
              h = 4;
              do {
                l = 4 - h, e[l + 4 * f] += e[l + 4 * k];
              } while (--h);
              break;
            }
          }
        }
        if (0 !== e[f + 4 * f]) {
          for (k = f + 1;u > k;k++) {
            var v = e[f + 4 * k] / e[f + 4 * f];
            h = 4;
            do {
              l = 4 - h, e[l + 4 * k] = f >= l ? 0 : e[l + 4 * k] - e[l + 4 * f] * v;
            } while (--h);
          }
        }
      } while (--p);
      if (c.z = e[11] / e[10], c.y = (e[7] - e[6] * c.z) / e[5], c.x = (e[3] - e[2] * c.z - e[1] * c.y) / e[0], isNaN(c.x) || isNaN(c.y) || isNaN(c.z) || 1 / 0 === c.x || 1 / 0 === c.y || 1 / 0 === c.z) {
        throw "Could not solve equation! Got x=[" + c.toString() + "], b=[" + b.toString() + "], A=[" + this.toString() + "]";
      }
      return c;
    };
    b.prototype.e = function(b, c, e) {
      return void 0 === e ? this.elements[c + 3 * b] : void(this.elements[c + 3 * b] = e);
    };
    b.prototype.copy = function(b) {
      for (var c = 0;c < b.elements.length;c++) {
        this.elements[c] = b.elements[c];
      }
      return this;
    };
    b.prototype.toString = function() {
      for (var b = "", c = 0;9 > c;c++) {
        b += this.elements[c] + ",";
      }
      return b;
    };
    b.prototype.reverse = function(g) {
      g = g || new b;
      for (var c = [], e = 0;18 > e;e++) {
        c.push(0);
      }
      for (var f, e = 0;3 > e;e++) {
        for (f = 0;3 > f;f++) {
          c[e + 6 * f] = this.elements[e + 3 * f];
        }
      }
      c[3] = 1;
      c[9] = 0;
      c[15] = 0;
      c[4] = 0;
      c[10] = 1;
      c[16] = 0;
      c[5] = 0;
      c[11] = 0;
      c[17] = 1;
      var k, h, l = 3, p = l;
      do {
        if (e = p - l, 0 === c[e + 6 * e]) {
          for (f = e + 1;p > f;f++) {
            if (0 !== c[e + 6 * f]) {
              k = 6;
              do {
                h = 6 - k, c[h + 6 * e] += c[h + 6 * f];
              } while (--k);
              break;
            }
          }
        }
        if (0 !== c[e + 6 * e]) {
          for (f = e + 1;p > f;f++) {
            var u = c[e + 6 * f] / c[e + 6 * e];
            k = 6;
            do {
              h = 6 - k, c[h + 6 * f] = e >= h ? 0 : c[h + 6 * f] - c[h + 6 * e] * u;
            } while (--k);
          }
        }
      } while (--l);
      e = 2;
      do {
        f = e - 1;
        do {
          u = c[e + 6 * f] / c[e + 6 * e];
          k = 6;
          do {
            h = 6 - k, c[h + 6 * f] -= c[h + 6 * e] * u;
          } while (--k);
        } while (f--);
      } while (--e);
      e = 2;
      do {
        u = 1 / c[e + 6 * e];
        k = 6;
        do {
          h = 6 - k, c[h + 6 * e] *= u;
        } while (--k);
      } while (e--);
      e = 2;
      do {
        f = 2;
        do {
          if (h = c[3 + f + 6 * e], isNaN(h) || 1 / 0 === h) {
            throw "Could not reverse! A=[" + this.toString() + "]";
          }
          g.e(e, f, h);
        } while (f--);
      } while (e--);
      return g;
    };
    b.prototype.setRotationFromQuaternion = function(b) {
      var c = b.x, e = b.y, f = b.z, g = b.w, k = c + c, h = e + e, p = f + f;
      b = c * k;
      var l = c * h, c = c * p, v = e * h, e = e * p, f = f * p, k = g * k, h = g * h, g = g * p, p = this.elements;
      return p[0] = 1 - (v + f), p[1] = l - g, p[2] = c + h, p[3] = l + g, p[4] = 1 - (b + f), p[5] = e - k, p[6] = c - h, p[7] = e + k, p[8] = 1 - (b + v), this;
    };
    b.prototype.transpose = function(g) {
      g = g || new b;
      for (var c = g.elements, e = this.elements, f = 0;3 !== f;f++) {
        for (var k = 0;3 !== k;k++) {
          c[3 * f + k] = e[3 * k + f];
        }
      }
      return g;
    };
  }, {"./Vec3":30}], 28:[function(h, l) {
    function b(b, c, e, f) {
      this.x = void 0 !== b ? b : 0;
      this.y = void 0 !== c ? c : 0;
      this.z = void 0 !== e ? e : 0;
      this.w = void 0 !== f ? f : 1;
    }
    l.exports = b;
    var g = h("./Vec3");
    b.prototype.set = function(b, c, e, f) {
      this.x = b;
      this.y = c;
      this.z = e;
      this.w = f;
    };
    b.prototype.toString = function() {
      return this.x + "," + this.y + "," + this.z + "," + this.w;
    };
    b.prototype.toArray = function() {
      return [this.x, this.y, this.z, this.w];
    };
    b.prototype.setFromAxisAngle = function(b, c) {
      var e = Math.sin(.5 * c);
      this.x = b.x * e;
      this.y = b.y * e;
      this.z = b.z * e;
      this.w = Math.cos(.5 * c);
    };
    b.prototype.toAxisAngle = function(b) {
      b = b || new g;
      this.normalize();
      var c = 2 * Math.acos(this.w), e = Math.sqrt(1 - this.w * this.w);
      return .001 > e ? (b.x = this.x, b.y = this.y, b.z = this.z) : (b.x = this.x / e, b.y = this.y / e, b.z = this.z / e), [b, c];
    };
    var k = new g, c = new g;
    b.prototype.setFromVectors = function(b, e) {
      if (b.isAntiparallelTo(e)) {
        b.tangents(k, c), this.setFromAxisAngle(k, Math.PI);
      } else {
        var f = b.cross(e);
        this.x = f.x;
        this.y = f.y;
        this.z = f.z;
        this.w = Math.sqrt(Math.pow(b.norm(), 2) * Math.pow(e.norm(), 2)) + b.dot(e);
        this.normalize();
      }
    };
    var e = new g, f = new g, q = new g;
    b.prototype.mult = function(c, g) {
      g = g || new b;
      var k = this.w;
      return e.set(this.x, this.y, this.z), f.set(c.x, c.y, c.z), g.w = k * c.w - e.dot(f), e.cross(f, q), g.x = k * f.x + c.w * e.x + q.x, g.y = k * f.y + c.w * e.y + q.y, g.z = k * f.z + c.w * e.z + q.z, g;
    };
    b.prototype.inverse = function(c) {
      var e = this.x, f = this.y, g = this.z, k = this.w;
      c = c || new b;
      this.conjugate(c);
      e = 1 / (e * e + f * f + g * g + k * k);
      return c.x *= e, c.y *= e, c.z *= e, c.w *= e, c;
    };
    b.prototype.conjugate = function(c) {
      return c = c || new b, c.x = -this.x, c.y = -this.y, c.z = -this.z, c.w = this.w, c;
    };
    b.prototype.normalize = function() {
      var b = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
      0 === b ? (this.x = 0, this.y = 0, this.z = 0, this.w = 0) : (b = 1 / b, this.x *= b, this.y *= b, this.z *= b, this.w *= b);
    };
    b.prototype.normalizeFast = function() {
      var b = (3 - (this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w)) / 2;
      0 === b ? (this.x = 0, this.y = 0, this.z = 0, this.w = 0) : (this.x *= b, this.y *= b, this.z *= b, this.w *= b);
    };
    b.prototype.vmult = function(b, c) {
      c = c || new g;
      var e = b.x, f = b.y, k = b.z;
      b = this.x;
      var q = this.y, h = this.z, m = this.w, t = m * e + q * k - h * f, l = m * f + h * e - b * k, r = m * k + b * f - q * e, e = -b * e - q * f - h * k;
      return c.x = t * m + e * -b + l * -h - r * -q, c.y = l * m + e * -q + r * -b - t * -h, c.z = r * m + e * -h + t * -q - l * -b, c;
    };
    b.prototype.copy = function(b) {
      return this.x = b.x, this.y = b.y, this.z = b.z, this.w = b.w, this;
    };
    b.prototype.toEuler = function(b, c) {
      c = c || "YZX";
      var e, f, g, k = this.x, q = this.y, m = this.z, h = this.w;
      switch(c) {
        case "YZX":
          c = k * q + m * h;
          if (.499 < c && (e = 2 * Math.atan2(k, h), f = Math.PI / 2, g = 0), -.499 > c && (e = -2 * Math.atan2(k, h), f = -Math.PI / 2, g = 0), isNaN(e)) {
            g = m * m, e = Math.atan2(2 * q * h - 2 * k * m, 1 - 2 * q * q - 2 * g), f = Math.asin(2 * c), g = Math.atan2(2 * k * h - 2 * q * m, 1 - 2 * k * k - 2 * g);
          }
          break;
        default:
          throw Error("Euler order " + c + " not supported yet.");
      }
      b.y = e;
      b.z = f;
      b.x = g;
    };
    b.prototype.setFromEuler = function(b, c, e, f) {
      f = f || "XYZ";
      var g = Math.cos(b / 2), k = Math.cos(c / 2), q = Math.cos(e / 2);
      b = Math.sin(b / 2);
      c = Math.sin(c / 2);
      e = Math.sin(e / 2);
      return "XYZ" === f ? (this.x = b * k * q + g * c * e, this.y = g * c * q - b * k * e, this.z = g * k * e + b * c * q, this.w = g * k * q - b * c * e) : "YXZ" === f ? (this.x = b * k * q + g * c * e, this.y = g * c * q - b * k * e, this.z = g * k * e - b * c * q, this.w = g * k * q + b * c * e) : "ZXY" === f ? (this.x = b * k * q - g * c * e, this.y = g * c * q + b * k * e, this.z = g * k * e + b * c * q, this.w = g * k * q - b * c * e) : "ZYX" === f ? (this.x = b * k * q - g * c * e, this.y = 
      g * c * q + b * k * e, this.z = g * k * e - b * c * q, this.w = g * k * q + b * c * e) : "YZX" === f ? (this.x = b * k * q + g * c * e, this.y = g * c * q + b * k * e, this.z = g * k * e - b * c * q, this.w = g * k * q - b * c * e) : "XZY" === f && (this.x = b * k * q - g * c * e, this.y = g * c * q - b * k * e, this.z = g * k * e + b * c * q, this.w = g * k * q + b * c * e), this;
    };
    b.prototype.clone = function() {
      return new b(this.x, this.y, this.z, this.w);
    };
  }, {"./Vec3":30}], 29:[function(h, l) {
    function b(b) {
      b = b || {};
      this.position = new g;
      b.position && this.position.copy(b.position);
      this.quaternion = new k;
      b.quaternion && this.quaternion.copy(b.quaternion);
    }
    var g = h("./Vec3"), k = h("./Quaternion");
    l.exports = b;
    var c = new k;
    b.pointToLocalFrame = function(b, f, k, h) {
      h = h || new g;
      return k.vsub(b, h), f.conjugate(c), c.vmult(h, h), h;
    };
    b.prototype.pointToLocal = function(c, f) {
      return b.pointToLocalFrame(this.position, this.quaternion, c, f);
    };
    b.pointToWorldFrame = function(b, c, k, h) {
      h = h || new g;
      return c.vmult(k, h), h.vadd(b, h), h;
    };
    b.prototype.pointToWorld = function(c, f) {
      return b.pointToWorldFrame(this.position, this.quaternion, c, f);
    };
    b.prototype.vectorToWorldFrame = function(b, c) {
      c = c || new g;
      return this.quaternion.vmult(b, c), c;
    };
    b.vectorToWorldFrame = function(b, c, g) {
      return b.vmult(c, g), g;
    };
    b.vectorToLocalFrame = function(b, c, k, h) {
      h = h || new g;
      return c.w *= -1, c.vmult(k, h), c.w *= -1, h;
    };
  }, {"./Quaternion":28, "./Vec3":30}], 30:[function(h, l) {
    function b(b, c, e) {
      this.x = b || 0;
      this.y = c || 0;
      this.z = e || 0;
    }
    l.exports = b;
    var g = h("./Mat3");
    b.ZERO = new b(0, 0, 0);
    b.UNIT_X = new b(1, 0, 0);
    b.UNIT_Y = new b(0, 1, 0);
    b.UNIT_Z = new b(0, 0, 1);
    b.prototype.cross = function(c, e) {
      var f = c.x, g = c.y;
      c = c.z;
      var k = this.x, q = this.y, h = this.z;
      return e = e || new b, e.x = q * c - h * g, e.y = h * f - k * c, e.z = k * g - q * f, e;
    };
    b.prototype.set = function(b, c, e) {
      return this.x = b, this.y = c, this.z = e, this;
    };
    b.prototype.setZero = function() {
      this.x = this.y = this.z = 0;
    };
    b.prototype.vadd = function(c, e) {
      return e ? (e.x = c.x + this.x, e.y = c.y + this.y, e.z = c.z + this.z, void 0) : new b(this.x + c.x, this.y + c.y, this.z + c.z);
    };
    b.prototype.vsub = function(c, e) {
      return e ? (e.x = this.x - c.x, e.y = this.y - c.y, e.z = this.z - c.z, void 0) : new b(this.x - c.x, this.y - c.y, this.z - c.z);
    };
    b.prototype.crossmat = function() {
      return new g([0, -this.z, this.y, this.z, 0, -this.x, -this.y, this.x, 0]);
    };
    b.prototype.normalize = function() {
      var b = this.x, c = this.y, e = this.z, b = Math.sqrt(b * b + c * c + e * e);
      0 < b ? (c = 1 / b, this.x *= c, this.y *= c, this.z *= c) : this.z = this.y = this.x = 0;
      return b;
    };
    b.prototype.unit = function(c) {
      c = c || new b;
      var e = this.x, f = this.y, g = this.z, k = Math.sqrt(e * e + f * f + g * g);
      return 0 < k ? (k = 1 / k, c.x = e * k, c.y = f * k, c.z = g * k) : (c.x = 1, c.y = 0, c.z = 0), c;
    };
    b.prototype.norm = function() {
      var b = this.x, c = this.y, e = this.z;
      return Math.sqrt(b * b + c * c + e * e);
    };
    b.prototype.length = b.prototype.norm;
    b.prototype.norm2 = function() {
      return this.dot(this);
    };
    b.prototype.lengthSquared = b.prototype.norm2;
    b.prototype.distanceTo = function(b) {
      var c = this.x, e = this.y, f = this.z, g = b.x, k = b.y;
      b = b.z;
      return Math.sqrt((g - c) * (g - c) + (k - e) * (k - e) + (b - f) * (b - f));
    };
    b.prototype.distanceSquared = function(b) {
      var c = this.x, e = this.y, f = this.z, g = b.x, k = b.y;
      b = b.z;
      return (g - c) * (g - c) + (k - e) * (k - e) + (b - f) * (b - f);
    };
    b.prototype.mult = function(c, e) {
      e = e || new b;
      var f = this.y, g = this.z;
      return e.x = c * this.x, e.y = c * f, e.z = c * g, e;
    };
    b.prototype.scale = b.prototype.mult;
    b.prototype.dot = function(b) {
      return this.x * b.x + this.y * b.y + this.z * b.z;
    };
    b.prototype.isZero = function() {
      return 0 === this.x && 0 === this.y && 0 === this.z;
    };
    b.prototype.negate = function(c) {
      return c = c || new b, c.x = -this.x, c.y = -this.y, c.z = -this.z, c;
    };
    var k = new b, c = new b;
    b.prototype.tangents = function(b, e) {
      var f = this.norm();
      0 < f ? (f = 1 / f, k.set(this.x * f, this.y * f, this.z * f), .9 > Math.abs(k.x) ? (c.set(1, 0, 0), k.cross(c, b)) : (c.set(0, 1, 0), k.cross(c, b)), k.cross(b, e)) : (b.set(1, 0, 0), e.set(0, 1, 0));
    };
    b.prototype.toString = function() {
      return this.x + "," + this.y + "," + this.z;
    };
    b.prototype.toArray = function() {
      return [this.x, this.y, this.z];
    };
    b.prototype.copy = function(b) {
      return this.x = b.x, this.y = b.y, this.z = b.z, this;
    };
    b.prototype.lerp = function(b, c, e) {
      var f = this.x, g = this.y, k = this.z;
      e.x = f + (b.x - f) * c;
      e.y = g + (b.y - g) * c;
      e.z = k + (b.z - k) * c;
    };
    b.prototype.almostEquals = function(b, c) {
      return void 0 === c && (c = 1E-6), Math.abs(this.x - b.x) > c || Math.abs(this.y - b.y) > c || Math.abs(this.z - b.z) > c ? !1 : !0;
    };
    b.prototype.almostZero = function(b) {
      return void 0 === b && (b = 1E-6), Math.abs(this.x) > b || Math.abs(this.y) > b || Math.abs(this.z) > b ? !1 : !0;
    };
    var e = new b;
    b.prototype.isAntiparallelTo = function(b, c) {
      return this.negate(e), e.almostEquals(b, c);
    };
    b.prototype.clone = function() {
      return new b(this.x, this.y, this.z);
    };
  }, {"./Mat3":27}], 31:[function(h, l) {
    function b(m) {
      m = m || {};
      g.apply(this);
      this.id = b.idCounter++;
      this.postStep = this.preStep = this.world = null;
      this.vlambda = new k;
      this.collisionFilterGroup = "number" == typeof m.collisionFilterGroup ? m.collisionFilterGroup : 1;
      this.collisionFilterMask = "number" == typeof m.collisionFilterMask ? m.collisionFilterMask : 1;
      this.collisionResponse = !0;
      this.position = new k;
      m.position && this.position.copy(m.position);
      this.previousPosition = new k;
      this.initPosition = new k;
      this.velocity = new k;
      m.velocity && this.velocity.copy(m.velocity);
      this.initVelocity = new k;
      this.force = new k;
      var q = "number" == typeof m.mass ? m.mass : 0;
      this.mass = q;
      this.invMass = 0 < q ? 1 / q : 0;
      this.material = m.material || null;
      this.linearDamping = "number" == typeof m.linearDamping ? m.linearDamping : .01;
      this.type = 0 >= q ? b.STATIC : b.DYNAMIC;
      typeof m.type == typeof b.STATIC && (this.type = m.type);
      this.allowSleep = "undefined" != typeof m.allowSleep ? m.allowSleep : !0;
      this.sleepState = 0;
      this.sleepSpeedLimit = "undefined" != typeof m.sleepSpeedLimit ? m.sleepSpeedLimit : .1;
      this.sleepTimeLimit = "undefined" != typeof m.sleepTimeLimit ? m.sleepTimeLimit : 1;
      this.timeLastSleepy = 0;
      this._wakeUpAfterNarrowphase = !1;
      this.torque = new k;
      this.quaternion = new e;
      m.quaternion && this.quaternion.copy(m.quaternion);
      this.initQuaternion = new e;
      this.angularVelocity = new k;
      m.angularVelocity && this.angularVelocity.copy(m.angularVelocity);
      this.initAngularVelocity = new k;
      this.interpolatedPosition = new k;
      this.interpolatedQuaternion = new e;
      this.shapes = [];
      this.shapeOffsets = [];
      this.shapeOrientations = [];
      this.inertia = new k;
      this.invInertia = new k;
      this.invInertiaWorld = new c;
      this.invMassSolve = 0;
      this.invInertiaSolve = new k;
      this.invInertiaWorldSolve = new c;
      this.fixedRotation = "undefined" != typeof m.fixedRotation ? m.fixedRotation : !1;
      this.angularDamping = "undefined" != typeof m.angularDamping ? m.angularDamping : .01;
      this.aabb = new f;
      this.aabbNeedsUpdate = !0;
      this.wlambda = new k;
      m.shape && this.addShape(m.shape);
      this.updateMassProperties();
    }
    l.exports = b;
    var g = h("../utils/EventTarget"), k = (h("../shapes/Shape"), h("../math/Vec3")), c = h("../math/Mat3"), e = h("../math/Quaternion"), f = (h("../material/Material"), h("../collision/AABB")), q = h("../shapes/Box");
    b.prototype = new g;
    b.prototype.constructor = b;
    b.DYNAMIC = 1;
    b.STATIC = 2;
    b.KINEMATIC = 4;
    b.AWAKE = 0;
    b.SLEEPY = 1;
    b.SLEEPING = 2;
    b.idCounter = 0;
    b.prototype.wakeUp = function() {
      var c = this.sleepState;
      this.sleepState = 0;
      c === b.SLEEPING && this.dispatchEvent({type:"wakeup"});
    };
    b.prototype.sleep = function() {
      this.sleepState = b.SLEEPING;
      this.velocity.set(0, 0, 0);
      this.angularVelocity.set(0, 0, 0);
    };
    b.sleepyEvent = {type:"sleepy"};
    b.sleepEvent = {type:"sleep"};
    b.prototype.sleepTick = function(c) {
      if (this.allowSleep) {
        var e = this.sleepState, f = this.velocity.norm2() + this.angularVelocity.norm2(), m = Math.pow(this.sleepSpeedLimit, 2);
        e === b.AWAKE && m > f ? (this.sleepState = b.SLEEPY, this.timeLastSleepy = c, this.dispatchEvent(b.sleepyEvent)) : e === b.SLEEPY && f > m ? this.wakeUp() : e === b.SLEEPY && c - this.timeLastSleepy > this.sleepTimeLimit && (this.sleep(), this.dispatchEvent(b.sleepEvent));
      }
    };
    b.prototype.updateSolveMassProperties = function() {
      this.sleepState === b.SLEEPING || this.type === b.KINEMATIC ? (this.invMassSolve = 0, this.invInertiaSolve.setZero(), this.invInertiaWorldSolve.setZero()) : (this.invMassSolve = this.invMass, this.invInertiaSolve.copy(this.invInertia), this.invInertiaWorldSolve.copy(this.invInertiaWorld));
    };
    b.prototype.pointToLocalFrame = function(b, c) {
      c = c || new k;
      return b.vsub(this.position, c), this.quaternion.conjugate().vmult(c, c), c;
    };
    b.prototype.vectorToLocalFrame = function(b, c) {
      c = c || new k;
      return this.quaternion.conjugate().vmult(b, c), c;
    };
    b.prototype.pointToWorldFrame = function(b, c) {
      c = c || new k;
      return this.quaternion.vmult(b, c), c.vadd(this.position, c), c;
    };
    b.prototype.vectorToWorldFrame = function(b, c) {
      c = c || new k;
      return this.quaternion.vmult(b, c), c;
    };
    var r = new k, w = new e;
    b.prototype.addShape = function(b, c, f) {
      var m = new k, g = new e;
      return c && m.copy(c), f && g.copy(f), this.shapes.push(b), this.shapeOffsets.push(m), this.shapeOrientations.push(g), this.updateMassProperties(), this.updateBoundingRadius(), this.aabbNeedsUpdate = !0, this;
    };
    b.prototype.updateBoundingRadius = function() {
      for (var b = this.shapes, c = this.shapeOffsets, e = b.length, f = 0, m = 0;m !== e;m++) {
        var g = b[m];
        g.updateBoundingSphereRadius();
        var k = c[m].norm(), g = g.boundingSphereRadius;
        k + g > f && (f = k + g);
      }
      this.boundingRadius = f;
    };
    var p = new f;
    b.prototype.computeAABB = function() {
      for (var b = this.shapes, c = this.shapeOffsets, e = this.shapeOrientations, f = b.length, m = this.quaternion, g = this.aabb, k = 0;k !== f;k++) {
        var q = b[k];
        e[k].mult(m, w);
        w.vmult(c[k], r);
        r.vadd(this.position, r);
        q.calculateWorldAABB(r, w, p.lowerBound, p.upperBound);
        0 === k ? g.copy(p) : g.extend(p);
      }
      this.aabbNeedsUpdate = !1;
    };
    var u = new c, v = new c;
    new c;
    b.prototype.updateInertiaWorld = function(b) {
      var c = this.invInertia;
      if (c.x !== c.y || c.y !== c.z || b) {
        u.setRotationFromQuaternion(this.quaternion), u.transpose(v), u.scale(c, u), u.mmult(v, this.invInertiaWorld);
      }
    };
    var y = new k, x = new k;
    b.prototype.applyForce = function(c, e) {
      this.type === b.DYNAMIC && (e.vsub(this.position, y), y.cross(c, x), this.force.vadd(c, this.force), this.torque.vadd(x, this.torque));
    };
    var m = new k, t = new k;
    b.prototype.applyLocalForce = function(c, e) {
      this.type === b.DYNAMIC && (this.vectorToWorldFrame(c, m), this.pointToWorldFrame(e, t), this.applyForce(m, t));
    };
    var C = new k, A = new k, D = new k;
    b.prototype.applyImpulse = function(c, e) {
      this.type === b.DYNAMIC && (e.vsub(this.position, C), A.copy(c), A.mult(this.invMass, A), this.velocity.vadd(A, this.velocity), C.cross(c, D), this.invInertiaWorld.vmult(D, D), this.angularVelocity.vadd(D, this.angularVelocity));
    };
    var F = new k, G = new k;
    b.prototype.applyLocalImpulse = function(c, e) {
      this.type === b.DYNAMIC && (this.vectorToWorldFrame(c, F), this.pointToWorldFrame(e, G), this.applyImpulse(F, G));
    };
    var B = new k;
    b.prototype.updateMassProperties = function() {
      this.invMass = 0 < this.mass ? 1 / this.mass : 0;
      var b = this.inertia, c = this.fixedRotation;
      this.computeAABB();
      B.set((this.aabb.upperBound.x - this.aabb.lowerBound.x) / 2, (this.aabb.upperBound.y - this.aabb.lowerBound.y) / 2, (this.aabb.upperBound.z - this.aabb.lowerBound.z) / 2);
      q.calculateInertia(B, this.mass, b);
      this.invInertia.set(0 < b.x && !c ? 1 / b.x : 0, 0 < b.y && !c ? 1 / b.y : 0, 0 < b.z && !c ? 1 / b.z : 0);
      this.updateInertiaWorld(!0);
    };
    b.prototype.getVelocityAtWorldPoint = function(b, c) {
      var e = new k;
      return b.vsub(this.position, e), this.angularVelocity.cross(e, c), this.velocity.vadd(c, c), c;
    };
  }, {"../collision/AABB":3, "../material/Material":25, "../math/Mat3":27, "../math/Quaternion":28, "../math/Vec3":30, "../shapes/Box":37, "../shapes/Shape":43, "../utils/EventTarget":49}], 32:[function(h, l) {
    function b(b) {
      this.chassisBody = b.chassisBody;
      this.wheelInfos = [];
      this.sliding = !1;
      this.world = null;
      this.indexRightAxis = "undefined" != typeof b.indexRightAxis ? b.indexRightAxis : 1;
      this.indexForwardAxis = "undefined" != typeof b.indexForwardAxis ? b.indexForwardAxis : 0;
      this.indexUpAxis = "undefined" != typeof b.indexUpAxis ? b.indexUpAxis : 2;
    }
    function g(b, c, e) {
      var f = D, m = F, g = G, k = B;
      return c.vsub(b.position, f), f.cross(e, m), b.invInertiaWorld.vmult(m, k), k.cross(f, g), b.invMass + e.dot(g);
    }
    var k = (h("./Body"), h("../math/Vec3")), c = h("../math/Quaternion"), e = (h("../collision/RaycastResult"), h("../collision/Ray")), f = h("../objects/WheelInfo");
    l.exports = b;
    var q = (new k, new k, new k, new k), r = new k, w = new k;
    new e;
    b.prototype.addWheel = function(b) {
      b = b || {};
      b = new f(b);
      var c = this.wheelInfos.length;
      return this.wheelInfos.push(b), c;
    };
    b.prototype.setSteeringValue = function(b, c) {
      this.wheelInfos[c].steering = b;
    };
    new k;
    b.prototype.applyEngineForce = function(b, c) {
      this.wheelInfos[c].engineForce = b;
    };
    b.prototype.setBrake = function(b, c) {
      this.wheelInfos[c].brake = b;
    };
    b.prototype.addToWorld = function(b) {
      this.constraints;
      b.add(this.chassisBody);
      var c = this;
      this.preStepCallback = function() {
        c.updateVehicle(b.dt);
      };
      b.addEventListener("preStep", this.preStepCallback);
      this.world = b;
    };
    b.prototype.getVehicleAxisWorld = function(b, c) {
      c.set(0 === b ? 1 : 0, 1 === b ? 1 : 0, 2 === b ? 1 : 0);
      this.chassisBody.vectorToWorldFrame(c, c);
    };
    b.prototype.updateVehicle = function(b) {
      for (var c = this.wheelInfos, e = c.length, f = this.chassisBody, m = 0;e > m;m++) {
        this.updateWheelTransform(m);
      }
      this.currentVehicleSpeedKmHour = 3.6 * f.velocity.norm();
      m = new k;
      this.getVehicleAxisWorld(this.indexForwardAxis, m);
      0 > m.dot(f.velocity) && (this.currentVehicleSpeedKmHour *= -1);
      for (m = 0;e > m;m++) {
        this.castRay(c[m]);
      }
      this.updateSuspension(b);
      for (var g = new k, q = new k, m = 0;e > m;m++) {
        var h = c[m], p = h.suspensionForce;
        p > h.maxSuspensionForce && (p = h.maxSuspensionForce);
        h.raycastResult.hitNormalWorld.scale(p * b, g);
        h.raycastResult.hitPointWorld.vsub(f.position, q);
        f.applyImpulse(g, h.raycastResult.hitPointWorld);
      }
      this.updateFriction(b);
      g = new k;
      q = new k;
      p = new k;
      for (m = 0;e > m;m++) {
        h = c[m];
        f.getVelocityAtWorldPoint(h.chassisConnectionPointWorld, p);
        var t = 1;
        switch(this.indexUpAxis) {
          case 1:
            t = -1;
        }
        if (h.isInContact) {
          this.getVehicleAxisWorld(this.indexForwardAxis, q);
          var l = q.dot(h.raycastResult.hitNormalWorld);
          h.raycastResult.hitNormalWorld.scale(l, g);
          q.vsub(g, q);
          l = q.dot(p);
          h.deltaRotation = t * l * b / h.radius;
        }
        !h.sliding && h.isInContact || 0 === h.engineForce || !h.useCustomSlidingRotationalSpeed || (h.deltaRotation = (0 < h.engineForce ? 1 : -1) * h.customSlidingRotationalSpeed * b);
        Math.abs(h.brake) > Math.abs(h.engineForce) && (h.deltaRotation = 0);
        h.rotation += h.deltaRotation;
        h.deltaRotation *= .99;
      }
    };
    b.prototype.updateSuspension = function() {
      for (var b = this.chassisBody.mass, c = this.wheelInfos, e = c.length, f = 0;e > f;f++) {
        var m = c[f];
        if (m.isInContact) {
          var g;
          g = m.suspensionStiffness * (m.suspensionRestLength - m.suspensionLength) * m.clippedInvContactDotSuspension;
          var k = m.suspensionRelativeVelocity;
          g -= (0 > k ? m.dampingCompression : m.dampingRelaxation) * k;
          m.suspensionForce = g * b;
          0 > m.suspensionForce && (m.suspensionForce = 0);
        } else {
          m.suspensionForce = 0;
        }
      }
    };
    b.prototype.removeFromWorld = function(b) {
      this.constraints;
      b.remove(this.chassisBody);
      b.removeEventListener("preStep", this.preStepCallback);
      this.world = null;
    };
    var p = new k, u = new k;
    b.prototype.castRay = function(b) {
      this.updateWheelTransformWorld(b);
      var c = this.chassisBody, e = -1;
      b.directionWorld.scale(b.suspensionRestLength + b.radius, p);
      var f = b.chassisConnectionPointWorld;
      f.vadd(p, u);
      var m = b.raycastResult;
      m.reset();
      var g = c.collisionResponse;
      c.collisionResponse = !1;
      this.world.rayTest(f, u, m);
      c.collisionResponse = g;
      f = m.body;
      (b.raycastResult.groundObject = 0, f) ? (e = m.distance, b.raycastResult.hitNormalWorld = m.hitNormalWorld, b.isInContact = !0, b.suspensionLength = m.distance - b.radius, m = b.suspensionRestLength - b.maxSuspensionTravel, f = b.suspensionRestLength + b.maxSuspensionTravel, b.suspensionLength < m && (b.suspensionLength = m), b.suspensionLength > f && (b.suspensionLength = f, b.raycastResult.reset()), m = b.raycastResult.hitNormalWorld.dot(b.directionWorld), f = new k, c.getVelocityAtWorldPoint(b.raycastResult.hitPointWorld, 
      f), c = b.raycastResult.hitNormalWorld.dot(f), -.1 <= m ? (b.suspensionRelativeVelocity = 0, b.clippedInvContactDotSuspension = 10) : (m = -1 / m, b.suspensionRelativeVelocity = c * m, b.clippedInvContactDotSuspension = m)) : (b.suspensionLength = b.suspensionRestLength + 0 * b.maxSuspensionTravel, b.suspensionRelativeVelocity = 0, b.directionWorld.scale(-1, b.raycastResult.hitNormalWorld), b.clippedInvContactDotSuspension = 1);
      return e;
    };
    b.prototype.updateWheelTransformWorld = function(b) {
      b.isInContact = !1;
      var c = this.chassisBody;
      c.pointToWorldFrame(b.chassisConnectionPointLocal, b.chassisConnectionPointWorld);
      c.vectorToWorldFrame(b.directionLocal, b.directionWorld);
      c.vectorToWorldFrame(b.axleLocal, b.axleWorld);
    };
    b.prototype.updateWheelTransform = function(b) {
      b = this.wheelInfos[b];
      this.updateWheelTransformWorld(b);
      b.directionLocal.scale(-1, q);
      r.copy(b.axleLocal);
      q.cross(r, w);
      w.normalize();
      r.normalize();
      var e = b.steering, f = new c;
      f.setFromAxisAngle(q, e);
      e = new c;
      e.setFromAxisAngle(r, b.rotation);
      var m = b.worldTransform.quaternion;
      this.chassisBody.quaternion.mult(f, m);
      m.mult(e, m);
      m.normalize();
      f = b.worldTransform.position;
      f.copy(b.directionWorld);
      f.scale(b.suspensionLength, f);
      f.vadd(b.chassisConnectionPointWorld, f);
    };
    var v = [new k(1, 0, 0), new k(0, 1, 0), new k(0, 0, 1)];
    b.prototype.getWheelTransformWorld = function(b) {
      return this.wheelInfos[b].worldTransform;
    };
    var y = new k, x = [], m = [];
    b.prototype.updateFriction = function(b) {
      for (var c = this.wheelInfos, e = c.length, f = this.chassisBody, h = 0, q = 0;e > q;q++) {
        var p = c[q], l = p.raycastResult.body;
        l && h++;
        p.sideImpulse = 0;
        p.forwardImpulse = 0;
        m[q] || (m[q] = new k);
        x[q] || (x[q] = new k);
      }
      for (q = 0;e > q;q++) {
        if (p = c[q], l = p.raycastResult.body) {
          var r = x[q];
          this.getWheelTransformWorld(q).vectorToWorldFrame(v[this.indexRightAxis], r);
          var h = p.raycastResult.hitNormalWorld, w = r.dot(h);
          h.scale(w, y);
          r.vsub(y, r);
          r.normalize();
          h.cross(r, m[q]);
          m[q].normalize();
          h = p;
          var w = f, u = p.raycastResult.hitPointWorld, B = p.raycastResult.hitPointWorld;
          if (1.1 < r.norm2()) {
            l = 0;
          } else {
            var F = K, D = H, G = M;
            w.getVelocityAtWorldPoint(u, F);
            l.getVelocityAtWorldPoint(B, D);
            F.vsub(D, G);
            l = -.2 * r.dot(G) * (1 / (w.invMass + l.invMass));
          }
          h.sideImpulse = l;
          p.sideImpulse *= 1;
        }
      }
      this.sliding = !1;
      for (q = 0;e > q;q++) {
        p = c[q];
        l = p.raycastResult.body;
        u = 0;
        if (p.slipInfo = 1, l) {
          var h = p.brake ? p.brake : 0, D = f, B = l, r = p.raycastResult.hitPointWorld, F = m[q], u = h, w = 0, G = r, J = t, ra = C, pa = A;
          D.getVelocityAtWorldPoint(G, J);
          B.getVelocityAtWorldPoint(G, ra);
          J.vsub(ra, pa);
          G = F.dot(pa);
          D = g(D, r, F);
          B = g(B, r, F);
          u = (w = 1 / (D + B) * -G, w > u && (w = u), -u > w && (w = -u), w);
          u += p.engineForce * b;
          h /= u;
          p.slipInfo *= h;
        }
        if (p.forwardImpulse = 0, p.skidInfo = 1, l) {
          if (p.skidInfo = 1, l = p.suspensionForce * b * p.frictionSlip, h = l * l, p.forwardImpulse = u, w = .5 * p.forwardImpulse, u = 1 * p.sideImpulse, w = w * w + u * u, p.sliding = !1, w > h) {
            this.sliding = !0, p.sliding = !0, h = l / Math.sqrt(w), p.skidInfo *= h;
          }
        }
      }
      if (this.sliding) {
        for (q = 0;e > q;q++) {
          p = c[q], 0 !== p.sideImpulse && 1 > p.skidInfo && (p.forwardImpulse *= p.skidInfo, p.sideImpulse *= p.skidInfo);
        }
      }
      for (q = 0;e > q;q++) {
        p = c[q];
        b = new k;
        if (b.copy(p.raycastResult.hitPointWorld), 0 !== p.forwardImpulse) {
          l = new k, m[q].scale(p.forwardImpulse, l), f.applyImpulse(l, b);
        }
        0 !== p.sideImpulse && (l = p.raycastResult.body, h = new k, h.copy(p.raycastResult.hitPointWorld), w = new k, x[q].scale(p.sideImpulse, w), f.pointToLocalFrame(b, b), b["xyz"[this.indexUpAxis]] *= p.rollInfluence, f.pointToWorldFrame(b, b), f.applyImpulse(w, b), w.scale(-1, w), l.applyImpulse(w, h));
      }
    };
    var t = new k, C = new k, A = new k, D = new k, F = new k, G = new k, B = new k, K = new k, H = new k, M = new k;
  }, {"../collision/Ray":9, "../collision/RaycastResult":10, "../math/Quaternion":28, "../math/Vec3":30, "../objects/WheelInfo":36, "./Body":31}], 33:[function(h, l) {
    function b(b) {
      (this.wheelBodies = [], this.coordinateSystem = "undefined" == typeof b.coordinateSystem ? new e(1, 2, 3) : b.coordinateSystem.clone(), this.chassisBody = b.chassisBody, this.chassisBody) || (b = new c(new e(5, 2, .5)), this.chassisBody = new g(1, b));
      this.constraints = [];
      this.wheelAxes = [];
      this.wheelForces = [];
    }
    var g = h("./Body"), k = h("../shapes/Sphere"), c = h("../shapes/Box"), e = h("../math/Vec3"), f = h("../constraints/HingeConstraint");
    l.exports = b;
    b.prototype.addWheel = function(b) {
      b = b || {};
      var c = b.body;
      c || (c = new g(1, new k(1.2)));
      this.wheelBodies.push(c);
      this.wheelForces.push(0);
      var q = (new e, "undefined" != typeof b.position ? b.position.clone() : new e), h = new e;
      this.chassisBody.pointToWorldFrame(q, h);
      c.position.set(h.x, h.y, h.z);
      b = "undefined" != typeof b.axis ? b.axis.clone() : new e(0, 1, 0);
      this.wheelAxes.push(b);
      c = new f(this.chassisBody, c, {pivotA:q, axisA:b, pivotB:e.ZERO, axisB:b, collideConnected:!1});
      return this.constraints.push(c), this.wheelBodies.length - 1;
    };
    b.prototype.setSteeringValue = function(b, c) {
      var e = this.wheelAxes[c], f = Math.cos(b);
      b = Math.sin(b);
      var g = e.x, e = e.y;
      this.constraints[c].axisA.set(f * g - b * e, b * g + f * e, 0);
    };
    b.prototype.setMotorSpeed = function(b, c) {
      c = this.constraints[c];
      c.enableMotor();
      c.motorTargetVelocity = b;
    };
    b.prototype.disableMotor = function(b) {
      this.constraints[b].disableMotor();
    };
    var q = new e;
    b.prototype.setWheelForce = function(b, c) {
      this.wheelForces[c] = b;
    };
    b.prototype.applyWheelForce = function(b, c) {
      var e = this.wheelBodies[c], f = e.torque;
      this.wheelAxes[c].scale(b, q);
      e.vectorToWorldFrame(q, q);
      f.vadd(q, f);
    };
    b.prototype.addToWorld = function(b) {
      for (var c = this.constraints, e = this.wheelBodies.concat([this.chassisBody]), f = 0;f < e.length;f++) {
        b.add(e[f]);
      }
      for (f = 0;f < c.length;f++) {
        b.addConstraint(c[f]);
      }
      b.addEventListener("preStep", this._update.bind(this));
    };
    b.prototype._update = function() {
      for (var b = this.wheelForces, c = 0;c < b.length;c++) {
        this.applyWheelForce(b[c], c);
      }
    };
    b.prototype.removeFromWorld = function(b) {
      for (var c = this.constraints, e = this.wheelBodies.concat([this.chassisBody]), f = 0;f < e.length;f++) {
        b.remove(e[f]);
      }
      for (f = 0;f < c.length;f++) {
        b.removeConstraint(c[f]);
      }
    };
    var r = new e;
    b.prototype.getWheelSpeed = function(b) {
      var c = this.wheelBodies[b].angularVelocity;
      return this.chassisBody.vectorToWorldFrame(this.wheelAxes[b], r), c.dot(r);
    };
  }, {"../constraints/HingeConstraint":15, "../math/Vec3":30, "../shapes/Box":37, "../shapes/Sphere":44, "./Body":31}], 34:[function(h, l) {
    function b() {
      this.particles = [];
      this.speedOfSound = this.smoothingRadius = this.density = 1;
      this.viscosity = .01;
      this.eps = 1E-6;
      this.pressures = [];
      this.densities = [];
      this.neighbors = [];
    }
    l.exports = b;
    l = (h("../shapes/Shape"), h("../math/Vec3"));
    h("../math/Quaternion");
    h("../shapes/Particle");
    h("../objects/Body");
    h("../material/Material");
    b.prototype.add = function(b) {
      this.particles.push(b);
      this.neighbors.length < this.particles.length && this.neighbors.push([]);
    };
    b.prototype.remove = function(b) {
      b = this.particles.indexOf(b);
      -1 !== b && (this.particles.splice(b, 1), this.neighbors.length > this.particles.length && this.neighbors.pop());
    };
    var g = new l;
    b.prototype.getNeighbors = function(b, c) {
      for (var e = this.particles.length, f = b.id, k = this.smoothingRadius * this.smoothingRadius, q = 0;q !== e;q++) {
        var m = this.particles[q];
        m.position.vsub(b.position, g);
        f !== m.id && g.norm2() < k && c.push(m);
      }
    };
    var k = new l, c = new l, e = new l, f = new l, q = new l, r = new l;
    b.prototype.update = function() {
      for (var b = this.particles.length, g = this.speedOfSound, h = this.eps, l = 0;l !== b;l++) {
        var y = this.particles[l], x = this.neighbors[l];
        x.length = 0;
        this.getNeighbors(y, x);
        x.push(this.particles[l]);
        for (var m = x.length, t = 0, C = 0;C !== m;C++) {
          y.position.vsub(x[C].position, k);
          var A = k.norm(), A = this.w(A), t = t + x[C].mass * A;
        }
        this.densities[l] = t;
        this.pressures[l] = g * g * (this.densities[l] - this.density);
      }
      for (l = 0;l !== b;l++) {
        g = this.particles[l];
        c.set(0, 0, 0);
        e.set(0, 0, 0);
        x = this.neighbors[l];
        m = x.length;
        for (C = 0;C !== m;C++) {
          t = x[C], g.position.vsub(t.position, q), A = q.norm(), y = -t.mass * (this.pressures[l] / (this.densities[l] * this.densities[l] + h) + this.pressures[C] / (this.densities[C] * this.densities[C] + h)), this.gradw(q, f), f.mult(y, f), c.vadd(f, c), t.velocity.vsub(g.velocity, r), r.mult(1 / (1E-4 + this.densities[l] * this.densities[C]) * this.viscosity * t.mass, r), y = this.nablaw(A), r.mult(y, r), e.vadd(r, e);
        }
        e.mult(g.mass, e);
        c.mult(g.mass, c);
        g.force.vadd(e, g.force);
        g.force.vadd(c, g.force);
      }
    };
    b.prototype.w = function(b) {
      var c = this.smoothingRadius;
      return 315 / (64 * Math.PI * Math.pow(c, 9)) * Math.pow(c * c - b * b, 3);
    };
    b.prototype.gradw = function(b, c) {
      var e = b.norm(), f = this.smoothingRadius;
      b.mult(945 / (32 * Math.PI * Math.pow(f, 9)) * Math.pow(f * f - e * e, 2), c);
    };
    b.prototype.nablaw = function(b) {
      var c = this.smoothingRadius;
      return 945 / (32 * Math.PI * Math.pow(c, 9)) * (c * c - b * b) * (7 * b * b - 3 * c * c);
    };
  }, {"../material/Material":25, "../math/Quaternion":28, "../math/Vec3":30, "../objects/Body":31, "../shapes/Particle":41, "../shapes/Shape":43}], 35:[function(h, l) {
    function b(b, c, e) {
      e = e || {};
      this.restLength = "number" == typeof e.restLength ? e.restLength : 1;
      this.stiffness = e.stiffness || 100;
      this.damping = e.damping || 1;
      this.bodyA = b;
      this.bodyB = c;
      this.localAnchorA = new g;
      this.localAnchorB = new g;
      e.localAnchorA && this.localAnchorA.copy(e.localAnchorA);
      e.localAnchorB && this.localAnchorB.copy(e.localAnchorB);
      e.worldAnchorA && this.setWorldAnchorA(e.worldAnchorA);
      e.worldAnchorB && this.setWorldAnchorB(e.worldAnchorB);
    }
    var g = h("../math/Vec3");
    l.exports = b;
    b.prototype.setWorldAnchorA = function(b) {
      this.bodyA.pointToLocalFrame(b, this.localAnchorA);
    };
    b.prototype.setWorldAnchorB = function(b) {
      this.bodyB.pointToLocalFrame(b, this.localAnchorB);
    };
    b.prototype.getWorldAnchorA = function(b) {
      this.bodyA.pointToWorldFrame(this.localAnchorA, b);
    };
    b.prototype.getWorldAnchorB = function(b) {
      this.bodyB.pointToWorldFrame(this.localAnchorB, b);
    };
    var k = new g, c = new g, e = new g, f = new g, q = new g, r = new g, w = new g, p = new g, u = new g, v = new g, y = new g;
    b.prototype.applyForce = function() {
      var b = this.stiffness, m = this.damping, g = this.restLength, h = this.bodyA, l = this.bodyB;
      this.getWorldAnchorA(q);
      this.getWorldAnchorB(r);
      q.vsub(h.position, w);
      r.vsub(l.position, p);
      r.vsub(q, k);
      var D = k.norm();
      c.copy(k);
      c.normalize();
      l.velocity.vsub(h.velocity, e);
      l.angularVelocity.cross(p, y);
      e.vadd(y, e);
      h.angularVelocity.cross(w, y);
      e.vsub(y, e);
      c.mult(-b * (D - g) - m * e.dot(c), f);
      h.force.vsub(f, h.force);
      l.force.vadd(f, l.force);
      w.cross(f, u);
      p.cross(f, v);
      h.torque.vsub(u, h.torque);
      l.torque.vadd(v, l.torque);
    };
  }, {"../math/Vec3":30}], 36:[function(h, l) {
    function b(b) {
      b = e.defaults(b, {chassisConnectionPointLocal:new g, chassisConnectionPointWorld:new g, directionLocal:new g, directionWorld:new g, axleLocal:new g, axleWorld:new g, suspensionRestLength:1, suspensionMaxLength:2, radius:1, suspensionStiffness:100, dampingCompression:10, dampingRelaxation:10, frictionSlip:1E4, steering:0, rotation:0, deltaRotation:0, rollInfluence:.01, maxSuspensionForce:Number.MAX_VALUE, isFrontWheel:!0, clippedInvContactDotSuspension:1, suspensionRelativeVelocity:0, suspensionForce:0, 
      skidInfo:0, suspensionLength:0, maxSuspensionTravel:1, useCustomSlidingRotationalSpeed:!1, customSlidingRotationalSpeed:-.1});
      this.maxSuspensionTravel = b.maxSuspensionTravel;
      this.customSlidingRotationalSpeed = b.customSlidingRotationalSpeed;
      this.useCustomSlidingRotationalSpeed = b.useCustomSlidingRotationalSpeed;
      this.sliding = !1;
      this.chassisConnectionPointLocal = b.chassisConnectionPointLocal.clone();
      this.chassisConnectionPointWorld = b.chassisConnectionPointWorld.clone();
      this.directionLocal = b.directionLocal.clone();
      this.directionWorld = b.directionWorld.clone();
      this.axleLocal = b.axleLocal.clone();
      this.axleWorld = b.axleWorld.clone();
      this.suspensionRestLength = b.suspensionRestLength;
      this.suspensionMaxLength = b.suspensionMaxLength;
      this.radius = b.radius;
      this.suspensionStiffness = b.suspensionStiffness;
      this.dampingCompression = b.dampingCompression;
      this.dampingRelaxation = b.dampingRelaxation;
      this.frictionSlip = b.frictionSlip;
      this.deltaRotation = this.rotation = this.steering = 0;
      this.rollInfluence = b.rollInfluence;
      this.maxSuspensionForce = b.maxSuspensionForce;
      this.brake = this.engineForce = 0;
      this.isFrontWheel = b.isFrontWheel;
      this.clippedInvContactDotSuspension = 1;
      this.forwardImpulse = this.sideImpulse = this.suspensionLength = this.skidInfo = this.suspensionForce = this.suspensionRelativeVelocity = 0;
      this.raycastResult = new c;
      this.worldTransform = new k;
      this.isInContact = !1;
    }
    var g = h("../math/Vec3"), k = h("../math/Transform"), c = h("../collision/RaycastResult"), e = h("../utils/Utils");
    l.exports = b;
    var f = new g, q = new g, f = new g;
    b.prototype.updateWheel = function(b) {
      var c = this.raycastResult;
      if (this.isInContact) {
        var e = c.hitNormalWorld.dot(c.directionWorld);
        c.hitPointWorld.vsub(b.position, q);
        b.getVelocityAtWorldPoint(q, f);
        b = c.hitNormalWorld.dot(f);
        -.1 <= e ? (this.suspensionRelativeVelocity = 0, this.clippedInvContactDotSuspension = 10) : (e = -1 / e, this.suspensionRelativeVelocity = b * e, this.clippedInvContactDotSuspension = e);
      } else {
        c.suspensionLength = this.suspensionRestLength, this.suspensionRelativeVelocity = 0, c.directionWorld.scale(-1, c.hitNormalWorld), this.clippedInvContactDotSuspension = 1;
      }
    };
  }, {"../collision/RaycastResult":10, "../math/Transform":29, "../math/Vec3":30, "../utils/Utils":53}], 37:[function(h, l) {
    function b(b) {
      g.call(this);
      this.type = g.types.BOX;
      this.halfExtents = b;
      this.convexPolyhedronRepresentation = null;
      this.updateConvexPolyhedronRepresentation();
      this.updateBoundingSphereRadius();
    }
    l.exports = b;
    var g = h("./Shape"), k = h("../math/Vec3"), c = h("./ConvexPolyhedron");
    b.prototype = new g;
    b.prototype.constructor = b;
    b.prototype.updateConvexPolyhedronRepresentation = function() {
      var b = this.halfExtents.x, e = this.halfExtents.y, f = this.halfExtents.z, b = [new k(-b, -e, -f), new k(b, -e, -f), new k(b, e, -f), new k(-b, e, -f), new k(-b, -e, f), new k(b, -e, f), new k(b, e, f), new k(-b, e, f)];
      this.convexPolyhedronRepresentation = b = (new k(0, 0, 1), new k(0, 1, 0), new k(1, 0, 0), new c(b, [[3, 2, 1, 0], [4, 5, 6, 7], [5, 4, 0, 1], [2, 3, 7, 6], [0, 4, 7, 3], [1, 2, 6, 5]]));
      b.material = this.material;
    };
    b.prototype.calculateLocalInertia = function(c, e) {
      return e = e || new k, b.calculateInertia(this.halfExtents, c, e), e;
    };
    b.calculateInertia = function(b, c, e) {
      e.x = 1 / 12 * c * (4 * b.y * b.y + 4 * b.z * b.z);
      e.y = 1 / 12 * c * (4 * b.x * b.x + 4 * b.z * b.z);
      e.z = 1 / 12 * c * (4 * b.y * b.y + 4 * b.x * b.x);
    };
    b.prototype.getSideNormals = function(b, c) {
      var e = this.halfExtents;
      if (b[0].set(e.x, 0, 0), b[1].set(0, e.y, 0), b[2].set(0, 0, e.z), b[3].set(-e.x, 0, 0), b[4].set(0, -e.y, 0), b[5].set(0, 0, -e.z), void 0 !== c) {
        for (e = 0;e !== b.length;e++) {
          c.vmult(b[e], b[e]);
        }
      }
      return b;
    };
    b.prototype.volume = function() {
      return 8 * this.halfExtents.x * this.halfExtents.y * this.halfExtents.z;
    };
    b.prototype.updateBoundingSphereRadius = function() {
      this.boundingSphereRadius = this.halfExtents.norm();
    };
    var e = new k;
    new k;
    b.prototype.forEachWorldCorner = function(b, c, f) {
      for (var g = this.halfExtents, g = [[g.x, g.y, g.z], [-g.x, g.y, g.z], [-g.x, -g.y, g.z], [-g.x, -g.y, -g.z], [g.x, -g.y, -g.z], [g.x, g.y, -g.z], [-g.x, g.y, -g.z], [g.x, -g.y, g.z]], k = 0;k < g.length;k++) {
        e.set(g[k][0], g[k][1], g[k][2]), c.vmult(e, e), b.vadd(e, e), f(e.x, e.y, e.z);
      }
    };
    var f = [new k, new k, new k, new k, new k, new k, new k, new k];
    b.prototype.calculateWorldAABB = function(b, c, e, g) {
      var k = this.halfExtents;
      f[0].set(k.x, k.y, k.z);
      f[1].set(-k.x, k.y, k.z);
      f[2].set(-k.x, -k.y, k.z);
      f[3].set(-k.x, -k.y, -k.z);
      f[4].set(k.x, -k.y, -k.z);
      f[5].set(k.x, k.y, -k.z);
      f[6].set(-k.x, k.y, -k.z);
      f[7].set(k.x, -k.y, k.z);
      var h = f[0];
      c.vmult(h, h);
      b.vadd(h, h);
      g.copy(h);
      e.copy(h);
      for (k = 1;8 > k;k++) {
        h = f[k];
        c.vmult(h, h);
        b.vadd(h, h);
        var q = h.x, p = h.y, h = h.z;
        q > g.x && (g.x = q);
        p > g.y && (g.y = p);
        h > g.z && (g.z = h);
        q < e.x && (e.x = q);
        p < e.y && (e.y = p);
        h < e.z && (e.z = h);
      }
    };
  }, {"../math/Vec3":30, "./ConvexPolyhedron":38, "./Shape":43}], 38:[function(h, l) {
    function b(b, c, e) {
      g.call(this);
      this.type = g.types.CONVEXPOLYHEDRON;
      this.vertices = b || [];
      this.worldVertices = [];
      this.worldVerticesNeedsUpdate = !0;
      this.faces = c || [];
      this.faceNormals = [];
      this.computeNormals();
      this.worldFaceNormalsNeedsUpdate = !0;
      this.worldFaceNormals = [];
      this.uniqueEdges = [];
      this.uniqueAxes = e ? e.slice() : null;
      this.computeEdges();
      this.updateBoundingSphereRadius();
    }
    l.exports = b;
    var g = h("./Shape"), k = h("../math/Vec3"), c = (h("../math/Quaternion"), h("../math/Transform"));
    b.prototype = new g;
    b.prototype.constructor = b;
    var e = new k;
    b.prototype.computeEdges = function() {
      for (var b = this.faces, c = this.vertices, f = (c.length, this.uniqueEdges), m = f.length = 0;m !== b.length;m++) {
        for (var g = b[m], k = g.length, h = 0;h !== k;h++) {
          c[g[h]].vsub(c[g[(h + 1) % k]], e);
          e.normalize();
          for (var q = !1, p = 0;p !== f.length;p++) {
            if (f[p].almostEquals(e) || f[p].almostEquals(e)) {
              q = !0;
              break;
            }
          }
          q || f.push(e.clone());
        }
      }
    };
    b.prototype.computeNormals = function() {
      this.faceNormals.length = this.faces.length;
      for (var b = 0;b < this.faces.length;b++) {
        for (var c = 0;c < this.faces[b].length;c++) {
          if (!this.vertices[this.faces[b][c]]) {
            throw Error("Vertex " + this.faces[b][c] + " not found!");
          }
        }
        c = this.faceNormals[b] || new k;
        this.getFaceNormal(b, c);
        c.negate(c);
        this.faceNormals[b] = c;
        if (0 > c.dot(this.vertices[this.faces[b][0]])) {
          for (console.error(".faceNormals[" + b + "] = Vec3(" + c.toString() + ") looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule."), c = 0;c < this.faces[b].length;c++) {
            console.warn(".vertices[" + this.faces[b][c] + "] = Vec3(" + this.vertices[this.faces[b][c]].toString() + ")");
          }
        }
      }
    };
    var f = new k, q = new k;
    b.computeNormal = function(b, c, e, m) {
      c.vsub(b, q);
      e.vsub(c, f);
      f.cross(q, m);
      m.isZero() || m.normalize();
    };
    b.prototype.getFaceNormal = function(c, e) {
      c = this.faces[c];
      return b.computeNormal(this.vertices[c[0]], this.vertices[c[1]], this.vertices[c[2]], e);
    };
    var r = new k;
    b.prototype.clipAgainstHull = function(b, c, e, f, m, g, h, q, p) {
      for (var l = -1, t = -Number.MAX_VALUE, w = 0;w < e.faces.length;w++) {
        r.copy(e.faceNormals[w]);
        m.vmult(r, r);
        var C = r.dot(g);
        C > t && (t = C, l = w);
      }
      for (var t = [], w = e.faces[l], C = w.length, u = 0;C > u;u++) {
        var v = e.vertices[w[u]], y = new k;
        y.copy(v);
        m.vmult(y, y);
        f.vadd(y, y);
        t.push(y);
      }
      0 <= l && this.clipFaceAgainstHull(g, b, c, t, h, q, p);
    };
    var w = new k, p = new k, u = new k, v = new k, y = new k, x = new k;
    b.prototype.findSeparatingAxis = function(b, c, e, f, m, g, k, h) {
      var q = Number.MAX_VALUE, t = 0;
      if (this.uniqueAxes) {
        for (var l = 0;l !== this.uniqueAxes.length;l++) {
          e.vmult(this.uniqueAxes[l], w);
          var r = this.testSepAxis(w, b, c, e, f, m);
          if (!1 === r) {
            return !1;
          }
          q > r && (q = r, g.copy(w));
        }
      } else {
        for (var C = k ? k.length : this.faces.length, l = 0;C > l;l++) {
          r = k ? k[l] : l;
          w.copy(this.faceNormals[r]);
          e.vmult(w, w);
          r = this.testSepAxis(w, b, c, e, f, m);
          if (!1 === r) {
            return !1;
          }
          q > r && (q = r, g.copy(w));
        }
      }
      if (b.uniqueAxes) {
        for (l = 0;l !== b.uniqueAxes.length;l++) {
          m.vmult(b.uniqueAxes[l], p);
          t++;
          r = this.testSepAxis(p, b, c, e, f, m);
          if (!1 === r) {
            return !1;
          }
          q > r && (q = r, g.copy(p));
        }
      } else {
        for (k = h ? h.length : b.faces.length, l = 0;k > l;l++) {
          r = h ? h[l] : l;
          p.copy(b.faceNormals[r]);
          m.vmult(p, p);
          t++;
          r = this.testSepAxis(p, b, c, e, f, m);
          if (!1 === r) {
            return !1;
          }
          q > r && (q = r, g.copy(p));
        }
      }
      for (h = 0;h !== this.uniqueEdges.length;h++) {
        for (e.vmult(this.uniqueEdges[h], v), t = 0;t !== b.uniqueEdges.length;t++) {
          if (m.vmult(b.uniqueEdges[t], y), v.cross(y, x), !x.almostZero()) {
            x.normalize();
            l = this.testSepAxis(x, b, c, e, f, m);
            if (!1 === l) {
              return !1;
            }
            q > l && (q = l, g.copy(x));
          }
        }
      }
      return f.vsub(c, u), 0 < u.dot(g) && g.negate(g), !0;
    };
    var m = [], t = [];
    b.prototype.testSepAxis = function(c, e, f, g, k, h) {
      b.project(this, c, f, g, m);
      b.project(e, c, k, h, t);
      f = m[0];
      c = m[1];
      e = t[0];
      g = t[1];
      if (g > f || c > e) {
        return !1;
      }
      f -= g;
      c = e - c;
      return c > f ? f : c;
    };
    var C = new k, A = new k;
    b.prototype.calculateLocalInertia = function(b, c) {
      this.computeLocalAABB(C, A);
      var e = A.x - C.x, f = A.y - C.y, m = A.z - C.z;
      c.x = 1 / 12 * b * (4 * f * f + 4 * m * m);
      c.y = 1 / 12 * b * (4 * e * e + 4 * m * m);
      c.z = 1 / 12 * b * (4 * f * f + 4 * e * e);
    };
    b.prototype.getPlaneConstantOfFace = function(b) {
      return -this.faceNormals[b].dot(this.vertices[this.faces[b][0]]);
    };
    var D = new k, F = new k, G = new k, B = new k, K = new k, H = new k, M = new k, J = new k;
    b.prototype.clipFaceAgainstHull = function(b, c, e, f, m, g, k) {
      for (var h = [], q = -1, p = Number.MAX_VALUE, l = 0;l < this.faces.length;l++) {
        D.copy(this.faceNormals[l]);
        e.vmult(D, D);
        var t = D.dot(b);
        p > t && (p = t, q = l);
      }
      if (!(0 > q)) {
        b = this.faces[q];
        b.connectedFaces = [];
        for (p = 0;p < this.faces.length;p++) {
          for (l = 0;l < this.faces[p].length;l++) {
            -1 !== b.indexOf(this.faces[p][l]) && p !== q && -1 === b.connectedFaces.indexOf(p) && b.connectedFaces.push(p);
          }
        }
        p = (f.length, b.length);
        for (l = 0;p > l;l++) {
          t = this.vertices[b[l]];
          t.vsub(this.vertices[b[(l + 1) % p]], F);
          G.copy(F);
          e.vmult(G, G);
          c.vadd(G, G);
          B.copy(this.faceNormals[q]);
          e.vmult(B, B);
          c.vadd(B, B);
          G.cross(B, K);
          K.negate(K);
          H.copy(t);
          e.vmult(H, H);
          c.vadd(H, H);
          t = (-H.dot(K), b.connectedFaces[l]);
          M.copy(this.faceNormals[t]);
          t = this.getPlaneConstantOfFace(t);
          J.copy(M);
          e.vmult(J, J);
          t -= J.dot(c);
          for (this.clipFaceAgainstPlane(f, h, J, t);f.length;) {
            f.shift();
          }
          for (;h.length;) {
            f.push(h.shift());
          }
        }
        M.copy(this.faceNormals[q]);
        t = this.getPlaneConstantOfFace(q);
        J.copy(M);
        e.vmult(J, J);
        t -= J.dot(c);
        for (p = 0;p < f.length;p++) {
          if (c = J.dot(f[p]) + t, m >= c && (console.log("clamped: depth=" + c + " to minDist=" + (m + "")), c = m), g >= c) {
            e = f[p], 0 >= c && k.push({point:e, normal:J, depth:c});
          }
        }
      }
    };
    b.prototype.clipFaceAgainstPlane = function(b, c, e, f) {
      var m, g, h = b.length;
      if (2 > h) {
        return c;
      }
      var q = b[b.length - 1], p = b[0];
      m = e.dot(q) + f;
      for (var l = 0;h > l;l++) {
        if (p = b[l], g = e.dot(p) + f, 0 > m) {
          if (0 > g) {
            var t = new k;
            t.copy(p);
          } else {
            t = new k, q.lerp(p, m / (m - g), t);
          }
          c.push(t);
        } else {
          0 > g && (t = new k, q.lerp(p, m / (m - g), t), c.push(t), c.push(p));
        }
        q = p;
        m = g;
      }
      return c;
    };
    b.prototype.computeWorldVertices = function(b, c) {
      for (var e = this.vertices.length;this.worldVertices.length < e;) {
        this.worldVertices.push(new k);
      }
      for (var f = this.vertices, m = this.worldVertices, g = 0;g !== e;g++) {
        c.vmult(f[g], m[g]), b.vadd(m[g], m[g]);
      }
      this.worldVerticesNeedsUpdate = !1;
    };
    new k;
    b.prototype.computeLocalAABB = function(b, c) {
      var e = this.vertices.length, f = this.vertices;
      b.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);
      c.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);
      for (var m = 0;e > m;m++) {
        var g = f[m];
        g.x < b.x ? b.x = g.x : g.x > c.x && (c.x = g.x);
        g.y < b.y ? b.y = g.y : g.y > c.y && (c.y = g.y);
        g.z < b.z ? b.z = g.z : g.z > c.z && (c.z = g.z);
      }
    };
    b.prototype.computeWorldFaceNormals = function(b) {
      for (var c = this.faceNormals.length;this.worldFaceNormals.length < c;) {
        this.worldFaceNormals.push(new k);
      }
      for (var e = this.faceNormals, f = this.worldFaceNormals, m = 0;m !== c;m++) {
        b.vmult(e[m], f[m]);
      }
      this.worldFaceNormalsNeedsUpdate = !1;
    };
    b.prototype.updateBoundingSphereRadius = function() {
      for (var b = 0, c = this.vertices, e = 0, f = c.length;e !== f;e++) {
        var m = c[e].norm2();
        m > b && (b = m);
      }
      this.boundingSphereRadius = Math.sqrt(b);
    };
    var P = new k;
    b.prototype.calculateWorldAABB = function(b, c, e, f) {
      for (var m, g, k, h, q, p, l = this.vertices.length, t = this.vertices, r = 0;l > r;r++) {
        P.copy(t[r]);
        c.vmult(P, P);
        b.vadd(P, P);
        var w = P;
        w.x < m || void 0 === m ? m = w.x : (w.x > h || void 0 === h) && (h = w.x);
        w.y < g || void 0 === g ? g = w.y : (w.y > q || void 0 === q) && (q = w.y);
        w.z < k || void 0 === k ? k = w.z : (w.z > p || void 0 === p) && (p = w.z);
      }
      e.set(m, g, k);
      f.set(h, q, p);
    };
    b.prototype.volume = function() {
      return 4 * Math.PI * this.boundingSphereRadius / 3;
    };
    b.prototype.getAveragePointLocal = function(b) {
      b = b || new k;
      for (var c = this.vertices.length, e = this.vertices, f = 0;c > f;f++) {
        b.vadd(e[f], b);
      }
      return b.mult(1 / c, b), b;
    };
    b.prototype.transformAllPoints = function(b, c) {
      var e = this.vertices.length, f = this.vertices;
      if (c) {
        for (var m = 0;e > m;m++) {
          var g = f[m];
          c.vmult(g, g);
        }
        for (m = 0;m < this.faceNormals.length;m++) {
          g = this.faceNormals[m], c.vmult(g, g);
        }
      }
      if (b) {
        for (m = 0;e > m;m++) {
          g = f[m], g.vadd(b, g);
        }
      }
    };
    var O = new k, N = new k, ba = new k;
    b.prototype.pointIsInside = function(b) {
      var c, e = this.vertices, f = this.faces, m = this.faceNormals, g = this.faces.length;
      this.getAveragePointLocal(O);
      for (var k = 0;g > k;k++) {
        c = (this.faces[k].length, m[k]);
        var h = e[f[k][0]], q = N;
        b.vsub(h, q);
        var q = c.dot(q), p = ba;
        O.vsub(h, p);
        c = c.dot(p);
        if (0 > q && 0 < c || 0 < q && 0 > c) {
          return !1;
        }
      }
      return -1;
    };
    var da = (new k, new k), ca = new k;
    b.project = function(b, e, f, m, g) {
      var k = b.vertices.length;
      b = b.vertices;
      ca.setZero();
      c.vectorToLocalFrame(f, m, e, da);
      c.pointToLocalFrame(f, m, ca, ca);
      m = ca.dot(da);
      f = e = b[0].dot(da);
      for (var h = 1;k > h;h++) {
        var q = b[h].dot(da);
        q > e && (e = q);
        f > q && (f = q);
      }
      if (f -= m, e -= m, f > e) {
        e = f = e;
      }
      g[0] = e;
      g[1] = f;
    };
  }, {"../math/Quaternion":28, "../math/Transform":29, "../math/Vec3":30, "./Shape":43}], 39:[function(h, l) {
    function b(b, f, h, l) {
      var e = [], q = [], r = [], v = [], y = [], x = Math.cos, m = Math.sin;
      e.push(new k(f * x(0), f * m(0), .5 * -h));
      v.push(0);
      e.push(new k(b * x(0), b * m(0), .5 * h));
      y.push(1);
      for (var t = 0;l > t;t++) {
        var C = 2 * Math.PI / l * (t + 1), A = 2 * Math.PI / l * (t + .5);
        l - 1 > t ? (e.push(new k(f * x(C), f * m(C), .5 * -h)), v.push(2 * t + 2), e.push(new k(b * x(C), b * m(C), .5 * h)), y.push(2 * t + 3), r.push([2 * t + 2, 2 * t + 3, 2 * t + 1, 2 * t])) : r.push([0, 1, 2 * t + 1, 2 * t]);
        (1 === l % 2 || l / 2 > t) && q.push(new k(x(A), m(A), 0));
      }
      r.push(y);
      q.push(new k(0, 0, 1));
      b = [];
      for (t = 0;t < v.length;t++) {
        b.push(v[v.length - t - 1]);
      }
      r.push(b);
      this.type = g.types.CONVEXPOLYHEDRON;
      c.call(this, e, r, q);
    }
    l.exports = b;
    var g = h("./Shape"), k = h("../math/Vec3"), c = (h("../math/Quaternion"), h("./ConvexPolyhedron"));
    b.prototype = new c;
  }, {"../math/Quaternion":28, "../math/Vec3":30, "./ConvexPolyhedron":38, "./Shape":43}], 40:[function(h, l) {
    function b(b, h) {
      h = e.defaults(h, {maxValue:null, minValue:null, elementSize:1});
      this.data = b;
      this.maxValue = h.maxValue;
      this.minValue = h.minValue;
      this.elementSize = h.elementSize;
      null === h.minValue && this.updateMinValue();
      null === h.maxValue && this.updateMaxValue();
      this.cacheEnabled = !0;
      g.call(this);
      this.pillarConvex = new k;
      this.pillarOffset = new c;
      this.type = g.types.HEIGHTFIELD;
      this.updateBoundingSphereRadius();
      this._cachedPillars = {};
    }
    var g = h("./Shape"), k = h("./ConvexPolyhedron"), c = h("../math/Vec3"), e = h("../utils/Utils");
    l.exports = b;
    b.prototype = new g;
    b.prototype.update = function() {
      this._cachedPillars = {};
    };
    b.prototype.updateMinValue = function() {
      for (var b = this.data, c = b[0][0], e = 0;e !== b.length;e++) {
        for (var g = 0;g !== b[e].length;g++) {
          var k = b[e][g];
          c > k && (c = k);
        }
      }
      this.minValue = c;
    };
    b.prototype.updateMaxValue = function() {
      for (var b = this.data, c = b[0][0], e = 0;e !== b.length;e++) {
        for (var g = 0;g !== b[e].length;g++) {
          var k = b[e][g];
          k > c && (c = k);
        }
      }
      this.maxValue = c;
    };
    b.prototype.setHeightValueAtIndex = function(b, c, e) {
      this.data[b][c] = e;
      this.clearCachedConvexTrianglePillar(b, c, !1);
      0 < b && (this.clearCachedConvexTrianglePillar(b - 1, c, !0), this.clearCachedConvexTrianglePillar(b - 1, c, !1));
      0 < c && (this.clearCachedConvexTrianglePillar(b, c - 1, !0), this.clearCachedConvexTrianglePillar(b, c - 1, !1));
      0 < c && 0 < b && this.clearCachedConvexTrianglePillar(b - 1, c - 1, !0);
    };
    b.prototype.getRectMinMax = function(b, c, e, g, k) {
      k = k || [];
      for (var f = this.data, h = this.minValue;e >= b;b++) {
        for (var q = c;g >= q;q++) {
          var p = f[b][q];
          p > h && (h = p);
        }
      }
      k[0] = this.minValue;
      k[1] = h;
    };
    b.prototype.getIndexOfPosition = function(b, c, e, g) {
      var f = this.elementSize, k = this.data;
      b = Math.floor(b / f);
      c = Math.floor(c / f);
      return e[0] = b, e[1] = c, g && (0 > b && (b = 0), 0 > c && (c = 0), b >= k.length - 1 && (b = k.length - 1), c >= k[0].length - 1 && (c = k[0].length - 1)), 0 > b || 0 > c || b >= k.length - 1 || c >= k[0].length - 1 ? !1 : !0;
    };
    b.prototype.getHeightAt = function(b, c, e) {
      var f = [];
      this.getIndexOfPosition(b, c, f, e);
      b = [];
      return this.getRectMinMax(f[0], f[1] + 1, f[0], f[1] + 1, b), (b[0] + b[1]) / 2;
    };
    b.prototype.getCacheConvexTrianglePillarKey = function(b, c, e) {
      return b + "_" + c + "_" + (e ? 1 : 0);
    };
    b.prototype.getCachedConvexTrianglePillar = function(b, c, e) {
      return this._cachedPillars[this.getCacheConvexTrianglePillarKey(b, c, e)];
    };
    b.prototype.setCachedConvexTrianglePillar = function(b, c, e, g, k) {
      this._cachedPillars[this.getCacheConvexTrianglePillarKey(b, c, e)] = {convex:g, offset:k};
    };
    b.prototype.clearCachedConvexTrianglePillar = function(b, c, e) {
      delete this._cachedPillars[this.getCacheConvexTrianglePillarKey(b, c, e)];
    };
    b.prototype.getConvexTrianglePillar = function(b, e, g) {
      var f = this.pillarConvex, h = this.pillarOffset;
      if (this.cacheEnabled) {
        var q = this.getCachedConvexTrianglePillar(b, e, g);
        if (q) {
          return this.pillarConvex = q.convex, void(this.pillarOffset = q.offset);
        }
        f = new k;
        h = new c;
        this.pillarConvex = f;
        this.pillarOffset = h;
      }
      var q = this.data, l = this.elementSize, r = f.faces;
      f.vertices.length = 6;
      for (var x = 0;6 > x;x++) {
        f.vertices[x] || (f.vertices[x] = new c);
      }
      r.length = 5;
      for (x = 0;5 > x;x++) {
        r[x] || (r[x] = []);
      }
      var x = f.vertices, m = (Math.min(q[b][e], q[b + 1][e], q[b][e + 1], q[b + 1][e + 1]) - this.minValue) / 2 + this.minValue;
      g ? (h.set((b + .75) * l, (e + .75) * l, m), x[0].set(.25 * l, .25 * l, q[b + 1][e + 1] - m), x[1].set(-.75 * l, .25 * l, q[b][e + 1] - m), x[2].set(.25 * l, -.75 * l, q[b + 1][e] - m), x[3].set(.25 * l, .25 * l, -m - 1), x[4].set(-.75 * l, .25 * l, -m - 1), x[5].set(.25 * l, -.75 * l, -m - 1), r[0][0] = 0, r[0][1] = 1, r[0][2] = 2, r[1][0] = 5, r[1][1] = 4, r[1][2] = 3, r[2][0] = 2, r[2][1] = 5, r[2][2] = 3, r[2][3] = 0, r[3][0] = 3, r[3][1] = 4, r[3][2] = 1, r[3][3] = 0, r[4][0] = 1, r[4][1] = 
      4, r[4][2] = 5, r[4][3] = 2) : (h.set((b + .25) * l, (e + .25) * l, m), x[0].set(-.25 * l, -.25 * l, q[b][e] - m), x[1].set(.75 * l, -.25 * l, q[b + 1][e] - m), x[2].set(-.25 * l, .75 * l, q[b][e + 1] - m), x[3].set(-.25 * l, -.25 * l, -m - 1), x[4].set(.75 * l, -.25 * l, -m - 1), x[5].set(-.25 * l, .75 * l, -m - 1), r[0][0] = 0, r[0][1] = 1, r[0][2] = 2, r[1][0] = 5, r[1][1] = 4, r[1][2] = 3, r[2][0] = 0, r[2][1] = 2, r[2][2] = 5, r[2][3] = 3, r[3][0] = 1, r[3][1] = 0, r[3][2] = 3, r[3][3] = 
      4, r[4][0] = 4, r[4][1] = 5, r[4][2] = 2, r[4][3] = 1);
      f.computeNormals();
      f.computeEdges();
      f.updateBoundingSphereRadius();
      this.setCachedConvexTrianglePillar(b, e, g, f, h);
    };
    b.prototype.calculateLocalInertia = function(b, e) {
      return e = e || new c, e.set(0, 0, 0), e;
    };
    b.prototype.volume = function() {
      return Number.MAX_VALUE;
    };
    b.prototype.calculateWorldAABB = function(b, c, e, g) {
      e.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);
      g.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);
    };
    b.prototype.updateBoundingSphereRadius = function() {
      var b = this.data, e = this.elementSize;
      this.boundingSphereRadius = (new c(b.length * e, b[0].length * e, Math.max(Math.abs(this.maxValue), Math.abs(this.minValue)))).norm();
    };
  }, {"../math/Vec3":30, "../utils/Utils":53, "./ConvexPolyhedron":38, "./Shape":43}], 41:[function(h, l) {
    function b() {
      g.call(this);
      this.type = g.types.PARTICLE;
    }
    l.exports = b;
    var g = h("./Shape"), k = h("../math/Vec3");
    b.prototype = new g;
    b.prototype.constructor = b;
    b.prototype.calculateLocalInertia = function(b, e) {
      return e = e || new k, e.set(0, 0, 0), e;
    };
    b.prototype.volume = function() {
      return 0;
    };
    b.prototype.updateBoundingSphereRadius = function() {
      this.boundingSphereRadius = 0;
    };
    b.prototype.calculateWorldAABB = function(b, e, f, g) {
      f.copy(b);
      g.copy(b);
    };
  }, {"../math/Vec3":30, "./Shape":43}], 42:[function(h, l) {
    function b() {
      g.call(this);
      this.type = g.types.PLANE;
      this.worldNormal = new k;
      this.worldNormalNeedsUpdate = !0;
      this.boundingSphereRadius = Number.MAX_VALUE;
    }
    l.exports = b;
    var g = h("./Shape"), k = h("../math/Vec3");
    b.prototype = new g;
    b.prototype.constructor = b;
    b.prototype.computeWorldNormal = function(b) {
      var c = this.worldNormal;
      c.set(0, 0, 1);
      b.vmult(c, c);
      this.worldNormalNeedsUpdate = !1;
    };
    b.prototype.calculateLocalInertia = function(b, c) {
      return c || new k;
    };
    b.prototype.volume = function() {
      return Number.MAX_VALUE;
    };
    var c = new k;
    b.prototype.calculateWorldAABB = function(b, f, g, k) {
      c.set(0, 0, 1);
      f.vmult(c, c);
      f = Number.MAX_VALUE;
      g.set(-f, -f, -f);
      k.set(f, f, f);
      1 === c.x && (k.x = b.x);
      1 === c.y && (k.y = b.y);
      1 === c.z && (k.z = b.z);
      -1 === c.x && (g.x = b.x);
      -1 === c.y && (g.y = b.y);
      -1 === c.z && (g.z = b.z);
    };
    b.prototype.updateBoundingSphereRadius = function() {
      this.boundingSphereRadius = Number.MAX_VALUE;
    };
  }, {"../math/Vec3":30, "./Shape":43}], 43:[function(h, l) {
    function b() {
      this.id = b.idCounter++;
      this.boundingSphereRadius = this.type = 0;
      this.collisionResponse = !0;
      this.material = null;
    }
    l.exports = b;
    b = h("./Shape");
    h("../math/Vec3");
    h("../math/Quaternion");
    h("../material/Material");
    b.prototype.constructor = b;
    b.prototype.updateBoundingSphereRadius = function() {
      throw "computeBoundingSphereRadius() not implemented for shape type " + this.type;
    };
    b.prototype.volume = function() {
      throw "volume() not implemented for shape type " + this.type;
    };
    b.prototype.calculateLocalInertia = function() {
      throw "calculateLocalInertia() not implemented for shape type " + this.type;
    };
    b.idCounter = 0;
    b.types = {SPHERE:1, PLANE:2, BOX:4, COMPOUND:8, CONVEXPOLYHEDRON:16, HEIGHTFIELD:32, PARTICLE:64, CYLINDER:128, TRIMESH:256};
  }, {"../material/Material":25, "../math/Quaternion":28, "../math/Vec3":30, "./Shape":43}], 44:[function(h, l) {
    function b(b) {
      if (g.call(this), this.radius = void 0 !== b ? Number(b) : 1, this.type = g.types.SPHERE, 0 > this.radius) {
        throw Error("The sphere radius cannot be negative.");
      }
      this.updateBoundingSphereRadius();
    }
    l.exports = b;
    var g = h("./Shape"), k = h("../math/Vec3");
    b.prototype = new g;
    b.prototype.constructor = b;
    b.prototype.calculateLocalInertia = function(b, e) {
      e = e || new k;
      b = 2 * b * this.radius * this.radius / 5;
      return e.x = b, e.y = b, e.z = b, e;
    };
    b.prototype.volume = function() {
      return 4 * Math.PI * this.radius / 3;
    };
    b.prototype.updateBoundingSphereRadius = function() {
      this.boundingSphereRadius = this.radius;
    };
    b.prototype.calculateWorldAABB = function(b, e, f, g) {
      e = this.radius;
      for (var c = ["x", "y", "z"], k = 0;k < c.length;k++) {
        var h = c[k];
        f[h] = b[h] - e;
        g[h] = b[h] + e;
      }
    };
  }, {"../math/Vec3":30, "./Shape":43}], 45:[function(h, l) {
    function b(b, c) {
      g.call(this);
      this.type = g.types.TRIMESH;
      this.vertices = new Float32Array(b);
      this.indices = new Int16Array(c);
      this.normals = new Float32Array(c.length);
      this.aabb = new e;
      this.edges = null;
      this.scale = new k(1, 1, 1);
      this.tree = new f;
      this.updateEdges();
      this.updateNormals();
      this.updateAABB();
      this.updateBoundingSphereRadius();
      this.updateTree();
    }
    l.exports = b;
    var g = h("./Shape"), k = h("../math/Vec3"), c = (h("../math/Quaternion"), h("../math/Transform")), e = h("../collision/AABB"), f = h("../utils/Octree");
    b.prototype = new g;
    b.prototype.constructor = b;
    var q = new k;
    b.prototype.updateTree = function() {
      var b = this.tree;
      b.reset();
      b.aabb.copy(this.aabb);
      var c = this.scale;
      b.aabb.lowerBound.x *= 1 / c.x;
      b.aabb.lowerBound.y *= 1 / c.y;
      b.aabb.lowerBound.z *= 1 / c.z;
      b.aabb.upperBound.x *= 1 / c.x;
      b.aabb.upperBound.y *= 1 / c.y;
      b.aabb.upperBound.z *= 1 / c.z;
      for (var c = new e, f = new k, m = new k, g = new k, h = [f, m, g], q = 0;q < this.indices.length / 3;q++) {
        var p = 3 * q;
        this._getUnscaledVertex(this.indices[p], f);
        this._getUnscaledVertex(this.indices[p + 1], m);
        this._getUnscaledVertex(this.indices[p + 2], g);
        c.setFromPoints(h);
        b.insert(c, q);
      }
      b.removeEmptyNodes();
    };
    var r = new e;
    b.prototype.getTrianglesInAABB = function(b, c) {
      r.copy(b);
      var e = this.scale;
      b = e.x;
      var f = e.y, e = e.z, m = r.lowerBound, g = r.upperBound;
      return m.x /= b, m.y /= f, m.z /= e, g.x /= b, g.y /= f, g.z /= e, this.tree.aabbQuery(r, c);
    };
    b.prototype.setScale = function(b) {
      var c = b.x === b.y === b.z;
      this.scale.x === this.scale.y === this.scale.z && c || this.updateNormals();
      this.scale.copy(b);
      this.updateAABB();
      this.updateBoundingSphereRadius();
    };
    b.prototype.updateNormals = function() {
      for (var c = this.normals, e = 0;e < this.indices.length / 3;e++) {
        var f = 3 * e, g = this.indices[f + 1], k = this.indices[f + 2];
        this.getVertex(this.indices[f], y);
        this.getVertex(g, x);
        this.getVertex(k, m);
        b.computeNormal(x, y, m, q);
        c[f] = q.x;
        c[f + 1] = q.y;
        c[f + 2] = q.z;
      }
    };
    b.prototype.updateEdges = function() {
      for (var b = {}, c = function() {
        b[g > m ? m + "_" + g : g + "_" + m] = !0;
      }, e = 0;e < this.indices.length / 3;e++) {
        var f = 3 * e, m = this.indices[f], g = this.indices[f + 1], f = this.indices[f + 2];
        c(m, g);
        c(g, f);
        c(f, m);
      }
      c = Object.keys(b);
      this.edges = new Int16Array(2 * c.length);
      for (e = 0;e < c.length;e++) {
        f = c[e].split("_"), this.edges[2 * e] = parseInt(f[0], 10), this.edges[2 * e + 1] = parseInt(f[1], 10);
      }
    };
    b.prototype.getEdgeVertex = function(b, c, e) {
      this.getVertex(this.edges[2 * b + (c ? 1 : 0)], e);
    };
    var w = new k, p = new k;
    b.prototype.getEdgeVector = function(b, c) {
      this.getEdgeVertex(b, 0, w);
      this.getEdgeVertex(b, 1, p);
      p.vsub(w, c);
    };
    var u = new k, v = new k;
    b.computeNormal = function(b, c, e, f) {
      c.vsub(b, v);
      e.vsub(c, u);
      u.cross(v, f);
      f.isZero() || f.normalize();
    };
    var y = new k, x = new k, m = new k;
    b.prototype.getVertex = function(b, c) {
      var e = this.scale;
      return this._getUnscaledVertex(b, c), c.x *= e.x, c.y *= e.y, c.z *= e.z, c;
    };
    b.prototype._getUnscaledVertex = function(b, c) {
      b *= 3;
      var e = this.vertices;
      return c.set(e[b], e[b + 1], e[b + 2]);
    };
    b.prototype.getWorldVertex = function(b, e, f, m) {
      return this.getVertex(b, m), c.pointToWorldFrame(e, f, m, m), m;
    };
    b.prototype.getTriangleVertices = function(b, c, e, f) {
      b *= 3;
      this.getVertex(this.indices[b], c);
      this.getVertex(this.indices[b + 1], e);
      this.getVertex(this.indices[b + 2], f);
    };
    b.prototype.getNormal = function(b, c) {
      b *= 3;
      return c.set(this.normals[b], this.normals[b + 1], this.normals[b + 2]);
    };
    var t = new e;
    b.prototype.calculateLocalInertia = function(b, c) {
      this.computeLocalAABB(t);
      var e = t.upperBound.x - t.lowerBound.x, f = t.upperBound.y - t.lowerBound.y, m = t.upperBound.z - t.lowerBound.z;
      return c.set(1 / 12 * b * (4 * f * f + 4 * m * m), 1 / 12 * b * (4 * e * e + 4 * m * m), 1 / 12 * b * (4 * f * f + 4 * e * e));
    };
    var C = new k;
    b.prototype.computeLocalAABB = function(b) {
      var c = b.lowerBound;
      b = b.upperBound;
      var e = this.vertices.length, f = (this.vertices, C);
      this.getVertex(0, f);
      c.copy(f);
      b.copy(f);
      for (var m = 0;m !== e;m++) {
        this.getVertex(m, f), f.x < c.x ? c.x = f.x : f.x > b.x && (b.x = f.x), f.y < c.y ? c.y = f.y : f.y > b.y && (b.y = f.y), f.z < c.z ? c.z = f.z : f.z > b.z && (b.z = f.z);
      }
    };
    b.prototype.updateAABB = function() {
      this.computeLocalAABB(this.aabb);
    };
    b.prototype.updateBoundingSphereRadius = function() {
      for (var b = 0, c = this.vertices, e = new k, f = 0, c = c.length / 3;f !== c;f++) {
        this.getVertex(f, e);
        var m = e.norm2();
        m > b && (b = m);
      }
      this.boundingSphereRadius = Math.sqrt(b);
    };
    var A = (new k, new c), D = new e;
    b.prototype.calculateWorldAABB = function(b, c, e, f) {
      A.position = b;
      A.quaternion = c;
      this.aabb.toWorldFrame(A, D);
      e.copy(D.lowerBound);
      f.copy(D.upperBound);
    };
    b.prototype.volume = function() {
      return 4 * Math.PI * this.boundingSphereRadius / 3;
    };
    b.createTorus = function(c, e, f, m, g) {
      c = c || 1;
      e = e || .5;
      f = f || 8;
      m = m || 6;
      g = g || 2 * Math.PI;
      for (var k = [], h = [], q = 0;f >= q;q++) {
        for (var p = 0;m >= p;p++) {
          var l = p / m * g, t = q / f * Math.PI * 2;
          k.push((c + e * Math.cos(t)) * Math.cos(l), (c + e * Math.cos(t)) * Math.sin(l), e * Math.sin(t));
        }
      }
      for (q = 1;f >= q;q++) {
        for (p = 1;m >= p;p++) {
          c = (m + 1) * (q - 1) + p - 1, e = (m + 1) * (q - 1) + p, g = (m + 1) * q + p, h.push((m + 1) * q + p - 1, c, g), h.push(c, e, g);
        }
      }
      return new b(k, h);
    };
  }, {"../collision/AABB":3, "../math/Quaternion":28, "../math/Transform":29, "../math/Vec3":30, "../utils/Octree":50, "./Shape":43}], 46:[function(h, l) {
    function b() {
      g.call(this);
      this.iterations = 10;
      this.tolerance = 1E-7;
    }
    l.exports = b;
    var g = (h("../math/Vec3"), h("../math/Quaternion"), h("./Solver"));
    b.prototype = new g;
    var k = [], c = [], e = [];
    b.prototype.solve = function(b, g) {
      var f, h, q, l, v = 0, y = this.iterations, x = this.tolerance * this.tolerance, m = this.equations, t = m.length;
      g = g.bodies;
      var C = g.length;
      if (0 !== t) {
        for (q = 0;q !== C;q++) {
          g[q].updateSolveMassProperties();
        }
      }
      c.length = t;
      e.length = t;
      k.length = t;
      for (q = 0;q !== t;q++) {
        var A = m[q];
        k[q] = 0;
        e[q] = A.computeB(b);
        c[q] = 1 / A.computeC();
      }
      if (0 !== t) {
        for (q = 0;q !== C;q++) {
          A = g[q], v = A.wlambda, A.vlambda.set(0, 0, 0), v && v.set(0, 0, 0);
        }
        for (v = 0;v !== y;v++) {
          for (var D = q = 0;D !== t;D++) {
            A = m[D], f = e[D], h = c[D], b = k[D], l = A.computeGWlambda(), f = h * (f - l - A.eps * b), b + f < A.minForce ? f = A.minForce - b : b + f > A.maxForce && (f = A.maxForce - b), k[D] += f, q += 0 < f ? f : -f, A.addToWlambda(f);
          }
          if (x > q * q) {
            break;
          }
        }
        for (q = 0;q !== C;q++) {
          A = g[q], y = A.velocity, x = A.angularVelocity, y.vadd(A.vlambda, y), x && x.vadd(A.wlambda, x);
        }
      }
      return v;
    };
  }, {"../math/Quaternion":28, "../math/Vec3":30, "./Solver":47}], 47:[function(h, l) {
    function b() {
      this.equations = [];
    }
    l.exports = b;
    b.prototype.solve = function() {
      return 0;
    };
    b.prototype.addEquation = function(b) {
      b.enabled && this.equations.push(b);
    };
    b.prototype.removeEquation = function(b) {
      var g = this.equations;
      b = g.indexOf(b);
      -1 !== b && g.splice(b, 1);
    };
    b.prototype.removeAllEquations = function() {
      this.equations.length = 0;
    };
  }, {}], 48:[function(h, l) {
    function b(b) {
      e.call(this);
      this.iterations = 10;
      this.tolerance = 1E-7;
      this.subsolver = b;
      this.nodes = [];
      for (this.nodePool = [];128 > this.nodePool.length;) {
        this.nodePool.push(this.createNode());
      }
    }
    function g(b) {
      for (var c = b.length, e = 0;e !== c;e++) {
        var f = b[e];
        if (!(f.visited || f.body.type & w)) {
          return f;
        }
      }
      return !1;
    }
    function k(b, c, e) {
      c.push(b.body);
      c = b.eqs.length;
      for (var f = 0;f !== c;f++) {
        var m = b.eqs[f];
        -1 === e.indexOf(m) && e.push(m);
      }
    }
    function c(b, c) {
      return c.id - b.id;
    }
    l.exports = b;
    var e = (h("../math/Vec3"), h("../math/Quaternion"), h("./Solver"));
    h = h("../objects/Body");
    b.prototype = new e;
    var f = [], q = [], r = {bodies:[]}, w = h.STATIC, p = [];
    b.prototype.createNode = function() {
      return {body:null, children:[], eqs:[], visited:!1};
    };
    b.prototype.solve = function(b, e) {
      var h = this.nodePool, l = e.bodies, m = this.equations, t = m.length, w = l.length;
      for (e = this.subsolver;h.length < w;) {
        h.push(this.createNode());
      }
      f.length = w;
      for (var u = 0;w > u;u++) {
        f[u] = h[u];
      }
      for (u = 0;u !== w;u++) {
        h = f[u], h.body = l[u], h.children.length = 0, h.eqs.length = 0, h.visited = !1;
      }
      for (h = 0;h !== t;h++) {
        var w = m[h], u = l.indexOf(w.bi), v = l.indexOf(w.bj), u = f[u], v = f[v];
        u.children.push(v);
        u.eqs.push(w);
        v.children.push(u);
        v.eqs.push(w);
      }
      l = 0;
      m = q;
      e.tolerance = this.tolerance;
      for (e.iterations = this.iterations;u = g(f);) {
        m.length = 0;
        r.bodies.length = 0;
        w = u;
        u = k;
        t = r.bodies;
        h = m;
        p.push(w);
        w.visited = !0;
        for (u(w, t, h);p.length;) {
          for (v = p.pop();w = g(v.children);) {
            w.visited = !0, u(w, t, h), p.push(w);
          }
        }
        t = m.length;
        m = m.sort(c);
        for (u = 0;u !== t;u++) {
          e.addEquation(m[u]);
        }
        e.solve(b, r);
        e.removeAllEquations();
        l++;
      }
      return l;
    };
  }, {"../math/Quaternion":28, "../math/Vec3":30, "../objects/Body":31, "./Solver":47}], 49:[function(h, l) {
    h = function() {
    };
    l.exports = h;
    h.prototype = {constructor:h, addEventListener:function(b, g) {
      void 0 === this._listeners && (this._listeners = {});
      var k = this._listeners;
      return void 0 === k[b] && (k[b] = []), -1 === k[b].indexOf(g) && k[b].push(g), this;
    }, hasEventListener:function(b, g) {
      if (void 0 === this._listeners) {
        return !1;
      }
      var k = this._listeners;
      return void 0 !== k[b] && -1 !== k[b].indexOf(g) ? !0 : !1;
    }, removeEventListener:function(b, g) {
      if (void 0 === this._listeners) {
        return this;
      }
      var k = this._listeners;
      if (void 0 === k[b]) {
        return this;
      }
      g = k[b].indexOf(g);
      return -1 !== g && k[b].splice(g, 1), this;
    }, dispatchEvent:function(b) {
      if (void 0 === this._listeners) {
        return this;
      }
      var g = this._listeners[b.type];
      if (void 0 !== g) {
        b.target = this;
        for (var k = 0, c = g.length;c > k;k++) {
          g[k].call(this, b);
        }
      }
      return this;
    }};
  }, {}], 50:[function(h, l) {
    function b(b) {
      b = b || {};
      this.root = b.root || null;
      this.aabb = b.aabb ? b.aabb.clone() : new k;
      this.data = [];
      this.children = [];
    }
    function g(c, e) {
      e = e || {};
      e.root = null;
      e.aabb = c;
      b.call(this, e);
      this.maxDepth = "undefined" != typeof e.maxDepth ? e.maxDepth : 8;
    }
    var k = h("../collision/AABB"), c = h("../math/Vec3");
    l.exports = g;
    g.prototype = new b;
    b.prototype.reset = function() {
      this.children.length = this.data.length = 0;
    };
    b.prototype.insert = function(b, c, e) {
      var f = this.data;
      if (e = e || 0, !this.aabb.contains(b)) {
        return !1;
      }
      var g = this.children;
      if (e < (this.maxDepth || this.root.maxDepth)) {
        var k = !1;
        g.length || (this.subdivide(), k = !0);
        for (var h = 0;8 !== h;h++) {
          if (g[h].insert(b, c, e + 1)) {
            return !0;
          }
        }
        k && (g.length = 0);
      }
      return f.push(c), !0;
    };
    var e = new c;
    b.prototype.subdivide = function() {
      var f = this.aabb, g = f.lowerBound, h = f.upperBound, f = this.children;
      f.push(new b({aabb:new k({lowerBound:new c(0, 0, 0)})}), new b({aabb:new k({lowerBound:new c(1, 0, 0)})}), new b({aabb:new k({lowerBound:new c(1, 1, 0)})}), new b({aabb:new k({lowerBound:new c(1, 1, 1)})}), new b({aabb:new k({lowerBound:new c(0, 1, 1)})}), new b({aabb:new k({lowerBound:new c(0, 0, 1)})}), new b({aabb:new k({lowerBound:new c(1, 0, 1)})}), new b({aabb:new k({lowerBound:new c(0, 1, 0)})}));
      h.vsub(g, e);
      e.scale(.5, e);
      for (var h = this.root || this, p = 0;8 !== p;p++) {
        var l = f[p];
        l.root = h;
        var v = l.aabb.lowerBound;
        v.x *= e.x;
        v.y *= e.y;
        v.z *= e.z;
        v.vadd(g, v);
        v.vadd(e, l.aabb.upperBound);
      }
    };
    b.prototype.aabbQuery = function(b, c) {
      for (var e = (this.data, this.children, [this]);e.length;) {
        var f = e.pop();
        f.aabb.overlaps(b) && Array.prototype.push.apply(c, f.data);
        Array.prototype.push.apply(e, f.children);
      }
      return c;
    };
    var f = new k;
    b.prototype.rayQuery = function(b, c, e) {
      return b.getAABB(f), f.toLocalFrame(c, f), this.aabbQuery(f, e), e;
    };
    b.prototype.removeEmptyNodes = function() {
      for (var b = [this];b.length;) {
        for (var c = b.pop(), e = c.children.length - 1;0 <= e;e--) {
          c.children[e].data.length || c.children.splice(e, 1);
        }
        Array.prototype.push.apply(b, c.children);
      }
    };
  }, {"../collision/AABB":3, "../math/Vec3":30}], 51:[function(h, l) {
    function b() {
      this.objects = [];
      this.type = Object;
    }
    l.exports = b;
    b.prototype.release = function() {
      for (var b = arguments.length, k = 0;k !== b;k++) {
        this.objects.push(arguments[k]);
      }
    };
    b.prototype.get = function() {
      return 0 === this.objects.length ? this.constructObject() : this.objects.pop();
    };
    b.prototype.constructObject = function() {
      throw Error("constructObject() not implemented in this Pool subclass yet!");
    };
  }, {}], 52:[function(h, l) {
    function b() {
      this.data = {keys:[]};
    }
    l.exports = b;
    b.prototype.get = function(b, k) {
      b > k && (b = k = b);
      return this.data[b + "-" + k];
    };
    b.prototype.set = function(b, k, c) {
      b > k && (b = k = b);
      var e = b + "-" + k;
      this.get(b, k) || this.data.keys.push(e);
      this.data[e] = c;
    };
    b.prototype.reset = function() {
      for (var b = this.data, k = b.keys;0 < k.length;) {
        var c = k.pop();
        delete b[c];
      }
    };
  }, {}], 53:[function(h, l) {
    function b() {
    }
    l.exports = b;
    b.defaults = function(b, k) {
      b = b || {};
      for (var c in k) {
        c in b || (b[c] = k[c]);
      }
      return b;
    };
  }, {}], 54:[function(h, l) {
    function b() {
      k.call(this);
      this.type = g;
    }
    l.exports = b;
    var g = h("../math/Vec3"), k = h("./Pool");
    b.prototype = new k;
    b.prototype.constructObject = function() {
      return new g;
    };
  }, {"../math/Vec3":30, "./Pool":51}], 55:[function(h, l) {
    function b(b) {
      this.contactPointPool = [];
      this.frictionEquationPool = [];
      this.result = [];
      this.frictionResult = [];
      this.v3pool = new q;
      this.world = b;
      this.currentContactMaterial = null;
      this.enableFrictionReduction = !1;
    }
    l.exports = b;
    l = h("../collision/AABB");
    var g = h("../shapes/Shape"), k = h("../collision/Ray"), c = h("../math/Vec3"), e = h("../math/Transform"), f = (h("../shapes/ConvexPolyhedron"), h("../math/Quaternion")), q = (h("../solver/Solver"), h("../utils/Vec3Pool")), r = h("../equations/ContactEquation"), w = h("../equations/FrictionEquation");
    b.prototype.createContactEquation = function(b, c, e, f, m, g) {
      var k;
      this.contactPointPool.length ? (k = this.contactPointPool.pop(), k.bi = b, k.bj = c) : k = new r(b, c);
      k.enabled = b.collisionResponse && c.collisionResponse && e.collisionResponse && f.collisionResponse;
      var h = this.currentContactMaterial;
      k.restitution = h.restitution;
      k.setSpookParams(h.contactEquationStiffness, h.contactEquationRelaxation, this.world.dt);
      b = e.material || b.material;
      c = f.material || c.material;
      return b && c && 0 <= b.restitution && 0 <= c.restitution && (k.restitution = b.restitution * c.restitution), k.si = m || e, k.sj = g || f, k;
    };
    b.prototype.createFrictionEquationsFromContact = function(b, c) {
      var e = b.bi, f = b.bj, m = this.world, g = this.currentContactMaterial, k = g.friction, h = b.si.material || e.material, q = b.sj.material || f.material;
      if (h && q && 0 <= h.friction && 0 <= q.friction && (k = h.friction * q.friction), 0 < k) {
        k *= m.gravity.length();
        h = e.invMass + f.invMass;
        0 < h && (h = 1 / h);
        var p = this.frictionEquationPool, q = p.length ? p.pop() : new w(e, f, k * h), p = p.length ? p.pop() : new w(e, f, k * h);
        return q.bi = p.bi = e, q.bj = p.bj = f, q.minForce = p.minForce = -k * h, q.maxForce = p.maxForce = k * h, q.ri.copy(b.ri), q.rj.copy(b.rj), p.ri.copy(b.ri), p.rj.copy(b.rj), b.ni.tangents(q.t, p.t), q.setSpookParams(g.frictionEquationStiffness, g.frictionEquationRelaxation, m.dt), p.setSpookParams(g.frictionEquationStiffness, g.frictionEquationRelaxation, m.dt), q.enabled = p.enabled = b.enabled, c.push(q, p), !0;
      }
      return !1;
    };
    var p = new c, u = new c, v = new c;
    b.prototype.createFrictionFromAverage = function(b) {
      var c = this.result[this.result.length - 1];
      if (this.createFrictionEquationsFromContact(c, this.frictionResult) && 1 !== b) {
        var e = this.frictionResult[this.frictionResult.length - 2], f = this.frictionResult[this.frictionResult.length - 1];
        p.setZero();
        u.setZero();
        v.setZero();
        for (var m = c.bi, g = (c.bj, 0);g !== b;g++) {
          c = this.result[this.result.length - 1 - g], c.bodyA !== m ? (p.vadd(c.ni, p), u.vadd(c.ri, u), v.vadd(c.rj, v)) : (p.vsub(c.ni, p), u.vadd(c.rj, u), v.vadd(c.ri, v));
        }
        b = 1 / b;
        u.scale(b, e.ri);
        v.scale(b, e.rj);
        f.ri.copy(e.ri);
        f.rj.copy(e.rj);
        p.normalize();
        p.tangents(e.t, f.t);
      }
    };
    var y = new c, x = new c, m = new f, t = new f;
    b.prototype.getContacts = function(b, c, e, f, g, k, h) {
      this.contactPointPool = g;
      this.frictionEquationPool = h;
      this.result = f;
      this.frictionResult = k;
      f = 0;
      for (g = b.length;f !== g;f++) {
        k = b[f];
        h = c[f];
        var q = null;
        k.material && h.material && (q = e.getContactMaterial(k.material, h.material) || null);
        for (var p = 0;p < k.shapes.length;p++) {
          k.quaternion.mult(k.shapeOrientations[p], m);
          k.quaternion.vmult(k.shapeOffsets[p], y);
          y.vadd(k.position, y);
          for (var l = k.shapes[p], r = 0;r < h.shapes.length;r++) {
            h.quaternion.mult(h.shapeOrientations[r], t);
            h.quaternion.vmult(h.shapeOffsets[r], x);
            x.vadd(h.position, x);
            var w = h.shapes[r];
            if (!(y.distanceTo(x) > l.boundingSphereRadius + w.boundingSphereRadius)) {
              var C = null;
              l.material && w.material && (C = e.getContactMaterial(l.material, w.material) || null);
              this.currentContactMaterial = C || q || e.defaultContactMaterial;
              (C = this[l.type | w.type]) && (l.type < w.type ? C.call(this, l, w, y, x, m, t, k, h, l, w) : C.call(this, w, l, x, y, t, m, h, k, l, w));
            }
          }
        }
      }
    };
    b.prototype[g.types.BOX | g.types.BOX] = b.prototype.boxBox = function(b, c, e, f, m, g, k, h) {
      b.convexPolyhedronRepresentation.material = b.material;
      c.convexPolyhedronRepresentation.material = c.material;
      b.convexPolyhedronRepresentation.collisionResponse = b.collisionResponse;
      c.convexPolyhedronRepresentation.collisionResponse = c.collisionResponse;
      this.convexConvex(b.convexPolyhedronRepresentation, c.convexPolyhedronRepresentation, e, f, m, g, k, h, b, c);
    };
    b.prototype[g.types.BOX | g.types.CONVEXPOLYHEDRON] = b.prototype.boxConvex = function(b, c, e, f, m, g, k, h) {
      b.convexPolyhedronRepresentation.material = b.material;
      b.convexPolyhedronRepresentation.collisionResponse = b.collisionResponse;
      this.convexConvex(b.convexPolyhedronRepresentation, c, e, f, m, g, k, h, b, c);
    };
    b.prototype[g.types.BOX | g.types.PARTICLE] = b.prototype.boxParticle = function(b, c, e, f, m, g, k, h) {
      b.convexPolyhedronRepresentation.material = b.material;
      b.convexPolyhedronRepresentation.collisionResponse = b.collisionResponse;
      this.convexParticle(b.convexPolyhedronRepresentation, c, e, f, m, g, k, h, b, c);
    };
    b.prototype[g.types.SPHERE] = b.prototype.sphereSphere = function(b, c, e, f, m, g, k, h) {
      m = this.createContactEquation(k, h, b, c);
      f.vsub(e, m.ni);
      m.ni.normalize();
      m.ri.copy(m.ni);
      m.rj.copy(m.ni);
      m.ri.mult(b.radius, m.ri);
      m.rj.mult(-c.radius, m.rj);
      m.ri.vadd(e, m.ri);
      m.ri.vsub(k.position, m.ri);
      m.rj.vadd(f, m.rj);
      m.rj.vsub(h.position, m.rj);
      this.result.push(m);
      this.createFrictionEquationsFromContact(m, this.frictionResult);
    };
    var C = new c, A = new c, D = new c;
    b.prototype[g.types.PLANE | g.types.TRIMESH] = b.prototype.planeTrimesh = function(b, f, m, g, k, h, q, p) {
      var l = new c;
      C.set(0, 0, 1);
      k.vmult(C, C);
      for (k = 0;k < f.vertices.length / 3;k++) {
        f.getVertex(k, l);
        var t = new c;
        t.copy(l);
        e.pointToWorldFrame(g, h, t, l);
        t = A;
        l.vsub(m, t);
        if (0 >= C.dot(t)) {
          var r = this.createContactEquation(q, p, b, f);
          r.ni.copy(C);
          var w = D;
          C.scale(t.dot(C), w);
          l.vsub(w, w);
          r.ri.copy(w);
          r.ri.vsub(q.position, r.ri);
          r.rj.copy(l);
          r.rj.vsub(p.position, r.rj);
          this.result.push(r);
          this.createFrictionEquationsFromContact(r, this.frictionResult);
        }
      }
    };
    var F = new c, G = new c, B = (new c, new c), K = new c, H = new c, M = new c, J = new c, P = new c, O = new c, N = new c, ba = new c, da = new c, ca = new c, ia = new l, R = [];
    b.prototype[g.types.SPHERE | g.types.TRIMESH] = b.prototype.sphereTrimesh = function(b, c, f, m, g, h, q, p) {
      e.pointToLocalFrame(m, h, f, O);
      g = b.radius;
      ia.lowerBound.set(O.x - g, O.y - g, O.z - g);
      ia.upperBound.set(O.x + g, O.y + g, O.z + g);
      c.getTrianglesInAABB(ia, R);
      var l = b.radius * b.radius;
      for (g = 0;g < R.length;g++) {
        for (var t = 0;3 > t;t++) {
          if (c.getVertex(c.indices[3 * R[g] + t], B), B.vsub(O, G), G.norm2() <= l) {
            K.copy(B);
            e.pointToWorldFrame(m, h, K, B);
            B.vsub(f, G);
            var r = this.createContactEquation(q, p, b, c);
            r.ni.copy(G);
            r.ni.normalize();
            r.ri.copy(r.ni);
            r.ri.scale(b.radius, r.ri);
            r.ri.vadd(f, r.ri);
            r.ri.vsub(q.position, r.ri);
            r.rj.copy(B);
            r.rj.vsub(p.position, r.rj);
            this.result.push(r);
            this.createFrictionEquationsFromContact(r, this.frictionResult);
          }
        }
      }
      for (g = 0;g < R.length;g++) {
        for (t = 0;3 > t;t++) {
          c.getVertex(c.indices[3 * R[g] + t], H), c.getVertex(c.indices[3 * R[g] + (t + 1) % 3], M), M.vsub(H, J), O.vsub(M, N), f = N.dot(J), O.vsub(H, N), r = N.dot(J), 0 < r && 0 > f && (O.vsub(H, N), P.copy(J), P.normalize(), r = N.dot(P), P.scale(r, N), N.vadd(H, N), f = N.distanceTo(O), f < b.radius && (r = this.createContactEquation(q, p, b, c), N.vsub(O, r.ni), r.ni.normalize(), r.ni.scale(b.radius, r.ri), e.pointToWorldFrame(m, h, N, N), N.vsub(p.position, r.rj), e.vectorToWorldFrame(h, 
          r.ni, r.ni), e.vectorToWorldFrame(h, r.ri, r.ri), this.result.push(r), this.createFrictionEquationsFromContact(r, this.frictionResult)));
        }
      }
      g = 0;
      for (t = R.length;g !== t;g++) {
        if (c.getTriangleVertices(R[g], ba, da, ca), c.getNormal(R[g], F), O.vsub(ba, N), f = N.dot(F), F.scale(f, N), O.vsub(N, N), f = N.distanceTo(O), k.pointInTriangle(N, ba, da, ca) && f < b.radius) {
          r = this.createContactEquation(q, p, b, c), N.vsub(O, r.ni), r.ni.normalize(), r.ni.scale(b.radius, r.ri), e.pointToWorldFrame(m, h, N, N), N.vsub(p.position, r.rj), e.vectorToWorldFrame(h, r.ni, r.ni), e.vectorToWorldFrame(h, r.ri, r.ri), this.result.push(r), this.createFrictionEquationsFromContact(r, this.frictionResult);
        }
      }
      R.length = 0;
    };
    var S = new c, I = new c;
    b.prototype[g.types.SPHERE | g.types.PLANE] = b.prototype.spherePlane = function(b, c, e, f, m, g, k, h) {
      c = this.createContactEquation(k, h, b, c);
      if (c.ni.set(0, 0, 1), g.vmult(c.ni, c.ni), c.ni.negate(c.ni), c.ni.normalize(), c.ni.mult(b.radius, c.ri), e.vsub(f, S), c.ni.mult(c.ni.dot(S), I), S.vsub(I, c.rj), -S.dot(c.ni) <= b.radius) {
        b = c.ri, g = c.rj, b.vadd(e, b), b.vsub(k.position, b), g.vadd(f, g), g.vsub(h.position, g), this.result.push(c), this.createFrictionEquationsFromContact(c, this.frictionResult);
      }
    };
    var V = new c, ka = new c, ma = new c, Q = new c, Z = new c, ra = new c, pa = new c, fa = [new c, new c, new c, new c, new c, new c], X = new c, ta = new c, Ba = new c, Aa = new c;
    b.prototype[g.types.SPHERE | g.types.BOX] = b.prototype.sphereBox = function(b, c, e, f, m, g, k, h) {
      m = this.v3pool;
      e.vsub(f, Q);
      c.getSideNormals(fa, g);
      g = b.radius;
      for (var q = !1, p = null, l = 0, t = 0, r = 0, w = null, C = 0, u = fa.length;C !== u && !1 === q;C++) {
        var v = Z;
        v.copy(fa[C]);
        var A = v.norm();
        v.normalize();
        var y = Q.dot(v);
        if (A + g > y && 0 < y) {
          var B = ra, x = pa;
          B.copy(fa[(C + 1) % 3]);
          x.copy(fa[(C + 2) % 3]);
          var D = B.norm(), F = x.norm();
          B.normalize();
          x.normalize();
          var G = Q.dot(B), I = Q.dot(x);
          D > G && G > -D && F > I && I > -F && (y = Math.abs(y - A - g), (null === w || w > y) && (w = y, t = G, r = I, p = A, ta.copy(v), Ba.copy(B), Aa.copy(x), l++));
        }
      }
      l && (q = !0, l = this.createContactEquation(k, h, b, c), ta.mult(-g, l.ri), l.ni.copy(ta), l.ni.negate(l.ni), ta.mult(p, ta), Ba.mult(t, Ba), ta.vadd(Ba, ta), Aa.mult(r, Aa), ta.vadd(Aa, l.rj), l.ri.vadd(e, l.ri), l.ri.vsub(k.position, l.ri), l.rj.vadd(f, l.rj), l.rj.vsub(h.position, l.rj), this.result.push(l), this.createFrictionEquationsFromContact(l, this.frictionResult));
      y = m.get();
      for (p = 0;2 !== p && !q;p++) {
        for (t = 0;2 !== t && !q;t++) {
          for (r = 0;2 !== r && !q;r++) {
            if (y.set(0, 0, 0), p ? y.vadd(fa[0], y) : y.vsub(fa[0], y), t ? y.vadd(fa[1], y) : y.vsub(fa[1], y), r ? y.vadd(fa[2], y) : y.vsub(fa[2], y), f.vadd(y, X), X.vsub(e, X), X.norm2() < g * g) {
              q = !0, l = this.createContactEquation(k, h, b, c), l.ri.copy(X), l.ri.normalize(), l.ni.copy(l.ri), l.ri.mult(g, l.ri), l.rj.copy(y), l.ri.vadd(e, l.ri), l.ri.vsub(k.position, l.ri), l.rj.vadd(f, l.rj), l.rj.vsub(h.position, l.rj), this.result.push(l), this.createFrictionEquationsFromContact(l, this.frictionResult);
            }
          }
        }
      }
      m.release(y);
      w = m.get();
      C = m.get();
      l = m.get();
      u = m.get();
      y = m.get();
      v = fa.length;
      for (p = 0;p !== v && !q;p++) {
        for (t = 0;t !== v && !q;t++) {
          if (p % 3 !== t % 3) {
            fa[t].cross(fa[p], w);
            w.normalize();
            fa[p].vadd(fa[t], C);
            l.copy(e);
            l.vsub(C, l);
            l.vsub(f, l);
            A = l.dot(w);
            w.mult(A, u);
            for (r = 0;r === p % 3 || r === t % 3;) {
              r++;
            }
            y.copy(e);
            y.vsub(u, y);
            y.vsub(C, y);
            y.vsub(f, y);
            A = Math.abs(A);
            B = y.norm();
            A < fa[r].norm() && g > B && (q = !0, r = this.createContactEquation(k, h, b, c), C.vadd(u, r.rj), r.rj.copy(r.rj), y.negate(r.ni), r.ni.normalize(), r.ri.copy(r.rj), r.ri.vadd(f, r.ri), r.ri.vsub(e, r.ri), r.ri.normalize(), r.ri.mult(g, r.ri), r.ri.vadd(e, r.ri), r.ri.vsub(k.position, r.ri), r.rj.vadd(f, r.rj), r.rj.vsub(h.position, r.rj), this.result.push(r), this.createFrictionEquationsFromContact(r, this.frictionResult));
          }
        }
      }
      m.release(w, C, l, u, y);
    };
    var Ca = new c, sa = new c, ua = new c, Va = new c, qd = new c, qb = new c, kb = new c, Fc = new c, aa = new c, yb = new c;
    b.prototype[g.types.SPHERE | g.types.CONVEXPOLYHEDRON] = b.prototype.sphereConvex = function(b, c, e, f, m, g, k, h) {
      m = this.v3pool;
      e.vsub(f, Ca);
      for (var q = c.faceNormals, p = c.faces, l = c.vertices, t = b.radius, r = 0;r !== l.length;r++) {
        var w = qd;
        g.vmult(l[r], w);
        f.vadd(w, w);
        var C = Va;
        if (w.vsub(e, C), C.norm2() < t * t) {
          return b = this.createContactEquation(k, h, b, c), b.ri.copy(C), b.ri.normalize(), b.ni.copy(b.ri), b.ri.mult(t, b.ri), w.vsub(f, b.rj), b.ri.vadd(e, b.ri), b.ri.vsub(k.position, b.ri), b.rj.vadd(f, b.rj), b.rj.vsub(h.position, b.rj), this.result.push(b), void this.createFrictionEquationsFromContact(b, this.frictionResult);
        }
      }
      r = 0;
      for (w = p.length;r !== w;r++) {
        var C = p[r], u = qb;
        g.vmult(q[r], u);
        var v = kb;
        g.vmult(l[C[0]], v);
        v.vadd(f, v);
        var y = Fc;
        u.mult(-t, y);
        e.vadd(y, y);
        var A = aa;
        y.vsub(v, A);
        y = A.dot(u);
        A = yb;
        if (e.vsub(v, A), 0 > y && 0 < A.dot(u)) {
          for (var v = [], A = 0, B = C.length;A !== B;A++) {
            var x = m.get();
            g.vmult(l[C[A]], x);
            f.vadd(x, x);
            v.push(x);
          }
          a: {
            for (var A = v, B = u, x = e, D = null, F = A.length, G = 0;G !== F;G++) {
              var I = A[G], H = V;
              A[(G + 1) % F].vsub(I, H);
              var K = ka;
              H.cross(B, K);
              H = ma;
              x.vsub(I, H);
              I = K.dot(H);
              if (!(null === D || 0 < I && !0 === D || 0 >= I && !1 === D)) {
                A = !1;
                break a;
              }
              null === D && (D = 0 < I);
            }
            A = !0;
          }
          if (A) {
            b = this.createContactEquation(k, h, b, c);
            u.mult(-t, b.ri);
            u.negate(b.ni);
            c = m.get();
            u.mult(-y, c);
            g = m.get();
            u.mult(-t, g);
            e.vsub(f, b.rj);
            b.rj.vadd(g, b.rj);
            b.rj.vadd(c, b.rj);
            b.rj.vadd(f, b.rj);
            b.rj.vsub(h.position, b.rj);
            b.ri.vadd(e, b.ri);
            b.ri.vsub(k.position, b.ri);
            m.release(c);
            m.release(g);
            this.result.push(b);
            this.createFrictionEquationsFromContact(b, this.frictionResult);
            A = 0;
            for (C = v.length;A !== C;A++) {
              m.release(v[A]);
            }
            break;
          }
          for (A = 0;A !== C.length;A++) {
            u = m.get();
            y = m.get();
            g.vmult(l[C[(A + 1) % C.length]], u);
            g.vmult(l[C[(A + 2) % C.length]], y);
            f.vadd(u, u);
            f.vadd(y, y);
            F = sa;
            y.vsub(u, F);
            D = ua;
            F.unit(D);
            B = m.get();
            x = m.get();
            e.vsub(u, x);
            G = x.dot(D);
            D.mult(G, B);
            B.vadd(u, B);
            D = m.get();
            if (B.vsub(e, D), 0 < G && G * G < F.norm2() && D.norm2() < t * t) {
              b = this.createContactEquation(k, h, b, c);
              B.vsub(f, b.rj);
              B.vsub(e, b.ni);
              b.ni.normalize();
              b.ni.mult(t, b.ri);
              b.rj.vadd(f, b.rj);
              b.rj.vsub(h.position, b.rj);
              b.ri.vadd(e, b.ri);
              b.ri.vsub(k.position, b.ri);
              this.result.push(b);
              this.createFrictionEquationsFromContact(b, this.frictionResult);
              A = 0;
              for (C = v.length;A !== C;A++) {
                m.release(v[A]);
              }
              return m.release(u), m.release(y), m.release(B), m.release(D), void m.release(x);
            }
            m.release(u);
            m.release(y);
            m.release(B);
            m.release(D);
            m.release(x);
          }
          A = 0;
          for (C = v.length;A !== C;A++) {
            m.release(v[A]);
          }
        }
      }
    };
    new c;
    new c;
    b.prototype[g.types.PLANE | g.types.BOX] = b.prototype.planeBox = function(b, c, e, f, m, g, k, h) {
      c.convexPolyhedronRepresentation.material = c.material;
      c.convexPolyhedronRepresentation.collisionResponse = c.collisionResponse;
      this.planeConvex(b, c.convexPolyhedronRepresentation, e, f, m, g, k, h);
    };
    var Ja = new c, Ha = new c, La = new c, ja = new c;
    b.prototype[g.types.PLANE | g.types.CONVEXPOLYHEDRON] = b.prototype.planeConvex = function(b, c, e, f, m, g, k, h) {
      Ha.set(0, 0, 1);
      m.vmult(Ha, Ha);
      for (var q = m = 0;q !== c.vertices.length;q++) {
        if (Ja.copy(c.vertices[q]), g.vmult(Ja, Ja), f.vadd(Ja, Ja), Ja.vsub(e, La), 0 >= Ha.dot(La)) {
          var p = this.createContactEquation(k, h, b, c), l = ja;
          Ha.mult(Ha.dot(La), l);
          Ja.vsub(l, l);
          l.vsub(e, p.ri);
          p.ni.copy(Ha);
          Ja.vsub(f, p.rj);
          p.ri.vadd(e, p.ri);
          p.ri.vsub(k.position, p.ri);
          p.rj.vadd(f, p.rj);
          p.rj.vsub(h.position, p.rj);
          this.result.push(p);
          m++;
          this.enableFrictionReduction || this.createFrictionEquationsFromContact(p, this.frictionResult);
        }
      }
      this.enableFrictionReduction && m && this.createFrictionFromAverage(m);
    };
    var rb = new c, lb = new c;
    b.prototype[g.types.CONVEXPOLYHEDRON] = b.prototype.convexConvex = function(b, c, e, f, m, g, k, h, q, p, l, t) {
      if (!(e.distanceTo(f) > b.boundingSphereRadius + c.boundingSphereRadius) && b.findSeparatingAxis(c, e, m, f, g, rb, l, t)) {
        l = [];
        b.clipAgainstHull(e, m, c, f, g, rb, -100, 100, l);
        for (g = m = 0;g !== l.length;g++) {
          t = this.createContactEquation(k, h, b, c, q, p);
          var r = t.ri, w = t.rj;
          rb.negate(t.ni);
          l[g].normal.negate(lb);
          lb.mult(l[g].depth, lb);
          l[g].point.vadd(lb, r);
          w.copy(l[g].point);
          r.vsub(e, r);
          w.vsub(f, w);
          r.vadd(e, r);
          r.vsub(k.position, r);
          w.vadd(f, w);
          w.vsub(h.position, w);
          this.result.push(t);
          m++;
          this.enableFrictionReduction || this.createFrictionEquationsFromContact(t, this.frictionResult);
        }
        this.enableFrictionReduction && m && this.createFrictionFromAverage(m);
      }
    };
    var Wa = new c, zb = new c, Za = new c;
    b.prototype[g.types.PLANE | g.types.PARTICLE] = b.prototype.planeParticle = function(b, c, e, f, m, g, k, h) {
      Wa.set(0, 0, 1);
      k.quaternion.vmult(Wa, Wa);
      f.vsub(k.position, zb);
      0 >= Wa.dot(zb) && (b = this.createContactEquation(h, k, c, b), b.ni.copy(Wa), b.ni.negate(b.ni), b.ri.set(0, 0, 0), Wa.mult(Wa.dot(f), Za), f.vsub(Za, Za), b.rj.copy(Za), this.result.push(b), this.createFrictionEquationsFromContact(b, this.frictionResult));
    };
    var $a = new c;
    b.prototype[g.types.PARTICLE | g.types.SPHERE] = b.prototype.sphereParticle = function(b, c, e, f, m, g, k, h) {
      $a.set(0, 0, 1);
      f.vsub(e, $a);
      $a.norm2() <= b.radius * b.radius && (c = this.createContactEquation(h, k, c, b), $a.normalize(), c.rj.copy($a), c.rj.mult(b.radius, c.rj), c.ni.copy($a), c.ni.negate(c.ni), c.ri.set(0, 0, 0), this.result.push(c), this.createFrictionEquationsFromContact(c, this.frictionResult));
    };
    var mb = new f, Y = new c, sb = (new c, new c), Gc = new c, nb = new c;
    b.prototype[g.types.PARTICLE | g.types.CONVEXPOLYHEDRON] = b.prototype.convexParticle = function(b, c, e, f, m, g, k, h) {
      var q = -1;
      g = null;
      var p = 0;
      if (Y.copy(f), Y.vsub(e, Y), m.conjugate(mb), mb.vmult(Y, Y), b.pointIsInside(Y)) {
        b.worldVerticesNeedsUpdate && b.computeWorldVertices(e, m);
        b.worldFaceNormalsNeedsUpdate && b.computeWorldFaceNormals(m);
        m = 0;
        for (var l = b.faces.length;m !== l;m++) {
          var t = b.worldFaceNormals[m];
          f.vsub(b.worldVertices[b.faces[m][0]], Gc);
          var r = -t.dot(Gc);
          (null === g || Math.abs(r) < Math.abs(g)) && (g = r, q = m, sb.copy(t), p++);
        }
        -1 !== q ? (b = this.createContactEquation(h, k, c, b), sb.mult(g, nb), nb.vadd(f, nb), nb.vsub(e, nb), b.rj.copy(nb), sb.negate(b.ni), b.ri.set(0, 0, 0), c = b.ri, g = b.rj, c.vadd(f, c), c.vsub(h.position, c), g.vadd(e, g), g.vsub(k.position, g), this.result.push(b), this.createFrictionEquationsFromContact(b, this.frictionResult)) : console.warn("Point found inside convex, but did not find penetrating face!");
      }
    };
    b.prototype[g.types.BOX | g.types.HEIGHTFIELD] = b.prototype.boxHeightfield = function(b, c, e, f, m, g, k, h) {
      b.convexPolyhedronRepresentation.material = b.material;
      b.convexPolyhedronRepresentation.collisionResponse = b.collisionResponse;
      this.convexHeightfield(b.convexPolyhedronRepresentation, c, e, f, m, g, k, h);
    };
    var ga = new c, ea = new c, Ia = [0];
    b.prototype[g.types.CONVEXPOLYHEDRON | g.types.HEIGHTFIELD] = b.prototype.convexHeightfield = function(b, c, f, m, g, k, h, q) {
      var p = c.data, l = c.elementSize, t = b.boundingSphereRadius;
      e.pointToLocalFrame(m, k, f, ga);
      var r = Math.floor((ga.x - t) / l) - 1, w = Math.ceil((ga.x + t) / l) + 1, C = Math.floor((ga.y - t) / l) - 1, l = Math.ceil((ga.y + t) / l) + 1;
      if (!(0 > w || 0 > l || r > p.length || C > p[0].length)) {
        0 > r && (r = 0);
        0 > w && (w = 0);
        0 > C && (C = 0);
        0 > l && (l = 0);
        r >= p.length && (r = p.length - 1);
        w >= p.length && (w = p.length - 1);
        l >= p[0].length && (l = p[0].length - 1);
        C >= p[0].length && (C = p[0].length - 1);
        p = [];
        c.getRectMinMax(r, C, w, l, p);
        var u = p[0];
        if (!(ga.z - t > p[1] || ga.z + t < u)) {
          for (t = r;w > t;t++) {
            for (r = C;l > r;r++) {
              c.getConvexTrianglePillar(t, r, !1), e.pointToWorldFrame(m, k, c.pillarOffset, ea), f.distanceTo(ea) < c.pillarConvex.boundingSphereRadius + b.boundingSphereRadius && this.convexConvex(b, c.pillarConvex, f, ea, g, k, h, q, null, null, Ia, null), c.getConvexTrianglePillar(t, r, !0), e.pointToWorldFrame(m, k, c.pillarOffset, ea), f.distanceTo(ea) < c.pillarConvex.boundingSphereRadius + b.boundingSphereRadius && this.convexConvex(b, c.pillarConvex, f, ea, g, k, h, q, null, null, Ia, null);
            }
          }
        }
      }
    };
    var Oa = new c, Ua = new c;
    b.prototype[g.types.SPHERE | g.types.HEIGHTFIELD] = b.prototype.sphereHeightfield = function(b, c, f, m, g, k, h, q) {
      var p = c.data, l = b.radius, t = c.elementSize;
      e.pointToLocalFrame(m, k, f, Oa);
      var r = Math.floor((Oa.x - l) / t) - 1, w = Math.ceil((Oa.x + l) / t) + 1, C = Math.floor((Oa.y - l) / t) - 1, t = Math.ceil((Oa.y + l) / t) + 1;
      if (!(0 > w || 0 > t || r > p.length || t > p[0].length)) {
        0 > r && (r = 0);
        0 > w && (w = 0);
        0 > C && (C = 0);
        0 > t && (t = 0);
        r >= p.length && (r = p.length - 1);
        w >= p.length && (w = p.length - 1);
        t >= p[0].length && (t = p[0].length - 1);
        C >= p[0].length && (C = p[0].length - 1);
        p = [];
        c.getRectMinMax(r, C, w, t, p);
        var u = p[0];
        if (!(Oa.z - l > p[1] || Oa.z + l < u)) {
          for (l = this.result;w > r;r++) {
            for (p = C;t > p;p++) {
              if (u = l.length, c.getConvexTrianglePillar(r, p, !1), e.pointToWorldFrame(m, k, c.pillarOffset, Ua), f.distanceTo(Ua) < c.pillarConvex.boundingSphereRadius + b.boundingSphereRadius && this.sphereConvex(b, c.pillarConvex, f, Ua, g, k, h, q), c.getConvexTrianglePillar(r, p, !0), e.pointToWorldFrame(m, k, c.pillarOffset, Ua), f.distanceTo(Ua) < c.pillarConvex.boundingSphereRadius + b.boundingSphereRadius && this.sphereConvex(b, c.pillarConvex, f, Ua, g, k, h, q), 2 < l.length - u) {
                return;
              }
            }
          }
        }
      }
    };
  }, {"../collision/AABB":3, "../collision/Ray":9, "../equations/ContactEquation":19, "../equations/FrictionEquation":21, "../math/Quaternion":28, "../math/Transform":29, "../math/Vec3":30, "../shapes/ConvexPolyhedron":38, "../shapes/Shape":43, "../solver/Solver":47, "../utils/Vec3Pool":54}], 56:[function(h, l) {
    function b() {
      f.apply(this);
      this.dt = -1;
      this.allowSleep = !1;
      this.contacts = [];
      this.frictionEquations = [];
      this.quatNormalizeSkip = 0;
      this.quatNormalizeFast = !1;
      this.stepnumber = this.time = 0;
      this.default_dt = 1 / 60;
      this.nextId = 0;
      this.gravity = new k;
      this.broadphase = new m;
      this.bodies = [];
      this.solver = new c;
      this.constraints = [];
      this.narrowphase = new e(this);
      this.collisionMatrix = new q;
      this.collisionMatrixPrevious = new q;
      this.materials = [];
      this.contactmaterials = [];
      this.contactMaterialTable = new u;
      this.defaultMaterial = new r("default");
      this.defaultContactMaterial = new w(this.defaultMaterial, this.defaultMaterial, {friction:.3, restitution:0});
      this.doProfiling = !1;
      this.profile = {solve:0, makeContactConstraints:0, broadphase:0, integrate:0, narrowphase:0};
      this.subsystems = [];
      this.addBodyEvent = {type:"addBody", body:null};
      this.removeBodyEvent = {type:"removeBody", body:null};
    }
    l.exports = b;
    var g = h("../shapes/Shape"), k = h("../math/Vec3");
    l = h("../math/Quaternion");
    var c = h("../solver/GSSolver"), e = (h("../utils/Vec3Pool"), h("../equations/ContactEquation"), h("../equations/FrictionEquation"), h("./Narrowphase")), f = h("../utils/EventTarget"), q = h("../collision/ArrayCollisionMatrix"), r = h("../material/Material"), w = h("../material/ContactMaterial"), p = h("../objects/Body"), u = h("../utils/TupleDictionary"), v = h("../collision/RaycastResult"), y = h("../collision/AABB"), x = h("../collision/Ray"), m = h("../collision/NaiveBroadphase");
    b.prototype = new f;
    var t = (new y, new x);
    if (b.prototype.getContactMaterial = function(b, c) {
      return this.contactMaterialTable.get(b.id, c.id);
    }, b.prototype.numObjects = function() {
      return this.bodies.length;
    }, b.prototype.collisionMatrixTick = function() {
      var b = this.collisionMatrixPrevious;
      this.collisionMatrixPrevious = this.collisionMatrix;
      this.collisionMatrix = b;
      this.collisionMatrix.reset();
    }, b.prototype.add = b.prototype.addBody = function(b) {
      -1 === this.bodies.indexOf(b) && (b.index = this.bodies.length, this.bodies.push(b), b.world = this, b.initPosition.copy(b.position), b.initVelocity.copy(b.velocity), b.timeLastSleepy = this.time, b instanceof p && (b.initAngularVelocity.copy(b.angularVelocity), b.initQuaternion.copy(b.quaternion)), this.collisionMatrix.setNumObjects(this.bodies.length), this.addBodyEvent.body = b, this.dispatchEvent(this.addBodyEvent));
    }, b.prototype.addConstraint = function(b) {
      this.constraints.push(b);
    }, b.prototype.removeConstraint = function(b) {
      b = this.constraints.indexOf(b);
      -1 !== b && this.constraints.splice(b, 1);
    }, b.prototype.rayTest = function(b, c, e) {
      e instanceof v ? this.raycastClosest(b, c, {skipBackfaces:!0}, e) : this.raycastAll(b, c, {skipBackfaces:!0}, e);
    }, b.prototype.raycastAll = function(b, c, e, f) {
      return e.mode = x.ALL, e.from = b, e.to = c, e.callback = f, t.intersectWorld(this, e);
    }, b.prototype.raycastAny = function(b, c, e, f) {
      return e.mode = x.ANY, e.from = b, e.to = c, e.result = f, t.intersectWorld(this, e);
    }, b.prototype.raycastClosest = function(b, c, e, f) {
      return e.mode = x.CLOSEST, e.from = b, e.to = c, e.result = f, t.intersectWorld(this, e);
    }, b.prototype.remove = function(b) {
      b.world = null;
      var c = this.bodies.length - 1, e = this.bodies, f = e.indexOf(b);
      if (-1 !== f) {
        e.splice(f, 1);
        for (f = 0;f !== e.length;f++) {
          e[f].index = f;
        }
        this.collisionMatrix.setNumObjects(c);
        this.removeBodyEvent.body = b;
        this.dispatchEvent(this.removeBodyEvent);
      }
    }, b.prototype.removeBody = b.prototype.remove, b.prototype.addMaterial = function(b) {
      this.materials.push(b);
    }, b.prototype.addContactMaterial = function(b) {
      this.contactmaterials.push(b);
      this.contactMaterialTable.set(b.materials[0].id, b.materials[1].id, b);
    }, "undefined" == typeof performance && (performance = {}), !performance.now) {
      var C = Date.now();
      performance.timing && performance.timing.navigationStart && (C = performance.timing.navigationStart);
      performance.now = function() {
        return Date.now() - C;
      };
    }
    var A = new k;
    b.prototype.step = function(b, c, e) {
      if (e = e || 10, c = c || 0, 0 === c) {
        this.internalStep(b), this.time += b;
      } else {
        var f = Math.floor((this.time + c) / b) - Math.floor(this.time / b), f = Math.min(f, e);
        e = performance.now();
        for (var m = 0;m !== f && (this.internalStep(b), !(performance.now() - e > 1E3 * b));m++) {
        }
        this.time += c;
        b = this.time % b / b;
        c = this.bodies;
        for (f = 0;f !== c.length;f++) {
          e = c[f], e.type !== p.STATIC && e.sleepState !== p.SLEEPING ? (e.position.vsub(e.previousPosition, A), A.scale(b, A), e.position.vadd(A, e.interpolatedPosition)) : (e.interpolatedPosition.copy(e.position), e.interpolatedQuaternion.copy(e.quaternion));
        }
      }
    };
    var D = {type:"postStep"}, F = {type:"preStep"}, G = {type:"collide", body:null, contact:null}, B = [], K = [], H = [], M = [], J = (new k, new k, new k, new k, new k, new k, new k, new k, new k, new l, new l), P = new l, O = new k;
    b.prototype.internalStep = function(b) {
      this.dt = b;
      var c, e = this.contacts, f = this.numObjects(), m = this.bodies, k = this.solver, h = this.gravity, q = this.doProfiling, l = this.profile, t = p.DYNAMIC, r = this.constraints, w = (h.norm(), h.x), C = h.y, u = h.z;
      q && (c = performance.now());
      for (h = 0;h !== f;h++) {
        var v = m[h];
        if (v.type & t) {
          var A = v.force, v = v.mass;
          A.x += v * w;
          A.y += v * C;
          A.z += v * u;
        }
      }
      h = 0;
      for (v = this.subsystems.length;h !== v;h++) {
        this.subsystems[h].update();
      }
      q && (c = performance.now());
      H.length = 0;
      M.length = 0;
      this.broadphase.collisionPairs(this, H, M);
      q && (l.broadphase = performance.now() - c);
      v = r.length;
      for (h = 0;h !== v;h++) {
        if (w = r[h], !w.collideConnected) {
          for (C = H.length - 1;0 <= C;--C) {
            (w.bodyA === H[C] && w.bodyB === M[C] || w.bodyB === H[C] && w.bodyA === M[C]) && (H.splice(C, 1), M.splice(C, 1));
          }
        }
      }
      this.collisionMatrixTick();
      q && (c = performance.now());
      v = e.length;
      for (h = 0;h !== v;h++) {
        B.push(e[h]);
      }
      e.length = 0;
      v = this.frictionEquations.length;
      for (h = 0;h !== v;h++) {
        K.push(this.frictionEquations[h]);
      }
      this.frictionEquations.length = 0;
      this.narrowphase.getContacts(H, M, this, e, B, this.frictionEquations, K);
      q && (l.narrowphase = performance.now() - c);
      q && (c = performance.now());
      for (h = 0;h < this.frictionEquations.length;h++) {
        k.addEquation(this.frictionEquations[h]);
      }
      h = e.length;
      for (C = 0;C !== h;C++) {
        w = e[C], v = w.bi, u = w.bj, w.si, w.sj, v.material && u.material && this.getContactMaterial(v.material, u.material), (v.material && u.material && 0 <= v.material.restitution && 0 <= u.material.restitution && (w.restitution = v.material.restitution * u.material.restitution), k.addEquation(w), v.allowSleep && v.type === p.DYNAMIC && v.sleepState === p.SLEEPING && u.sleepState === p.AWAKE && u.type !== p.STATIC) && u.velocity.norm2() + u.angularVelocity.norm2() >= 2 * Math.pow(u.sleepSpeedLimit, 
        2) && (v._wakeUpAfterNarrowphase = !0), u.allowSleep && u.type === p.DYNAMIC && u.sleepState === p.SLEEPING && v.sleepState === p.AWAKE && v.type !== p.STATIC && v.velocity.norm2() + v.angularVelocity.norm2() >= 2 * Math.pow(v.sleepSpeedLimit, 2) && (u._wakeUpAfterNarrowphase = !0), this.collisionMatrix.set(v, u, !0), this.collisionMatrixPrevious.get(v, u) || (G.body = u, G.contact = w, v.dispatchEvent(G), G.body = v, u.dispatchEvent(G));
      }
      q && (l.makeContactConstraints = performance.now() - c, c = performance.now());
      for (h = 0;h !== f;h++) {
        v = m[h], v._wakeUpAfterNarrowphase && (v.wakeUp(), v._wakeUpAfterNarrowphase = !1);
      }
      v = r.length;
      for (h = 0;h !== v;h++) {
        for (w = r[h], w.update(), C = 0, e = w.equations.length;C !== e;C++) {
          k.addEquation(w.equations[C]);
        }
      }
      k.solve(b, this);
      q && (l.solve = performance.now() - c);
      k.removeAllEquations();
      k = Math.pow;
      for (h = 0;h !== f;h++) {
        if (v = m[h], v.type & t && (r = k(1 - v.linearDamping, b), e = v.velocity, e.mult(r, e), r = v.angularVelocity)) {
          e = k(1 - v.angularDamping, b), r.mult(e, r);
        }
      }
      this.dispatchEvent(F);
      for (h = 0;h !== f;h++) {
        v = m[h], v.preStep && v.preStep.call(v);
      }
      q && (c = performance.now());
      t = p.DYNAMIC | p.KINEMATIC;
      k = 0 === this.stepnumber % (this.quatNormalizeSkip + 1);
      r = this.quatNormalizeFast;
      e = .5 * b;
      g.types.PLANE;
      g.types.CONVEXPOLYHEDRON;
      for (h = 0;h !== f;h++) {
        if (v = m[h], w = v.force, C = v.torque, v.type & t && v.sleepState !== p.SLEEPING) {
          var u = v.velocity, A = v.angularVelocity, y = v.position, x = v.quaternion, N = v.invMass, Aa = v.invInertiaWorld;
          u.x += w.x * N * b;
          u.y += w.y * N * b;
          u.z += w.z * N * b;
          v.angularVelocity && (Aa.vmult(C, O), O.mult(b, O), O.vadd(A, A));
          y.x += u.x * b;
          y.y += u.y * b;
          y.z += u.z * b;
          v.angularVelocity && (J.set(A.x, A.y, A.z, 0), J.mult(x, P), x.x += e * P.x, x.y += e * P.y, x.z += e * P.z, x.w += e * P.w, k && (r ? x.normalizeFast() : x.normalize()));
          v.aabb && (v.aabbNeedsUpdate = !0);
          v.updateInertiaWorld && v.updateInertiaWorld();
        }
      }
      this.clearForces();
      this.broadphase.dirty = !0;
      q && (l.integrate = performance.now() - c);
      this.time += b;
      this.stepnumber += 1;
      this.dispatchEvent(D);
      for (h = 0;h !== f;h++) {
        v = m[h], (b = v.postStep) && b.call(v);
      }
      if (this.allowSleep) {
        for (h = 0;h !== f;h++) {
          m[h].sleepTick(this.time);
        }
      }
    };
    b.prototype.clearForces = function() {
      for (var b = this.bodies, c = b.length, e = 0;e !== c;e++) {
        var f = b[e];
        f.force;
        f.torque;
        f.force.set(0, 0, 0);
        f.torque.set(0, 0, 0);
      }
    };
  }, {"../collision/AABB":3, "../collision/ArrayCollisionMatrix":4, "../collision/NaiveBroadphase":7, "../collision/Ray":9, "../collision/RaycastResult":10, "../equations/ContactEquation":19, "../equations/FrictionEquation":21, "../material/ContactMaterial":24, "../material/Material":25, "../math/Quaternion":28, "../math/Vec3":30, "../objects/Body":31, "../shapes/Shape":43, "../solver/GSSolver":46, "../utils/EventTarget":49, "../utils/TupleDictionary":52, "../utils/Vec3Pool":54, "./Narrowphase":55}]}, 
  {}, [2])(2);
});
!function(a, h, l) {
  function b(c, e) {
    if (!h[c]) {
      if (!a[c]) {
        var f = "function" == typeof require && require;
        if (!e && f) {
          return f(c, !0);
        }
        if (g) {
          return g(c, !0);
        }
        throw Error("Cannot find module '" + c + "'");
      }
      e = h[c] = {exports:{}};
      a[c][0].call(e.exports, function(e) {
        var f = a[c][1][e];
        return b(f ? f : e);
      }, e, e.exports);
    }
    return h[c].exports;
  }
  for (var g = "function" == typeof require && require, k = 0;k < l.length;k++) {
    b(l[k]);
  }
  return b;
}({1:[function(a, h) {
  var l = (a("./pointable"), a("gl-matrix")), b = l.vec3, g = l.mat3, k = l.mat4;
  a = (a("underscore"), h.exports = function(a, e) {
    this.finger = a;
    this._matrix = this._center = null;
    this.type = e.type;
    this.prevJoint = e.prevJoint;
    this.nextJoint = e.nextJoint;
    this.width = e.width;
    a = Array(3);
    b.sub(a, e.nextJoint, e.prevJoint);
    this.length = b.length(a);
    this.basis = e.basis;
  });
  a.prototype.left = function() {
    return this._left ? this._left : (this._left = 0 > g.determinant(this.basis[0].concat(this.basis[1]).concat(this.basis[2])), this._left);
  };
  a.prototype.matrix = function() {
    if (this._matrix) {
      return this._matrix;
    }
    var a = this.basis, b = this._matrix = k.create();
    return b[0] = a[0][0], b[1] = a[0][1], b[2] = a[0][2], b[4] = a[1][0], b[5] = a[1][1], b[6] = a[1][2], b[8] = a[2][0], b[9] = a[2][1], b[10] = a[2][2], b[3] = this.center()[0], b[7] = this.center()[1], b[11] = this.center()[2], this.left() && (b[0] *= -1, b[1] *= -1, b[2] *= -1), this._matrix;
  };
  a.prototype.lerp = function(a, e) {
    b.lerp(a, this.prevJoint, this.nextJoint, e);
  };
  a.prototype.center = function() {
    if (this._center) {
      return this._center;
    }
    var a = b.create();
    return this.lerp(a, .5), this._center = a, a;
  };
  a.prototype.direction = function() {
    return [-1 * this.basis[2][0], -1 * this.basis[2][1], -1 * this.basis[2][2]];
  };
}, {"./pointable":14, "gl-matrix":23, underscore:24}], 2:[function(a, h) {
  a = h.exports = function(a) {
    this.pos = 0;
    this._buf = [];
    this.size = a;
  };
  a.prototype.get = function(a) {
    return void 0 == a && (a = 0), a >= this.size ? void 0 : a >= this._buf.length ? void 0 : this._buf[(this.pos - a - 1) % this.size];
  };
  a.prototype.push = function(a) {
    return this._buf[this.pos % this.size] = a, this.pos++;
  };
}, {}], 3:[function(a, h) {
  var l = a("../protocol").chooseProtocol, b = a("events").EventEmitter, g = a("underscore"), k = h.exports = function(a) {
    this.opts = g.defaults(a || {}, {host:"127.0.0.1", enableGestures:!1, scheme:this.getScheme(), port:this.getPort(), background:!1, optimizeHMD:!1, requestProtocolVersion:k.defaultProtocolVersion});
    this.host = this.opts.host;
    this.port = this.opts.port;
    this.scheme = this.opts.scheme;
    this.protocolVersionVerified = !1;
    this.optimizeHMD = this.background = null;
    this.on("ready", function() {
      this.enableGestures(this.opts.enableGestures);
      this.setBackground(this.opts.background);
      this.setOptimizeHMD(this.opts.optimizeHMD);
      console.log(this.opts.optimizeHMD ? "Optimized for head mounted display usage." : "Optimized for desktop usage.");
    });
  };
  k.defaultProtocolVersion = 6;
  k.prototype.getUrl = function() {
    return this.scheme + "//" + this.host + ":" + this.port + "/v" + this.opts.requestProtocolVersion + ".json";
  };
  k.prototype.getScheme = function() {
    return "ws:";
  };
  k.prototype.getPort = function() {
    return 6437;
  };
  k.prototype.setBackground = function(a) {
    this.opts.background = a;
    this.protocol && this.protocol.sendBackground && this.background !== this.opts.background && (this.background = this.opts.background, this.protocol.sendBackground(this, this.opts.background));
  };
  k.prototype.setOptimizeHMD = function(a) {
    this.opts.optimizeHMD = a;
    this.protocol && this.protocol.sendOptimizeHMD && this.optimizeHMD !== this.opts.optimizeHMD && (this.optimizeHMD = this.opts.optimizeHMD, this.protocol.sendOptimizeHMD(this, this.opts.optimizeHMD));
  };
  k.prototype.handleOpen = function() {
    this.connected || (this.connected = !0, this.emit("connect"));
  };
  k.prototype.enableGestures = function(a) {
    this.gesturesEnabled = a ? !0 : !1;
    this.send(this.protocol.encode({enableGestures:this.gesturesEnabled}));
  };
  k.prototype.handleClose = function(a) {
    this.connected && (this.disconnect(), 1001 === a && 1 < this.opts.requestProtocolVersion && (this.protocolVersionVerified ? this.protocolVersionVerified = !1 : this.opts.requestProtocolVersion--), this.startReconnection());
  };
  k.prototype.startReconnection = function() {
    var a = this;
    this.reconnectionTimer || (this.reconnectionTimer = setInterval(function() {
      a.reconnect();
    }, 500));
  };
  k.prototype.stopReconnection = function() {
    this.reconnectionTimer = clearInterval(this.reconnectionTimer);
  };
  k.prototype.disconnect = function(a) {
    return a || this.stopReconnection(), this.socket ? (this.socket.close(), delete this.socket, delete this.protocol, delete this.background, delete this.optimizeHMD, delete this.focusedState, this.connected && (this.connected = !1, this.emit("disconnect")), !0) : void 0;
  };
  k.prototype.reconnect = function() {
    this.connected ? this.stopReconnection() : (this.disconnect(!0), this.connect());
  };
  k.prototype.handleData = function(a) {
    var b;
    a = JSON.parse(a);
    void 0 === this.protocol ? (b = this.protocol = l(a), this.protocolVersionVerified = !0, this.emit("ready")) : b = this.protocol(a);
    this.emit(b.type, b);
  };
  k.prototype.connect = function() {
    return this.socket ? void 0 : (this.socket = this.setupSocket(), !0);
  };
  k.prototype.send = function(a) {
    this.socket.send(a);
  };
  k.prototype.reportFocus = function(a) {
    this.connected && this.focusedState !== a && (this.focusedState = a, this.emit(this.focusedState ? "focus" : "blur"), this.protocol && this.protocol.sendFocused && this.protocol.sendFocused(this, this.focusedState));
  };
  g.extend(k.prototype, b.prototype);
}, {"../protocol":15, events:21, underscore:24}], 4:[function(a, h) {
  var l = h.exports = a("./base");
  a = a("underscore");
  h = h.exports = function(a) {
    l.call(this, a);
    var b = this;
    this.on("ready", function() {
      b.startFocusLoop();
    });
    this.on("disconnect", function() {
      b.stopFocusLoop();
    });
  };
  a.extend(h.prototype, l.prototype);
  h.__proto__ = l;
  h.prototype.useSecure = function() {
    return "https:" === location.protocol;
  };
  h.prototype.getScheme = function() {
    return this.useSecure() ? "wss:" : "ws:";
  };
  h.prototype.getPort = function() {
    return this.useSecure() ? 6436 : 6437;
  };
  h.prototype.setupSocket = function() {
    var a = this, g = new WebSocket(this.getUrl());
    return g.onopen = function() {
      a.handleOpen();
    }, g.onclose = function(b) {
      a.handleClose(b.code, b.reason);
    }, g.onmessage = function(b) {
      a.handleData(b.data);
    }, g.onerror = function() {
      a.useSecure() && "wss:" === a.scheme && (a.scheme = "ws:", a.port = 6437, a.disconnect(), a.connect());
    }, g;
  };
  h.prototype.startFocusLoop = function() {
    if (!this.focusDetectorTimer) {
      var a = this, g = null, g = "undefined" != typeof document.hidden ? "hidden" : "undefined" != typeof document.mozHidden ? "mozHidden" : "undefined" != typeof document.msHidden ? "msHidden" : "undefined" != typeof document.webkitHidden ? "webkitHidden" : void 0;
      void 0 === a.windowVisible && (a.windowVisible = void 0 === g ? !0 : !1 === document[g]);
      var k = window.addEventListener("focus", function() {
        a.windowVisible = !0;
        e();
      }), c = window.addEventListener("blur", function() {
        a.windowVisible = !1;
        e();
      });
      this.on("disconnect", function() {
        window.removeEventListener("focus", k);
        window.removeEventListener("blur", c);
      });
      var e = function() {
        a.reportFocus((void 0 === g ? !0 : !1 === document[g]) && a.windowVisible);
      };
      e();
      this.focusDetectorTimer = setInterval(e, 100);
    }
  };
  h.prototype.stopFocusLoop = function() {
    this.focusDetectorTimer && (clearTimeout(this.focusDetectorTimer), delete this.focusDetectorTimer);
  };
}, {"./base":3, underscore:24}], 5:[function(a, h) {
  var l = a("__browserify_process"), b = a("./frame"), g = a("./hand"), k = a("./pointable"), c = a("./finger"), e = a("./circular_buffer"), f = a("./pipeline"), q = a("events").EventEmitter, r = a("./gesture").gestureListener, w = a("./dialog"), p = a("underscore"), u = h.exports = function(c) {
    var f = this;
    c = p.defaults(c || {}, {inNode:"undefined" != typeof l && l.versions && l.versions.node});
    this.inNode = c.inNode;
    c = p.defaults(c || {}, {frameEventName:this.useAnimationLoop() ? "animationFrame" : "deviceFrame", suppressAnimationLoop:!this.useAnimationLoop(), loopWhileDisconnected:!0, useAllPlugins:!1, checkVersion:!0});
    this.animationFrameRequested = !1;
    this.onAnimationFrame = function(a) {
      f.lastConnectionFrame.valid && f.emit("animationFrame", f.lastConnectionFrame);
      f.emit("frameEnd", a);
      f.loopWhileDisconnected && (!1 !== f.connection.focusedState || f.connection.opts.background) ? window.requestAnimationFrame(f.onAnimationFrame) : f.animationFrameRequested = !1;
    };
    this.suppressAnimationLoop = c.suppressAnimationLoop;
    this.loopWhileDisconnected = c.loopWhileDisconnected;
    this.frameEventName = c.frameEventName;
    this.useAllPlugins = c.useAllPlugins;
    this.history = new e(200);
    this.lastConnectionFrame = this.lastValidFrame = this.lastFrame = b.Invalid;
    this.accumulatedGestures = [];
    this.checkVersion = c.checkVersion;
    this.connectionType = void 0 === c.connectionType ? a(this.inBrowser() ? "./connection/browser" : "./connection/node") : c.connectionType;
    this.connection = new this.connectionType(c);
    this.streamingCount = 0;
    this.devices = {};
    this.plugins = {};
    this._pluginPipelineSteps = {};
    this._pluginExtendedMethods = {};
    c.useAllPlugins && this.useRegisteredPlugins();
    this.setupFrameEvents(c);
    this.setupConnectionEvents();
    this.startAnimationLoop();
  };
  u.prototype.gesture = function(a, b) {
    a = r(this, a);
    return void 0 !== b && a.stop(b), a;
  };
  u.prototype.setBackground = function(a) {
    return this.connection.setBackground(a), this;
  };
  u.prototype.setOptimizeHMD = function(a) {
    return this.connection.setOptimizeHMD(a), this;
  };
  u.prototype.inBrowser = function() {
    return !this.inNode;
  };
  u.prototype.useAnimationLoop = function() {
    return this.inBrowser() && !this.inBackgroundPage();
  };
  u.prototype.inBackgroundPage = function() {
    return "undefined" != typeof chrome && chrome.extension && chrome.extension.getBackgroundPage && chrome.extension.getBackgroundPage() === window;
  };
  u.prototype.connect = function() {
    return this.connection.connect(), this;
  };
  u.prototype.streaming = function() {
    return 0 < this.streamingCount;
  };
  u.prototype.connected = function() {
    return !!this.connection.connected;
  };
  u.prototype.startAnimationLoop = function() {
    this.suppressAnimationLoop || this.animationFrameRequested || (this.animationFrameRequested = !0, window.requestAnimationFrame(this.onAnimationFrame));
  };
  u.prototype.disconnect = function() {
    return this.connection.disconnect(), this;
  };
  u.prototype.frame = function(a) {
    return this.history.get(a) || b.Invalid;
  };
  u.prototype.loop = function(a) {
    return a && ("function" == typeof a ? this.on(this.frameEventName, a) : this.setupFrameEvents(a)), this.connect();
  };
  u.prototype.addStep = function(a) {
    this.pipeline || (this.pipeline = new f(this));
    this.pipeline.addStep(a);
  };
  u.prototype.processFrame = function(a) {
    a.gestures && (this.accumulatedGestures = this.accumulatedGestures.concat(a.gestures));
    this.lastConnectionFrame = a;
    this.startAnimationLoop();
    this.emit("deviceFrame", a);
  };
  u.prototype.processFinishedFrame = function(a) {
    if (this.lastFrame = a, a.valid && (this.lastValidFrame = a), a.controller = this, a.historyIdx = this.history.push(a), a.gestures) {
      a.gestures = this.accumulatedGestures;
      this.accumulatedGestures = [];
      for (var c = 0;c != a.gestures.length;c++) {
        this.emit("gesture", a.gestures[c], a);
      }
    }
    this.pipeline && (a = this.pipeline.run(a), a || (a = b.Invalid));
    this.emit("frame", a);
    this.emitHandEvents(a);
  };
  u.prototype.emitHandEvents = function(a) {
    for (var b = 0;b < a.hands.length;b++) {
      this.emit("hand", a.hands[b]);
    }
  };
  u.prototype.setupFrameEvents = function(a) {
    a.frame && this.on("frame", a.frame);
    a.hand && this.on("hand", a.hand);
  };
  u.prototype.setupConnectionEvents = function() {
    var a = this;
    this.connection.on("frame", function(b) {
      a.processFrame(b);
    });
    this.on(this.frameEventName, function(b) {
      a.processFinishedFrame(b);
    });
    var b = function() {
      if (5 > a.connection.opts.requestProtocolVersion && 0 == a.streamingCount) {
        a.streamingCount = 1;
        var c = {attached:!0, streaming:!0, type:"unknown", id:"Lx00000000000"};
        a.devices[c.id] = c;
        a.emit("deviceAttached", c);
        a.emit("deviceStreaming", c);
        a.emit("streamingStarted", c);
        a.connection.removeListener("frame", b);
      }
    }, c = function() {
      if (0 < a.streamingCount) {
        for (var b in a.devices) {
          a.emit("deviceStopped", a.devices[b]), a.emit("deviceRemoved", a.devices[b]);
        }
        a.emit("streamingStopped", a.devices[b]);
        a.streamingCount = 0;
        for (b in a.devices) {
          delete a.devices[b];
        }
      }
    };
    this.connection.on("focus", function() {
      a.loopWhileDisconnected && a.startAnimationLoop();
      a.emit("focus");
    });
    this.connection.on("blur", function() {
      a.emit("blur");
    });
    this.connection.on("protocol", function(b) {
      b.on("beforeFrameCreated", function(b) {
        a.emit("beforeFrameCreated", b);
      });
      b.on("afterFrameCreated", function(b, c) {
        a.emit("afterFrameCreated", b, c);
      });
      a.emit("protocol", b);
    });
    this.connection.on("ready", function() {
      a.checkVersion && !a.inNode && a.checkOutOfDate();
      a.emit("ready");
    });
    this.connection.on("connect", function() {
      a.emit("connect");
      a.connection.removeListener("frame", b);
      a.connection.on("frame", b);
    });
    this.connection.on("disconnect", function() {
      a.emit("disconnect");
      c();
    });
    this.connection.on("deviceConnect", function(e) {
      e.state ? (a.emit("deviceConnected"), a.connection.removeListener("frame", b), a.connection.on("frame", b)) : (a.emit("deviceDisconnected"), c());
    });
    this.connection.on("deviceEvent", function(b) {
      b = b.state;
      var c = a.devices[b.id], e = {}, f;
      for (f in b) {
        c && c.hasOwnProperty(f) && c[f] == b[f] || (e[f] = !0);
      }
      a.devices[b.id] = b;
      e.attached && a.emit(b.attached ? "deviceAttached" : "deviceRemoved", b);
      e.streaming && (b.streaming ? (a.streamingCount++, a.emit("deviceStreaming", b), 1 == a.streamingCount && a.emit("streamingStarted", b), e.attached || a.emit("deviceConnected")) : e.attached && b.attached || (a.streamingCount--, a.emit("deviceStopped", b), 0 == a.streamingCount && a.emit("streamingStopped", b), a.emit("deviceDisconnected")));
    });
    this.on("newListener", function(a) {
      "deviceConnected" != a && "deviceDisconnected" != a || console.warn(a + " events are depricated.  Consider using 'streamingStarted/streamingStopped' or 'deviceStreaming/deviceStopped' instead");
    });
  };
  u.prototype.checkOutOfDate = function() {
    console.assert(this.connection && this.connection.protocol);
    var a = this.connection.protocol.serviceVersion, b = this.connection.protocol.version, c = this.connectionType.defaultProtocolVersion;
    return c > b ? (console.warn("Your Protocol Version is v" + b + ", this app was designed for v" + c), w.warnOutOfDate({sV:a, pV:b}), !0) : !1;
  };
  u._pluginFactories = {};
  u.plugin = function(a, b) {
    return this._pluginFactories[a] && console.warn('Plugin "' + a + '" already registered'), this._pluginFactories[a] = b;
  };
  u.plugins = function() {
    return p.keys(this._pluginFactories);
  };
  u.prototype.use = function(a, e) {
    var h, m;
    if (h = "function" == typeof a ? a : u._pluginFactories[a], !h) {
      throw "Leap Plugin " + a + " not found.";
    }
    if (e || (e = {}), this.plugins[a]) {
      return p.extend(this.plugins[a], e), this;
    }
    this.plugins[a] = e;
    e = h.call(this, e);
    for (m in e) {
      if (h = e[m], "function" == typeof h) {
        var q = a, l = m;
        -1 != ["beforeFrameCreated", "afterFrameCreated"].indexOf(l) ? this.on(l, h) : (this.pipeline || (this.pipeline = new f(this)), this._pluginPipelineSteps[q] || (this._pluginPipelineSteps[q] = []), this._pluginPipelineSteps[q].push(this.pipeline.addWrappedStep(l, h)));
      } else {
        q = a;
        l = m;
        switch(this._pluginExtendedMethods[q] || (this._pluginExtendedMethods[q] = []), l) {
          case "frame":
            l = b;
            break;
          case "hand":
            l = g;
            break;
          case "pointable":
            l = k;
            p.extend(c.prototype, h);
            p.extend(c.Invalid, h);
            break;
          case "finger":
            l = c;
            break;
          default:
            throw q + ' specifies invalid object type "' + l + '" for prototypical extension';
        }
        p.extend(l.prototype, h);
        p.extend(l.Invalid, h);
        this._pluginExtendedMethods[q].push([l, h]);
      }
    }
    return this;
  };
  u.prototype.stopUsing = function(a) {
    var b, c;
    b = this._pluginPipelineSteps[a];
    var e = this._pluginExtendedMethods[a], f;
    if (this.plugins[a]) {
      if (b) {
        for (f = 0;f < b.length;f++) {
          this.pipeline.removeStep(b[f]);
        }
      }
      if (e) {
        for (f = 0;f < e.length;f++) {
          b = e[f][0];
          c = e[f][1];
          for (var g in c) {
            delete b.prototype[g], delete b.Invalid[g];
          }
        }
      }
      return delete this.plugins[a], this;
    }
  };
  u.prototype.useRegisteredPlugins = function() {
    for (var a in u._pluginFactories) {
      this.use(a);
    }
  };
  p.extend(u.prototype, q.prototype);
}, {"./circular_buffer":2, "./connection/browser":4, "./connection/node":20, "./dialog":6, "./finger":7, "./frame":8, "./gesture":9, "./hand":10, "./pipeline":13, "./pointable":14, __browserify_process:22, events:21, underscore:24}], 6:[function(a, h) {
  var l = a("__browserify_process"), b = h.exports = function(a, b) {
    this.options = b || {};
    this.message = a;
    this.createElement();
  };
  b.prototype.createElement = function() {
    this.element = document.createElement("div");
    this.element.className = "leapjs-dialog";
    this.element.style.position = "fixed";
    this.element.style.top = "8px";
    this.element.style.left = 0;
    this.element.style.right = 0;
    this.element.style.textAlign = "center";
    this.element.style.zIndex = 1E3;
    var a = document.createElement("div");
    this.element.appendChild(a);
    a.style.className = "leapjs-dialog";
    a.style.display = "inline-block";
    a.style.margin = "auto";
    a.style.padding = "8px";
    a.style.color = "#222";
    a.style.background = "#eee";
    a.style.borderRadius = "4px";
    a.style.border = "1px solid #999";
    a.style.textAlign = "left";
    a.style.cursor = "pointer";
    a.style.whiteSpace = "nowrap";
    a.style.transition = "box-shadow 1s linear";
    a.innerHTML = this.message;
    this.options.onclick && a.addEventListener("click", this.options.onclick);
    this.options.onmouseover && a.addEventListener("mouseover", this.options.onmouseover);
    this.options.onmouseout && a.addEventListener("mouseout", this.options.onmouseout);
    this.options.onmousemove && a.addEventListener("mousemove", this.options.onmousemove);
  };
  b.prototype.show = function() {
    return document.body.appendChild(this.element), this;
  };
  b.prototype.hide = function() {
    return document.body.removeChild(this.element), this;
  };
  b.warnOutOfDate = function(a) {
    a || (a = {});
    var g = "http://developer.leapmotion.com?";
    a.returnTo = window.location.href;
    for (var c in a) {
      g += c + "=" + encodeURIComponent(a[c]) + "&";
    }
    var e;
    return e = new b("This site requires Leap Motion Tracking V2.<button id='leapjs-accept-upgrade'  style='color: #444; transition: box-shadow 100ms linear; cursor: pointer; vertical-align: baseline; margin-left: 16px;'>Upgrade</button><button id='leapjs-decline-upgrade' style='color: #444; transition: box-shadow 100ms linear; cursor: pointer; vertical-align: baseline; margin-left: 8px; '>Not Now</button>", {onclick:function(a) {
      "leapjs-decline-upgrade" != a.target.id && (a = window.open(g, "_blank", "height=800,width=1000,location=1,menubar=1,resizable=1,status=1,toolbar=1,scrollbars=1"), window.focus && a.focus());
      return e.hide(), !0;
    }, onmousemove:function(a) {
      a.target == document.getElementById("leapjs-decline-upgrade") ? (document.getElementById("leapjs-decline-upgrade").style.color = "#000", document.getElementById("leapjs-decline-upgrade").style.boxShadow = "0px 0px 2px #5daa00", document.getElementById("leapjs-accept-upgrade").style.color = "#444", document.getElementById("leapjs-accept-upgrade").style.boxShadow = "none") : (document.getElementById("leapjs-accept-upgrade").style.color = "#000", document.getElementById("leapjs-accept-upgrade").style.boxShadow = 
      "0px 0px 2px #5daa00", document.getElementById("leapjs-decline-upgrade").style.color = "#444", document.getElementById("leapjs-decline-upgrade").style.boxShadow = "none");
    }, onmouseout:function() {
      document.getElementById("leapjs-decline-upgrade").style.color = "#444";
      document.getElementById("leapjs-decline-upgrade").style.boxShadow = "none";
      document.getElementById("leapjs-accept-upgrade").style.color = "#444";
      document.getElementById("leapjs-accept-upgrade").style.boxShadow = "none";
    }}), e.show();
  };
  b.hasWarnedBones = !1;
  b.warnBones = function() {
    this.hasWarnedBones || (this.hasWarnedBones = !0, console.warn("Your Leap Service is out of date"), "undefined" != typeof l && l.versions && l.versions.node || this.warnOutOfDate({reason:"bones"}));
  };
}, {__browserify_process:22}], 7:[function(a, h) {
  var l = a("./pointable"), b = a("./bone"), g = a("./dialog");
  a = a("underscore");
  h = h.exports = function(a) {
    l.call(this, a);
    this.dipPosition = a.dipPosition;
    this.pipPosition = a.pipPosition;
    this.mcpPosition = a.mcpPosition;
    this.carpPosition = a.carpPosition;
    this.extended = a.extended;
    this.type = a.type;
    this.finger = !0;
    this.positions = [this.carpPosition, this.mcpPosition, this.pipPosition, this.dipPosition, this.tipPosition];
    a.bases ? this.addBones(a) : g.warnBones();
  };
  a.extend(h.prototype, l.prototype);
  h.prototype.addBones = function(a) {
    this.metacarpal = new b(this, {type:0, width:this.width, prevJoint:this.carpPosition, nextJoint:this.mcpPosition, basis:a.bases[0]});
    this.proximal = new b(this, {type:1, width:this.width, prevJoint:this.mcpPosition, nextJoint:this.pipPosition, basis:a.bases[1]});
    this.medial = new b(this, {type:2, width:this.width, prevJoint:this.pipPosition, nextJoint:this.dipPosition, basis:a.bases[2]});
    this.distal = new b(this, {type:3, width:this.width, prevJoint:this.dipPosition, nextJoint:a.btipPosition, basis:a.bases[3]});
    this.bones = [this.metacarpal, this.proximal, this.medial, this.distal];
  };
  h.prototype.toString = function() {
    return "Finger [ id:" + this.id + " " + this.length + "mmx | width:" + this.width + "mm | direction:" + this.direction + " ]";
  };
  h.Invalid = {valid:!1};
}, {"./bone":1, "./dialog":6, "./pointable":14, underscore:24}], 8:[function(a, h) {
  var l = a("./hand"), b = a("./pointable"), g = a("./gesture").createGesture, k = a("gl-matrix"), c = k.mat3, e = k.vec3, f = a("./interaction_box"), q = a("./finger"), r = a("underscore");
  a = h.exports = function(a) {
    if (this.valid = !0, this.id = a.id, this.timestamp = a.timestamp, this.hands = [], this.handsMap = {}, this.pointables = [], this.tools = [], this.fingers = [], a.interactionBox && (this.interactionBox = new f(a.interactionBox)), this.gestures = [], this.pointablesMap = {}, this._translation = a.t, this._rotation = r.flatten(a.r), this._scaleFactor = a.s, this.data = a, this.type = "frame", this.currentFrameRate = a.currentFrameRate, a.gestures) {
      for (var b = 0, c = a.gestures.length;b != c;b++) {
        this.gestures.push(g(a.gestures[b]));
      }
    }
    this.postprocessData(a);
  };
  a.prototype.postprocessData = function(a) {
    a || (a = this.data);
    for (var c = 0, e = a.hands.length;c != e;c++) {
      var f = new l(a.hands[c]);
      f.frame = this;
      this.hands.push(f);
      this.handsMap[f.id] = f;
    }
    a.pointables = r.sortBy(a.pointables, function(a) {
      return a.id;
    });
    c = 0;
    for (e = a.pointables.length;c != e;c++) {
      f = a.pointables[c], f = f.dipPosition ? new q(f) : new b(f), f.frame = this, this.addPointable(f);
    }
  };
  a.prototype.addPointable = function(a) {
    if (this.pointables.push(a), this.pointablesMap[a.id] = a, (a.tool ? this.tools : this.fingers).push(a), void 0 !== a.handId && this.handsMap.hasOwnProperty(a.handId)) {
      var b = this.handsMap[a.handId];
      switch(b.pointables.push(a), (a.tool ? b.tools : b.fingers).push(a), a.type) {
        case 0:
          b.thumb = a;
          break;
        case 1:
          b.indexFinger = a;
          break;
        case 2:
          b.middleFinger = a;
          break;
        case 3:
          b.ringFinger = a;
          break;
        case 4:
          b.pinky = a;
      }
    }
  };
  a.prototype.tool = function(a) {
    a = this.pointable(a);
    return a.tool ? a : b.Invalid;
  };
  a.prototype.pointable = function(a) {
    return this.pointablesMap[a] || b.Invalid;
  };
  a.prototype.finger = function(a) {
    a = this.pointable(a);
    return a.tool ? b.Invalid : a;
  };
  a.prototype.hand = function(a) {
    return this.handsMap[a] || l.Invalid;
  };
  a.prototype.rotationAngle = function(a, b) {
    if (!this.valid || !a.valid) {
      return 0;
    }
    var c = this.rotationMatrix(a), c = Math.acos(.5 * (c[0] + c[4] + c[8] - 1));
    if (c = isNaN(c) ? 0 : c, void 0 !== b) {
      a = this.rotationAxis(a), c *= e.dot(a, e.normalize(e.create(), b));
    }
    return c;
  };
  a.prototype.rotationAxis = function(a) {
    return this.valid && a.valid ? e.normalize(e.create(), [this._rotation[7] - a._rotation[5], this._rotation[2] - a._rotation[6], this._rotation[3] - a._rotation[1]]) : e.create();
  };
  a.prototype.rotationMatrix = function(a) {
    if (!this.valid || !a.valid) {
      return c.create();
    }
    var b = c.transpose(c.create(), this._rotation);
    return c.multiply(c.create(), a._rotation, b);
  };
  a.prototype.scaleFactor = function(a) {
    return this.valid && a.valid ? Math.exp(this._scaleFactor - a._scaleFactor) : 1;
  };
  a.prototype.translation = function(a) {
    return this.valid && a.valid ? e.subtract(e.create(), this._translation, a._translation) : e.create();
  };
  a.prototype.toString = function() {
    var a = "Frame [ id:" + this.id + " | timestamp:" + this.timestamp + " | Hand count:(" + this.hands.length + ") | Pointable count:(" + this.pointables.length + ")";
    return this.gestures && (a += " | Gesture count:(" + this.gestures.length + ")"), a + " ]";
  };
  a.prototype.dump = function() {
    var a;
    a = "Frame Info:<br/>" + this.toString();
    a += "<br/><br/>Hands:<br/>";
    for (var b = 0, c = this.hands.length;b != c;b++) {
      a += "  " + this.hands[b].toString() + "<br/>";
    }
    a += "<br/><br/>Pointables:<br/>";
    b = 0;
    for (c = this.pointables.length;b != c;b++) {
      a += "  " + this.pointables[b].toString() + "<br/>";
    }
    if (this.gestures) {
      for (a += "<br/><br/>Gestures:<br/>", b = 0, c = this.gestures.length;b != c;b++) {
        a += "  " + this.gestures[b].toString() + "<br/>";
      }
    }
    return a += "<br/><br/>Raw JSON:<br/>", a + JSON.stringify(this.data);
  };
  a.Invalid = {valid:!1, hands:[], fingers:[], tools:[], gestures:[], pointables:[], pointable:function() {
    return b.Invalid;
  }, finger:function() {
    return b.Invalid;
  }, hand:function() {
    return l.Invalid;
  }, toString:function() {
    return "invalid frame";
  }, dump:function() {
    return this.toString();
  }, rotationAngle:function() {
    return 0;
  }, rotationMatrix:function() {
    return c.create();
  }, rotationAxis:function() {
    return e.create();
  }, scaleFactor:function() {
    return 1;
  }, translation:function() {
    return e.create();
  }};
}, {"./finger":7, "./gesture":9, "./hand":10, "./interaction_box":12, "./pointable":14, "gl-matrix":23, underscore:24}], 9:[function(a, h, l) {
  var b = a("gl-matrix").vec3;
  h = a("events").EventEmitter;
  var g = a("underscore"), k = (l.createGesture = function(a) {
    var b;
    switch(a.type) {
      case "circle":
        b = new c(a);
        break;
      case "swipe":
        b = new e(a);
        break;
      case "screenTap":
        b = new f(a);
        break;
      case "keyTap":
        b = new q(a);
        break;
      default:
        throw "unknown gesture type";
    }
    return b.id = a.id, b.handIds = a.handIds.slice(), b.pointableIds = a.pointableIds.slice(), b.duration = a.duration, b.state = a.state, b.type = a.type, b;
  }, l.gestureListener = function(a, b) {
    var c = {}, e = {};
    a.on("gesture", function(a, f) {
      if (a.type == b) {
        if (("start" == a.state || "stop" == a.state) && void 0 === e[a.id]) {
          var m = new k(a, f);
          e[a.id] = m;
          g.each(c, function(a, b) {
            m.on(b, a);
          });
        }
        e[a.id].update(a, f);
        "stop" == a.state && delete e[a.id];
      }
    });
    var f = {start:function(a) {
      return c.start = a, f;
    }, stop:function(a) {
      return c.stop = a, f;
    }, complete:function(a) {
      return c.stop = a, f;
    }, update:function(a) {
      return c.update = a, f;
    }};
    return f;
  }, l.Gesture = function(a, b) {
    this.gestures = [a];
    this.frames = [b];
  });
  k.prototype.update = function(a, b) {
    this.lastGesture = a;
    this.lastFrame = b;
    this.gestures.push(a);
    this.frames.push(b);
    this.emit(a.state, this);
  };
  k.prototype.translation = function() {
    return b.subtract(b.create(), this.lastGesture.startPosition, this.lastGesture.position);
  };
  g.extend(k.prototype, h.prototype);
  var c = function(a) {
    this.center = a.center;
    this.normal = a.normal;
    this.progress = a.progress;
    this.radius = a.radius;
  };
  c.prototype.toString = function() {
    return "CircleGesture [" + JSON.stringify(this) + "]";
  };
  var e = function(a) {
    this.startPosition = a.startPosition;
    this.position = a.position;
    this.direction = a.direction;
    this.speed = a.speed;
  };
  e.prototype.toString = function() {
    return "SwipeGesture [" + JSON.stringify(this) + "]";
  };
  var f = function(a) {
    this.position = a.position;
    this.direction = a.direction;
    this.progress = a.progress;
  };
  f.prototype.toString = function() {
    return "ScreenTapGesture [" + JSON.stringify(this) + "]";
  };
  var q = function(a) {
    this.position = a.position;
    this.direction = a.direction;
    this.progress = a.progress;
  };
  q.prototype.toString = function() {
    return "KeyTapGesture [" + JSON.stringify(this) + "]";
  };
}, {events:21, "gl-matrix":23, underscore:24}], 10:[function(a, h) {
  var l = a("./pointable"), b = a("./bone"), g = a("gl-matrix"), k = g.mat3, c = g.vec3, e = a("underscore");
  a = h.exports = function(a) {
    this.id = a.id;
    this.palmPosition = a.palmPosition;
    this.direction = a.direction;
    this.palmVelocity = a.palmVelocity;
    this.palmNormal = a.palmNormal;
    this.sphereCenter = a.sphereCenter;
    this.sphereRadius = a.sphereRadius;
    this.valid = !0;
    this.pointables = [];
    this.fingers = [];
    this.arm = a.armBasis ? new b(this, {type:4, width:a.armWidth, prevJoint:a.elbow, nextJoint:a.wrist, basis:a.armBasis}) : null;
    this.tools = [];
    this._translation = a.t;
    this._rotation = e.flatten(a.r);
    this._scaleFactor = a.s;
    this.timeVisible = a.timeVisible;
    this.stabilizedPalmPosition = a.stabilizedPalmPosition;
    this.type = a.type;
    this.grabStrength = a.grabStrength;
    this.pinchStrength = a.pinchStrength;
    this.confidence = a.confidence;
  };
  a.prototype.finger = function(a) {
    return (a = this.frame.finger(a)) && a.handId == this.id ? a : l.Invalid;
  };
  a.prototype.rotationAngle = function(a, b) {
    if (!this.valid || !a.valid || !a.hand(this.id).valid) {
      return 0;
    }
    var e = this.rotationMatrix(a), e = Math.acos(.5 * (e[0] + e[4] + e[8] - 1));
    if (e = isNaN(e) ? 0 : e, void 0 !== b) {
      a = this.rotationAxis(a), e *= c.dot(a, c.normalize(c.create(), b));
    }
    return e;
  };
  a.prototype.rotationAxis = function(a) {
    if (!this.valid || !a.valid) {
      return c.create();
    }
    a = a.hand(this.id);
    return a.valid ? c.normalize(c.create(), [this._rotation[7] - a._rotation[5], this._rotation[2] - a._rotation[6], this._rotation[3] - a._rotation[1]]) : c.create();
  };
  a.prototype.rotationMatrix = function(a) {
    if (!this.valid || !a.valid) {
      return k.create();
    }
    a = a.hand(this.id);
    if (!a.valid) {
      return k.create();
    }
    var b = k.transpose(k.create(), this._rotation);
    return k.multiply(k.create(), a._rotation, b);
  };
  a.prototype.scaleFactor = function(a) {
    if (!this.valid || !a.valid) {
      return 1;
    }
    a = a.hand(this.id);
    return a.valid ? Math.exp(this._scaleFactor - a._scaleFactor) : 1;
  };
  a.prototype.translation = function(a) {
    if (!this.valid || !a.valid) {
      return c.create();
    }
    a = a.hand(this.id);
    return a.valid ? [this._translation[0] - a._translation[0], this._translation[1] - a._translation[1], this._translation[2] - a._translation[2]] : c.create();
  };
  a.prototype.toString = function() {
    return "Hand (" + this.type + ") [ id: " + this.id + " | palm velocity:" + this.palmVelocity + " | sphere center:" + this.sphereCenter + " ] ";
  };
  a.prototype.pitch = function() {
    return Math.atan2(this.direction[1], -this.direction[2]);
  };
  a.prototype.yaw = function() {
    return Math.atan2(this.direction[0], -this.direction[2]);
  };
  a.prototype.roll = function() {
    return Math.atan2(this.palmNormal[0], -this.palmNormal[1]);
  };
  a.Invalid = {valid:!1, fingers:[], tools:[], pointables:[], left:!1, pointable:function() {
    return l.Invalid;
  }, finger:function() {
    return l.Invalid;
  }, toString:function() {
    return "invalid frame";
  }, dump:function() {
    return this.toString();
  }, rotationAngle:function() {
    return 0;
  }, rotationMatrix:function() {
    return k.create();
  }, rotationAxis:function() {
    return c.create();
  }, scaleFactor:function() {
    return 1;
  }, translation:function() {
    return c.create();
  }};
}, {"./bone":1, "./pointable":14, "gl-matrix":23, underscore:24}], 11:[function(a, h) {
  h.exports = {Controller:a("./controller"), Frame:a("./frame"), Gesture:a("./gesture"), Hand:a("./hand"), Pointable:a("./pointable"), Finger:a("./finger"), InteractionBox:a("./interaction_box"), CircularBuffer:a("./circular_buffer"), UI:a("./ui"), JSONProtocol:a("./protocol").JSONProtocol, glMatrix:a("gl-matrix"), mat3:a("gl-matrix").mat3, vec3:a("gl-matrix").vec3, loopController:void 0, version:a("./version.js"), _:a("underscore"), EventEmitter:a("events").EventEmitter, loop:function(a, b) {
    return a && void 0 === b && "[object Function]" === {}.toString.call(a) && (b = a, a = {}), this.loopController ? a && this.loopController.setupFrameEvents(a) : this.loopController = new this.Controller(a), this.loopController.loop(b), this.loopController;
  }, plugin:function(a, b) {
    this.Controller.plugin(a, b);
  }};
}, {"./circular_buffer":2, "./controller":5, "./finger":7, "./frame":8, "./gesture":9, "./hand":10, "./interaction_box":12, "./pointable":14, "./protocol":15, "./ui":16, "./version.js":19, events:21, "gl-matrix":23, underscore:24}], 12:[function(a, h) {
  var l = a("gl-matrix").vec3;
  a = h.exports = function(a) {
    this.valid = !0;
    this.center = a.center;
    this.size = a.size;
    this.width = a.size[0];
    this.height = a.size[1];
    this.depth = a.size[2];
  };
  a.prototype.denormalizePoint = function(a) {
    return l.fromValues((a[0] - .5) * this.size[0] + this.center[0], (a[1] - .5) * this.size[1] + this.center[1], (a[2] - .5) * this.size[2] + this.center[2]);
  };
  a.prototype.normalizePoint = function(a, g) {
    a = l.fromValues((a[0] - this.center[0]) / this.size[0] + .5, (a[1] - this.center[1]) / this.size[1] + .5, (a[2] - this.center[2]) / this.size[2] + .5);
    return g && (a[0] = Math.min(Math.max(a[0], 0), 1), a[1] = Math.min(Math.max(a[1], 0), 1), a[2] = Math.min(Math.max(a[2], 0), 1)), a;
  };
  a.prototype.toString = function() {
    return "InteractionBox [ width:" + this.width + " | height:" + this.height + " | depth:" + this.depth + " ]";
  };
  a.Invalid = {valid:!1};
}, {"gl-matrix":23}], 13:[function(a, h) {
  a = h.exports = function(a) {
    this.steps = [];
    this.controller = a;
  };
  a.prototype.addStep = function(a) {
    this.steps.push(a);
  };
  a.prototype.run = function(a) {
    for (var b = this.steps.length, g = 0;g != b && a;g++) {
      a = this.steps[g](a);
    }
    return a;
  };
  a.prototype.removeStep = function(a) {
    a = this.steps.indexOf(a);
    if (-1 === a) {
      throw "Step not found in pipeline";
    }
    this.steps.splice(a, 1);
  };
  a.prototype.addWrappedStep = function(a, b) {
    var g = this.controller, k = function(c) {
      var e, f, k;
      e = "frame" == a ? [c] : c[a + "s"] || [];
      f = 0;
      for (k = e.length;k > f;f++) {
        b.call(g, e[f]);
      }
      return c;
    };
    return this.addStep(k), k;
  };
}, {}], 14:[function(a, h) {
  a = a("gl-matrix");
  h = (a.vec3, h.exports = function(a) {
    this.valid = !0;
    this.id = a.id;
    this.handId = a.handId;
    this.length = a.length;
    this.tool = a.tool;
    this.width = a.width;
    this.direction = a.direction;
    this.stabilizedTipPosition = a.stabilizedTipPosition;
    this.tipPosition = a.tipPosition;
    this.tipVelocity = a.tipVelocity;
    this.touchZone = a.touchZone;
    this.touchDistance = a.touchDistance;
    this.timeVisible = a.timeVisible;
  });
  h.prototype.toString = function() {
    return "Pointable [ id:" + this.id + " " + this.length + "mmx | width:" + this.width + "mm | direction:" + this.direction + " ]";
  };
  h.prototype.hand = function() {
    return this.frame.hand(this.handId);
  };
  h.Invalid = {valid:!1};
}, {"gl-matrix":23}], 15:[function(a, h, l) {
  var b = a("./frame"), g = (a("./hand"), a("./pointable"), a("./finger"), a("underscore")), k = a("events").EventEmitter, c = function(a) {
    this.type = a.type;
    this.state = a.state;
  };
  l.chooseProtocol = function(a) {
    var b;
    switch(a.version) {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
        b = e(a);
        b.sendBackground = function(a, c) {
          a.send(b.encode({background:c}));
        };
        b.sendFocused = function(a, c) {
          a.send(b.encode({focused:c}));
        };
        b.sendOptimizeHMD = function(a, c) {
          a.send(b.encode({optimizeHMD:c}));
        };
        break;
      default:
        throw "unrecognized version";
    }
    return b;
  };
  var e = l.JSONProtocol = function(a) {
    var e = function(a) {
      if (a.event) {
        return new c(a.event);
      }
      e.emit("beforeFrameCreated", a);
      var f = new b(a);
      return e.emit("afterFrameCreated", f, a), f;
    };
    return e.encode = function(a) {
      return JSON.stringify(a);
    }, e.version = a.version, e.serviceVersion = a.serviceVersion, e.versionLong = "Version " + a.version, e.type = "protocol", g.extend(e, k.prototype), e;
  };
}, {"./finger":7, "./frame":8, "./hand":10, "./pointable":14, events:21, underscore:24}], 16:[function(a, h, l) {
  l.UI = {Region:a("./ui/region"), Cursor:a("./ui/cursor")};
}, {"./ui/cursor":17, "./ui/region":18}], 17:[function(a, h) {
  h.exports = function() {
    return function(a) {
      var b = a.pointables.sort(function(a, b) {
        return a.z - b.z;
      })[0];
      return b && b.valid && (a.cursorPosition = b.tipPosition), a;
    };
  };
}, {}], 18:[function(a, h) {
  var l = a("events").EventEmitter;
  a = a("underscore");
  var b = h.exports = function(a, b) {
    this.start = new Vector(a);
    this.end = new Vector(b);
    this.enteredFrame = null;
  };
  b.prototype.hasPointables = function(a) {
    for (var b = 0;b != a.pointables.length;b++) {
      var c = a.pointables[b].tipPosition;
      if (c.x >= this.start.x && c.x <= this.end.x && c.y >= this.start.y && c.y <= this.end.y && c.z >= this.start.z && c.z <= this.end.z) {
        return !0;
      }
    }
    return !1;
  };
  b.prototype.listener = function(a) {
    var b = this;
    return a && a.nearThreshold && this.setupNearRegion(a.nearThreshold), function(a) {
      return b.updatePosition(a);
    };
  };
  b.prototype.clipper = function() {
    var a = this;
    return function(b) {
      return a.updatePosition(b), a.enteredFrame ? b : null;
    };
  };
  b.prototype.setupNearRegion = function(a) {
    a = this.nearRegion = new b([this.start.x - a, this.start.y - a, this.start.z - a], [this.end.x + a, this.end.y + a, this.end.z + a]);
    var g = this;
    a.on("enter", function(a) {
      g.emit("near", a);
    });
    a.on("exit", function(a) {
      g.emit("far", a);
    });
    g.on("exit", function(a) {
      g.emit("near", a);
    });
  };
  b.prototype.updatePosition = function(a) {
    return this.nearRegion && this.nearRegion.updatePosition(a), this.hasPointables(a) && null == this.enteredFrame ? (this.enteredFrame = a, this.emit("enter", this.enteredFrame)) : this.hasPointables(a) || null == this.enteredFrame || (this.enteredFrame = null, this.emit("exit", this.enteredFrame)), a;
  };
  b.prototype.normalize = function(a) {
    return new Vector([(a.x - this.start.x) / (this.end.x - this.start.x), (a.y - this.start.y) / (this.end.y - this.start.y), (a.z - this.start.z) / (this.end.z - this.start.z)]);
  };
  b.prototype.mapToXY = function(a, b, c) {
    a = this.normalize(a);
    var e = a.x, f = a.y;
    return 1 < e ? e = 1 : -1 > e && (e = -1), 1 < f ? f = 1 : -1 > f && (f = -1), [(e + 1) / 2 * b, (1 - f) / 2 * c, a.z];
  };
  a.extend(b.prototype, l.prototype);
}, {events:21, underscore:24}], 19:[function(a, h) {
  h.exports = {full:"0.6.4", major:0, minor:6, dot:4};
}, {}], 20:[function() {
}, {}], 21:[function(a, h, l) {
  a = a("__browserify_process");
  a.EventEmitter || (a.EventEmitter = function() {
  });
  l = l.EventEmitter = a.EventEmitter;
  var b = "function" == typeof Array.isArray ? Array.isArray : function(a) {
    return "[object Array]" === Object.prototype.toString.call(a);
  };
  l.prototype.setMaxListeners = function(a) {
    this._events || (this._events = {});
    this._events.maxListeners = a;
  };
  l.prototype.emit = function(a) {
    if ("error" === a && (!this._events || !this._events.error || b(this._events.error) && !this._events.error.length)) {
      throw arguments[1] instanceof Error ? arguments[1] : Error("Uncaught, unspecified 'error' event.");
    }
    if (!this._events) {
      return !1;
    }
    var g = this._events[a];
    if (!g) {
      return !1;
    }
    if ("function" == typeof g) {
      switch(arguments.length) {
        case 1:
          g.call(this);
          break;
        case 2:
          g.call(this, arguments[1]);
          break;
        case 3:
          g.call(this, arguments[1], arguments[2]);
          break;
        default:
          var c = Array.prototype.slice.call(arguments, 1);
          g.apply(this, c);
      }
      return !0;
    }
    if (b(g)) {
      for (var c = Array.prototype.slice.call(arguments, 1), g = g.slice(), e = 0, f = g.length;f > e;e++) {
        g[e].apply(this, c);
      }
      return !0;
    }
    return !1;
  };
  l.prototype.addListener = function(a, k) {
    if ("function" != typeof k) {
      throw Error("addListener only takes instances of Function");
    }
    if (this._events || (this._events = {}), this.emit("newListener", a, k), this._events[a]) {
      if (b(this._events[a])) {
        if (!this._events[a].warned) {
          var c;
          (c = void 0 !== this._events.maxListeners ? this._events.maxListeners : 10) && 0 < c && this._events[a].length > c && (this._events[a].warned = !0, console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.", this._events[a].length), console.trace());
        }
        this._events[a].push(k);
      } else {
        this._events[a] = [this._events[a], k];
      }
    } else {
      this._events[a] = k;
    }
    return this;
  };
  l.prototype.on = l.prototype.addListener;
  l.prototype.once = function(a, b) {
    var c = this;
    return c.on(a, function f() {
      c.removeListener(a, f);
      b.apply(this, arguments);
    }), this;
  };
  l.prototype.removeListener = function(a, k) {
    if ("function" != typeof k) {
      throw Error("removeListener only takes instances of Function");
    }
    if (!this._events || !this._events[a]) {
      return this;
    }
    var c = this._events[a];
    if (b(c)) {
      a: {
        if (c.indexOf) {
          k = c.indexOf(k);
        } else {
          for (var e = 0;e < c.length;e++) {
            if (k === c[e]) {
              k = e;
              break a;
            }
          }
          k = -1;
        }
      }
      if (0 > k) {
        return this;
      }
      c.splice(k, 1);
      0 == c.length && delete this._events[a];
    } else {
      this._events[a] === k && delete this._events[a];
    }
    return this;
  };
  l.prototype.removeAllListeners = function(a) {
    return 0 === arguments.length ? (this._events = {}, this) : (a && this._events && this._events[a] && (this._events[a] = null), this);
  };
  l.prototype.listeners = function(a) {
    return this._events || (this._events = {}), this._events[a] || (this._events[a] = []), b(this._events[a]) || (this._events[a] = [this._events[a]]), this._events[a];
  };
  l.listenerCount = function(a, b) {
    return a._events && a._events[b] ? "function" == typeof a._events[b] ? 1 : a._events[b].length : 0;
  };
}, {__browserify_process:22}], 22:[function(a, h) {
  a = h.exports = {};
  a.nextTick = function() {
    if ("undefined" != typeof window && window.setImmediate) {
      return function(a) {
        return window.setImmediate(a);
      };
    }
    if ("undefined" != typeof window && window.postMessage && window.addEventListener) {
      var a = [];
      return window.addEventListener("message", function(b) {
        var g = b.source;
        (g === window || null === g) && "process-tick" === b.data && (b.stopPropagation(), 0 < a.length) && a.shift()();
      }, !0), function(b) {
        a.push(b);
        window.postMessage("process-tick", "*");
      };
    }
    return function(a) {
      setTimeout(a, 0);
    };
  }();
  a.title = "browser";
  a.browser = !0;
  a.env = {};
  a.argv = [];
  a.binding = function() {
    throw Error("process.binding is not supported");
  };
  a.cwd = function() {
    return "/";
  };
  a.chdir = function() {
    throw Error("process.chdir is not supported");
  };
}, {}], 23:[function(a, h, l) {
  !function(a) {
    var b;
    "undefined" == typeof l ? "function" == typeof define && "object" == typeof define.amd && define.amd ? (b = {}, define(function() {
      return b;
    })) : b = "undefined" != typeof window ? window : a : b = l;
    (function(a) {
      if (!b) {
        var b = 1E-6;
      }
      if (!e) {
        var e = "undefined" != typeof Float32Array ? Float32Array : Array;
      }
      if (!f) {
        var f = Math.random;
      }
      var g = {setMatrixArrayType:function(a) {
        e = a;
      }};
      "undefined" != typeof a && (a.glMatrix = g);
      var k = Math.PI / 180;
      g.toRadian = function(a) {
        return a * k;
      };
      var h = {create:function() {
        var a = new e(2);
        return a[0] = 0, a[1] = 0, a;
      }, clone:function(a) {
        var b = new e(2);
        return b[0] = a[0], b[1] = a[1], b;
      }, fromValues:function(a, b) {
        var c = new e(2);
        return c[0] = a, c[1] = b, c;
      }, copy:function(a, b) {
        return a[0] = b[0], a[1] = b[1], a;
      }, set:function(a, b, c) {
        return a[0] = b, a[1] = c, a;
      }, add:function(a, b, c) {
        return a[0] = b[0] + c[0], a[1] = b[1] + c[1], a;
      }, subtract:function(a, b, c) {
        return a[0] = b[0] - c[0], a[1] = b[1] - c[1], a;
      }};
      h.sub = h.subtract;
      h.multiply = function(a, b, c) {
        return a[0] = b[0] * c[0], a[1] = b[1] * c[1], a;
      };
      h.mul = h.multiply;
      h.divide = function(a, b, c) {
        return a[0] = b[0] / c[0], a[1] = b[1] / c[1], a;
      };
      h.div = h.divide;
      h.min = function(a, b, c) {
        return a[0] = Math.min(b[0], c[0]), a[1] = Math.min(b[1], c[1]), a;
      };
      h.max = function(a, b, c) {
        return a[0] = Math.max(b[0], c[0]), a[1] = Math.max(b[1], c[1]), a;
      };
      h.scale = function(a, b, c) {
        return a[0] = b[0] * c, a[1] = b[1] * c, a;
      };
      h.scaleAndAdd = function(a, b, c, e) {
        return a[0] = b[0] + c[0] * e, a[1] = b[1] + c[1] * e, a;
      };
      h.distance = function(a, b) {
        var c = b[0] - a[0];
        a = b[1] - a[1];
        return Math.sqrt(c * c + a * a);
      };
      h.dist = h.distance;
      h.squaredDistance = function(a, b) {
        var c = b[0] - a[0];
        a = b[1] - a[1];
        return c * c + a * a;
      };
      h.sqrDist = h.squaredDistance;
      h.length = function(a) {
        var b = a[0];
        a = a[1];
        return Math.sqrt(b * b + a * a);
      };
      h.len = h.length;
      h.squaredLength = function(a) {
        var b = a[0];
        a = a[1];
        return b * b + a * a;
      };
      h.sqrLen = h.squaredLength;
      h.negate = function(a, b) {
        return a[0] = -b[0], a[1] = -b[1], a;
      };
      h.normalize = function(a, b) {
        var c = b[0], e = b[1], c = c * c + e * e;
        return 0 < c && (c = 1 / Math.sqrt(c), a[0] = b[0] * c, a[1] = b[1] * c), a;
      };
      h.dot = function(a, b) {
        return a[0] * b[0] + a[1] * b[1];
      };
      h.cross = function(a, b, c) {
        b = b[0] * c[1] - b[1] * c[0];
        return a[0] = a[1] = 0, a[2] = b, a;
      };
      h.lerp = function(a, b, c, e) {
        var f = b[0];
        b = b[1];
        return a[0] = f + e * (c[0] - f), a[1] = b + e * (c[1] - b), a;
      };
      h.random = function(a, b) {
        b = b || 1;
        var c = 2 * f() * Math.PI;
        return a[0] = Math.cos(c) * b, a[1] = Math.sin(c) * b, a;
      };
      h.transformMat2 = function(a, b, c) {
        var e = b[0];
        b = b[1];
        return a[0] = c[0] * e + c[2] * b, a[1] = c[1] * e + c[3] * b, a;
      };
      h.transformMat2d = function(a, b, c) {
        var e = b[0];
        b = b[1];
        return a[0] = c[0] * e + c[2] * b + c[4], a[1] = c[1] * e + c[3] * b + c[5], a;
      };
      h.transformMat3 = function(a, b, c) {
        var e = b[0];
        b = b[1];
        return a[0] = c[0] * e + c[3] * b + c[6], a[1] = c[1] * e + c[4] * b + c[7], a;
      };
      h.transformMat4 = function(a, b, c) {
        var e = b[0];
        b = b[1];
        return a[0] = c[0] * e + c[4] * b + c[12], a[1] = c[1] * e + c[5] * b + c[13], a;
      };
      h.forEach = function() {
        var a = h.create();
        return function(b, c, e, f, m, g) {
          c || (c = 2);
          e || (e = 0);
          for (f = f ? Math.min(f * c + e, b.length) : b.length;f > e;e += c) {
            a[0] = b[e], a[1] = b[e + 1], m(a, a, g), b[e] = a[0], b[e + 1] = a[1];
          }
          return b;
        };
      }();
      h.str = function(a) {
        return "vec2(" + a[0] + ", " + a[1] + ")";
      };
      "undefined" != typeof a && (a.vec2 = h);
      var p = {create:function() {
        var a = new e(3);
        return a[0] = 0, a[1] = 0, a[2] = 0, a;
      }, clone:function(a) {
        var b = new e(3);
        return b[0] = a[0], b[1] = a[1], b[2] = a[2], b;
      }, fromValues:function(a, b, c) {
        var f = new e(3);
        return f[0] = a, f[1] = b, f[2] = c, f;
      }, copy:function(a, b) {
        return a[0] = b[0], a[1] = b[1], a[2] = b[2], a;
      }, set:function(a, b, c, e) {
        return a[0] = b, a[1] = c, a[2] = e, a;
      }, add:function(a, b, c) {
        return a[0] = b[0] + c[0], a[1] = b[1] + c[1], a[2] = b[2] + c[2], a;
      }, subtract:function(a, b, c) {
        return a[0] = b[0] - c[0], a[1] = b[1] - c[1], a[2] = b[2] - c[2], a;
      }};
      p.sub = p.subtract;
      p.multiply = function(a, b, c) {
        return a[0] = b[0] * c[0], a[1] = b[1] * c[1], a[2] = b[2] * c[2], a;
      };
      p.mul = p.multiply;
      p.divide = function(a, b, c) {
        return a[0] = b[0] / c[0], a[1] = b[1] / c[1], a[2] = b[2] / c[2], a;
      };
      p.div = p.divide;
      p.min = function(a, b, c) {
        return a[0] = Math.min(b[0], c[0]), a[1] = Math.min(b[1], c[1]), a[2] = Math.min(b[2], c[2]), a;
      };
      p.max = function(a, b, c) {
        return a[0] = Math.max(b[0], c[0]), a[1] = Math.max(b[1], c[1]), a[2] = Math.max(b[2], c[2]), a;
      };
      p.scale = function(a, b, c) {
        return a[0] = b[0] * c, a[1] = b[1] * c, a[2] = b[2] * c, a;
      };
      p.scaleAndAdd = function(a, b, c, e) {
        return a[0] = b[0] + c[0] * e, a[1] = b[1] + c[1] * e, a[2] = b[2] + c[2] * e, a;
      };
      p.distance = function(a, b) {
        var c = b[0] - a[0], e = b[1] - a[1];
        a = b[2] - a[2];
        return Math.sqrt(c * c + e * e + a * a);
      };
      p.dist = p.distance;
      p.squaredDistance = function(a, b) {
        var c = b[0] - a[0], e = b[1] - a[1];
        a = b[2] - a[2];
        return c * c + e * e + a * a;
      };
      p.sqrDist = p.squaredDistance;
      p.length = function(a) {
        var b = a[0], c = a[1];
        a = a[2];
        return Math.sqrt(b * b + c * c + a * a);
      };
      p.len = p.length;
      p.squaredLength = function(a) {
        var b = a[0], c = a[1];
        a = a[2];
        return b * b + c * c + a * a;
      };
      p.sqrLen = p.squaredLength;
      p.negate = function(a, b) {
        return a[0] = -b[0], a[1] = -b[1], a[2] = -b[2], a;
      };
      p.normalize = function(a, b) {
        var c = b[0], e = b[1], f = b[2], c = c * c + e * e + f * f;
        return 0 < c && (c = 1 / Math.sqrt(c), a[0] = b[0] * c, a[1] = b[1] * c, a[2] = b[2] * c), a;
      };
      p.dot = function(a, b) {
        return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
      };
      p.cross = function(a, b, c) {
        var e = b[0], f = b[1];
        b = b[2];
        var g = c[0], m = c[1];
        c = c[2];
        return a[0] = f * c - b * m, a[1] = b * g - e * c, a[2] = e * m - f * g, a;
      };
      p.lerp = function(a, b, c, e) {
        var f = b[0], g = b[1];
        b = b[2];
        return a[0] = f + e * (c[0] - f), a[1] = g + e * (c[1] - g), a[2] = b + e * (c[2] - b), a;
      };
      p.random = function(a, b) {
        b = b || 1;
        var c = 2 * f() * Math.PI, e = 2 * f() - 1, g = Math.sqrt(1 - e * e) * b;
        return a[0] = Math.cos(c) * g, a[1] = Math.sin(c) * g, a[2] = e * b, a;
      };
      p.transformMat4 = function(a, b, c) {
        var e = b[0], f = b[1];
        b = b[2];
        return a[0] = c[0] * e + c[4] * f + c[8] * b + c[12], a[1] = c[1] * e + c[5] * f + c[9] * b + c[13], a[2] = c[2] * e + c[6] * f + c[10] * b + c[14], a;
      };
      p.transformMat3 = function(a, b, c) {
        var e = b[0], f = b[1];
        b = b[2];
        return a[0] = e * c[0] + f * c[3] + b * c[6], a[1] = e * c[1] + f * c[4] + b * c[7], a[2] = e * c[2] + f * c[5] + b * c[8], a;
      };
      p.transformQuat = function(a, b, c) {
        var e = b[0], f = b[1], g = b[2];
        b = c[0];
        var m = c[1], k = c[2];
        c = c[3];
        var h = c * e + m * g - k * f, q = c * f + k * e - b * g, p = c * g + b * f - m * e, e = -b * e - m * f - k * g;
        return a[0] = h * c + e * -b + q * -k - p * -m, a[1] = q * c + e * -m + p * -b - h * -k, a[2] = p * c + e * -k + h * -m - q * -b, a;
      };
      p.rotateX = function(a, b, c, e) {
        var f = [], g = [];
        return f[0] = b[0] - c[0], f[1] = b[1] - c[1], f[2] = b[2] - c[2], g[0] = f[0], g[1] = f[1] * Math.cos(e) - f[2] * Math.sin(e), g[2] = f[1] * Math.sin(e) + f[2] * Math.cos(e), a[0] = g[0] + c[0], a[1] = g[1] + c[1], a[2] = g[2] + c[2], a;
      };
      p.rotateY = function(a, b, c, e) {
        var f = [], g = [];
        return f[0] = b[0] - c[0], f[1] = b[1] - c[1], f[2] = b[2] - c[2], g[0] = f[2] * Math.sin(e) + f[0] * Math.cos(e), g[1] = f[1], g[2] = f[2] * Math.cos(e) - f[0] * Math.sin(e), a[0] = g[0] + c[0], a[1] = g[1] + c[1], a[2] = g[2] + c[2], a;
      };
      p.rotateZ = function(a, b, c, e) {
        var f = [], g = [];
        return f[0] = b[0] - c[0], f[1] = b[1] - c[1], f[2] = b[2] - c[2], g[0] = f[0] * Math.cos(e) - f[1] * Math.sin(e), g[1] = f[0] * Math.sin(e) + f[1] * Math.cos(e), g[2] = f[2], a[0] = g[0] + c[0], a[1] = g[1] + c[1], a[2] = g[2] + c[2], a;
      };
      p.forEach = function() {
        var a = p.create();
        return function(b, c, e, f, g, m) {
          c || (c = 3);
          e || (e = 0);
          for (f = f ? Math.min(f * c + e, b.length) : b.length;f > e;e += c) {
            a[0] = b[e], a[1] = b[e + 1], a[2] = b[e + 2], g(a, a, m), b[e] = a[0], b[e + 1] = a[1], b[e + 2] = a[2];
          }
          return b;
        };
      }();
      p.str = function(a) {
        return "vec3(" + a[0] + ", " + a[1] + ", " + a[2] + ")";
      };
      "undefined" != typeof a && (a.vec3 = p);
      var l = {create:function() {
        var a = new e(4);
        return a[0] = 0, a[1] = 0, a[2] = 0, a[3] = 0, a;
      }, clone:function(a) {
        var b = new e(4);
        return b[0] = a[0], b[1] = a[1], b[2] = a[2], b[3] = a[3], b;
      }, fromValues:function(a, b, c, f) {
        var g = new e(4);
        return g[0] = a, g[1] = b, g[2] = c, g[3] = f, g;
      }, copy:function(a, b) {
        return a[0] = b[0], a[1] = b[1], a[2] = b[2], a[3] = b[3], a;
      }, set:function(a, b, c, e, f) {
        return a[0] = b, a[1] = c, a[2] = e, a[3] = f, a;
      }, add:function(a, b, c) {
        return a[0] = b[0] + c[0], a[1] = b[1] + c[1], a[2] = b[2] + c[2], a[3] = b[3] + c[3], a;
      }, subtract:function(a, b, c) {
        return a[0] = b[0] - c[0], a[1] = b[1] - c[1], a[2] = b[2] - c[2], a[3] = b[3] - c[3], a;
      }};
      l.sub = l.subtract;
      l.multiply = function(a, b, c) {
        return a[0] = b[0] * c[0], a[1] = b[1] * c[1], a[2] = b[2] * c[2], a[3] = b[3] * c[3], a;
      };
      l.mul = l.multiply;
      l.divide = function(a, b, c) {
        return a[0] = b[0] / c[0], a[1] = b[1] / c[1], a[2] = b[2] / c[2], a[3] = b[3] / c[3], a;
      };
      l.div = l.divide;
      l.min = function(a, b, c) {
        return a[0] = Math.min(b[0], c[0]), a[1] = Math.min(b[1], c[1]), a[2] = Math.min(b[2], c[2]), a[3] = Math.min(b[3], c[3]), a;
      };
      l.max = function(a, b, c) {
        return a[0] = Math.max(b[0], c[0]), a[1] = Math.max(b[1], c[1]), a[2] = Math.max(b[2], c[2]), a[3] = Math.max(b[3], c[3]), a;
      };
      l.scale = function(a, b, c) {
        return a[0] = b[0] * c, a[1] = b[1] * c, a[2] = b[2] * c, a[3] = b[3] * c, a;
      };
      l.scaleAndAdd = function(a, b, c, e) {
        return a[0] = b[0] + c[0] * e, a[1] = b[1] + c[1] * e, a[2] = b[2] + c[2] * e, a[3] = b[3] + c[3] * e, a;
      };
      l.distance = function(a, b) {
        var c = b[0] - a[0], e = b[1] - a[1], f = b[2] - a[2];
        a = b[3] - a[3];
        return Math.sqrt(c * c + e * e + f * f + a * a);
      };
      l.dist = l.distance;
      l.squaredDistance = function(a, b) {
        var c = b[0] - a[0], e = b[1] - a[1], f = b[2] - a[2];
        a = b[3] - a[3];
        return c * c + e * e + f * f + a * a;
      };
      l.sqrDist = l.squaredDistance;
      l.length = function(a) {
        var b = a[0], c = a[1], e = a[2];
        a = a[3];
        return Math.sqrt(b * b + c * c + e * e + a * a);
      };
      l.len = l.length;
      l.squaredLength = function(a) {
        var b = a[0], c = a[1], e = a[2];
        a = a[3];
        return b * b + c * c + e * e + a * a;
      };
      l.sqrLen = l.squaredLength;
      l.negate = function(a, b) {
        return a[0] = -b[0], a[1] = -b[1], a[2] = -b[2], a[3] = -b[3], a;
      };
      l.normalize = function(a, b) {
        var c = b[0], e = b[1], f = b[2], g = b[3], c = c * c + e * e + f * f + g * g;
        return 0 < c && (c = 1 / Math.sqrt(c), a[0] = b[0] * c, a[1] = b[1] * c, a[2] = b[2] * c, a[3] = b[3] * c), a;
      };
      l.dot = function(a, b) {
        return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
      };
      l.lerp = function(a, b, c, e) {
        var f = b[0], g = b[1], m = b[2];
        b = b[3];
        return a[0] = f + e * (c[0] - f), a[1] = g + e * (c[1] - g), a[2] = m + e * (c[2] - m), a[3] = b + e * (c[3] - b), a;
      };
      l.random = function(a, b) {
        return b = b || 1, a[0] = f(), a[1] = f(), a[2] = f(), a[3] = f(), l.normalize(a, a), l.scale(a, a, b), a;
      };
      l.transformMat4 = function(a, b, c) {
        var e = b[0], f = b[1], g = b[2];
        b = b[3];
        return a[0] = c[0] * e + c[4] * f + c[8] * g + c[12] * b, a[1] = c[1] * e + c[5] * f + c[9] * g + c[13] * b, a[2] = c[2] * e + c[6] * f + c[10] * g + c[14] * b, a[3] = c[3] * e + c[7] * f + c[11] * g + c[15] * b, a;
      };
      l.transformQuat = function(a, b, c) {
        var e = b[0], f = b[1], g = b[2];
        b = c[0];
        var m = c[1], k = c[2];
        c = c[3];
        var h = c * e + m * g - k * f, q = c * f + k * e - b * g, p = c * g + b * f - m * e, e = -b * e - m * f - k * g;
        return a[0] = h * c + e * -b + q * -k - p * -m, a[1] = q * c + e * -m + p * -b - h * -k, a[2] = p * c + e * -k + h * -m - q * -b, a;
      };
      l.forEach = function() {
        var a = l.create();
        return function(b, c, e, f, g, m) {
          c || (c = 4);
          e || (e = 0);
          for (f = f ? Math.min(f * c + e, b.length) : b.length;f > e;e += c) {
            a[0] = b[e], a[1] = b[e + 1], a[2] = b[e + 2], a[3] = b[e + 3], g(a, a, m), b[e] = a[0], b[e + 1] = a[1], b[e + 2] = a[2], b[e + 3] = a[3];
          }
          return b;
        };
      }();
      l.str = function(a) {
        return "vec4(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ")";
      };
      "undefined" != typeof a && (a.vec4 = l);
      g = {create:function() {
        var a = new e(4);
        return a[0] = 1, a[1] = 0, a[2] = 0, a[3] = 1, a;
      }, clone:function(a) {
        var b = new e(4);
        return b[0] = a[0], b[1] = a[1], b[2] = a[2], b[3] = a[3], b;
      }, copy:function(a, b) {
        return a[0] = b[0], a[1] = b[1], a[2] = b[2], a[3] = b[3], a;
      }, identity:function(a) {
        return a[0] = 1, a[1] = 0, a[2] = 0, a[3] = 1, a;
      }, transpose:function(a, b) {
        if (a === b) {
          var c = b[1];
          a[1] = b[2];
          a[2] = c;
        } else {
          a[0] = b[0], a[1] = b[2], a[2] = b[1], a[3] = b[3];
        }
        return a;
      }, invert:function(a, b) {
        var c = b[0], e = b[1], f = b[2];
        b = b[3];
        var g = c * b - f * e;
        return g ? (g = 1 / g, a[0] = b * g, a[1] = -e * g, a[2] = -f * g, a[3] = c * g, a) : null;
      }, adjoint:function(a, b) {
        var c = b[0];
        return a[0] = b[3], a[1] = -b[1], a[2] = -b[2], a[3] = c, a;
      }, determinant:function(a) {
        return a[0] * a[3] - a[2] * a[1];
      }, multiply:function(a, b, c) {
        var e = b[0], f = b[1], g = b[2];
        b = b[3];
        var m = c[0], k = c[1], h = c[2];
        c = c[3];
        return a[0] = e * m + g * k, a[1] = f * m + b * k, a[2] = e * h + g * c, a[3] = f * h + b * c, a;
      }};
      g.mul = g.multiply;
      g.rotate = function(a, b, c) {
        var e = b[0], f = b[1], g = b[2];
        b = b[3];
        var m = Math.sin(c);
        c = Math.cos(c);
        return a[0] = e * c + g * m, a[1] = f * c + b * m, a[2] = e * -m + g * c, a[3] = f * -m + b * c, a;
      };
      g.scale = function(a, b, c) {
        var e = b[1], f = b[2], g = b[3], m = c[0];
        c = c[1];
        return a[0] = b[0] * m, a[1] = e * m, a[2] = f * c, a[3] = g * c, a;
      };
      g.str = function(a) {
        return "mat2(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ")";
      };
      g.frob = function(a) {
        return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2));
      };
      g.LDU = function(a, b, c, e) {
        return a[2] = e[2] / e[0], c[0] = e[0], c[1] = e[1], c[3] = e[3] - a[2] * c[1], [a, b, c];
      };
      "undefined" != typeof a && (a.mat2 = g);
      g = {create:function() {
        var a = new e(6);
        return a[0] = 1, a[1] = 0, a[2] = 0, a[3] = 1, a[4] = 0, a[5] = 0, a;
      }, clone:function(a) {
        var b = new e(6);
        return b[0] = a[0], b[1] = a[1], b[2] = a[2], b[3] = a[3], b[4] = a[4], b[5] = a[5], b;
      }, copy:function(a, b) {
        return a[0] = b[0], a[1] = b[1], a[2] = b[2], a[3] = b[3], a[4] = b[4], a[5] = b[5], a;
      }, identity:function(a) {
        return a[0] = 1, a[1] = 0, a[2] = 0, a[3] = 1, a[4] = 0, a[5] = 0, a;
      }, invert:function(a, b) {
        var c = b[0], e = b[1], f = b[2], g = b[3], m = b[4];
        b = b[5];
        var k = c * g - e * f;
        return k ? (k = 1 / k, a[0] = g * k, a[1] = -e * k, a[2] = -f * k, a[3] = c * k, a[4] = (f * b - g * m) * k, a[5] = (e * m - c * b) * k, a) : null;
      }, determinant:function(a) {
        return a[0] * a[3] - a[1] * a[2];
      }, multiply:function(a, b, c) {
        var e = b[0], f = b[1], g = b[2], m = b[3], k = b[4];
        b = b[5];
        var h = c[0], q = c[1], p = c[2], l = c[3], r = c[4];
        c = c[5];
        return a[0] = e * h + g * q, a[1] = f * h + m * q, a[2] = e * p + g * l, a[3] = f * p + m * l, a[4] = e * r + g * c + k, a[5] = f * r + m * c + b, a;
      }};
      g.mul = g.multiply;
      g.rotate = function(a, b, c) {
        var e = b[0], f = b[1], g = b[2], m = b[3], k = b[4];
        b = b[5];
        var h = Math.sin(c);
        c = Math.cos(c);
        return a[0] = e * c + g * h, a[1] = f * c + m * h, a[2] = e * -h + g * c, a[3] = f * -h + m * c, a[4] = k, a[5] = b, a;
      };
      g.scale = function(a, b, c) {
        var e = b[1], f = b[2], g = b[3], m = b[4], k = b[5], h = c[0];
        c = c[1];
        return a[0] = b[0] * h, a[1] = e * h, a[2] = f * c, a[3] = g * c, a[4] = m, a[5] = k, a;
      };
      g.translate = function(a, b, c) {
        var e = b[0], f = b[1], g = b[2], m = b[3], k = b[4];
        b = b[5];
        var h = c[0];
        c = c[1];
        return a[0] = e, a[1] = f, a[2] = g, a[3] = m, a[4] = e * h + g * c + k, a[5] = f * h + m * c + b, a;
      };
      g.str = function(a) {
        return "mat2d(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ")";
      };
      g.frob = function(a) {
        return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1);
      };
      "undefined" != typeof a && (a.mat2d = g);
      var v = {create:function() {
        var a = new e(9);
        return a[0] = 1, a[1] = 0, a[2] = 0, a[3] = 0, a[4] = 1, a[5] = 0, a[6] = 0, a[7] = 0, a[8] = 1, a;
      }, fromMat4:function(a, b) {
        return a[0] = b[0], a[1] = b[1], a[2] = b[2], a[3] = b[4], a[4] = b[5], a[5] = b[6], a[6] = b[8], a[7] = b[9], a[8] = b[10], a;
      }, clone:function(a) {
        var b = new e(9);
        return b[0] = a[0], b[1] = a[1], b[2] = a[2], b[3] = a[3], b[4] = a[4], b[5] = a[5], b[6] = a[6], b[7] = a[7], b[8] = a[8], b;
      }, copy:function(a, b) {
        return a[0] = b[0], a[1] = b[1], a[2] = b[2], a[3] = b[3], a[4] = b[4], a[5] = b[5], a[6] = b[6], a[7] = b[7], a[8] = b[8], a;
      }, identity:function(a) {
        return a[0] = 1, a[1] = 0, a[2] = 0, a[3] = 0, a[4] = 1, a[5] = 0, a[6] = 0, a[7] = 0, a[8] = 1, a;
      }, transpose:function(a, b) {
        if (a === b) {
          var c = b[1], e = b[2], f = b[5];
          a[1] = b[3];
          a[2] = b[6];
          a[3] = c;
          a[5] = b[7];
          a[6] = e;
          a[7] = f;
        } else {
          a[0] = b[0], a[1] = b[3], a[2] = b[6], a[3] = b[1], a[4] = b[4], a[5] = b[7], a[6] = b[2], a[7] = b[5], a[8] = b[8];
        }
        return a;
      }, invert:function(a, b) {
        var c = b[0], e = b[1], f = b[2], g = b[3], k = b[4], m = b[5], h = b[6], q = b[7];
        b = b[8];
        var p = b * k - m * q, l = -b * g + m * h, r = q * g - k * h, t = c * p + e * l + f * r;
        return t ? (t = 1 / t, a[0] = p * t, a[1] = (-b * e + f * q) * t, a[2] = (m * e - f * k) * t, a[3] = l * t, a[4] = (b * c - f * h) * t, a[5] = (-m * c + f * g) * t, a[6] = r * t, a[7] = (-q * c + e * h) * t, a[8] = (k * c - e * g) * t, a) : null;
      }, adjoint:function(a, b) {
        var c = b[0], e = b[1], f = b[2], g = b[3], k = b[4], m = b[5], h = b[6], q = b[7];
        b = b[8];
        return a[0] = k * b - m * q, a[1] = f * q - e * b, a[2] = e * m - f * k, a[3] = m * h - g * b, a[4] = c * b - f * h, a[5] = f * g - c * m, a[6] = g * q - k * h, a[7] = e * h - c * q, a[8] = c * k - e * g, a;
      }, determinant:function(a) {
        var b = a[3], c = a[4], e = a[5], f = a[6], g = a[7], k = a[8];
        return a[0] * (k * c - e * g) + a[1] * (-k * b + e * f) + a[2] * (g * b - c * f);
      }, multiply:function(a, b, c) {
        var e = b[0], f = b[1], g = b[2], k = b[3], m = b[4], h = b[5], q = b[6], p = b[7];
        b = b[8];
        var l = c[0], r = c[1], t = c[2], w = c[3], u = c[4], v = c[5], y = c[6], x = c[7];
        c = c[8];
        return a[0] = l * e + r * k + t * q, a[1] = l * f + r * m + t * p, a[2] = l * g + r * h + t * b, a[3] = w * e + u * k + v * q, a[4] = w * f + u * m + v * p, a[5] = w * g + u * h + v * b, a[6] = y * e + x * k + c * q, a[7] = y * f + x * m + c * p, a[8] = y * g + x * h + c * b, a;
      }};
      v.mul = v.multiply;
      v.translate = function(a, b, c) {
        var e = b[0], f = b[1], g = b[2], k = b[3], m = b[4], h = b[5], q = b[6], p = b[7];
        b = b[8];
        var l = c[0];
        c = c[1];
        return a[0] = e, a[1] = f, a[2] = g, a[3] = k, a[4] = m, a[5] = h, a[6] = l * e + c * k + q, a[7] = l * f + c * m + p, a[8] = l * g + c * h + b, a;
      };
      v.rotate = function(a, b, c) {
        var e = b[0], f = b[1], g = b[2], k = b[3], m = b[4], h = b[5], q = b[6], p = b[7];
        b = b[8];
        var l = Math.sin(c);
        c = Math.cos(c);
        return a[0] = c * e + l * k, a[1] = c * f + l * m, a[2] = c * g + l * h, a[3] = c * k - l * e, a[4] = c * m - l * f, a[5] = c * h - l * g, a[6] = q, a[7] = p, a[8] = b, a;
      };
      v.scale = function(a, b, c) {
        var e = c[0];
        c = c[1];
        return a[0] = e * b[0], a[1] = e * b[1], a[2] = e * b[2], a[3] = c * b[3], a[4] = c * b[4], a[5] = c * b[5], a[6] = b[6], a[7] = b[7], a[8] = b[8], a;
      };
      v.fromMat2d = function(a, b) {
        return a[0] = b[0], a[1] = b[1], a[2] = 0, a[3] = b[2], a[4] = b[3], a[5] = 0, a[6] = b[4], a[7] = b[5], a[8] = 1, a;
      };
      v.fromQuat = function(a, b) {
        var c = b[0], e = b[1], f = b[2];
        b = b[3];
        var g = c + c, k = e + e, h = f + f, c = c * g, m = e * g, e = e * k, q = f * g, p = f * k, f = f * h, g = b * g, k = b * k;
        b *= h;
        return a[0] = 1 - e - f, a[3] = m - b, a[6] = q + k, a[1] = m + b, a[4] = 1 - c - f, a[7] = p - g, a[2] = q - k, a[5] = p + g, a[8] = 1 - c - e, a;
      };
      v.normalFromMat4 = function(a, b) {
        var c = b[0], e = b[1], f = b[2], g = b[3], k = b[4], h = b[5], m = b[6], q = b[7], p = b[8], l = b[9], r = b[10], t = b[11], w = b[12], u = b[13], v = b[14];
        b = b[15];
        var y = c * h - e * k, x = c * m - f * k, R = c * q - g * k, S = e * m - f * h, I = e * q - g * h, V = f * q - g * m, ka = p * u - l * w, ma = p * v - r * w, p = p * b - t * w, Q = l * v - r * u, l = l * b - t * u, r = r * b - t * v;
        return (t = y * r - x * l + R * Q + S * p - I * ma + V * ka) ? (t = 1 / t, a[0] = (h * r - m * l + q * Q) * t, a[1] = (m * p - k * r - q * ma) * t, a[2] = (k * l - h * p + q * ka) * t, a[3] = (f * l - e * r - g * Q) * t, a[4] = (c * r - f * p + g * ma) * t, a[5] = (e * p - c * l - g * ka) * t, a[6] = (u * V - v * I + b * S) * t, a[7] = (v * R - w * V - b * x) * t, a[8] = (w * I - u * R + b * y) * t, a) : null;
      };
      v.str = function(a) {
        return "mat3(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ", " + a[8] + ")";
      };
      v.frob = function(a) {
        return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2));
      };
      "undefined" != typeof a && (a.mat3 = v);
      var y = {create:function() {
        var a = new e(16);
        return a[0] = 1, a[1] = 0, a[2] = 0, a[3] = 0, a[4] = 0, a[5] = 1, a[6] = 0, a[7] = 0, a[8] = 0, a[9] = 0, a[10] = 1, a[11] = 0, a[12] = 0, a[13] = 0, a[14] = 0, a[15] = 1, a;
      }, clone:function(a) {
        var b = new e(16);
        return b[0] = a[0], b[1] = a[1], b[2] = a[2], b[3] = a[3], b[4] = a[4], b[5] = a[5], b[6] = a[6], b[7] = a[7], b[8] = a[8], b[9] = a[9], b[10] = a[10], b[11] = a[11], b[12] = a[12], b[13] = a[13], b[14] = a[14], b[15] = a[15], b;
      }, copy:function(a, b) {
        return a[0] = b[0], a[1] = b[1], a[2] = b[2], a[3] = b[3], a[4] = b[4], a[5] = b[5], a[6] = b[6], a[7] = b[7], a[8] = b[8], a[9] = b[9], a[10] = b[10], a[11] = b[11], a[12] = b[12], a[13] = b[13], a[14] = b[14], a[15] = b[15], a;
      }, identity:function(a) {
        return a[0] = 1, a[1] = 0, a[2] = 0, a[3] = 0, a[4] = 0, a[5] = 1, a[6] = 0, a[7] = 0, a[8] = 0, a[9] = 0, a[10] = 1, a[11] = 0, a[12] = 0, a[13] = 0, a[14] = 0, a[15] = 1, a;
      }, transpose:function(a, b) {
        if (a === b) {
          var c = b[1], e = b[2], f = b[3], g = b[6], k = b[7], h = b[11];
          a[1] = b[4];
          a[2] = b[8];
          a[3] = b[12];
          a[4] = c;
          a[6] = b[9];
          a[7] = b[13];
          a[8] = e;
          a[9] = g;
          a[11] = b[14];
          a[12] = f;
          a[13] = k;
          a[14] = h;
        } else {
          a[0] = b[0], a[1] = b[4], a[2] = b[8], a[3] = b[12], a[4] = b[1], a[5] = b[5], a[6] = b[9], a[7] = b[13], a[8] = b[2], a[9] = b[6], a[10] = b[10], a[11] = b[14], a[12] = b[3], a[13] = b[7], a[14] = b[11], a[15] = b[15];
        }
        return a;
      }, invert:function(a, b) {
        var c = b[0], e = b[1], f = b[2], g = b[3], k = b[4], h = b[5], m = b[6], q = b[7], p = b[8], l = b[9], r = b[10], w = b[11], t = b[12], u = b[13], v = b[14];
        b = b[15];
        var y = c * h - e * k, x = c * m - f * k, R = c * q - g * k, S = e * m - f * h, I = e * q - g * h, V = f * q - g * m, ka = p * u - l * t, ma = p * v - r * t, Q = p * b - w * t, Z = l * v - r * u, ra = l * b - w * u, pa = r * b - w * v, fa = y * pa - x * ra + R * Z + S * Q - I * ma + V * ka;
        return fa ? (fa = 1 / fa, a[0] = (h * pa - m * ra + q * Z) * fa, a[1] = (f * ra - e * pa - g * Z) * fa, a[2] = (u * V - v * I + b * S) * fa, a[3] = (r * I - l * V - w * S) * fa, a[4] = (m * Q - k * pa - q * ma) * fa, a[5] = (c * pa - f * Q + g * ma) * fa, a[6] = (v * R - t * V - b * x) * fa, a[7] = (p * V - r * R + w * x) * fa, a[8] = (k * ra - h * Q + q * ka) * fa, a[9] = (e * Q - c * ra - g * ka) * fa, a[10] = (t * I - u * R + b * y) * fa, a[11] = (l * R - p * I - w * y) * fa, a[12] = (h * 
        ma - k * Z - m * ka) * fa, a[13] = (c * Z - e * ma + f * ka) * fa, a[14] = (u * x - t * S - v * y) * fa, a[15] = (p * S - l * x + r * y) * fa, a) : null;
      }, adjoint:function(a, b) {
        var c = b[0], e = b[1], f = b[2], g = b[3], k = b[4], h = b[5], m = b[6], q = b[7], p = b[8], l = b[9], r = b[10], w = b[11], t = b[12], u = b[13], v = b[14];
        b = b[15];
        return a[0] = h * (r * b - w * v) - l * (m * b - q * v) + u * (m * w - q * r), a[1] = -(e * (r * b - w * v) - l * (f * b - g * v) + u * (f * w - g * r)), a[2] = e * (m * b - q * v) - h * (f * b - g * v) + u * (f * q - g * m), a[3] = -(e * (m * w - q * r) - h * (f * w - g * r) + l * (f * q - g * m)), a[4] = -(k * (r * b - w * v) - p * (m * b - q * v) + t * (m * w - q * r)), a[5] = c * (r * b - w * v) - p * (f * b - g * v) + t * (f * w - g * r), a[6] = -(c * (m * b - q * v) - k * (f * b - g * 
        v) + t * (f * q - g * m)), a[7] = c * (m * w - q * r) - k * (f * w - g * r) + p * (f * q - g * m), a[8] = k * (l * b - w * u) - p * (h * b - q * u) + t * (h * w - q * l), a[9] = -(c * (l * b - w * u) - p * (e * b - g * u) + t * (e * w - g * l)), a[10] = c * (h * b - q * u) - k * (e * b - g * u) + t * (e * q - g * h), a[11] = -(c * (h * w - q * l) - k * (e * w - g * l) + p * (e * q - g * h)), a[12] = -(k * (l * v - r * u) - p * (h * v - m * u) + t * (h * r - m * l)), a[13] = c * (l * v - r * 
        u) - p * (e * v - f * u) + t * (e * r - f * l), a[14] = -(c * (h * v - m * u) - k * (e * v - f * u) + t * (e * m - f * h)), a[15] = c * (h * r - m * l) - k * (e * r - f * l) + p * (e * m - f * h), a;
      }, determinant:function(a) {
        var b = a[0], c = a[1], e = a[2], f = a[3], g = a[4], k = a[5], h = a[6], m = a[7], q = a[8], p = a[9], l = a[10], r = a[11], w = a[12], u = a[13], v = a[14];
        a = a[15];
        return (b * k - c * g) * (l * a - r * v) - (b * h - e * g) * (p * a - r * u) + (b * m - f * g) * (p * v - l * u) + (c * h - e * k) * (q * a - r * w) - (c * m - f * k) * (q * v - l * w) + (e * m - f * h) * (q * u - p * w);
      }, multiply:function(a, b, c) {
        var e = b[0], f = b[1], g = b[2], k = b[3], h = b[4], m = b[5], q = b[6], p = b[7], l = b[8], r = b[9], w = b[10], t = b[11], u = b[12], v = b[13], y = b[14];
        b = b[15];
        var x = c[0], C = c[1], S = c[2], I = c[3];
        return a[0] = x * e + C * h + S * l + I * u, a[1] = x * f + C * m + S * r + I * v, a[2] = x * g + C * q + S * w + I * y, a[3] = x * k + C * p + S * t + I * b, x = c[4], C = c[5], S = c[6], I = c[7], a[4] = x * e + C * h + S * l + I * u, a[5] = x * f + C * m + S * r + I * v, a[6] = x * g + C * q + S * w + I * y, a[7] = x * k + C * p + S * t + I * b, x = c[8], C = c[9], S = c[10], I = c[11], a[8] = x * e + C * h + S * l + I * u, a[9] = x * f + C * m + S * r + I * v, a[10] = x * g + C * q + 
        S * w + I * y, a[11] = x * k + C * p + S * t + I * b, x = c[12], C = c[13], S = c[14], I = c[15], a[12] = x * e + C * h + S * l + I * u, a[13] = x * f + C * m + S * r + I * v, a[14] = x * g + C * q + S * w + I * y, a[15] = x * k + C * p + S * t + I * b, a;
      }};
      y.mul = y.multiply;
      y.translate = function(a, b, c) {
        var e, f, g, k, h, m, q, p, l, r, w, t, u = c[0], v = c[1];
        c = c[2];
        return b === a ? (a[12] = b[0] * u + b[4] * v + b[8] * c + b[12], a[13] = b[1] * u + b[5] * v + b[9] * c + b[13], a[14] = b[2] * u + b[6] * v + b[10] * c + b[14], a[15] = b[3] * u + b[7] * v + b[11] * c + b[15]) : (e = b[0], f = b[1], g = b[2], k = b[3], h = b[4], m = b[5], q = b[6], p = b[7], l = b[8], r = b[9], w = b[10], t = b[11], a[0] = e, a[1] = f, a[2] = g, a[3] = k, a[4] = h, a[5] = m, a[6] = q, a[7] = p, a[8] = l, a[9] = r, a[10] = w, a[11] = t, a[12] = e * u + h * v + l * c + b[12], 
        a[13] = f * u + m * v + r * c + b[13], a[14] = g * u + q * v + w * c + b[14], a[15] = k * u + p * v + t * c + b[15]), a;
      };
      y.scale = function(a, b, c) {
        var e = c[0], f = c[1];
        c = c[2];
        return a[0] = b[0] * e, a[1] = b[1] * e, a[2] = b[2] * e, a[3] = b[3] * e, a[4] = b[4] * f, a[5] = b[5] * f, a[6] = b[6] * f, a[7] = b[7] * f, a[8] = b[8] * c, a[9] = b[9] * c, a[10] = b[10] * c, a[11] = b[11] * c, a[12] = b[12], a[13] = b[13], a[14] = b[14], a[15] = b[15], a;
      };
      y.rotate = function(a, c, e, f) {
        var g, k, h, m, q, p, l, r, w, t, u, v, y, x, A, C, S, I, V, ka, ma, Q, Z, ra, pa = f[0], fa = f[1];
        f = f[2];
        var X = Math.sqrt(pa * pa + fa * fa + f * f);
        return Math.abs(X) < b ? null : (X = 1 / X, pa *= X, fa *= X, f *= X, g = Math.sin(e), k = Math.cos(e), h = 1 - k, m = c[0], q = c[1], p = c[2], l = c[3], r = c[4], w = c[5], t = c[6], u = c[7], v = c[8], y = c[9], x = c[10], A = c[11], C = pa * pa * h + k, S = fa * pa * h + f * g, I = f * pa * h - fa * g, V = pa * fa * h - f * g, ka = fa * fa * h + k, ma = f * fa * h + pa * g, Q = pa * f * h + fa * g, Z = fa * f * h - pa * g, ra = f * f * h + k, a[0] = m * C + r * S + v * I, a[1] = q * C + 
        w * S + y * I, a[2] = p * C + t * S + x * I, a[3] = l * C + u * S + A * I, a[4] = m * V + r * ka + v * ma, a[5] = q * V + w * ka + y * ma, a[6] = p * V + t * ka + x * ma, a[7] = l * V + u * ka + A * ma, a[8] = m * Q + r * Z + v * ra, a[9] = q * Q + w * Z + y * ra, a[10] = p * Q + t * Z + x * ra, a[11] = l * Q + u * Z + A * ra, c !== a && (a[12] = c[12], a[13] = c[13], a[14] = c[14], a[15] = c[15]), a);
      };
      y.rotateX = function(a, b, c) {
        var e = Math.sin(c);
        c = Math.cos(c);
        var f = b[4], g = b[5], k = b[6], h = b[7], m = b[8], q = b[9], p = b[10], l = b[11];
        return b !== a && (a[0] = b[0], a[1] = b[1], a[2] = b[2], a[3] = b[3], a[12] = b[12], a[13] = b[13], a[14] = b[14], a[15] = b[15]), a[4] = f * c + m * e, a[5] = g * c + q * e, a[6] = k * c + p * e, a[7] = h * c + l * e, a[8] = m * c - f * e, a[9] = q * c - g * e, a[10] = p * c - k * e, a[11] = l * c - h * e, a;
      };
      y.rotateY = function(a, b, c) {
        var e = Math.sin(c);
        c = Math.cos(c);
        var f = b[0], g = b[1], k = b[2], h = b[3], m = b[8], q = b[9], p = b[10], l = b[11];
        return b !== a && (a[4] = b[4], a[5] = b[5], a[6] = b[6], a[7] = b[7], a[12] = b[12], a[13] = b[13], a[14] = b[14], a[15] = b[15]), a[0] = f * c - m * e, a[1] = g * c - q * e, a[2] = k * c - p * e, a[3] = h * c - l * e, a[8] = f * e + m * c, a[9] = g * e + q * c, a[10] = k * e + p * c, a[11] = h * e + l * c, a;
      };
      y.rotateZ = function(a, b, c) {
        var e = Math.sin(c);
        c = Math.cos(c);
        var f = b[0], g = b[1], k = b[2], h = b[3], m = b[4], q = b[5], p = b[6], l = b[7];
        return b !== a && (a[8] = b[8], a[9] = b[9], a[10] = b[10], a[11] = b[11], a[12] = b[12], a[13] = b[13], a[14] = b[14], a[15] = b[15]), a[0] = f * c + m * e, a[1] = g * c + q * e, a[2] = k * c + p * e, a[3] = h * c + l * e, a[4] = m * c - f * e, a[5] = q * c - g * e, a[6] = p * c - k * e, a[7] = l * c - h * e, a;
      };
      y.fromRotationTranslation = function(a, b, c) {
        var e = b[0], f = b[1], g = b[2], k = b[3], h = e + e, q = f + f, m = g + g;
        b = e * h;
        var p = e * q, e = e * m, l = f * q, f = f * m, g = g * m, h = k * h, q = k * q, k = k * m;
        return a[0] = 1 - (l + g), a[1] = p + k, a[2] = e - q, a[3] = 0, a[4] = p - k, a[5] = 1 - (b + g), a[6] = f + h, a[7] = 0, a[8] = e + q, a[9] = f - h, a[10] = 1 - (b + l), a[11] = 0, a[12] = c[0], a[13] = c[1], a[14] = c[2], a[15] = 1, a;
      };
      y.fromQuat = function(a, b) {
        var c = b[0], e = b[1], f = b[2];
        b = b[3];
        var g = c + c, k = e + e, h = f + f, c = c * g, q = e * g, e = e * k, m = f * g, p = f * k, f = f * h, g = b * g, k = b * k;
        b *= h;
        return a[0] = 1 - e - f, a[1] = q + b, a[2] = m - k, a[3] = 0, a[4] = q - b, a[5] = 1 - c - f, a[6] = p + g, a[7] = 0, a[8] = m + k, a[9] = p - g, a[10] = 1 - c - e, a[11] = 0, a[12] = 0, a[13] = 0, a[14] = 0, a[15] = 1, a;
      };
      y.frustum = function(a, b, c, e, f, g, k) {
        var h = 1 / (c - b), q = 1 / (f - e), m = 1 / (g - k);
        return a[0] = 2 * g * h, a[1] = 0, a[2] = 0, a[3] = 0, a[4] = 0, a[5] = 2 * g * q, a[6] = 0, a[7] = 0, a[8] = (c + b) * h, a[9] = (f + e) * q, a[10] = (k + g) * m, a[11] = -1, a[12] = 0, a[13] = 0, a[14] = k * g * 2 * m, a[15] = 0, a;
      };
      y.perspective = function(a, b, c, e, f) {
        b = 1 / Math.tan(b / 2);
        var g = 1 / (e - f);
        return a[0] = b / c, a[1] = 0, a[2] = 0, a[3] = 0, a[4] = 0, a[5] = b, a[6] = 0, a[7] = 0, a[8] = 0, a[9] = 0, a[10] = (f + e) * g, a[11] = -1, a[12] = 0, a[13] = 0, a[14] = 2 * f * e * g, a[15] = 0, a;
      };
      y.ortho = function(a, b, c, e, f, g, k) {
        var h = 1 / (b - c), q = 1 / (e - f), m = 1 / (g - k);
        return a[0] = -2 * h, a[1] = 0, a[2] = 0, a[3] = 0, a[4] = 0, a[5] = -2 * q, a[6] = 0, a[7] = 0, a[8] = 0, a[9] = 0, a[10] = 2 * m, a[11] = 0, a[12] = (b + c) * h, a[13] = (f + e) * q, a[14] = (k + g) * m, a[15] = 1, a;
      };
      y.lookAt = function(a, c, e, f) {
        var g, k, h, q, m, p, l, r, w, u, t = c[0], v = c[1];
        c = c[2];
        var x = f[0], A = f[1];
        f = f[2];
        var C = e[0], R = e[1];
        e = e[2];
        return Math.abs(t - C) < b && Math.abs(v - R) < b && Math.abs(c - e) < b ? y.identity(a) : (l = t - C, r = v - R, w = c - e, u = 1 / Math.sqrt(l * l + r * r + w * w), l *= u, r *= u, w *= u, g = A * w - f * r, k = f * l - x * w, h = x * r - A * l, u = Math.sqrt(g * g + k * k + h * h), u ? (u = 1 / u, g *= u, k *= u, h *= u) : (g = 0, k = 0, h = 0), q = r * h - w * k, m = w * g - l * h, p = l * k - r * g, u = Math.sqrt(q * q + m * m + p * p), u ? (u = 1 / u, q *= u, m *= u, p *= u) : (q = 
        0, m = 0, p = 0), a[0] = g, a[1] = q, a[2] = l, a[3] = 0, a[4] = k, a[5] = m, a[6] = r, a[7] = 0, a[8] = h, a[9] = p, a[10] = w, a[11] = 0, a[12] = -(g * t + k * v + h * c), a[13] = -(q * t + m * v + p * c), a[14] = -(l * t + r * v + w * c), a[15] = 1, a);
      };
      y.str = function(a) {
        return "mat4(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ", " + a[8] + ", " + a[9] + ", " + a[10] + ", " + a[11] + ", " + a[12] + ", " + a[13] + ", " + a[14] + ", " + a[15] + ")";
      };
      y.frob = function(a) {
        return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2));
      };
      "undefined" != typeof a && (a.mat4 = y);
      var x = {create:function() {
        var a = new e(4);
        return a[0] = 0, a[1] = 0, a[2] = 0, a[3] = 1, a;
      }};
      x.rotationTo = function() {
        var a = p.create(), b = p.fromValues(1, 0, 0), c = p.fromValues(0, 1, 0);
        return function(e, f, g) {
          var k = p.dot(f, g);
          return -.999999 > k ? (p.cross(a, b, f), 1E-6 > p.length(a) && p.cross(a, c, f), p.normalize(a, a), x.setAxisAngle(e, a, Math.PI), e) : .999999 < k ? (e[0] = 0, e[1] = 0, e[2] = 0, e[3] = 1, e) : (p.cross(a, f, g), e[0] = a[0], e[1] = a[1], e[2] = a[2], e[3] = 1 + k, x.normalize(e, e));
        };
      }();
      x.setAxes = function() {
        var a = v.create();
        return function(b, c, e, f) {
          return a[0] = e[0], a[3] = e[1], a[6] = e[2], a[1] = f[0], a[4] = f[1], a[7] = f[2], a[2] = -c[0], a[5] = -c[1], a[8] = -c[2], x.normalize(b, x.fromMat3(b, a));
        };
      }();
      x.clone = l.clone;
      x.fromValues = l.fromValues;
      x.copy = l.copy;
      x.set = l.set;
      x.identity = function(a) {
        return a[0] = 0, a[1] = 0, a[2] = 0, a[3] = 1, a;
      };
      x.setAxisAngle = function(a, b, c) {
        c *= .5;
        var e = Math.sin(c);
        return a[0] = e * b[0], a[1] = e * b[1], a[2] = e * b[2], a[3] = Math.cos(c), a;
      };
      x.add = l.add;
      x.multiply = function(a, b, c) {
        var e = b[0], f = b[1], g = b[2];
        b = b[3];
        var k = c[0], h = c[1], q = c[2];
        c = c[3];
        return a[0] = e * c + b * k + f * q - g * h, a[1] = f * c + b * h + g * k - e * q, a[2] = g * c + b * q + e * h - f * k, a[3] = b * c - e * k - f * h - g * q, a;
      };
      x.mul = x.multiply;
      x.scale = l.scale;
      x.rotateX = function(a, b, c) {
        c *= .5;
        var e = b[0], f = b[1], g = b[2];
        b = b[3];
        var k = Math.sin(c);
        c = Math.cos(c);
        return a[0] = e * c + b * k, a[1] = f * c + g * k, a[2] = g * c - f * k, a[3] = b * c - e * k, a;
      };
      x.rotateY = function(a, b, c) {
        c *= .5;
        var e = b[0], f = b[1], g = b[2];
        b = b[3];
        var k = Math.sin(c);
        c = Math.cos(c);
        return a[0] = e * c - g * k, a[1] = f * c + b * k, a[2] = g * c + e * k, a[3] = b * c - f * k, a;
      };
      x.rotateZ = function(a, b, c) {
        c *= .5;
        var e = b[0], f = b[1], g = b[2];
        b = b[3];
        var k = Math.sin(c);
        c = Math.cos(c);
        return a[0] = e * c + f * k, a[1] = f * c - e * k, a[2] = g * c + b * k, a[3] = b * c - g * k, a;
      };
      x.calculateW = function(a, b) {
        var c = b[0], e = b[1];
        b = b[2];
        return a[0] = c, a[1] = e, a[2] = b, a[3] = -Math.sqrt(Math.abs(1 - c * c - e * e - b * b)), a;
      };
      x.dot = l.dot;
      x.lerp = l.lerp;
      x.slerp = function(a, b, c, e) {
        var f, g, k, h, q, m = b[0], p = b[1], l = b[2];
        b = b[3];
        var r = c[0], w = c[1], u = c[2];
        c = c[3];
        return g = m * r + p * w + l * u + b * c, 0 > g && (g = -g, r = -r, w = -w, u = -u, c = -c), 1E-6 < 1 - g ? (f = Math.acos(g), k = Math.sin(f), h = Math.sin((1 - e) * f) / k, q = Math.sin(e * f) / k) : (h = 1 - e, q = e), a[0] = h * m + q * r, a[1] = h * p + q * w, a[2] = h * l + q * u, a[3] = h * b + q * c, a;
      };
      x.invert = function(a, b) {
        var c = b[0], e = b[1], f = b[2];
        b = b[3];
        var g = c * c + e * e + f * f + b * b, g = g ? 1 / g : 0;
        return a[0] = -c * g, a[1] = -e * g, a[2] = -f * g, a[3] = b * g, a;
      };
      x.conjugate = function(a, b) {
        return a[0] = -b[0], a[1] = -b[1], a[2] = -b[2], a[3] = b[3], a;
      };
      x.length = l.length;
      x.len = x.length;
      x.squaredLength = l.squaredLength;
      x.sqrLen = x.squaredLength;
      x.normalize = l.normalize;
      x.fromMat3 = function(a, b) {
        var c;
        c = b[0] + b[4] + b[8];
        if (0 < c) {
          c = Math.sqrt(c + 1), a[3] = .5 * c, c = .5 / c, a[0] = (b[7] - b[5]) * c, a[1] = (b[2] - b[6]) * c, a[2] = (b[3] - b[1]) * c;
        } else {
          var e = 0;
          b[4] > b[0] && (e = 1);
          b[8] > b[3 * e + e] && (e = 2);
          var f = (e + 1) % 3, g = (e + 2) % 3;
          c = Math.sqrt(b[3 * e + e] - b[3 * f + f] - b[3 * g + g] + 1);
          a[e] = .5 * c;
          c = .5 / c;
          a[3] = (b[3 * g + f] - b[3 * f + g]) * c;
          a[f] = (b[3 * f + e] + b[3 * e + f]) * c;
          a[g] = (b[3 * g + e] + b[3 * e + g]) * c;
        }
        return a;
      };
      x.str = function(a) {
        return "quat(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ")";
      };
      "undefined" != typeof a && (a.quat = x);
    })(b);
  }(this);
}, {}], 24:[function(a, h, l) {
  (function() {
    var a = this, g = a._, k = {}, c = Array.prototype, e = Object.prototype, f = c.push, q = c.slice, r = c.concat, w = e.toString, p = e.hasOwnProperty, u = c.forEach, v = c.map, y = c.reduce, x = c.reduceRight, m = c.filter, t = c.every, C = c.some, A = c.indexOf, D = c.lastIndexOf, e = Array.isArray, F = Object.keys, G = Function.prototype.bind, B = function(a) {
      return a instanceof B ? a : this instanceof B ? void(this._wrapped = a) : new B(a);
    };
    "undefined" != typeof l ? ("undefined" != typeof h && h.exports && (l = h.exports = B), l._ = B) : a._ = B;
    B.VERSION = "1.4.4";
    var K = B.each = B.forEach = function(a, b, c) {
      if (null != a) {
        if (u && a.forEach === u) {
          a.forEach(b, c);
        } else {
          if (a.length === +a.length) {
            for (var e = 0, f = a.length;f > e && b.call(c, a[e], e, a) !== k;e++) {
            }
          } else {
            for (e in a) {
              if (B.has(a, e) && b.call(c, a[e], e, a) === k) {
                break;
              }
            }
          }
        }
      }
    };
    B.map = B.collect = function(a, b, c) {
      var e = [];
      return null == a ? e : v && a.map === v ? a.map(b, c) : (K(a, function(a, f, g) {
        e[e.length] = b.call(c, a, f, g);
      }), e);
    };
    B.reduce = B.foldl = B.inject = function(a, b, c, e) {
      var f = 2 < arguments.length;
      if (null == a && (a = []), y && a.reduce === y) {
        return e && (b = B.bind(b, e)), f ? a.reduce(b, c) : a.reduce(b);
      }
      if (K(a, function(a, g, k) {
        f ? c = b.call(e, c, a, g, k) : (c = a, f = !0);
      }), !f) {
        throw new TypeError("Reduce of empty array with no initial value");
      }
      return c;
    };
    B.reduceRight = B.foldr = function(a, b, c, e) {
      var f = 2 < arguments.length;
      if (null == a && (a = []), x && a.reduceRight === x) {
        return e && (b = B.bind(b, e)), f ? a.reduceRight(b, c) : a.reduceRight(b);
      }
      var g = a.length;
      if (g !== +g) {
        var k = B.keys(a), g = k.length;
      }
      if (K(a, function(h, q, m) {
        q = k ? k[--g] : --g;
        f ? c = b.call(e, c, a[q], q, m) : (c = a[q], f = !0);
      }), !f) {
        throw new TypeError("Reduce of empty array with no initial value");
      }
      return c;
    };
    B.find = B.detect = function(a, b, c) {
      var e;
      return H(a, function(a, f, g) {
        return b.call(c, a, f, g) ? (e = a, !0) : void 0;
      }), e;
    };
    B.filter = B.select = function(a, b, c) {
      var e = [];
      return null == a ? e : m && a.filter === m ? a.filter(b, c) : (K(a, function(a, f, g) {
        b.call(c, a, f, g) && (e[e.length] = a);
      }), e);
    };
    B.reject = function(a, b, c) {
      return B.filter(a, function(a, e, f) {
        return !b.call(c, a, e, f);
      }, c);
    };
    B.every = B.all = function(a, b, c) {
      b || (b = B.identity);
      var e = !0;
      return null == a ? e : t && a.every === t ? a.every(b, c) : (K(a, function(a, f, g) {
        return (e = e && b.call(c, a, f, g)) ? void 0 : k;
      }), !!e);
    };
    var H = B.some = B.any = function(a, b, c) {
      b || (b = B.identity);
      var e = !1;
      return null == a ? e : C && a.some === C ? a.some(b, c) : (K(a, function(a, f, g) {
        return e || (e = b.call(c, a, f, g)) ? k : void 0;
      }), !!e);
    };
    B.contains = B.include = function(a, b) {
      return null == a ? !1 : A && a.indexOf === A ? -1 != a.indexOf(b) : H(a, function(a) {
        return a === b;
      });
    };
    B.invoke = function(a, b) {
      var c = q.call(arguments, 2), e = B.isFunction(b);
      return B.map(a, function(a) {
        return (e ? b : a[b]).apply(a, c);
      });
    };
    B.pluck = function(a, b) {
      return B.map(a, function(a) {
        return a[b];
      });
    };
    B.where = function(a, b, c) {
      return B.isEmpty(b) ? c ? null : [] : B[c ? "find" : "filter"](a, function(a) {
        for (var c in b) {
          if (b[c] !== a[c]) {
            return !1;
          }
        }
        return !0;
      });
    };
    B.findWhere = function(a, b) {
      return B.where(a, b, !0);
    };
    B.max = function(a, b, c) {
      if (!b && B.isArray(a) && a[0] === +a[0] && 65535 > a.length) {
        return Math.max.apply(Math, a);
      }
      if (!b && B.isEmpty(a)) {
        return -1 / 0;
      }
      var e = {computed:-1 / 0, value:-1 / 0};
      return K(a, function(a, f, g) {
        f = b ? b.call(c, a, f, g) : a;
        f >= e.computed && (e = {value:a, computed:f});
      }), e.value;
    };
    B.min = function(a, b, c) {
      if (!b && B.isArray(a) && a[0] === +a[0] && 65535 > a.length) {
        return Math.min.apply(Math, a);
      }
      if (!b && B.isEmpty(a)) {
        return 1 / 0;
      }
      var e = {computed:1 / 0, value:1 / 0};
      return K(a, function(a, f, g) {
        f = b ? b.call(c, a, f, g) : a;
        f < e.computed && (e = {value:a, computed:f});
      }), e.value;
    };
    B.shuffle = function(a) {
      var b, c = 0, e = [];
      return K(a, function(a) {
        b = B.random(c++);
        e[c - 1] = e[b];
        e[b] = a;
      }), e;
    };
    var M = function(a) {
      return B.isFunction(a) ? a : function(b) {
        return b[a];
      };
    };
    B.sortBy = function(a, b, c) {
      var e = M(b);
      return B.pluck(B.map(a, function(a, b, f) {
        return {value:a, index:b, criteria:e.call(c, a, b, f)};
      }).sort(function(a, b) {
        var c = a.criteria, e = b.criteria;
        if (c !== e) {
          if (c > e || void 0 === c) {
            return 1;
          }
          if (e > c || void 0 === e) {
            return -1;
          }
        }
        return a.index < b.index ? -1 : 1;
      }), "value");
    };
    var J = function(a, b, c, e) {
      var f = {}, g = M(b || B.identity);
      return K(a, function(b, k) {
        k = g.call(c, b, k, a);
        e(f, k, b);
      }), f;
    };
    B.groupBy = function(a, b, c) {
      return J(a, b, c, function(a, b, c) {
        (B.has(a, b) ? a[b] : a[b] = []).push(c);
      });
    };
    B.countBy = function(a, b, c) {
      return J(a, b, c, function(a, b) {
        B.has(a, b) || (a[b] = 0);
        a[b]++;
      });
    };
    B.sortedIndex = function(a, b, c, e) {
      c = null == c ? B.identity : M(c);
      b = c.call(e, b);
      for (var f = 0, g = a.length;g > f;) {
        var k = f + g >>> 1;
        c.call(e, a[k]) < b ? f = k + 1 : g = k;
      }
      return f;
    };
    B.toArray = function(a) {
      return a ? B.isArray(a) ? q.call(a) : a.length === +a.length ? B.map(a, B.identity) : B.values(a) : [];
    };
    B.size = function(a) {
      return null == a ? 0 : a.length === +a.length ? a.length : B.keys(a).length;
    };
    B.first = B.head = B.take = function(a, b, c) {
      return null == a ? void 0 : null == b || c ? a[0] : q.call(a, 0, b);
    };
    B.initial = function(a, b, c) {
      return q.call(a, 0, a.length - (null == b || c ? 1 : b));
    };
    B.last = function(a, b, c) {
      return null == a ? void 0 : null == b || c ? a[a.length - 1] : q.call(a, Math.max(a.length - b, 0));
    };
    B.rest = B.tail = B.drop = function(a, b, c) {
      return q.call(a, null == b || c ? 1 : b);
    };
    B.compact = function(a) {
      return B.filter(a, B.identity);
    };
    var P = function(a, b, c) {
      return K(a, function(a) {
        B.isArray(a) ? b ? f.apply(c, a) : P(a, b, c) : c.push(a);
      }), c;
    };
    B.flatten = function(a, b) {
      return P(a, b, []);
    };
    B.without = function(a) {
      return B.difference(a, q.call(arguments, 1));
    };
    B.uniq = B.unique = function(a, b, c, e) {
      B.isFunction(b) && (e = c, c = b, b = !1);
      c = c ? B.map(a, c, e) : a;
      var f = [], g = [];
      return K(c, function(c, e) {
        (b ? e && g[g.length - 1] === c : B.contains(g, c)) || (g.push(c), f.push(a[e]));
      }), f;
    };
    B.union = function() {
      return B.uniq(r.apply(c, arguments));
    };
    B.intersection = function(a) {
      var b = q.call(arguments, 1);
      return B.filter(B.uniq(a), function(a) {
        return B.every(b, function(b) {
          return 0 <= B.indexOf(b, a);
        });
      });
    };
    B.difference = function(a) {
      var b = r.apply(c, q.call(arguments, 1));
      return B.filter(a, function(a) {
        return !B.contains(b, a);
      });
    };
    B.zip = function() {
      for (var a = q.call(arguments), b = B.max(B.pluck(a, "length")), c = Array(b), e = 0;b > e;e++) {
        c[e] = B.pluck(a, "" + e);
      }
      return c;
    };
    B.object = function(a, b) {
      if (null == a) {
        return {};
      }
      for (var c = {}, e = 0, f = a.length;f > e;e++) {
        b ? c[a[e]] = b[e] : c[a[e][0]] = a[e][1];
      }
      return c;
    };
    B.indexOf = function(a, b, c) {
      if (null == a) {
        return -1;
      }
      var e = 0, f = a.length;
      if (c) {
        if ("number" != typeof c) {
          return e = B.sortedIndex(a, b), a[e] === b ? e : -1;
        }
        e = 0 > c ? Math.max(0, f + c) : c;
      }
      if (A && a.indexOf === A) {
        return a.indexOf(b, c);
      }
      for (;f > e;e++) {
        if (a[e] === b) {
          return e;
        }
      }
      return -1;
    };
    B.lastIndexOf = function(a, b, c) {
      if (null == a) {
        return -1;
      }
      var e = null != c;
      if (D && a.lastIndexOf === D) {
        return e ? a.lastIndexOf(b, c) : a.lastIndexOf(b);
      }
      for (c = e ? c : a.length;c--;) {
        if (a[c] === b) {
          return c;
        }
      }
      return -1;
    };
    B.range = function(a, b, c) {
      1 >= arguments.length && (b = a || 0, a = 0);
      c = arguments[2] || 1;
      for (var e = Math.max(Math.ceil((b - a) / c), 0), f = 0, g = Array(e);e > f;) {
        g[f++] = a, a += c;
      }
      return g;
    };
    B.bind = function(a, b) {
      if (a.bind === G && G) {
        return G.apply(a, q.call(arguments, 1));
      }
      var c = q.call(arguments, 2);
      return function() {
        return a.apply(b, c.concat(q.call(arguments)));
      };
    };
    B.partial = function(a) {
      var b = q.call(arguments, 1);
      return function() {
        return a.apply(this, b.concat(q.call(arguments)));
      };
    };
    B.bindAll = function(a) {
      var b = q.call(arguments, 1);
      return 0 === b.length && (b = B.functions(a)), K(b, function(b) {
        a[b] = B.bind(a[b], a);
      }), a;
    };
    B.memoize = function(a, b) {
      var c = {};
      return b || (b = B.identity), function() {
        var e = b.apply(this, arguments);
        return B.has(c, e) ? c[e] : c[e] = a.apply(this, arguments);
      };
    };
    B.delay = function(a, b) {
      var c = q.call(arguments, 2);
      return setTimeout(function() {
        return a.apply(null, c);
      }, b);
    };
    B.defer = function(a) {
      return B.delay.apply(B, [a, 1].concat(q.call(arguments, 1)));
    };
    B.throttle = function(a, b) {
      var c, e, f, g, k = 0, h = function() {
        k = new Date;
        f = null;
        g = a.apply(c, e);
      };
      return function() {
        var q = new Date, m = b - (q - k);
        return c = this, e = arguments, 0 >= m ? (clearTimeout(f), f = null, k = q, g = a.apply(c, e)) : f || (f = setTimeout(h, m)), g;
      };
    };
    B.debounce = function(a, b, c) {
      var e, f;
      return function() {
        var g = this, k = arguments, h = c && !e;
        return clearTimeout(e), e = setTimeout(function() {
          e = null;
          c || (f = a.apply(g, k));
        }, b), h && (f = a.apply(g, k)), f;
      };
    };
    B.once = function(a) {
      var b, c = !1;
      return function() {
        return c ? b : (c = !0, b = a.apply(this, arguments), a = null, b);
      };
    };
    B.wrap = function(a, b) {
      return function() {
        var c = [a];
        return f.apply(c, arguments), b.apply(this, c);
      };
    };
    B.compose = function() {
      var a = arguments;
      return function() {
        for (var b = arguments, c = a.length - 1;0 <= c;c--) {
          b = [a[c].apply(this, b)];
        }
        return b[0];
      };
    };
    B.after = function(a, b) {
      return 0 >= a ? b() : function() {
        return 1 > --a ? b.apply(this, arguments) : void 0;
      };
    };
    B.keys = F || function(a) {
      if (a !== Object(a)) {
        throw new TypeError("Invalid object");
      }
      var b = [], c;
      for (c in a) {
        B.has(a, c) && (b[b.length] = c);
      }
      return b;
    };
    B.values = function(a) {
      var b = [], c;
      for (c in a) {
        B.has(a, c) && b.push(a[c]);
      }
      return b;
    };
    B.pairs = function(a) {
      var b = [], c;
      for (c in a) {
        B.has(a, c) && b.push([c, a[c]]);
      }
      return b;
    };
    B.invert = function(a) {
      var b = {}, c;
      for (c in a) {
        B.has(a, c) && (b[a[c]] = c);
      }
      return b;
    };
    B.functions = B.methods = function(a) {
      var b = [], c;
      for (c in a) {
        B.isFunction(a[c]) && b.push(c);
      }
      return b.sort();
    };
    B.extend = function(a) {
      return K(q.call(arguments, 1), function(b) {
        if (b) {
          for (var c in b) {
            a[c] = b[c];
          }
        }
      }), a;
    };
    B.pick = function(a) {
      var b = {}, e = r.apply(c, q.call(arguments, 1));
      return K(e, function(c) {
        c in a && (b[c] = a[c]);
      }), b;
    };
    B.omit = function(a) {
      var b = {}, e = r.apply(c, q.call(arguments, 1)), f;
      for (f in a) {
        B.contains(e, f) || (b[f] = a[f]);
      }
      return b;
    };
    B.defaults = function(a) {
      return K(q.call(arguments, 1), function(b) {
        if (b) {
          for (var c in b) {
            null == a[c] && (a[c] = b[c]);
          }
        }
      }), a;
    };
    B.clone = function(a) {
      return B.isObject(a) ? B.isArray(a) ? a.slice() : B.extend({}, a) : a;
    };
    B.tap = function(a, b) {
      return b(a), a;
    };
    var O = function(a, b, c, e) {
      if (a === b) {
        return 0 !== a || 1 / a == 1 / b;
      }
      if (null == a || null == b) {
        return a === b;
      }
      a instanceof B && (a = a._wrapped);
      b instanceof B && (b = b._wrapped);
      var f = w.call(a);
      if (f != w.call(b)) {
        return !1;
      }
      switch(f) {
        case "[object String]":
          return a == String(b);
        case "[object Number]":
          return a != +a ? b != +b : 0 == a ? 1 / a == 1 / b : a == +b;
        case "[object Date]":
        case "[object Boolean]":
          return +a == +b;
        case "[object RegExp]":
          return a.source == b.source && a.global == b.global && a.multiline == b.multiline && a.ignoreCase == b.ignoreCase;
      }
      if ("object" != typeof a || "object" != typeof b) {
        return !1;
      }
      for (var g = c.length;g--;) {
        if (c[g] == a) {
          return e[g] == b;
        }
      }
      c.push(a);
      e.push(b);
      var g = 0, k = !0;
      if ("[object Array]" == f) {
        if (g = a.length, k = g == b.length) {
          for (;g-- && (k = O(a[g], b[g], c, e));) {
          }
        }
      } else {
        var f = a.constructor, h = b.constructor;
        if (f !== h && !(B.isFunction(f) && f instanceof f && B.isFunction(h) && h instanceof h)) {
          return !1;
        }
        for (var q in a) {
          if (B.has(a, q) && (g++, !(k = B.has(b, q) && O(a[q], b[q], c, e)))) {
            break;
          }
        }
        if (k) {
          for (q in b) {
            if (B.has(b, q) && !g--) {
              break;
            }
          }
          k = !g;
        }
      }
      return c.pop(), e.pop(), k;
    };
    B.isEqual = function(a, b) {
      return O(a, b, [], []);
    };
    B.isEmpty = function(a) {
      if (null == a) {
        return !0;
      }
      if (B.isArray(a) || B.isString(a)) {
        return 0 === a.length;
      }
      for (var b in a) {
        if (B.has(a, b)) {
          return !1;
        }
      }
      return !0;
    };
    B.isElement = function(a) {
      return !(!a || 1 !== a.nodeType);
    };
    B.isArray = e || function(a) {
      return "[object Array]" == w.call(a);
    };
    B.isObject = function(a) {
      return a === Object(a);
    };
    K("Arguments Function String Number Date RegExp".split(" "), function(a) {
      B["is" + a] = function(b) {
        return w.call(b) == "[object " + a + "]";
      };
    });
    B.isArguments(arguments) || (B.isArguments = function(a) {
      return !(!a || !B.has(a, "callee"));
    });
    "function" != typeof/./ && (B.isFunction = function(a) {
      return "function" == typeof a;
    });
    B.isFinite = function(a) {
      return isFinite(a) && !isNaN(parseFloat(a));
    };
    B.isNaN = function(a) {
      return B.isNumber(a) && a != +a;
    };
    B.isBoolean = function(a) {
      return !0 === a || !1 === a || "[object Boolean]" == w.call(a);
    };
    B.isNull = function(a) {
      return null === a;
    };
    B.isUndefined = function(a) {
      return void 0 === a;
    };
    B.has = function(a, b) {
      return p.call(a, b);
    };
    B.noConflict = function() {
      return a._ = g, this;
    };
    B.identity = function(a) {
      return a;
    };
    B.times = function(a, b, c) {
      for (var e = Array(a), f = 0;a > f;f++) {
        e[f] = b.call(c, f);
      }
      return e;
    };
    B.random = function(a, b) {
      return null == b && (b = a, a = 0), a + Math.floor(Math.random() * (b - a + 1));
    };
    var N = {escape:{"&":"&amp;", "<":"&lt;", ">":"&gt;", '"':"&quot;", "'":"&#x27;", "/":"&#x2F;"}};
    N.unescape = B.invert(N.escape);
    var ba = {escape:new RegExp("[" + B.keys(N.escape).join("") + "]", "g"), unescape:new RegExp("(" + B.keys(N.unescape).join("|") + ")", "g")};
    B.each(["escape", "unescape"], function(a) {
      B[a] = function(b) {
        return null == b ? "" : ("" + b).replace(ba[a], function(b) {
          return N[a][b];
        });
      };
    });
    B.result = function(a, b) {
      if (null == a) {
        return null;
      }
      b = a[b];
      return B.isFunction(b) ? b.call(a) : b;
    };
    B.mixin = function(a) {
      K(B.functions(a), function(b) {
        var c = B[b] = a[b];
        B.prototype[b] = function() {
          var a = [this._wrapped];
          return f.apply(a, arguments), S.call(this, c.apply(B, a));
        };
      });
    };
    var da = 0;
    B.uniqueId = function(a) {
      var b = ++da + "";
      return a ? a + b : b;
    };
    B.templateSettings = {evaluate:/<%([\s\S]+?)%>/g, interpolate:/<%=([\s\S]+?)%>/g, escape:/<%-([\s\S]+?)%>/g};
    var ca = /(.)^/, ia = {"'":"'", "\\":"\\", "\r":"r", "\n":"n", "\t":"t", "\u2028":"u2028", "\u2029":"u2029"}, R = /\\|'|\r|\n|\t|\u2028|\u2029/g;
    B.template = function(a, b, c) {
      var e;
      c = B.defaults({}, c, B.templateSettings);
      var f = new RegExp([(c.escape || ca).source, (c.interpolate || ca).source, (c.evaluate || ca).source].join("|") + "|$", "g"), g = 0, k = "__p+='";
      a.replace(f, function(b, c, e, f, h) {
        return k += a.slice(g, h).replace(R, function(a) {
          return "\\" + ia[a];
        }), c && (k += "'+\n((__t=(" + c + "))==null?'':_.escape(__t))+\n'"), e && (k += "'+\n((__t=(" + e + "))==null?'':__t)+\n'"), f && (k += "';\n" + f + "\n__p+='"), g = h + b.length, b;
      });
      k += "';\n";
      c.variable || (k = "with(obj||{}){\n" + k + "}\n");
      k = "var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n" + k + "return __p;\n";
      try {
        e = new Function(c.variable || "obj", "_", k);
      } catch (pa) {
        throw pa.source = k, pa;
      }
      if (b) {
        return e(b, B);
      }
      b = function(a) {
        return e.call(this, a, B);
      };
      return b.source = "function(" + (c.variable || "obj") + "){\n" + k + "}", b;
    };
    B.chain = function(a) {
      return B(a).chain();
    };
    var S = function(a) {
      return this._chain ? B(a).chain() : a;
    };
    B.mixin(B);
    K("pop push reverse shift sort splice unshift".split(" "), function(a) {
      var b = c[a];
      B.prototype[a] = function() {
        var c = this._wrapped;
        return b.apply(c, arguments), "shift" != a && "splice" != a || 0 !== c.length || delete c[0], S.call(this, c);
      };
    });
    K(["concat", "join", "slice"], function(a) {
      var b = c[a];
      B.prototype[a] = function() {
        return S.call(this, b.apply(this._wrapped, arguments));
      };
    });
    B.extend(B.prototype, {chain:function() {
      return this._chain = !0, this;
    }, value:function() {
      return this._wrapped;
    }});
  }).call(this);
}, {}], 25:[function(a) {
  "undefined" != typeof window && "function" != typeof window.requestAnimationFrame && (window.requestAnimationFrame = window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(a) {
    setTimeout(a, 1E3 / 60);
  });
  Leap = a("../lib/index");
}, {"../lib/index":11}]}, {}, [25]);
var Stats = function() {
  function a(a) {
    b.appendChild(a.dom);
    return a;
  }
  function h(a) {
    for (var c = 0;c < b.children.length;c++) {
      b.children[c].style.display = c === a ? "block" : "none";
    }
    l = a;
  }
  var l = 0, b = document.createElement("div");
  b.style.cssText = "position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000";
  b.addEventListener("click", function(a) {
    a.preventDefault();
    h(++l % b.children.length);
  }, !1);
  var g = (performance || Date).now(), k = g, c = 0, e = a(new Stats.Panel("FPS", "#fff", "#222")), f = a(new Stats.Panel("MS", "#fff", "#222"));
  if (self.performance && self.performance.memory) {
    var q = a(new Stats.Panel("MB", "#fff", "#222"));
  }
  h(0);
  return {REVISION:17, dom:b, addPanel:a, showPanel:h, begin:function() {
    g = (performance || Date).now();
  }, end:function() {
    c++;
    var a = (performance || Date).now();
    f.update(a - g, 200);
    if (a > k + 1E3 && (e.update(1E3 * c / (a - k), 100), k = a, c = 0, q)) {
      var b = performance.memory;
      q.update(b.usedJSHeapSize / 1048576, b.jsHeapSizeLimit / 1048576);
    }
    return a;
  }, update:function() {
    g = this.end();
  }, domElement:b, setMode:h};
};
Stats.Panel = function(a, h, l) {
  var b = Infinity, g = 0, k = Math.round, c = k(window.devicePixelRatio || 1), e = 80 * c, f = 48 * c, q = 3 * c, r = 2 * c, w = 3 * c, p = 15 * c, u = 74 * c, v = 30 * c, y = document.createElement("canvas");
  y.width = e;
  y.height = f;
  y.style.cssText = "width:80px;height:48px";
  var x = y.getContext("2d");
  x.font = "bold " + 9 * c + "px Helvetica,Arial,sans-serif";
  x.textBaseline = "top";
  x.fillStyle = l;
  x.fillRect(0, 0, e, f);
  x.fillStyle = h;
  x.fillText(a, q, r);
  x.fillRect(w, p, u, v);
  x.fillStyle = l;
  x.globalAlpha = .9;
  x.fillRect(w, p, u, v);
  return {dom:y, update:function(f, t) {
    b = Math.min(b, f);
    g = Math.max(g, f);
    x.fillStyle = l;
    x.globalAlpha = 1;
    x.fillRect(0, 0, e, p);
    x.fillStyle = h;
    x.fillText(k(f) + " " + a + " (" + k(b) + "-" + k(g) + ")", q, r);
    x.drawImage(y, w + c, p, u - c, v, w, p, u - c, v);
    x.fillRect(w + u - c, p, c, v);
    x.fillStyle = l;
    x.globalAlpha = .9;
    x.fillRect(w + u - c, p, c, k((1 - f / t) * v));
  }};
};
"object" === typeof module && (module.exports = Stats);
var SPE = {distributions:{BOX:1, SPHERE:2, DISC:3}, valueOverLifetimeLength:4};
"function" == typeof define && define.amd ? define("spe", SPE) : "undefined" != typeof exports && "undefined" != typeof module && (module.exports = SPE);
SPE.TypedArrayHelper = function(a, h, l, b) {
  this.componentSize = l || 1;
  this.size = h || 1;
  this.TypedArrayConstructor = a || Float32Array;
  this.array = new a(h * this.componentSize);
  this.indexOffset = b || 0;
};
SPE.TypedArrayHelper.constructor = SPE.TypedArrayHelper;
SPE.TypedArrayHelper.prototype.setSize = function(a, h) {
  var l = this.array.length;
  return h || (a *= this.componentSize), l > a ? this.shrink(a) : a > l ? this.grow(a) : void console.info("TypedArray is already of size:", a + ".", "Will not resize.");
};
SPE.TypedArrayHelper.prototype.shrink = function(a) {
  return this.array = this.array.subarray(0, a), this.size = a, this;
};
SPE.TypedArrayHelper.prototype.grow = function(a) {
  var h = this.array, l = new this.TypedArrayConstructor(a);
  return l.set(h), this.array = l, this.size = a, this;
};
SPE.TypedArrayHelper.prototype.splice = function(a, h) {
  a *= this.componentSize;
  h *= this.componentSize;
  for (var l = [], b = this.array, g = b.length, k = 0;g > k;++k) {
    (a > k || k >= h) && l.push(b[k]);
  }
  return this.setFromArray(0, l), this;
};
SPE.TypedArrayHelper.prototype.setFromArray = function(a, h) {
  var l = a + h.length;
  return l > this.array.length ? this.grow(l) : l < this.array.length && this.shrink(l), this.array.set(h, this.indexOffset + a), this;
};
SPE.TypedArrayHelper.prototype.setVec2 = function(a, h) {
  return this.setVec2Components(a, h.x, h.y);
};
SPE.TypedArrayHelper.prototype.setVec2Components = function(a, h, l) {
  var b = this.array;
  a = this.indexOffset + a * this.componentSize;
  return b[a] = h, b[a + 1] = l, this;
};
SPE.TypedArrayHelper.prototype.setVec3 = function(a, h) {
  return this.setVec3Components(a, h.x, h.y, h.z);
};
SPE.TypedArrayHelper.prototype.setVec3Components = function(a, h, l, b) {
  var g = this.array;
  a = this.indexOffset + a * this.componentSize;
  return g[a] = h, g[a + 1] = l, g[a + 2] = b, this;
};
SPE.TypedArrayHelper.prototype.setVec4 = function(a, h) {
  return this.setVec4Components(a, h.x, h.y, h.z, h.w);
};
SPE.TypedArrayHelper.prototype.setVec4Components = function(a, h, l, b, g) {
  var k = this.array;
  a = this.indexOffset + a * this.componentSize;
  return k[a] = h, k[a + 1] = l, k[a + 2] = b, k[a + 3] = g, this;
};
SPE.TypedArrayHelper.prototype.setMat3 = function(a, h) {
  return this.setFromArray(this.indexOffset + a * this.componentSize, h.elements);
};
SPE.TypedArrayHelper.prototype.setMat4 = function(a, h) {
  return this.setFromArray(this.indexOffset + a * this.componentSize, h.elements);
};
SPE.TypedArrayHelper.prototype.setColor = function(a, h) {
  return this.setVec3Components(a, h.r, h.g, h.b);
};
SPE.TypedArrayHelper.prototype.setNumber = function(a, h) {
  return this.array[this.indexOffset + a * this.componentSize] = h, this;
};
SPE.TypedArrayHelper.prototype.getValueAtIndex = function(a) {
  return this.array[this.indexOffset + a];
};
SPE.TypedArrayHelper.prototype.getComponentValueAtIndex = function(a) {
  return this.array.subarray(this.indexOffset + a * this.componentSize);
};
SPE.ShaderAttribute = function(a, h, l) {
  var b = SPE.ShaderAttribute.typeSizeMap;
  this.type = "string" == typeof a && b.hasOwnProperty(a) ? a : "f";
  this.componentSize = b[this.type];
  this.arrayType = l || Float32Array;
  this.bufferAttribute = this.typedArray = null;
  this.dynamicBuffer = !!h;
  this.updateMax = this.updateMin = 0;
};
SPE.ShaderAttribute.constructor = SPE.ShaderAttribute;
SPE.ShaderAttribute.typeSizeMap = {f:1, v2:2, v3:3, v4:4, c:3, m3:9, m4:16};
SPE.ShaderAttribute.prototype.setUpdateRange = function(a, h) {
  this.updateMin = Math.min(a * this.componentSize, this.updateMin * this.componentSize);
  this.updateMax = Math.max(h * this.componentSize, this.updateMax * this.componentSize);
};
SPE.ShaderAttribute.prototype.flagUpdate = function() {
  var a = this.bufferAttribute, h = a.updateRange;
  h.offset = this.updateMin;
  h.count = Math.min(this.updateMax - this.updateMin + this.componentSize, this.typedArray.array.length);
  a.needsUpdate = !0;
};
SPE.ShaderAttribute.prototype.resetUpdateRange = function() {
  this.updateMax = this.updateMin = 0;
};
SPE.ShaderAttribute.prototype.resetDynamic = function() {
  this.bufferAttribute.dynamic = this.dynamicBuffer;
};
SPE.ShaderAttribute.prototype.splice = function(a, h) {
  this.typedArray.splice(a, h);
  this.forceUpdateAll();
};
SPE.ShaderAttribute.prototype.forceUpdateAll = function() {
  this.bufferAttribute.array = this.typedArray.array;
  this.bufferAttribute.updateRange.offset = 0;
  this.bufferAttribute.updateRange.count = -1;
  this.bufferAttribute.dynamic = !1;
  this.bufferAttribute.needsUpdate = !0;
};
SPE.ShaderAttribute.prototype._ensureTypedArray = function(a) {
  null !== this.typedArray && this.typedArray.size === a * this.componentSize || (null !== this.typedArray && this.typedArray.size !== a ? this.typedArray.setSize(a) : null === this.typedArray && (this.typedArray = new SPE.TypedArrayHelper(this.arrayType, a, this.componentSize)));
};
SPE.ShaderAttribute.prototype._createBufferAttribute = function(a) {
  return this._ensureTypedArray(a), null !== this.bufferAttribute ? (this.bufferAttribute.array = this.typedArray.array, 81 <= parseFloat(THREE.REVISION) && (this.bufferAttribute.count = this.bufferAttribute.array.length / this.bufferAttribute.itemSize), void(this.bufferAttribute.needsUpdate = !0)) : (this.bufferAttribute = new THREE.BufferAttribute(this.typedArray.array, this.componentSize), void(this.bufferAttribute.dynamic = this.dynamicBuffer));
};
SPE.ShaderAttribute.prototype.getLength = function() {
  return null === this.typedArray ? 0 : this.typedArray.array.length;
};
SPE.shaderChunks = {defines:"#define PACKED_COLOR_SIZE 256.0\n#define PACKED_COLOR_DIVISOR 255.0", uniforms:"uniform float deltaTime;\nuniform float runTime;\nuniform sampler2D texture;\nuniform vec4 textureAnimation;\nuniform float scale;", attributes:"attribute vec4 acceleration;\nattribute vec3 velocity;\nattribute vec4 rotation;\nattribute vec3 rotationCenter;\nattribute vec4 params;\nattribute vec4 size;\nattribute vec4 angle;\nattribute vec4 color;\nattribute vec4 opacity;", varyings:"varying vec4 vColor;\n#ifdef SHOULD_ROTATE_TEXTURE\n    varying float vAngle;\n#endif\n#ifdef SHOULD_CALCULATE_SPRITE\n    varying vec4 vSpriteSheet;\n#endif", 
branchAvoidanceFunctions:"float when_gt(float x, float y) {\n    return max(sign(x - y), 0.0);\n}\nfloat when_lt(float x, float y) {\n    return min( max(1.0 - sign(x - y), 0.0), 1.0 );\n}\nfloat when_eq( float x, float y ) {\n    return 1.0 - abs( sign( x - y ) );\n}\nfloat when_ge(float x, float y) {\n  return 1.0 - when_lt(x, y);\n}\nfloat when_le(float x, float y) {\n  return 1.0 - when_gt(x, y);\n}\nfloat and(float a, float b) {\n    return a * b;\n}\nfloat or(float a, float b) {\n    return min(a + b, 1.0);\n}", 
unpackColor:"vec3 unpackColor( in float hex ) {\n   vec3 c = vec3( 0.0 );\n   float r = mod( (hex / PACKED_COLOR_SIZE / PACKED_COLOR_SIZE), PACKED_COLOR_SIZE );\n   float g = mod( (hex / PACKED_COLOR_SIZE), PACKED_COLOR_SIZE );\n   float b = mod( hex, PACKED_COLOR_SIZE );\n   c.r = r / PACKED_COLOR_DIVISOR;\n   c.g = g / PACKED_COLOR_DIVISOR;\n   c.b = b / PACKED_COLOR_DIVISOR;\n   return c;\n}", unpackRotationAxis:"vec3 unpackRotationAxis( in float hex ) {\n   vec3 c = vec3( 0.0 );\n   float r = mod( (hex / PACKED_COLOR_SIZE / PACKED_COLOR_SIZE), PACKED_COLOR_SIZE );\n   float g = mod( (hex / PACKED_COLOR_SIZE), PACKED_COLOR_SIZE );\n   float b = mod( hex, PACKED_COLOR_SIZE );\n   c.r = r / PACKED_COLOR_DIVISOR;\n   c.g = g / PACKED_COLOR_DIVISOR;\n   c.b = b / PACKED_COLOR_DIVISOR;\n   c *= vec3( 2.0 );\n   c -= vec3( 1.0 );\n   return c;\n}", 
floatOverLifetime:"float getFloatOverLifetime( in float positionInTime, in vec4 attr ) {\n    highp float value = 0.0;\n    float deltaAge = positionInTime * float( VALUE_OVER_LIFETIME_LENGTH - 1 );\n    float fIndex = 0.0;\n    float shouldApplyValue = 0.0;\n    value += attr[ 0 ] * when_eq( deltaAge, 0.0 );\n\n    for( int i = 0; i < VALUE_OVER_LIFETIME_LENGTH - 1; ++i ) {\n       fIndex = float( i );\n       shouldApplyValue = and( when_gt( deltaAge, fIndex ), when_le( deltaAge, fIndex + 1.0 ) );\n       value += shouldApplyValue * mix( attr[ i ], attr[ i + 1 ], deltaAge - fIndex );\n    }\n\n    return value;\n}", 
colorOverLifetime:"vec3 getColorOverLifetime( in float positionInTime, in vec3 color1, in vec3 color2, in vec3 color3, in vec3 color4 ) {\n    vec3 value = vec3( 0.0 );\n    value.x = getFloatOverLifetime( positionInTime, vec4( color1.x, color2.x, color3.x, color4.x ) );\n    value.y = getFloatOverLifetime( positionInTime, vec4( color1.y, color2.y, color3.y, color4.y ) );\n    value.z = getFloatOverLifetime( positionInTime, vec4( color1.z, color2.z, color3.z, color4.z ) );\n    return value;\n}", 
paramFetchingFunctions:"float getAlive() {\n   return params.x;\n}\nfloat getAge() {\n   return params.y;\n}\nfloat getMaxAge() {\n   return params.z;\n}\nfloat getWiggle() {\n   return params.w;\n}", forceFetchingFunctions:"vec4 getPosition( in float age ) {\n   return modelViewMatrix * vec4( position, 1.0 );\n}\nvec3 getVelocity( in float age ) {\n   return velocity * age;\n}\nvec3 getAcceleration( in float age ) {\n   return acceleration.xyz * age;\n}", rotationFunctions:"#ifdef SHOULD_ROTATE_PARTICLES\n   mat4 getRotationMatrix( in vec3 axis, in float angle) {\n       axis = normalize(axis);\n       float s = sin(angle);\n       float c = cos(angle);\n       float oc = 1.0 - c;\n\n       return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\n                   oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\n                   oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\n                   0.0,                                0.0,                                0.0,                                1.0);\n   }\n\n   vec3 getRotation( in vec3 pos, in float positionInTime ) {\n      if( rotation.y == 0.0 ) {\n           return pos;\n      }\n\n      vec3 axis = unpackRotationAxis( rotation.x );\n      vec3 center = rotationCenter;\n      vec3 translated;\n      mat4 rotationMatrix;\n      float angle = 0.0;\n      angle += when_eq( rotation.z, 0.0 ) * rotation.y;\n      angle += when_gt( rotation.z, 0.0 ) * mix( 0.0, rotation.y, positionInTime );\n      translated = rotationCenter - pos;\n      rotationMatrix = getRotationMatrix( axis, angle );\n      return center - vec3( rotationMatrix * vec4( translated, 0.0 ) );\n   }\n#endif", 
rotateTexture:"    vec2 vUv = vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y );\n\n    #ifdef SHOULD_ROTATE_TEXTURE\n       float x = gl_PointCoord.x - 0.5;\n       float y = 1.0 - gl_PointCoord.y - 0.5;\n       float c = cos( -vAngle );\n       float s = sin( -vAngle );\n       vUv = vec2( c * x + s * y + 0.5, c * y - s * x + 0.5 );\n    #endif\n\n    #ifdef SHOULD_CALCULATE_SPRITE\n        float framesX = vSpriteSheet.x;\n        float framesY = vSpriteSheet.y;\n        float columnNorm = vSpriteSheet.z;\n        float rowNorm = vSpriteSheet.w;\n        vUv.x = gl_PointCoord.x * framesX + columnNorm;\n        vUv.y = 1.0 - (gl_PointCoord.y * framesY + rowNorm);\n    #endif\n\n    vec4 rotatedTexture = texture2D( texture, vUv );"};
SPE.shaders = {vertex:[SPE.shaderChunks.defines, SPE.shaderChunks.uniforms, SPE.shaderChunks.attributes, SPE.shaderChunks.varyings, THREE.ShaderChunk.common, THREE.ShaderChunk.logdepthbuf_pars_vertex, THREE.ShaderChunk.fog_pars_vertex, SPE.shaderChunks.branchAvoidanceFunctions, SPE.shaderChunks.unpackColor, SPE.shaderChunks.unpackRotationAxis, SPE.shaderChunks.floatOverLifetime, SPE.shaderChunks.colorOverLifetime, SPE.shaderChunks.paramFetchingFunctions, SPE.shaderChunks.forceFetchingFunctions, SPE.shaderChunks.rotationFunctions, 
"void main() {\n    highp float age = getAge();\n    highp float alive = getAlive();\n    highp float maxAge = getMaxAge();\n    highp float positionInTime = (age / maxAge);\n    highp float isAlive = when_gt( alive, 0.0 );\n    #ifdef SHOULD_WIGGLE_PARTICLES\n        float wiggleAmount = positionInTime * getWiggle();\n        float wiggleSin = isAlive * sin( wiggleAmount );\n        float wiggleCos = isAlive * cos( wiggleAmount );\n    #endif\n    vec3 vel = getVelocity( age );\n    vec3 accel = getAcceleration( age );\n    vec3 force = vec3( 0.0 );\n    vec3 pos = vec3( position );\n    float drag = 1.0 - (positionInTime * 0.5) * acceleration.w;\n    force += vel;\n    force *= drag;\n    force += accel * age;\n    pos += force;\n    #ifdef SHOULD_WIGGLE_PARTICLES\n        pos.x += wiggleSin;\n        pos.y += wiggleCos;\n        pos.z += wiggleSin;\n    #endif\n    #ifdef SHOULD_ROTATE_PARTICLES\n        pos = getRotation( pos, positionInTime );\n    #endif\n    vec4 mvPosition = modelViewMatrix * vec4( pos, 1.0 );\n    highp float pointSize = getFloatOverLifetime( positionInTime, size ) * isAlive;\n    #ifdef HAS_PERSPECTIVE\n        float perspective = scale / length( mvPosition.xyz );\n    #else\n        float perspective = 1.0;\n    #endif\n    float pointSizePerspective = pointSize * perspective;\n    #ifdef COLORIZE\n       vec3 c = isAlive * getColorOverLifetime(\n           positionInTime,\n           unpackColor( color.x ),\n           unpackColor( color.y ),\n           unpackColor( color.z ),\n           unpackColor( color.w )\n       );\n    #else\n       vec3 c = vec3(1.0);\n    #endif\n    float o = isAlive * getFloatOverLifetime( positionInTime, opacity );\n    vColor = vec4( c, o );\n    #ifdef SHOULD_ROTATE_TEXTURE\n        vAngle = isAlive * getFloatOverLifetime( positionInTime, angle );\n    #endif\n    #ifdef SHOULD_CALCULATE_SPRITE\n        float framesX = textureAnimation.x;\n        float framesY = textureAnimation.y;\n        float loopCount = textureAnimation.w;\n        float totalFrames = textureAnimation.z;\n        float frameNumber = mod( (positionInTime * loopCount) * totalFrames, totalFrames );\n        float column = floor(mod( frameNumber, framesX ));\n        float row = floor( (frameNumber - column) / framesX );\n        float columnNorm = column / framesX;\n        float rowNorm = row / framesY;\n        vSpriteSheet.x = 1.0 / framesX;\n        vSpriteSheet.y = 1.0 / framesY;\n        vSpriteSheet.z = columnNorm;\n        vSpriteSheet.w = rowNorm;\n    #endif\n    gl_PointSize = pointSizePerspective;\n    gl_Position = projectionMatrix * mvPosition;", 
THREE.ShaderChunk.logdepthbuf_vertex, THREE.ShaderChunk.fog_vertex, "}"].join("\n"), fragment:[SPE.shaderChunks.uniforms, THREE.ShaderChunk.common, THREE.ShaderChunk.fog_pars_fragment, THREE.ShaderChunk.logdepthbuf_pars_fragment, SPE.shaderChunks.varyings, SPE.shaderChunks.branchAvoidanceFunctions, "void main() {\n    vec3 outgoingLight = vColor.xyz;\n    \n    #ifdef ALPHATEST\n       if ( vColor.w < float(ALPHATEST) ) discard;\n    #endif", SPE.shaderChunks.rotateTexture, THREE.ShaderChunk.logdepthbuf_fragment, 
"    outgoingLight = vColor.xyz * rotatedTexture.xyz;\n    gl_FragColor = vec4( outgoingLight.xyz, rotatedTexture.w * vColor.w );", THREE.ShaderChunk.fog_fragment, "}"].join("\n")};
SPE.utils = {types:{BOOLEAN:"boolean", STRING:"string", NUMBER:"number", OBJECT:"object"}, ensureTypedArg:function(a, h, l) {
  return typeof a === h ? a : l;
}, ensureArrayTypedArg:function(a, h, l) {
  if (Array.isArray(a)) {
    for (var b = a.length - 1;0 <= b;--b) {
      if (typeof a[b] !== h) {
        return l;
      }
    }
    return a;
  }
  return this.ensureTypedArg(a, h, l);
}, ensureInstanceOf:function(a, h, l) {
  return void 0 !== h && a instanceof h ? a : l;
}, ensureArrayInstanceOf:function(a, h, l) {
  if (Array.isArray(a)) {
    for (var b = a.length - 1;0 <= b;--b) {
      if (void 0 !== h && 0 == a[b] instanceof h) {
        return l;
      }
    }
    return a;
  }
  return this.ensureInstanceOf(a, h, l);
}, ensureValueOverLifetimeCompliance:function(a, h, l) {
  h = h || 3;
  l = l || 3;
  !1 === Array.isArray(a._value) && (a._value = [a._value]);
  !1 === Array.isArray(a._spread) && (a._spread = [a._spread]);
  var b = this.clamp(a._value.length, h, l);
  h = this.clamp(a._spread.length, h, l);
  b = Math.max(b, h);
  a._value.length !== b && (a._value = this.interpolateArray(a._value, b));
  a._spread.length !== b && (a._spread = this.interpolateArray(a._spread, b));
}, interpolateArray:function(a, h) {
  for (var l = a.length, b = ["function" == typeof a[0].clone ? a[0].clone() : a[0]], g = (l - 1) / (h - 1), k = 1;h - 1 > k;++k) {
    var c = k * g, e = Math.floor(c);
    b[k] = this.lerpTypeAgnostic(a[e], a[Math.ceil(c)], c - e);
  }
  return b.push("function" == typeof a[l - 1].clone ? a[l - 1].clone() : a[l - 1]), b;
}, clamp:function(a, h, l) {
  return Math.max(h, Math.min(a, l));
}, zeroToEpsilon:function(a, h) {
  var l = a;
  return l = h ? 1E-4 * Math.random() : 1E-5, 0 > a && -1E-5 < a && (l = -l), l;
}, lerpTypeAgnostic:function(a, h, l) {
  var b, g = this.types;
  return typeof a === g.NUMBER && typeof h === g.NUMBER ? a + (h - a) * l : a instanceof THREE.Vector2 && h instanceof THREE.Vector2 ? (b = a.clone(), b.x = this.lerp(a.x, h.x, l), b.y = this.lerp(a.y, h.y, l), b) : a instanceof THREE.Vector3 && h instanceof THREE.Vector3 ? (b = a.clone(), b.x = this.lerp(a.x, h.x, l), b.y = this.lerp(a.y, h.y, l), b.z = this.lerp(a.z, h.z, l), b) : a instanceof THREE.Vector4 && h instanceof THREE.Vector4 ? (b = a.clone(), b.x = this.lerp(a.x, h.x, l), b.y = this.lerp(a.y, 
  h.y, l), b.z = this.lerp(a.z, h.z, l), b.w = this.lerp(a.w, h.w, l), b) : a instanceof THREE.Color && h instanceof THREE.Color ? (b = a.clone(), b.r = this.lerp(a.r, h.r, l), b.g = this.lerp(a.g, h.g, l), b.b = this.lerp(a.b, h.b, l), b) : void console.warn("Invalid argument types, or argument types do not match:", a, h);
}, lerp:function(a, h, l) {
  return a + (h - a) * l;
}, roundToNearestMultiple:function(a, h) {
  var l = 0;
  return 0 === h ? a : (l = Math.abs(a) % h, 0 === l ? a : 0 > a ? -(Math.abs(a) - l) : a + h - l);
}, arrayValuesAreEqual:function(a) {
  for (var h = 0;h < a.length - 1;++h) {
    if (a[h] !== a[h + 1]) {
      return !1;
    }
  }
  return !0;
}, randomFloat:function(a, h) {
  return a + h * (Math.random() - .5);
}, randomVector3:function(a, h, l, b, g) {
  var k = l.x + (Math.random() * b.x - .5 * b.x), c = l.y + (Math.random() * b.y - .5 * b.y);
  l = l.z + (Math.random() * b.z - .5 * b.z);
  g && (k = .5 * -g.x + this.roundToNearestMultiple(k, g.x), c = .5 * -g.y + this.roundToNearestMultiple(c, g.y), l = .5 * -g.z + this.roundToNearestMultiple(l, g.z));
  a.typedArray.setVec3Components(h, k, c, l);
}, randomColor:function(a, h, l, b) {
  var g = l.r + Math.random() * b.x, k = l.g + Math.random() * b.y;
  l = l.b + Math.random() * b.z;
  g = this.clamp(g, 0, 1);
  k = this.clamp(k, 0, 1);
  l = this.clamp(l, 0, 1);
  a.typedArray.setVec3Components(h, g, k, l);
}, randomColorAsHex:function() {
  var a = new THREE.Color;
  return function(h, l, b, g) {
    for (var k = b.length, c = [], e = 0;k > e;++e) {
      var f = g[e];
      a.copy(b[e]);
      a.r += Math.random() * f.x - .5 * f.x;
      a.g += Math.random() * f.y - .5 * f.y;
      a.b += Math.random() * f.z - .5 * f.z;
      a.r = this.clamp(a.r, 0, 1);
      a.g = this.clamp(a.g, 0, 1);
      a.b = this.clamp(a.b, 0, 1);
      c.push(a.getHex());
    }
    h.typedArray.setVec4Components(l, c[0], c[1], c[2], c[3]);
  };
}(), randomVector3OnSphere:function(a, h, l, b, g, k, c, e) {
  e = 2 * Math.random() - 1;
  var f = 6.2832 * Math.random(), q = Math.sqrt(1 - e * e);
  b = this.randomFloat(b, g);
  c && (b = Math.round(b / c) * c);
  c = q * Math.cos(f) * b;
  f = q * Math.sin(f) * b;
  c *= k.x;
  f *= k.y;
  k = e * b * k.z;
  c += l.x;
  f += l.y;
  k += l.z;
  a.typedArray.setVec3Components(h, c, f, k);
}, seededRandom:function(a) {
  a = 1E4 * Math.sin(a);
  return a - (0 | a);
}, randomVector3OnDisc:function(a, h, l, b, g, k, c) {
  var e = 6.2832 * Math.random();
  b = Math.abs(this.randomFloat(b, g));
  c && (b = Math.round(b / c) * c);
  c = Math.cos(e) * b;
  e = Math.sin(e) * b;
  c *= k.x;
  e *= k.y;
  c += l.x;
  e += l.y;
  l = 0 + l.z;
  a.typedArray.setVec3Components(h, c, e, l);
}, randomDirectionVector3OnSphere:function() {
  var a = new THREE.Vector3;
  return function(h, l, b, g, k, c, e, f) {
    a.copy(c);
    a.x -= b;
    a.y -= g;
    a.z -= k;
    a.normalize().multiplyScalar(-this.randomFloat(e, f));
    h.typedArray.setVec3Components(l, a.x, a.y, a.z);
  };
}(), randomDirectionVector3OnDisc:function() {
  var a = new THREE.Vector3;
  return function(h, l, b, g, k, c, e, f) {
    a.copy(c);
    a.x -= b;
    a.y -= g;
    a.z -= k;
    a.normalize().multiplyScalar(-this.randomFloat(e, f));
    h.typedArray.setVec3Components(l, a.x, a.y, 0);
  };
}(), getPackedRotationAxis:function() {
  var a = new THREE.Vector3, h = new THREE.Vector3, l = new THREE.Color, b = new THREE.Vector3(1, 1, 1);
  return function(g, k) {
    return a.copy(g).normalize(), h.copy(k).normalize(), a.x += .5 * -k.x + Math.random() * k.x, a.y += .5 * -k.y + Math.random() * k.y, a.z += .5 * -k.z + Math.random() * k.z, a.normalize().add(b).multiplyScalar(.5), l.setRGB(a.x, a.y, a.z), l.getHex();
  };
}()};
SPE.Group = function(a) {
  var h = SPE.utils, l = h.types;
  a = h.ensureTypedArg(a, l.OBJECT, {});
  a.texture = h.ensureTypedArg(a.texture, l.OBJECT, {});
  this.uuid = THREE.Math.generateUUID();
  this.fixedTimeStep = h.ensureTypedArg(a.fixedTimeStep, l.NUMBER, .016);
  this.texture = h.ensureInstanceOf(a.texture.value, THREE.Texture, null);
  this.textureFrames = h.ensureInstanceOf(a.texture.frames, THREE.Vector2, new THREE.Vector2(1, 1));
  this.textureFrameCount = h.ensureTypedArg(a.texture.frameCount, l.NUMBER, this.textureFrames.x * this.textureFrames.y);
  this.textureLoop = h.ensureTypedArg(a.texture.loop, l.NUMBER, 1);
  this.textureFrames.max(new THREE.Vector2(1, 1));
  this.hasPerspective = h.ensureTypedArg(a.hasPerspective, l.BOOLEAN, !0);
  this.colorize = h.ensureTypedArg(a.colorize, l.BOOLEAN, !0);
  this.maxParticleCount = h.ensureTypedArg(a.maxParticleCount, l.NUMBER, null);
  this.blending = h.ensureTypedArg(a.blending, l.NUMBER, THREE.AdditiveBlending);
  this.transparent = h.ensureTypedArg(a.transparent, l.BOOLEAN, !0);
  this.alphaTest = parseFloat(h.ensureTypedArg(a.alphaTest, l.NUMBER, 0));
  this.depthWrite = h.ensureTypedArg(a.depthWrite, l.BOOLEAN, !1);
  this.depthTest = h.ensureTypedArg(a.depthTest, l.BOOLEAN, !0);
  this.fog = h.ensureTypedArg(a.fog, l.BOOLEAN, !0);
  this.scale = h.ensureTypedArg(a.scale, l.NUMBER, 300);
  this.emitters = [];
  this.emitterIDs = [];
  this._pool = [];
  this._poolCreationSettings = null;
  this._createNewWhenPoolEmpty = 0;
  this._attributesNeedDynamicReset = this._attributesNeedRefresh = !1;
  this.particleCount = 0;
  this.uniforms = {texture:{type:"t", value:this.texture}, textureAnimation:{type:"v4", value:new THREE.Vector4(this.textureFrames.x, this.textureFrames.y, this.textureFrameCount, Math.max(Math.abs(this.textureLoop), 1))}, fogColor:{type:"c", value:null}, fogNear:{type:"f", value:10}, fogFar:{type:"f", value:200}, fogDensity:{type:"f", value:.5}, deltaTime:{type:"f", value:0}, runTime:{type:"f", value:0}, scale:{type:"f", value:this.scale}};
  this.defines = {HAS_PERSPECTIVE:this.hasPerspective, COLORIZE:this.colorize, VALUE_OVER_LIFETIME_LENGTH:SPE.valueOverLifetimeLength, SHOULD_ROTATE_TEXTURE:!1, SHOULD_ROTATE_PARTICLES:!1, SHOULD_WIGGLE_PARTICLES:!1, SHOULD_CALCULATE_SPRITE:1 < this.textureFrames.x || 1 < this.textureFrames.y};
  this.attributes = {position:new SPE.ShaderAttribute("v3", !0), acceleration:new SPE.ShaderAttribute("v4", !0), velocity:new SPE.ShaderAttribute("v3", !0), rotation:new SPE.ShaderAttribute("v4", !0), rotationCenter:new SPE.ShaderAttribute("v3", !0), params:new SPE.ShaderAttribute("v4", !0), size:new SPE.ShaderAttribute("v4", !0), angle:new SPE.ShaderAttribute("v4", !0), color:new SPE.ShaderAttribute("v4", !0), opacity:new SPE.ShaderAttribute("v4", !0)};
  this.attributeKeys = Object.keys(this.attributes);
  this.attributeCount = this.attributeKeys.length;
  this.material = new THREE.ShaderMaterial({uniforms:this.uniforms, vertexShader:SPE.shaders.vertex, fragmentShader:SPE.shaders.fragment, blending:this.blending, transparent:this.transparent, alphaTest:this.alphaTest, depthWrite:this.depthWrite, depthTest:this.depthTest, defines:this.defines, fog:this.fog});
  this.geometry = new THREE.BufferGeometry;
  this.mesh = new THREE.Points(this.geometry, this.material);
  null === this.maxParticleCount && console.warn("SPE.Group: No maxParticleCount specified. Adding emitters after rendering will probably cause errors.");
};
SPE.Group.constructor = SPE.Group;
SPE.Group.prototype._updateDefines = function() {
  var a, h = this.emitters, l = h.length - 1, b = this.defines;
  for (l;0 <= l;--l) {
    a = h[l], b.SHOULD_CALCULATE_SPRITE || (b.SHOULD_ROTATE_TEXTURE = b.SHOULD_ROTATE_TEXTURE || !!Math.max(Math.max.apply(null, a.angle.value), Math.max.apply(null, a.angle.spread))), b.SHOULD_ROTATE_PARTICLES = b.SHOULD_ROTATE_PARTICLES || !!Math.max(a.rotation.angle, a.rotation.angleSpread), b.SHOULD_WIGGLE_PARTICLES = b.SHOULD_WIGGLE_PARTICLES || !!Math.max(a.wiggle.value, a.wiggle.spread);
  }
  this.material.needsUpdate = !0;
};
SPE.Group.prototype._applyAttributesToGeometry = function() {
  var a, h, l = this.attributes, b = this.geometry, g = b.attributes, k;
  for (k in l) {
    l.hasOwnProperty(k) && (a = l[k], h = g[k], h ? h.array = a.typedArray.array : b.addAttribute(k, a.bufferAttribute), a.bufferAttribute.needsUpdate = !0);
  }
  this.geometry.setDrawRange(0, this.particleCount);
};
SPE.Group.prototype.addEmitter = function(a) {
  if (0 == a instanceof SPE.Emitter) {
    return void console.error("`emitter` argument must be instance of SPE.Emitter. Was provided with:", a);
  }
  if (-1 < this.emitterIDs.indexOf(a.uuid)) {
    return void console.error("Emitter already exists in this group. Will not add again.");
  }
  if (null !== a.group) {
    return void console.error("Emitter already belongs to another group. Will not add to requested group.");
  }
  var h = this.attributes, l = this.particleCount, b = l + a.particleCount;
  this.particleCount = b;
  null !== this.maxParticleCount && this.particleCount > this.maxParticleCount && console.warn("SPE.Group: maxParticleCount exceeded. Requesting", this.particleCount, "particles, can support only", this.maxParticleCount);
  a._calculatePPSValue(a.maxAge._value + a.maxAge._spread);
  a._setBufferUpdateRanges(this.attributeKeys);
  a._setAttributeOffset(l);
  a.group = this;
  a.attributes = this.attributes;
  for (var g in h) {
    h.hasOwnProperty(g) && h[g]._createBufferAttribute(null !== this.maxParticleCount ? this.maxParticleCount : this.particleCount);
  }
  for (h = l;b > h;++h) {
    a._assignPositionValue(h), a._assignForceValue(h, "velocity"), a._assignForceValue(h, "acceleration"), a._assignAbsLifetimeValue(h, "opacity"), a._assignAbsLifetimeValue(h, "size"), a._assignAngleValue(h), a._assignRotationValue(h), a._assignParamsValue(h), a._assignColorValue(h);
  }
  return this._applyAttributesToGeometry(), this.emitters.push(a), this.emitterIDs.push(a.uuid), this._updateDefines(a), this.material.needsUpdate = !0, this.geometry.needsUpdate = !0, this._attributesNeedRefresh = !0, this;
};
SPE.Group.prototype.removeEmitter = function(a) {
  var h = this.emitterIDs.indexOf(a.uuid);
  if (0 == a instanceof SPE.Emitter) {
    return void console.error("`emitter` argument must be instance of SPE.Emitter. Was provided with:", a);
  }
  if (-1 === h) {
    return void console.error("Emitter does not exist in this group. Will not remove.");
  }
  for (var l = a.attributeOffset, b = l + a.particleCount, g = this.attributes.params.typedArray, k = l;b > k;++k) {
    g.array[4 * k] = 0, g.array[4 * k + 1] = 0;
  }
  this.emitters.splice(h, 1);
  this.emitterIDs.splice(h, 1);
  for (var c in this.attributes) {
    this.attributes.hasOwnProperty(c) && this.attributes[c].splice(l, b);
  }
  this.particleCount -= a.particleCount;
  a._onRemove();
  this._attributesNeedRefresh = !0;
};
SPE.Group.prototype.getFromPool = function() {
  var a = this._pool, h = this._createNewWhenPoolEmpty;
  return a.length ? a.pop() : h ? (a = new SPE.Emitter(this._poolCreationSettings), this.addEmitter(a), a) : null;
};
SPE.Group.prototype.releaseIntoPool = function(a) {
  return 0 == a instanceof SPE.Emitter ? void console.error("Argument is not instanceof SPE.Emitter:", a) : (a.reset(), this._pool.unshift(a), this);
};
SPE.Group.prototype.getPool = function() {
  return this._pool;
};
SPE.Group.prototype.addPool = function(a, h, l) {
  this._poolCreationSettings = h;
  this._createNewWhenPoolEmpty = !!l;
  for (var b = 0;a > b;++b) {
    l = Array.isArray(h) ? new SPE.Emitter(h[b]) : new SPE.Emitter(h), this.addEmitter(l), this.releaseIntoPool(l);
  }
  return this;
};
SPE.Group.prototype._triggerSingleEmitter = function(a) {
  var h = this.getFromPool(), l = this;
  return null === h ? void console.log("SPE.Group pool ran out.") : (a instanceof THREE.Vector3 && (h.position.value.copy(a), h.position.value = h.position.value), h.enable(), setTimeout(function() {
    h.disable();
    l.releaseIntoPool(h);
  }, 1E3 * Math.max(h.duration, h.maxAge.value + h.maxAge.spread)), this);
};
SPE.Group.prototype.triggerPoolEmitter = function(a, h) {
  if ("number" == typeof a && 1 < a) {
    for (var l = 0;a > l;++l) {
      this._triggerSingleEmitter(h);
    }
  } else {
    this._triggerSingleEmitter(h);
  }
  return this;
};
SPE.Group.prototype._updateUniforms = function(a) {
  this.uniforms.runTime.value += a;
  this.uniforms.deltaTime.value = a;
};
SPE.Group.prototype._resetBufferRanges = function() {
  var a = this.attributeKeys, h = this.attributeCount - 1, l = this.attributes;
  for (h;0 <= h;--h) {
    l[a[h]].resetUpdateRange();
  }
};
SPE.Group.prototype._updateBuffers = function(a) {
  var h, l = this.attributeKeys, b = this.attributeCount - 1, g = this.attributes, k = a.bufferUpdateRanges;
  for (b;0 <= b;--b) {
    h = l[b], a = k[h], h = g[h], h.setUpdateRange(a.min, a.max), h.flagUpdate();
  }
};
SPE.Group.prototype.tick = function(a) {
  var h = this.emitters, l = h.length, b = a || this.fixedTimeStep, g = this.attributeKeys, k = this.attributes;
  if (this._updateUniforms(b), this._resetBufferRanges(), 0 !== l || !1 !== this._attributesNeedRefresh || !1 !== this._attributesNeedDynamicReset) {
    var c;
    for (a = 0;l > a;++a) {
      c = h[a], c.tick(b), this._updateBuffers(c);
    }
    if (!0 === this._attributesNeedDynamicReset) {
      for (a = this.attributeCount - 1;0 <= a;--a) {
        k[g[a]].resetDynamic();
      }
      this._attributesNeedDynamicReset = !1;
    }
    if (!0 === this._attributesNeedRefresh) {
      for (a = this.attributeCount - 1;0 <= a;--a) {
        k[g[a]].forceUpdateAll();
      }
      this._attributesNeedRefresh = !1;
      this._attributesNeedDynamicReset = !0;
    }
  }
};
SPE.Group.prototype.dispose = function() {
  return this.geometry.dispose(), this.material.dispose(), this;
};
SPE.Emitter = function(a) {
  var h = SPE.utils, l = h.types, b = SPE.valueOverLifetimeLength;
  a = h.ensureTypedArg(a, l.OBJECT, {});
  a.position = h.ensureTypedArg(a.position, l.OBJECT, {});
  a.velocity = h.ensureTypedArg(a.velocity, l.OBJECT, {});
  a.acceleration = h.ensureTypedArg(a.acceleration, l.OBJECT, {});
  a.radius = h.ensureTypedArg(a.radius, l.OBJECT, {});
  a.drag = h.ensureTypedArg(a.drag, l.OBJECT, {});
  a.rotation = h.ensureTypedArg(a.rotation, l.OBJECT, {});
  a.color = h.ensureTypedArg(a.color, l.OBJECT, {});
  a.opacity = h.ensureTypedArg(a.opacity, l.OBJECT, {});
  a.size = h.ensureTypedArg(a.size, l.OBJECT, {});
  a.angle = h.ensureTypedArg(a.angle, l.OBJECT, {});
  a.wiggle = h.ensureTypedArg(a.wiggle, l.OBJECT, {});
  a.maxAge = h.ensureTypedArg(a.maxAge, l.OBJECT, {});
  a.onParticleSpawn && console.warn("onParticleSpawn has been removed. Please set properties directly to alter values at runtime.");
  this.uuid = THREE.Math.generateUUID();
  this.type = h.ensureTypedArg(a.type, l.NUMBER, SPE.distributions.BOX);
  this.position = {_value:h.ensureInstanceOf(a.position.value, THREE.Vector3, new THREE.Vector3), _spread:h.ensureInstanceOf(a.position.spread, THREE.Vector3, new THREE.Vector3), _spreadClamp:h.ensureInstanceOf(a.position.spreadClamp, THREE.Vector3, new THREE.Vector3), _distribution:h.ensureTypedArg(a.position.distribution, l.NUMBER, this.type), _randomise:h.ensureTypedArg(a.position.randomise, l.BOOLEAN, !1), _radius:h.ensureTypedArg(a.position.radius, l.NUMBER, 10), _radiusScale:h.ensureInstanceOf(a.position.radiusScale, 
  THREE.Vector3, new THREE.Vector3(1, 1, 1)), _distributionClamp:h.ensureTypedArg(a.position.distributionClamp, l.NUMBER, 0)};
  this.velocity = {_value:h.ensureInstanceOf(a.velocity.value, THREE.Vector3, new THREE.Vector3), _spread:h.ensureInstanceOf(a.velocity.spread, THREE.Vector3, new THREE.Vector3), _distribution:h.ensureTypedArg(a.velocity.distribution, l.NUMBER, this.type), _randomise:h.ensureTypedArg(a.position.randomise, l.BOOLEAN, !1)};
  this.acceleration = {_value:h.ensureInstanceOf(a.acceleration.value, THREE.Vector3, new THREE.Vector3), _spread:h.ensureInstanceOf(a.acceleration.spread, THREE.Vector3, new THREE.Vector3), _distribution:h.ensureTypedArg(a.acceleration.distribution, l.NUMBER, this.type), _randomise:h.ensureTypedArg(a.position.randomise, l.BOOLEAN, !1)};
  this.drag = {_value:h.ensureTypedArg(a.drag.value, l.NUMBER, 0), _spread:h.ensureTypedArg(a.drag.spread, l.NUMBER, 0), _randomise:h.ensureTypedArg(a.position.randomise, l.BOOLEAN, !1)};
  this.wiggle = {_value:h.ensureTypedArg(a.wiggle.value, l.NUMBER, 0), _spread:h.ensureTypedArg(a.wiggle.spread, l.NUMBER, 0)};
  this.rotation = {_axis:h.ensureInstanceOf(a.rotation.axis, THREE.Vector3, new THREE.Vector3(0, 1, 0)), _axisSpread:h.ensureInstanceOf(a.rotation.axisSpread, THREE.Vector3, new THREE.Vector3), _angle:h.ensureTypedArg(a.rotation.angle, l.NUMBER, 0), _angleSpread:h.ensureTypedArg(a.rotation.angleSpread, l.NUMBER, 0), _static:h.ensureTypedArg(a.rotation["static"], l.BOOLEAN, !1), _center:h.ensureInstanceOf(a.rotation.center, THREE.Vector3, this.position._value.clone()), _randomise:h.ensureTypedArg(a.position.randomise, 
  l.BOOLEAN, !1)};
  this.maxAge = {_value:h.ensureTypedArg(a.maxAge.value, l.NUMBER, 2), _spread:h.ensureTypedArg(a.maxAge.spread, l.NUMBER, 0)};
  this.color = {_value:h.ensureArrayInstanceOf(a.color.value, THREE.Color, new THREE.Color), _spread:h.ensureArrayInstanceOf(a.color.spread, THREE.Vector3, new THREE.Vector3), _randomise:h.ensureTypedArg(a.position.randomise, l.BOOLEAN, !1)};
  this.opacity = {_value:h.ensureArrayTypedArg(a.opacity.value, l.NUMBER, 1), _spread:h.ensureArrayTypedArg(a.opacity.spread, l.NUMBER, 0), _randomise:h.ensureTypedArg(a.position.randomise, l.BOOLEAN, !1)};
  this.size = {_value:h.ensureArrayTypedArg(a.size.value, l.NUMBER, 1), _spread:h.ensureArrayTypedArg(a.size.spread, l.NUMBER, 0), _randomise:h.ensureTypedArg(a.position.randomise, l.BOOLEAN, !1)};
  this.angle = {_value:h.ensureArrayTypedArg(a.angle.value, l.NUMBER, 0), _spread:h.ensureArrayTypedArg(a.angle.spread, l.NUMBER, 0), _randomise:h.ensureTypedArg(a.position.randomise, l.BOOLEAN, !1)};
  this.particleCount = h.ensureTypedArg(a.particleCount, l.NUMBER, 100);
  this.duration = h.ensureTypedArg(a.duration, l.NUMBER, null);
  this.isStatic = h.ensureTypedArg(a.isStatic, l.BOOLEAN, !1);
  this.activeMultiplier = h.ensureTypedArg(a.activeMultiplier, l.NUMBER, 1);
  this.direction = h.ensureTypedArg(a.direction, l.NUMBER, 1);
  this.alive = h.ensureTypedArg(a.alive, l.BOOLEAN, !0);
  this.activeParticleCount = this.age = this.attributeEnd = this.attributeOffset = this.activationIndex = this.particlesPerSecond = 0;
  this.paramsArray = this.attributes = this.group = null;
  this.resetFlags = {position:h.ensureTypedArg(a.position.randomise, l.BOOLEAN, !1) || h.ensureTypedArg(a.radius.randomise, l.BOOLEAN, !1), velocity:h.ensureTypedArg(a.velocity.randomise, l.BOOLEAN, !1), acceleration:h.ensureTypedArg(a.acceleration.randomise, l.BOOLEAN, !1) || h.ensureTypedArg(a.drag.randomise, l.BOOLEAN, !1), rotation:h.ensureTypedArg(a.rotation.randomise, l.BOOLEAN, !1), rotationCenter:h.ensureTypedArg(a.rotation.randomise, l.BOOLEAN, !1), size:h.ensureTypedArg(a.size.randomise, 
  l.BOOLEAN, !1), color:h.ensureTypedArg(a.color.randomise, l.BOOLEAN, !1), opacity:h.ensureTypedArg(a.opacity.randomise, l.BOOLEAN, !1), angle:h.ensureTypedArg(a.angle.randomise, l.BOOLEAN, !1)};
  this.updateFlags = {};
  this.updateCounts = {};
  this.updateMap = {maxAge:"params", position:"position", velocity:"velocity", acceleration:"acceleration", drag:"acceleration", wiggle:"params", rotation:"rotation", size:"size", color:"color", opacity:"opacity", angle:"angle"};
  for (var g in this.updateMap) {
    this.updateMap.hasOwnProperty(g) && (this.updateCounts[this.updateMap[g]] = 0, this.updateFlags[this.updateMap[g]] = !1, this._createGetterSetters(this[g], g));
  }
  this.bufferUpdateRanges = {};
  this.attributeKeys = null;
  this.attributeCount = 0;
  h.ensureValueOverLifetimeCompliance(this.color, b, b);
  h.ensureValueOverLifetimeCompliance(this.opacity, b, b);
  h.ensureValueOverLifetimeCompliance(this.size, b, b);
  h.ensureValueOverLifetimeCompliance(this.angle, b, b);
};
SPE.Emitter.constructor = SPE.Emitter;
SPE.Emitter.prototype._createGetterSetters = function(a, h) {
  var l = this, b;
  for (b in a) {
    if (a.hasOwnProperty(b)) {
      var g = b.replace("_", "");
      Object.defineProperty(a, g, {get:function(a) {
        return function() {
          return this[a];
        };
      }(b), set:function(a) {
        return function(b) {
          var c = l.updateMap[h], f = this[a], g = SPE.valueOverLifetimeLength;
          "_rotationCenter" === a ? (l.updateFlags.rotationCenter = !0, l.updateCounts.rotationCenter = 0) : "_randomise" === a ? l.resetFlags[c] = b : (l.updateFlags[c] = !0, l.updateCounts[c] = 0);
          l.group._updateDefines();
          this[a] = b;
          Array.isArray(f) && SPE.utils.ensureValueOverLifetimeCompliance(l[h], g, g);
        };
      }(b)});
    }
  }
};
SPE.Emitter.prototype._setBufferUpdateRanges = function(a) {
  this.attributeKeys = a;
  this.attributeCount = a.length;
  for (var h = this.attributeCount - 1;0 <= h;--h) {
    this.bufferUpdateRanges[a[h]] = {min:Number.POSITIVE_INFINITY, max:Number.NEGATIVE_INFINITY};
  }
};
SPE.Emitter.prototype._calculatePPSValue = function(a) {
  var h = this.particleCount;
  this.duration ? this.particlesPerSecond = h / (a < this.duration ? a : this.duration) : this.particlesPerSecond = h / a;
};
SPE.Emitter.prototype._setAttributeOffset = function(a) {
  this.activationIndex = this.attributeOffset = a;
  this.activationEnd = a + this.particleCount;
};
SPE.Emitter.prototype._assignValue = function(a, h) {
  switch(a) {
    case "position":
      this._assignPositionValue(h);
      break;
    case "velocity":
    case "acceleration":
      this._assignForceValue(h, a);
      break;
    case "size":
    case "opacity":
      this._assignAbsLifetimeValue(h, a);
      break;
    case "angle":
      this._assignAngleValue(h);
      break;
    case "params":
      this._assignParamsValue(h);
      break;
    case "rotation":
      this._assignRotationValue(h);
      break;
    case "color":
      this._assignColorValue(h);
  }
};
SPE.Emitter.prototype._assignPositionValue = function(a) {
  var h = SPE.distributions, l = SPE.utils, b = this.position, g = this.attributes.position, k = b._value, c = b._spread;
  switch(b._distribution) {
    case h.BOX:
      l.randomVector3(g, a, k, c, b._spreadClamp);
      break;
    case h.SPHERE:
      l.randomVector3OnSphere(g, a, k, b._radius, b._spread.x, b._radiusScale, b._spreadClamp.x, b._distributionClamp || this.particleCount);
      break;
    case h.DISC:
      l.randomVector3OnDisc(g, a, k, b._radius, b._spread.x, b._radiusScale, b._spreadClamp.x);
  }
};
SPE.Emitter.prototype._assignForceValue = function(a, h) {
  var l, b, g, k;
  b = SPE.distributions;
  var c = SPE.utils, e = this[h];
  g = e._value;
  l = e._spread;
  switch(e._distribution) {
    case b.BOX:
      c.randomVector3(this.attributes[h], a, g, l);
      break;
    case b.SPHERE:
      l = this.attributes.position.typedArray.array;
      k = 3 * a;
      b = l[k];
      g = l[k + 1];
      l = l[k + 2];
      c.randomDirectionVector3OnSphere(this.attributes[h], a, b, g, l, this.position._value, e._value.x, e._spread.x);
      break;
    case b.DISC:
      l = this.attributes.position.typedArray.array, k = 3 * a, b = l[k], g = l[k + 1], l = l[k + 2], c.randomDirectionVector3OnDisc(this.attributes[h], a, b, g, l, this.position._value, e._value.x, e._spread.x);
  }
  "acceleration" === h && (h = c.clamp(c.randomFloat(this.drag._value, this.drag._spread), 0, 1), this.attributes.acceleration.typedArray.array[4 * a + 3] = h);
};
SPE.Emitter.prototype._assignAbsLifetimeValue = function(a, h) {
  var l, b = this.attributes[h].typedArray;
  h = this[h];
  var g = SPE.utils;
  g.arrayValuesAreEqual(h._value) && g.arrayValuesAreEqual(h._spread) ? (l = Math.abs(g.randomFloat(h._value[0], h._spread[0])), b.setVec4Components(a, l, l, l, l)) : b.setVec4Components(a, Math.abs(g.randomFloat(h._value[0], h._spread[0])), Math.abs(g.randomFloat(h._value[1], h._spread[1])), Math.abs(g.randomFloat(h._value[2], h._spread[2])), Math.abs(g.randomFloat(h._value[3], h._spread[3])));
};
SPE.Emitter.prototype._assignAngleValue = function(a) {
  var h, l = this.attributes.angle.typedArray, b = this.angle, g = SPE.utils;
  g.arrayValuesAreEqual(b._value) && g.arrayValuesAreEqual(b._spread) ? (h = g.randomFloat(b._value[0], b._spread[0]), l.setVec4Components(a, h, h, h, h)) : l.setVec4Components(a, g.randomFloat(b._value[0], b._spread[0]), g.randomFloat(b._value[1], b._spread[1]), g.randomFloat(b._value[2], b._spread[2]), g.randomFloat(b._value[3], b._spread[3]));
};
SPE.Emitter.prototype._assignParamsValue = function(a) {
  this.attributes.params.typedArray.setVec4Components(a, this.isStatic ? 1 : 0, 0, Math.abs(SPE.utils.randomFloat(this.maxAge._value, this.maxAge._spread)), SPE.utils.randomFloat(this.wiggle._value, this.wiggle._spread));
};
SPE.Emitter.prototype._assignRotationValue = function(a) {
  this.attributes.rotation.typedArray.setVec3Components(a, SPE.utils.getPackedRotationAxis(this.rotation._axis, this.rotation._axisSpread), SPE.utils.randomFloat(this.rotation._angle, this.rotation._angleSpread), this.rotation._static ? 0 : 1);
  this.attributes.rotationCenter.typedArray.setVec3(a, this.rotation._center);
};
SPE.Emitter.prototype._assignColorValue = function(a) {
  SPE.utils.randomColorAsHex(this.attributes.color, a, this.color._value, this.color._spread);
};
SPE.Emitter.prototype._resetParticle = function(a) {
  for (var h, l, b = this.resetFlags, g = this.updateFlags, k = this.updateCounts, c = this.attributeKeys, e = this.attributeCount - 1;0 <= e;--e) {
    h = c[e], l = g[h], !0 !== b[h] && !0 !== l || (this._assignValue(h, a), this._updateAttributeUpdateRange(h, a), !0 === l && k[h] === this.particleCount ? (g[h] = !1, k[h] = 0) : 1 == l && ++k[h]);
  }
};
SPE.Emitter.prototype._updateAttributeUpdateRange = function(a, h) {
  a = this.bufferUpdateRanges[a];
  a.min = Math.min(h, a.min);
  a.max = Math.max(h, a.max);
};
SPE.Emitter.prototype._resetBufferRanges = function() {
  var a, h = this.bufferUpdateRanges, l = this.bufferUpdateKeys, b = this.bufferUpdateCount - 1;
  for (b;0 <= b;--b) {
    a = l[b], h[a].min = Number.POSITIVE_INFINITY, h[a].max = Number.NEGATIVE_INFINITY;
  }
};
SPE.Emitter.prototype._onRemove = function() {
  this.activeParticleCount = this.activationIndex = this.attributeOffset = this.particlesPerSecond = 0;
  this.paramsArray = this.attributes = this.group = null;
  this.age = 0;
};
SPE.Emitter.prototype._decrementParticleCount = function() {
  --this.activeParticleCount;
};
SPE.Emitter.prototype._incrementParticleCount = function() {
  ++this.activeParticleCount;
};
SPE.Emitter.prototype._checkParticleAges = function(a, h, l, b) {
  for (var g, k, c, e = h - 1;e >= a;--e) {
    h = 4 * e, c = l[h], 0 !== c && (k = l[h + 1], g = l[h + 2], 1 === this.direction ? (k += b, k >= g && (k = 0, c = 0, this._decrementParticleCount())) : (k -= b, 0 >= k && (k = g, c = 0, this._decrementParticleCount())), l[h] = c, l[h + 1] = k, this._updateAttributeUpdateRange("params", e));
  }
};
SPE.Emitter.prototype._activateParticles = function(a, h, l, b) {
  for (var g, k, c = this.direction, e = a;h > e;++e) {
    g = 4 * e, 0 != l[g] && 1 !== this.particleCount || (this._incrementParticleCount(), l[g] = 1, this._resetParticle(e), k = b * (e - a), l[g + 1] = -1 === c ? l[g + 2] - k : k, this._updateAttributeUpdateRange("params", e));
  }
};
SPE.Emitter.prototype.tick = function(a) {
  if (!this.isStatic) {
    null === this.paramsArray && (this.paramsArray = this.attributes.params.typedArray.array);
    var h = this.attributeOffset, l = h + this.particleCount, b = this.paramsArray, g = this.particlesPerSecond * this.activeMultiplier * a, k = this.activationIndex;
    if (this._resetBufferRanges(), this._checkParticleAges(h, l, b, a), !1 === this.alive) {
      return void(this.age = 0);
    }
    if (null !== this.duration && this.age > this.duration) {
      return this.alive = !1, void(this.age = 0);
    }
    var k = 1 === this.particleCount ? k : 0 | k, c = Math.min(k + g, this.activationEnd), e = c - this.activationIndex | 0;
    this._activateParticles(k, c, b, 0 < e ? a / e : 0);
    this.activationIndex += g;
    this.activationIndex > l && (this.activationIndex = h);
    this.age += a;
  }
};
SPE.Emitter.prototype.reset = function(a) {
  if (this.age = 0, this.alive = !1, !0 === a) {
    for (var h = this.attributeOffset, l = this.paramsArray, b = this.attributes.params.bufferAttribute, g = h + this.particleCount - 1;g >= h;--g) {
      a = 4 * g, l[a] = 0, l[a + 1] = 0;
    }
    b.updateRange.offset = 0;
    b.updateRange.count = -1;
    b.needsUpdate = !0;
  }
  return this;
};
SPE.Emitter.prototype.enable = function() {
  return this.alive = !0, this;
};
SPE.Emitter.prototype.disable = function() {
  return this.alive = !1, this;
};
SPE.Emitter.prototype.remove = function() {
  return null !== this.group ? this.group.removeEmitter(this) : console.error("Emitter does not belong to a group, cannot remove."), this;
};
var __extends = this && this.__extends || function(a, h) {
  function l() {
    this.constructor = a;
  }
  for (var b in h) {
    h.hasOwnProperty(b) && (a[b] = h[b]);
  }
  a.prototype = null === h ? Object.create(h) : (l.prototype = h.prototype, new l);
}, spine;
(function(a) {
  var h = function() {
    function a(a, b, c) {
      if (null == a) {
        throw Error("name cannot be null.");
      }
      if (null == b) {
        throw Error("timelines cannot be null.");
      }
      this.name = a;
      this.timelines = b;
      this.duration = c;
    }
    a.prototype.apply = function(a, b, c, g, k, h, l, v) {
      if (null == a) {
        throw Error("skeleton cannot be null.");
      }
      g && 0 != this.duration && (c %= this.duration, 0 < b && (b %= this.duration));
      g = this.timelines;
      for (var e = 0, f = g.length;e < f;e++) {
        g[e].apply(a, b, c, k, h, l, v);
      }
    };
    a.binarySearch = function(a, b, c) {
      void 0 === c && (c = 1);
      var e = 0, f = a.length / c - 2;
      if (0 == f) {
        return c;
      }
      for (var g = f >>> 1;;) {
        a[(g + 1) * c] <= b ? e = g + 1 : f = g;
        if (e == f) {
          return (e + 1) * c;
        }
        g = e + f >>> 1;
      }
    };
    a.linearSearch = function(a, b, c) {
      for (var e = 0, f = a.length - c;e <= f;e += c) {
        if (a[e] > b) {
          return e;
        }
      }
      return -1;
    };
    return a;
  }();
  a.Animation = h;
  (function(a) {
    a[a.rotate = 0] = "rotate";
    a[a.translate = 1] = "translate";
    a[a.scale = 2] = "scale";
    a[a.shear = 3] = "shear";
    a[a.attachment = 4] = "attachment";
    a[a.color = 5] = "color";
    a[a.deform = 6] = "deform";
    a[a.event = 7] = "event";
    a[a.drawOrder = 8] = "drawOrder";
    a[a.ikConstraint = 9] = "ikConstraint";
    a[a.transformConstraint = 10] = "transformConstraint";
    a[a.pathConstraintPosition = 11] = "pathConstraintPosition";
    a[a.pathConstraintSpacing = 12] = "pathConstraintSpacing";
    a[a.pathConstraintMix = 13] = "pathConstraintMix";
  })(a.TimelineType || (a.TimelineType = {}));
  var l = a.TimelineType, b = function() {
    function b(c) {
      if (0 >= c) {
        throw Error("frameCount must be > 0: " + c);
      }
      this.curves = a.Utils.newFloatArray((c - 1) * b.BEZIER_SIZE);
    }
    b.prototype.getFrameCount = function() {
      return this.curves.length / b.BEZIER_SIZE + 1;
    };
    b.prototype.setLinear = function(a) {
      this.curves[a * b.BEZIER_SIZE] = b.LINEAR;
    };
    b.prototype.setStepped = function(a) {
      this.curves[a * b.BEZIER_SIZE] = b.STEPPED;
    };
    b.prototype.getCurveType = function(a) {
      a *= b.BEZIER_SIZE;
      if (a == this.curves.length) {
        return b.LINEAR;
      }
      a = this.curves[a];
      return a == b.LINEAR ? b.LINEAR : a == b.STEPPED ? b.STEPPED : b.BEZIER;
    };
    b.prototype.setCurve = function(a, c, g, k, h) {
      var e = .03 * (2 * -c + k), f = .03 * (2 * -g + h);
      k = .006 * (3 * (c - k) + 1);
      h = .006 * (3 * (g - h) + 1);
      var q = 2 * e + k, l = 2 * f + h;
      c = .3 * c + e + .16666667 * k;
      g = .3 * g + f + .16666667 * h;
      a *= b.BEZIER_SIZE;
      f = this.curves;
      f[a++] = b.BEZIER;
      for (var e = c, r = g, m = a + b.BEZIER_SIZE - 1;a < m;a += 2) {
        f[a] = e, f[a + 1] = r, c += q, g += l, q += k, l += h, e += c, r += g;
      }
    };
    b.prototype.getCurvePercent = function(c, f) {
      f = a.MathUtils.clamp(f, 0, 1);
      var e = this.curves;
      c *= b.BEZIER_SIZE;
      var g = e[c];
      if (g == b.LINEAR) {
        return f;
      }
      if (g == b.STEPPED) {
        return 0;
      }
      c++;
      for (var g = 0, k = c, h = c + b.BEZIER_SIZE - 1;c < h;c += 2) {
        if (g = e[c], g >= f) {
          return c == k ? h = k = 0 : (k = e[c - 2], h = e[c - 1]), h + (e[c + 1] - h) * (f - k) / (g - k);
        }
      }
      e = e[c - 1];
      return e + (1 - e) * (f - g) / (1 - g);
    };
    b.LINEAR = 0;
    b.STEPPED = 1;
    b.BEZIER = 2;
    b.BEZIER_SIZE = 19;
    return b;
  }();
  a.CurveTimeline = b;
  var g = function(b) {
    function c(c) {
      b.call(this, c);
      this.frames = a.Utils.newFloatArray(c << 1);
    }
    __extends(c, b);
    c.prototype.getPropertyId = function() {
      return (l.rotate << 24) + this.boneIndex;
    };
    c.prototype.setFrame = function(a, b, e) {
      a <<= 1;
      this.frames[a] = b;
      this.frames[a + c.ROTATION] = e;
    };
    c.prototype.apply = function(a, b, e, g, k, l, v) {
      b = this.frames;
      a = a.bones[this.boneIndex];
      if (e < b[0]) {
        l && (a.rotation = a.data.rotation);
      } else {
        if (e >= b[b.length - c.ENTRIES]) {
          l ? a.rotation = a.data.rotation + b[b.length + c.PREV_ROTATION] * k : (l = a.data.rotation + b[b.length + c.PREV_ROTATION] - a.rotation, a.rotation += (l - 360 * (16384 - (16384.499999999996 - l / 360 | 0))) * k);
        } else {
          v = h.binarySearch(b, e, c.ENTRIES);
          g = b[v + c.PREV_ROTATION];
          var f = b[v];
          e = this.getCurvePercent((v >> 1) - 1, 1 - (e - f) / (b[v + c.PREV_TIME] - f));
          b = b[v + c.ROTATION] - g;
          b = g + (b - 360 * (16384 - (16384.499999999996 - b / 360 | 0))) * e;
          l ? a.rotation = a.data.rotation + (b - 360 * (16384 - (16384.499999999996 - b / 360 | 0))) * k : (b = a.data.rotation + b - a.rotation, a.rotation += (b - 360 * (16384 - (16384.499999999996 - b / 360 | 0))) * k);
        }
      }
    };
    c.ENTRIES = 2;
    c.PREV_TIME = -2;
    c.PREV_ROTATION = -1;
    c.ROTATION = 1;
    return c;
  }(b);
  a.RotateTimeline = g;
  g = function(b) {
    function c(e) {
      b.call(this, e);
      this.frames = a.Utils.newFloatArray(e * c.ENTRIES);
    }
    __extends(c, b);
    c.prototype.getPropertyId = function() {
      return (l.translate << 24) + this.boneIndex;
    };
    c.prototype.setFrame = function(a, b, e, g) {
      a *= c.ENTRIES;
      this.frames[a] = b;
      this.frames[a + c.X] = e;
      this.frames[a + c.Y] = g;
    };
    c.prototype.apply = function(a, b, e, g, k, l, v) {
      b = this.frames;
      a = a.bones[this.boneIndex];
      if (e < b[0]) {
        l && (a.x = a.data.x, a.y = a.data.y);
      } else {
        if (e >= b[b.length - c.ENTRIES]) {
          g = b[b.length + c.PREV_X], v = b[b.length + c.PREV_Y];
        } else {
          var f = h.binarySearch(b, e, c.ENTRIES);
          g = b[f + c.PREV_X];
          v = b[f + c.PREV_Y];
          var q = b[f];
          e = this.getCurvePercent(f / c.ENTRIES - 1, 1 - (e - q) / (b[f + c.PREV_TIME] - q));
          g += (b[f + c.X] - g) * e;
          v += (b[f + c.Y] - v) * e;
        }
        l ? (a.x = a.data.x + g * k, a.y = a.data.y + v * k) : (a.x += (a.data.x + g - a.x) * k, a.y += (a.data.y + v - a.y) * k);
      }
    };
    c.ENTRIES = 3;
    c.PREV_TIME = -3;
    c.PREV_X = -2;
    c.PREV_Y = -1;
    c.X = 1;
    c.Y = 2;
    return c;
  }(b);
  a.TranslateTimeline = g;
  var k = function(b) {
    function c(a) {
      b.call(this, a);
    }
    __extends(c, b);
    c.prototype.getPropertyId = function() {
      return (l.scale << 24) + this.boneIndex;
    };
    c.prototype.apply = function(b, e, g, k, p, l, v) {
      var f = this.frames;
      b = b.bones[this.boneIndex];
      if (g < f[0]) {
        l && (b.scaleX = b.data.scaleX, b.scaleY = b.data.scaleY);
      } else {
        if (g >= f[f.length - c.ENTRIES]) {
          e = f[f.length + c.PREV_X] * b.data.scaleX, k = f[f.length + c.PREV_Y] * b.data.scaleY;
        } else {
          var q = h.binarySearch(f, g, c.ENTRIES);
          e = f[q + c.PREV_X];
          k = f[q + c.PREV_Y];
          var m = f[q];
          g = this.getCurvePercent(q / c.ENTRIES - 1, 1 - (g - m) / (f[q + c.PREV_TIME] - m));
          e = (e + (f[q + c.X] - e) * g) * b.data.scaleX;
          k = (k + (f[q + c.Y] - k) * g) * b.data.scaleY;
        }
        1 == p ? (b.scaleX = e, b.scaleY = k) : (l ? (l = b.data.scaleX, g = b.data.scaleY) : (l = b.scaleX, g = b.scaleY), v ? (e = Math.abs(e) * a.MathUtils.signum(l), k = Math.abs(k) * a.MathUtils.signum(g)) : (l = Math.abs(l) * a.MathUtils.signum(e), g = Math.abs(g) * a.MathUtils.signum(k)), b.scaleX = l + (e - l) * p, b.scaleY = g + (k - g) * p);
      }
    };
    return c;
  }(g);
  a.ScaleTimeline = k;
  g = function(a) {
    function b(b) {
      a.call(this, b);
    }
    __extends(b, a);
    b.prototype.getPropertyId = function() {
      return (l.shear << 24) + this.boneIndex;
    };
    b.prototype.apply = function(a, c, e, g, k, l, v) {
      c = this.frames;
      a = a.bones[this.boneIndex];
      if (e < c[0]) {
        l && (a.shearX = a.data.shearX, a.shearY = a.data.shearY);
      } else {
        if (e >= c[c.length - b.ENTRIES]) {
          g = c[c.length + b.PREV_X], v = c[c.length + b.PREV_Y];
        } else {
          var f = h.binarySearch(c, e, b.ENTRIES);
          g = c[f + b.PREV_X];
          v = c[f + b.PREV_Y];
          var q = c[f];
          e = this.getCurvePercent(f / b.ENTRIES - 1, 1 - (e - q) / (c[f + b.PREV_TIME] - q));
          g += (c[f + b.X] - g) * e;
          v += (c[f + b.Y] - v) * e;
        }
        l ? (a.shearX = a.data.shearX + g * k, a.shearY = a.data.shearY + v * k) : (a.shearX += (a.data.shearX + g - a.shearX) * k, a.shearY += (a.data.shearY + v - a.shearY) * k);
      }
    };
    return b;
  }(g);
  a.ShearTimeline = g;
  g = function(b) {
    function c(e) {
      b.call(this, e);
      this.frames = a.Utils.newFloatArray(e * c.ENTRIES);
    }
    __extends(c, b);
    c.prototype.getPropertyId = function() {
      return (l.color << 24) + this.slotIndex;
    };
    c.prototype.setFrame = function(a, b, e, g, k, h) {
      a *= c.ENTRIES;
      this.frames[a] = b;
      this.frames[a + c.R] = e;
      this.frames[a + c.G] = g;
      this.frames[a + c.B] = k;
      this.frames[a + c.A] = h;
    };
    c.prototype.apply = function(a, b, e, g, k, l, v) {
      a = a.slots[this.slotIndex];
      var f = this.frames;
      if (e < f[0]) {
        l && a.color.setFromColor(a.data.color);
      } else {
        var q;
        if (e >= f[f.length - c.ENTRIES]) {
          e = f.length, b = f[e + c.PREV_R], g = f[e + c.PREV_G], v = f[e + c.PREV_B], q = f[e + c.PREV_A];
        } else {
          var m = h.binarySearch(f, e, c.ENTRIES);
          b = f[m + c.PREV_R];
          g = f[m + c.PREV_G];
          v = f[m + c.PREV_B];
          q = f[m + c.PREV_A];
          var p = f[m];
          e = this.getCurvePercent(m / c.ENTRIES - 1, 1 - (e - p) / (f[m + c.PREV_TIME] - p));
          b += (f[m + c.R] - b) * e;
          g += (f[m + c.G] - g) * e;
          v += (f[m + c.B] - v) * e;
          q += (f[m + c.A] - q) * e;
        }
        1 == k ? a.color.set(b, g, v, q) : (e = a.color, l && e.setFromColor(a.data.color), e.add((b - e.r) * k, (g - e.g) * k, (v - e.b) * k, (q - e.a) * k));
      }
    };
    c.ENTRIES = 5;
    c.PREV_TIME = -5;
    c.PREV_R = -4;
    c.PREV_G = -3;
    c.PREV_B = -2;
    c.PREV_A = -1;
    c.R = 1;
    c.G = 2;
    c.B = 3;
    c.A = 4;
    return c;
  }(b);
  a.ColorTimeline = g;
  g = function() {
    function b(b) {
      this.frames = a.Utils.newFloatArray(b);
      this.attachmentNames = Array(b);
    }
    b.prototype.getPropertyId = function() {
      return (l.attachment << 24) + this.slotIndex;
    };
    b.prototype.getFrameCount = function() {
      return this.frames.length;
    };
    b.prototype.setFrame = function(a, b, c) {
      this.frames[a] = b;
      this.attachmentNames[a] = c;
    };
    b.prototype.apply = function(a, b, c, g, k, p, l) {
      b = a.slots[this.slotIndex];
      l && p ? (c = b.data.attachmentName, b.setAttachment(null == c ? null : a.getAttachment(this.slotIndex, c))) : (l = this.frames, c < l[0] ? p && (c = b.data.attachmentName, b.setAttachment(null == c ? null : a.getAttachment(this.slotIndex, c))) : (c = c >= l[l.length - 1] ? l.length - 1 : h.binarySearch(l, c, 1) - 1, c = this.attachmentNames[c], a.slots[this.slotIndex].setAttachment(null == c ? null : a.getAttachment(this.slotIndex, c))));
    };
    return b;
  }();
  a.AttachmentTimeline = g;
  g = function(b) {
    function c(c) {
      b.call(this, c);
      this.frames = a.Utils.newFloatArray(c);
      this.frameVertices = Array(c);
    }
    __extends(c, b);
    c.prototype.getPropertyId = function() {
      return (l.deform << 24) + this.slotIndex;
    };
    c.prototype.setFrame = function(a, b, c) {
      this.frames[a] = b;
      this.frameVertices[a] = c;
    };
    c.prototype.apply = function(b, c, e, g, k, l, v) {
      b = b.slots[this.slotIndex];
      var f = b.getAttachment();
      if (f instanceof a.VertexAttachment && f.applyDeform(this.attachment)) {
        var q = this.frames;
        c = b.attachmentVertices;
        if (e < q[0]) {
          l && a.Utils.setArraySize(c, 0);
        } else {
          if (v = this.frameVertices, b = v[0].length, c.length != b && (k = 1), c = a.Utils.setArraySize(c, b), e >= q[q.length - 1]) {
            if (e = v[q.length - 1], 1 == k) {
              a.Utils.arrayCopy(e, 0, c, 0, b);
            } else {
              if (l) {
                if (l = f, null == l.bones) {
                  for (l = l.vertices, f = 0;f < b;f++) {
                    q = l[f], c[f] = q + (e[f] - q) * k;
                  }
                } else {
                  for (f = 0;f < b;f++) {
                    c[f] = e[f] * k;
                  }
                }
              } else {
                for (f = 0;f < b;f++) {
                  c[f] += (e[f] - c[f]) * k;
                }
              }
            }
          } else {
            var m = h.binarySearch(q, e);
            g = v[m - 1];
            v = v[m];
            var p = q[m];
            e = this.getCurvePercent(m - 1, 1 - (e - p) / (q[m - 1] - p));
            if (1 == k) {
              for (f = 0;f < b;f++) {
                m = g[f], c[f] = m + (v[f] - m) * e;
              }
            } else {
              if (l) {
                if (l = f, null == l.bones) {
                  for (l = l.vertices, f = 0;f < b;f++) {
                    m = g[f], q = l[f], c[f] = q + (m + (v[f] - m) * e - q) * k;
                  }
                } else {
                  for (f = 0;f < b;f++) {
                    m = g[f], c[f] = (m + (v[f] - m) * e) * k;
                  }
                }
              } else {
                for (f = 0;f < b;f++) {
                  m = g[f], c[f] += (m + (v[f] - m) * e - c[f]) * k;
                }
              }
            }
          }
        }
      }
    };
    return c;
  }(b);
  a.DeformTimeline = g;
  g = function() {
    function b(b) {
      this.frames = a.Utils.newFloatArray(b);
      this.events = Array(b);
    }
    b.prototype.getPropertyId = function() {
      return l.event << 24;
    };
    b.prototype.getFrameCount = function() {
      return this.frames.length;
    };
    b.prototype.setFrame = function(a, b) {
      this.frames[a] = b.time;
      this.events[a] = b;
    };
    b.prototype.apply = function(a, b, c, g, k, l, u) {
      if (null != g) {
        var e = this.frames, f = this.frames.length;
        if (b > c) {
          this.apply(a, b, Number.MAX_VALUE, g, k, l, u), b = -1;
        } else {
          if (b >= e[f - 1]) {
            return;
          }
        }
        if (!(c < e[0])) {
          if (b < e[0]) {
            a = 0;
          } else {
            for (a = h.binarySearch(e, b), b = e[a];0 < a && e[a - 1] == b;) {
              a--;
            }
          }
          for (;a < f && c >= e[a];a++) {
            g.push(this.events[a]);
          }
        }
      }
    };
    return b;
  }();
  a.EventTimeline = g;
  g = function() {
    function b(b) {
      this.frames = a.Utils.newFloatArray(b);
      this.drawOrders = Array(b);
    }
    b.prototype.getPropertyId = function() {
      return l.drawOrder << 24;
    };
    b.prototype.getFrameCount = function() {
      return this.frames.length;
    };
    b.prototype.setFrame = function(a, b, c) {
      this.frames[a] = b;
      this.drawOrders[a] = c;
    };
    b.prototype.apply = function(b, c, g, k, l, p, u) {
      c = b.drawOrder;
      k = b.slots;
      if (u && p) {
        a.Utils.arrayCopy(b.slots, 0, b.drawOrder, 0, b.slots.length);
      } else {
        if (u = this.frames, g < u[0]) {
          p && a.Utils.arrayCopy(b.slots, 0, b.drawOrder, 0, b.slots.length);
        } else {
          if (b = g >= u[u.length - 1] ? u.length - 1 : h.binarySearch(u, g) - 1, b = this.drawOrders[b], null == b) {
            a.Utils.arrayCopy(k, 0, c, 0, k.length);
          } else {
            for (g = 0, p = b.length;g < p;g++) {
              c[g] = k[b[g]];
            }
          }
        }
      }
    };
    return b;
  }();
  a.DrawOrderTimeline = g;
  g = function(b) {
    function c(e) {
      b.call(this, e);
      this.frames = a.Utils.newFloatArray(e * c.ENTRIES);
    }
    __extends(c, b);
    c.prototype.getPropertyId = function() {
      return (l.ikConstraint << 24) + this.ikConstraintIndex;
    };
    c.prototype.setFrame = function(a, b, e, g) {
      a *= c.ENTRIES;
      this.frames[a] = b;
      this.frames[a + c.MIX] = e;
      this.frames[a + c.BEND_DIRECTION] = g;
    };
    c.prototype.apply = function(a, b, e, g, k, l, v) {
      b = this.frames;
      a = a.ikConstraints[this.ikConstraintIndex];
      if (e < b[0]) {
        l && (a.mix = a.data.mix, a.bendDirection = a.data.bendDirection);
      } else {
        if (e >= b[b.length - c.ENTRIES]) {
          l ? (a.mix = a.data.mix + (b[b.length + c.PREV_MIX] - a.data.mix) * k, a.bendDirection = v ? a.data.bendDirection : b[b.length + c.PREV_BEND_DIRECTION]) : (a.mix += (b[b.length + c.PREV_MIX] - a.mix) * k, v || (a.bendDirection = b[b.length + c.PREV_BEND_DIRECTION]));
        } else {
          g = h.binarySearch(b, e, c.ENTRIES);
          var f = b[g + c.PREV_MIX], q = b[g];
          e = this.getCurvePercent(g / c.ENTRIES - 1, 1 - (e - q) / (b[g + c.PREV_TIME] - q));
          l ? (a.mix = a.data.mix + (f + (b[g + c.MIX] - f) * e - a.data.mix) * k, a.bendDirection = v ? a.data.bendDirection : b[g + c.PREV_BEND_DIRECTION]) : (a.mix += (f + (b[g + c.MIX] - f) * e - a.mix) * k, v || (a.bendDirection = b[g + c.PREV_BEND_DIRECTION]));
        }
      }
    };
    c.ENTRIES = 3;
    c.PREV_TIME = -3;
    c.PREV_MIX = -2;
    c.PREV_BEND_DIRECTION = -1;
    c.MIX = 1;
    c.BEND_DIRECTION = 2;
    return c;
  }(b);
  a.IkConstraintTimeline = g;
  g = function(b) {
    function c(e) {
      b.call(this, e);
      this.frames = a.Utils.newFloatArray(e * c.ENTRIES);
    }
    __extends(c, b);
    c.prototype.getPropertyId = function() {
      return (l.transformConstraint << 24) + this.transformConstraintIndex;
    };
    c.prototype.setFrame = function(a, b, e, g, k, h) {
      a *= c.ENTRIES;
      this.frames[a] = b;
      this.frames[a + c.ROTATE] = e;
      this.frames[a + c.TRANSLATE] = g;
      this.frames[a + c.SCALE] = k;
      this.frames[a + c.SHEAR] = h;
    };
    c.prototype.apply = function(a, b, e, g, k, l, v) {
      b = this.frames;
      a = a.transformConstraints[this.transformConstraintIndex];
      if (e < b[0]) {
        l && (l = a.data, a.rotateMix = l.rotateMix, a.translateMix = l.rotateMix, a.scaleMix = l.scaleMix, a.shearMix = l.shearMix);
      } else {
        var f, q;
        if (e >= b[b.length - c.ENTRIES]) {
          e = b.length, g = b[e + c.PREV_ROTATE], v = b[e + c.PREV_TRANSLATE], f = b[e + c.PREV_SCALE], q = b[e + c.PREV_SHEAR];
        } else {
          var m = h.binarySearch(b, e, c.ENTRIES);
          g = b[m + c.PREV_ROTATE];
          v = b[m + c.PREV_TRANSLATE];
          f = b[m + c.PREV_SCALE];
          q = b[m + c.PREV_SHEAR];
          var p = b[m];
          e = this.getCurvePercent(m / c.ENTRIES - 1, 1 - (e - p) / (b[m + c.PREV_TIME] - p));
          g += (b[m + c.ROTATE] - g) * e;
          v += (b[m + c.TRANSLATE] - v) * e;
          f += (b[m + c.SCALE] - f) * e;
          q += (b[m + c.SHEAR] - q) * e;
        }
        l ? (l = a.data, a.rotateMix = l.rotateMix + (g - l.rotateMix) * k, a.translateMix = l.translateMix + (v - l.translateMix) * k, a.scaleMix = l.scaleMix + (f - l.scaleMix) * k, a.shearMix = l.shearMix + (q - l.shearMix) * k) : (a.rotateMix += (g - a.rotateMix) * k, a.translateMix += (v - a.translateMix) * k, a.scaleMix += (f - a.scaleMix) * k, a.shearMix += (q - a.shearMix) * k);
      }
    };
    c.ENTRIES = 5;
    c.PREV_TIME = -5;
    c.PREV_ROTATE = -4;
    c.PREV_TRANSLATE = -3;
    c.PREV_SCALE = -2;
    c.PREV_SHEAR = -1;
    c.ROTATE = 1;
    c.TRANSLATE = 2;
    c.SCALE = 3;
    c.SHEAR = 4;
    return c;
  }(b);
  a.TransformConstraintTimeline = g;
  g = function(b) {
    function c(e) {
      b.call(this, e);
      this.frames = a.Utils.newFloatArray(e * c.ENTRIES);
    }
    __extends(c, b);
    c.prototype.getPropertyId = function() {
      return (l.pathConstraintPosition << 24) + this.pathConstraintIndex;
    };
    c.prototype.setFrame = function(a, b, e) {
      a *= c.ENTRIES;
      this.frames[a] = b;
      this.frames[a + c.VALUE] = e;
    };
    c.prototype.apply = function(a, b, e, g, k, l, v) {
      b = this.frames;
      a = a.pathConstraints[this.pathConstraintIndex];
      if (e < b[0]) {
        l && (a.position = a.data.position);
      } else {
        if (e >= b[b.length - c.ENTRIES]) {
          g = b[b.length + c.PREV_VALUE];
        } else {
          v = h.binarySearch(b, e, c.ENTRIES);
          g = b[v + c.PREV_VALUE];
          var f = b[v];
          e = this.getCurvePercent(v / c.ENTRIES - 1, 1 - (e - f) / (b[v + c.PREV_TIME] - f));
          g += (b[v + c.VALUE] - g) * e;
        }
        a.position = l ? a.data.position + (g - a.data.position) * k : a.position + (g - a.position) * k;
      }
    };
    c.ENTRIES = 2;
    c.PREV_TIME = -2;
    c.PREV_VALUE = -1;
    c.VALUE = 1;
    return c;
  }(b);
  a.PathConstraintPositionTimeline = g;
  g = function(a) {
    function b(b) {
      a.call(this, b);
    }
    __extends(b, a);
    b.prototype.getPropertyId = function() {
      return (l.pathConstraintSpacing << 24) + this.pathConstraintIndex;
    };
    b.prototype.apply = function(a, c, e, g, k, l, v) {
      c = this.frames;
      a = a.pathConstraints[this.pathConstraintIndex];
      if (e < c[0]) {
        l && (a.spacing = a.data.spacing);
      } else {
        if (e >= c[c.length - b.ENTRIES]) {
          g = c[c.length + b.PREV_VALUE];
        } else {
          v = h.binarySearch(c, e, b.ENTRIES);
          g = c[v + b.PREV_VALUE];
          var f = c[v];
          e = this.getCurvePercent(v / b.ENTRIES - 1, 1 - (e - f) / (c[v + b.PREV_TIME] - f));
          g += (c[v + b.VALUE] - g) * e;
        }
        a.spacing = l ? a.data.spacing + (g - a.data.spacing) * k : a.spacing + (g - a.spacing) * k;
      }
    };
    return b;
  }(g);
  a.PathConstraintSpacingTimeline = g;
  b = function(b) {
    function c(e) {
      b.call(this, e);
      this.frames = a.Utils.newFloatArray(e * c.ENTRIES);
    }
    __extends(c, b);
    c.prototype.getPropertyId = function() {
      return (l.pathConstraintMix << 24) + this.pathConstraintIndex;
    };
    c.prototype.setFrame = function(a, b, e, g) {
      a *= c.ENTRIES;
      this.frames[a] = b;
      this.frames[a + c.ROTATE] = e;
      this.frames[a + c.TRANSLATE] = g;
    };
    c.prototype.apply = function(a, b, e, g, k, l, v) {
      b = this.frames;
      a = a.pathConstraints[this.pathConstraintIndex];
      if (e < b[0]) {
        l && (a.rotateMix = a.data.rotateMix, a.translateMix = a.data.translateMix);
      } else {
        if (e >= b[b.length - c.ENTRIES]) {
          g = b[b.length + c.PREV_ROTATE], v = b[b.length + c.PREV_TRANSLATE];
        } else {
          var f = h.binarySearch(b, e, c.ENTRIES);
          g = b[f + c.PREV_ROTATE];
          v = b[f + c.PREV_TRANSLATE];
          var q = b[f];
          e = this.getCurvePercent(f / c.ENTRIES - 1, 1 - (e - q) / (b[f + c.PREV_TIME] - q));
          g += (b[f + c.ROTATE] - g) * e;
          v += (b[f + c.TRANSLATE] - v) * e;
        }
        l ? (a.rotateMix = a.data.rotateMix + (g - a.data.rotateMix) * k, a.translateMix = a.data.translateMix + (v - a.data.translateMix) * k) : (a.rotateMix += (g - a.rotateMix) * k, a.translateMix += (v - a.translateMix) * k);
      }
    };
    c.ENTRIES = 3;
    c.PREV_TIME = -3;
    c.PREV_ROTATE = -2;
    c.PREV_TRANSLATE = -1;
    c.ROTATE = 1;
    c.TRANSLATE = 2;
    return c;
  }(b);
  a.PathConstraintMixTimeline = b;
})(spine || (spine = {}));
(function(a) {
  var h = function() {
    function g(c) {
      this.tracks = [];
      this.events = [];
      this.listeners = [];
      this.queue = new b(this);
      this.propertyIDs = new a.IntSet;
      this.animationsChanged = !1;
      this.timeScale = 1;
      this.trackEntryPool = new a.Pool(function() {
        return new l;
      });
      this.data = c;
    }
    g.prototype.update = function(a) {
      a *= this.timeScale;
      for (var b = this.tracks, c = 0, g = b.length;c < g;c++) {
        var k = b[c];
        if (null != k) {
          k.animationLast = k.nextAnimationLast;
          k.trackLast = k.nextTrackLast;
          var h = a * k.timeScale;
          if (0 < k.delay) {
            k.delay -= h;
            if (0 < k.delay) {
              continue;
            }
            h = -k.delay;
            k.delay = 0;
          }
          var l = k.next;
          if (null != l) {
            var u = k.trackLast - l.delay;
            if (0 <= u) {
              l.delay = 0;
              l.trackTime = u + a * l.timeScale;
              k.trackTime += h;
              for (this.setCurrent(c, l, !0);null != l.mixingFrom;) {
                l.mixTime += h, l = l.mixingFrom;
              }
              continue;
            }
          } else {
            if (k.trackLast >= k.trackEnd && null == k.mixingFrom) {
              b[c] = null;
              this.queue.end(k);
              this.disposeNext(k);
              continue;
            }
          }
          this.updateMixingFrom(k, a);
          k.trackTime += h;
        }
      }
      this.queue.drain();
    };
    g.prototype.updateMixingFrom = function(a, b) {
      var c = a.mixingFrom;
      null != c && (this.updateMixingFrom(c, b), a.mixTime >= a.mixDuration && null != c.mixingFrom && 0 < a.mixTime ? (a.mixingFrom = null, this.queue.end(c)) : (c.animationLast = c.nextAnimationLast, c.trackLast = c.nextTrackLast, c.trackTime += b * c.timeScale, a.mixTime += b * c.timeScale));
    };
    g.prototype.apply = function(b) {
      if (null == b) {
        throw Error("skeleton cannot be null.");
      }
      this.animationsChanged && this._animationsChanged();
      for (var c = this.events, f = this.tracks, g = 0, k = f.length;g < k;g++) {
        var h = f[g];
        if (!(null == h || 0 < h.delay)) {
          var l = h.alpha;
          null != h.mixingFrom ? l *= this.applyMixingFrom(h, b) : h.trackTime >= h.trackEnd && (l = 0);
          var u = h.animationLast, v = h.getAnimationTime(), y = h.animation.timelines.length, x = h.animation.timelines;
          if (1 == l) {
            for (var m = 0;m < y;m++) {
              x[m].apply(b, u, v, c, 1, !0, !1);
            }
          } else {
            var t = 0 == h.timelinesRotation.length;
            t && a.Utils.setArraySize(h.timelinesRotation, y << 1, null);
            for (var C = h.timelinesRotation, A = h.timelinesFirst, m = 0;m < y;m++) {
              var D = x[m];
              D instanceof a.RotateTimeline ? this.applyRotateTimeline(D, b, v, l, A[m], C, m << 1, t) : D.apply(b, u, v, c, l, A[m], !1);
            }
          }
          this.queueEvents(h, v);
          c.length = 0;
          h.nextAnimationLast = v;
          h.nextTrackLast = h.trackTime;
        }
      }
      this.queue.drain();
    };
    g.prototype.applyMixingFrom = function(b, e) {
      var c = b.mixingFrom;
      null != c.mixingFrom && this.applyMixingFrom(c, e);
      var g;
      0 == b.mixDuration ? g = 1 : (g = b.mixTime / b.mixDuration, 1 < g && (g = 1));
      var k = g < c.eventThreshold ? this.events : null, h = g < c.attachmentThreshold, l = g < c.drawOrderThreshold, u = c.animationLast, v = c.getAnimationTime(), y = c.animation.timelines.length, x = c.animation.timelines, m = c.timelinesFirst, t = c.alpha * b.mixAlpha * (1 - g), C = 0 == c.timelinesRotation.length;
      C && a.Utils.setArraySize(c.timelinesRotation, y << 1, null);
      for (var A = c.timelinesRotation, D = 0;D < y;D++) {
        var F = x[D], G = m[D];
        if (F instanceof a.RotateTimeline) {
          this.applyRotateTimeline(F, e, v, t, G, A, D << 1, C);
        } else {
          if (!G) {
            if (!h && F instanceof a.AttachmentTimeline) {
              continue;
            }
            if (!l && F instanceof a.DrawOrderTimeline) {
              continue;
            }
          }
          F.apply(e, u, v, k, t, G, !0);
        }
      }
      0 < b.mixDuration && this.queueEvents(c, v);
      this.events.length = 0;
      c.nextAnimationLast = v;
      c.nextTrackLast = c.trackTime;
      return g;
    };
    g.prototype.applyRotateTimeline = function(b, e, f, g, k, h, l, u) {
      u && (h[l] = 0);
      if (1 == g) {
        b.apply(e, 0, f, null, 1, k, !1);
      } else {
        var c = b.frames;
        e = e.bones[b.boneIndex];
        if (f < c[0]) {
          k && (e.rotation = e.data.rotation);
        } else {
          if (f >= c[c.length - a.RotateTimeline.ENTRIES]) {
            c = e.data.rotation + c[c.length + a.RotateTimeline.PREV_ROTATION];
          } else {
            var q = a.Animation.binarySearch(c, f, a.RotateTimeline.ENTRIES), p = c[q + a.RotateTimeline.PREV_ROTATION], m = c[q];
            b = b.getCurvePercent((q >> 1) - 1, 1 - (f - m) / (c[q + a.RotateTimeline.PREV_TIME] - m));
            c = c[q + a.RotateTimeline.ROTATION] - p;
            c = p + (c - 360 * (16384 - (16384.499999999996 - c / 360 | 0))) * b + e.data.rotation;
            c -= 360 * (16384 - (16384.499999999996 - c / 360 | 0));
          }
          k = k ? e.data.rotation : e.rotation;
          c -= k;
          0 == c ? f = h[l] : (c -= 360 * (16384 - (16384.499999999996 - c / 360 | 0)), u ? (u = 0, f = c) : (u = h[l], f = h[l + 1]), p = 0 < c, b = 0 <= u, a.MathUtils.signum(f) != a.MathUtils.signum(c) && 90 >= Math.abs(f) && (180 < Math.abs(u) && (u += 360 * a.MathUtils.signum(u)), b = p), f = c + u - u % 360, b != p && (f += 360 * a.MathUtils.signum(u)), h[l] = f);
          h[l + 1] = c;
          k += f * g;
          e.rotation = k - 360 * (16384 - (16384.499999999996 - k / 360 | 0));
        }
      }
    };
    g.prototype.queueEvents = function(a, b) {
      for (var c = a.animationStart, e = a.animationEnd, g = e - c, k = a.trackLast % g, h = this.events, l = 0, v = h.length;l < v;l++) {
        var y = h[l];
        if (y.time < k) {
          break;
        }
        y.time > e || this.queue.event(a, y);
      }
      for ((a.loop ? k > a.trackTime % g : b >= e && a.animationLast < e) && this.queue.complete(a);l < v;l++) {
        h[l].time < c || this.queue.event(a, h[l]);
      }
    };
    g.prototype.clearTracks = function() {
      var a = this.queue.drainDisabled;
      this.queue.drainDisabled = !0;
      for (var b = 0, f = this.tracks.length;b < f;b++) {
        this.clearTrack(b);
      }
      this.tracks.length = 0;
      this.queue.drainDisabled = a;
      this.queue.drain();
    };
    g.prototype.clearTrack = function(a) {
      if (!(a >= this.tracks.length) && (a = this.tracks[a], null != a)) {
        this.queue.end(a);
        this.disposeNext(a);
        for (var b = a;;) {
          var c = b.mixingFrom;
          if (null == c) {
            break;
          }
          this.queue.end(c);
          b.mixingFrom = null;
          b = c;
        }
        this.tracks[a.trackIndex] = null;
        this.queue.drain();
      }
    };
    g.prototype.setCurrent = function(a, b, f) {
      var c = this.expandToIndex(a);
      this.tracks[a] = b;
      null != c && (f && this.queue.interrupt(c), b.mixingFrom = c, b.mixTime = 0, c.timelinesRotation.length = 0, null != c.mixingFrom && 0 < c.mixDuration && (b.mixAlpha *= Math.min(c.mixTime / c.mixDuration, 1)));
      this.queue.start(b);
    };
    g.prototype.setAnimation = function(a, b, f) {
      var c = this.data.skeletonData.findAnimation(b);
      if (null == c) {
        throw Error("Animation not found: " + b);
      }
      return this.setAnimationWith(a, c, f);
    };
    g.prototype.setAnimationWith = function(a, b, f) {
      if (null == b) {
        throw Error("animation cannot be null.");
      }
      var c = !0, e = this.expandToIndex(a);
      null != e && (-1 == e.nextTrackLast ? (this.tracks[a] = e.mixingFrom, this.queue.interrupt(e), this.queue.end(e), this.disposeNext(e), e = e.mixingFrom, c = !1) : this.disposeNext(e));
      b = this.trackEntry(a, b, f, e);
      this.setCurrent(a, b, c);
      this.queue.drain();
      return b;
    };
    g.prototype.addAnimation = function(a, b, f, g) {
      var c = this.data.skeletonData.findAnimation(b);
      if (null == c) {
        throw Error("Animation not found: " + b);
      }
      return this.addAnimationWith(a, c, f, g);
    };
    g.prototype.addAnimationWith = function(a, b, f, g) {
      if (null == b) {
        throw Error("animation cannot be null.");
      }
      var c = this.expandToIndex(a);
      if (null != c) {
        for (;null != c.next;) {
          c = c.next;
        }
      }
      f = this.trackEntry(a, b, f, c);
      null == c ? (this.setCurrent(a, f, !0), this.queue.drain()) : (c.next = f, 0 >= g && (a = c.animationEnd - c.animationStart, g = 0 != a ? g + (a * (1 + (c.trackTime / a | 0)) - this.data.getMix(c.animation, b)) : 0));
      f.delay = g;
      return f;
    };
    g.prototype.setEmptyAnimation = function(a, b) {
      a = this.setAnimationWith(a, g.emptyAnimation, !1);
      a.mixDuration = b;
      a.trackEnd = b;
      return a;
    };
    g.prototype.addEmptyAnimation = function(a, b, f) {
      0 >= f && (f -= b);
      a = this.addAnimationWith(a, g.emptyAnimation, !1, f);
      a.mixDuration = b;
      a.trackEnd = b;
      return a;
    };
    g.prototype.setEmptyAnimations = function(a) {
      var b = this.queue.drainDisabled;
      this.queue.drainDisabled = !0;
      for (var c = 0, g = this.tracks.length;c < g;c++) {
        var k = this.tracks[c];
        null != k && this.setEmptyAnimation(k.trackIndex, a);
      }
      this.queue.drainDisabled = b;
      this.queue.drain();
    };
    g.prototype.expandToIndex = function(b) {
      if (b < this.tracks.length) {
        return this.tracks[b];
      }
      a.Utils.ensureArrayCapacity(this.tracks, b - this.tracks.length + 1, null);
      this.tracks.length = b + 1;
      return null;
    };
    g.prototype.trackEntry = function(a, b, f, g) {
      var c = this.trackEntryPool.obtain();
      c.trackIndex = a;
      c.animation = b;
      c.loop = f;
      c.eventThreshold = 0;
      c.attachmentThreshold = 0;
      c.drawOrderThreshold = 0;
      c.animationStart = 0;
      c.animationEnd = b.duration;
      c.animationLast = -1;
      c.nextAnimationLast = -1;
      c.delay = 0;
      c.trackTime = 0;
      c.trackLast = -1;
      c.nextTrackLast = -1;
      c.trackEnd = Number.MAX_VALUE;
      c.timeScale = 1;
      c.alpha = 1;
      c.mixAlpha = 1;
      c.mixTime = 0;
      c.mixDuration = null == g ? 0 : this.data.getMix(g.animation, b);
      return c;
    };
    g.prototype.disposeNext = function(a) {
      for (var b = a.next;null != b;) {
        this.queue.dispose(b), b = b.next;
      }
      a.next = null;
    };
    g.prototype._animationsChanged = function() {
      this.animationsChanged = !1;
      var a = 0, b = this.tracks.length;
      for (this.propertyIDs.clear();a < b;a++) {
        var f = this.tracks[a];
        if (null != f) {
          this.setTimelinesFirst(f);
          a++;
          break;
        }
      }
      for (;a < b;a++) {
        f = this.tracks[a], null != f && this.checkTimelinesFirst(f);
      }
    };
    g.prototype.setTimelinesFirst = function(b) {
      if (null != b.mixingFrom) {
        this.setTimelinesFirst(b.mixingFrom), this.checkTimelinesUsage(b, b.timelinesFirst);
      } else {
        var c = this.propertyIDs, f = b.animation.timelines, g = f.length;
        b = a.Utils.setArraySize(b.timelinesFirst, g, !1);
        for (var k = 0;k < g;k++) {
          c.add(f[k].getPropertyId()), b[k] = !0;
        }
      }
    };
    g.prototype.checkTimelinesFirst = function(a) {
      null != a.mixingFrom && this.checkTimelinesFirst(a.mixingFrom);
      this.checkTimelinesUsage(a, a.timelinesFirst);
    };
    g.prototype.checkTimelinesUsage = function(b, e) {
      var c = this.propertyIDs;
      b = b.animation.timelines;
      var g = b.length;
      e = a.Utils.setArraySize(e, g);
      for (var k = 0;k < g;k++) {
        e[k] = c.add(b[k].getPropertyId());
      }
    };
    g.prototype.getCurrent = function(a) {
      return a >= this.tracks.length ? null : this.tracks[a];
    };
    g.prototype.addListener = function(a) {
      if (null == a) {
        throw Error("listener cannot be null.");
      }
      this.listeners.push(a);
    };
    g.prototype.removeListener = function(a) {
      a = this.listeners.indexOf(a);
      0 <= a && this.listeners.splice(a, 1);
    };
    g.prototype.clearListeners = function() {
      this.listeners.length = 0;
    };
    g.prototype.clearListenerNotifications = function() {
      this.queue.clear();
    };
    g.emptyAnimation = new a.Animation("<empty>", [], 0);
    return g;
  }();
  a.AnimationState = h;
  var l = function() {
    function a() {
      this.timelinesFirst = [];
      this.timelinesRotation = [];
    }
    a.prototype.reset = function() {
      this.listener = this.animation = this.mixingFrom = this.next = null;
      this.timelinesFirst.length = 0;
      this.timelinesRotation.length = 0;
    };
    a.prototype.getAnimationTime = function() {
      if (this.loop) {
        var a = this.animationEnd - this.animationStart;
        return 0 == a ? this.animationStart : this.trackTime % a + this.animationStart;
      }
      return Math.min(this.trackTime + this.animationStart, this.animationEnd);
    };
    a.prototype.setAnimationLast = function(a) {
      this.nextAnimationLast = this.animationLast = a;
    };
    a.prototype.isComplete = function() {
      return this.trackTime >= this.animationEnd - this.animationStart;
    };
    a.prototype.resetRotationDirections = function() {
      this.timelinesRotation.length = 0;
    };
    return a;
  }();
  a.TrackEntry = l;
  var b = function() {
    function a(a) {
      this.objects = [];
      this.drainDisabled = !1;
      this.animState = a;
    }
    a.prototype.start = function(a) {
      this.objects.push(g.start);
      this.objects.push(a);
      this.animState.animationsChanged = !0;
    };
    a.prototype.interrupt = function(a) {
      this.objects.push(g.interrupt);
      this.objects.push(a);
    };
    a.prototype.end = function(a) {
      this.objects.push(g.end);
      this.objects.push(a);
      this.animState.animationsChanged = !0;
    };
    a.prototype.dispose = function(a) {
      this.objects.push(g.dispose);
      this.objects.push(a);
    };
    a.prototype.complete = function(a) {
      this.objects.push(g.complete);
      this.objects.push(a);
    };
    a.prototype.event = function(a, b) {
      this.objects.push(g.event);
      this.objects.push(a);
      this.objects.push(b);
    };
    a.prototype.drain = function() {
      if (!this.drainDisabled) {
        this.drainDisabled = !0;
        for (var a = this.objects, b = this.animState.listeners, f = 0;f < a.length;f += 2) {
          var k = a[f + 1];
          switch(a[f]) {
            case g.start:
              null != k.listener && k.listener.start && k.listener.start(k);
              for (var h = 0;h < b.length;h++) {
                b[h].start && b[h].start(k);
              }
              break;
            case g.interrupt:
              null != k.listener && k.listener.interrupt && k.listener.interrupt(k);
              for (h = 0;h < b.length;h++) {
                b[h].interrupt && b[h].interrupt(k);
              }
              break;
            case g.end:
              for (null != k.listener && k.listener.end && k.listener.end(k), h = 0;h < b.length;h++) {
                b[h].end && b[h].end(k);
              }
            case g.dispose:
              null != k.listener && k.listener.dispose && k.listener.dispose(k);
              for (h = 0;h < b.length;h++) {
                b[h].dispose && b[h].dispose(k);
              }
              this.animState.trackEntryPool.free(k);
              break;
            case g.complete:
              null != k.listener && k.listener.complete && k.listener.complete(k);
              for (h = 0;h < b.length;h++) {
                b[h].complete && b[h].complete(k);
              }
              break;
            case g.event:
              var l = a[f++ + 2];
              null != k.listener && k.listener.event && k.listener.event(k, l);
              for (h = 0;h < b.length;h++) {
                b[h].event && b[h].event(k, l);
              }
          }
        }
        this.clear();
        this.drainDisabled = !1;
      }
    };
    a.prototype.clear = function() {
      this.objects.length = 0;
    };
    return a;
  }();
  a.EventQueue = b;
  (function(a) {
    a[a.start = 0] = "start";
    a[a.interrupt = 1] = "interrupt";
    a[a.end = 2] = "end";
    a[a.dispose = 3] = "dispose";
    a[a.complete = 4] = "complete";
    a[a.event = 5] = "event";
  })(a.EventType || (a.EventType = {}));
  var g = a.EventType, h = function() {
    function a() {
    }
    a.prototype.start = function(a) {
    };
    a.prototype.interrupt = function(a) {
    };
    a.prototype.end = function(a) {
    };
    a.prototype.dispose = function(a) {
    };
    a.prototype.complete = function(a) {
    };
    a.prototype.event = function(a, b) {
    };
    return a;
  }();
  a.AnimationStateAdapter2 = h;
})(spine || (spine = {}));
(function(a) {
  var h = function() {
    function a(a) {
      this.animationToMixTime = {};
      this.defaultMix = 0;
      if (null == a) {
        throw Error("skeletonData cannot be null.");
      }
      this.skeletonData = a;
    }
    a.prototype.setMix = function(a, g, k) {
      var b = this.skeletonData.findAnimation(a);
      if (null == b) {
        throw Error("Animation not found: " + a);
      }
      a = this.skeletonData.findAnimation(g);
      if (null == a) {
        throw Error("Animation not found: " + g);
      }
      this.setMixWith(b, a, k);
    };
    a.prototype.setMixWith = function(a, g, k) {
      if (null == a) {
        throw Error("from cannot be null.");
      }
      if (null == g) {
        throw Error("to cannot be null.");
      }
      this.animationToMixTime[a.name + g.name] = k;
    };
    a.prototype.getMix = function(a, g) {
      a = this.animationToMixTime[a.name + g.name];
      return void 0 === a ? this.defaultMix : a;
    };
    return a;
  }();
  a.AnimationStateData = h;
})(spine || (spine = {}));
(function(a) {
  var h = function() {
    function a(a, g) {
      void 0 === g && (g = "");
      this.assets = {};
      this.errors = {};
      this.loaded = this.toLoad = 0;
      this.textureLoader = a;
      this.pathPrefix = g;
    }
    a.prototype.loadText = function(a, g, k) {
      var b = this;
      void 0 === g && (g = null);
      void 0 === k && (k = null);
      a = this.pathPrefix + a;
      this.toLoad++;
      var e = new XMLHttpRequest;
      e.onreadystatechange = function() {
        e.readyState == XMLHttpRequest.DONE && (200 <= e.status && 300 > e.status ? (b.assets[a] = e.responseText, g && g(a, e.responseText)) : (b.errors[a] = "Couldn't load text " + a + ": status " + e.status + ", " + e.responseText, k && k(a, "Couldn't load text " + a + ": status " + e.status + ", " + e.responseText)), b.toLoad--, b.loaded++);
      };
      e.open("GET", a, !0);
      e.send();
    };
    a.prototype.loadTexture = function(a, g, k) {
      var b = this;
      void 0 === g && (g = null);
      void 0 === k && (k = null);
      a = this.pathPrefix + a;
      this.toLoad++;
      var e = new Image;
      e.crossOrigin = "anonymous";
      e.src = a;
      e.onload = function(c) {
        c = b.textureLoader(e);
        b.assets[a] = c;
        b.toLoad--;
        b.loaded++;
        g && g(a, e);
      };
      e.onerror = function(c) {
        b.errors[a] = "Couldn't load image " + a;
        b.toLoad--;
        b.loaded++;
        k && k(a, "Couldn't load image " + a);
      };
    };
    a.prototype.get = function(a) {
      a = this.pathPrefix + a;
      return this.assets[a];
    };
    a.prototype.remove = function(a) {
      a = this.pathPrefix + a;
      var b = this.assets[a];
      b.dispose && b.dispose();
      this.assets[a] = null;
    };
    a.prototype.removeAll = function() {
      for (var a in this.assets) {
        var g = this.assets[a];
        g.dispose && g.dispose();
      }
      this.assets = {};
    };
    a.prototype.isLoadingComplete = function() {
      return 0 == this.toLoad;
    };
    a.prototype.getToLoad = function() {
      return this.toLoad;
    };
    a.prototype.getLoaded = function() {
      return this.loaded;
    };
    a.prototype.dispose = function() {
      this.removeAll();
    };
    a.prototype.hasErrors = function() {
      return 0 < Object.keys(this.errors).length;
    };
    a.prototype.getErrors = function() {
      return this.errors;
    };
    return a;
  }();
  a.AssetManager = h;
})(spine || (spine = {}));
(function(a) {
  var h = function() {
    function h(a) {
      this.atlas = a;
    }
    h.prototype.newRegionAttachment = function(b, g, k) {
      b = this.atlas.findRegion(k);
      if (null == b) {
        throw Error("Region not found in atlas: " + k + " (region attachment: " + g + ")");
      }
      b.renderObject = b;
      g = new a.RegionAttachment(g);
      g.setRegion(b);
      return g;
    };
    h.prototype.newMeshAttachment = function(b, g, k) {
      b = this.atlas.findRegion(k);
      if (null == b) {
        throw Error("Region not found in atlas: " + k + " (mesh attachment: " + g + ")");
      }
      b.renderObject = b;
      g = new a.MeshAttachment(g);
      g.region = b;
      return g;
    };
    h.prototype.newBoundingBoxAttachment = function(b, g) {
      return new a.BoundingBoxAttachment(g);
    };
    h.prototype.newPathAttachment = function(b, g) {
      return new a.PathAttachment(g);
    };
    return h;
  }();
  a.AtlasAttachmentLoader = h;
})(spine || (spine = {}));
(function(a) {
  var h = function() {
    return function(a) {
      if (null == a) {
        throw Error("name cannot be null.");
      }
      this.name = a;
    };
  }();
  a.Attachment = h;
  h = function(a) {
    function b(b) {
      a.call(this, b);
      this.worldVerticesLength = 0;
    }
    __extends(b, a);
    b.prototype.computeWorldVertices = function(a, b) {
      this.computeWorldVerticesWith(a, 0, this.worldVerticesLength, b, 0);
    };
    b.prototype.computeWorldVerticesWith = function(a, b, c, e, f) {
      c += f;
      var g = a.bone.skeleton, k = a.attachmentVertices, h = this.vertices, l = this.bones;
      if (null == l) {
        0 < k.length && (h = k);
        a = a.bone;
        var k = a.worldX, l = a.worldY, u = a.a, g = a.b, v = a.c;
        a = a.d;
        for (var y = b;f < c;y += 2, f += 2) {
          b = h[y];
          var x = h[y + 1];
          e[f] = b * u + x * g + k;
          e[f + 1] = b * v + x * a + l;
        }
      } else {
        for (x = a = u = 0;x < b;x += 2) {
          v = l[u], u += v + 1, a += v;
        }
        y = g.bones;
        if (0 == k.length) {
          for (g = 3 * a;f < c;f += 2) {
            for (var m = 0, t = 0, v = l[u++], v = v + u;u < v;u++, g += 3) {
              a = y[l[u]];
              b = h[g];
              var x = h[g + 1], C = h[g + 2], m = m + (b * a.a + x * a.b + a.worldX) * C, t = t + (b * a.c + x * a.d + a.worldY) * C;
            }
            e[f] = m;
            e[f + 1] = t;
          }
        } else {
          for (var g = 3 * a, A = a << 1;f < c;f += 2) {
            t = m = 0;
            v = l[u++];
            for (v += u;u < v;u++, g += 3, A += 2) {
              a = y[l[u]], b = h[g] + k[A], x = h[g + 1] + k[A + 1], C = h[g + 2], m += (b * a.a + x * a.b + a.worldX) * C, t += (b * a.c + x * a.d + a.worldY) * C;
            }
            e[f] = m;
            e[f + 1] = t;
          }
        }
      }
    };
    b.prototype.applyDeform = function(a) {
      return this == a;
    };
    return b;
  }(h);
  a.VertexAttachment = h;
})(spine || (spine = {}));
(function(a) {
  a = a.AttachmentType || (a.AttachmentType = {});
  a[a.Region = 0] = "Region";
  a[a.BoundingBox = 1] = "BoundingBox";
  a[a.Mesh = 2] = "Mesh";
  a[a.LinkedMesh = 3] = "LinkedMesh";
  a[a.Path = 4] = "Path";
})(spine || (spine = {}));
(function(a) {
  var h = function(h) {
    function b(b) {
      h.call(this, b);
      this.color = new a.Color(1, 1, 1, 1);
    }
    __extends(b, h);
    return b;
  }(a.VertexAttachment);
  a.BoundingBoxAttachment = h;
})(spine || (spine = {}));
(function(a) {
  var h = function(h) {
    function b(b) {
      h.call(this, b);
      this.color = new a.Color(1, 1, 1, 1);
      this.inheritDeform = !1;
      this.tempColor = new a.Color(0, 0, 0, 0);
    }
    __extends(b, h);
    b.prototype.updateUVs = function() {
      var b = this.regionUVs, k = b.length, c = 8 * (k >> 1);
      if (null == this.worldVertices || this.worldVertices.length != c) {
        this.worldVertices = a.Utils.newFloatArray(c);
      }
      var e, f, h;
      null == this.region ? (c = e = 0, f = h = 1) : (c = this.region.u, e = this.region.v, f = this.region.u2 - c, h = this.region.v2 - e);
      if (this.region.rotate) {
        for (var l = 0, w = 6;l < k;l += 2, w += 8) {
          this.worldVertices[w] = c + b[l + 1] * f, this.worldVertices[w + 1] = e + h - b[l] * h;
        }
      } else {
        for (l = 0, w = 6;l < k;l += 2, w += 8) {
          this.worldVertices[w] = c + b[l] * f, this.worldVertices[w + 1] = e + b[l + 1] * h;
        }
      }
    };
    b.prototype.updateWorldVertices = function(a, b) {
      var c = a.bone.skeleton, e = c.color, f = a.color, g = this.color, k = e.a * f.a * g.a;
      b = b ? k : 1;
      var h = this.tempColor;
      h.set(e.r * f.r * g.r * b, e.g * f.g * g.g * b, e.b * f.b * g.b * b, k);
      var l = a.attachmentVertices, e = this.vertices, f = this.worldVertices, u = this.bones;
      if (null == u) {
        u = e.length;
        0 < l.length && (e = l);
        a = a.bone;
        var l = a.worldX, v = a.worldY, y = a.a, c = a.b, x = a.c;
        a = a.d;
        for (k = g = 0;g < u;g += 2, k += 8) {
          b = e[g];
          var m = e[g + 1];
          f[k] = b * y + m * c + l;
          f[k + 1] = b * x + m * a + v;
          f[k + 2] = h.r;
          f[k + 3] = h.g;
          f[k + 4] = h.b;
          f[k + 5] = h.a;
        }
        return f;
      }
      v = c.bones;
      if (0 == l.length) {
        for (c = g = k = 0, y = u.length;g < y;k += 8) {
          for (var t = x = 0, C = u[g++] + g;g < C;g++, c += 3) {
            a = v[u[g]];
            b = e[c];
            var m = e[c + 1], A = e[c + 2], x = x + (b * a.a + m * a.b + a.worldX) * A, t = t + (b * a.c + m * a.d + a.worldY) * A;
          }
          f[k] = x;
          f[k + 1] = t;
          f[k + 2] = h.r;
          f[k + 3] = h.g;
          f[k + 4] = h.b;
          f[k + 5] = h.a;
        }
      } else {
        for (var D = c = g = k = 0, y = u.length;g < y;k += 8) {
          t = x = 0;
          for (C = u[g++] + g;g < C;g++, c += 3, D += 2) {
            a = v[u[g]], b = e[c] + l[D], m = e[c + 1] + l[D + 1], A = e[c + 2], x += (b * a.a + m * a.b + a.worldX) * A, t += (b * a.c + m * a.d + a.worldY) * A;
          }
          f[k] = x;
          f[k + 1] = t;
          f[k + 2] = h.r;
          f[k + 3] = h.g;
          f[k + 4] = h.b;
          f[k + 5] = h.a;
        }
      }
      return f;
    };
    b.prototype.applyDeform = function(a) {
      return this == a || this.inheritDeform && this.parentMesh == a;
    };
    b.prototype.getParentMesh = function() {
      return this.parentMesh;
    };
    b.prototype.setParentMesh = function(a) {
      this.parentMesh = a;
      null != a && (this.bones = a.bones, this.vertices = a.vertices, this.regionUVs = a.regionUVs, this.triangles = a.triangles, this.hullLength = a.hullLength, this.worldVerticesLength = a.worldVerticesLength);
    };
    return b;
  }(a.VertexAttachment);
  a.MeshAttachment = h;
})(spine || (spine = {}));
(function(a) {
  var h = function(h) {
    function b(b) {
      h.call(this, b);
      this.constantSpeed = this.closed = !1;
      this.color = new a.Color(1, 1, 1, 1);
    }
    __extends(b, h);
    return b;
  }(a.VertexAttachment);
  a.PathAttachment = h;
})(spine || (spine = {}));
(function(a) {
  var h = function(h) {
    function b(b) {
      h.call(this, b);
      this.y = this.x = 0;
      this.scaleY = this.scaleX = 1;
      this.height = this.width = this.rotation = 0;
      this.color = new a.Color(1, 1, 1, 1);
      this.offset = a.Utils.newFloatArray(8);
      this.vertices = a.Utils.newFloatArray(32);
      this.tempColor = new a.Color(1, 1, 1, 1);
    }
    __extends(b, h);
    b.prototype.setRegion = function(a) {
      var g = this.vertices;
      a.rotate ? (g[b.U2] = a.u, g[b.V2] = a.v2, g[b.U3] = a.u, g[b.V3] = a.v, g[b.U4] = a.u2, g[b.V4] = a.v, g[b.U1] = a.u2, g[b.V1] = a.v2) : (g[b.U1] = a.u, g[b.V1] = a.v2, g[b.U2] = a.u, g[b.V2] = a.v, g[b.U3] = a.u2, g[b.V3] = a.v, g[b.U4] = a.u2, g[b.V4] = a.v2);
      this.region = a;
    };
    b.prototype.updateOffset = function() {
      var a = this.width / this.region.originalWidth * this.scaleX, k = this.height / this.region.originalHeight * this.scaleY, c = -this.width / 2 * this.scaleX + this.region.offsetX * a, e = -this.height / 2 * this.scaleY + this.region.offsetY * k, f = c + this.region.width * a, a = e + this.region.height * k, k = this.rotation * Math.PI / 180, h = Math.cos(k), l = Math.sin(k), k = c * h + this.x, c = c * l, w = e * h + this.y, e = e * l, p = f * h + this.x, f = f * l, h = a * h + this.y, a = a * 
      l, l = this.offset;
      l[b.OX1] = k - e;
      l[b.OY1] = w + c;
      l[b.OX2] = k - a;
      l[b.OY2] = h + c;
      l[b.OX3] = p - a;
      l[b.OY3] = h + f;
      l[b.OX4] = p - e;
      l[b.OY4] = w + f;
    };
    b.prototype.updateWorldVertices = function(a, k) {
      var c = a.bone.skeleton.color, e = a.color, f = this.color, g = c.a * e.a * f.a;
      k = k ? g : 1;
      var h = this.tempColor;
      h.set(c.r * e.r * f.r * k, c.g * e.g * f.g * k, c.b * e.b * f.b * k, g);
      c = this.vertices;
      e = this.offset;
      a = a.bone;
      f = a.worldX;
      g = a.worldY;
      k = a.a;
      var l = a.b, p = a.c;
      a = a.d;
      var u, v;
      u = e[b.OX1];
      v = e[b.OY1];
      c[b.X1] = u * k + v * l + f;
      c[b.Y1] = u * p + v * a + g;
      c[b.C1R] = h.r;
      c[b.C1G] = h.g;
      c[b.C1B] = h.b;
      c[b.C1A] = h.a;
      u = e[b.OX2];
      v = e[b.OY2];
      c[b.X2] = u * k + v * l + f;
      c[b.Y2] = u * p + v * a + g;
      c[b.C2R] = h.r;
      c[b.C2G] = h.g;
      c[b.C2B] = h.b;
      c[b.C2A] = h.a;
      u = e[b.OX3];
      v = e[b.OY3];
      c[b.X3] = u * k + v * l + f;
      c[b.Y3] = u * p + v * a + g;
      c[b.C3R] = h.r;
      c[b.C3G] = h.g;
      c[b.C3B] = h.b;
      c[b.C3A] = h.a;
      u = e[b.OX4];
      v = e[b.OY4];
      c[b.X4] = u * k + v * l + f;
      c[b.Y4] = u * p + v * a + g;
      c[b.C4R] = h.r;
      c[b.C4G] = h.g;
      c[b.C4B] = h.b;
      c[b.C4A] = h.a;
      return c;
    };
    b.OX1 = 0;
    b.OY1 = 1;
    b.OX2 = 2;
    b.OY2 = 3;
    b.OX3 = 4;
    b.OY3 = 5;
    b.OX4 = 6;
    b.OY4 = 7;
    b.X1 = 0;
    b.Y1 = 1;
    b.C1R = 2;
    b.C1G = 3;
    b.C1B = 4;
    b.C1A = 5;
    b.U1 = 6;
    b.V1 = 7;
    b.X2 = 8;
    b.Y2 = 9;
    b.C2R = 10;
    b.C2G = 11;
    b.C2B = 12;
    b.C2A = 13;
    b.U2 = 14;
    b.V2 = 15;
    b.X3 = 16;
    b.Y3 = 17;
    b.C3R = 18;
    b.C3G = 19;
    b.C3B = 20;
    b.C3A = 21;
    b.U3 = 22;
    b.V3 = 23;
    b.X4 = 24;
    b.Y4 = 25;
    b.C4R = 26;
    b.C4G = 27;
    b.C4B = 28;
    b.C4A = 29;
    b.U4 = 30;
    b.V4 = 31;
    return b;
  }(a.Attachment);
  a.RegionAttachment = h;
})(spine || (spine = {}));
(function(a) {
  a = a.BlendMode || (a.BlendMode = {});
  a[a.Normal = 0] = "Normal";
  a[a.Additive = 1] = "Additive";
  a[a.Multiply = 2] = "Multiply";
  a[a.Screen = 3] = "Screen";
})(spine || (spine = {}));
(function(a) {
  var h = function() {
    function h(a, g, k) {
      this.children = [];
      this.ashearY = this.ashearX = this.ascaleY = this.ascaleX = this.arotation = this.ay = this.ax = this.shearY = this.shearX = this.scaleY = this.scaleX = this.rotation = this.y = this.x = 0;
      this.appliedValid = !1;
      this.worldY = this.d = this.c = this.worldX = this.b = this.a = 0;
      this.sorted = !1;
      if (null == a) {
        throw Error("data cannot be null.");
      }
      if (null == g) {
        throw Error("skeleton cannot be null.");
      }
      this.data = a;
      this.skeleton = g;
      this.parent = k;
      this.setToSetupPose();
    }
    h.prototype.update = function() {
      this.updateWorldTransformWith(this.x, this.y, this.rotation, this.scaleX, this.scaleY, this.shearX, this.shearY);
    };
    h.prototype.updateWorldTransform = function() {
      this.updateWorldTransformWith(this.x, this.y, this.rotation, this.scaleX, this.scaleY, this.shearX, this.shearY);
    };
    h.prototype.updateWorldTransformWith = function(b, g, k, c, e, f, h) {
      this.ax = b;
      this.ay = g;
      this.arotation = k;
      this.ascaleX = c;
      this.ascaleY = e;
      this.ashearX = f;
      this.ashearY = h;
      this.appliedValid = !0;
      var l = this.parent;
      if (null == l) {
        h = k + 90 + h;
        var l = a.MathUtils.cosDeg(k + f) * c, q = a.MathUtils.cosDeg(h) * e;
        c *= a.MathUtils.sinDeg(k + f);
        e *= a.MathUtils.sinDeg(h);
        var p = this.skeleton;
        p.flipX && (b = -b, l = -l, q = -q);
        p.flipY && (g = -g, c = -c, e = -e);
        this.a = l;
        this.b = q;
        this.c = c;
        this.d = e;
        this.worldX = b + p.x;
        this.worldY = g + p.y;
      } else {
        var p = l.a, u = l.b, v = l.c, y = l.d;
        this.worldX = p * b + u * g + l.worldX;
        this.worldY = v * b + y * g + l.worldY;
        switch(this.data.transformMode) {
          case a.TransformMode.Normal:
            h = k + 90 + h;
            l = a.MathUtils.cosDeg(k + f) * c;
            q = a.MathUtils.cosDeg(h) * e;
            c *= a.MathUtils.sinDeg(k + f);
            e *= a.MathUtils.sinDeg(h);
            this.a = p * l + u * c;
            this.b = p * q + u * e;
            this.c = v * l + y * c;
            this.d = v * q + y * e;
            return;
          case a.TransformMode.OnlyTranslation:
            h = k + 90 + h;
            this.a = a.MathUtils.cosDeg(k + f) * c;
            this.b = a.MathUtils.cosDeg(h) * e;
            this.c = a.MathUtils.sinDeg(k + f) * c;
            this.d = a.MathUtils.sinDeg(h) * e;
            break;
          case a.TransformMode.NoRotationOrReflection:
            l = p * p + v * v;
            1E-4 < l ? (l = Math.abs(p * y - u * v) / l, u = v * l, y = p * l, l = Math.atan2(v, p) * a.MathUtils.radDeg) : (v = p = 0, l = 90 - Math.atan2(y, u) * a.MathUtils.radDeg);
            f = k + f - l;
            h = k + h - l + 90;
            l = a.MathUtils.cosDeg(f) * c;
            q = a.MathUtils.cosDeg(h) * e;
            c *= a.MathUtils.sinDeg(f);
            e *= a.MathUtils.sinDeg(h);
            this.a = p * l - u * c;
            this.b = p * q - u * e;
            this.c = v * l + y * c;
            this.d = v * q + y * e;
            break;
          case a.TransformMode.NoScale:
          case a.TransformMode.NoScaleOrReflection:
            l = a.MathUtils.cosDeg(k);
            q = a.MathUtils.sinDeg(k);
            k = p * l + u * q;
            b = v * l + y * q;
            l = Math.sqrt(k * k + b * b);
            1E-5 < l && (l = 1 / l);
            k *= l;
            b *= l;
            l = Math.sqrt(k * k + b * b);
            q = Math.PI / 2 + Math.atan2(b, k);
            g = Math.cos(q) * l;
            var x = Math.sin(q) * l, l = a.MathUtils.cosDeg(f) * c, q = a.MathUtils.cosDeg(90 + h) * e;
            c *= a.MathUtils.sinDeg(f);
            e *= a.MathUtils.sinDeg(90 + h);
            this.a = k * l + g * c;
            this.b = k * q + g * e;
            this.c = b * l + x * c;
            this.d = b * q + x * e;
            if (this.data.transformMode != a.TransformMode.NoScaleOrReflection ? 0 > p * y - u * v : this.skeleton.flipX != this.skeleton.flipY) {
              this.b = -this.b, this.d = -this.d;
            }
            return;
        }
        this.skeleton.flipX && (this.a = -this.a, this.b = -this.b);
        this.skeleton.flipY && (this.c = -this.c, this.d = -this.d);
      }
    };
    h.prototype.setToSetupPose = function() {
      var a = this.data;
      this.x = a.x;
      this.y = a.y;
      this.rotation = a.rotation;
      this.scaleX = a.scaleX;
      this.scaleY = a.scaleY;
      this.shearX = a.shearX;
      this.shearY = a.shearY;
    };
    h.prototype.getWorldRotationX = function() {
      return Math.atan2(this.c, this.a) * a.MathUtils.radDeg;
    };
    h.prototype.getWorldRotationY = function() {
      return Math.atan2(this.d, this.b) * a.MathUtils.radDeg;
    };
    h.prototype.getWorldScaleX = function() {
      return Math.sqrt(this.a * this.a + this.c * this.c);
    };
    h.prototype.getWorldScaleY = function() {
      return Math.sqrt(this.b * this.b + this.d * this.d);
    };
    h.prototype.worldToLocalRotationX = function() {
      var b = this.parent;
      if (null == b) {
        return this.arotation;
      }
      var g = this.a, k = this.c;
      return Math.atan2(b.a * k - b.c * g, b.d * g - b.b * k) * a.MathUtils.radDeg;
    };
    h.prototype.worldToLocalRotationY = function() {
      var b = this.parent;
      if (null == b) {
        return this.arotation;
      }
      var g = this.b, k = this.d;
      return Math.atan2(b.a * k - b.c * g, b.d * g - b.b * k) * a.MathUtils.radDeg;
    };
    h.prototype.rotateWorld = function(b) {
      var g = this.a, k = this.b, c = this.c, e = this.d, f = a.MathUtils.cosDeg(b);
      b = a.MathUtils.sinDeg(b);
      this.a = f * g - b * c;
      this.b = f * k - b * e;
      this.c = b * g + f * c;
      this.d = b * k + f * e;
      this.appliedValid = !1;
    };
    h.prototype.updateAppliedTransform = function() {
      this.appliedValid = !0;
      var b = this.parent;
      if (null == b) {
        this.ax = this.worldX, this.ay = this.worldY, this.arotation = Math.atan2(this.c, this.a) * a.MathUtils.radDeg, this.ascaleX = Math.sqrt(this.a * this.a + this.c * this.c), this.ascaleY = Math.sqrt(this.b * this.b + this.d * this.d), this.ashearX = 0, this.ashearY = Math.atan2(this.a * this.b + this.c * this.d, this.a * this.d - this.b * this.c) * a.MathUtils.radDeg;
      } else {
        var g = b.a, k = b.b, c = b.c, e = b.d, f = 1 / (g * e - k * c), h = this.worldX - b.worldX, b = this.worldY - b.worldY;
        this.ax = h * e * f - b * k * f;
        this.ay = b * g * f - h * c * f;
        e *= f;
        g *= f;
        k *= f;
        f *= c;
        c = e * this.a - k * this.c;
        k = e * this.b - k * this.d;
        e = g * this.c - f * this.a;
        f = g * this.d - f * this.b;
        this.ashearX = 0;
        this.ascaleX = Math.sqrt(c * c + e * e);
        1E-4 < this.ascaleX ? (g = c * f - k * e, this.ascaleY = g / this.ascaleX, this.ashearY = Math.atan2(c * k + e * f, g) * a.MathUtils.radDeg, this.arotation = Math.atan2(e, c) * a.MathUtils.radDeg) : (this.ascaleX = 0, this.ascaleY = Math.sqrt(k * k + f * f), this.ashearY = 0, this.arotation = 90 - Math.atan2(f, k) * a.MathUtils.radDeg);
      }
    };
    h.prototype.worldToLocal = function(a) {
      var b = this.a, k = this.b, c = this.c, e = this.d, f = 1 / (b * e - k * c), h = a.x - this.worldX, l = a.y - this.worldY;
      a.x = h * e * f - l * k * f;
      a.y = l * b * f - h * c * f;
      return a;
    };
    h.prototype.localToWorld = function(a) {
      var b = a.x, k = a.y;
      a.x = b * this.a + k * this.b + this.worldX;
      a.y = b * this.c + k * this.d + this.worldY;
      return a;
    };
    return h;
  }();
  a.Bone = h;
})(spine || (spine = {}));
(function(a) {
  var h = function() {
    return function(a, g, k) {
      this.rotation = this.y = this.x = 0;
      this.scaleY = this.scaleX = 1;
      this.shearY = this.shearX = 0;
      this.transformMode = l.Normal;
      if (0 > a) {
        throw Error("index must be >= 0.");
      }
      if (null == g) {
        throw Error("name cannot be null.");
      }
      this.index = a;
      this.name = g;
      this.parent = k;
    };
  }();
  a.BoneData = h;
  (function(a) {
    a[a.Normal = 0] = "Normal";
    a[a.OnlyTranslation = 1] = "OnlyTranslation";
    a[a.NoRotationOrReflection = 2] = "NoRotationOrReflection";
    a[a.NoScale = 3] = "NoScale";
    a[a.NoScaleOrReflection = 4] = "NoScaleOrReflection";
  })(a.TransformMode || (a.TransformMode = {}));
  var l = a.TransformMode;
})(spine || (spine = {}));
(function(a) {
  var h = function() {
    return function(a, b) {
      if (null == b) {
        throw Error("data cannot be null.");
      }
      this.time = a;
      this.data = b;
    };
  }();
  a.Event = h;
})(spine || (spine = {}));
(function(a) {
  var h = function() {
    return function(a) {
      this.name = a;
    };
  }();
  a.EventData = h;
})(spine || (spine = {}));
(function(a) {
  var h = function() {
    function h(a, g) {
      this.mix = 1;
      this.bendDirection = 0;
      if (null == a) {
        throw Error("data cannot be null.");
      }
      if (null == g) {
        throw Error("skeleton cannot be null.");
      }
      this.data = a;
      this.mix = a.mix;
      this.bendDirection = a.bendDirection;
      this.bones = [];
      for (var b = 0;b < a.bones.length;b++) {
        this.bones.push(g.findBone(a.bones[b].name));
      }
      this.target = g.findBone(a.target.name);
    }
    h.prototype.getOrder = function() {
      return this.data.order;
    };
    h.prototype.apply = function() {
      this.update();
    };
    h.prototype.update = function() {
      var a = this.target, g = this.bones;
      switch(g.length) {
        case 1:
          this.apply1(g[0], a.worldX, a.worldY, this.mix);
          break;
        case 2:
          this.apply2(g[0], g[1], a.worldX, a.worldY, this.bendDirection, this.mix);
      }
    };
    h.prototype.apply1 = function(b, g, k, c) {
      b.appliedValid || b.updateAppliedTransform();
      var e = b.parent, f = 1 / (e.a * e.d - e.b * e.c);
      g -= e.worldX;
      k -= e.worldY;
      e = Math.atan2((k * e.a - g * e.c) * f - b.ay, (g * e.d - k * e.b) * f - b.ax) * a.MathUtils.radDeg - b.ashearX - b.arotation;
      0 > b.ascaleX && (e += 180);
      180 < e ? e -= 360 : -180 > e && (e += 360);
      b.updateWorldTransformWith(b.ax, b.ay, b.arotation + e * c, b.ascaleX, b.ascaleY, b.ashearX, b.ashearY);
    };
    h.prototype.apply2 = function(b, g, k, c, e, f) {
      if (0 == f) {
        g.updateWorldTransform();
      } else {
        b.appliedValid || b.updateAppliedTransform();
        g.appliedValid || g.updateAppliedTransform();
        var h = b.ax, l = b.ay, w = b.ascaleX, p = b.ascaleY, u = g.ascaleX, v, y, x;
        0 > w ? (w = -w, v = 180, x = -1) : (v = 0, x = 1);
        0 > p && (p = -p, x = -x);
        0 > u ? (u = -u, y = 180) : y = 0;
        var m = g.ax, t, C, A, D = b.a, F = b.b, G = b.c, B = b.d, K = 1E-4 >= Math.abs(w - p);
        K ? (t = g.ay, C = D * m + F * t + b.worldX, A = G * m + B * t + b.worldY) : (t = 0, C = D * m + b.worldX, A = G * m + b.worldY);
        var H = b.parent, D = H.a, F = H.b, G = H.c, B = H.d, M = 1 / (D * B - F * G);
        k -= H.worldX;
        c -= H.worldY;
        var J = (k * B - c * F) * M - h, P = (c * D - k * G) * M - l;
        k = C - H.worldX;
        c = A - H.worldY;
        F = (k * B - c * F) * M - h;
        D = (c * D - k * G) * M - l;
        M = Math.sqrt(F * F + D * D);
        F = g.data.length * u;
        if (K) {
          F *= w, D = (J * J + P * P - M * M - F * F) / (2 * M * F), -1 > D ? D = -1 : 1 < D && (D = 1), e *= Math.acos(D), D = M + F * D, F *= Math.sin(e), D = Math.atan2(P * D - J * F, J * D + P * F);
        } else {
          if (D = w * F, F *= p, c = D * D, u = F * F, K = J * J + P * P, J = Math.atan2(P, J), G = u * M * M + c * K - c * u, k = -2 * u * M, P = u - c, B = k * k - 4 * P * G, 0 <= B && (B = Math.sqrt(B), 0 > k && (B = -B), B = -(k + B) / 2, k = B / P, B = G / B, B = Math.abs(k) < Math.abs(B) ? k : B, B * B <= K)) {
            c = Math.sqrt(K - B * B) * e, D = J - Math.atan2(c, B), e = Math.atan2(c / p, (B - M) / w);
          } else {
            var w = 0, G = Number.MAX_VALUE, O = H = A = p = C = P = 0;
            k = M + D;
            B = k * k;
            B > A && (p = 0, A = B, H = k);
            k = M - D;
            B = k * k;
            B < G && (w = a.MathUtils.PI, G = B, P = k);
            u = Math.acos(-D * M / (c - u));
            k = D * Math.cos(u) + M;
            c = F * Math.sin(u);
            B = k * k + c * c;
            B < G && (w = u, G = B, P = k, C = c);
            B > A && (p = u, A = B, H = k, O = c);
            K <= (G + A) / 2 ? (D = J - Math.atan2(C * e, P), e *= w) : (D = J - Math.atan2(O * e, H), e *= p);
          }
        }
        F = Math.atan2(t, m) * x;
        M = b.arotation;
        D = (D - F) * a.MathUtils.radDeg + v - M;
        180 < D ? D -= 360 : -180 > D && (D += 360);
        b.updateWorldTransformWith(h, l, M + D * f, b.ascaleX, b.ascaleY, 0, 0);
        M = g.arotation;
        e = ((e + F) * a.MathUtils.radDeg - g.ashearX) * x + y - M;
        180 < e ? e -= 360 : -180 > e && (e += 360);
        g.updateWorldTransformWith(m, t, M + e * f, g.ascaleX, g.ascaleY, g.ashearX, g.ashearY);
      }
    };
    return h;
  }();
  a.IkConstraint = h;
})(spine || (spine = {}));
(function(a) {
  var h = function() {
    return function(a) {
      this.order = 0;
      this.bones = [];
      this.mix = this.bendDirection = 1;
      this.name = a;
    };
  }();
  a.IkConstraintData = h;
})(spine || (spine = {}));
(function(a) {
  var h = function() {
    function h(a, g) {
      this.translateMix = this.rotateMix = this.spacing = this.position = 0;
      this.spaces = [];
      this.positions = [];
      this.world = [];
      this.curves = [];
      this.lengths = [];
      this.segments = [];
      if (null == a) {
        throw Error("data cannot be null.");
      }
      if (null == g) {
        throw Error("skeleton cannot be null.");
      }
      this.data = a;
      this.bones = [];
      for (var b = 0, c = a.bones.length;b < c;b++) {
        this.bones.push(g.findBone(a.bones[b].name));
      }
      this.target = g.findSlot(a.target.name);
      this.position = a.position;
      this.spacing = a.spacing;
      this.rotateMix = a.rotateMix;
      this.translateMix = a.translateMix;
    }
    h.prototype.apply = function() {
      this.update();
    };
    h.prototype.update = function() {
      var b = this.target.getAttachment();
      if (b instanceof a.PathAttachment) {
        var g = this.rotateMix, k = this.translateMix, c = 0 < g;
        if (0 < k || c) {
          var e = this.data, f = e.spacingMode, h = f == a.SpacingMode.Length, l = e.rotateMode, w = l == a.RotateMode.Tangent, p = l == a.RotateMode.ChainScale, u = this.bones.length, v = w ? u : u + 1, y = this.bones, x = a.Utils.setArraySize(this.spaces, v), m = null, t = this.spacing;
          if (p || h) {
            p && (m = a.Utils.setArraySize(this.lengths, u));
            for (var C = 0, A = v - 1;C < A;) {
              var D = y[C], F = D.data.length, G = F * D.a, F = F * D.c, F = Math.sqrt(G * G + F * F);
              p && (m[C] = F);
              x[++C] = h ? Math.max(0, F + t) : t;
            }
          } else {
            for (C = 1;C < v;C++) {
              x[C] = t;
            }
          }
          b = this.computeWorldPositions(b, v, w, e.positionMode == a.PositionMode.Percent, f == a.SpacingMode.Percent);
          f = b[0];
          h = b[1];
          e = e.offsetRotation;
          0 == e ? l = l == a.RotateMode.Chain : (l = !1, v = this.target.bone, e *= 0 < v.a * v.d - v.b * v.c ? a.MathUtils.degRad : -a.MathUtils.degRad);
          C = 0;
          for (v = 3;C < u;C++, v += 3) {
            D = y[C];
            D.worldX += (f - D.worldX) * k;
            D.worldY += (h - D.worldY) * k;
            G = b[v];
            F = b[v + 1];
            t = G - f;
            A = F - h;
            p && (f = m[C], 0 != f && (f = (Math.sqrt(t * t + A * A) / f - 1) * g + 1, D.a *= f, D.c *= f));
            f = G;
            h = F;
            if (c) {
              var G = D.a, F = D.b, B = D.c, K = D.d, H, M, J;
              H = w ? b[v - 1] : 0 == x[C + 1] ? b[v + 2] : Math.atan2(A, t);
              H -= Math.atan2(B, G);
              if (l) {
                M = Math.cos(H);
                J = Math.sin(H);
                var P = D.data.length, f = f + (P * (M * G - J * B) - t) * g, h = h + (P * (J * G + M * B) - A) * g;
              } else {
                H += e;
              }
              H > a.MathUtils.PI ? H -= a.MathUtils.PI2 : H < -a.MathUtils.PI && (H += a.MathUtils.PI2);
              H *= g;
              M = Math.cos(H);
              J = Math.sin(H);
              D.a = M * G - J * B;
              D.b = M * F - J * K;
              D.c = J * G + M * B;
              D.d = J * F + M * K;
            }
            D.appliedValid = !1;
          }
        }
      }
    };
    h.prototype.computeWorldPositions = function(b, g, k, c, e) {
      var f = this.target, l = this.position, r = this.spaces, w = a.Utils.setArraySize(this.positions, 3 * g + 2), p, u = b.closed, v = b.worldVerticesLength, y = v / 6, x = h.NONE;
      if (!b.constantSpeed) {
        var m = b.lengths, y = y - (u ? 1 : 2), t = m[y];
        c && (l *= t);
        if (e) {
          for (var C = 0;C < g;C++) {
            r[C] *= t;
          }
        }
        p = a.Utils.setArraySize(this.world, 8);
        for (e = c = C = 0;C < g;C++, c += 3) {
          var A = r[C], D = l += A;
          if (u) {
            D %= t, 0 > D && (D += t), e = 0;
          } else {
            if (0 > D) {
              x != h.BEFORE && (x = h.BEFORE, b.computeWorldVerticesWith(f, 2, 4, p, 0));
              this.addBeforePosition(D, p, 0, w, c);
              continue;
            } else {
              if (D > t) {
                x != h.AFTER && (x = h.AFTER, b.computeWorldVerticesWith(f, v - 6, 4, p, 0));
                this.addAfterPosition(D - t, p, 0, w, c);
                continue;
              }
            }
          }
          for (;;e++) {
            var F = m[e];
            if (!(D > F)) {
              if (0 == e) {
                D /= F;
              } else {
                var G = m[e - 1], D = (D - G) / (F - G);
              }
              break;
            }
          }
          e != x && (x = e, u && e == y ? (b.computeWorldVerticesWith(f, v - 4, 4, p, 0), b.computeWorldVerticesWith(f, 0, 4, p, 4)) : b.computeWorldVerticesWith(f, 6 * e + 2, 8, p, 0));
          this.addCurvePosition(D, p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[7], w, c, k || 0 < C && 0 == A);
        }
        return w;
      }
      u ? (v += 2, p = a.Utils.setArraySize(this.world, v), b.computeWorldVerticesWith(f, 2, v - 4, p, 0), b.computeWorldVerticesWith(f, 0, 2, p, v - 4), p[v - 2] = p[0], p[v - 1] = p[1]) : (y--, v -= 4, p = a.Utils.setArraySize(this.world, v), b.computeWorldVerticesWith(f, 2, v, p, 0));
      b = a.Utils.setArraySize(this.curves, y);
      for (var f = 0, m = p[0], t = p[1], B = F = 0, K = 0, H = 0, M = 0, J = 0, P, O, N, ba, da, C = 0, A = 2;C < y;C++, A += 6) {
        F = p[A], B = p[A + 1], K = p[A + 2], H = p[A + 3], M = p[A + 4], J = p[A + 5], P = .1875 * (m - 2 * F + K), O = .1875 * (t - 2 * B + H), G = .09375 * (3 * (F - K) - m + M), N = .09375 * (3 * (B - H) - t + J), ba = 2 * P + G, da = 2 * O + N, P = .75 * (F - m) + P + .16666667 * G, O = .75 * (B - t) + O + .16666667 * N, f += Math.sqrt(P * P + O * O), P += ba, O += da, ba += G, da += N, f += Math.sqrt(P * P + O * O), P += ba, O += da, f += Math.sqrt(P * P + O * O), P += ba + G, O += da + N, 
        f += Math.sqrt(P * P + O * O), b[C] = f, m = M, t = J;
      }
      c && (l *= f);
      if (e) {
        for (C = 0;C < g;C++) {
          r[C] *= f;
        }
      }
      var y = this.segments, ca = 0;
      for (N = e = c = C = 0;C < g;C++, c += 3) {
        A = r[C];
        D = l += A;
        if (u) {
          D %= f, 0 > D && (D += f), e = 0;
        } else {
          if (0 > D) {
            this.addBeforePosition(D, p, 0, w, c);
            continue;
          } else {
            if (D > f) {
              this.addAfterPosition(D - f, p, v - 4, w, c);
              continue;
            }
          }
        }
        for (;;e++) {
          if (ba = b[e], !(D > ba)) {
            0 == e ? D /= ba : (G = b[e - 1], D = (D - G) / (ba - G));
            break;
          }
        }
        if (e != x) {
          var x = e, ia = 6 * e, m = p[ia], t = p[ia + 1], F = p[ia + 2], B = p[ia + 3], K = p[ia + 4], H = p[ia + 5], M = p[ia + 6], J = p[ia + 7];
          P = .03 * (m - 2 * F + K);
          O = .03 * (t - 2 * B + H);
          G = .006 * (3 * (F - K) - m + M);
          N = .006 * (3 * (B - H) - t + J);
          ba = 2 * P + G;
          da = 2 * O + N;
          P = .3 * (F - m) + P + .16666667 * G;
          O = .3 * (B - t) + O + .16666667 * N;
          ca = Math.sqrt(P * P + O * O);
          y[0] = ca;
          for (ia = 1;8 > ia;ia++) {
            P += ba, O += da, ba += G, da += N, ca += Math.sqrt(P * P + O * O), y[ia] = ca;
          }
          P += ba;
          O += da;
          ca += Math.sqrt(P * P + O * O);
          y[8] = ca;
          P += ba + G;
          O += da + N;
          ca += Math.sqrt(P * P + O * O);
          y[9] = ca;
          N = 0;
        }
        for (D *= ca;;N++) {
          if (ba = y[N], !(D > ba)) {
            0 == N ? D /= ba : (G = y[N - 1], D = N + (D - G) / (ba - G));
            break;
          }
        }
        this.addCurvePosition(.1 * D, m, t, F, B, K, H, M, J, w, c, k || 0 < C && 0 == A);
      }
      return w;
    };
    h.prototype.addBeforePosition = function(a, g, k, c, e) {
      var b = g[k], h = g[k + 1];
      g = Math.atan2(g[k + 3] - h, g[k + 2] - b);
      c[e] = b + a * Math.cos(g);
      c[e + 1] = h + a * Math.sin(g);
      c[e + 2] = g;
    };
    h.prototype.addAfterPosition = function(a, g, k, c, e) {
      var b = g[k + 2], h = g[k + 3];
      g = Math.atan2(h - g[k + 1], b - g[k]);
      c[e] = b + a * Math.cos(g);
      c[e + 1] = h + a * Math.sin(g);
      c[e + 2] = g;
    };
    h.prototype.addCurvePosition = function(a, g, k, c, e, f, h, l, w, p, u, v) {
      if (0 == a || isNaN(a)) {
        a = 1E-4;
      }
      var b = a * a, q = b * a, m = 1 - a, r = m * m, C = r * m, A = m * a, D = 3 * A, m = m * D;
      a *= D;
      l = g * C + c * m + f * a + l * q;
      w = k * C + e * m + h * a + w * q;
      p[u] = l;
      p[u + 1] = w;
      v && (p[u + 2] = Math.atan2(w - (k * r + e * A * 2 + h * b), l - (g * r + c * A * 2 + f * b)));
    };
    h.prototype.getOrder = function() {
      return this.data.order;
    };
    h.NONE = -1;
    h.BEFORE = -2;
    h.AFTER = -3;
    return h;
  }();
  a.PathConstraint = h;
})(spine || (spine = {}));
(function(a) {
  var h = function() {
    return function(a) {
      this.order = 0;
      this.bones = [];
      this.name = a;
    };
  }();
  a.PathConstraintData = h;
  (function(a) {
    a[a.Fixed = 0] = "Fixed";
    a[a.Percent = 1] = "Percent";
  })(a.PositionMode || (a.PositionMode = {}));
  (function(a) {
    a[a.Length = 0] = "Length";
    a[a.Fixed = 1] = "Fixed";
    a[a.Percent = 2] = "Percent";
  })(a.SpacingMode || (a.SpacingMode = {}));
  (function(a) {
    a[a.Tangent = 0] = "Tangent";
    a[a.Chain = 1] = "Chain";
    a[a.ChainScale = 2] = "ChainScale";
  })(a.RotateMode || (a.RotateMode = {}));
})(spine || (spine = {}));
(function(a) {
  var h = function() {
    function a(a) {
      this.toLoad = [];
      this.assets = {};
      this.clientId = a;
    }
    a.prototype.loaded = function() {
      var a = 0, b;
      for (b in this.assets) {
        a++;
      }
      return a;
    };
    return a;
  }(), l = function() {
    function a(a) {
      void 0 === a && (a = "");
      this.clientAssets = {};
      this.queuedAssets = {};
      this.rawAssets = {};
      this.errors = {};
      this.pathPrefix = a;
    }
    a.prototype.queueAsset = function(a, b, c) {
      var e = this.clientAssets[a];
      if (null === e || void 0 === e) {
        e = new h(a), this.clientAssets[a] = e;
      }
      null !== b && (e.textureLoader = b);
      e.toLoad.push(c);
      if (this.queuedAssets[c] === c) {
        return !1;
      }
      this.queuedAssets[c] = c;
      return !0;
    };
    a.prototype.loadText = function(a, b) {
      var c = this;
      b = this.pathPrefix + b;
      if (this.queueAsset(a, null, b)) {
        var e = new XMLHttpRequest;
        e.onreadystatechange = function() {
          e.readyState == XMLHttpRequest.DONE && (200 <= e.status && 300 > e.status ? c.rawAssets[b] = e.responseText : c.errors[b] = "Couldn't load text " + b + ": status " + e.status + ", " + e.responseText);
        };
        e.open("GET", b, !0);
        e.send();
      }
    };
    a.prototype.loadJson = function(a, b) {
      var c = this;
      b = this.pathPrefix + b;
      if (this.queueAsset(a, null, b)) {
        var e = new XMLHttpRequest;
        e.onreadystatechange = function() {
          e.readyState == XMLHttpRequest.DONE && (200 <= e.status && 300 > e.status ? c.rawAssets[b] = JSON.parse(e.responseText) : c.errors[b] = "Couldn't load text " + b + ": status " + e.status + ", " + e.responseText);
        };
        e.open("GET", b, !0);
        e.send();
      }
    };
    a.prototype.loadTexture = function(a, b, c) {
      var e = this;
      c = this.pathPrefix + c;
      if (this.queueAsset(a, b, c)) {
        var f = new Image;
        f.src = c;
        f.crossOrigin = "anonymous";
        f.onload = function(a) {
          e.rawAssets[c] = f;
        };
        f.onerror = function(a) {
          e.errors[c] = "Couldn't load image " + c;
        };
      }
    };
    a.prototype.get = function(a, b) {
      b = this.pathPrefix + b;
      a = this.clientAssets[a];
      return null === a || void 0 === a ? !0 : a.assets[b];
    };
    a.prototype.updateClientAssets = function(a) {
      for (var b = 0;b < a.toLoad.length;b++) {
        var c = a.toLoad[b], e = a.assets[c];
        if (null === e || void 0 === e) {
          e = this.rawAssets[c], null !== e && void 0 !== e && (a.assets[c] = e instanceof HTMLImageElement ? a.textureLoader(e) : e);
        }
      }
    };
    a.prototype.isLoadingComplete = function(a) {
      a = this.clientAssets[a];
      if (null === a || void 0 === a) {
        return !0;
      }
      this.updateClientAssets(a);
      return a.toLoad.length == a.loaded();
    };
    a.prototype.dispose = function() {
    };
    a.prototype.hasErrors = function() {
      return 0 < Object.keys(this.errors).length;
    };
    a.prototype.getErrors = function() {
      return this.errors;
    };
    return a;
  }();
  a.SharedAssetManager = l;
})(spine || (spine = {}));
(function(a) {
  var h = function() {
    function h(b) {
      this._updateCache = [];
      this.updateCacheReset = [];
      this.time = 0;
      this.flipY = this.flipX = !1;
      this.y = this.x = 0;
      if (null == b) {
        throw Error("data cannot be null.");
      }
      this.data = b;
      this.bones = [];
      for (var g = 0;g < b.bones.length;g++) {
        var h = b.bones[g];
        if (null == h.parent) {
          h = new a.Bone(h, this, null);
        } else {
          var c = this.bones[h.parent.index], h = new a.Bone(h, this, c);
          c.children.push(h);
        }
        this.bones.push(h);
      }
      this.slots = [];
      this.drawOrder = [];
      for (g = 0;g < b.slots.length;g++) {
        c = b.slots[g], h = this.bones[c.boneData.index], h = new a.Slot(c, h), this.slots.push(h), this.drawOrder.push(h);
      }
      this.ikConstraints = [];
      for (g = 0;g < b.ikConstraints.length;g++) {
        this.ikConstraints.push(new a.IkConstraint(b.ikConstraints[g], this));
      }
      this.transformConstraints = [];
      for (g = 0;g < b.transformConstraints.length;g++) {
        this.transformConstraints.push(new a.TransformConstraint(b.transformConstraints[g], this));
      }
      this.pathConstraints = [];
      for (g = 0;g < b.pathConstraints.length;g++) {
        this.pathConstraints.push(new a.PathConstraint(b.pathConstraints[g], this));
      }
      this.color = new a.Color(1, 1, 1, 1);
      this.updateCache();
    }
    h.prototype.updateCache = function() {
      this._updateCache.length = 0;
      this.updateCacheReset.length = 0;
      for (var a = this.bones, g = 0, h = a.length;g < h;g++) {
        a[g].sorted = !1;
      }
      var h = this.ikConstraints, c = this.transformConstraints, e = this.pathConstraints, f = h.length, l = c.length, r = e.length, w = f + l + r, g = 0;
      a: for (;g < w;g++) {
        for (var p = 0;p < f;p++) {
          var u = h[p];
          if (u.data.order == g) {
            this.sortIkConstraint(u);
            continue a;
          }
        }
        for (p = 0;p < l;p++) {
          if (u = c[p], u.data.order == g) {
            this.sortTransformConstraint(u);
            continue a;
          }
        }
        for (p = 0;p < r;p++) {
          if (u = e[p], u.data.order == g) {
            this.sortPathConstraint(u);
            continue a;
          }
        }
      }
      g = 0;
      for (h = a.length;g < h;g++) {
        this.sortBone(a[g]);
      }
    };
    h.prototype.sortIkConstraint = function(a) {
      this.sortBone(a.target);
      var b = a.bones, h = b[0];
      this.sortBone(h);
      if (1 < b.length) {
        var c = b[b.length - 1];
        -1 < this._updateCache.indexOf(c) || this.updateCacheReset.push(c);
      }
      this._updateCache.push(a);
      this.sortReset(h.children);
      b[b.length - 1].sorted = !0;
    };
    h.prototype.sortPathConstraint = function(b) {
      var g = b.target, h = g.data.index, c = g.bone;
      null != this.skin && this.sortPathConstraintAttachment(this.skin, h, c);
      null != this.data.defaultSkin && this.data.defaultSkin != this.skin && this.sortPathConstraintAttachment(this.data.defaultSkin, h, c);
      for (var e = 0, f = this.data.skins.length;e < f;e++) {
        this.sortPathConstraintAttachment(this.data.skins[e], h, c);
      }
      e = g.getAttachment();
      e instanceof a.PathAttachment && this.sortPathConstraintAttachmentWith(e, c);
      c = b.bones;
      g = c.length;
      for (e = 0;e < g;e++) {
        this.sortBone(c[e]);
      }
      this._updateCache.push(b);
      for (e = 0;e < g;e++) {
        this.sortReset(c[e].children);
      }
      for (e = 0;e < g;e++) {
        c[e].sorted = !0;
      }
    };
    h.prototype.sortTransformConstraint = function(a) {
      this.sortBone(a.target);
      for (var b = a.bones, h = b.length, c = 0;c < h;c++) {
        this.sortBone(b[c]);
      }
      this._updateCache.push(a);
      for (c = 0;c < h;c++) {
        this.sortReset(b[c].children);
      }
      for (c = 0;c < h;c++) {
        b[c].sorted = !0;
      }
    };
    h.prototype.sortPathConstraintAttachment = function(a, g, h) {
      if (a = a.attachments[g]) {
        for (var b in a) {
          this.sortPathConstraintAttachmentWith(a[b], h);
        }
      }
    };
    h.prototype.sortPathConstraintAttachmentWith = function(b, g) {
      if (b instanceof a.PathAttachment) {
        if (b = b.bones, null == b) {
          this.sortBone(g);
        } else {
          g = this.bones;
          for (var h = 0;h < b.length;) {
            for (var c = b[h++], c = h + c;h < c;h++) {
              this.sortBone(g[b[h]]);
            }
          }
        }
      }
    };
    h.prototype.sortBone = function(a) {
      if (!a.sorted) {
        var b = a.parent;
        null != b && this.sortBone(b);
        a.sorted = !0;
        this._updateCache.push(a);
      }
    };
    h.prototype.sortReset = function(a) {
      for (var b = 0, h = a.length;b < h;b++) {
        var c = a[b];
        c.sorted && this.sortReset(c.children);
        c.sorted = !1;
      }
    };
    h.prototype.updateWorldTransform = function() {
      for (var a = this.updateCacheReset, g = 0, h = a.length;g < h;g++) {
        var c = a[g];
        c.ax = c.x;
        c.ay = c.y;
        c.arotation = c.rotation;
        c.ascaleX = c.scaleX;
        c.ascaleY = c.scaleY;
        c.ashearX = c.shearX;
        c.ashearY = c.shearY;
        c.appliedValid = !0;
      }
      a = this._updateCache;
      g = 0;
      for (h = a.length;g < h;g++) {
        a[g].update();
      }
    };
    h.prototype.setToSetupPose = function() {
      this.setBonesToSetupPose();
      this.setSlotsToSetupPose();
    };
    h.prototype.setBonesToSetupPose = function() {
      for (var a = this.bones, g = 0, h = a.length;g < h;g++) {
        a[g].setToSetupPose();
      }
      for (var c = this.ikConstraints, g = 0, h = c.length;g < h;g++) {
        a = c[g], a.bendDirection = a.data.bendDirection, a.mix = a.data.mix;
      }
      for (var e = this.transformConstraints, g = 0, h = e.length;g < h;g++) {
        a = e[g], c = a.data, a.rotateMix = c.rotateMix, a.translateMix = c.translateMix, a.scaleMix = c.scaleMix, a.shearMix = c.shearMix;
      }
      e = this.pathConstraints;
      g = 0;
      for (h = e.length;g < h;g++) {
        a = e[g], c = a.data, a.position = c.position, a.spacing = c.spacing, a.rotateMix = c.rotateMix, a.translateMix = c.translateMix;
      }
    };
    h.prototype.setSlotsToSetupPose = function() {
      var b = this.slots;
      a.Utils.arrayCopy(b, 0, this.drawOrder, 0, b.length);
      for (var g = 0, h = b.length;g < h;g++) {
        b[g].setToSetupPose();
      }
    };
    h.prototype.getRootBone = function() {
      return 0 == this.bones.length ? null : this.bones[0];
    };
    h.prototype.findBone = function(a) {
      if (null == a) {
        throw Error("boneName cannot be null.");
      }
      for (var b = this.bones, h = 0, c = b.length;h < c;h++) {
        var e = b[h];
        if (e.data.name == a) {
          return e;
        }
      }
      return null;
    };
    h.prototype.findBoneIndex = function(a) {
      if (null == a) {
        throw Error("boneName cannot be null.");
      }
      for (var b = this.bones, h = 0, c = b.length;h < c;h++) {
        if (b[h].data.name == a) {
          return h;
        }
      }
      return -1;
    };
    h.prototype.findSlot = function(a) {
      if (null == a) {
        throw Error("slotName cannot be null.");
      }
      for (var b = this.slots, h = 0, c = b.length;h < c;h++) {
        var e = b[h];
        if (e.data.name == a) {
          return e;
        }
      }
      return null;
    };
    h.prototype.findSlotIndex = function(a) {
      if (null == a) {
        throw Error("slotName cannot be null.");
      }
      for (var b = this.slots, h = 0, c = b.length;h < c;h++) {
        if (b[h].data.name == a) {
          return h;
        }
      }
      return -1;
    };
    h.prototype.setSkinByName = function(a) {
      var b = this.data.findSkin(a);
      if (null == b) {
        throw Error("Skin not found: " + a);
      }
      this.setSkin(b);
    };
    h.prototype.setSkin = function(a) {
      if (null != a) {
        if (null != this.skin) {
          a.attachAll(this, this.skin);
        } else {
          for (var b = this.slots, h = 0, c = b.length;h < c;h++) {
            var e = b[h], f = e.data.attachmentName;
            null != f && (f = a.getAttachment(h, f), null != f && e.setAttachment(f));
          }
        }
      }
      this.skin = a;
    };
    h.prototype.getAttachmentByName = function(a, g) {
      return this.getAttachment(this.data.findSlotIndex(a), g);
    };
    h.prototype.getAttachment = function(a, g) {
      if (null == g) {
        throw Error("attachmentName cannot be null.");
      }
      if (null != this.skin) {
        var b = this.skin.getAttachment(a, g);
        if (null != b) {
          return b;
        }
      }
      return null != this.data.defaultSkin ? this.data.defaultSkin.getAttachment(a, g) : null;
    };
    h.prototype.setAttachment = function(a, g) {
      if (null == a) {
        throw Error("slotName cannot be null.");
      }
      for (var b = this.slots, c = 0, e = b.length;c < e;c++) {
        var f = b[c];
        if (f.data.name == a) {
          b = null;
          if (null != g && (b = this.getAttachment(c, g), null == b)) {
            throw Error("Attachment not found: " + g + ", for slot: " + a);
          }
          f.setAttachment(b);
          return;
        }
      }
      throw Error("Slot not found: " + a);
    };
    h.prototype.findIkConstraint = function(a) {
      if (null == a) {
        throw Error("constraintName cannot be null.");
      }
      for (var b = this.ikConstraints, h = 0, c = b.length;h < c;h++) {
        var e = b[h];
        if (e.data.name == a) {
          return e;
        }
      }
      return null;
    };
    h.prototype.findTransformConstraint = function(a) {
      if (null == a) {
        throw Error("constraintName cannot be null.");
      }
      for (var b = this.transformConstraints, h = 0, c = b.length;h < c;h++) {
        var e = b[h];
        if (e.data.name == a) {
          return e;
        }
      }
      return null;
    };
    h.prototype.findPathConstraint = function(a) {
      if (null == a) {
        throw Error("constraintName cannot be null.");
      }
      for (var b = this.pathConstraints, h = 0, c = b.length;h < c;h++) {
        var e = b[h];
        if (e.data.name == a) {
          return e;
        }
      }
      return null;
    };
    h.prototype.getBounds = function(b, g) {
      if (null == b) {
        throw Error("offset cannot be null.");
      }
      if (null == g) {
        throw Error("size cannot be null.");
      }
      for (var h = this.drawOrder, c = Number.POSITIVE_INFINITY, e = Number.POSITIVE_INFINITY, f = Number.NEGATIVE_INFINITY, l = Number.NEGATIVE_INFINITY, r = 0, w = h.length;r < w;r++) {
        var p = h[r], u = null, v = p.getAttachment();
        v instanceof a.RegionAttachment ? u = v.updateWorldVertices(p, !1) : v instanceof a.MeshAttachment && (u = v.updateWorldVertices(p, !0));
        if (null != u) {
          for (p = 0, v = u.length;p < v;p += 8) {
            var y = u[p], x = u[p + 1], c = Math.min(c, y), e = Math.min(e, x), f = Math.max(f, y), l = Math.max(l, x);
          }
        }
      }
      b.set(c, e);
      g.set(f - c, l - e);
    };
    h.prototype.update = function(a) {
      this.time += a;
    };
    return h;
  }();
  a.Skeleton = h;
})(spine || (spine = {}));
(function(a) {
  var h = function() {
    function h() {
      this.maxY = this.maxX = this.minY = this.minX = 0;
      this.boundingBoxes = [];
      this.polygons = [];
      this.polygonPool = new a.Pool(function() {
        return a.Utils.newFloatArray(16);
      });
    }
    h.prototype.update = function(b, g) {
      if (null == b) {
        throw Error("skeleton cannot be null.");
      }
      var h = this.boundingBoxes, c = this.polygons, e = this.polygonPool;
      b = b.slots;
      var f = b.length;
      h.length = 0;
      e.freeAll(c);
      for (var l = c.length = 0;l < f;l++) {
        var r = b[l], w = r.getAttachment();
        if (w instanceof a.BoundingBoxAttachment) {
          h.push(w);
          var p = e.obtain();
          p.length != w.worldVerticesLength && (p = a.Utils.newFloatArray(w.worldVerticesLength));
          c.push(p);
          w.computeWorldVertices(r, p);
        }
      }
      g ? this.aabbCompute() : (this.minY = this.minX = Number.POSITIVE_INFINITY, this.maxY = this.maxX = Number.NEGATIVE_INFINITY);
    };
    h.prototype.aabbCompute = function() {
      for (var a = Number.POSITIVE_INFINITY, g = Number.POSITIVE_INFINITY, h = Number.NEGATIVE_INFINITY, c = Number.NEGATIVE_INFINITY, e = this.polygons, f = 0, l = e.length;f < l;f++) {
        for (var r = e[f], w = r, p = 0, r = r.length;p < r;p += 2) {
          var u = w[p], v = w[p + 1], a = Math.min(a, u), g = Math.min(g, v), h = Math.max(h, u), c = Math.max(c, v);
        }
      }
      this.minX = a;
      this.minY = g;
      this.maxX = h;
      this.maxY = c;
    };
    h.prototype.aabbContainsPoint = function(a, g) {
      return a >= this.minX && a <= this.maxX && g >= this.minY && g <= this.maxY;
    };
    h.prototype.aabbIntersectsSegment = function(a, g, h, c) {
      var b = this.minX, f = this.minY, k = this.maxX, l = this.maxY;
      if (a <= b && h <= b || g <= f && c <= f || a >= k && h >= k || g >= l && c >= l) {
        return !1;
      }
      h = (c - g) / (h - a);
      c = h * (b - a) + g;
      if (c > f && c < l) {
        return !0;
      }
      c = h * (k - a) + g;
      if (c > f && c < l) {
        return !0;
      }
      f = (f - g) / h + a;
      if (f > b && f < k) {
        return !0;
      }
      f = (l - g) / h + a;
      return f > b && f < k ? !0 : !1;
    };
    h.prototype.aabbIntersectsSkeleton = function(a) {
      return this.minX < a.maxX && this.maxX > a.minX && this.minY < a.maxY && this.maxY > a.minY;
    };
    h.prototype.containsPoint = function(a, g) {
      for (var b = this.polygons, c = 0, e = b.length;c < e;c++) {
        if (this.containsPointPolygon(b[c], a, g)) {
          return this.boundingBoxes[c];
        }
      }
      return null;
    };
    h.prototype.containsPointPolygon = function(a, g, h) {
      for (var b = a.length, e = b - 2, f = !1, k = 0;k < b;k += 2) {
        var l = a[k + 1], w = a[e + 1];
        if (l < h && w >= h || w < h && l >= h) {
          var p = a[k];
          p + (h - l) / (w - l) * (a[e] - p) < g && (f = !f);
        }
        e = k;
      }
      return f;
    };
    h.prototype.intersectsSegment = function(a, g, h, c) {
      for (var b = this.polygons, f = 0, k = b.length;f < k;f++) {
        if (this.intersectsSegmentPolygon(b[f], a, g, h, c)) {
          return this.boundingBoxes[f];
        }
      }
      return null;
    };
    h.prototype.intersectsSegmentPolygon = function(a, g, h, c, e) {
      for (var b = a.length, k = g - c, l = h - e, w = g * e - h * c, p = a[b - 2], u = a[b - 1], v = 0;v < b;v += 2) {
        var y = a[v], x = a[v + 1], m = p * x - u * y, t = p - y, C = u - x, A = k * C - l * t, t = (w * t - k * m) / A;
        if ((t >= p && t <= y || t >= y && t <= p) && (t >= g && t <= c || t >= c && t <= g) && (p = (w * C - l * m) / A, (p >= u && p <= x || p >= x && p <= u) && (p >= h && p <= e || p >= e && p <= h))) {
          return !0;
        }
        p = y;
        u = x;
      }
      return !1;
    };
    h.prototype.getPolygon = function(a) {
      if (null == a) {
        throw Error("boundingBox cannot be null.");
      }
      a = this.boundingBoxes.indexOf(a);
      return -1 == a ? null : this.polygons[a];
    };
    h.prototype.getWidth = function() {
      return this.maxX - this.minX;
    };
    h.prototype.getHeight = function() {
      return this.maxY - this.minY;
    };
    return h;
  }();
  a.SkeletonBounds = h;
})(spine || (spine = {}));
(function(a) {
  var h = function() {
    function a() {
      this.bones = [];
      this.slots = [];
      this.skins = [];
      this.events = [];
      this.animations = [];
      this.ikConstraints = [];
      this.transformConstraints = [];
      this.pathConstraints = [];
      this.fps = 0;
    }
    a.prototype.findBone = function(a) {
      if (null == a) {
        throw Error("boneName cannot be null.");
      }
      for (var b = this.bones, h = 0, c = b.length;h < c;h++) {
        var e = b[h];
        if (e.name == a) {
          return e;
        }
      }
      return null;
    };
    a.prototype.findBoneIndex = function(a) {
      if (null == a) {
        throw Error("boneName cannot be null.");
      }
      for (var b = this.bones, h = 0, c = b.length;h < c;h++) {
        if (b[h].name == a) {
          return h;
        }
      }
      return -1;
    };
    a.prototype.findSlot = function(a) {
      if (null == a) {
        throw Error("slotName cannot be null.");
      }
      for (var b = this.slots, h = 0, c = b.length;h < c;h++) {
        var e = b[h];
        if (e.name == a) {
          return e;
        }
      }
      return null;
    };
    a.prototype.findSlotIndex = function(a) {
      if (null == a) {
        throw Error("slotName cannot be null.");
      }
      for (var b = this.slots, h = 0, c = b.length;h < c;h++) {
        if (b[h].name == a) {
          return h;
        }
      }
      return -1;
    };
    a.prototype.findSkin = function(a) {
      if (null == a) {
        throw Error("skinName cannot be null.");
      }
      for (var b = this.skins, h = 0, c = b.length;h < c;h++) {
        var e = b[h];
        if (e.name == a) {
          return e;
        }
      }
      return null;
    };
    a.prototype.findEvent = function(a) {
      if (null == a) {
        throw Error("eventDataName cannot be null.");
      }
      for (var b = this.events, h = 0, c = b.length;h < c;h++) {
        var e = b[h];
        if (e.name == a) {
          return e;
        }
      }
      return null;
    };
    a.prototype.findAnimation = function(a) {
      if (null == a) {
        throw Error("animationName cannot be null.");
      }
      for (var b = this.animations, h = 0, c = b.length;h < c;h++) {
        var e = b[h];
        if (e.name == a) {
          return e;
        }
      }
      return null;
    };
    a.prototype.findIkConstraint = function(a) {
      if (null == a) {
        throw Error("constraintName cannot be null.");
      }
      for (var b = this.ikConstraints, h = 0, c = b.length;h < c;h++) {
        var e = b[h];
        if (e.name == a) {
          return e;
        }
      }
      return null;
    };
    a.prototype.findTransformConstraint = function(a) {
      if (null == a) {
        throw Error("constraintName cannot be null.");
      }
      for (var b = this.transformConstraints, h = 0, c = b.length;h < c;h++) {
        var e = b[h];
        if (e.name == a) {
          return e;
        }
      }
      return null;
    };
    a.prototype.findPathConstraint = function(a) {
      if (null == a) {
        throw Error("constraintName cannot be null.");
      }
      for (var b = this.pathConstraints, h = 0, c = b.length;h < c;h++) {
        var e = b[h];
        if (e.name == a) {
          return e;
        }
      }
      return null;
    };
    a.prototype.findPathConstraintIndex = function(a) {
      if (null == a) {
        throw Error("pathConstraintName cannot be null.");
      }
      for (var b = this.pathConstraints, h = 0, c = b.length;h < c;h++) {
        if (b[h].name == a) {
          return h;
        }
      }
      return -1;
    };
    return a;
  }();
  a.SkeletonData = h;
})(spine || (spine = {}));
(function(a) {
  var h = function() {
    function b(a) {
      this.scale = 1;
      this.linkedMeshes = [];
      this.attachmentLoader = a;
    }
    b.prototype.readSkeletonData = function(g) {
      var h = this.scale, c = new a.SkeletonData;
      g = "string" === typeof g ? JSON.parse(g) : g;
      var e = g.skeleton;
      null != e && (c.hash = e.hash, c.version = e.spine, c.width = e.width, c.height = e.height, c.fps = e.fps, c.imagesPath = e.images);
      if (g.bones) {
        for (e = 0;e < g.bones.length;e++) {
          var f = g.bones[e], l = null, r = this.getValue(f, "parent", null);
          if (null != r && (l = c.findBone(r), null == l)) {
            throw Error("Parent bone not found: " + r);
          }
          l = new a.BoneData(c.bones.length, f.name, l);
          l.length = this.getValue(f, "length", 0) * h;
          l.x = this.getValue(f, "x", 0) * h;
          l.y = this.getValue(f, "y", 0) * h;
          l.rotation = this.getValue(f, "rotation", 0);
          l.scaleX = this.getValue(f, "scaleX", 1);
          l.scaleY = this.getValue(f, "scaleY", 1);
          l.shearX = this.getValue(f, "shearX", 0);
          l.shearY = this.getValue(f, "shearY", 0);
          l.transformMode = b.transformModeFromString(this.getValue(f, "transform", "normal"));
          c.bones.push(l);
        }
      }
      if (g.slots) {
        for (e = 0;e < g.slots.length;e++) {
          var f = g.slots[e], w = f.name, r = f.bone, l = c.findBone(r);
          if (null == l) {
            throw Error("Slot bone not found: " + r);
          }
          l = new a.SlotData(c.slots.length, w, l);
          r = this.getValue(f, "color", null);
          null != r && l.color.setFromString(r);
          l.attachmentName = this.getValue(f, "attachment", null);
          l.blendMode = b.blendModeFromString(this.getValue(f, "blend", "normal"));
          c.slots.push(l);
        }
      }
      if (g.ik) {
        for (e = 0;e < g.ik.length;e++) {
          f = g.ik[e];
          l = new a.IkConstraintData(f.name);
          l.order = this.getValue(f, "order", 0);
          for (var p = 0;p < f.bones.length;p++) {
            var r = f.bones[p], u = c.findBone(r);
            if (null == u) {
              throw Error("IK bone not found: " + r);
            }
            l.bones.push(u);
          }
          r = f.target;
          l.target = c.findBone(r);
          if (null == l.target) {
            throw Error("IK target bone not found: " + r);
          }
          l.bendDirection = this.getValue(f, "bendPositive", !0) ? 1 : -1;
          l.mix = this.getValue(f, "mix", 1);
          c.ikConstraints.push(l);
        }
      }
      if (g.transform) {
        for (e = 0;e < g.transform.length;e++) {
          f = g.transform[e];
          l = new a.TransformConstraintData(f.name);
          l.order = this.getValue(f, "order", 0);
          for (p = 0;p < f.bones.length;p++) {
            r = f.bones[p];
            u = c.findBone(r);
            if (null == u) {
              throw Error("Transform constraint bone not found: " + r);
            }
            l.bones.push(u);
          }
          r = f.target;
          l.target = c.findBone(r);
          if (null == l.target) {
            throw Error("Transform constraint target bone not found: " + r);
          }
          l.offsetRotation = this.getValue(f, "rotation", 0);
          l.offsetX = this.getValue(f, "x", 0) * h;
          l.offsetY = this.getValue(f, "y", 0) * h;
          l.offsetScaleX = this.getValue(f, "scaleX", 0);
          l.offsetScaleY = this.getValue(f, "scaleY", 0);
          l.offsetShearY = this.getValue(f, "shearY", 0);
          l.rotateMix = this.getValue(f, "rotateMix", 1);
          l.translateMix = this.getValue(f, "translateMix", 1);
          l.scaleMix = this.getValue(f, "scaleMix", 1);
          l.shearMix = this.getValue(f, "shearMix", 1);
          c.transformConstraints.push(l);
        }
      }
      if (g.path) {
        for (e = 0;e < g.path.length;e++) {
          f = g.path[e];
          l = new a.PathConstraintData(f.name);
          l.order = this.getValue(f, "order", 0);
          for (p = 0;p < f.bones.length;p++) {
            r = f.bones[p];
            u = c.findBone(r);
            if (null == u) {
              throw Error("Transform constraint bone not found: " + r);
            }
            l.bones.push(u);
          }
          r = f.target;
          l.target = c.findSlot(r);
          if (null == l.target) {
            throw Error("Path target slot not found: " + r);
          }
          l.positionMode = b.positionModeFromString(this.getValue(f, "positionMode", "percent"));
          l.spacingMode = b.spacingModeFromString(this.getValue(f, "spacingMode", "length"));
          l.rotateMode = b.rotateModeFromString(this.getValue(f, "rotateMode", "tangent"));
          l.offsetRotation = this.getValue(f, "rotation", 0);
          l.position = this.getValue(f, "position", 0);
          l.positionMode == a.PositionMode.Fixed && (l.position *= h);
          l.spacing = this.getValue(f, "spacing", 0);
          if (l.spacingMode == a.SpacingMode.Length || l.spacingMode == a.SpacingMode.Fixed) {
            l.spacing *= h;
          }
          l.rotateMix = this.getValue(f, "rotateMix", 1);
          l.translateMix = this.getValue(f, "translateMix", 1);
          c.pathConstraints.push(l);
        }
      }
      if (g.skins) {
        for (var v in g.skins) {
          e = g.skins[v];
          h = new a.Skin(v);
          for (w in e) {
            l = c.findSlotIndex(w);
            if (-1 == l) {
              throw Error("Slot not found: " + w);
            }
            var f = e[w], y;
            for (y in f) {
              r = this.readAttachment(f[y], h, l, y), null != r && h.addAttachment(l, y, r);
            }
          }
          c.skins.push(h);
          "default" == h.name && (c.defaultSkin = h);
        }
      }
      e = 0;
      for (w = this.linkedMeshes.length;e < w;e++) {
        v = this.linkedMeshes[e];
        h = null == v.skin ? c.defaultSkin : c.findSkin(v.skin);
        if (null == h) {
          throw Error("Skin not found: " + v.skin);
        }
        y = h.getAttachment(v.slotIndex, v.parent);
        if (null == y) {
          throw Error("Parent mesh not found: " + v.parent);
        }
        v.mesh.setParentMesh(y);
        v.mesh.updateUVs();
      }
      this.linkedMeshes.length = 0;
      if (g.events) {
        for (var x in g.events) {
          w = g.events[x], l = new a.EventData(x), l.intValue = this.getValue(w, "int", 0), l.floatValue = this.getValue(w, "float", 0), l.stringValue = this.getValue(w, "string", ""), c.events.push(l);
        }
      }
      if (g.animations) {
        for (var m in g.animations) {
          this.readAnimation(g.animations[m], m, c);
        }
      }
      return c;
    };
    b.prototype.readAttachment = function(b, h, c, e) {
      var f = this.scale;
      e = this.getValue(b, "name", e);
      switch(this.getValue(b, "type", "region")) {
        case "region":
          var g = this.getValue(b, "path", e);
          c = this.attachmentLoader.newRegionAttachment(h, e, g);
          if (null == c) {
            break;
          }
          c.path = g;
          c.x = this.getValue(b, "x", 0) * f;
          c.y = this.getValue(b, "y", 0) * f;
          c.scaleX = this.getValue(b, "scaleX", 1);
          c.scaleY = this.getValue(b, "scaleY", 1);
          c.rotation = this.getValue(b, "rotation", 0);
          c.width = b.width * f;
          c.height = b.height * f;
          f = this.getValue(b, "color", null);
          null != f && c.color.setFromString(f);
          c.updateOffset();
          return c;
        case "boundingbox":
          g = this.attachmentLoader.newBoundingBoxAttachment(h, e);
          if (null == g) {
            break;
          }
          this.readVertices(b, g, b.vertexCount << 1);
          f = this.getValue(b, "color", null);
          null != f && g.color.setFromString(f);
          return g;
        case "mesh":
        case "linkedmesh":
          g = this.getValue(b, "path", e);
          h = this.attachmentLoader.newMeshAttachment(h, e, g);
          if (null == h) {
            break;
          }
          h.path = g;
          f = this.getValue(b, "color", null);
          null != f && h.color.setFromString(f);
          g = this.getValue(b, "parent", null);
          if (null != g) {
            return h.inheritDeform = this.getValue(b, "deform", !0), this.linkedMeshes.push(new l(h, this.getValue(b, "skin", null), c, g)), h;
          }
          g = b.uvs;
          this.readVertices(b, h, g.length);
          h.triangles = b.triangles;
          h.regionUVs = g;
          h.updateUVs();
          h.hullLength = 2 * this.getValue(b, "hull", 0);
          return h;
        case "path":
          if (g = this.attachmentLoader.newPathAttachment(h, e), null != g) {
            g.closed = this.getValue(b, "closed", !1);
            g.constantSpeed = this.getValue(b, "constantSpeed", !0);
            c = b.vertexCount;
            this.readVertices(b, g, c << 1);
            c = a.Utils.newArray(c / 3, 0);
            for (h = 0;h < b.lengths.length;h++) {
              c[h++] = b.lengths[h] * f;
            }
            g.lengths = c;
            f = this.getValue(b, "color", null);
            null != f && g.color.setFromString(f);
            return g;
          }
      }
      return null;
    };
    b.prototype.readVertices = function(b, h, c) {
      var e = this.scale;
      h.worldVerticesLength = c;
      b = b.vertices;
      if (c == b.length) {
        if (1 != e) {
          c = 0;
          for (var f = b.length;c < f;c++) {
            b[c] *= e;
          }
        }
        h.vertices = a.Utils.toFloatArray(b);
      } else {
        var g = [], k = [];
        c = 0;
        for (f = b.length;c < f;) {
          var l = b[c++];
          k.push(l);
          for (l = c + 4 * l;c < l;c += 4) {
            k.push(b[c]), g.push(b[c + 1] * e), g.push(b[c + 2] * e), g.push(b[c + 3]);
          }
        }
        h.bones = k;
        h.vertices = a.Utils.toFloatArray(g);
      }
    };
    b.prototype.readAnimation = function(b, h, c) {
      var e = this.scale, f = [], g = 0;
      if (b.slots) {
        for (var k in b.slots) {
          var l = b.slots[k], p = c.findSlotIndex(k);
          if (-1 == p) {
            throw Error("Slot not found: " + k);
          }
          for (var u in l) {
            var v = l[u];
            if ("color" == u) {
              var y = new a.ColorTimeline(v.length);
              y.slotIndex = p;
              for (var x = 0, m = 0;m < v.length;m++) {
                var t = v[m], C = new a.Color;
                C.setFromString(t.color);
                y.setFrame(x, t.time, C.r, C.g, C.b, C.a);
                this.readCurve(t, y, x);
                x++;
              }
              f.push(y);
              g = Math.max(g, y.frames[(y.getFrameCount() - 1) * a.ColorTimeline.ENTRIES]);
            } else {
              u = "attachment";
              y = new a.AttachmentTimeline(v.length);
              y.slotIndex = p;
              for (m = x = 0;m < v.length;m++) {
                t = v[m], y.setFrame(x++, t.time, t.name);
              }
              f.push(y);
              g = Math.max(g, y.frames[y.getFrameCount() - 1]);
            }
          }
        }
      }
      if (b.bones) {
        for (var A in b.bones) {
          l = b.bones[A];
          C = c.findBoneIndex(A);
          if (-1 == C) {
            throw Error("Bone not found: " + A);
          }
          for (u in l) {
            if (v = l[u], "rotate" === u) {
              y = new a.RotateTimeline(v.length);
              y.boneIndex = C;
              for (m = x = 0;m < v.length;m++) {
                t = v[m], y.setFrame(x, t.time, t.angle), this.readCurve(t, y, x), x++;
              }
              f.push(y);
              g = Math.max(g, y.frames[(y.getFrameCount() - 1) * a.RotateTimeline.ENTRIES]);
            } else {
              if ("translate" === u || "scale" === u || "shear" === u) {
                p = 1;
                "scale" === u ? y = new a.ScaleTimeline(v.length) : "shear" === u ? y = new a.ShearTimeline(v.length) : (y = new a.TranslateTimeline(v.length), p = e);
                y.boneIndex = C;
                for (m = x = 0;m < v.length;m++) {
                  var t = v[m], D = this.getValue(t, "x", 0), F = this.getValue(t, "y", 0);
                  y.setFrame(x, t.time, D * p, F * p);
                  this.readCurve(t, y, x);
                  x++;
                }
                f.push(y);
                g = Math.max(g, y.frames[(y.getFrameCount() - 1) * a.TranslateTimeline.ENTRIES]);
              } else {
                throw Error("Invalid timeline type for a bone: " + u + " (" + A + ")");
              }
            }
          }
        }
      }
      if (b.ik) {
        for (var G in b.ik) {
          l = b.ik[G];
          x = c.findIkConstraint(G);
          y = new a.IkConstraintTimeline(l.length);
          y.ikConstraintIndex = c.ikConstraints.indexOf(x);
          for (m = x = 0;m < l.length;m++) {
            t = l[m], y.setFrame(x, t.time, this.getValue(t, "mix", 1), this.getValue(t, "bendPositive", !0) ? 1 : -1), this.readCurve(t, y, x), x++;
          }
          f.push(y);
          g = Math.max(g, y.frames[(y.getFrameCount() - 1) * a.IkConstraintTimeline.ENTRIES]);
        }
      }
      if (b.transform) {
        for (G in b.transform) {
          l = b.transform[G];
          x = c.findTransformConstraint(G);
          y = new a.TransformConstraintTimeline(l.length);
          y.transformConstraintIndex = c.transformConstraints.indexOf(x);
          for (m = x = 0;m < l.length;m++) {
            t = l[m], y.setFrame(x, t.time, this.getValue(t, "rotateMix", 1), this.getValue(t, "translateMix", 1), this.getValue(t, "scaleMix", 1), this.getValue(t, "shearMix", 1)), this.readCurve(t, y, x), x++;
          }
          f.push(y);
          g = Math.max(g, y.frames[(y.getFrameCount() - 1) * a.TransformConstraintTimeline.ENTRIES]);
        }
      }
      if (b.paths) {
        for (G in b.paths) {
          l = b.paths[G];
          A = c.findPathConstraintIndex(G);
          if (-1 == A) {
            throw Error("Path constraint not found: " + G);
          }
          C = c.pathConstraints[A];
          for (u in l) {
            if (v = l[u], "position" === u || "spacing" === u) {
              p = 1;
              if ("spacing" === u) {
                if (y = new a.PathConstraintSpacingTimeline(v.length), C.spacingMode == a.SpacingMode.Length || C.spacingMode == a.SpacingMode.Fixed) {
                  p = e;
                }
              } else {
                y = new a.PathConstraintPositionTimeline(v.length), C.positionMode == a.PositionMode.Fixed && (p = e);
              }
              y.pathConstraintIndex = A;
              for (m = x = 0;m < v.length;m++) {
                t = v[m], y.setFrame(x, t.time, this.getValue(t, u, 0) * p), this.readCurve(t, y, x), x++;
              }
              f.push(y);
              g = Math.max(g, y.frames[(y.getFrameCount() - 1) * a.PathConstraintPositionTimeline.ENTRIES]);
            } else {
              if ("mix" === u) {
                y = new a.PathConstraintMixTimeline(v.length);
                y.pathConstraintIndex = A;
                for (m = x = 0;m < v.length;m++) {
                  t = v[m], y.setFrame(x, t.time, this.getValue(t, "rotateMix", 1), this.getValue(t, "translateMix", 1)), this.readCurve(t, y, x), x++;
                }
                f.push(y);
                g = Math.max(g, y.frames[(y.getFrameCount() - 1) * a.PathConstraintMixTimeline.ENTRIES]);
              }
            }
          }
        }
      }
      if (b.deform) {
        for (var B in b.deform) {
          A = b.deform[B];
          C = c.findSkin(B);
          if (null == C) {
            throw Error("Skin not found: " + B);
          }
          for (k in A) {
            l = A[k];
            p = c.findSlotIndex(k);
            if (-1 == p) {
              throw Error("Slot not found: " + l.name);
            }
            for (u in l) {
              v = l[u];
              x = C.getAttachment(p, u);
              if (null == x) {
                throw Error("Deform attachment not found: " + v.name);
              }
              var D = null != x.bones, F = x.vertices, K = D ? F.length / 3 * 2 : F.length, y = new a.DeformTimeline(v.length);
              y.slotIndex = p;
              y.attachment = x;
              for (G = x = 0;G < v.length;G++) {
                var t = v[G], H, M = this.getValue(t, "vertices", null);
                if (null == M) {
                  H = D ? a.Utils.newFloatArray(K) : F;
                } else {
                  H = a.Utils.newFloatArray(K);
                  m = this.getValue(t, "offset", 0);
                  a.Utils.arrayCopy(M, 0, H, m, M.length);
                  if (1 != e) {
                    for (M = m + M.length;m < M;m++) {
                      H[m] *= e;
                    }
                  }
                  if (!D) {
                    for (m = 0;m < K;m++) {
                      H[m] += F[m];
                    }
                  }
                }
                y.setFrame(x, t.time, H);
                this.readCurve(t, y, x);
                x++;
              }
              f.push(y);
              g = Math.max(g, y.frames[y.getFrameCount() - 1]);
            }
          }
        }
      }
      e = b.drawOrder;
      null == e && (e = b.draworder);
      if (null != e) {
        y = new a.DrawOrderTimeline(e.length);
        k = c.slots.length;
        for (G = x = 0;G < e.length;G++) {
          u = e[G];
          B = null;
          v = this.getValue(u, "offsets", null);
          if (null != v) {
            B = a.Utils.newArray(k, -1);
            t = a.Utils.newArray(k - v.length, 0);
            for (m = A = l = 0;m < v.length;m++) {
              C = v[m];
              p = c.findSlotIndex(C.slot);
              if (-1 == p) {
                throw Error("Slot not found: " + C.slot);
              }
              for (;l != p;) {
                t[A++] = l++;
              }
              B[l + C.offset] = l++;
            }
            for (;l < k;) {
              t[A++] = l++;
            }
            for (m = k - 1;0 <= m;m--) {
              -1 == B[m] && (B[m] = t[--A]);
            }
          }
          y.setFrame(x++, u.time, B);
        }
        f.push(y);
        g = Math.max(g, y.frames[y.getFrameCount() - 1]);
      }
      if (b.events) {
        y = new a.EventTimeline(b.events.length);
        for (m = x = 0;m < b.events.length;m++) {
          e = b.events[m];
          k = c.findEvent(e.name);
          if (null == k) {
            throw Error("Event not found: " + e.name);
          }
          p = new a.Event(e.time, k);
          p.intValue = this.getValue(e, "int", k.intValue);
          p.floatValue = this.getValue(e, "float", k.floatValue);
          p.stringValue = this.getValue(e, "string", k.stringValue);
          y.setFrame(x++, p);
        }
        f.push(y);
        g = Math.max(g, y.frames[y.getFrameCount() - 1]);
      }
      if (isNaN(g)) {
        throw Error("Error while parsing animation, duration is NaN");
      }
      c.animations.push(new a.Animation(h, f, g));
    };
    b.prototype.readCurve = function(a, b, c) {
      a.curve && ("stepped" === a.curve ? b.setStepped(c) : "[object Array]" === Object.prototype.toString.call(a.curve) && (a = a.curve, b.setCurve(c, a[0], a[1], a[2], a[3])));
    };
    b.prototype.getValue = function(a, b, c) {
      return void 0 !== a[b] ? a[b] : c;
    };
    b.blendModeFromString = function(b) {
      b = b.toLowerCase();
      if ("normal" == b) {
        return a.BlendMode.Normal;
      }
      if ("additive" == b) {
        return a.BlendMode.Additive;
      }
      if ("multiply" == b) {
        return a.BlendMode.Multiply;
      }
      if ("screen" == b) {
        return a.BlendMode.Screen;
      }
      throw Error("Unknown blend mode: " + b);
    };
    b.positionModeFromString = function(b) {
      b = b.toLowerCase();
      if ("fixed" == b) {
        return a.PositionMode.Fixed;
      }
      if ("percent" == b) {
        return a.PositionMode.Percent;
      }
      throw Error("Unknown position mode: " + b);
    };
    b.spacingModeFromString = function(b) {
      b = b.toLowerCase();
      if ("length" == b) {
        return a.SpacingMode.Length;
      }
      if ("fixed" == b) {
        return a.SpacingMode.Fixed;
      }
      if ("percent" == b) {
        return a.SpacingMode.Percent;
      }
      throw Error("Unknown position mode: " + b);
    };
    b.rotateModeFromString = function(b) {
      b = b.toLowerCase();
      if ("tangent" == b) {
        return a.RotateMode.Tangent;
      }
      if ("chain" == b) {
        return a.RotateMode.Chain;
      }
      if ("chainscale" == b) {
        return a.RotateMode.ChainScale;
      }
      throw Error("Unknown rotate mode: " + b);
    };
    b.transformModeFromString = function(b) {
      b = b.toLowerCase();
      if ("normal" == b) {
        return a.TransformMode.Normal;
      }
      if ("onlytranslation" == b) {
        return a.TransformMode.OnlyTranslation;
      }
      if ("norotationorreflection" == b) {
        return a.TransformMode.NoRotationOrReflection;
      }
      if ("noscale" == b) {
        return a.TransformMode.NoScale;
      }
      if ("noscaleorreflection" == b) {
        return a.TransformMode.NoScaleOrReflection;
      }
      throw Error("Unknown transform mode: " + b);
    };
    return b;
  }();
  a.SkeletonJson = h;
  var l = function() {
    return function(a, g, h, c) {
      this.mesh = a;
      this.skin = g;
      this.slotIndex = h;
      this.parent = c;
    };
  }();
})(spine || (spine = {}));
(function(a) {
  var h = function() {
    function a(a) {
      this.attachments = [];
      if (null == a) {
        throw Error("name cannot be null.");
      }
      this.name = a;
    }
    a.prototype.addAttachment = function(a, g, h) {
      if (null == h) {
        throw Error("attachment cannot be null.");
      }
      var b = this.attachments;
      a >= b.length && (b.length = a + 1);
      b[a] || (b[a] = {});
      b[a][g] = h;
    };
    a.prototype.getAttachment = function(a, g) {
      return (a = this.attachments[a]) ? a[g] : null;
    };
    a.prototype.attachAll = function(a, g) {
      for (var b = 0, c = 0;c < a.slots.length;c++) {
        var e = a.slots[c], f = e.getAttachment();
        if (f && b < g.attachments.length) {
          var h = g.attachments[b], l;
          for (l in h) {
            if (f == h[l]) {
              f = this.getAttachment(b, l);
              null != f && e.setAttachment(f);
              break;
            }
          }
        }
        b++;
      }
    };
    return a;
  }();
  a.Skin = h;
})(spine || (spine = {}));
(function(a) {
  var h = function() {
    function h(b, g) {
      this.attachmentVertices = [];
      if (null == b) {
        throw Error("data cannot be null.");
      }
      if (null == g) {
        throw Error("bone cannot be null.");
      }
      this.data = b;
      this.bone = g;
      this.color = new a.Color;
      this.setToSetupPose();
    }
    h.prototype.getAttachment = function() {
      return this.attachment;
    };
    h.prototype.setAttachment = function(a) {
      this.attachment != a && (this.attachment = a, this.attachmentTime = this.bone.skeleton.time, this.attachmentVertices.length = 0);
    };
    h.prototype.setAttachmentTime = function(a) {
      this.attachmentTime = this.bone.skeleton.time - a;
    };
    h.prototype.getAttachmentTime = function() {
      return this.bone.skeleton.time - this.attachmentTime;
    };
    h.prototype.setToSetupPose = function() {
      this.color.setFromColor(this.data.color);
      null == this.data.attachmentName ? this.attachment = null : (this.attachment = null, this.setAttachment(this.bone.skeleton.getAttachment(this.data.index, this.data.attachmentName)));
    };
    return h;
  }();
  a.Slot = h;
})(spine || (spine = {}));
(function(a) {
  var h = function() {
    return function(h, b, g) {
      this.color = new a.Color(1, 1, 1, 1);
      if (0 > h) {
        throw Error("index must be >= 0.");
      }
      if (null == b) {
        throw Error("name cannot be null.");
      }
      if (null == g) {
        throw Error("boneData cannot be null.");
      }
      this.index = h;
      this.name = b;
      this.boneData = g;
    };
  }();
  a.SlotData = h;
})(spine || (spine = {}));
(function(a) {
  var h = function() {
    function a(a) {
      this._image = a;
    }
    a.prototype.getImage = function() {
      return this._image;
    };
    a.filterFromString = function(a) {
      switch(a.toLowerCase()) {
        case "nearest":
          return l.Nearest;
        case "linear":
          return l.Linear;
        case "mipmap":
          return l.MipMap;
        case "mipmapnearestnearest":
          return l.MipMapNearestNearest;
        case "mipmaplinearnearest":
          return l.MipMapLinearNearest;
        case "mipmapnearestlinear":
          return l.MipMapNearestLinear;
        case "mipmaplinearlinear":
          return l.MipMapLinearLinear;
        default:
          throw Error("Unknown texture filter " + a);
      }
    };
    a.wrapFromString = function(a) {
      switch(a.toLowerCase()) {
        case "mirroredtepeat":
          return b.MirroredRepeat;
        case "clamptoedge":
          return b.ClampToEdge;
        case "repeat":
          return b.Repeat;
        default:
          throw Error("Unknown texture wrap " + a);
      }
    };
    return a;
  }();
  a.Texture = h;
  (function(a) {
    a[a.Nearest = 9728] = "Nearest";
    a[a.Linear = 9729] = "Linear";
    a[a.MipMap = 9987] = "MipMap";
    a[a.MipMapNearestNearest = 9984] = "MipMapNearestNearest";
    a[a.MipMapLinearNearest = 9985] = "MipMapLinearNearest";
    a[a.MipMapNearestLinear = 9986] = "MipMapNearestLinear";
    a[a.MipMapLinearLinear = 9987] = "MipMapLinearLinear";
  })(a.TextureFilter || (a.TextureFilter = {}));
  var l = a.TextureFilter;
  (function(a) {
    a[a.MirroredRepeat = 33648] = "MirroredRepeat";
    a[a.ClampToEdge = 33071] = "ClampToEdge";
    a[a.Repeat = 10497] = "Repeat";
  })(a.TextureWrap || (a.TextureWrap = {}));
  var b = a.TextureWrap, h = function() {
    return function() {
      this.height = this.width = this.v2 = this.u2 = this.v = this.u = 0;
      this.rotate = !1;
      this.originalHeight = this.originalWidth = this.offsetY = this.offsetX = 0;
    };
  }();
  a.TextureRegion = h;
})(spine || (spine = {}));
(function(a) {
  var h = function() {
    function h(a, b) {
      this.pages = [];
      this.regions = [];
      this.load(a, b);
    }
    h.prototype.load = function(c, e) {
      if (null == e) {
        throw Error("textureLoader cannot be null.");
      }
      c = new l(c);
      for (var f = Array(4), h = null;;) {
        var k = c.readLine();
        if (null == k) {
          break;
        }
        k = k.trim();
        if (0 == k.length) {
          h = null;
        } else {
          if (h) {
            var w = new g;
            w.name = k;
            w.page = h;
            w.rotate = "true" == c.readValue();
            c.readTuple(f);
            var k = parseInt(f[0]), p = parseInt(f[1]);
            c.readTuple(f);
            var u = parseInt(f[0]), v = parseInt(f[1]);
            w.u = k / h.width;
            w.v = p / h.height;
            w.rotate ? (w.u2 = (k + v) / h.width, w.v2 = (p + u) / h.height) : (w.u2 = (k + u) / h.width, w.v2 = (p + v) / h.height);
            w.x = k;
            w.y = p;
            w.width = Math.abs(u);
            w.height = Math.abs(v);
            4 == c.readTuple(f) && 4 == c.readTuple(f) && c.readTuple(f);
            w.originalWidth = parseInt(f[0]);
            w.originalHeight = parseInt(f[1]);
            c.readTuple(f);
            w.offsetX = parseInt(f[0]);
            w.offsetY = parseInt(f[1]);
            w.index = parseInt(c.readValue());
            w.texture = h.texture;
            this.regions.push(w);
          } else {
            h = new b, h.name = k, 2 == c.readTuple(f) && (h.width = parseInt(f[0]), h.height = parseInt(f[1]), c.readTuple(f)), c.readTuple(f), h.minFilter = a.Texture.filterFromString(f[0]), h.magFilter = a.Texture.filterFromString(f[1]), w = c.readValue(), h.uWrap = a.TextureWrap.ClampToEdge, h.vWrap = a.TextureWrap.ClampToEdge, "x" == w ? h.uWrap = a.TextureWrap.Repeat : "y" == w ? h.vWrap = a.TextureWrap.Repeat : "xy" == w && (h.uWrap = h.vWrap = a.TextureWrap.Repeat), h.texture = e(k), h.texture.setFilters(h.minFilter, 
            h.magFilter), h.texture.setWraps(h.uWrap, h.vWrap), h.width = h.texture.getImage().width, h.height = h.texture.getImage().height, this.pages.push(h);
          }
        }
      }
    };
    h.prototype.findRegion = function(a) {
      for (var b = 0;b < this.regions.length;b++) {
        if (this.regions[b].name == a) {
          return this.regions[b];
        }
      }
      return null;
    };
    h.prototype.dispose = function() {
      for (var a = 0;a < this.pages.length;a++) {
        this.pages[a].texture.dispose();
      }
    };
    return h;
  }();
  a.TextureAtlas = h;
  var l = function() {
    function a(a) {
      this.index = 0;
      this.lines = a.split(/\r\n|\r|\n/);
    }
    a.prototype.readLine = function() {
      return this.index >= this.lines.length ? null : this.lines[this.index++];
    };
    a.prototype.readValue = function() {
      var a = this.readLine(), b = a.indexOf(":");
      if (-1 == b) {
        throw Error("Invalid line: " + a);
      }
      return a.substring(b + 1).trim();
    };
    a.prototype.readTuple = function(a) {
      var b = this.readLine(), c = b.indexOf(":");
      if (-1 == c) {
        throw Error("Invalid line: " + b);
      }
      for (var g = 0, c = c + 1;3 > g;g++) {
        var h = b.indexOf(",", c);
        if (-1 == h) {
          break;
        }
        a[g] = b.substr(c, h - c).trim();
        c = h + 1;
      }
      a[g] = b.substring(c).trim();
      return g + 1;
    };
    return a;
  }(), b = function() {
    return function() {
    };
  }();
  a.TextureAtlasPage = b;
  var g = function(a) {
    function b() {
      a.apply(this, arguments);
    }
    __extends(b, a);
    return b;
  }(a.TextureRegion);
  a.TextureAtlasRegion = g;
})(spine || (spine = {}));
(function(a) {
  var h = function() {
    function h(b, g) {
      this.shearMix = this.scaleMix = this.translateMix = this.rotateMix = 0;
      this.temp = new a.Vector2;
      if (null == b) {
        throw Error("data cannot be null.");
      }
      if (null == g) {
        throw Error("skeleton cannot be null.");
      }
      this.data = b;
      this.rotateMix = b.rotateMix;
      this.translateMix = b.translateMix;
      this.scaleMix = b.scaleMix;
      this.shearMix = b.shearMix;
      this.bones = [];
      for (var h = 0;h < b.bones.length;h++) {
        this.bones.push(g.findBone(b.bones[h].name));
      }
      this.target = g.findBone(b.target.name);
    }
    h.prototype.apply = function() {
      this.update();
    };
    h.prototype.update = function() {
      for (var b = this.rotateMix, g = this.translateMix, h = this.scaleMix, c = this.shearMix, e = this.target, f = e.a, l = e.b, r = e.c, w = e.d, p = 0 < f * w - l * r ? a.MathUtils.degRad : -a.MathUtils.degRad, u = this.data.offsetRotation * p, p = this.data.offsetShearY * p, v = this.bones, y = 0, x = v.length;y < x;y++) {
        var m = v[y], t = !1;
        if (0 != b) {
          var C = m.a, t = m.b, A = m.c, D = m.d, F = Math.atan2(r, f) - Math.atan2(A, C) + u;
          F > a.MathUtils.PI ? F -= a.MathUtils.PI2 : F < -a.MathUtils.PI && (F += a.MathUtils.PI2);
          var F = F * b, G = Math.cos(F), F = Math.sin(F);
          m.a = G * C - F * A;
          m.b = G * t - F * D;
          m.c = F * C + G * A;
          m.d = F * t + G * D;
          t = !0;
        }
        0 != g && (t = this.temp, e.localToWorld(t.set(this.data.offsetX, this.data.offsetY)), m.worldX += (t.x - m.worldX) * g, m.worldY += (t.y - m.worldY) * g, t = !0);
        0 < h && (t = Math.sqrt(m.a * m.a + m.c * m.c), D = Math.sqrt(f * f + r * r), 1E-5 < t && (t = (t + (D - t + this.data.offsetScaleX) * h) / t), m.a *= t, m.c *= t, t = Math.sqrt(m.b * m.b + m.d * m.d), D = Math.sqrt(l * l + w * w), 1E-5 < t && (t = (t + (D - t + this.data.offsetScaleY) * h) / t), m.b *= t, m.d *= t, t = !0);
        0 < c && (t = m.b, D = m.d, C = Math.atan2(D, t), F = Math.atan2(w, l) - Math.atan2(r, f) - (C - Math.atan2(m.c, m.a)), F > a.MathUtils.PI ? F -= a.MathUtils.PI2 : F < -a.MathUtils.PI && (F += a.MathUtils.PI2), F = C + (F + p) * c, t = Math.sqrt(t * t + D * D), m.b = Math.cos(F) * t, m.d = Math.sin(F) * t, t = !0);
        t && (m.appliedValid = !1);
      }
    };
    h.prototype.getOrder = function() {
      return this.data.order;
    };
    return h;
  }();
  a.TransformConstraint = h;
})(spine || (spine = {}));
(function(a) {
  var h = function() {
    return function(a) {
      this.order = 0;
      this.bones = [];
      this.offsetShearY = this.offsetScaleY = this.offsetScaleX = this.offsetY = this.offsetX = this.offsetRotation = this.shearMix = this.scaleMix = this.translateMix = this.rotateMix = 0;
      if (null == a) {
        throw Error("name cannot be null.");
      }
      this.name = a;
    };
  }();
  a.TransformConstraintData = h;
})(spine || (spine = {}));
(function(a) {
  var h = function() {
    function a() {
      this.array = [];
    }
    a.prototype.add = function(a) {
      var b = this.contains(a);
      this.array[a | 0] = a | 0;
      return !b;
    };
    a.prototype.contains = function(a) {
      return void 0 != this.array[a | 0];
    };
    a.prototype.remove = function(a) {
      this.array[a | 0] = void 0;
    };
    a.prototype.clear = function() {
      this.array.length = 0;
    };
    return a;
  }();
  a.IntSet = h;
  h = function() {
    function a(a, g, h, c) {
      void 0 === a && (a = 0);
      void 0 === g && (g = 0);
      void 0 === h && (h = 0);
      void 0 === c && (c = 0);
      this.r = a;
      this.g = g;
      this.b = h;
      this.a = c;
    }
    a.prototype.set = function(a, g, h, c) {
      this.r = a;
      this.g = g;
      this.b = h;
      this.a = c;
      this.clamp();
      return this;
    };
    a.prototype.setFromColor = function(a) {
      this.r = a.r;
      this.g = a.g;
      this.b = a.b;
      this.a = a.a;
      return this;
    };
    a.prototype.setFromString = function(a) {
      a = "#" == a.charAt(0) ? a.substr(1) : a;
      this.r = parseInt(a.substr(0, 2), 16) / 255;
      this.g = parseInt(a.substr(2, 2), 16) / 255;
      this.b = parseInt(a.substr(4, 2), 16) / 255;
      this.a = (8 != a.length ? 255 : parseInt(a.substr(6, 2), 16)) / 255;
      return this;
    };
    a.prototype.add = function(a, g, h, c) {
      this.r += a;
      this.g += g;
      this.b += h;
      this.a += c;
      this.clamp();
      return this;
    };
    a.prototype.clamp = function() {
      0 > this.r ? this.r = 0 : 1 < this.r && (this.r = 1);
      0 > this.g ? this.g = 0 : 1 < this.g && (this.g = 1);
      0 > this.b ? this.b = 0 : 1 < this.b && (this.b = 1);
      0 > this.a ? this.a = 0 : 1 < this.a && (this.a = 1);
      return this;
    };
    a.WHITE = new a(1, 1, 1, 1);
    a.RED = new a(1, 0, 0, 1);
    a.GREEN = new a(0, 1, 0, 1);
    a.BLUE = new a(0, 0, 1, 1);
    a.MAGENTA = new a(1, 0, 1, 1);
    return a;
  }();
  a.Color = h;
  h = function() {
    function a() {
    }
    a.clamp = function(a, g, h) {
      return a < g ? g : a > h ? h : a;
    };
    a.cosDeg = function(b) {
      return Math.cos(b * a.degRad);
    };
    a.sinDeg = function(b) {
      return Math.sin(b * a.degRad);
    };
    a.signum = function(a) {
      return 0 < a ? 1 : 0 > a ? -1 : 0;
    };
    a.toInt = function(a) {
      return 0 < a ? Math.floor(a) : Math.ceil(a);
    };
    a.cbrt = function(a) {
      var b = Math.pow(Math.abs(a), 1 / 3);
      return 0 > a ? -b : b;
    };
    a.PI = 3.1415927;
    a.PI2 = 2 * a.PI;
    a.radiansToDegrees = 180 / a.PI;
    a.radDeg = a.radiansToDegrees;
    a.degreesToRadians = a.PI / 180;
    a.degRad = a.degreesToRadians;
    return a;
  }();
  a.MathUtils = h;
  h = function() {
    function a() {
    }
    a.arrayCopy = function(a, g, h, c, e) {
      for (var b = g;b < g + e;b++, c++) {
        h[c] = a[b];
      }
    };
    a.setArraySize = function(a, g, h) {
      void 0 === h && (h = 0);
      var b = a.length;
      if (b == g) {
        return a;
      }
      a.length = g;
      if (b < g) {
        for (;b < g;b++) {
          a[b] = h;
        }
      }
      return a;
    };
    a.ensureArrayCapacity = function(b, g, h) {
      void 0 === h && (h = 0);
      return b.length >= g ? b : a.setArraySize(b, g, h);
    };
    a.newArray = function(a, g) {
      for (var b = Array(a), c = 0;c < a;c++) {
        b[c] = g;
      }
      return b;
    };
    a.newFloatArray = function(b) {
      if (a.SUPPORTS_TYPED_ARRAYS) {
        return new Float32Array(b);
      }
      b = Array(b);
      for (var g = 0;g < b.length;g++) {
        b[g] = 0;
      }
      return b;
    };
    a.toFloatArray = function(b) {
      return a.SUPPORTS_TYPED_ARRAYS ? new Float32Array(b) : b;
    };
    a.SUPPORTS_TYPED_ARRAYS = "undefined" !== typeof Float32Array;
    return a;
  }();
  a.Utils = h;
  h = function() {
    function a() {
    }
    a.logBones = function(a) {
      for (var b = 0;b < a.bones.length;b++) {
        var h = a.bones[b];
        console.log(h.data.name + ", " + h.a + ", " + h.b + ", " + h.c + ", " + h.d + ", " + h.worldX + ", " + h.worldY);
      }
    };
    return a;
  }();
  a.DebugUtils = h;
  h = function() {
    function a(a) {
      this.items = [];
      this.instantiator = a;
    }
    a.prototype.obtain = function() {
      return 0 < this.items.length ? this.items.pop() : this.instantiator();
    };
    a.prototype.free = function(a) {
      a.reset && a.reset();
      this.items.push(a);
    };
    a.prototype.freeAll = function(a) {
      for (var b = 0;b < a.length;b++) {
        a[b].reset && a[b].reset(), this.items[b] = a[b];
      }
    };
    a.prototype.clear = function() {
      this.items.length = 0;
    };
    return a;
  }();
  a.Pool = h;
  h = function() {
    function a(a, g) {
      void 0 === a && (a = 0);
      void 0 === g && (g = 0);
      this.x = a;
      this.y = g;
    }
    a.prototype.set = function(a, g) {
      this.x = a;
      this.y = g;
      return this;
    };
    a.prototype.length = function() {
      var a = this.x, g = this.y;
      return Math.sqrt(a * a + g * g);
    };
    a.prototype.normalize = function() {
      var a = this.length();
      0 != a && (this.x /= a, this.y /= a);
      return this;
    };
    return a;
  }();
  a.Vector2 = h;
  h = function() {
    function a() {
      this.maxDelta = .064;
      this.totalTime = this.delta = this.framesPerSecond = 0;
      this.lastTime = Date.now() / 1E3;
      this.frameTime = this.frameCount = 0;
    }
    a.prototype.update = function() {
      var a = Date.now() / 1E3;
      this.delta = a - this.lastTime;
      this.frameTime += this.delta;
      this.totalTime += this.delta;
      this.delta > this.maxDelta && (this.delta = this.maxDelta);
      this.lastTime = a;
      this.frameCount++;
      1 < this.frameTime && (this.framesPerSecond = this.frameCount / this.frameTime, this.frameCount = this.frameTime = 0);
    };
    return a;
  }();
  a.TimeKeeper = h;
})(spine || (spine = {}));
(function(a) {
  (function(h) {
    var l = function(a) {
      function b(b) {
        void 0 === b && (b = "");
        a.call(this, function(a) {
          return new h.ThreeJsTexture(a);
        }, b);
      }
      __extends(b, a);
      return b;
    }(a.AssetManager);
    h.AssetManager = l;
  })(a.threejs || (a.threejs = {}));
})(spine || (spine = {}));
(function(a) {
  (function(a) {
    var h = function() {
      function a(b, h) {
        void 0 === h && (h = 10920);
        this.indicesLength = this.verticesLength = 0;
        if (10920 < h) {
          throw Error("Can't have more than 10920 triangles per batch: " + h);
        }
        var c = this.vertices = new Float32Array(h * a.VERTEX_SIZE);
        h = this.indices = new Uint16Array(3 * h);
        this.mesh = b;
        var e = new THREE.BufferGeometry, c = this.vertexBuffer = new THREE.InterleavedBuffer(c, a.VERTEX_SIZE);
        c.dynamic = !0;
        e.addAttribute("position", new THREE.InterleavedBufferAttribute(c, 3, 0, !1));
        e.addAttribute("color", new THREE.InterleavedBufferAttribute(c, 4, 3, !1));
        e.addAttribute("uv", new THREE.InterleavedBufferAttribute(c, 2, 7, !1));
        e.setIndex(new THREE.BufferAttribute(h, 1));
        e.getIndex().dynamic = !0;
        e.drawRange.start = 0;
        e.drawRange.count = 0;
        b.geometry = e;
      }
      a.prototype.begin = function() {
        this.indicesLength = this.verticesLength = 0;
      };
      a.prototype.batch = function(b, h, c) {
        void 0 === c && (c = 0);
        for (var e = this.verticesLength / a.VERTEX_SIZE, f = this.vertices, g = this.verticesLength, k = 0;k < b.length;) {
          f[g++] = b[k++], f[g++] = b[k++], f[g++] = c, f[g++] = b[k++], f[g++] = b[k++], f[g++] = b[k++], f[g++] = b[k++], f[g++] = b[k++], f[g++] = b[k++];
        }
        this.verticesLength = g;
        b = this.indices;
        g = this.indicesLength;
        for (k = 0;k < h.length;g++, k++) {
          b[g] = h[k] + e;
        }
        this.indicesLength += h.length;
      };
      a.prototype.end = function() {
        this.vertexBuffer.needsUpdate = !0;
        this.vertexBuffer.updateRange.offset = 0;
        this.vertexBuffer.updateRange.count = this.verticesLength;
        var a = this.mesh.geometry;
        a.getIndex().needsUpdate = !0;
        a.getIndex().updateRange.offset = 0;
        a.getIndex().updateRange.count = this.indicesLength;
        a.drawRange.start = 0;
        a.drawRange.count = this.indicesLength;
      };
      a.VERTEX_SIZE = 9;
      return a;
    }();
    a.MeshBatcher = h;
  })(a.threejs || (a.threejs = {}));
})(spine || (spine = {}));
(function(a) {
  (function(h) {
    var l = function(b) {
      function g(g) {
        b.call(this);
        this.zOffset = .1;
        this.skeleton = new a.Skeleton(g);
        g = new a.AnimationStateData(g);
        this.state = new a.AnimationState(g);
        g = this.material = new THREE.MeshBasicMaterial;
        g.side = THREE.DoubleSide;
        g.transparent = !0;
        g.alphaTest = .5;
        this.batcher = new h.MeshBatcher(this);
      }
      __extends(g, b);
      g.prototype.update = function(a) {
        var b = this.state, e = this.skeleton;
        b.update(a);
        b.apply(e);
        e.updateWorldTransform();
        this.updateGeometry();
      };
      g.prototype.updateGeometry = function() {
        var b, c, e = this.skeleton.drawOrder, f = this.batcher;
        f.begin();
        for (var h = 0, l = this.zOffset, w = 0, p = e.length;w < p;w++) {
          b = e[w];
          c = b.getAttachment();
          var u;
          if (c instanceof a.RegionAttachment) {
            u = c, b = u.updateWorldVertices(b, !1), c = g.QUAD_TRIANGLES, u = u.region.renderObject.texture;
          } else {
            if (c instanceof a.MeshAttachment) {
              u = c, b = u.updateWorldVertices(b, !1), c = u.triangles, u = u.region.renderObject.texture;
            } else {
              continue;
            }
          }
          if (null != u) {
            if (!this.material.map) {
              var v = this.material;
              v.map = u.texture;
              v.needsUpdate = !0;
            }
            this.batcher.batch(b, c, h);
            h += l;
          }
        }
        f.end();
      };
      g.createMesh = function(a) {
        var b = new THREE.BufferGeometry, e = new Float32Array(1024);
        e.set([-200, -200, 1, 0, 0, 1, 0, 0, 200, -200, 0, 1, 0, 1, 1, 0, 200, 200, 0, 0, 1, 1, 1, 1, -200, 200, 1, 1, 0, .1, 0, 1], 0);
        var e = new THREE.InterleavedBuffer(e, 8), f = new THREE.InterleavedBufferAttribute(e, 2, 0, !1);
        b.addAttribute("position", f);
        f = new THREE.InterleavedBufferAttribute(e, 4, 2, !1);
        b.addAttribute("color", f);
        new THREE.InterleavedBufferAttribute(e, 2, 6, !1);
        b.addAttribute("uv", f);
        e = new Uint16Array(1024);
        e.set([0, 1, 2, 2, 3, 0], 0);
        b.setIndex(new THREE.BufferAttribute(e, 1));
        b.drawRange.start = 0;
        b.drawRange.count = 6;
        e = new THREE.MeshBasicMaterial;
        e.vertexColors = THREE.VertexColors;
        e.transparent = !0;
        e.map = a;
        return new THREE.Mesh(b, e);
      };
      g.QUAD_TRIANGLES = [0, 1, 2, 2, 3, 0];
      return g;
    }(THREE.Mesh);
    h.SkeletonMesh = l;
  })(a.threejs || (a.threejs = {}));
})(spine || (spine = {}));
(function(a) {
  (function(h) {
    var l = function(b) {
      function g(a) {
        b.call(this, a);
        this.texture = new THREE.Texture(a);
        this.texture.flipY = !1;
        this.texture.needsUpdate = !0;
      }
      __extends(g, b);
      g.prototype.setFilters = function(a, b) {
        this.texture.minFilter = g.toThreeJsTextureFilter(a);
        this.texture.magFilter = g.toThreeJsTextureFilter(b);
      };
      g.prototype.setWraps = function(a, b) {
        this.texture.wrapS = g.toThreeJsTextureWrap(a);
        this.texture.wrapT = g.toThreeJsTextureWrap(b);
      };
      g.prototype.dispose = function() {
        this.texture.dispose();
      };
      g.toThreeJsTextureFilter = function(b) {
        if (b === a.TextureFilter.Linear) {
          return THREE.LinearFilter;
        }
        if (b === a.TextureFilter.MipMap) {
          return THREE.LinearMipMapLinearFilter;
        }
        if (b === a.TextureFilter.MipMapLinearNearest) {
          return THREE.LinearMipMapNearestFilter;
        }
        if (b === a.TextureFilter.MipMapNearestLinear) {
          return THREE.NearestMipMapLinearFilter;
        }
        if (b === a.TextureFilter.MipMapNearestNearest) {
          return THREE.NearestMipMapNearestFilter;
        }
        if (b === a.TextureFilter.Nearest) {
          return THREE.NearestFilter;
        }
        throw Error("Unknown texture filter: " + b);
      };
      g.toThreeJsTextureWrap = function(b) {
        if (b === a.TextureWrap.ClampToEdge) {
          return THREE.ClampToEdgeWrapping;
        }
        if (b === a.TextureWrap.MirroredRepeat) {
          return THREE.MirroredRepeatWrapping;
        }
        if (b === a.TextureWrap.Repeat) {
          return THREE.RepeatWrapping;
        }
        throw Error("Unknown texture wrap: " + b);
      };
      return g;
    }(a.Texture);
    h.ThreeJsTexture = l;
  })(a.threejs || (a.threejs = {}));
})(spine || (spine = {}));
(function(a) {
  "object" === typeof exports && "undefined" !== typeof module ? module.exports = a() : "function" === typeof define && define.amd ? define([], a) : ("undefined" !== typeof window ? window : "undefined" !== typeof global ? global : "undefined" !== typeof self ? self : this).opentype = a();
})(function() {
  return function h(l, b, g) {
    function k(e, q) {
      if (!b[e]) {
        if (!l[e]) {
          var f = "function" == typeof require && require;
          if (!q && f) {
            return f(e, !0);
          }
          if (c) {
            return c(e, !0);
          }
          q = Error("Cannot find module '" + e + "'");
          throw q.code = "MODULE_NOT_FOUND", q;
        }
        q = b[e] = {exports:{}};
        l[e][0].call(q.exports, function(b) {
          var c = l[e][1][b];
          return k(c ? c : b);
        }, q, q.exports, h, l, b, g);
      }
      return b[e].exports;
    }
    for (var c = "function" == typeof require && require, e = 0;e < g.length;e++) {
      k(g[e]);
    }
    return k;
  }({1:[function(h, l, b) {
    function g() {
      this.table = new Uint16Array(16);
      this.trans = new Uint16Array(288);
    }
    function k(b, c) {
      this.source = b;
      this.bitcount = this.tag = this.sourceIndex = 0;
      this.dest = c;
      this.destLen = 0;
      this.ltree = new g;
      this.dtree = new g;
    }
    function c(b, c, e, f) {
      var g;
      for (g = 0;e > g;++g) {
        b[g] = 0;
      }
      for (g = 0;30 - e > g;++g) {
        b[g + e] = g / e | 0;
      }
      e = f;
      for (g = 0;30 > g;++g) {
        c[g] = e, e += 1 << b[g];
      }
    }
    function e(b, c, e, f) {
      var g, h;
      for (g = 0;16 > g;++g) {
        b.table[g] = 0;
      }
      for (g = 0;f > g;++g) {
        b.table[c[e + g]]++;
      }
      for (g = h = b.table[0] = 0;16 > g;++g) {
        D[g] = h, h += b.table[g];
      }
      for (g = 0;f > g;++g) {
        c[e + g] && (b.trans[D[c[e + g]]++] = g);
      }
    }
    function f(b, c, e) {
      if (!c) {
        return e;
      }
      for (;24 > b.bitcount;) {
        b.tag |= b.source[b.sourceIndex++] << b.bitcount, b.bitcount += 8;
      }
      var f = b.tag & 65535 >>> 16 - c;
      return b.tag >>>= c, b.bitcount -= c, f + e;
    }
    function q(b, c) {
      for (;24 > b.bitcount;) {
        b.tag |= b.source[b.sourceIndex++] << b.bitcount, b.bitcount += 8;
      }
      var e = 0, f = 0, g = 0, h = b.tag;
      do {
        f = 2 * f + (1 & h), h >>>= 1, ++g, e += c.table[g], f -= c.table[g];
      } while (0 <= f);
      return b.tag = h, b.bitcount -= g, c.trans[e + f];
    }
    function r(b, c, e) {
      for (;;) {
        var g = q(b, c);
        if (256 === g) {
          return w;
        }
        if (256 > g) {
          b.dest[b.destLen++] = g;
        } else {
          var h, k, g = g - 257, g = f(b, v[g], y[g]);
          h = q(b, e);
          for (k = h = b.destLen - f(b, x[h], m[h]);h + g > k;++k) {
            b.dest[b.destLen++] = b.dest[k];
          }
        }
      }
    }
    var w = 0, p = new g, u = new g, v = new Uint8Array(30), y = new Uint16Array(30), x = new Uint8Array(30), m = new Uint16Array(30), t = new Uint8Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]), C = new g, A = new Uint8Array(320), D = new Uint16Array(16);
    (function(b, c) {
      var e;
      for (e = 0;7 > e;++e) {
        b.table[e] = 0;
      }
      b.table[7] = 24;
      b.table[8] = 152;
      b.table[9] = 112;
      for (e = 0;24 > e;++e) {
        b.trans[e] = 256 + e;
      }
      for (e = 0;144 > e;++e) {
        b.trans[24 + e] = e;
      }
      for (e = 0;8 > e;++e) {
        b.trans[168 + e] = 280 + e;
      }
      for (e = 0;112 > e;++e) {
        b.trans[176 + e] = 144 + e;
      }
      for (e = 0;5 > e;++e) {
        c.table[e] = 0;
      }
      c.table[5] = 32;
      for (e = 0;32 > e;++e) {
        c.trans[e] = e;
      }
    })(p, u);
    c(v, y, 4, 3);
    c(x, m, 2, 1);
    v[28] = 0;
    y[28] = 258;
    l.exports = function(b, c) {
      var g;
      b = new k(b, c);
      do {
        c = b;
        c.bitcount-- || (c.tag = c.source[c.sourceIndex++], c.bitcount = 7);
        g = 1 & c.tag;
        switch(c = (c.tag >>>= 1, g), f(b, 2, 0)) {
          case 0:
            var h, m = h = void 0;
            for (g = b;8 < g.bitcount;) {
              g.sourceIndex--, g.bitcount -= 8;
            }
            if (m = g.source[g.sourceIndex + 1], m = 256 * m + g.source[g.sourceIndex], h = g.source[g.sourceIndex + 3], h = 256 * h + g.source[g.sourceIndex + 2], m !== (65535 & ~h)) {
              g = -3;
            } else {
              g.sourceIndex += 4;
              for (h = m;h;--h) {
                g.dest[g.destLen++] = g.source[g.sourceIndex++];
              }
              g = (g.bitcount = 0, w);
            }
            break;
          case 1:
            g = r(b, p, u);
            break;
          case 2:
            var l, v, m = b, y = b.ltree, x = b.dtree;
            h = f(m, 5, 257);
            g = f(m, 5, 1);
            l = f(m, 4, 4);
            for (v = 0;19 > v;++v) {
              A[v] = 0;
            }
            for (v = 0;l > v;++v) {
              var D = f(m, 3, 0);
              A[t[v]] = D;
            }
            e(C, A, 0, 19);
            for (v = 0;h + g > v;) {
              switch(l = q(m, C), l) {
                case 16:
                  D = A[v - 1];
                  for (l = f(m, 2, 3);l;--l) {
                    A[v++] = D;
                  }
                  break;
                case 17:
                  for (l = f(m, 3, 3);l;--l) {
                    A[v++] = 0;
                  }
                  break;
                case 18:
                  for (l = f(m, 7, 11);l;--l) {
                    A[v++] = 0;
                  }
                  break;
                default:
                  A[v++] = l;
              }
            }
            e(y, A, 0, h);
            e(x, A, h, g);
            g = r(b, b.ltree, b.dtree);
            break;
          default:
            g = -3;
        }
        if (g !== w) {
          throw Error("Data error");
        }
      } while (!c);
      return b.destLen < b.dest.length ? "function" == typeof b.dest.slice ? b.dest.slice(0, b.destLen) : b.dest.subarray(0, b.destLen) : b.dest;
    };
  }, {}], 2:[function(h, l, b) {
    b.fail = function(b) {
      throw Error(b);
    };
    b.argument = function(g, h) {
      g || b.fail(h);
    };
    b.assert = b.argument;
  }, {}], 3:[function(h, l, b) {
    b.line = function(b, h, c, e, f) {
      b.beginPath();
      b.moveTo(h, c);
      b.lineTo(e, f);
      b.stroke();
    };
  }, {}], 4:[function(h, l, b) {
    function g(b) {
      this.font = b;
    }
    function k(b) {
      this.cmap = b;
    }
    function c(b, c) {
      this.encoding = b;
      this.charset = c;
    }
    function e(c) {
      var e;
      switch(c.version) {
        case 1:
          this.names = b.standardNames.slice();
          break;
        case 2:
          this.names = Array(c.numberOfGlyphs);
          for (e = 0;e < c.numberOfGlyphs;e++) {
            this.names[e] = c.glyphNameIndex[e] < b.standardNames.length ? b.standardNames[c.glyphNameIndex[e]] : c.names[c.glyphNameIndex[e] - b.standardNames.length];
          }
          break;
        case 2.5:
          this.names = Array(c.numberOfGlyphs);
          for (e = 0;e < c.numberOfGlyphs;e++) {
            this.names[e] = b.standardNames[e + c.glyphNameIndex[e]];
          }
          break;
        case 3:
          this.names = [];
      }
    }
    g.prototype.charToGlyphIndex = function(b) {
      b = b.charCodeAt(0);
      var c = this.font.glyphs;
      if (!c) {
        return null;
      }
      for (var e = 0;e < c.length;e += 1) {
        for (var f = c.get(e), g = 0;g < f.unicodes.length;g += 1) {
          if (f.unicodes[g] === b) {
            return e;
          }
        }
      }
    };
    k.prototype.charToGlyphIndex = function(b) {
      return this.cmap.glyphIndexMap[b.charCodeAt(0)] || 0;
    };
    c.prototype.charToGlyphIndex = function(b) {
      b = b.charCodeAt(0);
      return this.charset.indexOf(this.encoding[b]);
    };
    e.prototype.nameToGlyphIndex = function(b) {
      return this.names.indexOf(b);
    };
    e.prototype.glyphIndexToName = function(b) {
      return this.names[b];
    };
    b.cffStandardStrings = ".notdef;space;exclam;quotedbl;numbersign;dollar;percent;ampersand;quoteright;parenleft;parenright;asterisk;plus;comma;hyphen;period;slash;zero;one;two;three;four;five;six;seven;eight;nine;colon;semicolon;less;equal;greater;question;at;A;B;C;D;E;F;G;H;I;J;K;L;M;N;O;P;Q;R;S;T;U;V;W;X;Y;Z;bracketleft;backslash;bracketright;asciicircum;underscore;quoteleft;a;b;c;d;e;f;g;h;i;j;k;l;m;n;o;p;q;r;s;t;u;v;w;x;y;z;braceleft;bar;braceright;asciitilde;exclamdown;cent;sterling;fraction;yen;florin;section;currency;quotesingle;quotedblleft;guillemotleft;guilsinglleft;guilsinglright;fi;fl;endash;dagger;daggerdbl;periodcentered;paragraph;bullet;quotesinglbase;quotedblbase;quotedblright;guillemotright;ellipsis;perthousand;questiondown;grave;acute;circumflex;tilde;macron;breve;dotaccent;dieresis;ring;cedilla;hungarumlaut;ogonek;caron;emdash;AE;ordfeminine;Lslash;Oslash;OE;ordmasculine;ae;dotlessi;lslash;oslash;oe;germandbls;onesuperior;logicalnot;mu;trademark;Eth;onehalf;plusminus;Thorn;onequarter;divide;brokenbar;degree;thorn;threequarters;twosuperior;registered;minus;eth;multiply;threesuperior;copyright;Aacute;Acircumflex;Adieresis;Agrave;Aring;Atilde;Ccedilla;Eacute;Ecircumflex;Edieresis;Egrave;Iacute;Icircumflex;Idieresis;Igrave;Ntilde;Oacute;Ocircumflex;Odieresis;Ograve;Otilde;Scaron;Uacute;Ucircumflex;Udieresis;Ugrave;Yacute;Ydieresis;Zcaron;aacute;acircumflex;adieresis;agrave;aring;atilde;ccedilla;eacute;ecircumflex;edieresis;egrave;iacute;icircumflex;idieresis;igrave;ntilde;oacute;ocircumflex;odieresis;ograve;otilde;scaron;uacute;ucircumflex;udieresis;ugrave;yacute;ydieresis;zcaron;exclamsmall;Hungarumlautsmall;dollaroldstyle;dollarsuperior;ampersandsmall;Acutesmall;parenleftsuperior;parenrightsuperior;266 ff;onedotenleader;zerooldstyle;oneoldstyle;twooldstyle;threeoldstyle;fouroldstyle;fiveoldstyle;sixoldstyle;sevenoldstyle;eightoldstyle;nineoldstyle;commasuperior;threequartersemdash;periodsuperior;questionsmall;asuperior;bsuperior;centsuperior;dsuperior;esuperior;isuperior;lsuperior;msuperior;nsuperior;osuperior;rsuperior;ssuperior;tsuperior;ff;ffi;ffl;parenleftinferior;parenrightinferior;Circumflexsmall;hyphensuperior;Gravesmall;Asmall;Bsmall;Csmall;Dsmall;Esmall;Fsmall;Gsmall;Hsmall;Ismall;Jsmall;Ksmall;Lsmall;Msmall;Nsmall;Osmall;Psmall;Qsmall;Rsmall;Ssmall;Tsmall;Usmall;Vsmall;Wsmall;Xsmall;Ysmall;Zsmall;colonmonetary;onefitted;rupiah;Tildesmall;exclamdownsmall;centoldstyle;Lslashsmall;Scaronsmall;Zcaronsmall;Dieresissmall;Brevesmall;Caronsmall;Dotaccentsmall;Macronsmall;figuredash;hypheninferior;Ogoneksmall;Ringsmall;Cedillasmall;questiondownsmall;oneeighth;threeeighths;fiveeighths;seveneighths;onethird;twothirds;zerosuperior;foursuperior;fivesuperior;sixsuperior;sevensuperior;eightsuperior;ninesuperior;zeroinferior;oneinferior;twoinferior;threeinferior;fourinferior;fiveinferior;sixinferior;seveninferior;eightinferior;nineinferior;centinferior;dollarinferior;periodinferior;commainferior;Agravesmall;Aacutesmall;Acircumflexsmall;Atildesmall;Adieresissmall;Aringsmall;AEsmall;Ccedillasmall;Egravesmall;Eacutesmall;Ecircumflexsmall;Edieresissmall;Igravesmall;Iacutesmall;Icircumflexsmall;Idieresissmall;Ethsmall;Ntildesmall;Ogravesmall;Oacutesmall;Ocircumflexsmall;Otildesmall;Odieresissmall;OEsmall;Oslashsmall;Ugravesmall;Uacutesmall;Ucircumflexsmall;Udieresissmall;Yacutesmall;Thornsmall;Ydieresissmall;001.000;001.001;001.002;001.003;Black;Bold;Book;Light;Medium;Regular;Roman;Semibold".split(";");
    b.cffStandardEncoding = "                                space exclam quotedbl numbersign dollar percent ampersand quoteright parenleft parenright asterisk plus comma hyphen period slash zero one two three four five six seven eight nine colon semicolon less equal greater question at A B C D E F G H I J K L M N O P Q R S T U V W X Y Z bracketleft backslash bracketright asciicircum underscore quoteleft a b c d e f g h i j k l m n o p q r s t u v w x y z braceleft bar braceright asciitilde                                   exclamdown cent sterling fraction yen florin section currency quotesingle quotedblleft guillemotleft guilsinglleft guilsinglright fi fl  endash dagger daggerdbl periodcentered  paragraph bullet quotesinglbase quotedblbase quotedblright guillemotright ellipsis perthousand  questiondown  grave acute circumflex tilde macron breve dotaccent dieresis  ring cedilla  hungarumlaut ogonek caron emdash                 AE  ordfeminine     Lslash Oslash OE ordmasculine      ae    dotlessi   lslash oslash oe germandbls".split(" ");
    b.cffExpertEncoding = "                                space exclamsmall Hungarumlautsmall  dollaroldstyle dollarsuperior ampersandsmall Acutesmall parenleftsuperior parenrightsuperior twodotenleader onedotenleader comma hyphen period fraction zerooldstyle oneoldstyle twooldstyle threeoldstyle fouroldstyle fiveoldstyle sixoldstyle sevenoldstyle eightoldstyle nineoldstyle colon semicolon commasuperior threequartersemdash periodsuperior questionsmall  asuperior bsuperior centsuperior dsuperior esuperior   isuperior   lsuperior msuperior nsuperior osuperior   rsuperior ssuperior tsuperior  ff fi fl ffi ffl parenleftinferior  parenrightinferior Circumflexsmall hyphensuperior Gravesmall Asmall Bsmall Csmall Dsmall Esmall Fsmall Gsmall Hsmall Ismall Jsmall Ksmall Lsmall Msmall Nsmall Osmall Psmall Qsmall Rsmall Ssmall Tsmall Usmall Vsmall Wsmall Xsmall Ysmall Zsmall colonmonetary onefitted rupiah Tildesmall                                   exclamdownsmall centoldstyle Lslashsmall   Scaronsmall Zcaronsmall Dieresissmall Brevesmall Caronsmall  Dotaccentsmall   Macronsmall   figuredash hypheninferior   Ogoneksmall Ringsmall Cedillasmall    onequarter onehalf threequarters questiondownsmall oneeighth threeeighths fiveeighths seveneighths onethird twothirds   zerosuperior onesuperior twosuperior threesuperior foursuperior fivesuperior sixsuperior sevensuperior eightsuperior ninesuperior zeroinferior oneinferior twoinferior threeinferior fourinferior fiveinferior sixinferior seveninferior eightinferior nineinferior centinferior dollarinferior periodinferior commainferior Agravesmall Aacutesmall Acircumflexsmall Atildesmall Adieresissmall Aringsmall AEsmall Ccedillasmall Egravesmall Eacutesmall Ecircumflexsmall Edieresissmall Igravesmall Iacutesmall Icircumflexsmall Idieresissmall Ethsmall Ntildesmall Ogravesmall Oacutesmall Ocircumflexsmall Otildesmall Odieresissmall OEsmall Oslashsmall Ugravesmall Uacutesmall Ucircumflexsmall Udieresissmall Yacutesmall Thornsmall Ydieresissmall".split(" ");
    b.standardNames = ".notdef .null nonmarkingreturn space exclam quotedbl numbersign dollar percent ampersand quotesingle parenleft parenright asterisk plus comma hyphen period slash zero one two three four five six seven eight nine colon semicolon less equal greater question at A B C D E F G H I J K L M N O P Q R S T U V W X Y Z bracketleft backslash bracketright asciicircum underscore grave a b c d e f g h i j k l m n o p q r s t u v w x y z braceleft bar braceright asciitilde Adieresis Aring Ccedilla Eacute Ntilde Odieresis Udieresis aacute agrave acircumflex adieresis atilde aring ccedilla eacute egrave ecircumflex edieresis iacute igrave icircumflex idieresis ntilde oacute ograve ocircumflex odieresis otilde uacute ugrave ucircumflex udieresis dagger degree cent sterling section bullet paragraph germandbls registered copyright trademark acute dieresis notequal AE Oslash infinity plusminus lessequal greaterequal yen mu partialdiff summation product pi integral ordfeminine ordmasculine Omega ae oslash questiondown exclamdown logicalnot radical florin approxequal Delta guillemotleft guillemotright ellipsis nonbreakingspace Agrave Atilde Otilde OE oe endash emdash quotedblleft quotedblright quoteleft quoteright divide lozenge ydieresis Ydieresis fraction currency guilsinglleft guilsinglright fi fl daggerdbl periodcentered quotesinglbase quotedblbase perthousand Acircumflex Ecircumflex Aacute Edieresis Egrave Iacute Icircumflex Idieresis Igrave Oacute Ocircumflex apple Ograve Uacute Ucircumflex Ugrave dotlessi circumflex tilde macron breve dotaccent ring cedilla hungarumlaut ogonek caron Lslash lslash Scaron scaron Zcaron zcaron brokenbar Eth eth Yacute yacute Thorn thorn minus multiply onesuperior twosuperior threesuperior onehalf onequarter threequarters franc Gbreve gbreve Idotaccent Scedilla scedilla Cacute cacute Ccaron ccaron dcroat".split(" ");
    b.DefaultEncoding = g;
    b.CmapEncoding = k;
    b.CffEncoding = c;
    b.GlyphNames = e;
    b.addGlyphNames = function(b) {
      for (var c, e = b.tables.cmap.glyphIndexMap, f = Object.keys(e), g = 0;g < f.length;g += 1) {
        var h = f[g];
        c = b.glyphs.get(e[h]);
        c.addUnicode(parseInt(h));
      }
      for (g = 0;g < b.glyphs.length;g += 1) {
        c = b.glyphs.get(g), b.cffEncoding ? c.name = b.cffEncoding.charset[g] : b.glyphNames.names && (c.name = b.glyphNames.glyphIndexToName(g));
      }
    };
  }, {}], 5:[function(h, l, b) {
    function g(b) {
      b = b || {};
      b.empty || (r.checkArgument(b.familyName, "When creating a new Font object, familyName is required."), r.checkArgument(b.styleName, "When creating a new Font object, styleName is required."), r.checkArgument(b.unitsPerEm, "When creating a new Font object, unitsPerEm is required."), r.checkArgument(b.ascender, "When creating a new Font object, ascender is required."), r.checkArgument(b.descender, "When creating a new Font object, descender is required."), r.checkArgument(0 > b.descender, "Descender should be negative (e.g. -512)."), 
      this.names = {fontFamily:{en:b.familyName || " "}, fontSubfamily:{en:b.styleName || " "}, fullName:{en:b.fullName || b.familyName + " " + b.styleName}, postScriptName:{en:b.postScriptName || b.familyName + b.styleName}, designer:{en:b.designer || " "}, designerURL:{en:b.designerURL || " "}, manufacturer:{en:b.manufacturer || " "}, manufacturerURL:{en:b.manufacturerURL || " "}, license:{en:b.license || " "}, licenseURL:{en:b.licenseURL || " "}, version:{en:b.version || "Version 0.1"}, description:{en:b.description || 
      " "}, copyright:{en:b.copyright || " "}, trademark:{en:b.trademark || " "}}, this.unitsPerEm = b.unitsPerEm || 1E3, this.ascender = b.ascender, this.descender = b.descender, this.createdTimestamp = b.createdTimestamp, this.tables = {os2:{usWeightClass:b.weightClass || this.usWeightClasses.MEDIUM, usWidthClass:b.widthClass || this.usWidthClasses.MEDIUM, fsSelection:b.fsSelection || this.fsSelectionValues.REGULAR}});
      this.supported = !0;
      this.glyphs = new f.GlyphSet(this, b.glyphs || []);
      this.encoding = new e.DefaultEncoding(this);
      this.substitution = new q(this);
      this.tables = this.tables || {};
    }
    var k = h("./path"), c = h("./tables/sfnt"), e = h("./encoding"), f = h("./glyphset"), q = h("./substitution"), r = h("./util");
    g.prototype.hasChar = function(b) {
      return null !== this.encoding.charToGlyphIndex(b);
    };
    g.prototype.charToGlyphIndex = function(b) {
      return this.encoding.charToGlyphIndex(b);
    };
    g.prototype.charToGlyph = function(b) {
      b = this.charToGlyphIndex(b);
      b = this.glyphs.get(b);
      return b || (b = this.glyphs.get(0)), b;
    };
    g.prototype.stringToGlyphs = function(b) {
      for (var c = [], e = 0;e < b.length;e += 1) {
        c.push(this.charToGlyph(b[e]));
      }
      return c;
    };
    g.prototype.nameToGlyphIndex = function(b) {
      return this.glyphNames.nameToGlyphIndex(b);
    };
    g.prototype.nameToGlyph = function(b) {
      b = this.nametoGlyphIndex(b);
      b = this.glyphs.get(b);
      return b || (b = this.glyphs.get(0)), b;
    };
    g.prototype.glyphIndexToName = function(b) {
      return this.glyphNames.glyphIndexToName ? this.glyphNames.glyphIndexToName(b) : "";
    };
    g.prototype.getKerningValue = function(b, c) {
      b = b.index || b;
      c = c.index || c;
      var e = this.getGposKerningValue;
      return e ? e(b, c) : this.kerningPairs[b + "," + c] || 0;
    };
    g.prototype.forEachGlyph = function(b, c, e, f, g, h) {
      c = void 0 !== c ? c : 0;
      e = void 0 !== e ? e : 0;
      f = void 0 !== f ? f : 72;
      g = g || {};
      var k = void 0 === g.kerning ? !0 : g.kerning, l = 1 / this.unitsPerEm * f;
      b = this.stringToGlyphs(b);
      for (var p = 0;p < b.length;p += 1) {
        var q = b[p];
        if (h(q, c, e, f, g), q.advanceWidth && (c += q.advanceWidth * l), k && p < b.length - 1) {
          q = this.getKerningValue(q, b[p + 1]), c += q * l;
        }
      }
    };
    g.prototype.getPath = function(b, c, e, f, g) {
      var h = new k.Path;
      return this.forEachGlyph(b, c, e, f, g, function(b, c, e, f) {
        b = b.getPath(c, e, f);
        h.extend(b);
      }), h;
    };
    g.prototype.getPaths = function(b, c, e, f, g) {
      var h = [];
      return this.forEachGlyph(b, c, e, f, g, function(b, c, e, f) {
        b = b.getPath(c, e, f);
        h.push(b);
      }), h;
    };
    g.prototype.draw = function(b, c, e, f, g, h) {
      this.getPath(c, e, f, g, h).draw(b);
    };
    g.prototype.drawPoints = function(b, c, e, f, g, h) {
      this.forEachGlyph(c, e, f, g, h, function(c, e, f, g) {
        c.drawPoints(b, e, f, g);
      });
    };
    g.prototype.drawMetrics = function(b, c, e, f, g, h) {
      this.forEachGlyph(c, e, f, g, h, function(c, e, f, g) {
        c.drawMetrics(b, e, f, g);
      });
    };
    g.prototype.getEnglishName = function(b) {
      return (b = this.names[b]) ? b.en : void 0;
    };
    g.prototype.validate = function() {
      function b(b) {
        var f = e.getEnglishName(b);
        f && 0 < f.trim().length || c.push("No English " + b + " specified.");
      }
      var c = [], e = this;
      b("fontFamily");
      b("weightName");
      b("manufacturer");
      b("copyright");
      b("version");
      0 < this.unitsPerEm || c.push("No unitsPerEm specified.");
    };
    g.prototype.toTables = function() {
      return c.fontToTable(this);
    };
    g.prototype.toBuffer = function() {
      return console.warn("Font.toBuffer is deprecated. Use Font.toArrayBuffer instead."), this.toArrayBuffer();
    };
    g.prototype.toArrayBuffer = function() {
      for (var b = this.toTables().encode(), c = new ArrayBuffer(b.length), e = new Uint8Array(c), f = 0;f < b.length;f++) {
        e[f] = b[f];
      }
      return c;
    };
    g.prototype.download = function() {
      var b = this.getEnglishName("fontFamily"), c = this.getEnglishName("fontSubfamily"), e = b.replace(/\s/g, "") + "-" + c + ".otf", f = this.toArrayBuffer();
      r.isBrowser() ? (window.requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem, window.requestFileSystem(window.TEMPORARY, f.byteLength, function(b) {
        b.root.getFile(e, {create:!0}, function(b) {
          b.createWriter(function(c) {
            var e = new DataView(f), e = new Blob([e], {type:"font/opentype"});
            c.write(e);
            c.addEventListener("writeend", function() {
              location.href = b.toURL();
            }, !1);
          });
        });
      }, function(b) {
        throw Error(b.name + ": " + b.message);
      })) : (b = h("fs"), c = r.arrayBufferToNodeBuffer(f), b.writeFileSync(e, c));
    };
    g.prototype.fsSelectionValues = {ITALIC:1, UNDERSCORE:2, NEGATIVE:4, OUTLINED:8, STRIKEOUT:16, BOLD:32, REGULAR:64, USER_TYPO_METRICS:128, WWS:256, OBLIQUE:512};
    g.prototype.usWidthClasses = {ULTRA_CONDENSED:1, EXTRA_CONDENSED:2, CONDENSED:3, SEMI_CONDENSED:4, MEDIUM:5, SEMI_EXPANDED:6, EXPANDED:7, EXTRA_EXPANDED:8, ULTRA_EXPANDED:9};
    g.prototype.usWeightClasses = {THIN:100, EXTRA_LIGHT:200, LIGHT:300, NORMAL:400, MEDIUM:500, SEMI_BOLD:600, BOLD:700, EXTRA_BOLD:800, BLACK:900};
    b.Font = g;
  }, {"./encoding":4, "./glyphset":7, "./path":11, "./substitution":12, "./tables/sfnt":31, "./util":33, fs:void 0}], 6:[function(h, l, b) {
    function g(b, c) {
      var e = c || {commands:[]};
      return {configurable:!0, get:function() {
        return "function" == typeof e && (e = e()), e;
      }, set:function(b) {
        e = b;
      }};
    }
    function k(b) {
      this.bindConstructorValues(b);
    }
    var c = h("./check"), e = h("./draw"), f = h("./path");
    k.prototype.bindConstructorValues = function(b) {
      this.index = b.index || 0;
      this.name = b.name || null;
      this.unicode = b.unicode || void 0;
      this.unicodes = b.unicodes || void 0 !== b.unicode ? [b.unicode] : [];
      b.xMin && (this.xMin = b.xMin);
      b.yMin && (this.yMin = b.yMin);
      b.xMax && (this.xMax = b.xMax);
      b.yMax && (this.yMax = b.yMax);
      b.advanceWidth && (this.advanceWidth = b.advanceWidth);
      Object.defineProperty(this, "path", g(this, b.path));
    };
    k.prototype.addUnicode = function(b) {
      0 === this.unicodes.length && (this.unicode = b);
      this.unicodes.push(b);
    };
    k.prototype.getPath = function(b, c, e, g) {
      b = void 0 !== b ? b : 0;
      c = void 0 !== c ? c : 0;
      g = void 0 !== g ? g : {xScale:1, yScale:1};
      var h = 1 / this.path.unitsPerEm * (void 0 !== e ? e : 72);
      e = g.xScale * h;
      g = g.yScale * h;
      for (var h = new f.Path, k = this.path.commands, l = 0;l < k.length;l += 1) {
        var p = k[l];
        "M" === p.type ? h.moveTo(b + p.x * e, c + -p.y * g) : "L" === p.type ? h.lineTo(b + p.x * e, c + -p.y * g) : "Q" === p.type ? h.quadraticCurveTo(b + p.x1 * e, c + -p.y1 * g, b + p.x * e, c + -p.y * g) : "C" === p.type ? h.curveTo(b + p.x1 * e, c + -p.y1 * g, b + p.x2 * e, c + -p.y2 * g, b + p.x * e, c + -p.y * g) : "Z" === p.type && h.closePath();
      }
      return h;
    };
    k.prototype.getContours = function() {
      if (void 0 === this.points) {
        return [];
      }
      for (var b = [], e = [], f = 0;f < this.points.length;f += 1) {
        var g = this.points[f];
        e.push(g);
        g.lastPointOfContour && (b.push(e), e = []);
      }
      return c.argument(0 === e.length, "There are still points left in the current contour."), b;
    };
    k.prototype.getMetrics = function() {
      for (var b = this.path.commands, c = [], e = [], f = 0;f < b.length;f += 1) {
        var g = b[f];
        "Z" !== g.type && (c.push(g.x), e.push(g.y));
        "Q" !== g.type && "C" !== g.type || (c.push(g.x1), e.push(g.y1));
        "C" === g.type && (c.push(g.x2), e.push(g.y2));
      }
      b = {xMin:Math.min.apply(null, c), yMin:Math.min.apply(null, e), xMax:Math.max.apply(null, c), yMax:Math.max.apply(null, e), leftSideBearing:this.leftSideBearing};
      return isFinite(b.xMin) || (b.xMin = 0), isFinite(b.xMax) || (b.xMax = this.advanceWidth), isFinite(b.yMin) || (b.yMin = 0), isFinite(b.yMax) || (b.yMax = 0), b.rightSideBearing = this.advanceWidth - b.leftSideBearing - (b.xMax - b.xMin), b;
    };
    k.prototype.draw = function(b, c, e, f, g) {
      this.getPath(c, e, f, g).draw(b);
    };
    k.prototype.drawPoints = function(b, c, e, f) {
      function g(c, e, f, g) {
        var h = 2 * Math.PI;
        b.beginPath();
        for (var k = 0;k < c.length;k += 1) {
          b.moveTo(e + c[k].x * g, f + c[k].y * g), b.arc(e + c[k].x * g, f + c[k].y * g, 2, 0, h, !1);
        }
        b.closePath();
        b.fill();
      }
      c = void 0 !== c ? c : 0;
      e = void 0 !== e ? e : 0;
      f = 1 / this.path.unitsPerEm * (void 0 !== f ? f : 24);
      for (var h = [], k = [], l = this.path, m = 0;m < l.commands.length;m += 1) {
        var p = l.commands[m];
        void 0 !== p.x && h.push({x:p.x, y:-p.y});
        void 0 !== p.x1 && k.push({x:p.x1, y:-p.y1});
        void 0 !== p.x2 && k.push({x:p.x2, y:-p.y2});
      }
      b.fillStyle = "blue";
      g(h, c, e, f);
      b.fillStyle = "red";
      g(k, c, e, f);
    };
    k.prototype.drawMetrics = function(b, c, f, g) {
      c = void 0 !== c ? c : 0;
      f = void 0 !== f ? f : 0;
      g = 1 / this.path.unitsPerEm * (void 0 !== g ? g : 24);
      b.lineWidth = 1;
      b.strokeStyle = "black";
      e.line(b, c, -1E4, c, 1E4);
      e.line(b, -1E4, f, 1E4, f);
      var h = this.xMin || 0, k = this.yMin || 0, l = this.xMax || 0, p = this.yMax || 0, m = this.advanceWidth || 0;
      b.strokeStyle = "blue";
      e.line(b, c + h * g, -1E4, c + h * g, 1E4);
      e.line(b, c + l * g, -1E4, c + l * g, 1E4);
      e.line(b, -1E4, f + -k * g, 1E4, f + -k * g);
      e.line(b, -1E4, f + -p * g, 1E4, f + -p * g);
      b.strokeStyle = "green";
      e.line(b, c + m * g, -1E4, c + m * g, 1E4);
    };
    b.Glyph = k;
  }, {"./check":2, "./draw":3, "./path":11}], 7:[function(h, l, b) {
    function g(b, c, g) {
      Object.defineProperty(b, c, {get:function() {
        return b.path, b[g];
      }, set:function(c) {
        b[g] = c;
      }, enumerable:!0, configurable:!0});
    }
    function k(b, c) {
      if (this.font = b, this.glyphs = {}, Array.isArray(c)) {
        for (b = 0;b < c.length;b++) {
          this.glyphs[b] = c[b];
        }
      }
      this.length = c && c.length || 0;
    }
    var c = h("./glyph");
    k.prototype.get = function(b) {
      return "function" == typeof this.glyphs[b] && (this.glyphs[b] = this.glyphs[b]()), this.glyphs[b];
    };
    k.prototype.push = function(b, c) {
      this.glyphs[b] = c;
      this.length++;
    };
    b.GlyphSet = k;
    b.glyphLoader = function(b, f) {
      return new c.Glyph({index:f, font:b});
    };
    b.ttfGlyphLoader = function(b, f, h, k, l, p) {
      return function() {
        var e = new c.Glyph({index:f, font:b});
        return e.path = function() {
          h(e, k, l);
          var c = p(b.glyphs, e);
          return c.unitsPerEm = b.unitsPerEm, c;
        }, g(e, "xMin", "_xMin"), g(e, "xMax", "_xMax"), g(e, "yMin", "_yMin"), g(e, "yMax", "_yMax"), e;
      };
    };
    b.cffGlyphLoader = function(b, f, g, h) {
      return function() {
        var e = new c.Glyph({index:f, font:b});
        return e.path = function() {
          var c = g(b, e, h);
          return c.unitsPerEm = b.unitsPerEm, c;
        }, e;
      };
    };
  }, {"./glyph":6}], 8:[function(h, l, b) {
    function g(b, e) {
      for (var c = 0, g = b.length - 1;g >= c;) {
        var h = c + g >>> 1, k = b[h].tag;
        if (k === e) {
          return h;
        }
        e > k ? c = h + 1 : g = h - 1;
      }
      return -c - 1;
    }
    var k = h("./check");
    l.exports = {searchTag:g, binSearch:function(b, e) {
      for (var c = 0, g = b.length - 1;g >= c;) {
        var h = c + g >>> 1, k = b[h];
        if (k === e) {
          return h;
        }
        e > k ? c = h + 1 : g = h - 1;
      }
      return -c - 1;
    }, getScriptNames:function() {
      var b = this.getGsubTable();
      return b ? b.scripts.map(function(b) {
        return b.tag;
      }) : [];
    }, getScriptTable:function(b, e) {
      var c = this.getGsubTable(e);
      if (c) {
        e = c.scripts;
        c = g(c.scripts, b);
        if (0 <= c) {
          return e[c].script;
        }
        b = {tag:b, script:{defaultLangSys:{reserved:0, reqFeatureIndex:65535, featureIndexes:[]}, langSysRecords:[]}};
        return e.splice(-1 - c, 0, b.script), b;
      }
    }, getLangSysTable:function(b, e, f) {
      if (b = this.getScriptTable(b, f)) {
        if ("DFLT" === e) {
          return b.defaultLangSys;
        }
        var c = g(b.langSysRecords, e);
        if (0 <= c) {
          return b.langSysRecords[c].langSys;
        }
        if (f) {
          return e = {tag:e, langSys:{reserved:0, reqFeatureIndex:65535, featureIndexes:[]}}, b.langSysRecords.splice(-1 - c, 0, e), e.langSys;
        }
      }
    }, getFeatureTable:function(b, e, f, g) {
      if (b = this.getLangSysTable(b, e, g)) {
        var c;
        b = b.featureIndexes;
        e = this.font.tables.gsub.features;
        for (var h = 0;h < b.length;h++) {
          if (c = e[b[h]], c.tag === f) {
            return c.feature;
          }
        }
        if (g) {
          return g = e.length, k.assert(0 === g || f >= e[g - 1].tag, "Features must be added in alphabetical order."), c = {tag:f, feature:{params:0, lookupListIndexes:[]}}, e.push(c), b.push(g), c.feature;
        }
      }
    }, getLookupTable:function(b, e, f, g, h) {
      if (b = this.getFeatureTable(b, e, f, h)) {
        var c;
        b = b.lookupListIndexes;
        e = this.font.tables.gsub.lookups;
        for (f = 0;f < b.length;f++) {
          if (c = e[b[f]], c.lookupType === g) {
            return c;
          }
        }
        if (h) {
          return c = {lookupType:g, lookupFlag:0, subtables:[], markFilteringSet:void 0}, g = e.length, e.push(c), b.push(g), c;
        }
      }
    }, expandCoverage:function(b) {
      if (1 === b.format) {
        return b.glyphs;
      }
      var c = [];
      b = b.ranges;
      for (var f = 0;b > f;f++) {
        for (var g = b[f], h = g.end, g = g.start;h >= g;g++) {
          c.push(g);
        }
      }
      return c;
    }};
  }, {"./check":2}], 9:[function(h, l, b) {
    function g(b, c) {
      h("fs").readFile(b, function(b, e) {
        return b ? c(b.message) : void c(null, v.nodeBufferToArrayBuffer(e));
      });
    }
    function k(b, c) {
      var e = new XMLHttpRequest;
      e.open("get", b, !0);
      e.responseType = "arraybuffer";
      e.onload = function() {
        return 200 !== e.status ? c("Font could not be loaded: " + e.statusText) : c(null, e.response);
      };
      e.send();
    }
    function c(b, c) {
      for (var e = [], f = 12, g = 0;c > g;g += 1) {
        var h = p.getTag(b, f), k = p.getULong(b, f + 4), l = p.getULong(b, f + 8), m = p.getULong(b, f + 12);
        e.push({tag:h, checksum:k, offset:l, length:m, compression:!1});
        f += 16;
      }
      return e;
    }
    function e(b, c) {
      if ("WOFF" === c.compression) {
        b = new Uint8Array(b.buffer, c.offset + 2, c.compressedLength - 2);
        var e = new Uint8Array(c.originalLength);
        if (q(b, e), e.byteLength !== c.originalLength) {
          throw Error("Decompression error: " + c.tag + " decompressed length doesn't match recorded length");
        }
        return {data:new DataView(e.buffer, 0), offset:0};
      }
      return {data:b, offset:c.offset};
    }
    function f(b) {
      var f, g, h, k = new w.Font({empty:!0});
      b = new DataView(b, 0);
      var l;
      h = p.getTag(b, 0);
      if (h === String.fromCharCode(0, 1, 0, 0)) {
        k.outlinesFormat = "truetype", h = p.getUShort(b, 4), l = c(b, h);
      } else {
        if ("OTTO" === h) {
          k.outlinesFormat = "cff", h = p.getUShort(b, 4), l = c(b, h);
        } else {
          if ("wOFF" !== h) {
            throw Error("Unsupported OpenType signature " + h);
          }
          l = p.getTag(b, 4);
          if (l === String.fromCharCode(0, 1, 0, 0)) {
            k.outlinesFormat = "truetype";
          } else {
            if ("OTTO" !== l) {
              throw Error("Unsupported OpenType flavor " + h);
            }
            k.outlinesFormat = "cff";
          }
          l = h = p.getUShort(b, 12);
          for (var q = [], u = 44, v = 0;l > v;v += 1) {
            var ba = p.getTag(b, u), Q = p.getULong(b, u + 4), Z = p.getULong(b, u + 8), ra = p.getULong(b, u + 12);
            q.push({tag:ba, offset:Q, compression:ra > Z ? "WOFF" : !1, compressedLength:Z, originalLength:ra});
            u += 20;
          }
          l = q;
        }
      }
      for (var pa, fa, X, ta, Ba, Aa, Ca, sa, ua, Va, q = 0;h > q;q += 1) {
        switch(u = l[q], u.tag) {
          case "cmap":
            u = e(b, u);
            k.tables.cmap = y.parse(u.data, u.offset);
            k.encoding = new r.CmapEncoding(k.tables.cmap);
            break;
          case "fvar":
            fa = u;
            break;
          case "head":
            u = e(b, u);
            k.tables.head = D.parse(u.data, u.offset);
            k.unitsPerEm = k.tables.head.unitsPerEm;
            f = k.tables.head.indexToLocFormat;
            break;
          case "hhea":
            u = e(b, u);
            k.tables.hhea = F.parse(u.data, u.offset);
            k.ascender = k.tables.hhea.ascender;
            k.descender = k.tables.hhea.descender;
            k.numberOfHMetrics = k.tables.hhea.numberOfHMetrics;
            break;
          case "hmtx":
            Aa = u;
            break;
          case "ltag":
            u = e(b, u);
            g = K.parse(u.data, u.offset);
            break;
          case "maxp":
            u = e(b, u);
            k.tables.maxp = M.parse(u.data, u.offset);
            k.numGlyphs = k.tables.maxp.numGlyphs;
            break;
          case "name":
            ua = u;
            break;
          case "OS/2":
            u = e(b, u);
            k.tables.os2 = P.parse(u.data, u.offset);
            break;
          case "post":
            u = e(b, u);
            k.tables.post = O.parse(u.data, u.offset);
            k.glyphNames = new r.GlyphNames(k.tables.post);
            break;
          case "glyf":
            X = u;
            break;
          case "loca":
            sa = u;
            break;
          case "CFF ":
            pa = u;
            break;
          case "kern":
            Ca = u;
            break;
          case "GPOS":
            ta = u;
            break;
          case "GSUB":
            Ba = u;
            break;
          case "meta":
            Va = u;
        }
      }
      ua = e(b, ua);
      if (k.tables.name = J.parse(ua.data, ua.offset, g), k.names = k.tables.name, X && sa) {
        f = 0 === f, sa = e(b, sa), sa = H.parse(sa.data, sa.offset, k.numGlyphs, f), X = e(b, X), k.glyphs = t.parse(X.data, X.offset, sa, k);
      } else {
        if (!pa) {
          throw Error("Font doesn't contain TrueType or CFF outlines.");
        }
        X = e(b, pa);
        x.parse(X.data, X.offset, k);
      }
      Aa = e(b, Aa);
      (G.parse(Aa.data, Aa.offset, k.numberOfHMetrics, k.numGlyphs, k.glyphs), r.addGlyphNames(k), Ca) ? (Ca = e(b, Ca), k.kerningPairs = B.parse(Ca.data, Ca.offset)) : k.kerningPairs = {};
      ta && (ta = e(b, ta), C.parse(ta.data, ta.offset, k));
      Ba && (Ba = e(b, Ba), k.tables.gsub = A.parse(Ba.data, Ba.offset));
      fa && (fa = e(b, fa), k.tables.fvar = m.parse(fa.data, fa.offset, k.names));
      Va && (Va = e(b, Va), k.tables.meta = N.parse(Va.data, Va.offset), k.metas = k.tables.meta);
      return k;
    }
    var q = h("tiny-inflate"), r = h("./encoding"), w = h("./font");
    l = h("./glyph");
    var p = h("./parse"), u = h("./path"), v = h("./util"), y = h("./tables/cmap"), x = h("./tables/cff"), m = h("./tables/fvar"), t = h("./tables/glyf"), C = h("./tables/gpos"), A = h("./tables/gsub"), D = h("./tables/head"), F = h("./tables/hhea"), G = h("./tables/hmtx"), B = h("./tables/kern"), K = h("./tables/ltag"), H = h("./tables/loca"), M = h("./tables/maxp"), J = h("./tables/name"), P = h("./tables/os2"), O = h("./tables/post"), N = h("./tables/meta");
    b._parse = p;
    b.Font = w.Font;
    b.Glyph = l.Glyph;
    b.Path = u.Path;
    b.parse = f;
    b.load = function(b, c) {
      ("undefined" == typeof window ? g : k)(b, function(b, e) {
        if (b) {
          return c(b);
        }
        var g;
        try {
          g = f(e);
        } catch (S) {
          return c(S, null);
        }
        return c(null, g);
      });
    };
    b.loadSync = function(b) {
      b = h("fs").readFileSync(b);
      return f(v.nodeBufferToArrayBuffer(b));
    };
  }, {"./encoding":4, "./font":5, "./glyph":6, "./parse":10, "./path":11, "./tables/cff":14, "./tables/cmap":15, "./tables/fvar":16, "./tables/glyf":17, "./tables/gpos":18, "./tables/gsub":19, "./tables/head":20, "./tables/hhea":21, "./tables/hmtx":22, "./tables/kern":23, "./tables/loca":24, "./tables/ltag":25, "./tables/maxp":26, "./tables/meta":27, "./tables/name":28, "./tables/os2":29, "./tables/post":30, "./util":33, fs:void 0, "tiny-inflate":1}], 10:[function(h, l, b) {
    function g(b, c) {
      return b.getUint16(c, !1);
    }
    function k(b, c) {
      this.data = b;
      this.offset = c;
      this.relativeOffset = 0;
    }
    var c = h("./check");
    b.getByte = function(b, c) {
      return b.getUint8(c);
    };
    b.getCard8 = b.getByte;
    b.getUShort = b.getCard16 = g;
    b.getShort = function(b, c) {
      return b.getInt16(c, !1);
    };
    b.getULong = function(b, c) {
      return b.getUint32(c, !1);
    };
    b.getFixed = function(b, c) {
      var e = b.getInt16(c, !1);
      b = b.getUint16(c + 2, !1);
      return e + b / 65535;
    };
    b.getTag = function(b, c) {
      for (var e = "", f = c;c + 4 > f;f += 1) {
        e += String.fromCharCode(b.getInt8(f));
      }
      return e;
    };
    b.getOffset = function(b, c, e) {
      for (var f = 0, g = 0;e > g;g += 1) {
        f <<= 8, f += b.getUint8(c + g);
      }
      return f;
    };
    b.getBytes = function(b, c, e) {
      for (var f = [];e > c;c += 1) {
        f.push(b.getUint8(c));
      }
      return f;
    };
    b.bytesToString = function(b) {
      for (var c = "", e = 0;e < b.length;e += 1) {
        c += String.fromCharCode(b[e]);
      }
      return c;
    };
    var e = {"byte":1, uShort:2, "short":2, uLong:4, fixed:4, longDateTime:8, tag:4};
    k.prototype.parseByte = function() {
      var b = this.data.getUint8(this.offset + this.relativeOffset);
      return this.relativeOffset += 1, b;
    };
    k.prototype.parseChar = function() {
      var b = this.data.getInt8(this.offset + this.relativeOffset);
      return this.relativeOffset += 1, b;
    };
    k.prototype.parseCard8 = k.prototype.parseByte;
    k.prototype.parseUShort = function() {
      var b = this.data.getUint16(this.offset + this.relativeOffset);
      return this.relativeOffset += 2, b;
    };
    k.prototype.parseCard16 = k.prototype.parseUShort;
    k.prototype.parseSID = k.prototype.parseUShort;
    k.prototype.parseOffset16 = k.prototype.parseUShort;
    k.prototype.parseShort = function() {
      var b = this.data.getInt16(this.offset + this.relativeOffset);
      return this.relativeOffset += 2, b;
    };
    k.prototype.parseF2Dot14 = function() {
      var b = this.data.getInt16(this.offset + this.relativeOffset) / 16384;
      return this.relativeOffset += 2, b;
    };
    k.prototype.parseULong = function() {
      var c = b.getULong(this.data, this.offset + this.relativeOffset);
      return this.relativeOffset += 4, c;
    };
    k.prototype.parseFixed = function() {
      var c = b.getFixed(this.data, this.offset + this.relativeOffset);
      return this.relativeOffset += 4, c;
    };
    k.prototype.parseString = function(b) {
      var c = this.data, e = this.offset + this.relativeOffset, f = "";
      this.relativeOffset += b;
      for (var g = 0;b > g;g++) {
        f += String.fromCharCode(c.getUint8(e + g));
      }
      return f;
    };
    k.prototype.parseTag = function() {
      return this.parseString(4);
    };
    k.prototype.parseLongDateTime = function() {
      var c = b.getULong(this.data, this.offset + this.relativeOffset + 4);
      return c -= 2082844800, this.relativeOffset += 8, c;
    };
    k.prototype.parseVersion = function() {
      var b = g(this.data, this.offset + this.relativeOffset), c = g(this.data, this.offset + this.relativeOffset + 2);
      return this.relativeOffset += 4, b + c / 4096 / 10;
    };
    k.prototype.skip = function(b, c) {
      void 0 === c && (c = 1);
      this.relativeOffset += e[b] * c;
    };
    k.prototype.parseOffset16List = k.prototype.parseUShortList = function(b) {
      void 0 === b && (b = this.parseUShort());
      for (var c = Array(b), e = this.data, f = this.offset + this.relativeOffset, g = 0;b > g;g++) {
        c[g] = e.getUint16(f), f += 2;
      }
      return this.relativeOffset += 2 * b, c;
    };
    k.prototype.parseList = function(b, c) {
      c || (c = b, b = this.parseUShort());
      for (var e = Array(b), f = 0;b > f;f++) {
        e[f] = c.call(this);
      }
      return e;
    };
    k.prototype.parseRecordList = function(b, c) {
      c || (c = b, b = this.parseUShort());
      for (var e = Array(b), f = Object.keys(c), g = 0;b > g;g++) {
        for (var h = {}, k = 0;k < f.length;k++) {
          var l = f[k];
          h[l] = c[l].call(this);
        }
        e[g] = h;
      }
      return e;
    };
    k.prototype.parseStruct = function(b) {
      if ("function" == typeof b) {
        return b.call(this);
      }
      for (var c = Object.keys(b), e = {}, f = 0;f < c.length;f++) {
        var g = c[f];
        e[g] = b[g].call(this);
      }
      return e;
    };
    k.prototype.parsePointer = function(b) {
      var c = this.parseOffset16();
      return 0 < c ? (new k(this.data, this.offset + c)).parseStruct(b) : void 0;
    };
    k.prototype.parseListOfLists = function(b) {
      for (var c = this.parseOffset16List(), e = c.length, f = this.relativeOffset, g = Array(e), h = 0;e > h;h++) {
        var k = c[h];
        if (0 !== k) {
          if (this.relativeOffset = k, b) {
            for (var l = this.parseOffset16List(), m = Array(l.length), q = 0;q < l.length;q++) {
              this.relativeOffset = k + l[q], m[q] = b.call(this);
            }
            g[h] = m;
          } else {
            g[h] = this.parseUShortList();
          }
        } else {
          g[h] = void 0;
        }
      }
      return this.relativeOffset = f, g;
    };
    k.prototype.parseCoverage = function() {
      var b = this.offset + this.relativeOffset, e = this.parseUShort(), f = this.parseUShort();
      if (1 === e) {
        return {format:1, glyphs:this.parseUShortList(f)};
      }
      if (2 === e) {
        b = Array(f);
        for (e = 0;f > e;e++) {
          b[e] = {start:this.parseUShort(), end:this.parseUShort(), index:this.parseUShort()};
        }
        return {format:2, ranges:b};
      }
      c.assert(!1, "0x" + b.toString(16) + ": Coverage format must be 1 or 2.");
    };
    k.prototype.parseClassDef = function() {
      var b = this.offset + this.relativeOffset, e = this.parseUShort();
      return 1 === e ? {format:1, startGlyph:this.parseUShort(), classes:this.parseUShortList()} : 2 === e ? {format:2, ranges:this.parseRecordList({start:k.uShort, end:k.uShort, classId:k.uShort})} : void c.assert(!1, "0x" + b.toString(16) + ": ClassDef format must be 1 or 2.");
    };
    k.list = function(b, c) {
      return function() {
        return this.parseList(b, c);
      };
    };
    k.recordList = function(b, c) {
      return function() {
        return this.parseRecordList(b, c);
      };
    };
    k.pointer = function(b) {
      return function() {
        return this.parsePointer(b);
      };
    };
    k.tag = k.prototype.parseTag;
    k.byte = k.prototype.parseByte;
    k.uShort = k.offset16 = k.prototype.parseUShort;
    k.uShortList = k.prototype.parseUShortList;
    k.struct = k.prototype.parseStruct;
    k.coverage = k.prototype.parseCoverage;
    k.classDef = k.prototype.parseClassDef;
    var f = {reserved:k.uShort, reqFeatureIndex:k.uShort, featureIndexes:k.uShortList};
    k.prototype.parseScriptList = function() {
      return this.parsePointer(k.recordList({tag:k.tag, script:k.pointer({defaultLangSys:k.pointer(f), langSysRecords:k.recordList({tag:k.tag, langSys:k.pointer(f)})})}));
    };
    k.prototype.parseFeatureList = function() {
      return this.parsePointer(k.recordList({tag:k.tag, feature:k.pointer({featureParams:k.offset16, lookupListIndexes:k.uShortList})}));
    };
    k.prototype.parseLookupList = function(b) {
      return this.parsePointer(k.list(k.pointer(function() {
        var e = this.parseUShort();
        c.argument(1 <= e && 8 >= e, "GSUB lookup type " + e + " unknown.");
        var f = this.parseUShort(), g = 16 & f;
        return {lookupType:e, lookupFlag:f, subtables:this.parseList(k.pointer(b[e])), markFilteringSet:g ? this.parseUShort() : void 0};
      })));
    };
    b.Parser = k;
  }, {"./check":2}], 11:[function(h, l, b) {
    function g() {
      this.commands = [];
      this.fill = "black";
      this.stroke = null;
      this.strokeWidth = 1;
    }
    g.prototype.moveTo = function(b, c) {
      this.commands.push({type:"M", x:b, y:c});
    };
    g.prototype.lineTo = function(b, c) {
      this.commands.push({type:"L", x:b, y:c});
    };
    g.prototype.curveTo = g.prototype.bezierCurveTo = function(b, c, e, f, g, h) {
      this.commands.push({type:"C", x1:b, y1:c, x2:e, y2:f, x:g, y:h});
    };
    g.prototype.quadTo = g.prototype.quadraticCurveTo = function(b, c, e, f) {
      this.commands.push({type:"Q", x1:b, y1:c, x:e, y:f});
    };
    g.prototype.close = g.prototype.closePath = function() {
      this.commands.push({type:"Z"});
    };
    g.prototype.extend = function(b) {
      b.commands && (b = b.commands);
      Array.prototype.push.apply(this.commands, b);
    };
    g.prototype.draw = function(b) {
      b.beginPath();
      for (var c = 0;c < this.commands.length;c += 1) {
        var e = this.commands[c];
        "M" === e.type ? b.moveTo(e.x, e.y) : "L" === e.type ? b.lineTo(e.x, e.y) : "C" === e.type ? b.bezierCurveTo(e.x1, e.y1, e.x2, e.y2, e.x, e.y) : "Q" === e.type ? b.quadraticCurveTo(e.x1, e.y1, e.x, e.y) : "Z" === e.type && b.closePath();
      }
      this.fill && (b.fillStyle = this.fill, b.fill());
      this.stroke && (b.strokeStyle = this.stroke, b.lineWidth = this.strokeWidth, b.stroke());
    };
    g.prototype.toPathData = function(b) {
      function c() {
        for (var c = "", e = 0;e < arguments.length;e += 1) {
          var f = arguments[e];
          0 <= f && 0 < e && (c += " ");
          c += Math.round(f) === f ? "" + Math.round(f) : f.toFixed(b);
        }
        return c;
      }
      b = void 0 !== b ? b : 2;
      for (var e = "", f = 0;f < this.commands.length;f += 1) {
        var g = this.commands[f];
        "M" === g.type ? e += "M" + c(g.x, g.y) : "L" === g.type ? e += "L" + c(g.x, g.y) : "C" === g.type ? e += "C" + c(g.x1, g.y1, g.x2, g.y2, g.x, g.y) : "Q" === g.type ? e += "Q" + c(g.x1, g.y1, g.x, g.y) : "Z" === g.type && (e += "Z");
      }
      return e;
    };
    g.prototype.toSVG = function(b) {
      var c = '<path d="';
      return c += this.toPathData(b), c += '"', this.fill && "black" !== this.fill && (c += null === this.fill ? ' fill="none"' : ' fill="' + this.fill + '"'), this.stroke && (c += ' stroke="' + this.stroke + '" stroke-width="' + this.strokeWidth + '"'), c + "/>";
    };
    b.Path = g;
  }, {}], 12:[function(h, l, b) {
    function g(b, e, f) {
      b = b.subtables;
      for (var c = 0;c < b.length;c++) {
        var g = b[c];
        if (g.substFormat === e) {
          return g;
        }
      }
      return f ? (b.push(f), f) : void 0;
    }
    var k = h("./check");
    h = h("./layout");
    b = function(b) {
      this.font = b;
    };
    b.prototype = h;
    b.prototype.getGsubTable = function(b) {
      var c = this.font.tables.gsub;
      return !c && b && (this.font.tables.gsub = c = {version:1, scripts:[{tag:"DFLT", script:{defaultLangSys:{reserved:0, reqFeatureIndex:65535, featureIndexes:[]}, langSysRecords:[]}}], features:[], lookups:[]}), c;
    };
    b.prototype.getSingle = function(b, e, f) {
      var c = [];
      b = this.getLookupTable(e, f, b, 1);
      if (!b) {
        return c;
      }
      b = b.subtables;
      for (e = 0;e < b.length;e++) {
        var g;
        g = b[e];
        f = this.expandCoverage(g.coverage);
        if (1 === g.substFormat) {
          var h = g.deltaGlyphId;
          for (g = 0;g < f.length;g++) {
            var k = f[g];
            c.push({sub:k, by:k + h});
          }
        } else {
          for (h = g.substitute, g = 0;g < f.length;g++) {
            c.push({sub:f[g], by:h[g]});
          }
        }
      }
      return c;
    };
    b.prototype.getAlternates = function(b, e, f) {
      var c = [];
      b = this.getLookupTable(e, f, b, 3);
      if (!b) {
        return c;
      }
      b = b.subtables;
      for (e = 0;e < b.length;e++) {
        var g = b[e];
        f = this.expandCoverage(g.coverage);
        for (var g = g.alternateSets, h = 0;h < f.length;h++) {
          c.push({sub:f[h], by:g[h]});
        }
      }
      return c;
    };
    b.prototype.getLigatures = function(b, e, f) {
      var c = [];
      b = this.getLookupTable(e, f, b, 4);
      if (!b) {
        return [];
      }
      b = b.subtables;
      for (e = 0;e < b.length;e++) {
        var g = b[e];
        f = this.expandCoverage(g.coverage);
        for (var g = g.ligatureSets, h = 0;h < f.length;h++) {
          for (var k = f[h], l = g[h], v = 0;v < l.length;v++) {
            var y = l[v];
            c.push({sub:[k].concat(y.components), by:y.ligGlyph});
          }
        }
      }
      return c;
    };
    b.prototype.addSingle = function(b, e, f, h) {
      b = this.getLookupTable(f, h, b, 1, !0);
      b = g(b, 2, {substFormat:2, coverage:{format:1, glyphs:[]}, substitute:[]});
      k.assert(1 === b.coverage.format, "Ligature: unable to modify coverage table format " + b.coverage.format);
      f = e.sub;
      h = this.binSearch(b.coverage.glyphs, f);
      0 > h && (h = -1 - h, b.coverage.glyphs.splice(h, 0, f), b.substitute.splice(h, 0, 0));
      b.substitute[h] = e.by;
    };
    b.prototype.addAlternate = function(b, e, f, h) {
      b = this.getLookupTable(f, h, b, 3, !0);
      b = g(b, 1, {substFormat:1, coverage:{format:1, glyphs:[]}, alternateSets:[]});
      k.assert(1 === b.coverage.format, "Ligature: unable to modify coverage table format " + b.coverage.format);
      f = e.sub;
      h = this.binSearch(b.coverage.glyphs, f);
      0 > h && (h = -1 - h, b.coverage.glyphs.splice(h, 0, f), b.alternateSets.splice(h, 0, 0));
      b.alternateSets[h] = e.by;
    };
    b.prototype.addLigature = function(b, e, f, g) {
      b = this.getLookupTable(f || "DFLT", g || "DFLT", b, 4, !0);
      (f = b.subtables[0]) || (f = {substFormat:1, coverage:{format:1, glyphs:[]}, ligatureSets:[]}, b.subtables[0] = f);
      k.assert(1 === f.coverage.format, "Ligature: unable to modify coverage table format " + f.coverage.format);
      g = e.sub[0];
      b = e.sub.slice(1);
      e = {ligGlyph:e.by, components:b};
      var c = this.binSearch(f.coverage.glyphs, g);
      if (0 <= c) {
        f = f.ligatureSets[c];
        for (g = 0;g < f.length;g++) {
          a: {
            var c = f[g].components, h = c.length;
            if (h !== b.length) {
              c = !1;
            } else {
              for (var l = 0;h > l;l++) {
                if (c[l] !== b[l]) {
                  c = !1;
                  break a;
                }
              }
              c = !0;
            }
          }
          if (c) {
            return;
          }
        }
        f.push(e);
      } else {
        c = -1 - c, f.coverage.glyphs.splice(c, 0, g), f.ligatureSets.splice(c, 0, [e]);
      }
    };
    b.prototype.getFeature = function(b, e, f) {
      if (e = e || "DFLT", f = f || "DFLT", /ss\d\d/.test(b)) {
        return this.getSingle(b, e, f);
      }
      switch(b) {
        case "aalt":
        case "salt":
          return this.getSingle(b, e, f).concat(this.getAlternates(b, e, f));
        case "dlig":
        case "liga":
        case "rlig":
          return this.getLigatures(b, e, f);
      }
    };
    b.prototype.add = function(b, e, f, g) {
      if (f = f || "DFLT", g = g || "DFLT", /ss\d\d/.test(b)) {
        return this.addSingle(b, e, f, g);
      }
      switch(b) {
        case "aalt":
        case "salt":
          return "number" == typeof e.by ? this.addSingle(b, e, f, g) : this.addAlternate(b, e, f, g);
        case "dlig":
        case "liga":
        case "rlig":
          return this.addLigature(b, e, f, g);
      }
    };
    l.exports = b;
  }, {"./check":2, "./layout":8}], 13:[function(h, l, b) {
    function g(b, c, e) {
      var f;
      for (f = 0;f < c.length;f += 1) {
        var g = c[f];
        this[g.name] = g.value;
      }
      if (this.tableName = b, this.fields = c, e) {
        for (b = Object.keys(e), f = 0;f < b.length;f += 1) {
          c = b[f], g = e[c], void 0 !== this[c] && (this[c] = g);
        }
      }
    }
    function k(b, c, e) {
      void 0 === e && (e = c.length);
      var f = Array(c.length + 1);
      f[0] = {name:b + "Count", type:"USHORT", value:e};
      for (e = 0;e < c.length;e++) {
        f[e + 1] = {name:b + e, type:"USHORT", value:c[e]};
      }
      return f;
    }
    function c(b, c, e) {
      var f = c.length, g = Array(f + 1);
      g[0] = {name:b + "Count", type:"USHORT", value:f};
      for (var h = 0;f > h;h++) {
        g[h + 1] = {name:b + h, type:"TABLE", value:e(c[h], h)};
      }
      return g;
    }
    function e(b, c, e) {
      var f = c.length, g = [];
      g[0] = {name:b + "Count", type:"USHORT", value:f};
      for (b = 0;f > b;b++) {
        g = g.concat(e(c[b], b));
      }
      return g;
    }
    function f(b) {
      1 === b.format ? g.call(this, "coverageTable", [{name:"coverageFormat", type:"USHORT", value:1}].concat(k("glyph", b.glyphs))) : p.assert(!1, "Can't create coverage table format 2 yet.");
    }
    function q(b) {
      g.call(this, "scriptListTable", e("scriptRecord", b, function(b, c) {
        var f = b.script, h = f.defaultLangSys;
        return p.assert(!!h, "Unable to write GSUB: script " + b.tag + " has no default language system."), [{name:"scriptTag" + c, type:"TAG", value:b.tag}, {name:"script" + c, type:"TABLE", value:new g("scriptTable", [{name:"defaultLangSys", type:"TABLE", value:new g("defaultLangSys", [{name:"lookupOrder", type:"USHORT", value:0}, {name:"reqFeatureIndex", type:"USHORT", value:h.reqFeatureIndex}].concat(k("featureIndex", h.featureIndexes)))}].concat(e("langSys", f.langSysRecords, function(b, c) {
          var e = b.langSys;
          return [{name:"langSysTag" + c, type:"TAG", value:b.tag}, {name:"langSys" + c, type:"TABLE", value:new g("langSys", [{name:"lookupOrder", type:"USHORT", value:0}, {name:"reqFeatureIndex", type:"USHORT", value:e.reqFeatureIndex}].concat(k("featureIndex", e.featureIndexes)))}];
        })))}];
      }));
    }
    function r(b) {
      g.call(this, "featureListTable", e("featureRecord", b, function(b, c) {
        var e = b.feature;
        return [{name:"featureTag" + c, type:"TAG", value:b.tag}, {name:"feature" + c, type:"TABLE", value:new g("featureTable", [{name:"featureParams", type:"USHORT", value:e.featureParams}].concat(k("lookupListIndex", e.lookupListIndexes)))}];
      }));
    }
    function w(b, e) {
      g.call(this, "lookupListTable", c("lookup", b, function(b) {
        var f = e[b.lookupType];
        return p.assert(!!f, "Unable to write GSUB lookup type " + b.lookupType + " tables."), new g("lookupTable", [{name:"lookupType", type:"USHORT", value:b.lookupType}, {name:"lookupFlag", type:"USHORT", value:b.lookupFlag}].concat(c("subtable", b.subtables, f)));
      }));
    }
    var p = h("./check"), u = h("./types").encode, v = h("./types").sizeOf;
    g.prototype.encode = function() {
      return u.TABLE(this);
    };
    g.prototype.sizeOf = function() {
      return v.TABLE(this);
    };
    f.prototype = Object.create(g.prototype);
    f.prototype.constructor = f;
    q.prototype = Object.create(g.prototype);
    q.prototype.constructor = q;
    r.prototype = Object.create(g.prototype);
    r.prototype.constructor = r;
    w.prototype = Object.create(g.prototype);
    w.prototype.constructor = w;
    b.Record = b.Table = g;
    b.Coverage = f;
    b.ScriptList = q;
    b.FeatureList = r;
    b.LookupList = w;
    b.ushortList = k;
    b.tableList = c;
    b.recordList = e;
  }, {"./check":2, "./types":32}], 14:[function(h, l, b) {
    function g(b, c) {
      if (b === c) {
        return !0;
      }
      if (Array.isArray(b) && Array.isArray(c)) {
        if (b.length !== c.length) {
          return !1;
        }
        for (var e = 0;e < b.length;e += 1) {
          if (!g(b[e], c[e])) {
            return !1;
          }
        }
        return !0;
      }
      return !1;
    }
    function k(b, c, e) {
      var f, g, h, k = [], l = [];
      h = t.getCard16(b, c);
      if (0 !== h) {
        var m = t.getByte(b, c + 2);
        g = c + (h + 1) * m + 2;
        var p = c + 3;
        for (f = 0;h + 1 > f;f += 1) {
          k.push(t.getOffset(b, p, m)), p += m;
        }
        h = g + k[h];
      } else {
        h = c + 2;
      }
      for (f = 0;f < k.length - 1;f += 1) {
        m = t.getBytes(b, g + k[f], g + k[f + 1]), e && (m = e(m)), l.push(m);
      }
      return {objects:l, startOffset:c, endOffset:h};
    }
    function c(b, c) {
      var e, f, g, h;
      if (28 === c) {
        return e = b.parseByte(), f = b.parseByte(), e << 8 | f;
      }
      if (29 === c) {
        return e = b.parseByte(), f = b.parseByte(), g = b.parseByte(), h = b.parseByte(), e << 24 | f << 16 | g << 8 | h;
      }
      if (30 === c) {
        c = "";
        for (e = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", ".", "E", "E-", null, "-"];;) {
          g = b.parseByte();
          f = g >> 4;
          g &= 15;
          if (15 === f) {
            break;
          }
          if (c += e[f], 15 === g) {
            break;
          }
          c += e[g];
        }
        return parseFloat(c);
      }
      if (32 <= c && 246 >= c) {
        return c - 139;
      }
      if (247 <= c && 250 >= c) {
        return e = b.parseByte(), 256 * (c - 247) + e + 108;
      }
      if (251 <= c && 254 >= c) {
        return e = b.parseByte(), 256 * -(c - 251) - e - 108;
      }
      throw Error("Invalid b0 " + c);
    }
    function e(b, e, f) {
      var g = new t.Parser(b, void 0 !== e ? e : 0);
      e = [];
      var h = [];
      for (f = void 0 !== f ? f : b.length;g.relativeOffset < f;) {
        b = g.parseByte(), 21 >= b ? (12 === b && (b = 1200 + g.parseByte()), e.push([b, h]), h = []) : h.push(c(g, b));
      }
      f = {};
      for (b = 0;b < e.length;b += 1) {
        g = e[b][0];
        h = e[b][1];
        if (h = 1 === h.length ? h[0] : h, f.hasOwnProperty(g)) {
          throw Error("Object " + f + " already has key " + g);
        }
        f[g] = h;
      }
      return f;
    }
    function f(b, c) {
      return 390 >= c ? x.cffStandardStrings[c] : b[c - 391];
    }
    function q(b, c, e) {
      for (var g = {}, h = 0;h < c.length;h += 1) {
        var k = c[h], l = b[k.op];
        void 0 === l && (l = void 0 !== k.value ? k.value : null);
        "SID" === k.type && (l = f(e, l));
        g[k.name] = l;
      }
      return g;
    }
    function r(b, c, e) {
      function f(b, c) {
        w && q.closePath();
        q.moveTo(b, c);
        w = !0;
      }
      function g() {
        0 !== r.length % 2 && !v && (t = r.shift() + b.nominalWidthX);
        u += r.length >> 1;
        r.length = 0;
        v = !0;
      }
      function h(e) {
        for (var A, B, C, D, G, F, H, K, J, I, M = 0;M < e.length;) {
          switch(G = e[M], M += 1, G) {
            case 1:
              g();
              break;
            case 3:
              g();
              break;
            case 4:
              1 < r.length && !v && (t = r.shift() + b.nominalWidthX, v = !0);
              x += r.pop();
              f(y, x);
              break;
            case 5:
              for (;0 < r.length;) {
                y += r.shift(), x += r.shift(), q.lineTo(y, x);
              }
              break;
            case 6:
              for (;0 < r.length && (y += r.shift(), q.lineTo(y, x), 0 !== r.length);) {
                x += r.shift(), q.lineTo(y, x);
              }
              break;
            case 7:
              for (;0 < r.length && (x += r.shift(), q.lineTo(y, x), 0 !== r.length);) {
                y += r.shift(), q.lineTo(y, x);
              }
              break;
            case 8:
              for (;0 < r.length;) {
                k = y + r.shift(), l = x + r.shift(), m = k + r.shift(), p = l + r.shift(), y = m + r.shift(), x = p + r.shift(), q.curveTo(k, l, m, p, y, x);
              }
              break;
            case 10:
              G = r.pop() + b.subrsBias;
              (G = b.subrs[G]) && h(G);
              break;
            case 11:
              return;
            case 12:
              switch(G = e[M], M += 1, G) {
                case 35:
                  k = y + r.shift();
                  l = x + r.shift();
                  m = k + r.shift();
                  p = l + r.shift();
                  G = m + r.shift();
                  F = p + r.shift();
                  H = G + r.shift();
                  K = F + r.shift();
                  J = H + r.shift();
                  I = K + r.shift();
                  y = J + r.shift();
                  x = I + r.shift();
                  r.shift();
                  q.curveTo(k, l, m, p, G, F);
                  q.curveTo(H, K, J, I, y, x);
                  break;
                case 34:
                  k = y + r.shift();
                  l = x;
                  m = k + r.shift();
                  p = l + r.shift();
                  G = m + r.shift();
                  F = p;
                  H = G + r.shift();
                  K = p;
                  J = H + r.shift();
                  I = x;
                  y = J + r.shift();
                  q.curveTo(k, l, m, p, G, F);
                  q.curveTo(H, K, J, I, y, x);
                  break;
                case 36:
                  k = y + r.shift();
                  l = x + r.shift();
                  m = k + r.shift();
                  p = l + r.shift();
                  G = m + r.shift();
                  F = p;
                  H = G + r.shift();
                  K = p;
                  J = H + r.shift();
                  I = K + r.shift();
                  y = J + r.shift();
                  q.curveTo(k, l, m, p, G, F);
                  q.curveTo(H, K, J, I, y, x);
                  break;
                case 37:
                  k = y + r.shift();
                  l = x + r.shift();
                  m = k + r.shift();
                  p = l + r.shift();
                  G = m + r.shift();
                  F = p + r.shift();
                  H = G + r.shift();
                  K = F + r.shift();
                  J = H + r.shift();
                  I = K + r.shift();
                  Math.abs(J - y) > Math.abs(I - x) ? y = J + r.shift() : x = I + r.shift();
                  q.curveTo(k, l, m, p, G, F);
                  q.curveTo(H, K, J, I, y, x);
                  break;
                default:
                  console.log("Glyph " + c.index + ": unknown operator 1200" + G), r.length = 0;
              }break;
            case 14:
              0 < r.length && !v && (t = r.shift() + b.nominalWidthX, v = !0);
              w && (q.closePath(), w = !1);
              break;
            case 18:
              g();
              break;
            case 19:
            case 20:
              g();
              M += u + 7 >> 3;
              break;
            case 21:
              2 < r.length && !v && (t = r.shift() + b.nominalWidthX, v = !0);
              x += r.pop();
              y += r.pop();
              f(y, x);
              break;
            case 22:
              1 < r.length && !v && (t = r.shift() + b.nominalWidthX, v = !0);
              y += r.pop();
              f(y, x);
              break;
            case 23:
              g();
              break;
            case 24:
              for (;2 < r.length;) {
                k = y + r.shift(), l = x + r.shift(), m = k + r.shift(), p = l + r.shift(), y = m + r.shift(), x = p + r.shift(), q.curveTo(k, l, m, p, y, x);
              }
              y += r.shift();
              x += r.shift();
              q.lineTo(y, x);
              break;
            case 25:
              for (;6 < r.length;) {
                y += r.shift(), x += r.shift(), q.lineTo(y, x);
              }
              k = y + r.shift();
              l = x + r.shift();
              m = k + r.shift();
              p = l + r.shift();
              y = m + r.shift();
              x = p + r.shift();
              q.curveTo(k, l, m, p, y, x);
              break;
            case 26:
              for (r.length % 2 && (y += r.shift());0 < r.length;) {
                k = y, l = x + r.shift(), m = k + r.shift(), p = l + r.shift(), y = m, x = p + r.shift(), q.curveTo(k, l, m, p, y, x);
              }
              break;
            case 27:
              for (r.length % 2 && (x += r.shift());0 < r.length;) {
                k = y + r.shift(), l = x, m = k + r.shift(), p = l + r.shift(), y = m + r.shift(), x = p, q.curveTo(k, l, m, p, y, x);
              }
              break;
            case 28:
              A = e[M];
              B = e[M + 1];
              r.push((A << 24 | B << 16) >> 16);
              M += 2;
              break;
            case 29:
              G = r.pop() + b.gsubrsBias;
              (G = b.gsubrs[G]) && h(G);
              break;
            case 30:
              for (;0 < r.length && (k = y, l = x + r.shift(), m = k + r.shift(), p = l + r.shift(), y = m + r.shift(), x = p + (1 === r.length ? r.shift() : 0), q.curveTo(k, l, m, p, y, x), 0 !== r.length);) {
                k = y + r.shift(), l = x, m = k + r.shift(), p = l + r.shift(), x = p + r.shift(), y = m + (1 === r.length ? r.shift() : 0), q.curveTo(k, l, m, p, y, x);
              }
              break;
            case 31:
              for (;0 < r.length && (k = y + r.shift(), l = x, m = k + r.shift(), p = l + r.shift(), x = p + r.shift(), y = m + (1 === r.length ? r.shift() : 0), q.curveTo(k, l, m, p, y, x), 0 !== r.length);) {
                k = y, l = x + r.shift(), m = k + r.shift(), p = l + r.shift(), y = m + r.shift(), x = p + (1 === r.length ? r.shift() : 0), q.curveTo(k, l, m, p, y, x);
              }
              break;
            default:
              32 > G ? console.log("Glyph " + c.index + ": unknown operator " + G) : 247 > G ? r.push(G - 139) : 251 > G ? (A = e[M], M += 1, r.push(256 * (G - 247) + A + 108)) : 255 > G ? (A = e[M], M += 1, r.push(256 * -(G - 251) - A - 108)) : (A = e[M], B = e[M + 1], C = e[M + 2], D = e[M + 3], M += 4, r.push((A << 24 | B << 16 | C << 8 | D) / 65536));
          }
        }
      }
      var k, l, m, p, q = new C.Path, r = [], u = 0, v = !1, t = b.defaultWidthX, w = !1, y = 0, x = 0;
      return h(e), c.advanceWidth = t, q;
    }
    function w(b) {
      return 1240 > b.length ? 107 : 33900 > b.length ? 1131 : 32768;
    }
    function p(b, c) {
      var e, f = x.cffStandardStrings.indexOf(b);
      return f = c.indexOf(b), 0 <= f ? e = f + x.cffStandardStrings.length : (e = x.cffStandardStrings.length + c.length, c.push(b)), e;
    }
    function u(b, c, e) {
      for (var f = {}, h = 0;h < b.length;h += 1) {
        var k = b[h], l = c[k.name];
        void 0 === l || g(l, k.value) || ("SID" === k.type && (l = p(l, e)), f[k.op] = {name:k.name, type:k.type, value:l});
      }
      return f;
    }
    function v(b, c) {
      var e = new A.Record("Top DICT", [{name:"dict", type:"DICT", value:{}}]);
      return e.dict = u(D, b, c), e;
    }
    function y(b) {
      var c = new A.Record("Top DICT INDEX", [{name:"topDicts", type:"INDEX", value:[]}]);
      return c.topDicts = [{name:"topDict_0", type:"TABLE", value:b}], c;
    }
    var x = h("../encoding"), m = h("../glyphset"), t = h("../parse"), C = h("../path"), A = h("../table"), D = [{name:"version", op:0, type:"SID"}, {name:"notice", op:1, type:"SID"}, {name:"copyright", op:1200, type:"SID"}, {name:"fullName", op:2, type:"SID"}, {name:"familyName", op:3, type:"SID"}, {name:"weight", op:4, type:"SID"}, {name:"isFixedPitch", op:1201, type:"number", value:0}, {name:"italicAngle", op:1202, type:"number", value:0}, {name:"underlinePosition", op:1203, type:"number", value:-100}, 
    {name:"underlineThickness", op:1204, type:"number", value:50}, {name:"paintType", op:1205, type:"number", value:0}, {name:"charstringType", op:1206, type:"number", value:2}, {name:"fontMatrix", op:1207, type:"real real real real real real".split(" "), value:[.001, 0, 0, .001, 0, 0]}, {name:"uniqueId", op:13, type:"number"}, {name:"fontBBox", op:5, type:["number", "number", "number", "number"], value:[0, 0, 0, 0]}, {name:"strokeWidth", op:1208, type:"number", value:0}, {name:"xuid", op:14, type:[], 
    value:null}, {name:"charset", op:15, type:"offset", value:0}, {name:"encoding", op:16, type:"offset", value:0}, {name:"charStrings", op:17, type:"offset", value:0}, {name:"private", op:18, type:["number", "offset"], value:[0, 0]}], F = [{name:"subrs", op:19, type:"offset", value:0}, {name:"defaultWidthX", op:20, type:"number", value:0}, {name:"nominalWidthX", op:21, type:"number", value:0}];
    b.parse = function(b, c, g) {
      g.tables.cff = {};
      var h;
      h = {};
      h = (h.formatMajor = t.getCard8(b, c), h.formatMinor = t.getCard8(b, c + 1), h.size = t.getCard8(b, c + 2), h.offsetSize = t.getCard8(b, c + 3), h.startOffset = c, h.endOffset = c + 4, h);
      h = k(b, h.endOffset, t.bytesToString);
      h = k(b, h.endOffset);
      var l = k(b, h.endOffset, t.bytesToString), p = k(b, l.endOffset);
      g.gsubrs = p.objects;
      g.gsubrsBias = w(g.gsubrs);
      p = new DataView((new Uint8Array(h.objects[0])).buffer);
      h = l.objects;
      p = e(p, 0, p.byteLength);
      p = q(p, D, h);
      g.tables.cff.topDict = p;
      h = c + p["private"][1];
      var u;
      u = l.objects;
      var v = e(b, h, p["private"][0]);
      u = q(v, F, u);
      (g.defaultWidthX = u.defaultWidthX, g.nominalWidthX = u.nominalWidthX, 0 !== u.subrs) ? (h = k(b, h + u.subrs), g.subrs = h.objects, g.subrsBias = w(g.subrs)) : (g.subrs = [], g.subrsBias = 0);
      h = k(b, c + p.charStrings);
      g.nGlyphs = h.objects.length;
      u = g.nGlyphs;
      var v = l.objects, y, A, C, B = new t.Parser(b, c + p.charset);
      --u;
      l = [".notdef"];
      y = B.parseCard8();
      if (0 === y) {
        for (y = 0;u > y;y += 1) {
          A = B.parseSID(), l.push(f(v, A));
        }
      } else {
        if (1 === y) {
          for (;l.length <= u;) {
            for (A = B.parseSID(), C = B.parseCard8(), y = 0;C >= y;y += 1) {
              l.push(f(v, A)), A += 1;
            }
          }
        } else {
          if (2 !== y) {
            throw Error("Unknown charset format " + y);
          }
          for (;l.length <= u;) {
            for (A = B.parseSID(), C = B.parseCard16(), y = 0;C >= y;y += 1) {
              l.push(f(v, A)), A += 1;
            }
          }
        }
      }
      if (0 === p.encoding) {
        b = new x.CffEncoding(x.cffStandardEncoding, l);
      } else {
        if (1 === p.encoding) {
          b = new x.CffEncoding(x.cffExpertEncoding, l);
        } else {
          u = {};
          b = new t.Parser(b, c + p.encoding);
          c = b.parseCard8();
          if (0 === c) {
            for (v = b.parseCard8(), c = 0;v > c;c += 1) {
              p = b.parseCard8(), u[p] = c;
            }
          } else {
            if (1 !== c) {
              throw Error("Unknown encoding format " + c);
            }
            v = b.parseCard8();
            p = 1;
            for (c = 0;v > c;c += 1) {
              for (B = b.parseCard8(), y = b.parseCard8(), A = B;B + y >= A;A += 1) {
                u[A] = p, p += 1;
              }
            }
          }
          b = new x.CffEncoding(u, l);
        }
      }
      g.cffEncoding = b;
      g.encoding = g.encoding || g.cffEncoding;
      g.glyphs = new m.GlyphSet(g);
      for (b = 0;b < g.nGlyphs;b += 1) {
        g.glyphs.push(b, m.cffGlyphLoader(g, b, r, h.objects[b]));
      }
    };
    b.make = function(b, c) {
      for (var e, f = new A.Table("CFF ", [{name:"header", type:"RECORD"}, {name:"nameIndex", type:"RECORD"}, {name:"topDictIndex", type:"RECORD"}, {name:"stringIndex", type:"RECORD"}, {name:"globalSubrIndex", type:"RECORD"}, {name:"charsets", type:"RECORD"}, {name:"charStringsIndex", type:"RECORD"}, {name:"privateDict", type:"RECORD"}]), g = 1 / c.unitsPerEm, g = {version:c.version, fullName:c.fullName, familyName:c.familyName, weight:c.weightName, fontBBox:c.fontBBox || [0, 0, 0, 0], fontMatrix:[g, 
      0, 0, g, 0, 0], charset:999, encoding:0, charStrings:999, "private":[0, 999]}, h = [], k = 1;k < b.length;k += 1) {
        e = b.get(k), h.push(e.name);
      }
      e = [];
      f.header = new A.Record("Header", [{name:"major", type:"Card8", value:1}, {name:"minor", type:"Card8", value:0}, {name:"hdrSize", type:"Card8", value:4}, {name:"major", type:"Card8", value:1}]);
      c = [c.postScriptName];
      k = new A.Record("Name INDEX", [{name:"names", type:"INDEX", value:[]}]);
      k.names = [];
      for (var l = 0;l < c.length;l += 1) {
        k.names.push({name:"name_" + l, type:"NAME", value:c[l]});
      }
      f.nameIndex = k;
      c = v(g, e);
      f.topDictIndex = y(c);
      f.globalSubrIndex = new A.Record("Global Subr INDEX", [{name:"subrs", type:"INDEX", value:[]}]);
      k = new A.Record("Charsets", [{name:"format", type:"Card8", value:0}]);
      for (l = 0;l < h.length;l += 1) {
        var m = p(h[l], e);
        k.fields.push({name:"glyph_" + l, type:"SID", value:m});
      }
      f.charsets = k;
      h = new A.Record("CharStrings INDEX", [{name:"charStrings", type:"INDEX", value:[]}]);
      for (k = 0;k < b.length;k += 1) {
        var l = b.get(k), m = [], q = l.path;
        m.push({name:"width", type:"NUMBER", value:l.advanceWidth});
        for (var r = 0, t = 0, w = 0;w < q.commands.length;w += 1) {
          var x = q.commands[w];
          if ("Q" === x.type) {
            var C = 1 / 3, B = 2 / 3, x = {type:"C", x:x.x, y:x.y, x1:C * r + B * x.x1, y1:C * t + B * x.y1, x2:C * x.x + B * x.x1, y2:C * x.y + B * x.y1};
          }
          if ("M" === x.type) {
            r = Math.round(x.x - r), t = Math.round(x.y - t), m.push({name:"dx", type:"NUMBER", value:r}), m.push({name:"dy", type:"NUMBER", value:t}), m.push({name:"rmoveto", type:"OP", value:21}), r = Math.round(x.x), t = Math.round(x.y);
          } else {
            if ("L" === x.type) {
              r = Math.round(x.x - r), t = Math.round(x.y - t), m.push({name:"dx", type:"NUMBER", value:r}), m.push({name:"dy", type:"NUMBER", value:t}), m.push({name:"rlineto", type:"OP", value:5}), r = Math.round(x.x), t = Math.round(x.y);
            } else {
              if ("C" === x.type) {
                var C = Math.round(x.x1 - r), B = Math.round(x.y1 - t), D = Math.round(x.x2 - x.x1), G = Math.round(x.y2 - x.y1), r = Math.round(x.x - x.x2), t = Math.round(x.y - x.y2);
                m.push({name:"dx1", type:"NUMBER", value:C});
                m.push({name:"dy1", type:"NUMBER", value:B});
                m.push({name:"dx2", type:"NUMBER", value:D});
                m.push({name:"dy2", type:"NUMBER", value:G});
                m.push({name:"dx", type:"NUMBER", value:r});
                m.push({name:"dy", type:"NUMBER", value:t});
                m.push({name:"rrcurveto", type:"OP", value:8});
                r = Math.round(x.x);
                t = Math.round(x.y);
              }
            }
          }
        }
        m = (m.push({name:"endchar", type:"OP", value:14}), m);
        h.charStrings.push({name:l.name, type:"CHARSTRING", value:m});
      }
      f.charStringsIndex = h;
      b = new A.Record("Private DICT", [{name:"dict", type:"DICT", value:{}}]);
      b = (b.dict = u(F, {}, e), b);
      f.privateDict = b;
      b = new A.Record("String INDEX", [{name:"strings", type:"INDEX", value:[]}]);
      b.strings = [];
      for (h = 0;h < e.length;h += 1) {
        b.strings.push({name:"string_" + h, type:"STRING", value:e[h]});
      }
      f.stringIndex = b;
      b = f.header.sizeOf() + f.nameIndex.sizeOf() + f.topDictIndex.sizeOf() + f.stringIndex.sizeOf() + f.globalSubrIndex.sizeOf();
      return g.charset = b, g.encoding = 0, g.charStrings = g.charset + f.charsets.sizeOf(), g.private[1] = g.charStrings + f.charStringsIndex.sizeOf(), c = v(g, e), f.topDictIndex = y(c), f;
    };
  }, {"../encoding":4, "../glyphset":7, "../parse":10, "../path":11, "../table":13}], 15:[function(h, l, b) {
    function g(b, c, e) {
      b.segments.push({end:c, start:c, delta:-(c - e), offset:0});
    }
    var k = h("../check"), c = h("../parse"), e = h("../table");
    b.parse = function(b, e) {
      var f, g = {};
      g.version = c.getUShort(b, e);
      k.argument(0 === g.version, "cmap table version should be 0.");
      g.numTables = c.getUShort(b, e + 2);
      var h = -1;
      for (f = g.numTables - 1;0 <= f;--f) {
        var l = c.getUShort(b, e + 4 + 8 * f), q = c.getUShort(b, e + 4 + 8 * f + 2);
        if (3 === l && (0 === q || 1 === q || 10 === q)) {
          h = c.getULong(b, e + 4 + 8 * f + 4);
          break;
        }
      }
      if (-1 === h) {
        return null;
      }
      f = new c.Parser(b, e + h);
      if (g.format = f.parseUShort(), 12 === g.format) {
        f.parseUShort();
        g.length = f.parseULong();
        g.language = f.parseULong();
        var y;
        g.groupCount = y = f.parseULong();
        g.glyphIndexMap = {};
        for (b = 0;y > b;b += 1) {
          for (q = f.parseULong(), h = f.parseULong(), l = f.parseULong();h >= q;q += 1) {
            g.glyphIndexMap[q] = l, l++;
          }
        }
      } else {
        if (4 !== g.format) {
          throw Error("Only format 4 and 12 cmap tables are supported.");
        }
        var x = h;
        g.length = f.parseUShort();
        g.language = f.parseUShort();
        g.segCount = h = f.parseUShort() >> 1;
        f.skip("uShort", 3);
        g.glyphIndexMap = {};
        f = new c.Parser(b, e + x + 14);
        var l = new c.Parser(b, e + x + 16 + 2 * h), q = new c.Parser(b, e + x + 16 + 4 * h), m = new c.Parser(b, e + x + 16 + 6 * h), x = e + x + 16 + 8 * h;
        for (e = 0;h - 1 > e;e += 1) {
          for (var t = f.parseUShort(), C = l.parseUShort(), A = q.parseShort(), D = m.parseUShort(), F = C;t >= F;F += 1) {
            0 !== D ? (x = m.offset + m.relativeOffset - 2, x += D, x += 2 * (F - C), y = c.getUShort(b, x), 0 !== y && (y = y + A & 65535)) : y = F + A & 65535, g.glyphIndexMap[F] = y;
          }
        }
      }
      return g;
    };
    b.make = function(b) {
      var c, f = new e.Table("cmap", [{name:"version", type:"USHORT", value:0}, {name:"numTables", type:"USHORT", value:1}, {name:"platformID", type:"USHORT", value:3}, {name:"encodingID", type:"USHORT", value:1}, {name:"offset", type:"ULONG", value:12}, {name:"format", type:"USHORT", value:4}, {name:"length", type:"USHORT", value:0}, {name:"language", type:"USHORT", value:0}, {name:"segCountX2", type:"USHORT", value:0}, {name:"searchRange", type:"USHORT", value:0}, {name:"entrySelector", type:"USHORT", 
      value:0}, {name:"rangeShift", type:"USHORT", value:0}]);
      f.segments = [];
      for (c = 0;c < b.length;c += 1) {
        for (var h = b.get(c), k = 0;k < h.unicodes.length;k += 1) {
          g(f, h.unicodes[k], c);
        }
        f.segments = f.segments.sort(function(b, c) {
          return b.start - c.start;
        });
      }
      f.segments.push({end:65535, start:65535, delta:1, offset:0});
      b = f.segments.length;
      f.segCountX2 = 2 * b;
      f.searchRange = 2 * Math.pow(2, Math.floor(Math.log(b) / Math.log(2)));
      f.entrySelector = Math.log(f.searchRange / 2) / Math.log(2);
      f.rangeShift = f.segCountX2 - f.searchRange;
      var h = [], k = [], l = [], v = [], y = [];
      for (c = 0;b > c;c += 1) {
        var x = f.segments[c], h = h.concat({name:"end_" + c, type:"USHORT", value:x.end}), k = k.concat({name:"start_" + c, type:"USHORT", value:x.start}), l = l.concat({name:"idDelta_" + c, type:"SHORT", value:x.delta}), v = v.concat({name:"idRangeOffset_" + c, type:"USHORT", value:x.offset});
        void 0 !== x.glyphId && (y = y.concat({name:"glyph_" + c, type:"USHORT", value:x.glyphId}));
      }
      return f.fields = f.fields.concat(h), f.fields.push({name:"reservedPad", type:"USHORT", value:0}), f.fields = f.fields.concat(k), f.fields = f.fields.concat(l), f.fields = f.fields.concat(v), f.fields = f.fields.concat(y), f.length = 2 * h.length + 16 + 2 * k.length + 2 * l.length + 2 * v.length + 2 * y.length, f;
    };
  }, {"../check":2, "../parse":10, "../table":13}], 16:[function(h, l, b) {
    function g(b, c) {
      var e = JSON.stringify(b), f = 256, g;
      for (g in c) {
        var h = parseInt(g);
        if (h && !(256 > h)) {
          if (JSON.stringify(c[g]) === e) {
            return h;
          }
          h >= f && (f = h + 1);
        }
      }
      return c[f] = b, f;
    }
    function k(b, c, e) {
      e = g(c.name, e);
      return [{name:"tag_" + b, type:"TAG", value:c.tag}, {name:"minValue_" + b, type:"FIXED", value:c.minValue << 16}, {name:"defaultValue_" + b, type:"FIXED", value:c.defaultValue << 16}, {name:"maxValue_" + b, type:"FIXED", value:c.maxValue << 16}, {name:"flags_" + b, type:"USHORT", value:0}, {name:"nameID_" + b, type:"USHORT", value:e}];
    }
    function c(b, c, e) {
      var f = {};
      b = new r.Parser(b, c);
      return f.tag = b.parseTag(), f.minValue = b.parseFixed(), f.defaultValue = b.parseFixed(), f.maxValue = b.parseFixed(), b.skip("uShort", 1), f.name = e[b.parseUShort()] || {}, f;
    }
    function e(b, c, e, f) {
      f = g(c.name, f);
      f = [{name:"nameID_" + b, type:"USHORT", value:f}, {name:"flags_" + b, type:"USHORT", value:0}];
      for (var h = 0;h < e.length;++h) {
        var k = e[h].tag;
        f.push({name:"axis_" + b + " " + k, type:"FIXED", value:c.coordinates[k] << 16});
      }
      return f;
    }
    function f(b, c, e, f) {
      var g = {};
      b = new r.Parser(b, c);
      g.name = f[b.parseUShort()] || {};
      b.skip("uShort", 1);
      g.coordinates = {};
      for (f = 0;f < e.length;++f) {
        g.coordinates[e[f].tag] = b.parseFixed();
      }
      return g;
    }
    var q = h("../check"), r = h("../parse"), w = h("../table");
    b.make = function(b, c) {
      var f = new w.Table("fvar", [{name:"version", type:"ULONG", value:65536}, {name:"offsetToData", type:"USHORT", value:0}, {name:"countSizePairs", type:"USHORT", value:2}, {name:"axisCount", type:"USHORT", value:b.axes.length}, {name:"axisSize", type:"USHORT", value:20}, {name:"instanceCount", type:"USHORT", value:b.instances.length}, {name:"instanceSize", type:"USHORT", value:4 + 4 * b.axes.length}]);
      f.offsetToData = f.sizeOf();
      for (var g = 0;g < b.axes.length;g++) {
        f.fields = f.fields.concat(k(g, b.axes[g], c));
      }
      for (g = 0;g < b.instances.length;g++) {
        f.fields = f.fields.concat(e(g, b.instances[g], b.axes, c));
      }
      return f;
    };
    b.parse = function(b, e, g) {
      var h = new r.Parser(b, e), k = h.parseULong();
      q.argument(65536 === k, "Unsupported fvar table version.");
      var l = h.parseOffset16();
      h.skip("uShort", 1);
      for (var p = h.parseUShort(), u = h.parseUShort(), k = h.parseUShort(), h = h.parseUShort(), v = [], w = 0;p > w;w++) {
        v.push(c(b, e + l + w * u, g));
      }
      w = [];
      e = e + l + p * u;
      for (l = 0;k > l;l++) {
        w.push(f(b, e + l * h, v, g));
      }
      return {axes:v, instances:w};
    };
  }, {"../check":2, "../parse":10, "../table":13}], 17:[function(h, l, b) {
    function g(b, c, e, f, g) {
      var h;
      return 0 < (c & f) ? (h = b.parseByte(), 0 === (c & g) && (h = -h), h = e + h) : h = 0 < (c & g) ? e : e + b.parseShort(), h;
    }
    function k(b, c, e) {
      c = new r.Parser(c, e);
      b.numberOfContours = c.parseShort();
      b._xMin = c.parseShort();
      b._yMin = c.parseShort();
      b._xMax = c.parseShort();
      b._yMax = c.parseShort();
      var h;
      if (0 < b.numberOfContours) {
        var k, l = b.endPointIndices = [];
        for (k = 0;k < b.numberOfContours;k += 1) {
          l.push(c.parseUShort());
        }
        b.instructionLength = c.parseUShort();
        b.instructions = [];
        for (k = 0;k < b.instructionLength;k += 1) {
          b.instructions.push(c.parseByte());
        }
        var p = l[l.length - 1] + 1;
        e = [];
        for (k = 0;p > k;k += 1) {
          if (h = c.parseByte(), e.push(h), 0 < (8 & h)) {
            for (var q = c.parseByte(), u = 0;q > u;u += 1) {
              e.push(h), k += 1;
            }
          }
        }
        if (f.argument(e.length === p, "Bad flags."), 0 < l.length) {
          u = [];
          if (0 < p) {
            for (k = 0;p > k;k += 1) {
              h = e[k], q = {}, q.onCurve = !!(1 & h), q.lastPointOfContour = 0 <= l.indexOf(k), u.push(q);
            }
            for (k = l = 0;p > k;k += 1) {
              h = e[k], q = u[k], q.x = g(c, h, l, 2, 16), l = q.x;
            }
            for (k = l = 0;p > k;k += 1) {
              h = e[k], q = u[k], q.y = g(c, h, l, 4, 32), l = q.y;
            }
          }
          b.points = u;
        } else {
          b.points = [];
        }
      } else {
        if (0 === b.numberOfContours) {
          b.points = [];
        } else {
          for (b.isComposite = !0, b.points = [], b.components = [], h = !0;h;) {
            e = c.parseUShort(), h = {glyphIndex:c.parseUShort(), xScale:1, scale01:0, scale10:0, yScale:1, dx:0, dy:0}, 0 < (1 & e) ? 0 < (2 & e) ? (h.dx = c.parseShort(), h.dy = c.parseShort()) : h.matchedPoints = [c.parseUShort(), c.parseUShort()] : 0 < (2 & e) ? (h.dx = c.parseChar(), h.dy = c.parseChar()) : h.matchedPoints = [c.parseByte(), c.parseByte()], 0 < (8 & e) ? h.xScale = h.yScale = c.parseF2Dot14() : 0 < (64 & e) ? (h.xScale = c.parseF2Dot14(), h.yScale = c.parseF2Dot14()) : 0 < (128 & 
            e) && (h.xScale = c.parseF2Dot14(), h.scale01 = c.parseF2Dot14(), h.scale10 = c.parseF2Dot14(), h.yScale = c.parseF2Dot14()), b.components.push(h), h = !!(32 & e);
          }
        }
      }
    }
    function c(b, c) {
      for (var e = [], f = 0;f < b.length;f += 1) {
        var g = b[f];
        e.push({x:c.xScale * g.x + c.scale01 * g.y + c.dx, y:c.scale10 * g.x + c.yScale * g.y + c.dy, onCurve:g.onCurve, lastPointOfContour:g.lastPointOfContour});
      }
      return e;
    }
    function e(b, e) {
      if (e.isComposite) {
        for (var g = 0;g < e.components.length;g += 1) {
          var h = e.components[g], k = b.get(h.glyphIndex);
          if (k.getPath(), k.points) {
            if (void 0 !== h.matchedPoints) {
              if (h.matchedPoints[0] > e.points.length - 1 || h.matchedPoints[1] > k.points.length - 1) {
                throw Error("Matched points out of range in " + e.name);
              }
              var l = e.points[h.matchedPoints[0]], p = k.points[h.matchedPoints[1]], h = {xScale:h.xScale, scale01:h.scale01, scale10:h.scale10, yScale:h.yScale, dx:0, dy:0}, p = c([p], h)[0];
              h.dx = l.x - p.x;
              h.dy = l.y - p.y;
            }
            k = c(k.points, h);
            e.points = e.points.concat(k);
          }
        }
      }
      var q;
      e = e.points;
      b = new w.Path;
      if (e) {
        g = [];
        k = [];
        for (l = 0;l < e.length;l += 1) {
          p = e[l], k.push(p), p.lastPointOfContour && (g.push(k), k = []);
        }
        e = (f.argument(0 === k.length, "There are still points left in the current contour."), g);
        for (g = 0;g < e.length;g += 1) {
          var r, k = e[g], l = k[0], p = k[k.length - 1];
          l.onCurve ? (q = null, r = !0) : (l = p.onCurve ? p : {x:(l.x + p.x) / 2, y:(l.y + p.y) / 2}, q = l, r = !1);
          b.moveTo(l.x, l.y);
          for (h = r ? 1 : 0;h < k.length;h += 1) {
            var u = k[h], F = 0 === h ? l : k[h - 1];
            if (F.onCurve && u.onCurve) {
              b.lineTo(u.x, u.y);
            } else {
              if (F.onCurve && !u.onCurve) {
                q = u;
              } else {
                if (F.onCurve || u.onCurve) {
                  if (F.onCurve || !u.onCurve) {
                    throw Error("Invalid state.");
                  }
                  b.quadraticCurveTo(q.x, q.y, u.x, u.y);
                  q = null;
                } else {
                  b.quadraticCurveTo(F.x, F.y, (F.x + u.x) / 2, (F.y + u.y) / 2), q = u;
                }
              }
            }
          }
          l !== p && (q ? b.quadraticCurveTo(q.x, q.y, l.x, l.y) : b.lineTo(l.x, l.y));
        }
        q = (b.closePath(), b);
      } else {
        q = b;
      }
      return q;
    }
    var f = h("../check"), q = h("../glyphset"), r = h("../parse"), w = h("../path");
    b.parse = function(b, c, f, g) {
      var h, l = new q.GlyphSet(g);
      for (h = 0;h < f.length - 1;h += 1) {
        var p = f[h];
        p !== f[h + 1] ? l.push(h, q.ttfGlyphLoader(g, h, k, b, c + p, e)) : l.push(h, q.glyphLoader(g, h));
      }
      return l;
    };
  }, {"../check":2, "../glyphset":7, "../parse":10, "../path":11}], 18:[function(h, l, b) {
    function g(b, c) {
      b = new r.Parser(b, c);
      c = b.parseUShort();
      for (var e = [], f = 0;c > f;f++) {
        e[b.parseTag()] = {offset:b.parseUShort()};
      }
      return e;
    }
    function k(b, c) {
      b = new r.Parser(b, c);
      var e = b.parseUShort();
      c = b.parseUShort();
      if (1 === e) {
        return b.parseUShortList(c);
      }
      if (2 === e) {
        for (e = [];c--;) {
          for (var f = b.parseUShort(), g = b.parseUShort(), h = b.parseUShort();g >= f;f++) {
            e[h++] = f;
          }
        }
        return e;
      }
    }
    function c(b, c) {
      b = new r.Parser(b, c);
      c = b.parseUShort();
      if (1 === c) {
        var e = b.parseUShort();
        c = b.parseUShort();
        var f = b.parseUShortList(c);
        return function(b) {
          return f[b - e] || 0;
        };
      }
      if (2 === c) {
        c = b.parseUShort();
        for (var g = [], h = [], k = [], l = 0;c > l;l++) {
          g[l] = b.parseUShort(), h[l] = b.parseUShort(), k[l] = b.parseUShort();
        }
        return function(b) {
          for (var c = 0, e = g.length - 1;e > c;) {
            var f = c + e + 1 >> 1;
            b < g[f] ? e = f - 1 : c = f;
          }
          return g[c] <= b && b <= h[c] ? k[c] || 0 : 0;
        };
      }
    }
    function e(b, e) {
      var f, g = new r.Parser(b, e), h = g.parseUShort(), l = g.parseUShort(), l = k(b, e + l), m = g.parseUShort(), p = g.parseUShort();
      if (4 === m && 0 === p) {
        var q = {};
        if (1 === h) {
          b = g.parseUShort();
          var w = [];
          e = g.parseOffset16List(b);
          for (h = 0;b > h;h++) {
            var D = e[h], F = q[D];
            if (!F) {
              for (F = {}, g.relativeOffset = D, D = g.parseUShort();D--;) {
                var G = g.parseUShort();
                m && (f = g.parseShort());
                p && g.parseShort();
                F[G] = f;
              }
            }
            w[l[h]] = F;
          }
          return function(b, c) {
            return (b = w[b]) ? b[c] : void 0;
          };
        }
        if (2 === h) {
          var F = g.parseUShort(), D = g.parseUShort(), q = g.parseUShort(), h = g.parseUShort(), B = c(b, e + F), K = c(b, e + D), H = [];
          for (b = 0;q > b;b++) {
            for (e = H[b] = [], F = 0;h > F;F++) {
              m && (f = g.parseShort()), p && g.parseShort(), e[F] = f;
            }
          }
          var M = {};
          for (b = 0;b < l.length;b++) {
            M[l[b]] = 1;
          }
          return function(b, c) {
            if (M[b]) {
              return b = B(b), c = K(c), (b = H[b]) ? b[c] : void 0;
            }
          };
        }
      }
    }
    function f(b, c) {
      var f = new r.Parser(b, c), g = f.parseUShort(), h = f.parseUShort(), k = 16 & h, l = f.parseUShort(), p = f.parseOffset16List(l), f = {lookupType:g, lookupFlag:h, markFilteringSet:k ? f.parseUShort() : -1};
      if (2 === g) {
        for (var q = [], g = 0;l > g;g++) {
          q.push(e(b, c + p[g]));
        }
        f.getKerningValue = function(b, c) {
          for (var e = q.length;e--;) {
            var f = q[e](b, c);
            if (void 0 !== f) {
              return f;
            }
          }
          return 0;
        };
      }
      return f;
    }
    var q = h("../check"), r = h("../parse");
    b.parse = function(b, c, e) {
      var h = new r.Parser(b, c), k = h.parseFixed();
      q.argument(1 === k, "Unsupported GPOS table version.");
      g(b, c + h.parseUShort());
      g(b, c + h.parseUShort());
      var l = h.parseUShort();
      h.relativeOffset = l;
      k = h.parseUShort();
      h = h.parseOffset16List(k);
      c += l;
      for (l = 0;k > l;l++) {
        var m = f(b, c + h[l]);
        2 !== m.lookupType || e.getGposKerningValue || (e.getGposKerningValue = m.getKerningValue);
      }
    };
  }, {"../check":2, "../parse":10}], 19:[function(h, l, b) {
    var g = h("../check"), k = h("../parse").Parser, c = Array(9), e = h("../table");
    c[1] = function() {
      var b = this.offset + this.relativeOffset, c = this.parseUShort();
      return 1 === c ? {substFormat:1, coverage:this.parsePointer(k.coverage), deltaGlyphId:this.parseUShort()} : 2 === c ? {substFormat:2, coverage:this.parsePointer(k.coverage), substitute:this.parseOffset16List()} : void g.assert(!1, "0x" + b.toString(16) + ": lookup type 1 format must be 1 or 2.");
    };
    c[2] = function() {
      var b = this.parseUShort();
      return g.argument(1 === b, "GSUB Multiple Substitution Subtable identifier-format must be 1"), {substFormat:b, coverage:this.parsePointer(k.coverage), sequences:this.parseListOfLists()};
    };
    c[3] = function() {
      var b = this.parseUShort();
      return g.argument(1 === b, "GSUB Alternate Substitution Subtable identifier-format must be 1"), {substFormat:b, coverage:this.parsePointer(k.coverage), alternateSets:this.parseListOfLists()};
    };
    c[4] = function() {
      var b = this.parseUShort();
      return g.argument(1 === b, "GSUB ligature table identifier-format must be 1"), {substFormat:b, coverage:this.parsePointer(k.coverage), ligatureSets:this.parseListOfLists(function() {
        return {ligGlyph:this.parseUShort(), components:this.parseUShortList(this.parseUShort() - 1)};
      })};
    };
    var f = {sequenceIndex:k.uShort, lookupListIndex:k.uShort};
    c[5] = function() {
      var b = this.offset + this.relativeOffset, c = this.parseUShort();
      if (1 === c) {
        return {substFormat:c, coverage:this.parsePointer(k.coverage), ruleSets:this.parseListOfLists(function() {
          var b = this.parseUShort(), c = this.parseUShort();
          return {input:this.parseUShortList(b - 1), lookupRecords:this.parseRecordList(c, f)};
        })};
      }
      if (2 === c) {
        return {substFormat:c, coverage:this.parsePointer(k.coverage), classDef:this.parsePointer(k.classDef), classSets:this.parseListOfLists(function() {
          var b = this.parseUShort(), c = this.parseUShort();
          return {classes:this.parseUShortList(b - 1), lookupRecords:this.parseRecordList(c, f)};
        })};
      }
      if (3 === c) {
        var b = this.parseUShort(), e = this.parseUShort();
        return {substFormat:c, coverages:this.parseList(b, k.pointer(k.coverage)), lookupRecords:this.parseRecordList(e, f)};
      }
      g.assert(!1, "0x" + b.toString(16) + ": lookup type 5 format must be 1, 2 or 3.");
    };
    c[6] = function() {
      var b = this.offset + this.relativeOffset, c = this.parseUShort();
      return 1 === c ? {substFormat:1, coverage:this.parsePointer(k.coverage), chainRuleSets:this.parseListOfLists(function() {
        return {backtrack:this.parseUShortList(), input:this.parseUShortList(this.parseShort() - 1), lookahead:this.parseUShortList(), lookupRecords:this.parseRecordList(f)};
      })} : 2 === c ? {substFormat:2, coverage:this.parsePointer(k.coverage), backtrackClassDef:this.parsePointer(k.classDef), inputClassDef:this.parsePointer(k.classDef), lookaheadClassDef:this.parsePointer(k.classDef), chainClassSet:this.parseListOfLists(function() {
        return {backtrack:this.parseUShortList(), input:this.parseUShortList(this.parseShort() - 1), lookahead:this.parseUShortList(), lookupRecords:this.parseRecordList(f)};
      })} : 3 === c ? {substFormat:3, backtrackCoverage:this.parseList(k.pointer(k.coverage)), inputCoverage:this.parseList(k.pointer(k.coverage)), lookaheadCoverage:this.parseList(k.pointer(k.coverage)), lookupRecords:this.parseRecordList(f)} : void g.assert(!1, "0x" + b.toString(16) + ": lookup type 6 format must be 1, 2 or 3.");
    };
    c[7] = function() {
      var b = this.parseUShort();
      g.argument(1 === b, "GSUB Extension Substitution subtable identifier-format must be 1");
      var b = this.parseUShort(), e = new k(this.data, this.offset + this.parseULong());
      return {substFormat:1, lookupType:b, extension:c[b].call(e)};
    };
    c[8] = function() {
      var b = this.parseUShort();
      return g.argument(1 === b, "GSUB Reverse Chaining Contextual Single Substitution Subtable identifier-format must be 1"), {substFormat:b, coverage:this.parsePointer(k.coverage), backtrackCoverage:this.parseList(k.pointer(k.coverage)), lookaheadCoverage:this.parseList(k.pointer(k.coverage)), substitutes:this.parseUShortList()};
    };
    var q = Array(9);
    q[1] = function(b) {
      return 1 === b.substFormat ? new e.Table("substitutionTable", [{name:"substFormat", type:"USHORT", value:1}, {name:"coverage", type:"TABLE", value:new e.Coverage(b.coverage)}, {name:"deltaGlyphID", type:"USHORT", value:b.deltaGlyphId}]) : new e.Table("substitutionTable", [{name:"substFormat", type:"USHORT", value:2}, {name:"coverage", type:"TABLE", value:new e.Coverage(b.coverage)}].concat(e.ushortList("substitute", b.substitute)));
    };
    q[3] = function(b) {
      return g.assert(1 === b.substFormat, "Lookup type 3 substFormat must be 1."), new e.Table("substitutionTable", [{name:"substFormat", type:"USHORT", value:1}, {name:"coverage", type:"TABLE", value:new e.Coverage(b.coverage)}].concat(e.tableList("altSet", b.alternateSets, function(b) {
        return new e.Table("alternateSetTable", e.ushortList("alternate", b));
      })));
    };
    q[4] = function(b) {
      return g.assert(1 === b.substFormat, "Lookup type 4 substFormat must be 1."), new e.Table("substitutionTable", [{name:"substFormat", type:"USHORT", value:1}, {name:"coverage", type:"TABLE", value:new e.Coverage(b.coverage)}].concat(e.tableList("ligSet", b.ligatureSets, function(b) {
        return new e.Table("ligatureSetTable", e.tableList("ligature", b, function(b) {
          return new e.Table("ligatureTable", [{name:"ligGlyph", type:"USHORT", value:b.ligGlyph}].concat(e.ushortList("component", b.components, b.components.length + 1)));
        }));
      })));
    };
    b.parse = function(b, e) {
      b = new k(b, e || 0);
      e = b.parseVersion();
      return g.argument(1 === e, "Unsupported GSUB table version."), {version:e, scripts:b.parseScriptList(), features:b.parseFeatureList(), lookups:b.parseLookupList(c)};
    };
    b.make = function(b) {
      return new e.Table("GSUB", [{name:"version", type:"ULONG", value:65536}, {name:"scripts", type:"TABLE", value:new e.ScriptList(b.scripts)}, {name:"features", type:"TABLE", value:new e.FeatureList(b.features)}, {name:"lookups", type:"TABLE", value:new e.LookupList(b.lookups, q)}]);
    };
  }, {"../check":2, "../parse":10, "../table":13}], 20:[function(h, l, b) {
    var g = h("../check"), k = h("../parse"), c = h("../table");
    b.parse = function(b, c) {
      var e = {};
      b = new k.Parser(b, c);
      return e.version = b.parseVersion(), e.fontRevision = Math.round(1E3 * b.parseFixed()) / 1E3, e.checkSumAdjustment = b.parseULong(), e.magicNumber = b.parseULong(), g.argument(1594834165 === e.magicNumber, "Font header has wrong magic number."), e.flags = b.parseUShort(), e.unitsPerEm = b.parseUShort(), e.created = b.parseLongDateTime(), e.modified = b.parseLongDateTime(), e.xMin = b.parseShort(), e.yMin = b.parseShort(), e.xMax = b.parseShort(), e.yMax = b.parseShort(), e.macStyle = b.parseUShort(), 
      e.lowestRecPPEM = b.parseUShort(), e.fontDirectionHint = b.parseShort(), e.indexToLocFormat = b.parseShort(), e.glyphDataFormat = b.parseShort(), e;
    };
    b.make = function(b) {
      var e = Math.round((new Date).getTime() / 1E3) + 2082844800, g = e;
      return b.createdTimestamp && (g = b.createdTimestamp + 2082844800), new c.Table("head", [{name:"version", type:"FIXED", value:65536}, {name:"fontRevision", type:"FIXED", value:65536}, {name:"checkSumAdjustment", type:"ULONG", value:0}, {name:"magicNumber", type:"ULONG", value:1594834165}, {name:"flags", type:"USHORT", value:0}, {name:"unitsPerEm", type:"USHORT", value:1E3}, {name:"created", type:"LONGDATETIME", value:g}, {name:"modified", type:"LONGDATETIME", value:e}, {name:"xMin", type:"SHORT", 
      value:0}, {name:"yMin", type:"SHORT", value:0}, {name:"xMax", type:"SHORT", value:0}, {name:"yMax", type:"SHORT", value:0}, {name:"macStyle", type:"USHORT", value:0}, {name:"lowestRecPPEM", type:"USHORT", value:0}, {name:"fontDirectionHint", type:"SHORT", value:2}, {name:"indexToLocFormat", type:"SHORT", value:0}, {name:"glyphDataFormat", type:"SHORT", value:0}], b);
    };
  }, {"../check":2, "../parse":10, "../table":13}], 21:[function(h, l, b) {
    var g = h("../parse"), k = h("../table");
    b.parse = function(b, e) {
      var c = {};
      b = new g.Parser(b, e);
      return c.version = b.parseVersion(), c.ascender = b.parseShort(), c.descender = b.parseShort(), c.lineGap = b.parseShort(), c.advanceWidthMax = b.parseUShort(), c.minLeftSideBearing = b.parseShort(), c.minRightSideBearing = b.parseShort(), c.xMaxExtent = b.parseShort(), c.caretSlopeRise = b.parseShort(), c.caretSlopeRun = b.parseShort(), c.caretOffset = b.parseShort(), b.relativeOffset += 8, c.metricDataFormat = b.parseShort(), c.numberOfHMetrics = b.parseUShort(), c;
    };
    b.make = function(b) {
      return new k.Table("hhea", [{name:"version", type:"FIXED", value:65536}, {name:"ascender", type:"FWORD", value:0}, {name:"descender", type:"FWORD", value:0}, {name:"lineGap", type:"FWORD", value:0}, {name:"advanceWidthMax", type:"UFWORD", value:0}, {name:"minLeftSideBearing", type:"FWORD", value:0}, {name:"minRightSideBearing", type:"FWORD", value:0}, {name:"xMaxExtent", type:"FWORD", value:0}, {name:"caretSlopeRise", type:"SHORT", value:1}, {name:"caretSlopeRun", type:"SHORT", value:0}, {name:"caretOffset", 
      type:"SHORT", value:0}, {name:"reserved1", type:"SHORT", value:0}, {name:"reserved2", type:"SHORT", value:0}, {name:"reserved3", type:"SHORT", value:0}, {name:"reserved4", type:"SHORT", value:0}, {name:"metricDataFormat", type:"SHORT", value:0}, {name:"numberOfHMetrics", type:"USHORT", value:0}], b);
    };
  }, {"../parse":10, "../table":13}], 22:[function(h, l, b) {
    var g = h("../parse"), k = h("../table");
    b.parse = function(b, e, f, h, k) {
      var c, l;
      b = new g.Parser(b, e);
      for (e = 0;h > e;e += 1) {
        f > e && (c = b.parseUShort(), l = b.parseShort());
        var q = k.get(e);
        q.advanceWidth = c;
        q.leftSideBearing = l;
      }
    };
    b.make = function(b) {
      for (var c = new k.Table("hmtx", []), f = 0;f < b.length;f += 1) {
        var g = b.get(f), h = g.leftSideBearing || 0;
        c.fields.push({name:"advanceWidth_" + f, type:"USHORT", value:g.advanceWidth || 0});
        c.fields.push({name:"leftSideBearing_" + f, type:"SHORT", value:h});
      }
      return c;
    };
  }, {"../parse":10, "../table":13}], 23:[function(h, l, b) {
    var g = h("../check"), k = h("../parse");
    b.parse = function(b, e) {
      var c = {};
      b = new k.Parser(b, e);
      e = b.parseUShort();
      g.argument(0 === e, "Unsupported kern table version.");
      b.skip("uShort", 1);
      e = b.parseUShort();
      g.argument(0 === e, "Unsupported kern sub-table version.");
      b.skip("uShort", 2);
      e = b.parseUShort();
      b.skip("uShort", 3);
      for (var h = 0;e > h;h += 1) {
        var l = b.parseUShort(), w = b.parseUShort(), p = b.parseShort();
        c[l + "," + w] = p;
      }
      return c;
    };
  }, {"../check":2, "../parse":10}], 24:[function(h, l, b) {
    var g = h("../parse");
    b.parse = function(b, c, e, f) {
      b = new g.Parser(b, c);
      c = f ? b.parseUShort : b.parseULong;
      for (var h = [], k = 0;e + 1 > k;k += 1) {
        var l = c.call(b);
        f && (l *= 2);
        h.push(l);
      }
      return h;
    };
  }, {"../parse":10}], 25:[function(h, l, b) {
    var g = h("../check"), k = h("../parse"), c = h("../table");
    b.make = function(b) {
      for (var e = new c.Table("ltag", [{name:"version", type:"ULONG", value:1}, {name:"flags", type:"ULONG", value:0}, {name:"numTags", type:"ULONG", value:b.length}]), g = "", h = 12 + 4 * b.length, k = 0;k < b.length;++k) {
        var l = g.indexOf(b[k]);
        0 > l && (l = g.length, g += b[k]);
        e.fields.push({name:"offset " + k, type:"USHORT", value:h + l});
        e.fields.push({name:"length " + k, type:"USHORT", value:b[k].length});
      }
      return e.fields.push({name:"stringPool", type:"CHARARRAY", value:g}), e;
    };
    b.parse = function(b, c) {
      var e = new k.Parser(b, c), f = e.parseULong();
      g.argument(1 === f, "Unsupported ltag table version.");
      e.skip("uLong", 1);
      for (var f = e.parseULong(), h = [], l = 0;f > l;l++) {
        for (var u = "", v = c + e.parseUShort(), y = e.parseUShort(), x = v;v + y > x;++x) {
          u += String.fromCharCode(b.getInt8(x));
        }
        h.push(u);
      }
      return h;
    };
  }, {"../check":2, "../parse":10, "../table":13}], 26:[function(h, l, b) {
    var g = h("../parse"), k = h("../table");
    b.parse = function(b, e) {
      var c = {};
      b = new g.Parser(b, e);
      return c.version = b.parseVersion(), c.numGlyphs = b.parseUShort(), 1 === c.version && (c.maxPoints = b.parseUShort(), c.maxContours = b.parseUShort(), c.maxCompositePoints = b.parseUShort(), c.maxCompositeContours = b.parseUShort(), c.maxZones = b.parseUShort(), c.maxTwilightPoints = b.parseUShort(), c.maxStorage = b.parseUShort(), c.maxFunctionDefs = b.parseUShort(), c.maxInstructionDefs = b.parseUShort(), c.maxStackElements = b.parseUShort(), c.maxSizeOfInstructions = b.parseUShort(), c.maxComponentElements = 
      b.parseUShort(), c.maxComponentDepth = b.parseUShort()), c;
    };
    b.make = function(b) {
      return new k.Table("maxp", [{name:"version", type:"FIXED", value:20480}, {name:"numGlyphs", type:"USHORT", value:b}]);
    };
  }, {"../parse":10, "../table":13}], 27:[function(h, l, b) {
    var g = h("../types").decode, k = h("../check"), c = h("../parse"), e = h("../table");
    b.parse = function(b, e) {
      var f = new c.Parser(b, e), h = f.parseULong();
      k.argument(1 === h, "Unsupported META table version.");
      f.parseULong();
      f.parseULong();
      for (var h = f.parseULong(), l = {}, q = 0;h > q;q++) {
        var v = f.parseTag(), y = f.parseULong(), x = f.parseULong(), y = g.UTF8(b, e + y, x);
        l[v] = y;
      }
      return l;
    };
    b.make = function(b) {
      var c = Object.keys(b).length, f = "", g = 16 + 12 * c, c = new e.Table("meta", [{name:"version", type:"ULONG", value:1}, {name:"flags", type:"ULONG", value:0}, {name:"offset", type:"ULONG", value:g}, {name:"numTags", type:"ULONG", value:c}]), h;
      for (h in b) {
        var k = f.length, f = f + b[h];
        c.fields.push({name:"tag " + h, type:"TAG", value:h});
        c.fields.push({name:"offset " + h, type:"ULONG", value:g + k});
        c.fields.push({name:"length " + h, type:"ULONG", value:b[h].length});
      }
      return c.fields.push({name:"stringPool", type:"CHARARRAY", value:f}), c;
    };
  }, {"../check":2, "../parse":10, "../table":13, "../types":32}], 28:[function(h, l, b) {
    function g(b, c, e) {
      switch(b) {
        case 0:
          return x;
        case 1:
          return t[e] || m[c];
        case 3:
          if (1 === c || 10 === c) {
            return x;
          }
      }
    }
    function k(b) {
      var c = {}, e;
      for (e in b) {
        c[b[e]] = parseInt(e);
      }
      return c;
    }
    function c(b, c, e, f, g, h) {
      return new w.Record("NameRecord", [{name:"platformID", type:"USHORT", value:b}, {name:"encodingID", type:"USHORT", value:c}, {name:"languageID", type:"USHORT", value:e}, {name:"nameID", type:"USHORT", value:f}, {name:"length", type:"USHORT", value:g}, {name:"offset", type:"USHORT", value:h}]);
    }
    function e(b, c) {
      var e;
      a: {
        e = b.length;
        var f = c.length - e + 1, g = 0;
        b: for (;f > g;g++) {
          for (;f > g;) {
            for (var h = 0;e > h;h++) {
              if (c[g + h] !== b[h]) {
                continue b;
              }
            }
            e = g;
            break a;
          }
        }
        e = -1;
      }
      if (0 > e) {
        for (e = c.length, f = 0, g = b.length;g > f;++f) {
          c.push(b[f]);
        }
      }
      return e;
    }
    l = h("../types");
    var f = l.decode, q = l.encode, r = h("../parse"), w = h("../table"), p = "copyright fontFamily fontSubfamily uniqueID fullName version postScriptName trademark manufacturer designer description manufacturerURL designerURL license licenseURL reserved preferredFamily preferredSubfamily compatibleFullName sampleText postScriptFindFontName wwsFamily wwsSubfamily".split(" "), u = {0:"en", 1:"fr", 2:"de", 3:"it", 4:"nl", 5:"sv", 6:"es", 7:"da", 8:"pt", 9:"no", 10:"he", 11:"ja", 12:"ar", 13:"fi", 14:"el", 
    15:"is", 16:"mt", 17:"tr", 18:"hr", 19:"zh-Hant", 20:"ur", 21:"hi", 22:"th", 23:"ko", 24:"lt", 25:"pl", 26:"hu", 27:"es", 28:"lv", 29:"se", 30:"fo", 31:"fa", 32:"ru", 33:"zh", 34:"nl-BE", 35:"ga", 36:"sq", 37:"ro", 38:"cz", 39:"sk", 40:"si", 41:"yi", 42:"sr", 43:"mk", 44:"bg", 45:"uk", 46:"be", 47:"uz", 48:"kk", 49:"az-Cyrl", 50:"az-Arab", 51:"hy", 52:"ka", 53:"mo", 54:"ky", 55:"tg", 56:"tk", 57:"mn-CN", 58:"mn", 59:"ps", 60:"ks", 61:"ku", 62:"sd", 63:"bo", 64:"ne", 65:"sa", 66:"mr", 67:"bn", 
    68:"as", 69:"gu", 70:"pa", 71:"or", 72:"ml", 73:"kn", 74:"ta", 75:"te", 76:"si", 77:"my", 78:"km", 79:"lo", 80:"vi", 81:"id", 82:"tl", 83:"ms", 84:"ms-Arab", 85:"am", 86:"ti", 87:"om", 88:"so", 89:"sw", 90:"rw", 91:"rn", 92:"ny", 93:"mg", 94:"eo", 128:"cy", 129:"eu", 130:"ca", 131:"la", 132:"qu", 133:"gn", 134:"ay", 135:"tt", 136:"ug", 137:"dz", 138:"jv", 139:"su", 140:"gl", 141:"af", 142:"br", 143:"iu", 144:"gd", 145:"gv", 146:"ga", 147:"to", 148:"el-polyton", 149:"kl", 150:"az", 151:"nn"}, 
    v = {0:0, 1:0, 2:0, 3:0, 4:0, 5:0, 6:0, 7:0, 8:0, 9:0, 10:5, 11:1, 12:4, 13:0, 14:6, 15:0, 16:0, 17:0, 18:0, 19:2, 20:4, 21:9, 22:21, 23:3, 24:29, 25:29, 26:29, 27:29, 28:29, 29:0, 30:0, 31:4, 32:7, 33:25, 34:0, 35:0, 36:0, 37:0, 38:29, 39:29, 40:0, 41:5, 42:7, 43:7, 44:7, 45:7, 46:7, 47:7, 48:7, 49:7, 50:4, 51:24, 52:23, 53:7, 54:7, 55:7, 56:7, 57:27, 58:7, 59:4, 60:4, 61:4, 62:4, 63:26, 64:9, 65:9, 66:9, 67:13, 68:13, 69:11, 70:10, 71:12, 72:17, 73:16, 74:14, 75:15, 76:18, 77:19, 78:20, 79:22, 
    80:30, 81:0, 82:0, 83:0, 84:4, 85:28, 86:28, 87:28, 88:0, 89:0, 90:0, 91:0, 92:0, 93:0, 94:0, 128:0, 129:0, 130:0, 131:0, 132:0, 133:0, 134:0, 135:7, 136:4, 137:26, 138:0, 139:0, 140:0, 141:0, 142:0, 143:28, 144:0, 145:0, 146:0, 147:0, 148:6, 149:0, 150:0, 151:0}, y = {1078:"af", 1052:"sq", 1156:"gsw", 1118:"am", 5121:"ar-DZ", 15361:"ar-BH", 3073:"ar", 2049:"ar-IQ", 11265:"ar-JO", 13313:"ar-KW", 12289:"ar-LB", 4097:"ar-LY", 6145:"ary", 8193:"ar-OM", 16385:"ar-QA", 1025:"ar-SA", 10241:"ar-SY", 
    7169:"aeb", 14337:"ar-AE", 9217:"ar-YE", 1067:"hy", 1101:"as", 2092:"az-Cyrl", 1068:"az", 1133:"ba", 1069:"eu", 1059:"be", 2117:"bn", 1093:"bn-IN", 8218:"bs-Cyrl", 5146:"bs", 1150:"br", 1026:"bg", 1027:"ca", 3076:"zh-HK", 5124:"zh-MO", 2052:"zh", 4100:"zh-SG", 1028:"zh-TW", 1155:"co", 1050:"hr", 4122:"hr-BA", 1029:"cs", 1030:"da", 1164:"prs", 1125:"dv", 2067:"nl-BE", 1043:"nl", 3081:"en-AU", 10249:"en-BZ", 4105:"en-CA", 9225:"en-029", 16393:"en-IN", 6153:"en-IE", 8201:"en-JM", 17417:"en-MY", 
    5129:"en-NZ", 13321:"en-PH", 18441:"en-SG", 7177:"en-ZA", 11273:"en-TT", 2057:"en-GB", 1033:"en", 12297:"en-ZW", 1061:"et", 1080:"fo", 1124:"fil", 1035:"fi", 2060:"fr-BE", 3084:"fr-CA", 1036:"fr", 5132:"fr-LU", 6156:"fr-MC", 4108:"fr-CH", 1122:"fy", 1110:"gl", 1079:"ka", 3079:"de-AT", 1031:"de", 5127:"de-LI", 4103:"de-LU", 2055:"de-CH", 1032:"el", 1135:"kl", 1095:"gu", 1128:"ha", 1037:"he", 1081:"hi", 1038:"hu", 1039:"is", 1136:"ig", 1057:"id", 1117:"iu", 2141:"iu-Latn", 2108:"ga", 1076:"xh", 
    1077:"zu", 1040:"it", 2064:"it-CH", 1041:"ja", 1099:"kn", 1087:"kk", 1107:"km", 1158:"quc", 1159:"rw", 1089:"sw", 1111:"kok", 1042:"ko", 1088:"ky", 1108:"lo", 1062:"lv", 1063:"lt", 2094:"dsb", 1134:"lb", 1071:"mk", 2110:"ms-BN", 1086:"ms", 1100:"ml", 1082:"mt", 1153:"mi", 1146:"arn", 1102:"mr", 1148:"moh", 1104:"mn", 2128:"mn-CN", 1121:"ne", 1044:"nb", 2068:"nn", 1154:"oc", 1096:"or", 1123:"ps", 1045:"pl", 1046:"pt", 2070:"pt-PT", 1094:"pa", 1131:"qu-BO", 2155:"qu-EC", 3179:"qu", 1048:"ro", 1047:"rm", 
    1049:"ru", 9275:"smn", 4155:"smj-NO", 5179:"smj", 3131:"se-FI", 1083:"se", 2107:"se-SE", 8251:"sms", 6203:"sma-NO", 7227:"sms", 1103:"sa", 7194:"sr-Cyrl-BA", 3098:"sr", 6170:"sr-Latn-BA", 2074:"sr-Latn", 1132:"nso", 1074:"tn", 1115:"si", 1051:"sk", 1060:"sl", 11274:"es-AR", 16394:"es-BO", 13322:"es-CL", 9226:"es-CO", 5130:"es-CR", 7178:"es-DO", 12298:"es-EC", 17418:"es-SV", 4106:"es-GT", 18442:"es-HN", 2058:"es-MX", 19466:"es-NI", 6154:"es-PA", 15370:"es-PY", 10250:"es-PE", 20490:"es-PR", 3082:"es", 
    1034:"es", 21514:"es-US", 14346:"es-UY", 8202:"es-VE", 2077:"sv-FI", 1053:"sv", 1114:"syr", 1064:"tg", 2143:"tzm", 1097:"ta", 1092:"tt", 1098:"te", 1054:"th", 1105:"bo", 1055:"tr", 1090:"tk", 1152:"ug", 1058:"uk", 1070:"hsb", 1056:"ur", 2115:"uz-Cyrl", 1091:"uz", 1066:"vi", 1106:"cy", 1160:"wo", 1157:"sah", 1144:"ii", 1130:"yo"}, x = "utf-16", m = {0:"macintosh", 1:"x-mac-japanese", 2:"x-mac-chinesetrad", 3:"x-mac-korean", 6:"x-mac-greek", 7:"x-mac-cyrillic", 9:"x-mac-devanagai", 10:"x-mac-gurmukhi", 
    11:"x-mac-gujarati", 12:"x-mac-oriya", 13:"x-mac-bengali", 14:"x-mac-tamil", 15:"x-mac-telugu", 16:"x-mac-kannada", 17:"x-mac-malayalam", 18:"x-mac-sinhalese", 19:"x-mac-burmese", 20:"x-mac-khmer", 21:"x-mac-thai", 22:"x-mac-lao", 23:"x-mac-georgian", 24:"x-mac-armenian", 25:"x-mac-chinesesimp", 26:"x-mac-tibetan", 27:"x-mac-mongolian", 28:"x-mac-ethiopic", 29:"x-mac-ce", 30:"x-mac-vietnamese", 31:"x-mac-extarabic"}, t = {15:"x-mac-icelandic", 17:"x-mac-turkish", 18:"x-mac-croatian", 24:"x-mac-ce", 
    25:"x-mac-ce", 26:"x-mac-ce", 27:"x-mac-ce", 28:"x-mac-ce", 30:"x-mac-icelandic", 37:"x-mac-romanian", 38:"x-mac-ce", 39:"x-mac-ce", 40:"x-mac-ce", 143:"x-mac-inuit", 146:"x-mac-gaelic"};
    b.parse = function(b, c, e) {
      var h = {};
      c = new r.Parser(b, c);
      for (var k = c.parseUShort(), l = c.parseUShort(), m = c.offset + c.parseUShort(), q = 0;l > q;q++) {
        var t = c.parseUShort(), v = c.parseUShort(), w = c.parseUShort(), A = c.parseUShort(), A = p[A] || A, C = c.parseUShort(), D = c.parseUShort(), da;
        a: {
          switch(t) {
            case 0:
              if (65535 === w) {
                da = "und";
                break a;
              }
              if (e) {
                da = e[w];
                break a;
              }
              break;
            case 1:
              da = u[w];
              break a;
            case 3:
              da = y[w];
              break a;
          }
          da = void 0;
        }
        t = g(t, v, w);
        void 0 !== t && void 0 !== da && (t = t === x ? f.UTF16(b, m + D, C) : f.MACSTRING(b, m + D, C, t)) && (v = h[A], void 0 === v && (v = h[A] = {}), v[da] = t);
      }
      return 1 === k && c.parseUShort(), h;
    };
    b.make = function(b, f) {
      var h, l = [], m = {}, r = k(p), t;
      for (t in b) {
        var x = r[t];
        if (void 0 === x && (x = t), h = parseInt(x), isNaN(h)) {
          throw Error('Name table entry "' + t + '" does not exist, see nameTableNames for complete list.');
        }
        m[h] = b[t];
        l.push(h);
      }
      t = k(u);
      x = k(y);
      b = [];
      for (var r = [], A = 0;A < l.length;A++) {
        h = l[A];
        var C = m[h], P;
        for (P in C) {
          var O = C[P], N = 1, ba = t[P], da = v[ba], ca = g(N, da, ba), ca = q.MACSTRING(O, ca);
          void 0 === ca && (N = 0, ba = f.indexOf(P), 0 > ba && (ba = f.length, f.push(P)), da = 4, ca = q.UTF16(O));
          var ia = e(ca, r);
          b.push(c(N, da, ba, h, ca.length, ia));
          N = x[P];
          void 0 !== N && (O = q.UTF16(O), ba = e(O, r), b.push(c(3, 1, N, h, O.length, ba)));
        }
      }
      b.sort(function(b, c) {
        return b.platformID - c.platformID || b.encodingID - c.encodingID || b.languageID - c.languageID || b.nameID - c.nameID;
      });
      f = new w.Table("name", [{name:"format", type:"USHORT", value:0}, {name:"count", type:"USHORT", value:b.length}, {name:"stringOffset", type:"USHORT", value:6 + 12 * b.length}]);
      for (h = 0;h < b.length;h++) {
        f.fields.push({name:"record_" + h, type:"RECORD", value:b[h]});
      }
      return f.fields.push({name:"strings", type:"LITERAL", value:r}), f;
    };
  }, {"../parse":10, "../table":13, "../types":32}], 29:[function(h, l, b) {
    var g = h("../parse"), k = h("../table"), c = [{begin:0, end:127}, {begin:128, end:255}, {begin:256, end:383}, {begin:384, end:591}, {begin:592, end:687}, {begin:688, end:767}, {begin:768, end:879}, {begin:880, end:1023}, {begin:11392, end:11519}, {begin:1024, end:1279}, {begin:1328, end:1423}, {begin:1424, end:1535}, {begin:42240, end:42559}, {begin:1536, end:1791}, {begin:1984, end:2047}, {begin:2304, end:2431}, {begin:2432, end:2559}, {begin:2560, end:2687}, {begin:2688, end:2815}, {begin:2816, 
    end:2943}, {begin:2944, end:3071}, {begin:3072, end:3199}, {begin:3200, end:3327}, {begin:3328, end:3455}, {begin:3584, end:3711}, {begin:3712, end:3839}, {begin:4256, end:4351}, {begin:6912, end:7039}, {begin:4352, end:4607}, {begin:7680, end:7935}, {begin:7936, end:8191}, {begin:8192, end:8303}, {begin:8304, end:8351}, {begin:8352, end:8399}, {begin:8400, end:8447}, {begin:8448, end:8527}, {begin:8528, end:8591}, {begin:8592, end:8703}, {begin:8704, end:8959}, {begin:8960, end:9215}, {begin:9216, 
    end:9279}, {begin:9280, end:9311}, {begin:9312, end:9471}, {begin:9472, end:9599}, {begin:9600, end:9631}, {begin:9632, end:9727}, {begin:9728, end:9983}, {begin:9984, end:10175}, {begin:12288, end:12351}, {begin:12352, end:12447}, {begin:12448, end:12543}, {begin:12544, end:12591}, {begin:12592, end:12687}, {begin:43072, end:43135}, {begin:12800, end:13055}, {begin:13056, end:13311}, {begin:44032, end:55215}, {begin:55296, end:57343}, {begin:67840, end:67871}, {begin:19968, end:40959}, {begin:57344, 
    end:63743}, {begin:12736, end:12783}, {begin:64256, end:64335}, {begin:64336, end:65023}, {begin:65056, end:65071}, {begin:65040, end:65055}, {begin:65104, end:65135}, {begin:65136, end:65279}, {begin:65280, end:65519}, {begin:65520, end:65535}, {begin:3840, end:4095}, {begin:1792, end:1871}, {begin:1920, end:1983}, {begin:3456, end:3583}, {begin:4096, end:4255}, {begin:4608, end:4991}, {begin:5024, end:5119}, {begin:5120, end:5759}, {begin:5760, end:5791}, {begin:5792, end:5887}, {begin:6016, 
    end:6143}, {begin:6144, end:6319}, {begin:10240, end:10495}, {begin:40960, end:42127}, {begin:5888, end:5919}, {begin:66304, end:66351}, {begin:66352, end:66383}, {begin:66560, end:66639}, {begin:118784, end:119039}, {begin:119808, end:120831}, {begin:1044480, end:1048573}, {begin:65024, end:65039}, {begin:917504, end:917631}, {begin:6400, end:6479}, {begin:6480, end:6527}, {begin:6528, end:6623}, {begin:6656, end:6687}, {begin:11264, end:11359}, {begin:11568, end:11647}, {begin:19904, end:19967}, 
    {begin:43008, end:43055}, {begin:65536, end:65663}, {begin:65856, end:65935}, {begin:66432, end:66463}, {begin:66464, end:66527}, {begin:66640, end:66687}, {begin:66688, end:66735}, {begin:67584, end:67647}, {begin:68096, end:68191}, {begin:119552, end:119647}, {begin:73728, end:74751}, {begin:119648, end:119679}, {begin:7040, end:7103}, {begin:7168, end:7247}, {begin:7248, end:7295}, {begin:43136, end:43231}, {begin:43264, end:43311}, {begin:43312, end:43359}, {begin:43520, end:43615}, {begin:65936, 
    end:65999}, {begin:66E3, end:66047}, {begin:66208, end:66271}, {begin:127024, end:127135}];
    b.unicodeRanges = c;
    b.getUnicodeRange = function(b) {
      for (var e = 0;e < c.length;e += 1) {
        var g = c[e];
        if (b >= g.begin && b < g.end) {
          return e;
        }
      }
      return -1;
    };
    b.parse = function(b, c) {
      var e = {};
      b = new g.Parser(b, c);
      e.version = b.parseUShort();
      e.xAvgCharWidth = b.parseShort();
      e.usWeightClass = b.parseUShort();
      e.usWidthClass = b.parseUShort();
      e.fsType = b.parseUShort();
      e.ySubscriptXSize = b.parseShort();
      e.ySubscriptYSize = b.parseShort();
      e.ySubscriptXOffset = b.parseShort();
      e.ySubscriptYOffset = b.parseShort();
      e.ySuperscriptXSize = b.parseShort();
      e.ySuperscriptYSize = b.parseShort();
      e.ySuperscriptXOffset = b.parseShort();
      e.ySuperscriptYOffset = b.parseShort();
      e.yStrikeoutSize = b.parseShort();
      e.yStrikeoutPosition = b.parseShort();
      e.sFamilyClass = b.parseShort();
      e.panose = [];
      for (c = 0;10 > c;c++) {
        e.panose[c] = b.parseByte();
      }
      return e.ulUnicodeRange1 = b.parseULong(), e.ulUnicodeRange2 = b.parseULong(), e.ulUnicodeRange3 = b.parseULong(), e.ulUnicodeRange4 = b.parseULong(), e.achVendID = String.fromCharCode(b.parseByte(), b.parseByte(), b.parseByte(), b.parseByte()), e.fsSelection = b.parseUShort(), e.usFirstCharIndex = b.parseUShort(), e.usLastCharIndex = b.parseUShort(), e.sTypoAscender = b.parseShort(), e.sTypoDescender = b.parseShort(), e.sTypoLineGap = b.parseShort(), e.usWinAscent = b.parseUShort(), e.usWinDescent = 
      b.parseUShort(), 1 <= e.version && (e.ulCodePageRange1 = b.parseULong(), e.ulCodePageRange2 = b.parseULong()), 2 <= e.version && (e.sxHeight = b.parseShort(), e.sCapHeight = b.parseShort(), e.usDefaultChar = b.parseUShort(), e.usBreakChar = b.parseUShort(), e.usMaxContent = b.parseUShort()), e;
    };
    b.make = function(b) {
      return new k.Table("OS/2", [{name:"version", type:"USHORT", value:3}, {name:"xAvgCharWidth", type:"SHORT", value:0}, {name:"usWeightClass", type:"USHORT", value:0}, {name:"usWidthClass", type:"USHORT", value:0}, {name:"fsType", type:"USHORT", value:0}, {name:"ySubscriptXSize", type:"SHORT", value:650}, {name:"ySubscriptYSize", type:"SHORT", value:699}, {name:"ySubscriptXOffset", type:"SHORT", value:0}, {name:"ySubscriptYOffset", type:"SHORT", value:140}, {name:"ySuperscriptXSize", type:"SHORT", 
      value:650}, {name:"ySuperscriptYSize", type:"SHORT", value:699}, {name:"ySuperscriptXOffset", type:"SHORT", value:0}, {name:"ySuperscriptYOffset", type:"SHORT", value:479}, {name:"yStrikeoutSize", type:"SHORT", value:49}, {name:"yStrikeoutPosition", type:"SHORT", value:258}, {name:"sFamilyClass", type:"SHORT", value:0}, {name:"bFamilyType", type:"BYTE", value:0}, {name:"bSerifStyle", type:"BYTE", value:0}, {name:"bWeight", type:"BYTE", value:0}, {name:"bProportion", type:"BYTE", value:0}, {name:"bContrast", 
      type:"BYTE", value:0}, {name:"bStrokeVariation", type:"BYTE", value:0}, {name:"bArmStyle", type:"BYTE", value:0}, {name:"bLetterform", type:"BYTE", value:0}, {name:"bMidline", type:"BYTE", value:0}, {name:"bXHeight", type:"BYTE", value:0}, {name:"ulUnicodeRange1", type:"ULONG", value:0}, {name:"ulUnicodeRange2", type:"ULONG", value:0}, {name:"ulUnicodeRange3", type:"ULONG", value:0}, {name:"ulUnicodeRange4", type:"ULONG", value:0}, {name:"achVendID", type:"CHARARRAY", value:"XXXX"}, {name:"fsSelection", 
      type:"USHORT", value:0}, {name:"usFirstCharIndex", type:"USHORT", value:0}, {name:"usLastCharIndex", type:"USHORT", value:0}, {name:"sTypoAscender", type:"SHORT", value:0}, {name:"sTypoDescender", type:"SHORT", value:0}, {name:"sTypoLineGap", type:"SHORT", value:0}, {name:"usWinAscent", type:"USHORT", value:0}, {name:"usWinDescent", type:"USHORT", value:0}, {name:"ulCodePageRange1", type:"ULONG", value:0}, {name:"ulCodePageRange2", type:"ULONG", value:0}, {name:"sxHeight", type:"SHORT", value:0}, 
      {name:"sCapHeight", type:"SHORT", value:0}, {name:"usDefaultChar", type:"USHORT", value:0}, {name:"usBreakChar", type:"USHORT", value:0}, {name:"usMaxContext", type:"USHORT", value:0}], b);
    };
  }, {"../parse":10, "../table":13}], 30:[function(h, l, b) {
    var g = h("../encoding"), k = h("../parse"), c = h("../table");
    b.parse = function(b, c) {
      var e = {};
      c = new k.Parser(b, c);
      switch(e.version = c.parseVersion(), e.italicAngle = c.parseFixed(), e.underlinePosition = c.parseShort(), e.underlineThickness = c.parseShort(), e.isFixedPitch = c.parseULong(), e.minMemType42 = c.parseULong(), e.maxMemType42 = c.parseULong(), e.minMemType1 = c.parseULong(), e.maxMemType1 = c.parseULong(), e.version) {
        case 1:
          e.names = g.standardNames.slice();
          break;
        case 2:
          e.numberOfGlyphs = c.parseUShort();
          e.glyphNameIndex = Array(e.numberOfGlyphs);
          for (b = 0;b < e.numberOfGlyphs;b++) {
            e.glyphNameIndex[b] = c.parseUShort();
          }
          e.names = [];
          for (b = 0;b < e.numberOfGlyphs;b++) {
            if (e.glyphNameIndex[b] >= g.standardNames.length) {
              var f = c.parseChar();
              e.names.push(c.parseString(f));
            }
          }
          break;
        case 2.5:
          for (e.numberOfGlyphs = c.parseUShort(), e.offset = Array(e.numberOfGlyphs), b = 0;b < e.numberOfGlyphs;b++) {
            e.offset[b] = c.parseChar();
          }
      }
      return e;
    };
    b.make = function() {
      return new c.Table("post", [{name:"version", type:"FIXED", value:196608}, {name:"italicAngle", type:"FIXED", value:0}, {name:"underlinePosition", type:"FWORD", value:0}, {name:"underlineThickness", type:"FWORD", value:0}, {name:"isFixedPitch", type:"ULONG", value:0}, {name:"minMemType42", type:"ULONG", value:0}, {name:"maxMemType42", type:"ULONG", value:0}, {name:"minMemType1", type:"ULONG", value:0}, {name:"maxMemType1", type:"ULONG", value:0}]);
    };
  }, {"../encoding":4, "../parse":10, "../table":13}], 31:[function(h, l, b) {
    function g(b) {
      for (;0 !== b.length % 4;) {
        b.push(0);
      }
      for (var c = 0, e = 0;e < b.length;e += 4) {
        c += (b[e] << 24) + (b[e + 1] << 16) + (b[e + 2] << 8) + b[e + 3];
      }
      return c % Math.pow(2, 32);
    }
    function k(b, c, e, g) {
      return new q.Record("Table Record", [{name:"tag", type:"TAG", value:void 0 !== b ? b : ""}, {name:"checkSum", type:"ULONG", value:void 0 !== c ? c : 0}, {name:"offset", type:"ULONG", value:void 0 !== e ? e : 0}, {name:"length", type:"ULONG", value:void 0 !== g ? g : 0}]);
    }
    function c(b) {
      var c = new q.Table("sfnt", [{name:"version", type:"TAG", value:"OTTO"}, {name:"numTables", type:"USHORT", value:0}, {name:"searchRange", type:"USHORT", value:0}, {name:"entrySelector", type:"USHORT", value:0}, {name:"rangeShift", type:"USHORT", value:0}]);
      c.tables = b;
      c.numTables = b.length;
      var e = Math.pow(2, Math.log(c.numTables) / Math.log(2) | 0);
      c.searchRange = 16 * e;
      c.entrySelector = Math.log(e) / Math.log(2) | 0;
      c.rangeShift = 16 * c.numTables - c.searchRange;
      for (var e = [], h = [], l = c.sizeOf() + k().sizeOf() * c.numTables;0 !== l % 4;) {
        l += 1, h.push({name:"padding", type:"BYTE", value:0});
      }
      for (var m = 0;m < b.length;m += 1) {
        var p = b[m];
        f.argument(4 === p.tableName.length, "Table name" + p.tableName + " is invalid.");
        var r = p.sizeOf(), u = k(p.tableName, g(p.encode()), l, r);
        e.push({name:u.tag + " Table Record", type:"RECORD", value:u});
        h.push({name:p.tableName + " table", type:"RECORD", value:p});
        l += r;
        for (f.argument(!isNaN(l), "Something went wrong calculating the offset.");0 !== l % 4;) {
          l += 1, h.push({name:"padding", type:"BYTE", value:0});
        }
      }
      return e.sort(function(b, c) {
        return b.value.tag > c.value.tag ? 1 : -1;
      }), c.fields = c.fields.concat(e), c.fields = c.fields.concat(h), c;
    }
    function e(b, c, e) {
      for (var g = 0;g < c.length;g += 1) {
        var f = b.charToGlyphIndex(c[g]);
        if (0 < f) {
          return b.glyphs.get(f).getMetrics();
        }
      }
      return e;
    }
    var f = h("../check"), q = h("../table"), r = h("./cmap"), w = h("./cff"), p = h("./head"), u = h("./hhea"), v = h("./hmtx"), y = h("./ltag"), x = h("./maxp"), m = h("./name"), t = h("./os2"), C = h("./post"), A = h("./gsub"), D = h("./meta");
    b.computeCheckSum = g;
    b.make = c;
    b.fontToTable = function(b) {
      for (var f, h = [], k = [], l = [], q = [], F = [], P = [], O = [], N = 0, ba = 0, da = 0, ca = 0, ia = 0, R = 0;R < b.glyphs.length;R += 1) {
        var S = b.glyphs.get(R), I = 0 | S.unicode;
        if (isNaN(S.advanceWidth)) {
          throw Error("Glyph " + S.name + " (" + R + "): advanceWidth is not a number.");
        }
        (f > I || void 0 === f) && 0 < I && (f = I);
        I > N && (N = I);
        I = t.getUnicodeRange(I);
        if (32 > I) {
          ba |= 1 << I;
        } else {
          if (64 > I) {
            da |= 1 << I - 32;
          } else {
            if (96 > I) {
              ca |= 1 << I - 64;
            } else {
              if (!(123 > I)) {
                throw Error("Unicode ranges bits > 123 are reserved for internal usage");
              }
              ia |= 1 << I - 96;
            }
          }
        }
        ".notdef" !== S.name && (I = S.getMetrics(), h.push(I.xMin), k.push(I.yMin), l.push(I.xMax), q.push(I.yMax), P.push(I.leftSideBearing), O.push(I.rightSideBearing), F.push(S.advanceWidth));
      }
      R = Math.min.apply(null, h);
      k = Math.min.apply(null, k);
      l = Math.max.apply(null, l);
      q = Math.max.apply(null, q);
      h = Math.max.apply(null, F);
      for (I = S = 0;I < F.length;I += 1) {
        S += F[I];
      }
      R = {xMin:R, yMin:k, xMax:l, yMax:q, advanceWidthMax:h, advanceWidthAvg:S / F.length, minLeftSideBearing:Math.min.apply(null, P), maxLeftSideBearing:Math.max.apply(null, P), minRightSideBearing:Math.min.apply(null, O)};
      R.ascender = b.ascender;
      R.descender = b.descender;
      F = p.make({flags:3, unitsPerEm:b.unitsPerEm, xMin:R.xMin, yMin:R.yMin, xMax:R.xMax, yMax:R.yMax, lowestRecPPEM:3, createdTimestamp:b.createdTimestamp});
      P = u.make({ascender:R.ascender, descender:R.descender, advanceWidthMax:R.advanceWidthMax, minLeftSideBearing:R.minLeftSideBearing, minRightSideBearing:R.minRightSideBearing, xMaxExtent:R.maxLeftSideBearing + (R.xMax - R.xMin), numberOfHMetrics:b.glyphs.length});
      O = x.make(b.glyphs.length);
      f = t.make({xAvgCharWidth:Math.round(R.advanceWidthAvg), usWeightClass:b.tables.os2.usWeightClass, usWidthClass:b.tables.os2.usWidthClass, usFirstCharIndex:f, usLastCharIndex:N, ulUnicodeRange1:ba, ulUnicodeRange2:da, ulUnicodeRange3:ca, ulUnicodeRange4:ia, fsSelection:b.tables.os2.fsSelection, sTypoAscender:R.ascender, sTypoDescender:R.descender, sTypoLineGap:0, usWinAscent:R.yMax, usWinDescent:Math.abs(R.yMin), ulCodePageRange1:1, sxHeight:e(b, "xyvw", {yMax:Math.round(R.ascender / 2)}).yMax, 
      sCapHeight:e(b, "HIKLEFJMNTZBDPRAGOQSUVWXY", R).yMax, usDefaultChar:b.hasChar(" ") ? 32 : 0, usBreakChar:b.hasChar(" ") ? 32 : 0});
      N = v.make(b.glyphs);
      ba = r.make(b.glyphs);
      da = b.getEnglishName("fontFamily");
      ca = b.getEnglishName("fontSubfamily");
      ia = da + " " + ca;
      (q = b.getEnglishName("postScriptName")) || (q = da.replace(/\s/g, "") + "-" + ca);
      var l = {}, V;
      for (V in b.names) {
        l[V] = b.names[V];
      }
      l.uniqueID || (l.uniqueID = {en:b.getEnglishName("manufacturer") + ":" + ia});
      l.postScriptName || (l.postScriptName = {en:q});
      l.preferredFamily || (l.preferredFamily = b.names.fontFamily);
      l.preferredSubfamily || (l.preferredSubfamily = b.names.fontSubfamily);
      k = [];
      V = m.make(l, k);
      l = 0 < k.length ? y.make(k) : void 0;
      k = C.make();
      ca = w.make(b.glyphs, {version:b.getEnglishName("version"), fullName:ia, familyName:da, weightName:ca, postScriptName:q, unitsPerEm:b.unitsPerEm, fontBBox:[0, R.yMin, R.ascender, R.advanceWidthMax]});
      da = b.metas && 0 < Object.keys(b.metas).length ? D.make(b.metas) : void 0;
      V = [F, P, O, f, V, ba, k, ca, N];
      l && V.push(l);
      b.tables.gsub && V.push(A.make(b.tables.gsub));
      da && V.push(da);
      b = c(V);
      V = b.encode();
      V = g(V);
      f = b.fields;
      N = !1;
      for (R = 0;R < f.length;R += 1) {
        if ("head table" === f[R].name) {
          f[R].value.checkSumAdjustment = 2981146554 - V;
          N = !0;
          break;
        }
      }
      if (!N) {
        throw Error("Could not find head table with checkSum to adjust.");
      }
      return b;
    };
  }, {"../check":2, "../table":13, "./cff":14, "./cmap":15, "./gsub":19, "./head":20, "./hhea":21, "./hmtx":22, "./ltag":25, "./maxp":26, "./meta":27, "./name":28, "./os2":29, "./post":30}], 32:[function(h, l, b) {
    function g(b) {
      return function() {
        return b;
      };
    }
    var k = h("./check");
    h = {};
    var c = {}, e = {};
    c.BYTE = function(b) {
      return k.argument(0 <= b && 255 >= b, "Byte value should be between 0 and 255."), [b];
    };
    e.BYTE = g(1);
    c.CHAR = function(b) {
      return [b.charCodeAt(0)];
    };
    e.CHAR = g(1);
    c.CHARARRAY = function(b) {
      for (var c = [], e = 0;e < b.length;e += 1) {
        c[e] = b.charCodeAt(e);
      }
      return c;
    };
    e.CHARARRAY = function(b) {
      return b.length;
    };
    c.USHORT = function(b) {
      return [b >> 8 & 255, 255 & b];
    };
    e.USHORT = g(2);
    c.SHORT = function(b) {
      return 32768 <= b && (b = -(65536 - b)), [b >> 8 & 255, 255 & b];
    };
    e.SHORT = g(2);
    c.UINT24 = function(b) {
      return [b >> 16 & 255, b >> 8 & 255, 255 & b];
    };
    e.UINT24 = g(3);
    c.ULONG = function(b) {
      return [b >> 24 & 255, b >> 16 & 255, b >> 8 & 255, 255 & b];
    };
    e.ULONG = g(4);
    c.LONG = function(b) {
      return 2147483648 <= b && (b = -(4294967296 - b)), [b >> 24 & 255, b >> 16 & 255, b >> 8 & 255, 255 & b];
    };
    e.LONG = g(4);
    c.FIXED = c.ULONG;
    e.FIXED = e.ULONG;
    c.FWORD = c.SHORT;
    e.FWORD = e.SHORT;
    c.UFWORD = c.USHORT;
    e.UFWORD = e.USHORT;
    c.LONGDATETIME = function(b) {
      return [0, 0, 0, 0, b >> 24 & 255, b >> 16 & 255, b >> 8 & 255, 255 & b];
    };
    e.LONGDATETIME = g(8);
    c.TAG = function(b) {
      return k.argument(4 === b.length, "Tag should be exactly 4 ASCII characters."), [b.charCodeAt(0), b.charCodeAt(1), b.charCodeAt(2), b.charCodeAt(3)];
    };
    e.TAG = g(4);
    c.Card8 = c.BYTE;
    e.Card8 = e.BYTE;
    c.Card16 = c.USHORT;
    e.Card16 = e.USHORT;
    c.OffSize = c.BYTE;
    e.OffSize = e.BYTE;
    c.SID = c.USHORT;
    e.SID = e.USHORT;
    c.NUMBER = function(b) {
      return -107 <= b && 107 >= b ? [b + 139] : 108 <= b && 1131 >= b ? (b -= 108, [(b >> 8) + 247, 255 & b]) : -1131 <= b && -108 >= b ? (b = -b - 108, [(b >> 8) + 251, 255 & b]) : -32768 <= b && 32767 >= b ? c.NUMBER16(b) : c.NUMBER32(b);
    };
    e.NUMBER = function(b) {
      return c.NUMBER(b).length;
    };
    c.NUMBER16 = function(b) {
      return [28, b >> 8 & 255, 255 & b];
    };
    e.NUMBER16 = g(3);
    c.NUMBER32 = function(b) {
      return [29, b >> 24 & 255, b >> 16 & 255, b >> 8 & 255, 255 & b];
    };
    e.NUMBER32 = g(5);
    c.REAL = function(b) {
      var c = b.toString(), e = /\.(\d*?)(?:9{5,20}|0{5,20})\d{0,2}(?:e(.+)|$)/.exec(c);
      e && (c = parseFloat("1e" + ((e[2] ? +e[2] : 0) + e[1].length)), c = (Math.round(b * c) / c).toString());
      var g = "";
      b = 0;
      for (e = c.length;e > b;b += 1) {
        var f = c[b], g = g + ("e" === f ? "-" === c[++b] ? "c" : "b" : "." === f ? "a" : "-" === f ? "e" : f);
      }
      g += 1 & g.length ? "f" : "ff";
      c = [30];
      b = 0;
      for (e = g.length;e > b;b += 2) {
        c.push(parseInt(g.substr(b, 2), 16));
      }
      return c;
    };
    e.REAL = function(b) {
      return c.REAL(b).length;
    };
    c.NAME = c.CHARARRAY;
    e.NAME = e.CHARARRAY;
    c.STRING = c.CHARARRAY;
    e.STRING = e.CHARARRAY;
    h.UTF8 = function(b, c, e) {
      for (var g = [], f = 0;e > f;f++, c += 1) {
        g[f] = b.getUint8(c);
      }
      return String.fromCharCode.apply(null, g);
    };
    h.UTF16 = function(b, c, e) {
      var g = [];
      e /= 2;
      for (var f = 0;e > f;f++, c += 2) {
        g[f] = b.getUint16(c);
      }
      return String.fromCharCode.apply(null, g);
    };
    c.UTF16 = function(b) {
      for (var c = [], e = 0;e < b.length;e += 1) {
        var g = b.charCodeAt(e);
        c[c.length] = g >> 8 & 255;
        c[c.length] = 255 & g;
      }
      return c;
    };
    e.UTF16 = function(b) {
      return 2 * b.length;
    };
    var f = {"x-mac-croatian":"\u00c4\u00c5\u00c7\u00c9\u00d1\u00d6\u00dc\u00e1\u00e0\u00e2\u00e4\u00e3\u00e5\u00e7\u00e9\u00e8\u00ea\u00eb\u00ed\u00ec\u00ee\u00ef\u00f1\u00f3\u00f2\u00f4\u00f6\u00f5\u00fa\u00f9\u00fb\u00fc\u2020\u00b0\u00a2\u00a3\u00a7\u2022\u00b6\u00df\u00ae\u0160\u2122\u00b4\u00a8\u2260\u017d\u00d8\u221e\u00b1\u2264\u2265\u2206\u00b5\u2202\u2211\u220f\u0161\u222b\u00aa\u00ba\u03a9\u017e\u00f8\u00bf\u00a1\u00ac\u221a\u0192\u2248\u0106\u00ab\u010c\u2026\u00a0\u00c0\u00c3\u00d5\u0152\u0153\u0110\u2014\u201c\u201d\u2018\u2019\u00f7\u25ca\uf8ff\u00a9\u2044\u20ac\u2039\u203a\u00c6\u00bb\u2013\u00b7\u201a\u201e\u2030\u00c2\u0107\u00c1\u010d\u00c8\u00cd\u00ce\u00cf\u00cc\u00d3\u00d4\u0111\u00d2\u00da\u00db\u00d9\u0131\u02c6\u02dc\u00af\u03c0\u00cb\u02da\u00b8\u00ca\u00e6\u02c7", 
    "x-mac-cyrillic":"\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041a\u041b\u041c\u041d\u041e\u041f\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042a\u042b\u042c\u042d\u042e\u042f\u2020\u00b0\u0490\u00a3\u00a7\u2022\u00b6\u0406\u00ae\u00a9\u2122\u0402\u0452\u2260\u0403\u0453\u221e\u00b1\u2264\u2265\u0456\u00b5\u0491\u0408\u0404\u0454\u0407\u0457\u0409\u0459\u040a\u045a\u0458\u0405\u00ac\u221a\u0192\u2248\u2206\u00ab\u00bb\u2026\u00a0\u040b\u045b\u040c\u045c\u0455\u2013\u2014\u201c\u201d\u2018\u2019\u00f7\u201e\u040e\u045e\u040f\u045f\u2116\u0401\u0451\u044f\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043a\u043b\u043c\u043d\u043e\u043f\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044a\u044b\u044c\u044d\u044e", 
    "x-mac-gaelic":"\u00c4\u00c5\u00c7\u00c9\u00d1\u00d6\u00dc\u00e1\u00e0\u00e2\u00e4\u00e3\u00e5\u00e7\u00e9\u00e8\u00ea\u00eb\u00ed\u00ec\u00ee\u00ef\u00f1\u00f3\u00f2\u00f4\u00f6\u00f5\u00fa\u00f9\u00fb\u00fc\u2020\u00b0\u00a2\u00a3\u00a7\u2022\u00b6\u00df\u00ae\u00a9\u2122\u00b4\u00a8\u2260\u00c6\u00d8\u1e02\u00b1\u2264\u2265\u1e03\u010a\u010b\u1e0a\u1e0b\u1e1e\u1e1f\u0120\u0121\u1e40\u00e6\u00f8\u1e41\u1e56\u1e57\u027c\u0192\u017f\u1e60\u00ab\u00bb\u2026\u00a0\u00c0\u00c3\u00d5\u0152\u0153\u2013\u2014\u201c\u201d\u2018\u2019\u1e61\u1e9b\u00ff\u0178\u1e6a\u20ac\u2039\u203a\u0176\u0177\u1e6b\u00b7\u1ef2\u1ef3\u204a\u00c2\u00ca\u00c1\u00cb\u00c8\u00cd\u00ce\u00cf\u00cc\u00d3\u00d4\u2663\u00d2\u00da\u00db\u00d9\u0131\u00dd\u00fd\u0174\u0175\u1e84\u1e85\u1e80\u1e81\u1e82\u1e83", 
    "x-mac-greek":"\u00c4\u00b9\u00b2\u00c9\u00b3\u00d6\u00dc\u0385\u00e0\u00e2\u00e4\u0384\u00a8\u00e7\u00e9\u00e8\u00ea\u00eb\u00a3\u2122\u00ee\u00ef\u2022\u00bd\u2030\u00f4\u00f6\u00a6\u20ac\u00f9\u00fb\u00fc\u2020\u0393\u0394\u0398\u039b\u039e\u03a0\u00df\u00ae\u00a9\u03a3\u03aa\u00a7\u2260\u00b0\u00b7\u0391\u00b1\u2264\u2265\u00a5\u0392\u0395\u0396\u0397\u0399\u039a\u039c\u03a6\u03ab\u03a8\u03a9\u03ac\u039d\u00ac\u039f\u03a1\u2248\u03a4\u00ab\u00bb\u2026\u00a0\u03a5\u03a7\u0386\u0388\u0153\u2013\u2015\u201c\u201d\u2018\u2019\u00f7\u0389\u038a\u038c\u038e\u03ad\u03ae\u03af\u03cc\u038f\u03cd\u03b1\u03b2\u03c8\u03b4\u03b5\u03c6\u03b3\u03b7\u03b9\u03be\u03ba\u03bb\u03bc\u03bd\u03bf\u03c0\u03ce\u03c1\u03c3\u03c4\u03b8\u03c9\u03c2\u03c7\u03c5\u03b6\u03ca\u03cb\u0390\u03b0\u00ad", 
    "x-mac-icelandic":"\u00c4\u00c5\u00c7\u00c9\u00d1\u00d6\u00dc\u00e1\u00e0\u00e2\u00e4\u00e3\u00e5\u00e7\u00e9\u00e8\u00ea\u00eb\u00ed\u00ec\u00ee\u00ef\u00f1\u00f3\u00f2\u00f4\u00f6\u00f5\u00fa\u00f9\u00fb\u00fc\u00dd\u00b0\u00a2\u00a3\u00a7\u2022\u00b6\u00df\u00ae\u00a9\u2122\u00b4\u00a8\u2260\u00c6\u00d8\u221e\u00b1\u2264\u2265\u00a5\u00b5\u2202\u2211\u220f\u03c0\u222b\u00aa\u00ba\u03a9\u00e6\u00f8\u00bf\u00a1\u00ac\u221a\u0192\u2248\u2206\u00ab\u00bb\u2026\u00a0\u00c0\u00c3\u00d5\u0152\u0153\u2013\u2014\u201c\u201d\u2018\u2019\u00f7\u25ca\u00ff\u0178\u2044\u20ac\u00d0\u00f0\u00de\u00fe\u00fd\u00b7\u201a\u201e\u2030\u00c2\u00ca\u00c1\u00cb\u00c8\u00cd\u00ce\u00cf\u00cc\u00d3\u00d4\uf8ff\u00d2\u00da\u00db\u00d9\u0131\u02c6\u02dc\u00af\u02d8\u02d9\u02da\u00b8\u02dd\u02db\u02c7", 
    "x-mac-inuit":"\u1403\u1404\u1405\u1406\u140a\u140b\u1431\u1432\u1433\u1434\u1438\u1439\u1449\u144e\u144f\u1450\u1451\u1455\u1456\u1466\u146d\u146e\u146f\u1470\u1472\u1473\u1483\u148b\u148c\u148d\u148e\u1490\u1491\u00b0\u14a1\u14a5\u14a6\u2022\u00b6\u14a7\u00ae\u00a9\u2122\u14a8\u14aa\u14ab\u14bb\u14c2\u14c3\u14c4\u14c5\u14c7\u14c8\u14d0\u14ef\u14f0\u14f1\u14f2\u14f4\u14f5\u1505\u14d5\u14d6\u14d7\u14d8\u14da\u14db\u14ea\u1528\u1529\u152a\u152b\u152d\u2026\u00a0\u152e\u153e\u1555\u1556\u1557\u2013\u2014\u201c\u201d\u2018\u2019\u1558\u1559\u155a\u155d\u1546\u1547\u1548\u1549\u154b\u154c\u1550\u157f\u1580\u1581\u1582\u1583\u1584\u1585\u158f\u1590\u1591\u1592\u1593\u1594\u1595\u1671\u1672\u1673\u1674\u1675\u1676\u1596\u15a0\u15a1\u15a2\u15a3\u15a4\u15a5\u15a6\u157c\u0141\u0142", 
    "x-mac-ce":"\u00c4\u0100\u0101\u00c9\u0104\u00d6\u00dc\u00e1\u0105\u010c\u00e4\u010d\u0106\u0107\u00e9\u0179\u017a\u010e\u00ed\u010f\u0112\u0113\u0116\u00f3\u0117\u00f4\u00f6\u00f5\u00fa\u011a\u011b\u00fc\u2020\u00b0\u0118\u00a3\u00a7\u2022\u00b6\u00df\u00ae\u00a9\u2122\u0119\u00a8\u2260\u0123\u012e\u012f\u012a\u2264\u2265\u012b\u0136\u2202\u2211\u0142\u013b\u013c\u013d\u013e\u0139\u013a\u0145\u0146\u0143\u00ac\u221a\u0144\u0147\u2206\u00ab\u00bb\u2026\u00a0\u0148\u0150\u00d5\u0151\u014c\u2013\u2014\u201c\u201d\u2018\u2019\u00f7\u25ca\u014d\u0154\u0155\u0158\u2039\u203a\u0159\u0156\u0157\u0160\u201a\u201e\u0161\u015a\u015b\u00c1\u0164\u0165\u00cd\u017d\u017e\u016a\u00d3\u00d4\u016b\u016e\u00da\u016f\u0170\u0171\u0172\u0173\u00dd\u00fd\u0137\u017b\u0141\u017c\u0122\u02c7", 
    macintosh:"\u00c4\u00c5\u00c7\u00c9\u00d1\u00d6\u00dc\u00e1\u00e0\u00e2\u00e4\u00e3\u00e5\u00e7\u00e9\u00e8\u00ea\u00eb\u00ed\u00ec\u00ee\u00ef\u00f1\u00f3\u00f2\u00f4\u00f6\u00f5\u00fa\u00f9\u00fb\u00fc\u2020\u00b0\u00a2\u00a3\u00a7\u2022\u00b6\u00df\u00ae\u00a9\u2122\u00b4\u00a8\u2260\u00c6\u00d8\u221e\u00b1\u2264\u2265\u00a5\u00b5\u2202\u2211\u220f\u03c0\u222b\u00aa\u00ba\u03a9\u00e6\u00f8\u00bf\u00a1\u00ac\u221a\u0192\u2248\u2206\u00ab\u00bb\u2026\u00a0\u00c0\u00c3\u00d5\u0152\u0153\u2013\u2014\u201c\u201d\u2018\u2019\u00f7\u25ca\u00ff\u0178\u2044\u20ac\u2039\u203a\ufb01\ufb02\u2021\u00b7\u201a\u201e\u2030\u00c2\u00ca\u00c1\u00cb\u00c8\u00cd\u00ce\u00cf\u00cc\u00d3\u00d4\uf8ff\u00d2\u00da\u00db\u00d9\u0131\u02c6\u02dc\u00af\u02d8\u02d9\u02da\u00b8\u02dd\u02db\u02c7", 
    "x-mac-romanian":"\u00c4\u00c5\u00c7\u00c9\u00d1\u00d6\u00dc\u00e1\u00e0\u00e2\u00e4\u00e3\u00e5\u00e7\u00e9\u00e8\u00ea\u00eb\u00ed\u00ec\u00ee\u00ef\u00f1\u00f3\u00f2\u00f4\u00f6\u00f5\u00fa\u00f9\u00fb\u00fc\u2020\u00b0\u00a2\u00a3\u00a7\u2022\u00b6\u00df\u00ae\u00a9\u2122\u00b4\u00a8\u2260\u0102\u0218\u221e\u00b1\u2264\u2265\u00a5\u00b5\u2202\u2211\u220f\u03c0\u222b\u00aa\u00ba\u03a9\u0103\u0219\u00bf\u00a1\u00ac\u221a\u0192\u2248\u2206\u00ab\u00bb\u2026\u00a0\u00c0\u00c3\u00d5\u0152\u0153\u2013\u2014\u201c\u201d\u2018\u2019\u00f7\u25ca\u00ff\u0178\u2044\u20ac\u2039\u203a\u021a\u021b\u2021\u00b7\u201a\u201e\u2030\u00c2\u00ca\u00c1\u00cb\u00c8\u00cd\u00ce\u00cf\u00cc\u00d3\u00d4\uf8ff\u00d2\u00da\u00db\u00d9\u0131\u02c6\u02dc\u00af\u02d8\u02d9\u02da\u00b8\u02dd\u02db\u02c7", 
    "x-mac-turkish":"\u00c4\u00c5\u00c7\u00c9\u00d1\u00d6\u00dc\u00e1\u00e0\u00e2\u00e4\u00e3\u00e5\u00e7\u00e9\u00e8\u00ea\u00eb\u00ed\u00ec\u00ee\u00ef\u00f1\u00f3\u00f2\u00f4\u00f6\u00f5\u00fa\u00f9\u00fb\u00fc\u2020\u00b0\u00a2\u00a3\u00a7\u2022\u00b6\u00df\u00ae\u00a9\u2122\u00b4\u00a8\u2260\u00c6\u00d8\u221e\u00b1\u2264\u2265\u00a5\u00b5\u2202\u2211\u220f\u03c0\u222b\u00aa\u00ba\u03a9\u00e6\u00f8\u00bf\u00a1\u00ac\u221a\u0192\u2248\u2206\u00ab\u00bb\u2026\u00a0\u00c0\u00c3\u00d5\u0152\u0153\u2013\u2014\u201c\u201d\u2018\u2019\u00f7\u25ca\u00ff\u0178\u011e\u011f\u0130\u0131\u015e\u015f\u2021\u00b7\u201a\u201e\u2030\u00c2\u00ca\u00c1\u00cb\u00c8\u00cd\u00ce\u00cf\u00cc\u00d3\u00d4\uf8ff\u00d2\u00da\u00db\u00d9\uf8a0\u02c6\u02dc\u00af\u02d8\u02d9\u02da\u00b8\u02dd\u02db\u02c7"};
    h.MACSTRING = function(b, c, e, g) {
      g = f[g];
      if (void 0 !== g) {
        for (var h = "", k = 0;e > k;k++) {
          var l = b.getUint8(c + k), h = h + (127 >= l ? String.fromCharCode(l) : g[127 & l]);
        }
        return h;
      }
    };
    var q = "function" == typeof WeakMap && new WeakMap, r;
    c.MACSTRING = function(b, c) {
      var e;
      a: {
        if (!r) {
          for (e in r = {}, f) {
            r[e] = new String(e);
          }
        }
        e = r[c];
        if (void 0 !== e) {
          if (q) {
            var g = q.get(e);
            if (void 0 !== g) {
              e = g;
              break a;
            }
          }
          c = f[c];
          if (void 0 !== c) {
            for (var g = {}, h = 0;h < c.length;h++) {
              g[c.charCodeAt(h)] = h + 128;
            }
            e = (q && q.set(e, g), g);
            break a;
          }
        }
        e = void 0;
      }
      if (void 0 !== e) {
        c = [];
        for (g = 0;g < b.length;g++) {
          h = b.charCodeAt(g);
          if (128 <= h && (h = e[h], void 0 === h)) {
            return;
          }
          c[g] = h;
        }
        return c;
      }
    };
    e.MACSTRING = function(b, e) {
      b = c.MACSTRING(b, e);
      return void 0 !== b ? b.length : 0;
    };
    c.INDEX = function(b) {
      var e, g = 1, f = [g], h = [];
      for (e = 0;e < b.length;e += 1) {
        var k = c.OBJECT(b[e]);
        Array.prototype.push.apply(h, k);
        g += k.length;
        f.push(g);
      }
      if (0 === h.length) {
        return [0, 0];
      }
      var k = [], g = 1 + Math.floor(Math.log(g) / Math.log(2)) / 8 | 0, l = [void 0, c.BYTE, c.USHORT, c.UINT24, c.ULONG][g];
      for (e = 0;e < f.length;e += 1) {
        var p = l(f[e]);
        Array.prototype.push.apply(k, p);
      }
      return Array.prototype.concat(c.Card16(b.length), c.OffSize(g), k, h);
    };
    e.INDEX = function(b) {
      return c.INDEX(b).length;
    };
    c.DICT = function(b) {
      for (var e = [], g = Object.keys(b), f = g.length, h = 0;f > h;h += 1) {
        var k = parseInt(g[h], 0), l = b[k], e = e.concat(c.OPERAND(l.value, l.type)), e = e.concat(c.OPERATOR(k));
      }
      return e;
    };
    e.DICT = function(b) {
      return c.DICT(b).length;
    };
    c.OPERATOR = function(b) {
      return 1200 > b ? [b] : [12, b - 1200];
    };
    c.OPERAND = function(b, e) {
      var g = [];
      if (Array.isArray(e)) {
        for (var f = 0;f < e.length;f += 1) {
          k.argument(b.length === e.length, "Not enough arguments given for type" + e), g = g.concat(c.OPERAND(b[f], e[f]));
        }
      } else {
        if ("SID" === e) {
          g = g.concat(c.NUMBER(b));
        } else {
          if ("offset" === e) {
            g = g.concat(c.NUMBER32(b));
          } else {
            if ("number" === e) {
              g = g.concat(c.NUMBER(b));
            } else {
              if ("real" !== e) {
                throw Error("Unknown operand type " + e);
              }
              g = g.concat(c.REAL(b));
            }
          }
        }
      }
      return g;
    };
    c.OP = c.BYTE;
    e.OP = e.BYTE;
    var w = "function" == typeof WeakMap && new WeakMap;
    c.CHARSTRING = function(b) {
      if (w) {
        var e = w.get(b);
        if (void 0 !== e) {
          return e;
        }
      }
      for (var e = [], g = b.length, f = 0;g > f;f += 1) {
        var h = b[f], e = e.concat(c[h.type](h.value));
      }
      return w && w.set(b, e), e;
    };
    e.CHARSTRING = function(b) {
      return c.CHARSTRING(b).length;
    };
    c.OBJECT = function(b) {
      var e = c[b.type];
      return k.argument(void 0 !== e, "No encoding function for type " + b.type), e(b.value);
    };
    e.OBJECT = function(b) {
      var c = e[b.type];
      return k.argument(void 0 !== c, "No sizeOf function for type " + b.type), c(b.value);
    };
    c.TABLE = function(b) {
      var e, g = [], f = b.fields.length, h = [], l = [];
      for (e = 0;f > e;e += 1) {
        var p = b.fields[e], q = c[p.type];
        k.argument(void 0 !== q, "No encoding function for field type " + p.type + " (" + p.name + ")");
        var r = b[p.name];
        void 0 === r && (r = p.value);
        q = q(r);
        "TABLE" === p.type ? (l.push(g.length), g = g.concat([0, 0]), h.push(q)) : g = g.concat(q);
      }
      for (e = 0;e < h.length;e += 1) {
        f = l[e], p = g.length, k.argument(65536 > p, "Table " + b.tableName + " too big."), g[f] = p >> 8, g[f + 1] = 255 & p, g = g.concat(h[e]);
      }
      return g;
    };
    e.TABLE = function(b) {
      for (var c = 0, g = b.fields.length, f = 0;g > f;f += 1) {
        var h = b.fields[f], l = e[h.type];
        k.argument(void 0 !== l, "No sizeOf function for field type " + h.type + " (" + h.name + ")");
        var p = b[h.name];
        void 0 === p && (p = h.value);
        c += l(p);
        "TABLE" === h.type && (c += 2);
      }
      return c;
    };
    c.RECORD = c.TABLE;
    e.RECORD = e.TABLE;
    c.LITERAL = function(b) {
      return b;
    };
    e.LITERAL = function(b) {
      return b.length;
    };
    b.decode = h;
    b.encode = c;
    b.sizeOf = e;
  }, {"./check":2}], 33:[function(h, l, b) {
    b.isBrowser = function() {
      return "undefined" != typeof window;
    };
    b.isNode = function() {
      return "undefined" == typeof window;
    };
    b.nodeBufferToArrayBuffer = function(b) {
      for (var g = new ArrayBuffer(b.length), c = new Uint8Array(g), e = 0;e < b.length;++e) {
        c[e] = b[e];
      }
      return g;
    };
    b.arrayBufferToNodeBuffer = function(b) {
      var g = new Buffer(b.byteLength);
      b = new Uint8Array(b);
      for (var c = 0;c < g.length;++c) {
        g[c] = b[c];
      }
      return g;
    };
    b.checkArgument = function(b, h) {
      if (!b) {
        throw h;
      }
    };
  }, {}]}, {}, [9])(9);
});
var BufferAttribute = THREE.BufferAttribute, BufferGeometry = THREE.BufferGeometry, Clock = THREE.Clock, Face3 = THREE.Face3, Geometry = THREE.Geometry, Object3D = THREE.Object3D, Raycaster = THREE.Raycaster, Material = THREE.Material, LineBasicMaterial = THREE.LineBasicMaterial, LineDashedMaterial = THREE.LineDashedMaterial, MeshBasicMaterial = THREE.MeshBasicMaterial, MeshDepthMaterial = THREE.MeshDepthMaterial, MeshLambertMaterial = THREE.MeshLambertMaterial, MeshNormalMaterial = THREE.MeshNormalMaterial, 
MeshPhongMaterial = THREE.MeshPhongMaterial, MeshPhysicalMaterial = THREE.MeshPhysicalMaterial, MeshStandardMaterial = THREE.MeshStandardMaterial, MeshToonMaterial = THREE.MeshToonMaterial, MultiMaterial = THREE.MultiMaterial, PointsMaterial = THREE.PointsMaterial, RawShaderMaterial = THREE.RawShaderMaterial, ShaderMaterial = THREE.ShaderMaterial, SpriteMaterial = THREE.SpriteMaterial, BoxBufferGeometry = THREE.BoxBufferGeometry, BoxGeometry = THREE.BoxGeometry, CircleBufferGeometry = THREE.CircleBufferGeometry, 
CircleGeometry = THREE.CircleGeometry, ConeBufferGeometry = THREE.ConeBufferGeometry, ConeGeometry = THREE.ConeGeometry, CylinderBufferGeometry = THREE.CylinderBufferGeometry, CylinderGeometry = THREE.CylinderGeometry, DodecahedronBufferGeometry = THREE.DodecahedronBufferGeometry, DodecahedronGeometry = THREE.DodecahedronGeometry, ExtrudeGeometry = THREE.ExtrudeGeometry, IcosahedronBufferGeometry = THREE.IcosahedronBufferGeometry, IcosahedronGeometry = THREE.IcosahedronGeometry, LatheBufferGeometry = 
THREE.LatheBufferGeometry, LatheGeometry = THREE.LatheGeometry, OctahedronBufferGeometry = THREE.OctahedronBufferGeometry, OctahedronGeometry = THREE.OctahedronGeometry, ParametricBufferGeometry = THREE.ParametricBufferGeometry, ParametricGeometry = THREE.ParametricGeometry, PlaneBufferGeometry = THREE.PlaneBufferGeometry, PlaneGeometry = THREE.PlaneGeometry, PolyhedronBufferGeometry = THREE.PolyhedronBufferGeometry, PolyhedronGeometry = THREE.PolyhedronGeometry, RingBufferGeometry = THREE.RingBufferGeometry, 
RingGeometry = THREE.RingGeometry, ShapeGeometry = THREE.ShapeGeometry, SphereBufferGeometry = THREE.SphereBufferGeometry, SphereGeometry = THREE.SphereGeometry, TetrahedronBufferGeometry = THREE.TetrahedronBufferGeometry, TetrahedronGeometry = THREE.TetrahedronGeometry, TextGeometry = THREE.TextGeometry, TorusBufferGeometry = THREE.TorusBufferGeometry, TorusGeometry = THREE.TorusGeometry, TorusKnotBufferGeometry = THREE.TorusKnotBufferGeometry, TorusKnotGeometry = THREE.TorusKnotGeometry, TubeGeometry = 
THREE.TubeGeometry, TubeBufferGeometry = THREE.TubeBufferGeometry, WireframeGeometry = THREE.WireframeGeometry, TrianglesDrawMode = THREE.TrianglesDrawMode, TriangleStripDrawMode = THREE.TriangleStripDrawMode, TriangleFanDrawMode = THREE.TriangleFanDrawMode, Box2 = THREE.Box2, Box3 = THREE.Box3, Color = THREE.Color, Euler = THREE.Euler, Line3 = THREE.Line3, Frustum = THREE.Frustum, Matrix3 = THREE.Matrix3, Matrix4 = THREE.Matrix4, Plane = THREE.Plane, Quarternion = THREE.Quarternion, Ray = THREE.Ray, 
Sphere = THREE.Sphere, Spline = THREE.Spline, Triangle = THREE.Triangle, Vector2 = THREE.Vector2, Vector3 = THREE.Vector3, Vector4 = THREE.Vector4, LOD = THREE.LOD, LensFlare = THREE.LensFlare, Line = THREE.Line, LineSegments = THREE.LineSegments, AABB = CANNON.AABB, ArrayCollisionMatrix = CANNON.ArrayCollisionMatrix, Body = CANNON.Body, Box = CANNON.Box, Broadphase = CANNON.Broadphase, ConeEquation = CANNON.ConeEquation, ConeTwistConstraint = CANNON.ConeTwistConstraint, Constraint = CANNON.Constraint, 
ContactEquation = CANNON.ContactEquation, ContactMaterial = CANNON.ContactMaterial, ConvexPolyhedron = CANNON.ConvexPolyhedron, Cylinder = CANNON.Cylinder, DistanceConstraint = CANNON.DistanceConstraint, Equation = CANNON.Equation, EventTarget = CANNON.EventTarget, FrictionEquation = CANNON.FrictionEquation, GridBroadphase = CANNON.GridBroadphase, GSSolver = CANNON.GSSolver, Heightfield = CANNON.Heightfield, HingeConstraint = CANNON.HingeConstraint, JacobianElement = CANNON.JacobianElement, LockConstraint = 
CANNON.LockConstraint, Mat3 = CANNON.Mat3, PhysicsMaterial = CANNON.Material, NaiveBroadphase = CANNON.NaiveBroadphase, Narrowphase = CANNON.Narrowphase, ObjectCollisionMatrix = CANNON.ObjectCollisionMatrix, Octree = CANNON.Octree, OctreeNode = CANNON.OctreeNode, Particle = CANNON.Particle, PointToPointConstraint = CANNON.PointToPointConstraint, Pool = CANNON.Pool, PhysicsRay = CANNON.Ray, RaycastResult = CANNON.RaycastResult, RaycastVehicle = CANNON.RaycastVehicle, RigidVehicle = CANNON.RigidVehicle, 
RotationalEquation = CANNON.RotationalEquation, RotationalMotorEquation = CANNON.RotationalMotorEquation, SAPBroadphase = CANNON.SAPBroadphase, Shape = CANNON.Shape, Solver = CANNON.Solver, SPHSystem = CANNON.SPHSystem, SplitSolver = CANNON.SplitSolver, Spring = CANNON.Spring, Transform = CANNON.Transform, Trimesh = CANNON.Trimesh, TupleDictionary = CANNON.TupleDictionary, Vec3 = CANNON.Vec3, Vec3Pool = CANNON.Vec3Pool, WheelInfo = CANNON.WheelInfo, World = CANNON.World;
function FileSystem() {
}
try {
  FileSystem.fs = require("fs");
} catch (a) {
}
FileSystem.readFile = function(a, h, l, b) {
  void 0 === h && (h = !0);
  if (void 0 !== FileSystem.fs && FileSystem.fs.existsSync(g)) {
    if (h) {
      return a = FileSystem.fs.readFileSync(a, "utf8"), void 0 !== l && l(a), a;
    }
    FileSystem.fs.readFile(a, "utf8", function(a, b) {
      void 0 !== l && l(b);
    });
    return null;
  }
  var g = new XMLHttpRequest;
  g.overrideMimeType("text/plain");
  g.open("GET", a, !h);
  g.onload = function() {
    200 !== g.status && 0 !== g.status || void 0 === l || l(g.responseText);
  };
  void 0 !== b && (g.onprogress = function(a) {
    b(a);
  });
  g.send(null);
  return g.response;
};
FileSystem.readFileArrayBuffer = function(a) {
  if (void 0 !== FileSystem.fs) {
    a = FileSystem.fs.readFileSync(a);
    for (var h = a.length, l = new ArrayBuffer(h), b = new Uint8Array(l), g = 0;g < h;g++) {
      b[g] = a[g];
    }
    return l;
  }
  h = new XMLHttpRequest;
  h.open("GET", a, !1);
  h.overrideMimeType("text/plain; charset=x-user-defined");
  h.send(null);
  return ArraybufferUtils.fromBinaryString(h.response);
};
FileSystem.readFileBase64 = function(a) {
  if (void 0 !== FileSystem.fs) {
    return a = FileSystem.fs.readFileSync(a), (new Buffer(a)).toString("base64");
  }
  var h = new XMLHttpRequest;
  h.open("GET", a, !1);
  h.overrideMimeType("text/plain; charset=x-user-defined");
  h.send(null);
  return Base64Utils.fromBinaryString(h.response);
};
FileSystem.writeFile = function(a, h) {
  if (void 0 !== FileSystem.fs) {
    a = FileSystem.fs.createWriteStream(a, "utf8"), a.write(h), a.end();
  } else {
    h = new Blob([h], {type:"octet/stream"});
    var l = document.createElement("a");
    l.download = a;
    l.href = window.URL.createObjectURL(h);
    l.onclick = function() {
      document.body.removeChild(this);
    };
    l.style.display = "none";
    document.body.appendChild(l);
    l.click();
  }
};
FileSystem.writeFileBase64 = function(a, h) {
  if (void 0 !== FileSystem.fs) {
    h = Buffer.from(Base64Utils.removeHeader(h), "base64"), a = FileSystem.fs.createWriteStream(a), a.write(h), a.end();
  } else {
    h = ArraybufferUtils.fromBase64(Base64Utils.removeHeader(h));
    h = new Blob([h]);
    var l = document.createElement("a");
    l.download = a;
    l.href = window.URL.createObjectURL(h);
    l.onclick = function() {
      document.body.removeChild(this);
    };
    l.style.display = "none";
    document.body.appendChild(l);
    l.click();
  }
};
FileSystem.copyFile = function(a, h) {
  void 0 !== FileSystem.fs && FileSystem.fs.createReadStream(a).pipe(FileSystem.fs.createWriteStream(h));
};
FileSystem.makeDirectory = function(a) {
  if (void 0 !== FileSystem.fs) {
    try {
      FileSystem.fs.mkdirSync(a);
    } catch (h) {
    }
  }
};
FileSystem.getFilesDirectory = function(a) {
  if (void 0 !== FileSystem.fs) {
    try {
      return FileSystem.fs.readdirSync(a);
    } catch (h) {
    }
  }
  return [];
};
FileSystem.copyFolder = function(a, h) {
  if (void 0 !== FileSystem.fs) {
    FileSystem.makeDirectory(h);
    for (var l = FileSystem.fs.readdirSync(a), b = 0;b < l.length;b++) {
      var g = a + "\\" + l[b], k = h + "\\" + l[b], c = FileSystem.fs.statSync(g);
      c.isDirectory() ? FileSystem.copyFolder(g, k) : c.isSymbolicLink() ? FileSystem.fs.symlinkSync(FileSystem.fs.readlinkSync(g), k) : FileSystem.copyFile(g, k);
    }
  }
};
FileSystem.chooseFile = function(a, h, l) {
  var b = document.createElement("input");
  b.type = "file";
  void 0 !== h && (b.accept = h);
  b.onchange = function(g) {
    void 0 !== a && a(b.files);
  };
  void 0 !== l && (b.nwsaveas = !0 !== l ? l : "file");
  b.click();
};
FileSystem.chooseFileName = function(a, h) {
  var l = prompt("Save As", "file");
  null !== l && (void 0 === h || l.endsWith(h) || (l += h), void 0 !== a && a(l));
};
FileSystem.fileExists = function(a) {
  return void 0 !== FileSystem.fs ? FileSystem.fs.existsSync(a) : !1;
};
FileSystem.getFileName = function(a) {
  if (void 0 !== a) {
    var h = a.lastIndexOf("\\"), l = a.lastIndexOf("/");
    return a.substring(h > l ? h + 1 : l + 1, a.lastIndexOf("."));
  }
  return "";
};
FileSystem.getNameWithoutExtension = function(a) {
  return void 0 !== a ? a.substring(0, a.lastIndexOf(".")) : "";
};
FileSystem.getFilePath = function(a) {
  if (void 0 !== a) {
    var h = a.lastIndexOf("\\"), l = a.lastIndexOf("/");
    return a.substring(0, h > l ? h + 1 : l + 1);
  }
  return "";
};
FileSystem.getFileExtension = function(a) {
  return void 0 !== a ? a.substring(a.lastIndexOf(".") + 1, a.length).toLowerCase() : "";
};
THREE.Object3D.prototype.folded = !1;
THREE.Object3D.prototype.hidden = !1;
THREE.Object3D.prototype.initialize = function() {
  for (var a = 0;a < this.children.length;a++) {
    this.children[a].initialize();
  }
};
THREE.Object3D.prototype.update = function() {
  for (var a = 0;a < this.children.length;a++) {
    this.children[a].update();
  }
};
THREE.Object3D.prototype.dispose = function() {
  for (var a = 0;a < this.children.length;a++) {
    this.children[a].dispose();
  }
};
THREE.Object3D.prototype.addAbove = function(a, h) {
  if (a === this) {
    return console.error("THREE.Object3D.add: object can't be added as a child of itself.", a), this;
  }
  a && a.isObject3D ? (null !== a.parent && a.parent.remove(a), a.parent = this, a.dispatchEvent({type:"added"}), h = this.children.indexOf(h), this.children.splice(h, 0, a)) : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", a);
  return this;
};
THREE.Object3D.prototype.addBellow = function(a, h) {
  if (a === this) {
    return console.error("THREE.Object3D.add: object can't be added as a child of itself.", a), this;
  }
  a && a.isObject3D ? (null !== a.parent && a.parent.remove(a), a.parent = this, a.dispatchEvent({type:"added"}), h = this.children.indexOf(h) + 1, this.children.splice(h, 0, a)) : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", a);
  return this;
};
THREE.Object3D.prototype.removeAll = function() {
  for (var a = this.children.length - 1;-1 < a;a--) {
    this.remove(this.children[a]);
  }
};
THREE.Object3D.prototype.isEmpty = function() {
  return 0 === this.children.length;
};
THREE.Object3D.prototype.destroy = function() {
  for (;0 < this.children.length;) {
    this.children[0].destroy();
  }
  null !== this.parent && (this.dispose && this.dispose(), this.parent.remove(this));
};
THREE.Object3D.prototype.toJSON = function(a, h, l) {
  function b(a) {
    var b = [], c;
    for (c in a) {
      var e = a[c];
      delete e.metadata;
      b.push(e);
    }
    return b;
  }
  var g = void 0 === a, k = {};
  g && (a = {fonts:{}, videos:{}, images:{}, audio:{}, geometries:{}, materials:{}, textures:{}}, k.metadata = {version:Nunu.VERSION, type:"NunuProgram"});
  var c = {};
  c.uuid = this.uuid;
  c.type = this.type;
  c.name = this.name;
  c.folded = this.folded;
  c.hidden = this.hidden;
  c.castShadow = this.castShadow;
  c.receiveShadow = this.receiveShadow;
  c.visible = this.visible;
  c.matrixAutoUpdate = this.matrixAutoUpdate;
  c.matrix = this.matrix.toArray();
  "{}" !== JSON.stringify(this.userData) && (c.userData = this.userData);
  void 0 !== this.geometry && (void 0 === a.geometries[this.geometry.uuid] && (a.geometries[this.geometry.uuid] = this.geometry.toJSON(a)), c.geometry = this.geometry.uuid);
  void 0 !== this.material && (void 0 === a.materials[this.material.uuid] && (a.materials[this.material.uuid] = this.material.toJSON(a)), c.material = this.material.uuid);
  void 0 !== h && h(a, c);
  if (!1 !== l && 0 < this.children.length) {
    for (c.children = [], h = 0;h < this.children.length;h++) {
      this.children[h].hidden || c.children.push(this.children[h].toJSON(a).object);
    }
  }
  g && (k.geometries = b(a.geometries), k.materials = b(a.materials), k.textures = b(a.textures), k.images = b(a.images), k.videos = b(a.videos), k.audio = b(a.audio), k.fonts = b(a.fonts));
  k.object = c;
  return k;
};
THREE.Vector3.fromJSON = function(a) {
  return new THREE.Vector3(a.x, a.y, a.z);
};
THREE.Vector3.prototype.toJSON = function() {
  return {x:this.x, y:this.y, z:this.z};
};
THREE.Vector2.fromJSON = function(a) {
  return new THREE.Vector2(a.x, a.y);
};
THREE.Vector2.prototype.toJSON = function() {
  return {x:this.x, y:this.y};
};
THREE.Texture.prototype.toJSON = function(a) {
  if (void 0 !== a.textures[this.uuid]) {
    return a.textures[this.uuid];
  }
  var h = {metadata:{version:Nunu.VERSION, type:"Texture"}, uuid:this.uuid, name:this.name, category:this.category, mapping:this.mapping, repeat:[this.repeat.x, this.repeat.y], offset:[this.offset.x, this.offset.y], wrap:[this.wrapS, this.wrapT], minFilter:this.minFilter, magFilter:this.magFilter, anisotropy:this.anisotropy, flipY:this.flipY};
  return a.textures[this.uuid] = h;
};
THREE.LightShadow.prototype.toJSON = function() {
  var a = {};
  a.bias = this.bias;
  a.radius = this.radius;
  a.mapSize = {};
  a.mapSize.x = this.mapSize.x;
  a.mapSize.y = this.mapSize.y;
  a.camera = {};
  a.camera.top = this.camera.top;
  a.camera.bottom = this.camera.bottom;
  a.camera.far = this.camera.far;
  a.camera.near = this.camera.near;
  a.camera.left = this.camera.left;
  a.camera.right = this.camera.right;
  return a;
};
THREE.LightShadow.prototype.fromJSON = function(a) {
  void 0 !== a.bias && (this.bias = a.bias);
  void 0 !== a.radius && (this.radius = a.radius);
  if (void 0 !== a.mapSize) {
    var h = a.mapSize;
    this.mapSize.set(h.x, h.y);
  }
  void 0 !== a.camera && (a = a.camera, this.camera.top = a.top, this.camera.bottom = a.bottom, this.camera.left = a.left, this.camera.right = a.right, this.camera.near = a.near, this.camera.far = a.far);
};
THREE.Fog.NONE = 0;
THREE.Fog.LINEAR = 1;
THREE.Fog.EXPONENTIAL = 2;
THREE.Material.prototype.dispose = function() {
  function a(a) {
    void 0 !== a && null !== a && a.dispose();
  }
  this.dispatchEvent({type:"dispose"});
  a(this.map);
  a(this.bumpMap);
  a(this.normalMap);
  a(this.displacementMap);
  a(this.specularMap);
  a(this.emissiveMap);
  a(this.alphaMap);
  a(this.roughnessMap);
  a(this.metalnessMap);
  a(this.envMap);
};
THREE.Material.prototype.toJSON = function(a) {
  function h(a) {
    var b = [], c;
    for (c in a) {
      var e = a[c];
      delete e.metadata;
      b.push(e);
    }
    return b;
  }
  void 0 === a && (a = {textures:{}, images:{}});
  var l = {};
  l.uuid = this.uuid;
  l.type = this.type;
  l.name = this.name;
  l.depthFunc = this.depthFunc;
  l.depthTest = this.depthTest;
  l.depthWrite = this.depthWrite;
  this.color && this.color.isColor && (l.color = this.color.getHex());
  void 0 !== this.roughness && (l.roughness = this.roughness);
  void 0 !== this.metalness && (l.metalness = this.metalness);
  this.specular && this.specular.isColor && (l.specular = this.specular.getHex());
  void 0 !== this.shininess && (l.shininess = this.shininess);
  void 0 !== this.clearCoat && (l.clearCoat = this.clearCoat);
  void 0 !== this.clearCoatRoughness && (l.clearCoatRoughness = this.clearCoatRoughness);
  this.map && this.map.isTexture && (l.map = this.map.toJSON(a).uuid);
  this.alphaMap && this.alphaMap.isTexture && (l.alphaMap = this.alphaMap.toJSON(a).uuid);
  this.lightMap && this.lightMap.isTexture && (l.lightMap = this.lightMap.toJSON(a).uuid);
  this.bumpMap && this.bumpMap.isTexture && (l.bumpMap = this.bumpMap.toJSON(a).uuid, l.bumpScale = this.bumpScale);
  this.normalMap && this.normalMap.isTexture && (l.normalMap = this.normalMap.toJSON(a).uuid, l.normalScale = this.normalScale.toArray());
  this.displacementMap && this.displacementMap.isTexture && (l.displacementMap = this.displacementMap.toJSON(a).uuid, l.displacementScale = this.displacementScale, l.displacementBias = this.displacementBias);
  this.roughnessMap && this.roughnessMap.isTexture && (l.roughnessMap = this.roughnessMap.toJSON(a).uuid);
  this.metalnessMap && this.metalnessMap.isTexture && (l.metalnessMap = this.metalnessMap.toJSON(a).uuid);
  this.emissive && this.emissive.isColor && (l.emissive = this.emissive.getHex());
  this.emissiveIntensity && this.emissiveIntensity.isColor && (l.emissiveIntensity = this.emissiveIntensity.getHex());
  this.emissiveMap && this.emissiveMap.isTexture && (l.emissiveMap = this.emissiveMap.toJSON(a).uuid);
  this.aoMap && this.aoMap.isTexture && (l.aoMap = this.aoMap.toJSON(a).uuid);
  this.aoMapIntensity && (l.aoMapIntensity = this.aoMapIntensity);
  this.specularMap && this.specularMap.isTexture && (l.specularMap = this.specularMap.toJSON(a).uuid);
  this.envMap && this.envMap.isTexture && (l.envMap = this.envMap.toJSON(a).uuid, l.reflectivity = this.reflectivity, this.combine && (l.combine = this.combine), this.envMapIntensity && (l.envMapIntensity = this.envMapIntensity), this.refractionRatio && (l.refractionRatio = this.refractionRatio));
  this.gradientMap && this.gradientMap.isTexture && (l.gradientMap = this.gradientMap.toJSON(a).uuid);
  void 0 !== this.size && (l.size = this.size);
  void 0 !== this.sizeAttenuation && (l.sizeAttenuation = this.sizeAttenuation);
  this.blending !== THREE.NormalBlending && (l.blending = this.blending);
  this.shading !== THREE.SmoothShading && (l.shading = this.shading);
  this.side !== THREE.FrontSide && (l.side = this.side);
  this.vertexColors !== THREE.NoColors && (l.vertexColors = this.vertexColors);
  1 > this.opacity && (l.opacity = this.opacity);
  !0 === this.transparent && (l.transparent = this.transparent);
  0 < this.alphaTest && (l.alphaTest = this.alphaTest);
  !0 === this.premultipliedAlpha && (l.premultipliedAlpha = this.premultipliedAlpha);
  !0 === this.wireframe && (l.wireframe = this.wireframe);
  1 < this.wireframeLinewidth && (l.wireframeLinewidth = this.wireframeLinewidth);
  "round" !== this.wireframeLinecap && (l.wireframeLinecap = this.wireframeLinecap);
  "round" !== this.wireframeLinejoin && (l.wireframeLinejoin = this.wireframeLinejoin);
  l.morphTargets = this.morphTargets;
  void 0 !== this.morphNormals && (l.morphNormals = this.morphNormals);
  if (void 0 === a) {
    var b = h(a.textures);
    a = h(a.images);
    0 < b.length && (l.textures = b);
    0 < a.length && (l.images = a);
  }
  return l;
};
THREE.MultiMaterial.prototype.name = "material";
THREE.MultiMaterial.prototype.dispose = function() {
  for (var a in this.materials) {
    this.materials[a].dispose();
  }
};
function Key() {
  this.justReleased = this.justPressed = this.pressed = !1;
}
Key.DOWN = -1;
Key.UP = 1;
Key.RESET = 0;
Key.prototype.update = function(a) {
  this.justReleased = this.justPressed = !1;
  a === Key.DOWN ? (!1 === this.pressed && (this.justPressed = !0), this.pressed = !0) : a === Key.UP ? (this.pressed && (this.justReleased = !0), this.pressed = !1) : a === Key.RESET && (this.justPressed = this.justReleased = !1);
};
Key.prototype.set = function(a, h, l) {
  this.justPressed = a;
  this.pressed = h;
  this.justReleased = l;
};
Key.prototype.reset = function() {
  this.justReleased = this.pressed = this.justPressed = !1;
};
function Keyboard() {
  this.keys = [];
  this.actions = [];
  for (var a = 0;256 > a;a++) {
    this.keys.push(new Key);
  }
  this.events = [];
  var h = this.actions;
  this.events.push([window, "keydown", function(a) {
    h.push(a.keyCode);
    h.push(Key.DOWN);
  }]);
  this.events.push([window, "keyup", function(a) {
    h.push(a.keyCode);
    h.push(Key.UP);
  }]);
  for (a = 0;a < this.events.length;a++) {
    var l = this.events[a];
    l[0].addEventListener(l[1], l[2]);
  }
}
Keyboard.prototype = Keyboard;
Keyboard.update = function() {
  for (var a = 0;this.actions.length > a;) {
    var h = this.actions.shift(), l = this.actions.shift();
    this.keys[h].update(l);
    if (this.keys[h].justReleased || this.keys[h].justPressed) {
      this.actions.push(h), this.actions.push(Key.RESET), a += 2;
    }
  }
};
Keyboard.reset = function() {
  this.actions = [];
  for (var a = 0;a < this.keys.length;a++) {
    this.keys[a].reset();
  }
};
Keyboard.keyPressed = function(a) {
  return this.keys[a].pressed;
};
Keyboard.keyJustPressed = function(a) {
  return this.keys[a].justPressed;
};
Keyboard.keyJustReleased = function(a) {
  return this.keys[a].justReleased;
};
Keyboard.dispose = function() {
  for (var a = 0;a < this.events.length;a++) {
    var h = this.events[a];
    h[0].removeEventListener(h[1], h[2]);
  }
};
Keyboard.TAB = 9;
Keyboard.ENTER = 13;
Keyboard.SHIFT = 16;
Keyboard.CTRL = 17;
Keyboard.ALT = 18;
Keyboard.CAPS_LOCK = 20;
Keyboard.ESC = 27;
Keyboard.SPACEBAR = 32;
Keyboard.PAGE_UP = 33;
Keyboard.PAGE_DOWN = 34;
Keyboard.END = 35;
Keyboard.HOME = 36;
Keyboard.INSERT = 45;
Keyboard.DEL = 46;
Keyboard.LEFT = 37;
Keyboard.RIGHT = 39;
Keyboard.UP = 38;
Keyboard.DOWN = 40;
Keyboard.NUM0 = 48;
Keyboard.NUM1 = 49;
Keyboard.NUM2 = 50;
Keyboard.NUM3 = 51;
Keyboard.NUM4 = 52;
Keyboard.NUM5 = 53;
Keyboard.NUM6 = 54;
Keyboard.NUM7 = 55;
Keyboard.NUM8 = 56;
Keyboard.NUM9 = 57;
Keyboard.A = 65;
Keyboard.B = 66;
Keyboard.C = 67;
Keyboard.D = 68;
Keyboard.E = 69;
Keyboard.F = 70;
Keyboard.G = 71;
Keyboard.H = 72;
Keyboard.I = 73;
Keyboard.J = 74;
Keyboard.K = 75;
Keyboard.L = 76;
Keyboard.M = 77;
Keyboard.N = 78;
Keyboard.O = 79;
Keyboard.P = 80;
Keyboard.Q = 81;
Keyboard.R = 82;
Keyboard.S = 83;
Keyboard.T = 84;
Keyboard.U = 85;
Keyboard.V = 86;
Keyboard.W = 87;
Keyboard.X = 88;
Keyboard.Y = 89;
Keyboard.Z = 90;
Keyboard.F1 = 112;
Keyboard.F2 = 113;
Keyboard.F3 = 114;
Keyboard.F4 = 115;
Keyboard.F5 = 116;
Keyboard.F6 = 117;
Keyboard.F7 = 118;
Keyboard.F8 = 119;
Keyboard.F9 = 120;
Keyboard.F10 = 121;
Keyboard.F11 = 122;
Keyboard.F12 = 123;
function Mouse() {
  this._keys = [];
  this._position = new Vector2(0, 0);
  this._positionUpdated = !1;
  this._delta = new Vector2(0, 0);
  this._wheel = 0;
  this._doubleClicked = this._wheelUpdated = !1;
  this.keys = [];
  this.position = new Vector2(0, 0);
  this.delta = new Vector2(0, 0);
  this.wheel = 0;
  this.doubleClicked = !1;
  this.canvas = null;
  this.events = [];
  for (var a = 0;3 > a;a++) {
    this._keys.push(new Key), this.keys.push(new Key);
  }
  var h = this;
  void 0 !== window.onmousewheel ? this.events.push([window, "mousewheel", function(a) {
    h._wheel = a.deltaY;
    h._wheelUpdated = !0;
  }]) : void 0 !== window.addEventListener ? this.events.push([window, "DOMMouseScroll", function(a) {
    h._wheel = 30 * a.detail;
    h._wheelUpdated = !0;
  }]) : this.events.push([window, "wheel", function(a) {
    h._wheel = a.deltaY;
    h._wheelUpdated = !0;
  }]);
  if ("ontouchstart" in window || 0 < navigator.msMaxTouchPoints) {
    var l = new Vector2(0, 0);
    this.events.push([window, "touchstart", function(a) {
      a = a.touches[0];
      l.set(a.clientX, a.clientY);
      h.updateKey(Mouse.LEFT, Key.DOWN);
    }]);
    this.events.push([window, "touchend", function(a) {
      h.updateKey(Mouse.LEFT, Key.UP);
    }]);
    this.events.push([window, "touchmove", function(a) {
      a = a.touches[0];
      if (null !== h.canvas) {
        var b = h.canvas.getBoundingClientRect();
        h.updatePosition(a.clientX - b.left, a.clientY - b.top, a.clientX - l.x, a.clientY - l.y);
      } else {
        h.updatePosition(a.clientX, a.clientY, a.clientX - l.x, a.clientY - l.y);
      }
      l.set(a.clientX, a.clientY);
    }]);
  } else {
    this.events.push([window, "mousemove", function(a) {
      if (null !== h.canvas) {
        var b = h.canvas.getBoundingClientRect();
        h.updatePosition(a.clientX - b.left, a.clientY - b.top, a.movementX, a.movementY);
      } else {
        h.updatePosition(a.clientX, a.clientY, a.movementX, a.movementY);
      }
    }]), this.events.push([window, "mousedown", function(a) {
      h.updateKey(a.which - 1, Key.DOWN);
    }]), this.events.push([window, "mouseup", function(a) {
      h.updateKey(a.which - 1, Key.UP);
    }]), this.events.push([window, "dragstart", function(a) {
      h.updateKey(a.which - 1, Key.UP);
    }]);
  }
  this.events.push([window, "dblclick", function(a) {
    h._doubleClicked = !0;
  }]);
  for (a = 0;a < this.events.length;a++) {
    var b = this.events[a];
    b[0].addEventListener(b[1], b[2]);
  }
}
Mouse.prototype = Mouse;
Mouse.LEFT = 0;
Mouse.MIDDLE = 1;
Mouse.RIGHT = 2;
Mouse.setCanvas = function(a) {
  this.canvas = a;
  a.mouseInside = !1;
  a.addEventListener("mouseenter", function() {
    this.mouseInside = !0;
  });
  a.addEventListener("mouseleave", function() {
    this.mouseInside = !1;
  });
};
Mouse.insideCanvas = function() {
  return null === this.canvas ? !1 : this.canvas.mouseInside;
};
Mouse.setLock = function(a) {
  null !== this.canvas && (a ? this.canvas.requestPointerLock ? this.canvas.requestPointerLock() : this.canvas.mozRequestPointerLock ? this.canvas.mozRequestPointerLock() : this.canvas.webkitRequestPointerLock && this.canvas.webkitRequestPointerLock() : document.exitPointerLock ? document.exitPointerLock() : document.mozExitPointerLock ? document.mozExitPointerLock() : document.webkitExitPointerLock && document.webkitExitPointerLock());
};
Mouse.buttonPressed = function(a) {
  return this.keys[a].pressed;
};
Mouse.buttonDoubleClicked = function() {
  return this.doubleClicked;
};
Mouse.buttonJustPressed = function(a) {
  return this.keys[a].justPressed;
};
Mouse.buttonJustReleased = function(a) {
  return this.keys[a].justReleased;
};
Mouse.updatePosition = function(a, h, l, b) {
  this._position.set(a, h);
  this._delta.x += l;
  this._delta.y += b;
  this._positionUpdated = !0;
};
Mouse.updateKey = function(a, h) {
  -1 < a && this._keys[a].update(h);
};
Mouse.update = function() {
  for (var a = 0;a < this._keys.length;a++) {
    this._keys[a].justPressed && this.keys[a].justPressed && (this._keys[a].justPressed = !1), this._keys[a].justReleased && this.keys[a].justReleased && (this._keys[a].justReleased = !1), this.keys[a].set(this._keys[a].justPressed, this._keys[a].pressed, this._keys[a].justReleased);
  }
  this._wheelUpdated ? (this.wheel = this._wheel, this._wheelUpdated = !1) : this.wheel = 0;
  this._doubleClicked ? (this.doubleClicked = !0, this._doubleClicked = !1) : this.doubleClicked = !1;
  this._positionUpdated ? (this.delta.x = this._delta.x, this.delta.y = this._delta.y, this._delta.set(0, 0), this.position.x = this._position.x, this.position.y = this._position.y, this._positionUpdated = !1) : (this.delta.x = 0, this.delta.y = 0);
};
Mouse.dispose = function() {
  for (var a = 0;a < this.events.length;a++) {
    var h = this.events[a];
    h[0].removeEventListener(h[1], h[2]);
  }
};
function VRControls(a, h) {
  function l(a) {
    for (var g = 0;g < a.length;g++) {
      if ("VRDisplay" in window && a[g] instanceof VRDisplay || "PositionSensorVRDevice" in window && a[g] instanceof PositionSensorVRDevice) {
        b.vrInput = a[g];
        break;
      }
    }
    b.vrInput || h && h("VR input not available");
  }
  this.vrInput = null;
  this.scale = 1;
  this.standing = !1;
  this.userHeight = 1.6;
  this.object = null;
  void 0 !== a && (this.object = a);
  this.position = new THREE.Vector3;
  this.quaternion = new THREE.Quaternion;
  var b = this;
  void 0 !== navigator.getVRDisplays && navigator.getVRDisplays().then(l);
}
VRControls.prototype.update = function() {
  if (null !== this.vrInput) {
    var a = this.vrInput.getPose();
    null !== a.orientation && this.quaternion.fromArray(a.orientation);
    null !== a.position ? this.position.fromArray(a.position) : this.position.set(0, 0, 0);
    this.standing && (this.position.y += this.userHeight);
    this.position.multiplyScalar(this.scale);
    null !== this.object && (this.object.position.copy(this.position), this.object.quaternion.copy(this.quaternion));
  }
};
VRControls.prototype.dispose = function() {
  this.vrInput = null;
};
VRControls.prototype.resetPose = function() {
  null !== this.vrInput && this.vrInput.resetPose();
};
VRControls.prototype.attachObject = function(a) {
  this.object = a;
};
function Resource() {
  this.name = "";
  this.uuid = THREE.Math.generateUUID();
  this.encoding = this.format = this.type = "";
  this.data = null;
}
Resource.prototype.toJSON = function(a) {
};
function Font(a) {
  this.name = "font";
  this.uuid = THREE.Math.generateUUID();
  this.type = "Font";
  this.encoding = this.format = "";
  this.data = null;
  this.reversed = !1;
  this.font = null;
  if (void 0 !== a) {
    if (a instanceof window.ArrayBuffer) {
      this.data = a, this.loadTTF(), this.format = "arraybuffer";
    } else {
      if ("object" === typeof a) {
        this.font = this.data = a, this.encoding = this.format = "json";
      } else {
        if (this.encoding = a.split(".").pop().toLowerCase(), this.name = FileSystem.getFileName(a), "json" === this.encoding) {
          this.data = JSON.parse(FileSystem.readFile(a)), this.format = "json", this.font = this.data;
        } else {
          if ("ttf" === this.encoding || "otf" === this.encoding || "ttc" === this.encoding || "otc" === this.encoding) {
            this.data = FileSystem.readFileArrayBuffer(a), this.format = "arraybuffer", this.loadTTF();
          }
        }
      }
    }
  }
}
Font.fileIsFont = function(a) {
  return void 0 !== a ? (a = a.name.toLocaleLowerCase(), a.endsWith("ttf") || a.endsWith("otf") || a.endsWith("ttc") || a.endsWith("otc") || a.endsWith("json")) : !1;
};
Font.prototype.isFont = !0;
Font.prototype.reverseGlyphs = function() {
  this.reversed = !this.reversed;
  this.loadTTF();
};
Font.prototype.loadTTF = function() {
  var a = new TTFLoader;
  a.reversed = this.reversed;
  this.font = a.parse(this.data);
};
Font.prototype.generateShapes = function(a, h, l) {
  void 0 === h && (h = 100);
  void 0 === l && (l = 10);
  var b = this.font;
  a = String(a).split("");
  var g = h / b.resolution, k = (b.boundingBox.yMax - b.boundingBox.yMin) * g, c = 0, e = 0;
  h = [];
  for (var f = 0;f < a.length;f++) {
    var q = a[f];
    if ("\n" === q) {
      e -= k, c = 0;
    } else {
      var r;
      var w, p, u, v, y, x, m, t;
      r = g;
      var C = c, A = e;
      if (q = b.glyphs[q] || b.glyphs["?"]) {
        var D = new THREE.ShapePath, F = [], G = THREE.ShapeUtils.b2, B = THREE.ShapeUtils.b3;
        if (q.o) {
          for (var K = q._cachedOutline || (q._cachedOutline = q.o.split(" ")), H = 0, M = K.length;H < M;) {
            if (v = K[H++], "m" === v && (u = K[H++] * r + C, p = K[H++] * r + A, D.moveTo(u, p)), "l" === v) {
              u = K[H++] * r + C, p = K[H++] * r + A, D.lineTo(u, p);
            } else {
              if ("q" === v) {
                if (t = K[H++] * r + C, m = K[H++] * r + A, y = K[H++] * r + C, v = K[H++] * r + A, D.quadraticCurveTo(y, v, t, m), w = F[F.length - 1]) {
                  x = w.x;
                  w = w.y;
                  for (var J = 1;J <= l;J++) {
                    var P = J / l;
                    G(P, x, y, t);
                    G(P, w, v, m);
                  }
                }
              } else {
                if ("b" === v && (t = K[H++] * r + C, m = K[H++] * r + A, y = K[H++] * r + C, v = K[H++] * r + A, u = K[H++] * r + C, p = K[H++] * r + A, D.bezierCurveTo(y, v, u, p, t, m), w = F[F.length - 1])) {
                  for (x = w.x, w = w.y, J = 1;J <= l;J++) {
                    P = J / l, B(P, x, y, u, t), B(P, w, v, p, m);
                  }
                }
              }
            }
          }
        }
        r = {width:q.ha * r, path:D};
      } else {
        r = void 0;
      }
      c += r.width;
      h.push(r.path);
    }
  }
  l = [];
  for (b = 0;b < h.length;b++) {
    Array.prototype.push.apply(l, h[b].toShapes());
  }
  return l;
};
Font.prototype.toJSON = function(a) {
  if (void 0 !== a.fonts[this.uuid]) {
    return a.fonts[this.uuid];
  }
  var h = {};
  h.name = this.name;
  h.uuid = this.uuid;
  h.type = this.type;
  h.encoding = this.encoding;
  h.reversed = this.reversed;
  "arraybuffer" === this.format ? (h.data = Base64Utils.fromArraybuffer(this.data), h.format = "base64") : "json" === this.format && (h.data = this.data, h.format = this.format);
  return a.fonts[this.uuid] = h;
};
function Video(a) {
  this.name = "video";
  this.uuid = THREE.Math.generateUUID();
  this.type = "Video";
  this.encoding = this.format = "";
  this.data = null;
  void 0 !== a && (a.startsWith("data:video") ? (this.encoding = Base64Utils.getFileFormat(a), this.format = "base64", this.data = a) : (this.encoding = a.split(".").pop().toLowerCase(), this.data = "data:video/" + this.encoding + ";base64," + FileSystem.readFileBase64(a), this.format = "base64"));
}
Video.fileIsVideo = function(a) {
  return void 0 !== a && a.type.startsWith("video") ? !0 : !1;
};
Video.prototype.toJSON = function(a) {
  if (void 0 !== a.videos[this.uuid]) {
    return a.videos[this.uuid];
  }
  var h = {};
  h.name = this.name;
  h.uuid = this.uuid;
  h.type = this.type;
  h.encoding = this.encoding;
  h.format = this.format;
  h.data = this.data;
  return a.videos[this.uuid] = h;
};
function Audio(a) {
  this.name = "audio";
  this.uuid = THREE.Math.generateUUID();
  this.type = "Audio";
  this.encoding = this.format = "";
  this.data = null;
  void 0 !== a && (a instanceof window.ArrayBuffer ? (this.data = a, this.encoding = "") : (this.data = FileSystem.readFileArrayBuffer(a), this.encoding = a.split(".").pop().toLowerCase()), this.format = "arraybuffer");
}
Audio.fileIsAudio = function(a) {
  return void 0 !== a && a.type.startsWith("audio") ? !0 : !1;
};
Audio.prototype.toJSON = function(a) {
  if (void 0 !== a.audio[this.uuid]) {
    return a.audio[this.uuid];
  }
  var h = {};
  h.name = this.name;
  h.uuid = this.uuid;
  h.type = this.type;
  h.encoding = this.encoding;
  h.data = Base64Utils.fromArraybuffer(this.data);
  h.format = "base64";
  return a.audio[this.uuid] = h;
};
function Image(a) {
  this.name = "image";
  this.uuid = THREE.Math.generateUUID();
  this.type = "Image";
  this.encoding = this.format = "";
  this.data = null;
  void 0 !== a && (a instanceof window.ArrayBuffer ? (a = (new THREE.TGALoader).parse(a), this.encoding = "jpeg", this.format = "base64", this.data = a.toDataURL("image/jpeg", 1)) : a.startsWith("data:image") ? (this.encoding = Base64Utils.getFileFormat(a), this.format = "base64", this.data = a) : (this.encoding = a.split(".").pop().toLowerCase(), "gif" === this.encoding ? (this.data = "data:image/" + this.encoding + ";base64," + FileSystem.readFileBase64(a), this.format = "base64") : "tga" === this.encoding ? 
  (a = (new THREE.TGALoader).parse(FileSystem.readFileArrayBuffer(a)), this.encoding = "jpeg", this.format = "base64", this.data = a.toDataURL("image/jpeg", 1)) : (this.format = "url", this.data = a)));
}
Image.fileIsImage = function(a) {
  if (void 0 !== a) {
    if (a.type.startsWith("image")) {
      return !0;
    }
    a = a.name.toLocaleLowerCase();
    return a.endsWith("tga");
  }
  return !1;
};
Image.prototype.encodeData = function() {
  if ("url" === this.format) {
    var a = document.createElement("img");
    a.src = this.data;
    var h = document.createElement("canvas");
    h.width = a.width;
    h.height = a.height;
    var l = h.getContext("2d");
    l.drawImage(a, 0, 0, a.width, a.height);
    for (var b = !1, a = l.getImageData(0, 0, a.width, a.height).data, l = 3;l < a.length;l += 4) {
      if (255 !== a[l]) {
        b = !0;
        break;
      }
    }
    b ? (this.format = "base64", this.encoding = "png", this.data = h.toDataURL("image/png")) : (this.format = "base64", this.encoding = "jpeg", this.data = h.toDataURL("image/jpeg", 1));
  }
};
Image.prototype.toJSON = function(a) {
  if (void 0 !== a.images[this.uuid]) {
    return a.images[this.uuid];
  }
  this.encodeData();
  var h = {};
  h.name = this.name;
  h.uuid = this.uuid;
  h.type = this.type;
  h.encoding = this.encoding;
  h.format = this.format;
  h.data = this.data;
  return a.images[this.uuid] = h;
};
function ResourceManager() {
  this.images = [];
  this.videos = [];
  this.audio = [];
  this.fonts = [];
  this.materials = [];
  this.textures = [];
  this.geometries = [];
}
ResourceManager.prototype.getMaterialByName = function(a) {
  for (var h in this.materials) {
    if (this.materials[h].name === a) {
      return this.materials[h];
    }
  }
  return null;
};
ResourceManager.prototype.addMaterial = function(a) {
  a instanceof THREE.Material && (this.materials[a.uuid] = a);
};
ResourceManager.prototype.removeMaterial = function(a, h, l) {
  void 0 === h && (h = new THREE.MeshBasicMaterial);
  void 0 === l && (l = new THREE.SpriteMaterial);
  a instanceof THREE.Material && (delete this.materials[a.uuid], this.traverse(function(b) {
    void 0 !== b.material && b.material.uuid === a.uuid && (b.material = b instanceof THREE.Sprite ? l : h);
  }));
};
ResourceManager.prototype.getTextureByName = function(a) {
  for (var h in this.textures) {
    if (this.textures[h].name === a) {
      return this.textures[h];
    }
  }
  return null;
};
ResourceManager.prototype.addTexture = function(a) {
  this.textures[a.uuid] = a;
};
ResourceManager.prototype.removeTexture = function(a, h) {
  void 0 === h && (h = new THREE.Texture);
  a instanceof THREE.Texture && (delete this.textures[a.uuid], this.traverse(function(l) {
    void 0 !== l.material ? (l = l.material, null != l.map && l.map.uuid === a.uuid ? (l.map = h, l.needsUpdate = !0) : null != l.bumpMap && l.bumpMap.uuid === a.uuid ? (l.bumpMap = h, l.needsUpdate = !0) : null != l.normalMap && l.normalMap.uuid === a.uuid ? (l.normalMap = h, l.needsUpdate = !0) : null != l.displacementMap && l.displacementMap.uuid === a.uuid ? (l.displacementMap = h, l.needsUpdate = !0) : null != l.specularMap && l.specularMap.uuid === a.uuid ? (l.specularMap = h, l.needsUpdate = 
    !0) : null != l.emissiveMap && l.emissiveMap.uuid === a.uuid ? (l.emissiveMap = h, l.needsUpdate = !0) : null != l.alphaMap && l.alphaMap.uuid === a.uuid ? (l.alphaMap = h, l.needsUpdate = !0) : null != l.roughnessMap && l.roughnessMap.uuid === a.uuid ? (l.roughnessMap = h, l.needsUpdate = !0) : null != l.metalnessMap && l.metalnessMap.uuid === a.uuid && (l.metalnessMap = h, l.needsUpdate = !0)) : l instanceof ParticleEmitter && l.group.texture.uuid === a.uuid && (l.group.texture = h);
  }));
};
ResourceManager.prototype.getFontByName = function(a) {
  for (var h in this.fonts) {
    if (this.fonts[h].name === a) {
      return this.fonts[h];
    }
  }
  return null;
};
ResourceManager.prototype.addFont = function(a) {
  a instanceof Font && (this.fonts[a.uuid] = a);
};
ResourceManager.prototype.removeFont = function(a, h) {
  void 0 === h && (h = new Font);
  a instanceof Font && (delete this.fonts[a.uuid], this.traverse(function(l) {
    void 0 !== l.font && l.font.uuid === a.uuid && l.setFont(h);
  }));
};
ResourceManager.prototype.getAudioByName = function(a) {
  for (var h in this.audio) {
    if (this.audio[h].name === a) {
      return this.audio[h];
    }
  }
  return null;
};
ResourceManager.prototype.addAudio = function(a) {
  a instanceof Audio && (this.audio[a.uuid] = a);
};
ResourceManager.prototype.removeAudio = function(a, h) {
  void 0 === h && (h = new Audio);
  a instanceof Audio && (delete this.audio[a.uuid], this.traverse(function(l) {
    void 0 !== l.audio && l.audio.uuid === a.uuid && l.setFont(h);
  }));
};
function Texture(a, h, l, b, g, k, c, e, f, q) {
  this.img = "string" === typeof a ? new Image(a) : void 0 === a ? new Image : a;
  THREE.Texture.call(this, document.createElement("img"), h, l, b, g, k, c, e, f, q);
  a = "png" === this.img.encoding || "gif" === this.img.encoding;
  var r = this;
  this.name = "texture";
  this.category = "Image";
  this.disposed = !1;
  this.format = a ? THREE.RGBAFormat : THREE.RGBFormat;
  this.image.src = this.img.data;
  this.image.onload = function() {
    r.needsUpdate = !0;
  };
  if ("gif" === this.img.encoding) {
    var w = function() {
      r.disposed || (r.needsUpdate = !0, requestAnimationFrame(w));
    };
    w();
  }
}
Texture.prototype = Object.create(THREE.Texture.prototype);
Texture.prototype.dispose = function() {
  THREE.Texture.prototype.dispose.call(this);
  this.disposed = !0;
};
Texture.prototype.toJSON = function(a) {
  var h = THREE.Texture.prototype.toJSON.call(this, a);
  a = this.img.toJSON(a);
  h.image = a.uuid;
  return h;
};
function CanvasTexture(a, h, l, b, g, k, c, e, f, q, r) {
  THREE.Texture.call(this, document.createElement("canvas"), l, b, g, k, c, e, f, q, r);
  this.name = "canvas";
  this.category = "Canvas";
  this.width = void 0 !== a ? a : 512;
  this.height = void 0 !== h ? h : 512;
  this.context = this.image.getContext("2d");
  this.updateSize();
  this.needsUpdate = !0;
}
CanvasTexture.prototype = Object.create(THREE.Texture.prototype);
CanvasTexture.prototype.updateSize = function() {
  this.image.width = this.width;
  this.image.height = this.height;
  this.context.fillStyle = "#000000";
  this.context.fillRect(0, 0, this.width, this.height);
  this.context.font = "Normal 55px Arial";
  this.context.textAlign = "center";
  this.context.fillStyle = "#FF0000";
  this.context.fillText("Canvas Texture", this.width / 2, this.height / 2);
};
CanvasTexture.prototype.clear = function(a) {
  this.context.fillStyle = a;
  this.context.fillRect(0, 0, this.width, this.height);
};
CanvasTexture.prototype.toJSON = function(a) {
  a = THREE.Texture.prototype.toJSON.call(this, a);
  a.width = this.width;
  a.height = this.height;
  return a;
};
function VideoTexture(a, h, l, b, g, k) {
  function c() {
    a.readyState >= a.HAVE_CURRENT_DATA && (e.needsUpdate = !0);
    e.disposed || requestAnimationFrame(c);
  }
  "string" === typeof a ? this.video = new Video(a) : a instanceof Video && (this.video = a);
  THREE.Texture.call(this, document.createElement("video"), h, l, b, THREE.LinearFilter, THREE.LinearFilter, THREE.RGBFormat, g, k);
  this.disposed = this.generateMipmaps = !1;
  this.name = "video";
  this.category = "Video";
  this.loop = this.autoplay = !0;
  this.volume = this.playbackRate = 1;
  this.image.src = this.video.data;
  this.image.autoplay = this.autoplay;
  this.image.playbackRate = this.playbackRate;
  this.image.loop = this.loop;
  this.image.volume = this.volume;
  var e = this;
  a = this.image;
  c();
}
VideoTexture.prototype = Object.create(THREE.Texture.prototype);
VideoTexture.prototype.setTime = function(a) {
  this.image.currentTime = a;
};
VideoTexture.prototype.setLoop = function(a) {
  this.loop = a;
  this.image.loop = a;
};
VideoTexture.prototype.setVolume = function(a) {
  this.volume = 0 <= a && 1 >= a ? a : 0 <= a ? 1 : 0;
  this.image.volume = this.volume;
};
VideoTexture.prototype.setPlaybackRate = function(a) {
  this.playbackRate = a;
  this.image.playbackRate = a;
};
VideoTexture.prototype.pause = function() {
  this.image.paused || this.image.pause();
};
VideoTexture.prototype.play = function() {
  this.image.paused && this.image.play();
};
VideoTexture.prototype.dispose = function() {
  THREE.Texture.prototype.dispose.call(this);
  this.disposed = !0;
  this.image.paused || this.image.pause();
};
VideoTexture.prototype.toJSON = function(a) {
  var h = THREE.Texture.prototype.toJSON.call(this, a);
  a = this.video.toJSON(a);
  h.video = a.uuid;
  h.loop = this.loop;
  h.autoplay = this.autoplay;
  h.playbackRate = this.playbackRate;
  h.volume = this.volume;
  return h;
};
function WebcamTexture(a, h, l, b, g) {
  function k() {
    c.readyState >= c.HAVE_CURRENT_DATA && (e.needsUpdate = !0);
    e.disposed || requestAnimationFrame(k);
  }
  var c = document.createElement("video");
  c.autoplay = !0;
  c.loop = !0;
  navigator.webkitGetUserMedia ? navigator.webkitGetUserMedia({video:!0}, function(a) {
    c.src = URL.createObjectURL(a);
  }, function(a) {
    console.warn("nunuStudio: No webcam available");
  }) : navigator.mediaDevices.getUserMedia && navigator.mediaDevices.getUserMedia({video:!0}).then(function(a) {
    c.src = URL.createObjectURL(a);
  }).catch(function(a) {
    console.warn("nunuStudio: No webcam available");
  });
  THREE.Texture.call(this, c, a, h, l, THREE.LinearFilter, THREE.LinearFilter, THREE.RGBFormat, b, g);
  this.disposed = this.generateMipmaps = !1;
  this.name = "webcam";
  this.category = "Webcam";
  var e = this;
  k();
}
WebcamTexture.prototype = Object.create(THREE.Texture.prototype);
WebcamTexture.prototype.dispose = function() {
  THREE.Texture.prototype.dispose.call(this);
  this.disposed = !0;
  this.image.paused || this.image.pause();
};
function CubeTexture(a, h, l, b, g, k, c, e, f, q) {
  void 0 === h && (h = THREE.CubeReflectionMapping);
  for (var r = [], w = 0;6 > w;w++) {
    r.push(document.createElement("canvas"));
  }
  THREE.Texture.call(this, r, h, l, b, g, k, c, e, f, q);
  this.images = void 0 !== a ? a : [];
  this.size = 512;
  this.flipY = !1;
  this.updateImages();
  this.name = "cubetexture";
  this.category = "Cube";
}
CubeTexture.prototype = Object.create(THREE.Texture.prototype);
CubeTexture.prototype.isCubeTexture = !0;
CubeTexture.RIGHT = 0;
CubeTexture.LEFT = 1;
CubeTexture.TOP = 2;
CubeTexture.BOTTOM = 3;
CubeTexture.FRONT = 4;
CubeTexture.BACK = 5;
CubeTexture.prototype.updateImages = function() {
  for (var a = this, h = 0;h < this.images.length;h++) {
    "string" === typeof this.images[h] && (this.images[h] = new Image(this.images[h]));
    var l = document.createElement("img");
    l.index = h;
    l.src = this.images[h].data;
    l.onload = function() {
      a.image[this.index].width = a.size;
      a.image[this.index].height = a.size;
      a.image[this.index].getContext("2d").drawImage(this, 0, 0, a.size, a.size);
      a.needsUpdate = !0;
    };
  }
};
CubeTexture.prototype.toJSON = function(a) {
  var h = THREE.Texture.prototype.toJSON.call(this, a);
  h.images = [];
  for (var l = 0;l < this.images.length;l++) {
    var b = this.images[l].toJSON(a);
    h.images.push(b.uuid);
  }
  return h;
};
function FontLoader(a) {
  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
}
FontLoader.prototype.load = function(a, h, l, b) {
  (new THREE.FileLoader(this.manager)).load(a, function(a) {
    h(new Font(JSON.parse(a)));
  }, l, b);
};
FontLoader.prototype.parse = function(a) {
  if (void 0 !== a.data) {
    var h = new Font;
    h.name = a.name;
    h.uuid = a.uuid;
    h.encoding = a.encoding;
    void 0 !== a.reversed && (h.reversed = a.reversed);
    "base64" === a.format ? (h.format = "arraybuffer", h.data = ArraybufferUtils.fromBase64(a.data), h.loadTTF()) : (h.format = a.format, h.data = a.data, h.font = a.data);
    return h;
  }
  return new Font(a);
};
function ImageLoader(a) {
  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
}
ImageLoader.prototype.loadJSON = function(a, h, l, b) {
  var g = this;
  (new THREE.FileLoader(this.manager)).load(a, function(a) {
    g.parse(JSON.parse(a), h);
  }, l, b);
};
ImageLoader.prototype.parse = function(a, h) {
  h = new Image;
  h.name = a.name;
  h.uuid = a.uuid;
  h.format = a.format;
  h.encoding = a.encoding;
  h.data = a.data;
  return h;
};
function VideoLoader(a) {
  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
}
VideoLoader.prototype.load = function(a, h, l, b) {
  var g = this;
  (new THREE.FileLoader(this.manager)).load(a, function(a) {
    g.parse(JSON.parse(a), h);
  }, l, b);
};
VideoLoader.prototype.parse = function(a, h) {
  h = new Video;
  h.name = a.name;
  h.uuid = a.uuid;
  h.format = a.format;
  h.encoding = a.encoding;
  h.data = a.data;
  return h;
};
function AudioLoader(a) {
  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
}
AudioLoader.prototype.load = function(a, h, l, b) {
  (new THREE.FileLoader(this.manager)).load(a, function(a) {
    self.parse(JSON.parse(a), h);
  }, l, b);
};
AudioLoader.prototype.parse = function(a) {
  var h = new Audio;
  h.name = a.name;
  h.uuid = a.uuid;
  h.encoding = a.encoding;
  h.format = "arraybuffer";
  h.data = ArraybufferUtils.fromBase64(a.data);
  return h;
};
function MaterialLoader(a) {
  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
  this.textures = {};
}
MaterialLoader.prototype.load = function(a, h, l, b) {
  var g = this;
  (new FileLoader(g.manager)).load(a, function(a) {
    h(g.parse(JSON.parse(a)));
  }, l, b);
};
MaterialLoader.prototype.setTextures = function(a) {
  this.textures = a;
};
MaterialLoader.prototype.parse = function(a) {
  function h(a) {
    void 0 === l[a] && console.warn("THREE.MaterialLoader: Undefined texture", a);
    return l[a];
  }
  var l = this.textures, b = new window[a.type];
  void 0 !== a.uuid && (b.uuid = a.uuid);
  void 0 !== a.name && (b.name = a.name);
  void 0 !== a.color && b.color.setHex(a.color);
  void 0 !== a.roughness && (b.roughness = a.roughness);
  void 0 !== a.metalness && (b.metalness = a.metalness);
  void 0 !== a.emissive && b.emissive.setHex(a.emissive);
  void 0 !== a.specular && b.specular.setHex(a.specular);
  void 0 !== a.shininess && (b.shininess = a.shininess);
  void 0 !== a.clearCoat && (b.clearCoat = a.clearCoat);
  void 0 !== a.clearCoatRoughness && (b.clearCoatRoughness = a.clearCoatRoughness);
  void 0 !== a.uniforms && (b.uniforms = a.uniforms);
  void 0 !== a.vertexShader && (b.vertexShader = a.vertexShader);
  void 0 !== a.fragmentShader && (b.fragmentShader = a.fragmentShader);
  void 0 !== a.vertexColors && (b.vertexColors = a.vertexColors);
  void 0 !== a.fog && (b.fog = a.fog);
  void 0 !== a.shading && (b.shading = a.shading);
  void 0 !== a.blending && (b.blending = a.blending);
  void 0 !== a.side && (b.side = a.side);
  void 0 !== a.opacity && (b.opacity = a.opacity);
  void 0 !== a.transparent && (b.transparent = a.transparent);
  void 0 !== a.alphaTest && (b.alphaTest = a.alphaTest);
  void 0 !== a.depthTest && (b.depthTest = a.depthTest);
  void 0 !== a.depthWrite && (b.depthWrite = a.depthWrite);
  void 0 !== a.colorWrite && (b.colorWrite = a.colorWrite);
  void 0 !== a.wireframe && (b.wireframe = a.wireframe);
  void 0 !== a.wireframeLinewidth && (b.wireframeLinewidth = a.wireframeLinewidth);
  void 0 !== a.wireframeLinecap && (b.wireframeLinecap = a.wireframeLinecap);
  void 0 !== a.wireframeLinejoin && (b.wireframeLinejoin = a.wireframeLinejoin);
  void 0 !== a.morphTargets && (b.morphTargets = a.morphTargets);
  void 0 !== a.morphNormals && (b.morphNormals = a.morphNormals);
  void 0 !== a.size && (b.size = a.size);
  void 0 !== a.sizeAttenuation && (b.sizeAttenuation = a.sizeAttenuation);
  void 0 !== a.map && (b.map = h(a.map));
  void 0 !== a.alphaMap && (b.alphaMap = h(a.alphaMap), b.transparent = !0);
  void 0 !== a.bumpMap && (b.bumpMap = h(a.bumpMap));
  void 0 !== a.bumpScale && (b.bumpScale = a.bumpScale);
  void 0 !== a.normalMap && (b.normalMap = h(a.normalMap));
  if (void 0 !== a.normalScale) {
    var g = a.normalScale;
    !1 === Array.isArray(g) && (g = [g, g]);
    b.normalScale = (new Vector2).fromArray(g);
  }
  void 0 !== a.displacementMap && (b.displacementMap = h(a.displacementMap));
  void 0 !== a.displacementScale && (b.displacementScale = a.displacementScale);
  void 0 !== a.displacementBias && (b.displacementBias = a.displacementBias);
  void 0 !== a.roughnessMap && (b.roughnessMap = h(a.roughnessMap));
  void 0 !== a.metalnessMap && (b.metalnessMap = h(a.metalnessMap));
  void 0 !== a.emissiveMap && (b.emissiveMap = h(a.emissiveMap));
  void 0 !== a.emissiveIntensity && (b.emissiveIntensity = a.emissiveIntensity);
  void 0 !== a.specularMap && (b.specularMap = h(a.specularMap));
  void 0 !== a.envMap && (b.envMap = h(a.envMap));
  void 0 !== a.reflectivity && (b.reflectivity = a.reflectivity);
  void 0 !== a.envMapIntensity && (b.envMapIntensity = a.envMapIntensity);
  void 0 !== a.combine && (b.combine = a.combine);
  void 0 !== a.refractionRatio && (b.refractionRatio = a.refractionRatio);
  void 0 !== a.lightMap && (b.lightMap = h(a.lightMap));
  void 0 !== a.lightMapIntensity && (b.lightMapIntensity = a.lightMapIntensity);
  void 0 !== a.aoMap && (b.aoMap = h(a.aoMap));
  void 0 !== a.aoMapIntensity && (b.aoMapIntensity = a.aoMapIntensity);
  void 0 !== a.gradientMap && (b.gradientMap = h(a.gradientMap));
  if (void 0 !== a.materials) {
    for (var g = 0, k = a.materials.length;g < k;g++) {
      b.materials.push(this.parse(a.materials[g]));
    }
  }
  return b;
};
function TextureLoader(a) {
  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
  this.images = [];
  this.videos = [];
  this.fonts = [];
}
THREE.TextureLoader = TextureLoader;
TextureLoader.prototype.load = function(a, h, l, b) {
  a = new Texture(a);
  void 0 !== h && h(a);
  return a;
};
TextureLoader.prototype.loadJSON = function(a, h, l, b) {
  var g = this;
  (new THREE.FileLoader(this.manager)).load(a, function(a) {
    g.parse(JSON.parse(a), h);
  }, l, b);
};
TextureLoader.prototype.parse = function(a, h) {
  var l;
  l = a.category;
  if ("Video" === l) {
    void 0 === a.video && console.warn("TextureLoader: No video specified for", a.uuid), void 0 === this.videos[a.video] && console.warn("TextureLoader: Undefined video", a.video), l = new VideoTexture(this.videos[a.video]), l.loop = a.loop, l.autoplay = a.autoplay, l.playbackRate = a.playbackRate, l.volume = a.volume;
  } else {
    if ("Webcam" === l) {
      l = new WebcamTexture;
    } else {
      if ("Cube" === l) {
        l = [];
        for (var b = 0;b < a.images.length;b++) {
          void 0 === this.images[a.images[b]] && console.warn("nunuStudio: TextureLoader, undefined image", a.images[b]), l.push(this.images[a.images[b]]);
        }
        l = new CubeTexture(l);
      } else {
        "Canvas" === l ? l = new CanvasTexture(a.width, a.height) : (void 0 === a.image && console.warn("nunuStudio: TextureLoader, no image specified for", a.uuid), void 0 === this.images[a.image] && console.warn("nunuStudio: TextureLoader, undefined image", a.image), l = new Texture(this.images[a.image]));
      }
    }
  }
  l.uuid = a.uuid;
  l.name = a.name;
  l.mapping = a.mapping;
  l.offset = new THREE.Vector2(a.offset[0], a.offset[1]);
  l.repeat = new THREE.Vector2(a.repeat[0], a.repeat[1]);
  l.wrapS = a.wrap[0];
  l.wrapT = a.wrap[1];
  l.minFilter = a.minFilter;
  l.magFilter = a.magFilter;
  l.anisotropy = a.anisotropy;
  l.flipY = a.flipY;
  void 0 !== h && h(l);
  return l;
};
TextureLoader.prototype.setCrossOrigin = function(a) {
};
TextureLoader.prototype.setImages = function(a) {
  this.images = a;
  return this;
};
TextureLoader.prototype.setVideos = function(a) {
  this.videos = a;
  return this;
};
TextureLoader.prototype.setFonts = function(a) {
  this.fonts = a;
  return this;
};
function ObjectLoader(a) {
  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
  this.texturePath = "";
}
ObjectLoader.prototype.load = function(a, h, l, b) {
  "" === this.texturePath && (this.texturePath = a.substring(0, a.lastIndexOf("/") + 1));
  var g = this;
  (new THREE.FileLoader(this.manager)).load(a, function(a) {
    g.parse(JSON.parse(a), h);
  }, l, b);
};
ObjectLoader.prototype.parse = function(a, h) {
  var l = this.parseGeometries(a.geometries), b = this.parseImages(a.images), g = this.parseVideos(a.videos), k = this.parseAudio(a.audio), c = this.parseFonts(a.fonts), b = this.parseTextures(a.textures, b, g), g = this.parseMaterials(a.materials, b), l = this.parseObject(a.object, l, g, b, k, c);
  a.animations && (l.animations = this.parseAnimations(a.animations));
  void 0 !== a.images && 0 !== a.images.length || void 0 === h || h(l);
  return l;
};
ObjectLoader.prototype.setTexturePath = function(a) {
  this.texturePath = a;
};
ObjectLoader.prototype.setCrossOrigin = function(a) {
  this.crossOrigin = a;
};
ObjectLoader.prototype.parseGeometries = function(a) {
  var h = [];
  if (void 0 !== a) {
    for (var l = new THREE.JSONLoader, b = new THREE.BufferGeometryLoader, g = 0;g < a.length;g++) {
      var k, c = a[g];
      switch(c.type) {
        case "PlaneGeometry":
        case "PlaneBufferGeometry":
          k = new THREE[c.type](c.width, c.height, c.widthSegments, c.heightSegments);
          break;
        case "BoxGeometry":
        case "BoxBufferGeometry":
        case "CubeGeometry":
          k = new THREE[c.type](c.width, c.height, c.depth, c.widthSegments, c.heightSegments, c.depthSegments);
          break;
        case "CircleGeometry":
        case "CircleBufferGeometry":
          k = new THREE[c.type](c.radius, c.segments, c.thetaStart, c.thetaLength);
          break;
        case "CylinderGeometry":
        case "CylinderBufferGeometry":
          k = new THREE[c.type](c.radiusTop, c.radiusBottom, c.height, c.radialSegments, c.heightSegments, c.openEnded, c.thetaStart, c.thetaLength);
          break;
        case "ConeGeometry":
        case "ConeBufferGeometry":
          k = new THREE[c.type](c.radius, c.height, c.radialSegments, c.heightSegments, c.openEnded, c.thetaStart, c.thetaLength);
          break;
        case "SphereGeometry":
        case "SphereBufferGeometry":
          k = new THREE[c.type](c.radius, c.widthSegments, c.heightSegments, c.phiStart, c.phiLength, c.thetaStart, c.thetaLength);
          break;
        case "DodecahedronGeometry":
        case "IcosahedronGeometry":
        case "OctahedronGeometry":
        case "TetrahedronGeometry":
          k = new THREE[c.type](c.radius, c.detail);
          break;
        case "RingGeometry":
        case "RingBufferGeometry":
          k = new THREE[c.type](c.innerRadius, c.outerRadius, c.thetaSegments, c.phiSegments, c.thetaStart, c.thetaLength);
          break;
        case "TorusGeometry":
        case "TorusBufferGeometry":
          k = new THREE[c.type](c.radius, c.tube, c.radialSegments, c.tubularSegments, c.arc);
          break;
        case "TorusKnotGeometry":
        case "TorusKnotBufferGeometry":
          k = new THREE[c.type](c.radius, c.tube, c.tubularSegments, c.radialSegments, c.p, c.q);
          break;
        case "LatheGeometry":
        case "LatheBufferGeometry":
          k = new THREE[c.type](c.points, c.segments, c.phiStart, c.phiLength);
          break;
        case "BufferGeometry":
          k = b.parse(c);
          break;
        case "Geometry":
          k = l.parse(c.data, this.texturePath).geometry;
          break;
        default:
          console.warn("ObjectLoader: Unsupported geometry type " + c.type);
          continue;
      }
      k.uuid = c.uuid;
      k.name = void 0 !== c.name ? c.name : "geometry";
      h[c.uuid] = k;
    }
  }
  return h;
};
ObjectLoader.prototype.parseMaterials = function(a, h) {
  var l = [], b = new MaterialLoader;
  b.setTextures(h);
  if (void 0 !== a) {
    for (h = 0;h < a.length;h++) {
      var g = b.parse(a[h]);
      l[g.uuid] = g;
    }
  }
  return l;
};
ObjectLoader.prototype.parseAnimations = function(a) {
  for (var h = [], l = 0;l < a.length;l++) {
    var b = THREE.AnimationClip.parse(a[l]);
    h.push(b);
  }
  return h;
};
ObjectLoader.prototype.parseImages = function(a) {
  var h = new ImageLoader, l = [];
  if (void 0 !== a) {
    for (var b = 0;b < a.length;b++) {
      l[a[b].uuid] = h.parse(a[b]);
    }
  }
  return l;
};
ObjectLoader.prototype.parseVideos = function(a) {
  var h = new VideoLoader, l = [];
  if (void 0 !== a) {
    for (var b = 0;b < a.length;b++) {
      l[a[b].uuid] = h.parse(a[b]);
    }
  }
  return l;
};
ObjectLoader.prototype.parseAudio = function(a) {
  var h = new AudioLoader, l = [];
  if (void 0 !== a) {
    for (var b = 0;b < a.length;b++) {
      l[a[b].uuid] = h.parse(a[b]);
    }
  }
  return l;
};
ObjectLoader.prototype.parseFonts = function(a) {
  var h = new FontLoader, l = [];
  if (void 0 !== a) {
    for (var b = 0;b < a.length;b++) {
      l[a[b].uuid] = h.parse(a[b]);
    }
  }
  return l;
};
ObjectLoader.prototype.parseTextures = function(a, h, l) {
  var b = new TextureLoader;
  b.setImages(h);
  b.setVideos(l);
  h = [];
  if (void 0 !== a) {
    for (l = 0;l < a.length;l++) {
      var g = b.parse(a[l]);
      h[g.uuid] = g;
    }
  }
  return h;
};
ObjectLoader.prototype.parseObject = function(a, h, l, b, g, k) {
  function c(a) {
    void 0 === b[a] && console.warn("ObjectLoader: Undefined texture", a);
    return b[a];
  }
  function e(a) {
    void 0 === h[a] && console.warn("ObjectLoader: Undefined geometry", a);
    return h[a];
  }
  function f(a) {
    void 0 === l[a] && console.warn("ObjectLoader: Undefined material", a);
    return l[a];
  }
  function q(a) {
    void 0 === k[a] && console.warn("ObjectLoader: Undefined font", a);
    return k[a];
  }
  function r(a) {
    void 0 === g[a] && console.warn("ObjectLoader: Undefined audio", a);
    return g[a];
  }
  var w = new THREE.Matrix4, p;
  switch(a.type) {
    case "SpineAnimation":
      for (var u = 0;u < a.textures.length;u++) {
        a.textures[u].texture = c(a.textures[u].texture);
      }
      p = new SpineAnimation(a.json, a.atlas, "", a.textures);
      break;
    case "Audio":
      p = new AudioEmitter(r(a.audio));
      p.autoplay = a.autoplay;
      p.startTime = a.startTime;
      p.playbackRate = a.playbackRate;
      p.loop = void 0 !== a.source ? a.source.loop : a.loop;
      void 0 !== a.volume && (p.volume = a.volume);
      break;
    case "PositionalAudio":
      p = new PositionalAudio(r(a.audio));
      p.autoplay = a.autoplay;
      p.startTime = a.startTime;
      p.playbackRate = a.playbackRate;
      p.loop = void 0 !== a.source ? a.source.loop : a.loop;
      void 0 !== a.volume && (p.volume = a.volume);
      break;
    case "Physics":
      p = new PhysicsObject;
      p.body.type = a.body.type;
      p.body.mass = a.body.mass;
      p.body.linearDamping = a.body.linearDamping;
      p.body.angularDamping = a.body.angularDamping;
      p.body.allowSleep = a.body.allowSleep;
      p.body.sleepSpeedLimit = a.body.sleepSpeedLimit;
      p.body.sleepTimeLimit = a.body.sleepTimeLimit;
      p.body.collisionFilterGroup = a.body.collisionFilterGroup;
      p.body.collisionFilterMask = a.body.collisionFilterMask;
      p.body.fixedRotation = a.body.fixedRotation;
      for (var v = a.body.shapes, u = 0;u < v.length;u++) {
        var y = v[u];
        y.type === CANNON.Shape.types.SPHERE ? p.body.addShape(new CANNON.Sphere(y.radius)) : y.type === CANNON.Shape.types.BOX ? p.body.addShape(new CANNON.Box(new CANNON.Vec3(y.halfExtents.x, y.halfExtents.y, y.halfExtents.z))) : y.type === CANNON.Shape.types.PARTICLE ? p.body.addShape(new CANNON.Particle) : y.type === CANNON.Shape.types.PLANE ? p.body.addShape(new CANNON.Plane) : y.type === CANNON.Shape.types.CONVEXPOLYHEDRON && p.body.addShape(new CANNON.ConvexPolyhedron(y.vertices, y.faces));
      }
      break;
    case "ParticleEmiter":
      void 0 !== a.group && (p = a.group, p.texture.value = c(p.texture.value), p.textureFrames = THREE.Vector2(p.textureFrames));
      if (void 0 !== a.emitter) {
        for (p = a.emitter, p.position.value = THREE.Vector3.fromJSON(p.position.value), p.position.spread = THREE.Vector3.fromJSON(p.position.spread), p.velocity.value = THREE.Vector3.fromJSON(p.velocity.value), p.velocity.spread = THREE.Vector3.fromJSON(p.velocity.spread), p.acceleration.value = THREE.Vector3.fromJSON(p.acceleration.value), p.acceleration.spread = THREE.Vector3.fromJSON(p.acceleration.spread), u = 0;u < p.color.value.length;u++) {
          p.color.value[u] = new THREE.Color(p.color.value[u]), p.color.spread[u] = THREE.Vector3.fromJSON(p.color.spread[u]);
        }
      }
      p = new ParticleEmitter(a.group, a.emitter);
      break;
    case "Text3D":
      p = new Text3D(a.text, f(a.material), q(a.font), a.height, a.bevel, a.bevelThickness, a.bevelSize, a.size, a.curveSegments);
      break;
    case "Program":
      p = new Program(a.name);
      p.description = a.description;
      p.author = a.author;
      p.version = a.version;
      p.vr = a.vr;
      p.vrScale = a.vrScale;
      void 0 !== a.antialiasing && (p.antialiasing = a.antialiasing, p.shadows = a.shadows, p.shadowsType = a.shadowsType);
      void 0 !== a.toneMapping && (p.toneMapping = a.toneMapping, p.toneMappingWhitePoint = a.toneMappingWhitePoint, p.toneMappingExposure = a.toneMappingExposure);
      void 0 !== a.lockPointer && (p.lockPointer = a.lockPointer);
      void 0 !== a.defaultScene && (p.defaultScene = a.defaultScene);
      break;
    case "LeapDevice":
      p = new LeapMotion;
      p.mode = a.mode;
      p.useArm = a.useArm;
      void 0 !== a.debugModel && (p.debugModel = a.debugModel);
      void 0 !== a.gesturesEnabled && (p.gesturesEnabled = a.gesturesEnabled);
      void 0 !== a.posesEnabled && (p.posesEnabled = a.posesEnabled);
      break;
    case "Kinect":
      p = new KinectDevice;
      void 0 !== a.debugModel && (p.debugModel = a.debugModel);
      break;
    case "Sky":
      p = new Sky(a.autoUpdate, a.dayTime, a.sunDistance, a.time);
      void 0 !== a.sun && p.sun.shadow.fromJSON(a.sun.shadow);
      if (void 0 !== a.colorTop) {
        for (p.colorTop = [], u = 0;u < a.colorTop.length;u++) {
          p.colorTop.push(new THREE.Color(a.colorTop[u]));
        }
      }
      if (void 0 !== a.colorBottom) {
        for (p.colorBottom = [], u = 0;u < a.colorBottom.length;u++) {
          p.colorBottom.push(new THREE.Color(a.colorBottom[u]));
        }
      }
      void 0 !== a.sunColor && (p.sunColor = a.sunColor);
      void 0 !== a.moonColor && (p.moonColor = a.moonColor);
      break;
    case "Scene":
      p = new Scene;
      void 0 !== a.background && (Number.isInteger(a.background) ? p.background = new THREE.Color(a.background) : p.background = c(a.background));
      void 0 !== a.fog && ("Fog" === a.fog.type ? p.fog = new THREE.Fog(a.fog.color, a.fog.near, a.fog.far) : "FogExp2" === a.fog.type && (p.fog = new THREE.FogExp2(a.fog.color, a.fog.density)));
      void 0 !== a.cameras && (p.cameras = a.cameras);
      void 0 !== a.world && p.world.gravity.set(a.world.gravity.x, a.world.gravity.y, a.world.gravity.z);
      break;
    case "PerspectiveCamera":
      p = new PerspectiveCamera(a.fov, a.aspect, a.near, a.far);
      void 0 !== a.focus && (p.focus = a.focus);
      void 0 !== a.zoom && (p.zoom = a.zoom);
      void 0 !== a.filmGauge && (p.filmGauge = a.filmGauge);
      void 0 !== a.filmOffset && (p.filmOffset = a.filmOffset);
      void 0 !== a.view && (p.view = Object.assign({}, a.view));
      void 0 !== a.viewport && p.viewport.fromArray(a.viewport);
      void 0 !== a.offset && p.offset.fromArray(a.offset);
      void 0 !== a.clearColor && (p.clearColor = a.clearColor);
      void 0 !== a.clearDepth && (p.clearDepth = a.clearDepth);
      void 0 !== a.order && (p.order = a.order);
      break;
    case "OrthographicCamera":
      p = new OrthographicCamera(a.size, a.aspect, a.mode, a.near, a.far);
      void 0 !== a.viewport && p.viewport.fromArray(a.viewport);
      void 0 !== a.offset && p.offset.fromArray(a.offset);
      void 0 !== a.clearColor && (p.clearColor = a.clearColor);
      void 0 !== a.clearDepth && (p.clearDepth = a.clearDepth);
      void 0 !== a.order && (p.order = a.order);
      break;
    case "Script":
      p = new Script(a.code);
      break;
    case "RectAreaLight":
      p = new RectAreaLight(a.color, a.intensity, a.width, a.height);
      break;
    case "AmbientLight":
      p = new AmbientLight(a.color, a.intensity);
      break;
    case "DirectionalLight":
      p = new DirectionalLight(a.color, a.intensity);
      break;
    case "PointLight":
      p = new PointLight(a.color, a.intensity, a.distance, a.decay);
      break;
    case "SpotLight":
      p = new SpotLight(a.color, a.intensity, a.distance, a.angle, a.penumbra, a.decay);
      break;
    case "HemisphereLight":
      p = new HemisphereLight(a.color, a.groundColor, a.intensity);
      break;
    case "Mesh":
      p = new Mesh(e(a.geometry), f(a.material));
      break;
    case "SkinnedMesh":
      p = new SkinnedMesh(e(a.geometry), f(a.material));
      break;
    case "LOD":
      p = new THREE.LOD;
      break;
    case "Line":
      p = new THREE.Line(e(a.geometry), f(a.material), a.mode);
      break;
    case "PointCloud":
    case "Points":
      p = new THREE.Points(e(a.geometry), f(a.material));
      break;
    case "Sprite":
      p = new Sprite(f(a.material));
      break;
    case "Group":
      p = new Container;
      break;
    case "Bone":
      p = new Bone;
      break;
    default:
      p = new Container;
  }
  p.uuid = a.uuid;
  void 0 !== a.name && (p.name = a.name);
  void 0 !== a.hidden && (p.hidden = a.hidden);
  void 0 !== a.folded && (p.folded = a.folded);
  void 0 !== a.matrix ? (w.fromArray(a.matrix), w.decompose(p.position, p.quaternion, p.scale)) : (void 0 !== a.position && p.position.fromArray(a.position), void 0 !== a.rotation && p.rotation.fromArray(a.rotation), void 0 !== a.scale && p.scale.fromArray(a.scale));
  void 0 !== a.castShadow && (p.castShadow = a.castShadow);
  void 0 !== a.receiveShadow && (p.receiveShadow = a.receiveShadow);
  void 0 !== a.shadow && p.shadow.fromJSON(a.shadow);
  void 0 !== a.visible && (p.visible = a.visible);
  void 0 !== a.userData && (p.userData = a.userData);
  if (void 0 !== a.children) {
    for (var x in a.children) {
      p.add(this.parseObject(a.children[x], h, l, b, g, k));
    }
  }
  void 0 !== a.matrixAutoUpdate && (p.matrixAutoUpdate = a.matrixAutoUpdate, p.matrixAutoUpdate || (p.updateMatrix(), p.updateMatrixWorld(!0)));
  if ("Program" === a.type) {
    p.materials = l, p.textures = b, p.fonts = k, p.audio = g;
  } else {
    if ("Scene" === a.type) {
      for (u = 0;u < p.cameras.length;u++) {
        x = p.getCamera(p.cameras[u]), null !== x ? p.cameras[u] = x : p.cameras.splice(u, 1);
      }
    } else {
      if ("LOD" === a.type) {
        for (a = a.levels, w = 0;w < a.length;w++) {
          u = a[w], x = p.getObjectByProperty("uuid", u.object), void 0 !== x && p.addLevel(x, u.distance);
        }
      }
    }
  }
  return p;
};
function TTFLoader(a) {
  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
  this.reversed = !1;
}
TTFLoader.prototype.load = function(a, h, l, b) {
  var g = this, k = new THREE.FileLoader(this.manager);
  k.setResponseType("arraybuffer");
  k.load(a, function(a) {
    a = g.parse(a);
    void 0 !== h && h(a);
  }, l, b);
};
TTFLoader.prototype.parse = function(a) {
  a = opentype.parse(a);
  return TTFLoader.convert(a, this.reversed);
};
TTFLoader.convert = function(a, h) {
  for (var l = 1E5 / (72 * (a.unitsPerEm || 2048)), b = {glyphs:{}}, g = 0;g < a.glyphs.length;g++) {
    var k = a.glyphs.glyphs[g];
    if (void 0 !== k.unicode) {
      var c = {};
      c.ha = Math.round(k.advanceWidth * l);
      c.xMin = Math.round(k.xMin * l);
      c.xMax = Math.round(k.xMax * l);
      c.o = "";
      h && (k.path.commands = TTFLoader.reverseCommands(k.path.commands));
      k.path.commands.forEach(function(a, b) {
        "c" === a.type.toLowerCase() && (a.type = "b");
        c.o += a.type.toLowerCase();
        c.o += " ";
        void 0 !== a.x && void 0 !== a.y && (c.o += Math.round(a.x * l), c.o += " ", c.o += Math.round(a.y * l), c.o += " ");
        void 0 !== a.x1 && void 0 !== a.y1 && (c.o += Math.round(a.x1 * l), c.o += " ", c.o += Math.round(a.y1 * l), c.o += " ");
        void 0 !== a.x2 && void 0 !== a.y2 && (c.o += Math.round(a.x2 * l), c.o += " ", c.o += Math.round(a.y2 * l), c.o += " ");
      });
      b.glyphs[String.fromCharCode(k.unicode)] = c;
    }
  }
  b.resolution = 1E3;
  b.originalFontInformation = a.names;
  b.unitsPerEm = a.unitsPerEm;
  b.ascender = Math.round(a.ascender * l);
  b.descender = Math.round(a.descender * l);
  b.underlinePosition = a.tables.post.underlinePosition;
  b.underlineThickness = a.tables.post.underlineThickness;
  b.boundingBox = {yMin:a.tables.head.yMin, xMin:a.tables.head.xMin, yMax:a.tables.head.yMax, xMax:a.tables.head.xMax};
  return b;
};
TTFLoader.reverseCommands = function(a) {
  var h = [], l;
  a.forEach(function(a) {
    "m" === a.type.toLowerCase() ? (l = [a], h.push(l)) : "z" !== a.type.toLowerCase() && l.push(a);
  });
  var b = [];
  h.forEach(function(a) {
    var g = {type:"m", x:a[a.length - 1].x, y:a[a.length - 1].y};
    b.push(g);
    for (var c = a.length - 1;0 < c;c--) {
      var e = a[c], g = {type:e.type};
      void 0 !== e.x2 && void 0 !== e.y2 ? (g.x1 = e.x2, g.y1 = e.y2, g.x2 = e.x1, g.y2 = e.y1) : void 0 !== e.x1 && void 0 !== e.y1 && (g.x1 = e.x1, g.y1 = e.y1);
      g.x = a[c - 1].x;
      g.y = a[c - 1].y;
      b.push(g);
    }
  });
  return b;
};
function LeapMotion() {
  THREE.Object3D.call(this);
  this.type = "LeapDevice";
  this.name = "leap";
  this.posesEnabled = this.gesturesEnabled = this.debugModel = !0;
  this.mode = LeapMotion.DESK;
  this.useArm = !1;
  this.boneMeshes = [];
  this.armMeshes = [];
  this.material = new THREE.MeshPhongMaterial;
  this.geometry = new THREE.BoxBufferGeometry(1, 1, 1);
  this.physicsWorld = null;
  this.physicsBodys = [];
  this.gesture = [];
  for (var a = 0;10 > a;a++) {
    this.gesture[a] = !1;
  }
  this.pose = [];
  for (a = 0;3 > a;a++) {
    this.pose[a] = !1;
  }
  this.data = null;
}
LeapMotion.prototype = Object.create(THREE.Object3D.prototype);
LeapMotion.DESK = 0;
LeapMotion.HDM = 1;
LeapMotion.SWIPE = 0;
LeapMotion.SWIPE_LEFT = 1;
LeapMotion.SWIPE_RIGHT = 2;
LeapMotion.SWIPE_FRONT = 3;
LeapMotion.SWIPE_BACK = 4;
LeapMotion.SWIPE_UP = 5;
LeapMotion.SWIPE_DOWN = 6;
LeapMotion.CIRCLE = 7;
LeapMotion.SCREEN_TAP = 8;
LeapMotion.KEY_TAP = 9;
LeapMotion.CLOSED = 0;
LeapMotion.OPEN = 1;
LeapMotion.POINTING = 2;
LeapMotion.prototype.initialize = function() {
  var a = this;
  Leap.loop({background:!0}, function(h) {
    a.data = h;
  }).connect();
  for (var h = 0;h < this.children.length;h++) {
    this.children[h].initialize();
  }
};
LeapMotion.prototype.update = function() {
  null !== this.data && (this.gesturesEnabled && this.updateGestures(), this.posesEnabled && this.updatePoses(), this.debugModel && this.updateDebugModel());
  for (var a = 0;a < this.children.length;a++) {
    this.children[a].update();
  }
};
LeapMotion.prototype.checkGesture = function(a) {
  return void 0 !== this.gesture[a] ? this.gesture[a] : !1;
};
LeapMotion.prototype.checkPose = function(a) {
  return void 0 !== this.pose[a] ? this.pose[a] : !1;
};
LeapMotion.prototype.setMode = function(a) {
  this.mode = a;
};
LeapMotion.prototype.updatePoses = function() {
  for (var a = 0;a < this.pose.length;a++) {
    this.pose[a] = !0;
  }
  for (var h = 0;h < this.data.hands.length;h++) {
    for (var l = this.data.hands[h], b = l.sphereCenter, b = new THREE.Vector3(b[0], b[1], b[2]), g = [], k = 0, c, a = 0;a < this.pose.length;a++) {
      this.pose[a] = !0;
    }
    for (var e = [], a = 0;a < l.fingers.length;a++) {
      c = l.fingers[a], e.push(c.direction), c = c.distal.nextJoint, c = new THREE.Vector3(c[0], c[1], c[2]), g.push(b.distanceTo(c) / l._scaleFactor), 0 !== a && (.3 > e[a][2] && (this.pose[LeapMotion.CLOSED] = !1), -.5 < e[a][2] && (this.pose[LeapMotion.OPEN] = !1), 1 === a ? k = g[1] : k < 2 * g[a] - 15 && (this.pose[LeapMotion.POINTING] = !1));
    }
    k < 2 * g[0] - 15 && (this.pose[LeapMotion.POINTING] = !1);
  }
};
LeapMotion.prototype.updateGestures = function() {
  for (var a = 0;a < this.gesture.length;a++) {
    this.gesture[a] = !1;
  }
  var h = this;
  this.data.valid && 0 < this.data.gestures.length && this.data.gestures.forEach(function(a) {
    "swipe" === a.type ? (h.gesture[LeapMotion.SWIPE] = !0, 0 < a.direction[0] ? h.gesture[LeapMotion.SWIPE_RIGHT] = !0 : h.gesture[LeapMotion.SWIPE_LEFT] = !0, 0 < a.direction[1] ? h.gesture[LeapMotion.SWIPE_UP] = !0 : h.gesture[LeapMotion.SWIPE_DOWN] = !0, 0 < a.direction[2] ? h.gesture[LeapMotion.SWIPE_FRONT] = !0 : h.gesture[LeapMotion.SWIPE_BACK] = !0) : "circle" === a.type ? h.gesture[LeapMotion.CIRCLE] = !0 : "keyTap" === a.type ? h.gesture[LeapMotion.KEY_TAP] = !0 : "screenTap" === a.type && 
    (h.gesture[LeapMotion.SCREEN_TAP] = !0);
  });
};
LeapMotion.prototype.updateDebugModel = function() {
  var a = this;
  this.armMeshes.forEach(function(b) {
    a.remove(b);
  });
  this.boneMeshes.forEach(function(b) {
    a.remove(b);
  });
  for (var h = 0, l = 0, b = 0;b < this.data.hands.length;b++) {
    for (var g = this.data.hands[b], k = 0;k < g.fingers.length;k++) {
      for (var c = g.fingers[k], e = 0;e < c.bones.length;e++) {
        var f = c.bones[e];
        if (0 !== h) {
          var q = this.boneMeshes[h] || this.addMesh(this.boneMeshes);
          this.updateMesh(f, q);
        }
        h++;
      }
    }
    this.showArm && (g = g.arm, k = this.armMeshes[l++] || this.addMesh(this.armMeshes), this.updateMesh(g, k), k.scale.set(g.width / 1200, g.width / 300, g.length / 150));
  }
  null !== this.physicsWorld && this.updatePhysics();
};
LeapMotion.prototype.updatePhysics = function() {
  for (var a = 0;a < this.physicsBodys.length;a++) {
    this.physicsWorld.removeBody(this.physicsBodys[a].pop());
  }
  this.children.forEach(function(a, l) {
    a = new THREE.BoundingBoxHelper(a);
    a.update();
    l = new THREE.Vector3(a.box.max.x - a.box.min.x, a.box.max.y - a.box.min.y, a.box.max.z - a.box.min.z);
    l.x *= this.scale.x;
    l.y *= this.scale.y;
    l.z *= this.scale.z;
    l.divideScalar(2);
    a = a.box.center();
    a.x *= this.scale.x;
    a.y *= this.scale.y;
    a.z *= this.scale.z;
    a.add(this.position);
    l = new CANNON.Box(new CANNON.Vec3(l.x, l.y, l.z));
    var b = new CANNON.Body({mass:0});
    b.addShape(l);
    b.position.set(a.x - this.position.x, a.y - this.position.y, a.z - this.position.z);
    b.updateMassProperties();
    this.physicsBodys.push(b);
    this.physicsWorld.addBody(b);
  });
};
LeapMotion.prototype.addMesh = function(a) {
  var h = new Mesh(this.geometry, this.material);
  h.castShadow = this.castShadow;
  h.receiveShadow = this.receiveShadow;
  a.push(h);
  return h;
};
LeapMotion.prototype.updateMesh = function(a, h) {
  h.position.fromArray(a.center());
  h.position.divideScalar(150);
  h.setRotationFromMatrix((new THREE.Matrix4).fromArray(a.matrix()));
  h.scale.set(a.width / 150, a.width / 150, a.length / 150);
  this.add(h);
};
LeapMotion.prototype.getMovement = function() {
  var a = this.data.gestures[0].position, h = this.data.gestures[0].startPosition, a = new THREE.Vector3(a[0] - h[0], a[1] - h[1], a[2] - h[2]);
  a.divideScalar(this.data.currentFrameRate);
  return a;
};
LeapMotion.prototype.toJSON = function(a) {
  a = THREE.Object3D.prototype.toJSON.call(this, a);
  a.object.type = this.type;
  a.object.debugModel = this.debugModel;
  a.object.gesturesEnabled = this.gesturesEnabled;
  a.object.posesEnabled = this.posesEnabled;
  a.object.mode = this.mode;
  a.object.useArm = this.useArm;
  return a;
};
function KinectDevice() {
  THREE.Object3D.call(this);
  this.type = "Kinect";
  this.name = "kinect";
  this.socket = new WebSocket("ws://127.0.0.1:8181");
  this.connected = !1;
  this.debugModel = !0;
  this.dataTimeout = 0;
  this.data = this.camera = null;
  this.dataReceived = !1;
  var a = this;
  this.socket.onopen = function() {
    a.connected = !0;
  };
  this.socket.onclose = function() {
    a.connected = !1;
  };
  this.socket.onmessage = function(h) {
    "string" === typeof h.data ? (a.data = JSON.parse(h.data), a.dataReceived = !0, a.dataTimeout = KinectDevice.DATA_TIMEOUT) : h.data instanceof Blob && (a.camera = h.data);
  };
}
KinectDevice.DATA_TIMEOUT = 20;
KinectDevice.DEPTH = 0;
KinectDevice.COLOR = 1;
KinectDevice.JOINTS_NAME = [["head", "shouldercenter"], ["shouldercenter", "shoulderright"], ["shouldercenter", "shoulderleft"], ["shoulderright", "elbowright"], ["shoulderleft", "elbowleft"], ["elbowright", "wristright"], ["elbowleft", "wristleft"], ["wristright", "handright"], ["wristleft", "handleft"], ["shouldercenter", "spine"], ["spine", "hipcenter"], ["hipcenter", "hipright"], ["hipcenter", "hipleft"], ["hipright", "kneeright"], ["hipleft", "kneeleft"], ["kneeright", "ankleright"], ["kneeleft", 
"ankleleft"], ["ankleright", "footright"], ["ankleleft", "footleft"]];
KinectDevice.prototype = Object.create(THREE.Object3D.prototype);
KinectDevice.prototype.update = function() {
  if (null !== this.data) {
    if (this.dataReceived) {
      for (this.dataReceived = !1;0 < this.children.length;) {
        this.children.pop();
      }
      if (this.debugModel) {
        for (var a = new THREE.SphereGeometry(.04, 6, 6), h = new THREE.MeshPhongMaterial(16711680), l = 0;l < this.data.skeletons.length;l++) {
          for (var b = this.data.skeletons[l].joints, g = 0;g < b.length;g++) {
            var k = new Mesh(a, h);
            k.position.set(b[g].x, b[g].y, b[g].z);
            k.castShadow = !0;
            this.add(k);
          }
        }
      }
    } else {
      if (0 < this.dataTimeout && (this.dataTimeout--, 0 === this.dataTimeout)) {
        for (;0 < this.children.length;) {
          this.children.pop();
        }
      }
    }
  }
  for (g = 0;g < this.children.length;g++) {
    this.children[g].update();
  }
};
KinectDevice.prototype.isConnected = function() {
  return this.connected;
};
KinectDevice.prototype.setCameraMode = function(a) {
  a === KinectDevice.COLOR ? socket.send("Color") : a === KinectDevice.DEPTH && socket.send("Depth");
};
KinectDevice.prototype.toJSON = function(a) {
  a = THREE.Object3D.prototype.toJSON.call(this, a);
  a.object.debugModel = this.debugModel;
  return a;
};
function Mesh(a, h) {
  THREE.Mesh.call(this, a, h);
  this.name = "model";
  this.castShadow = this.receiveShadow = !0;
}
Mesh.prototype = Object.create(THREE.Mesh.prototype);
Mesh.prototype.dispose = function() {
  null !== this.material && void 0 !== this.material.dispose && this.material.dispose();
  this.geometry.dispose();
  for (var a = 0;a < this.children.length;a++) {
    this.children[a].dispose();
  }
};
function SkinnedMesh(a, h, l) {
  THREE.SkinnedMesh.call(this, a, h, l);
  this.name = "model";
  this.castShadow = this.receiveShadow = !0;
}
SkinnedMesh.prototype = Object.create(THREE.SkinnedMesh.prototype);
SkinnedMesh.prototype.dispose = function() {
  null !== this.material && void 0 !== this.material.dispose && this.material.dispose();
  this.geometry.dispose();
  for (var a = 0;a < this.children.length;a++) {
    this.children[a].dispose();
  }
};
function Text3D(a, h, l, b, g, k, c, e, f) {
  THREE.Mesh.call(this, void 0, h);
  this.name = "text";
  this.type = "Text3D";
  this.font = l;
  this.text = void 0 !== a ? a : "text";
  this.size = void 0 !== e ? e : 1;
  this.height = void 0 !== b ? b : .5;
  this.curveSegments = void 0 !== f ? f : 15;
  this.bevel = void 0 !== g ? g : !1;
  this.bevelThickness = void 0 !== k ? k : .1;
  this.bevelSize = void 0 !== c ? c : .05;
  this.setText(this.text);
  this.castShadow = this.receiveShadow = !0;
}
Text3D.prototype = Object.create(THREE.Mesh.prototype);
Text3D.prototype.setFont = function(a) {
  this.font = a;
  this.setText();
};
Text3D.prototype.setText = function(a) {
  void 0 !== a && (this.text = a);
  void 0 !== this.geometry && this.geometry.dispose();
  this.updateText();
};
Text3D.prototype.updateText = function() {
  null !== this.font && (this.geometry = new THREE.TextGeometry(this.text, {size:this.size, curveSegments:this.curveSegments, font:this.font, height:this.height, bevelEnabled:this.bevel, bevelSize:this.bevelSize, bevelThickness:this.bevelThickness}));
};
Text3D.prototype.clone = function() {
  return new Text3D(this.text, this.material, this.font, this.height, this.bevel, this.bevelThickness, this.bevelSize, this.size, this.curveSegments);
};
Text3D.prototype.dispose = function() {
  void 0 !== this.material.dispose && this.material.dispose();
  void 0 !== this.geometry && this.geometry.dispose();
  for (var a = 0;a < this.children.length;a++) {
    this.children[a].dispose();
  }
};
Text3D.prototype.toJSON = function(a) {
  var h = this.geometry;
  this.geometry = void 0;
  var l = this.font;
  a = THREE.Object3D.prototype.toJSON.call(this, a, function(a, g) {
    l = l.toJSON(a);
  });
  a.object.text = this.text;
  a.object.font = l.uuid;
  a.object.size = this.size;
  a.object.curveSegments = this.curveSegments;
  a.object.height = this.height;
  a.object.bevel = this.bevel;
  a.object.bevelThickness = this.bevelThickness;
  a.object.bevelSize = this.bevelSize;
  this.geometry = h;
  return a;
};
function Sprite(a) {
  THREE.Sprite.call(this, a);
  this.name = "sprite";
  this.type = "Sprite";
}
Sprite.prototype = Object.create(THREE.Sprite.prototype);
Sprite.prototype.dispose = function() {
  null !== this.material && void 0 !== this.material.dispose && this.material.dispose();
  for (var a = 0;a < this.children.length;a++) {
    this.children[a].dispose();
  }
};
function PointLight(a, h, l, b) {
  THREE.PointLight.call(this, a, h, l, b);
  this.name = "point";
  this.castShadow = !0;
  this.shadow.camera.near = .05;
  this.shadow.camera.far = 5E3;
  this.shadow.bias = .01;
}
PointLight.prototype = Object.create(THREE.PointLight.prototype);
PointLight.prototype.updateShadowMap = function() {
  this.shadow.map.dispose();
  this.shadow.map = null;
  this.shadow.camera.updateProjectionMatrix();
};
function SpotLight(a, h, l, b, g, k) {
  THREE.SpotLight.call(this, a, h, l, b, g, k);
  this.name = "spotlight";
  this.castShadow = !0;
  this.shadow.camera.near = .05;
  this.shadow.camera.far = 5E3;
  this.shadow.mapSize.width = 512;
  this.shadow.mapSize.height = 512;
}
SpotLight.prototype = Object.create(THREE.SpotLight.prototype);
SpotLight.prototype.updateShadowMap = function() {
  this.shadow.map.dispose();
  this.shadow.map = null;
  this.shadow.camera.updateProjectionMatrix();
};
function AmbientLight(a) {
  THREE.AmbientLight.call(this, a);
  this.name = "ambient";
  this.matrixAutoUpdate = !1;
}
AmbientLight.prototype = Object.create(THREE.AmbientLight.prototype);
function DirectionalLight(a, h) {
  THREE.DirectionalLight.call(this, a, h);
  this.name = "directional";
  this.castShadow = !0;
  this.shadow.camera.near = .5;
  this.shadow.camera.far = 1E4;
}
DirectionalLight.prototype = Object.create(THREE.DirectionalLight.prototype);
DirectionalLight.prototype.updateShadowMap = function() {
  this.shadow.map.dispose();
  this.shadow.map = null;
  this.shadow.camera.updateProjectionMatrix();
};
function HemisphereLight(a, h, l) {
  THREE.HemisphereLight.call(this, a, h, l);
  this.name = "hemisphere";
}
HemisphereLight.prototype = Object.create(THREE.HemisphereLight.prototype);
function RectAreaLight(a, h, l, b) {
  THREE.RectAreaLight.call(this, a, h, l, b);
  this.name = "rectarea";
}
RectAreaLight.prototype = Object.create(THREE.RectAreaLight.prototype);
RectAreaLight.prototype.toJSON = function(a) {
  a = THREE.Light.prototype.toJSON.call(this, a);
  a.object.width = this.width;
  a.object.height = this.height;
  return a;
};
function Sky(a, h, l, b) {
  THREE.Object3D.call(this);
  this.name = "sky";
  this.type = "Sky";
  this.clock = new THREE.Clock;
  this.colorTop = [new THREE.Color(7844859), new THREE.Color(30463), new THREE.Color(220086), new THREE.Color(9273)];
  this.colorBottom = [new THREE.Color(15461606), new THREE.Color(16777215), new THREE.Color(16705495), new THREE.Color(26023)];
  this.sunColor = 16777130;
  this.moonColor = 5592507;
  this.hemisphere = new THREE.HemisphereLight(0, 0, .5);
  this.hemisphere.color.setHSL(.6, 1, .6);
  this.hemisphere.groundColor.setHSL(.1, 1, .75);
  this.hemisphere.hidden = !0;
  this.hemisphere.matrixAutoUpdate = !1;
  this.add(this.hemisphere);
  this.sun = new DirectionalLight(this.sunColor, .3);
  this.sun.castShadow = !0;
  this.sun.hidden = !0;
  this.add(this.sun);
  var g = {topColor:{type:"c", value:new THREE.Color(0, .46, 1)}, bottomColor:{type:"c", value:new THREE.Color(1, 1, 1)}, offset:{type:"f", value:20}, exponent:{type:"f", value:.4}};
  g.topColor.value.copy(this.hemisphere.color);
  var k = new THREE.SphereBufferGeometry(1E3, 16, 16), g = new THREE.ShaderMaterial({vertexShader:"varying vec3 vWorldPosition; \r\tvoid main() \r\t{ \r\t\tvec4 worldPosition = modelMatrix * vec4(position, 1.0); \r\t\tvWorldPosition = worldPosition.xyz; \r\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0); \r\t}", fragmentShader:"uniform vec3 topColor; \r\tuniform vec3 bottomColor; \r\tuniform float offset; \r\tuniform float exponent; \r\tvarying vec3 vWorldPosition; \r\tvoid main() \r\t{ \r\t\tfloat h = normalize(vWorldPosition + offset).y; \r\t\tgl_FragColor = vec4(mix(bottomColor, topColor, max(pow(max(h , 0.0), exponent), 0.0)), 1.0); \r\t}", 
  uniforms:g, side:THREE.BackSide});
  this.sky = new THREE.Mesh(k, g);
  this.sky.hidden = !0;
  this.sky.matrixAutoUpdate = !1;
  this.add(this.sky);
  this.sky.raycast = function() {
    return null;
  };
  this.autoUpdate = void 0 !== a ? a : !0;
  this.sunDistance = void 0 !== l ? l : 100;
  this.dayTime = void 0 !== h ? h : 120;
  this.time = void 0 !== b ? b : 75;
  this.updateSky();
}
Sky.prototype = Object.create(THREE.Object3D.prototype);
Sky.prototype.initialize = function() {
  this.updateSky();
  for (var a = 0;a < this.children.length;a++) {
    this.children[a].initialize();
  }
};
Sky.prototype.update = function() {
  this.autoUpdate && (this.time += this.clock.getDelta(), this.time > this.dayTime && (this.time -= this.dayTime), this.updateSky());
  for (var a = 0;a < this.children.length;a++) {
    this.children[a].update();
  }
};
Sky.prototype.isEmpty = function() {
  return 3 >= this.children.length;
};
Sky.prototype.updateSky = function() {
  var a = this.time / this.dayTime;
  if (.25 > a) {
    this.sky.material.uniforms.topColor.value.setRGB(this.colorTop[3].r, this.colorTop[3].g, this.colorTop[3].b), this.sky.material.uniforms.bottomColor.value.setRGB(this.colorBottom[3].r, this.colorBottom[3].g, this.colorBottom[3].b);
  } else {
    if (.292 > a) {
      var h = 23.81 * (a - .25), l = 1 - h;
      this.sky.material.uniforms.topColor.value.setRGB(l * this.colorTop[3].r + h * this.colorTop[0].r, l * this.colorTop[3].g + h * this.colorTop[0].g, l * this.colorTop[3].b + h * this.colorTop[0].b);
      this.sky.material.uniforms.bottomColor.value.setRGB(l * this.colorBottom[3].r + h * this.colorBottom[0].r, l * this.colorBottom[3].g + h * this.colorBottom[0].g, l * this.colorBottom[3].b + h * this.colorBottom[0].b);
    } else {
      .4167 > a ? (this.sky.material.uniforms.topColor.value.setRGB(this.colorTop[0].r, this.colorTop[0].g, this.colorTop[0].b), this.sky.material.uniforms.bottomColor.value.setRGB(this.colorBottom[0].r, this.colorBottom[0].g, this.colorBottom[0].b)) : .5 > a ? (h = 12 * (a - .4167), l = 1 - h, this.sky.material.uniforms.topColor.value.setRGB(l * this.colorTop[0].r + h * this.colorTop[1].r, l * this.colorTop[0].g + h * this.colorTop[1].g, l * this.colorTop[0].b + h * this.colorTop[1].b), this.sky.material.uniforms.bottomColor.value.setRGB(l * 
      this.colorBottom[0].r + h * this.colorBottom[1].r, l * this.colorBottom[0].g + h * this.colorBottom[1].g, l * this.colorBottom[0].b + h * this.colorBottom[1].b)) : .708 > a ? (this.sky.material.uniforms.topColor.value.setRGB(this.colorTop[1].r, this.colorTop[1].g, this.colorTop[1].b), this.sky.material.uniforms.bottomColor.value.setRGB(this.colorBottom[1].r, this.colorBottom[1].g, this.colorBottom[1].b)) : .75 > a ? (h = 23.81 * (a - .708), l = 1 - h, this.sky.material.uniforms.topColor.value.setRGB(l * 
      this.colorTop[1].r + h * this.colorTop[2].r, l * this.colorTop[1].g + h * this.colorTop[2].g, l * this.colorTop[1].b + h * this.colorTop[2].b), this.sky.material.uniforms.bottomColor.value.setRGB(l * this.colorBottom[1].r + h * this.colorBottom[2].r, l * this.colorBottom[1].g + h * this.colorBottom[2].g, l * this.colorBottom[1].b + h * this.colorBottom[2].b)) : .8333 > a ? (h = 12.048 * (a - .75), l = 1 - h, this.sky.material.uniforms.topColor.value.setRGB(l * this.colorTop[2].r + h * this.colorTop[3].r, 
      l * this.colorTop[2].g + h * this.colorTop[3].g, l * this.colorTop[2].b + h * this.colorTop[3].b), this.sky.material.uniforms.bottomColor.value.setRGB(l * this.colorBottom[2].r + h * this.colorBottom[3].r, l * this.colorBottom[2].g + h * this.colorBottom[3].g, l * this.colorBottom[2].b + h * this.colorBottom[3].b)) : (this.sky.material.uniforms.topColor.value.setRGB(this.colorTop[3].r, this.colorTop[3].g, this.colorTop[3].b), this.sky.material.uniforms.bottomColor.value.setRGB(this.colorBottom[3].r, 
      this.colorBottom[3].g, this.colorBottom[3].b));
    }
  }
  .2 > a ? this.sun.color.setHex(this.moonColor) : .3 > a ? (h = 10 * (a - .2), .5 > h ? (this.sun.intensity = .3 * (2 - 2 * h), this.sun.color.setHex(this.moonColor)) : (this.sun.intensity = .6 * h, this.sun.color.setHex(this.sunColor))) : .7 > a ? this.sun.color.setHex(this.sunColor) : .8 > a ? (h = 10 * (a - .7), .5 > h ? (this.sun.intensity = .3 * (2 - 2 * h), this.sun.color.setHex(this.sunColor)) : (this.sun.intensity = .6 * h, this.sun.color.setHex(this.moonColor))) : this.sun.color.setHex(this.moonColor);
  h = MathUtils.pi2 * a - MathUtils.pid2;
  .25 < a && .75 > a ? (this.sun.position.x = this.sunDistance * Math.cos(h), this.sun.position.y = this.sunDistance * Math.sin(h)) : (this.sun.position.x = this.sunDistance * Math.cos(h + Math.PI), this.sun.position.y = this.sunDistance * Math.sin(h + Math.PI));
};
Sky.prototype.toJSON = function(a) {
  a = THREE.Object3D.prototype.toJSON.call(this, a);
  a.object.colorTop = [];
  for (var h = 0;h < this.colorTop.length;h++) {
    a.object.colorTop.push(this.colorTop[h].toJSON());
  }
  a.object.colorBottom = [];
  for (h = 0;h < this.colorBottom.length;h++) {
    a.object.colorBottom.push(this.colorBottom[h].toJSON());
  }
  a.object.sunColor = this.sunColor;
  a.object.moonColor = this.moonColor;
  a.object.autoUpdate = this.autoUpdate;
  a.object.sunDistance = this.sunDistance;
  a.object.dayTime = this.dayTime;
  a.object.time = this.time;
  a.object.sun = {};
  a.object.sun.shadow = this.sun.shadow.toJSON();
  return a;
};
function PerspectiveCamera(a, h, l, b) {
  THREE.PerspectiveCamera.call(this, a, h, l, b);
  this.name = "camera";
  this.offset = new THREE.Vector2(0, 0);
  this.viewport = new THREE.Vector2(1, 1);
  this.clearDepth = this.clearColor = !1;
  this.order = 0;
}
PerspectiveCamera.prototype = Object.create(THREE.PerspectiveCamera.prototype);
PerspectiveCamera.prototype.destroy = function() {
  var a = ObjectUtils.getScene(this);
  null !== a && a.removeCamera(this);
  THREE.Object3D.prototype.destroy.call(this);
};
PerspectiveCamera.prototype.updateMatrixWorld = function(a) {
  !0 === this.matrixAutoUpdate && this.updateMatrix();
  if (!0 === this.matrixWorldNeedsUpdate || !0 === a) {
    null !== this.parent ? this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix) : this.matrixWorld = this.matrix, this.matrixWorldNeedsUpdate = !1, a = !0;
  }
  for (var h = this.children, l = 0;l < h.length;l++) {
    h[l].updateMatrixWorld(a);
  }
};
PerspectiveCamera.prototype.updateProjectionMatrix = function() {
  var a = this.near * Math.tan(.5 * THREE.Math.DEG2RAD * this.fov) / this.zoom, h = 2 * a, l = this.aspect * h * (void 0 !== this.viewport ? this.viewport.x / this.viewport.y : 1), b = -.5 * l;
  0 !== this.filmOffset && (b += this.near * this.filmOffset / this.getFilmWidth());
  this.projectionMatrix.makePerspective(b, b + l, a, a - h, this.near, this.far);
};
PerspectiveCamera.prototype.toJSON = function(a) {
  a = THREE.PerspectiveCamera.prototype.toJSON.call(this, a);
  a.object.clearColor = this.clearColor;
  a.object.clearDepth = this.clearDepth;
  a.object.viewport = this.viewport.toArray();
  a.object.offset = this.offset.toArray();
  a.object.order = this.order;
  return a;
};
function OrthographicCamera(a, h, l, b, g) {
  THREE.OrthographicCamera.call(this, -1, 1, 1, -1, b, g);
  this.name = "camera";
  this.size = void 0 != a ? a : 10;
  this.aspect = void 0 != h ? h : 1;
  this.mode = void 0 !== l ? l : OrthographicCamera.RESIZE_HORIZONTAL;
  this.offset = new THREE.Vector2(0, 0);
  this.viewport = new THREE.Vector2(1, 1);
  this.clearDepth = this.clearColor = !1;
  this.order = 0;
  this.updateProjectionMatrix();
}
OrthographicCamera.prototype = Object.create(THREE.OrthographicCamera.prototype);
OrthographicCamera.RESIZE_HORIZONTAL = 0;
OrthographicCamera.RESIZE_VERTICAL = 1;
OrthographicCamera.prototype.destroy = function() {
  var a = ObjectUtils.getScene(this);
  null !== a && a.removeCamera(this);
  THREE.Object3D.prototype.destroy.call(this);
};
OrthographicCamera.prototype.updateProjectionMatrix = function() {
  this.mode === OrthographicCamera.RESIZE_HORIZONTAL ? (this.top = this.size / 2, this.bottom = -this.top, this.right = this.viewport.x / this.viewport.y * this.aspect * this.top, this.left = -this.right) : this.mode === OrthographicCamera.RESIZE_VERTICAL && (this.right = this.size / 2, this.left = -this.right, this.top = this.right / this.aspect * (this.viewport.x / this.viewport.y), this.bottom = -this.top);
  THREE.OrthographicCamera.prototype.updateProjectionMatrix.call(this);
};
OrthographicCamera.prototype.toJSON = function(a) {
  a = THREE.OrthographicCamera.prototype.toJSON.call(this, a);
  a.object.size = this.size;
  a.object.aspect = this.aspect;
  a.object.mode = this.mode;
  a.object.clearColor = this.clearColor;
  a.object.clearDepth = this.clearDepth;
  a.object.viewport = this.viewport.toArray();
  a.object.offset = this.offset.toArray();
  a.object.order = this.order;
  return a;
};
function AudioEmitter(a) {
  THREE.Audio.call(this, AudioEmitter.listener);
  this.name = "audio";
  this.type = "Audio";
  this.matrixAutoUpdate = !1;
  this.audio = void 0 !== a ? a : null;
  this.volume = 1;
  this.autoplay = !0;
  this.playbackRate = 1;
  this.startTime = 0;
  this.loop = !0;
  this.isPlaying = !1;
  this.hasPlaybackControl = !0;
}
AudioEmitter.listener = new THREE.AudioListener;
AudioEmitter.prototype = Object.create(THREE.Audio.prototype);
AudioEmitter.prototype.initialize = function() {
  var a = this;
  null !== this.audio && THREE.AudioContext.getContext().decodeAudioData(this.audio.data, function(h) {
    a.setBuffer(h);
  });
  this.setVolume(this.volume);
  this.setPlaybackRate(this.playbackRate);
  for (var h = 0;h < this.children.length;h++) {
    this.children[h].initialize();
  }
};
AudioEmitter.prototype.dispose = function() {
  this.isPlaying && (this.stop(), this.disconnect());
  for (var a = 0;a < this.children.length;a++) {
    this.children[a].dispose();
  }
};
AudioEmitter.prototype.setVolume = function(a) {
  this.volume = a;
  this.gain.gain.value = a;
  return this;
};
AudioEmitter.prototype.toJSON = function(a) {
  var h = this.audio;
  a = THREE.Object3D.prototype.toJSON.call(this, a, function(a, b) {
    h = h.toJSON(a);
  });
  a.object.audio = h.uuid;
  a.object.volume = this.volume;
  a.object.autoplay = this.autoplay;
  a.object.startTime = this.startTime;
  a.object.playbackRate = this.playbackRate;
  a.object.loop = this.loop;
  return a;
};
function PositionalAudio(a) {
  THREE.PositionalAudio.call(this, AudioEmitter.listener);
  this.name = "audio";
  this.type = "PositionalAudio";
  this.audio = void 0 !== a ? a : null;
  this.volume = 1;
  this.autoplay = !0;
  this.playbackRate = 1;
  this.startTime = 0;
  this.loop = !0;
  this.isPlaying = !1;
  this.hasPlaybackControl = !0;
  this.cameras = null;
  this.tempA = new THREE.Vector3;
  this.tempB = new THREE.Vector3;
}
PositionalAudio.prototype = Object.create(THREE.PositionalAudio.prototype);
PositionalAudio.prototype.initialize = function() {
  var a = this;
  null !== this.audio && THREE.AudioContext.getContext().decodeAudioData(this.audio.data, function(h) {
    a.setBuffer(h);
  });
  this.setVolume(this.volume);
  this.setPlaybackRate(this.playbackRate);
  for (var h = this;null !== h.parent;) {
    h = h.parent, h instanceof Scene && (this.cameras = h.cameras);
  }
  for (h = 0;h < this.children.length;h++) {
    this.children[h].initialize();
  }
};
PositionalAudio.prototype.update = function() {
  this.tempA.setFromMatrixPosition(this.matrixWorld);
  0 < this.cameras.length && (this.tempB.setFromMatrixPosition(this.cameras[0].matrixWorld), this.tempA.sub(this.tempB));
  this.panner.setPosition(this.tempA.x, this.tempA.y, this.tempA.z);
  for (var a = 0;a < this.children.length;a++) {
    this.children[a].update();
  }
};
PositionalAudio.prototype.dispose = function() {
  this.isPlaying && (this.stop(), this.disconnect());
  for (var a = 0;a < this.children.length;a++) {
    this.children[a].dispose();
  }
};
PositionalAudio.prototype.setVolume = function(a) {
  this.volume = a;
  this.gain.gain.value = a;
  return this;
};
PositionalAudio.prototype.toJSON = function(a) {
  var h = this.audio;
  a = THREE.Object3D.prototype.toJSON.call(this, a, function(a, b) {
    h = h.toJSON(a);
  });
  a.object.audio = h.uuid;
  a.object.volume = this.volume;
  a.object.autoplay = this.autoplay;
  a.object.startTime = this.startTime;
  a.object.playbackRate = this.playbackRate;
  a.object.loop = this.loop;
  return a;
};
function Script(a) {
  THREE.Object3D.call(this);
  this.type = "Script";
  this.name = "script";
  this.script = null;
  this.code = void 0 !== a ? a : Script.default;
  this.scene = this.program = null;
}
Script.prototype = Object.create(THREE.Object3D.prototype);
Script.default = "this.initialize = function()\n{\n\t//TODO <INITIALIZATION CODE>\n};\n\nthis.update = function()\n{\n\t//TODO <UPDATE CODE>\n};\n\nthis.onMouseOver = function()\n{\n\t//TODO <MOUSE OVER CHILDREN CODE>\n};\n\nthis.onResize = function()\n{\n\t//TODO <RESIZE CODE>\n};";
Script.prototype.initialize = function() {
  for (var a = this;null !== a.parent;) {
    a = a.parent, a instanceof Scene ? this.scene = a : a instanceof Program && (this.program = a);
  }
  this.setCode(this.code);
  for (a = 0;a < this.children.length;a++) {
    this.children[a].initialize();
  }
  void 0 !== this.script.initialize && this.script.initialize.call(this);
};
Script.prototype.update = function() {
  if (void 0 !== this.script.onMouseOver) {
    var a = this.scene.raycaster.intersectObjects(this.children, !0);
    0 < a.length && this.script.onMouseOver.call(this, a);
  }
  void 0 !== this.script.update && this.script.update.call(this);
  for (a = 0;a < this.children.length;a++) {
    this.children[a].update();
  }
};
Script.prototype.resize = function() {
  void 0 !== this.script.onResize && this.script.onResize.call(this);
};
Script.prototype.appData = function(a) {
  void 0 !== this.script.onAppData && this.script.onAppData.call(this);
};
Script.prototype.setCode = function(a) {
  void 0 !== a && (this.code = a);
  try {
    var h = new Function("Keyboard, Mouse, self, program, scene", this.code);
    null !== this.program && (this.script = new h(this.program.keyboard, this.program.mouse, this, this.program, this.scene));
  } catch (l) {
    console.warn("nunuStudio: Error compiling script code", l), this.script = new function() {
    };
  }
};
Script.prototype.toJSON = function(a) {
  a = THREE.Object3D.prototype.toJSON.call(this, a);
  a.object.code = this.code;
  return a;
};
function PhysicsObject() {
  THREE.Object3D.call(this);
  this.name = "physics";
  this.type = "Physics";
  this.body = new CANNON.Body;
  this.body.type = CANNON.Body.DYNAMIC;
  this.body.mass = 1;
  this.world = null;
}
PhysicsObject.prototype = Object.create(THREE.Object3D.prototype);
PhysicsObject.prototype.initialize = function() {
  this.body.position.copy(this.position);
  this.body.quaternion.copy(this.quaternion);
  for (var a = this;null !== a.parent;) {
    a = a.parent, a instanceof Scene && (this.world = a.world, this.world.addBody(this.body));
  }
  for (a = 0;a < this.children.length;a++) {
    this.children[a].initialize();
  }
};
PhysicsObject.prototype.update = function() {
  this.position.copy(this.body.position);
  this.body.fixedRotation || this.quaternion.copy(this.body.quaternion);
  for (var a = 0;a < this.children.length;a++) {
    this.children[a].update();
  }
};
PhysicsObject.prototype.addShape = function(a) {
  a instanceof CANNON.Shape && this.body.addShape(a);
};
PhysicsObject.prototype.toJSON = function(a) {
  a = THREE.Object3D.prototype.toJSON.call(this, a);
  a.object.body = {};
  a.object.body.type = this.body.type;
  a.object.body.mass = this.body.mass;
  a.object.body.linearDamping = this.body.linearDamping;
  a.object.body.angularDamping = this.body.angularDamping;
  a.object.body.allowSleep = this.body.allowSleep;
  a.object.body.sleepSpeedLimit = this.body.sleepSpeedLimit;
  a.object.body.sleepTimeLimit = this.body.sleepTimeLimit;
  a.object.body.collisionFilterGroup = this.body.collisionFilterGroup;
  a.object.body.collisionFilterMask = this.body.collisionFilterMask;
  a.object.body.fixedRotation = this.body.fixedRotation;
  a.object.body.shapes = [];
  for (var h = this.body.shapes, l = 0;l < h.length;l++) {
    var b = h[l], g = {};
    g.type = b.type;
    b.type === CANNON.Shape.types.SPHERE ? g.radius = b.radius : b.type === CANNON.Shape.types.BOX ? (g.halfExtents = {}, g.halfExtents.x = b.halfExtents.x, g.halfExtents.y = b.halfExtents.y, g.halfExtents.z = b.halfExtents.z) : b.type === CANNON.Shape.types.CONVEXPOLYHEDRON && (g.vertices = b.vertices, g.faces = b.faces);
    a.object.body.shapes[l] = g;
  }
  return a;
};
function SpineAnimation(a, h, l, b) {
  if (void 0 !== b) {
    var g = new spine.TextureAtlas(h, function(a) {
      for (var c = 0;c < b.length;c++) {
        if (b[c].name === a) {
          return a = new SpineTexture(b[c].texture), c = a.texture.image, c.width = 1024, c.height = 1024, a;
        }
      }
    });
  } else {
    b = [], g = new spine.TextureAtlas(h, function(a) {
      var c = new SpineTexture(new Texture(new Image(l + "\\" + a))), e = c.texture.image;
      e.width = 1024;
      e.height = 1024;
      b.push({name:a, texture:c.texture});
      return c;
    });
  }
  g = new spine.AtlasAttachmentLoader(g);
  g = (new spine.SkeletonJson(g)).readSkeletonData(a);
  THREE.Mesh.call(this);
  this.zOffset = .1;
  this.skeleton = new spine.Skeleton(g);
  g = new spine.AnimationStateData(g);
  this.state = new spine.AnimationState(g);
  this.batcher = new spine.threejs.MeshBatcher(this);
  g = new THREE.MeshBasicMaterial;
  g.side = THREE.DoubleSide;
  g.transparent = !0;
  g.name = "spine";
  g.alphaTest = .5;
  this.material = g;
  this.json = a;
  this.atlas = h;
  this.textures = b;
  this.name = "spine";
  this.type = "SpineAnimation";
  this.scale.set(.01, .01, .01);
  this.frustumCulled = !1;
  this.castShadow = this.receiveShadow = !0;
  this.clock = new THREE.Clock;
}
SpineAnimation.prototype = Object.create(THREE.Mesh.prototype);
SpineAnimation.QUAD_TRIANGLES = [0, 1, 2, 2, 3, 0];
SpineAnimation.prototype.update = function() {
  var a = this.state, h = this.skeleton;
  a.update(this.clock.getDelta());
  a.apply(h);
  h.updateWorldTransform();
  this.updateGeometry();
  for (a = 0;a < this.children.length;a++) {
    this.children[a].update();
  }
};
SpineAnimation.prototype.getAnimations = function() {
  return this.state.data.skeletonData.animations;
};
SpineAnimation.prototype.setAnimation = function(a, h) {
  try {
    this.state.setAnimation(a, h, !0);
  } catch (l) {
  }
};
SpineAnimation.prototype.getSkins = function() {
  return this.state.data.skeletonData.skins;
};
SpineAnimation.prototype.updateGeometry = function() {
  var a, h, l = this.skeleton.drawOrder, b = 0, g = this.batcher;
  g.begin();
  for (var k = 0, c = l.length;k < c;k++) {
    a = l[k];
    h = a.getAttachment();
    var e;
    if (h instanceof spine.RegionAttachment) {
      e = h, a = e.updateWorldVertices(a, !1), h = SpineAnimation.QUAD_TRIANGLES, e = e.region.renderObject.texture;
    } else {
      if (h instanceof spine.MeshAttachment) {
        e = h, a = e.updateWorldVertices(a, !1), h = e.triangles, e = e.region.renderObject.texture;
      } else {
        continue;
      }
    }
    if (null !== e) {
      if (!this.material.map) {
        var f = this.material;
        f.map = e.texture;
        f.needsUpdate = !0;
      }
      g.batch(a, h, b);
      b += this.zOffset;
    }
  }
  g.end();
};
SpineAnimation.prototype.toJSON = function(a) {
  var h = this.geometry, l = this.material;
  this.material = this.geometry = void 0;
  var b = [], g = this;
  a = THREE.Object3D.prototype.toJSON.call(this, a, function(a, c) {
    for (c = 0;c < g.textures.length;c++) {
      var e = g.textures[c].texture.toJSON(a);
      b.push({name:g.textures[c].name, texture:e.uuid});
    }
  });
  a.object.json = this.json;
  a.object.atlas = this.atlas;
  a.object.textures = b;
  this.geometry = h;
  this.material = l;
  return a;
};
function SpineTexture(a) {
  spine.Texture.call(this, a.image);
  this.texture = a;
  this.texture.flipY = !1;
}
SpineTexture.prototype = Object.create(spine.Texture.prototype);
SpineTexture.prototype.setFilters = function(a, h) {
  this.texture.minFilter = SpineTexture.getTextureFilter(a);
  this.texture.magFilter = SpineTexture.getTextureFilter(h);
};
SpineTexture.prototype.setWraps = function(a, h) {
  this.texture.wrapS = SpineTexture.getTextureWrap(a);
  this.texture.wrapT = SpineTexture.getTextureWrap(h);
};
SpineTexture.prototype.dispose = function() {
  this.texture.dispose();
};
SpineTexture.getTextureFilter = function(a) {
  return a === spine.TextureFilter.Linear ? THREE.LinearFilter : a === spine.TextureFilter.MipMap || a === spine.TextureFilter.MipMapLinearLinear ? THREE.LinearMipMapLinearFilter : a === spine.TextureFilter.MipMapLinearNearest ? THREE.LinearMipMapNearestFilter : a === spine.TextureFilter.MipMapNearestLinear ? THREE.NearestMipMapLinearFilter : a === spine.TextureFilter.MipMapNearestNearest ? THREE.NearestMipMapNearestFilter : a === spine.TextureFilter.Nearest ? THREE.NearestFilter : null;
};
SpineTexture.getTextureWrap = function(a) {
  if (a === spine.TextureWrap.ClampToEdge) {
    return THREE.ClampToEdgeWrapping;
  }
  if (a === spine.TextureWrap.MirroredRepeat) {
    return THREE.MirroredRepeatWrapping;
  }
  if (a === spine.TextureWrap.Repeat) {
    return THREE.RepeatWrapping;
  }
};
function ParticleEmitter(a, h) {
  this.clock = new THREE.Clock;
  this.group = void 0 !== a ? new SPE.Group(a) : new SPE.Group({texture:{value:null}, maxParticleCount:2E3, blending:THREE.AdditiveBlending, fog:!1, depthWrite:!1, depthTest:!0, transparent:!1, hasPerspective:!0});
  THREE.Points.call(this, this.group.geometry, this.group.material);
  this.type = "ParticleEmiter";
  this.name = "particle";
  this.frustumCulled = !1;
  a = this.group;
  Object.defineProperties(this, {texture:{get:function() {
    return a.texture;
  }, set:function(h) {
    a.texture = h;
  }}});
  this.emitter = void 0 !== h ? new SPE.Emitter(h) : new SPE.Emitter({particleCount:2E3, type:SPE.distributions.BOX, maxAge:{value:3, spread:0}, velocity:{value:new THREE.Vector3(0, 25, 0), spread:new THREE.Vector3(10, 10, 10)}, acceleration:{value:new THREE.Vector3(0, -10, 0), spread:new THREE.Vector3(10, 0, 10)}, color:{value:[new THREE.Color(1, 1, 1)], spread:[new THREE.Vector3(0, 0, 0)]}});
  this.group.addEmitter(this.emitter);
  this.raycast = function() {
    return null;
  };
}
ParticleEmitter.prototype = Object.create(THREE.Points.prototype);
ParticleEmitter.prototype.initialize = function() {
  for (var a = 0;a < this.children.length;a++) {
    this.children[a].initialize();
  }
  this.clock.start();
};
ParticleEmitter.prototype.update = function() {
  this.group.tick(this.clock.getDelta());
  for (var a = 0;a < this.children.length;a++) {
    this.children[a].update();
  }
};
ParticleEmitter.prototype.dispose = function() {
  this.group.texture.dispose();
  for (var a = 0;a < this.children.length;a++) {
    this.children[a].dispose();
  }
};
ParticleEmitter.prototype.updateMatrix = function() {
  this.matrix.makeRotationFromQuaternion(this.quaternion);
  this.matrix.scale(this.scale);
  this.matrix.setPosition(this.position);
  this.matrixWorldNeedsUpdate = !0;
};
ParticleEmitter.prototype.toJSON = function(a) {
  var h = this.material, l = this.geometry;
  this.geometry = this.material = void 0;
  var b = this.group.texture;
  a = THREE.Object3D.prototype.toJSON.call(this, a, function(a, h) {
    b = b.toJSON(a);
  });
  this.material = h;
  this.geometry = l;
  a.object.group = {};
  a.object.group.texture = {};
  a.object.group.texture.value = b.uuid;
  a.object.group.textureFrames = this.group.textureFrames;
  a.object.group.textureFrameCount = this.group.textureFrameCount;
  a.object.group.textureLoop = this.group.textureLoop;
  a.object.group.hasPerspective = this.group.hasPerspective;
  a.object.group.colorize = this.group.colorize;
  a.object.group.maxParticleCount = this.group.maxParticleCount;
  a.object.group.blending = this.group.blending;
  a.object.group.scale = this.group.scale;
  a.object.group.depthWrite = this.group.depthWrite;
  a.object.group.depthTest = this.group.depthTest;
  a.object.group.fog = this.group.fog;
  a.object.emitter = {};
  a.object.emitter.uuid = this.emitter.uuid;
  a.object.emitter.direction = this.emitter.direction;
  a.object.emitter.particleCount = this.emitter.particleCount;
  a.object.emitter.duration = this.emitter.duration;
  a.object.emitter.type = this.emitter.type;
  a.object.emitter.maxAge = {};
  a.object.emitter.maxAge.value = this.emitter.maxAge.value;
  a.object.emitter.maxAge.spread = this.emitter.maxAge.spread;
  a.object.emitter.position = {};
  a.object.emitter.position.value = this.emitter.position.value;
  a.object.emitter.position.spread = this.emitter.position.spread;
  a.object.emitter.velocity = {};
  a.object.emitter.velocity.value = this.emitter.velocity.value;
  a.object.emitter.velocity.spread = this.emitter.velocity.spread;
  a.object.emitter.acceleration = {};
  a.object.emitter.acceleration.value = this.emitter.acceleration.value;
  a.object.emitter.acceleration.spread = this.emitter.acceleration.spread;
  a.object.emitter.wiggle = {};
  a.object.emitter.wiggle.value = this.emitter.wiggle.value;
  a.object.emitter.wiggle.spread = this.emitter.wiggle.spread;
  a.object.emitter.opacity = {};
  a.object.emitter.opacity.value = this.emitter.opacity.value;
  a.object.emitter.opacity.spread = this.emitter.opacity.spread;
  a.object.emitter.size = {};
  a.object.emitter.size.value = this.emitter.size.value;
  a.object.emitter.size.spread = this.emitter.size.spread;
  a.object.emitter.angle = {};
  a.object.emitter.angle.value = this.emitter.angle.value;
  a.object.emitter.angle.spread = this.emitter.angle.spread;
  a.object.emitter.color = {};
  a.object.emitter.color.value = this.emitter.color.value;
  a.object.emitter.color.spread = this.emitter.color.spread;
  return a;
};
function Bone() {
  THREE.Bone.call(this);
  this.name = "bone";
}
Bone.prototype = Object.create(THREE.Bone.prototype);
function Container() {
  THREE.Object3D.call(this);
  this.name = "container";
  this.type = "Group";
}
Container.prototype = Object.create(THREE.Object3D.prototype);
function Program(a) {
  THREE.Object3D.call(this);
  ResourceManager.call(this);
  this.type = "Program";
  this.matrixAutoUpdate = !1;
  this.app = null;
  this.name = void 0 !== a ? a : "program";
  this.author = this.description = "";
  this.version = "0";
  this.vr = this.lockPointer = !1;
  this.vrScale = 1;
  this.antialiasing = !1;
  this.shadows = !0;
  this.shadowsType = THREE.PCFSoftShadowMap;
  this.toneMapping = THREE.NoToneMapping;
  this.toneMappingWhitePoint = this.toneMappingExposure = 1;
  this.scene = this.canvas = this.renderer = this.mouse = this.keyboard = this.defaultCamera = this.defaultScene = null;
  this.useVr = !1;
  this.vrControls = this.vrEffect = null;
}
Program.prototype = Object.create(THREE.Object3D.prototype);
Program.prototype.getMaterialByName = ResourceManager.prototype.getMaterialByName;
Program.prototype.addMaterial = ResourceManager.prototype.addMaterial;
Program.prototype.removeMaterial = ResourceManager.prototype.removeMaterial;
Program.prototype.getTextureByName = ResourceManager.prototype.getTextureByName;
Program.prototype.addTexture = ResourceManager.prototype.addTexture;
Program.prototype.removeTexture = ResourceManager.prototype.removeTexture;
Program.prototype.getFontByName = ResourceManager.prototype.getFontByName;
Program.prototype.addFont = ResourceManager.prototype.addFont;
Program.prototype.removeFont = ResourceManager.prototype.removeFont;
Program.prototype.getAudioByName = ResourceManager.prototype.getAudioByName;
Program.prototype.addAudio = ResourceManager.prototype.addAudio;
Program.prototype.removeAudio = ResourceManager.prototype.removeAudio;
Program.prototype.initialize = function() {
  null === this.mouse && (this.mouse = new Mouse);
  null === this.keyboard && (this.keyboard = new keyboard);
  if (null !== this.defaultScene) {
    for (var a = 0;a < this.children.length;a++) {
      if (this.children[a].uuid === this.defaultScene) {
        this.setScene(this.children[a]);
        break;
      }
    }
  } else {
    0 < this.children.length && this.setScene(this.children[0]);
  }
};
Program.prototype.setMouseKeyboard = function(a, h) {
  this.mouse = a;
  this.keyboard = h;
};
Program.prototype.setRenderer = function(a) {
  this.renderer = a;
  this.canvas = a.domElement;
};
Program.prototype.displayVR = function() {
  if (this.vr) {
    try {
      this.useVr = !0, this.vrEffect = new THREE.VREffect(this.renderer), this.vrEffect.setFullScreen(!0);
    } catch (a) {
      this.useVr = !1, this.vrEffect = null, console.warn("nunuStudio: Failed to enter in VR mode", a);
    }
  }
};
Program.prototype.exitVR = function() {
  this.vr && (this.useVr = !1, null != this.vrEffect && (this.vrEffect.setFullScreen(!1), this.vrEffect.dispose(), this.vrEffect = null));
};
Program.prototype.update = function() {
  this.scene.update();
};
Program.prototype.render = function(a) {
  if (this.useVr) {
    for (var h = 0;h < this.scene.cameras.length;h++) {
      var l = this.scene.cameras[h];
      this.vrEffect.render(this.scene, l);
    }
  } else {
    var b = a.domElement.width, g = a.domElement.height;
    a.setScissorTest(!0);
    for (h = 0;h < this.scene.cameras.length;h++) {
      l = this.scene.cameras[h], l.clearColor && a.clearColor(), l.clearDepth && a.clearDepth(), a.setViewport(b * l.offset.x, g * l.offset.y, b * l.viewport.x, g * l.viewport.y), a.setScissor(b * l.offset.x, g * l.offset.y, b * l.viewport.x, g * l.viewport.y), a.render(this.scene, l);
    }
    a.setScissorTest(!1);
  }
};
Program.prototype.resize = function(a, h) {
  for (var l = 0;l < this.scene.cameras.length;l++) {
    this.scene.cameras[l].aspect = a / h, this.scene.cameras[l].updateProjectionMatrix();
  }
  this.traverse(function(a) {
    a instanceof Script && a.resize();
  });
};
Program.prototype.setScene = function(a) {
  a instanceof Scene ? this.scene = a : "string" === typeof a && (this.scene = this.getObjectByName(a));
  null !== this.scene && (this.scene.initialize(), 0 === this.scene.cameras.length && this.scene.cameras.push(this.defaultCamera));
};
Program.prototype.remove = function(a) {
  var h = this.children.indexOf(a);
  -1 < h && (this.children.splice(h, 1), a.parent = null);
  0 === this.children.length && (this.scene = null);
};
Program.prototype.add = function(a) {
  a instanceof Scene && (this.children.push(a), a.parent = this, 1 === this.children.length && (this.scene = this.children[0]));
};
Program.prototype.clone = function() {
  return (new ObjectLoader).parse(this.toJSON());
};
Program.prototype.setInitialScene = function(a) {
  this.defaultScene = a.uuid;
};
Program.prototype.addDefaultScene = function(a) {
  void 0 === a && (a = new THREE.MeshStandardMaterial({roughness:.6, metalness:.2}), a.name = "default");
  var h = new Scene, l = new Sky;
  l.autoUpdate = !1;
  h.add(l);
  var l = new THREE.BoxBufferGeometry(1, 1, 1), b = new Mesh(l, a);
  b.receiveShadow = !0;
  b.castShadow = !0;
  b.name = "box";
  h.add(b);
  b = new Mesh(l, a);
  b.scale.set(20, 1, 20);
  b.position.set(0, -1, 0);
  b.receiveShadow = !0;
  b.castShadow = !0;
  b.name = "ground";
  h.add(b);
  this.add(h);
};
Program.prototype.dispose = function() {
  for (var a in this.geometries) {
    this.geometries[a].dispose();
  }
  for (a in this.textures) {
    this.textures[a].dispose();
  }
  for (a in this.materials) {
    this.materials[a].dispose();
  }
  for (a = 0;a < this.children.length;a++) {
    this.children[a].dispose();
  }
};
Program.prototype.receiveDataApp = function(a) {
  var h = !1;
  this.traverse(function(l) {
    l instanceof Script && null !== l.script && void 0 !== l.script.onAppData && (l.appData(a), h = !0);
  });
  h || ("object" === typeof a ? console.warn("nunuStudio: No script with onAppData found", JSON.stringify(a)) : console.warn("nunuStudio: No script with onAppData found", a));
};
Program.prototype.sendDataApp = function(a) {
  if (null !== this.app) {
    if (void 0 !== this.app.onDataReceived) {
      this.app.onDataReceived(a);
    } else {
      console.warn("nunuStudio: App data communication", a);
    }
  } else {
    "object" === typeof a ? console.warn("nunuStudio: No app available", JSON.stringify(a)) : console.warn("nunuStudio: No app available", a);
  }
};
Program.prototype.toJSON = function(a, h) {
  var l = this;
  a = THREE.Object3D.prototype.toJSON.call(this, a, function(a, g) {
    if (!1 !== h) {
      g = l.textures;
      for (var b in g) {
        var c = g[b];
        void 0 === a.textures[c.uuid] && (a.textures[c.uuid] = c.toJSON(a));
      }
      g = l.materials;
      for (b in g) {
        c = g[b], void 0 === a.materials[c.uuid] && (a.materials[c.uuid] = c.toJSON(a));
      }
      g = l.fonts;
      for (b in g) {
        c = g[b], void 0 === a.fonts[c.uuid] && (a.fonts[c.uuid] = c.toJSON(a));
      }
      g = l.audio;
      for (b in g) {
        c = g[b], void 0 === a.audio[c.uuid] && (a.audio[c.uuid] = c.toJSON(a));
      }
    }
  });
  null !== this.defaultScene && (a.object.defaultScene = this.defaultScene);
  a.object.author = this.author;
  a.object.description = this.description;
  a.object.version = this.version;
  a.object.lockPointer = this.lockPointer;
  a.object.vr = this.vr;
  a.object.vrScale = this.vrScale;
  a.object.antialiasing = this.antialiasing;
  a.object.shadows = this.shadows;
  a.object.shadowsType = this.shadowsType;
  a.object.toneMapping = this.toneMapping;
  a.object.toneMappingExposure = this.toneMappingExposure;
  a.object.toneMappingWhitePoint = this.toneMappingWhitePoint;
  return a;
};
function Scene() {
  THREE.Scene.call(this);
  this.name = "scene";
  this.matrixAutoUpdate = !1;
  this.world = new CANNON.World;
  this.world.defaultContactMaterial.contactEquationStiffness = 1E9;
  this.world.defaultContactMaterial.contactEquationRelaxation = 4;
  this.world.quatNormalizeSkip = 0;
  this.world.quatNormalizeFast = !1;
  this.world.gravity.set(0, -9.8, 0);
  this.world.broadphase = new CANNON.NaiveBroadphase;
  this.world.solver = new CANNON.SplitSolver(new CANNON.GSSolver);
  this.world.solver.tolerance = .05;
  this.world.solver.iterations = 7;
  this.cameras = [];
  this.clock = new THREE.Clock;
  this.raycaster = new THREE.Raycaster;
  this.canvas = this.program = null;
  this.mouse = new THREE.Vector2(0, 0);
}
Scene.prototype = Object.create(THREE.Scene.prototype);
Scene.prototype.initialize = function() {
  this.program = this.parent;
  this.canvas = this.parent.canvas;
  this.clock.start();
  for (var a = 0;a < this.children.length;a++) {
    this.children[a].initialize();
  }
};
Scene.prototype.update = function() {
  this.mouse.set(this.program.mouse.position.x / this.canvas.width * 2 - 1, -2 * this.program.mouse.position.y / this.canvas.height + 1);
  0 < this.cameras.length && this.raycaster.setFromCamera(this.mouse, this.cameras[0]);
  var a = this.clock.getDelta();
  this.world.step(.05 > a ? a : .05);
  for (a = 0;a < this.children.length;a++) {
    this.children[a].update();
  }
};
Scene.prototype.getCamera = function(a, h) {
  void 0 === h && (h = this);
  if (a === h.uuid) {
    return h;
  }
  h = h.children;
  for (var l = 0;l < h.length;l++) {
    var b = this.getCamera(a, h[l]);
    if (null !== b) {
      return b;
    }
  }
  return null;
};
Scene.prototype.addCamera = function(a) {
  this.cameras.push(a);
  this.updateCameraOrder();
};
Scene.prototype.updateCameraOrder = function() {
  this.cameras.sort(function(a, h) {
    return a.order < h.order;
  });
};
Scene.prototype.removeCamera = function(a) {
  a = this.cameras.indexOf(a);
  -1 < a && this.cameras.splice(a, 1);
};
Scene.prototype.setFogMode = function(a) {
  var h = null !== this.fog ? this.fog.color.getHex() : "#FFFFFF";
  a === THREE.Fog.LINEAR ? this.fog = new THREE.Fog(h, 5, 20) : a === THREE.Fog.EXPONENTIAL ? this.fog = new THREE.FogExp2(h, .01) : a === THREE.Fog.NONE && (this.fog = null);
};
Scene.prototype.toJSON = function(a) {
  var h = this.background;
  a = THREE.Object3D.prototype.toJSON.call(this, a, function(a, g) {
    h instanceof THREE.Color ? h = h.toJSON(a) : h instanceof THREE.Texture && (h = h.toJSON(a).uuid);
  });
  null !== h && (a.object.background = h);
  null !== this.fog && (a.object.fog = this.fog.toJSON());
  a.object.cameras = [];
  for (var l = 0;l < this.cameras.length;l++) {
    a.object.cameras.push(this.cameras[l].uuid);
  }
  a.object.world = {};
  a.object.world.gravity = this.world.gravity;
  a.object.world.quatNormalizeSkip = this.world.quatNormalizeSkip;
  a.object.world.quatNormalizeFast = this.world.quatNormalizeFast;
  a.object.world.solver = {};
  a.object.world.solver.tolerance = this.world.solver.tolerance;
  a.object.world.solver.iterations = this.world.solver.iterations;
  return a;
};
function Base64Utils() {
}
Base64Utils.removeHeader = function(a) {
  return a.slice(a.search(";base64,") + 8);
};
Base64Utils.getFileFormat = function(a) {
  var h = a.indexOf("/") + 1, l = a.indexOf(";");
  return a.substr(h, l - h);
};
Base64Utils.fromArraybuffer = function(a) {
  var h = "";
  a = new Uint8Array(a);
  for (var l = a.byteLength % 3, b = a.byteLength - l, g, k, c, e, f = 0;f < b;f += 3) {
    e = a[f] << 16 | a[f + 1] << 8 | a[f + 2], g = (e & 16515072) >> 18, k = (e & 258048) >> 12, c = (e & 4032) >> 6, e &= 63, h += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"[g] + "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"[k] + "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"[c] + "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"[e];
  }
  1 === l ? (e = a[b], h += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"[(e & 252) >> 2] + "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"[(e & 3) << 4] + "==") : 2 === l && (e = a[b] << 8 | a[b + 1], h += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"[(e & 64512) >> 10] + "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"[(e & 1008) >> 4] + "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"[(e & 15) << 2] + 
  "=");
  return h;
};
Base64Utils.fromBinaryString = function(a) {
  for (var h = "", l = a.length % 3, b = a.length - l, g, k, c, e = 0;e < b;e += 3) {
    g = a.charCodeAt(e) & 255, k = a.charCodeAt(e + 1), c = a.charCodeAt(e + 2), h += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(g >> 2), h += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt((g & 3) << 4 | (k & 240) >> 4), h += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt((k & 15) << 2 | (c & 192) >> 6), h += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(c & 63);
  }
  1 === l ? (g = a.charCodeAt(e) & 255, h += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(g >> 2), h += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt((g & 3) << 4), h += "==") : 2 === l && (g = a.charCodeAt(e) & 255, k = a.charCodeAt(e + 1), h += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(g >> 2), h += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt((g & 3) << 4 | (k & 240) >> 4), h += 
  "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt((k & 15) << 2), h += "=");
  return h;
};
function ArraybufferUtils() {
}
ArraybufferUtils.fromBinaryString = function(a) {
  for (var h = a.length, l = new ArrayBuffer(h), b = new Uint8Array(l), g = 0;g < h;g++) {
    b[g] = a.charCodeAt(g);
  }
  return l;
};
ArraybufferUtils.fromBase64 = function(a) {
  for (var h = a.length / 4 * 3, l = new ArrayBuffer(h), b = new Uint8Array(l), g, k, c, e, f = 0, q = 0;f < h;f += 3) {
    g = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".indexOf(a.charAt(q++)), k = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".indexOf(a.charAt(q++)), c = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".indexOf(a.charAt(q++)), e = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".indexOf(a.charAt(q++)), b[f] = g << 2 | k >> 4, 64 !== c && (b[f + 1] = (k & 15) << 4 | c >> 2), 64 !== e && (b[f + 2] = (c & 3) << 6 | e);
  }
  return l;
};
ArraybufferUtils.fromBuffer = function(a) {
  for (var h = new ArrayBuffer(a.length), l = new Uint8Array(h), b = 0;b < a.length;b++) {
    l[b] = a[b];
  }
  return h;
};
function MathUtils() {
}
MathUtils.pi2 = 2 * Math.PI;
MathUtils.pid3 = Math.PI / 3;
MathUtils.pid2 = Math.PI / 2;
function ObjectUtils() {
}
ObjectUtils.getFonts = function(a, h) {
  void 0 === h && (h = []);
  a.traverse(function(a) {
    a.font instanceof Font && void 0 === h[a.font.uuid] && (h[a.font.uuid] = a.font);
  });
  return h;
};
ObjectUtils.getAudio = function(a, h) {
  void 0 === h && (h = []);
  a.traverse(function(a) {
    a.audio instanceof Audio && void 0 === h[a.audio.uuid] && (h[a.audio.uuid] = a.audio);
  });
  return h;
};
ObjectUtils.getMaterials = function(a, h) {
  function l(a) {
    void 0 === h[a.uuid] && (h[a.uuid] = a);
  }
  void 0 === h && (h = []);
  a.traverse(function(a) {
    if (!(void 0 === a.material || a.hidden || a instanceof ParticleEmitter || a instanceof Sky || a instanceof SpineAnimation)) {
      if (a.material instanceof THREE.Material) {
        l(a.material);
      } else {
        if (a.material instanceof THREE.MultiMaterial) {
          for (var b = a.material.materials, h = 0;h < b.length;h++) {
            l(b[h]);
          }
        }
      }
      if (void 0 !== a.materials) {
        for (h = 0;h < a.materials.length;h++) {
          l(a.materials[h]);
        }
      }
    }
  });
  return h;
};
ObjectUtils.getTextures = function(a, h) {
  function l(a) {
    b(a.map);
    b(a.bumpMap);
    b(a.normalMap);
    b(a.displacementMap);
    b(a.specularMap);
    b(a.emissiveMap);
    b(a.alphaMap);
    b(a.roughnessMap);
    b(a.metalnessMap);
  }
  function b(a) {
    null != a && void 0 === h[a.uuid] && (h[a.uuid] = a);
  }
  void 0 === h && (h = []);
  a.traverse(function(a) {
    if (void 0 !== a.material) {
      if (a.material instanceof THREE.Material) {
        l(a.material);
      } else {
        if (a.material instanceof THREE.MultiMaterial) {
          for (var g = a.material.materials, c = 0;c < g.length;c++) {
            l(g[c]);
          }
        }
      }
    }
    void 0 !== a.texture && b(a.texture);
  });
  return h;
};
ObjectUtils.getScene = function(a) {
  for (;null !== a.parent;) {
    if (a = a.parent, a instanceof Scene) {
      return a;
    }
  }
  return null;
};
ObjectUtils.getRoot = function(a) {
  for (;null !== a.parent;) {
    a = a.parent;
  }
  return a;
};
ObjectUtils.setMatrixAutoUpdate = function(a, h) {
  a.matrixAutoUpdate = h;
  a.traverse(function(a) {
    a.matrixAutoUpdate = h;
  });
};
ObjectUtils.setShadowReceiving = function(a, h) {
  a.receiveShadow = h;
  a.traverse(function(a) {
    a.receiveShadow = h;
  });
};
ObjectUtils.setShadowCasting = function(a, h) {
  a.castShadow = h;
  a.traverse(function(a) {
    a.castShadow = h;
  });
};
ObjectUtils.isChildOf = function(a, h) {
  for (var l = 0;l < a.children.length;l++) {
    if (a.children[l] === h || ObjectUtils.isChildOf(a.children[l], h)) {
      return !0;
    }
  }
  return !1;
};
function BufferUtils() {
}
BufferUtils.fromArrayBuffer = function(a) {
  var h = new Buffer(a.byteLength);
  a = new Uint8Array(a);
  for (var l = 0;l < h.length;l++) {
    h[l] = a[l];
  }
  return h;
};
function NunuApp(a) {
  this.renderer = this.program = null;
  this.vr = this.fullscreen = !1;
  void 0 === a ? (this.canvas = document.createElement("canvas"), this.canvas.style.position = "absolute", this.canvas.style.left = "0px", this.canvas.style.top = "0px", this.canvas.style.width = window.innerWidth + "px", this.canvas.style.height = window.innerHeight + "px", this.canvas.width = window.innerWidth, this.canvas.height = window.innerHeight, document.body.appendChild(this.canvas), this.canvasResize = !0) : (this.canvas = a, this.canvasResize = !1);
  a = this.canvas;
  this.lockMouse = function() {
    a.requestPointerLock ? a.requestPointerLock() : a.mozRequestPointerLock ? a.mozRequestPointerLock() : a.webkitRequestPointerLock && a.webkitRequestPointerLock();
  };
}
NunuApp.prototype.loadRunProgram = function(a, h, l) {
  var b = new ObjectLoader, g = this;
  FileSystem.readFile(a, !1, function(a) {
    g.program = b.parse(JSON.parse(a));
    g.run();
    void 0 !== h && h();
  }, l);
};
NunuApp.prototype.loadProgram = function(a) {
  var h = new ObjectLoader;
  a = FileSystem.readFile(a);
  this.program = h.parse(JSON.parse(a));
};
NunuApp.prototype.run = function() {
  if (null === this.program) {
    console.warn("nunuStudio: no program is loaded [app.loadPogram(fname)]");
  } else {
    this.renderer = new THREE.WebGLRenderer({canvas:this.canvas, antialias:!0});
    this.renderer.autoClear = !1;
    this.renderer.shadowMap.enabled = !0;
    this.renderer.shadowMap.type = THREE.PCFShadowMap;
    this.renderer.setSize(this.canvas.width, this.canvas.height);
    this.keyboard = new Keyboard;
    this.mouse = new Mouse;
    this.mouse.setCanvas(this.canvas);
    this.program.app = this;
    this.program.defaultCamera = new PerspectiveCamera(60, this.canvas.width / this.canvas.height, .1, 1E6);
    this.program.defaultCamera.position.set(0, 5, -5);
    this.program.setRenderer(this.renderer);
    this.program.setMouseKeyboard(this.mouse, this.keyboard);
    this.program.initialize();
    this.program.resize(this.canvas.width, this.canvas.height);
    this.program.lockPointer && this.canvas.addEventListener("click", this.lockMouse, !1);
    var a = this, h = function() {
      null !== a.program && (requestAnimationFrame(h), a.update());
    };
    h();
  }
};
NunuApp.prototype.update = function() {
  this.mouse.update();
  this.keyboard.update();
  this.program.update();
  this.program.render(this.renderer);
};
NunuApp.prototype.exit = function() {
  this.program.lockPointer && this.canvas.removeEventListener("click", this.lockMouse, !1);
  null !== this.program && (this.program.dispose(), this.program = null);
  this.mouse.dispose();
  this.keyboard.dispose();
  if (void 0 !== this.onExit) {
    this.onExit();
  }
};
NunuApp.prototype.resize = function() {
  null !== this.canvas && this.canvasResize && (this.canvas.style.width = window.innerWidth + "px", this.canvas.style.height = window.innerHeight + "px", this.canvas.width = window.innerWidth, this.canvas.height = window.innerHeight);
  null !== this.program && null !== this.renderer && (this.renderer.setSize(this.canvas.width, this.canvas.height), this.program.resize(this.canvas.width, this.canvas.height));
};
NunuApp.prototype.sendData = function(a) {
  null !== this.program && this.program.receiveDataApp(a);
};
NunuApp.prototype.setOnDataReceived = function(a) {
  this.onDataReceived = a;
};
NunuApp.prototype.setOnExit = function(a) {
  this.onExit = a;
};
NunuApp.prototype.vrAvailable = function() {
  return this.program.vr && Nunu.webvrAvailable();
};
NunuApp.prototype.toggleVR = function() {
  this.vrAvailable() ? this.vr ? (this.program.exitVR(), this.vr = !1) : (this.program.displayVR(), this.vr = !0) : console.warn("nunuStudio: loaded program is not VR enabled");
};
NunuApp.prototype.setFullscreen = function(a, h) {
  (this.fullscreen = void 0 !== a ? a : !this.fullscreen) ? (void 0 === h && (h = this.canvas), h.requestFullscreen = h.requestFullscreen || h.mozRequestFullScreen || h.webkitRequestFullscreen || h.msRequestFullscreen, h.requestFullscreen && h.requestFullscreen()) : (document.exitFullscreen = document.exitFullscreen || document.mozCancelFullScreen || document.webkitExitFullscreen, document.exitFullscreen && document.exitFullscreen());
};

